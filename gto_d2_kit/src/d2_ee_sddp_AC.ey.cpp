/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_sddp_AC.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
//
void second_derivative_ee_0221_13(const double ae,
                                  const double xA,
                                  const double yA,
                                  const double zA,
                                  const double be,
                                  const double xB,
                                  const double yB,
                                  const double zB,
                                  const double ce,
                                  const double xC,
                                  const double yC,
                                  const double zC,
                                  const double de,
                                  const double xD,
                                  const double yD,
                                  const double zD,
                                  const double* const bs,
                                  double* const d2eexx,
                                  double* const d2eexy,
                                  double* const d2eexz,
                                  double* const d2eeyx,
                                  double* const d2eeyy,
                                  double* const d2eeyz,
                                  double* const d2eezx,
                                  double* const d2eezy,
                                  double* const d2eezz)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C88269 = ae * be;
    const double C88268 = ae + be;
    const double C88267 = 0 * be;
    const double C88266 = xA - xB;
    const double C88293 = 0 * ce;
    const double C88292 = ce * de;
    const double C88291 = 0 * de;
    const double C88290 = ce + de;
    const double C88289 = 0 * de;
    const double C88288 = xC - xD;
    const double C88343 = yC - yD;
    const double C88350 = zC - zD;
    const double C88362 = 0 * de;
    const double C88382 = 0 * ce;
    const double C88378 = 0 * de;
    const double C88409 = 0 * de;
    const double C88427 = 0 * ce;
    const double C88423 = 0 * de;
    const double C88489 = 0 * be;
    const double C88488 = yA - yB;
    const double C88504 = 0 * be;
    const double C88503 = zA - zB;
    const double C88526 = p + q;
    const double C88525 = p * q;
    const double C88531 = xP - xQ;
    const double C88530 = bs[2];
    const double C88540 = ae * ce;
    const double C88536 = bs[3];
    const double C88549 = bs[4];
    const double C88570 = bs[5];
    const double C88612 = bs[6];
    const double C88673 = yP - yQ;
    const double C88731 = zP - zQ;
    const double C107 = bs[0];
    const double C88270 = std::pow(C88268, 2);
    const double C90743 = 2 * C88268;
    const double C88271 = C88269 * C88266;
    const double C90481 = std::pow(C88266, 2);
    const double C90742 = C88266 * ae;
    const double C88298 = C88293 / C88290;
    const double C88295 = 2 * C88290;
    const double C88294 = std::pow(C88290, 2);
    const double C88532 = C88290 * C88268;
    const double C88297 = C88292 * C88288;
    const double C88296 = C88288 * C88291;
    const double C90494 = C88288 * de;
    const double C90493 = C88288 * ce;
    const double C90492 = std::pow(C88288, 2);
    const double C88363 = C88292 * C88343;
    const double C90537 = std::pow(C88343, 2);
    const double C90551 = C88343 * de;
    const double C90550 = C88343 * ce;
    const double C88410 = C88292 * C88350;
    const double C90563 = std::pow(C88350, 2);
    const double C90575 = C88350 * de;
    const double C90574 = C88350 * ce;
    const double C88379 = C88343 * C88362;
    const double C88387 = C88382 / C88290;
    const double C88424 = C88350 * C88409;
    const double C88432 = C88427 / C88290;
    const double C88490 = C88269 * C88488;
    const double C90619 = std::pow(C88488, 2);
    const double C90764 = C88488 * ae;
    const double C88505 = C88269 * C88503;
    const double C90630 = std::pow(C88503, 2);
    const double C90765 = C88503 * ae;
    const double C88527 = 2 * C88525;
    const double C88541 = C88531 * ae;
    const double C88539 = std::pow(C88531, 2);
    const double C88537 = C88531 * ce;
    const double C88676 = C88531 * C88673;
    const double C88675 = C88673 * ce;
    const double C88791 = C88673 * C88531;
    const double C88790 = C88673 * ae;
    const double C88845 = std::pow(C88673, 2);
    const double C88734 = C88531 * C88731;
    const double C88733 = C88731 * ce;
    const double C88870 = C88673 * C88731;
    const double C88892 = C88731 * C88531;
    const double C88891 = C88731 * ae;
    const double C88946 = C88731 * C88673;
    const double C88967 = std::pow(C88731, 2);
    const double C88272 = 2 * C88270;
    const double C90768 = std::pow(C90743, -2);
    const double C90766 = std::pow(C90743, -1);
    const double C90482 = C90481 * C88269;
    const double C90502 = std::pow(C88295, -1);
    const double C90751 = std::pow(C88295, -2);
    const double C88299 = 2 * C88294;
    const double C90750 = 4 * C88294;
    const double C88300 = C88296 / C88290;
    const double C90495 = C90492 * C88292;
    const double C90538 = C90537 * C88292;
    const double C90564 = C90563 * C88292;
    const double C88384 = C88379 / C88290;
    const double C88429 = C88424 / C88290;
    const double C90620 = C90619 * C88269;
    const double C90631 = C90630 * C88269;
    const double C88529 = C88527 / C88526;
    const double C125 =
        (-((std::pow(xP - xQ, 2) * bs[2] * std::pow(C88527 / C88526, 2) -
            (bs[1] * C88527) / C88526) *
           ae * ce) /
         C88290) /
        C88268;
    const double C108 = -(C88531 * bs[1] * C88527) / C88526;
    const double C832 = -(C88673 * bs[1] * C88527) / C88526;
    const double C1700 = -(C88731 * bs[1] * C88527) / C88526;
    const double C88544 = C88536 * C88541;
    const double C88555 = C88549 * C88541;
    const double C88579 = C88570 * C88541;
    const double C88627 = C88612 * C88541;
    const double C113 = (-(bs[1] * C88541 * C88527) / C88526) / C88268;
    const double C88551 = C88539 * C88549;
    const double C88574 = C88539 * C88570;
    const double C88621 = C88539 * C88612;
    const double C88543 = C88536 * C88537;
    const double C88552 = C88549 * C88537;
    const double C88575 = C88570 * C88537;
    const double C88623 = C88612 * C88537;
    const double C116 = (bs[1] * C88537 * C88527) / (C88526 * C88290);
    const double C88678 = C88676 * ae;
    const double C88677 = C88536 * C88675;
    const double C88683 = C88549 * C88675;
    const double C88690 = C88570 * C88675;
    const double C88706 = C88612 * C88675;
    const double C182 = (bs[1] * C88675 * C88527) / (C88526 * C88290);
    const double C88793 = C88791 * ae;
    const double C88792 = C88536 * C88790;
    const double C88798 = C88549 * C88790;
    const double C88805 = C88570 * C88790;
    const double C88821 = C88612 * C88790;
    const double C308 = (-(bs[1] * C88790 * C88527) / C88526) / C88268;
    const double C88847 = C88845 * C88549;
    const double C88852 = C88845 * C88570;
    const double C88857 = C88845 * C88612;
    const double C88736 = C88734 * ae;
    const double C88735 = C88536 * C88733;
    const double C88741 = C88549 * C88733;
    const double C88748 = C88570 * C88733;
    const double C88764 = C88612 * C88733;
    const double C245 = (bs[1] * C88733 * C88527) / (C88526 * C88290);
    const double C88871 = C88870 * ae;
    const double C88894 = C88892 * ae;
    const double C88893 = C88536 * C88891;
    const double C88899 = C88549 * C88891;
    const double C88906 = C88570 * C88891;
    const double C88922 = C88612 * C88891;
    const double C555 = (-(bs[1] * C88891 * C88527) / C88526) / C88268;
    const double C88947 = C88946 * ae;
    const double C88969 = C88967 * C88549;
    const double C88974 = C88967 * C88570;
    const double C88979 = C88967 * C88612;
    const double C90483 = C90482 / C88268;
    const double C88305 = C88291 / C88299;
    const double C88303 = C88289 / C88299;
    const double C88381 = C88362 / C88299;
    const double C88385 = C88378 / C88299;
    const double C88426 = C88409 / C88299;
    const double C88430 = C88423 / C88299;
    const double C88302 = 0 - C88300;
    const double C90496 = C90495 / C88290;
    const double C90539 = C90538 / C88290;
    const double C90565 = C90564 / C88290;
    const double C88388 = 0 - C88384;
    const double C88433 = 0 - C88429;
    const double C90621 = C90620 / C88268;
    const double C90632 = C90631 / C88268;
    const double C88533 = std::pow(C88529, 2);
    const double C88535 = -C88529;
    const double C88550 = std::pow(C88529, 4);
    const double C88613 = std::pow(C88529, 6);
    const double C88680 = C88678 * ce;
    const double C88795 = C88793 * ce;
    const double C88738 = C88736 * ce;
    const double C88872 = C88871 * ce;
    const double C88896 = C88894 * ce;
    const double C88948 = C88947 * ce;
    const double C90484 = -C90483;
    const double C88307 = C88302 * ce;
    const double C90497 = -C90496;
    const double C90540 = -C90539;
    const double C90566 = -C90565;
    const double C88391 = C88388 * ce;
    const double C88436 = C88433 * ce;
    const double C90622 = -C90621;
    const double C90633 = -C90632;
    const double C88538 = C88530 * C88533;
    const double C126 =
        (-(C88533 * C88530 * C88531 * ae * ce) / C88290) / C88268 -
        (ae * C88533 * C88530 * C88531 * ce) / C88532 -
        (C88531 *
         (C88530 * C88533 +
          std::pow(C88531, 2) * bs[3] * std::pow(-C88529, 3)) *
         ae * ce) /
            C88532;
    const double C188 =
        (-(C88533 * C88530 * C88531 * (yP - yQ) * ae * ce) / C88290) / C88268;
    const double C251 =
        (-(C88533 * C88530 * C88531 * (zP - zQ) * ae * ce) / C88290) / C88268;
    const double C314 =
        (-(C88533 * C88530 * C88673 * C88531 * ae * ce) / C88290) / C88268;
    const double C394 =
        (-((std::pow(C88673, 2) * C88530 * C88533 - (bs[1] * C88527) / C88526) *
           C88540) /
         C88290) /
        C88268;
    const double C474 =
        (-(C88533 * C88530 * C88673 * C88731 * ae * ce) / C88290) / C88268;
    const double C561 =
        (-(C88533 * C88530 * C88731 * C88531 * ae * ce) / C88290) / C88268;
    const double C641 =
        (-(C88533 * C88530 * C88731 * C88673 * ae * ce) / C88290) / C88268;
    const double C719 =
        (-((std::pow(C88731, 2) * C88530 * C88533 - (bs[1] * C88527) / C88526) *
           C88540) /
         C88290) /
        C88268;
    const double C114 = (C88531 * C88533 * C88530 * C88541) / C88268 -
                        (ae * bs[1] * C88527) / (C88526 * C88268);
    const double C117 = (ce * bs[1] * C88527) / (C88526 * C88290) -
                        (C88531 * C88533 * C88530 * C88537) / C88290;
    const double C183 = -(C88531 * C88533 * C88530 * C88675) / C88290;
    const double C246 = -(C88531 * C88533 * C88530 * C88733) / C88290;
    const double C309 = (C88531 * C88533 * C88530 * C88790) / C88268;
    const double C556 = (C88531 * C88533 * C88530 * C88891) / C88268;
    const double C839 = -(C88673 * C88533 * C88530 * C88537) / C88290;
    const double C840 = (C88673 * C88533 * C88530 * C88541) / C88268;
    const double C927 = (ce * bs[1] * C88527) / (C88526 * C88290) -
                        (C88673 * C88533 * C88530 * C88675) / C88290;
    const double C1011 = -(C88673 * C88533 * C88530 * C88733) / C88290;
    const double C1094 = (C88673 * C88533 * C88530 * C88790) / C88268 -
                         (ae * bs[1] * C88527) / (C88526 * C88268);
    const double C1396 = (C88673 * C88533 * C88530 * C88891) / C88268;
    const double C1707 = -(C88731 * C88533 * C88530 * C88537) / C88290;
    const double C1708 = (C88731 * C88533 * C88530 * C88541) / C88268;
    const double C1794 = -(C88731 * C88533 * C88530 * C88675) / C88290;
    const double C1879 = (ce * bs[1] * C88527) / (C88526 * C88290) -
                         (C88731 * C88533 * C88530 * C88733) / C88290;
    const double C1962 = (C88731 * C88533 * C88530 * C88790) / C88268;
    const double C2264 = (C88731 * C88533 * C88530 * C88891) / C88268 -
                         (ae * bs[1] * C88527) / (C88526 * C88268);
    const double C88542 = std::pow(C88535, 3);
    const double C88571 = std::pow(C88535, 5);
    const double C88559 = C88550 * C88555;
    const double C88558 = C88550 * C88552;
    const double C88557 = C88551 * C88550;
    const double C88569 = C88549 * C88550;
    const double C88685 = C88550 * C88683;
    const double C88743 = C88550 * C88741;
    const double C88800 = C88550 * C88798;
    const double C88848 = C88847 * C88550;
    const double C88901 = C88550 * C88899;
    const double C88970 = C88969 * C88550;
    const double C88635 = C88613 * C88627;
    const double C88632 = C88613 * C88623;
    const double C88631 = C88621 * C88613;
    const double C88711 = C88613 * C88706;
    const double C88769 = C88613 * C88764;
    const double C88826 = C88613 * C88821;
    const double C88859 = C88857 * C88613;
    const double C88927 = C88613 * C88922;
    const double C88981 = C88979 * C88613;
    const double C88682 = C88549 * C88680;
    const double C88688 = C88570 * C88680;
    const double C88704 = C88612 * C88680;
    const double C88797 = C88549 * C88795;
    const double C88803 = C88570 * C88795;
    const double C88819 = C88612 * C88795;
    const double C88740 = C88549 * C88738;
    const double C88746 = C88570 * C88738;
    const double C88762 = C88612 * C88738;
    const double C88874 = C88549 * C88872;
    const double C88877 = C88570 * C88872;
    const double C88880 = C88612 * C88872;
    const double C88898 = C88549 * C88896;
    const double C88904 = C88570 * C88896;
    const double C88920 = C88612 * C88896;
    const double C88950 = C88549 * C88948;
    const double C88953 = C88570 * C88948;
    const double C88956 = C88612 * C88948;
    const double C90485 = std::exp(C90484);
    const double C88310 = C88307 / C88290;
    const double C90498 = std::exp(C90497);
    const double C90541 = std::exp(C90540);
    const double C90567 = std::exp(C90566);
    const double C88393 = C88391 / C88290;
    const double C88438 = C88436 / C88290;
    const double C90623 = std::exp(C90622);
    const double C90634 = std::exp(C90633);
    const double C109 = C88538 * C88539 - (bs[1] * C88527) / C88526;
    const double C829 = C88673 * C88531 * C88538;
    const double C1697 = C88731 * C88531 * C88538;
    const double C2570 = C88538 * C88845 - (bs[1] * C88527) / C88526;
    const double C3891 = C88731 * C88673 * C88538;
    const double C4656 = C88538 * C88967 - (bs[1] * C88527) / C88526;
    const double C88546 = C88542 * C88544;
    const double C88545 = C88542 * C88543;
    const double C88548 = C88536 * C88542;
    const double C88679 = C88542 * C88677;
    const double C88737 = C88542 * C88735;
    const double C88794 = C88542 * C88792;
    const double C88895 = C88542 * C88893;
    const double C189 =
        (-(C88531 * C88542 * C88536 * C88531 * C88673 * ae * ce) / C88290) /
            C88268 -
        (ae * C88533 * C88530 * C88673 * ce) / C88532;
    const double C252 =
        (-(C88531 * C88542 * C88536 * C88531 * C88731 * ae * ce) / C88290) /
            C88268 -
        (ae * C88533 * C88530 * C88731 * ce) / C88532;
    const double C315 =
        (-(C88531 * C88542 * C88536 * C88673 * C88531 * ae * ce) / C88290) /
            C88268 -
        (C88533 * C88530 * C88673 * ae * ce) / C88532;
    const double C395 =
        (-(C88531 * (C88538 + std::pow(C88673, 2) * C88536 * C88542) * C88540) /
         C88290) /
        C88268;
    const double C475 =
        (-(C88531 * C88542 * C88536 * C88673 * C88731 * ae * ce) / C88290) /
        C88268;
    const double C476 =
        (-(C88550 * C88549 * C88872 * C88539) / C88290) / C88268 -
        (C88542 * C88536 * C88872) / C88532;
    const double C562 =
        (-(C88531 * C88542 * C88536 * C88731 * C88531 * ae * ce) / C88290) /
            C88268 -
        (C88533 * C88530 * C88731 * ae * ce) / C88532;
    const double C642 =
        (-(C88531 * C88542 * C88536 * C88731 * C88673 * ae * ce) / C88290) /
        C88268;
    const double C643 =
        (-(C88550 * C88549 * C88948 * C88539) / C88290) / C88268 -
        (C88542 * C88536 * C88948) / C88532;
    const double C720 =
        (-(C88531 * (C88538 + std::pow(C88731, 2) * C88536 * C88542) * C88540) /
         C88290) /
        C88268;
    const double C846 =
        (-(C88673 * (C88538 + C88539 * C88536 * C88542) * C88540) / C88290) /
        C88268;
    const double C932 =
        (-(C88673 * C88542 * C88536 * C88680) / C88290) / C88268 -
        (C88533 * C88530 * C88541 * ce) / C88532;
    const double C1016 =
        (-(C88673 * C88542 * C88536 * C88738) / C88290) / C88268;
    const double C1098 =
        (-(C88673 * C88542 * C88536 * C88795) / C88290) / C88268 -
        (ae * C88533 * C88530 * C88537) / C88532;
    const double C1195 =
        (-(C88533 * C88530 * C88790 * ce) / C88290) / C88268 -
        (ae * C88533 * C88530 * C88675) / C88532 -
        (C88673 * (C88538 + C88845 * C88536 * C88542) * C88540) / C88532;
    const double C1301 =
        (-(C88673 * C88542 * C88536 * C88872) / C88290) / C88268 -
        (ae * C88533 * C88530 * C88733) / C88532;
    const double C1400 =
        (-(C88673 * C88542 * C88536 * C88896) / C88290) / C88268;
    const double C1497 =
        (-(C88673 * C88542 * C88536 * C88948) / C88290) / C88268 -
        (C88533 * C88530 * C88891 * ce) / C88532;
    const double C1602 =
        (-(C88673 * (C88538 + C88967 * C88536 * C88542) * C88540) / C88290) /
        C88268;
    const double C1714 =
        (-(C88731 * (C88538 + C88539 * C88536 * C88542) * C88540) / C88290) /
        C88268;
    const double C1799 =
        (-(C88731 * C88542 * C88536 * C88680) / C88290) / C88268;
    const double C1884 =
        (-(C88731 * C88542 * C88536 * C88738) / C88290) / C88268 -
        (C88533 * C88530 * C88541 * ce) / C88532;
    const double C1966 =
        (-(C88731 * C88542 * C88536 * C88795) / C88290) / C88268;
    const double C2066 =
        (-(C88731 * (C88538 + C88845 * C88536 * C88542) * C88540) / C88290) /
        C88268;
    const double C2159 =
        (-(C88731 * C88542 * C88536 * C88872) / C88290) / C88268 -
        (C88533 * C88530 * C88790 * ce) / C88532;
    const double C2268 =
        (-(C88731 * C88542 * C88536 * C88896) / C88290) / C88268 -
        (ae * C88533 * C88530 * C88537) / C88532;
    const double C2368 =
        (-(C88731 * C88542 * C88536 * C88948) / C88290) / C88268 -
        (ae * C88533 * C88530 * C88675) / C88532;
    const double C2460 =
        (-(C88533 * C88530 * C88891 * ce) / C88290) / C88268 -
        (ae * C88533 * C88530 * C88733) / C88532 -
        (C88731 * (C88538 + C88967 * C88536 * C88542) * C88540) / C88532;
    const double C88586 = C88571 * C88579;
    const double C88583 = C88571 * C88575;
    const double C88582 = C88574 * C88571;
    const double C88611 = C88570 * C88571;
    const double C88693 = C88571 * C88690;
    const double C88751 = C88571 * C88748;
    const double C88808 = C88571 * C88805;
    const double C88853 = C88852 * C88571;
    const double C88909 = C88571 * C88906;
    const double C88975 = C88974 * C88571;
    const double C88562 = C88531 * C88559;
    const double C88567 = C88559 * ce;
    const double C89300 = C88673 * C88559;
    const double C89792 = C88731 * C88559;
    const double C88561 = C88531 * C88558;
    const double C88568 = ae * C88558;
    const double C89315 = C88673 * C88558;
    const double C89819 = C88731 * C88558;
    const double C88580 = C88569 * ae;
    const double C88578 = C88569 * C88539;
    const double C88577 = C88531 * C88569;
    const double C88576 = C88569 * ce;
    const double C89417 = C88569 * C88845;
    const double C89416 = C88673 * C88569;
    const double C89856 = C88569 * C88967;
    const double C89855 = C88731 * C88569;
    const double C88689 = ae * C88685;
    const double C88687 = C88531 * C88685;
    const double C89161 = C88673 * C88685;
    const double C89834 = C88731 * C88685;
    const double C88747 = ae * C88743;
    const double C88745 = C88531 * C88743;
    const double C89320 = C88673 * C88743;
    const double C89353 = C88731 * C88743;
    const double C88804 = C88800 * ce;
    const double C88802 = C88531 * C88800;
    const double C89163 = C88673 * C88800;
    const double C89811 = C88731 * C88800;
    const double C88905 = C88901 * ce;
    const double C88903 = C88531 * C88901;
    const double C89321 = C88673 * C88901;
    const double C89355 = C88731 * C88901;
    const double C88643 = C88531 * C88635;
    const double C89508 = C88635 * C88845;
    const double C89898 = C88673 * C88635;
    const double C89966 = C88635 * C88967;
    const double C88640 = C88531 * C88632;
    const double C89528 = C88632 * C88845;
    const double C89916 = C88673 * C88632;
    const double C89986 = C88632 * C88967;
    const double C88715 = C88711 * C88539;
    const double C89438 = C88531 * C88711;
    const double C89549 = C88673 * C88711;
    const double C90005 = C88711 * C88967;
    const double C88773 = C88769 * C88539;
    const double C89470 = C88531 * C88769;
    const double C89595 = C88769 * C88845;
    const double C89934 = C88673 * C88769;
    const double C90026 = C88731 * C88769;
    const double C88829 = C88826 * C88539;
    const double C89441 = C88531 * C88826;
    const double C89554 = C88673 * C88826;
    const double C89910 = C88826 * C88967;
    const double C88930 = C88927 * C88539;
    const double C89491 = C88531 * C88927;
    const double C89622 = C88927 * C88845;
    const double C89937 = C88673 * C88927;
    const double C90032 = C88731 * C88927;
    const double C88684 = C88550 * C88682;
    const double C88691 = C88571 * C88688;
    const double C88708 = C88613 * C88704;
    const double C88799 = C88550 * C88797;
    const double C88806 = C88571 * C88803;
    const double C88823 = C88613 * C88819;
    const double C88742 = C88550 * C88740;
    const double C88749 = C88571 * C88746;
    const double C88766 = C88613 * C88762;
    const double C88875 = C88550 * C88874;
    const double C88878 = C88571 * C88877;
    const double C88882 = C88613 * C88880;
    const double C88900 = C88550 * C88898;
    const double C88907 = C88571 * C88904;
    const double C88924 = C88613 * C88920;
    const double C88951 = C88550 * C88950;
    const double C88954 = C88571 * C88953;
    const double C88958 = C88613 * C88956;
    const double C14059 = C90485 * C840;
    const double C27577 = C90485 * C1708;
    const double C88273 = C88271 * C90485;
    const double C90767 = C90485 * C90742;
    const double C89 =
        (C90485 * std::pow(C90742, 2)) / C88270 + C90485 / C90743;
    const double C91 = C90768 * C90485;
    const double C39126 = C90766 * C90485;
    const double C88312 = C88310 - C88303;
    const double C88301 = C88297 * C90498;
    const double C90499 = C90498 * C90493;
    const double C90503 = C90502 * C90498;
    const double C90746 = C90498 / C88295;
    const double C90745 = C90498 * C90494;
    const double C823 = C90751 * C90498;
    const double C88364 = C88363 * C90541;
    const double C181 = -(2 * C88292 * (yC - yD) * C90541) / C88290;
    const double C923 =
        ((C90541 - (C88343 * 2 * C88292 * C88343 * C90541) / C88290) * ce) /
            C88290 -
        (0 * de) / C88299;
    const double C924 = (0 * ce) / C88290 - (C88292 * C88343 * C90541) / C88294;
    const double C90552 = C90541 * C90550;
    const double C90555 = C90502 * C90541;
    const double C90755 = C90541 * C90551;
    const double C90754 = C90541 / C88295;
    const double C2567 = C90751 * C90541;
    const double C88411 = C88410 * C90567;
    const double C244 = -(2 * C88292 * (zC - zD) * C90567) / C88290;
    const double C1875 =
        ((C90567 - (C88350 * 2 * C88292 * C88350 * C90567) / C88290) * ce) /
            C88290 -
        (0 * de) / C88299;
    const double C1876 =
        (0 * ce) / C88290 - (C88292 * C88350 * C90567) / C88294;
    const double C90576 = C90567 * C90574;
    const double C90579 = C90502 * C90567;
    const double C90760 = C90567 * C90575;
    const double C90759 = C90567 / C88295;
    const double C4655 = C90751 * C90567;
    const double C88395 = C88393 - C88385;
    const double C88440 = C88438 - C88430;
    const double C322 = C90623 * C309;
    const double C27895 = C90623 * C1962;
    const double C88491 = C88490 * C90623;
    const double C307 = -(2 * C88269 * (yA - yB) * C90623) / C88268;
    const double C90778 = C90623 * C90764;
    const double C13576 =
        (C90623 * std::pow(C90764, 2)) / C88270 + C90623 / C90743;
    const double C13578 = C90768 * C90623;
    const double C39128 = C90766 * C90623;
    const double C569 = C90634 * C556;
    const double C14599 = C90634 * C1396;
    const double C88506 = C88505 * C90634;
    const double C554 = -(2 * C88269 * (zA - zB) * C90634) / C88268;
    const double C90779 = C90634 * C90765;
    const double C26429 =
        (C90634 * std::pow(C90765, 2)) / C88270 + C90634 / C90743;
    const double C26431 = C90768 * C90634;
    const double C55626 = C90766 * C90634;
    const double C115 =
        (C88533 * C88530 * C88541 + C88531 * (C88531 * C88546 + C88538 * ae) +
         C88531 * C88538 * ae) /
        C88268;
    const double C834 = (C88673 * (C88531 * C88546 + C88538 * ae)) / C88268;
    const double C1702 = (C88731 * (C88531 * C88546 + C88538 * ae)) / C88268;
    const double C2574 = (C88533 * C88530 * C88541 + C88546 * C88845) / C88268;
    const double C3373 =
        (2 * C88673 * C88546 + C88673 * (C88546 + C88559 * C88845)) / C88268;
    const double C3897 = (C88731 * C88673 * C88546) / C88268;
    const double C3908 = (C88731 * (C88546 + C88559 * C88845)) / C88268;
    const double C4660 = (C88533 * C88530 * C88541 + C88546 * C88967) / C88268;
    const double C6171 =
        (2 * C88731 * C88546 + C88731 * (C88546 + C88559 * C88967)) / C88268;
    const double C127 =
        (-(ae * (C88531 * C88545 + C88538 * ce)) / C88290) / C88268 -
        ((C88538 + C88539 * C88536 * C88542) * C88540) / C88532 -
        ((C88531 * C88546 + C88538 * ae) * ce) / C88532 +
        C88531 * ((-(C88546 * ce) / C88290) / C88268 - (ae * C88545) / C88532 -
                  (C88531 *
                   (C88536 * C88542 + C88539 * bs[4] * std::pow(C88529, 4)) *
                   C88540) /
                      C88532);
    const double C118 = -(C88531 * (C88531 * C88545 + C88538 * ce) +
                          C88533 * C88530 * C88537 + C88531 * C88538 * ce) /
                        C88290;
    const double C838 = -(C88673 * (C88531 * C88545 + C88538 * ce)) / C88290;
    const double C1706 = -(C88731 * (C88531 * C88545 + C88538 * ce)) / C88290;
    const double C2577 = -(C88545 * C88845 + C88533 * C88530 * C88537) / C88290;
    const double C3370 = (-2 * C88673 * C88545) / C88290 -
                         (C88673 * (C88558 * C88845 + C88545)) / C88290;
    const double C3900 = -(C88731 * C88673 * C88545) / C88290;
    const double C3905 = -(C88731 * (C88558 * C88845 + C88545)) / C88290;
    const double C4663 = -(C88545 * C88967 + C88533 * C88530 * C88537) / C88290;
    const double C6168 = (-2 * C88731 * C88545) / C88290 -
                         (C88731 * (C88558 * C88967 + C88545)) / C88290;
    const double C88556 = C88548 * ae;
    const double C88554 = C88531 * C88548;
    const double C88553 = C88548 * ce;
    const double C88560 = C88548 + C88557;
    const double C88849 = C88548 + C88848;
    const double C88971 = C88548 + C88970;
    const double C89162 = C88673 * C88548;
    const double C89354 = C88731 * C88548;
    const double C396 =
        (-((C88548 + C88845 * C88549 * C88550) * C88540 * C88539) / C88290) /
            C88268 -
        ((C88538 + C88845 * C88536 * C88542) * C88540) / C88532;
    const double C721 =
        (-((C88548 + C88967 * C88549 * C88550) * C88540 * C88539) / C88290) /
            C88268 -
        ((C88538 + C88967 * C88536 * C88542) * C88540) / C88532;
    const double C110 =
        2 * C88531 * C88538 + C88531 * (C88538 + C88548 * C88539);
    const double C830 = C88673 * (C88538 + C88548 * C88539);
    const double C1698 = C88731 * (C88538 + C88548 * C88539);
    const double C3367 =
        2 * C88673 * C88538 + C88673 * (C88538 + C88548 * C88845);
    const double C3896 = C88731 * (C88538 + C88548 * C88845);
    const double C6165 =
        2 * C88731 * C88538 + C88731 * (C88538 + C88548 * C88967);
    const double C190 =
        (-(ae * C88531 * C88679) / C88290) / C88268 -
        (C88542 * C88536 * C88680) / C88532 +
        C88531 * ((-(C88531 * C88550 * C88549 * C88680) / C88290) / C88268 -
                  (ae * C88679) / C88532);
    const double C184 = -(C88679 * C88539 + C88533 * C88530 * C88675) / C88290;
    const double C185 = (-2 * C88531 * C88679) / C88290 -
                        (C88531 * (C88685 * C88539 + C88679)) / C88290;
    const double C925 = -(C88673 * (C88685 * C88539 + C88679) +
                          (C88538 + C88548 * C88539) * ce) /
                        C88290;
    const double C926 =
        -(C88673 * C88531 * C88679 + C88531 * C88538 * ce) / C88290;
    const double C1791 = -(C88731 * C88531 * C88679) / C88290;
    const double C1792 = -(C88731 * (C88685 * C88539 + C88679)) / C88290;
    const double C2663 = -(C88673 * (C88673 * C88679 + C88538 * ce) +
                           C88533 * C88530 * C88675 + C88673 * C88538 * ce) /
                         C88290;
    const double C3989 = -(C88731 * (C88673 * C88679 + C88538 * ce)) / C88290;
    const double C4746 = -(C88679 * C88967 + C88533 * C88530 * C88675) / C88290;
    const double C6227 = (-2 * C88731 * C88679) / C88290 -
                         (C88731 * (C88685 * C88967 + C88679)) / C88290;
    const double C253 =
        (-(ae * C88531 * C88737) / C88290) / C88268 -
        (C88542 * C88536 * C88738) / C88532 +
        C88531 * ((-(C88531 * C88550 * C88549 * C88738) / C88290) / C88268 -
                  (ae * C88737) / C88532);
    const double C247 = -(C88737 * C88539 + C88533 * C88530 * C88733) / C88290;
    const double C248 = (-2 * C88531 * C88737) / C88290 -
                        (C88531 * (C88743 * C88539 + C88737)) / C88290;
    const double C1009 = -(C88673 * (C88743 * C88539 + C88737)) / C88290;
    const double C1010 = -(C88673 * C88531 * C88737) / C88290;
    const double C1877 = -(C88731 * (C88743 * C88539 + C88737) +
                           (C88538 + C88548 * C88539) * ce) /
                         C88290;
    const double C1878 =
        -(C88731 * C88531 * C88737 + C88531 * C88538 * ce) / C88290;
    const double C2745 = -(C88737 * C88845 + C88533 * C88530 * C88733) / C88290;
    const double C3489 = (-2 * C88673 * C88737) / C88290 -
                         (C88673 * (C88743 * C88845 + C88737)) / C88290;
    const double C4075 =
        -(C88731 * C88673 * C88737 + C88673 * C88538 * ce) / C88290;
    const double C4080 = -(C88731 * (C88743 * C88845 + C88737) +
                           (C88538 + C88548 * C88845) * ce) /
                         C88290;
    const double C4831 = -(C88731 * (C88731 * C88737 + C88538 * ce) +
                           C88533 * C88530 * C88733 + C88731 * C88538 * ce) /
                         C88290;
    const double C316 =
        (-(C88531 * C88794 * ce) / C88290) / C88268 -
        (C88542 * C88536 * C88795) / C88532 +
        C88531 * ((-(C88531 * C88550 * C88549 * C88795) / C88290) / C88268 -
                  (C88794 * ce) / C88532);
    const double C310 = (C88533 * C88530 * C88790 + C88794 * C88539) / C88268;
    const double C311 =
        (2 * C88531 * C88794 + C88531 * (C88794 + C88800 * C88539)) / C88268;
    const double C1093 =
        (C88673 * C88531 * C88794 + C88531 * C88538 * ae) / C88268;
    const double C1095 = (C88673 * (C88794 + C88800 * C88539) +
                          (C88538 + C88548 * C88539) * ae) /
                         C88268;
    const double C1961 = (C88731 * C88531 * C88794) / C88268;
    const double C1963 = (C88731 * (C88794 + C88800 * C88539)) / C88268;
    const double C2827 =
        (C88533 * C88530 * C88790 + C88673 * (C88673 * C88794 + C88538 * ae) +
         C88673 * C88538 * ae) /
        C88268;
    const double C4161 = (C88731 * (C88673 * C88794 + C88538 * ae)) / C88268;
    const double C4913 = (C88533 * C88530 * C88790 + C88794 * C88967) / C88268;
    const double C6343 =
        (2 * C88731 * C88794 + C88731 * (C88794 + C88800 * C88967)) / C88268;
    const double C563 =
        (-(C88531 * C88895 * ce) / C88290) / C88268 -
        (C88542 * C88536 * C88896) / C88532 +
        C88531 * ((-(C88531 * C88550 * C88549 * C88896) / C88290) / C88268 -
                  (C88895 * ce) / C88532);
    const double C557 = (C88533 * C88530 * C88891 + C88895 * C88539) / C88268;
    const double C558 =
        (2 * C88531 * C88895 + C88531 * (C88895 + C88901 * C88539)) / C88268;
    const double C1395 = (C88673 * C88531 * C88895) / C88268;
    const double C1397 = (C88673 * (C88895 + C88901 * C88539)) / C88268;
    const double C2263 =
        (C88731 * C88531 * C88895 + C88531 * C88538 * ae) / C88268;
    const double C2265 = (C88731 * (C88895 + C88901 * C88539) +
                          (C88538 + C88548 * C88539) * ae) /
                         C88268;
    const double C3105 = (C88533 * C88530 * C88891 + C88895 * C88845) / C88268;
    const double C3707 =
        (2 * C88673 * C88895 + C88673 * (C88895 + C88901 * C88845)) / C88268;
    const double C4407 =
        (C88731 * C88673 * C88895 + C88673 * C88538 * ae) / C88268;
    const double C4412 = (C88731 * (C88895 + C88901 * C88845) +
                          (C88538 + C88548 * C88845) * ae) /
                         C88268;
    const double C5191 =
        (C88533 * C88530 * C88891 + C88731 * (C88731 * C88895 + C88538 * ae) +
         C88731 * C88538 * ae) /
        C88268;
    const double C324 = C90623 * C315;
    const double C403 = C90623 * C395;
    const double C483 = C90623 * C475;
    const double C486 = C90623 * C476;
    const double C571 = C90634 * C562;
    const double C650 = C90634 * C642;
    const double C653 = C90634 * C643;
    const double C728 = C90634 * C720;
    const double C14061 = C90485 * C846;
    const double C14181 = C90485 * C932;
    const double C14274 = C90485 * C1016;
    const double C14601 = C90634 * C1400;
    const double C14697 = C90634 * C1497;
    const double C14778 = C90634 * C1602;
    const double C27579 = C90485 * C1714;
    const double C27700 = C90485 * C1799;
    const double C27803 = C90485 * C1884;
    const double C27897 = C90623 * C1966;
    const double C27994 = C90623 * C2066;
    const double C28077 = C90623 * C2159;
    const double C88591 = C88531 * C88586;
    const double C88609 = C88586 * ce;
    const double C88995 = C88673 * C88586;
    const double C89054 = C88731 * C88586;
    const double C89385 = C88586 * C88845;
    const double C89794 = C88586 * C88967;
    const double C88590 = C88531 * C88583;
    const double C88610 = ae * C88583;
    const double C88996 = C88673 * C88583;
    const double C89055 = C88731 * C88583;
    const double C89400 = C88583 * C88845;
    const double C89821 = C88583 * C88967;
    const double C88589 = C88569 + C88582;
    const double C88628 = C88611 * ae;
    const double C88626 = C88611 * C88539;
    const double C88625 = C88531 * C88611;
    const double C88624 = C88611 * ce;
    const double C88639 = C88611 + C88631;
    const double C88860 = C88611 + C88859;
    const double C88982 = C88611 + C88981;
    const double C89551 = C88611 * C88845;
    const double C89550 = C88673 * C88611;
    const double C89909 = C88611 * C88967;
    const double C90027 = C88731 * C88611;
    const double C88695 = C88693 * C88539;
    const double C88705 = ae * C88693;
    const double C88702 = C88531 * C88693;
    const double C89415 = C88673 * C88693;
    const double C89663 = C88731 * C88693;
    const double C89836 = C88693 * C88967;
    const double C88753 = C88751 * C88539;
    const double C88763 = ae * C88751;
    const double C88760 = C88531 * C88751;
    const double C89461 = C88751 * C88845;
    const double C89593 = C88673 * C88751;
    const double C89683 = C88731 * C88751;
    const double C88810 = C88808 * C88539;
    const double C88820 = C88808 * ce;
    const double C88817 = C88531 * C88808;
    const double C89418 = C88673 * C88808;
    const double C89662 = C88731 * C88808;
    const double C89812 = C88808 * C88967;
    const double C88854 = C88569 + C88853;
    const double C88911 = C88909 * C88539;
    const double C88921 = C88909 * ce;
    const double C88918 = C88531 * C88909;
    const double C89482 = C88909 * C88845;
    const double C89620 = C88673 * C88909;
    const double C89857 = C88731 * C88909;
    const double C88976 = C88569 + C88975;
    const double C88572 = C88567 / C88290;
    const double C89384 = C88567 / C88532;
    const double C5477 = (C88673 * C88546 + C89300 * C88967) / C88268;
    const double C88573 = C88568 / C88532;
    const double C5474 = -(C89315 * C88967 + C88673 * C88545) / C88290;
    const double C88585 = C88548 + C88578;
    const double C88587 = C88577 * ae;
    const double C88584 = C88577 * ce;
    const double C88615 = 2 * C88577;
    const double C89169 = C88673 * C88577;
    const double C89360 = C88731 * C88577;
    const double C89423 = C88548 + C89417;
    const double C89425 = C89416 * ae;
    const double C89422 = C89416 * ce;
    const double C89552 = 2 * C89416;
    const double C89760 = C88731 * C89416;
    const double C89862 = C88548 + C89856;
    const double C89864 = C89855 * ae;
    const double C89861 = C89855 * ce;
    const double C90029 = 2 * C89855;
    const double C88692 = C88689 / C88532;
    const double C4747 = -(C88687 * C88967 + C88531 * C88679) / C88290;
    const double C88750 = C88747 / C88532;
    const double C2746 = -(C88745 * C88845 + C88531 * C88737) / C88290;
    const double C88807 = C88804 / C88532;
    const double C89413 = C88804 / C88290;
    const double C4914 = (C88531 * C88794 + C88802 * C88967) / C88268;
    const double C88908 = C88905 / C88532;
    const double C89852 = C88905 / C88290;
    const double C3106 = (C88531 * C88895 + C88903 * C88845) / C88268;
    const double C89510 = C88586 + C89508;
    const double C89900 = C89898 * C88967;
    const double C89968 = C88586 + C89966;
    const double C89532 = C89528 + C88583;
    const double C89918 = C89916 * C88967;
    const double C89990 = C89986 + C88583;
    const double C88718 = C88715 + C88693;
    const double C89444 = C88673 * C89438;
    const double C89845 = C89438 * C88967;
    const double C90009 = C90005 + C88693;
    const double C88776 = C88773 + C88751;
    const double C89472 = C89470 * C88845;
    const double C89875 = C88731 * C89470;
    const double C90080 = C88673 * C89470;
    const double C89599 = C89595 + C88751;
    const double C89940 = C88731 * C89934;
    const double C88832 = C88808 + C88829;
    const double C89447 = C88673 * C89441;
    const double C89816 = C89441 * C88967;
    const double C89912 = C88808 + C89910;
    const double C88933 = C88909 + C88930;
    const double C89493 = C89491 * C88845;
    const double C89878 = C88731 * C89491;
    const double C90082 = C88673 * C89491;
    const double C89626 = C88909 + C89622;
    const double C89943 = C88731 * C89937;
    const double C191 =
        2 * ((-(C88531 * C88684) / C88290) / C88268 - (ae * C88679) / C88532) -
        (ae * (C88685 * C88539 + C88679)) / C88532 +
        C88531 *
            ((-(ae * C88531 * C88685) / C88290) / C88268 - C88684 / C88532 +
             C88531 *
                 ((-(C88531 * C88571 * C88570 * C88680) / C88290) / C88268 -
                  (ae * C88685) / C88532));
    const double C931 = C88673 * ((-(C88531 * C88684) / C88290) / C88268 -
                                  (ae * C88679) / C88532) -
                        ((C88531 * C88546 + C88538 * ae) * ce) / C88532;
    const double C1796 = C88731 * ((-(C88531 * C88684) / C88290) / C88268 -
                                   (ae * C88679) / C88532);
    const double C2667 = (-(C88673 * C88546 * ce) / C88290) / C88268 -
                         (C88542 * C88536 * C88680) / C88532 +
                         C88673 * ((-(C88673 * C88684) / C88290) / C88268 -
                                   (C88546 * ce) / C88532);
    const double C3995 = C88731 * ((-(C88673 * C88684) / C88290) / C88268 -
                                   (C88546 * ce) / C88532);
    const double C4750 = (-(C88684 * C88967) / C88290) / C88268 -
                         (C88542 * C88536 * C88680) / C88532;
    const double C88694 = C88531 * C88691;
    const double C88703 = C88691 / C88532;
    const double C89383 = C88673 * C88691;
    const double C3436 =
        2 * ((-(C88673 * C88684) / C88290) / C88268 - (C88546 * ce) / C88532) -
        ((C88546 + C88559 * C88845) * ce) / C88532 +
        C88673 *
            ((-(C88673 * C88559 * ce) / C88290) / C88268 - C88684 / C88532 +
             C88673 *
                 ((-(C88673 * C88691) / C88290) / C88268 - C88567 / C88532));
    const double C4000 =
        C88731 *
        ((-(C88673 * C88559 * ce) / C88290) / C88268 - C88684 / C88532 +
         C88673 * ((-(C88673 * C88691) / C88290) / C88268 - C88567 / C88532));
    const double C5560 =
        (-(C88673 * C88684) / C88290) / C88268 - (C88546 * ce) / C88532 +
        ((-(C88673 * C88691) / C88290) / C88268 - C88567 / C88532) * C88967;
    const double C6230 =
        (-2 * C88731 * C88684) / C88532 +
        C88731 * ((-(C88691 * C88967) / C88290) / C88268 - C88684 / C88532);
    const double C88713 = C88531 * C88708;
    const double C89505 = C88673 * C88708;
    const double C89957 = C88708 * C88967;
    const double C317 =
        2 * ((-(C88531 * C88799) / C88290) / C88268 - (C88794 * ce) / C88532) -
        ((C88794 + C88800 * C88539) * ce) / C88532 +
        C88531 *
            ((-(C88531 * C88800 * ce) / C88290) / C88268 - C88799 / C88532 +
             C88531 *
                 ((-(C88531 * C88571 * C88570 * C88795) / C88290) / C88268 -
                  (C88800 * ce) / C88532));
    const double C1099 = C88673 * ((-(C88531 * C88799) / C88290) / C88268 -
                                   (C88794 * ce) / C88532) -
                         (ae * (C88531 * C88545 + C88538 * ce)) / C88532;
    const double C1967 = C88731 * ((-(C88531 * C88799) / C88290) / C88268 -
                                   (C88794 * ce) / C88532);
    const double C2831 = (-(ae * C88673 * C88545) / C88290) / C88268 -
                         (C88542 * C88536 * C88795) / C88532 +
                         C88673 * ((-(C88673 * C88799) / C88290) / C88268 -
                                   (ae * C88545) / C88532);
    const double C4167 = (-(C88673 * C88731 * C88799) / C88290) / C88268 -
                         (ae * C88731 * C88545) / C88532;
    const double C4917 = (-(C88799 * C88967) / C88290) / C88268 -
                         (C88542 * C88536 * C88795) / C88532;
    const double C88809 = C88531 * C88806;
    const double C88818 = C88806 / C88532;
    const double C89399 = C88673 * C88806;
    const double C89651 = C88731 * C88806;
    const double C4172 =
        (-(ae * C88731 * C88673 * C88558) / C88290) / C88268 -
        (C88731 * C88799) / C88532 +
        C88673 * ((-(C88673 * C88731 * C88806) / C88290) / C88268 -
                  (ae * C88731 * C88558) / C88532);
    const double C5720 =
        C88673 * ((-(C88806 * C88967) / C88290) / C88268 - C88799 / C88532) -
        (ae * (C88558 * C88967 + C88545)) / C88532;
    const double C6346 =
        (-2 * C88731 * C88799) / C88532 +
        C88731 * ((-(C88806 * C88967) / C88290) / C88268 - C88799 / C88532);
    const double C88828 = C88531 * C88823;
    const double C89526 = C88673 * C88823;
    const double C89653 = C88731 * C88823;
    const double C89721 = C88823 * C88967;
    const double C254 =
        2 * ((-(C88531 * C88742) / C88290) / C88268 - (ae * C88737) / C88532) -
        (ae * (C88743 * C88539 + C88737)) / C88532 +
        C88531 *
            ((-(ae * C88531 * C88743) / C88290) / C88268 - C88742 / C88532 +
             C88531 *
                 ((-(C88531 * C88571 * C88570 * C88738) / C88290) / C88268 -
                  (ae * C88743) / C88532));
    const double C1015 = C88673 * ((-(C88531 * C88742) / C88290) / C88268 -
                                   (ae * C88737) / C88532);
    const double C1883 = C88731 * ((-(C88531 * C88742) / C88290) / C88268 -
                                   (ae * C88737) / C88532) -
                         ((C88531 * C88546 + C88538 * ae) * ce) / C88532;
    const double C2749 = (-(C88742 * C88845) / C88290) / C88268 -
                         (C88542 * C88536 * C88738) / C88532;
    const double C4081 = (-(C88731 * C88673 * C88742) / C88290) / C88268 -
                         (C88673 * C88546 * ce) / C88532;
    const double C4835 = (-(C88731 * C88546 * ce) / C88290) / C88268 -
                         (C88542 * C88536 * C88738) / C88532 +
                         C88731 * ((-(C88731 * C88742) / C88290) / C88268 -
                                   (C88546 * ce) / C88532);
    const double C88752 = C88531 * C88749;
    const double C88761 = C88749 / C88532;
    const double C89744 = C88673 * C88749;
    const double C89793 = C88731 * C88749;
    const double C3492 =
        (-2 * C88673 * C88742) / C88532 +
        C88673 * ((-(C88749 * C88845) / C88290) / C88268 - C88742 / C88532);
    const double C4086 =
        C88731 * ((-(C88749 * C88845) / C88290) / C88268 - C88742 / C88532) -
        ((C88546 + C88559 * C88845) * ce) / C88532;
    const double C5640 =
        (-(C88731 * C89300 * ce) / C88290) / C88268 -
        (C88673 * C88742) / C88532 +
        C88731 * ((-(C88731 * C88673 * C88749) / C88290) / C88268 -
                  (C89300 * ce) / C88532);
    const double C6290 =
        2 * ((-(C88731 * C88742) / C88290) / C88268 - (C88546 * ce) / C88532) -
        ((C88546 + C88559 * C88967) * ce) / C88532 +
        C88731 *
            ((-(C88731 * C88559 * ce) / C88290) / C88268 - C88742 / C88532 +
             C88731 *
                 ((-(C88731 * C88749) / C88290) / C88268 - C88567 / C88532));
    const double C88771 = C88531 * C88766;
    const double C89519 = C88766 * C88845;
    const double C89896 = C88673 * C88766;
    const double C89964 = C88731 * C88766;
    const double C477 =
        (-2 * C88531 * C88875) / C88532 +
        C88531 * ((-(C88571 * C88570 * C88872 * C88539) / C88290) / C88268 -
                  C88875 / C88532);
    const double C1300 = (-(C88673 * C88531 * C88875) / C88290) / C88268 -
                         (ae * C88531 * C88737) / C88532;
    const double C2160 = (-(C88731 * C88531 * C88875) / C88290) / C88268 -
                         (C88531 * C88794 * ce) / C88532;
    const double C3017 = (-(ae * C88673 * C88737) / C88290) / C88268 -
                         (C88542 * C88536 * C88872) / C88532 +
                         C88673 * ((-(C88673 * C88875) / C88290) / C88268 -
                                   (ae * C88737) / C88532);
    const double C4327 = C88673 * ((-(C88731 * C88875) / C88290) / C88268 -
                                   (C88794 * ce) / C88532) -
                         (ae * (C88731 * C88737 + C88538 * ce)) / C88532;
    const double C5095 = (-(C88731 * C88794 * ce) / C88290) / C88268 -
                         (C88542 * C88536 * C88872) / C88532 +
                         C88731 * ((-(C88731 * C88875) / C88290) / C88268 -
                                   (C88794 * ce) / C88532);
    const double C88881 = C88878 / C88532;
    const double C89181 = C88531 * C88878;
    const double C89460 = C88673 * C88878;
    const double C89676 = C88731 * C88878;
    const double C478 =
        3 * ((-(C88878 * C88539) / C88290) / C88268 - C88875 / C88532) +
        C88531 * ((-2 * C88531 * C88878) / C88532 +
                  C88531 * ((-(C88613 * C88612 * C88872 * C88539) / C88290) /
                                C88268 -
                            C88878 / C88532));
    const double C1299 =
        C88673 * ((-(C88878 * C88539) / C88290) / C88268 - C88875 / C88532) -
        (ae * (C88743 * C88539 + C88737)) / C88532;
    const double C2161 =
        C88731 * ((-(C88878 * C88539) / C88290) / C88268 - C88875 / C88532) -
        ((C88794 + C88800 * C88539) * ce) / C88532;
    const double C3018 =
        (-(ae * C88673 * C88745) / C88290) / C88268 -
        (C88531 * C88875) / C88532 +
        C88673 * ((-(C88673 * C88531 * C88878) / C88290) / C88268 -
                  (ae * C88745) / C88532);
    const double C88883 = C88882 * C88539;
    const double C89468 = C88531 * C88882;
    const double C89594 = C88673 * C88882;
    const double C89682 = C88731 * C88882;
    const double C564 =
        2 * ((-(C88531 * C88900) / C88290) / C88268 - (C88895 * ce) / C88532) -
        ((C88895 + C88901 * C88539) * ce) / C88532 +
        C88531 *
            ((-(C88531 * C88901 * ce) / C88290) / C88268 - C88900 / C88532 +
             C88531 *
                 ((-(C88531 * C88571 * C88570 * C88896) / C88290) / C88268 -
                  (C88901 * ce) / C88532));
    const double C1401 = C88673 * ((-(C88531 * C88900) / C88290) / C88268 -
                                   (C88895 * ce) / C88532);
    const double C2269 = C88731 * ((-(C88531 * C88900) / C88290) / C88268 -
                                   (C88895 * ce) / C88532) -
                         (ae * (C88531 * C88545 + C88538 * ce)) / C88532;
    const double C3109 = (-(C88900 * C88845) / C88290) / C88268 -
                         (C88542 * C88536 * C88896) / C88532;
    const double C4413 = (-(C88731 * C88673 * C88900) / C88290) / C88268 -
                         (ae * C88673 * C88545) / C88532;
    const double C5195 = (-(ae * C88731 * C88545) / C88290) / C88268 -
                         (C88542 * C88536 * C88896) / C88532 +
                         C88731 * ((-(C88731 * C88900) / C88290) / C88268 -
                                   (ae * C88545) / C88532);
    const double C88910 = C88531 * C88907;
    const double C88919 = C88907 / C88532;
    const double C89754 = C88673 * C88907;
    const double C89820 = C88731 * C88907;
    const double C3710 =
        (-2 * C88673 * C88900) / C88532 +
        C88673 * ((-(C88907 * C88845) / C88290) / C88268 - C88900 / C88532);
    const double C4418 =
        C88731 * ((-(C88907 * C88845) / C88290) / C88268 - C88900 / C88532) -
        (ae * (C88558 * C88845 + C88545)) / C88532;
    const double C5954 =
        (-(ae * C88731 * C89315) / C88290) / C88268 -
        (C88673 * C88900) / C88532 +
        C88731 * ((-(C88731 * C88673 * C88907) / C88290) / C88268 -
                  (ae * C89315) / C88532);
    const double C88929 = C88531 * C88924;
    const double C89614 = C88924 * C88845;
    const double C89915 = C88673 * C88924;
    const double C89984 = C88731 * C88924;
    const double C644 =
        (-2 * C88531 * C88951) / C88532 +
        C88531 * ((-(C88571 * C88570 * C88948 * C88539) / C88290) / C88268 -
                  C88951 / C88532);
    const double C1498 = (-(C88673 * C88531 * C88951) / C88290) / C88268 -
                         (C88531 * C88895 * ce) / C88532;
    const double C2365 = (-(C88731 * C88531 * C88951) / C88290) / C88268 -
                         (ae * C88531 * C88679) / C88532;
    const double C3199 = (-(C88673 * C88895 * ce) / C88290) / C88268 -
                         (C88542 * C88536 * C88948) / C88532 +
                         C88673 * ((-(C88673 * C88951) / C88290) / C88268 -
                                   (C88895 * ce) / C88532);
    const double C4493 = C88731 * ((-(C88673 * C88951) / C88290) / C88268 -
                                   (C88895 * ce) / C88532) -
                         (ae * (C88673 * C88679 + C88538 * ce)) / C88532;
    const double C5285 = (-(ae * C88731 * C88679) / C88290) / C88268 -
                         (C88542 * C88536 * C88948) / C88532 +
                         C88731 * ((-(C88731 * C88951) / C88290) / C88268 -
                                   (ae * C88679) / C88532);
    const double C88957 = C88954 / C88532;
    const double C89188 = C88531 * C88954;
    const double C89481 = C88673 * C88954;
    const double C89835 = C88731 * C88954;
    const double C645 =
        3 * ((-(C88954 * C88539) / C88290) / C88268 - C88951 / C88532) +
        C88531 * ((-2 * C88531 * C88954) / C88532 +
                  C88531 * ((-(C88613 * C88612 * C88948 * C88539) / C88290) /
                                C88268 -
                            C88954 / C88532));
    const double C1499 =
        C88673 * ((-(C88954 * C88539) / C88290) / C88268 - C88951 / C88532) -
        ((C88895 + C88901 * C88539) * ce) / C88532;
    const double C2366 =
        C88731 * ((-(C88954 * C88539) / C88290) / C88268 - C88951 / C88532) -
        (ae * (C88685 * C88539 + C88679)) / C88532;
    const double C3200 =
        (-(C88673 * C88903 * ce) / C88290) / C88268 -
        (C88531 * C88951) / C88532 +
        C88673 * ((-(C88673 * C88531 * C88954) / C88290) / C88268 -
                  (C88903 * ce) / C88532);
    const double C88959 = C88958 * C88539;
    const double C89489 = C88531 * C88958;
    const double C89621 = C88673 * C88958;
    const double C90003 = C88731 * C88958;
    const double C102 = ((0 * ae) / C88268 - C88273 / C88270) / (2 * C88268) +
                        (0 * ae) / C88268;
    const double C13579 = -(2 * C88273) / C88268;
    const double C39129 =
        ((C90485 - (C88266 * 2 * C88273) / C88268) * ae) / C88268 -
        C88267 / C88272;
    const double C39130 = (0 * ae) / C88268 - C88273 / C88270;
    const double C90 = (2 * C90766 * C90767) / C88268;
    const double C39125 = C90767 / C88268;
    const double C101 =
        (((C90485 - (C88266 * 2 * C88273) / C88268) * ae) / C88268 -
         C88267 / C88272) /
            (2 * C88268) +
        ((C88266 * ((0 * ae) / C88268 - C88273 / C88270) + C39126) * ae) /
            C88268;
    const double C88306 = C88301 / C88294;
    const double C88304 = 2 * C88301;
    const double C90748 = C90499 / C88299;
    const double C90747 = C90499 * C90494;
    const double C90744 = C90499 / C88290;
    const double C90506 = C90503 * C90494;
    const double C95 = C90503 / C90750;
    const double C6691 = C90503 / C88295;
    const double C821 = (C90498 * std::pow(C90494, 2)) / C88294 + C90746;
    const double C90769 = C90745 / C88290;
    const double C822 = (-2 * C90502 * C90745) / C88290;
    const double C88365 = 2 * C88364;
    const double C88383 = C88364 / C88294;
    const double C90757 = C90552 / C88299;
    const double C90756 = C90552 * C90551;
    const double C90752 = C90552 / C88290;
    const double C90558 = C90555 * C90551;
    const double C3363 = C90555 / C90750;
    const double C7400 = C90555 / C88295;
    const double C90772 = C90755 / C88290;
    const double C2566 = (-2 * C90502 * C90755) / C88290;
    const double C2565 = (C90541 * std::pow(C90551, 2)) / C88294 + C90754;
    const double C88412 = 2 * C88411;
    const double C88428 = C88411 / C88294;
    const double C90762 = C90576 / C88299;
    const double C90761 = C90576 * C90575;
    const double C90753 = C90576 / C88290;
    const double C90582 = C90579 * C90575;
    const double C6162 = C90579 / C90750;
    const double C10691 = C90579 / C88295;
    const double C90775 = C90760 / C88290;
    const double C4654 = (-2 * C90502 * C90760) / C88290;
    const double C4653 = (C90567 * std::pow(C90575, 2)) / C88294 + C90759;
    const double C13732 = ((0 * ae) / C88268 - C88491 / C88270) / (2 * C88268) +
                          (0 * ae) / C88268;
    const double C39329 =
        ((C90623 - (C88488 * 2 * C88491) / C88268) * ae) / C88268 -
        C88489 / C88272;
    const double C39330 = (0 * ae) / C88268 - C88491 / C88270;
    const double C325 = C307 * C109;
    const double C323 = C307 * C117;
    const double C321 = C307 * C108;
    const double C402 = C307 * C183;
    const double C482 = C307 * C246;
    const double C1104 = C307 * C829;
    const double C1972 = C307 * C1697;
    const double C27902 = C307 * C4656;
    const double C27896 = C307 * C1707;
    const double C27894 = C307 * C1700;
    const double C27993 = C307 * C1794;
    const double C28076 = C307 * C1879;
    const double C29736 = C307 * C3891;
    const double C13577 = (2 * C90766 * C90778) / C88268;
    const double C39127 = C90778 / C88268;
    const double C13731 =
        (((C90623 - (C88488 * 2 * C88491) / C88268) * ae) / C88268 -
         C88489 / C88272) /
            (2 * C88268) +
        ((C88488 * ((0 * ae) / C88268 - C88491 / C88270) + C39128) * ae) /
            C88268;
    const double C26734 = ((0 * ae) / C88268 - C88506 / C88270) / (2 * C88268) +
                          (0 * ae) / C88268;
    const double C56029 =
        ((C90634 - (C88503 * 2 * C88506) / C88268) * ae) / C88268 -
        C88504 / C88272;
    const double C56030 = (0 * ae) / C88268 - C88506 / C88270;
    const double C572 = C554 * C109;
    const double C570 = C554 * C117;
    const double C568 = C554 * C108;
    const double C649 = C554 * C183;
    const double C727 = C554 * C246;
    const double C1406 = C554 * C829;
    const double C2274 = C554 * C1697;
    const double C14606 = C554 * C2570;
    const double C14600 = C554 * C839;
    const double C14598 = C554 * C832;
    const double C14696 = C554 * C927;
    const double C14777 = C554 * C1011;
    const double C17372 = C554 * C3891;
    const double C26430 = (2 * C90766 * C90779) / C88268;
    const double C55625 = C90779 / C88268;
    const double C26733 =
        (((C90634 - (C88503 * 2 * C88506) / C88268) * ae) / C88268 -
         C88504 / C88272) /
            (2 * C88268) +
        ((C88503 * ((0 * ae) / C88268 - C88506 / C88270) + C55626) * ae) /
            C88268;
    const double C14063 = C90485 * C834;
    const double C39841 = C39126 * C834;
    const double C27581 = C90485 * C1702;
    const double C57271 = C39126 * C1702;
    const double C14071 = C90485 * C2574;
    const double C15547 = C90485 * C3373;
    const double C16851 = C90485 * C3897;
    const double C16847 = C90485 * C3908;
    const double C27589 = C90485 * C4660;
    const double C30269 = C90485 * C6171;
    const double C327 = C307 * C118;
    const double C574 = C554 * C118;
    const double C1106 = C307 * C838;
    const double C1408 = C554 * C838;
    const double C1974 = C307 * C1706;
    const double C2276 = C554 * C1706;
    const double C14608 = C554 * C2577;
    const double C16053 = C554 * C3370;
    const double C17370 = C554 * C3900;
    const double C29738 = C307 * C3900;
    const double C17366 = C554 * C3905;
    const double C29746 = C307 * C3905;
    const double C27904 = C307 * C4663;
    const double C30548 = C307 * C6168;
    const double C88565 = C88562 + C88556;
    const double C89165 = C89163 + C88556;
    const double C89357 = C89355 + C88556;
    const double C2664 = -(C88673 * (C88673 * C88687 + C88554 * ce) +
                           C88531 * C88679 + C88673 * C88554 * ce) /
                         C88290;
    const double C2828 =
        (C88531 * C88794 + C88673 * (C88673 * C88802 + C88554 * ae) +
         C88673 * C88554 * ae) /
        C88268;
    const double C3990 = -(C88731 * (C88673 * C88687 + C88554 * ce)) / C88290;
    const double C4076 =
        -(C88731 * C88673 * C88745 + C88673 * C88554 * ce) / C88290;
    const double C4162 = (C88731 * (C88673 * C88802 + C88554 * ae)) / C88268;
    const double C4408 =
        (C88731 * C88673 * C88903 + C88673 * C88554 * ae) / C88268;
    const double C4832 = -(C88731 * (C88731 * C88745 + C88554 * ce) +
                           C88531 * C88737 + C88731 * C88554 * ce) /
                         C88290;
    const double C5192 =
        (C88531 * C88895 + C88731 * (C88731 * C88903 + C88554 * ae) +
         C88731 * C88554 * ae) /
        C88268;
    const double C2571 = C88531 * C88538 + C88554 * C88845;
    const double C3366 =
        2 * C88673 * C88554 + C88673 * (C88554 + C88577 * C88845);
    const double C3892 = C88731 * C88673 * C88554;
    const double C3895 = C88731 * (C88554 + C88577 * C88845);
    const double C4657 = C88531 * C88538 + C88554 * C88967;
    const double C6164 =
        2 * C88731 * C88554 + C88731 * (C88554 + C88577 * C88967);
    const double C88564 = C88561 + C88553;
    const double C89164 = C89161 + C88553;
    const double C89356 = C89353 + C88553;
    const double C88563 = C88560 * C88540;
    const double C88850 = C88849 * C88540;
    const double C88972 = C88971 * C88540;
    const double C5637 = -(C88731 * (C88731 * C89320 + C89162 * ce) +
                           C88673 * C88737 + C88731 * C89162 * ce) /
                         C88290;
    const double C5951 =
        (C88673 * C88895 + C88731 * (C88731 * C89321 + C89162 * ae) +
         C88731 * C89162 * ae) /
        C88268;
    const double C5471 = C88673 * C88538 + C89162 * C88967;
    const double C19088 =
        2 * C88731 * C89162 + C88731 * (C89162 + C89416 * C88967);
    const double C406 = C90623 * C396;
    const double C731 = C90634 * C721;
    const double C329 = C307 * C110;
    const double C576 = C554 * C110;
    const double C1108 = C307 * C830;
    const double C1410 = C554 * C830;
    const double C1976 = C307 * C1698;
    const double C2278 = C554 * C1698;
    const double C16055 = C554 * C3367;
    const double C17368 = C554 * C3896;
    const double C29744 = C307 * C3896;
    const double C30550 = C307 * C6165;
    const double C405 = C307 * C184;
    const double C652 = C554 * C184;
    const double C407 = C307 * C185;
    const double C654 = C554 * C185;
    const double C1209 = C307 * C925;
    const double C1511 = C554 * C925;
    const double C1204 = C307 * C926;
    const double C1506 = C554 * C926;
    const double C2070 = C307 * C1791;
    const double C2372 = C554 * C1791;
    const double C2073 = C307 * C1792;
    const double C2375 = C554 * C1792;
    const double C14698 = C554 * C2663;
    const double C17468 = C554 * C3989;
    const double C29845 = C307 * C3989;
    const double C27996 = C307 * C4746;
    const double C30646 = C307 * C6227;
    const double C485 = C307 * C247;
    const double C730 = C554 * C247;
    const double C487 = C307 * C248;
    const double C732 = C554 * C248;
    const double C1305 = C307 * C1009;
    const double C1606 = C554 * C1009;
    const double C1308 = C307 * C1010;
    const double C1609 = C554 * C1010;
    const double C2173 = C307 * C1877;
    const double C2474 = C554 * C1877;
    const double C2168 = C307 * C1878;
    const double C2469 = C554 * C1878;
    const double C14780 = C554 * C2745;
    const double C16230 = C554 * C3489;
    const double C17556 = C554 * C4075;
    const double C29940 = C307 * C4075;
    const double C17561 = C554 * C4080;
    const double C29944 = C307 * C4080;
    const double C28078 = C307 * C4831;
    const double C328 = C90623 * C316;
    const double C326 = C90623 * C310;
    const double C330 = C90623 * C311;
    const double C1105 = C90623 * C1093;
    const double C39333 = C39128 * C1093;
    const double C1109 = C90623 * C1095;
    const double C39343 = C39128 * C1095;
    const double C1973 = C90623 * C1961;
    const double C1977 = C90623 * C1963;
    const double C29737 = C90623 * C4161;
    const double C73885 = C39128 * C4161;
    const double C27903 = C90623 * C4913;
    const double C30551 = C90623 * C6343;
    const double C575 = C90634 * C563;
    const double C573 = C90634 * C557;
    const double C577 = C90634 * C558;
    const double C1407 = C90634 * C1395;
    const double C1411 = C90634 * C1397;
    const double C2275 = C90634 * C2263;
    const double C56033 = C55626 * C2263;
    const double C2279 = C90634 * C2265;
    const double C56043 = C55626 * C2265;
    const double C14607 = C90634 * C3105;
    const double C16056 = C90634 * C3707;
    const double C17373 = C90634 * C4407;
    const double C73267 = C55626 * C4407;
    const double C17369 = C90634 * C4412;
    const double C75091 = C55626 * C4412;
    const double C88595 = C88591 + C88580;
    const double C88619 = C88609 / C88290;
    const double C89506 = C88609 / C88532;
    const double C88998 = C88995 * ce;
    const double C89507 = 2 * C88995;
    const double C89895 = C88731 * C88995;
    const double C19092 =
        (2 * C88731 * C89300 + C88731 * (C89300 + C88995 * C88967)) / C88268;
    const double C89057 = C89054 * ce;
    const double C89965 = 2 * C89054;
    const double C89387 = C88559 + C89385;
    const double C89796 = C88559 + C89794;
    const double C88594 = C88590 + C88576;
    const double C88620 = C88610 / C88532;
    const double C88999 = ae * C88996;
    const double C89527 = -2 * C88996;
    const double C89914 = C88731 * C88996;
    const double C19091 = (-2 * C88731 * C89315) / C88290 -
                          (C88731 * (C88996 * C88967 + C89315)) / C88290;
    const double C89058 = ae * C89055;
    const double C89985 = -2 * C89055;
    const double C89402 = C89400 + C88558;
    const double C89823 = C89821 + C88558;
    const double C88593 = C88589 * C88540;
    const double C88651 = C88643 + C88628;
    const double C89563 = C89554 + C88628;
    const double C90043 = C90032 + C88628;
    const double C88634 = C88569 + C88626;
    const double C88636 = C88625 * ae;
    const double C88633 = C88625 * ce;
    const double C89440 = C88625 * C88845;
    const double C89439 = C88673 * C88625;
    const double C89877 = C88625 * C88967;
    const double C89876 = C88731 * C88625;
    const double C88648 = C88640 + C88624;
    const double C89560 = C89549 + C88624;
    const double C90039 = C90026 + C88624;
    const double C88647 = C88639 * C88540;
    const double C88861 = C88860 * C88540;
    const double C88983 = C88982 * C88540;
    const double C89562 = C88569 + C89551;
    const double C89564 = C89550 * ae;
    const double C89561 = C89550 * ce;
    const double C89936 = C89550 * C88967;
    const double C89935 = C88731 * C89550;
    const double C89911 = C88569 + C89909;
    const double C90044 = C90027 * ae;
    const double C90040 = C90027 * ce;
    const double C88697 = C88695 + C88685;
    const double C88709 = C88705 / C88532;
    const double C88710 = -2 * C88702;
    const double C88707 = ae * C88702;
    const double C89168 = C88673 * C88702;
    const double C89843 = C88731 * C88702;
    const double C6226 = (-2 * C88731 * C88687) / C88290 -
                         (C88731 * (C88702 * C88967 + C88687)) / C88290;
    const double C89421 = C89415 + C88576;
    const double C89666 = ae * C89663;
    const double C90004 = -2 * C89663;
    const double C89838 = C89836 + C88685;
    const double C88755 = C88753 + C88743;
    const double C88767 = C88763 / C88532;
    const double C88768 = -2 * C88760;
    const double C88765 = ae * C88760;
    const double C89323 = C88673 * C88760;
    const double C89359 = C88731 * C88760;
    const double C3488 = (-2 * C88673 * C88745) / C88290 -
                         (C88673 * (C88760 * C88845 + C88745)) / C88290;
    const double C4079 = -(C88731 * (C88760 * C88845 + C88745) +
                           (C88554 + C88577 * C88845) * ce) /
                         C88290;
    const double C89463 = C89461 + C88743;
    const double C89598 = -2 * C89593;
    const double C89596 = ae * C89593;
    const double C89759 = C88731 * C89593;
    const double C89685 = C89683 + C88576;
    const double C88812 = C88800 + C88810;
    const double C88824 = C88820 / C88532;
    const double C89546 = C88820 / C88290;
    const double C88825 = 2 * C88817;
    const double C88822 = C88817 * ce;
    const double C89170 = C88673 * C88817;
    const double C89815 = C88731 * C88817;
    const double C6342 =
        (2 * C88731 * C88802 + C88731 * (C88802 + C88817 * C88967)) / C88268;
    const double C89424 = C89418 + C88580;
    const double C89665 = C89662 * ce;
    const double C89979 = 2 * C89662;
    const double C89813 = C88800 + C89812;
    const double C88855 = C88854 * C88540;
    const double C88913 = C88901 + C88911;
    const double C88925 = C88921 / C88532;
    const double C90023 = C88921 / C88290;
    const double C88926 = 2 * C88918;
    const double C88923 = C88918 * ce;
    const double C89324 = C88673 * C88918;
    const double C89361 = C88731 * C88918;
    const double C3706 =
        (2 * C88673 * C88903 + C88673 * (C88903 + C88918 * C88845)) / C88268;
    const double C4411 = (C88731 * (C88903 + C88918 * C88845) +
                          (C88554 + C88577 * C88845) * ae) /
                         C88268;
    const double C89484 = C88901 + C89482;
    const double C89625 = 2 * C89620;
    const double C89623 = C89620 * ce;
    const double C89761 = C88731 * C89620;
    const double C89863 = C89857 + C88580;
    const double C88977 = C88976 * C88540;
    const double C88581 = -C88572;
    const double C18355 = C90485 * C5477;
    const double C3548 =
        2 * ((-(C88673 * C88799) / C88290) / C88268 - (ae * C88545) / C88532) -
        (ae * (C88558 * C88845 + C88545)) / C88532 +
        C88673 *
            ((-(ae * C88673 * C88558) / C88290) / C88268 - C88799 / C88532 +
             C88673 * ((-(C88673 * C88806) / C88290) / C88268 - C88573));
    const double C6508 =
        2 * ((-(C88731 * C88900) / C88290) / C88268 - (ae * C88545) / C88532) -
        (ae * (C88558 * C88967 + C88545)) / C88532 +
        C88731 *
            ((-(ae * C88731 * C88558) / C88290) / C88268 - C88900 / C88532 +
             C88731 * ((-(C88731 * C88907) / C88290) / C88268 - C88573));
    const double C18850 = C554 * C5474;
    const double C29742 = C307 * C5474;
    const double C111 = 3 * (C88538 + C88548 * C88539) +
                        C88531 * (2 * C88554 + C88531 * C88585);
    const double C831 = C88673 * (2 * C88554 + C88531 * C88585);
    const double C1699 = C88731 * (2 * C88554 + C88531 * C88585);
    const double C2572 = C88538 + C88548 * C88539 + C88585 * C88845;
    const double C3893 = C88731 * C88673 * C88585;
    const double C4658 = C88538 + C88548 * C88539 + C88585 * C88967;
    const double C5470 = C88673 * C88554 + C89169 * C88967;
    const double C15525 = 3 * (C88538 + C88548 * C88845) +
                          C88673 * (2 * C89162 + C88673 * C89423);
    const double C16835 = C88731 * (2 * C89162 + C88673 * C89423);
    const double C17651 = C88538 + C88548 * C88845 + C89423 * C88967;
    const double C30247 = 3 * (C88538 + C88548 * C88967) +
                          C88731 * (2 * C89354 + C88731 * C89862);
    const double C6561 =
        2 * ((-(C88731 * C88951) / C88290) / C88268 - (ae * C88679) / C88532) -
        (ae * (C88685 * C88967 + C88679)) / C88532 +
        C88731 *
            ((-(ae * C88731 * C88685) / C88290) / C88268 - C88951 / C88532 +
             C88731 * ((-(C88731 * C88954) / C88290) / C88268 - C88692));
    const double C5013 = C307 * C4747;
    const double C5291 = C554 * C4747;
    const double C3654 =
        2 * ((-(C88673 * C88875) / C88290) / C88268 - (ae * C88737) / C88532) -
        (ae * (C88743 * C88845 + C88737)) / C88532 +
        C88673 *
            ((-(ae * C88673 * C88743) / C88290) / C88268 - C88875 / C88532 +
             C88673 * ((-(C88673 * C88878) / C88290) / C88268 - C88750));
    const double C3023 = C307 * C2746;
    const double C3301 = C554 * C2746;
    const double C4330 =
        (-(C88731 * C88875) / C88290) / C88268 - (C88794 * ce) / C88532 -
        (ae * (C88731 * C88673 * C88743 + C89162 * ce)) / C88532 +
        C88673 * (C88673 * ((-(C88731 * C88878) / C88290) / C88268 - C88807) -
                  (ae * (C88731 * C88743 + C88553)) / C88532);
    const double C5872 =
        C88673 *
            ((-(C88731 * C88800 * ce) / C88290) / C88268 - C88875 / C88532 +
             C88731 * ((-(C88731 * C88878) / C88290) / C88268 - C88807)) -
        (ae * (C88731 * (C88731 * C88743 + C88553) + C88737 +
               C88731 * C88548 * ce)) /
            C88532;
    const double C6450 =
        2 * ((-(C88731 * C88875) / C88290) / C88268 - (C88794 * ce) / C88532) -
        ((C88794 + C88800 * C88967) * ce) / C88532 +
        C88731 *
            ((-(C88731 * C88800 * ce) / C88290) / C88268 - C88875 / C88532 +
             C88731 * ((-(C88731 * C88878) / C88290) / C88268 - C88807));
    const double C89419 = -C89413;
    const double C4923 = C90623 * C4914;
    const double C3761 =
        2 * ((-(C88673 * C88951) / C88290) / C88268 - (C88895 * ce) / C88532) -
        ((C88895 + C88901 * C88845) * ce) / C88532 +
        C88673 *
            ((-(C88673 * C88901 * ce) / C88290) / C88268 - C88951 / C88532 +
             C88673 * ((-(C88673 * C88954) / C88290) / C88268 - C88908));
    const double C89858 = -C89852;
    const double C3115 = C90634 * C3106;
    const double C89512 = C88673 * C89510;
    const double C89902 = C88995 + C89900;
    const double C89970 = C88731 * C89968;
    const double C89535 = C88673 * C89532;
    const double C89920 = C89918 + C88996;
    const double C89993 = C88731 * C89990;
    const double C88721 = C88531 * C88718;
    const double C89174 = C88673 * C88718;
    const double C89847 = C89845 + C88702;
    const double C90012 = C88731 * C90009;
    const double C88779 = C88531 * C88776;
    const double C89326 = C88673 * C88776;
    const double C89365 = C88731 * C88776;
    const double C89474 = C89472 + C88760;
    const double C90083 = C88731 * C90080;
    const double C89603 = C88673 * C89599;
    const double C89765 = C88731 * C89599;
    const double C88835 = C88531 * C88832;
    const double C89176 = C88673 * C88832;
    const double C89817 = C88817 + C89816;
    const double C89980 = C88731 * C89912;
    const double C88936 = C88531 * C88933;
    const double C89327 = C88673 * C88933;
    const double C89367 = C88731 * C88933;
    const double C89495 = C88918 + C89493;
    const double C90084 = C88731 * C90082;
    const double C89629 = C88673 * C89626;
    const double C89767 = C88731 * C89626;
    const double C14185 = C90485 * C931;
    const double C39973 = C39126 * C931;
    const double C27708 = C90485 * C1796;
    const double C57405 = C39126 * C1796;
    const double C14183 = C90485 * C2667;
    const double C16948 = C90485 * C3995;
    const double C27703 = C90485 * C4750;
    const double C88696 = C88694 / C88290;
    const double C30359 =
        3 * ((-(C88691 * C88967) / C88290) / C88268 - C88684 / C88532) +
        C88731 * ((-2 * C88731 * C88691) / C88532 +
                  C88731 * ((-(C88708 * C88967) / C88290) / C88268 - C88703));
    const double C89386 = C89383 / C88290;
    const double C15640 = C90485 * C3436;
    const double C16950 = C90485 * C4000;
    const double C18447 = C90485 * C5560;
    const double C30368 = C90485 * C6230;
    const double C88717 = C88713 / C88290;
    const double C89509 = C89505 / C88290;
    const double C89958 = C89957 / C88290;
    const double C332 = C90623 * C317;
    const double C1107 = C90623 * C1099;
    const double C39337 = C39128 * C1099;
    const double C1975 = C90623 * C1967;
    const double C29739 = C90623 * C4167;
    const double C73889 = C39128 * C4167;
    const double C27905 = C90623 * C4917;
    const double C88811 = C88809 / C88290;
    const double C17891 =
        (-(C88806 * C88967) / C88290) / C88268 - C88799 / C88532 -
        (ae * (C88996 * C88967 + C89315)) / C88532 +
        C88673 * (C88673 * ((-(C88823 * C88967) / C88290) / C88268 - C88818) -
                  (ae * (C88583 * C88967 + C88558)) / C88532);
    const double C89401 = C89399 / C88290;
    const double C29747 = C90623 * C4172;
    const double C76342 = C39128 * C4172;
    const double C29743 = C90623 * C5720;
    const double C77318 = C39128 * C5720;
    const double C30549 = C90623 * C6346;
    const double C88831 = C88828 / C88290;
    const double C89530 = C89526 / C88290;
    const double C89654 = C88673 * C89653;
    const double C89722 = C89721 / C88290;
    const double C14280 = C90485 * C1015;
    const double C40091 = C39126 * C1015;
    const double C27807 = C90485 * C1883;
    const double C57519 = C39126 * C1883;
    const double C14277 = C90485 * C2749;
    const double C17038 = C90485 * C4081;
    const double C27805 = C90485 * C4835;
    const double C88754 = C88752 / C88290;
    const double C15720 =
        3 * ((-(C88749 * C88845) / C88290) / C88268 - C88742 / C88532) +
        C88673 * ((-2 * C88673 * C88749) / C88532 +
                  C88673 * ((-(C88766 * C88845) / C88290) / C88268 - C88761));
    const double C89795 = C89793 / C88290;
    const double C15725 = C90485 * C3492;
    const double C17043 = C90485 * C4086;
    const double C18534 = C90485 * C5640;
    const double C30455 = C90485 * C6290;
    const double C88775 = C88771 / C88290;
    const double C89520 = C89519 / C88290;
    const double C89899 = C88731 * C89896;
    const double C89967 = C89964 / C88290;
    const double C488 = C90623 * C477;
    const double C1309 = C90623 * C1300;
    const double C39521 = C39128 * C1300;
    const double C2169 = C90623 * C2160;
    const double C29941 = C90623 * C4327;
    const double C74097 = C39128 * C4327;
    const double C28079 = C90623 * C5095;
    const double C4328 = C88673 * ((-(C88731 * C89181) / C88290) / C88268 -
                                   (C88802 * ce) / C88532) -
                         (ae * (C88731 * C88745 + C88554 * ce)) / C88532;
    const double C5096 = (-(C88731 * C88802 * ce) / C88290) / C88268 -
                         (C88531 * C88875) / C88532 +
                         C88731 * ((-(C88731 * C89181) / C88290) / C88268 -
                                   (C88802 * ce) / C88532);
    const double C89462 = C89460 / C88290;
    const double C89677 = C89676 / C88290;
    const double C492 = C90623 * C478;
    const double C1306 = C90623 * C1299;
    const double C39523 = C39128 * C1299;
    const double C2174 = C90623 * C2161;
    const double C3024 = C90623 * C3018;
    const double C40437 = C39128 * C3018;
    const double C88884 = C88883 / C88290;
    const double C89471 = C88673 * C89468;
    const double C89778 = C88731 * C89468;
    const double C89597 = C89594 / C88290;
    const double C89684 = C89682 / C88290;
    const double C579 = C90634 * C564;
    const double C1409 = C90634 * C1401;
    const double C2277 = C90634 * C2269;
    const double C56037 = C55626 * C2269;
    const double C14609 = C90634 * C3109;
    const double C17371 = C90634 * C4413;
    const double C73271 = C55626 * C4413;
    const double C88912 = C88910 / C88290;
    const double C16040 =
        3 * ((-(C88907 * C88845) / C88290) / C88268 - C88900 / C88532) +
        C88673 * ((-2 * C88673 * C88907) / C88532 +
                  C88673 * ((-(C88924 * C88845) / C88290) / C88268 - C88919));
    const double C89822 = C89820 / C88290;
    const double C16054 = C90634 * C3710;
    const double C17367 = C90634 * C4418;
    const double C75087 = C55626 * C4418;
    const double C18851 = C90634 * C5954;
    const double C76678 = C55626 * C5954;
    const double C88932 = C88929 / C88290;
    const double C89615 = C89614 / C88290;
    const double C89917 = C88731 * C89915;
    const double C89988 = C89984 / C88290;
    const double C655 = C90634 * C644;
    const double C1507 = C90634 * C1498;
    const double C2373 = C90634 * C2365;
    const double C56137 = C55626 * C2365;
    const double C14699 = C90634 * C3199;
    const double C17469 = C90634 * C4493;
    const double C73375 = C55626 * C4493;
    const double C4495 = C88731 * ((-(C88673 * C89188) / C88290) / C88268 -
                                   (C88903 * ce) / C88532) -
                         (ae * (C88673 * C88687 + C88554 * ce)) / C88532;
    const double C5286 = (-(ae * C88731 * C88687) / C88290) / C88268 -
                         (C88531 * C88951) / C88532 +
                         C88731 * ((-(C88731 * C89188) / C88290) / C88268 -
                                   (ae * C88687) / C88532);
    const double C89483 = C89481 / C88290;
    const double C89837 = C89835 / C88290;
    const double C659 = C90634 * C645;
    const double C1512 = C90634 * C1499;
    const double C2376 = C90634 * C2366;
    const double C56139 = C55626 * C2366;
    const double C3210 = C90634 * C3200;
    const double C88960 = C88959 / C88290;
    const double C89492 = C88673 * C89489;
    const double C89844 = C88731 * C89489;
    const double C89624 = C89621 / C88290;
    const double C90007 = C90003 / C88290;
    const double C14072 = C13579 * C2577;
    const double C14070 = C13579 * C2570;
    const double C14066 = C13579 * C830;
    const double C14064 = C13579 * C838;
    const double C14062 = C13579 * C829;
    const double C14060 = C13579 * C839;
    const double C14058 = C13579 * C832;
    const double C14188 = C13579 * C925;
    const double C14184 = C13579 * C926;
    const double C14182 = C13579 * C2663;
    const double C14180 = C13579 * C927;
    const double C14285 = C13579 * C1009;
    const double C14282 = C13579 * C2746;
    const double C14279 = C13579 * C1010;
    const double C14276 = C13579 * C2745;
    const double C14273 = C13579 * C1011;
    const double C15546 = C13579 * C3367;
    const double C15544 = C13579 * C3370;
    const double C15724 = C13579 * C3489;
    const double C16850 = C13579 * C3891;
    const double C16848 = C13579 * C3900;
    const double C16846 = C13579 * C3896;
    const double C16844 = C13579 * C3905;
    const double C16947 = C13579 * C3989;
    const double C17042 = C13579 * C4080;
    const double C17037 = C13579 * C4075;
    const double C18356 = C13579 * C5474;
    const double C27590 = C13579 * C4663;
    const double C27588 = C13579 * C4656;
    const double C27584 = C13579 * C1698;
    const double C27582 = C13579 * C1706;
    const double C27580 = C13579 * C1697;
    const double C27578 = C13579 * C1707;
    const double C27576 = C13579 * C1700;
    const double C27711 = C13579 * C1792;
    const double C27707 = C13579 * C1791;
    const double C27704 = C13579 * C4747;
    const double C27702 = C13579 * C4746;
    const double C27699 = C13579 * C1794;
    const double C27810 = C13579 * C1877;
    const double C27806 = C13579 * C1878;
    const double C27804 = C13579 * C4831;
    const double C27802 = C13579 * C1879;
    const double C30268 = C13579 * C6165;
    const double C30266 = C13579 * C6168;
    const double C30367 = C13579 * C6227;
    const double C39854 = C39129 * C830;
    const double C39852 = C39129 * C838;
    const double C39848 = C39129 * C829;
    const double C39842 = C39129 * C839;
    const double C39838 = C39129 * C832;
    const double C39982 = C39129 * C925;
    const double C39976 = C39129 * C926;
    const double C39974 = C39129 * C927;
    const double C40096 = C39129 * C1009;
    const double C40092 = C39129 * C1010;
    const double C40088 = C39129 * C1011;
    const double C41801 = C39129 * C2570;
    const double C41797 = C39129 * C2577;
    const double C41913 = C39129 * C2663;
    const double C42027 = C39129 * C2746;
    const double C42025 = C39129 * C2745;
    const double C42732 = C39129 * C3370;
    const double C42728 = C39129 * C3367;
    const double C42878 = C39129 * C3489;
    const double C43396 = C39129 * C3905;
    const double C43392 = C39129 * C3896;
    const double C43390 = C39129 * C3891;
    const double C43386 = C39129 * C3900;
    const double C43506 = C39129 * C3989;
    const double C43620 = C39129 * C4080;
    const double C43618 = C39129 * C4075;
    const double C45248 = C39129 * C5474;
    const double C57284 = C39129 * C1698;
    const double C57282 = C39129 * C1706;
    const double C57278 = C39129 * C1697;
    const double C57272 = C39129 * C1707;
    const double C57268 = C39129 * C1700;
    const double C57410 = C39129 * C1792;
    const double C57408 = C39129 * C1791;
    const double C57402 = C39129 * C1794;
    const double C57528 = C39129 * C1877;
    const double C57522 = C39129 * C1878;
    const double C57520 = C39129 * C1879;
    const double C60705 = C39129 * C4656;
    const double C60701 = C39129 * C4663;
    const double C60823 = C39129 * C4746;
    const double C60817 = C39129 * C4747;
    const double C60927 = C39129 * C4831;
    const double C62522 = C39129 * C6168;
    const double C62518 = C39129 * C6165;
    const double C62596 = C39129 * C6227;
    const double C39846 = C39130 * C830;
    const double C39844 = C39130 * C838;
    const double C39840 = C39130 * C829;
    const double C39978 = C39130 * C925;
    const double C39972 = C39130 * C926;
    const double C40094 = C39130 * C1009;
    const double C40090 = C39130 * C1010;
    const double C42023 = C39130 * C2746;
    const double C57276 = C39130 * C1698;
    const double C57274 = C39130 * C1706;
    const double C57270 = C39130 * C1697;
    const double C57406 = C39130 * C1792;
    const double C57404 = C39130 * C1791;
    const double C57524 = C39130 * C1877;
    const double C57518 = C39130 * C1878;
    const double C60821 = C39130 * C4747;
    const double C39849 = C39125 * C834;
    const double C39843 = C39125 * C846;
    const double C39839 = C39125 * C840;
    const double C39977 = C39125 * C931;
    const double C39975 = C39125 * C932;
    const double C40093 = C39125 * C1015;
    const double C40089 = C39125 * C1016;
    const double C41802 = C39125 * C2574;
    const double C41914 = C39125 * C2667;
    const double C42026 = C39125 * C2749;
    const double C42729 = C39125 * C3373;
    const double C42809 = C39125 * C3436;
    const double C42879 = C39125 * C3492;
    const double C43393 = C39125 * C3908;
    const double C43391 = C39125 * C3897;
    const double C43513 = C39125 * C4000;
    const double C43507 = C39125 * C3995;
    const double C43621 = C39125 * C4086;
    const double C43619 = C39125 * C4081;
    const double C45245 = C39125 * C5477;
    const double C45357 = C39125 * C5560;
    const double C45459 = C39125 * C5640;
    const double C57279 = C39125 * C1702;
    const double C57273 = C39125 * C1714;
    const double C57269 = C39125 * C1708;
    const double C57409 = C39125 * C1796;
    const double C57403 = C39125 * C1799;
    const double C57523 = C39125 * C1883;
    const double C57521 = C39125 * C1884;
    const double C60706 = C39125 * C4660;
    const double C60824 = C39125 * C4750;
    const double C60928 = C39125 * C4835;
    const double C62519 = C39125 * C6171;
    const double C62597 = C39125 * C6230;
    const double C62671 = C39125 * C6290;
    const double C100 =
        (((0 - (C88266 * C88267) / C88268) * ae) / C88268 - (0 * be) / C88272) /
            (2 * C88268) +
        ((C88266 * (((C90485 - (C88266 * 2 * C88273) / C88268) * ae) / C88268 -
                    C88267 / C88272) +
          C39125) *
         ae) /
            C88268 +
        (0 * ae) / C88268 - C88273 / C88270;
    const double C88309 = C88298 - C88306;
    const double C88308 = C88288 * C88304;
    const double C828 =
        ((-C88304 / C88290) / C88295 - (0 * de) / C88290) / C88295 -
        (0 * de) / C88290;
    const double C3364 = -C88304 / C88290;
    const double C7402 = (-C88304 / C88290) / C88295 - (0 * de) / C88290;
    const double C90770 = C90747 / C88294;
    const double C90749 = C90506 / C88290;
    const double C7396 = -C90769;
    const double C88380 = C88343 * C88365;
    const double C2661 =
        ((-C88362 / C88290) / C88295 -
         ((C90541 - (C88343 * C88365) / C88290) * de) / C88290) /
            C88295 -
        ((C88343 * ((-C88365 / C88290) / C88295 - (0 * de) / C88290) + C90555) *
         de) /
            C88290;
    const double C2662 =
        ((-C88365 / C88290) / C88295 - (0 * de) / C88290) / C88295 -
        (0 * de) / C88290;
    const double C6772 = (-C88365 / C88290) / C88295 - (0 * de) / C88290;
    const double C88390 = C88387 - C88383;
    const double C90773 = C90756 / C88294;
    const double C90758 = C90558 / C88290;
    const double C6692 = -C90772;
    const double C88425 = C88350 * C88412;
    const double C4829 =
        ((-C88409 / C88290) / C88295 -
         ((C90567 - (C88350 * C88412) / C88290) * de) / C88290) /
            C88295 -
        ((C88350 * ((-C88412 / C88290) / C88295 - (0 * de) / C88290) + C90579) *
         de) /
            C88290;
    const double C4830 =
        ((-C88412 / C88290) / C88295 - (0 * de) / C88290) / C88295 -
        (0 * de) / C88290;
    const double C9225 = (-C88412 / C88290) / C88295 - (0 * de) / C88290;
    const double C88435 = C88432 - C88428;
    const double C90776 = C90761 / C88294;
    const double C90763 = C90582 / C88290;
    const double C9074 = -C90775;
    const double C39350 = C39329 * C110;
    const double C39344 = C39329 * C118;
    const double C39340 = C39329 * C109;
    const double C39338 = C39329 * C117;
    const double C39334 = C39329 * C108;
    const double C39442 = C39329 * C185;
    const double C39440 = C39329 * C184;
    const double C39434 = C39329 * C183;
    const double C39526 = C39329 * C248;
    const double C39524 = C39329 * C247;
    const double C39518 = C39329 * C246;
    const double C40214 = C39329 * C830;
    const double C40208 = C39329 * C838;
    const double C40204 = C39329 * C829;
    const double C40330 = C39329 * C925;
    const double C40328 = C39329 * C926;
    const double C40440 = C39329 * C1009;
    const double C40438 = C39329 * C1010;
    const double C41161 = C39329 * C1698;
    const double C41155 = C39329 * C1706;
    const double C41151 = C39329 * C1697;
    const double C41277 = C39329 * C1792;
    const double C41273 = C39329 * C1791;
    const double C41387 = C39329 * C1877;
    const double C41385 = C39329 * C1878;
    const double C42347 = C39329 * C2746;
    const double C44722 = C39329 * C4747;
    const double C73886 = C39329 * C1707;
    const double C73882 = C39329 * C1700;
    const double C73992 = C39329 * C1794;
    const double C74098 = C39329 * C1879;
    const double C76347 = C39329 * C3905;
    const double C76343 = C39329 * C3896;
    const double C76339 = C39329 * C3900;
    const double C76335 = C39329 * C3891;
    const double C76459 = C39329 * C3989;
    const double C76573 = C39329 * C4080;
    const double C76567 = C39329 * C4075;
    const double C77323 = C39329 * C4656;
    const double C77319 = C39329 * C4663;
    const double C77429 = C39329 * C4746;
    const double C77531 = C39329 * C4831;
    const double C78242 = C39329 * C5474;
    const double C79046 = C39329 * C6168;
    const double C79042 = C39329 * C6165;
    const double C79120 = C39329 * C6227;
    const double C39342 = C39330 * C830;
    const double C39336 = C39330 * C838;
    const double C39332 = C39330 * C829;
    const double C39438 = C39330 * C925;
    const double C39436 = C39330 * C926;
    const double C39522 = C39330 * C1009;
    const double C39520 = C39330 * C1010;
    const double C40436 = C39330 * C2746;
    const double C73888 = C39330 * C3900;
    const double C73884 = C39330 * C3891;
    const double C73994 = C39330 * C3989;
    const double C74096 = C39330 * C4075;
    const double C76341 = C39330 * C3905;
    const double C76337 = C39330 * C3896;
    const double C76569 = C39330 * C4080;
    const double C77317 = C39330 * C5474;
    const double C338 = C323 + C324;
    const double C337 = C321 + C322;
    const double C413 = C402 + C403;
    const double C493 = C482 + C483;
    const double C27911 = C27896 + C27897;
    const double C27910 = C27894 + C27895;
    const double C27998 = C27993 + C27994;
    const double C28080 = C28076 + C28077;
    const double C39355 = C39127 * C317;
    const double C39351 = C39127 * C311;
    const double C39345 = C39127 * C316;
    const double C39341 = C39127 * C310;
    const double C39339 = C39127 * C315;
    const double C39335 = C39127 * C309;
    const double C39441 = C39127 * C396;
    const double C39435 = C39127 * C395;
    const double C39527 = C39127 * C477;
    const double C39525 = C39127 * C476;
    const double C39519 = C39127 * C475;
    const double C40215 = C39127 * C1095;
    const double C40209 = C39127 * C1099;
    const double C40205 = C39127 * C1093;
    const double C40441 = C39127 * C1299;
    const double C40439 = C39127 * C1300;
    const double C41162 = C39127 * C1963;
    const double C41156 = C39127 * C1967;
    const double C41152 = C39127 * C1961;
    const double C41388 = C39127 * C2161;
    const double C41386 = C39127 * C2160;
    const double C42348 = C39127 * C3018;
    const double C44615 = C39127 * C4914;
    const double C73887 = C39127 * C1966;
    const double C73883 = C39127 * C1962;
    const double C73993 = C39127 * C2066;
    const double C74099 = C39127 * C2159;
    const double C76348 = C39127 * C4172;
    const double C76340 = C39127 * C4167;
    const double C76336 = C39127 * C4161;
    const double C76568 = C39127 * C4327;
    const double C77324 = C39127 * C4913;
    const double C77320 = C39127 * C4917;
    const double C77532 = C39127 * C5095;
    const double C78243 = C39127 * C5720;
    const double C79047 = C39127 * C6346;
    const double C79043 = C39127 * C6343;
    const double C13730 =
        (((0 - (C88488 * C88489) / C88268) * ae) / C88268 - (0 * be) / C88272) /
            (2 * C88268) +
        ((C88488 * (((C90623 - (C88488 * 2 * C88491) / C88268) * ae) / C88268 -
                    C88489 / C88272) +
          C39127) *
         ae) /
            C88268 +
        (0 * ae) / C88268 - C88491 / C88270;
    const double C56050 = C56029 * C110;
    const double C56044 = C56029 * C118;
    const double C56040 = C56029 * C109;
    const double C56038 = C56029 * C117;
    const double C56034 = C56029 * C108;
    const double C56142 = C56029 * C185;
    const double C56140 = C56029 * C184;
    const double C56134 = C56029 * C183;
    const double C56226 = C56029 * C248;
    const double C56224 = C56029 * C247;
    const double C56218 = C56029 * C246;
    const double C56936 = C56029 * C830;
    const double C56930 = C56029 * C838;
    const double C56926 = C56029 * C829;
    const double C57052 = C56029 * C925;
    const double C57050 = C56029 * C926;
    const double C57162 = C56029 * C1009;
    const double C57160 = C56029 * C1010;
    const double C57955 = C56029 * C1698;
    const double C57949 = C56029 * C1706;
    const double C57945 = C56029 * C1697;
    const double C58071 = C56029 * C1792;
    const double C58067 = C56029 * C1791;
    const double C58181 = C56029 * C1877;
    const double C58179 = C56029 * C1878;
    const double C59109 = C56029 * C2746;
    const double C61456 = C56029 * C4747;
    const double C73268 = C56029 * C839;
    const double C73264 = C56029 * C832;
    const double C73376 = C56029 * C927;
    const double C73478 = C56029 * C1011;
    const double C75092 = C56029 * C2570;
    const double C75088 = C56029 * C2577;
    const double C75196 = C56029 * C2663;
    const double C75302 = C56029 * C2745;
    const double C75774 = C56029 * C3370;
    const double C75770 = C56029 * C3367;
    const double C75920 = C56029 * C3489;
    const double C76689 = C56029 * C3905;
    const double C76685 = C56029 * C3896;
    const double C76683 = C56029 * C3891;
    const double C76679 = C56029 * C3900;
    const double C76799 = C56029 * C3989;
    const double C76913 = C56029 * C4080;
    const double C76911 = C56029 * C4075;
    const double C78560 = C56029 * C5474;
    const double C56042 = C56030 * C1698;
    const double C56036 = C56030 * C1706;
    const double C56032 = C56030 * C1697;
    const double C56138 = C56030 * C1792;
    const double C56136 = C56030 * C1791;
    const double C56222 = C56030 * C1877;
    const double C56220 = C56030 * C1878;
    const double C58069 = C56030 * C4747;
    const double C73270 = C56030 * C3900;
    const double C73266 = C56030 * C3891;
    const double C73374 = C56030 * C3989;
    const double C73480 = C56030 * C4075;
    const double C75090 = C56030 * C3896;
    const double C75086 = C56030 * C3905;
    const double C75300 = C56030 * C4080;
    const double C76677 = C56030 * C5474;
    const double C585 = C570 + C571;
    const double C584 = C568 + C569;
    const double C660 = C649 + C650;
    const double C738 = C727 + C728;
    const double C14615 = C14600 + C14601;
    const double C14614 = C14598 + C14599;
    const double C14700 = C14696 + C14697;
    const double C14782 = C14777 + C14778;
    const double C56055 = C55625 * C564;
    const double C56051 = C55625 * C558;
    const double C56045 = C55625 * C563;
    const double C56041 = C55625 * C557;
    const double C56039 = C55625 * C562;
    const double C56035 = C55625 * C556;
    const double C56143 = C55625 * C644;
    const double C56141 = C55625 * C643;
    const double C56135 = C55625 * C642;
    const double C56225 = C55625 * C721;
    const double C56219 = C55625 * C720;
    const double C56937 = C55625 * C1397;
    const double C56931 = C55625 * C1401;
    const double C56927 = C55625 * C1395;
    const double C57053 = C55625 * C1499;
    const double C57051 = C55625 * C1498;
    const double C57956 = C55625 * C2265;
    const double C57950 = C55625 * C2269;
    const double C57946 = C55625 * C2263;
    const double C58072 = C55625 * C2366;
    const double C58068 = C55625 * C2365;
    const double C58898 = C55625 * C3106;
    const double C59006 = C55625 * C3200;
    const double C73269 = C55625 * C1400;
    const double C73265 = C55625 * C1396;
    const double C73377 = C55625 * C1497;
    const double C73479 = C55625 * C1602;
    const double C75093 = C55625 * C3105;
    const double C75089 = C55625 * C3109;
    const double C75197 = C55625 * C3199;
    const double C75775 = C55625 * C3710;
    const double C75771 = C55625 * C3707;
    const double C76690 = C55625 * C4418;
    const double C76686 = C55625 * C4412;
    const double C76684 = C55625 * C4407;
    const double C76680 = C55625 * C4413;
    const double C76800 = C55625 * C4493;
    const double C78561 = C55625 * C5954;
    const double C26732 =
        (((0 - (C88503 * C88504) / C88268) * ae) / C88268 - (0 * be) / C88272) /
            (2 * C88268) +
        ((C88503 * (((C90634 - (C88503 * 2 * C88506) / C88268) * ae) / C88268 -
                    C88504 / C88272) +
          C55625) *
         ae) /
            C88268 +
        (0 * ae) / C88268 - C88506 / C88270;
    const double C119 = (2 * (C88531 * C88546 + C88538 * ae) +
                         C88531 * (C88546 + C88531 * C88565 + C88554 * ae) +
                         (C88538 + C88548 * C88539) * ae) /
                        C88268;
    const double C835 =
        (C88673 * (C88546 + C88531 * C88565 + C88554 * ae)) / C88268;
    const double C1703 =
        (C88731 * (C88546 + C88531 * C88565 + C88554 * ae)) / C88268;
    const double C2575 =
        (C88531 * C88546 + C88538 * ae + C88565 * C88845) / C88268;
    const double C3898 = (C88731 * C88673 * C88565) / C88268;
    const double C4661 =
        (C88531 * C88546 + C88538 * ae + C88565 * C88967) / C88268;
    const double C3545 = (2 * (C88673 * C88794 + C88538 * ae) +
                          C88673 * (C88794 + C88673 * C89165 + C89162 * ae) +
                          (C88538 + C88548 * C88845) * ae) /
                         C88268;
    const double C4166 =
        (C88731 * (C88794 + C88673 * C89165 + C89162 * ae)) / C88268;
    const double C5717 =
        (C88673 * C88794 + C88538 * ae + C89165 * C88967) / C88268;
    const double C6505 = (2 * (C88731 * C88895 + C88538 * ae) +
                          C88731 * (C88895 + C88731 * C89357 + C89354 * ae) +
                          (C88538 + C88548 * C88967) * ae) /
                         C88268;
    const double C2931 = C307 * C2664;
    const double C3209 = C554 * C2664;
    const double C14186 = C13579 * C2664;
    const double C40326 = C39330 * C2664;
    const double C41919 = C39129 * C2664;
    const double C41915 = C39130 * C2664;
    const double C42243 = C39329 * C2664;
    const double C59005 = C56029 * C2664;
    const double C2837 = C90623 * C2828;
    const double C40207 = C39128 * C2828;
    const double C42136 = C39127 * C2828;
    const double C8539 = C307 * C3990;
    const double C8877 = C554 * C3990;
    const double C21129 = C13579 * C3990;
    const double C41275 = C39330 * C3990;
    const double C43508 = C39130 * C3990;
    const double C48714 = C39129 * C3990;
    const double C49126 = C39329 * C3990;
    const double C57048 = C56030 * C3990;
    const double C65912 = C56029 * C3990;
    const double C8652 = C307 * C4076;
    const double C8990 = C554 * C4076;
    const double C21238 = C13579 * C4076;
    const double C41383 = C39330 * C4076;
    const double C43616 = C39130 * C4076;
    const double C48848 = C39129 * C4076;
    const double C49262 = C39329 * C4076;
    const double C57158 = C56030 * C4076;
    const double C66048 = C56029 * C4076;
    const double C8426 = C90623 * C4162;
    const double C41154 = C39128 * C4162;
    const double C48987 = C39127 * C4162;
    const double C8764 = C90634 * C4408;
    const double C56929 = C55626 * C4408;
    const double C65773 = C55625 * C4408;
    const double C5105 = C307 * C4832;
    const double C5383 = C554 * C4832;
    const double C27808 = C13579 * C4832;
    const double C44826 = C39329 * C4832;
    const double C58177 = C56030 * C4832;
    const double C60933 = C39129 * C4832;
    const double C60929 = C39130 * C4832;
    const double C61560 = C56029 * C4832;
    const double C5201 = C90634 * C5192;
    const double C57948 = C55626 * C5192;
    const double C61349 = C55625 * C5192;
    const double C2836 = C307 * C2571;
    const double C3114 = C554 * C2571;
    const double C14074 = C13579 * C2571;
    const double C40206 = C39330 * C2571;
    const double C41799 = C39130 * C2571;
    const double C41791 = C39129 * C2571;
    const double C42135 = C39329 * C2571;
    const double C58897 = C56029 * C2571;
    const double C15542 = C13579 * C3366;
    const double C16051 = C554 * C3366;
    const double C42133 = C39330 * C3366;
    const double C42730 = C39130 * C3366;
    const double C8425 = C307 * C3892;
    const double C8763 = C554 * C3892;
    const double C21009 = C13579 * C3892;
    const double C41153 = C39330 * C3892;
    const double C43388 = C39130 * C3892;
    const double C48570 = C39129 * C3892;
    const double C48986 = C39329 * C3892;
    const double C56928 = C56030 * C3892;
    const double C65772 = C56029 * C3892;
    const double C21015 = C13579 * C3895;
    const double C21651 = C554 * C3895;
    const double C43394 = C39130 * C3895;
    const double C48984 = C39330 * C3895;
    const double C58581 = C307 * C3895;
    const double C58895 = C56030 * C3895;
    const double C4922 = C307 * C4657;
    const double C5200 = C554 * C4657;
    const double C27592 = C13579 * C4657;
    const double C44614 = C39329 * C4657;
    const double C57947 = C56030 * C4657;
    const double C60703 = C39130 * C4657;
    const double C60695 = C39129 * C4657;
    const double C61348 = C56029 * C4657;
    const double C30264 = C13579 * C6164;
    const double C30546 = C307 * C6164;
    const double C61346 = C56030 * C6164;
    const double C62520 = C39130 * C6164;
    const double C120 =
        (-2 * (C88531 * C88545 + C88538 * ce)) / C88290 -
        (C88531 * (C88531 * C88564 + C88545 + C88554 * ce)) / C88290 -
        ((C88538 + C88548 * C88539) * ce) / C88290;
    const double C837 =
        -(C88673 * (C88531 * C88564 + C88545 + C88554 * ce)) / C88290;
    const double C1705 =
        -(C88731 * (C88531 * C88564 + C88545 + C88554 * ce)) / C88290;
    const double C2578 =
        -(C88564 * C88845 + C88531 * C88545 + C88538 * ce) / C88290;
    const double C3901 = -(C88731 * C88673 * C88564) / C88290;
    const double C4664 =
        -(C88564 * C88967 + C88531 * C88545 + C88538 * ce) / C88290;
    const double C4494 =
        C88731 *
            ((-(C88673 * C88901 * ce) / C88290) / C88268 - C88951 / C88532 +
             C88673 * ((-(C88673 * C88954) / C88290) / C88268 - C88908)) -
        (ae * (C88673 * C89164 + C88679 + C89162 * ce)) / C88532;
    const double C6029 =
        (-(C88673 * C88951) / C88290) / C88268 - (C88895 * ce) / C88532 -
        (ae * C88731 * C89164) / C88532 +
        C88731 * (C88731 * ((-(C88673 * C88954) / C88290) / C88268 - C88908) -
                  (ae * C89164) / C88532);
    const double C3433 =
        (-2 * (C88673 * C88679 + C88538 * ce)) / C88290 -
        (C88673 * (C88673 * C89164 + C88679 + C89162 * ce)) / C88290 -
        ((C88538 + C88548 * C88845) * ce) / C88290;
    const double C3994 =
        -(C88731 * (C88673 * C89164 + C88679 + C89162 * ce)) / C88290;
    const double C5557 =
        -(C89164 * C88967 + C88673 * C88679 + C88538 * ce) / C88290;
    const double C6287 =
        (-2 * (C88731 * C88737 + C88538 * ce)) / C88290 -
        (C88731 * (C88731 * C89356 + C88737 + C89354 * ce)) / C88290 -
        ((C88538 + C88548 * C88967) * ce) / C88290;
    const double C128 =
        2 * ((-(C88546 * ce) / C88290) / C88268 - (ae * C88545) / C88532 -
             (C88531 * C88563) / C88532) -
        (ae * (C88531 * C88564 + C88545 + C88554 * ce)) / C88532 -
        ((C88546 + C88531 * C88565 + C88554 * ae) * ce) / C88532 +
        C88531 *
            ((-(ae * C88564) / C88290) / C88268 - C88563 / C88532 -
             (C88565 * ce) / C88532 +
             C88531 *
                 ((-(C88559 * ce) / C88290) / C88268 - (ae * C88558) / C88532 -
                  (C88531 *
                   (C88549 * C88550 + C88539 * bs[5] * std::pow(C88535, 5)) *
                   C88540) /
                      C88532));
    const double C845 = (-(C88673 * C88546 * ce) / C88290) / C88268 -
                        (ae * C88673 * C88545) / C88532 -
                        (C88531 * C88673 * C88563) / C88532;
    const double C1713 = (-(C88731 * C88546 * ce) / C88290) / C88268 -
                         (ae * C88731 * C88545) / C88532 -
                         (C88531 * C88731 * C88563) / C88532;
    const double C2582 =
        (-(C88563 * C88845) / C88290) / C88268 -
        ((C88538 + C88539 * C88536 * C88542) * C88540) / C88532;
    const double C3909 = (-(C88731 * C88673 * C88563) / C88290) / C88268;
    const double C4668 =
        (-(C88563 * C88967) / C88290) / C88268 -
        ((C88538 + C88539 * C88536 * C88542) * C88540) / C88532;
    const double C397 =
        (-2 * C88531 * C88850) / C88532 +
        C88531 * ((-((C88569 + C88845 * C88570 * C88571) * C88540 * C88539) /
                   C88290) /
                      C88268 -
                  C88850 / C88532);
    const double C1196 = (-(C88531 * C88794 * ce) / C88290) / C88268 -
                         (ae * C88531 * C88679) / C88532 -
                         (C88673 * C88531 * C88850) / C88532;
    const double C2063 = (-(C88731 * C88531 * C88850) / C88290) / C88268;
    const double C2921 =
        (-(ae * (C88673 * C88679 + C88538 * ce)) / C88290) / C88268 -
        ((C88538 + C88845 * C88536 * C88542) * C88540) / C88532 -
        ((C88673 * C88794 + C88538 * ae) * ce) / C88532 +
        C88673 * ((-(C88794 * ce) / C88290) / C88268 - (ae * C88679) / C88532 -
                  (C88673 * C88850) / C88532);
    const double C4247 = (-(C88731 * C88794 * ce) / C88290) / C88268 -
                         (ae * C88731 * C88679) / C88532 -
                         (C88673 * C88731 * C88850) / C88532;
    const double C5007 =
        (-(C88850 * C88967) / C88290) / C88268 -
        ((C88538 + C88845 * C88536 * C88542) * C88540) / C88532;
    const double C722 =
        (-2 * C88531 * C88972) / C88532 +
        C88531 * ((-((C88569 + C88967 * C88570 * C88571) * C88540 * C88539) /
                   C88290) /
                      C88268 -
                  C88972 / C88532);
    const double C1601 = (-(C88673 * C88531 * C88972) / C88290) / C88268;
    const double C2461 = (-(C88531 * C88895 * ce) / C88290) / C88268 -
                         (ae * C88531 * C88737) / C88532 -
                         (C88731 * C88531 * C88972) / C88532;
    const double C3295 =
        (-(C88972 * C88845) / C88290) / C88268 -
        ((C88538 + C88967 * C88536 * C88542) * C88540) / C88532;
    const double C4573 = (-(C88673 * C88895 * ce) / C88290) / C88268 -
                         (ae * C88673 * C88737) / C88532 -
                         (C88731 * C88673 * C88972) / C88532;
    const double C5373 =
        (-(ae * (C88731 * C88737 + C88538 * ce)) / C88290) / C88268 -
        ((C88538 + C88967 * C88536 * C88542) * C88540) / C88532 -
        ((C88731 * C88895 + C88538 * ae) * ce) / C88532 +
        C88731 * ((-(C88895 * ce) / C88290) / C88268 - (ae * C88737) / C88532 -
                  (C88731 * C88972) / C88532);
    const double C18533 = C13579 * C5637;
    const double C19025 = C554 * C5637;
    const double C29942 = C307 * C5637;
    const double C45458 = C39129 * C5637;
    const double C76909 = C56030 * C5637;
    const double C77533 = C39330 * C5637;
    const double C78454 = C39329 * C5637;
    const double C78770 = C56029 * C5637;
    const double C18849 = C90634 * C5951;
    const double C76682 = C55626 * C5951;
    const double C78557 = C55625 * C5951;
    const double C18354 = C13579 * C5471;
    const double C18848 = C554 * C5471;
    const double C29740 = C307 * C5471;
    const double C45244 = C39129 * C5471;
    const double C76681 = C56030 * C5471;
    const double C77321 = C39330 * C5471;
    const double C78238 = C39329 * C5471;
    const double C78556 = C56029 * C5471;
    const double C31046 = C13579 * C19088;
    const double C31310 = C307 * C19088;
    const double C78558 = C56030 * C19088;
    const double C79044 = C39330 * C19088;
    const double C414 = C405 + C406;
    const double C661 = C652 + C653;
    const double C494 = C485 + C486;
    const double C739 = C730 + C731;
    const double C340 = C327 + C328;
    const double C339 = C325 + C326;
    const double C341 = C329 + C330;
    const double C1116 = C1104 + C1105;
    const double C1118 = C1108 + C1109;
    const double C1984 = C1972 + C1973;
    const double C1986 = C1976 + C1977;
    const double C29752 = C29736 + C29737;
    const double C27912 = C27902 + C27903;
    const double C30557 = C30550 + C30551;
    const double C587 = C574 + C575;
    const double C586 = C572 + C573;
    const double C588 = C576 + C577;
    const double C1418 = C1406 + C1407;
    const double C1420 = C1410 + C1411;
    const double C2286 = C2274 + C2275;
    const double C2288 = C2278 + C2279;
    const double C14616 = C14606 + C14607;
    const double C16062 = C16055 + C16056;
    const double C17381 = C17372 + C17373;
    const double C17379 = C17368 + C17369;
    const double C88598 = C88531 * C88595;
    const double C88616 = 2 * C88595;
    const double C88608 = C88595 * ce;
    const double C89298 = C88673 * C88595;
    const double C89801 = C88731 * C88595;
    const double C3372 =
        (2 * C88673 * C88565 + C88673 * (C88565 + C88595 * C88845)) / C88268;
    const double C3907 = (C88731 * (C88565 + C88595 * C88845)) / C88268;
    const double C6170 =
        (2 * C88731 * C88565 + C88731 * (C88565 + C88595 * C88967)) / C88268;
    const double C88630 = -C88619;
    const double C89001 = C88998 / C88290;
    const double C89897 = C88998 / C88532;
    const double C19201 =
        2 * ((-(C88731 * C89744) / C88290) / C88268 - (C89300 * ce) / C88532) -
        ((C89300 + C88995 * C88967) * ce) / C88532 +
        C88731 *
            ((-(C88731 * C88995 * ce) / C88290) / C88268 - C89744 / C88532 +
             C88731 * ((-(C88731 * C88673 * C88766) / C88290) / C88268 -
                       C88998 / C88532));
    const double C31047 = C90485 * C19092;
    const double C89060 = C89057 / C88290;
    const double C15527 = (3 * (C88546 + C88559 * C88845) +
                           C88673 * (2 * C89300 + C88673 * C89387)) /
                          C88268;
    const double C16837 = (C88731 * (2 * C89300 + C88673 * C89387)) / C88268;
    const double C17653 = (C88546 + C88559 * C88845 + C89387 * C88967) / C88268;
    const double C19090 =
        (2 * C88731 * C89387 + C88731 * (C89387 + C89510 * C88967)) / C88268;
    const double C30249 = (3 * (C88546 + C88559 * C88967) +
                           C88731 * (2 * C89792 + C88731 * C89796)) /
                          C88268;
    const double C88597 = C88531 * C88594;
    const double C88614 = -2 * C88594;
    const double C88606 = ae * C88594;
    const double C89313 = C88673 * C88594;
    const double C89828 = C88731 * C88594;
    const double C3369 = (-2 * C88673 * C88564) / C88290 -
                         (C88673 * (C88594 * C88845 + C88564)) / C88290;
    const double C3904 = -(C88731 * (C88594 * C88845 + C88564)) / C88290;
    const double C6167 = (-2 * C88731 * C88564) / C88290 -
                         (C88731 * (C88594 * C88967 + C88564)) / C88290;
    const double C89002 = C88999 / C88532;
    const double C89525 = C88999 / C88290;
    const double C89531 = C89527 / C88290;
    const double C31048 = C13579 * C19091;
    const double C31312 = C307 * C19091;
    const double C78562 = C56030 * C19091;
    const double C79048 = C39330 * C19091;
    const double C89061 = C89058 / C88532;
    const double C89983 = C89058 / C88290;
    const double C89989 = C89985 / C88290;
    const double C15528 =
        (-3 * (C88558 * C88845 + C88545)) / C88290 +
        C88673 * ((-2 * C89315) / C88290 - (C88673 * C89402) / C88290);
    const double C16838 =
        C88731 * ((-2 * C89315) / C88290 - (C88673 * C89402) / C88290);
    const double C17654 =
        -(C89402 * C88967 + C88558 * C88845 + C88545) / C88290;
    const double C19089 = (-2 * C88731 * C89402) / C88290 -
                          (C88731 * (C89532 * C88967 + C89402)) / C88290;
    const double C30250 =
        (-3 * (C88558 * C88967 + C88545)) / C88290 +
        C88731 * ((-2 * C89819) / C88290 - (C88731 * C89823) / C88290);
    const double C88596 = C88531 * C88593;
    const double C88607 = C88593 / C88532;
    const double C88993 = C88673 * C88593;
    const double C89052 = C88731 * C88593;
    const double C844 = (-(ae * C88673 * C88564) / C88290) / C88268 -
                        (C88673 * C88563) / C88532 -
                        (C88673 * C88565 * ce) / C88532 +
                        C88531 * ((-(C88673 * C88559 * ce) / C88290) / C88268 -
                                  (ae * C88673 * C88558) / C88532 -
                                  (C88531 * C88673 * C88593) / C88532);
    const double C1712 = (-(ae * C88731 * C88564) / C88290) / C88268 -
                         (C88731 * C88563) / C88532 -
                         (C88731 * C88565 * ce) / C88532 +
                         C88531 * ((-(C88731 * C88559 * ce) / C88290) / C88268 -
                                   (ae * C88731 * C88558) / C88532 -
                                   (C88531 * C88731 * C88593) / C88532);
    const double C2583 =
        (-((C88546 + C88559 * C88845) * ce) / C88290) / C88268 -
        (ae * (C88558 * C88845 + C88545)) / C88532 +
        C88531 * ((-(C88593 * C88845) / C88290) / C88268 - C88563 / C88532);
    const double C3376 =
        (-2 * C88673 * C88563) / C88532 +
        C88673 * ((-(C88593 * C88845) / C88290) / C88268 - C88563 / C88532);
    const double C3914 =
        C88731 * ((-(C88593 * C88845) / C88290) / C88268 - C88563 / C88532);
    const double C4669 =
        (-((C88546 + C88559 * C88967) * ce) / C88290) / C88268 -
        (ae * (C88558 * C88967 + C88545)) / C88532 +
        C88531 * ((-(C88593 * C88967) / C88290) / C88268 - C88563 / C88532);
    const double C6174 =
        (-2 * C88731 * C88563) / C88532 +
        C88731 * ((-(C88593 * C88967) / C88290) / C88268 - C88563 / C88532);
    const double C88655 = C88531 * C88651;
    const double C89393 = C88651 * C88845;
    const double C89803 = C88651 * C88967;
    const double C90070 = C88673 * C88651;
    const double C89570 = C88673 * C89563;
    const double C90048 = C88731 * C90043;
    const double C88644 = C88634 * ae;
    const double C88642 = C88531 * C88634;
    const double C88641 = C88634 * ce;
    const double C89175 = C88673 * C88634;
    const double C89366 = C88731 * C88634;
    const double C3365 =
        2 * C88673 * C88585 + C88673 * (C88585 + C88634 * C88845);
    const double C3894 = C88731 * (C88585 + C88634 * C88845);
    const double C6163 =
        2 * C88731 * C88585 + C88731 * (C88585 + C88634 * C88967);
    const double C89451 = C89447 + C88636;
    const double C89883 = C89878 + C88636;
    const double C89450 = C89444 + C88633;
    const double C89880 = C89875 + C88633;
    const double C89446 = C88577 + C89440;
    const double C89448 = C89439 * ae;
    const double C89445 = C89439 * ce;
    const double C90081 = C88731 * C89439;
    const double C33649 =
        2 * C88731 * C89169 + C88731 * (C89169 + C89439 * C88967);
    const double C89882 = C88577 + C89877;
    const double C89884 = C89876 * ae;
    const double C89881 = C89876 * ce;
    const double C88654 = C88531 * C88648;
    const double C89409 = C88648 * C88845;
    const double C89830 = C88648 * C88967;
    const double C90076 = C88673 * C88648;
    const double C89567 = C88673 * C89560;
    const double C89928 = C89560 * C88967;
    const double C90047 = C88731 * C90039;
    const double C88653 = C88531 * C88647;
    const double C88997 = C88673 * C88647;
    const double C89056 = C88731 * C88647;
    const double C89111 = C88647 * C88845;
    const double C89252 = C88647 * C88967;
    const double C88862 = C88861 * C88539;
    const double C89437 = C88531 * C88861;
    const double C89547 = C88673 * C88861;
    const double C89664 = C88731 * C88861;
    const double C89727 = C88861 * C88967;
    const double C88984 = C88983 * C88539;
    const double C89501 = C88531 * C88983;
    const double C89639 = C88983 * C88845;
    const double C89933 = C88673 * C88983;
    const double C90024 = C88731 * C88983;
    const double C89571 = C89562 * ae;
    const double C89569 = C88673 * C89562;
    const double C89568 = C89562 * ce;
    const double C89766 = C88731 * C89562;
    const double C19087 =
        2 * C88731 * C89423 + C88731 * (C89423 + C89562 * C88967);
    const double C89947 = C89943 + C89564;
    const double C89946 = C89940 + C89561;
    const double C89942 = C89416 + C89936;
    const double C89944 = C89935 * ae;
    const double C89941 = C89935 * ce;
    const double C90033 = C89911 * ae;
    const double C90030 = C88731 * C89911;
    const double C90028 = C89911 * ce;
    const double C186 =
        (-3 * (C88685 * C88539 + C88679)) / C88290 +
        C88531 * ((-2 * C88687) / C88290 - (C88531 * C88697) / C88290);
    const double C928 =
        C88673 * ((-2 * C88687) / C88290 - (C88531 * C88697) / C88290) -
        ((2 * C88554 + C88531 * C88585) * ce) / C88290;
    const double C1793 =
        C88731 * ((-2 * C88687) / C88290 - (C88531 * C88697) / C88290);
    const double C2665 = -(C88673 * (C88673 * C88697 + C88585 * ce) +
                           C88685 * C88539 + C88679 + C88673 * C88585 * ce) /
                         C88290;
    const double C3991 = -(C88731 * (C88673 * C88697 + C88585 * ce)) / C88290;
    const double C4748 = -(C88697 * C88967 + C88685 * C88539 + C88679) / C88290;
    const double C6225 = (-2 * C88731 * C88697) / C88290 -
                         (C88731 * (C88718 * C88967 + C88697)) / C88290;
    const double C88714 = C88710 / C88290;
    const double C88712 = C88707 / C88290;
    const double C89436 = C88707 / C88532;
    const double C6560 =
        2 * ((-(C88731 * C89188) / C88290) / C88268 - (ae * C88687) / C88532) -
        (ae * (C88702 * C88967 + C88687)) / C88532 +
        C88731 *
            ((-(ae * C88731 * C88702) / C88290) / C88268 - C89188 / C88532 +
             C88731 * ((-(C88731 * C88531 * C88958) / C88290) / C88268 -
                       C88707 / C88532));
    const double C89171 = C89168 + C88584;
    const double C30365 = C13579 * C6226;
    const double C30644 = C307 * C6226;
    const double C61458 = C56030 * C6226;
    const double C62598 = C39130 * C6226;
    const double C89427 = C88673 * C89421;
    const double C89548 = -2 * C89421;
    const double C89544 = ae * C89421;
    const double C89925 = C88731 * C89421;
    const double C19146 = (-2 * C88731 * C89164) / C88290 -
                          (C88731 * (C89421 * C88967 + C89164)) / C88290;
    const double C89669 = C89666 / C88532;
    const double C90002 = C89666 / C88290;
    const double C90008 = C90004 / C88290;
    const double C30357 =
        (-3 * (C88685 * C88967 + C88679)) / C88290 +
        C88731 * ((-2 * C89834) / C88290 - (C88731 * C89838) / C88290);
    const double C249 =
        (-3 * (C88743 * C88539 + C88737)) / C88290 +
        C88531 * ((-2 * C88745) / C88290 - (C88531 * C88755) / C88290);
    const double C1012 =
        C88673 * ((-2 * C88745) / C88290 - (C88531 * C88755) / C88290);
    const double C1880 =
        C88731 * ((-2 * C88745) / C88290 - (C88531 * C88755) / C88290) -
        ((2 * C88554 + C88531 * C88585) * ce) / C88290;
    const double C2747 = -(C88755 * C88845 + C88743 * C88539 + C88737) / C88290;
    const double C3487 = (-2 * C88673 * C88755) / C88290 -
                         (C88673 * (C88776 * C88845 + C88755)) / C88290;
    const double C4077 =
        -(C88731 * C88673 * C88755 + C88673 * C88585 * ce) / C88290;
    const double C4078 = -(C88731 * (C88776 * C88845 + C88755) +
                           (C88585 + C88634 * C88845) * ce) /
                         C88290;
    const double C4833 = -(C88731 * (C88731 * C88755 + C88585 * ce) +
                           C88743 * C88539 + C88737 + C88731 * C88585 * ce) /
                         C88290;
    const double C88772 = C88768 / C88290;
    const double C88770 = C88765 / C88290;
    const double C89469 = C88765 / C88532;
    const double C3653 =
        2 * ((-(C88673 * C89181) / C88290) / C88268 - (ae * C88745) / C88532) -
        (ae * (C88760 * C88845 + C88745)) / C88532 +
        C88673 *
            ((-(ae * C88673 * C88760) / C88290) / C88268 - C89181 / C88532 +
             C88673 * ((-(C88673 * C88531 * C88882) / C88290) / C88268 -
                       C88765 / C88532));
    const double C5636 = -(C88731 * (C88731 * C89323 + C89169 * ce) +
                           C88673 * C88745 + C88731 * C89169 * ce) /
                         C88290;
    const double C89362 = C89359 + C88584;
    const double C15728 = C13579 * C3488;
    const double C16234 = C554 * C3488;
    const double C42349 = C39330 * C3488;
    const double C42880 = C39130 * C3488;
    const double C21243 = C13579 * C4079;
    const double C21865 = C554 * C4079;
    const double C43622 = C39130 * C4079;
    const double C49264 = C39330 * C4079;
    const double C58793 = C307 * C4079;
    const double C59111 = C56030 * C4079;
    const double C15718 =
        (-3 * (C88743 * C88845 + C88737)) / C88290 +
        C88673 * ((-2 * C89320) / C88290 - (C88673 * C89463) / C88290);
    const double C17029 =
        C88731 * ((-2 * C89320) / C88290 - (C88673 * C89463) / C88290) -
        ((2 * C89162 + C88673 * C89423) * ce) / C88290;
    const double C17811 = -(C88731 * (C88731 * C89463 + C89423 * ce) +
                            C88743 * C88845 + C88737 + C88731 * C89423 * ce) /
                          C88290;
    const double C89602 = C89598 / C88290;
    const double C89600 = C89596 / C88290;
    const double C89932 = C89596 / C88532;
    const double C89762 = C89759 + C89422;
    const double C89687 = ae * C89685;
    const double C89854 = C88731 * C89685;
    const double C90025 = -2 * C89685;
    const double C312 = (3 * (C88794 + C88800 * C88539) +
                         C88531 * (2 * C88802 + C88531 * C88812)) /
                        C88268;
    const double C1096 = (C88673 * (2 * C88802 + C88531 * C88812) +
                          (2 * C88554 + C88531 * C88585) * ae) /
                         C88268;
    const double C1964 = (C88731 * (2 * C88802 + C88531 * C88812)) / C88268;
    const double C2829 =
        (C88794 + C88800 * C88539 + C88673 * (C88673 * C88812 + C88585 * ae) +
         C88673 * C88585 * ae) /
        C88268;
    const double C4163 = (C88731 * (C88673 * C88812 + C88585 * ae)) / C88268;
    const double C4915 = (C88794 + C88800 * C88539 + C88812 * C88967) / C88268;
    const double C6341 =
        (2 * C88731 * C88812 + C88731 * (C88812 + C88832 * C88967)) / C88268;
    const double C89557 = -C89546;
    const double C88827 = C88822 / C88290;
    const double C89779 = C88822 / C88532;
    const double C4331 =
        (-(C88731 * C89181) / C88290) / C88268 - (C88802 * ce) / C88532 -
        (ae * (C88731 * C88673 * C88760 + C89169 * ce)) / C88532 +
        C88673 * (C88673 * ((-(C88731 * C88531 * C88882) / C88290) / C88268 -
                            C88822 / C88532) -
                  (ae * (C88731 * C88760 + C88584)) / C88532);
    const double C5873 =
        C88673 *
            ((-(C88731 * C88817 * ce) / C88290) / C88268 - C89181 / C88532 +
             C88731 * ((-(C88731 * C88531 * C88882) / C88290) / C88268 -
                       C88822 / C88532)) -
        (ae * (C88731 * (C88731 * C88760 + C88584) + C88745 +
               C88731 * C88577 * ce)) /
            C88532;
    const double C6451 =
        2 * ((-(C88731 * C89181) / C88290) / C88268 - (C88802 * ce) / C88532) -
        ((C88802 + C88817 * C88967) * ce) / C88532 +
        C88731 *
            ((-(C88731 * C88817 * ce) / C88290) / C88268 - C89181 / C88532 +
             C88731 * ((-(C88731 * C88531 * C88882) / C88290) / C88268 -
                       C88822 / C88532));
    const double C89172 = C89170 + C88587;
    const double C30547 = C90623 * C6342;
    const double C89428 = C88673 * C89424;
    const double C89553 = 2 * C89424;
    const double C89545 = C89424 * ce;
    const double C19254 =
        (2 * C88731 * C89165 + C88731 * (C89165 + C89424 * C88967)) / C88268;
    const double C31304 =
        (3 * (C89165 + C89424 * C88967) +
         C88731 * (2 * C88731 * C89424 + C88731 * (C89424 + C89563 * C88967))) /
        C88268;
    const double C89668 = C89665 / C88290;
    const double C30533 = (3 * (C88794 + C88800 * C88967) +
                           C88731 * (2 * C89811 + C88731 * C89813)) /
                          C88268;
    const double C88858 = C88855 / C88532;
    const double C89167 = C88531 * C88855;
    const double C89414 = C88673 * C88855;
    const double C89660 = C88731 * C88855;
    const double C398 =
        3 * ((-(C88855 * C88539) / C88290) / C88268 - C88850 / C88532) +
        C88531 *
            ((-2 * C88531 * C88855) / C88532 +
             C88531 *
                 ((-((C88611 + C88845 * C88612 * C88613) * C88540 * C88539) /
                   C88290) /
                      C88268 -
                  C88855 / C88532));
    const double C1197 =
        (-((C88794 + C88800 * C88539) * ce) / C88290) / C88268 -
        (ae * (C88685 * C88539 + C88679)) / C88532 +
        C88673 * ((-(C88855 * C88539) / C88290) / C88268 - C88850 / C88532);
    const double C2064 =
        C88731 * ((-(C88855 * C88539) / C88290) / C88268 - C88850 / C88532);
    const double C2922 =
        (-(ae * (C88673 * C88687 + C88554 * ce)) / C88290) / C88268 -
        (C88531 * C88850) / C88532 -
        ((C88673 * C88802 + C88554 * ae) * ce) / C88532 +
        C88673 * ((-(C88802 * ce) / C88290) / C88268 - (ae * C88687) / C88532 -
                  (C88673 * C88531 * C88855) / C88532);
    const double C3599 =
        2 * ((-(C88794 * ce) / C88290) / C88268 - (ae * C88679) / C88532 -
             (C88673 * C88850) / C88532) -
        (ae * (C88673 * C89164 + C88679 + C89162 * ce)) / C88532 -
        ((C88794 + C88673 * C89165 + C89162 * ae) * ce) / C88532 +
        C88673 * ((-(ae * C89164) / C88290) / C88268 - C88850 / C88532 -
                  (C89165 * ce) / C88532 +
                  C88673 * ((-C88804 / C88290) / C88268 - C88692 -
                            (C88673 * C88855) / C88532));
    const double C4248 = (-(ae * C88731 * C89164) / C88290) / C88268 -
                         (C88731 * C88850) / C88532 -
                         (C88731 * C89165 * ce) / C88532 +
                         C88673 * ((-(C88731 * C88800 * ce) / C88290) / C88268 -
                                   (ae * C88731 * C88685) / C88532 -
                                   (C88673 * C88731 * C88855) / C88532);
    const double C5795 =
        (-((C88794 + C88800 * C88967) * ce) / C88290) / C88268 -
        (ae * (C88685 * C88967 + C88679)) / C88532 +
        C88673 * ((-(C88855 * C88967) / C88290) / C88268 - C88850 / C88532);
    const double C6399 =
        (-2 * C88731 * C88850) / C88532 +
        C88731 * ((-(C88855 * C88967) / C88290) / C88268 - C88850 / C88532);
    const double C559 = (3 * (C88895 + C88901 * C88539) +
                         C88531 * (2 * C88903 + C88531 * C88913)) /
                        C88268;
    const double C1398 = (C88673 * (2 * C88903 + C88531 * C88913)) / C88268;
    const double C2266 = (C88731 * (2 * C88903 + C88531 * C88913) +
                          (2 * C88554 + C88531 * C88585) * ae) /
                         C88268;
    const double C3107 = (C88895 + C88901 * C88539 + C88913 * C88845) / C88268;
    const double C3705 =
        (2 * C88673 * C88913 + C88673 * (C88913 + C88933 * C88845)) / C88268;
    const double C4409 =
        (C88731 * C88673 * C88913 + C88673 * C88585 * ae) / C88268;
    const double C4410 = (C88731 * (C88913 + C88933 * C88845) +
                          (C88585 + C88634 * C88845) * ae) /
                         C88268;
    const double C5193 =
        (C88895 + C88901 * C88539 + C88731 * (C88731 * C88913 + C88585 * ae) +
         C88731 * C88585 * ae) /
        C88268;
    const double C90036 = -C90023;
    const double C88928 = C88923 / C88290;
    const double C89490 = C88923 / C88532;
    const double C3762 =
        2 * ((-(C88673 * C89188) / C88290) / C88268 - (C88903 * ce) / C88532) -
        ((C88903 + C88918 * C88845) * ce) / C88532 +
        C88673 *
            ((-(C88673 * C88918 * ce) / C88290) / C88268 - C89188 / C88532 +
             C88673 * ((-(C88673 * C88531 * C88958) / C88290) / C88268 -
                       C88923 / C88532));
    const double C5950 =
        (C88673 * C88903 + C88731 * (C88731 * C89324 + C89169 * ae) +
         C88731 * C89169 * ae) /
        C88268;
    const double C89363 = C89361 + C88587;
    const double C16052 = C90634 * C3706;
    const double C21652 = C90634 * C4411;
    const double C58896 = C55626 * C4411;
    const double C16038 = (3 * (C88895 + C88901 * C88845) +
                           C88673 * (2 * C89321 + C88673 * C89484)) /
                          C88268;
    const double C17361 = (C88731 * (2 * C89321 + C88673 * C89484) +
                           (2 * C89162 + C88673 * C89423) * ae) /
                          C88268;
    const double C18119 =
        (C88895 + C88901 * C88845 + C88731 * (C88731 * C89484 + C89423 * ae) +
         C88731 * C89423 * ae) /
        C88268;
    const double C89627 = C89623 / C88290;
    const double C89763 = C89761 + C89425;
    const double C89867 = C88731 * C89863;
    const double C90031 = 2 * C89863;
    const double C90022 = C89863 * ce;
    const double C88980 = C88977 / C88532;
    const double C89192 = C88531 * C88977;
    const double C89758 = C88673 * C88977;
    const double C89853 = C88731 * C88977;
    const double C723 =
        3 * ((-(C88977 * C88539) / C88290) / C88268 - C88972 / C88532) +
        C88531 *
            ((-2 * C88531 * C88977) / C88532 +
             C88531 *
                 ((-((C88611 + C88967 * C88612 * C88613) * C88540 * C88539) /
                   C88290) /
                      C88268 -
                  C88977 / C88532));
    const double C1600 =
        C88673 * ((-(C88977 * C88539) / C88290) / C88268 - C88972 / C88532);
    const double C2462 =
        (-((C88895 + C88901 * C88539) * ce) / C88290) / C88268 -
        (ae * (C88743 * C88539 + C88737)) / C88532 +
        C88731 * ((-(C88977 * C88539) / C88290) / C88268 - C88972 / C88532);
    const double C3296 = (-(C88531 * C88977 * C88845) / C88290) / C88268 -
                         (C88531 * C88972) / C88532;
    const double C3816 =
        (-2 * C88673 * C88972) / C88532 +
        C88673 * ((-(C88977 * C88845) / C88290) / C88268 - C88972 / C88532);
    const double C4576 =
        (-((C88895 + C88901 * C88845) * ce) / C88290) / C88268 -
        (ae * (C88743 * C88845 + C88737)) / C88532 +
        C88731 * ((-(C88977 * C88845) / C88290) / C88268 - C88972 / C88532);
    const double C6106 =
        (-(ae * (C88731 * C89320 + C89162 * ce)) / C88290) / C88268 -
        (C88673 * C88972) / C88532 -
        ((C88731 * C89321 + C89162 * ae) * ce) / C88532 +
        C88731 * ((-(C89321 * ce) / C88290) / C88268 - (ae * C89320) / C88532 -
                  (C88731 * C88673 * C88977) / C88532);
    const double C6612 =
        2 * ((-(C88895 * ce) / C88290) / C88268 - (ae * C88737) / C88532 -
             (C88731 * C88972) / C88532) -
        (ae * (C88731 * C89356 + C88737 + C89354 * ce)) / C88532 -
        ((C88895 + C88731 * C89357 + C89354 * ae) * ce) / C88532 +
        C88731 * ((-(ae * C89356) / C88290) / C88268 - C88972 / C88532 -
                  (C89357 * ce) / C88532 +
                  C88731 * ((-C88905 / C88290) / C88268 - C88750 -
                            (C88731 * C88977) / C88532));
    const double C88588 = C88581 / C88268;
    const double C333 = C307 * C111;
    const double C580 = C554 * C111;
    const double C1112 = C307 * C831;
    const double C1414 = C554 * C831;
    const double C39348 = C39330 * C831;
    const double C39856 = C39130 * C831;
    const double C1980 = C307 * C1699;
    const double C2282 = C554 * C1699;
    const double C56048 = C56030 * C1699;
    const double C57286 = C39130 * C1699;
    const double C2840 = C307 * C2572;
    const double C3118 = C554 * C2572;
    const double C14078 = C13579 * C2572;
    const double C40212 = C39330 * C2572;
    const double C41793 = C39130 * C2572;
    const double C8429 = C307 * C3893;
    const double C8767 = C554 * C3893;
    const double C41159 = C39330 * C3893;
    const double C48572 = C39130 * C3893;
    const double C56934 = C56030 * C3893;
    const double C72656 = C13579 * C3893;
    const double C4926 = C307 * C4658;
    const double C5204 = C554 * C4658;
    const double C27596 = C13579 * C4658;
    const double C57953 = C56030 * C4658;
    const double C60697 = C39130 * C4658;
    const double C33662 = C13579 * C5470;
    const double C34006 = C307 * C5470;
    const double C44612 = C39330 * C5470;
    const double C44930 = C554 * C5470;
    const double C45246 = C39130 * C5470;
    const double C65770 = C56030 * C5470;
    const double C16303 = C13579 * C15525;
    const double C16638 = C554 * C15525;
    const double C16852 = C13579 * C16835;
    const double C17374 = C554 * C16835;
    const double C75772 = C56030 * C16835;
    const double C76345 = C39330 * C16835;
    const double C18358 = C13579 * C17651;
    const double C18852 = C554 * C17651;
    const double C29748 = C307 * C17651;
    const double C76687 = C56030 * C17651;
    const double C78240 = C39330 * C17651;
    const double C31771 = C13579 * C30247;
    const double C31947 = C307 * C30247;
    const double C29945 = C90623 * C4330;
    const double C76574 = C39127 * C4330;
    const double C76570 = C39128 * C4330;
    const double C29943 = C90623 * C5872;
    const double C77534 = C39128 * C5872;
    const double C78455 = C39127 * C5872;
    const double C30730 = C90623 * C6450;
    const double C79195 = C39127 * C6450;
    const double C89426 = C89419 / C88268;
    const double C16148 = C90634 * C3761;
    const double C75851 = C55625 * C3761;
    const double C89865 = C89858 / C88268;
    const double C89514 = C89507 + C89512;
    const double C31040 = (3 * (C89300 + C88995 * C88967) +
                           C88731 * (2 * C89895 + C88731 * C89902)) /
                          C88268;
    const double C89972 = C89965 + C89970;
    const double C89538 = C89535 / C88290;
    const double C31039 =
        (-3 * (C88996 * C88967 + C89315)) / C88290 +
        C88731 * ((-2 * C89914) / C88290 - (C88731 * C89920) / C88290);
    const double C89996 = C89993 / C88290;
    const double C88724 = C88721 / C88290;
    const double C30358 =
        (-3 * (C88702 * C88967 + C88687)) / C88290 +
        C88731 * ((-2 * C89843) / C88290 - (C88731 * C89847) / C88290);
    const double C90015 = C90012 / C88290;
    const double C88782 = C88779 / C88290;
    const double C15719 =
        (-3 * (C88760 * C88845 + C88745)) / C88290 +
        C88673 * ((-2 * C89323) / C88290 - (C88673 * C89474) / C88290);
    const double C89606 = C89603 / C88290;
    const double C88838 = C88825 + C88835;
    const double C30534 = (3 * (C88802 + C88817 * C88967) +
                           C88731 * (2 * C89815 + C88731 * C89817)) /
                          C88268;
    const double C89981 = C89979 + C89980;
    const double C88939 = C88926 + C88936;
    const double C16039 = (3 * (C88903 + C88918 * C88845) +
                           C88673 * (2 * C89324 + C88673 * C89495)) /
                          C88268;
    const double C89632 = C89625 + C89629;
    const double C88698 = -C88696;
    const double C31835 = C90485 * C30359;
    const double C89388 = -C89386;
    const double C88720 = -C88717;
    const double C89511 = -C89509;
    const double C89959 = -C89958;
    const double C1117 = C1106 + C1107;
    const double C1985 = C1974 + C1975;
    const double C29753 = C29738 + C29739;
    const double C27913 = C27904 + C27905;
    const double C88813 = -C88811;
    const double C29751 = C90623 * C17891;
    const double C78245 = C39128 * C17891;
    const double C89403 = -C89401;
    const double C29757 = C29746 + C29747;
    const double C29755 = C29742 + C29743;
    const double C30556 = C30548 + C30549;
    const double C88834 = -C88831;
    const double C89534 = -C89530;
    const double C89655 = C89654 / C88290;
    const double C89723 = -C89722;
    const double C88756 = -C88754;
    const double C16423 = C90485 * C15720;
    const double C89797 = -C89795;
    const double C88778 = -C88775;
    const double C89521 = -C89520;
    const double C89901 = C89899 / C88290;
    const double C89969 = -C89967;
    const double C495 = C487 + C488;
    const double C1315 = C1308 + C1309;
    const double C2180 = C2168 + C2169;
    const double C29948 = C29940 + C29941;
    const double C28081 = C28078 + C28079;
    const double C8653 = C90623 * C4328;
    const double C41384 = C39128 * C4328;
    const double C49263 = C39127 * C4328;
    const double C5106 = C90623 * C5096;
    const double C44827 = C39127 * C5096;
    const double C89464 = -C89462;
    const double C89678 = -C89677;
    const double C1314 = C1305 + C1306;
    const double C2182 = C2173 + C2174;
    const double C3028 = C3023 + C3024;
    const double C88885 = -C88884;
    const double C89473 = C89471 / C88290;
    const double C89780 = C89778 / C88290;
    const double C89601 = -C89597;
    const double C89686 = -C89684;
    const double C1419 = C1408 + C1409;
    const double C2287 = C2276 + C2277;
    const double C14617 = C14608 + C14609;
    const double C17380 = C17370 + C17371;
    const double C88914 = -C88912;
    const double C16641 = C90634 * C16040;
    const double C89824 = -C89822;
    const double C16061 = C16053 + C16054;
    const double C17378 = C17366 + C17367;
    const double C18857 = C18850 + C18851;
    const double C88935 = -C88932;
    const double C89616 = -C89615;
    const double C89919 = C89917 / C88290;
    const double C89992 = -C89988;
    const double C662 = C654 + C655;
    const double C1518 = C1506 + C1507;
    const double C2380 = C2372 + C2373;
    const double C14701 = C14698 + C14699;
    const double C17474 = C17468 + C17469;
    const double C8878 = C90634 * C4495;
    const double C57049 = C55626 * C4495;
    const double C65913 = C55625 * C4495;
    const double C5292 = C90634 * C5286;
    const double C58070 = C55626 * C5286;
    const double C61457 = C55625 * C5286;
    const double C89485 = -C89483;
    const double C89839 = -C89837;
    const double C1520 = C1511 + C1512;
    const double C2381 = C2375 + C2376;
    const double C88961 = -C88960;
    const double C89494 = C89492 / C88290;
    const double C89846 = C89844 / C88290;
    const double C89628 = -C89624;
    const double C90011 = -C90007;
    const double C14088 = C14070 + C14071;
    const double C14084 = C14062 + C14063;
    const double C14083 = C14060 + C14061;
    const double C14082 = C14058 + C14059;
    const double C14194 = C14184 + C14185;
    const double C14193 = C14182 + C14183;
    const double C14192 = C14180 + C14181;
    const double C14292 = C14279 + C14280;
    const double C14291 = C14276 + C14277;
    const double C14290 = C14273 + C14274;
    const double C15553 = C15546 + C15547;
    const double C15731 = C15724 + C15725;
    const double C16859 = C16850 + C16851;
    const double C16857 = C16846 + C16847;
    const double C16953 = C16947 + C16948;
    const double C17051 = C17042 + C17043;
    const double C17049 = C17037 + C17038;
    const double C27606 = C27588 + C27589;
    const double C27602 = C27580 + C27581;
    const double C27601 = C27578 + C27579;
    const double C27600 = C27576 + C27577;
    const double C27719 = C27707 + C27708;
    const double C27717 = C27702 + C27703;
    const double C27716 = C27699 + C27700;
    const double C27816 = C27806 + C27807;
    const double C27815 = C27804 + C27805;
    const double C27814 = C27802 + C27803;
    const double C30275 = C30268 + C30269;
    const double C30373 = C30367 + C30368;
    const double C39863 = C39840 + C39841;
    const double C39984 = C39972 + C39973;
    const double C40101 = C40090 + C40091;
    const double C57293 = C57270 + C57271;
    const double C57415 = C57404 + C57405;
    const double C57530 = C57518 + C57519;
    const double C39867 = C39848 + C39849;
    const double C39864 = C39842 + C39843;
    const double C39862 = C39838 + C39839;
    const double C39986 = C39976 + C39977;
    const double C39985 = C39974 + C39975;
    const double C40102 = C40092 + C40093;
    const double C40100 = C40088 + C40089;
    const double C41812 = C41801 + C41802;
    const double C41921 = C41913 + C41914;
    const double C42032 = C42025 + C42026;
    const double C42736 = C42728 + C42729;
    const double C42882 = C42878 + C42879;
    const double C43404 = C43392 + C43393;
    const double C43403 = C43390 + C43391;
    const double C43514 = C43506 + C43507;
    const double C43626 = C43620 + C43621;
    const double C43625 = C43618 + C43619;
    const double C57297 = C57278 + C57279;
    const double C57294 = C57272 + C57273;
    const double C57292 = C57268 + C57269;
    const double C57417 = C57408 + C57409;
    const double C57414 = C57402 + C57403;
    const double C57532 = C57522 + C57523;
    const double C57531 = C57520 + C57521;
    const double C60716 = C60705 + C60706;
    const double C60828 = C60823 + C60824;
    const double C60935 = C60927 + C60928;
    const double C62526 = C62518 + C62519;
    const double C62600 = C62596 + C62597;
    const double C106 =
        (C88309 / C88295 - (0 * de) / C88290) / C88295 - (0 * de) / C88290;
    const double C6696 = C88309 / C88295 - (0 * de) / C88290;
    const double C88311 = C88308 / C88290;
    const double C90780 = C90746 - C90770;
    const double C90771 = C90748 - C90749;
    const double C88386 = C88380 / C88290;
    const double C3430 =
        (C88390 / C88295 - (0 * de) / C88290) / C88295 - (0 * de) / C88290;
    const double C7479 = C88390 / C88295 - (0 * de) / C88290;
    const double C90781 = C90754 - C90773;
    const double C90774 = C90757 - C90758;
    const double C2660 =
        ((-(0 * de) / C88290) / C88295 -
         ((0 - (C88343 * C88362) / C88290) * de) / C88290) /
            C88295 -
        ((C88343 * ((-C88362 / C88290) / C88295 -
                    ((C90541 - (C88343 * C88365) / C88290) * de) / C88290) +
          C6692) *
         de) /
            C88290 +
        (-C88365 / C88290) / C88295 - (0 * de) / C88290;
    const double C88431 = C88425 / C88290;
    const double C6284 =
        (C88435 / C88295 - (0 * de) / C88290) / C88295 - (0 * de) / C88290;
    const double C10842 = C88435 / C88295 - (0 * de) / C88290;
    const double C90782 = C90759 - C90776;
    const double C90777 = C90762 - C90763;
    const double C4828 =
        ((-(0 * de) / C88290) / C88295 -
         ((0 - (C88350 * C88409) / C88290) * de) / C88290) /
            C88295 -
        ((C88350 * ((-C88409 / C88290) / C88295 -
                    ((C90567 - (C88350 * C88412) / C88290) * de) / C88290) +
          C9074) *
         de) /
            C88290 +
        (-C88412 / C88290) / C88295 - (0 * de) / C88290;
    const double C39361 = C39342 + C39343;
    const double C39358 = C39336 + C39337;
    const double C39356 = C39332 + C39333;
    const double C39532 = C39522 + C39523;
    const double C39531 = C39520 + C39521;
    const double C40444 = C40436 + C40437;
    const double C73893 = C73888 + C73889;
    const double C73891 = C73884 + C73885;
    const double C74100 = C74096 + C74097;
    const double C76354 = C76341 + C76342;
    const double C77325 = C77317 + C77318;
    const double C401 = C337 * C181;
    const double C481 = C337 * C244;
    const double C1201 = C337 * C923;
    const double C2165 = C337 * C1875;
    const double C417 = C413 * C90541;
    const double C1202 = C413 * C90752;
    const double C2927 = C413 * C2565;
    const double C6997 = C413 * C6692;
    const double C497 = C493 * C90567;
    const double C2166 = C493 * C90753;
    const double C5101 = C493 * C4653;
    const double C9450 = C493 * C9074;
    const double C27915 = C27911 * C821;
    const double C29733 = C27911 * C90498;
    const double C30539 = C27911 * C90744;
    const double C33995 = C27911 * C7396;
    const double C27992 = C27910 * C181;
    const double C29732 = C27910 * C3364;
    const double C31394 = C27910 * C923;
    const double C28000 = C27998 * C90541;
    const double C29843 = C27998 * C2565;
    const double C31395 = C27998 * C90752;
    const double C34116 = C27998 * C6692;
    const double C39365 = C39350 + C39351;
    const double C39362 = C39344 + C39345;
    const double C39360 = C39340 + C39341;
    const double C39359 = C39338 + C39339;
    const double C39357 = C39334 + C39335;
    const double C39449 = C39440 + C39441;
    const double C39446 = C39434 + C39435;
    const double C39534 = C39526 + C39527;
    const double C39533 = C39524 + C39525;
    const double C39530 = C39518 + C39519;
    const double C40225 = C40214 + C40215;
    const double C40222 = C40208 + C40209;
    const double C40220 = C40204 + C40205;
    const double C40446 = C40440 + C40441;
    const double C40445 = C40438 + C40439;
    const double C41172 = C41161 + C41162;
    const double C41169 = C41155 + C41156;
    const double C41167 = C41151 + C41152;
    const double C41393 = C41387 + C41388;
    const double C41392 = C41385 + C41386;
    const double C42351 = C42347 + C42348;
    const double C73892 = C73886 + C73887;
    const double C73890 = C73882 + C73883;
    const double C73996 = C73992 + C73993;
    const double C74101 = C74098 + C74099;
    const double C76357 = C76347 + C76348;
    const double C76353 = C76339 + C76340;
    const double C76351 = C76335 + C76336;
    const double C76575 = C76567 + C76568;
    const double C77328 = C77323 + C77324;
    const double C77326 = C77319 + C77320;
    const double C77535 = C77531 + C77532;
    const double C78248 = C78242 + C78243;
    const double C79052 = C79046 + C79047;
    const double C79050 = C79042 + C79043;
    const double C56061 = C56042 + C56043;
    const double C56058 = C56036 + C56037;
    const double C56056 = C56032 + C56033;
    const double C56148 = C56138 + C56139;
    const double C56147 = C56136 + C56137;
    const double C73275 = C73270 + C73271;
    const double C73273 = C73266 + C73267;
    const double C73378 = C73374 + C73375;
    const double C75096 = C75090 + C75091;
    const double C75094 = C75086 + C75087;
    const double C76693 = C76677 + C76678;
    const double C648 = C584 * C181;
    const double C726 = C584 * C244;
    const double C1503 = C584 * C923;
    const double C2466 = C584 * C1875;
    const double C664 = C660 * C90541;
    const double C1504 = C660 * C90752;
    const double C3205 = C660 * C2565;
    const double C7235 = C660 * C6692;
    const double C742 = C738 * C90567;
    const double C2467 = C738 * C90753;
    const double C5379 = C738 * C4653;
    const double C9688 = C738 * C9074;
    const double C14619 = C14615 * C821;
    const double C16044 = C14615 * C90744;
    const double C16633 = C14615 * C90498;
    const double C20744 = C14615 * C7396;
    const double C14776 = C14614 * C244;
    const double C16632 = C14614 * C3364;
    const double C17553 = C14614 * C1875;
    const double C14784 = C14782 * C90567;
    const double C17554 = C14782 * C90753;
    const double C19021 = C14782 * C4653;
    const double C23434 = C14782 * C9074;
    const double C56065 = C56050 + C56051;
    const double C56062 = C56044 + C56045;
    const double C56060 = C56040 + C56041;
    const double C56059 = C56038 + C56039;
    const double C56057 = C56034 + C56035;
    const double C56150 = C56142 + C56143;
    const double C56149 = C56140 + C56141;
    const double C56146 = C56134 + C56135;
    const double C56233 = C56224 + C56225;
    const double C56230 = C56218 + C56219;
    const double C56947 = C56936 + C56937;
    const double C56944 = C56930 + C56931;
    const double C56942 = C56926 + C56927;
    const double C57058 = C57052 + C57053;
    const double C57057 = C57050 + C57051;
    const double C57966 = C57955 + C57956;
    const double C57963 = C57949 + C57950;
    const double C57961 = C57945 + C57946;
    const double C58077 = C58071 + C58072;
    const double C58075 = C58067 + C58068;
    const double C73274 = C73268 + C73269;
    const double C73272 = C73264 + C73265;
    const double C73379 = C73376 + C73377;
    const double C73482 = C73478 + C73479;
    const double C75097 = C75092 + C75093;
    const double C75095 = C75088 + C75089;
    const double C75200 = C75196 + C75197;
    const double C75780 = C75774 + C75775;
    const double C75778 = C75770 + C75771;
    const double C76699 = C76689 + C76690;
    const double C76697 = C76685 + C76686;
    const double C76696 = C76683 + C76684;
    const double C76694 = C76679 + C76680;
    const double C76807 = C76799 + C76800;
    const double C78566 = C78560 + C78561;
    const double C14067 = C90485 * C835;
    const double C39855 = C39125 * C835;
    const double C39847 = C39126 * C835;
    const double C27585 = C90485 * C1703;
    const double C57285 = C39125 * C1703;
    const double C57277 = C39126 * C1703;
    const double C14075 = C90485 * C2575;
    const double C41800 = C39126 * C2575;
    const double C41792 = C39125 * C2575;
    const double C21010 = C90485 * C3898;
    const double C43389 = C39126 * C3898;
    const double C48571 = C39125 * C3898;
    const double C27593 = C90485 * C4661;
    const double C60704 = C39126 * C4661;
    const double C60696 = C39125 * C4661;
    const double C29745 = C90623 * C4166;
    const double C76344 = C39127 * C4166;
    const double C76338 = C39128 * C4166;
    const double C29741 = C90623 * C5717;
    const double C77322 = C39128 * C5717;
    const double C78239 = C39127 * C5717;
    const double C3218 = C3209 + C3210;
    const double C59009 = C59005 + C59006;
    const double C2844 = C2836 + C2837;
    const double C3122 = C3114 + C3115;
    const double C40221 = C40206 + C40207;
    const double C42142 = C42135 + C42136;
    const double C58904 = C58897 + C58898;
    const double C8433 = C8425 + C8426;
    const double C8771 = C8763 + C8764;
    const double C41168 = C41153 + C41154;
    const double C48993 = C48986 + C48987;
    const double C56943 = C56928 + C56929;
    const double C65779 = C65772 + C65773;
    const double C4930 = C4922 + C4923;
    const double C5208 = C5200 + C5201;
    const double C44621 = C44614 + C44615;
    const double C57962 = C57947 + C57948;
    const double C61355 = C61348 + C61349;
    const double C331 = C307 * C120;
    const double C578 = C554 * C120;
    const double C39354 = C39329 * C120;
    const double C56054 = C56029 * C120;
    const double C1110 = C307 * C837;
    const double C1412 = C554 * C837;
    const double C14068 = C13579 * C837;
    const double C39346 = C39330 * C837;
    const double C39858 = C39129 * C837;
    const double C39850 = C39130 * C837;
    const double C40218 = C39329 * C837;
    const double C56940 = C56029 * C837;
    const double C1978 = C307 * C1705;
    const double C2280 = C554 * C1705;
    const double C27586 = C13579 * C1705;
    const double C41165 = C39329 * C1705;
    const double C56046 = C56030 * C1705;
    const double C57288 = C39129 * C1705;
    const double C57280 = C39130 * C1705;
    const double C57959 = C56029 * C1705;
    const double C2838 = C307 * C2578;
    const double C3116 = C554 * C2578;
    const double C14076 = C13579 * C2578;
    const double C40210 = C39330 * C2578;
    const double C41803 = C39129 * C2578;
    const double C41795 = C39130 * C2578;
    const double C42139 = C39329 * C2578;
    const double C58901 = C56029 * C2578;
    const double C8427 = C307 * C3901;
    const double C8765 = C554 * C3901;
    const double C21013 = C13579 * C3901;
    const double C41157 = C39330 * C3901;
    const double C43384 = C39130 * C3901;
    const double C48574 = C39129 * C3901;
    const double C48990 = C39329 * C3901;
    const double C56932 = C56030 * C3901;
    const double C65776 = C56029 * C3901;
    const double C4924 = C307 * C4664;
    const double C5202 = C554 * C4664;
    const double C27594 = C13579 * C4664;
    const double C44618 = C39329 * C4664;
    const double C57951 = C56030 * C4664;
    const double C60707 = C39129 * C4664;
    const double C60699 = C39130 * C4664;
    const double C61352 = C56029 * C4664;
    const double C17471 = C90634 * C4494;
    const double C75199 = C55626 * C4494;
    const double C76806 = C55625 * C4494;
    const double C18940 = C90634 * C6029;
    const double C76802 = C55626 * C6029;
    const double C78669 = C55625 * C6029;
    const double C15639 = C13579 * C3433;
    const double C16147 = C554 * C3433;
    const double C42808 = C39129 * C3433;
    const double C75850 = C56029 * C3433;
    const double C16949 = C13579 * C3994;
    const double C17470 = C554 * C3994;
    const double C29848 = C307 * C3994;
    const double C43512 = C39129 * C3994;
    const double C75198 = C56030 * C3994;
    const double C76461 = C39329 * C3994;
    const double C76457 = C39330 * C3994;
    const double C76805 = C56029 * C3994;
    const double C18446 = C13579 * C5557;
    const double C18939 = C554 * C5557;
    const double C29853 = C307 * C5557;
    const double C45356 = C39129 * C5557;
    const double C76801 = C56030 * C5557;
    const double C77427 = C39330 * C5557;
    const double C78348 = C39329 * C5557;
    const double C78668 = C56029 * C5557;
    const double C30454 = C13579 * C6287;
    const double C30729 = C307 * C6287;
    const double C62670 = C39129 * C6287;
    const double C79194 = C39329 * C6287;
    const double C14065 = C90485 * C845;
    const double C39853 = C39125 * C845;
    const double C39845 = C39126 * C845;
    const double C27583 = C90485 * C1713;
    const double C57283 = C39125 * C1713;
    const double C57275 = C39126 * C1713;
    const double C14073 = C90485 * C2582;
    const double C41798 = C39125 * C2582;
    const double C16849 = C90485 * C3909;
    const double C43387 = C39125 * C3909;
    const double C27591 = C90485 * C4668;
    const double C60702 = C39125 * C4668;
    const double C408 = C90623 * C397;
    const double C39443 = C39127 * C397;
    const double C1205 = C90623 * C1196;
    const double C39437 = C39128 * C1196;
    const double C40329 = C39127 * C1196;
    const double C2071 = C90623 * C2063;
    const double C41274 = C39127 * C2063;
    const double C29846 = C90623 * C4247;
    const double C73995 = C39128 * C4247;
    const double C76460 = C39127 * C4247;
    const double C27997 = C90623 * C5007;
    const double C77430 = C39127 * C5007;
    const double C733 = C90634 * C722;
    const double C56227 = C55625 * C722;
    const double C1610 = C90634 * C1601;
    const double C57161 = C55625 * C1601;
    const double C2470 = C90634 * C2461;
    const double C56221 = C55626 * C2461;
    const double C58180 = C55625 * C2461;
    const double C14781 = C90634 * C3295;
    const double C75303 = C55625 * C3295;
    const double C17557 = C90634 * C4573;
    const double C73481 = C55626 * C4573;
    const double C76912 = C55625 * C4573;
    const double C18542 = C18533 + C18534;
    const double C45462 = C45458 + C45459;
    const double C18362 = C18354 + C18355;
    const double C18856 = C18848 + C18849;
    const double C45252 = C45244 + C45245;
    const double C76695 = C76681 + C76682;
    const double C78564 = C78556 + C78557;
    const double C418 = C414 * C90541;
    const double C1207 = C414 * C90752;
    const double C2934 = C414 * C2565;
    const double C7001 = C414 * C6692;
    const double C665 = C661 * C90541;
    const double C1509 = C661 * C90752;
    const double C3212 = C661 * C2565;
    const double C7239 = C661 * C6692;
    const double C498 = C494 * C90567;
    const double C2171 = C494 * C90753;
    const double C5108 = C494 * C4653;
    const double C9454 = C494 * C9074;
    const double C743 = C739 * C90567;
    const double C2472 = C739 * C90753;
    const double C5386 = C739 * C4653;
    const double C9692 = C739 * C9074;
    const double C404 = C339 * C181;
    const double C484 = C339 * C244;
    const double C1206 = C339 * C923;
    const double C2170 = C339 * C1875;
    const double C409 = C341 * C181;
    const double C489 = C341 * C244;
    const double C1213 = C341 * C923;
    const double C2177 = C341 * C1875;
    const double C1203 = C1116 * C924;
    const double C1310 = C1116 * C244;
    const double C2928 = C1116 * C2661;
    const double C6998 = C1116 * C6772;
    const double C8651 = C1116 * C1875;
    const double C1208 = C1118 * C924;
    const double C1307 = C1118 * C244;
    const double C2935 = C1118 * C2661;
    const double C7002 = C1118 * C6772;
    const double C8656 = C1118 * C1875;
    const double C2069 = C1984 * C181;
    const double C2167 = C1984 * C1876;
    const double C5102 = C1984 * C4829;
    const double C9451 = C1984 * C9225;
    const double C10194 = C1984 * C923;
    const double C30540 = C1984 * C88309;
    const double C33996 = C1984 * C7402;
    const double C55958 = C1984 * C244;
    const double C57839 = C1984 * C1875;
    const double C60101 = C1984 * C3364;
    const double C2072 = C1986 * C181;
    const double C2172 = C1986 * C1876;
    const double C5109 = C1986 * C4829;
    const double C9455 = C1986 * C9225;
    const double C10198 = C1986 * C923;
    const double C27900 = C1986 * C828;
    const double C55961 = C1986 * C244;
    const double C57845 = C1986 * C1875;
    const double C61039 = C1986 * C88309;
    const double C65364 = C1986 * C7402;
    const double C29760 = C29752 * C3364;
    const double C29844 = C29752 * C2661;
    const double C31396 = C29752 * C924;
    const double C34117 = C29752 * C6772;
    const double C27995 = C27912 * C181;
    const double C29734 = C27912 * C3364;
    const double C31398 = C27912 * C923;
    const double C30648 = C30557 * C181;
    const double C31309 = C30557 * C3364;
    const double C31404 = C30557 * C923;
    const double C651 = C586 * C181;
    const double C729 = C586 * C244;
    const double C1508 = C586 * C923;
    const double C2471 = C586 * C1875;
    const double C656 = C588 * C181;
    const double C734 = C588 * C244;
    const double C1515 = C588 * C923;
    const double C2478 = C588 * C1875;
    const double C1505 = C1418 * C924;
    const double C1611 = C1418 * C244;
    const double C3206 = C1418 * C2661;
    const double C7236 = C1418 * C6772;
    const double C8989 = C1418 * C1875;
    const double C16045 = C1418 * C88309;
    const double C20745 = C1418 * C7402;
    const double C39668 = C1418 * C181;
    const double C40650 = C1418 * C923;
    const double C43148 = C1418 * C3364;
    const double C1510 = C1420 * C924;
    const double C1608 = C1420 * C244;
    const double C3213 = C1420 * C2661;
    const double C7240 = C1420 * C6772;
    const double C8994 = C1420 * C1875;
    const double C14604 = C1420 * C828;
    const double C39671 = C1420 * C181;
    const double C40656 = C1420 * C923;
    const double C42453 = C1420 * C88309;
    const double C48232 = C1420 * C7402;
    const double C2371 = C2286 * C181;
    const double C2468 = C2286 * C1876;
    const double C5380 = C2286 * C4829;
    const double C9689 = C2286 * C9225;
    const double C10504 = C2286 * C923;
    const double C2374 = C2288 * C181;
    const double C2473 = C2288 * C1876;
    const double C5387 = C2288 * C4829;
    const double C9693 = C2288 * C9225;
    const double C10508 = C2288 * C923;
    const double C14779 = C14616 * C244;
    const double C16634 = C14616 * C3364;
    const double C17558 = C14616 * C1875;
    const double C16232 = C16062 * C244;
    const double C16637 = C16062 * C3364;
    const double C17565 = C16062 * C1875;
    const double C17387 = C17381 * C3364;
    const double C17555 = C17381 * C1876;
    const double C19022 = C17381 * C4829;
    const double C23435 = C17381 * C9225;
    const double C17385 = C17379 * C3364;
    const double C17560 = C17379 * C1876;
    const double C19029 = C17379 * C4829;
    const double C23439 = C17379 * C9225;
    const double C88601 = C88559 + C88598;
    const double C88618 = C88608 / C88532;
    const double C5476 = (C88673 * C88565 + C89298 * C88967) / C88268;
    const double C15543 = C90485 * C3372;
    const double C42731 = C39126 * C3372;
    const double C21016 = C90485 * C3907;
    const double C43395 = C39126 * C3907;
    const double C30265 = C90485 * C6170;
    const double C62521 = C39126 * C6170;
    const double C88638 = C88630 / C88268;
    const double C89004 = -C89001;
    const double C31229 = C90485 * C19201;
    const double C31052 = C31046 + C31047;
    const double C89063 = -C89060;
    const double C16304 = C90485 * C15527;
    const double C16853 = C90485 * C16837;
    const double C18359 = C90485 * C17653;
    const double C31772 = C90485 * C30249;
    const double C88600 = C88597 + C88558;
    const double C88622 = C88614 / C88290;
    const double C88617 = C88606 / C88290;
    const double C89408 = C88606 / C88532;
    const double C5473 = -(C89313 * C88967 + C88673 * C88564) / C88290;
    const double C15548 = C13579 * C3369;
    const double C16057 = C554 * C3369;
    const double C42137 = C39330 * C3369;
    const double C42734 = C39130 * C3369;
    const double C21019 = C13579 * C3904;
    const double C21655 = C554 * C3904;
    const double C43398 = C39130 * C3904;
    const double C48988 = C39330 * C3904;
    const double C58583 = C307 * C3904;
    const double C58899 = C56030 * C3904;
    const double C30270 = C13579 * C6167;
    const double C30552 = C307 * C6167;
    const double C61350 = C56030 * C6167;
    const double C62524 = C39130 * C6167;
    const double C19414 =
        2 * ((-(C88731 * C89754) / C88290) / C88268 - (ae * C89315) / C88532) -
        (ae * (C88996 * C88967 + C89315)) / C88532 +
        C88731 *
            ((-(ae * C88731 * C88996) / C88290) / C88268 - C89754 / C88532 +
             C88731 *
                 ((-(C88731 * C88673 * C88924) / C88290) / C88268 - C89002));
    const double C89529 = -C89525;
    const double C17133 =
        2 * ((-(C88673 * C89651) / C88290) / C88268 -
             (ae * C88731 * C88558) / C88532) -
        (ae * C88731 * C89402) / C88532 +
        C88673 *
            ((-(ae * C88731 * C88996) / C88290) / C88268 - C89651 / C88532 +
             C88673 *
                 ((-(C88673 * C88731 * C88823) / C88290) / C88268 - C89061));
    const double C89987 = -C89983;
    const double C16305 = C13579 * C15528;
    const double C16640 = C554 * C15528;
    const double C16854 = C13579 * C16838;
    const double C17376 = C554 * C16838;
    const double C75776 = C56030 * C16838;
    const double C76349 = C39330 * C16838;
    const double C18360 = C13579 * C17654;
    const double C18854 = C554 * C17654;
    const double C29750 = C307 * C17654;
    const double C76691 = C56030 * C17654;
    const double C78244 = C39330 * C17654;
    const double C31773 = C13579 * C30250;
    const double C31949 = C307 * C30250;
    const double C88599 = C88596 / C88532;
    const double C2584 =
        (-(C88593 * C88845) / C88290) / C88268 - C88563 / C88532 -
        (ae * (C88594 * C88845 + C88564)) / C88532 -
        ((C88565 + C88595 * C88845) * ce) / C88532 +
        C88531 * ((-((C88559 + C88586 * C88845) * ce) / C88290) / C88268 -
                  (ae * (C88583 * C88845 + C88558)) / C88532 +
                  C88531 * ((-(C88647 * C88845) / C88290) / C88268 - C88607));
    const double C4670 =
        (-(C88593 * C88967) / C88290) / C88268 - C88563 / C88532 -
        (ae * (C88594 * C88967 + C88564)) / C88532 -
        ((C88565 + C88595 * C88967) * ce) / C88532 +
        C88531 * ((-((C88559 + C88586 * C88967) * ce) / C88290) / C88268 -
                  (ae * (C88583 * C88967 + C88558)) / C88532 +
                  C88531 * ((-(C88647 * C88967) / C88290) / C88268 - C88607));
    const double C3910 = (-(C88731 * C88673 * C88559 * ce) / C88290) / C88268 -
                         (ae * C88731 * C88673 * C88558) / C88532 -
                         (C88531 * C88731 * C88993) / C88532;
    const double C5480 =
        (-(C88993 * C88967) / C88290) / C88268 - (C88673 * C88563) / C88532;
    const double C14069 = C90485 * C844;
    const double C39859 = C39125 * C844;
    const double C39851 = C39126 * C844;
    const double C27587 = C90485 * C1712;
    const double C57289 = C39125 * C1712;
    const double C57281 = C39126 * C1712;
    const double C14077 = C90485 * C2583;
    const double C41804 = C39125 * C2583;
    const double C41796 = C39126 * C2583;
    const double C15545 = C90485 * C3376;
    const double C42733 = C39125 * C3376;
    const double C16845 = C90485 * C3914;
    const double C43397 = C39125 * C3914;
    const double C27595 = C90485 * C4669;
    const double C60708 = C39125 * C4669;
    const double C60700 = C39126 * C4669;
    const double C30267 = C90485 * C6174;
    const double C62523 = C39125 * C6174;
    const double C88658 = C88586 + C88655;
    const double C89395 = C88595 + C89393;
    const double C89805 = C88595 + C89803;
    const double C33650 =
        (2 * C88731 * C89298 + C88731 * (C89298 + C90070 * C88967)) / C88268;
    const double C89577 = C88808 + C89570;
    const double C90052 = C88909 + C90048;
    const double C89178 = C89176 + C88644;
    const double C89369 = C89367 + C88644;
    const double C88650 = C88615 + C88642;
    const double C88649 = C88641 / C88290;
    const double C89177 = C89174 + C88641;
    const double C89368 = C89365 + C88641;
    const double C5635 = -(C88731 * (C88731 * C89326 + C89175 * ce) +
                           C88673 * C88755 + C88731 * C89175 * ce) /
                         C88290;
    const double C5949 =
        (C88673 * C88913 + C88731 * (C88731 * C89327 + C89175 * ae) +
         C88731 * C89175 * ae) /
        C88268;
    const double C5469 = C88673 * C88585 + C89175 * C88967;
    const double C89454 = C88673 * C89451;
    const double C89887 = C88731 * C89883;
    const double C89453 = C88673 * C89450;
    const double C89886 = C88731 * C89880;
    const double C17812 = -(C88731 * (C88731 * C89474 + C89446 * ce) +
                            C88760 * C88845 + C88745 + C88731 * C89446 * ce) /
                          C88290;
    const double C18120 =
        (C88903 + C88918 * C88845 + C88731 * (C88731 * C89495 + C89446 * ae) +
         C88731 * C89446 * ae) /
        C88268;
    const double C21232 =
        C88731 * ((-2 * C89323) / C88290 - (C88673 * C89474) / C88290) -
        ((2 * C89169 + C88673 * C89446) * ce) / C88290;
    const double C21644 = (C88731 * (2 * C89324 + C88673 * C89495) +
                           (2 * C89169 + C88673 * C89446) * ae) /
                          C88268;
    const double C15526 = 3 * (C88554 + C88577 * C88845) +
                          C88673 * (2 * C89169 + C88673 * C89446);
    const double C17652 = C88554 + C88577 * C88845 + C89446 * C88967;
    const double C21004 = C88731 * (2 * C89169 + C88673 * C89446);
    const double C90086 = C90084 + C89448;
    const double C90085 = C90083 + C89445;
    const double C18044 =
        (-(C88731 * C88817 * ce) / C88290) / C88268 - C89181 / C88532 +
        C88731 * ((-(C88731 * C89468) / C88290) / C88268 - C88822 / C88532) -
        (ae * (C88731 * (C88731 * C88673 * C89470 + C89445) + C89323 +
               C88731 * C89439 * ce)) /
            C88532 +
        C88673 * (C88673 * ((-(C88731 * C89441 * ce) / C88290) / C88268 -
                            C89468 / C88532 +
                            C88731 * ((-(C88731 * C88531 * std::pow(C88535, 7) *
                                         bs[7] * C88872) /
                                       C88290) /
                                          C88268 -
                                      (C89441 * ce) / C88532)) -
                  (ae * (C88731 * (C88731 * C89470 + C88633) + C88760 +
                         C88731 * C88625 * ce)) /
                      C88532);
    const double C30248 = 3 * (C88554 + C88577 * C88967) +
                          C88731 * (2 * C89360 + C88731 * C89882);
    const double C88657 = C88654 + C88583;
    const double C89411 = C89409 + C88594;
    const double C89832 = C89830 + C88594;
    const double C33651 = (-2 * C88731 * C89313) / C88290 -
                          (C88731 * (C90076 * C88967 + C89313)) / C88290;
    const double C89574 = C89567 + C88693;
    const double C89930 = C89928 + C89421;
    const double C90051 = C90047 + C88751;
    const double C88656 = C88653 / C88532;
    const double C89000 = C88531 * C88997;
    const double C89371 = C88731 * C88997;
    const double C3911 = (-(ae * C88731 * C88673 * C88594) / C88290) / C88268 -
                         (C88731 * C88993) / C88532 -
                         (C88731 * C88673 * C88595 * ce) / C88532 +
                         C88531 * ((-(C88731 * C88995 * ce) / C88290) / C88268 -
                                   (ae * C88731 * C88996) / C88532 -
                                   (C88531 * C88731 * C88997) / C88532);
    const double C5478 =
        (-(C88997 * C88967) / C88290) / C88268 - C88993 / C88532 -
        (ae * (C88673 * C88648 * C88967 + C88673 * C88594)) / C88532 -
        ((C88673 * C88595 + C88673 * C88651 * C88967) * ce) / C88532 +
        C88531 *
            ((-((C88995 + C88673 * C88635 * C88967) * ce) / C88290) / C88268 -
             (ae * (C88673 * C88632 * C88967 + C88996)) / C88532 +
             C88531 *
                 ((-(C88673 *
                     (C88612 * C88613 + C88539 * bs[7] * std::pow(C88535, 7)) *
                     C88540 * C88967) /
                   C88290) /
                      C88268 -
                  C88997 / C88532));
    const double C5479 =
        (-((C88673 * C88559 + C88995 * C88967) * ce) / C88290) / C88268 -
        (ae * (C88996 * C88967 + C88673 * C88558)) / C88532 +
        C88531 * ((-(C88997 * C88967) / C88290) / C88268 - C88993 / C88532);
    const double C19094 =
        (-2 * C88731 * C88993) / C88532 +
        C88731 * ((-(C88997 * C88967) / C88290) / C88268 - C88993 / C88532);
    const double C89059 = C88531 * C89056;
    const double C89112 = C89111 / C88290;
    const double C89253 = C89252 / C88290;
    const double C88863 = C88862 / C88290;
    const double C89443 = C88673 * C89437;
    const double C89776 = C88731 * C89437;
    const double C89558 = C89547 / C88532;
    const double C89667 = C88673 * C89664;
    const double C89728 = C89727 / C88290;
    const double C88985 = C88984 / C88290;
    const double C89874 = C88731 * C89501;
    const double C90079 = C88673 * C89501;
    const double C21860 =
        (((-2 * C89323) / C88290 - (C88673 * C89474) / C88290) * ae) / C88268 -
        ((2 * C89324 + C88673 * C89495) * ce) / C88532 +
        C88731 *
            ((-2 * C88673 * C89501) / C88532 +
             C88673 *
                 ((-(C88531 *
                     (C88612 * C88613 + C88967 * bs[7] * std::pow(C88535, 7)) *
                     C88540 * C88845) /
                   C88290) /
                      C88268 -
                  C89501 / C88532));
    const double C89640 = C89639 / C88290;
    const double C89939 = C88731 * C89933;
    const double C90037 = C90024 / C88532;
    const double C89769 = C89767 + C89571;
    const double C89576 = C89552 + C89569;
    const double C89575 = C89568 / C88290;
    const double C89768 = C89765 + C89568;
    const double C89950 = C88731 * C89947;
    const double C89949 = C88731 * C89946;
    const double C31038 = 3 * (C89162 + C89416 * C88967) +
                          C88731 * (2 * C89760 + C88731 * C89942);
    const double C90042 = C90029 + C90030;
    const double C90041 = C90028 / C88290;
    const double C411 = C307 * C186;
    const double C658 = C554 * C186;
    const double C1214 = C307 * C928;
    const double C1516 = C554 * C928;
    const double C39444 = C39330 * C928;
    const double C39980 = C39130 * C928;
    const double C2076 = C307 * C1793;
    const double C2378 = C554 * C1793;
    const double C56144 = C56030 * C1793;
    const double C57412 = C39130 * C1793;
    const double C2938 = C307 * C2665;
    const double C3216 = C554 * C2665;
    const double C14190 = C13579 * C2665;
    const double C40332 = C39330 * C2665;
    const double C41917 = C39130 * C2665;
    const double C8544 = C307 * C3991;
    const double C8882 = C554 * C3991;
    const double C41279 = C39330 * C3991;
    const double C48712 = C39130 * C3991;
    const double C57054 = C56030 * C3991;
    const double C72762 = C13579 * C3991;
    const double C5016 = C307 * C4748;
    const double C5294 = C554 * C4748;
    const double C27714 = C13579 * C4748;
    const double C58073 = C56030 * C4748;
    const double C60819 = C39130 * C4748;
    const double C88716 = -C88712;
    const double C61459 = C55626 * C6560;
    const double C4496 =
        C88731 *
            ((-(C88673 * C88918 * ce) / C88290) / C88268 - C89188 / C88532 +
             C88673 * ((-(C88673 * C88531 * C88958) / C88290) / C88268 -
                       C88923 / C88532)) -
        (ae * (C88673 * C89171 + C88687 + C89169 * ce)) / C88532;
    const double C6030 =
        (-(C88673 * C89188) / C88290) / C88268 - (C88903 * ce) / C88532 -
        (ae * C88731 * C89171) / C88532 +
        C88731 * (C88731 * ((-(C88673 * C88531 * C88958) / C88290) / C88268 -
                            C88923 / C88532) -
                  (ae * C89171) / C88532);
    const double C3432 =
        (-2 * (C88673 * C88687 + C88554 * ce)) / C88290 -
        (C88673 * (C88673 * C89171 + C88687 + C89169 * ce)) / C88290 -
        ((C88554 + C88577 * C88845) * ce) / C88290;
    const double C3993 =
        -(C88731 * (C88673 * C89171 + C88687 + C89169 * ce)) / C88290;
    const double C5556 =
        -(C89171 * C88967 + C88673 * C88687 + C88554 * ce) / C88290;
    const double C33769 = (-2 * C88731 * C89171) / C88290 -
                          (C88731 * (C89450 * C88967 + C89171)) / C88290;
    const double C89430 = C89427 + C88685;
    const double C89559 = C89548 / C88290;
    const double C89555 = C89544 / C88290;
    const double C89927 = C89544 / C88532;
    const double C31144 = C13579 * C19146;
    const double C31405 = C307 * C19146;
    const double C78666 = C56030 * C19146;
    const double C79122 = C39330 * C19146;
    const double C90006 = -C90002;
    const double C31834 = C13579 * C30357;
    const double C32008 = C307 * C30357;
    const double C491 = C307 * C249;
    const double C736 = C554 * C249;
    const double C1312 = C307 * C1012;
    const double C1613 = C554 * C1012;
    const double C39528 = C39330 * C1012;
    const double C40098 = C39130 * C1012;
    const double C2178 = C307 * C1880;
    const double C2479 = C554 * C1880;
    const double C56228 = C56030 * C1880;
    const double C57526 = C39130 * C1880;
    const double C3026 = C307 * C2747;
    const double C3304 = C554 * C2747;
    const double C14288 = C13579 * C2747;
    const double C40442 = C39330 * C2747;
    const double C42029 = C39130 * C2747;
    const double C8657 = C307 * C4077;
    const double C8995 = C554 * C4077;
    const double C41389 = C39330 * C4077;
    const double C48850 = C39130 * C4077;
    const double C57164 = C56030 * C4077;
    const double C72868 = C13579 * C4077;
    const double C5112 = C307 * C4833;
    const double C5390 = C554 * C4833;
    const double C27812 = C13579 * C4833;
    const double C58183 = C56030 * C4833;
    const double C60931 = C39130 * C4833;
    const double C88774 = -C88770;
    const double C42350 = C39128 * C3653;
    const double C33891 = C13579 * C5636;
    const double C34229 = C307 * C5636;
    const double C44828 = C39330 * C5636;
    const double C45142 = C554 * C5636;
    const double C45460 = C39130 * C5636;
    const double C66050 = C56030 * C5636;
    const double C6286 =
        (-2 * (C88731 * C88745 + C88554 * ce)) / C88290 -
        (C88731 * (C88731 * C89362 + C88745 + C89360 * ce)) / C88290 -
        ((C88554 + C88577 * C88967) * ce) / C88290;
    const double C16422 = C13579 * C15718;
    const double C16757 = C554 * C15718;
    const double C17047 = C13579 * C17029;
    const double C17566 = C554 * C17029;
    const double C75922 = C56030 * C17029;
    const double C76571 = C39330 * C17029;
    const double C18540 = C13579 * C17811;
    const double C19032 = C554 * C17811;
    const double C29946 = C307 * C17811;
    const double C76915 = C56030 * C17811;
    const double C78452 = C39330 * C17811;
    const double C89604 = -C89600;
    const double C19199 =
        (-2 * (C88731 * C89320 + C89162 * ce)) / C88290 -
        (C88731 * (C88731 * C89762 + C89320 + C89760 * ce)) / C88290 -
        ((C89162 + C89416 * C88967) * ce) / C88290;
    const double C89689 = C89687 / C88532;
    const double C90021 = C89687 / C88290;
    const double C89860 = C89854 + C88743;
    const double C90038 = C90025 / C88290;
    const double C334 = C90623 * C312;
    const double C1113 = C90623 * C1096;
    const double C39349 = C39128 * C1096;
    const double C1981 = C90623 * C1964;
    const double C2841 = C90623 * C2829;
    const double C40213 = C39128 * C2829;
    const double C8430 = C90623 * C4163;
    const double C41160 = C39128 * C4163;
    const double C4927 = C90623 * C4915;
    const double C89566 = C89557 / C88268;
    const double C88830 = -C88827;
    const double C49265 = C39128 * C4331;
    const double C58794 = C90623 * C4331;
    const double C34230 = C90623 * C5873;
    const double C44829 = C39128 * C5873;
    const double C30732 = C90623 * C6451;
    const double C3544 = (2 * (C88673 * C88802 + C88554 * ae) +
                          C88673 * (C88802 + C88673 * C89172 + C89169 * ae) +
                          (C88554 + C88577 * C88845) * ae) /
                         C88268;
    const double C4165 =
        (C88731 * (C88802 + C88673 * C89172 + C89169 * ae)) / C88268;
    const double C5716 =
        (C88673 * C88802 + C88554 * ae + C89172 * C88967) / C88268;
    const double C33991 =
        (2 * C88731 * C89172 + C88731 * (C89172 + C89451 * C88967)) / C88268;
    const double C30555 = C30546 + C30547;
    const double C89431 = C88800 + C89428;
    const double C89556 = C89545 / C88532;
    const double C31311 = C90623 * C19254;
    const double C79045 = C39128 * C19254;
    const double C89671 = -C89668;
    const double C31948 = C90623 * C30533;
    const double C17967 =
        (-(C88855 * C88967) / C88290) / C88268 - C88850 / C88532 -
        (ae * (C89421 * C88967 + C89164)) / C88532 -
        ((C89165 + C89424 * C88967) * ce) / C88532 +
        C88673 * ((-((C88800 + C88808 * C88967) * ce) / C88290) / C88268 -
                  (ae * (C88693 * C88967 + C88685)) / C88532 +
                  C88673 * ((-(C88861 * C88967) / C88290) / C88268 - C88858));
    const double C4249 = (-(C88731 * C88802 * ce) / C88290) / C88268 -
                         (ae * C88731 * C88687) / C88532 -
                         (C88673 * C88731 * C89167) / C88532;
    const double C4250 =
        (-(ae * C88731 * C89171) / C88290) / C88268 -
        (C88731 * C89167) / C88532 - (C88731 * C89172 * ce) / C88532 +
        C88673 * ((-(C88731 * C88817 * ce) / C88290) / C88268 -
                  (ae * C88731 * C88702) / C88532 -
                  (C88673 * C88731 * C88531 * C88861) / C88532);
    const double C5008 =
        (-(C89167 * C88967) / C88290) / C88268 - (C88531 * C88850) / C88532;
    const double C5796 =
        (-((C88802 + C88817 * C88967) * ce) / C88290) / C88268 -
        (ae * (C88702 * C88967 + C88687)) / C88532 +
        C88673 *
            ((-(C88531 * C88861 * C88967) / C88290) / C88268 - C89167 / C88532);
    const double C6398 =
        (-2 * C88731 * C89167) / C88532 +
        C88731 *
            ((-(C88531 * C88861 * C88967) / C88290) / C88268 - C89167 / C88532);
    const double C17968 =
        (-(C89437 * C88967) / C88290) / C88268 - C89167 / C88532 -
        (ae * (C89450 * C88967 + C89171)) / C88532 -
        ((C89172 + C89451 * C88967) * ce) / C88532 +
        C88673 *
            ((-((C88817 + C89441 * C88967) * ce) / C88290) / C88268 -
             (ae * (C89438 * C88967 + C88702)) / C88532 +
             C88673 *
                 ((-(C88531 *
                     (C88612 * C88613 + C88845 * bs[7] * std::pow(C88535, 7)) *
                     C88540 * C88967) /
                   C88290) /
                      C88268 -
                  C89437 / C88532));
    const double C89420 = C89414 / C88532;
    const double C412 = C90623 * C398;
    const double C1210 = C90623 * C1197;
    const double C39439 = C39128 * C1197;
    const double C40331 = C39127 * C1197;
    const double C2074 = C90623 * C2064;
    const double C41278 = C39127 * C2064;
    const double C2932 = C90623 * C2922;
    const double C40327 = C39128 * C2922;
    const double C42244 = C39127 * C2922;
    const double C29849 = C90623 * C4248;
    const double C76462 = C39127 * C4248;
    const double C76458 = C39128 * C4248;
    const double C29854 = C90623 * C5795;
    const double C77428 = C39128 * C5795;
    const double C78349 = C39127 * C5795;
    const double C30647 = C90623 * C6399;
    const double C79121 = C39127 * C6399;
    const double C581 = C90634 * C559;
    const double C1415 = C90634 * C1398;
    const double C2283 = C90634 * C2266;
    const double C56049 = C55626 * C2266;
    const double C3119 = C90634 * C3107;
    const double C8768 = C90634 * C4409;
    const double C56935 = C55626 * C4409;
    const double C5205 = C90634 * C5193;
    const double C57954 = C55626 * C5193;
    const double C90046 = C90036 / C88268;
    const double C88931 = -C88928;
    const double C16150 = C90634 * C3762;
    const double C44931 = C90634 * C5950;
    const double C65771 = C55626 * C5950;
    const double C6504 = (2 * (C88731 * C88903 + C88554 * ae) +
                          C88731 * (C88903 + C88731 * C89363 + C89360 * ae) +
                          (C88554 + C88577 * C88967) * ae) /
                         C88268;
    const double C16060 = C16051 + C16052;
    const double C21657 = C21651 + C21652;
    const double C58903 = C58895 + C58896;
    const double C16639 = C90634 * C16038;
    const double C17375 = C90634 * C17361;
    const double C75773 = C55626 * C17361;
    const double C18853 = C90634 * C18119;
    const double C76688 = C55626 * C18119;
    const double C89630 = -C89627;
    const double C19412 = (2 * (C88731 * C89321 + C89162 * ae) +
                           C88731 * (C89321 + C88731 * C89763 + C89760 * ae) +
                           (C89162 + C89416 * C88967) * ae) /
                          C88268;
    const double C89869 = C88901 + C89867;
    const double C90035 = C90022 / C88532;
    const double C16226 =
        3 * ((-(C88977 * C88845) / C88290) / C88268 - C88972 / C88532) +
        C88673 * ((-2 * C88673 * C88977) / C88532 +
                  C88673 * ((-(C88983 * C88845) / C88290) / C88268 - C88980));
    const double C3815 =
        (-2 * C88673 * C89192) / C88532 +
        C88673 *
            ((-(C88531 * C88983 * C88845) / C88290) / C88268 - C89192 / C88532);
    const double C4574 = (-(C88673 * C88903 * ce) / C88290) / C88268 -
                         (ae * C88673 * C88745) / C88532 -
                         (C88731 * C88673 * C89192) / C88532;
    const double C4577 =
        (-((C88903 + C88918 * C88845) * ce) / C88290) / C88268 -
        (ae * (C88760 * C88845 + C88745)) / C88532 +
        C88731 *
            ((-(C88531 * C88983 * C88845) / C88290) / C88268 - C89192 / C88532);
    const double C5374 =
        (-(ae * (C88731 * C88745 + C88554 * ce)) / C88290) / C88268 -
        (C88531 * C88972) / C88532 -
        ((C88731 * C88903 + C88554 * ae) * ce) / C88532 +
        C88731 * ((-(C88903 * ce) / C88290) / C88268 - (ae * C88745) / C88532 -
                  (C88731 * C89192) / C88532);
    const double C6107 =
        (-(ae * (C88731 * C89323 + C89169 * ce)) / C88290) / C88268 -
        (C88673 * C89192) / C88532 -
        ((C88731 * C89324 + C89169 * ae) * ce) / C88532 +
        C88731 * ((-(C89324 * ce) / C88290) / C88268 - (ae * C89323) / C88532 -
                  (C88731 * C88673 * C88531 * C88983) / C88532);
    const double C16227 =
        3 * ((-(C89501 * C88845) / C88290) / C88268 - C89192 / C88532) +
        C88673 *
            ((-2 * C88673 * C89501) / C88532 +
             C88673 *
                 ((-(C88531 *
                     (C88612 * C88613 + C88967 * bs[7] * std::pow(C88535, 7)) *
                     C88540 * C88845) /
                   C88290) /
                      C88268 -
                  C89501 / C88532));
    const double C18274 =
        (-(C89501 * C88845) / C88290) / C88268 - C89192 / C88532 -
        (ae * (C88731 * C89474 + C89446 * ce)) / C88532 -
        ((C88731 * C89495 + C89446 * ae) * ce) / C88532 +
        C88731 *
            ((-(C89495 * ce) / C88290) / C88268 - (ae * C89474) / C88532 +
             C88731 *
                 ((-(C88531 *
                     (C88612 * C88613 + C88967 * bs[7] * std::pow(C88535, 7)) *
                     C88540 * C88845) /
                   C88290) /
                      C88268 -
                  C89501 / C88532));
    const double C89859 = C89853 / C88532;
    const double C737 = C90634 * C723;
    const double C1607 = C90634 * C1600;
    const double C57163 = C55625 * C1600;
    const double C2475 = C90634 * C2462;
    const double C56223 = C55626 * C2462;
    const double C58182 = C55625 * C2462;
    const double C3302 = C90634 * C3296;
    const double C59110 = C55625 * C3296;
    const double C16231 = C90634 * C3816;
    const double C75921 = C55625 * C3816;
    const double C17562 = C90634 * C4576;
    const double C75301 = C55626 * C4576;
    const double C76914 = C55625 * C4576;
    const double C19026 = C90634 * C6106;
    const double C76910 = C55626 * C6106;
    const double C78771 = C55625 * C6106;
    const double C88592 = C88588 - C88573;
    const double C29950 = C29944 + C29945;
    const double C76578 = C76573 + C76574;
    const double C76576 = C76569 + C76570;
    const double C29949 = C29942 + C29943;
    const double C77536 = C77533 + C77534;
    const double C78457 = C78454 + C78455;
    const double C89429 = C89426 - C88692;
    const double C89868 = C89865 - C88750;
    const double C16294 = (4 * (2 * C89300 + C88673 * C89387) +
                           C88673 * (3 * C89387 + C88673 * C89514)) /
                          C88268;
    const double C16840 = (C88731 * (3 * C89387 + C88673 * C89514)) / C88268;
    const double C18351 =
        (2 * C89300 + C88673 * C89387 + C89514 * C88967) / C88268;
    const double C31767 = (4 * (2 * C89792 + C88731 * C89796) +
                           C88731 * (3 * C89796 + C88731 * C89972)) /
                          C88268;
    const double C89540 = C89531 - C89538;
    const double C89998 = C89989 - C89996;
    const double C88726 = C88714 - C88724;
    const double C90017 = C90008 - C90015;
    const double C88784 = C88772 - C88782;
    const double C89609 = C89602 - C89606;
    const double C313 = (4 * (2 * C88802 + C88531 * C88812) +
                         C88531 * (3 * C88812 + C88531 * C88838)) /
                        C88268;
    const double C1965 = (C88731 * (3 * C88812 + C88531 * C88838)) / C88268;
    const double C4916 =
        (2 * C88802 + C88531 * C88812 + C88838 * C88967) / C88268;
    const double C31943 = (4 * (2 * C89811 + C88731 * C89813) +
                           C88731 * (3 * C89813 + C88731 * C89981)) /
                          C88268;
    const double C560 = (4 * (2 * C88903 + C88531 * C88913) +
                         C88531 * (3 * C88913 + C88531 * C88939)) /
                        C88268;
    const double C1399 = (C88673 * (3 * C88913 + C88531 * C88939)) / C88268;
    const double C3108 =
        (2 * C88903 + C88531 * C88913 + C88939 * C88845) / C88268;
    const double C16629 = (4 * (2 * C89321 + C88673 * C89484) +
                           C88673 * (3 * C89484 + C88673 * C89632)) /
                          C88268;
    const double C88699 = C88698 / C88268;
    const double C89389 = C89388 / C88268;
    const double C88723 = C88720 / C88268;
    const double C89513 = C89511 / C88268;
    const double C89960 = C89959 / C88268;
    const double C27899 = C1985 * C822;
    const double C30541 = C1985 * C90503;
    const double C33997 = C1985 * C90503;
    const double C57635 = C1985 * C821;
    const double C60102 = C1985 * C90498;
    const double C61038 = C1985 * C90744;
    const double C65363 = C1985 * C7396;
    const double C29761 = C29753 * C90498;
    const double C34003 = C29753 * C7396;
    const double C37192 = C29753 * C90744;
    const double C27917 = C27913 * C821;
    const double C29735 = C27913 * C90498;
    const double C30543 = C27913 * C90744;
    const double C33999 = C27913 * C7396;
    const double C88814 = C88813 / C88268;
    const double C89404 = C89403 / C88268;
    const double C29765 = C29757 * C90498;
    const double C29763 = C29755 * C90498;
    const double C34008 = C29755 * C7396;
    const double C37196 = C29755 * C90744;
    const double C30561 = C30556 * C90744;
    const double C31308 = C30556 * C90498;
    const double C36420 = C30556 * C7396;
    const double C88837 = C88834 / C88268;
    const double C89537 = C89534 / C88268;
    const double C89656 = -C89655;
    const double C89724 = C89723 / C88268;
    const double C88757 = C88756 / C88268;
    const double C89798 = C89797 / C88268;
    const double C88781 = C88778 / C88268;
    const double C89522 = C89521 / C88268;
    const double C89903 = -C89901;
    const double C89971 = C89969 / C88268;
    const double C499 = C495 * C90567;
    const double C2176 = C495 * C90753;
    const double C9458 = C495 * C9074;
    const double C1318 = C1315 * C90567;
    const double C8650 = C1315 * C90753;
    const double C10299 = C1315 * C9074;
    const double C2184 = C2180 * C90579;
    const double C5103 = C2180 * C4654;
    const double C9452 = C2180 * C90579;
    const double C55959 = C2180 * C90567;
    const double C57840 = C2180 * C90753;
    const double C61243 = C2180 * C4653;
    const double C66649 = C2180 * C9074;
    const double C8659 = C8652 + C8653;
    const double C41391 = C41383 + C41384;
    const double C49266 = C49262 + C49263;
    const double C5114 = C5105 + C5106;
    const double C44830 = C44826 + C44827;
    const double C89465 = C89464 / C88268;
    const double C89679 = C89678 / C88268;
    const double C1317 = C1314 * C90567;
    const double C8655 = C1314 * C90753;
    const double C10303 = C1314 * C9074;
    const double C2186 = C2182 * C90579;
    const double C5110 = C2182 * C4654;
    const double C9456 = C2182 * C90579;
    const double C55960 = C2182 * C90567;
    const double C57844 = C2182 * C90753;
    const double C66653 = C2182 * C9074;
    const double C3030 = C3028 * C90567;
    const double C88886 = C88885 / C88268;
    const double C89475 = -C89473;
    const double C89781 = -C89780;
    const double C89605 = C89601 / C88268;
    const double C89688 = C89686 / C88268;
    const double C14603 = C1419 * C822;
    const double C16046 = C1419 * C90503;
    const double C20746 = C1419 * C90503;
    const double C40547 = C1419 * C821;
    const double C42452 = C1419 * C90744;
    const double C43149 = C1419 * C90498;
    const double C48231 = C1419 * C7396;
    const double C14621 = C14617 * C821;
    const double C16048 = C14617 * C90744;
    const double C16635 = C14617 * C90498;
    const double C20748 = C14617 * C7396;
    const double C17386 = C17380 * C90498;
    const double C21648 = C17380 * C7396;
    const double C24806 = C17380 * C90744;
    const double C88915 = C88914 / C88268;
    const double C89825 = C89824 / C88268;
    const double C16066 = C16061 * C90744;
    const double C16636 = C16061 * C90498;
    const double C20752 = C16061 * C7396;
    const double C17384 = C17378 * C90498;
    const double C21653 = C17378 * C7396;
    const double C24810 = C17378 * C90744;
    const double C18861 = C18857 * C90498;
    const double C88938 = C88935 / C88268;
    const double C89617 = C89616 / C88268;
    const double C89921 = -C89919;
    const double C89995 = C89992 / C88268;
    const double C666 = C662 * C90541;
    const double C1514 = C662 * C90752;
    const double C7243 = C662 * C6692;
    const double C1522 = C1518 * C90555;
    const double C3207 = C1518 * C2566;
    const double C7237 = C1518 * C90555;
    const double C39669 = C1518 * C90541;
    const double C40651 = C1518 * C90752;
    const double C42558 = C1518 * C2565;
    const double C47439 = C1518 * C6692;
    const double C2383 = C2380 * C90541;
    const double C8875 = C2380 * C6692;
    const double C10503 = C2380 * C90752;
    const double C8884 = C8877 + C8878;
    const double C57056 = C57048 + C57049;
    const double C65916 = C65912 + C65913;
    const double C5296 = C5291 + C5292;
    const double C58076 = C58069 + C58070;
    const double C61460 = C61456 + C61457;
    const double C89486 = C89485 / C88268;
    const double C89840 = C89839 / C88268;
    const double C1524 = C1520 * C90555;
    const double C3214 = C1520 * C2566;
    const double C7241 = C1520 * C90555;
    const double C39670 = C1520 * C90541;
    const double C40655 = C1520 * C90752;
    const double C47443 = C1520 * C6692;
    const double C2384 = C2381 * C90541;
    const double C8880 = C2381 * C6692;
    const double C10507 = C2381 * C90752;
    const double C88962 = C88961 / C88268;
    const double C89496 = -C89494;
    const double C89848 = -C89846;
    const double C89631 = C89628 / C88268;
    const double C90014 = C90011 / C88268;
    const double C14275 = C14088 * C244;
    const double C16299 = C14088 * C3364;
    const double C17039 = C14088 * C1875;
    const double C14278 = C14084 * C244;
    const double C15536 = C14084 * C88309;
    const double C20286 = C14084 * C7402;
    const double C21237 = C14084 * C1875;
    const double C14095 = C14083 * C821;
    const double C15535 = C14083 * C90744;
    const double C16298 = C14083 * C90498;
    const double C20285 = C14083 * C7396;
    const double C14272 = C14082 * C244;
    const double C16297 = C14082 * C3364;
    const double C17034 = C14082 * C1875;
    const double C14298 = C14292 * C90567;
    const double C21236 = C14292 * C90753;
    const double C22838 = C14292 * C9074;
    const double C14297 = C14291 * C90567;
    const double C17040 = C14291 * C90753;
    const double C18536 = C14291 * C4653;
    const double C22834 = C14291 * C9074;
    const double C14296 = C14290 * C90567;
    const double C17035 = C14290 * C90753;
    const double C18529 = C14290 * C4653;
    const double C22830 = C14290 * C9074;
    const double C15726 = C15553 * C244;
    const double C16302 = C15553 * C3364;
    const double C17046 = C15553 * C1875;
    const double C15733 = C15731 * C90567;
    const double C17045 = C15731 * C90753;
    const double C25233 = C15731 * C9074;
    const double C16865 = C16859 * C3364;
    const double C17036 = C16859 * C1876;
    const double C18530 = C16859 * C4829;
    const double C22831 = C16859 * C9225;
    const double C29574 = C16859 * C2661;
    const double C31135 = C16859 * C924;
    const double C33774 = C16859 * C6772;
    const double C72863 = C16859 * C244;
    const double C73680 = C16859 * C181;
    const double C76229 = C16859 * C1875;
    const double C78028 = C16859 * C923;
    const double C16863 = C16857 * C3364;
    const double C17041 = C16857 * C1876;
    const double C18537 = C16857 * C4829;
    const double C22835 = C16857 * C9225;
    const double C29576 = C16857 * C2662;
    const double C74691 = C16857 * C244;
    const double C76127 = C16857 * C2661;
    const double C76235 = C16857 * C1875;
    const double C78030 = C16857 * C924;
    const double C81434 = C16857 * C6772;
    const double C29575 = C16953 * C2566;
    const double C31136 = C16953 * C90555;
    const double C33775 = C16953 * C90555;
    const double C73681 = C16953 * C90541;
    const double C76126 = C16953 * C2565;
    const double C78029 = C16953 * C90752;
    const double C81433 = C16953 * C6692;
    const double C17055 = C17051 * C90579;
    const double C18538 = C17051 * C4654;
    const double C22836 = C17051 * C90579;
    const double C74690 = C17051 * C90567;
    const double C76234 = C17051 * C90753;
    const double C86777 = C17051 * C9074;
    const double C17053 = C17049 * C90579;
    const double C18531 = C17049 * C4654;
    const double C22832 = C17049 * C90579;
    const double C72864 = C17049 * C90567;
    const double C76230 = C17049 * C90753;
    const double C78135 = C17049 * C4653;
    const double C83631 = C17049 * C9074;
    const double C27701 = C27606 * C181;
    const double C29496 = C27606 * C3364;
    const double C31137 = C27606 * C923;
    const double C27709 = C27602 * C181;
    const double C30258 = C27602 * C88309;
    const double C33656 = C27602 * C7402;
    const double C35418 = C27602 * C923;
    const double C27613 = C27601 * C821;
    const double C29495 = C27601 * C90498;
    const double C30257 = C27601 * C90744;
    const double C33655 = C27601 * C7396;
    const double C27698 = C27600 * C181;
    const double C29494 = C27600 * C3364;
    const double C31133 = C27600 * C923;
    const double C27725 = C27719 * C90541;
    const double C33781 = C27719 * C6692;
    const double C35417 = C27719 * C90752;
    const double C27723 = C27717 * C90541;
    const double C29579 = C27717 * C2565;
    const double C31138 = C27717 * C90752;
    const double C33777 = C27717 * C6692;
    const double C27722 = C27716 * C90541;
    const double C29573 = C27716 * C2565;
    const double C31134 = C27716 * C90752;
    const double C33773 = C27716 * C6692;
    const double C30369 = C30275 * C181;
    const double C31045 = C30275 * C3364;
    const double C31143 = C30275 * C923;
    const double C30375 = C30373 * C90541;
    const double C31142 = C30373 * C90752;
    const double C38529 = C30373 * C6692;
    const double C20054 = C1420 * C6696;
    const double C34842 = C1986 * C6696;
    const double C88313 = C90498 - C88311;
    const double C19595 = C14083 * C90780;
    const double C20057 = C14617 * C90780;
    const double C20051 = C14615 * C90780;
    const double C34605 = C27601 * C90780;
    const double C34845 = C27913 * C90780;
    const double C34839 = C27911 * C90780;
    const double C47335 = C1419 * C90780;
    const double C66447 = C1985 * C90780;
    const double C92 = (C90744 - C90769) / C88295 - (C90780 * C90494) / C88290;
    const double C20053 = C1419 * C90771;
    const double C34841 = C1985 * C90771;
    const double C93 =
        (2 * C90503 + C90780) / C88295 - (C90771 * C90494) / C88290;
    const double C94 = C90771 / C88295 - C90506 / C88299;
    const double C88389 = C90541 - C88386;
    const double C37841 = C16857 * C7479;
    const double C7710 = C414 * C90781;
    const double C7704 = C413 * C90781;
    const double C7944 = C661 * C90781;
    const double C7938 = C660 * C90781;
    const double C37844 = C27717 * C90781;
    const double C37838 = C27716 * C90781;
    const double C38072 = C27998 * C90781;
    const double C48337 = C1518 * C90781;
    const double C86673 = C16953 * C90781;
    const double C3360 =
        (C90752 - C90772) / C88295 - (C90781 * C90551) / C88290;
    const double C7946 = C1520 * C90774;
    const double C7940 = C1518 * C90774;
    const double C37840 = C16953 * C90774;
    const double C3361 =
        (2 * C90555 + C90781) / C88295 - (C90774 * C90551) / C88290;
    const double C3362 = C90774 / C88295 - C90558 / C88299;
    const double C2933 = C339 * C2660;
    const double C2926 = C337 * C2660;
    const double C3211 = C586 * C2660;
    const double C3204 = C584 * C2660;
    const double C29578 = C27606 * C2660;
    const double C29572 = C27600 * C2660;
    const double C29850 = C27912 * C2660;
    const double C29842 = C27910 * C2660;
    const double C42557 = C1418 * C2660;
    const double C58685 = C1984 * C2660;
    const double C76125 = C16859 * C2660;
    const double C88434 = C90567 - C88431;
    const double C11073 = C494 * C90782;
    const double C11067 = C493 * C90782;
    const double C11307 = C739 * C90782;
    const double C11301 = C738 * C90782;
    const double C25919 = C14291 * C90782;
    const double C25913 = C14290 * C90782;
    const double C26369 = C14782 * C90782;
    const double C68723 = C2180 * C90782;
    const double C87667 = C17049 * C90782;
    const double C6159 =
        (C90753 - C90775) / C88295 - (C90782 * C90575) / C88290;
    const double C11075 = C2182 * C90777;
    const double C11069 = C2180 * C90777;
    const double C25921 = C17051 * C90777;
    const double C25915 = C17049 * C90777;
    const double C6160 =
        (2 * C90579 + C90782) / C88295 - (C90777 * C90575) / C88290;
    const double C6161 = C90777 / C88295 - C90582 / C88299;
    const double C5107 = C339 * C4828;
    const double C5100 = C337 * C4828;
    const double C5385 = C586 * C4828;
    const double C5378 = C584 * C4828;
    const double C18535 = C14088 * C4828;
    const double C18528 = C14082 * C4828;
    const double C19027 = C14616 * C4828;
    const double C19020 = C14614 * C4828;
    const double C45137 = C1418 * C4828;
    const double C61242 = C1984 * C4828;
    const double C78134 = C16859 * C4828;
    const double C14086 = C14066 + C14067;
    const double C39870 = C39854 + C39855;
    const double C39866 = C39846 + C39847;
    const double C27604 = C27584 + C27585;
    const double C57300 = C57284 + C57285;
    const double C57296 = C57276 + C57277;
    const double C14090 = C14074 + C14075;
    const double C41811 = C41799 + C41800;
    const double C41807 = C41791 + C41792;
    const double C21021 = C21009 + C21010;
    const double C43402 = C43388 + C43389;
    const double C48578 = C48570 + C48571;
    const double C27608 = C27592 + C27593;
    const double C60715 = C60703 + C60704;
    const double C60711 = C60695 + C60696;
    const double C29756 = C29744 + C29745;
    const double C76355 = C76343 + C76344;
    const double C76352 = C76337 + C76338;
    const double C29754 = C29740 + C29741;
    const double C77327 = C77321 + C77322;
    const double C78246 = C78238 + C78239;
    const double C3220 = C3218 * C2567;
    const double C7942 = C3218 * C7400;
    const double C40653 = C3218 * C90555;
    const double C42560 = C3218 * C2566;
    const double C47441 = C3218 * C90555;
    const double C48339 = C3218 * C90774;
    const double C2930 = C2844 * C2662;
    const double C3022 = C2844 * C244;
    const double C7707 = C2844 * C7479;
    const double C3208 = C3122 * C2662;
    const double C3300 = C3122 * C244;
    const double C7941 = C3122 * C7479;
    const double C16049 = C3122 * C88309;
    const double C20749 = C3122 * C7402;
    const double C21864 = C3122 * C1875;
    const double C40652 = C3122 * C924;
    const double C42559 = C3122 * C2661;
    const double C43151 = C3122 * C3364;
    const double C47440 = C3122 * C6772;
    const double C8536 = C8433 * C6772;
    const double C8649 = C8433 * C1876;
    const double C10192 = C8433 * C924;
    const double C10298 = C8433 * C9225;
    const double C34002 = C8433 * C7402;
    const double C37191 = C8433 * C88309;
    const double C56825 = C8433 * C244;
    const double C58687 = C8433 * C2661;
    const double C60103 = C8433 * C3364;
    const double C65638 = C8433 * C1875;
    const double C8874 = C8771 * C6772;
    const double C8987 = C8771 * C1876;
    const double C10502 = C8771 * C924;
    const double C10608 = C8771 * C9225;
    const double C21647 = C8771 * C7402;
    const double C24805 = C8771 * C88309;
    const double C41591 = C8771 * C181;
    const double C44021 = C8771 * C3364;
    const double C45139 = C8771 * C4829;
    const double C51596 = C8771 * C923;
    const double C5012 = C4930 * C181;
    const double C5104 = C4930 * C4830;
    const double C11070 = C4930 * C10842;
    const double C30544 = C4930 * C88309;
    const double C34000 = C4930 * C7402;
    const double C35720 = C4930 * C923;
    const double C57841 = C4930 * C1876;
    const double C61244 = C4930 * C4829;
    const double C61959 = C4930 * C3364;
    const double C66650 = C4930 * C9225;
    const double C5290 = C5208 * C181;
    const double C5382 = C5208 * C4830;
    const double C11304 = C5208 * C10842;
    const double C342 = C331 + C332;
    const double C589 = C578 + C579;
    const double C39367 = C39354 + C39355;
    const double C56067 = C56054 + C56055;
    const double C15643 = C15639 + C15640;
    const double C16151 = C16147 + C16148;
    const double C42811 = C42808 + C42809;
    const double C75853 = C75850 + C75851;
    const double C16954 = C16949 + C16950;
    const double C17475 = C17470 + C17471;
    const double C43517 = C43512 + C43513;
    const double C75201 = C75198 + C75199;
    const double C76810 = C76805 + C76806;
    const double C18450 = C18446 + C18447;
    const double C18943 = C18939 + C18940;
    const double C45359 = C45356 + C45357;
    const double C76808 = C76801 + C76802;
    const double C78671 = C78668 + C78669;
    const double C30458 = C30454 + C30455;
    const double C30733 = C30729 + C30730;
    const double C62673 = C62670 + C62671;
    const double C79197 = C79194 + C79195;
    const double C14085 = C14064 + C14065;
    const double C39869 = C39852 + C39853;
    const double C39865 = C39844 + C39845;
    const double C27603 = C27582 + C27583;
    const double C57299 = C57282 + C57283;
    const double C57295 = C57274 + C57275;
    const double C14089 = C14072 + C14073;
    const double C41810 = C41797 + C41798;
    const double C16858 = C16848 + C16849;
    const double C43401 = C43386 + C43387;
    const double C27607 = C27590 + C27591;
    const double C60714 = C60701 + C60702;
    const double C415 = C407 + C408;
    const double C39450 = C39442 + C39443;
    const double C1216 = C1204 + C1205;
    const double C39447 = C39436 + C39437;
    const double C40335 = C40328 + C40329;
    const double C2078 = C2070 + C2071;
    const double C41281 = C41273 + C41274;
    const double C29858 = C29845 + C29846;
    const double C73997 = C73994 + C73995;
    const double C76466 = C76459 + C76460;
    const double C27999 = C27996 + C27997;
    const double C77432 = C77429 + C77430;
    const double C740 = C732 + C733;
    const double C56234 = C56226 + C56227;
    const double C1616 = C1609 + C1610;
    const double C57167 = C57160 + C57161;
    const double C2481 = C2469 + C2470;
    const double C56231 = C56220 + C56221;
    const double C58186 = C58179 + C58180;
    const double C14783 = C14780 + C14781;
    const double C75305 = C75302 + C75303;
    const double C17568 = C17556 + C17557;
    const double C73483 = C73480 + C73481;
    const double C76918 = C76911 + C76912;
    const double C18544 = C18542 * C4655;
    const double C25917 = C18542 * C10691;
    const double C76232 = C18542 * C90579;
    const double C78137 = C18542 * C4654;
    const double C83633 = C18542 * C90579;
    const double C87669 = C18542 * C90777;
    const double C18366 = C18362 * C3364;
    const double C18532 = C18362 * C4830;
    const double C25916 = C18362 * C10842;
    const double C29580 = C18362 * C2661;
    const double C31139 = C18362 * C924;
    const double C33778 = C18362 * C6772;
    const double C76231 = C18362 * C1876;
    const double C77120 = C18362 * C181;
    const double C78034 = C18362 * C923;
    const double C78136 = C18362 * C4829;
    const double C83632 = C18362 * C9225;
    const double C18860 = C18856 * C3364;
    const double C19024 = C18856 * C4830;
    const double C26372 = C18856 * C10842;
    const double C421 = C404 + C418;
    const double C501 = C484 + C498;
    const double C1217 = C1206 + C1207;
    const double C2181 = C2170 + C2171;
    const double C668 = C651 + C665;
    const double C746 = C729 + C743;
    const double C1519 = C1508 + C1509;
    const double C2482 = C2471 + C2472;
    const double C88604 = C88601 + C88587;
    const double C33663 = C90485 * C5476;
    const double C45247 = C39126 * C5476;
    const double C15551 = C15542 + C15543;
    const double C42737 = C42730 + C42731;
    const double C21023 = C21015 + C21016;
    const double C43405 = C43394 + C43395;
    const double C30273 = C30264 + C30265;
    const double C62527 = C62520 + C62521;
    const double C88646 = C88638 - C88620;
    const double C89005 = C89004 / C88268;
    const double C31055 = C31052 * C3364;
    const double C31141 = C31052 * C924;
    const double C38528 = C31052 * C6772;
    const double C78138 = C31052 * C4830;
    const double C78908 = C31052 * C181;
    const double C87670 = C31052 * C10842;
    const double C89064 = C89063 / C88268;
    const double C16309 = C16303 + C16304;
    const double C16860 = C16852 + C16853;
    const double C18364 = C18358 + C18359;
    const double C31776 = C31771 + C31772;
    const double C88603 = C88600 + C88584;
    const double C88629 = -C88617;
    const double C33666 = C13579 * C5473;
    const double C34010 = C307 * C5473;
    const double C44616 = C39330 * C5473;
    const double C44932 = C554 * C5473;
    const double C45250 = C39130 * C5473;
    const double C65774 = C56030 * C5473;
    const double C78563 = C55626 * C19414;
    const double C89533 = C89529 / C88268;
    const double C76350 = C39128 * C17133;
    const double C89991 = C89987 / C88268;
    const double C16645 = C16640 + C16641;
    const double C29759 = C29750 + C29751;
    const double C78249 = C78244 + C78245;
    const double C14081 = C90485 * C2584;
    const double C41806 = C39126 * C2584;
    const double C27599 = C90485 * C4670;
    const double C60710 = C39126 * C4670;
    const double C21014 = C90485 * C3910;
    const double C43385 = C39126 * C3910;
    const double C48575 = C39125 * C3910;
    const double C18357 = C90485 * C5480;
    const double C45249 = C39125 * C5480;
    const double C14087 = C14068 + C14069;
    const double C39872 = C39858 + C39859;
    const double C39868 = C39850 + C39851;
    const double C27605 = C27586 + C27587;
    const double C57302 = C57288 + C57289;
    const double C57298 = C57280 + C57281;
    const double C14091 = C14076 + C14077;
    const double C41813 = C41803 + C41804;
    const double C41809 = C41795 + C41796;
    const double C15552 = C15544 + C15545;
    const double C42738 = C42732 + C42733;
    const double C16856 = C16844 + C16845;
    const double C43406 = C43396 + C43397;
    const double C27609 = C27594 + C27595;
    const double C60717 = C60707 + C60708;
    const double C60713 = C60699 + C60700;
    const double C30274 = C30266 + C30267;
    const double C62528 = C62522 + C62523;
    const double C88661 = C88658 + C88636;
    const double C15529 = (3 * (C88565 + C88595 * C88845) +
                           C88673 * (2 * C89298 + C88673 * C89395)) /
                          C88268;
    const double C17655 = (C88565 + C88595 * C88845 + C89395 * C88967) / C88268;
    const double C21005 = (C88731 * (2 * C89298 + C88673 * C89395)) / C88268;
    const double C30251 = (3 * (C88565 + C88595 * C88967) +
                           C88731 * (2 * C89801 + C88731 * C89805)) /
                          C88268;
    const double C89581 = C89577 + C89564;
    const double C90056 = C90052 + C90044;
    const double C3543 = (2 * (C88673 * C88812 + C88585 * ae) +
                          C88673 * (C88812 + C88673 * C89178 + C89175 * ae) +
                          (C88585 + C88634 * C88845) * ae) /
                         C88268;
    const double C4164 =
        (C88731 * (C88812 + C88673 * C89178 + C89175 * ae)) / C88268;
    const double C5715 =
        (C88673 * C88812 + C88585 * ae + C89178 * C88967) / C88268;
    const double C6503 = (2 * (C88731 * C88913 + C88585 * ae) +
                          C88731 * (C88913 + C88731 * C89369 + C89366 * ae) +
                          (C88585 + C88634 * C88967) * ae) /
                         C88268;
    const double C1097 = (C88673 * (3 * C88812 + C88531 * C88838) +
                          (3 * C88585 + C88531 * C88650) * ae) /
                         C88268;
    const double C2267 = (C88731 * (3 * C88913 + C88531 * C88939) +
                          (3 * C88585 + C88531 * C88650) * ae) /
                         C88268;
    const double C2830 =
        (2 * C88802 + C88531 * C88812 +
         C88673 * (C88673 * C88838 + C88650 * ae) + C88673 * C88650 * ae) /
        C88268;
    const double C5194 =
        (2 * C88903 + C88531 * C88913 +
         C88731 * (C88731 * C88939 + C88650 * ae) + C88731 * C88650 * ae) /
        C88268;
    const double C8422 = (C88731 * (C88673 * C88838 + C88650 * ae)) / C88268;
    const double C8760 =
        (C88731 * C88673 * C88939 + C88673 * C88650 * ae) / C88268;
    const double C112 = 4 * (2 * C88554 + C88531 * C88585) +
                        C88531 * (3 * C88585 + C88531 * C88650);
    const double C833 = C88673 * (3 * C88585 + C88531 * C88650);
    const double C1701 = C88731 * (3 * C88585 + C88531 * C88650);
    const double C2573 = 2 * C88554 + C88531 * C88585 + C88650 * C88845;
    const double C4659 = 2 * C88554 + C88531 * C88585 + C88650 * C88967;
    const double C8120 = C88731 * C88673 * C88650;
    const double C3431 =
        (-2 * (C88673 * C88697 + C88585 * ce)) / C88290 -
        (C88673 * (C88673 * C89177 + C88697 + C89175 * ce)) / C88290 -
        ((C88585 + C88634 * C88845) * ce) / C88290;
    const double C3992 =
        -(C88731 * (C88673 * C89177 + C88697 + C89175 * ce)) / C88290;
    const double C5555 =
        -(C89177 * C88967 + C88673 * C88697 + C88585 * ce) / C88290;
    const double C6285 =
        (-2 * (C88731 * C88755 + C88585 * ce)) / C88290 -
        (C88731 * (C88731 * C89368 + C88755 + C89366 * ce)) / C88290 -
        ((C88585 + C88634 * C88967) * ce) / C88290;
    const double C89456 = C88817 + C89454;
    const double C89889 = C88918 + C89887;
    const double C89455 = C89453 + C88702;
    const double C89888 = C89886 + C88760;
    const double C34329 = (2 * (C88731 * C89324 + C89169 * ae) +
                           C88731 * (C89324 + C88731 * C90086 + C90081 * ae) +
                           (C89169 + C89439 * C88967) * ae) /
                          C88268;
    const double C33888 =
        (-2 * (C88731 * C89323 + C89169 * ce)) / C88290 -
        (C88731 * (C88731 * C90085 + C89323 + C90081 * ce)) / C88290 -
        ((C89169 + C89439 * C88967) * ce) / C88290;
    const double C88660 = C88657 + C88633;
    const double C15530 =
        (-3 * (C88594 * C88845 + C88564)) / C88290 +
        C88673 * ((-2 * C89313) / C88290 - (C88673 * C89411) / C88290);
    const double C17656 =
        -(C89411 * C88967 + C88594 * C88845 + C88564) / C88290;
    const double C21006 =
        C88731 * ((-2 * C89313) / C88290 - (C88673 * C89411) / C88290);
    const double C30252 =
        (-3 * (C88594 * C88967 + C88564)) / C88290 +
        C88731 * ((-2 * C89828) / C88290 - (C88731 * C89832) / C88290);
    const double C89580 = C89574 + C89561;
    const double C31130 =
        (-3 * (C89421 * C88967 + C89164)) / C88290 +
        C88731 * ((-2 * C89925) / C88290 - (C88731 * C89930) / C88290);
    const double C90055 = C90051 + C90040;
    const double C89003 = C89000 / C88532;
    const double C31041 =
        3 * ((-(C88997 * C88967) / C88290) / C88268 - C88993 / C88532) +
        C88731 *
            ((-2 * C89371) / C88532 +
             C88731 *
                 ((-(C88673 *
                     (C88612 * C88613 + C88539 * bs[7] * std::pow(C88535, 7)) *
                     C88540 * C88967) /
                   C88290) /
                      C88268 -
                  C88997 / C88532));
    const double C33652 =
        (((-2 * C89914) / C88290 - (C88731 * C89920) / C88290) * ae) / C88268 -
        ((2 * C89895 + C88731 * C89902) * ce) / C88532 +
        C88531 *
            ((-2 * C89371) / C88532 +
             C88731 *
                 ((-(C88673 *
                     (C88612 * C88613 + C88539 * bs[7] * std::pow(C88535, 7)) *
                     C88540 * C88967) /
                   C88290) /
                      C88268 -
                  C88997 / C88532));
    const double C48577 = C39126 * C3911;
    const double C72659 = C90485 * C3911;
    const double C33667 = C90485 * C5479;
    const double C45251 = C39126 * C5479;
    const double C31049 = C90485 * C19094;
    const double C89062 = C89059 / C88532;
    const double C89113 = -C89112;
    const double C89254 = -C89253;
    const double C88864 = -C88863;
    const double C89449 = C89443 / C88532;
    const double C30639 =
        3 * ((-(C89437 * C88967) / C88290) / C88268 - C89167 / C88532) +
        C88731 *
            ((-2 * C89776) / C88532 +
             C88731 *
                 ((-(C88531 *
                     (C88612 * C88613 + C88845 * bs[7] * std::pow(C88535, 7)) *
                     C88540 * C88967) /
                   C88290) /
                      C88268 -
                  C89437 / C88532));
    const double C34113 =
        (((-2 * C89843) / C88290 - (C88731 * C89847) / C88290) * ae) / C88268 -
        ((2 * C89815 + C88731 * C89817) * ce) / C88532 +
        C88673 *
            ((-2 * C89776) / C88532 +
             C88731 *
                 ((-(C88531 *
                     (C88612 * C88613 + C88845 * bs[7] * std::pow(C88535, 7)) *
                     C88540 * C88967) /
                   C88290) /
                      C88268 -
                  C89437 / C88532));
    const double C89670 = C89667 / C88532;
    const double C89729 = -C89728;
    const double C88986 = -C88985;
    const double C89879 = C89874 / C88532;
    const double C34528 =
        2 * ((-(C89324 * ce) / C88290) / C88268 - (ae * C89323) / C88532 -
             (C88731 * C90079) / C88532) -
        (ae * (C88731 * C90085 + C89323 + C90081 * ce)) / C88532 -
        ((C89324 + C88731 * C90086 + C90081 * ae) * ce) / C88532 +
        C88731 *
            ((-(ae * C90085) / C88290) / C88268 - C90079 / C88532 -
             (C90086 * ce) / C88532 +
             C88731 *
                 ((-(C90082 * ce) / C88290) / C88268 - (ae * C90080) / C88532 -
                  (C88731 * C88673 * C88531 *
                   (C88612 * C88613 + C88967 * bs[7] * std::pow(C88535, 7)) *
                   C88540) /
                      C88532));
    const double C89641 = -C89640;
    const double C89945 = C89939 / C88532;
    const double C19411 = (2 * (C88731 * C89484 + C89423 * ae) +
                           C88731 * (C89484 + C88731 * C89769 + C89766 * ae) +
                           (C89423 + C89562 * C88967) * ae) /
                          C88268;
    const double C17362 = (C88731 * (3 * C89484 + C88673 * C89632) +
                           (3 * C89423 + C88673 * C89576) * ae) /
                          C88268;
    const double C18845 =
        (2 * C89321 + C88673 * C89484 +
         C88731 * (C88731 * C89632 + C89576 * ae) + C88731 * C89576 * ae) /
        C88268;
    const double C16292 = 4 * (2 * C89162 + C88673 * C89423) +
                          C88673 * (3 * C89423 + C88673 * C89576);
    const double C16836 = C88731 * (3 * C89423 + C88673 * C89576);
    const double C18349 = 2 * C89162 + C88673 * C89423 + C89576 * C88967;
    const double C19200 =
        (-2 * (C88731 * C89463 + C89423 * ce)) / C88290 -
        (C88731 * (C88731 * C89768 + C89463 + C89766 * ce)) / C88290 -
        ((C89423 + C89562 * C88967) * ce) / C88290;
    const double C89952 = C89620 + C89950;
    const double C89951 = C89949 + C89593;
    const double C31765 = 4 * (2 * C89354 + C88731 * C89862) +
                          C88731 * (3 * C89862 + C88731 * C90042);
    const double C663 = C658 + C659;
    const double C88719 = C88716 / C88268;
    const double C61461 = C61458 + C61459;
    const double C21761 = C90634 * C4496;
    const double C59008 = C55626 * C4496;
    const double C45036 = C90634 * C6030;
    const double C65915 = C55626 * C6030;
    const double C15641 = C13579 * C3432;
    const double C16149 = C554 * C3432;
    const double C42245 = C39330 * C3432;
    const double C42806 = C39130 * C3432;
    const double C21131 = C13579 * C3993;
    const double C21760 = C554 * C3993;
    const double C43510 = C39130 * C3993;
    const double C49128 = C39330 * C3993;
    const double C58690 = C307 * C3993;
    const double C59007 = C56030 * C3993;
    const double C33787 = C13579 * C5556;
    const double C34126 = C307 * C5556;
    const double C44724 = C39330 * C5556;
    const double C45035 = C554 * C5556;
    const double C45354 = C39130 * C5556;
    const double C65914 = C56030 * C5556;
    const double C89433 = C89430 + C89422;
    const double C89565 = -C89555;
    const double C90010 = C90006 / C88268;
    const double C31837 = C31834 + C31835;
    const double C496 = C491 + C492;
    const double C88777 = C88774 / C88268;
    const double C42352 = C42349 + C42350;
    const double C30456 = C13579 * C6286;
    const double C30731 = C307 * C6286;
    const double C61562 = C56030 * C6286;
    const double C62668 = C39130 * C6286;
    const double C16424 = C16422 + C16423;
    const double C89607 = C89604 / C88268;
    const double C31228 = C13579 * C19199;
    const double C31487 = C307 * C19199;
    const double C78772 = C56030 * C19199;
    const double C79192 = C39330 * C19199;
    const double C90034 = -C90021;
    const double C89866 = C89860 + C89861;
    const double C343 = C333 + C334;
    const double C1120 = C1112 + C1113;
    const double C39364 = C39348 + C39349;
    const double C1988 = C1980 + C1981;
    const double C2846 = C2840 + C2841;
    const double C40224 = C40212 + C40213;
    const double C8435 = C8429 + C8430;
    const double C41171 = C41159 + C41160;
    const double C4932 = C4926 + C4927;
    const double C89573 = C89566 - C88709;
    const double C88833 = C88830 / C88268;
    const double C49267 = C49264 + C49265;
    const double C58795 = C58793 + C58794;
    const double C34231 = C34229 + C34230;
    const double C44831 = C44828 + C44829;
    const double C42134 = C39128 * C3544;
    const double C48985 = C39128 * C4165;
    const double C58582 = C90623 * C4165;
    const double C34007 = C90623 * C5716;
    const double C44613 = C39128 * C5716;
    const double C30560 = C30555 * C88309;
    const double C30643 = C30555 * C181;
    const double C36419 = C30555 * C7402;
    const double C61246 = C30555 * C4830;
    const double C62740 = C30555 * C3364;
    const double C68726 = C30555 * C10842;
    const double C89434 = C89431 + C89425;
    const double C31315 = C31310 + C31311;
    const double C79051 = C79044 + C79045;
    const double C89672 = C89671 / C88268;
    const double C31951 = C31947 + C31948;
    const double C29857 = C90623 * C17967;
    const double C78351 = C39128 * C17967;
    const double C8540 = C90623 * C4249;
    const double C41276 = C39128 * C4249;
    const double C49127 = C39127 * C4249;
    const double C49129 = C39128 * C4250;
    const double C58691 = C90623 * C4250;
    const double C5014 = C90623 * C5008;
    const double C44723 = C39127 * C5008;
    const double C34127 = C90623 * C5796;
    const double C44725 = C39128 * C5796;
    const double C30645 = C90623 * C6398;
    const double C416 = C411 + C412;
    const double C1218 = C1209 + C1210;
    const double C39448 = C39438 + C39439;
    const double C40336 = C40330 + C40331;
    const double C2079 = C2073 + C2074;
    const double C41283 = C41277 + C41278;
    const double C2940 = C2931 + C2932;
    const double C40334 = C40326 + C40327;
    const double C42247 = C42243 + C42244;
    const double C29859 = C29848 + C29849;
    const double C76467 = C76461 + C76462;
    const double C76465 = C76457 + C76458;
    const double C29860 = C29853 + C29854;
    const double C77431 = C77427 + C77428;
    const double C78352 = C78348 + C78349;
    const double C30650 = C30646 + C30647;
    const double C79124 = C79120 + C79121;
    const double C590 = C580 + C581;
    const double C1422 = C1414 + C1415;
    const double C2290 = C2282 + C2283;
    const double C56064 = C56048 + C56049;
    const double C3124 = C3118 + C3119;
    const double C8773 = C8767 + C8768;
    const double C56946 = C56934 + C56935;
    const double C5210 = C5204 + C5205;
    const double C57965 = C57953 + C57954;
    const double C90050 = C90046 - C88767;
    const double C88934 = C88931 / C88268;
    const double C44934 = C44930 + C44931;
    const double C65778 = C65770 + C65771;
    const double C61347 = C55626 * C6504;
    const double C16065 = C16060 * C88309;
    const double C16233 = C16060 * C244;
    const double C20751 = C16060 * C7402;
    const double C42561 = C16060 * C2662;
    const double C43152 = C16060 * C3364;
    const double C48340 = C16060 * C7479;
    const double C21659 = C21657 * C7402;
    const double C21862 = C21657 * C1876;
    const double C23441 = C21657 * C9225;
    const double C24809 = C21657 * C88309;
    const double C44022 = C21657 * C3364;
    const double C49532 = C21657 * C6772;
    const double C51594 = C21657 * C924;
    const double C16644 = C16638 + C16639;
    const double C17382 = C17374 + C17375;
    const double C75779 = C75772 + C75773;
    const double C18858 = C18852 + C18853;
    const double C76698 = C76687 + C76688;
    const double C89633 = C89630 / C88268;
    const double C78559 = C55626 * C19412;
    const double C89871 = C89869 + C89864;
    const double C16758 = C90634 * C16226;
    const double C16235 = C90634 * C3815;
    const double C8991 = C90634 * C4574;
    const double C57159 = C55626 * C4574;
    const double C66049 = C55625 * C4574;
    const double C21866 = C90634 * C4577;
    const double C59112 = C55626 * C4577;
    const double C5384 = C90634 * C5374;
    const double C58178 = C55626 * C5374;
    const double C61561 = C55625 * C5374;
    const double C45143 = C90634 * C6107;
    const double C66051 = C55626 * C6107;
    const double C741 = C736 + C737;
    const double C1615 = C1606 + C1607;
    const double C57168 = C57162 + C57163;
    const double C2483 = C2474 + C2475;
    const double C56232 = C56222 + C56223;
    const double C58187 = C58181 + C58182;
    const double C3306 = C3301 + C3302;
    const double C59113 = C59109 + C59110;
    const double C16238 = C16230 + C16231;
    const double C75924 = C75920 + C75921;
    const double C17570 = C17561 + C17562;
    const double C75304 = C75300 + C75301;
    const double C76919 = C76913 + C76914;
    const double C19034 = C19025 + C19026;
    const double C76917 = C76909 + C76910;
    const double C78774 = C78770 + C78771;
    const double C88602 = C88592 - C88599;
    const double C89432 = C89429 - C89420;
    const double C89870 = C89868 - C89859;
    const double C21007 =
        (C88731 * C89540 * ae) / C88268 - (C88731 * C89514 * ce) / C88532 +
        C88531 * C88731 *
            ((-2 * C88997) / C88532 +
             C88673 *
                 ((-((C88612 * C88613 + C88539 * bs[7] * std::pow(C88535, 7)) *
                     C88540 * C88845) /
                   C88290) /
                      C88268 -
                  C88647 / C88532));
    const double C16293 =
        4 * ((-2 * C89315) / C88290 - (C88673 * C89402) / C88290) +
        C88673 * ((-3 * C89402) / C88290 + C88673 * C89540);
    const double C16839 = C88731 * ((-3 * C89402) / C88290 + C88673 * C89540);
    const double C18350 =
        (-2 * C89315) / C88290 - (C88673 * C89402) / C88290 + C89540 * C88967;
    const double C31766 =
        4 * ((-2 * C89819) / C88290 - (C88731 * C89823) / C88290) +
        C88731 * ((-3 * C89823) / C88290 + C88731 * C89998);
    const double C8534 =
        (C88731 * C88726 * ae) / C88268 - (C88731 * C88838 * ce) / C88532 +
        C88673 * C88731 *
            ((-2 * C88531 * C88861) / C88532 +
             C88531 *
                 ((-((C88612 * C88613 + C88845 * bs[7] * std::pow(C88535, 7)) *
                     C88540 * C88539) /
                   C88290) /
                      C88268 -
                  C88861 / C88532));
    const double C8872 =
        ((C88673 * C88726 - (C88650 * ce) / C88290) * ae) / C88268 +
        C88731 *
            (C88673 *
                 ((-2 * C88531 * C88958) / C88532 +
                  C88531 * ((-(std::pow(C88535, 7) * bs[7] * C88948 * C88539) /
                             C88290) /
                                C88268 -
                            C88958 / C88532)) -
             (C88939 * ce) / C88532);
    const double C187 =
        4 * ((-2 * C88687) / C88290 - (C88531 * C88697) / C88290) +
        C88531 * ((-3 * C88697) / C88290 + C88531 * C88726);
    const double C929 = C88673 * ((-3 * C88697) / C88290 + C88531 * C88726) -
                        ((3 * C88585 + C88531 * C88650) * ce) / C88290;
    const double C1795 = C88731 * ((-3 * C88697) / C88290 + C88531 * C88726);
    const double C2666 = (-2 * C88687) / C88290 - (C88531 * C88697) / C88290 +
                         C88673 * (C88673 * C88726 - (C88650 * ce) / C88290) -
                         (C88673 * C88650 * ce) / C88290;
    const double C4749 =
        (-2 * C88687) / C88290 - (C88531 * C88697) / C88290 + C88726 * C88967;
    const double C8222 = C88731 * (C88673 * C88726 - (C88650 * ce) / C88290);
    const double C31829 =
        4 * ((-2 * C89834) / C88290 - (C88731 * C89838) / C88290) +
        C88731 * ((-3 * C89838) / C88290 + C88731 * C90017);
    const double C8647 =
        ((C88731 * C88784 - (C88650 * ce) / C88290) * ae) / C88268 +
        C88673 *
            (C88731 *
                 ((-2 * C88531 * C88882) / C88532 +
                  C88531 * ((-(std::pow(C88535, 7) * bs[7] * C88872 * C88539) /
                             C88290) /
                                C88268 -
                            C88882 / C88532)) -
             (C88838 * ce) / C88532);
    const double C8985 =
        (C88673 * C88784 * ae) / C88268 - (C88673 * C88939 * ce) / C88532 +
        C88731 * C88673 *
            ((-2 * C88531 * C88983) / C88532 +
             C88531 *
                 ((-((C88612 * C88613 + C88967 * bs[7] * std::pow(C88535, 7)) *
                     C88540 * C88539) /
                   C88290) /
                      C88268 -
                  C88983 / C88532));
    const double C250 =
        4 * ((-2 * C88745) / C88290 - (C88531 * C88755) / C88290) +
        C88531 * ((-3 * C88755) / C88290 + C88531 * C88784);
    const double C1013 = C88673 * ((-3 * C88755) / C88290 + C88531 * C88784);
    const double C1881 = C88731 * ((-3 * C88755) / C88290 + C88531 * C88784) -
                         ((3 * C88585 + C88531 * C88650) * ce) / C88290;
    const double C2748 =
        (-2 * C88745) / C88290 - (C88531 * C88755) / C88290 + C88784 * C88845;
    const double C4834 = (-2 * C88745) / C88290 - (C88531 * C88755) / C88290 +
                         C88731 * (C88731 * C88784 - (C88650 * ce) / C88290) -
                         (C88731 * C88650 * ce) / C88290;
    const double C8322 =
        C88731 * C88673 * C88784 - (C88673 * C88650 * ce) / C88290;
    const double C16417 =
        4 * ((-2 * C89320) / C88290 - (C88673 * C89463) / C88290) +
        C88673 * ((-3 * C89463) / C88290 + C88673 * C89609);
    const double C17030 = C88731 * ((-3 * C89463) / C88290 + C88673 * C89609) -
                          ((3 * C89423 + C88673 * C89576) * ce) / C88290;
    const double C18525 = (-2 * C89320) / C88290 - (C88673 * C89463) / C88290 +
                          C88731 * (C88731 * C89609 - (C89576 * ce) / C88290) -
                          (C88731 * C89576 * ce) / C88290;
    const double C88700 = C88699 - C88692;
    const double C89390 = C89389 - C89384;
    const double C88725 = C88723 - C88709;
    const double C89515 = C89513 - C89506;
    const double C89961 = C89960 - C88703;
    const double C31307 = C29734 + C29735;
    const double C88815 = C88814 - C88807;
    const double C89405 = C89404 - C88573;
    const double C31946 = C31308 + C31309;
    const double C88839 = C88837 - C88824;
    const double C89539 = C89537 - C88620;
    const double C89657 = C89656 / C88268;
    const double C89725 = C89724 - C88818;
    const double C88758 = C88757 - C88750;
    const double C89799 = C89798 - C89384;
    const double C88783 = C88781 - C88767;
    const double C89523 = C89522 - C88761;
    const double C89904 = C89903 / C88268;
    const double C89973 = C89971 - C89506;
    const double C502 = C499 + C489;
    const double C8661 = C8659 * C90579;
    const double C10301 = C8659 * C90579;
    const double C56824 = C8659 * C90567;
    const double C65637 = C8659 * C90753;
    const double C67737 = C8659 * C9074;
    const double C5116 = C5114 * C4655;
    const double C11071 = C5114 * C10691;
    const double C57842 = C5114 * C90579;
    const double C61245 = C5114 * C4654;
    const double C66651 = C5114 * C90579;
    const double C68725 = C5114 * C90777;
    const double C89466 = C89465 - C88750;
    const double C89680 = C89679 - C88807;
    const double C1320 = C1317 + C1307;
    const double C88887 = C88886 - C88881;
    const double C89476 = C89475 / C88268;
    const double C89782 = C89781 / C88268;
    const double C89608 = C89605 - C88767;
    const double C89690 = C89688 - C88824;
    const double C16642 = C16634 + C16635;
    const double C88916 = C88915 - C88908;
    const double C89826 = C89825 - C88573;
    const double C16643 = C16636 + C16637;
    const double C17390 = C17384 + C17385;
    const double C88940 = C88938 - C88925;
    const double C89618 = C89617 - C88919;
    const double C89922 = C89921 / C88268;
    const double C89997 = C89995 - C88620;
    const double C669 = C666 + C656;
    const double C8886 = C8884 * C90555;
    const double C10505 = C8884 * C90555;
    const double C41592 = C8884 * C90541;
    const double C49533 = C8884 * C6692;
    const double C51595 = C8884 * C90752;
    const double C5298 = C5296 * C90541;
    const double C89487 = C89486 - C88908;
    const double C89841 = C89840 - C88692;
    const double C2386 = C2384 + C2374;
    const double C88963 = C88962 - C88957;
    const double C89497 = C89496 / C88268;
    const double C89849 = C89848 / C88268;
    const double C89634 = C89631 - C88925;
    const double C90016 = C90014 - C88709;
    const double C15723 = C14275 + C14297;
    const double C17050 = C17039 + C17040;
    const double C16420 = C15733 + C15726;
    const double C30362 = C27701 + C27723;
    const double C31146 = C31137 + C31138;
    const double C31832 = C30375 + C30369;
    const double C88314 = C88313 * ce;
    const double C826 =
        ((-C88289 / C88290) / C88295 - (C88302 * de) / C88290) / C88295 -
        ((C88288 * ((-C88291 / C88290) / C88295 - (C88313 * de) / C88290) +
          C7396) *
         de) /
            C88290 +
        (-C88304 / C88290) / C88295 - (0 * de) / C88290;
    const double C827 =
        ((-C88291 / C88290) / C88295 - (C88313 * de) / C88290) / C88295 -
        ((C88288 * ((-C88304 / C88290) / C88295 - (0 * de) / C88290) + C90503) *
         de) /
            C88290;
    const double C7401 = (-C88291 / C88290) / C88295 - (C88313 * de) / C88290;
    const double C88392 = C88389 * ce;
    const double C6771 = (-C88362 / C88290) / C88295 - (C88389 * de) / C88290;
    const double C88437 = C88434 * ce;
    const double C9224 = (-C88409 / C88290) / C88295 - (C88434 * de) / C88290;
    const double C14098 = C14086 * C828;
    const double C14284 = C14086 * C244;
    const double C19598 = C14086 * C6696;
    const double C27616 = C27604 * C828;
    const double C27710 = C27604 * C181;
    const double C34608 = C27604 * C6696;
    const double C14281 = C14090 * C244;
    const double C15540 = C14090 * C88309;
    const double C20290 = C14090 * C7402;
    const double C21242 = C14090 * C1875;
    const double C21025 = C21021 * C7402;
    const double C21235 = C21021 * C1876;
    const double C22837 = C21021 * C9225;
    const double C24209 = C21021 * C88309;
    const double C33780 = C21021 * C6772;
    const double C35416 = C21021 * C924;
    const double C72865 = C21021 * C244;
    const double C73683 = C21021 * C181;
    const double C81572 = C21021 * C1875;
    const double C83498 = C21021 * C923;
    const double C27706 = C27608 * C181;
    const double C30262 = C27608 * C88309;
    const double C33660 = C27608 * C7402;
    const double C35422 = C27608 * C923;
    const double C29764 = C29756 * C3364;
    const double C29847 = C29756 * C2662;
    const double C38075 = C29756 * C7479;
    const double C29762 = C29754 * C3364;
    const double C29852 = C29754 * C2661;
    const double C31400 = C29754 * C924;
    const double C34121 = C29754 * C6772;
    const double C29577 = C16954 * C2567;
    const double C37842 = C16954 * C7400;
    const double C76128 = C16954 * C2566;
    const double C78031 = C16954 * C90555;
    const double C81435 = C16954 * C90555;
    const double C86675 = C16954 * C90774;
    const double C29581 = C18450 * C2566;
    const double C31140 = C18450 * C90555;
    const double C33779 = C18450 * C90555;
    const double C37846 = C18450 * C90774;
    const double C77119 = C18450 * C90541;
    const double C78033 = C18450 * C90752;
    const double C87565 = C18450 * C6692;
    const double C14097 = C14085 * C822;
    const double C15537 = C14085 * C90503;
    const double C19597 = C14085 * C90771;
    const double C20287 = C14085 * C90503;
    const double C27615 = C27603 * C822;
    const double C30259 = C27603 * C90503;
    const double C33657 = C27603 * C90503;
    const double C34607 = C27603 * C90771;
    const double C14101 = C14089 * C821;
    const double C15539 = C14089 * C90744;
    const double C16300 = C14089 * C90498;
    const double C19601 = C14089 * C90780;
    const double C20289 = C14089 * C7396;
    const double C16864 = C16858 * C90498;
    const double C21011 = C16858 * C7396;
    const double C24210 = C16858 * C90744;
    const double C72653 = C16858 * C821;
    const double C79495 = C16858 * C90780;
    const double C27619 = C27607 * C821;
    const double C29497 = C27607 * C90498;
    const double C30261 = C27607 * C90744;
    const double C33659 = C27607 * C7396;
    const double C34611 = C27607 * C90780;
    const double C419 = C415 * C90541;
    const double C1212 = C415 * C90752;
    const double C7005 = C415 * C6692;
    const double C1220 = C1216 * C90555;
    const double C2929 = C1216 * C2566;
    const double C6999 = C1216 * C90555;
    const double C7706 = C1216 * C90774;
    const double C2081 = C2078 * C90541;
    const double C8537 = C2078 * C6692;
    const double C10193 = C2078 * C90752;
    const double C58686 = C2078 * C2565;
    const double C64445 = C2078 * C90781;
    const double C29862 = C29858 * C2566;
    const double C31397 = C29858 * C90555;
    const double C34118 = C29858 * C90555;
    const double C38074 = C29858 * C90774;
    const double C28001 = C27999 * C90541;
    const double C29851 = C27999 * C2565;
    const double C31399 = C27999 * C90752;
    const double C34120 = C27999 * C6692;
    const double C38078 = C27999 * C90781;
    const double C744 = C740 * C90567;
    const double C2477 = C740 * C90753;
    const double C9696 = C740 * C9074;
    const double C1619 = C1616 * C90567;
    const double C8988 = C1616 * C90753;
    const double C10609 = C1616 * C9074;
    const double C45138 = C1616 * C4653;
    const double C52617 = C1616 * C90782;
    const double C2485 = C2481 * C90579;
    const double C5381 = C2481 * C4654;
    const double C9690 = C2481 * C90579;
    const double C11303 = C2481 * C90777;
    const double C14785 = C14783 * C90567;
    const double C17559 = C14783 * C90753;
    const double C19028 = C14783 * C4653;
    const double C23438 = C14783 * C9074;
    const double C26375 = C14783 * C90782;
    const double C17572 = C17568 * C90579;
    const double C19023 = C17568 * C4654;
    const double C23436 = C17568 * C90579;
    const double C26371 = C17568 * C90777;
    const double C423 = C421 * C90634;
    const double C503 = C501 * C90634;
    const double C1221 = C1217 - C1208;
    const double C2185 = C2181 - C2172;
    const double C1523 = C1519 - C1510;
    const double C2486 = C2482 - C2473;
    const double C121 = (3 * (C88546 + C88531 * C88565 + C88554 * ae) +
                         C88531 * (2 * C88565 + C88531 * C88604 + C88585 * ae) +
                         (2 * C88554 + C88531 * C88585) * ae) /
                        C88268;
    const double C836 =
        (C88673 * (2 * C88565 + C88531 * C88604 + C88585 * ae)) / C88268;
    const double C1704 =
        (C88731 * (2 * C88565 + C88531 * C88604 + C88585 * ae)) / C88268;
    const double C2576 =
        (C88546 + C88531 * C88565 + C88554 * ae + C88604 * C88845) / C88268;
    const double C3899 = (C88731 * C88673 * C88604) / C88268;
    const double C4662 =
        (C88546 + C88531 * C88565 + C88554 * ae + C88604 * C88967) / C88268;
    const double C33668 = C33662 + C33663;
    const double C45253 = C45246 + C45247;
    const double C15556 = C15551 * C88309;
    const double C15727 = C15551 * C244;
    const double C20292 = C15551 * C7402;
    const double C21027 = C21023 * C7402;
    const double C21240 = C21023 * C1876;
    const double C22841 = C21023 * C9225;
    const double C24213 = C21023 * C88309;
    const double C74692 = C21023 * C244;
    const double C81436 = C21023 * C6772;
    const double C83496 = C21023 * C924;
    const double C30278 = C30273 * C88309;
    const double C30364 = C30273 * C181;
    const double C36189 = C30273 * C7402;
    const double C88659 = C88646 - C88656;
    const double C89006 = C89005 - C89002;
    const double C89504 = C89005 - C88703;
    const double C89065 = C89064 - C89061;
    const double C89963 = C89064 - C88761;
    const double C16311 = C16309 * C3364;
    const double C16421 = C16309 * C244;
    const double C16866 = C16860 * C3364;
    const double C17044 = C16860 * C1876;
    const double C25232 = C16860 * C9225;
    const double C75504 = C16860 * C244;
    const double C76129 = C16860 * C2662;
    const double C86676 = C16860 * C7479;
    const double C18368 = C18364 * C3364;
    const double C18539 = C18364 * C4830;
    const double C25922 = C18364 * C10842;
    const double C29582 = C18364 * C2662;
    const double C37847 = C18364 * C7479;
    const double C76233 = C18364 * C1876;
    const double C78032 = C18364 * C924;
    const double C86776 = C18364 * C9225;
    const double C87564 = C18364 * C6772;
    const double C31778 = C31776 * C3364;
    const double C31833 = C31776 * C181;
    const double C847 =
        2 * ((-(C88673 * C88559 * ce) / C88290) / C88268 -
             (ae * C88673 * C88558) / C88532 - (C88531 * C88993) / C88532) -
        (ae * C88673 * C88603) / C88532 - (C88673 * C88604 * ce) / C88532 +
        C88531 * ((-(ae * C88673 * C88594) / C88290) / C88268 -
                  C88993 / C88532 - (C88673 * C88595 * ce) / C88532 +
                  C88531 * ((-(C88673 * C88586 * ce) / C88290) / C88268 -
                            (ae * C88673 * C88583) / C88532 -
                            (C88531 * C88673 * C88647) / C88532));
    const double C1715 =
        2 * ((-(C88731 * C88559 * ce) / C88290) / C88268 -
             (ae * C88731 * C88558) / C88532 - (C88531 * C89052) / C88532) -
        (ae * C88731 * C88603) / C88532 - (C88731 * C88604 * ce) / C88532 +
        C88531 * ((-(ae * C88731 * C88594) / C88290) / C88268 -
                  C89052 / C88532 - (C88731 * C88595 * ce) / C88532 +
                  C88531 * ((-(C88731 * C88586 * ce) / C88290) / C88268 -
                            (ae * C88731 * C88583) / C88532 -
                            (C88531 * C88731 * C88647) / C88532));
    const double C122 =
        (-3 * (C88531 * C88564 + C88545 + C88554 * ce)) / C88290 +
        C88531 * ((-2 * C88564) / C88290 - (C88531 * C88603) / C88290 -
                  (C88585 * ce) / C88290) -
        ((2 * C88554 + C88531 * C88585) * ce) / C88290;
    const double C841 =
        C88673 * ((-2 * C88564) / C88290 - (C88531 * C88603) / C88290 -
                  (C88585 * ce) / C88290);
    const double C1709 =
        C88731 * ((-2 * C88564) / C88290 - (C88531 * C88603) / C88290 -
                  (C88585 * ce) / C88290);
    const double C2579 =
        -(C88603 * C88845 + C88531 * C88564 + C88545 + C88554 * ce) / C88290;
    const double C3902 = -(C88731 * C88673 * C88603) / C88290;
    const double C4665 =
        -(C88603 * C88967 + C88531 * C88564 + C88545 + C88554 * ce) / C88290;
    const double C88637 = C88629 / C88268;
    const double C78567 = C78562 + C78563;
    const double C89536 = C89533 - C88818;
    const double C76358 = C76349 + C76350;
    const double C89994 = C89991 - C88919;
    const double C16649 = C16645 * C90498;
    const double C29767 = C29759 * C90498;
    const double C21022 = C21013 + C21014;
    const double C43400 = C43384 + C43385;
    const double C48580 = C48574 + C48575;
    const double C18363 = C18356 + C18357;
    const double C45254 = C45248 + C45249;
    const double C14099 = C14087 * C823;
    const double C19599 = C14087 * C6691;
    const double C27617 = C27605 * C823;
    const double C34609 = C27605 * C6691;
    const double C14103 = C14091 * C822;
    const double C15541 = C14091 * C90503;
    const double C19603 = C14091 * C90771;
    const double C20291 = C14091 * C90503;
    const double C15557 = C15552 * C90744;
    const double C16301 = C15552 * C90498;
    const double C20293 = C15552 * C7396;
    const double C16862 = C16856 * C90498;
    const double C21017 = C16856 * C7396;
    const double C24214 = C16856 * C90744;
    const double C27621 = C27609 * C822;
    const double C30263 = C27609 * C90503;
    const double C33661 = C27609 * C90503;
    const double C34613 = C27609 * C90771;
    const double C30279 = C30274 * C90744;
    const double C31044 = C30274 * C90498;
    const double C36190 = C30274 * C7396;
    const double C88664 = C88531 * C88661;
    const double C89296 = C88673 * C88661;
    const double C3371 =
        (2 * C88673 * C88604 + C88673 * (C88604 + C88661 * C88845)) / C88268;
    const double C3906 = (C88731 * (C88604 + C88661 * C88845)) / C88268;
    const double C6169 =
        (2 * C88731 * C88604 + C88731 * (C88604 + C88661 * C88967)) / C88268;
    const double C89585 = C88673 * C89581;
    const double C90059 = C88731 * C90056;
    const double C89458 = C89456 + C89448;
    const double C89891 = C89889 + C89884;
    const double C89457 = C89455 + C89445;
    const double C89890 = C89888 + C89881;
    const double C88663 = C88531 * C88660;
    const double C89311 = C88673 * C88660;
    const double C3368 = (-2 * C88673 * C88603) / C88290 -
                         (C88673 * (C88660 * C88845 + C88603)) / C88290;
    const double C3903 = -(C88731 * (C88660 * C88845 + C88603)) / C88290;
    const double C6166 = (-2 * C88731 * C88603) / C88290 -
                         (C88731 * (C88660 * C88967 + C88603)) / C88290;
    const double C89584 = C88673 * C89580;
    const double C90058 = C88731 * C90055;
    const double C33669 = C33666 + C33667;
    const double C45255 = C45250 + C45251;
    const double C31053 = C31048 + C31049;
    const double C89114 = C89113 / C88268;
    const double C89255 = C89254 / C88268;
    const double C88865 = C88864 / C88268;
    const double C89730 = C89729 / C88268;
    const double C88987 = C88986 / C88268;
    const double C89642 = C89641 / C88268;
    const double C89954 = C89952 + C89944;
    const double C89953 = C89951 + C89941;
    const double C667 = C663 * C90541;
    const double C88722 = C88719 - C88703;
    const double C16152 = C16149 + C16150;
    const double C21762 = C21760 + C21761;
    const double C59010 = C59007 + C59008;
    const double C45037 = C45035 + C45036;
    const double C65917 = C65914 + C65915;
    const double C15634 =
        (-3 * (C88673 * C89164 + C88679 + C89162 * ce)) / C88290 +
        C88673 * ((-2 * C89164) / C88290 - (C88673 * C89433) / C88290 -
                  (C89423 * ce) / C88290) -
        ((2 * C89162 + C88673 * C89423) * ce) / C88290;
    const double C16942 =
        C88731 * ((-2 * C89164) / C88290 - (C88673 * C89433) / C88290 -
                  (C89423 * ce) / C88290);
    const double C17733 =
        -(C89433 * C88967 + C88673 * C89164 + C88679 + C89162 * ce) / C88290;
    const double C19145 = (-2 * C88731 * C89433) / C88290 -
                          (C88731 * (C89580 * C88967 + C89433)) / C88290;
    const double C89572 = C89565 / C88268;
    const double C90013 = C90010 - C88957;
    const double C31838 = C31837 * C90541;
    const double C500 = C496 * C90567;
    const double C88780 = C88777 - C88761;
    const double C30734 = C30731 + C30732;
    const double C16425 = C16424 * C90567;
    const double C89610 = C89607 - C88881;
    const double C31230 = C31228 + C31229;
    const double C90045 = C90034 / C88268;
    const double C30449 =
        (-3 * (C88731 * C89356 + C88737 + C89354 * ce)) / C88290 +
        C88731 * ((-2 * C89356) / C88290 - (C88731 * C89866) / C88290 -
                  (C89862 * ce) / C88290) -
        ((2 * C89354 + C88731 * C89862) * ce) / C88290;
    const double C410 = C343 * C181;
    const double C490 = C343 * C244;
    const double C1211 = C1120 * C924;
    const double C1311 = C1120 * C244;
    const double C7004 = C1120 * C6772;
    const double C2075 = C1988 * C181;
    const double C2175 = C1988 * C1876;
    const double C9457 = C1988 * C9225;
    const double C55962 = C1988 * C244;
    const double C57638 = C1988 * C828;
    const double C66450 = C1988 * C6696;
    const double C2937 = C2846 * C2662;
    const double C3025 = C2846 * C244;
    const double C7713 = C2846 * C7479;
    const double C8541 = C8435 * C6772;
    const double C8654 = C8435 * C1876;
    const double C10196 = C8435 * C924;
    const double C10302 = C8435 * C9225;
    const double C56826 = C8435 * C244;
    const double C65366 = C8435 * C7402;
    const double C69542 = C8435 * C88309;
    const double C5015 = C4932 * C181;
    const double C5111 = C4932 * C4830;
    const double C11076 = C4932 * C10842;
    const double C27908 = C4932 * C828;
    const double C34848 = C4932 * C6696;
    const double C57843 = C4932 * C1876;
    const double C61041 = C4932 * C88309;
    const double C66652 = C4932 * C9225;
    const double C68522 = C4932 * C7402;
    const double C89579 = C89573 - C89558;
    const double C88836 = C88833 - C88818;
    const double C89442 = C88833 - C89436;
    const double C3600 =
        2 * ((-(C88802 * ce) / C88290) / C88268 - (ae * C88687) / C88532 -
             (C88673 * C89167) / C88532) -
        (ae * (C88673 * C89171 + C88687 + C89169 * ce)) / C88532 -
        ((C88802 + C88673 * C89172 + C89169 * ae) * ce) / C88532 +
        C88673 * ((-(ae * C89171) / C88290) / C88268 - C89167 / C88532 -
                  (C89172 * ce) / C88532 +
                  C88673 * (C88833 - C88707 / C88532 -
                            (C88673 * C88531 * C88861) / C88532));
    const double C58796 = C58795 * C90567;
    const double C65639 = C34231 * C90579;
    const double C67739 = C34231 * C90579;
    const double C42141 = C42133 + C42134;
    const double C48992 = C48984 + C48985;
    const double C58585 = C58581 + C58582;
    const double C34012 = C34006 + C34007;
    const double C44620 = C44612 + C44613;
    const double C17209 =
        2 * ((-(C88731 * C88800 * ce) / C88290) / C88268 -
             (ae * C88731 * C88685) / C88532 - (C88673 * C89660) / C88532) -
        (ae * C88731 * C89433) / C88532 - (C88731 * C89434 * ce) / C88532 +
        C88673 * ((-(ae * C88731 * C89421) / C88290) / C88268 -
                  C89660 / C88532 - (C88731 * C89424 * ce) / C88532 +
                  C88673 * ((-(C88731 * C88808 * ce) / C88290) / C88268 -
                            (ae * C88731 * C88693) / C88532 -
                            (C88673 * C88731 * C88861) / C88532));
    const double C15808 =
        (3 * (C88794 + C88673 * C89165 + C89162 * ae) +
         C88673 * (2 * C89165 + C88673 * C89434 + C89423 * ae) +
         (2 * C89162 + C88673 * C89423) * ae) /
        C88268;
    const double C17131 =
        (C88731 * (2 * C89165 + C88673 * C89434 + C89423 * ae)) / C88268;
    const double C17889 =
        (C88794 + C88673 * C89165 + C89162 * ae + C89434 * C88967) / C88268;
    const double C19253 =
        (2 * C88731 * C89434 + C88731 * (C89434 + C89581 * C88967)) / C88268;
    const double C31317 = C31315 * C3364;
    const double C31402 = C31315 * C924;
    const double C38758 = C31315 * C6772;
    const double C89673 = C89672 - C89669;
    const double C89733 = C89672 - C88881;
    const double C31953 = C31951 * C3364;
    const double C32007 = C31951 * C181;
    const double C8546 = C8539 + C8540;
    const double C41282 = C41275 + C41276;
    const double C49130 = C49126 + C49127;
    const double C49131 = C49128 + C49129;
    const double C58692 = C58690 + C58691;
    const double C5018 = C5013 + C5014;
    const double C44726 = C44722 + C44723;
    const double C34128 = C34126 + C34127;
    const double C44727 = C44724 + C44725;
    const double C30649 = C30644 + C30645;
    const double C420 = C416 * C90541;
    const double C1222 = C1218 * C90555;
    const double C2936 = C1218 * C2566;
    const double C7003 = C1218 * C90555;
    const double C7712 = C1218 * C90774;
    const double C2082 = C2079 * C90541;
    const double C8542 = C2079 * C6692;
    const double C10197 = C2079 * C90752;
    const double C2942 = C2940 * C2567;
    const double C7708 = C2940 * C7400;
    const double C29863 = C29859 * C2567;
    const double C38076 = C29859 * C7400;
    const double C29864 = C29860 * C2566;
    const double C31401 = C29860 * C90555;
    const double C34122 = C29860 * C90555;
    const double C38080 = C29860 * C90774;
    const double C30652 = C30650 * C90541;
    const double C31403 = C30650 * C90752;
    const double C38759 = C30650 * C6692;
    const double C657 = C590 * C181;
    const double C735 = C590 * C244;
    const double C1513 = C1422 * C924;
    const double C1612 = C1422 * C244;
    const double C7242 = C1422 * C6772;
    const double C39672 = C1422 * C181;
    const double C40550 = C1422 * C828;
    const double C47338 = C1422 * C6696;
    const double C2377 = C2290 * C181;
    const double C2476 = C2290 * C1876;
    const double C9695 = C2290 * C9225;
    const double C3215 = C3124 * C2662;
    const double C3303 = C3124 * C244;
    const double C7947 = C3124 * C7479;
    const double C14612 = C3124 * C828;
    const double C20060 = C3124 * C6696;
    const double C40654 = C3124 * C924;
    const double C42455 = C3124 * C88309;
    const double C47442 = C3124 * C6772;
    const double C48234 = C3124 * C7402;
    const double C8879 = C8773 * C6772;
    const double C8992 = C8773 * C1876;
    const double C10506 = C8773 * C924;
    const double C10612 = C8773 * C9225;
    const double C41593 = C8773 * C181;
    const double C49398 = C8773 * C7402;
    const double C53532 = C8773 * C88309;
    const double C5293 = C5210 * C181;
    const double C5389 = C5210 * C4830;
    const double C11310 = C5210 * C10842;
    const double C90054 = C90050 - C90037;
    const double C88937 = C88934 - C88919;
    const double C89873 = C88934 - C89469;
    const double C6613 =
        2 * ((-(C88903 * ce) / C88290) / C88268 - (ae * C88745) / C88532 -
             (C88731 * C89192) / C88532) -
        (ae * (C88731 * C89362 + C88745 + C89360 * ce)) / C88532 -
        ((C88903 + C88731 * C89363 + C89360 * ae) * ce) / C88532 +
        C88731 * ((-(ae * C89362) / C88290) / C88268 - C89192 / C88532 -
                  (C89363 * ce) / C88532 +
                  C88731 * (C88934 - C88765 / C88532 -
                            (C88731 * C88531 * C88983) / C88532));
    const double C45034 = C44934 * C181;
    const double C45141 = C44934 * C4830;
    const double C45856 = C44934 * C3364;
    const double C52620 = C44934 * C10842;
    const double C61354 = C61346 + C61347;
    const double C16648 = C16644 * C3364;
    const double C16756 = C16644 * C244;
    const double C17388 = C17382 * C3364;
    const double C17563 = C17382 * C1876;
    const double C25683 = C17382 * C9225;
    const double C18862 = C18858 * C3364;
    const double C19031 = C18858 * C4830;
    const double C26378 = C18858 * C10842;
    const double C89635 = C89633 - C88957;
    const double C89938 = C89633 - C89932;
    const double C19517 =
        2 * ((-(C89321 * ce) / C88290) / C88268 - (ae * C89320) / C88532 -
             (C88731 * C89758) / C88532) -
        (ae * (C88731 * C89762 + C89320 + C89760 * ce)) / C88532 -
        ((C89321 + C88731 * C89763 + C89760 * ae) * ce) / C88532 +
        C88731 * ((-(ae * C89762) / C88290) / C88268 - C89758 / C88532 -
                  (C89763 * ce) / C88532 +
                  C88731 * (C89633 - C89596 / C88532 -
                            (C88731 * C88673 * C88983) / C88532));
    const double C78565 = C78558 + C78559;
    const double C30808 =
        (3 * (C88895 + C88731 * C89357 + C89354 * ae) +
         C88731 * (2 * C89357 + C88731 * C89871 + C89862 * ae) +
         (2 * C89354 + C88731 * C89862) * ae) /
        C88268;
    const double C16760 = C16757 + C16758;
    const double C16239 = C16234 + C16235;
    const double C8997 = C8990 + C8991;
    const double C57166 = C57158 + C57159;
    const double C66052 = C66048 + C66049;
    const double C21867 = C21865 + C21866;
    const double C59114 = C59111 + C59112;
    const double C5392 = C5383 + C5384;
    const double C58185 = C58177 + C58178;
    const double C61564 = C61560 + C61561;
    const double C45144 = C45142 + C45143;
    const double C66053 = C66050 + C66051;
    const double C745 = C741 * C90567;
    const double C1618 = C1615 * C90567;
    const double C8993 = C1615 * C90753;
    const double C10613 = C1615 * C9074;
    const double C2487 = C2483 * C90579;
    const double C5388 = C2483 * C4654;
    const double C9694 = C2483 * C90579;
    const double C11309 = C2483 * C90777;
    const double C3308 = C3306 * C90567;
    const double C21863 = C3306 * C90753;
    const double C23442 = C3306 * C9074;
    const double C16241 = C16238 * C90567;
    const double C17564 = C16238 * C90753;
    const double C25684 = C16238 * C9074;
    const double C17574 = C17570 * C90579;
    const double C19030 = C17570 * C4654;
    const double C23440 = C17570 * C90579;
    const double C26377 = C17570 * C90777;
    const double C19036 = C19034 * C4655;
    const double C26373 = C19034 * C10691;
    const double C129 =
        3 * ((-(ae * C88564) / C88290) / C88268 - C88563 / C88532 -
             (C88565 * ce) / C88532 + C88531 * C88602) +
        (((-2 * C88564) / C88290 - (C88531 * C88603) / C88290 -
          (C88585 * ce) / C88290) *
         ae) /
            C88268 -
        ((2 * C88565 + C88531 * C88604 + C88585 * ae) * ce) / C88532 +
        C88531 * (2 * C88602 - (ae * C88603) / C88532 - (C88604 * ce) / C88532 +
                  C88531 * ((-(ae * C88594) / C88290) / C88268 -
                            C88593 / C88532 - (C88595 * ce) / C88532 +
                            C88531 * ((-(C88586 * ce) / C88290) / C88268 -
                                      (ae * C88583) / C88532 -
                                      (C88531 *
                                       (C88570 * C88571 +
                                        C88539 * bs[6] * std::pow(C88529, 6)) *
                                       C88540) /
                                          C88532)));
    const double C15886 =
        3 * ((-(ae * C89164) / C88290) / C88268 - C88850 / C88532 -
             (C89165 * ce) / C88532 + C88673 * C89432) +
        (((-2 * C89164) / C88290 - (C88673 * C89433) / C88290 -
          (C89423 * ce) / C88290) *
         ae) /
            C88268 -
        ((2 * C89165 + C88673 * C89434 + C89423 * ae) * ce) / C88532 +
        C88673 * (2 * C89432 - (ae * C89433) / C88532 - (C89434 * ce) / C88532 +
                  C88673 * ((-(ae * C89421) / C88290) / C88268 - C88858 -
                            (C89424 * ce) / C88532 +
                            C88673 * ((-C88820 / C88290) / C88268 - C88709 -
                                      (C88673 * C88861) / C88532)));
    const double C30962 =
        3 * ((-(ae * C89356) / C88290) / C88268 - C88972 / C88532 -
             (C89357 * ce) / C88532 + C88731 * C89870) +
        (((-2 * C89356) / C88290 - (C88731 * C89866) / C88290 -
          (C89862 * ce) / C88290) *
         ae) /
            C88268 -
        ((2 * C89357 + C88731 * C89871 + C89862 * ae) * ce) / C88532 +
        C88731 * (2 * C89870 - (ae * C89866) / C88532 - (C89871 * ce) / C88532 +
                  C88731 * ((-C89687 / C88290) / C88268 - C88980 -
                            (C89863 * ce) / C88532 +
                            C88731 * ((-C88921 / C88290) / C88268 - C88767 -
                                      (C88731 * C88983) / C88532)));
    const double C192 =
        3 * ((-(ae * C88687) / C88290) / C88268 - C88684 / C88532 +
             C88531 * C88700) +
        (((-2 * C88687) / C88290 - (C88531 * C88697) / C88290) * ae) / C88268 +
        C88531 *
            (2 * C88700 - (ae * C88697) / C88532 +
             C88531 *
                 ((-(ae * C88531 * C88693) / C88290) / C88268 -
                  C88691 / C88532 +
                  C88531 * ((-(C88531 * C88613 * C88612 * C88680) / C88290) /
                                C88268 -
                            (ae * C88693) / C88532)));
    const double C930 =
        C88673 * ((-(ae * C88687) / C88290) / C88268 - C88684 / C88532 +
                  C88531 * C88700) -
        ((C88546 + C88531 * C88565 + C88554 * ae) * ce) / C88532;
    const double C1797 = C88731 * ((-(ae * C88687) / C88290) / C88268 -
                                   C88684 / C88532 + C88531 * C88700);
    const double C2668 = (-(C88531 * C88684) / C88290) / C88268 -
                         (ae * C88679) / C88532 -
                         (C88673 * C88565 * ce) / C88532 +
                         C88673 * (C88673 * C88700 - (C88565 * ce) / C88532);
    const double C3996 = C88731 * (C88673 * C88700 - (C88565 * ce) / C88532);
    const double C4751 = (-(C88531 * C88684) / C88290) / C88268 -
                         (ae * C88679) / C88532 + C88700 * C88967;
    const double C15636 =
        3 * ((-(C89300 * ce) / C88290) / C88268 - C88684 / C88532 +
             C88673 * C89390) -
        ((2 * C89300 + C88673 * C89387) * ce) / C88532 +
        C88673 * (2 * C89390 - (C89387 * ce) / C88532 +
                  C88673 * (C89005 - C88703 +
                            C88673 * ((-(C88673 * C88708) / C88290) / C88268 -
                                      C88609 / C88532)));
    const double C88727 = C88531 * C88725;
    const double C89392 = C88673 * C88725;
    const double C3435 = 2 * (C88673 * C88700 - (C88565 * ce) / C88532) -
                         ((C88565 + C88595 * C88845) * ce) / C88532 +
                         C88673 * (C88700 - (C88673 * C88595 * ce) / C88532 +
                                   C88673 * (C88673 * C88725 - C88618));
    const double C3999 = C88731 * (C88700 - (C88673 * C88595 * ce) / C88532 +
                                   C88673 * (C88673 * C88725 - C88618));
    const double C5559 = C88673 * C88700 - (C88565 * ce) / C88532 +
                         (C88673 * C88725 - C88618) * C88967;
    const double C6229 =
        2 * C88731 * C88700 + C88731 * (C88700 + C88725 * C88967);
    const double C30360 =
        3 * (C88700 + C88725 * C88967) +
        C88731 *
            (2 * C88731 * C88725 +
             C88731 *
                 (C88725 +
                  ((-(C88531 * std::pow(C88535, 7) * bs[7] * C88680) / C88290) /
                       C88268 -
                   (ae * C88711) / C88532) *
                      C88967));
    const double C89516 = C88673 * C89515;
    const double C19148 =
        2 * C88731 * C89390 + C88731 * (C89390 + C89515 * C88967);
    const double C31131 =
        3 * (C89390 + C89515 * C88967) +
        C88731 *
            (2 * C88731 * C89515 +
             C88731 *
                 (C89515 +
                  ((-(C88673 * std::pow(C88535, 7) * bs[7] * C88680) / C88290) /
                       C88268 -
                   (C88635 * ce) / C88532) *
                      C88967));
    const double C31830 =
        4 * ((-2 * C88731 * C88691) / C88532 + C88731 * C89961) +
        C88731 * (3 * C89961 + C88731 * ((-2 * C88731 * C88708) / C88532 +
                                         C88731 * ((-(std::pow(C88535, 7) *
                                                      bs[7] * C88680 * C88967) /
                                                    C88290) /
                                                       C88268 -
                                                   C88708 / C88532)));
    const double C318 =
        3 * ((-(C88802 * ce) / C88290) / C88268 - C88799 / C88532 +
             C88531 * C88815) -
        ((2 * C88802 + C88531 * C88812) * ce) / C88532 +
        C88531 *
            (2 * C88815 - (C88812 * ce) / C88532 +
             C88531 *
                 ((-(C88531 * C88808 * ce) / C88290) / C88268 -
                  C88806 / C88532 +
                  C88531 * ((-(C88531 * C88613 * C88612 * C88795) / C88290) /
                                C88268 -
                            (C88808 * ce) / C88532)));
    const double C1100 =
        C88673 * ((-(C88802 * ce) / C88290) / C88268 - C88799 / C88532 +
                  C88531 * C88815) -
        (ae * (C88531 * C88564 + C88545 + C88554 * ce)) / C88532;
    const double C1968 = C88731 * ((-(C88802 * ce) / C88290) / C88268 -
                                   C88799 / C88532 + C88531 * C88815);
    const double C2832 = (-(C88531 * C88799) / C88290) / C88268 -
                         (C88794 * ce) / C88532 -
                         (ae * C88673 * C88564) / C88532 +
                         C88673 * (C88673 * C88815 - (ae * C88564) / C88532);
    const double C4168 =
        C88673 * C88731 * C88815 - (ae * C88731 * C88564) / C88532;
    const double C4918 = (-(C88531 * C88799) / C88290) / C88268 -
                         (C88794 * ce) / C88532 + C88815 * C88967;
    const double C15810 =
        3 * ((-(ae * C89315) / C88290) / C88268 - C88799 / C88532 +
             C88673 * C89405) +
        (((-2 * C89315) / C88290 - (C88673 * C89402) / C88290) * ae) / C88268 +
        C88673 * (2 * C89405 - (ae * C89402) / C88532 +
                  C88673 * ((-C88999 / C88290) / C88268 - C88818 +
                            C88673 * ((-(C88673 * C88823) / C88290) / C88268 -
                                      C88620)));
    const double C88840 = C88531 * C88839;
    const double C89407 = C88673 * C88839;
    const double C89774 = C88731 * C88839;
    const double C3547 =
        2 * (C88673 * C88815 - (ae * C88564) / C88532) -
        (ae * (C88594 * C88845 + C88564)) / C88532 +
        C88673 * (C88815 - (ae * C88673 * C88594) / C88532 +
                  C88673 * (C88673 * C88839 - C88606 / C88532));
    const double C4171 =
        C88731 * C88815 - (ae * C88731 * C88673 * C88594) / C88532 +
        C88673 * (C88673 * C88731 * C88839 - (ae * C88731 * C88594) / C88532);
    const double C5719 = C88673 * (C88815 + C88839 * C88967) -
                         (ae * (C88594 * C88967 + C88564)) / C88532;
    const double C6345 =
        2 * C88731 * C88815 + C88731 * (C88815 + C88839 * C88967);
    const double C17892 =
        C88815 + C88839 * C88967 -
        (ae * (C88673 * C88648 * C88967 + C89313)) / C88532 +
        C88673 *
            (C88673 *
                 (C88839 +
                  ((-(C88531 * std::pow(C88535, 7) * bs[7] * C88795) / C88290) /
                       C88268 -
                   (C88826 * ce) / C88532) *
                      C88967) -
             (ae * (C88648 * C88967 + C88594)) / C88532);
    const double C89541 = C88673 * C89539;
    const double C89658 = C89657 - C89061;
    const double C18620 =
        2 * (C88673 * C89725 - (ae * (C88583 * C88967 + C88558)) / C88532) -
        (ae * (C89532 * C88967 + C89402)) / C88532 +
        C88673 *
            (C89725 - (ae * (C88673 * C88632 * C88967 + C88996)) / C88532 +
             C88673 *
                 (C88673 * ((-(std::pow(C88535, 7) * bs[7] * C88795 * C88967) /
                             C88290) /
                                C88268 -
                            C88823 / C88532) -
                  (ae * (C88632 * C88967 + C88583)) / C88532));
    const double C19255 =
        (-2 * C89651) / C88532 + C88731 * C89725 +
        (((-2 * C88731 * C88996) / C88290 -
          (C88731 * (C88673 * C88632 * C88967 + C88996)) / C88290) *
         ae) /
            C88268 +
        C88673 *
            ((((-2 * C89055) / C88290 -
               (C88731 * (C88632 * C88967 + C88583)) / C88290) *
              ae) /
                 C88268 +
             C88673 *
                 ((-2 * C89653) / C88532 +
                  C88731 * ((-(std::pow(C88535, 7) * bs[7] * C88795 * C88967) /
                             C88290) /
                                C88268 -
                            C88823 / C88532)));
    const double C19256 = (((-2 * C88731 * C88558) / C88290 -
                            (C88731 * (C88583 * C88967 + C88558)) / C88290) *
                           ae) /
                              C88268 +
                          C88673 * ((-2 * C89651) / C88532 + C88731 * C89725);
    const double C30535 =
        3 * ((-(C88806 * C88967) / C88290) / C88268 - C88799 / C88532) +
        C88731 * ((-2 * C89651) / C88532 + C88731 * C89725);
    const double C31305 =
        (((-3 * C89823) / C88290 +
          C88731 * ((-2 * C89055) / C88290 -
                    (C88731 * (C88632 * C88967 + C88583)) / C88290)) *
         ae) /
            C88268 +
        C88673 * (3 * C89725 + C88731 * ((-2 * C89653) / C88532 +
                                         C88731 * ((-(std::pow(C88535, 7) *
                                                      bs[7] * C88795 * C88967) /
                                                    C88290) /
                                                       C88268 -
                                                   C88823 / C88532)));
    const double C31944 =
        4 * ((-2 * C89651) / C88532 + C88731 * C89725) +
        C88731 * (3 * C89725 + C88731 * ((-2 * C89653) / C88532 +
                                         C88731 * ((-(std::pow(C88535, 7) *
                                                      bs[7] * C88795 * C88967) /
                                                    C88290) /
                                                       C88268 -
                                                   C88823 / C88532)));
    const double C255 =
        3 * ((-(ae * C88745) / C88290) / C88268 - C88742 / C88532 +
             C88531 * C88758) +
        (((-2 * C88745) / C88290 - (C88531 * C88755) / C88290) * ae) / C88268 +
        C88531 *
            (2 * C88758 - (ae * C88755) / C88532 +
             C88531 *
                 ((-(ae * C88531 * C88751) / C88290) / C88268 -
                  C88749 / C88532 +
                  C88531 * ((-(C88531 * C88613 * C88612 * C88738) / C88290) /
                                C88268 -
                            (ae * C88751) / C88532)));
    const double C1014 = C88673 * ((-(ae * C88745) / C88290) / C88268 -
                                   C88742 / C88532 + C88531 * C88758);
    const double C1882 =
        C88731 * ((-(ae * C88745) / C88290) / C88268 - C88742 / C88532 +
                  C88531 * C88758) -
        ((C88546 + C88531 * C88565 + C88554 * ae) * ce) / C88532;
    const double C2750 = (-(C88531 * C88742) / C88290) / C88268 -
                         (ae * C88737) / C88532 + C88758 * C88845;
    const double C4082 =
        C88731 * C88673 * C88758 - (C88673 * C88565 * ce) / C88532;
    const double C4836 = (-(C88531 * C88742) / C88290) / C88268 -
                         (ae * C88737) / C88532 -
                         (C88731 * C88565 * ce) / C88532 +
                         C88731 * (C88731 * C88758 - (C88565 * ce) / C88532);
    const double C30451 =
        3 * ((-(C89792 * ce) / C88290) / C88268 - C88742 / C88532 +
             C88731 * C89799) -
        ((2 * C89792 + C88731 * C89796) * ce) / C88532 +
        C88731 * (2 * C89799 - (C89796 * ce) / C88532 +
                  C88731 * (C89064 - C88761 +
                            C88731 * ((-(C88731 * C88766) / C88290) / C88268 -
                                      C89506)));
    const double C88785 = C88531 * C88783;
    const double C89802 = C88731 * C88783;
    const double C90069 = C88673 * C88783;
    const double C3491 =
        2 * C88673 * C88758 + C88673 * (C88758 + C88783 * C88845);
    const double C4085 = C88731 * (C88758 + C88783 * C88845) -
                         ((C88565 + C88595 * C88845) * ce) / C88532;
    const double C5639 =
        C88673 * C88758 - (C88731 * C89298 * ce) / C88532 +
        C88731 * (C88731 * C88673 * C88783 - (C89298 * ce) / C88532);
    const double C6289 = 2 * (C88731 * C88758 - (C88565 * ce) / C88532) -
                         ((C88565 + C88595 * C88967) * ce) / C88532 +
                         C88731 * (C88758 - (C88731 * C88595 * ce) / C88532 +
                                   C88731 * (C88731 * C88783 - C88618));
    const double C15721 =
        3 * (C88758 + C88783 * C88845) +
        C88673 *
            (2 * C88673 * C88783 +
             C88673 *
                 (C88783 +
                  ((-(C88531 * std::pow(C88535, 7) * bs[7] * C88738) / C88290) /
                       C88268 -
                   (ae * C88769) / C88532) *
                      C88845));
    const double C17814 =
        C88758 + C88783 * C88845 - (C88731 * C89395 * ce) / C88532 +
        C88731 *
            (C88731 *
                 (C88783 +
                  ((-(C88531 * std::pow(C88535, 7) * bs[7] * C88738) / C88290) /
                       C88268 -
                   (ae * C88769) / C88532) *
                      C88845) -
             (C89395 * ce) / C88532);
    const double C21233 =
        C88731 *
            (2 * C88673 * C88783 +
             C88673 *
                 (C88783 +
                  ((-(C88531 * std::pow(C88535, 7) * bs[7] * C88738) / C88290) /
                       C88268 -
                   (ae * C88769) / C88532) *
                      C88845)) -
        ((2 * C89298 + C88673 * C89395) * ce) / C88532;
    const double C16418 =
        4 * ((-2 * C88673 * C88749) / C88532 + C88673 * C89523) +
        C88673 * (3 * C89523 + C88673 * ((-2 * C88673 * C88766) / C88532 +
                                         C88673 * ((-(std::pow(C88535, 7) *
                                                      bs[7] * C88738 * C88845) /
                                                    C88290) /
                                                       C88268 -
                                                   C88766 / C88532)));
    const double C17031 =
        C88731 * ((-2 * C88673 * C88749) / C88532 + C88673 * C89523) -
        ((2 * C89300 + C88673 * C89387) * ce) / C88532;
    const double C17032 =
        C88731 * (3 * C89523 + C88673 * ((-2 * C88673 * C88766) / C88532 +
                                         C88673 * ((-(std::pow(C88535, 7) *
                                                      bs[7] * C88738 * C88845) /
                                                    C88290) /
                                                       C88268 -
                                                   C88766 / C88532))) -
        ((3 * C89387 + C88673 * C89514) * ce) / C88532;
    const double C17813 = (-(C88749 * C88845) / C88290) / C88268 -
                          C88742 / C88532 - (C88731 * C89387 * ce) / C88532 +
                          C88731 * (C88731 * C89523 - (C89387 * ce) / C88532);
    const double C18526 =
        (-2 * C88673 * C88749) / C88532 + C88673 * C89523 -
        (C88731 * C89514 * ce) / C88532 +
        C88731 *
            (C88731 *
                 ((-2 * C88673 * C88766) / C88532 +
                  C88673 * ((-(std::pow(C88535, 7) * bs[7] * C88738 * C88845) /
                             C88290) /
                                C88268 -
                            C88766 / C88532)) -
             (C89514 * ce) / C88532);
    const double C19202 =
        2 * (C88731 * C89523 - (C89387 * ce) / C88532) -
        ((C89387 + C89510 * C88967) * ce) / C88532 +
        C88731 *
            (C89523 - (C88731 * C89510 * ce) / C88532 +
             C88731 *
                 (C88731 * ((-(std::pow(C88535, 7) * bs[7] * C88738 * C88845) /
                             C88290) /
                                C88268 -
                            C88766 / C88532) -
                  (C89510 * ce) / C88532));
    const double C89905 = C89904 - C89897;
    const double C89974 = C88731 * C89973;
    const double C504 = C502 * C90634;
    const double C15962 =
        3 * ((-(ae * C89320) / C88290) / C88268 - C88875 / C88532 +
             C88673 * C89466) +
        (((-2 * C89320) / C88290 - (C88673 * C89463) / C88290) * ae) / C88268 +
        C88673 *
            (2 * C89466 - (ae * C89463) / C88532 +
             C88673 *
                 ((-(ae * C88673 * C88751) / C88290) / C88268 - C88881 +
                  C88673 * ((-(C88673 * C88882) / C88290) / C88268 - C88767)));
    const double C17285 =
        2 * (C88673 * C89680 - (ae * C89356) / C88532) -
        (ae * (C88731 * C89463 + C89423 * ce)) / C88532 +
        C88673 * (C89680 - (ae * (C88731 * C89593 + C89422)) / C88532 +
                  C88673 * (C88673 * ((-(C88731 * C88882) / C88290) / C88268 -
                                      C88824) -
                            (ae * (C88731 * C88751 + C88576)) / C88532));
    const double C1321 = C1320 * C90634;
    const double C479 =
        4 * ((-2 * C88531 * C88878) / C88532 + C88531 * C88887) +
        C88531 * (3 * C88887 + C88531 * ((-2 * C88531 * C88882) / C88532 +
                                         C88531 * ((-(std::pow(C88535, 7) *
                                                      bs[7] * C88872 * C88539) /
                                                    C88290) /
                                                       C88268 -
                                                   C88882 / C88532)));
    const double C1302 =
        (((-2 * C88745) / C88290 - (C88531 * C88755) / C88290) * ae) / C88268 +
        C88673 * ((-2 * C88531 * C88878) / C88532 + C88531 * C88887);
    const double C1303 =
        (((-3 * C88755) / C88290 + C88531 * C88784) * ae) / C88268 +
        C88673 * (3 * C88887 + C88531 * ((-2 * C88531 * C88882) / C88532 +
                                         C88531 * ((-(std::pow(C88535, 7) *
                                                      bs[7] * C88872 * C88539) /
                                                    C88290) /
                                                       C88268 -
                                                   C88882 / C88532)));
    const double C2162 =
        C88731 * ((-2 * C88531 * C88878) / C88532 + C88531 * C88887) -
        ((2 * C88802 + C88531 * C88812) * ce) / C88532;
    const double C2163 =
        C88731 * (3 * C88887 + C88531 * ((-2 * C88531 * C88882) / C88532 +
                                         C88531 * ((-(std::pow(C88535, 7) *
                                                      bs[7] * C88872 * C88539) /
                                                    C88290) /
                                                       C88268 -
                                                   C88882 / C88532))) -
        ((3 * C88812 + C88531 * C88838) * ce) / C88532;
    const double C3019 = (-(C88878 * C88539) / C88290) / C88268 -
                         C88875 / C88532 - (ae * C88673 * C88755) / C88532 +
                         C88673 * (C88673 * C88887 - (ae * C88755) / C88532);
    const double C3020 =
        (-2 * C88531 * C88878) / C88532 + C88531 * C88887 +
        (C88673 * C88784 * ae) / C88268 +
        C88673 *
            ((C88784 * ae) / C88268 +
             C88673 *
                 ((-2 * C88531 * C88882) / C88532 +
                  C88531 * ((-(std::pow(C88535, 7) * bs[7] * C88872 * C88539) /
                             C88290) /
                                C88268 -
                            C88882 / C88532)));
    const double C3652 =
        2 * (C88673 * C88887 - (ae * C88755) / C88532) -
        (ae * (C88776 * C88845 + C88755)) / C88532 +
        C88673 *
            (C88887 - (ae * C88673 * C88776) / C88532 +
             C88673 *
                 (C88673 * ((-(std::pow(C88535, 7) * bs[7] * C88872 * C88539) /
                             C88290) /
                                C88268 -
                            C88882 / C88532) -
                  (ae * C88776) / C88532));
    const double C4329 = C88673 * (C88731 * C88887 - (C88812 * ce) / C88532) -
                         (ae * (C88731 * C88755 + C88585 * ce)) / C88532;
    const double C4332 =
        C88731 * C88887 - (C88812 * ce) / C88532 -
        (ae * (C88731 * C88673 * C88776 + C89175 * ce)) / C88532 +
        C88673 *
            (C88673 *
                 (C88731 * ((-(std::pow(C88535, 7) * bs[7] * C88872 * C88539) /
                             C88290) /
                                C88268 -
                            C88882 / C88532) -
                  (C88832 * ce) / C88532) -
             (ae * (C88731 * C88776 + C88641)) / C88532);
    const double C5097 = (-(C88878 * C88539) / C88290) / C88268 -
                         C88875 / C88532 - (C88731 * C88812 * ce) / C88532 +
                         C88731 * (C88731 * C88887 - (C88812 * ce) / C88532);
    const double C5098 =
        (-2 * C89181) / C88532 + C88531 * C88887 -
        (C88731 * C88838 * ce) / C88532 +
        C88731 *
            (C88731 *
                 ((-2 * C88531 * C88882) / C88532 +
                  C88531 * ((-(std::pow(C88535, 7) * bs[7] * C88872 * C88539) /
                             C88290) /
                                C88268 -
                            C88882 / C88532)) -
             (C88838 * ce) / C88532);
    const double C5874 =
        C88673 *
            (C88887 - (C88731 * C88832 * ce) / C88532 +
             C88731 *
                 (C88731 * ((-(std::pow(C88535, 7) * bs[7] * C88872 * C88539) /
                             C88290) /
                                C88268 -
                            C88882 / C88532) -
                  (C88832 * ce) / C88532)) -
        (ae * (C88731 * (C88731 * C88776 + C88641) + C88755 +
               C88731 * C88634 * ce)) /
            C88532;
    const double C6452 =
        2 * (C88731 * C88887 - (C88812 * ce) / C88532) -
        ((C88812 + C88832 * C88967) * ce) / C88532 +
        C88731 *
            (C88887 - (C88731 * C88832 * ce) / C88532 +
             C88731 *
                 (C88731 * ((-(std::pow(C88535, 7) * bs[7] * C88872 * C88539) /
                             C88290) /
                                C88268 -
                            C88882 / C88532) -
                  (C88832 * ce) / C88532));
    const double C89477 = C89476 - C89469;
    const double C89783 = C89782 - C89779;
    const double C89611 = C88673 * C89608;
    const double C89691 = C88673 * C89690;
    const double C89734 = C88731 * C89690;
    const double C18043 =
        (-(C88731 * C88800 * ce) / C88290) / C88268 - C88875 / C88532 +
        C88731 * C89680 -
        (ae * (C88731 * (C88731 * C89593 + C89422) + C89320 +
               C88731 * C89416 * ce)) /
            C88532 +
        C88673 *
            (C88673 * (C89672 - C88881 + C88731 * C89690) -
             (ae * (C88731 * C89685 + C88743 + C88731 * C88569 * ce)) / C88532);
    const double C16646 = C16642 * C90485;
    const double C565 =
        3 * ((-(C88903 * ce) / C88290) / C88268 - C88900 / C88532 +
             C88531 * C88916) -
        ((2 * C88903 + C88531 * C88913) * ce) / C88532 +
        C88531 *
            (2 * C88916 - (C88913 * ce) / C88532 +
             C88531 *
                 ((-(C88531 * C88909 * ce) / C88290) / C88268 -
                  C88907 / C88532 +
                  C88531 * ((-(C88531 * C88613 * C88612 * C88896) / C88290) /
                                C88268 -
                            (C88909 * ce) / C88532)));
    const double C1402 = C88673 * ((-(C88903 * ce) / C88290) / C88268 -
                                   C88900 / C88532 + C88531 * C88916);
    const double C2270 =
        C88731 * ((-(C88903 * ce) / C88290) / C88268 - C88900 / C88532 +
                  C88531 * C88916) -
        (ae * (C88531 * C88564 + C88545 + C88554 * ce)) / C88532;
    const double C3110 = (-(C88531 * C88900) / C88290) / C88268 -
                         (C88895 * ce) / C88532 + C88916 * C88845;
    const double C4414 =
        C88731 * C88673 * C88916 - (ae * C88673 * C88564) / C88532;
    const double C5196 = (-(C88531 * C88900) / C88290) / C88268 -
                         (C88895 * ce) / C88532 -
                         (ae * C88731 * C88564) / C88532 +
                         C88731 * (C88731 * C88916 - (ae * C88564) / C88532);
    const double C30810 =
        3 * ((-(ae * C89819) / C88290) / C88268 - C88900 / C88532 +
             C88731 * C89826) +
        (((-2 * C89819) / C88290 - (C88731 * C89823) / C88290) * ae) / C88268 +
        C88731 * (2 * C89826 - (ae * C89823) / C88532 +
                  C88731 * ((-C89058 / C88290) / C88268 - C88919 +
                            C88731 * ((-(C88731 * C88924) / C88290) / C88268 -
                                      C88620)));
    const double C16647 = C16643 * C90485;
    const double C17391 = C17390 * C90485;
    const double C88941 = C88531 * C88940;
    const double C89829 = C88731 * C88940;
    const double C90075 = C88673 * C88940;
    const double C3709 =
        2 * C88673 * C88916 + C88673 * (C88916 + C88940 * C88845);
    const double C4417 = C88731 * (C88916 + C88940 * C88845) -
                         (ae * (C88594 * C88845 + C88564)) / C88532;
    const double C5953 =
        C88673 * C88916 - (ae * C88731 * C89313) / C88532 +
        C88731 * (C88731 * C88673 * C88940 - (ae * C89313) / C88532);
    const double C6507 =
        2 * (C88731 * C88916 - (ae * C88564) / C88532) -
        (ae * (C88594 * C88967 + C88564)) / C88532 +
        C88731 * (C88916 - (ae * C88731 * C88594) / C88532 +
                  C88731 * (C88731 * C88940 - C88606 / C88532));
    const double C16041 =
        3 * (C88916 + C88940 * C88845) +
        C88673 *
            (2 * C88673 * C88940 +
             C88673 *
                 (C88940 +
                  ((-(C88531 * std::pow(C88535, 7) * bs[7] * C88896) / C88290) /
                       C88268 -
                   (C88927 * ce) / C88532) *
                      C88845));
    const double C18122 =
        C88916 + C88940 * C88845 - (ae * C88731 * C89411) / C88532 +
        C88731 *
            (C88731 *
                 (C88940 +
                  ((-(C88531 * std::pow(C88535, 7) * bs[7] * C88896) / C88290) /
                       C88268 -
                   (C88927 * ce) / C88532) *
                      C88845) -
             (ae * C89411) / C88532);
    const double C21645 =
        (((-2 * C89313) / C88290 - (C88673 * C89411) / C88290) * ae) / C88268 +
        C88731 *
            (2 * C88673 * C88940 +
             C88673 *
                 (C88940 +
                  ((-(C88531 * std::pow(C88535, 7) * bs[7] * C88896) / C88290) /
                       C88268 -
                   (C88927 * ce) / C88532) *
                      C88845));
    const double C16630 =
        4 * ((-2 * C88673 * C88907) / C88532 + C88673 * C89618) +
        C88673 * (3 * C89618 + C88673 * ((-2 * C88673 * C88924) / C88532 +
                                         C88673 * ((-(std::pow(C88535, 7) *
                                                      bs[7] * C88896 * C88845) /
                                                    C88290) /
                                                       C88268 -
                                                   C88924 / C88532)));
    const double C17363 =
        (((-2 * C89315) / C88290 - (C88673 * C89402) / C88290) * ae) / C88268 +
        C88731 * ((-2 * C88673 * C88907) / C88532 + C88673 * C89618);
    const double C17364 =
        (((-3 * C89402) / C88290 + C88673 * C89540) * ae) / C88268 +
        C88731 * (3 * C89618 + C88673 * ((-2 * C88673 * C88924) / C88532 +
                                         C88673 * ((-(std::pow(C88535, 7) *
                                                      bs[7] * C88896 * C88845) /
                                                    C88290) /
                                                       C88268 -
                                                   C88924 / C88532)));
    const double C18121 = (-(C88907 * C88845) / C88290) / C88268 -
                          C88900 / C88532 - (ae * C88731 * C89402) / C88532 +
                          C88731 * (C88731 * C89618 - (ae * C89402) / C88532);
    const double C18846 =
        (-2 * C88673 * C88907) / C88532 + C88673 * C89618 +
        (C88731 * C89540 * ae) / C88268 +
        C88731 *
            ((C89540 * ae) / C88268 +
             C88731 *
                 ((-2 * C88673 * C88924) / C88532 +
                  C88673 * ((-(std::pow(C88535, 7) * bs[7] * C88896 * C88845) /
                             C88290) /
                                C88268 -
                            C88924 / C88532)));
    const double C19413 =
        2 * (C88731 * C89618 - (ae * C89402) / C88532) -
        (ae * (C89532 * C88967 + C89402)) / C88532 +
        C88731 *
            (C89618 - (ae * C88731 * C89532) / C88532 +
             C88731 *
                 (C88731 * ((-(std::pow(C88535, 7) * bs[7] * C88896 * C88845) /
                             C88290) /
                                C88268 -
                            C88924 / C88532) -
                  (ae * C89532) / C88532));
    const double C89923 = C89922 - C89002;
    const double C89999 = C88731 * C89997;
    const double C16144 =
        3 * ((-(C89321 * ce) / C88290) / C88268 - C88951 / C88532 +
             C88673 * C89487) -
        ((2 * C89321 + C88673 * C89484) * ce) / C88532 +
        C88673 *
            (2 * C89487 - (C89484 * ce) / C88532 +
             C88673 *
                 ((-(C88673 * C88909 * ce) / C88290) / C88268 - C88957 +
                  C88673 * ((-(C88673 * C88958) / C88290) / C88268 - C88925)));
    const double C30886 =
        3 * ((-(ae * C89834) / C88290) / C88268 - C88951 / C88532 +
             C88731 * C89841) +
        (((-2 * C89834) / C88290 - (C88731 * C89838) / C88290) * ae) / C88268 +
        C88731 * (2 * C89841 - (ae * C89838) / C88532 +
                  C88731 * ((-C89666 / C88290) / C88268 - C88957 +
                            C88731 * ((-(C88731 * C88958) / C88290) / C88268 -
                                      C88709)));
    const double C646 =
        4 * ((-2 * C88531 * C88954) / C88532 + C88531 * C88963) +
        C88531 * (3 * C88963 + C88531 * ((-2 * C88531 * C88958) / C88532 +
                                         C88531 * ((-(std::pow(C88535, 7) *
                                                      bs[7] * C88948 * C88539) /
                                                    C88290) /
                                                       C88268 -
                                                   C88958 / C88532)));
    const double C1500 =
        C88673 * ((-2 * C88531 * C88954) / C88532 + C88531 * C88963) -
        ((2 * C88903 + C88531 * C88913) * ce) / C88532;
    const double C1501 =
        C88673 * (3 * C88963 + C88531 * ((-2 * C88531 * C88958) / C88532 +
                                         C88531 * ((-(std::pow(C88535, 7) *
                                                      bs[7] * C88948 * C88539) /
                                                    C88290) /
                                                       C88268 -
                                                   C88958 / C88532))) -
        ((3 * C88913 + C88531 * C88939) * ce) / C88532;
    const double C2367 =
        (((-2 * C88687) / C88290 - (C88531 * C88697) / C88290) * ae) / C88268 +
        C88731 * ((-2 * C88531 * C88954) / C88532 + C88531 * C88963);
    const double C2369 =
        (((-3 * C88697) / C88290 + C88531 * C88726) * ae) / C88268 +
        C88731 * (3 * C88963 + C88531 * ((-2 * C88531 * C88958) / C88532 +
                                         C88531 * ((-(std::pow(C88535, 7) *
                                                      bs[7] * C88948 * C88539) /
                                                    C88290) /
                                                       C88268 -
                                                   C88958 / C88532)));
    const double C3201 = (-(C88954 * C88539) / C88290) / C88268 -
                         C88951 / C88532 - (C88673 * C88913 * ce) / C88532 +
                         C88673 * (C88673 * C88963 - (C88913 * ce) / C88532);
    const double C3202 =
        (-2 * C88531 * C88954) / C88532 + C88531 * C88963 -
        (C88673 * C88939 * ce) / C88532 +
        C88673 *
            (C88673 *
                 ((-2 * C88531 * C88958) / C88532 +
                  C88531 * ((-(std::pow(C88535, 7) * bs[7] * C88948 * C88539) /
                             C88290) /
                                C88268 -
                            C88958 / C88532)) -
             (C88939 * ce) / C88532);
    const double C3763 =
        2 * (C88673 * C88963 - (C88913 * ce) / C88532) -
        ((C88913 + C88933 * C88845) * ce) / C88532 +
        C88673 *
            (C88963 - (C88673 * C88933 * ce) / C88532 +
             C88673 *
                 (C88673 * ((-(std::pow(C88535, 7) * bs[7] * C88948 * C88539) /
                             C88290) /
                                C88268 -
                            C88958 / C88532) -
                  (C88933 * ce) / C88532));
    const double C4497 = C88731 * (C88673 * C88963 - (C88913 * ce) / C88532) -
                         (ae * (C88673 * C88697 + C88585 * ce)) / C88532;
    const double C4498 =
        C88731 *
            (C88963 - (C88673 * C88933 * ce) / C88532 +
             C88673 *
                 (C88673 * ((-(std::pow(C88535, 7) * bs[7] * C88948 * C88539) /
                             C88290) /
                                C88268 -
                            C88958 / C88532) -
                  (C88933 * ce) / C88532)) -
        (ae * (C88673 * C89177 + C88697 + C89175 * ce)) / C88532;
    const double C5287 = (-(C88954 * C88539) / C88290) / C88268 -
                         C88951 / C88532 - (ae * C88731 * C88697) / C88532 +
                         C88731 * (C88731 * C88963 - (ae * C88697) / C88532);
    const double C5288 =
        (-2 * C89188) / C88532 + C88531 * C88963 +
        (C88731 * C88726 * ae) / C88268 +
        C88731 *
            ((C88726 * ae) / C88268 +
             C88731 *
                 ((-2 * C88531 * C88958) / C88532 +
                  C88531 * ((-(std::pow(C88535, 7) * bs[7] * C88948 * C88539) /
                             C88290) /
                                C88268 -
                            C88958 / C88532)));
    const double C6031 =
        C88673 * C88963 - (C88913 * ce) / C88532 -
        (ae * C88731 * C89177) / C88532 +
        C88731 *
            (C88731 *
                 (C88673 * ((-(std::pow(C88535, 7) * bs[7] * C88948 * C88539) /
                             C88290) /
                                C88268 -
                            C88958 / C88532) -
                  (C88933 * ce) / C88532) -
             (ae * C89177) / C88532);
    const double C6559 =
        2 * (C88731 * C88963 - (ae * C88697) / C88532) -
        (ae * (C88718 * C88967 + C88697)) / C88532 +
        C88731 *
            (C88963 - (ae * C88731 * C88718) / C88532 +
             C88731 *
                 (C88731 * ((-(std::pow(C88535, 7) * bs[7] * C88948 * C88539) /
                             C88290) /
                                C88268 -
                            C88958 / C88532) -
                  (ae * C88718) / C88532));
    const double C89498 = C89497 - C89490;
    const double C89850 = C89849 - C89436;
    const double C89636 = C88673 * C89634;
    const double C89926 = C88731 * C89634;
    const double C19466 =
        2 * (C88731 * C89487 - (ae * C89164) / C88532) -
        (ae * (C89421 * C88967 + C89164)) / C88532 +
        C88731 * (C89487 - (ae * C88731 * C89421) / C88532 +
                  C88731 * (C88731 * C89634 - C89544 / C88532));
    const double C90018 = C88731 * C90016;
    const double C17054 = C17050 - C17041;
    const double C30370 = C30362 * C90623;
    const double C31148 = C31146 - C31139;
    const double C31836 = C31832 * C90623;
    const double C88315 = C88314 / C88290;
    const double C14100 = C14088 * C826;
    const double C14094 = C14082 * C826;
    const double C14620 = C14616 * C826;
    const double C14618 = C14614 * C826;
    const double C27618 = C27606 * C826;
    const double C27612 = C27600 * C826;
    const double C27916 = C27912 * C826;
    const double C27914 = C27910 * C826;
    const double C40546 = C1418 * C826;
    const double C57634 = C1984 * C826;
    const double C72652 = C16859 * C826;
    const double C14102 = C14090 * C827;
    const double C14096 = C14084 * C827;
    const double C14610 = C3122 * C827;
    const double C14602 = C1418 * C827;
    const double C27620 = C27608 * C827;
    const double C27614 = C27602 * C827;
    const double C27906 = C4930 * C827;
    const double C27898 = C1984 * C827;
    const double C40548 = C1420 * C827;
    const double C57636 = C1986 * C827;
    const double C72654 = C21021 * C827;
    const double C20294 = C15553 * C7401;
    const double C20288 = C14088 * C7401;
    const double C20284 = C14082 * C7401;
    const double C20753 = C16062 * C7401;
    const double C20747 = C14616 * C7401;
    const double C20743 = C14614 * C7401;
    const double C21018 = C16857 * C7401;
    const double C21012 = C16859 * C7401;
    const double C21654 = C17379 * C7401;
    const double C21649 = C17381 * C7401;
    const double C33665 = C18362 * C7401;
    const double C33658 = C27606 * C7401;
    const double C33654 = C27600 * C7401;
    const double C34009 = C29754 * C7401;
    const double C34004 = C29752 * C7401;
    const double C33998 = C27912 * C7401;
    const double C33994 = C27910 * C7401;
    const double C36191 = C30275 * C7401;
    const double C36421 = C30557 * C7401;
    const double C48236 = C3122 * C7401;
    const double C48230 = C1418 * C7401;
    const double C49400 = C8771 * C7401;
    const double C65368 = C8433 * C7401;
    const double C65362 = C1984 * C7401;
    const double C68524 = C4930 * C7401;
    const double C88394 = C88392 / C88290;
    const double C7006 = C341 * C6771;
    const double C7000 = C339 * C6771;
    const double C6996 = C337 * C6771;
    const double C7244 = C588 * C6771;
    const double C7238 = C586 * C6771;
    const double C7234 = C584 * C6771;
    const double C8543 = C1986 * C6771;
    const double C8538 = C1984 * C6771;
    const double C8881 = C2288 * C6771;
    const double C8876 = C2286 * C6771;
    const double C33786 = C27608 * C6771;
    const double C33782 = C27602 * C6771;
    const double C33776 = C27606 * C6771;
    const double C33772 = C27600 * C6771;
    const double C34125 = C4930 * C6771;
    const double C34119 = C27912 * C6771;
    const double C34115 = C27910 * C6771;
    const double C38530 = C30275 * C6771;
    const double C38760 = C30557 * C6771;
    const double C47444 = C1420 * C6771;
    const double C47438 = C1418 * C6771;
    const double C49534 = C8771 * C6771;
    const double C81438 = C21021 * C6771;
    const double C81432 = C16859 * C6771;
    const double C87566 = C18362 * C6771;
    const double C88439 = C88437 / C88290;
    const double C9459 = C341 * C9224;
    const double C9453 = C339 * C9224;
    const double C9449 = C337 * C9224;
    const double C9697 = C588 * C9224;
    const double C9691 = C586 * C9224;
    const double C9687 = C584 * C9224;
    const double C10304 = C1118 * C9224;
    const double C10300 = C1116 * C9224;
    const double C10614 = C1420 * C9224;
    const double C10610 = C1418 * C9224;
    const double C22843 = C14090 * C9224;
    const double C22839 = C14084 * C9224;
    const double C22833 = C14088 * C9224;
    const double C22829 = C14082 * C9224;
    const double C23443 = C3122 * C9224;
    const double C23437 = C14616 * C9224;
    const double C23433 = C14614 * C9224;
    const double C25234 = C15553 * C9224;
    const double C25685 = C16062 * C9224;
    const double C66654 = C1986 * C9224;
    const double C66648 = C1984 * C9224;
    const double C67738 = C8433 * C9224;
    const double C83636 = C21021 * C9224;
    const double C83630 = C16859 * C9224;
    const double C86778 = C16857 * C9224;
    const double C31314 = C29763 + C29762;
    const double C16307 = C16299 + C16300;
    const double C76025 = C16864 + C16865;
    const double C76024 = C16865 + C16864;
    const double C31043 = C29496 + C29497;
    const double C422 = C419 + C409;
    const double C57739 = C2081 + C2069;
    const double C57738 = C2069 + C2081;
    const double C67601 = C10193 + C10194;
    const double C67600 = C10194 + C10193;
    const double C30641 = C27995 + C28001;
    const double C31407 = C31398 + C31399;
    const double C747 = C744 + C734;
    const double C40757 = C1619 + C1611;
    const double C40756 = C1611 + C1619;
    const double C49667 = C8988 + C8989;
    const double C49666 = C8989 + C8988;
    const double C16229 = C14779 + C14785;
    const double C17569 = C17558 + C17559;
    const double C2188 = C2185 - C2186;
    const double C1526 = C1523 - C1524;
    const double C39857 = C39126 * C836;
    const double C57287 = C39126 * C1704;
    const double C14079 = C90485 * C2576;
    const double C41794 = C39126 * C2576;
    const double C48573 = C39126 * C3899;
    const double C72657 = C90485 * C3899;
    const double C27597 = C90485 * C4662;
    const double C60698 = C39126 * C4662;
    const double C33670 = C33668 * C7402;
    const double C33784 = C33668 * C6772;
    const double C35420 = C33668 * C924;
    const double C36893 = C33668 * C88309;
    const double C77117 = C33668 * C181;
    const double C81570 = C33668 * C1876;
    const double C83634 = C33668 * C9225;
    const double C88662 = C88531 * C88659;
    const double C89007 = C89006 - C89003;
    const double C89066 = C89065 - C89062;
    const double C39861 = C39126 * C847;
    const double C57291 = C39126 * C1715;
    const double C335 = C307 * C122;
    const double C582 = C554 * C122;
    const double C1114 = C307 * C841;
    const double C1416 = C554 * C841;
    const double C39352 = C39330 * C841;
    const double C39860 = C39130 * C841;
    const double C1982 = C307 * C1709;
    const double C2284 = C554 * C1709;
    const double C56052 = C56030 * C1709;
    const double C57290 = C39130 * C1709;
    const double C2842 = C307 * C2579;
    const double C3120 = C554 * C2579;
    const double C14080 = C13579 * C2579;
    const double C40216 = C39330 * C2579;
    const double C41805 = C39130 * C2579;
    const double C8431 = C307 * C3902;
    const double C8769 = C554 * C3902;
    const double C41163 = C39330 * C3902;
    const double C48576 = C39130 * C3902;
    const double C56938 = C56030 * C3902;
    const double C72658 = C13579 * C3902;
    const double C4928 = C307 * C4665;
    const double C5206 = C554 * C4665;
    const double C27598 = C13579 * C4665;
    const double C57957 = C56030 * C4665;
    const double C60709 = C39130 * C4665;
    const double C88645 = C88637 - C88607;
    const double C21026 = C21022 * C90503;
    const double C24212 = C21022 * C90503;
    const double C72655 = C21022 * C822;
    const double C79497 = C21022 * C90771;
    const double C18367 = C18363 * C90498;
    const double C33664 = C18363 * C7396;
    const double C36894 = C18363 * C90744;
    const double C16308 = C16301 + C16302;
    const double C16868 = C16862 + C16863;
    const double C76026 = C16863 + C16862;
    const double C31770 = C31044 + C31045;
    const double C88667 = C88616 + C88664;
    const double C5475 = (C88673 * C88604 + C89296 * C88967) / C88268;
    const double C89588 = C89553 + C89585;
    const double C90062 = C90031 + C90059;
    const double C15809 =
        (3 * (C88802 + C88673 * C89172 + C89169 * ae) +
         C88673 * (2 * C89172 + C88673 * C89458 + C89446 * ae) +
         (2 * C89169 + C88673 * C89446) * ae) /
        C88268;
    const double C17890 =
        (C88802 + C88673 * C89172 + C89169 * ae + C89458 * C88967) / C88268;
    const double C21346 =
        (C88731 * (2 * C89172 + C88673 * C89458 + C89446 * ae)) / C88268;
    const double C30809 =
        (3 * (C88903 + C88731 * C89363 + C89360 * ae) +
         C88731 * (2 * C89363 + C88731 * C89891 + C89882 * ae) +
         (2 * C89360 + C88731 * C89882) * ae) /
        C88268;
    const double C21446 =
        2 * ((-(C88731 * C88817 * ce) / C88290) / C88268 -
             (ae * C88731 * C88702) / C88532 - (C88673 * C89776) / C88532) -
        (ae * C88731 * C89457) / C88532 - (C88731 * C89458 * ce) / C88532 +
        C88673 *
            ((-(ae * C88731 * C89450) / C88290) / C88268 - C89776 / C88532 -
             (C88731 * C89451 * ce) / C88532 +
             C88673 *
                 ((-(C88731 * C89441 * ce) / C88290) / C88268 -
                  (ae * C88731 * C89438) / C88532 -
                  (C88673 * C88731 * C88531 *
                   (C88612 * C88613 + C88845 * bs[7] * std::pow(C88535, 7)) *
                   C88540) /
                      C88532));
    const double C15635 =
        (-3 * (C88673 * C89171 + C88687 + C89169 * ce)) / C88290 +
        C88673 * ((-2 * C89171) / C88290 - (C88673 * C89457) / C88290 -
                  (C89446 * ce) / C88290) -
        ((2 * C89169 + C88673 * C89446) * ce) / C88290;
    const double C17734 =
        -(C89457 * C88967 + C88673 * C89171 + C88687 + C89169 * ce) / C88290;
    const double C21126 =
        C88731 * ((-2 * C89171) / C88290 - (C88673 * C89457) / C88290 -
                  (C89446 * ce) / C88290);
    const double C30450 =
        (-3 * (C88731 * C89362 + C88745 + C89360 * ce)) / C88290 +
        C88731 * ((-2 * C89362) / C88290 - (C88731 * C89890) / C88290 -
                  (C89882 * ce) / C88290) -
        ((2 * C89360 + C88731 * C89882) * ce) / C88290;
    const double C88666 = C88663 / C88290;
    const double C8123 =
        2 * ((-(C88731 * C88995 * ce) / C88290) / C88268 -
             (ae * C88731 * C88996) / C88532 - (C88531 * C89371) / C88532) -
        (ae * C88731 * C89311) / C88532 - (C88731 * C89296 * ce) / C88532 +
        C88531 *
            ((-(ae * C88731 * C88673 * C88648) / C88290) / C88268 -
             C89371 / C88532 - (C88731 * C88673 * C88651 * ce) / C88532 +
             C88531 *
                 ((-(C88731 * C88673 * C88635 * ce) / C88290) / C88268 -
                  (ae * C88731 * C88673 * C88632) / C88532 -
                  (C88531 * C88731 * C88673 *
                   (C88612 * C88613 + C88539 * bs[7] * std::pow(C88535, 7)) *
                   C88540) /
                      C88532));
    const double C5472 = -(C89311 * C88967 + C88673 * C88603) / C88290;
    const double C89587 = C89584 / C88290;
    const double C90061 = C90058 / C88290;
    const double C33671 = C33669 * C90503;
    const double C36896 = C33669 * C90503;
    const double C31056 = C31053 * C90498;
    const double C89115 = C89114 - C88607;
    const double C89256 = C89255 - C88607;
    const double C88866 = C88865 - C88858;
    const double C89731 = C89730 - C88858;
    const double C88988 = C88987 - C88980;
    const double C89643 = C89642 - C88980;
    const double C31563 =
        (3 * (C89321 + C88731 * C89763 + C89760 * ae) +
         C88731 * (2 * C89763 + C88731 * C89954 + C89942 * ae) +
         (2 * C89760 + C88731 * C89942) * ae) /
        C88268;
    const double C31225 =
        (-3 * (C88731 * C89762 + C89320 + C89760 * ce)) / C88290 +
        C88731 * ((-2 * C89762) / C88290 - (C88731 * C89953) / C88290 -
                  (C89942 * ce) / C88290) -
        ((2 * C89760 + C88731 * C89942) * ce) / C88290;
    const double C42562 = C16152 * C2567;
    const double C48341 = C16152 * C7400;
    const double C49535 = C21762 * C90555;
    const double C51597 = C21762 * C90555;
    const double C45038 = C45037 * C90541;
    const double C16365 = C13579 * C15634;
    const double C16701 = C554 * C15634;
    const double C16951 = C13579 * C16942;
    const double C17472 = C554 * C16942;
    const double C75848 = C56030 * C16942;
    const double C76463 = C39330 * C16942;
    const double C18448 = C13579 * C17733;
    const double C18941 = C554 * C17733;
    const double C29856 = C307 * C17733;
    const double C76803 = C56030 * C17733;
    const double C78350 = C39330 * C17733;
    const double C89578 = C89572 - C88858;
    const double C61247 = C30734 * C4655;
    const double C68727 = C30734 * C10691;
    const double C78139 = C31230 * C4655;
    const double C87671 = C31230 * C10691;
    const double C90049 = C90045 - C88980;
    const double C31891 = C13579 * C30449;
    const double C32063 = C307 * C30449;
    const double C89583 = C88673 * C89579;
    const double C89452 = C89442 - C89449;
    const double C42246 = C39128 * C3600;
    const double C58689 = C58585 * C2662;
    const double C58792 = C58585 * C244;
    const double C60105 = C58585 * C3364;
    const double C64448 = C58585 * C7479;
    const double C34014 = C34012 * C7402;
    const double C34123 = C34012 * C6772;
    const double C35718 = C34012 * C924;
    const double C37195 = C34012 * C88309;
    const double C61960 = C34012 * C3364;
    const double C65636 = C34012 * C1876;
    const double C67736 = C34012 * C9225;
    const double C76464 = C39128 * C17209;
    const double C76346 = C39128 * C17131;
    const double C29749 = C90623 * C17889;
    const double C78241 = C39128 * C17889;
    const double C89674 = C89673 - C89670;
    const double C8548 = C8546 * C90555;
    const double C10195 = C8546 * C90555;
    const double C58688 = C8546 * C2566;
    const double C64447 = C8546 * C90774;
    const double C58693 = C58692 * C2567;
    const double C64449 = C58692 * C7400;
    const double C5020 = C5018 * C90541;
    const double C34124 = C5018 * C6692;
    const double C35719 = C5018 * C90752;
    const double C34129 = C34128 * C90555;
    const double C35721 = C34128 * C90555;
    const double C30651 = C30649 * C90541;
    const double C1224 = C1221 - C1222;
    const double C2084 = C2082 + C2072;
    const double C57740 = C2072 + C2082;
    const double C32006 = C30652 + C30648;
    const double C90057 = C88731 * C90054;
    const double C89885 = C89873 - C89879;
    const double C61563 = C55626 * C6613;
    const double C89948 = C89938 - C89945;
    const double C78773 = C55626 * C19517;
    const double C16761 = C16760 * C90567;
    const double C16242 = C16239 * C90567;
    const double C8999 = C8997 * C90579;
    const double C10611 = C8997 * C90579;
    const double C45140 = C8997 * C4654;
    const double C52619 = C8997 * C90777;
    const double C21868 = C21867 * C90579;
    const double C23444 = C21867 * C90579;
    const double C5394 = C5392 * C4655;
    const double C11305 = C5392 * C10691;
    const double C45145 = C45144 * C4655;
    const double C52621 = C45144 * C10691;
    const double C1621 = C1618 + C1608;
    const double C40758 = C1608 + C1618;
    const double C2489 = C2486 - C2487;
    const double C16236 = C3308 + C3300;
    const double C42661 = C3300 + C3308;
    const double C16755 = C16241 + C16232;
    const double C14189 = C90485 * C930;
    const double C39983 = C39125 * C930;
    const double C39979 = C39126 * C930;
    const double C27712 = C90485 * C1797;
    const double C57411 = C39125 * C1797;
    const double C57407 = C39126 * C1797;
    const double C14187 = C90485 * C2668;
    const double C41920 = C39125 * C2668;
    const double C41916 = C39126 * C2668;
    const double C21130 = C90485 * C3996;
    const double C43509 = C39126 * C3996;
    const double C48715 = C39125 * C3996;
    const double C27705 = C90485 * C4751;
    const double C60822 = C39126 * C4751;
    const double C60818 = C39125 * C4751;
    const double C16366 = C90485 * C15636;
    const double C88728 = C88722 + C88727;
    const double C89394 = C89392 - C88618;
    const double C15642 = C90485 * C3435;
    const double C42807 = C39126 * C3435;
    const double C21132 = C90485 * C3999;
    const double C43511 = C39126 * C3999;
    const double C33788 = C90485 * C5559;
    const double C45355 = C39126 * C5559;
    const double C30366 = C90485 * C6229;
    const double C62599 = C39126 * C6229;
    const double C89517 = C89504 + C89516;
    const double C31145 = C90485 * C19148;
    const double C336 = C90623 * C318;
    const double C1111 = C90623 * C1100;
    const double C39347 = C39128 * C1100;
    const double C40219 = C39127 * C1100;
    const double C1979 = C90623 * C1968;
    const double C41166 = C39127 * C1968;
    const double C2839 = C90623 * C2832;
    const double C40211 = C39128 * C2832;
    const double C42140 = C39127 * C2832;
    const double C8428 = C90623 * C4168;
    const double C41158 = C39128 * C4168;
    const double C48991 = C39127 * C4168;
    const double C4925 = C90623 * C4918;
    const double C44619 = C39127 * C4918;
    const double C88841 = C88836 + C88840;
    const double C89410 = C89407 - C89408;
    const double C21347 =
        2 * (C88673 * C89774 - (ae * C88731 * C88594) / C88532) -
        (ae * C88731 * C89411) / C88532 +
        C88673 *
            (C89774 - (ae * C88731 * C88673 * C88648) / C88532 +
             C88673 * (C88673 * C88731 *
                           ((-(C88531 * std::pow(C88535, 7) * bs[7] * C88795) /
                             C88290) /
                                C88268 -
                            (C88826 * ce) / C88532) -
                       (ae * C88731 * C88648) / C88532));
    const double C30536 =
        3 * (C88815 + C88839 * C88967) +
        C88731 *
            (2 * C89774 +
             C88731 *
                 (C88839 +
                  ((-(C88531 * std::pow(C88535, 7) * bs[7] * C88795) / C88290) /
                       C88268 -
                   (C88826 * ce) / C88532) *
                      C88967));
    const double C33992 =
        (((-2 * C89828) / C88290 - (C88731 * C89832) / C88290) * ae) / C88268 +
        C88673 *
            (2 * C89774 +
             C88731 *
                 (C88839 +
                  ((-(C88531 * std::pow(C88535, 7) * bs[7] * C88795) / C88290) /
                       C88268 -
                   (C88826 * ce) / C88532) *
                      C88967));
    const double C42138 = C39128 * C3547;
    const double C48989 = C39128 * C4171;
    const double C58584 = C90623 * C4171;
    const double C34011 = C90623 * C5719;
    const double C44617 = C39128 * C5719;
    const double C30553 = C90623 * C6345;
    const double C89542 = C89536 + C89541;
    const double C17134 =
        3 * ((-(ae * C88731 * C88996) / C88290) / C88268 - C89651 / C88532 +
             C88673 * C89658) +
        (C88731 * C89540 * ae) / C88268 +
        C88673 *
            (2 * C89658 - (ae * C88731 * C89532) / C88532 +
             C88673 * ((-(ae * C88731 * C88673 * C88632) / C88290) / C88268 -
                       C89653 / C88532 +
                       C88673 * ((-(C88673 * C88731 * std::pow(C88535, 7) *
                                    bs[7] * C88795) /
                                  C88290) /
                                     C88268 -
                                 (ae * C88731 * C88632) / C88532)));
    const double C31313 = C90623 * C19256;
    const double C79049 = C39128 * C19256;
    const double C31950 = C90623 * C30535;
    const double C14286 = C90485 * C1014;
    const double C40097 = C39125 * C1014;
    const double C40095 = C39126 * C1014;
    const double C27811 = C90485 * C1882;
    const double C57529 = C39125 * C1882;
    const double C57525 = C39126 * C1882;
    const double C14283 = C90485 * C2750;
    const double C42028 = C39125 * C2750;
    const double C42024 = C39126 * C2750;
    const double C21239 = C90485 * C4082;
    const double C43617 = C39126 * C4082;
    const double C48849 = C39125 * C4082;
    const double C27809 = C90485 * C4836;
    const double C60934 = C39125 * C4836;
    const double C60930 = C39126 * C4836;
    const double C31892 = C90485 * C30451;
    const double C88786 = C88780 + C88785;
    const double C89804 = C89802 - C88618;
    const double C33889 =
        2 * (C88731 * C90069 - (C89298 * ce) / C88532) -
        ((C89298 + C90070 * C88967) * ce) / C88532 +
        C88731 *
            (C90069 - (C88731 * C90070 * ce) / C88532 +
             C88731 * (C88731 * C88673 *
                           ((-(C88531 * std::pow(C88535, 7) * bs[7] * C88738) /
                             C88290) /
                                C88268 -
                            (ae * C88769) / C88532) -
                       (C90070 * ce) / C88532));
    const double C15729 = C90485 * C3491;
    const double C42881 = C39126 * C3491;
    const double C21244 = C90485 * C4085;
    const double C43623 = C39126 * C4085;
    const double C33892 = C90485 * C5639;
    const double C45461 = C39126 * C5639;
    const double C30457 = C90485 * C6289;
    const double C62669 = C39126 * C6289;
    const double C17048 = C90485 * C17031;
    const double C18541 = C90485 * C17813;
    const double C31226 =
        3 * ((-(C89895 * ce) / C88290) / C88268 - C89744 / C88532 +
             C88731 * C89905) -
        ((2 * C89895 + C88731 * C89902) * ce) / C88532 +
        C88731 * (2 * C89905 - (C89902 * ce) / C88532 +
                  C88731 * ((-(C88731 * C89898 * ce) / C88290) / C88268 -
                            C89896 / C88532 +
                            C88731 * ((-(C88731 * C88673 * std::pow(C88535, 7) *
                                         bs[7] * C88738) /
                                       C88290) /
                                          C88268 -
                                      (C89898 * ce) / C88532)));
    const double C89975 = C89963 + C89974;
    const double C76572 = C39128 * C17285;
    const double C1313 = C90623 * C1302;
    const double C39529 = C39128 * C1302;
    const double C2179 = C90623 * C2162;
    const double C3027 = C90623 * C3019;
    const double C40443 = C39128 * C3019;
    const double C8658 = C90623 * C4329;
    const double C41390 = C39128 * C4329;
    const double C5113 = C90623 * C5097;
    const double C15963 =
        3 * ((-(ae * C89323) / C88290) / C88268 - C89181 / C88532 +
             C88673 * C89477) +
        (((-2 * C89323) / C88290 - (C88673 * C89474) / C88290) * ae) / C88268 +
        C88673 * (2 * C89477 - (ae * C89474) / C88532 +
                  C88673 * ((-(ae * C88673 * C89470) / C88290) / C88268 -
                            C89468 / C88532 +
                            C88673 * ((-(C88673 * C88531 * std::pow(C88535, 7) *
                                         bs[7] * C88872) /
                                       C88290) /
                                          C88268 -
                                      (ae * C89470) / C88532)));
    const double C21545 =
        2 * (C88673 * C89783 - (ae * C89362) / C88532) -
        (ae * (C88731 * C89474 + C89446 * ce)) / C88532 +
        C88673 * (C89783 - (ae * (C88731 * C88673 * C89470 + C89445)) / C88532 +
                  C88673 * (C88673 * ((-(C88731 * C88531 * std::pow(C88535, 7) *
                                         bs[7] * C88872) /
                                       C88290) /
                                          C88268 -
                                      (C89441 * ce) / C88532) -
                            (ae * (C88731 * C89470 + C88633)) / C88532));
    const double C30727 =
        3 * ((-(C89815 * ce) / C88290) / C88268 - C89181 / C88532 +
             C88731 * C89783) -
        ((2 * C89815 + C88731 * C89817) * ce) / C88532 +
        C88731 * (2 * C89783 - (C89817 * ce) / C88532 +
                  C88731 * ((-(C88731 * C89441 * ce) / C88290) / C88268 -
                            C89468 / C88532 +
                            C88731 * ((-(C88731 * C88531 * std::pow(C88535, 7) *
                                         bs[7] * C88872) /
                                       C88290) /
                                          C88268 -
                                      (C89441 * ce) / C88532)));
    const double C34227 =
        (((-2 * C89362) / C88290 - (C88731 * C89890) / C88290 -
          (C89882 * ce) / C88290) *
         ae) /
            C88268 +
        C88673 * (2 * C89783 - (C89817 * ce) / C88532 +
                  C88731 * ((-(C88731 * C89441 * ce) / C88290) / C88268 -
                            C89468 / C88532 +
                            C88731 * ((-(C88731 * C88531 * std::pow(C88535, 7) *
                                         bs[7] * C88872) /
                                       C88290) /
                                          C88268 -
                                      (C89441 * ce) / C88532)));
    const double C89612 = C89610 + C89611;
    const double C89692 = C89691 - C89689;
    const double C89735 = C89733 + C89734;
    const double C29947 = C90623 * C18043;
    const double C78453 = C39128 * C18043;
    const double C583 = C90634 * C565;
    const double C1413 = C90634 * C1402;
    const double C56941 = C55625 * C1402;
    const double C2281 = C90634 * C2270;
    const double C56047 = C55626 * C2270;
    const double C57960 = C55625 * C2270;
    const double C3117 = C90634 * C3110;
    const double C58902 = C55625 * C3110;
    const double C8766 = C90634 * C4414;
    const double C56933 = C55626 * C4414;
    const double C65777 = C55625 * C4414;
    const double C5203 = C90634 * C5196;
    const double C57952 = C55626 * C5196;
    const double C61353 = C55625 * C5196;
    const double C88942 = C88937 + C88941;
    const double C89831 = C89829 - C89408;
    const double C34330 =
        2 * (C88731 * C90075 - (ae * C89313) / C88532) -
        (ae * (C90076 * C88967 + C89313)) / C88532 +
        C88731 *
            (C90075 - (ae * C88731 * C90076) / C88532 +
             C88731 * (C88731 * C88673 *
                           ((-(C88531 * std::pow(C88535, 7) * bs[7] * C88896) /
                             C88290) /
                                C88268 -
                            (C88927 * ce) / C88532) -
                       (ae * C90076) / C88532));
    const double C16058 = C90634 * C3709;
    const double C21656 = C90634 * C4417;
    const double C58900 = C55626 * C4417;
    const double C44933 = C90634 * C5953;
    const double C65775 = C55626 * C5953;
    const double C61351 = C55626 * C6507;
    const double C17377 = C90634 * C17363;
    const double C75777 = C55626 * C17363;
    const double C18855 = C90634 * C18121;
    const double C76692 = C55626 * C18121;
    const double C31564 =
        3 * ((-(ae * C89914) / C88290) / C88268 - C89754 / C88532 +
             C88731 * C89923) +
        (((-2 * C89914) / C88290 - (C88731 * C89920) / C88290) * ae) / C88268 +
        C88731 * (2 * C89923 - (ae * C89920) / C88532 +
                  C88731 * ((-(ae * C88731 * C89916) / C88290) / C88268 -
                            C89915 / C88532 +
                            C88731 * ((-(C88731 * C88673 * std::pow(C88535, 7) *
                                         bs[7] * C88896) /
                                       C88290) /
                                          C88268 -
                                      (ae * C89916) / C88532)));
    const double C90000 = C89994 + C89999;
    const double C16702 = C90634 * C16144;
    const double C1517 = C90634 * C1500;
    const double C2379 = C90634 * C2367;
    const double C56145 = C55626 * C2367;
    const double C3217 = C90634 * C3201;
    const double C8883 = C90634 * C4497;
    const double C57055 = C55626 * C4497;
    const double C5295 = C90634 * C5287;
    const double C58074 = C55626 * C5287;
    const double C16145 =
        3 * ((-(C89324 * ce) / C88290) / C88268 - C89188 / C88532 +
             C88673 * C89498) -
        ((2 * C89324 + C88673 * C89495) * ce) / C88532 +
        C88673 * (2 * C89498 - (C89495 * ce) / C88532 +
                  C88673 * ((-(C88673 * C89491 * ce) / C88290) / C88268 -
                            C89489 / C88532 +
                            C88673 * ((-(C88673 * C88531 * std::pow(C88535, 7) *
                                         bs[7] * C88948) /
                                       C88290) /
                                          C88268 -
                                      (C89491 * ce) / C88532)));
    const double C18198 =
        (-(C89324 * ce) / C88290) / C88268 - C89188 / C88532 + C88673 * C89498 -
        (ae * C88731 * C89457) / C88532 +
        C88731 * (C88731 * ((-(C88673 * C89491 * ce) / C88290) / C88268 -
                            C89489 / C88532 +
                            C88673 * ((-(C88673 * C88531 * std::pow(C88535, 7) *
                                         bs[7] * C88948) /
                                       C88290) /
                                          C88268 -
                                      (C89491 * ce) / C88532)) -
                  (ae * C89457) / C88532);
    const double C21758 =
        (((-2 * C89171) / C88290 - (C88673 * C89457) / C88290 -
          (C89446 * ce) / C88290) *
         ae) /
            C88268 +
        C88731 * (2 * C89498 - (C89495 * ce) / C88532 +
                  C88673 * ((-(C88673 * C89491 * ce) / C88290) / C88268 -
                            C89489 / C88532 +
                            C88673 * ((-(C88673 * C88531 * std::pow(C88535, 7) *
                                         bs[7] * C88948) /
                                       C88290) /
                                          C88268 -
                                      (C89491 * ce) / C88532)));
    const double C34429 =
        2 * (C88731 * C89498 - (ae * C89171) / C88532) -
        (ae * (C89450 * C88967 + C89171)) / C88532 +
        C88731 * (C89498 - (ae * C88731 * C89450) / C88532 +
                  C88731 * (C88731 * ((-(C88673 * C88531 * std::pow(C88535, 7) *
                                         bs[7] * C88948) /
                                       C88290) /
                                          C88268 -
                                      (C89491 * ce) / C88532) -
                            (ae * C89450) / C88532));
    const double C30887 =
        3 * ((-(ae * C89843) / C88290) / C88268 - C89188 / C88532 +
             C88731 * C89850) +
        (((-2 * C89843) / C88290 - (C88731 * C89847) / C88290) * ae) / C88268 +
        C88731 * (2 * C89850 - (ae * C89847) / C88532 +
                  C88731 * ((-(ae * C88731 * C89438) / C88290) / C88268 -
                            C89489 / C88532 +
                            C88731 * ((-(C88731 * C88531 * std::pow(C88535, 7) *
                                         bs[7] * C88948) /
                                       C88290) /
                                          C88268 -
                                      (ae * C89438) / C88532)));
    const double C89637 = C89635 + C89636;
    const double C89929 = C89926 - C89927;
    const double C78667 = C55626 * C19466;
    const double C90019 = C90013 + C90018;
    const double C17057 = C17054 - C17055;
    const double C31150 = C31148 - C31140;
    const double C88316 = C88315 - C88305;
    const double C20296 = C20288 + C20289;
    const double C20755 = C20747 + C20748;
    const double C81297 = C21011 + C21012;
    const double C81296 = C21012 + C21011;
    const double C36188 = C33658 + C33659;
    const double C36418 = C33998 + C33999;
    const double C88396 = C88394 - C88381;
    const double C7008 = C7000 + C7001;
    const double C7246 = C7238 + C7239;
    const double C65501 = C8537 + C8538;
    const double C65500 = C8538 + C8537;
    const double C38527 = C33776 + C33777;
    const double C38757 = C34119 + C34120;
    const double C88441 = C88439 - C88426;
    const double C9461 = C9453 + C9454;
    const double C9699 = C9691 + C9692;
    const double C51729 = C10609 + C10610;
    const double C51728 = C10610 + C10609;
    const double C25231 = C22833 + C22834;
    const double C25682 = C23437 + C23438;
    const double C31051 = C31043 * C90623;
    const double C424 = C422 * C90634;
    const double C67603 = C10192 - C67601;
    const double C67602 = C67600 - C10192;
    const double C31409 = C31407 - C31400;
    const double C49669 = C8987 - C49667;
    const double C49668 = C49666 - C8987;
    const double C16237 = C16229 * C90485;
    const double C17573 = C17569 - C17560;
    const double C2189 = C2188 * C90634;
    const double C39871 = C39856 + C39857;
    const double C57301 = C57286 + C57287;
    const double C14092 = C14078 + C14079;
    const double C41808 = C41793 + C41794;
    const double C48579 = C48572 + C48573;
    const double C72660 = C72656 + C72657;
    const double C27610 = C27596 + C27597;
    const double C60712 = C60697 + C60698;
    const double C39873 = C39860 + C39861;
    const double C57303 = C57290 + C57291;
    const double C14093 = C14080 + C14081;
    const double C41814 = C41805 + C41806;
    const double C48581 = C48576 + C48577;
    const double C72661 = C72658 + C72659;
    const double C27611 = C27598 + C27599;
    const double C60718 = C60709 + C60710;
    const double C88652 = C88645 - C88618;
    const double C31050 = C18367 + C18366;
    const double C77929 = C18366 + C18367;
    const double C31775 = C31770 * C90623;
    const double C88669 = C88667 + C88644;
    const double C89590 = C89588 + C89571;
    const double C90064 = C90062 + C90033;
    const double C88668 = C88622 - C88666;
    const double C89589 = C89559 - C89587;
    const double C90063 = C90038 - C90061;
    const double C2585 =
        2 * ((-((C88559 + C88586 * C88845) * ce) / C88290) / C88268 -
             (ae * (C88583 * C88845 + C88558)) / C88532 + C88531 * C89115) -
        (ae * (C88660 * C88845 + C88603)) / C88532 -
        ((C88604 + C88661 * C88845) * ce) / C88532 +
        C88531 *
            (C89115 - (ae * (C88648 * C88845 + C88594)) / C88532 -
             ((C88595 + C88651 * C88845) * ce) / C88532 +
             C88531 * ((-((C88586 + C88635 * C88845) * ce) / C88290) / C88268 -
                       (ae * (C88632 * C88845 + C88583)) / C88532 +
                       C88531 * ((-((C88612 * C88613 +
                                     C88539 * bs[7] * std::pow(C88535, 7)) *
                                    C88540 * C88845) /
                                  C88290) /
                                     C88268 -
                                 C88647 / C88532)));
    const double C3374 =
        (-2 * C88993) / C88532 + C88673 * C89115 +
        (((-2 * C88673 * C88594) / C88290 -
          (C88673 * (C88648 * C88845 + C88594)) / C88290) *
         ae) /
            C88268 -
        ((2 * C88673 * C88595 + C88673 * (C88595 + C88651 * C88845)) * ce) /
            C88532 +
        C88531 *
            ((((-2 * C88996) / C88290 -
               (C88673 * (C88632 * C88845 + C88583)) / C88290) *
              ae) /
                 C88268 -
             ((2 * C88995 + C88673 * (C88586 + C88635 * C88845)) * ce) /
                 C88532 +
             C88531 * ((-2 * C88997) / C88532 +
                       C88673 * ((-((C88612 * C88613 +
                                     C88539 * bs[7] * std::pow(C88535, 7)) *
                                    C88540 * C88845) /
                                  C88290) /
                                     C88268 -
                                 C88647 / C88532)));
    const double C3375 =
        (((-2 * C88673 * C88558) / C88290 -
          (C88673 * (C88583 * C88845 + C88558)) / C88290) *
         ae) /
            C88268 -
        ((2 * C88673 * C88559 + C88673 * (C88559 + C88586 * C88845)) * ce) /
            C88532 +
        C88531 * ((-2 * C88993) / C88532 + C88673 * C89115);
    const double C3912 =
        C88731 * C89115 - (ae * C88731 * (C88648 * C88845 + C88594)) / C88532 -
        (C88731 * (C88595 + C88651 * C88845) * ce) / C88532 +
        C88531 *
            ((-(C88731 * (C88586 + C88635 * C88845) * ce) / C88290) / C88268 -
             (ae * C88731 * (C88632 * C88845 + C88583)) / C88532 +
             C88531 * C88731 *
                 ((-((C88612 * C88613 + C88539 * bs[7] * std::pow(C88535, 7)) *
                     C88540 * C88845) /
                   C88290) /
                      C88268 -
                  C88647 / C88532));
    const double C3913 =
        (-(C88731 * (C88559 + C88586 * C88845) * ce) / C88290) / C88268 -
        (ae * C88731 * (C88583 * C88845 + C88558)) / C88532 +
        C88531 * C88731 * C89115;
    const double C15531 =
        3 * ((-(C88593 * C88845) / C88290) / C88268 - C88563 / C88532) +
        C88673 * ((-2 * C88993) / C88532 + C88673 * C89115);
    const double C15532 =
        (((-3 * (C88583 * C88845 + C88558)) / C88290 +
          C88673 * ((-2 * C88996) / C88290 -
                    (C88673 * (C88632 * C88845 + C88583)) / C88290)) *
         ae) /
            C88268 -
        ((3 * (C88559 + C88586 * C88845) +
          C88673 * (2 * C88995 + C88673 * (C88586 + C88635 * C88845))) *
         ce) /
            C88532 +
        C88531 *
            (3 * C89115 +
             C88673 * ((-2 * C88997) / C88532 +
                       C88673 * ((-((C88612 * C88613 +
                                     C88539 * bs[7] * std::pow(C88535, 7)) *
                                    C88540 * C88845) /
                                  C88290) /
                                     C88268 -
                                 C88647 / C88532)));
    const double C16295 =
        4 * ((-2 * C88993) / C88532 + C88673 * C89115) +
        C88673 *
            (3 * C89115 +
             C88673 * ((-2 * C88997) / C88532 +
                       C88673 * ((-((C88612 * C88613 +
                                     C88539 * bs[7] * std::pow(C88535, 7)) *
                                    C88540 * C88845) /
                                  C88290) /
                                     C88268 -
                                 C88647 / C88532)));
    const double C16841 = C88731 * ((-2 * C88993) / C88532 + C88673 * C89115);
    const double C16842 =
        C88731 *
        (3 * C89115 +
         C88673 *
             ((-2 * C88997) / C88532 +
              C88673 *
                  ((-((C88612 * C88613 + C88539 * bs[7] * std::pow(C88535, 7)) *
                      C88540 * C88845) /
                    C88290) /
                       C88268 -
                   C88647 / C88532)));
    const double C17657 = (-(C88593 * C88845) / C88290) / C88268 -
                          C88563 / C88532 + C89115 * C88967;
    const double C17658 =
        (-((C89387 + C89510 * C88967) * ce) / C88290) / C88268 -
        (ae * (C89532 * C88967 + C89402)) / C88532 +
        C88531 * (C89115 +
                  ((-((C88612 * C88613 + C88539 * bs[7] * std::pow(C88535, 7)) *
                      C88540 * C88845) /
                    C88290) /
                       C88268 -
                   C88647 / C88532) *
                      C88967);
    const double C18352 =
        (-2 * C88993) / C88532 + C88673 * C89115 +
        ((-2 * C88997) / C88532 +
         C88673 * ((-((C88612 * C88613 + C88539 * bs[7] * std::pow(C88535, 7)) *
                      C88540 * C88845) /
                    C88290) /
                       C88268 -
                   C88647 / C88532)) *
            C88967;
    const double C19093 =
        2 * C88731 * C89115 +
        C88731 * (C89115 +
                  ((-((C88612 * C88613 + C88539 * bs[7] * std::pow(C88535, 7)) *
                      C88540 * C88845) /
                    C88290) /
                       C88268 -
                   C88647 / C88532) *
                      C88967);
    const double C4671 =
        2 * ((-((C88559 + C88586 * C88967) * ce) / C88290) / C88268 -
             (ae * (C88583 * C88967 + C88558)) / C88532 + C88531 * C89256) -
        (ae * (C88660 * C88967 + C88603)) / C88532 -
        ((C88604 + C88661 * C88967) * ce) / C88532 +
        C88531 *
            (C89256 - (ae * (C88648 * C88967 + C88594)) / C88532 -
             ((C88595 + C88651 * C88967) * ce) / C88532 +
             C88531 * ((-((C88586 + C88635 * C88967) * ce) / C88290) / C88268 -
                       (ae * (C88632 * C88967 + C88583)) / C88532 +
                       C88531 * ((-((C88612 * C88613 +
                                     C88539 * bs[7] * std::pow(C88535, 7)) *
                                    C88540 * C88967) /
                                  C88290) /
                                     C88268 -
                                 C88647 / C88532)));
    const double C6172 =
        (-2 * C89052) / C88532 + C88731 * C89256 +
        (((-2 * C88731 * C88594) / C88290 -
          (C88731 * (C88648 * C88967 + C88594)) / C88290) *
         ae) /
            C88268 -
        ((2 * C88731 * C88595 + C88731 * (C88595 + C88651 * C88967)) * ce) /
            C88532 +
        C88531 *
            ((((-2 * C89055) / C88290 -
               (C88731 * (C88632 * C88967 + C88583)) / C88290) *
              ae) /
                 C88268 -
             ((2 * C89054 + C88731 * (C88586 + C88635 * C88967)) * ce) /
                 C88532 +
             C88531 * ((-2 * C89056) / C88532 +
                       C88731 * ((-((C88612 * C88613 +
                                     C88539 * bs[7] * std::pow(C88535, 7)) *
                                    C88540 * C88967) /
                                  C88290) /
                                     C88268 -
                                 C88647 / C88532)));
    const double C6173 =
        (((-2 * C88731 * C88558) / C88290 -
          (C88731 * (C88583 * C88967 + C88558)) / C88290) *
         ae) /
            C88268 -
        ((2 * C88731 * C88559 + C88731 * (C88559 + C88586 * C88967)) * ce) /
            C88532 +
        C88531 * ((-2 * C89052) / C88532 + C88731 * C89256);
    const double C30253 =
        3 * ((-(C88593 * C88967) / C88290) / C88268 - C88563 / C88532) +
        C88731 * ((-2 * C89052) / C88532 + C88731 * C89256);
    const double C30254 =
        (((-3 * (C88583 * C88967 + C88558)) / C88290 +
          C88731 * ((-2 * C89055) / C88290 -
                    (C88731 * (C88632 * C88967 + C88583)) / C88290)) *
         ae) /
            C88268 -
        ((3 * (C88559 + C88586 * C88967) +
          C88731 * (2 * C89054 + C88731 * (C88586 + C88635 * C88967))) *
         ce) /
            C88532 +
        C88531 *
            (3 * C89256 +
             C88731 * ((-2 * C89056) / C88532 +
                       C88731 * ((-((C88612 * C88613 +
                                     C88539 * bs[7] * std::pow(C88535, 7)) *
                                    C88540 * C88967) /
                                  C88290) /
                                     C88268 -
                                 C88647 / C88532)));
    const double C31768 =
        4 * ((-2 * C89052) / C88532 + C88731 * C89256) +
        C88731 *
            (3 * C89256 +
             C88731 * ((-2 * C89056) / C88532 +
                       C88731 * ((-((C88612 * C88613 +
                                     C88539 * bs[7] * std::pow(C88535, 7)) *
                                    C88540 * C88967) /
                                  C88290) /
                                     C88268 -
                                 C88647 / C88532)));
    const double C399 =
        4 * ((-2 * C88531 * C88855) / C88532 + C88531 * C88866) +
        C88531 *
            (3 * C88866 +
             C88531 * ((-2 * C88531 * C88861) / C88532 +
                       C88531 * ((-((C88612 * C88613 +
                                     C88845 * bs[7] * std::pow(C88535, 7)) *
                                    C88540 * C88539) /
                                  C88290) /
                                     C88268 -
                                 C88861 / C88532)));
    const double C1198 =
        (((-2 * C88687) / C88290 - (C88531 * C88697) / C88290) * ae) / C88268 -
        ((2 * C88802 + C88531 * C88812) * ce) / C88532 +
        C88673 * ((-2 * C88531 * C88855) / C88532 + C88531 * C88866);
    const double C1199 =
        (((-3 * C88697) / C88290 + C88531 * C88726) * ae) / C88268 -
        ((3 * C88812 + C88531 * C88838) * ce) / C88532 +
        C88673 *
            (3 * C88866 +
             C88531 * ((-2 * C88531 * C88861) / C88532 +
                       C88531 * ((-((C88612 * C88613 +
                                     C88845 * bs[7] * std::pow(C88535, 7)) *
                                    C88540 * C88539) /
                                  C88290) /
                                     C88268 -
                                 C88861 / C88532)));
    const double C2065 =
        C88731 * ((-2 * C88531 * C88855) / C88532 + C88531 * C88866);
    const double C2067 =
        C88731 *
        (3 * C88866 +
         C88531 *
             ((-2 * C88531 * C88861) / C88532 +
              C88531 *
                  ((-((C88612 * C88613 + C88845 * bs[7] * std::pow(C88535, 7)) *
                      C88540 * C88539) /
                    C88290) /
                       C88268 -
                   C88861 / C88532)));
    const double C2923 = (-(C88855 * C88539) / C88290) / C88268 -
                         C88850 / C88532 -
                         (ae * (C88673 * C88697 + C88585 * ce)) / C88532 -
                         ((C88673 * C88812 + C88585 * ae) * ce) / C88532 +
                         C88673 * ((-(C88812 * ce) / C88290) / C88268 -
                                   (ae * C88697) / C88532 + C88673 * C88866);
    const double C2924 =
        (-2 * C88531 * C88855) / C88532 + C88531 * C88866 +
        ((C88673 * C88726 - (C88650 * ce) / C88290) * ae) / C88268 -
        ((C88673 * C88838 + C88650 * ae) * ce) / C88532 +
        C88673 *
            ((C88726 * ae) / C88268 - (C88838 * ce) / C88532 +
             C88673 * ((-2 * C88531 * C88861) / C88532 +
                       C88531 * ((-((C88612 * C88613 +
                                     C88845 * bs[7] * std::pow(C88535, 7)) *
                                    C88540 * C88539) /
                                  C88290) /
                                     C88268 -
                                 C88861 / C88532)));
    const double C3601 =
        2 * ((-(C88812 * ce) / C88290) / C88268 - (ae * C88697) / C88532 +
             C88673 * C88866) -
        (ae * (C88673 * C89177 + C88697 + C89175 * ce)) / C88532 -
        ((C88812 + C88673 * C89178 + C89175 * ae) * ce) / C88532 +
        C88673 *
            (C88866 - (ae * C89177) / C88532 - (C89178 * ce) / C88532 +
             C88673 *
                 ((-(C88832 * ce) / C88290) / C88268 - (ae * C88718) / C88532 +
                  C88673 * ((-((C88612 * C88613 +
                                C88845 * bs[7] * std::pow(C88535, 7)) *
                               C88540 * C88539) /
                             C88290) /
                                C88268 -
                            C88861 / C88532)));
    const double C4251 = (-(C88731 * C88812 * ce) / C88290) / C88268 -
                         (ae * C88731 * C88697) / C88532 +
                         C88673 * C88731 * C88866;
    const double C4252 =
        C88731 * C88866 - (ae * C88731 * C89177) / C88532 -
        (C88731 * C89178 * ce) / C88532 +
        C88673 *
            ((-(C88731 * C88832 * ce) / C88290) / C88268 -
             (ae * C88731 * C88718) / C88532 +
             C88673 * C88731 *
                 ((-((C88612 * C88613 + C88845 * bs[7] * std::pow(C88535, 7)) *
                     C88540 * C88539) /
                   C88290) /
                      C88268 -
                  C88861 / C88532));
    const double C5009 = (-(C88855 * C88539) / C88290) / C88268 -
                         C88850 / C88532 + C88866 * C88967;
    const double C5010 =
        (-2 * C89167) / C88532 + C88531 * C88866 +
        ((-2 * C88531 * C88861) / C88532 +
         C88531 * ((-((C88612 * C88613 + C88845 * bs[7] * std::pow(C88535, 7)) *
                      C88540 * C88539) /
                    C88290) /
                       C88268 -
                   C88861 / C88532)) *
            C88967;
    const double C5797 =
        (-((C88812 + C88832 * C88967) * ce) / C88290) / C88268 -
        (ae * (C88718 * C88967 + C88697)) / C88532 +
        C88673 * (C88866 +
                  ((-((C88612 * C88613 + C88845 * bs[7] * std::pow(C88535, 7)) *
                      C88540 * C88539) /
                    C88290) /
                       C88268 -
                   C88861 / C88532) *
                      C88967);
    const double C6397 =
        2 * C88731 * C88866 +
        C88731 * (C88866 +
                  ((-((C88612 * C88613 + C88845 * bs[7] * std::pow(C88535, 7)) *
                      C88540 * C88539) /
                    C88290) /
                       C88268 -
                   C88861 / C88532) *
                      C88967);
    const double C18695 =
        2 * ((-((C88800 + C88808 * C88967) * ce) / C88290) / C88268 -
             (ae * (C88693 * C88967 + C88685)) / C88532 + C88673 * C89731) -
        (ae * (C89580 * C88967 + C89433)) / C88532 -
        ((C89434 + C89581 * C88967) * ce) / C88532 +
        C88673 *
            (C89731 - (ae * (C89560 * C88967 + C89421)) / C88532 -
             ((C89424 + C89563 * C88967) * ce) / C88532 +
             C88673 * ((-((C88808 + C88826 * C88967) * ce) / C88290) / C88268 -
                       (ae * (C88711 * C88967 + C88693)) / C88532 +
                       C88673 * ((-((C88612 * C88613 +
                                     C88845 * bs[7] * std::pow(C88535, 7)) *
                                    C88540 * C88967) /
                                  C88290) /
                                     C88268 -
                                 C88861 / C88532)));
    const double C19307 =
        (-2 * C89660) / C88532 + C88731 * C89731 +
        (((-2 * C88731 * C89421) / C88290 -
          (C88731 * (C89560 * C88967 + C89421)) / C88290) *
         ae) /
            C88268 -
        ((2 * C88731 * C89424 + C88731 * (C89424 + C89563 * C88967)) * ce) /
            C88532 +
        C88673 *
            ((((-2 * C89663) / C88290 -
               (C88731 * (C88711 * C88967 + C88693)) / C88290) *
              ae) /
                 C88268 -
             ((2 * C89662 + C88731 * (C88808 + C88826 * C88967)) * ce) /
                 C88532 +
             C88673 * ((-2 * C89664) / C88532 +
                       C88731 * ((-((C88612 * C88613 +
                                     C88845 * bs[7] * std::pow(C88535, 7)) *
                                    C88540 * C88967) /
                                  C88290) /
                                     C88268 -
                                 C88861 / C88532)));
    const double C19308 =
        (((-2 * C88731 * C88685) / C88290 -
          (C88731 * (C88693 * C88967 + C88685)) / C88290) *
         ae) /
            C88268 -
        ((2 * C88731 * C88800 + C88731 * (C88800 + C88808 * C88967)) * ce) /
            C88532 +
        C88673 * ((-2 * C89660) / C88532 + C88731 * C89731);
    const double C30638 =
        3 * ((-(C88855 * C88967) / C88290) / C88268 - C88850 / C88532) +
        C88731 * ((-2 * C89660) / C88532 + C88731 * C89731);
    const double C31392 =
        (((-3 * C89838) / C88290 +
          C88731 * ((-2 * C89663) / C88290 -
                    (C88731 * (C88711 * C88967 + C88693)) / C88290)) *
         ae) /
            C88268 -
        ((3 * C89813 +
          C88731 * (2 * C89662 + C88731 * (C88808 + C88826 * C88967))) *
         ce) /
            C88532 +
        C88673 *
            (3 * C89731 +
             C88731 * ((-2 * C89664) / C88532 +
                       C88731 * ((-((C88612 * C88613 +
                                     C88845 * bs[7] * std::pow(C88535, 7)) *
                                    C88540 * C88967) /
                                  C88290) /
                                     C88268 -
                                 C88861 / C88532)));
    const double C32004 =
        4 * ((-2 * C89660) / C88532 + C88731 * C89731) +
        C88731 *
            (3 * C89731 +
             C88731 * ((-2 * C89664) / C88532 +
                       C88731 * ((-((C88612 * C88613 +
                                     C88845 * bs[7] * std::pow(C88535, 7)) *
                                    C88540 * C88967) /
                                  C88290) /
                                     C88268 -
                                 C88861 / C88532)));
    const double C724 =
        4 * ((-2 * C88531 * C88977) / C88532 + C88531 * C88988) +
        C88531 *
            (3 * C88988 +
             C88531 * ((-2 * C88531 * C88983) / C88532 +
                       C88531 * ((-((C88612 * C88613 +
                                     C88967 * bs[7] * std::pow(C88535, 7)) *
                                    C88540 * C88539) /
                                  C88290) /
                                     C88268 -
                                 C88983 / C88532)));
    const double C1603 =
        C88673 * ((-2 * C88531 * C88977) / C88532 + C88531 * C88988);
    const double C1604 =
        C88673 *
        (3 * C88988 +
         C88531 *
             ((-2 * C88531 * C88983) / C88532 +
              C88531 *
                  ((-((C88612 * C88613 + C88967 * bs[7] * std::pow(C88535, 7)) *
                      C88540 * C88539) /
                    C88290) /
                       C88268 -
                   C88983 / C88532)));
    const double C2463 =
        (((-2 * C88745) / C88290 - (C88531 * C88755) / C88290) * ae) / C88268 -
        ((2 * C88903 + C88531 * C88913) * ce) / C88532 +
        C88731 * ((-2 * C88531 * C88977) / C88532 + C88531 * C88988);
    const double C2464 =
        (((-3 * C88755) / C88290 + C88531 * C88784) * ae) / C88268 -
        ((3 * C88913 + C88531 * C88939) * ce) / C88532 +
        C88731 *
            (3 * C88988 +
             C88531 * ((-2 * C88531 * C88983) / C88532 +
                       C88531 * ((-((C88612 * C88613 +
                                     C88967 * bs[7] * std::pow(C88535, 7)) *
                                    C88540 * C88539) /
                                  C88290) /
                                     C88268 -
                                 C88983 / C88532)));
    const double C3297 = (-(C88977 * C88539) / C88290) / C88268 -
                         C88972 / C88532 + C88988 * C88845;
    const double C3298 =
        (-2 * C88531 * C88977) / C88532 + C88531 * C88988 +
        ((-2 * C88531 * C88983) / C88532 +
         C88531 * ((-((C88612 * C88613 + C88967 * bs[7] * std::pow(C88535, 7)) *
                      C88540 * C88539) /
                    C88290) /
                       C88268 -
                   C88983 / C88532)) *
            C88845;
    const double C3814 =
        2 * C88673 * C88988 +
        C88673 * (C88988 +
                  ((-((C88612 * C88613 + C88967 * bs[7] * std::pow(C88535, 7)) *
                      C88540 * C88539) /
                    C88290) /
                       C88268 -
                   C88983 / C88532) *
                      C88845);
    const double C4575 = (-(C88673 * C88913 * ce) / C88290) / C88268 -
                         (ae * C88673 * C88755) / C88532 +
                         C88731 * C88673 * C88988;
    const double C4578 =
        (-((C88913 + C88933 * C88845) * ce) / C88290) / C88268 -
        (ae * (C88776 * C88845 + C88755)) / C88532 +
        C88731 * (C88988 +
                  ((-((C88612 * C88613 + C88967 * bs[7] * std::pow(C88535, 7)) *
                      C88540 * C88539) /
                    C88290) /
                       C88268 -
                   C88983 / C88532) *
                      C88845);
    const double C5375 = (-(C88977 * C88539) / C88290) / C88268 -
                         C88972 / C88532 -
                         (ae * (C88731 * C88755 + C88585 * ce)) / C88532 -
                         ((C88731 * C88913 + C88585 * ae) * ce) / C88532 +
                         C88731 * ((-(C88913 * ce) / C88290) / C88268 -
                                   (ae * C88755) / C88532 + C88731 * C88988);
    const double C5376 =
        (-2 * C89192) / C88532 + C88531 * C88988 +
        ((C88731 * C88784 - (C88650 * ce) / C88290) * ae) / C88268 -
        ((C88731 * C88939 + C88650 * ae) * ce) / C88532 +
        C88731 *
            ((C88784 * ae) / C88268 - (C88939 * ce) / C88532 +
             C88731 * ((-2 * C88531 * C88983) / C88532 +
                       C88531 * ((-((C88612 * C88613 +
                                     C88967 * bs[7] * std::pow(C88535, 7)) *
                                    C88540 * C88539) /
                                  C88290) /
                                     C88268 -
                                 C88983 / C88532)));
    const double C6108 =
        C88673 * C88988 - (ae * (C88731 * C89326 + C89175 * ce)) / C88532 -
        ((C88731 * C89327 + C89175 * ae) * ce) / C88532 +
        C88731 *
            ((-(C89327 * ce) / C88290) / C88268 - (ae * C89326) / C88532 +
             C88731 * C88673 *
                 ((-((C88612 * C88613 + C88967 * bs[7] * std::pow(C88535, 7)) *
                     C88540 * C88539) /
                   C88290) /
                      C88268 -
                  C88983 / C88532));
    const double C6614 =
        2 * ((-(C88913 * ce) / C88290) / C88268 - (ae * C88755) / C88532 +
             C88731 * C88988) -
        (ae * (C88731 * C89368 + C88755 + C89366 * ce)) / C88532 -
        ((C88913 + C88731 * C89369 + C89366 * ae) * ce) / C88532 +
        C88731 *
            (C88988 - (ae * C89368) / C88532 - (C89369 * ce) / C88532 +
             C88731 *
                 ((-(C88933 * ce) / C88290) / C88268 - (ae * C88776) / C88532 +
                  C88731 * ((-((C88612 * C88613 +
                                C88967 * bs[7] * std::pow(C88535, 7)) *
                               C88540 * C88539) /
                             C88290) /
                                C88268 -
                            C88983 / C88532)));
    const double C16753 =
        4 * ((-2 * C88673 * C88977) / C88532 + C88673 * C89643) +
        C88673 *
            (3 * C89643 +
             C88673 * ((-2 * C88673 * C88983) / C88532 +
                       C88673 * ((-((C88612 * C88613 +
                                     C88967 * bs[7] * std::pow(C88535, 7)) *
                                    C88540 * C88845) /
                                  C88290) /
                                     C88268 -
                                 C88983 / C88532)));
    const double C17550 =
        (((-2 * C89320) / C88290 - (C88673 * C89463) / C88290) * ae) / C88268 -
        ((2 * C89321 + C88673 * C89484) * ce) / C88532 +
        C88731 * ((-2 * C88673 * C88977) / C88532 + C88673 * C89643);
    const double C17551 =
        (((-3 * C89463) / C88290 + C88673 * C89609) * ae) / C88268 -
        ((3 * C89484 + C88673 * C89632) * ce) / C88532 +
        C88731 *
            (3 * C89643 +
             C88673 * ((-2 * C88673 * C88983) / C88532 +
                       C88673 * ((-((C88612 * C88613 +
                                     C88967 * bs[7] * std::pow(C88535, 7)) *
                                    C88540 * C88845) /
                                  C88290) /
                                     C88268 -
                                 C88983 / C88532)));
    const double C18273 = (-(C88977 * C88845) / C88290) / C88268 -
                          C88972 / C88532 -
                          (ae * (C88731 * C89463 + C89423 * ce)) / C88532 -
                          ((C88731 * C89484 + C89423 * ae) * ce) / C88532 +
                          C88731 * ((-(C89484 * ce) / C88290) / C88268 -
                                    (ae * C89463) / C88532 + C88731 * C89643);
    const double C19018 =
        (-2 * C88673 * C88977) / C88532 + C88673 * C89643 +
        ((C88731 * C89609 - (C89576 * ce) / C88290) * ae) / C88268 -
        ((C88731 * C89632 + C89576 * ae) * ce) / C88532 +
        C88731 *
            ((C89609 * ae) / C88268 - (C89632 * ce) / C88532 +
             C88731 * ((-2 * C88673 * C88983) / C88532 +
                       C88673 * ((-((C88612 * C88613 +
                                     C88967 * bs[7] * std::pow(C88535, 7)) *
                                    C88540 * C88845) /
                                  C88290) /
                                     C88268 -
                                 C88983 / C88532)));
    const double C19518 =
        2 * ((-(C89484 * ce) / C88290) / C88268 - (ae * C89463) / C88532 +
             C88731 * C89643) -
        (ae * (C88731 * C89768 + C89463 + C89766 * ce)) / C88532 -
        ((C89484 + C88731 * C89769 + C89766 * ae) * ce) / C88532 +
        C88731 *
            (C89643 - (ae * C89768) / C88532 - (C89769 * ce) / C88532 +
             C88731 *
                 ((-(C89626 * ce) / C88290) / C88268 - (ae * C89599) / C88532 +
                  C88731 * ((-((C88612 * C88613 +
                                C88967 * bs[7] * std::pow(C88535, 7)) *
                               C88540 * C88845) /
                             C88290) /
                                C88268 -
                            C88983 / C88532)));
    const double C29861 = C29856 + C29857;
    const double C78353 = C78350 + C78351;
    const double C89582 = C89578 - C89556;
    const double C90053 = C90049 - C90035;
    const double C15887 =
        3 * ((-(ae * C89171) / C88290) / C88268 - C89167 / C88532 -
             (C89172 * ce) / C88532 + C88673 * C89452) +
        (((-2 * C89171) / C88290 - (C88673 * C89457) / C88290 -
          (C89446 * ce) / C88290) *
         ae) /
            C88268 -
        ((2 * C89172 + C88673 * C89458 + C89446 * ae) * ce) / C88532 +
        C88673 * (2 * C89452 - (ae * C89457) / C88532 - (C89458 * ce) / C88532 +
                  C88673 * ((-(ae * C89450) / C88290) / C88268 -
                            C89437 / C88532 - (C89451 * ce) / C88532 +
                            C88673 * ((-(C89441 * ce) / C88290) / C88268 -
                                      (ae * C89438) / C88532 -
                                      (C88673 * C88531 *
                                       (C88612 * C88613 +
                                        C88845 * bs[7] * std::pow(C88535, 7)) *
                                       C88540) /
                                          C88532)));
    const double C42248 = C42245 + C42246;
    const double C76468 = C76463 + C76464;
    const double C76356 = C76345 + C76346;
    const double C29758 = C29748 + C29749;
    const double C78247 = C78240 + C78241;
    const double C30642 = C5020 + C5012;
    const double C61143 = C5012 + C5020;
    const double C1225 = C1224 * C90634;
    const double C2085 = C2084 * C90634;
    const double C30963 =
        3 * ((-(ae * C89362) / C88290) / C88268 - C89192 / C88532 -
             (C89363 * ce) / C88532 + C88731 * C89885) +
        (((-2 * C89362) / C88290 - (C88731 * C89890) / C88290 -
          (C89882 * ce) / C88290) *
         ae) /
            C88268 -
        ((2 * C89363 + C88731 * C89891 + C89882 * ae) * ce) / C88532 +
        C88731 * (2 * C89885 - (ae * C89890) / C88532 - (C89891 * ce) / C88532 +
                  C88731 * ((-(ae * C89880) / C88290) / C88268 -
                            C89501 / C88532 - (C89883 * ce) / C88532 +
                            C88731 * ((-(C89491 * ce) / C88290) / C88268 -
                                      (ae * C89470) / C88532 -
                                      (C88731 * C88531 *
                                       (C88612 * C88613 +
                                        C88967 * bs[7] * std::pow(C88535, 7)) *
                                       C88540) /
                                          C88532)));
    const double C61565 = C61562 + C61563;
    const double C31714 =
        3 * ((-(ae * C89762) / C88290) / C88268 - C89758 / C88532 -
             (C89763 * ce) / C88532 + C88731 * C89948) +
        (((-2 * C89762) / C88290 - (C88731 * C89953) / C88290 -
          (C89942 * ce) / C88290) *
         ae) /
            C88268 -
        ((2 * C89763 + C88731 * C89954 + C89942 * ae) * ce) / C88532 +
        C88731 * (2 * C89948 - (ae * C89953) / C88532 - (C89954 * ce) / C88532 +
                  C88731 * ((-(ae * C89946) / C88290) / C88268 -
                            C89933 / C88532 - (C89947 * ce) / C88532 +
                            C88731 * ((-(C89937 * ce) / C88290) / C88268 -
                                      (ae * C89934) / C88532 -
                                      (C88731 * C88673 *
                                       (C88612 * C88613 +
                                        C88967 * bs[7] * std::pow(C88535, 7)) *
                                       C88540) /
                                          C88532)));
    const double C78775 = C78772 + C78773;
    const double C16240 = C16236 * C90485;
    const double C16759 = C16755 * C90485;
    const double C14196 = C14188 + C14189;
    const double C39989 = C39982 + C39983;
    const double C39987 = C39978 + C39979;
    const double C27720 = C27711 + C27712;
    const double C57418 = C57410 + C57411;
    const double C57416 = C57406 + C57407;
    const double C14195 = C14186 + C14187;
    const double C41924 = C41919 + C41920;
    const double C41922 = C41915 + C41916;
    const double C21133 = C21129 + C21130;
    const double C43515 = C43508 + C43509;
    const double C48717 = C48714 + C48715;
    const double C27718 = C27704 + C27705;
    const double C60827 = C60821 + C60822;
    const double C60825 = C60817 + C60818;
    const double C16367 = C16365 + C16366;
    const double C193 =
        4 * (2 * C88700 - (ae * C88697) / C88532 + C88531 * C88728) +
        (((-3 * C88697) / C88290 + C88531 * C88726) * ae) / C88268 +
        C88531 *
            (3 * C88728 + (C88726 * ae) / C88268 +
             C88531 * (2 * C88725 - (ae * C88718) / C88532 +
                       C88531 * ((-(ae * C88531 * C88711) / C88290) / C88268 -
                                 C88708 / C88532 +
                                 C88531 * ((-(C88531 * std::pow(C88535, 7) *
                                              bs[7] * C88680) /
                                            C88290) /
                                               C88268 -
                                           (ae * C88711) / C88532))));
    const double C933 =
        C88673 * (2 * C88700 - (ae * C88697) / C88532 + C88531 * C88728) -
        ((2 * C88565 + C88531 * C88604 + C88585 * ae) * ce) / C88532;
    const double C1798 =
        C88731 * (2 * C88700 - (ae * C88697) / C88532 + C88531 * C88728);
    const double C1800 =
        C88731 *
        (3 * C88728 + (C88726 * ae) / C88268 +
         C88531 *
             (2 * C88725 - (ae * C88718) / C88532 +
              C88531 *
                  ((-(ae * C88531 * C88711) / C88290) / C88268 -
                   C88708 / C88532 +
                   C88531 * ((-(C88531 * std::pow(C88535, 7) * bs[7] * C88680) /
                              C88290) /
                                 C88268 -
                             (ae * C88711) / C88532))));
    const double C2669 = (-(ae * C88687) / C88290) / C88268 - C88684 / C88532 +
                         C88531 * C88700 - (C88673 * C88604 * ce) / C88532 +
                         C88673 * (C88673 * C88728 - (C88604 * ce) / C88532);
    const double C3434 =
        2 * (C88673 * C88728 - (C88604 * ce) / C88532) -
        ((C88604 + C88661 * C88845) * ce) / C88532 +
        C88673 *
            (C88728 - (C88673 * C88661 * ce) / C88532 +
             C88673 * (C88673 * ((-(ae * C88531 * C88711) / C88290) / C88268 -
                                 C88708 / C88532 +
                                 C88531 * ((-(C88531 * std::pow(C88535, 7) *
                                              bs[7] * C88680) /
                                            C88290) /
                                               C88268 -
                                           (ae * C88711) / C88532)) -
                       (C88661 * ce) / C88532));
    const double C3997 = C88731 * (C88673 * C88728 - (C88604 * ce) / C88532);
    const double C3998 =
        C88731 *
        (C88728 - (C88673 * C88661 * ce) / C88532 +
         C88673 *
             (C88673 *
                  ((-(ae * C88531 * C88711) / C88290) / C88268 -
                   C88708 / C88532 +
                   C88531 * ((-(C88531 * std::pow(C88535, 7) * bs[7] * C88680) /
                              C88290) /
                                 C88268 -
                             (ae * C88711) / C88532)) -
              (C88661 * ce) / C88532));
    const double C4752 = (-(ae * C88687) / C88290) / C88268 - C88684 / C88532 +
                         C88531 * C88700 + C88728 * C88967;
    const double C4753 =
        2 * C88700 - (ae * C88697) / C88532 + C88531 * C88728 +
        (2 * C88725 - (ae * C88718) / C88532 +
         C88531 *
             ((-(ae * C88531 * C88711) / C88290) / C88268 - C88708 / C88532 +
              C88531 *
                  ((-(C88531 * std::pow(C88535, 7) * bs[7] * C88680) / C88290) /
                       C88268 -
                   (ae * C88711) / C88532))) *
            C88967;
    const double C5558 =
        C88673 * C88728 - (C88604 * ce) / C88532 +
        (C88673 *
             ((-(ae * C88531 * C88711) / C88290) / C88268 - C88708 / C88532 +
              C88531 *
                  ((-(C88531 * std::pow(C88535, 7) * bs[7] * C88680) / C88290) /
                       C88268 -
                   (ae * C88711) / C88532)) -
         (C88661 * ce) / C88532) *
            C88967;
    const double C6228 =
        2 * C88731 * C88728 +
        C88731 *
            (C88728 +
             ((-(ae * C88531 * C88711) / C88290) / C88268 - C88708 / C88532 +
              C88531 *
                  ((-(C88531 * std::pow(C88535, 7) * bs[7] * C88680) / C88290) /
                       C88268 -
                   (ae * C88711) / C88532)) *
                 C88967);
    const double C15637 =
        3 * (C88700 - (C89298 * ce) / C88532 + C88673 * C89394) -
        ((2 * C89298 + C88673 * C89395) * ce) / C88532 +
        C88673 *
            (2 * C89394 - (C89395 * ce) / C88532 +
             C88673 * (C88725 - (C88673 * C88651 * ce) / C88532 +
                       C88673 * (C88673 * ((-(C88531 * std::pow(C88535, 7) *
                                              bs[7] * C88680) /
                                            C88290) /
                                               C88268 -
                                           (ae * C88711) / C88532) -
                                 (C88651 * ce) / C88532)));
    const double C17736 =
        C88700 - (C89298 * ce) / C88532 + C88673 * C89394 +
        (C88725 - (C88673 * C88651 * ce) / C88532 +
         C88673 * (C88673 * ((-(C88531 * std::pow(C88535, 7) * bs[7] * C88680) /
                              C88290) /
                                 C88268 -
                             (ae * C88711) / C88532) -
                   (C88651 * ce) / C88532)) *
            C88967;
    const double C21127 =
        C88731 *
        (2 * C89394 - (C89395 * ce) / C88532 +
         C88673 *
             (C88725 - (C88673 * C88651 * ce) / C88532 +
              C88673 *
                  (C88673 * ((-(C88531 * std::pow(C88535, 7) * bs[7] * C88680) /
                              C88290) /
                                 C88268 -
                             (ae * C88711) / C88532) -
                   (C88651 * ce) / C88532)));
    const double C33770 =
        2 * C88731 * C89394 +
        C88731 * (C89394 +
                  (C88673 * ((-(C88531 * std::pow(C88535, 7) * bs[7] * C88680) /
                              C88290) /
                                 C88268 -
                             (ae * C88711) / C88532) -
                   (C88651 * ce) / C88532) *
                      C88967);
    const double C15644 = C15641 + C15642;
    const double C42810 = C42806 + C42807;
    const double C21134 = C21131 + C21132;
    const double C43516 = C43510 + C43511;
    const double C33789 = C33787 + C33788;
    const double C45358 = C45354 + C45355;
    const double C30372 = C30365 + C30366;
    const double C62601 = C62598 + C62599;
    const double C16363 =
        4 * (2 * C89390 - (C89387 * ce) / C88532 + C88673 * C89517) -
        ((3 * C89387 + C88673 * C89514) * ce) / C88532 +
        C88673 *
            (3 * C89517 - (C89514 * ce) / C88532 +
             C88673 * (2 * C89515 - (C89510 * ce) / C88532 +
                       C88673 * ((-(C88673 * C88635 * ce) / C88290) / C88268 -
                                 C88708 / C88532 +
                                 C88673 * ((-(C88673 * std::pow(C88535, 7) *
                                              bs[7] * C88680) /
                                            C88290) /
                                               C88268 -
                                           (C88635 * ce) / C88532))));
    const double C16944 =
        C88731 * (2 * C89390 - (C89387 * ce) / C88532 + C88673 * C89517);
    const double C16945 =
        C88731 *
        (3 * C89517 - (C89514 * ce) / C88532 +
         C88673 *
             (2 * C89515 - (C89510 * ce) / C88532 +
              C88673 *
                  ((-(C88673 * C88635 * ce) / C88290) / C88268 -
                   C88708 / C88532 +
                   C88673 * ((-(C88673 * std::pow(C88535, 7) * bs[7] * C88680) /
                              C88290) /
                                 C88268 -
                             (C88635 * ce) / C88532))));
    const double C17735 = (-(C89300 * ce) / C88290) / C88268 - C88684 / C88532 +
                          C88673 * C89390 + C89517 * C88967;
    const double C18444 =
        2 * C89390 - (C89387 * ce) / C88532 + C88673 * C89517 +
        (2 * C89515 - (C89510 * ce) / C88532 +
         C88673 *
             ((-(C88673 * C88635 * ce) / C88290) / C88268 - C88708 / C88532 +
              C88673 *
                  ((-(C88673 * std::pow(C88535, 7) * bs[7] * C88680) / C88290) /
                       C88268 -
                   (C88635 * ce) / C88532))) *
            C88967;
    const double C19147 =
        2 * C88731 * C89517 +
        C88731 *
            (C89517 +
             ((-(C88673 * C88635 * ce) / C88290) / C88268 - C88708 / C88532 +
              C88673 *
                  ((-(C88673 * std::pow(C88535, 7) * bs[7] * C88680) / C88290) /
                       C88268 -
                   (C88635 * ce) / C88532)) *
                 C88967);
    const double C31147 = C31144 + C31145;
    const double C344 = C335 + C336;
    const double C1119 = C1110 + C1111;
    const double C39363 = C39346 + C39347;
    const double C40227 = C40218 + C40219;
    const double C1987 = C1978 + C1979;
    const double C41174 = C41165 + C41166;
    const double C2845 = C2838 + C2839;
    const double C40223 = C40210 + C40211;
    const double C42144 = C42139 + C42140;
    const double C8434 = C8427 + C8428;
    const double C41170 = C41157 + C41158;
    const double C48995 = C48990 + C48991;
    const double C4931 = C4924 + C4925;
    const double C44623 = C44618 + C44619;
    const double C319 =
        4 * (2 * C88815 - (C88812 * ce) / C88532 + C88531 * C88841) -
        ((3 * C88812 + C88531 * C88838) * ce) / C88532 +
        C88531 *
            (3 * C88841 - (C88838 * ce) / C88532 +
             C88531 * (2 * C88839 - (C88832 * ce) / C88532 +
                       C88531 * ((-(C88531 * C88826 * ce) / C88290) / C88268 -
                                 C88823 / C88532 +
                                 C88531 * ((-(C88531 * std::pow(C88535, 7) *
                                              bs[7] * C88795) /
                                            C88290) /
                                               C88268 -
                                           (C88826 * ce) / C88532))));
    const double C1101 =
        (((-2 * C88564) / C88290 - (C88531 * C88603) / C88290 -
          (C88585 * ce) / C88290) *
         ae) /
            C88268 +
        C88673 * (2 * C88815 - (C88812 * ce) / C88532 + C88531 * C88841);
    const double C1969 =
        C88731 * (2 * C88815 - (C88812 * ce) / C88532 + C88531 * C88841);
    const double C1970 =
        C88731 *
        (3 * C88841 - (C88838 * ce) / C88532 +
         C88531 *
             (2 * C88839 - (C88832 * ce) / C88532 +
              C88531 *
                  ((-(C88531 * C88826 * ce) / C88290) / C88268 -
                   C88823 / C88532 +
                   C88531 * ((-(C88531 * std::pow(C88535, 7) * bs[7] * C88795) /
                              C88290) /
                                 C88268 -
                             (C88826 * ce) / C88532))));
    const double C2833 = (-(C88802 * ce) / C88290) / C88268 - C88799 / C88532 +
                         C88531 * C88815 - (ae * C88673 * C88603) / C88532 +
                         C88673 * (C88673 * C88841 - (ae * C88603) / C88532);
    const double C3546 =
        2 * (C88673 * C88841 - (ae * C88603) / C88532) -
        (ae * (C88660 * C88845 + C88603)) / C88532 +
        C88673 *
            (C88841 - (ae * C88673 * C88660) / C88532 +
             C88673 * (C88673 * ((-(C88531 * C88826 * ce) / C88290) / C88268 -
                                 C88823 / C88532 +
                                 C88531 * ((-(C88531 * std::pow(C88535, 7) *
                                              bs[7] * C88795) /
                                            C88290) /
                                               C88268 -
                                           (C88826 * ce) / C88532)) -
                       (ae * C88660) / C88532));
    const double C4169 =
        C88673 * C88731 * C88841 - (ae * C88731 * C88603) / C88532;
    const double C4170 =
        C88731 * C88841 - (ae * C88731 * C88673 * C88660) / C88532 +
        C88673 *
            (C88673 * C88731 *
                 ((-(C88531 * C88826 * ce) / C88290) / C88268 -
                  C88823 / C88532 +
                  C88531 * ((-(C88531 * std::pow(C88535, 7) * bs[7] * C88795) /
                             C88290) /
                                C88268 -
                            (C88826 * ce) / C88532)) -
             (ae * C88731 * C88660) / C88532);
    const double C4919 = (-(C88802 * ce) / C88290) / C88268 - C88799 / C88532 +
                         C88531 * C88815 + C88841 * C88967;
    const double C4920 =
        2 * C88815 - (C88812 * ce) / C88532 + C88531 * C88841 +
        (2 * C88839 - (C88832 * ce) / C88532 +
         C88531 *
             ((-(C88531 * C88826 * ce) / C88290) / C88268 - C88823 / C88532 +
              C88531 *
                  ((-(C88531 * std::pow(C88535, 7) * bs[7] * C88795) / C88290) /
                       C88268 -
                   (C88826 * ce) / C88532))) *
            C88967;
    const double C5718 =
        C88673 *
            (C88841 +
             ((-(C88531 * C88826 * ce) / C88290) / C88268 - C88823 / C88532 +
              C88531 *
                  ((-(C88531 * std::pow(C88535, 7) * bs[7] * C88795) / C88290) /
                       C88268 -
                   (C88826 * ce) / C88532)) *
                 C88967) -
        (ae * (C88660 * C88967 + C88603)) / C88532;
    const double C6344 =
        2 * C88731 * C88841 +
        C88731 *
            (C88841 +
             ((-(C88531 * C88826 * ce) / C88290) / C88268 - C88823 / C88532 +
              C88531 *
                  ((-(C88531 * std::pow(C88535, 7) * bs[7] * C88795) / C88290) /
                       C88268 -
                   (C88826 * ce) / C88532)) *
                 C88967);
    const double C15811 =
        3 * (C88815 - (ae * C89313) / C88532 + C88673 * C89410) +
        (((-2 * C89313) / C88290 - (C88673 * C89411) / C88290) * ae) / C88268 +
        C88673 *
            (2 * C89410 - (ae * C89411) / C88532 +
             C88673 * (C88839 - (ae * C88673 * C88648) / C88532 +
                       C88673 * (C88673 * ((-(C88531 * std::pow(C88535, 7) *
                                              bs[7] * C88795) /
                                            C88290) /
                                               C88268 -
                                           (C88826 * ce) / C88532) -
                                 (ae * C88648) / C88532)));
    const double C42143 = C42137 + C42138;
    const double C48994 = C48988 + C48989;
    const double C58586 = C58583 + C58584;
    const double C34013 = C34010 + C34011;
    const double C44622 = C44616 + C44617;
    const double C30558 = C30552 + C30553;
    const double C16476 =
        4 * (2 * C89405 - (ae * C89402) / C88532 + C88673 * C89542) +
        (((-3 * C89402) / C88290 + C88673 * C89540) * ae) / C88268 +
        C88673 *
            (3 * C89542 + (C89540 * ae) / C88268 +
             C88673 * (2 * C89539 - (ae * C89532) / C88532 +
                       C88673 * ((-(ae * C88673 * C88632) / C88290) / C88268 -
                                 C88823 / C88532 +
                                 C88673 * ((-(C88673 * std::pow(C88535, 7) *
                                              bs[7] * C88795) /
                                            C88290) /
                                               C88268 -
                                           (ae * C88632) / C88532))));
    const double C31316 = C31312 + C31313;
    const double C79053 = C79048 + C79049;
    const double C31952 = C31949 + C31950;
    const double C14294 = C14285 + C14286;
    const double C40104 = C40096 + C40097;
    const double C40103 = C40094 + C40095;
    const double C27818 = C27810 + C27811;
    const double C57535 = C57528 + C57529;
    const double C57533 = C57524 + C57525;
    const double C14293 = C14282 + C14283;
    const double C42033 = C42027 + C42028;
    const double C42031 = C42023 + C42024;
    const double C21245 = C21238 + C21239;
    const double C43624 = C43616 + C43617;
    const double C48852 = C48848 + C48849;
    const double C27817 = C27808 + C27809;
    const double C60938 = C60933 + C60934;
    const double C60936 = C60929 + C60930;
    const double C31893 = C31891 + C31892;
    const double C256 =
        4 * (2 * C88758 - (ae * C88755) / C88532 + C88531 * C88786) +
        (((-3 * C88755) / C88290 + C88531 * C88784) * ae) / C88268 +
        C88531 *
            (3 * C88786 + (C88784 * ae) / C88268 +
             C88531 * (2 * C88783 - (ae * C88776) / C88532 +
                       C88531 * ((-(ae * C88531 * C88769) / C88290) / C88268 -
                                 C88766 / C88532 +
                                 C88531 * ((-(C88531 * std::pow(C88535, 7) *
                                              bs[7] * C88738) /
                                            C88290) /
                                               C88268 -
                                           (ae * C88769) / C88532))));
    const double C1017 =
        C88673 * (2 * C88758 - (ae * C88755) / C88532 + C88531 * C88786);
    const double C1018 =
        C88673 *
        (3 * C88786 + (C88784 * ae) / C88268 +
         C88531 *
             (2 * C88783 - (ae * C88776) / C88532 +
              C88531 *
                  ((-(ae * C88531 * C88769) / C88290) / C88268 -
                   C88766 / C88532 +
                   C88531 * ((-(C88531 * std::pow(C88535, 7) * bs[7] * C88738) /
                              C88290) /
                                 C88268 -
                             (ae * C88769) / C88532))));
    const double C1885 =
        C88731 * (2 * C88758 - (ae * C88755) / C88532 + C88531 * C88786) -
        ((2 * C88565 + C88531 * C88604 + C88585 * ae) * ce) / C88532;
    const double C2751 = (-(ae * C88745) / C88290) / C88268 - C88742 / C88532 +
                         C88531 * C88758 + C88786 * C88845;
    const double C2752 =
        2 * C88758 - (ae * C88755) / C88532 + C88531 * C88786 +
        (2 * C88783 - (ae * C88776) / C88532 +
         C88531 *
             ((-(ae * C88531 * C88769) / C88290) / C88268 - C88766 / C88532 +
              C88531 *
                  ((-(C88531 * std::pow(C88535, 7) * bs[7] * C88738) / C88290) /
                       C88268 -
                   (ae * C88769) / C88532))) *
            C88845;
    const double C3490 =
        2 * C88673 * C88786 +
        C88673 *
            (C88786 +
             ((-(ae * C88531 * C88769) / C88290) / C88268 - C88766 / C88532 +
              C88531 *
                  ((-(C88531 * std::pow(C88535, 7) * bs[7] * C88738) / C88290) /
                       C88268 -
                   (ae * C88769) / C88532)) *
                 C88845);
    const double C4083 =
        C88731 * C88673 * C88786 - (C88673 * C88604 * ce) / C88532;
    const double C4084 =
        C88731 *
            (C88786 +
             ((-(ae * C88531 * C88769) / C88290) / C88268 - C88766 / C88532 +
              C88531 *
                  ((-(C88531 * std::pow(C88535, 7) * bs[7] * C88738) / C88290) /
                       C88268 -
                   (ae * C88769) / C88532)) *
                 C88845) -
        ((C88604 + C88661 * C88845) * ce) / C88532;
    const double C4837 = (-(ae * C88745) / C88290) / C88268 - C88742 / C88532 +
                         C88531 * C88758 - (C88731 * C88604 * ce) / C88532 +
                         C88731 * (C88731 * C88786 - (C88604 * ce) / C88532);
    const double C5638 =
        C88673 * C88786 - (C88731 * C89296 * ce) / C88532 +
        C88731 *
            (C88731 * C88673 *
                 ((-(ae * C88531 * C88769) / C88290) / C88268 -
                  C88766 / C88532 +
                  C88531 * ((-(C88531 * std::pow(C88535, 7) * bs[7] * C88738) /
                             C88290) /
                                C88268 -
                            (ae * C88769) / C88532)) -
             (C89296 * ce) / C88532);
    const double C6288 =
        2 * (C88731 * C88786 - (C88604 * ce) / C88532) -
        ((C88604 + C88661 * C88967) * ce) / C88532 +
        C88731 *
            (C88786 - (C88731 * C88661 * ce) / C88532 +
             C88731 * (C88731 * ((-(ae * C88531 * C88769) / C88290) / C88268 -
                                 C88766 / C88532 +
                                 C88531 * ((-(C88531 * std::pow(C88535, 7) *
                                              bs[7] * C88738) /
                                            C88290) /
                                               C88268 -
                                           (ae * C88769) / C88532)) -
                       (C88661 * ce) / C88532));
    const double C30452 =
        3 * (C88758 - (C89801 * ce) / C88532 + C88731 * C89804) -
        ((2 * C89801 + C88731 * C89805) * ce) / C88532 +
        C88731 *
            (2 * C89804 - (C89805 * ce) / C88532 +
             C88731 * (C88783 - (C88731 * C88651 * ce) / C88532 +
                       C88731 * (C88731 * ((-(C88531 * std::pow(C88535, 7) *
                                              bs[7] * C88738) /
                                            C88290) /
                                               C88268 -
                                           (ae * C88769) / C88532) -
                                 (C88651 * ce) / C88532)));
    const double C15732 = C15728 + C15729;
    const double C42883 = C42880 + C42881;
    const double C21246 = C21243 + C21244;
    const double C43627 = C43622 + C43623;
    const double C33893 = C33891 + C33892;
    const double C45463 = C45460 + C45461;
    const double C30459 = C30456 + C30457;
    const double C62672 = C62668 + C62669;
    const double C17052 = C17047 + C17048;
    const double C18543 = C18540 + C18541;
    const double C31889 =
        4 * (2 * C89799 - (C89796 * ce) / C88532 + C88731 * C89975) -
        ((3 * C89796 + C88731 * C89972) * ce) / C88532 +
        C88731 *
            (3 * C89975 - (C89972 * ce) / C88532 +
             C88731 * (2 * C89973 - (C89968 * ce) / C88532 +
                       C88731 * ((-(C88731 * C88635 * ce) / C88290) / C88268 -
                                 C88766 / C88532 +
                                 C88731 * ((-(C88731 * std::pow(C88535, 7) *
                                              bs[7] * C88738) /
                                            C88290) /
                                               C88268 -
                                           (C88635 * ce) / C88532))));
    const double C76577 = C76571 + C76572;
    const double C1316 = C1312 + C1313;
    const double C39535 = C39528 + C39529;
    const double C2183 = C2178 + C2179;
    const double C3029 = C3026 + C3027;
    const double C40447 = C40442 + C40443;
    const double C8660 = C8657 + C8658;
    const double C41394 = C41389 + C41390;
    const double C5115 = C5112 + C5113;
    const double C16578 =
        4 * (2 * C89466 - (ae * C89463) / C88532 + C88673 * C89612) +
        (((-3 * C89463) / C88290 + C88673 * C89609) * ae) / C88268 +
        C88673 *
            (3 * C89612 + (C89609 * ae) / C88268 +
             C88673 * (2 * C89608 - (ae * C89599) / C88532 +
                       C88673 * ((-(ae * C88673 * C88769) / C88290) / C88268 -
                                 C88882 / C88532 +
                                 C88673 * ((-(C88673 * std::pow(C88535, 7) *
                                              bs[7] * C88872) /
                                            C88290) /
                                               C88268 -
                                           (ae * C88769) / C88532))));
    const double C17286 =
        3 * (C89680 - (ae * (C88731 * C89593 + C89422)) / C88532 +
             C88673 * C89692) +
        ((C88731 * C89609 - (C89576 * ce) / C88290) * ae) / C88268 +
        C88673 *
            (2 * C89692 - (ae * (C88731 * C89599 + C89568)) / C88532 +
             C88673 *
                 (C89690 - (ae * (C88731 * C88673 * C88769 + C89561)) / C88532 +
                  C88673 * (C88673 * ((-(C88731 * std::pow(C88535, 7) * bs[7] *
                                         C88872) /
                                       C88290) /
                                          C88268 -
                                      (C88826 * ce) / C88532) -
                            (ae * (C88731 * C88769 + C88624)) / C88532)));
    const double C18770 =
        2 * (C88673 * C89735 -
             (ae * (C88731 * C89685 + C88743 + C88731 * C88569 * ce)) /
                 C88532) -
        (ae * (C88731 * (C88731 * C89599 + C89568) + C89463 +
               C88731 * C89562 * ce)) /
            C88532 +
        C88673 *
            (C89735 -
             (ae * (C88731 * (C88731 * C88673 * C88769 + C89561) + C89593 +
                    C88731 * C89550 * ce)) /
                 C88532 +
             C88673 * (C88673 * ((-(C88731 * C88826 * ce) / C88290) / C88268 -
                                 C88882 / C88532 +
                                 C88731 * ((-(C88731 * std::pow(C88535, 7) *
                                              bs[7] * C88872) /
                                            C88290) /
                                               C88268 -
                                           (C88826 * ce) / C88532)) -
                       (ae * (C88731 * (C88731 * C88769 + C88624) + C88751 +
                              C88731 * C88611 * ce)) /
                           C88532));
    const double C19359 =
        2 * C89680 - ((C88800 + C88808 * C88967) * ce) / C88532 +
        C88731 * C89735 +
        (((-2 * (C88731 * C89593 + C89422)) / C88290 -
          (C88731 * (C88731 * (C88731 * C88673 * C88769 + C89561) + C89593 +
                     C88731 * C89550 * ce)) /
              C88290 -
          ((C89416 + C89550 * C88967) * ce) / C88290) *
         ae) /
            C88268 +
        C88673 *
            ((((-2 * C89685) / C88290 -
               (C88731 * (C88731 * (C88731 * C88769 + C88624) + C88751 +
                          C88731 * C88611 * ce)) /
                   C88290 -
               ((C88569 + C88611 * C88967) * ce) / C88290) *
              ae) /
                 C88268 +
             C88673 * (2 * C89690 - ((C88808 + C88826 * C88967) * ce) / C88532 +
                       C88731 * ((-(C88731 * C88826 * ce) / C88290) / C88268 -
                                 C88882 / C88532 +
                                 C88731 * ((-(C88731 * std::pow(C88535, 7) *
                                              bs[7] * C88872) /
                                            C88290) /
                                               C88268 -
                                           (C88826 * ce) / C88532))));
    const double C19360 =
        (((-2 * C89356) / C88290 -
          (C88731 * (C88731 * C89685 + C88743 + C88731 * C88569 * ce)) /
              C88290 -
          ((C88548 + C88569 * C88967) * ce) / C88290) *
         ae) /
            C88268 +
        C88673 * (2 * C89680 - ((C88800 + C88808 * C88967) * ce) / C88532 +
                  C88731 * C89735);
    const double C30726 =
        3 * ((-(C89811 * ce) / C88290) / C88268 - C88875 / C88532 +
             C88731 * C89680) -
        ((2 * C89811 + C88731 * C89813) * ce) / C88532 +
        C88731 * (2 * C89680 - (C89813 * ce) / C88532 + C88731 * C89735);
    const double C31485 =
        (((-3 * C89866) / C88290 +
          C88731 * ((-2 * C89685) / C88290 -
                    (C88731 * (C88731 * (C88731 * C88769 + C88624) + C88751 +
                               C88731 * C88611 * ce)) /
                        C88290 -
                    (C89911 * ce) / C88290) -
          ((2 * C89855 + C88731 * C89911) * ce) / C88290) *
         ae) /
            C88268 +
        C88673 *
            (3 * C89735 - ((2 * C89662 + C88731 * C89912) * ce) / C88532 +
             C88731 * (2 * C89690 - (C89912 * ce) / C88532 +
                       C88731 * ((-(C88731 * C88826 * ce) / C88290) / C88268 -
                                 C88882 / C88532 +
                                 C88731 * ((-(C88731 * std::pow(C88535, 7) *
                                              bs[7] * C88872) /
                                            C88290) /
                                               C88268 -
                                           (C88826 * ce) / C88532))));
    const double C32061 =
        4 * (2 * C89680 - (C89813 * ce) / C88532 + C88731 * C89735) -
        ((3 * C89813 + C88731 * C89981) * ce) / C88532 +
        C88731 *
            (3 * C89735 - (C89981 * ce) / C88532 +
             C88731 * (2 * C89690 - (C89912 * ce) / C88532 +
                       C88731 * ((-(C88731 * C88826 * ce) / C88290) / C88268 -
                                 C88882 / C88532 +
                                 C88731 * ((-(C88731 * std::pow(C88535, 7) *
                                              bs[7] * C88872) /
                                            C88290) /
                                               C88268 -
                                           (C88826 * ce) / C88532))));
    const double C29951 = C29946 + C29947;
    const double C78456 = C78452 + C78453;
    const double C591 = C582 + C583;
    const double C1421 = C1412 + C1413;
    const double C56949 = C56940 + C56941;
    const double C2289 = C2280 + C2281;
    const double C56063 = C56046 + C56047;
    const double C57968 = C57959 + C57960;
    const double C3123 = C3116 + C3117;
    const double C58906 = C58901 + C58902;
    const double C8772 = C8765 + C8766;
    const double C56945 = C56932 + C56933;
    const double C65781 = C65776 + C65777;
    const double C5209 = C5202 + C5203;
    const double C57964 = C57951 + C57952;
    const double C61357 = C61352 + C61353;
    const double C566 =
        4 * (2 * C88916 - (C88913 * ce) / C88532 + C88531 * C88942) -
        ((3 * C88913 + C88531 * C88939) * ce) / C88532 +
        C88531 *
            (3 * C88942 - (C88939 * ce) / C88532 +
             C88531 * (2 * C88940 - (C88933 * ce) / C88532 +
                       C88531 * ((-(C88531 * C88927 * ce) / C88290) / C88268 -
                                 C88924 / C88532 +
                                 C88531 * ((-(C88531 * std::pow(C88535, 7) *
                                              bs[7] * C88896) /
                                            C88290) /
                                               C88268 -
                                           (C88927 * ce) / C88532))));
    const double C1403 =
        C88673 * (2 * C88916 - (C88913 * ce) / C88532 + C88531 * C88942);
    const double C1404 =
        C88673 *
        (3 * C88942 - (C88939 * ce) / C88532 +
         C88531 *
             (2 * C88940 - (C88933 * ce) / C88532 +
              C88531 *
                  ((-(C88531 * C88927 * ce) / C88290) / C88268 -
                   C88924 / C88532 +
                   C88531 * ((-(C88531 * std::pow(C88535, 7) * bs[7] * C88896) /
                              C88290) /
                                 C88268 -
                             (C88927 * ce) / C88532))));
    const double C2271 =
        (((-2 * C88564) / C88290 - (C88531 * C88603) / C88290 -
          (C88585 * ce) / C88290) *
         ae) /
            C88268 +
        C88731 * (2 * C88916 - (C88913 * ce) / C88532 + C88531 * C88942);
    const double C3111 = (-(C88903 * ce) / C88290) / C88268 - C88900 / C88532 +
                         C88531 * C88916 + C88942 * C88845;
    const double C3112 =
        2 * C88916 - (C88913 * ce) / C88532 + C88531 * C88942 +
        (2 * C88940 - (C88933 * ce) / C88532 +
         C88531 *
             ((-(C88531 * C88927 * ce) / C88290) / C88268 - C88924 / C88532 +
              C88531 *
                  ((-(C88531 * std::pow(C88535, 7) * bs[7] * C88896) / C88290) /
                       C88268 -
                   (C88927 * ce) / C88532))) *
            C88845;
    const double C3708 =
        2 * C88673 * C88942 +
        C88673 *
            (C88942 +
             ((-(C88531 * C88927 * ce) / C88290) / C88268 - C88924 / C88532 +
              C88531 *
                  ((-(C88531 * std::pow(C88535, 7) * bs[7] * C88896) / C88290) /
                       C88268 -
                   (C88927 * ce) / C88532)) *
                 C88845);
    const double C4415 =
        C88731 * C88673 * C88942 - (ae * C88673 * C88603) / C88532;
    const double C4416 =
        C88731 *
            (C88942 +
             ((-(C88531 * C88927 * ce) / C88290) / C88268 - C88924 / C88532 +
              C88531 *
                  ((-(C88531 * std::pow(C88535, 7) * bs[7] * C88896) / C88290) /
                       C88268 -
                   (C88927 * ce) / C88532)) *
                 C88845) -
        (ae * (C88660 * C88845 + C88603)) / C88532;
    const double C5197 = (-(C88903 * ce) / C88290) / C88268 - C88900 / C88532 +
                         C88531 * C88916 - (ae * C88731 * C88603) / C88532 +
                         C88731 * (C88731 * C88942 - (ae * C88603) / C88532);
    const double C5952 =
        C88673 * C88942 - (ae * C88731 * C89311) / C88532 +
        C88731 *
            (C88731 * C88673 *
                 ((-(C88531 * C88927 * ce) / C88290) / C88268 -
                  C88924 / C88532 +
                  C88531 * ((-(C88531 * std::pow(C88535, 7) * bs[7] * C88896) /
                             C88290) /
                                C88268 -
                            (C88927 * ce) / C88532)) -
             (ae * C89311) / C88532);
    const double C6506 =
        2 * (C88731 * C88942 - (ae * C88603) / C88532) -
        (ae * (C88660 * C88967 + C88603)) / C88532 +
        C88731 *
            (C88942 - (ae * C88731 * C88660) / C88532 +
             C88731 * (C88731 * ((-(C88531 * C88927 * ce) / C88290) / C88268 -
                                 C88924 / C88532 +
                                 C88531 * ((-(C88531 * std::pow(C88535, 7) *
                                              bs[7] * C88896) /
                                            C88290) /
                                               C88268 -
                                           (C88927 * ce) / C88532)) -
                       (ae * C88660) / C88532));
    const double C30811 =
        3 * (C88916 - (ae * C89828) / C88532 + C88731 * C89831) +
        (((-2 * C89828) / C88290 - (C88731 * C89832) / C88290) * ae) / C88268 +
        C88731 *
            (2 * C89831 - (ae * C89832) / C88532 +
             C88731 * (C88940 - (ae * C88731 * C88648) / C88532 +
                       C88731 * (C88731 * ((-(C88531 * std::pow(C88535, 7) *
                                              bs[7] * C88896) /
                                            C88290) /
                                               C88268 -
                                           (C88927 * ce) / C88532) -
                                 (ae * C88648) / C88532)));
    const double C16063 = C16057 + C16058;
    const double C21658 = C21655 + C21656;
    const double C58905 = C58899 + C58900;
    const double C44935 = C44932 + C44933;
    const double C65780 = C65774 + C65775;
    const double C61356 = C61350 + C61351;
    const double C17383 = C17376 + C17377;
    const double C75781 = C75776 + C75777;
    const double C18859 = C18854 + C18855;
    const double C76700 = C76691 + C76692;
    const double C32116 =
        4 * (2 * C89826 - (ae * C89823) / C88532 + C88731 * C90000) +
        (((-3 * C89823) / C88290 + C88731 * C89998) * ae) / C88268 +
        C88731 *
            (3 * C90000 + (C89998 * ae) / C88268 +
             C88731 * (2 * C89997 - (ae * C89990) / C88532 +
                       C88731 * ((-(ae * C88731 * C88632) / C88290) / C88268 -
                                 C88924 / C88532 +
                                 C88731 * ((-(C88731 * std::pow(C88535, 7) *
                                              bs[7] * C88896) /
                                            C88290) /
                                               C88268 -
                                           (ae * C88632) / C88532))));
    const double C16703 = C16701 + C16702;
    const double C1521 = C1516 + C1517;
    const double C2382 = C2378 + C2379;
    const double C56151 = C56144 + C56145;
    const double C3219 = C3216 + C3217;
    const double C8885 = C8882 + C8883;
    const double C57059 = C57054 + C57055;
    const double C5297 = C5294 + C5295;
    const double C58078 = C58073 + C58074;
    const double C16699 =
        4 * (2 * C89487 - (C89484 * ce) / C88532 + C88673 * C89637) -
        ((3 * C89484 + C88673 * C89632) * ce) / C88532 +
        C88673 *
            (3 * C89637 - (C89632 * ce) / C88532 +
             C88673 * (2 * C89634 - (C89626 * ce) / C88532 +
                       C88673 * ((-(C88673 * C88927 * ce) / C88290) / C88268 -
                                 C88958 / C88532 +
                                 C88673 * ((-(C88673 * std::pow(C88535, 7) *
                                              bs[7] * C88948) /
                                            C88290) /
                                               C88268 -
                                           (C88927 * ce) / C88532))));
    const double C17465 =
        (((-2 * C89164) / C88290 - (C88673 * C89433) / C88290 -
          (C89423 * ce) / C88290) *
         ae) /
            C88268 +
        C88731 * (2 * C89487 - (C89484 * ce) / C88532 + C88673 * C89637);
    const double C18197 = (-(C89321 * ce) / C88290) / C88268 - C88951 / C88532 +
                          C88673 * C89487 - (ae * C88731 * C89433) / C88532 +
                          C88731 * (C88731 * C89637 - (ae * C89433) / C88532);
    const double C19465 =
        2 * (C88731 * C89637 - (ae * C89433) / C88532) -
        (ae * (C89580 * C88967 + C89433)) / C88532 +
        C88731 *
            (C89637 - (ae * C88731 * C89580) / C88532 +
             C88731 * (C88731 * ((-(C88673 * C88927 * ce) / C88290) / C88268 -
                                 C88958 / C88532 +
                                 C88673 * ((-(C88673 * std::pow(C88535, 7) *
                                              bs[7] * C88948) /
                                            C88290) /
                                               C88268 -
                                           (C88927 * ce) / C88532)) -
                       (ae * C89580) / C88532));
    const double C31639 =
        3 * (C89487 - (ae * C89925) / C88532 + C88731 * C89929) +
        (((-2 * C89925) / C88290 - (C88731 * C89930) / C88290) * ae) / C88268 +
        C88731 *
            (2 * C89929 - (ae * C89930) / C88532 +
             C88731 * (C89634 - (ae * C88731 * C89560) / C88532 +
                       C88731 * (C88731 * ((-(C88673 * std::pow(C88535, 7) *
                                              bs[7] * C88948) /
                                            C88290) /
                                               C88268 -
                                           (C88927 * ce) / C88532) -
                                 (ae * C89560) / C88532)));
    const double C78670 = C78666 + C78667;
    const double C32167 =
        4 * (2 * C89841 - (ae * C89838) / C88532 + C88731 * C90019) +
        (((-3 * C89838) / C88290 + C88731 * C90017) * ae) / C88268 +
        C88731 *
            (3 * C90019 + (C90017 * ae) / C88268 +
             C88731 * (2 * C90016 - (ae * C90009) / C88532 +
                       C88731 * ((-(ae * C88731 * C88711) / C88290) / C88268 -
                                 C88958 / C88532 +
                                 C88731 * ((-(C88731 * std::pow(C88535, 7) *
                                              bs[7] * C88948) /
                                            C88290) /
                                               C88268 -
                                           (ae * C88711) / C88532))));
    const double C31151 = C31150 * C90623;
    const double C15538 = C14088 * C88316;
    const double C15534 = C14082 * C88316;
    const double C15558 = C15553 * C88316;
    const double C16047 = C14616 * C88316;
    const double C16043 = C14614 * C88316;
    const double C16067 = C16062 * C88316;
    const double C24215 = C16857 * C88316;
    const double C24211 = C16859 * C88316;
    const double C24811 = C17379 * C88316;
    const double C24807 = C17381 * C88316;
    const double C30260 = C27606 * C88316;
    const double C30256 = C27600 * C88316;
    const double C30280 = C30275 * C88316;
    const double C30542 = C27912 * C88316;
    const double C30538 = C27910 * C88316;
    const double C30562 = C30557 * C88316;
    const double C36895 = C18362 * C88316;
    const double C37197 = C29754 * C88316;
    const double C37193 = C29752 * C88316;
    const double C42457 = C3122 * C88316;
    const double C42451 = C1418 * C88316;
    const double C53534 = C8771 * C88316;
    const double C61043 = C4930 * C88316;
    const double C61037 = C1984 * C88316;
    const double C69544 = C8433 * C88316;
    const double C103 =
        ((((0 - (C88288 * C88289) / C88290) * ce) / C88290 - (0 * de) / C88299 +
          C88291 / C88290) /
             C88295 -
         ((C88288 * C88312 + 0) * de) / C88290) /
            C88295 -
        ((C88288 * (C88312 / C88295 -
                    ((C88288 * C88316 + C90744) * de) / C88290 + C88309) +
          C90780) *
         de) /
            C88290 +
        C88316 / C88295 - ((C88288 * C88309 + C90503) * de) / C88290;
    const double C104 =
        (C88312 / C88295 - ((C88288 * C88316 + C90744) * de) / C88290 +
         C88309) /
            C88295 -
        ((C88288 *
              (C88316 / C88295 - ((C88288 * C88309 + C90503) * de) / C88290) +
          C90771) *
         de) /
            C88290 +
        2 * (C88309 / C88295 - (0 * de) / C88290);
    const double C105 =
        (C88316 / C88295 - ((C88288 * C88309 + C90503) * de) / C88290) /
            C88295 -
        ((C88288 * (C88309 / C88295 - (0 * de) / C88290) + C6691) * de) /
            C88290;
    const double C6694 =
        C88312 / C88295 - ((C88288 * C88316 + C90744) * de) / C88290 + C88309;
    const double C6695 =
        C88316 / C88295 - ((C88288 * C88309 + C90503) * de) / C88290;
    const double C20297 = C20296 - C20290;
    const double C20756 = C20755 - C20749;
    const double C81299 = C21025 - C81297;
    const double C81298 = C81296 - C21025;
    const double C36193 = C36188 - C33660;
    const double C36423 = C36418 - C34000;
    const double C3427 =
        ((((0 - (C88343 * C88378) / C88290) * ce) / C88290 - (0 * de) / C88299 +
          C88362 / C88290) /
             C88295 -
         ((C88343 * C88395 + 0) * de) / C88290) /
            C88295 -
        ((C88343 * (C88395 / C88295 -
                    ((C88343 * C88396 + C90752) * de) / C88290 + C88390) +
          C90781) *
         de) /
            C88290 +
        C88396 / C88295 - ((C88343 * C88390 + C90555) * de) / C88290;
    const double C3428 =
        (C88395 / C88295 - ((C88343 * C88396 + C90752) * de) / C88290 +
         C88390) /
            C88295 -
        ((C88343 *
              (C88396 / C88295 - ((C88343 * C88390 + C90555) * de) / C88290) +
          C90774) *
         de) /
            C88290 +
        2 * (C88390 / C88295 - (0 * de) / C88290);
    const double C3429 =
        (C88396 / C88295 - ((C88343 * C88390 + C90555) * de) / C88290) /
            C88295 -
        ((C88343 * (C88390 / C88295 - (0 * de) / C88290) + C7400) * de) /
            C88290;
    const double C7477 =
        C88395 / C88295 - ((C88343 * C88396 + C90752) * de) / C88290 + C88390;
    const double C7478 =
        C88396 / C88295 - ((C88343 * C88390 + C90555) * de) / C88290;
    const double C7009 = C7008 - C7002;
    const double C7247 = C7246 - C7240;
    const double C65503 = C8536 - C65501;
    const double C65502 = C65500 - C8536;
    const double C38532 = C38527 - C33778;
    const double C38762 = C38757 - C34121;
    const double C6281 =
        ((((0 - (C88350 * C88423) / C88290) * ce) / C88290 - (0 * de) / C88299 +
          C88409 / C88290) /
             C88295 -
         ((C88350 * C88440 + 0) * de) / C88290) /
            C88295 -
        ((C88350 * (C88440 / C88295 -
                    ((C88350 * C88441 + C90753) * de) / C88290 + C88435) +
          C90782) *
         de) /
            C88290 +
        C88441 / C88295 - ((C88350 * C88435 + C90579) * de) / C88290;
    const double C6282 =
        (C88440 / C88295 - ((C88350 * C88441 + C90753) * de) / C88290 +
         C88435) /
            C88295 -
        ((C88350 *
              (C88441 / C88295 - ((C88350 * C88435 + C90579) * de) / C88290) +
          C90777) *
         de) /
            C88290 +
        2 * (C88435 / C88295 - (0 * de) / C88290);
    const double C6283 =
        (C88441 / C88295 - ((C88350 * C88435 + C90579) * de) / C88290) /
            C88295 -
        ((C88350 * (C88435 / C88295 - (0 * de) / C88290) + C10691) * de) /
            C88290;
    const double C10840 =
        C88440 / C88295 - ((C88350 * C88441 + C90753) * de) / C88290 + C88435;
    const double C10841 =
        C88441 / C88295 - ((C88350 * C88435 + C90579) * de) / C88290;
    const double C9462 = C9461 - C9455;
    const double C9700 = C9699 - C9693;
    const double C51731 = C10608 - C51729;
    const double C51730 = C51728 - C10608;
    const double C25236 = C25231 - C22835;
    const double C25687 = C25682 - C23439;
    const double C67605 = C67603 + C10195;
    const double C67604 = C67602 - C10195;
    const double C31411 = C31409 - C31401;
    const double C49671 = C49669 + C8999;
    const double C49670 = C49668 - C8999;
    const double C17576 = C17573 - C17574;
    const double C14104 = C14092 * C828;
    const double C14287 = C14092 * C244;
    const double C19604 = C14092 * C6696;
    const double C72662 = C72660 * C828;
    const double C72867 = C72660 * C244;
    const double C73684 = C72660 * C181;
    const double C79498 = C72660 * C6696;
    const double C27622 = C27610 * C828;
    const double C27713 = C27610 * C181;
    const double C34614 = C27610 * C6696;
    const double C14105 = C14093 * C823;
    const double C19605 = C14093 * C6691;
    const double C72663 = C72661 * C823;
    const double C79499 = C72661 * C6691;
    const double C27623 = C27611 * C823;
    const double C34615 = C27611 * C6691;
    const double C88665 = C88652 + C88662;
    const double C31054 = C31050 * C90623;
    const double C934 =
        C88673 *
            (3 * C88728 + (C88726 * ae) / C88268 +
             C88531 * (2 * C88725 - (ae * C88718) / C88532 +
                       C88531 * ((-(ae * C88531 * C88711) / C88290) / C88268 -
                                 C88708 / C88532 +
                                 C88531 * ((-(C88531 * std::pow(C88535, 7) *
                                              bs[7] * C88680) /
                                            C88290) /
                                               C88268 -
                                           (ae * C88711) / C88532)))) -
        ((3 * C88604 + C88531 * C88669 + C88650 * ae) * ce) / C88532;
    const double C1886 =
        C88731 *
            (3 * C88786 + (C88784 * ae) / C88268 +
             C88531 * (2 * C88783 - (ae * C88776) / C88532 +
                       C88531 * ((-(ae * C88531 * C88769) / C88290) / C88268 -
                                 C88766 / C88532 +
                                 C88531 * ((-(C88531 * std::pow(C88535, 7) *
                                              bs[7] * C88738) /
                                            C88290) /
                                               C88268 -
                                           (ae * C88769) / C88532)))) -
        ((3 * C88604 + C88531 * C88669 + C88650 * ae) * ce) / C88532;
    const double C2670 =
        2 * C88700 - (ae * C88697) / C88532 + C88531 * C88728 -
        (C88673 * C88669 * ce) / C88532 +
        C88673 *
            (C88673 * (2 * C88725 - (ae * C88718) / C88532 +
                       C88531 * ((-(ae * C88531 * C88711) / C88290) / C88268 -
                                 C88708 / C88532 +
                                 C88531 * ((-(C88531 * std::pow(C88535, 7) *
                                              bs[7] * C88680) /
                                            C88290) /
                                               C88268 -
                                           (ae * C88711) / C88532))) -
             (C88669 * ce) / C88532);
    const double C4838 =
        2 * C88758 - (ae * C88755) / C88532 + C88531 * C88786 -
        (C88731 * C88669 * ce) / C88532 +
        C88731 *
            (C88731 * (2 * C88783 - (ae * C88776) / C88532 +
                       C88531 * ((-(ae * C88531 * C88769) / C88290) / C88268 -
                                 C88766 / C88532 +
                                 C88531 * ((-(C88531 * std::pow(C88535, 7) *
                                              bs[7] * C88738) /
                                            C88290) /
                                               C88268 -
                                           (ae * C88769) / C88532))) -
             (C88669 * ce) / C88532);
    const double C8223 =
        C88731 *
        (C88673 *
             (2 * C88725 - (ae * C88718) / C88532 +
              C88531 *
                  ((-(ae * C88531 * C88711) / C88290) / C88268 -
                   C88708 / C88532 +
                   C88531 * ((-(C88531 * std::pow(C88535, 7) * bs[7] * C88680) /
                              C88290) /
                                 C88268 -
                             (ae * C88711) / C88532))) -
         (C88669 * ce) / C88532);
    const double C8323 =
        C88731 * C88673 *
            (2 * C88783 - (ae * C88776) / C88532 +
             C88531 *
                 ((-(ae * C88531 * C88769) / C88290) / C88268 -
                  C88766 / C88532 +
                  C88531 * ((-(C88531 * std::pow(C88535, 7) * bs[7] * C88738) /
                             C88290) /
                                C88268 -
                            (ae * C88769) / C88532))) -
        (C88673 * C88669 * ce) / C88532;
    const double C123 = (4 * (2 * C88565 + C88531 * C88604 + C88585 * ae) +
                         C88531 * (3 * C88604 + C88531 * C88669 + C88650 * ae) +
                         (3 * C88585 + C88531 * C88650) * ae) /
                        C88268;
    const double C842 =
        (C88673 * (3 * C88604 + C88531 * C88669 + C88650 * ae)) / C88268;
    const double C1710 =
        (C88731 * (3 * C88604 + C88531 * C88669 + C88650 * ae)) / C88268;
    const double C2580 =
        (2 * C88565 + C88531 * C88604 + C88585 * ae + C88669 * C88845) / C88268;
    const double C4666 =
        (2 * C88565 + C88531 * C88604 + C88585 * ae + C88669 * C88967) / C88268;
    const double C8121 = (C88731 * C88673 * C88669) / C88268;
    const double C16475 =
        (4 * (2 * C89165 + C88673 * C89434 + C89423 * ae) +
         C88673 * (3 * C89434 + C88673 * C89590 + C89576 * ae) +
         (3 * C89423 + C88673 * C89576) * ae) /
        C88268;
    const double C17132 =
        (C88731 * (3 * C89434 + C88673 * C89590 + C89576 * ae)) / C88268;
    const double C18619 =
        (2 * C89165 + C88673 * C89434 + C89423 * ae + C89590 * C88967) / C88268;
    const double C32115 =
        (4 * (2 * C89357 + C88731 * C89871 + C89862 * ae) +
         C88731 * (3 * C89871 + C88731 * C90064 + C90042 * ae) +
         (3 * C89862 + C88731 * C90042) * ae) /
        C88268;
    const double C88670 = C88668 - C88649;
    const double C89591 = C89589 - C89575;
    const double C90065 = C90063 - C90041;
    const double C15549 = C90485 * C3375;
    const double C42735 = C39126 * C3375;
    const double C21020 = C90485 * C3913;
    const double C43399 = C39126 * C3913;
    const double C16306 = C90485 * C15531;
    const double C16855 = C90485 * C16841;
    const double C18361 = C90485 * C17657;
    const double C30271 = C90485 * C6173;
    const double C62525 = C39126 * C6173;
    const double C31774 = C90485 * C30253;
    const double C1215 = C90623 * C1198;
    const double C39445 = C39128 * C1198;
    const double C2077 = C90623 * C2065;
    const double C2939 = C90623 * C2923;
    const double C40333 = C39128 * C2923;
    const double C8545 = C90623 * C4251;
    const double C41280 = C39128 * C4251;
    const double C5017 = C90623 * C5009;
    const double C31406 = C90623 * C19308;
    const double C79123 = C39128 * C19308;
    const double C32009 = C90623 * C30638;
    const double C1614 = C90634 * C1603;
    const double C2480 = C90634 * C2463;
    const double C56229 = C55626 * C2463;
    const double C3305 = C90634 * C3297;
    const double C8996 = C90634 * C4575;
    const double C57165 = C55626 * C4575;
    const double C5391 = C90634 * C5375;
    const double C58184 = C55626 * C5375;
    const double C17567 = C90634 * C17550;
    const double C75923 = C55626 * C17550;
    const double C19033 = C90634 * C18273;
    const double C76916 = C55626 * C18273;
    const double C29865 = C29861 * C2567;
    const double C38082 = C29861 * C7400;
    const double C89586 = C89582 + C89583;
    const double C90060 = C90053 + C90057;
    const double C29766 = C29758 * C3364;
    const double C29855 = C29758 * C2662;
    const double C38081 = C29758 * C7479;
    const double C27726 = C27720 * C90541;
    const double C33783 = C21133 * C90555;
    const double C35419 = C21133 * C90555;
    const double C73682 = C21133 * C90541;
    const double C81437 = C21133 * C6692;
    const double C83497 = C21133 * C90752;
    const double C27724 = C27718 * C90541;
    const double C33785 = C27718 * C6692;
    const double C35421 = C27718 * C90752;
    const double C39981 = C39126 * C933;
    const double C57413 = C39126 * C1798;
    const double C14191 = C90485 * C2669;
    const double C41918 = C39126 * C2669;
    const double C48713 = C39126 * C3997;
    const double C72763 = C90485 * C3997;
    const double C27715 = C90485 * C4752;
    const double C60820 = C39126 * C4752;
    const double C81439 = C21134 * C90555;
    const double C83499 = C21134 * C90555;
    const double C33790 = C33789 * C90555;
    const double C35423 = C33789 * C90555;
    const double C77118 = C33789 * C90541;
    const double C30374 = C30372 * C90541;
    const double C16952 = C90485 * C16944;
    const double C18449 = C90485 * C17735;
    const double C31149 = C31147 * C90555;
    const double C38531 = C31147 * C90555;
    const double C78909 = C31147 * C90541;
    const double C27901 = C1987 * C823;
    const double C34843 = C1987 * C6691;
    const double C57637 = C1987 * C822;
    const double C61040 = C1987 * C90503;
    const double C65365 = C1987 * C90503;
    const double C66449 = C1987 * C90771;
    const double C34005 = C8434 * C90503;
    const double C37194 = C8434 * C90503;
    const double C60104 = C8434 * C90498;
    const double C65367 = C8434 * C7396;
    const double C69543 = C8434 * C90744;
    const double C27907 = C4931 * C822;
    const double C30545 = C4931 * C90503;
    const double C34001 = C4931 * C90503;
    const double C34847 = C4931 * C90771;
    const double C61042 = C4931 * C90744;
    const double C61958 = C4931 * C90498;
    const double C68523 = C4931 * C7396;
    const double C1115 = C90623 * C1101;
    const double C39353 = C39128 * C1101;
    const double C1983 = C90623 * C1969;
    const double C2843 = C90623 * C2833;
    const double C40217 = C39128 * C2833;
    const double C8432 = C90623 * C4169;
    const double C41164 = C39128 * C4169;
    const double C4929 = C90623 * C4919;
    const double C60106 = C58586 * C90498;
    const double C34015 = C34013 * C90503;
    const double C37198 = C34013 * C90503;
    const double C61961 = C34013 * C90498;
    const double C30563 = C30558 * C90503;
    const double C36422 = C30558 * C90503;
    const double C62741 = C30558 * C90498;
    const double C31318 = C31316 * C90498;
    const double C31954 = C31952 * C90498;
    const double C14300 = C14294 * C90567;
    const double C14299 = C14293 * C90567;
    const double C21241 = C14293 * C90753;
    const double C22842 = C14293 * C9074;
    const double C21247 = C21245 * C90579;
    const double C22840 = C21245 * C90579;
    const double C72866 = C21245 * C90567;
    const double C81571 = C21245 * C90753;
    const double C83635 = C21245 * C9074;
    const double C40099 = C39126 * C1017;
    const double C57527 = C39126 * C1885;
    const double C14289 = C90485 * C2751;
    const double C42030 = C39126 * C2751;
    const double C48851 = C39126 * C4083;
    const double C72869 = C90485 * C4083;
    const double C27813 = C90485 * C4837;
    const double C60932 = C39126 * C4837;
    const double C15734 = C15732 * C90567;
    const double C21248 = C21246 * C90579;
    const double C22844 = C21246 * C90579;
    const double C74693 = C21246 * C90567;
    const double C81573 = C33893 * C90579;
    const double C83637 = C33893 * C90579;
    const double C17056 = C17052 * C90579;
    const double C25235 = C17052 * C90579;
    const double C75505 = C17052 * C90567;
    const double C18545 = C18543 * C4655;
    const double C25923 = C18543 * C10691;
    const double C76236 = C18543 * C90579;
    const double C86779 = C18543 * C90579;
    const double C1319 = C1316 * C90567;
    const double C2187 = C2183 * C90579;
    const double C9460 = C2183 * C90579;
    const double C55963 = C2183 * C90567;
    const double C3031 = C3029 * C90567;
    const double C8662 = C8660 * C90579;
    const double C10305 = C8660 * C90579;
    const double C56827 = C8660 * C90567;
    const double C5117 = C5115 * C4655;
    const double C11077 = C5115 * C10691;
    const double C57846 = C5115 * C90579;
    const double C66655 = C5115 * C90579;
    const double C31488 = C90623 * C19360;
    const double C79193 = C39128 * C19360;
    const double C32064 = C90623 * C30726;
    const double C14605 = C1421 * C823;
    const double C20055 = C1421 * C6691;
    const double C40549 = C1421 * C822;
    const double C42454 = C1421 * C90503;
    const double C47337 = C1421 * C90771;
    const double C48233 = C1421 * C90503;
    const double C14611 = C3123 * C822;
    const double C16050 = C3123 * C90503;
    const double C20059 = C3123 * C90771;
    const double C20750 = C3123 * C90503;
    const double C42456 = C3123 * C90744;
    const double C43150 = C3123 * C90498;
    const double C48235 = C3123 * C7396;
    const double C21650 = C8772 * C90503;
    const double C24808 = C8772 * C90503;
    const double C44020 = C8772 * C90498;
    const double C49399 = C8772 * C7396;
    const double C53533 = C8772 * C90744;
    const double C1417 = C90634 * C1403;
    const double C2285 = C90634 * C2271;
    const double C56053 = C55626 * C2271;
    const double C3121 = C90634 * C3111;
    const double C8770 = C90634 * C4415;
    const double C56939 = C55626 * C4415;
    const double C5207 = C90634 * C5197;
    const double C57958 = C55626 * C5197;
    const double C16068 = C16063 * C90503;
    const double C20754 = C16063 * C90503;
    const double C43153 = C16063 * C90498;
    const double C21660 = C21658 * C90503;
    const double C24812 = C21658 * C90503;
    const double C44023 = C21658 * C90498;
    const double C45857 = C44935 * C90498;
    const double C17389 = C17383 * C90498;
    const double C18863 = C18859 * C90498;
    const double C1525 = C1521 * C90555;
    const double C7245 = C1521 * C90555;
    const double C39673 = C1521 * C90541;
    const double C2385 = C2382 * C90541;
    const double C3221 = C3219 * C2567;
    const double C7948 = C3219 * C7400;
    const double C40657 = C3219 * C90555;
    const double C47445 = C3219 * C90555;
    const double C8887 = C8885 * C90555;
    const double C10509 = C8885 * C90555;
    const double C41594 = C8885 * C90541;
    const double C5299 = C5297 * C90541;
    const double C17473 = C90634 * C17465;
    const double C75849 = C55626 * C17465;
    const double C18942 = C90634 * C18197;
    const double C76804 = C55626 * C18197;
    const double C15550 = C15538 + C15539;
    const double C16059 = C16047 + C16048;
    const double C85431 = C24210 + C24211;
    const double C85430 = C24211 + C24210;
    const double C30272 = C30260 + C30261;
    const double C30554 = C30542 + C30543;
    const double C19600 = C14088 * C6694;
    const double C19594 = C14082 * C6694;
    const double C20056 = C14616 * C6694;
    const double C20050 = C14614 * C6694;
    const double C34610 = C27606 * C6694;
    const double C34604 = C27600 * C6694;
    const double C34844 = C27912 * C6694;
    const double C34838 = C27910 * C6694;
    const double C47334 = C1418 * C6694;
    const double C66446 = C1984 * C6694;
    const double C79494 = C16859 * C6694;
    const double C19602 = C14090 * C6695;
    const double C19596 = C14084 * C6695;
    const double C20058 = C3122 * C6695;
    const double C20052 = C1418 * C6695;
    const double C34612 = C27608 * C6695;
    const double C34606 = C27602 * C6695;
    const double C34846 = C4930 * C6695;
    const double C34840 = C1984 * C6695;
    const double C47336 = C1420 * C6695;
    const double C66448 = C1986 * C6695;
    const double C79496 = C21021 * C6695;
    const double C20298 = C20297 - C20291;
    const double C81301 = C81299 + C21026;
    const double C81300 = C81298 - C21026;
    const double C36194 = C36193 - C33661;
    const double C7709 = C339 * C7477;
    const double C7703 = C337 * C7477;
    const double C7943 = C586 * C7477;
    const double C7937 = C584 * C7477;
    const double C37843 = C27606 * C7477;
    const double C37837 = C27600 * C7477;
    const double C38077 = C27912 * C7477;
    const double C38071 = C27910 * C7477;
    const double C48336 = C1418 * C7477;
    const double C64444 = C1984 * C7477;
    const double C86672 = C16859 * C7477;
    const double C7711 = C1118 * C7478;
    const double C7705 = C1116 * C7478;
    const double C7945 = C1420 * C7478;
    const double C7939 = C1418 * C7478;
    const double C37845 = C18362 * C7478;
    const double C37839 = C16859 * C7478;
    const double C38079 = C29754 * C7478;
    const double C38073 = C29752 * C7478;
    const double C48338 = C3122 * C7478;
    const double C64446 = C8433 * C7478;
    const double C86674 = C16857 * C7478;
    const double C7010 = C7009 - C7003;
    const double C7248 = C7247 - C7241;
    const double C65505 = C65503 + C8548;
    const double C65504 = C65502 - C8548;
    const double C38533 = C38532 - C33779;
    const double C38763 = C38762 - C34122;
    const double C11072 = C339 * C10840;
    const double C11066 = C337 * C10840;
    const double C11306 = C586 * C10840;
    const double C11300 = C584 * C10840;
    const double C25918 = C14088 * C10840;
    const double C25912 = C14082 * C10840;
    const double C26374 = C14616 * C10840;
    const double C26368 = C14614 * C10840;
    const double C52616 = C1418 * C10840;
    const double C68722 = C1984 * C10840;
    const double C87666 = C16859 * C10840;
    const double C11074 = C1986 * C10841;
    const double C11068 = C1984 * C10841;
    const double C11308 = C2288 * C10841;
    const double C11302 = C2286 * C10841;
    const double C25920 = C16857 * C10841;
    const double C25914 = C16859 * C10841;
    const double C26376 = C17379 * C10841;
    const double C26370 = C17381 * C10841;
    const double C52618 = C8771 * C10841;
    const double C68724 = C4930 * C10841;
    const double C87668 = C18362 * C10841;
    const double C9463 = C9462 - C9456;
    const double C9701 = C9700 - C9694;
    const double C51733 = C51731 + C10611;
    const double C51732 = C51730 - C10611;
    const double C25237 = C25236 - C22836;
    const double C25688 = C25687 - C23440;
    const double C17577 = C17576 * C90485;
    const double C130 =
        4 * (2 * C88602 - (ae * C88603) / C88532 - (C88604 * ce) / C88532 +
             C88531 * C88665) +
        (((-3 * C88603) / C88290 + C88531 * C88670 - (C88650 * ce) / C88290) *
         ae) /
            C88268 -
        ((3 * C88604 + C88531 * C88669 + C88650 * ae) * ce) / C88532 +
        C88531 *
            (3 * C88665 + (C88670 * ae) / C88268 - (C88669 * ce) / C88532 +
             C88531 *
                 (2 * C88659 - (ae * C88660) / C88532 - (C88661 * ce) / C88532 +
                  C88531 * ((-(ae * C88648) / C88290) / C88268 -
                            C88647 / C88532 - (C88651 * ce) / C88532 +
                            C88531 * ((-(C88635 * ce) / C88290) / C88268 -
                                      (ae * C88632) / C88532 -
                                      (C88531 *
                                       (C88612 * C88613 +
                                        C88539 * bs[7] * std::pow(C88535, 7)) *
                                       C88540) /
                                          C88532))));
    const double C848 =
        3 * ((-(ae * C88673 * C88594) / C88290) / C88268 - C88993 / C88532 -
             (C88673 * C88595 * ce) / C88532 + C88531 * C89007) +
        (C88673 * C88670 * ae) / C88268 - (C88673 * C88669 * ce) / C88532 +
        C88531 *
            (2 * C89007 - (ae * C88673 * C88660) / C88532 -
             (C88673 * C88661 * ce) / C88532 +
             C88531 * ((-(ae * C88673 * C88648) / C88290) / C88268 -
                       C88997 / C88532 - (C88673 * C88651 * ce) / C88532 +
                       C88531 * ((-(C88673 * C88635 * ce) / C88290) / C88268 -
                                 (ae * C88673 * C88632) / C88532 -
                                 (C88531 * C88673 *
                                  (C88612 * C88613 +
                                   C88539 * bs[7] * std::pow(C88535, 7)) *
                                  C88540) /
                                     C88532)));
    const double C1102 =
        (((-3 * C88603) / C88290 + C88531 * C88670 - (C88650 * ce) / C88290) *
         ae) /
            C88268 +
        C88673 *
            (3 * C88841 - (C88838 * ce) / C88532 +
             C88531 * (2 * C88839 - (C88832 * ce) / C88532 +
                       C88531 * ((-(C88531 * C88826 * ce) / C88290) / C88268 -
                                 C88823 / C88532 +
                                 C88531 * ((-(C88531 * std::pow(C88535, 7) *
                                              bs[7] * C88795) /
                                            C88290) /
                                               C88268 -
                                           (C88826 * ce) / C88532))));
    const double C1716 =
        3 * ((-(ae * C88731 * C88594) / C88290) / C88268 - C89052 / C88532 -
             (C88731 * C88595 * ce) / C88532 + C88531 * C89066) +
        (C88731 * C88670 * ae) / C88268 - (C88731 * C88669 * ce) / C88532 +
        C88531 *
            (2 * C89066 - (ae * C88731 * C88660) / C88532 -
             (C88731 * C88661 * ce) / C88532 +
             C88531 * ((-(ae * C88731 * C88648) / C88290) / C88268 -
                       C89056 / C88532 - (C88731 * C88651 * ce) / C88532 +
                       C88531 * ((-(C88731 * C88635 * ce) / C88290) / C88268 -
                                 (ae * C88731 * C88632) / C88532 -
                                 (C88531 * C88731 *
                                  (C88612 * C88613 +
                                   C88539 * bs[7] * std::pow(C88535, 7)) *
                                  C88540) /
                                     C88532)));
    const double C2272 =
        (((-3 * C88603) / C88290 + C88531 * C88670 - (C88650 * ce) / C88290) *
         ae) /
            C88268 +
        C88731 *
            (3 * C88942 - (C88939 * ce) / C88532 +
             C88531 * (2 * C88940 - (C88933 * ce) / C88532 +
                       C88531 * ((-(C88531 * C88927 * ce) / C88290) / C88268 -
                                 C88924 / C88532 +
                                 C88531 * ((-(C88531 * std::pow(C88535, 7) *
                                              bs[7] * C88896) /
                                            C88290) /
                                               C88268 -
                                           (C88927 * ce) / C88532))));
    const double C2834 =
        2 * C88815 - (C88812 * ce) / C88532 + C88531 * C88841 +
        (C88673 * C88670 * ae) / C88268 +
        C88673 *
            ((C88670 * ae) / C88268 +
             C88673 * (2 * C88839 - (C88832 * ce) / C88532 +
                       C88531 * ((-(C88531 * C88826 * ce) / C88290) / C88268 -
                                 C88823 / C88532 +
                                 C88531 * ((-(C88531 * std::pow(C88535, 7) *
                                              bs[7] * C88795) /
                                            C88290) /
                                               C88268 -
                                           (C88826 * ce) / C88532))));
    const double C5198 =
        2 * C88916 - (C88913 * ce) / C88532 + C88531 * C88942 +
        (C88731 * C88670 * ae) / C88268 +
        C88731 *
            ((C88670 * ae) / C88268 +
             C88731 * (2 * C88940 - (C88933 * ce) / C88532 +
                       C88531 * ((-(C88531 * C88927 * ce) / C88290) / C88268 -
                                 C88924 / C88532 +
                                 C88531 * ((-(C88531 * std::pow(C88535, 7) *
                                              bs[7] * C88896) /
                                            C88290) /
                                               C88268 -
                                           (C88927 * ce) / C88532))));
    const double C8423 =
        (C88731 * C88670 * ae) / C88268 +
        C88673 * C88731 *
            (2 * C88839 - (C88832 * ce) / C88532 +
             C88531 *
                 ((-(C88531 * C88826 * ce) / C88290) / C88268 -
                  C88823 / C88532 +
                  C88531 * ((-(C88531 * std::pow(C88535, 7) * bs[7] * C88795) /
                             C88290) /
                                C88268 -
                            (C88826 * ce) / C88532)));
    const double C8761 =
        (C88673 * C88670 * ae) / C88268 +
        C88731 * C88673 *
            (2 * C88940 - (C88933 * ce) / C88532 +
             C88531 *
                 ((-(C88531 * C88927 * ce) / C88290) / C88268 -
                  C88924 / C88532 +
                  C88531 * ((-(C88531 * std::pow(C88535, 7) * bs[7] * C88896) /
                             C88290) /
                                C88268 -
                            (C88927 * ce) / C88532)));
    const double C124 =
        4 * ((-2 * C88564) / C88290 - (C88531 * C88603) / C88290 -
             (C88585 * ce) / C88290) +
        C88531 * ((-3 * C88603) / C88290 + C88531 * C88670 -
                  (C88650 * ce) / C88290) -
        ((3 * C88585 + C88531 * C88650) * ce) / C88290;
    const double C843 = C88673 * ((-3 * C88603) / C88290 + C88531 * C88670 -
                                  (C88650 * ce) / C88290);
    const double C1711 = C88731 * ((-3 * C88603) / C88290 + C88531 * C88670 -
                                   (C88650 * ce) / C88290);
    const double C2581 = (-2 * C88564) / C88290 - (C88531 * C88603) / C88290 -
                         (C88585 * ce) / C88290 + C88670 * C88845;
    const double C4667 = (-2 * C88564) / C88290 - (C88531 * C88603) / C88290 -
                         (C88585 * ce) / C88290 + C88670 * C88967;
    const double C8122 = C88731 * C88673 * C88670;
    const double C17210 =
        3 * ((-(ae * C88731 * C89421) / C88290) / C88268 - C89660 / C88532 -
             (C88731 * C89424 * ce) / C88532 + C88673 * C89674) +
        (C88731 * C89591 * ae) / C88268 - (C88731 * C89590 * ce) / C88532 +
        C88673 *
            (2 * C89674 - (ae * C88731 * C89580) / C88532 -
             (C88731 * C89581 * ce) / C88532 +
             C88673 * ((-(ae * C88731 * C89560) / C88290) / C88268 -
                       C89664 / C88532 - (C88731 * C89563 * ce) / C88532 +
                       C88673 * ((-(C88731 * C88826 * ce) / C88290) / C88268 -
                                 (ae * C88731 * C88711) / C88532 -
                                 (C88673 * C88731 *
                                  (C88612 * C88613 +
                                   C88845 * bs[7] * std::pow(C88535, 7)) *
                                  C88540) /
                                     C88532)));
    const double C17466 =
        (((-3 * C89433) / C88290 + C88673 * C89591 - (C89576 * ce) / C88290) *
         ae) /
            C88268 +
        C88731 *
            (3 * C89637 - (C89632 * ce) / C88532 +
             C88673 * (2 * C89634 - (C89626 * ce) / C88532 +
                       C88673 * ((-(C88673 * C88927 * ce) / C88290) / C88268 -
                                 C88958 / C88532 +
                                 C88673 * ((-(C88673 * std::pow(C88535, 7) *
                                              bs[7] * C88948) /
                                            C88290) /
                                               C88268 -
                                           (C88927 * ce) / C88532))));
    const double C18937 =
        2 * C89487 - (C89484 * ce) / C88532 + C88673 * C89637 +
        (C88731 * C89591 * ae) / C88268 +
        C88731 *
            ((C89591 * ae) / C88268 +
             C88731 * (2 * C89634 - (C89626 * ce) / C88532 +
                       C88673 * ((-(C88673 * C88927 * ce) / C88290) / C88268 -
                                 C88958 / C88532 +
                                 C88673 * ((-(C88673 * std::pow(C88535, 7) *
                                              bs[7] * C88948) /
                                            C88290) /
                                               C88268 -
                                           (C88927 * ce) / C88532))));
    const double C16362 =
        4 * ((-2 * C89164) / C88290 - (C88673 * C89433) / C88290 -
             (C89423 * ce) / C88290) +
        C88673 * ((-3 * C89433) / C88290 + C88673 * C89591 -
                  (C89576 * ce) / C88290) -
        ((3 * C89423 + C88673 * C89576) * ce) / C88290;
    const double C16943 = C88731 * ((-3 * C89433) / C88290 + C88673 * C89591 -
                                    (C89576 * ce) / C88290);
    const double C18443 = (-2 * C89164) / C88290 - (C88673 * C89433) / C88290 -
                          (C89423 * ce) / C88290 + C89591 * C88967;
    const double C31888 =
        4 * ((-2 * C89356) / C88290 - (C88731 * C89866) / C88290 -
             (C89862 * ce) / C88290) +
        C88731 * ((-3 * C89866) / C88290 + C88731 * C90065 -
                  (C90042 * ce) / C88290) -
        ((3 * C89862 + C88731 * C90042) * ce) / C88290;
    const double C15554 = C15548 + C15549;
    const double C42739 = C42734 + C42735;
    const double C21024 = C21019 + C21020;
    const double C43407 = C43398 + C43399;
    const double C16310 = C16305 + C16306;
    const double C16861 = C16854 + C16855;
    const double C18365 = C18360 + C18361;
    const double C30276 = C30270 + C30271;
    const double C62529 = C62524 + C62525;
    const double C31777 = C31773 + C31774;
    const double C1219 = C1214 + C1215;
    const double C39451 = C39444 + C39445;
    const double C2080 = C2076 + C2077;
    const double C2941 = C2938 + C2939;
    const double C40337 = C40332 + C40333;
    const double C8547 = C8544 + C8545;
    const double C41284 = C41279 + C41280;
    const double C5019 = C5016 + C5017;
    const double C31408 = C31405 + C31406;
    const double C79125 = C79122 + C79123;
    const double C32010 = C32008 + C32009;
    const double C1617 = C1613 + C1614;
    const double C2484 = C2479 + C2480;
    const double C56235 = C56228 + C56229;
    const double C3307 = C3304 + C3305;
    const double C8998 = C8995 + C8996;
    const double C57169 = C57164 + C57165;
    const double C5393 = C5390 + C5391;
    const double C58188 = C58183 + C58184;
    const double C17571 = C17566 + C17567;
    const double C75925 = C75922 + C75923;
    const double C19035 = C19032 + C19033;
    const double C76920 = C76915 + C76916;
    const double C16527 =
        4 * (2 * C89432 - (ae * C89433) / C88532 - (C89434 * ce) / C88532 +
             C88673 * C89586) +
        (((-3 * C89433) / C88290 + C88673 * C89591 - (C89576 * ce) / C88290) *
         ae) /
            C88268 -
        ((3 * C89434 + C88673 * C89590 + C89576 * ae) * ce) / C88532 +
        C88673 *
            (3 * C89586 + (C89591 * ae) / C88268 - (C89590 * ce) / C88532 +
             C88673 *
                 (2 * C89579 - (ae * C89580) / C88532 - (C89581 * ce) / C88532 +
                  C88673 * ((-(ae * C89560) / C88290) / C88268 -
                            C88861 / C88532 - (C89563 * ce) / C88532 +
                            C88673 * ((-(C88826 * ce) / C88290) / C88268 -
                                      (ae * C88711) / C88532 -
                                      (C88673 *
                                       (C88612 * C88613 +
                                        C88845 * bs[7] * std::pow(C88535, 7)) *
                                       C88540) /
                                          C88532))));
    const double C32218 =
        4 * (2 * C89870 - (ae * C89866) / C88532 - (C89871 * ce) / C88532 +
             C88731 * C90060) +
        (((-3 * C89866) / C88290 + C88731 * C90065 - (C90042 * ce) / C88290) *
         ae) /
            C88268 -
        ((3 * C89871 + C88731 * C90064 + C90042 * ae) * ce) / C88532 +
        C88731 *
            (3 * C90060 + (C90065 * ae) / C88268 - (C90064 * ce) / C88532 +
             C88731 *
                 (2 * C90054 - (ae * C90055) / C88532 - (C90056 * ce) / C88532 +
                  C88731 * ((-(ae * C90039) / C88290) / C88268 -
                            C88983 / C88532 - (C90043 * ce) / C88532 +
                            C88731 * ((-(C88927 * ce) / C88290) / C88268 -
                                      (ae * C88769) / C88532 -
                                      (C88731 *
                                       (C88612 * C88613 +
                                        C88967 * bs[7] * std::pow(C88535, 7)) *
                                       C88540) /
                                          C88532))));
    const double C30363 = C27724 + C27706;
    const double C39988 = C39980 + C39981;
    const double C57419 = C57412 + C57413;
    const double C14197 = C14190 + C14191;
    const double C41923 = C41917 + C41918;
    const double C48716 = C48712 + C48713;
    const double C72764 = C72762 + C72763;
    const double C27721 = C27714 + C27715;
    const double C60826 = C60819 + C60820;
    const double C16955 = C16951 + C16952;
    const double C18451 = C18448 + C18449;
    const double C36424 = C36423 - C34001;
    const double C1121 = C1114 + C1115;
    const double C39366 = C39352 + C39353;
    const double C1989 = C1982 + C1983;
    const double C2847 = C2842 + C2843;
    const double C40226 = C40216 + C40217;
    const double C8436 = C8431 + C8432;
    const double C41173 = C41163 + C41164;
    const double C4933 = C4928 + C4929;
    const double C15730 = C14299 + C14281;
    const double C40105 = C40098 + C40099;
    const double C57534 = C57526 + C57527;
    const double C14295 = C14288 + C14289;
    const double C42034 = C42029 + C42030;
    const double C48853 = C48850 + C48851;
    const double C72870 = C72868 + C72869;
    const double C27819 = C27812 + C27813;
    const double C60937 = C60931 + C60932;
    const double C31489 = C31487 + C31488;
    const double C79196 = C79192 + C79193;
    const double C32065 = C32063 + C32064;
    const double C20757 = C20756 - C20750;
    const double C1423 = C1416 + C1417;
    const double C2291 = C2284 + C2285;
    const double C56066 = C56052 + C56053;
    const double C3125 = C3120 + C3121;
    const double C8774 = C8769 + C8770;
    const double C56948 = C56938 + C56939;
    const double C5211 = C5206 + C5207;
    const double C57967 = C57957 + C57958;
    const double C17476 = C17472 + C17473;
    const double C75852 = C75848 + C75849;
    const double C18944 = C18941 + C18942;
    const double C76809 = C76803 + C76804;
    const double C15555 = C15550 - C15540;
    const double C16064 = C16059 - C16049;
    const double C85433 = C24209 - C85431;
    const double C85432 = C85430 - C24209;
    const double C30277 = C30272 - C30262;
    const double C30559 = C30554 - C30544;
    const double C36195 = C36194 * C90623;
    const double C7011 = C7010 * C90634;
    const double C38534 = C38533 * C90623;
    const double C9464 = C9463 * C90634;
    const double C25689 = C25688 * C90485;
    const double C15559 = C15554 * C90503;
    const double C20295 = C15554 * C90503;
    const double C21028 = C21024 * C90503;
    const double C24216 = C21024 * C90503;
    const double C16312 = C16310 * C90498;
    const double C16867 = C16861 * C90498;
    const double C18369 = C18365 * C90498;
    const double C30281 = C30276 * C90503;
    const double C36192 = C30276 * C90503;
    const double C31779 = C31777 * C90498;
    const double C1223 = C1219 * C90555;
    const double C7007 = C1219 * C90555;
    const double C2083 = C2080 * C90541;
    const double C2943 = C2941 * C2567;
    const double C7714 = C2941 * C7400;
    const double C8549 = C8547 * C90555;
    const double C10199 = C8547 * C90555;
    const double C5021 = C5019 * C90541;
    const double C31410 = C31408 * C90555;
    const double C38761 = C31408 * C90555;
    const double C32011 = C32010 * C90541;
    const double C1620 = C1617 * C90567;
    const double C2488 = C2484 * C90579;
    const double C9698 = C2484 * C90579;
    const double C3309 = C3307 * C90567;
    const double C9000 = C8998 * C90579;
    const double C10615 = C8998 * C90579;
    const double C5395 = C5393 * C4655;
    const double C11311 = C5393 * C10691;
    const double C17575 = C17571 * C90579;
    const double C25686 = C17571 * C90579;
    const double C19037 = C19035 * C4655;
    const double C26379 = C19035 * C10691;
    const double C30371 = C30363 * C90623;
    const double C73685 = C72764 * C90541;
    const double C27727 = C27721 * C90541;
    const double C76130 = C16955 * C2567;
    const double C86677 = C16955 * C7400;
    const double C29583 = C18451 * C2567;
    const double C37848 = C18451 * C7400;
    const double C78035 = C18451 * C90555;
    const double C87567 = C18451 * C90555;
    const double C57639 = C1989 * C823;
    const double C66451 = C1989 * C6691;
    const double C65369 = C8436 * C90503;
    const double C69545 = C8436 * C90503;
    const double C27909 = C4933 * C823;
    const double C34849 = C4933 * C6691;
    const double C61044 = C4933 * C90503;
    const double C68525 = C4933 * C90503;
    const double C14301 = C14295 * C90567;
    const double C72871 = C72870 * C90567;
    const double C20758 = C20757 * C90485;
    const double C40551 = C1423 * C823;
    const double C47339 = C1423 * C6691;
    const double C14613 = C3125 * C823;
    const double C20061 = C3125 * C6691;
    const double C42458 = C3125 * C90503;
    const double C48237 = C3125 * C90503;
    const double C49401 = C8774 * C90503;
    const double C53535 = C8774 * C90503;
    const double C15560 = C15555 - C15541;
    const double C16069 = C16064 - C16050;
    const double C85435 = C85433 + C24212;
    const double C85434 = C85432 - C24212;
    const double C30282 = C30277 - C30263;
    const double C30564 = C30559 - C30545;
    const double C16070 = C16069 * C90485;
    const double C30283 = C30282 * C90623;
    d2eexx[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C6694 +
            (C39129 * C116 + C39125 * C125 + C39130 * C117 + C39126 * C126) *
                C90780 -
            (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                C6695 -
            (C39130 * C118 + C39126 * C127 + C39129 * C117 + C39125 * C126) *
                C90771 +
            (C39129 * C109 + C39125 * C115 + C39130 * C110 + C39126 * C119) *
                C6696 +
            (C39129 * C118 + C39125 * C127 + C39130 * C120 + C39126 * C128) *
                C6691) *
               C39127 +
           ((C39862 + C39863) * C6694 + (C39864 + C39865) * C90780 -
            (C39866 + C39867) * C6695 - (C39868 + C39869) * C90771 +
            (C39870 + C39871) * C6696 + (C39872 + C39873) * C6691) *
               C39128) *
              C90634 * C90567 * C6692 +
          (((C39867 + C39866) * C6695 -
            ((C39865 + C39864) * C90780 + (C39863 + C39862) * C6694) +
            (C39869 + C39868) * C90771 - (C39871 + C39870) * C6696 -
            (C39873 + C39872) * C6691) *
               C39127 +
           ((C41807 + C41808) * C6695 -
            ((C41809 + C41810) * C90780 + (C41811 + C41812) * C6694) +
            (C41813 + C41814) * C90771 -
            (C39130 * C2573 + C39126 * C2580 + C39129 * C2572 +
             C39125 * C2576) *
                C6696 -
            (C39130 * C2581 + C39126 * C2585 + C39129 * C2579 +
             C39125 * C2584) *
                C6691) *
               C39128) *
              C90634 * C90567 * C90555)) /
        (p * q * std::sqrt(p + q));
    d2eexy[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C6771 +
            (C39129 * C182 + C39125 * C188 + C39130 * C183 + C39126 * C189) *
                C6692 -
            (C39863 + C39862) * C6772 - (C39984 + C39985) * C90555) *
               C39127 +
           ((C39862 + C39863) * C6771 + (C39985 + C39984) * C6692 -
            (C41811 + C41812) * C6772 - (C41922 + C41921) * C90555) *
               C39128) *
              C90634 * C90780 +
          (((C39867 + C39866) * C6772 -
            ((C39130 * C184 + C39126 * C190 + C39129 * C183 + C39125 * C189) *
                 C6692 +
             (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                 C6771) +
            (C39986 + C39987) * C90555) *
               C39127 +
           ((C41807 + C41808) * C6772 -
            ((C39987 + C39986) * C6692 + (C39866 + C39867) * C6771) +
            (C41924 + C41923) * C90555) *
               C39128) *
              C90634 * C90771 +
          (((C39129 * C109 + C39125 * C115 + C39130 * C110 + C39126 * C119) *
                C6771 +
            (C39129 * C184 + C39125 * C190 + C39130 * C185 + C39126 * C191) *
                C6692 -
            (C39871 + C39870) * C6772 - (C39988 + C39989) * C90555) *
               C39127 +
           ((C39870 + C39871) * C6771 + (C39989 + C39988) * C6692 -
            (C39130 * C2573 + C39126 * C2580 + C39129 * C2572 +
             C39125 * C2576) *
                C6772 -
            (C39130 * C2666 + C39126 * C2670 + C39129 * C2665 +
             C39125 * C2669) *
                C90555) *
               C39128) *
              C90634 * C6691) *
         C90567) /
        (p * q * std::sqrt(p + q));
    d2eexz[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                 C244 +
             (C39129 * C245 + C39125 * C251 + C39130 * C246 + C39126 * C252) *
                 C90567) *
                C39127 +
            ((C39862 + C39863) * C244 + (C40100 + C40101) * C90567) * C39128) *
               C90634 * C6692 -
           (((C42031 + C42032) * C90567 + (C41811 + C41812) * C244) * C39128 +
            ((C40101 + C40100) * C90567 + (C39863 + C39862) * C244) * C39127) *
               C90634 * C90555) *
              C90780 +
          ((((C39867 + C39866) * C244 + (C40102 + C40103) * C90567) * C39127 +
            ((C41807 + C41808) * C244 + (C42033 + C42034) * C90567) * C39128) *
               C90634 * C90555 -
           (((C40103 + C40102) * C90567 + (C39866 + C39867) * C244) * C39128 +
            ((C39130 * C247 + C39126 * C253 + C39129 * C246 + C39125 * C252) *
                 C90567 +
             (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                 C244) *
                C39127) *
               C90634 * C6692) *
              C90771 +
          ((((C39129 * C109 + C39125 * C115 + C39130 * C110 + C39126 * C119) *
                 C244 +
             (C39129 * C247 + C39125 * C253 + C39130 * C248 + C39126 * C254) *
                 C90567) *
                C39127 +
            ((C39870 + C39871) * C244 + (C40104 + C40105) * C90567) * C39128) *
               C90634 * C6692 -
           (((C39130 * C2748 + C39126 * C2752 + C39129 * C2747 +
              C39125 * C2751) *
                 C90567 +
             (C39130 * C2573 + C39126 * C2580 + C39129 * C2572 +
              C39125 * C2576) *
                 C244) *
                C39128 +
            ((C40105 + C40104) * C90567 + (C39871 + C39870) * C244) * C39127) *
               C90634 * C90555) *
              C6691)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C6694 +
            (C39329 * C116 + C39127 * C314 + C39330 * C839 + C39128 * C1098) *
                C90780 -
            (C39356 + C39357) * C6695 - (C39358 + C39359) * C90771 +
            (C39360 + C39361) * C6696 + (C39362 + C39363) * C6691) *
               C90634 * C39125 +
           ((C39357 + C39356) * C6694 + (C39359 + C39358) * C90780 -
            (C39361 + C39360) * C6695 - (C39363 + C39362) * C90771 +
            (C39365 + C39364) * C6696 + (C39367 + C39366) * C6691) *
               C90634 * C39126) *
              C90567 * C6692 +
          (((C40220 + C40221) * C6695 -
            ((C39330 * C2577 + C39128 * C2831 + C39329 * C839 +
              C39127 * C1098) *
                 C90780 +
             (C39330 * C2570 + C39128 * C2827 + C39329 * C832 +
              C39127 * C1094) *
                 C6694) +
            (C40222 + C40223) * C90771 - (C40224 + C40225) * C6696 -
            (C40226 + C40227) * C6691) *
               C90634 * C39125 +
           ((C40225 + C40224) * C6695 -
            ((C40223 + C40222) * C90780 + (C40221 + C40220) * C6694) +
            (C40227 + C40226) * C90771 -
            (C39330 * C2573 + C39128 * C2830 + C39329 * C831 + C39127 * C1096) *
                C6696 -
            (C39330 * C2581 + C39128 * C2834 + C39329 * C841 + C39127 * C1101) *
                C6691) *
               C90634 * C39126) *
              C90567 * C90555)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C6771 +
            (C39329 * C182 + C39127 * C394 + C39330 * C927 + C39128 * C1195) *
                C6692 -
            (C39330 * C2570 + C39128 * C2827 + C39329 * C832 + C39127 * C1094) *
                C6772 -
            (C39330 * C2663 + C39128 * C2921 + C39329 * C927 + C39127 * C1195) *
                C90555) *
               C90634 * C39125 +
           ((C39357 + C39356) * C6771 + (C39446 + C39447) * C6692 -
            (C40221 + C40220) * C6772 - (C40334 + C40335) * C90555) *
               C90634 * C39126) *
              C90780 +
          (((C40220 + C40221) * C6772 -
            ((C39447 + C39446) * C6692 + (C39356 + C39357) * C6771) +
            (C40335 + C40334) * C90555) *
               C90634 * C39125 +
           ((C40225 + C40224) * C6772 -
            ((C39448 + C39449) * C6692 + (C39361 + C39360) * C6771) +
            (C40336 + C40337) * C90555) *
               C90634 * C39126) *
              C90771 +
          (((C39360 + C39361) * C6771 + (C39449 + C39448) * C6692 -
            (C40224 + C40225) * C6772 - (C40337 + C40336) * C90555) *
               C90634 * C39125 +
           ((C39365 + C39364) * C6771 + (C39450 + C39451) * C6692 -
            (C39330 * C2573 + C39128 * C2830 + C39329 * C831 + C39127 * C1096) *
                C6772 -
            (C39330 * C2666 + C39128 * C2924 + C39329 * C928 + C39127 * C1198) *
                C90555) *
               C90634 * C39126) *
              C6691) *
         C90567) /
        (p * q * std::sqrt(p + q));
    d2eeyz[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                 C244 +
             (C39329 * C245 + C39127 * C474 + C39330 * C1011 + C39128 * C1301) *
                 C90567) *
                C90634 * C39125 +
            ((C39357 + C39356) * C244 + (C39530 + C39531) * C90567) * C90634 *
                C39126) *
               C6692 -
           (((C40444 + C40445) * C90567 + (C40221 + C40220) * C244) * C90634 *
                C39126 +
            ((C39330 * C2745 + C39128 * C3017 + C39329 * C1011 +
              C39127 * C1301) *
                 C90567 +
             (C39330 * C2570 + C39128 * C2827 + C39329 * C832 +
              C39127 * C1094) *
                 C244) *
                C90634 * C39125) *
               C90555) *
              C90780 +
          ((((C40220 + C40221) * C244 + (C40445 + C40444) * C90567) * C90634 *
                C39125 +
            ((C40225 + C40224) * C244 + (C40446 + C40447) * C90567) * C90634 *
                C39126) *
               C90555 -
           (((C39532 + C39533) * C90567 + (C39361 + C39360) * C244) * C90634 *
                C39126 +
            ((C39531 + C39530) * C90567 + (C39356 + C39357) * C244) * C90634 *
                C39125) *
               C6692) *
              C90771 +
          ((((C39360 + C39361) * C244 + (C39533 + C39532) * C90567) * C90634 *
                C39125 +
            ((C39365 + C39364) * C244 + (C39534 + C39535) * C90567) * C90634 *
                C39126) *
               C6692 -
           (((C39330 * C2748 + C39128 * C3020 + C39329 * C1012 +
              C39127 * C1302) *
                 C90567 +
             (C39330 * C2573 + C39128 * C2830 + C39329 * C831 +
              C39127 * C1096) *
                 C244) *
                C90634 * C39126 +
            ((C40447 + C40446) * C90567 + (C40224 + C40225) * C244) * C90634 *
                C39125) *
               C90555) *
              C6691)) /
        (p * q * std::sqrt(p + q));
    d2eezx[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C6694 +
             (C554 * C116 + C90634 * C561) * C90780 - C584 * C6695 -
             C585 * C90771 + C586 * C6696 + C587 * C6691) *
                C39125 +
            (C584 * C6694 + C585 * C90780 - C586 * C6695 - C587 * C90771 +
             C588 * C6696 + C589 * C6691) *
                C39126) *
               C39127 +
           ((C20050 + C20051 - C20052 - C20053 + C20054 + C20055) * C39125 +
            (C47334 + C47335 - C47336 - C47337 + C47338 + C47339) * C39126) *
               C39128) *
              C90567 * C6692 +
          (((C20052 - (C20051 + C20050) + C20053 - C20054 - C20055) * C39125 +
            (C47336 - (C47335 + C47334) + C47337 - C47338 - C47339) * C39126) *
               C39127 +
           ((C20058 - (C20057 + C20056) + C20059 - C20060 - C20061) * C39125 +
            (C3124 * C6695 - (C3123 * C90780 + C3122 * C6694) + C3125 * C90771 -
             (C554 * C2573 + C90634 * C3108) * C6696 -
             (C554 * C2581 + C90634 * C3112) * C6691) *
                C39126) *
               C39128) *
              C90567 * C90555)) /
        (p * q * std::sqrt(p + q));
    d2eezy[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C6771 +
             (C554 * C182 + C90634 * C641) * C6692 - C14614 * C6772 -
             C14700 * C90555) *
                C39125 +
            (C7234 + C7235 - C7236 - C7237) * C39126) *
               C39127 +
           ((C14614 * C6771 + C14700 * C6692 - C14616 * C6772 -
             C14701 * C90555) *
                C39125 +
            (C47438 + C47439 - C47440 - C47441) * C39126) *
               C39128) *
              C90780 +
          (((C7236 - (C7235 + C7234) + C7237) * C39125 +
            (C7240 - (C7239 + C7238) + C7241) * C39126) *
               C39127 +
           ((C47440 - (C47439 + C47438) + C47441) * C39125 +
            (C47442 - (C47443 + C47444) + C47445) * C39126) *
               C39128) *
              C90771 +
          ((C7248 * C39125 + (C7244 + C7243 - C7242 - C7245) * C39126) *
               C39127 +
           ((C47444 + C47443 - C47442 - C47445) * C39125 +
            (C1422 * C6771 + C1521 * C6692 -
             (C554 * C2573 + C90634 * C3108) * C6772 -
             (C554 * C2666 + C90634 * C3202) * C90555) *
                C39126) *
               C39128) *
              C6691) *
         C90567) /
        (p * q * std::sqrt(p + q));
    d2eezz[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C90634 * C555) * C244 +
              (C554 * C245 + C90634 * C719) * C90567) *
                 C39125 +
             (C726 + C742) * C39126) *
                C39127 +
            ((C14776 + C14784) * C39125 + C40756 * C39126) * C39128) *
               C6692 -
           ((C16236 * C39126 + (C14785 + C14779) * C39125) * C39128 +
            (C40757 * C39126 + (C14784 + C14776) * C39125) * C39127) *
               C90555) *
              C90780 +
          (((C40756 * C39125 + C40758 * C39126) * C39127 +
            (C42661 * C39125 + (C3303 + C3309) * C39126) * C39128) *
               C90555 -
           ((C1621 * C39126 + C40757 * C39125) * C39128 +
            ((C743 + C729) * C39126 + (C742 + C726) * C39125) * C39127) *
               C6692) *
              C90771 +
          (((C746 * C39125 + (C734 + C744) * C39126) * C39127 +
            (C40758 * C39125 + (C1612 + C1620) * C39126) * C39128) *
               C6692 -
           ((((C554 * C2748 + C90634 * C3298) * C90567 +
              (C554 * C2573 + C90634 * C3108) * C244) *
                 C39126 +
             (C3309 + C3303) * C39125) *
                C39128 +
            ((C1620 + C1612) * C39126 + C1621 * C39125) * C39127) *
               C90555) *
              C6691)) /
        (p * q * std::sqrt(p + q));
    d2eexx[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C7401 +
            (C39129 * C116 + C39125 * C125 + C39130 * C117 + C39126 * C126) *
                C7396 -
            (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                C7402 -
            (C39130 * C118 + C39126 * C127 + C39129 * C117 + C39125 * C126) *
                C90503) *
               C39127 +
           ((C39862 + C39863) * C7401 + (C39864 + C39865) * C7396 -
            (C39866 + C39867) * C7402 - (C39868 + C39869) * C90503) *
               C39128) *
              C90634 * C90567 * C90781 +
          (((C39867 + C39866) * C7402 -
            ((C39865 + C39864) * C7396 + (C39863 + C39862) * C7401) +
            (C39869 + C39868) * C90503) *
               C39127 +
           ((C41807 + C41808) * C7402 -
            ((C41809 + C41810) * C7396 + (C41811 + C41812) * C7401) +
            (C41813 + C41814) * C90503) *
               C39128) *
              C90634 * C90567 * C90774 +
          (((C41812 + C41811) * C7401 + (C41810 + C41809) * C7396 -
            (C41808 + C41807) * C7402 - (C41814 + C41813) * C90503) *
               C39127 +
           ((C42736 + C42737) * C7401 + (C42738 + C42739) * C7396 -
            (C39130 * C3365 + C39126 * C3371 + C39129 * C3366 +
             C39125 * C3372) *
                C7402 -
            (C39130 * C3368 + C39126 * C3374 + C39129 * C3369 +
             C39125 * C3375) *
                C90503) *
               C39128) *
              C90634 * C90567 * C7400)) /
        (p * q * std::sqrt(p + q));
    d2eexy[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C7477 +
            (C39129 * C182 + C39125 * C188 + C39130 * C183 + C39126 * C189) *
                C90781 -
            (C39863 + C39862) * C7478 - (C39984 + C39985) * C90774 +
            (C41812 + C41811) * C7479 + (C41921 + C41922) * C7400) *
               C39127 +
           ((C39862 + C39863) * C7477 + (C39985 + C39984) * C90781 -
            (C41811 + C41812) * C7478 - (C41922 + C41921) * C90774 +
            (C42736 + C42737) * C7479 + (C42811 + C42810) * C7400) *
               C39128) *
              C90634 * C7396 +
          (((C39867 + C39866) * C7478 -
            ((C39130 * C184 + C39126 * C190 + C39129 * C183 + C39125 * C189) *
                 C90781 +
             (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                 C7477) +
            (C39986 + C39987) * C90774 - (C41808 + C41807) * C7479 -
            (C41923 + C41924) * C7400) *
               C39127 +
           ((C41807 + C41808) * C7478 -
            ((C39987 + C39986) * C90781 + (C39866 + C39867) * C7477) +
            (C41924 + C41923) * C90774 -
            (C39130 * C3365 + C39126 * C3371 + C39129 * C3366 +
             C39125 * C3372) *
                C7479 -
            (C39130 * C3431 + C39126 * C3434 + C39129 * C3432 +
             C39125 * C3435) *
                C7400) *
               C39128) *
              C90634 * C90503) *
         C90567) /
        (p * q * std::sqrt(p + q));
    d2eexz[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                 C244 +
             (C39129 * C245 + C39125 * C251 + C39130 * C246 + C39126 * C252) *
                 C90567) *
                C39127 +
            ((C39862 + C39863) * C244 + (C40100 + C40101) * C90567) * C39128) *
               C90634 * C90781 -
           (((C42031 + C42032) * C90567 + (C41811 + C41812) * C244) * C39128 +
            ((C40101 + C40100) * C90567 + (C39863 + C39862) * C244) * C39127) *
               C90634 * C90774 +
           (((C41812 + C41811) * C244 + (C42032 + C42031) * C90567) * C39127 +
            ((C42736 + C42737) * C244 + (C42882 + C42883) * C90567) * C39128) *
               C90634 * C7400) *
              C7396 +
          ((((C39867 + C39866) * C244 + (C40102 + C40103) * C90567) * C39127 +
            ((C41807 + C41808) * C244 + (C42033 + C42034) * C90567) * C39128) *
               C90634 * C90774 -
           (((C40103 + C40102) * C90567 + (C39866 + C39867) * C244) * C39128 +
            ((C39130 * C247 + C39126 * C253 + C39129 * C246 + C39125 * C252) *
                 C90567 +
             (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                 C244) *
                C39127) *
               C90634 * C90781 -
           (((C39130 * C3487 + C39126 * C3490 + C39129 * C3488 +
              C39125 * C3491) *
                 C90567 +
             (C39130 * C3365 + C39126 * C3371 + C39129 * C3366 +
              C39125 * C3372) *
                 C244) *
                C39128 +
            ((C42034 + C42033) * C90567 + (C41808 + C41807) * C244) * C39127) *
               C90634 * C7400) *
              C90503)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C7401 +
            (C39329 * C116 + C39127 * C314 + C39330 * C839 + C39128 * C1098) *
                C7396 -
            (C39356 + C39357) * C7402 - (C39358 + C39359) * C90503) *
               C90634 * C39125 +
           ((C39357 + C39356) * C7401 + (C39359 + C39358) * C7396 -
            (C39361 + C39360) * C7402 - (C39363 + C39362) * C90503) *
               C90634 * C39126) *
              C90567 * C90781 +
          (((C40220 + C40221) * C7402 -
            ((C39330 * C2577 + C39128 * C2831 + C39329 * C839 +
              C39127 * C1098) *
                 C7396 +
             (C39330 * C2570 + C39128 * C2827 + C39329 * C832 +
              C39127 * C1094) *
                 C7401) +
            (C40222 + C40223) * C90503) *
               C90634 * C39125 +
           ((C40225 + C40224) * C7402 -
            ((C40223 + C40222) * C7396 + (C40221 + C40220) * C7401) +
            (C40227 + C40226) * C90503) *
               C90634 * C39126) *
              C90567 * C90774 +
          (((C39329 * C2570 + C39127 * C2827 + C39330 * C3367 +
             C39128 * C3545) *
                C7401 +
            (C39329 * C2577 + C39127 * C2831 + C39330 * C3370 +
             C39128 * C3548) *
                C7396 -
            (C42141 + C42142) * C7402 - (C42143 + C42144) * C90503) *
               C90634 * C39125 +
           ((C42142 + C42141) * C7401 + (C42144 + C42143) * C7396 -
            (C39330 * C3365 + C39128 * C3543 + C39329 * C2572 +
             C39127 * C2829) *
                C7402 -
            (C39330 * C3368 + C39128 * C3546 + C39329 * C2579 +
             C39127 * C2833) *
                C90503) *
               C90634 * C39126) *
              C90567 * C7400)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C7477 +
            (C39329 * C182 + C39127 * C394 + C39330 * C927 + C39128 * C1195) *
                C90781 -
            (C39330 * C2570 + C39128 * C2827 + C39329 * C832 + C39127 * C1094) *
                C7478 -
            (C39330 * C2663 + C39128 * C2921 + C39329 * C927 + C39127 * C1195) *
                C90774 +
            (C39329 * C2570 + C39127 * C2827 + C39330 * C3367 +
             C39128 * C3545) *
                C7479 +
            (C39329 * C2663 + C39127 * C2921 + C39330 * C3433 +
             C39128 * C3599) *
                C7400) *
               C90634 * C39125 +
           ((C39357 + C39356) * C7477 + (C39446 + C39447) * C90781 -
            (C40221 + C40220) * C7478 - (C40334 + C40335) * C90774 +
            (C42142 + C42141) * C7479 + (C42247 + C42248) * C7400) *
               C90634 * C39126) *
              C7396 +
          (((C40220 + C40221) * C7478 -
            ((C39447 + C39446) * C90781 + (C39356 + C39357) * C7477) +
            (C40335 + C40334) * C90774 - (C42141 + C42142) * C7479 -
            (C42248 + C42247) * C7400) *
               C90634 * C39125 +
           ((C40225 + C40224) * C7478 -
            ((C39448 + C39449) * C90781 + (C39361 + C39360) * C7477) +
            (C40336 + C40337) * C90774 -
            (C39330 * C3365 + C39128 * C3543 + C39329 * C2572 +
             C39127 * C2829) *
                C7479 -
            (C39330 * C3431 + C39128 * C3601 + C39329 * C2665 +
             C39127 * C2923) *
                C7400) *
               C90634 * C39126) *
              C90503) *
         C90567) /
        (p * q * std::sqrt(p + q));
    d2eeyz[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                 C244 +
             (C39329 * C245 + C39127 * C474 + C39330 * C1011 + C39128 * C1301) *
                 C90567) *
                C90634 * C39125 +
            ((C39357 + C39356) * C244 + (C39530 + C39531) * C90567) * C90634 *
                C39126) *
               C90781 -
           (((C40444 + C40445) * C90567 + (C40221 + C40220) * C244) * C90634 *
                C39126 +
            ((C39330 * C2745 + C39128 * C3017 + C39329 * C1011 +
              C39127 * C1301) *
                 C90567 +
             (C39330 * C2570 + C39128 * C2827 + C39329 * C832 +
              C39127 * C1094) *
                 C244) *
                C90634 * C39125) *
               C90774 +
           (((C39329 * C2570 + C39127 * C2827 + C39330 * C3367 +
              C39128 * C3545) *
                 C244 +
             (C39329 * C2745 + C39127 * C3017 + C39330 * C3489 +
              C39128 * C3654) *
                 C90567) *
                C90634 * C39125 +
            ((C42142 + C42141) * C244 + (C42351 + C42352) * C90567) * C90634 *
                C39126) *
               C7400) *
              C7396 +
          ((((C40220 + C40221) * C244 + (C40445 + C40444) * C90567) * C90634 *
                C39125 +
            ((C40225 + C40224) * C244 + (C40446 + C40447) * C90567) * C90634 *
                C39126) *
               C90774 -
           (((C39532 + C39533) * C90567 + (C39361 + C39360) * C244) * C90634 *
                C39126 +
            ((C39531 + C39530) * C90567 + (C39356 + C39357) * C244) * C90634 *
                C39125) *
               C90781 -
           (((C39330 * C3487 + C39128 * C3652 + C39329 * C2747 +
              C39127 * C3019) *
                 C90567 +
             (C39330 * C3365 + C39128 * C3543 + C39329 * C2572 +
              C39127 * C2829) *
                 C244) *
                C90634 * C39126 +
            ((C42352 + C42351) * C90567 + (C42141 + C42142) * C244) * C90634 *
                C39125) *
               C7400) *
              C90503)) /
        (p * q * std::sqrt(p + q));
    d2eezx[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C7401 +
             (C554 * C116 + C90634 * C561) * C7396 - C584 * C7402 -
             C585 * C90503) *
                C39125 +
            (C584 * C7401 + C585 * C7396 - C586 * C7402 - C587 * C90503) *
                C39126) *
               C39127 +
           ((C20743 + C20744 - C20745 - C20746) * C39125 +
            (C48230 + C48231 - C48232 - C48233) * C39126) *
               C39128) *
              C90567 * C90781 +
          (((C20745 - (C20744 + C20743) + C20746) * C39125 +
            (C48232 - (C48231 + C48230) + C48233) * C39126) *
               C39127 +
           ((C20749 - (C20748 + C20747) + C20750) * C39125 +
            (C48234 - (C48235 + C48236) + C48237) * C39126) *
               C39128) *
              C90567 * C90774 +
          ((C20757 * C39125 + (C48236 + C48235 - C48234 - C48237) * C39126) *
               C39127 +
           ((C20753 + C20752 - C20751 - C20754) * C39125 +
            (C16060 * C7401 + C16063 * C7396 -
             (C554 * C3365 + C90634 * C3705) * C7402 -
             (C554 * C3368 + C90634 * C3708) * C90503) *
                C39126) *
               C39128) *
              C90567 * C7400)) /
        (p * q * std::sqrt(p + q));
    d2eezy[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C7477 +
             (C554 * C182 + C90634 * C641) * C90781 - C14614 * C7478 -
             C14700 * C90774 + C14616 * C7479 + C14701 * C7400) *
                C39125 +
            (C7937 + C7938 - C7939 - C7940 + C7941 + C7942) * C39126) *
               C39127 +
           ((C14614 * C7477 + C14700 * C90781 - C14616 * C7478 -
             C14701 * C90774 + C16062 * C7479 + C16151 * C7400) *
                C39125 +
            (C48336 + C48337 - C48338 - C48339 + C48340 + C48341) * C39126) *
               C39128) *
              C7396 +
          (((C7939 - (C7938 + C7937) + C7940 - C7941 - C7942) * C39125 +
            (C7945 - (C7944 + C7943) + C7946 - C7947 - C7948) * C39126) *
               C39127 +
           ((C48338 - (C48337 + C48336) + C48339 - C48340 - C48341) * C39125 +
            (C3124 * C7478 - (C1520 * C90781 + C1420 * C7477) + C3219 * C90774 -
             (C554 * C3365 + C90634 * C3705) * C7479 -
             (C554 * C3431 + C90634 * C3763) * C7400) *
                C39126) *
               C39128) *
              C90503) *
         C90567) /
        (p * q * std::sqrt(p + q));
    d2eezz[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C90634 * C555) * C244 +
              (C554 * C245 + C90634 * C719) * C90567) *
                 C39125 +
             (C726 + C742) * C39126) *
                C39127 +
            ((C14776 + C14784) * C39125 + C40756 * C39126) * C39128) *
               C90781 -
           ((C16236 * C39126 + (C14785 + C14779) * C39125) * C39128 +
            (C40757 * C39126 + (C14784 + C14776) * C39125) * C39127) *
               C90774 +
           ((C16229 * C39125 + C42661 * C39126) * C39127 +
            ((C16232 + C16241) * C39125 + (C16233 + C16242) * C39126) *
                C39128) *
               C7400) *
              C7396 +
          (((C40756 * C39125 + C40758 * C39126) * C39127 +
            (C42661 * C39125 + (C3303 + C3309) * C39126) * C39128) *
               C90774 -
           ((C1621 * C39126 + C40757 * C39125) * C39128 +
            ((C743 + C729) * C39126 + (C742 + C726) * C39125) * C39127) *
               C90781 -
           ((((C554 * C3487 + C90634 * C3814) * C90567 +
              (C554 * C3365 + C90634 * C3705) * C244) *
                 C39126 +
             (C16242 + C16233) * C39125) *
                C39128 +
            ((C3309 + C3303) * C39126 + C16236 * C39125) * C39127) *
               C7400) *
              C90503)) /
        (p * q * std::sqrt(p + q));
    d2eexx[2] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                 C7401 +
             (C39129 * C116 + C39125 * C125 + C39130 * C117 + C39126 * C126) *
                 C7396 -
             (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                 C7402 -
             (C39130 * C118 + C39126 * C127 + C39129 * C117 + C39125 * C126) *
                 C90503) *
                C39127 +
            ((C39862 + C39863) * C7401 + (C39864 + C39865) * C7396 -
             (C39866 + C39867) * C7402 - (C39868 + C39869) * C90503) *
                C39128) *
               C90634 * C90753 +
           (((C39129 * C1697 + C39125 * C1702 + C39130 * C1698 +
              C39126 * C1703) *
                 C7402 -
             ((C39130 * C1706 + C39126 * C1713 + C39129 * C1707 +
               C39125 * C1714) *
                  C7396 +
              (C39130 * C1697 + C39126 * C1702 + C39129 * C1700 +
               C39125 * C1708) *
                  C7401) +
             (C39129 * C1706 + C39125 * C1713 + C39130 * C1705 +
              C39126 * C1712) *
                 C90503) *
                C39127 +
            ((C48578 + C48579) * C7402 -
             ((C43400 + C43401) * C7396 + (C43402 + C43403) * C7401) +
             (C48580 + C48581) * C90503) *
                C39128) *
               C90634 * C90579) *
              C6692 +
          ((((C39867 + C39866) * C7402 -
             ((C39865 + C39864) * C7396 + (C39863 + C39862) * C7401) +
             (C39869 + C39868) * C90503) *
                C39127 +
            ((C41807 + C41808) * C7402 -
             ((C41809 + C41810) * C7396 + (C41811 + C41812) * C7401) +
             (C41813 + C41814) * C90503) *
                C39128) *
               C90634 * C90753 +
           (((C43403 + C43402) * C7401 + (C43401 + C43400) * C7396 -
             (C48579 + C48578) * C7402 - (C48581 + C48580) * C90503) *
                C39127 +
            ((C43404 + C43405) * C7401 + (C43406 + C43407) * C7396 -
             (C39130 * C3894 + C39126 * C3906 + C39129 * C3895 +
              C39125 * C3907) *
                 C7402 -
             (C39130 * C3903 + C39126 * C3912 + C39129 * C3904 +
              C39125 * C3913) *
                 C90503) *
                C39128) *
               C90634 * C90579) *
              C90555)) /
        (p * q * std::sqrt(p + q));
    d2eexy[2] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                 C6771 +
             (C39129 * C182 + C39125 * C188 + C39130 * C183 + C39126 * C189) *
                 C6692 -
             (C39863 + C39862) * C6772 - (C39984 + C39985) * C90555) *
                C39127 +
            ((C39862 + C39863) * C6771 + (C39985 + C39984) * C6692 -
             (C41811 + C41812) * C6772 - (C41922 + C41921) * C90555) *
                C39128) *
               C90634 * C7396 +
           (((C39867 + C39866) * C6772 -
             ((C39130 * C184 + C39126 * C190 + C39129 * C183 + C39125 * C189) *
                  C6692 +
              (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                  C6771) +
             (C39986 + C39987) * C90555) *
                C39127 +
            ((C41807 + C41808) * C6772 -
             ((C39987 + C39986) * C6692 + (C39866 + C39867) * C6771) +
             (C41924 + C41923) * C90555) *
                C39128) *
               C90634 * C90503) *
              C90753 +
          ((((C43403 + C43402) * C6772 -
             ((C39130 * C1791 + C39126 * C1796 + C39129 * C1794 +
               C39125 * C1799) *
                  C6692 +
              (C39130 * C1697 + C39126 * C1702 + C39129 * C1700 +
               C39125 * C1708) *
                  C6771) +
             (C43514 + C43515) * C90555) *
                C39127 +
            ((C43404 + C43405) * C6772 -
             ((C43515 + C43514) * C6692 + (C43402 + C43403) * C6771) +
             (C43517 + C43516) * C90555) *
                C39128) *
               C90634 * C7396 +
           (((C39129 * C1697 + C39125 * C1702 + C39130 * C1698 +
              C39126 * C1703) *
                 C6771 +
             (C39129 * C1791 + C39125 * C1796 + C39130 * C1792 +
              C39126 * C1797) *
                 C6692 -
             (C48579 + C48578) * C6772 - (C48716 + C48717) * C90555) *
                C39127 +
            ((C48578 + C48579) * C6771 + (C48717 + C48716) * C6692 -
             (C39130 * C3894 + C39126 * C3906 + C39129 * C3895 +
              C39125 * C3907) *
                 C6772 -
             (C39130 * C3992 + C39126 * C3998 + C39129 * C3993 +
              C39125 * C3999) *
                 C90555) *
                C39128) *
               C90634 * C90503) *
              C90579)) /
        (p * q * std::sqrt(p + q));
    d2eexz[2] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                 C1875 +
             (C39129 * C245 + C39125 * C251 + C39130 * C246 + C39126 * C252) *
                 C90753 -
             (C39130 * C1697 + C39126 * C1702 + C39129 * C1700 +
              C39125 * C1708) *
                 C1876 -
             (C39130 * C1878 + C39126 * C1883 + C39129 * C1879 +
              C39125 * C1884) *
                 C90579) *
                C39127 +
            ((C39862 + C39863) * C1875 + (C40100 + C40101) * C90753 -
             (C43402 + C43403) * C1876 - (C43624 + C43625) * C90579) *
                C39128) *
               C90634 * C6692 +
           (((C43403 + C43402) * C1876 -
             ((C40101 + C40100) * C90753 + (C39863 + C39862) * C1875) +
             (C43625 + C43624) * C90579) *
                C39127 +
            ((C43404 + C43405) * C1876 -
             ((C42031 + C42032) * C90753 + (C41811 + C41812) * C1875) +
             (C43626 + C43627) * C90579) *
                C39128) *
               C90634 * C90555) *
              C7396 +
          ((((C39129 * C1697 + C39125 * C1702 + C39130 * C1698 +
              C39126 * C1703) *
                 C1876 -
             ((C39130 * C247 + C39126 * C253 + C39129 * C246 + C39125 * C252) *
                  C90753 +
              (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                  C1875) +
             (C39129 * C1878 + C39125 * C1883 + C39130 * C1877 +
              C39126 * C1882) *
                 C90579) *
                C39127 +
            ((C48578 + C48579) * C1876 -
             ((C40103 + C40102) * C90753 + (C39866 + C39867) * C1875) +
             (C48852 + C48853) * C90579) *
                C39128) *
               C90634 * C6692 +
           (((C39867 + C39866) * C1875 + (C40102 + C40103) * C90753 -
             (C48579 + C48578) * C1876 - (C48853 + C48852) * C90579) *
                C39127 +
            ((C41807 + C41808) * C1875 + (C42033 + C42034) * C90753 -
             (C39130 * C3894 + C39126 * C3906 + C39129 * C3895 +
              C39125 * C3907) *
                 C1876 -
             (C39130 * C4078 + C39126 * C4084 + C39129 * C4079 +
              C39125 * C4085) *
                 C90579) *
                C39128) *
               C90634 * C90555) *
              C90503)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[2] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                 C7401 +
             (C39329 * C116 + C39127 * C314 + C39330 * C839 + C39128 * C1098) *
                 C7396 -
             (C39356 + C39357) * C7402 - (C39358 + C39359) * C90503) *
                C90634 * C39125 +
            ((C39357 + C39356) * C7401 + (C39359 + C39358) * C7396 -
             (C39361 + C39360) * C7402 - (C39363 + C39362) * C90503) *
                C90634 * C39126) *
               C90753 +
           (((C41167 + C41168) * C7402 -
             ((C39330 * C3900 + C39128 * C4167 + C39329 * C1707 +
               C39127 * C1966) *
                  C7396 +
              (C39330 * C3891 + C39128 * C4161 + C39329 * C1700 +
               C39127 * C1962) *
                  C7401) +
             (C41169 + C41170) * C90503) *
                C90634 * C39125 +
            ((C41172 + C41171) * C7402 -
             ((C41170 + C41169) * C7396 + (C41168 + C41167) * C7401) +
             (C41174 + C41173) * C90503) *
                C90634 * C39126) *
               C90579) *
              C6692 +
          ((((C40220 + C40221) * C7402 -
             ((C39330 * C2577 + C39128 * C2831 + C39329 * C839 +
               C39127 * C1098) *
                  C7396 +
              (C39330 * C2570 + C39128 * C2827 + C39329 * C832 +
               C39127 * C1094) *
                  C7401) +
             (C40222 + C40223) * C90503) *
                C90634 * C39125 +
            ((C40225 + C40224) * C7402 -
             ((C40223 + C40222) * C7396 + (C40221 + C40220) * C7401) +
             (C40227 + C40226) * C90503) *
                C90634 * C39126) *
               C90753 +
           (((C39329 * C3891 + C39127 * C4161 + C39330 * C3896 +
              C39128 * C4166) *
                 C7401 +
             (C39329 * C3900 + C39127 * C4167 + C39330 * C3905 +
              C39128 * C4172) *
                 C7396 -
             (C48992 + C48993) * C7402 - (C48994 + C48995) * C90503) *
                C90634 * C39125 +
            ((C48993 + C48992) * C7401 + (C48995 + C48994) * C7396 -
             (C39330 * C3894 + C39128 * C4164 + C39329 * C3893 +
              C39127 * C4163) *
                 C7402 -
             (C39330 * C3903 + C39128 * C4170 + C39329 * C3902 +
              C39127 * C4169) *
                 C90503) *
                C90634 * C39126) *
               C90579) *
              C90555)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[2] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                 C6771 +
             (C39329 * C182 + C39127 * C394 + C39330 * C927 + C39128 * C1195) *
                 C6692 -
             (C39330 * C2570 + C39128 * C2827 + C39329 * C832 +
              C39127 * C1094) *
                 C6772 -
             (C39330 * C2663 + C39128 * C2921 + C39329 * C927 +
              C39127 * C1195) *
                 C90555) *
                C90634 * C39125 +
            ((C39357 + C39356) * C6771 + (C39446 + C39447) * C6692 -
             (C40221 + C40220) * C6772 - (C40334 + C40335) * C90555) *
                C90634 * C39126) *
               C7396 +
           (((C40220 + C40221) * C6772 -
             ((C39447 + C39446) * C6692 + (C39356 + C39357) * C6771) +
             (C40335 + C40334) * C90555) *
                C90634 * C39125 +
            ((C40225 + C40224) * C6772 -
             ((C39448 + C39449) * C6692 + (C39361 + C39360) * C6771) +
             (C40336 + C40337) * C90555) *
                C90634 * C39126) *
               C90503) *
              C90753 +
          ((((C39329 * C3891 + C39127 * C4161 + C39330 * C3896 +
              C39128 * C4166) *
                 C6772 -
             ((C39330 * C3989 + C39128 * C4247 + C39329 * C1794 +
               C39127 * C2066) *
                  C6692 +
              (C39330 * C3891 + C39128 * C4161 + C39329 * C1700 +
               C39127 * C1962) *
                  C6771) +
             (C39329 * C3989 + C39127 * C4247 + C39330 * C3994 +
              C39128 * C4248) *
                 C90555) *
                C90634 * C39125 +
            ((C48993 + C48992) * C6772 -
             ((C41282 + C41281) * C6692 + (C41168 + C41167) * C6771) +
             (C49130 + C49131) * C90555) *
                C90634 * C39126) *
               C7396 +
           (((C41167 + C41168) * C6771 + (C41281 + C41282) * C6692 -
             (C48992 + C48993) * C6772 - (C49131 + C49130) * C90555) *
                C90634 * C39125 +
            ((C41172 + C41171) * C6771 + (C41283 + C41284) * C6692 -
             (C39330 * C3894 + C39128 * C4164 + C39329 * C3893 +
              C39127 * C4163) *
                 C6772 -
             (C39330 * C3992 + C39128 * C4252 + C39329 * C3991 +
              C39127 * C4251) *
                 C90555) *
                C90634 * C39126) *
               C90503) *
              C90579)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[2] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                 C1875 +
             (C39329 * C245 + C39127 * C474 + C39330 * C1011 + C39128 * C1301) *
                 C90753 -
             (C39330 * C3891 + C39128 * C4161 + C39329 * C1700 +
              C39127 * C1962) *
                 C1876 -
             (C39330 * C4075 + C39128 * C4327 + C39329 * C1879 +
              C39127 * C2159) *
                 C90579) *
                C90634 * C39125 +
            ((C39357 + C39356) * C1875 + (C39530 + C39531) * C90753 -
             (C41168 + C41167) * C1876 - (C41391 + C41392) * C90579) *
                C90634 * C39126) *
               C6692 +
           (((C39329 * C3891 + C39127 * C4161 + C39330 * C3896 +
              C39128 * C4166) *
                 C1876 -
             ((C39330 * C2745 + C39128 * C3017 + C39329 * C1011 +
               C39127 * C1301) *
                  C90753 +
              (C39330 * C2570 + C39128 * C2827 + C39329 * C832 +
               C39127 * C1094) *
                  C1875) +
             (C39329 * C4075 + C39127 * C4327 + C39330 * C4080 +
              C39128 * C4330) *
                 C90579) *
                C90634 * C39125 +
            ((C48993 + C48992) * C1876 -
             ((C40444 + C40445) * C90753 + (C40221 + C40220) * C1875) +
             (C49266 + C49267) * C90579) *
                C90634 * C39126) *
               C90555) *
              C7396 +
          ((((C41167 + C41168) * C1876 -
             ((C39531 + C39530) * C90753 + (C39356 + C39357) * C1875) +
             (C41392 + C41391) * C90579) *
                C90634 * C39125 +
            ((C41172 + C41171) * C1876 -
             ((C39532 + C39533) * C90753 + (C39361 + C39360) * C1875) +
             (C41393 + C41394) * C90579) *
                C90634 * C39126) *
               C6692 +
           (((C40220 + C40221) * C1875 + (C40445 + C40444) * C90753 -
             (C48992 + C48993) * C1876 - (C49267 + C49266) * C90579) *
                C90634 * C39125 +
            ((C40225 + C40224) * C1875 + (C40446 + C40447) * C90753 -
             (C39330 * C3894 + C39128 * C4164 + C39329 * C3893 +
              C39127 * C4163) *
                 C1876 -
             (C39330 * C4078 + C39128 * C4332 + C39329 * C4077 +
              C39127 * C4329) *
                 C90579) *
                C90634 * C39126) *
               C90555) *
              C90503)) /
        (p * q * std::sqrt(p + q));
    d2eezx[2] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C90634 * C555) * C7401 +
              (C554 * C116 + C90634 * C561) * C7396 - C584 * C7402 -
              C585 * C90503) *
                 C39125 +
             (C584 * C7401 + C585 * C7396 - C586 * C7402 - C587 * C90503) *
                 C39126) *
                C39127 +
            ((C20743 + C20744 - C20745 - C20746) * C39125 +
             (C48230 + C48231 - C48232 - C48233) * C39126) *
                C39128) *
               C90753 +
           (((C2286 * C7402 -
              ((C554 * C1707 + C90634 * C2268) * C7396 +
               (C554 * C1700 + C90634 * C2264) * C7401) +
              C2287 * C90503) *
                 C39125 +
             (C2288 * C7402 - (C2287 * C7396 + C2286 * C7401) +
              C2289 * C90503) *
                 C39126) *
                C39127 +
            ((C21647 - (C21648 + C21649) + C21650) * C39125 +
             (C49398 - (C49399 + C49400) + C49401) * C39126) *
                C39128) *
               C90579) *
              C6692 +
          ((((C20745 - (C20744 + C20743) + C20746) * C39125 +
             (C48232 - (C48231 + C48230) + C48233) * C39126) *
                C39127 +
            ((C20749 - (C20748 + C20747) + C20750) * C39125 +
             (C48234 - (C48235 + C48236) + C48237) * C39126) *
                C39128) *
               C90753 +
           (((C21649 + C21648 - C21647 - C21650) * C39125 +
             (C49400 + C49399 - C49398 - C49401) * C39126) *
                C39127 +
            ((C21654 + C21653 - C21659 - C21660) * C39125 +
             (C21657 * C7401 + C21658 * C7396 -
              (C554 * C3894 + C90634 * C4410) * C7402 -
              (C554 * C3903 + C90634 * C4416) * C90503) *
                 C39126) *
                C39128) *
               C90579) *
              C90555)) /
        (p * q * std::sqrt(p + q));
    d2eezy[2] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C554 * C107 + C90634 * C555) * C6771 +
                       (C554 * C182 + C90634 * C641) * C6692 - C14614 * C6772 -
                       C14700 * C90555) *
                          C39125 +
                      (C7234 + C7235 - C7236 - C7237) * C39126) *
                         C39127 +
                     ((C14614 * C6771 + C14700 * C6692 - C14616 * C6772 -
                       C14701 * C90555) *
                          C39125 +
                      (C47438 + C47439 - C47440 - C47441) * C39126) *
                         C39128) *
                        C7396 +
                    (((C7236 - (C7235 + C7234) + C7237) * C39125 +
                      (C7240 - (C7239 + C7238) + C7241) * C39126) *
                         C39127 +
                     ((C47440 - (C47439 + C47438) + C47441) * C39125 +
                      (C47442 - (C47443 + C47444) + C47445) * C39126) *
                         C39128) *
                        C90503) *
                       C90753 +
                   ((((C17381 * C6772 -
                       ((C554 * C1794 + C90634 * C2368) * C6692 +
                        (C554 * C1700 + C90634 * C2264) * C6771) +
                       C17474 * C90555) *
                          C39125 +
                      (C8874 - (C8875 + C8876) + C8886) * C39126) *
                         C39127 +
                     ((C17379 * C6772 - (C17474 * C6692 + C17381 * C6771) +
                       C17475 * C90555) *
                          C39125 +
                      (C49532 - (C49533 + C49534) + C49535) * C39126) *
                         C39128) *
                        C7396 +
                    (((C8876 + C8875 - C8874 - C8886) * C39125 +
                      (C8881 + C8880 - C8879 - C8887) * C39126) *
                         C39127 +
                     ((C49534 + C49533 - C49532 - C49535) * C39125 +
                      (C8773 * C6771 + C8885 * C6692 -
                       (C554 * C3894 + C90634 * C4410) * C6772 -
                       (C554 * C3992 + C90634 * C4498) * C90555) *
                          C39126) *
                         C39128) *
                        C90503) *
                       C90579)) /
                 (p * q * std::sqrt(p + q));
    d2eezz[2] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C90634 * C555) * C1875 +
              (C554 * C245 + C90634 * C719) * C90753 -
              (C554 * C1700 + C90634 * C2264) * C1876 -
              (C554 * C1879 + C90634 * C2460) * C90579) *
                 C39125 +
             (C2466 + C2467 - C2468 - C2485) * C39126) *
                C39127 +
            ((C17553 + C17554 - C17555 - C17572) * C39125 + C49670 * C39126) *
                C39128) *
               C6692 +
           (((C17555 - (C17554 + C17553) + C17572) * C39125 + C49671 * C39126) *
                C39127 +
            ((C17560 - (C17559 + C17558) + C17574) * C39125 +
             (C21862 - (C21863 + C21864) + C21868) * C39126) *
                C39128) *
               C90555) *
              C7396 +
          ((((C2468 - (C2467 + C2466) + C2485) * C39125 +
             (C2473 - (C2472 + C2471) + C2487) * C39126) *
                C39127 +
            (C49671 * C39125 + (C8992 - (C8993 + C8994) + C9000) * C39126) *
                C39128) *
               C6692 +
           ((C49670 * C39125 + (C8994 + C8993 - C8992 - C9000) * C39126) *
                C39127 +
            ((C21864 + C21863 - C21862 - C21868) * C39125 +
             (C3124 * C1875 + C3307 * C90753 -
              (C554 * C3894 + C90634 * C4410) * C1876 -
              (C554 * C4078 + C90634 * C4578) * C90579) *
                 C39126) *
                C39128) *
               C90555) *
              C90503)) /
        (p * q * std::sqrt(p + q));
    d2eexx[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                 C88316 +
             (C39129 * C116 + C39125 * C125 + C39130 * C117 + C39126 * C126) *
                 C90744 -
             (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                 C88309 -
             (C39130 * C118 + C39126 * C127 + C39129 * C117 + C39125 * C126) *
                 C90503) *
                C39127 +
            ((C39862 + C39863) * C88316 + (C39864 + C39865) * C90744 -
             (C39866 + C39867) * C88309 - (C39868 + C39869) * C90503) *
                C39128) *
               C90634 * C9074 +
           (((C39129 * C1697 + C39125 * C1702 + C39130 * C1698 +
              C39126 * C1703) *
                 C88309 -
             ((C39130 * C1706 + C39126 * C1713 + C39129 * C1707 +
               C39125 * C1714) *
                  C90744 +
              (C39130 * C1697 + C39126 * C1702 + C39129 * C1700 +
               C39125 * C1708) *
                  C88316) +
             (C39129 * C1706 + C39125 * C1713 + C39130 * C1705 +
              C39126 * C1712) *
                 C90503) *
                C39127 +
            ((C48578 + C48579) * C88309 -
             ((C43400 + C43401) * C90744 + (C43402 + C43403) * C88316) +
             (C48580 + C48581) * C90503) *
                C39128) *
               C90634 * C90579) *
              C6692 +
          ((((C39867 + C39866) * C88309 -
             ((C39865 + C39864) * C90744 + (C39863 + C39862) * C88316) +
             (C39869 + C39868) * C90503) *
                C39127 +
            ((C41807 + C41808) * C88309 -
             ((C41809 + C41810) * C90744 + (C41811 + C41812) * C88316) +
             (C41813 + C41814) * C90503) *
                C39128) *
               C90634 * C9074 +
           (((C43403 + C43402) * C88316 + (C43401 + C43400) * C90744 -
             (C48579 + C48578) * C88309 - (C48581 + C48580) * C90503) *
                C39127 +
            ((C43404 + C43405) * C88316 + (C43406 + C43407) * C90744 -
             (C39130 * C3894 + C39126 * C3906 + C39129 * C3895 +
              C39125 * C3907) *
                 C88309 -
             (C39130 * C3903 + C39126 * C3912 + C39129 * C3904 +
              C39125 * C3913) *
                 C90503) *
                C39128) *
               C90634 * C90579) *
              C90555)) /
        (p * q * std::sqrt(p + q));
    d2eexy[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                 C6771 +
             (C39129 * C182 + C39125 * C188 + C39130 * C183 + C39126 * C189) *
                 C6692 -
             (C39863 + C39862) * C6772 - (C39984 + C39985) * C90555) *
                C39127 +
            ((C39862 + C39863) * C6771 + (C39985 + C39984) * C6692 -
             (C41811 + C41812) * C6772 - (C41922 + C41921) * C90555) *
                C39128) *
               C90634 * C90744 +
           (((C39867 + C39866) * C6772 -
             ((C39130 * C184 + C39126 * C190 + C39129 * C183 + C39125 * C189) *
                  C6692 +
              (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                  C6771) +
             (C39986 + C39987) * C90555) *
                C39127 +
            ((C41807 + C41808) * C6772 -
             ((C39987 + C39986) * C6692 + (C39866 + C39867) * C6771) +
             (C41924 + C41923) * C90555) *
                C39128) *
               C90634 * C90503) *
              C9074 +
          ((((C43403 + C43402) * C6772 -
             ((C39130 * C1791 + C39126 * C1796 + C39129 * C1794 +
               C39125 * C1799) *
                  C6692 +
              (C39130 * C1697 + C39126 * C1702 + C39129 * C1700 +
               C39125 * C1708) *
                  C6771) +
             (C43514 + C43515) * C90555) *
                C39127 +
            ((C43404 + C43405) * C6772 -
             ((C43515 + C43514) * C6692 + (C43402 + C43403) * C6771) +
             (C43517 + C43516) * C90555) *
                C39128) *
               C90634 * C90744 +
           (((C39129 * C1697 + C39125 * C1702 + C39130 * C1698 +
              C39126 * C1703) *
                 C6771 +
             (C39129 * C1791 + C39125 * C1796 + C39130 * C1792 +
              C39126 * C1797) *
                 C6692 -
             (C48579 + C48578) * C6772 - (C48716 + C48717) * C90555) *
                C39127 +
            ((C48578 + C48579) * C6771 + (C48717 + C48716) * C6692 -
             (C39130 * C3894 + C39126 * C3906 + C39129 * C3895 +
              C39125 * C3907) *
                 C6772 -
             (C39130 * C3992 + C39126 * C3998 + C39129 * C3993 +
              C39125 * C3999) *
                 C90555) *
                C39128) *
               C90634 * C90503) *
              C90579)) /
        (p * q * std::sqrt(p + q));
    d2eexz[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                 C9224 +
             (C39129 * C245 + C39125 * C251 + C39130 * C246 + C39126 * C252) *
                 C9074 -
             (C39130 * C1697 + C39126 * C1702 + C39129 * C1700 +
              C39125 * C1708) *
                 C9225 -
             (C39130 * C1878 + C39126 * C1883 + C39129 * C1879 +
              C39125 * C1884) *
                 C90579) *
                C39127 +
            ((C39862 + C39863) * C9224 + (C40100 + C40101) * C9074 -
             (C43402 + C43403) * C9225 - (C43624 + C43625) * C90579) *
                C39128) *
               C90634 * C6692 +
           (((C43403 + C43402) * C9225 -
             ((C40101 + C40100) * C9074 + (C39863 + C39862) * C9224) +
             (C43625 + C43624) * C90579) *
                C39127 +
            ((C43404 + C43405) * C9225 -
             ((C42031 + C42032) * C9074 + (C41811 + C41812) * C9224) +
             (C43626 + C43627) * C90579) *
                C39128) *
               C90634 * C90555) *
              C90744 +
          ((((C39129 * C1697 + C39125 * C1702 + C39130 * C1698 +
              C39126 * C1703) *
                 C9225 -
             ((C39130 * C247 + C39126 * C253 + C39129 * C246 + C39125 * C252) *
                  C9074 +
              (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                  C9224) +
             (C39129 * C1878 + C39125 * C1883 + C39130 * C1877 +
              C39126 * C1882) *
                 C90579) *
                C39127 +
            ((C48578 + C48579) * C9225 -
             ((C40103 + C40102) * C9074 + (C39866 + C39867) * C9224) +
             (C48852 + C48853) * C90579) *
                C39128) *
               C90634 * C6692 +
           (((C39867 + C39866) * C9224 + (C40102 + C40103) * C9074 -
             (C48579 + C48578) * C9225 - (C48853 + C48852) * C90579) *
                C39127 +
            ((C41807 + C41808) * C9224 + (C42033 + C42034) * C9074 -
             (C39130 * C3894 + C39126 * C3906 + C39129 * C3895 +
              C39125 * C3907) *
                 C9225 -
             (C39130 * C4078 + C39126 * C4084 + C39129 * C4079 +
              C39125 * C4085) *
                 C90579) *
                C39128) *
               C90634 * C90555) *
              C90503)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                 C88316 +
             (C39329 * C116 + C39127 * C314 + C39330 * C839 + C39128 * C1098) *
                 C90744 -
             (C39356 + C39357) * C88309 - (C39358 + C39359) * C90503) *
                C90634 * C39125 +
            ((C39357 + C39356) * C88316 + (C39359 + C39358) * C90744 -
             (C39361 + C39360) * C88309 - (C39363 + C39362) * C90503) *
                C90634 * C39126) *
               C9074 +
           (((C41167 + C41168) * C88309 -
             ((C39330 * C3900 + C39128 * C4167 + C39329 * C1707 +
               C39127 * C1966) *
                  C90744 +
              (C39330 * C3891 + C39128 * C4161 + C39329 * C1700 +
               C39127 * C1962) *
                  C88316) +
             (C41169 + C41170) * C90503) *
                C90634 * C39125 +
            ((C41172 + C41171) * C88309 -
             ((C41170 + C41169) * C90744 + (C41168 + C41167) * C88316) +
             (C41174 + C41173) * C90503) *
                C90634 * C39126) *
               C90579) *
              C6692 +
          ((((C40220 + C40221) * C88309 -
             ((C39330 * C2577 + C39128 * C2831 + C39329 * C839 +
               C39127 * C1098) *
                  C90744 +
              (C39330 * C2570 + C39128 * C2827 + C39329 * C832 +
               C39127 * C1094) *
                  C88316) +
             (C40222 + C40223) * C90503) *
                C90634 * C39125 +
            ((C40225 + C40224) * C88309 -
             ((C40223 + C40222) * C90744 + (C40221 + C40220) * C88316) +
             (C40227 + C40226) * C90503) *
                C90634 * C39126) *
               C9074 +
           (((C39329 * C3891 + C39127 * C4161 + C39330 * C3896 +
              C39128 * C4166) *
                 C88316 +
             (C39329 * C3900 + C39127 * C4167 + C39330 * C3905 +
              C39128 * C4172) *
                 C90744 -
             (C48992 + C48993) * C88309 - (C48994 + C48995) * C90503) *
                C90634 * C39125 +
            ((C48993 + C48992) * C88316 + (C48995 + C48994) * C90744 -
             (C39330 * C3894 + C39128 * C4164 + C39329 * C3893 +
              C39127 * C4163) *
                 C88309 -
             (C39330 * C3903 + C39128 * C4170 + C39329 * C3902 +
              C39127 * C4169) *
                 C90503) *
                C90634 * C39126) *
               C90579) *
              C90555)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                 C6771 +
             (C39329 * C182 + C39127 * C394 + C39330 * C927 + C39128 * C1195) *
                 C6692 -
             (C39330 * C2570 + C39128 * C2827 + C39329 * C832 +
              C39127 * C1094) *
                 C6772 -
             (C39330 * C2663 + C39128 * C2921 + C39329 * C927 +
              C39127 * C1195) *
                 C90555) *
                C90634 * C39125 +
            ((C39357 + C39356) * C6771 + (C39446 + C39447) * C6692 -
             (C40221 + C40220) * C6772 - (C40334 + C40335) * C90555) *
                C90634 * C39126) *
               C90744 +
           (((C40220 + C40221) * C6772 -
             ((C39447 + C39446) * C6692 + (C39356 + C39357) * C6771) +
             (C40335 + C40334) * C90555) *
                C90634 * C39125 +
            ((C40225 + C40224) * C6772 -
             ((C39448 + C39449) * C6692 + (C39361 + C39360) * C6771) +
             (C40336 + C40337) * C90555) *
                C90634 * C39126) *
               C90503) *
              C9074 +
          ((((C39329 * C3891 + C39127 * C4161 + C39330 * C3896 +
              C39128 * C4166) *
                 C6772 -
             ((C39330 * C3989 + C39128 * C4247 + C39329 * C1794 +
               C39127 * C2066) *
                  C6692 +
              (C39330 * C3891 + C39128 * C4161 + C39329 * C1700 +
               C39127 * C1962) *
                  C6771) +
             (C39329 * C3989 + C39127 * C4247 + C39330 * C3994 +
              C39128 * C4248) *
                 C90555) *
                C90634 * C39125 +
            ((C48993 + C48992) * C6772 -
             ((C41282 + C41281) * C6692 + (C41168 + C41167) * C6771) +
             (C49130 + C49131) * C90555) *
                C90634 * C39126) *
               C90744 +
           (((C41167 + C41168) * C6771 + (C41281 + C41282) * C6692 -
             (C48992 + C48993) * C6772 - (C49131 + C49130) * C90555) *
                C90634 * C39125 +
            ((C41172 + C41171) * C6771 + (C41283 + C41284) * C6692 -
             (C39330 * C3894 + C39128 * C4164 + C39329 * C3893 +
              C39127 * C4163) *
                 C6772 -
             (C39330 * C3992 + C39128 * C4252 + C39329 * C3991 +
              C39127 * C4251) *
                 C90555) *
                C90634 * C39126) *
               C90503) *
              C90579)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                 C9224 +
             (C39329 * C245 + C39127 * C474 + C39330 * C1011 + C39128 * C1301) *
                 C9074 -
             (C39330 * C3891 + C39128 * C4161 + C39329 * C1700 +
              C39127 * C1962) *
                 C9225 -
             (C39330 * C4075 + C39128 * C4327 + C39329 * C1879 +
              C39127 * C2159) *
                 C90579) *
                C90634 * C39125 +
            ((C39357 + C39356) * C9224 + (C39530 + C39531) * C9074 -
             (C41168 + C41167) * C9225 - (C41391 + C41392) * C90579) *
                C90634 * C39126) *
               C6692 +
           (((C39329 * C3891 + C39127 * C4161 + C39330 * C3896 +
              C39128 * C4166) *
                 C9225 -
             ((C39330 * C2745 + C39128 * C3017 + C39329 * C1011 +
               C39127 * C1301) *
                  C9074 +
              (C39330 * C2570 + C39128 * C2827 + C39329 * C832 +
               C39127 * C1094) *
                  C9224) +
             (C39329 * C4075 + C39127 * C4327 + C39330 * C4080 +
              C39128 * C4330) *
                 C90579) *
                C90634 * C39125 +
            ((C48993 + C48992) * C9225 -
             ((C40444 + C40445) * C9074 + (C40221 + C40220) * C9224) +
             (C49266 + C49267) * C90579) *
                C90634 * C39126) *
               C90555) *
              C90744 +
          ((((C41167 + C41168) * C9225 -
             ((C39531 + C39530) * C9074 + (C39356 + C39357) * C9224) +
             (C41392 + C41391) * C90579) *
                C90634 * C39125 +
            ((C41172 + C41171) * C9225 -
             ((C39532 + C39533) * C9074 + (C39361 + C39360) * C9224) +
             (C41393 + C41394) * C90579) *
                C90634 * C39126) *
               C6692 +
           (((C40220 + C40221) * C9224 + (C40445 + C40444) * C9074 -
             (C48992 + C48993) * C9225 - (C49267 + C49266) * C90579) *
                C90634 * C39125 +
            ((C40225 + C40224) * C9224 + (C40446 + C40447) * C9074 -
             (C39330 * C3894 + C39128 * C4164 + C39329 * C3893 +
              C39127 * C4163) *
                 C9225 -
             (C39330 * C4078 + C39128 * C4332 + C39329 * C4077 +
              C39127 * C4329) *
                 C90579) *
                C90634 * C39126) *
               C90555) *
              C90503)) /
        (p * q * std::sqrt(p + q));
    d2eezx[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C90634 * C555) * C88316 +
              (C554 * C116 + C90634 * C561) * C90744 - C584 * C88309 -
              C585 * C90503) *
                 C39125 +
             (C584 * C88316 + C585 * C90744 - C586 * C88309 - C587 * C90503) *
                 C39126) *
                C39127 +
            ((C16043 + C16044 - C16045 - C16046) * C39125 +
             (C42451 + C42452 - C42453 - C42454) * C39126) *
                C39128) *
               C9074 +
           (((C2286 * C88309 -
              ((C554 * C1707 + C90634 * C2268) * C90744 +
               (C554 * C1700 + C90634 * C2264) * C88316) +
              C2287 * C90503) *
                 C39125 +
             (C2288 * C88309 - (C2287 * C90744 + C2286 * C88316) +
              C2289 * C90503) *
                 C39126) *
                C39127 +
            ((C24805 - (C24806 + C24807) + C24808) * C39125 +
             (C53532 - (C53533 + C53534) + C53535) * C39126) *
                C39128) *
               C90579) *
              C6692 +
          ((((C16045 - (C16044 + C16043) + C16046) * C39125 +
             (C42453 - (C42452 + C42451) + C42454) * C39126) *
                C39127 +
            ((C16049 - (C16048 + C16047) + C16050) * C39125 +
             (C42455 - (C42456 + C42457) + C42458) * C39126) *
                C39128) *
               C9074 +
           (((C24807 + C24806 - C24805 - C24808) * C39125 +
             (C53534 + C53533 - C53532 - C53535) * C39126) *
                C39127 +
            ((C24811 + C24810 - C24809 - C24812) * C39125 +
             (C21657 * C88316 + C21658 * C90744 -
              (C554 * C3894 + C90634 * C4410) * C88309 -
              (C554 * C3903 + C90634 * C4416) * C90503) *
                 C39126) *
                C39128) *
               C90579) *
              C90555)) /
        (p * q * std::sqrt(p + q));
    d2eezy[3] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C554 * C107 + C90634 * C555) * C6771 +
                       (C554 * C182 + C90634 * C641) * C6692 - C14614 * C6772 -
                       C14700 * C90555) *
                          C39125 +
                      (C7234 + C7235 - C7236 - C7237) * C39126) *
                         C39127 +
                     ((C14614 * C6771 + C14700 * C6692 - C14616 * C6772 -
                       C14701 * C90555) *
                          C39125 +
                      (C47438 + C47439 - C47440 - C47441) * C39126) *
                         C39128) *
                        C90744 +
                    (((C7236 - (C7235 + C7234) + C7237) * C39125 +
                      (C7240 - (C7239 + C7238) + C7241) * C39126) *
                         C39127 +
                     ((C47440 - (C47439 + C47438) + C47441) * C39125 +
                      (C47442 - (C47443 + C47444) + C47445) * C39126) *
                         C39128) *
                        C90503) *
                       C9074 +
                   ((((C17381 * C6772 -
                       ((C554 * C1794 + C90634 * C2368) * C6692 +
                        (C554 * C1700 + C90634 * C2264) * C6771) +
                       C17474 * C90555) *
                          C39125 +
                      (C8874 - (C8875 + C8876) + C8886) * C39126) *
                         C39127 +
                     ((C17379 * C6772 - (C17474 * C6692 + C17381 * C6771) +
                       C17475 * C90555) *
                          C39125 +
                      (C49532 - (C49533 + C49534) + C49535) * C39126) *
                         C39128) *
                        C90744 +
                    (((C8876 + C8875 - C8874 - C8886) * C39125 +
                      (C8881 + C8880 - C8879 - C8887) * C39126) *
                         C39127 +
                     ((C49534 + C49533 - C49532 - C49535) * C39125 +
                      (C8773 * C6771 + C8885 * C6692 -
                       (C554 * C3894 + C90634 * C4410) * C6772 -
                       (C554 * C3992 + C90634 * C4498) * C90555) *
                          C39126) *
                         C39128) *
                        C90503) *
                       C90579)) /
                 (p * q * std::sqrt(p + q));
    d2eezz[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C90634 * C555) * C9224 +
              (C554 * C245 + C90634 * C719) * C9074 -
              (C554 * C1700 + C90634 * C2264) * C9225 -
              (C554 * C1879 + C90634 * C2460) * C90579) *
                 C39125 +
             (C9687 + C9688 - C9689 - C9690) * C39126) *
                C39127 +
            ((C23433 + C23434 - C23435 - C23436) * C39125 + C51732 * C39126) *
                C39128) *
               C6692 +
           (((C23435 - (C23434 + C23433) + C23436) * C39125 + C51733 * C39126) *
                C39127 +
            ((C23439 - (C23438 + C23437) + C23440) * C39125 +
             (C23441 - (C23442 + C23443) + C23444) * C39126) *
                C39128) *
               C90555) *
              C90744 +
          ((((C9689 - (C9688 + C9687) + C9690) * C39125 +
             (C9693 - (C9692 + C9691) + C9694) * C39126) *
                C39127 +
            (C51733 * C39125 + (C10612 - (C10613 + C10614) + C10615) * C39126) *
                C39128) *
               C6692 +
           ((C51732 * C39125 + (C10614 + C10613 - C10612 - C10615) * C39126) *
                C39127 +
            ((C23443 + C23442 - C23441 - C23444) * C39125 +
             (C3124 * C9224 + C3307 * C9074 -
              (C554 * C3894 + C90634 * C4410) * C9225 -
              (C554 * C4078 + C90634 * C4578) * C90579) *
                 C39126) *
                C39128) *
               C90555) *
              C90503)) /
        (p * q * std::sqrt(p + q));
    d2eexx[4] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                 C3364 +
             (C39129 * C116 + C39125 * C125 + C39130 * C117 + C39126 * C126) *
                 C90498) *
                C39127 +
            ((C39862 + C39863) * C3364 + (C39864 + C39865) * C90498) * C39128) *
               C90634 * C9074 -
           (((C43400 + C43401) * C90498 + (C43402 + C43403) * C3364) * C39128 +
            ((C39130 * C1706 + C39126 * C1713 + C39129 * C1707 +
              C39125 * C1714) *
                 C90498 +
             (C39130 * C1697 + C39126 * C1702 + C39129 * C1700 +
              C39125 * C1708) *
                 C3364) *
                C39127) *
               C90634 * C90579) *
              C90781 +
          ((((C43403 + C43402) * C3364 + (C43401 + C43400) * C90498) * C39127 +
            ((C43404 + C43405) * C3364 + (C43406 + C43407) * C90498) * C39128) *
               C90634 * C90579 -
           (((C41809 + C41810) * C90498 + (C41811 + C41812) * C3364) * C39128 +
            ((C39865 + C39864) * C90498 + (C39863 + C39862) * C3364) * C39127) *
               C90634 * C9074) *
              C90774 +
          ((((C41812 + C41811) * C3364 + (C41810 + C41809) * C90498) * C39127 +
            ((C42736 + C42737) * C3364 + (C42738 + C42739) * C90498) * C39128) *
               C90634 * C9074 -
           (((C39130 * C21006 + C39126 * C21007 + C39129 * C16838 +
              C39125 * C16841) *
                 C90498 +
             (C39130 * C21004 + C39126 * C21005 + C39129 * C16835 +
              C39125 * C16837) *
                 C3364) *
                C39128 +
            ((C43407 + C43406) * C90498 + (C43405 + C43404) * C3364) * C39127) *
               C90634 * C90579) *
              C7400)) /
        (p * q * std::sqrt(p + q));
    d2eexy[4] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C7477 +
            (C39129 * C182 + C39125 * C188 + C39130 * C183 + C39126 * C189) *
                C90781 -
            (C39863 + C39862) * C7478 - (C39984 + C39985) * C90774 +
            (C41812 + C41811) * C7479 + (C41921 + C41922) * C7400) *
               C39127 +
           ((C39862 + C39863) * C7477 + (C39985 + C39984) * C90781 -
            (C41811 + C41812) * C7478 - (C41922 + C41921) * C90774 +
            (C42736 + C42737) * C7479 + (C42811 + C42810) * C7400) *
               C39128) *
              C90634 * C90498 * C9074 +
          (((C43403 + C43402) * C7478 -
            ((C39130 * C1791 + C39126 * C1796 + C39129 * C1794 +
              C39125 * C1799) *
                 C90781 +
             (C39130 * C1697 + C39126 * C1702 + C39129 * C1700 +
              C39125 * C1708) *
                 C7477) +
            (C43514 + C43515) * C90774 - (C43405 + C43404) * C7479 -
            (C43516 + C43517) * C7400) *
               C39127 +
           ((C43404 + C43405) * C7478 -
            ((C43515 + C43514) * C90781 + (C43402 + C43403) * C7477) +
            (C43517 + C43516) * C90774 -
            (C39130 * C21004 + C39126 * C21005 + C39129 * C16835 +
             C39125 * C16837) *
                C7479 -
            (C39130 * C21126 + C39126 * C21127 + C39129 * C16942 +
             C39125 * C16944) *
                C7400) *
               C39128) *
              C90634 * C90498 * C90579)) /
        (p * q * std::sqrt(p + q));
    d2eexz[4] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C9224 +
            (C39129 * C245 + C39125 * C251 + C39130 * C246 + C39126 * C252) *
                C9074 -
            (C39130 * C1697 + C39126 * C1702 + C39129 * C1700 +
             C39125 * C1708) *
                C9225 -
            (C39130 * C1878 + C39126 * C1883 + C39129 * C1879 +
             C39125 * C1884) *
                C90579) *
               C39127 +
           ((C39862 + C39863) * C9224 + (C40100 + C40101) * C9074 -
            (C43402 + C43403) * C9225 - (C43624 + C43625) * C90579) *
               C39128) *
              C90634 * C90781 +
          (((C43403 + C43402) * C9225 -
            ((C40101 + C40100) * C9074 + (C39863 + C39862) * C9224) +
            (C43625 + C43624) * C90579) *
               C39127 +
           ((C43404 + C43405) * C9225 -
            ((C42031 + C42032) * C9074 + (C41811 + C41812) * C9224) +
            (C43626 + C43627) * C90579) *
               C39128) *
              C90634 * C90774 +
          (((C41812 + C41811) * C9224 + (C42032 + C42031) * C9074 -
            (C43405 + C43404) * C9225 - (C43627 + C43626) * C90579) *
               C39127 +
           ((C42736 + C42737) * C9224 + (C42882 + C42883) * C9074 -
            (C39130 * C21004 + C39126 * C21005 + C39129 * C16835 +
             C39125 * C16837) *
                C9225 -
            (C39130 * C21232 + C39126 * C21233 + C39129 * C17029 +
             C39125 * C17031) *
                C90579) *
               C39128) *
              C90634 * C7400) *
         C90498) /
        (p * q * std::sqrt(p + q));
    d2eeyx[4] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                 C3364 +
             (C39329 * C116 + C39127 * C314 + C39330 * C839 + C39128 * C1098) *
                 C90498) *
                C90634 * C39125 +
            ((C39357 + C39356) * C3364 + (C39359 + C39358) * C90498) * C90634 *
                C39126) *
               C9074 -
           (((C41170 + C41169) * C90498 + (C41168 + C41167) * C3364) * C90634 *
                C39126 +
            ((C39330 * C3900 + C39128 * C4167 + C39329 * C1707 +
              C39127 * C1966) *
                 C90498 +
             (C39330 * C3891 + C39128 * C4161 + C39329 * C1700 +
              C39127 * C1962) *
                 C3364) *
                C90634 * C39125) *
               C90579) *
              C90781 +
          ((((C39329 * C3891 + C39127 * C4161 + C39330 * C3896 +
              C39128 * C4166) *
                 C3364 +
             (C39329 * C3900 + C39127 * C4167 + C39330 * C3905 +
              C39128 * C4172) *
                 C90498) *
                C90634 * C39125 +
            ((C48993 + C48992) * C3364 + (C48995 + C48994) * C90498) * C90634 *
                C39126) *
               C90579 -
           (((C40223 + C40222) * C90498 + (C40221 + C40220) * C3364) * C90634 *
                C39126 +
            ((C39330 * C2577 + C39128 * C2831 + C39329 * C839 +
              C39127 * C1098) *
                 C90498 +
             (C39330 * C2570 + C39128 * C2827 + C39329 * C832 +
              C39127 * C1094) *
                 C3364) *
                C90634 * C39125) *
               C9074) *
              C90774 +
          ((((C39329 * C2570 + C39127 * C2827 + C39330 * C3367 +
              C39128 * C3545) *
                 C3364 +
             (C39329 * C2577 + C39127 * C2831 + C39330 * C3370 +
              C39128 * C3548) *
                 C90498) *
                C90634 * C39125 +
            ((C42142 + C42141) * C3364 + (C42144 + C42143) * C90498) * C90634 *
                C39126) *
               C9074 -
           (((C39330 * C21006 + C39128 * C21347 + C39329 * C3904 +
              C39127 * C4171) *
                 C90498 +
             (C39330 * C21004 + C39128 * C21346 + C39329 * C3895 +
              C39127 * C4165) *
                 C3364) *
                C90634 * C39126 +
            ((C39330 * C16838 + C39128 * C17133 + C39329 * C3905 +
              C39127 * C4172) *
                 C90498 +
             (C39330 * C16835 + C39128 * C17131 + C39329 * C3896 +
              C39127 * C4166) *
                 C3364) *
                C90634 * C39125) *
               C90579) *
              C7400)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[4] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C7477 +
            (C39329 * C182 + C39127 * C394 + C39330 * C927 + C39128 * C1195) *
                C90781 -
            (C39330 * C2570 + C39128 * C2827 + C39329 * C832 + C39127 * C1094) *
                C7478 -
            (C39330 * C2663 + C39128 * C2921 + C39329 * C927 + C39127 * C1195) *
                C90774 +
            (C39329 * C2570 + C39127 * C2827 + C39330 * C3367 +
             C39128 * C3545) *
                C7479 +
            (C39329 * C2663 + C39127 * C2921 + C39330 * C3433 +
             C39128 * C3599) *
                C7400) *
               C90634 * C39125 +
           ((C39357 + C39356) * C7477 + (C39446 + C39447) * C90781 -
            (C40221 + C40220) * C7478 - (C40334 + C40335) * C90774 +
            (C42142 + C42141) * C7479 + (C42247 + C42248) * C7400) *
               C90634 * C39126) *
              C90498 * C9074 +
          (((C39329 * C3891 + C39127 * C4161 + C39330 * C3896 +
             C39128 * C4166) *
                C7478 -
            ((C39330 * C3989 + C39128 * C4247 + C39329 * C1794 +
              C39127 * C2066) *
                 C90781 +
             (C39330 * C3891 + C39128 * C4161 + C39329 * C1700 +
              C39127 * C1962) *
                 C7477) +
            (C39329 * C3989 + C39127 * C4247 + C39330 * C3994 +
             C39128 * C4248) *
                C90774 -
            (C39330 * C16835 + C39128 * C17131 + C39329 * C3896 +
             C39127 * C4166) *
                C7479 -
            (C39330 * C16942 + C39128 * C17209 + C39329 * C3994 +
             C39127 * C4248) *
                C7400) *
               C90634 * C39125 +
           ((C48993 + C48992) * C7478 -
            ((C41282 + C41281) * C90781 + (C41168 + C41167) * C7477) +
            (C49130 + C49131) * C90774 -
            (C39330 * C21004 + C39128 * C21346 + C39329 * C3895 +
             C39127 * C4165) *
                C7479 -
            (C39330 * C21126 + C39128 * C21446 + C39329 * C3993 +
             C39127 * C4250) *
                C7400) *
               C90634 * C39126) *
              C90498 * C90579)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[4] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C9224 +
            (C39329 * C245 + C39127 * C474 + C39330 * C1011 + C39128 * C1301) *
                C9074 -
            (C39330 * C3891 + C39128 * C4161 + C39329 * C1700 +
             C39127 * C1962) *
                C9225 -
            (C39330 * C4075 + C39128 * C4327 + C39329 * C1879 +
             C39127 * C2159) *
                C90579) *
               C90634 * C39125 +
           ((C39357 + C39356) * C9224 + (C39530 + C39531) * C9074 -
            (C41168 + C41167) * C9225 - (C41391 + C41392) * C90579) *
               C90634 * C39126) *
              C90781 +
          (((C39329 * C3891 + C39127 * C4161 + C39330 * C3896 +
             C39128 * C4166) *
                C9225 -
            ((C39330 * C2745 + C39128 * C3017 + C39329 * C1011 +
              C39127 * C1301) *
                 C9074 +
             (C39330 * C2570 + C39128 * C2827 + C39329 * C832 +
              C39127 * C1094) *
                 C9224) +
            (C39329 * C4075 + C39127 * C4327 + C39330 * C4080 +
             C39128 * C4330) *
                C90579) *
               C90634 * C39125 +
           ((C48993 + C48992) * C9225 -
            ((C40444 + C40445) * C9074 + (C40221 + C40220) * C9224) +
            (C49266 + C49267) * C90579) *
               C90634 * C39126) *
              C90774 +
          (((C39329 * C2570 + C39127 * C2827 + C39330 * C3367 +
             C39128 * C3545) *
                C9224 +
            (C39329 * C2745 + C39127 * C3017 + C39330 * C3489 +
             C39128 * C3654) *
                C9074 -
            (C39330 * C16835 + C39128 * C17131 + C39329 * C3896 +
             C39127 * C4166) *
                C9225 -
            (C39330 * C17029 + C39128 * C17285 + C39329 * C4080 +
             C39127 * C4330) *
                C90579) *
               C90634 * C39125 +
           ((C42142 + C42141) * C9224 + (C42351 + C42352) * C9074 -
            (C39330 * C21004 + C39128 * C21346 + C39329 * C3895 +
             C39127 * C4165) *
                C9225 -
            (C39330 * C21232 + C39128 * C21545 + C39329 * C4079 +
             C39127 * C4331) *
                C90579) *
               C90634 * C39126) *
              C7400) *
         C90498) /
        (p * q * std::sqrt(p + q));
    d2eezx[4] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C90634 * C555) * C3364 +
              (C554 * C116 + C90634 * C561) * C90498) *
                 C39125 +
             (C584 * C3364 + C585 * C90498) * C39126) *
                C39127 +
            ((C16632 + C16633) * C39125 + (C43148 + C43149) * C39126) *
                C39128) *
               C9074 -
           (((C44020 + C44021) * C39126 + (C17386 + C17387) * C39125) * C39128 +
            ((C2287 * C90498 + C2286 * C3364) * C39126 +
             ((C554 * C1707 + C90634 * C2268) * C90498 +
              (C554 * C1700 + C90634 * C2264) * C3364) *
                 C39125) *
                C39127) *
               C90579) *
              C90781 +
          ((((C17387 + C17386) * C39125 + (C44021 + C44020) * C39126) * C39127 +
            ((C17385 + C17384) * C39125 + (C44022 + C44023) * C39126) *
                C39128) *
               C90579 -
           (((C43150 + C43151) * C39126 + (C16635 + C16634) * C39125) * C39128 +
            ((C43149 + C43148) * C39126 + (C16633 + C16632) * C39125) *
                C39127) *
               C9074) *
              C90774 +
          (((C16642 * C39125 + (C43151 + C43150) * C39126) * C39127 +
            ((C16637 + C16636) * C39125 + (C43152 + C43153) * C39126) *
                C39128) *
               C9074 -
           ((((C554 * C21006 + C90634 * C21645) * C90498 +
              (C554 * C21004 + C90634 * C21644) * C3364) *
                 C39126 +
             (C17389 + C17388) * C39125) *
                C39128 +
            ((C44023 + C44022) * C39126 + C17390 * C39125) * C39127) *
               C90579) *
              C7400)) /
        (p * q * std::sqrt(p + q));
    d2eezy[4] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C7477 +
             (C554 * C182 + C90634 * C641) * C90781 - C14614 * C7478 -
             C14700 * C90774 + C14616 * C7479 + C14701 * C7400) *
                C39125 +
            (C7937 + C7938 - C7939 - C7940 + C7941 + C7942) * C39126) *
               C39127 +
           ((C14614 * C7477 + C14700 * C90781 - C14616 * C7478 -
             C14701 * C90774 + C16062 * C7479 + C16151 * C7400) *
                C39125 +
            (C48336 + C48337 - C48338 - C48339 + C48340 + C48341) * C39126) *
               C39128) *
              C90498 * C9074 +
          (((C17381 * C7478 -
             ((C554 * C1794 + C90634 * C2368) * C90781 +
              (C554 * C1700 + C90634 * C2264) * C7477) +
             C17474 * C90774 - C17379 * C7479 - C17475 * C7400) *
                C39125 +
            (C8771 * C7478 - (C2380 * C90781 + C2286 * C7477) + C8884 * C90774 -
             C21657 * C7479 - C21762 * C7400) *
                C39126) *
               C39127 +
           ((C17379 * C7478 - (C17474 * C90781 + C17381 * C7477) +
             C17475 * C90774 - C17382 * C7479 - C17476 * C7400) *
                C39125 +
            (C21657 * C7478 - (C8884 * C90781 + C8771 * C7477) +
             C21762 * C90774 - (C554 * C21004 + C90634 * C21644) * C7479 -
             (C554 * C21126 + C90634 * C21758) * C7400) *
                C39126) *
               C39128) *
              C90498 * C90579)) /
        (p * q * std::sqrt(p + q));
    d2eezz[4] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C9224 +
             (C554 * C245 + C90634 * C719) * C9074 -
             (C554 * C1700 + C90634 * C2264) * C9225 -
             (C554 * C1879 + C90634 * C2460) * C90579) *
                C39125 +
            (C9687 + C9688 - C9689 - C9690) * C39126) *
               C39127 +
           ((C23433 + C23434 - C23435 - C23436) * C39125 + C51732 * C39126) *
               C39128) *
              C90781 +
          (((C23435 - (C23434 + C23433) + C23436) * C39125 + C51733 * C39126) *
               C39127 +
           ((C23439 - (C23438 + C23437) + C23440) * C39125 +
            (C23441 - (C23442 + C23443) + C23444) * C39126) *
               C39128) *
              C90774 +
          ((C25688 * C39125 + (C23443 + C23442 - C23441 - C23444) * C39126) *
               C39127 +
           ((C25685 + C25684 - C25683 - C25686) * C39125 +
            (C16060 * C9224 + C16239 * C9074 -
             (C554 * C21004 + C90634 * C21644) * C9225 -
             (C554 * C21232 + C90634 * C21860) * C90579) *
                C39126) *
               C39128) *
              C7400) *
         C90498) /
        (p * q * std::sqrt(p + q));
    d2eexx[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                 C3364 +
             (C39129 * C116 + C39125 * C125 + C39130 * C117 + C39126 * C126) *
                 C90498) *
                C39127 +
            ((C39862 + C39863) * C3364 + (C39864 + C39865) * C90498) * C39128) *
               C90634 * C90782 -
           (((C43400 + C43401) * C90498 + (C43402 + C43403) * C3364) * C39128 +
            ((C39130 * C1706 + C39126 * C1713 + C39129 * C1707 +
              C39125 * C1714) *
                 C90498 +
             (C39130 * C1697 + C39126 * C1702 + C39129 * C1700 +
              C39125 * C1708) *
                 C3364) *
                C39127) *
               C90634 * C90777 +
           (((C39129 * C4656 + C39125 * C4660 + C39130 * C4657 +
              C39126 * C4661) *
                 C3364 +
             (C39129 * C4663 + C39125 * C4668 + C39130 * C4664 +
              C39126 * C4669) *
                 C90498) *
                C39127 +
            ((C45252 + C45253) * C3364 + (C45254 + C45255) * C90498) * C39128) *
               C90634 * C10691) *
              C6692 +
          ((((C43403 + C43402) * C3364 + (C43401 + C43400) * C90498) * C39127 +
            ((C43404 + C43405) * C3364 + (C43406 + C43407) * C90498) * C39128) *
               C90634 * C90777 -
           (((C41809 + C41810) * C90498 + (C41811 + C41812) * C3364) * C39128 +
            ((C39865 + C39864) * C90498 + (C39863 + C39862) * C3364) * C39127) *
               C90634 * C90782 -
           (((C39130 * C17656 + C39126 * C17658 + C39129 * C17654 +
              C39125 * C17657) *
                 C90498 +
             (C39130 * C17652 + C39126 * C17655 + C39129 * C17651 +
              C39125 * C17653) *
                 C3364) *
                C39128 +
            ((C45255 + C45254) * C90498 + (C45253 + C45252) * C3364) * C39127) *
               C90634 * C10691) *
              C90555)) /
        (p * q * std::sqrt(p + q));
    d2eexy[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C6771 +
            (C39129 * C182 + C39125 * C188 + C39130 * C183 + C39126 * C189) *
                C6692 -
            (C39863 + C39862) * C6772 - (C39984 + C39985) * C90555) *
               C39127 +
           ((C39862 + C39863) * C6771 + (C39985 + C39984) * C6692 -
            (C41811 + C41812) * C6772 - (C41922 + C41921) * C90555) *
               C39128) *
              C90634 * C90498 * C90782 +
          (((C43403 + C43402) * C6772 -
            ((C39130 * C1791 + C39126 * C1796 + C39129 * C1794 +
              C39125 * C1799) *
                 C6692 +
             (C39130 * C1697 + C39126 * C1702 + C39129 * C1700 +
              C39125 * C1708) *
                 C6771) +
            (C43514 + C43515) * C90555) *
               C39127 +
           ((C43404 + C43405) * C6772 -
            ((C43515 + C43514) * C6692 + (C43402 + C43403) * C6771) +
            (C43517 + C43516) * C90555) *
               C39128) *
              C90634 * C90498 * C90777 +
          (((C39129 * C4656 + C39125 * C4660 + C39130 * C4657 +
             C39126 * C4661) *
                C6771 +
            (C39129 * C4746 + C39125 * C4750 + C39130 * C4747 +
             C39126 * C4751) *
                C6692 -
            (C45253 + C45252) * C6772 - (C45358 + C45359) * C90555) *
               C39127 +
           ((C45252 + C45253) * C6771 + (C45359 + C45358) * C6692 -
            (C39130 * C17652 + C39126 * C17655 + C39129 * C17651 +
             C39125 * C17653) *
                C6772 -
            (C39130 * C17734 + C39126 * C17736 + C39129 * C17733 +
             C39125 * C17735) *
                C90555) *
               C39128) *
              C90634 * C90498 * C10691)) /
        (p * q * std::sqrt(p + q));
    d2eexz[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C10840 +
            (C39129 * C245 + C39125 * C251 + C39130 * C246 + C39126 * C252) *
                C90782 -
            (C39130 * C1697 + C39126 * C1702 + C39129 * C1700 +
             C39125 * C1708) *
                C10841 -
            (C39130 * C1878 + C39126 * C1883 + C39129 * C1879 +
             C39125 * C1884) *
                C90777 +
            (C39129 * C4656 + C39125 * C4660 + C39130 * C4657 +
             C39126 * C4661) *
                C10842 +
            (C39129 * C4831 + C39125 * C4835 + C39130 * C4832 +
             C39126 * C4836) *
                C10691) *
               C39127 +
           ((C39862 + C39863) * C10840 + (C40100 + C40101) * C90782 -
            (C43402 + C43403) * C10841 - (C43624 + C43625) * C90777 +
            (C45252 + C45253) * C10842 + (C45462 + C45463) * C10691) *
               C39128) *
              C90634 * C6692 +
          (((C43403 + C43402) * C10841 -
            ((C40101 + C40100) * C90782 + (C39863 + C39862) * C10840) +
            (C43625 + C43624) * C90777 - (C45253 + C45252) * C10842 -
            (C45463 + C45462) * C10691) *
               C39127 +
           ((C43404 + C43405) * C10841 -
            ((C42031 + C42032) * C90782 + (C41811 + C41812) * C10840) +
            (C43626 + C43627) * C90777 -
            (C39130 * C17652 + C39126 * C17655 + C39129 * C17651 +
             C39125 * C17653) *
                C10842 -
            (C39130 * C17812 + C39126 * C17814 + C39129 * C17811 +
             C39125 * C17813) *
                C10691) *
               C39128) *
              C90634 * C90555) *
         C90498) /
        (p * q * std::sqrt(p + q));
    d2eeyx[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                 C3364 +
             (C39329 * C116 + C39127 * C314 + C39330 * C839 + C39128 * C1098) *
                 C90498) *
                C90634 * C39125 +
            ((C39357 + C39356) * C3364 + (C39359 + C39358) * C90498) * C90634 *
                C39126) *
               C90782 -
           (((C41170 + C41169) * C90498 + (C41168 + C41167) * C3364) * C90634 *
                C39126 +
            ((C39330 * C3900 + C39128 * C4167 + C39329 * C1707 +
              C39127 * C1966) *
                 C90498 +
             (C39330 * C3891 + C39128 * C4161 + C39329 * C1700 +
              C39127 * C1962) *
                 C3364) *
                C90634 * C39125) *
               C90777 +
           (((C39329 * C4656 + C39127 * C4913 + C39330 * C5471 +
              C39128 * C5717) *
                 C3364 +
             (C39329 * C4663 + C39127 * C4917 + C39330 * C5474 +
              C39128 * C5720) *
                 C90498) *
                C90634 * C39125 +
            ((C44621 + C44620) * C3364 + (C44623 + C44622) * C90498) * C90634 *
                C39126) *
               C10691) *
              C6692 +
          ((((C39329 * C3891 + C39127 * C4161 + C39330 * C3896 +
              C39128 * C4166) *
                 C3364 +
             (C39329 * C3900 + C39127 * C4167 + C39330 * C3905 +
              C39128 * C4172) *
                 C90498) *
                C90634 * C39125 +
            ((C48993 + C48992) * C3364 + (C48995 + C48994) * C90498) * C90634 *
                C39126) *
               C90777 -
           (((C40223 + C40222) * C90498 + (C40221 + C40220) * C3364) * C90634 *
                C39126 +
            ((C39330 * C2577 + C39128 * C2831 + C39329 * C839 +
              C39127 * C1098) *
                 C90498 +
             (C39330 * C2570 + C39128 * C2827 + C39329 * C832 +
              C39127 * C1094) *
                 C3364) *
                C90634 * C39125) *
               C90782 -
           (((C39330 * C17656 + C39128 * C17892 + C39329 * C5473 +
              C39127 * C5719) *
                 C90498 +
             (C39330 * C17652 + C39128 * C17890 + C39329 * C5470 +
              C39127 * C5716) *
                 C3364) *
                C90634 * C39126 +
            ((C39330 * C17654 + C39128 * C17891 + C39329 * C5474 +
              C39127 * C5720) *
                 C90498 +
             (C39330 * C17651 + C39128 * C17889 + C39329 * C5471 +
              C39127 * C5717) *
                 C3364) *
                C90634 * C39125) *
               C10691) *
              C90555)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C6771 +
            (C39329 * C182 + C39127 * C394 + C39330 * C927 + C39128 * C1195) *
                C6692 -
            (C39330 * C2570 + C39128 * C2827 + C39329 * C832 + C39127 * C1094) *
                C6772 -
            (C39330 * C2663 + C39128 * C2921 + C39329 * C927 + C39127 * C1195) *
                C90555) *
               C90634 * C39125 +
           ((C39357 + C39356) * C6771 + (C39446 + C39447) * C6692 -
            (C40221 + C40220) * C6772 - (C40334 + C40335) * C90555) *
               C90634 * C39126) *
              C90498 * C90782 +
          (((C39329 * C3891 + C39127 * C4161 + C39330 * C3896 +
             C39128 * C4166) *
                C6772 -
            ((C39330 * C3989 + C39128 * C4247 + C39329 * C1794 +
              C39127 * C2066) *
                 C6692 +
             (C39330 * C3891 + C39128 * C4161 + C39329 * C1700 +
              C39127 * C1962) *
                 C6771) +
            (C39329 * C3989 + C39127 * C4247 + C39330 * C3994 +
             C39128 * C4248) *
                C90555) *
               C90634 * C39125 +
           ((C48993 + C48992) * C6772 -
            ((C41282 + C41281) * C6692 + (C41168 + C41167) * C6771) +
            (C49130 + C49131) * C90555) *
               C90634 * C39126) *
              C90498 * C90777 +
          (((C39329 * C4656 + C39127 * C4913 + C39330 * C5471 +
             C39128 * C5717) *
                C6771 +
            (C39329 * C4746 + C39127 * C5007 + C39330 * C5557 +
             C39128 * C5795) *
                C6692 -
            (C39330 * C17651 + C39128 * C17889 + C39329 * C5471 +
             C39127 * C5717) *
                C6772 -
            (C39330 * C17733 + C39128 * C17967 + C39329 * C5557 +
             C39127 * C5795) *
                C90555) *
               C90634 * C39125 +
           ((C44621 + C44620) * C6771 + (C44726 + C44727) * C6692 -
            (C39330 * C17652 + C39128 * C17890 + C39329 * C5470 +
             C39127 * C5716) *
                C6772 -
            (C39330 * C17734 + C39128 * C17968 + C39329 * C5556 +
             C39127 * C5796) *
                C90555) *
               C90634 * C39126) *
              C90498 * C10691)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C10840 +
            (C39329 * C245 + C39127 * C474 + C39330 * C1011 + C39128 * C1301) *
                C90782 -
            (C39330 * C3891 + C39128 * C4161 + C39329 * C1700 +
             C39127 * C1962) *
                C10841 -
            (C39330 * C4075 + C39128 * C4327 + C39329 * C1879 +
             C39127 * C2159) *
                C90777 +
            (C39329 * C4656 + C39127 * C4913 + C39330 * C5471 +
             C39128 * C5717) *
                C10842 +
            (C39329 * C4831 + C39127 * C5095 + C39330 * C5637 +
             C39128 * C5872) *
                C10691) *
               C90634 * C39125 +
           ((C39357 + C39356) * C10840 + (C39530 + C39531) * C90782 -
            (C41168 + C41167) * C10841 - (C41391 + C41392) * C90777 +
            (C44621 + C44620) * C10842 + (C44830 + C44831) * C10691) *
               C90634 * C39126) *
              C6692 +
          (((C39329 * C3891 + C39127 * C4161 + C39330 * C3896 +
             C39128 * C4166) *
                C10841 -
            ((C39330 * C2745 + C39128 * C3017 + C39329 * C1011 +
              C39127 * C1301) *
                 C90782 +
             (C39330 * C2570 + C39128 * C2827 + C39329 * C832 +
              C39127 * C1094) *
                 C10840) +
            (C39329 * C4075 + C39127 * C4327 + C39330 * C4080 +
             C39128 * C4330) *
                C90777 -
            (C39330 * C17651 + C39128 * C17889 + C39329 * C5471 +
             C39127 * C5717) *
                C10842 -
            (C39330 * C17811 + C39128 * C18043 + C39329 * C5637 +
             C39127 * C5872) *
                C10691) *
               C90634 * C39125 +
           ((C48993 + C48992) * C10841 -
            ((C40444 + C40445) * C90782 + (C40221 + C40220) * C10840) +
            (C49266 + C49267) * C90777 -
            (C39330 * C17652 + C39128 * C17890 + C39329 * C5470 +
             C39127 * C5716) *
                C10842 -
            (C39330 * C17812 + C39128 * C18044 + C39329 * C5636 +
             C39127 * C5873) *
                C10691) *
               C90634 * C39126) *
              C90555) *
         C90498) /
        (p * q * std::sqrt(p + q));
    d2eezx[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C90634 * C555) * C3364 +
              (C554 * C116 + C90634 * C561) * C90498) *
                 C39125 +
             (C584 * C3364 + C585 * C90498) * C39126) *
                C39127 +
            ((C16632 + C16633) * C39125 + (C43148 + C43149) * C39126) *
                C39128) *
               C90782 -
           (((C44020 + C44021) * C39126 + (C17386 + C17387) * C39125) * C39128 +
            ((C2287 * C90498 + C2286 * C3364) * C39126 +
             ((C554 * C1707 + C90634 * C2268) * C90498 +
              (C554 * C1700 + C90634 * C2264) * C3364) *
                 C39125) *
                C39127) *
               C90777 +
           ((((C554 * C4656 + C90634 * C5191) * C3364 +
              (C554 * C4663 + C90634 * C5195) * C90498) *
                 C39125 +
             (C5208 * C3364 + C5209 * C90498) * C39126) *
                C39127 +
            ((C18860 + C18861) * C39125 + (C45856 + C45857) * C39126) *
                C39128) *
               C10691) *
              C6692 +
          ((((C17387 + C17386) * C39125 + (C44021 + C44020) * C39126) * C39127 +
            ((C17385 + C17384) * C39125 + (C44022 + C44023) * C39126) *
                C39128) *
               C90777 -
           (((C43150 + C43151) * C39126 + (C16635 + C16634) * C39125) * C39128 +
            ((C43149 + C43148) * C39126 + (C16633 + C16632) * C39125) *
                C39127) *
               C90782 -
           ((((C554 * C17656 + C90634 * C18122) * C90498 +
              (C554 * C17652 + C90634 * C18120) * C3364) *
                 C39126 +
             (C18863 + C18862) * C39125) *
                C39128 +
            ((C45857 + C45856) * C39126 + (C18861 + C18860) * C39125) *
                C39127) *
               C10691) *
              C90555)) /
        (p * q * std::sqrt(p + q));
    d2eezy[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C6771 +
             (C554 * C182 + C90634 * C641) * C6692 - C14614 * C6772 -
             C14700 * C90555) *
                C39125 +
            (C7234 + C7235 - C7236 - C7237) * C39126) *
               C39127 +
           ((C14614 * C6771 + C14700 * C6692 - C14616 * C6772 -
             C14701 * C90555) *
                C39125 +
            (C47438 + C47439 - C47440 - C47441) * C39126) *
               C39128) *
              C90498 * C90782 +
          (((C17381 * C6772 -
             ((C554 * C1794 + C90634 * C2368) * C6692 +
              (C554 * C1700 + C90634 * C2264) * C6771) +
             C17474 * C90555) *
                C39125 +
            (C8874 - (C8875 + C8876) + C8886) * C39126) *
               C39127 +
           ((C17379 * C6772 - (C17474 * C6692 + C17381 * C6771) +
             C17475 * C90555) *
                C39125 +
            (C49532 - (C49533 + C49534) + C49535) * C39126) *
               C39128) *
              C90498 * C90777 +
          ((((C554 * C4656 + C90634 * C5191) * C6771 +
             (C554 * C4746 + C90634 * C5285) * C6692 - C18856 * C6772 -
             C18943 * C90555) *
                C39125 +
            (C5208 * C6771 + C5296 * C6692 - C44934 * C6772 - C45037 * C90555) *
                C39126) *
               C39127 +
           ((C18856 * C6771 + C18943 * C6692 - C18858 * C6772 -
             C18944 * C90555) *
                C39125 +
            (C44934 * C6771 + C45037 * C6692 -
             (C554 * C17652 + C90634 * C18120) * C6772 -
             (C554 * C17734 + C90634 * C18198) * C90555) *
                C39126) *
               C39128) *
              C90498 * C10691)) /
        (p * q * std::sqrt(p + q));
    d2eezz[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C10840 +
             (C554 * C245 + C90634 * C719) * C90782 -
             (C554 * C1700 + C90634 * C2264) * C10841 -
             (C554 * C1879 + C90634 * C2460) * C90777 +
             (C554 * C4656 + C90634 * C5191) * C10842 +
             (C554 * C4831 + C90634 * C5373) * C10691) *
                C39125 +
            (C11300 + C11301 - C11302 - C11303 + C11304 + C11305) * C39126) *
               C39127 +
           ((C26368 + C26369 - C26370 - C26371 + C26372 + C26373) * C39125 +
            (C52616 + C52617 - C52618 - C52619 + C52620 + C52621) * C39126) *
               C39128) *
              C6692 +
          (((C26370 - (C26369 + C26368) + C26371 - C26372 - C26373) * C39125 +
            (C52618 - (C52617 + C52616) + C52619 - C52620 - C52621) * C39126) *
               C39127 +
           ((C26376 - (C26375 + C26374) + C26377 - C26378 - C26379) * C39125 +
            (C21657 * C10841 - (C3306 * C90782 + C3122 * C10840) +
             C21867 * C90777 - (C554 * C17652 + C90634 * C18120) * C10842 -
             (C554 * C17812 + C90634 * C18274) * C10691) *
                C39126) *
               C39128) *
              C90555) *
         C90498) /
        (p * q * std::sqrt(p + q));
    d2eexx[6] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C88316 +
            (C39129 * C116 + C39125 * C125 + C39130 * C117 + C39126 * C126) *
                C90744 -
            (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                C88309 -
            (C39130 * C118 + C39126 * C127 + C39129 * C117 + C39125 * C126) *
                C90503) *
               C39127 +
           ((C39862 + C39863) * C88316 + (C39864 + C39865) * C90744 -
            (C39866 + C39867) * C88309 - (C39868 + C39869) * C90503) *
               C39128) *
              C90634 * C90567 * C2565 +
          (((C39867 + C39866) * C88309 -
            ((C39865 + C39864) * C90744 + (C39863 + C39862) * C88316) +
            (C39869 + C39868) * C90503) *
               C39127 +
           ((C41807 + C41808) * C88309 -
            ((C41809 + C41810) * C90744 + (C41811 + C41812) * C88316) +
            (C41813 + C41814) * C90503) *
               C39128) *
              C90634 * C90567 * C2566 +
          (((C41812 + C41811) * C88316 + (C41810 + C41809) * C90744 -
            (C41808 + C41807) * C88309 - (C41814 + C41813) * C90503) *
               C39127 +
           ((C39129 * C3367 + C39125 * C3373 + C39130 * C3366 +
             C39126 * C3372) *
                C88316 +
            (C39129 * C3370 + C39125 * C3376 + C39130 * C3369 +
             C39126 * C3375) *
                C90744 -
            (C39130 * C3365 + C39126 * C3371 + C39129 * C3366 +
             C39125 * C3372) *
                C88309 -
            (C39130 * C3368 + C39126 * C3374 + C39129 * C3369 +
             C39125 * C3375) *
                C90503) *
               C39128) *
              C90634 * C90567 * C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
               C103 +
           (C39129 * C116 + C39125 * C125 + C39130 * C117 + C39126 * C126) *
               C92 -
           (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
               C104 -
           (C39130 * C118 + C39126 * C127 + C39129 * C117 + C39125 * C126) *
               C93 +
           (C39129 * C109 + C39125 * C115 + C39130 * C110 + C39126 * C119) *
               C105 +
           (C39129 * C118 + C39125 * C127 + C39130 * C120 + C39126 * C128) *
               C94 -
           (C39130 * C111 + C39126 * C121 + C39129 * C110 + C39125 * C119) *
               C106 -
           (C39130 * C122 + C39126 * C129 + C39129 * C120 + C39125 * C128) *
               C95) *
              C39127 +
          ((C39129 * C832 + C39125 * C840 + C39130 * C829 + C39126 * C834) *
               C103 +
           (C39129 * C839 + C39125 * C846 + C39130 * C838 + C39126 * C845) *
               C92 -
           (C39130 * C830 + C39126 * C835 + C39129 * C829 + C39125 * C834) *
               C104 -
           (C39130 * C837 + C39126 * C844 + C39129 * C838 + C39125 * C845) *
               C93 +
           (C39129 * C830 + C39125 * C835 + C39130 * C831 + C39126 * C836) *
               C105 +
           (C39129 * C837 + C39125 * C844 + C39130 * C841 + C39126 * C847) *
               C94 -
           (C39130 * C833 + C39126 * C842 + C39129 * C831 + C39125 * C836) *
               C106 -
           (C39130 * C843 + C39126 * C848 + C39129 * C841 + C39125 * C847) *
               C95) *
              C39128) *
         C90634 * C90567 * C90541) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C88316 +
            (C39129 * C116 + C39125 * C125 + C39130 * C117 + C39126 * C126) *
                C90744 -
            (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                C88309 -
            (C39130 * C118 + C39126 * C127 + C39129 * C117 + C39125 * C126) *
                C90503) *
               C39127 +
           ((C39862 + C39863) * C88316 + (C39864 + C39865) * C90744 -
            (C39866 + C39867) * C88309 - (C39868 + C39869) * C90503) *
               C39128) *
              C90634 * C4653 +
          (((C39129 * C1697 + C39125 * C1702 + C39130 * C1698 +
             C39126 * C1703) *
                C88309 -
            ((C39130 * C1706 + C39126 * C1713 + C39129 * C1707 +
              C39125 * C1714) *
                 C90744 +
             (C39130 * C1697 + C39126 * C1702 + C39129 * C1700 +
              C39125 * C1708) *
                 C88316) +
            (C39129 * C1706 + C39125 * C1713 + C39130 * C1705 +
             C39126 * C1712) *
                C90503) *
               C39127 +
           ((C39129 * C3892 + C39125 * C3898 + C39130 * C3893 +
             C39126 * C3899) *
                C88309 -
            ((C43400 + C43401) * C90744 + (C43402 + C43403) * C88316) +
            (C39129 * C3901 + C39125 * C3910 + C39130 * C3902 +
             C39126 * C3911) *
                C90503) *
               C39128) *
              C90634 * C4654 +
          (((C39129 * C4656 + C39125 * C4660 + C39130 * C4657 +
             C39126 * C4661) *
                C88316 +
            (C39129 * C4663 + C39125 * C4668 + C39130 * C4664 +
             C39126 * C4669) *
                C90744 -
            (C39130 * C4658 + C39126 * C4662 + C39129 * C4657 +
             C39125 * C4661) *
                C88309 -
            (C39130 * C4665 + C39126 * C4670 + C39129 * C4664 +
             C39125 * C4669) *
                C90503) *
               C39127 +
           ((C39129 * C5471 + C39125 * C5477 + C39130 * C5470 +
             C39126 * C5476) *
                C88316 +
            (C39129 * C5474 + C39125 * C5480 + C39130 * C5473 +
             C39126 * C5479) *
                C90744 -
            (C39130 * C5469 + C39126 * C5475 + C39129 * C5470 +
             C39125 * C5476) *
                C88309 -
            (C39130 * C5472 + C39126 * C5478 + C39129 * C5473 +
             C39125 * C5479) *
                C90503) *
               C39128) *
              C90634 * C4655) *
         C90541) /
            (p * q * std::sqrt(p + q));
    d2eexy[6] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C2660 +
            (C39129 * C182 + C39125 * C188 + C39130 * C183 + C39126 * C189) *
                C2565 -
            (C39863 + C39862) * C2661 - (C39984 + C39985) * C2566 +
            (C41812 + C41811) * C2662 + (C41921 + C41922) * C2567) *
               C39127 +
           ((C39862 + C39863) * C2660 + (C39985 + C39984) * C2565 -
            (C41811 + C41812) * C2661 - (C41922 + C41921) * C2566 +
            (C39129 * C3367 + C39125 * C3373 + C39130 * C3366 +
             C39126 * C3372) *
                C2662 +
            (C39129 * C3433 + C39125 * C3436 + C39130 * C3432 +
             C39126 * C3435) *
                C2567) *
               C39128) *
              C90634 * C90744 +
          (((C39867 + C39866) * C2661 -
            ((C39130 * C184 + C39126 * C190 + C39129 * C183 + C39125 * C189) *
                 C2565 +
             (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                 C2660) +
            (C39986 + C39987) * C2566 - (C41808 + C41807) * C2662 -
            (C41923 + C41924) * C2567) *
               C39127 +
           ((C41807 + C41808) * C2661 -
            ((C39987 + C39986) * C2565 + (C39866 + C39867) * C2660) +
            (C41924 + C41923) * C2566 -
            (C39130 * C3365 + C39126 * C3371 + C39129 * C3366 +
             C39125 * C3372) *
                C2662 -
            (C39130 * C3431 + C39126 * C3434 + C39129 * C3432 +
             C39125 * C3435) *
                C2567) *
               C39128) *
              C90634 * C90503) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C181 +
            (C39129 * C182 + C39125 * C188 + C39130 * C183 + C39126 * C189) *
                C90541) *
               C39127 +
           ((C39129 * C832 + C39125 * C840 + C39130 * C829 + C39126 * C834) *
                C181 +
            (C39129 * C927 + C39125 * C932 + C39130 * C926 + C39126 * C931) *
                C90541) *
               C39128) *
              C90634 * C92 -
          (((C39130 * C925 + C39126 * C930 + C39129 * C926 + C39125 * C931) *
                C90541 +
            (C39130 * C830 + C39126 * C835 + C39129 * C829 + C39125 * C834) *
                C181) *
               C39128 +
           ((C39130 * C184 + C39126 * C190 + C39129 * C183 + C39125 * C189) *
                C90541 +
            (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                C181) *
               C39127) *
              C90634 * C93 +
          (((C39129 * C109 + C39125 * C115 + C39130 * C110 + C39126 * C119) *
                C181 +
            (C39129 * C184 + C39125 * C190 + C39130 * C185 + C39126 * C191) *
                C90541) *
               C39127 +
           ((C39129 * C830 + C39125 * C835 + C39130 * C831 + C39126 * C836) *
                C181 +
            (C39129 * C925 + C39125 * C930 + C39130 * C928 + C39126 * C933) *
                C90541) *
               C39128) *
              C90634 * C94 -
          (((C39130 * C929 + C39126 * C934 + C39129 * C928 + C39125 * C933) *
                C90541 +
            (C39130 * C833 + C39126 * C842 + C39129 * C831 + C39125 * C836) *
                C181) *
               C39128 +
           ((C39130 * C186 + C39126 * C192 + C39129 * C185 + C39125 * C191) *
                C90541 +
            (C39130 * C111 + C39126 * C121 + C39129 * C110 + C39125 * C119) *
                C181) *
               C39127) *
              C90634 * C95) *
         C90567) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                 C181 +
             (C39129 * C182 + C39125 * C188 + C39130 * C183 + C39126 * C189) *
                 C90541) *
                C39127 +
            ((C39862 + C39863) * C181 + (C39985 + C39984) * C90541) * C39128) *
               C90634 * C90744 -
           (((C39987 + C39986) * C90541 + (C39866 + C39867) * C181) * C39128 +
            ((C39130 * C184 + C39126 * C190 + C39129 * C183 + C39125 * C189) *
                 C90541 +
             (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                 C181) *
                C39127) *
               C90634 * C90503) *
              C4653 +
          ((((C39129 * C1697 + C39125 * C1702 + C39130 * C1698 +
              C39126 * C1703) *
                 C181 +
             (C39129 * C1791 + C39125 * C1796 + C39130 * C1792 +
              C39126 * C1797) *
                 C90541) *
                C39127 +
            ((C39129 * C3892 + C39125 * C3898 + C39130 * C3893 +
              C39126 * C3899) *
                 C181 +
             (C39129 * C3990 + C39125 * C3996 + C39130 * C3991 +
              C39126 * C3997) *
                 C90541) *
                C39128) *
               C90634 * C90503 -
           (((C43515 + C43514) * C90541 + (C43402 + C43403) * C181) * C39128 +
            ((C39130 * C1791 + C39126 * C1796 + C39129 * C1794 +
              C39125 * C1799) *
                 C90541 +
             (C39130 * C1697 + C39126 * C1702 + C39129 * C1700 +
              C39125 * C1708) *
                 C181) *
                C39127) *
               C90634 * C90744) *
              C4654 +
          ((((C39129 * C4656 + C39125 * C4660 + C39130 * C4657 +
              C39126 * C4661) *
                 C181 +
             (C39129 * C4746 + C39125 * C4750 + C39130 * C4747 +
              C39126 * C4751) *
                 C90541) *
                C39127 +
            ((C39129 * C5471 + C39125 * C5477 + C39130 * C5470 +
              C39126 * C5476) *
                 C181 +
             (C39129 * C5557 + C39125 * C5560 + C39130 * C5556 +
              C39126 * C5559) *
                 C90541) *
                C39128) *
               C90634 * C90744 -
           (((C39130 * C5555 + C39126 * C5558 + C39129 * C5556 +
              C39125 * C5559) *
                 C90541 +
             (C39130 * C5469 + C39126 * C5475 + C39129 * C5470 +
              C39125 * C5476) *
                 C181) *
                C39128 +
            ((C39130 * C4748 + C39126 * C4752 + C39129 * C4747 +
              C39125 * C4751) *
                 C90541 +
             (C39130 * C4658 + C39126 * C4662 + C39129 * C4657 +
              C39125 * C4661) *
                 C181) *
                C39127) *
               C90634 * C90503) *
              C4655)) /
            (p * q * std::sqrt(p + q));
    d2eexz[6] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                 C244 +
             (C39129 * C245 + C39125 * C251 + C39130 * C246 + C39126 * C252) *
                 C90567) *
                C39127 +
            ((C39862 + C39863) * C244 + (C40100 + C40101) * C90567) * C39128) *
               C90634 * C2565 -
           (((C42031 + C42032) * C90567 + (C41811 + C41812) * C244) * C39128 +
            ((C40101 + C40100) * C90567 + (C39863 + C39862) * C244) * C39127) *
               C90634 * C2566 +
           (((C41812 + C41811) * C244 + (C42032 + C42031) * C90567) * C39127 +
            ((C39129 * C3367 + C39125 * C3373 + C39130 * C3366 +
              C39126 * C3372) *
                 C244 +
             (C39129 * C3489 + C39125 * C3492 + C39130 * C3488 +
              C39126 * C3491) *
                 C90567) *
                C39128) *
               C90634 * C2567) *
              C90744 +
          ((((C39867 + C39866) * C244 + (C40102 + C40103) * C90567) * C39127 +
            ((C41807 + C41808) * C244 + (C42033 + C42034) * C90567) * C39128) *
               C90634 * C2566 -
           (((C40103 + C40102) * C90567 + (C39866 + C39867) * C244) * C39128 +
            ((C39130 * C247 + C39126 * C253 + C39129 * C246 + C39125 * C252) *
                 C90567 +
             (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                 C244) *
                C39127) *
               C90634 * C2565 -
           (((C39130 * C3487 + C39126 * C3490 + C39129 * C3488 +
              C39125 * C3491) *
                 C90567 +
             (C39130 * C3365 + C39126 * C3371 + C39129 * C3366 +
              C39125 * C3372) *
                 C244) *
                C39128 +
            ((C42034 + C42033) * C90567 + (C41808 + C41807) * C244) * C39127) *
               C90634 * C2567) *
              C90503)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C244 +
            (C39129 * C245 + C39125 * C251 + C39130 * C246 + C39126 * C252) *
                C90567) *
               C39127 +
           ((C39129 * C832 + C39125 * C840 + C39130 * C829 + C39126 * C834) *
                C244 +
            (C39129 * C1011 + C39125 * C1016 + C39130 * C1010 +
             C39126 * C1015) *
                C90567) *
               C39128) *
              C90634 * C90541 * C92 -
          (((C39130 * C1009 + C39126 * C1014 + C39129 * C1010 +
             C39125 * C1015) *
                C90567 +
            (C39130 * C830 + C39126 * C835 + C39129 * C829 + C39125 * C834) *
                C244) *
               C39128 +
           ((C39130 * C247 + C39126 * C253 + C39129 * C246 + C39125 * C252) *
                C90567 +
            (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                C244) *
               C39127) *
              C90634 * C90541 * C93 +
          (((C39129 * C109 + C39125 * C115 + C39130 * C110 + C39126 * C119) *
                C244 +
            (C39129 * C247 + C39125 * C253 + C39130 * C248 + C39126 * C254) *
                C90567) *
               C39127 +
           ((C39129 * C830 + C39125 * C835 + C39130 * C831 + C39126 * C836) *
                C244 +
            (C39129 * C1009 + C39125 * C1014 + C39130 * C1012 +
             C39126 * C1017) *
                C90567) *
               C39128) *
              C90634 * C90541 * C94 -
          (((C39130 * C1013 + C39126 * C1018 + C39129 * C1012 +
             C39125 * C1017) *
                C90567 +
            (C39130 * C833 + C39126 * C842 + C39129 * C831 + C39125 * C836) *
                C244) *
               C39128 +
           ((C39130 * C249 + C39126 * C255 + C39129 * C248 + C39125 * C254) *
                C90567 +
            (C39130 * C111 + C39126 * C121 + C39129 * C110 + C39125 * C119) *
                C244) *
               C39127) *
              C90634 * C90541 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C4828 +
            (C39129 * C245 + C39125 * C251 + C39130 * C246 + C39126 * C252) *
                C4653 -
            (C39130 * C1697 + C39126 * C1702 + C39129 * C1700 +
             C39125 * C1708) *
                C4829 -
            (C39130 * C1878 + C39126 * C1883 + C39129 * C1879 +
             C39125 * C1884) *
                C4654 +
            (C39129 * C4656 + C39125 * C4660 + C39130 * C4657 +
             C39126 * C4661) *
                C4830 +
            (C39129 * C4831 + C39125 * C4835 + C39130 * C4832 +
             C39126 * C4836) *
                C4655) *
               C39127 +
           ((C39862 + C39863) * C4828 + (C40100 + C40101) * C4653 -
            (C43402 + C43403) * C4829 - (C43624 + C43625) * C4654 +
            (C39129 * C5471 + C39125 * C5477 + C39130 * C5470 +
             C39126 * C5476) *
                C4830 +
            (C39129 * C5637 + C39125 * C5640 + C39130 * C5636 +
             C39126 * C5639) *
                C4655) *
               C39128) *
              C90634 * C90541 * C90744 +
          (((C39129 * C1697 + C39125 * C1702 + C39130 * C1698 +
             C39126 * C1703) *
                C4829 -
            ((C39130 * C247 + C39126 * C253 + C39129 * C246 + C39125 * C252) *
                 C4653 +
             (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                 C4828) +
            (C39129 * C1878 + C39125 * C1883 + C39130 * C1877 +
             C39126 * C1882) *
                C4654 -
            (C39130 * C4658 + C39126 * C4662 + C39129 * C4657 +
             C39125 * C4661) *
                C4830 -
            (C39130 * C4833 + C39126 * C4837 + C39129 * C4832 +
             C39125 * C4836) *
                C4655) *
               C39127 +
           ((C39129 * C3892 + C39125 * C3898 + C39130 * C3893 +
             C39126 * C3899) *
                C4829 -
            ((C40103 + C40102) * C4653 + (C39866 + C39867) * C4828) +
            (C39129 * C4076 + C39125 * C4082 + C39130 * C4077 +
             C39126 * C4083) *
                C4654 -
            (C39130 * C5469 + C39126 * C5475 + C39129 * C5470 +
             C39125 * C5476) *
                C4830 -
            (C39130 * C5635 + C39126 * C5638 + C39129 * C5636 +
             C39125 * C5639) *
                C4655) *
               C39128) *
              C90634 * C90541 * C90503)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[6] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C88316 +
            (C39329 * C116 + C39127 * C314 + C39330 * C839 + C39128 * C1098) *
                C90744 -
            (C39356 + C39357) * C88309 - (C39358 + C39359) * C90503) *
               C90634 * C39125 +
           ((C39357 + C39356) * C88316 + (C39359 + C39358) * C90744 -
            (C39361 + C39360) * C88309 - (C39363 + C39362) * C90503) *
               C90634 * C39126) *
              C90567 * C2565 +
          (((C40220 + C40221) * C88309 -
            ((C39330 * C2577 + C39128 * C2831 + C39329 * C839 +
              C39127 * C1098) *
                 C90744 +
             (C39330 * C2570 + C39128 * C2827 + C39329 * C832 +
              C39127 * C1094) *
                 C88316) +
            (C40222 + C40223) * C90503) *
               C90634 * C39125 +
           ((C40225 + C40224) * C88309 -
            ((C40223 + C40222) * C90744 + (C40221 + C40220) * C88316) +
            (C40227 + C40226) * C90503) *
               C90634 * C39126) *
              C90567 * C2566 +
          (((C39329 * C2570 + C39127 * C2827 + C39330 * C3367 +
             C39128 * C3545) *
                C88316 +
            (C39329 * C2577 + C39127 * C2831 + C39330 * C3370 +
             C39128 * C3548) *
                C90744 -
            (C42141 + C42142) * C88309 - (C42143 + C42144) * C90503) *
               C90634 * C39125 +
           ((C42142 + C42141) * C88316 + (C42144 + C42143) * C90744 -
            (C39330 * C3365 + C39128 * C3543 + C39329 * C2572 +
             C39127 * C2829) *
                C88309 -
            (C39330 * C3368 + C39128 * C3546 + C39329 * C2579 +
             C39127 * C2833) *
                C90503) *
               C90634 * C39126) *
              C90567 * C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
               C103 +
           (C39329 * C116 + C39127 * C314 + C39330 * C839 + C39128 * C1098) *
               C92 -
           (C39356 + C39357) * C104 - (C39358 + C39359) * C93 +
           (C39360 + C39361) * C105 + (C39362 + C39363) * C94 -
           (C39364 + C39365) * C106 - (C39366 + C39367) * C95) *
              C90634 * C39125 +
          ((C39357 + C39356) * C103 + (C39359 + C39358) * C92 -
           (C39361 + C39360) * C104 - (C39363 + C39362) * C93 +
           (C39365 + C39364) * C105 + (C39367 + C39366) * C94 -
           (C39330 * C833 + C39128 * C1097 + C39329 * C111 + C39127 * C312) *
               C106 -
           (C39330 * C843 + C39128 * C1102 + C39329 * C122 + C39127 * C318) *
               C95) *
              C90634 * C39126) *
         C90567 * C90541) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C88316 +
            (C39329 * C116 + C39127 * C314 + C39330 * C839 + C39128 * C1098) *
                C90744 -
            (C39356 + C39357) * C88309 - (C39358 + C39359) * C90503) *
               C90634 * C39125 +
           ((C39357 + C39356) * C88316 + (C39359 + C39358) * C90744 -
            (C39361 + C39360) * C88309 - (C39363 + C39362) * C90503) *
               C90634 * C39126) *
              C4653 +
          (((C41167 + C41168) * C88309 -
            ((C39330 * C3900 + C39128 * C4167 + C39329 * C1707 +
              C39127 * C1966) *
                 C90744 +
             (C39330 * C3891 + C39128 * C4161 + C39329 * C1700 +
              C39127 * C1962) *
                 C88316) +
            (C41169 + C41170) * C90503) *
               C90634 * C39125 +
           ((C41172 + C41171) * C88309 -
            ((C41170 + C41169) * C90744 + (C41168 + C41167) * C88316) +
            (C41174 + C41173) * C90503) *
               C90634 * C39126) *
              C4654 +
          (((C39329 * C4656 + C39127 * C4913 + C39330 * C5471 +
             C39128 * C5717) *
                C88316 +
            (C39329 * C4663 + C39127 * C4917 + C39330 * C5474 +
             C39128 * C5720) *
                C90744 -
            (C44620 + C44621) * C88309 - (C44622 + C44623) * C90503) *
               C90634 * C39125 +
           ((C44621 + C44620) * C88316 + (C44623 + C44622) * C90744 -
            (C39330 * C5469 + C39128 * C5715 + C39329 * C4658 +
             C39127 * C4915) *
                C88309 -
            (C39330 * C5472 + C39128 * C5718 + C39329 * C4665 +
             C39127 * C4919) *
                C90503) *
               C90634 * C39126) *
              C4655) *
         C90541) /
            (p * q * std::sqrt(p + q));
    d2eeyy[6] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C2660 +
            (C39329 * C182 + C39127 * C394 + C39330 * C927 + C39128 * C1195) *
                C2565 -
            (C39330 * C2570 + C39128 * C2827 + C39329 * C832 + C39127 * C1094) *
                C2661 -
            (C39330 * C2663 + C39128 * C2921 + C39329 * C927 + C39127 * C1195) *
                C2566 +
            (C39329 * C2570 + C39127 * C2827 + C39330 * C3367 +
             C39128 * C3545) *
                C2662 +
            (C39329 * C2663 + C39127 * C2921 + C39330 * C3433 +
             C39128 * C3599) *
                C2567) *
               C90634 * C39125 +
           ((C39357 + C39356) * C2660 + (C39446 + C39447) * C2565 -
            (C40221 + C40220) * C2661 - (C40334 + C40335) * C2566 +
            (C42142 + C42141) * C2662 + (C42247 + C42248) * C2567) *
               C90634 * C39126) *
              C90744 +
          (((C40220 + C40221) * C2661 -
            ((C39447 + C39446) * C2565 + (C39356 + C39357) * C2660) +
            (C40335 + C40334) * C2566 - (C42141 + C42142) * C2662 -
            (C42248 + C42247) * C2567) *
               C90634 * C39125 +
           ((C40225 + C40224) * C2661 -
            ((C39448 + C39449) * C2565 + (C39361 + C39360) * C2660) +
            (C40336 + C40337) * C2566 -
            (C39330 * C3365 + C39128 * C3543 + C39329 * C2572 +
             C39127 * C2829) *
                C2662 -
            (C39330 * C3431 + C39128 * C3601 + C39329 * C2665 +
             C39127 * C2923) *
                C2567) *
               C90634 * C39126) *
              C90503) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C181 +
            (C39329 * C182 + C39127 * C394 + C39330 * C927 + C39128 * C1195) *
                C90541) *
               C90634 * C39125 +
           ((C39357 + C39356) * C181 + (C39446 + C39447) * C90541) * C90634 *
               C39126) *
              C92 -
          (((C39448 + C39449) * C90541 + (C39361 + C39360) * C181) * C90634 *
               C39126 +
           ((C39447 + C39446) * C90541 + (C39356 + C39357) * C181) * C90634 *
               C39125) *
              C93 +
          (((C39360 + C39361) * C181 + (C39449 + C39448) * C90541) * C90634 *
               C39125 +
           ((C39365 + C39364) * C181 + (C39450 + C39451) * C90541) * C90634 *
               C39126) *
              C94 -
          (((C39330 * C929 + C39128 * C1199 + C39329 * C186 + C39127 * C398) *
                C90541 +
            (C39330 * C833 + C39128 * C1097 + C39329 * C111 + C39127 * C312) *
                C181) *
               C90634 * C39126 +
           ((C39451 + C39450) * C90541 + (C39364 + C39365) * C181) * C90634 *
               C39125) *
              C95) *
         C90567) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                 C181 +
             (C39329 * C182 + C39127 * C394 + C39330 * C927 + C39128 * C1195) *
                 C90541) *
                C90634 * C39125 +
            ((C39357 + C39356) * C181 + (C39446 + C39447) * C90541) * C90634 *
                C39126) *
               C90744 -
           (((C39448 + C39449) * C90541 + (C39361 + C39360) * C181) * C90634 *
                C39126 +
            ((C39447 + C39446) * C90541 + (C39356 + C39357) * C181) * C90634 *
                C39125) *
               C90503) *
              C4653 +
          ((((C41167 + C41168) * C181 + (C41281 + C41282) * C90541) * C90634 *
                C39125 +
            ((C41172 + C41171) * C181 + (C41283 + C41284) * C90541) * C90634 *
                C39126) *
               C90503 -
           (((C41282 + C41281) * C90541 + (C41168 + C41167) * C181) * C90634 *
                C39126 +
            ((C39330 * C3989 + C39128 * C4247 + C39329 * C1794 +
              C39127 * C2066) *
                 C90541 +
             (C39330 * C3891 + C39128 * C4161 + C39329 * C1700 +
              C39127 * C1962) *
                 C181) *
                C90634 * C39125) *
               C90744) *
              C4654 +
          ((((C39329 * C4656 + C39127 * C4913 + C39330 * C5471 +
              C39128 * C5717) *
                 C181 +
             (C39329 * C4746 + C39127 * C5007 + C39330 * C5557 +
              C39128 * C5795) *
                 C90541) *
                C90634 * C39125 +
            ((C44621 + C44620) * C181 + (C44726 + C44727) * C90541) * C90634 *
                C39126) *
               C90744 -
           (((C39330 * C5555 + C39128 * C5797 + C39329 * C4748 +
              C39127 * C5009) *
                 C90541 +
             (C39330 * C5469 + C39128 * C5715 + C39329 * C4658 +
              C39127 * C4915) *
                 C181) *
                C90634 * C39126 +
            ((C44727 + C44726) * C90541 + (C44620 + C44621) * C181) * C90634 *
                C39125) *
               C90503) *
              C4655)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[6] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                 C244 +
             (C39329 * C245 + C39127 * C474 + C39330 * C1011 + C39128 * C1301) *
                 C90567) *
                C90634 * C39125 +
            ((C39357 + C39356) * C244 + (C39530 + C39531) * C90567) * C90634 *
                C39126) *
               C2565 -
           (((C40444 + C40445) * C90567 + (C40221 + C40220) * C244) * C90634 *
                C39126 +
            ((C39330 * C2745 + C39128 * C3017 + C39329 * C1011 +
              C39127 * C1301) *
                 C90567 +
             (C39330 * C2570 + C39128 * C2827 + C39329 * C832 +
              C39127 * C1094) *
                 C244) *
                C90634 * C39125) *
               C2566 +
           (((C39329 * C2570 + C39127 * C2827 + C39330 * C3367 +
              C39128 * C3545) *
                 C244 +
             (C39329 * C2745 + C39127 * C3017 + C39330 * C3489 +
              C39128 * C3654) *
                 C90567) *
                C90634 * C39125 +
            ((C42142 + C42141) * C244 + (C42351 + C42352) * C90567) * C90634 *
                C39126) *
               C2567) *
              C90744 +
          ((((C40220 + C40221) * C244 + (C40445 + C40444) * C90567) * C90634 *
                C39125 +
            ((C40225 + C40224) * C244 + (C40446 + C40447) * C90567) * C90634 *
                C39126) *
               C2566 -
           (((C39532 + C39533) * C90567 + (C39361 + C39360) * C244) * C90634 *
                C39126 +
            ((C39531 + C39530) * C90567 + (C39356 + C39357) * C244) * C90634 *
                C39125) *
               C2565 -
           (((C39330 * C3487 + C39128 * C3652 + C39329 * C2747 +
              C39127 * C3019) *
                 C90567 +
             (C39330 * C3365 + C39128 * C3543 + C39329 * C2572 +
              C39127 * C2829) *
                 C244) *
                C90634 * C39126 +
            ((C42352 + C42351) * C90567 + (C42141 + C42142) * C244) * C90634 *
                C39125) *
               C2567) *
              C90503)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C244 +
            (C39329 * C245 + C39127 * C474 + C39330 * C1011 + C39128 * C1301) *
                C90567) *
               C90634 * C39125 +
           ((C39357 + C39356) * C244 + (C39530 + C39531) * C90567) * C90634 *
               C39126) *
              C90541 * C92 -
          (((C39532 + C39533) * C90567 + (C39361 + C39360) * C244) * C90634 *
               C39126 +
           ((C39531 + C39530) * C90567 + (C39356 + C39357) * C244) * C90634 *
               C39125) *
              C90541 * C93 +
          (((C39360 + C39361) * C244 + (C39533 + C39532) * C90567) * C90634 *
               C39125 +
           ((C39365 + C39364) * C244 + (C39534 + C39535) * C90567) * C90634 *
               C39126) *
              C90541 * C94 -
          (((C39330 * C1013 + C39128 * C1303 + C39329 * C249 + C39127 * C478) *
                C90567 +
            (C39330 * C833 + C39128 * C1097 + C39329 * C111 + C39127 * C312) *
                C244) *
               C90634 * C39126 +
           ((C39535 + C39534) * C90567 + (C39364 + C39365) * C244) * C90634 *
               C39125) *
              C90541 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C4828 +
            (C39329 * C245 + C39127 * C474 + C39330 * C1011 + C39128 * C1301) *
                C4653 -
            (C39330 * C3891 + C39128 * C4161 + C39329 * C1700 +
             C39127 * C1962) *
                C4829 -
            (C39330 * C4075 + C39128 * C4327 + C39329 * C1879 +
             C39127 * C2159) *
                C4654 +
            (C39329 * C4656 + C39127 * C4913 + C39330 * C5471 +
             C39128 * C5717) *
                C4830 +
            (C39329 * C4831 + C39127 * C5095 + C39330 * C5637 +
             C39128 * C5872) *
                C4655) *
               C90634 * C39125 +
           ((C39357 + C39356) * C4828 + (C39530 + C39531) * C4653 -
            (C41168 + C41167) * C4829 - (C41391 + C41392) * C4654 +
            (C44621 + C44620) * C4830 + (C44830 + C44831) * C4655) *
               C90634 * C39126) *
              C90541 * C90744 +
          (((C41167 + C41168) * C4829 -
            ((C39531 + C39530) * C4653 + (C39356 + C39357) * C4828) +
            (C41392 + C41391) * C4654 - (C44620 + C44621) * C4830 -
            (C44831 + C44830) * C4655) *
               C90634 * C39125 +
           ((C41172 + C41171) * C4829 -
            ((C39532 + C39533) * C4653 + (C39361 + C39360) * C4828) +
            (C41393 + C41394) * C4654 -
            (C39330 * C5469 + C39128 * C5715 + C39329 * C4658 +
             C39127 * C4915) *
                C4830 -
            (C39330 * C5635 + C39128 * C5874 + C39329 * C4833 +
             C39127 * C5097) *
                C4655) *
               C90634 * C39126) *
              C90541 * C90503)) /
            (p * q * std::sqrt(p + q));
    d2eezx[6] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C88316 +
             (C554 * C116 + C90634 * C561) * C90744 - C584 * C88309 -
             C585 * C90503) *
                C39125 +
            (C584 * C88316 + C585 * C90744 - C586 * C88309 - C587 * C90503) *
                C39126) *
               C39127 +
           ((C16043 + C16044 - C16045 - C16046) * C39125 +
            (C42451 + C42452 - C42453 - C42454) * C39126) *
               C39128) *
              C90567 * C2565 +
          (((C16045 - (C16044 + C16043) + C16046) * C39125 +
            (C42453 - (C42452 + C42451) + C42454) * C39126) *
               C39127 +
           ((C16049 - (C16048 + C16047) + C16050) * C39125 +
            (C42455 - (C42456 + C42457) + C42458) * C39126) *
               C39128) *
              C90567 * C2566 +
          ((C16069 * C39125 + (C42457 + C42456 - C42455 - C42458) * C39126) *
               C39127 +
           ((C16067 + C16066 - C16065 - C16068) * C39125 +
            (C16060 * C88316 + C16063 * C90744 -
             (C554 * C3365 + C90634 * C3705) * C88309 -
             (C554 * C3368 + C90634 * C3708) * C90503) *
                C39126) *
               C39128) *
              C90567 * C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C103 +
            (C554 * C116 + C90634 * C561) * C92 - C584 * C104 - C585 * C93 +
            C586 * C105 + C587 * C94 - C588 * C106 - C589 * C95) *
               C39125 +
           (C584 * C103 + C585 * C92 - C586 * C104 - C587 * C93 + C588 * C105 +
            C589 * C94 - C590 * C106 - C591 * C95) *
               C39126) *
              C39127 +
          ((C14614 * C103 + C14615 * C92 - C1418 * C104 - C1419 * C93 +
            C1420 * C105 + C1421 * C94 - C1422 * C106 - C1423 * C95) *
               C39125 +
           (C1418 * C103 + C1419 * C92 - C1420 * C104 - C1421 * C93 +
            C1422 * C105 + C1423 * C94 - (C554 * C833 + C90634 * C1399) * C106 -
            (C554 * C843 + C90634 * C1404) * C95) *
               C39126) *
              C39128) *
         C90567 * C90541) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C88316 +
             (C554 * C116 + C90634 * C561) * C90744 - C584 * C88309 -
             C585 * C90503) *
                C39125 +
            (C584 * C88316 + C585 * C90744 - C586 * C88309 - C587 * C90503) *
                C39126) *
               C39127 +
           ((C16043 + C16044 - C16045 - C16046) * C39125 +
            (C42451 + C42452 - C42453 - C42454) * C39126) *
               C39128) *
              C4653 +
          (((C2286 * C88309 -
             ((C554 * C1707 + C90634 * C2268) * C90744 +
              (C554 * C1700 + C90634 * C2264) * C88316) +
             C2287 * C90503) *
                C39125 +
            (C2288 * C88309 - (C2287 * C90744 + C2286 * C88316) +
             C2289 * C90503) *
                C39126) *
               C39127 +
           ((C24805 - (C24806 + C24807) + C24808) * C39125 +
            (C8773 * C88309 - (C8772 * C90744 + C8771 * C88316) +
             C8774 * C90503) *
                C39126) *
               C39128) *
              C4654 +
          ((((C554 * C4656 + C90634 * C5191) * C88316 +
             (C554 * C4663 + C90634 * C5195) * C90744 - C5208 * C88309 -
             C5209 * C90503) *
                C39125 +
            (C5208 * C88316 + C5209 * C90744 - C5210 * C88309 -
             C5211 * C90503) *
                C39126) *
               C39127 +
           ((C18856 * C88316 + C18857 * C90744 - C44934 * C88309 -
             C44935 * C90503) *
                C39125 +
            (C44934 * C88316 + C44935 * C90744 -
             (C554 * C5469 + C90634 * C5949) * C88309 -
             (C554 * C5472 + C90634 * C5952) * C90503) *
                C39126) *
               C39128) *
              C4655) *
         C90541) /
            (p * q * std::sqrt(p + q));
    d2eezy[6] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C2660 +
             (C554 * C182 + C90634 * C641) * C2565 - C14614 * C2661 -
             C14700 * C2566 + C14616 * C2662 + C14701 * C2567) *
                C39125 +
            (C3204 + C3205 - C3206 - C3207 + C3208 + C3220) * C39126) *
               C39127 +
           ((C14614 * C2660 + C14700 * C2565 - C14616 * C2661 - C14701 * C2566 +
             C16062 * C2662 + C16151 * C2567) *
                C39125 +
            (C42557 + C42558 - C42559 - C42560 + C42561 + C42562) * C39126) *
               C39128) *
              C90744 +
          (((C3206 - (C3205 + C3204) + C3207 - C3208 - C3220) * C39125 +
            (C3213 - (C3212 + C3211) + C3214 - C3215 - C3221) * C39126) *
               C39127 +
           ((C42559 - (C42558 + C42557) + C42560 - C42561 - C42562) * C39125 +
            (C3124 * C2661 - (C1520 * C2565 + C1420 * C2660) + C3219 * C2566 -
             (C554 * C3365 + C90634 * C3705) * C2662 -
             (C554 * C3431 + C90634 * C3763) * C2567) *
                C39126) *
               C39128) *
              C90503) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C181 +
             (C554 * C182 + C90634 * C641) * C90541) *
                C39125 +
            (C648 + C664) * C39126) *
               C39127 +
           ((C14614 * C181 + C14700 * C90541) * C39125 +
            (C39668 + C39669) * C39126) *
               C39128) *
              C92 -
          (((C39670 + C39671) * C39126 + (C39669 + C39668) * C39125) * C39128 +
           ((C665 + C651) * C39126 + (C664 + C648) * C39125) * C39127) *
              C93 +
          ((C668 * C39125 + (C656 + C666) * C39126) * C39127 +
           ((C39671 + C39670) * C39125 + (C39672 + C39673) * C39126) * C39128) *
              C94 -
          ((((C554 * C929 + C90634 * C1501) * C90541 +
             (C554 * C833 + C90634 * C1399) * C181) *
                C39126 +
            (C39673 + C39672) * C39125) *
               C39128 +
           ((C667 + C657) * C39126 + C669 * C39125) * C39127) *
              C95) *
         C90567) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C90634 * C555) * C181 +
              (C554 * C182 + C90634 * C641) * C90541) *
                 C39125 +
             (C648 + C664) * C39126) *
                C39127 +
            ((C14614 * C181 + C14700 * C90541) * C39125 +
             (C39668 + C39669) * C39126) *
                C39128) *
               C90744 -
           (((C39670 + C39671) * C39126 + (C39669 + C39668) * C39125) * C39128 +
            ((C665 + C651) * C39126 + (C664 + C648) * C39125) * C39127) *
               C90503) *
              C4653 +
          ((((C2371 + C2383) * C39125 + (C2374 + C2384) * C39126) * C39127 +
            ((C41591 + C41592) * C39125 + (C41593 + C41594) * C39126) *
                C39128) *
               C90503 -
           (((C41592 + C41591) * C39126 +
             (C17474 * C90541 + C17381 * C181) * C39125) *
                C39128 +
            ((C2383 + C2371) * C39126 +
             ((C554 * C1794 + C90634 * C2368) * C90541 +
              (C554 * C1700 + C90634 * C2264) * C181) *
                 C39125) *
                C39127) *
               C90744) *
              C4654 +
          (((((C554 * C4656 + C90634 * C5191) * C181 +
              (C554 * C4746 + C90634 * C5285) * C90541) *
                 C39125 +
             (C5290 + C5298) * C39126) *
                C39127 +
            ((C18856 * C181 + C18943 * C90541) * C39125 +
             (C45034 + C45038) * C39126) *
                C39128) *
               C90744 -
           ((((C554 * C5555 + C90634 * C6031) * C90541 +
              (C554 * C5469 + C90634 * C5949) * C181) *
                 C39126 +
             (C45038 + C45034) * C39125) *
                C39128 +
            ((C5299 + C5293) * C39126 + (C5298 + C5290) * C39125) * C39127) *
               C90503) *
              C4655)) /
            (p * q * std::sqrt(p + q));
    d2eezz[6] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C90634 * C555) * C244 +
              (C554 * C245 + C90634 * C719) * C90567) *
                 C39125 +
             (C726 + C742) * C39126) *
                C39127 +
            ((C14776 + C14784) * C39125 + C40756 * C39126) * C39128) *
               C2565 -
           ((C16236 * C39126 + (C14785 + C14779) * C39125) * C39128 +
            (C40757 * C39126 + (C14784 + C14776) * C39125) * C39127) *
               C2566 +
           ((C16229 * C39125 + C42661 * C39126) * C39127 +
            ((C16232 + C16241) * C39125 + (C16233 + C16242) * C39126) *
                C39128) *
               C2567) *
              C90744 +
          (((C40756 * C39125 + C40758 * C39126) * C39127 +
            (C42661 * C39125 + (C3303 + C3309) * C39126) * C39128) *
               C2566 -
           ((C1621 * C39126 + C40757 * C39125) * C39128 +
            ((C743 + C729) * C39126 + (C742 + C726) * C39125) * C39127) *
               C2565 -
           ((((C554 * C3487 + C90634 * C3814) * C90567 +
              (C554 * C3365 + C90634 * C3705) * C244) *
                 C39126 +
             (C16242 + C16233) * C39125) *
                C39128 +
            ((C3309 + C3303) * C39126 + C16236 * C39125) * C39127) *
               C2567) *
              C90503)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C244 +
             (C554 * C245 + C90634 * C719) * C90567) *
                C39125 +
            (C726 + C742) * C39126) *
               C39127 +
           ((C14776 + C14784) * C39125 + (C1611 + C1619) * C39126) * C39128) *
              C90541 * C92 -
          ((C1621 * C39126 + (C1619 + C1611) * C39125) * C39128 +
           ((C743 + C729) * C39126 + (C742 + C726) * C39125) * C39127) *
              C90541 * C93 +
          ((C746 * C39125 + (C734 + C744) * C39126) * C39127 +
           ((C1608 + C1618) * C39125 + (C1612 + C1620) * C39126) * C39128) *
              C90541 * C94 -
          ((((C554 * C1013 + C90634 * C1604) * C90567 +
             (C554 * C833 + C90634 * C1399) * C244) *
                C39126 +
            (C1620 + C1612) * C39125) *
               C39128 +
           ((C745 + C735) * C39126 + C747 * C39125) * C39127) *
              C90541 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C4828 +
             (C554 * C245 + C90634 * C719) * C4653 -
             (C554 * C1700 + C90634 * C2264) * C4829 -
             (C554 * C1879 + C90634 * C2460) * C4654 +
             (C554 * C4656 + C90634 * C5191) * C4830 +
             (C554 * C4831 + C90634 * C5373) * C4655) *
                C39125 +
            (C5378 + C5379 - C5380 - C5381 + C5382 + C5394) * C39126) *
               C39127 +
           ((C19020 + C19021 - C19022 - C19023 + C19024 + C19036) * C39125 +
            (C45137 + C45138 - C45139 - C45140 + C45141 + C45145) * C39126) *
               C39128) *
              C90541 * C90744 +
          (((C5380 - (C5379 + C5378) + C5381 - C5382 - C5394) * C39125 +
            (C5387 - (C5386 + C5385) + C5388 - C5389 - C5395) * C39126) *
               C39127 +
           ((C45139 - (C45138 + C45137) + C45140 - C45141 - C45145) * C39125 +
            (C8773 * C4829 - (C1615 * C4653 + C1420 * C4828) + C8998 * C4654 -
             (C554 * C5469 + C90634 * C5949) * C4830 -
             (C554 * C5635 + C90634 * C6108) * C4655) *
                C39126) *
               C39128) *
              C90541 * C90503)) /
            (p * q * std::sqrt(p + q));
    d2eexx[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C3364 +
            (C39129 * C116 + C39125 * C125 + C39130 * C117 + C39126 * C126) *
                C90498) *
               C39127 +
           ((C39862 + C39863) * C3364 + (C39864 + C39865) * C90498) * C39128) *
              C90634 * C90567 * C3360 -
          (((C41809 + C41810) * C90498 + (C41811 + C41812) * C3364) * C39128 +
           ((C39865 + C39864) * C90498 + (C39863 + C39862) * C3364) * C39127) *
              C90634 * C90567 * C3361 +
          (((C41812 + C41811) * C3364 + (C41810 + C41809) * C90498) * C39127 +
           ((C42736 + C42737) * C3364 + (C42738 + C42739) * C90498) * C39128) *
              C90634 * C90567 * C3362 -
          (((C39130 * C15530 + C39126 * C15532 + C39129 * C15528 +
             C39125 * C15531) *
                C90498 +
            (C39130 * C15526 + C39126 * C15529 + C39129 * C15525 +
             C39125 * C15527) *
                C3364) *
               C39128 +
           ((C42739 + C42738) * C90498 + (C42737 + C42736) * C3364) * C39127) *
              C90634 * C90567 * C3363)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C826 +
            (C39129 * C116 + C39125 * C125 + C39130 * C117 + C39126 * C126) *
                C821 -
            (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                C827 -
            (C39130 * C118 + C39126 * C127 + C39129 * C117 + C39125 * C126) *
                C822 +
            (C39129 * C109 + C39125 * C115 + C39130 * C110 + C39126 * C119) *
                C828 +
            (C39129 * C118 + C39125 * C127 + C39130 * C120 + C39126 * C128) *
                C823) *
               C39127 +
           ((C39862 + C39863) * C826 + (C39864 + C39865) * C821 -
            (C39866 + C39867) * C827 - (C39868 + C39869) * C822 +
            (C39870 + C39871) * C828 + (C39872 + C39873) * C823) *
               C39128) *
              C90634 * C90567 * C90752 +
          (((C39867 + C39866) * C827 -
            ((C39865 + C39864) * C821 + (C39863 + C39862) * C826) +
            (C39869 + C39868) * C822 - (C39871 + C39870) * C828 -
            (C39873 + C39872) * C823) *
               C39127 +
           ((C39129 * C2571 + C39125 * C2575 + C39130 * C2572 +
             C39126 * C2576) *
                C827 -
            ((C39130 * C2578 + C39126 * C2583 + C39129 * C2577 +
              C39125 * C2582) *
                 C821 +
             (C39130 * C2571 + C39126 * C2575 + C39129 * C2570 +
              C39125 * C2574) *
                 C826) +
            (C39129 * C2578 + C39125 * C2583 + C39130 * C2579 +
             C39126 * C2584) *
                C822 -
            (C39130 * C2573 + C39126 * C2580 + C39129 * C2572 +
             C39125 * C2576) *
                C828 -
            (C39130 * C2581 + C39126 * C2585 + C39129 * C2579 +
             C39125 * C2584) *
                C823) *
               C39128) *
              C90634 * C90567 * C90555)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                 C3364 +
             (C39129 * C116 + C39125 * C125 + C39130 * C117 + C39126 * C126) *
                 C90498) *
                C39127 +
            ((C39862 + C39863) * C3364 + (C39864 + C39865) * C90498) * C39128) *
               C90634 * C4653 -
           (((C43400 + C43401) * C90498 + (C43402 + C43403) * C3364) * C39128 +
            ((C39130 * C1706 + C39126 * C1713 + C39129 * C1707 +
              C39125 * C1714) *
                 C90498 +
             (C39130 * C1697 + C39126 * C1702 + C39129 * C1700 +
              C39125 * C1708) *
                 C3364) *
                C39127) *
               C90634 * C4654 +
           (((C39129 * C4656 + C39125 * C4660 + C39130 * C4657 +
              C39126 * C4661) *
                 C3364 +
             (C39129 * C4663 + C39125 * C4668 + C39130 * C4664 +
              C39126 * C4669) *
                 C90498) *
                C39127 +
            ((C45252 + C45253) * C3364 + (C45254 + C45255) * C90498) * C39128) *
               C90634 * C4655) *
              C90752 +
          ((((C43403 + C43402) * C3364 + (C43401 + C43400) * C90498) * C39127 +
            ((C43404 + C43405) * C3364 + (C43406 + C43407) * C90498) * C39128) *
               C90634 * C4654 -
           (((C41809 + C41810) * C90498 + (C41811 + C41812) * C3364) * C39128 +
            ((C39865 + C39864) * C90498 + (C39863 + C39862) * C3364) * C39127) *
               C90634 * C4653 -
           (((C39130 * C17656 + C39126 * C17658 + C39129 * C17654 +
              C39125 * C17657) *
                 C90498 +
             (C39130 * C17652 + C39126 * C17655 + C39129 * C17651 +
              C39125 * C17653) *
                 C3364) *
                C39128 +
            ((C45255 + C45254) * C90498 + (C45253 + C45252) * C3364) * C39127) *
               C90634 * C4655) *
              C90555)) /
            (p * q * std::sqrt(p + q));
    d2eexy[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
               C3427 +
           (C39129 * C182 + C39125 * C188 + C39130 * C183 + C39126 * C189) *
               C3360 -
           (C39863 + C39862) * C3428 - (C39984 + C39985) * C3361 +
           (C41812 + C41811) * C3429 + (C41921 + C41922) * C3362 -
           (C42737 + C42736) * C3430 - (C42810 + C42811) * C3363) *
              C39127 +
          ((C39862 + C39863) * C3427 + (C39985 + C39984) * C3360 -
           (C41811 + C41812) * C3428 - (C41922 + C41921) * C3361 +
           (C42736 + C42737) * C3429 + (C42811 + C42810) * C3362 -
           (C39130 * C15526 + C39126 * C15529 + C39129 * C15525 +
            C39125 * C15527) *
               C3430 -
           (C39130 * C15635 + C39126 * C15637 + C39129 * C15634 +
            C39125 * C15636) *
               C3363) *
              C39128) *
         C90634 * C90498 * C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C923 +
            (C39129 * C182 + C39125 * C188 + C39130 * C183 + C39126 * C189) *
                C90752 -
            (C39863 + C39862) * C924 - (C39984 + C39985) * C90555) *
               C39127 +
           ((C39862 + C39863) * C923 + (C39985 + C39984) * C90752 -
            (C39130 * C2571 + C39126 * C2575 + C39129 * C2570 +
             C39125 * C2574) *
                C924 -
            (C39130 * C2664 + C39126 * C2668 + C39129 * C2663 +
             C39125 * C2667) *
                C90555) *
               C39128) *
              C90634 * C821 +
          (((C39867 + C39866) * C924 -
            ((C39130 * C184 + C39126 * C190 + C39129 * C183 + C39125 * C189) *
                 C90752 +
             (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                 C923) +
            (C39986 + C39987) * C90555) *
               C39127 +
           ((C39129 * C2571 + C39125 * C2575 + C39130 * C2572 +
             C39126 * C2576) *
                C924 -
            ((C39987 + C39986) * C90752 + (C39866 + C39867) * C923) +
            (C39129 * C2664 + C39125 * C2668 + C39130 * C2665 +
             C39126 * C2669) *
                C90555) *
               C39128) *
              C90634 * C822 +
          (((C39129 * C109 + C39125 * C115 + C39130 * C110 + C39126 * C119) *
                C923 +
            (C39129 * C184 + C39125 * C190 + C39130 * C185 + C39126 * C191) *
                C90752 -
            (C39871 + C39870) * C924 - (C39988 + C39989) * C90555) *
               C39127 +
           ((C39870 + C39871) * C923 + (C39989 + C39988) * C90752 -
            (C39130 * C2573 + C39126 * C2580 + C39129 * C2572 +
             C39125 * C2576) *
                C924 -
            (C39130 * C2666 + C39126 * C2670 + C39129 * C2665 +
             C39125 * C2669) *
                C90555) *
               C39128) *
              C90634 * C823) *
         C90567) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C923 +
            (C39129 * C182 + C39125 * C188 + C39130 * C183 + C39126 * C189) *
                C90752 -
            (C39863 + C39862) * C924 - (C39984 + C39985) * C90555) *
               C39127 +
           ((C39862 + C39863) * C923 + (C39985 + C39984) * C90752 -
            (C41811 + C41812) * C924 - (C41922 + C41921) * C90555) *
               C39128) *
              C90634 * C90498 * C4653 +
          (((C43403 + C43402) * C924 -
            ((C39130 * C1791 + C39126 * C1796 + C39129 * C1794 +
              C39125 * C1799) *
                 C90752 +
             (C39130 * C1697 + C39126 * C1702 + C39129 * C1700 +
              C39125 * C1708) *
                 C923) +
            (C43514 + C43515) * C90555) *
               C39127 +
           ((C43404 + C43405) * C924 -
            ((C43515 + C43514) * C90752 + (C43402 + C43403) * C923) +
            (C43517 + C43516) * C90555) *
               C39128) *
              C90634 * C90498 * C4654 +
          (((C39129 * C4656 + C39125 * C4660 + C39130 * C4657 +
             C39126 * C4661) *
                C923 +
            (C39129 * C4746 + C39125 * C4750 + C39130 * C4747 +
             C39126 * C4751) *
                C90752 -
            (C45253 + C45252) * C924 - (C45358 + C45359) * C90555) *
               C39127 +
           ((C45252 + C45253) * C923 + (C45359 + C45358) * C90752 -
            (C39130 * C17652 + C39126 * C17655 + C39129 * C17651 +
             C39125 * C17653) *
                C924 -
            (C39130 * C17734 + C39126 * C17736 + C39129 * C17733 +
             C39125 * C17735) *
                C90555) *
               C39128) *
              C90634 * C90498 * C4655)) /
            (p * q * std::sqrt(p + q));
    d2eexz[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C244 +
            (C39129 * C245 + C39125 * C251 + C39130 * C246 + C39126 * C252) *
                C90567) *
               C39127 +
           ((C39862 + C39863) * C244 + (C40100 + C40101) * C90567) * C39128) *
              C90634 * C3360 -
          (((C42031 + C42032) * C90567 + (C41811 + C41812) * C244) * C39128 +
           ((C40101 + C40100) * C90567 + (C39863 + C39862) * C244) * C39127) *
              C90634 * C3361 +
          (((C41812 + C41811) * C244 + (C42032 + C42031) * C90567) * C39127 +
           ((C42736 + C42737) * C244 + (C42882 + C42883) * C90567) * C39128) *
              C90634 * C3362 -
          (((C39130 * C15719 + C39126 * C15721 + C39129 * C15718 +
             C39125 * C15720) *
                C90567 +
            (C39130 * C15526 + C39126 * C15529 + C39129 * C15525 +
             C39125 * C15527) *
                C244) *
               C39128 +
           ((C42883 + C42882) * C90567 + (C42737 + C42736) * C244) * C39127) *
              C90634 * C3363) *
         C90498) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                 C244 +
             (C39129 * C245 + C39125 * C251 + C39130 * C246 + C39126 * C252) *
                 C90567) *
                C39127 +
            ((C39862 + C39863) * C244 + (C40100 + C40101) * C90567) * C39128) *
               C90634 * C90752 -
           (((C39130 * C2746 + C39126 * C2750 + C39129 * C2745 +
              C39125 * C2749) *
                 C90567 +
             (C39130 * C2571 + C39126 * C2575 + C39129 * C2570 +
              C39125 * C2574) *
                 C244) *
                C39128 +
            ((C40101 + C40100) * C90567 + (C39863 + C39862) * C244) * C39127) *
               C90634 * C90555) *
              C821 +
          ((((C39867 + C39866) * C244 + (C40102 + C40103) * C90567) * C39127 +
            ((C39129 * C2571 + C39125 * C2575 + C39130 * C2572 +
              C39126 * C2576) *
                 C244 +
             (C39129 * C2746 + C39125 * C2750 + C39130 * C2747 +
              C39126 * C2751) *
                 C90567) *
                C39128) *
               C90634 * C90555 -
           (((C40103 + C40102) * C90567 + (C39866 + C39867) * C244) * C39128 +
            ((C39130 * C247 + C39126 * C253 + C39129 * C246 + C39125 * C252) *
                 C90567 +
             (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                 C244) *
                C39127) *
               C90634 * C90752) *
              C822 +
          ((((C39129 * C109 + C39125 * C115 + C39130 * C110 + C39126 * C119) *
                 C244 +
             (C39129 * C247 + C39125 * C253 + C39130 * C248 + C39126 * C254) *
                 C90567) *
                C39127 +
            ((C39870 + C39871) * C244 + (C40104 + C40105) * C90567) * C39128) *
               C90634 * C90752 -
           (((C39130 * C2748 + C39126 * C2752 + C39129 * C2747 +
              C39125 * C2751) *
                 C90567 +
             (C39130 * C2573 + C39126 * C2580 + C39129 * C2572 +
              C39125 * C2576) *
                 C244) *
                C39128 +
            ((C40105 + C40104) * C90567 + (C39871 + C39870) * C244) * C39127) *
               C90634 * C90555) *
              C823)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C4828 +
            (C39129 * C245 + C39125 * C251 + C39130 * C246 + C39126 * C252) *
                C4653 -
            (C39130 * C1697 + C39126 * C1702 + C39129 * C1700 +
             C39125 * C1708) *
                C4829 -
            (C39130 * C1878 + C39126 * C1883 + C39129 * C1879 +
             C39125 * C1884) *
                C4654 +
            (C39129 * C4656 + C39125 * C4660 + C39130 * C4657 +
             C39126 * C4661) *
                C4830 +
            (C39129 * C4831 + C39125 * C4835 + C39130 * C4832 +
             C39126 * C4836) *
                C4655) *
               C39127 +
           ((C39862 + C39863) * C4828 + (C40100 + C40101) * C4653 -
            (C43402 + C43403) * C4829 - (C43624 + C43625) * C4654 +
            (C45252 + C45253) * C4830 + (C45462 + C45463) * C4655) *
               C39128) *
              C90634 * C90752 +
          (((C43403 + C43402) * C4829 -
            ((C40101 + C40100) * C4653 + (C39863 + C39862) * C4828) +
            (C43625 + C43624) * C4654 - (C45253 + C45252) * C4830 -
            (C45463 + C45462) * C4655) *
               C39127 +
           ((C43404 + C43405) * C4829 -
            ((C42031 + C42032) * C4653 + (C41811 + C41812) * C4828) +
            (C43626 + C43627) * C4654 -
            (C39130 * C17652 + C39126 * C17655 + C39129 * C17651 +
             C39125 * C17653) *
                C4830 -
            (C39130 * C17812 + C39126 * C17814 + C39129 * C17811 +
             C39125 * C17813) *
                C4655) *
               C39128) *
              C90634 * C90555) *
         C90498) /
            (p * q * std::sqrt(p + q));
    d2eeyx[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C3364 +
            (C39329 * C116 + C39127 * C314 + C39330 * C839 + C39128 * C1098) *
                C90498) *
               C90634 * C39125 +
           ((C39357 + C39356) * C3364 + (C39359 + C39358) * C90498) * C90634 *
               C39126) *
              C90567 * C3360 -
          (((C40223 + C40222) * C90498 + (C40221 + C40220) * C3364) * C90634 *
               C39126 +
           ((C39330 * C2577 + C39128 * C2831 + C39329 * C839 + C39127 * C1098) *
                C90498 +
            (C39330 * C2570 + C39128 * C2827 + C39329 * C832 + C39127 * C1094) *
                C3364) *
               C90634 * C39125) *
              C90567 * C3361 +
          (((C39329 * C2570 + C39127 * C2827 + C39330 * C3367 +
             C39128 * C3545) *
                C3364 +
            (C39329 * C2577 + C39127 * C2831 + C39330 * C3370 +
             C39128 * C3548) *
                C90498) *
               C90634 * C39125 +
           ((C42142 + C42141) * C3364 + (C42144 + C42143) * C90498) * C90634 *
               C39126) *
              C90567 * C3362 -
          (((C39330 * C15530 + C39128 * C15811 + C39329 * C3369 +
             C39127 * C3547) *
                C90498 +
            (C39330 * C15526 + C39128 * C15809 + C39329 * C3366 +
             C39127 * C3544) *
                C3364) *
               C90634 * C39126 +
           ((C39330 * C15528 + C39128 * C15810 + C39329 * C3370 +
             C39127 * C3548) *
                C90498 +
            (C39330 * C15525 + C39128 * C15808 + C39329 * C3367 +
             C39127 * C3545) *
                C3364) *
               C90634 * C39125) *
              C90567 * C3363)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C826 +
            (C39329 * C116 + C39127 * C314 + C39330 * C839 + C39128 * C1098) *
                C821 -
            (C39356 + C39357) * C827 - (C39358 + C39359) * C822 +
            (C39360 + C39361) * C828 + (C39362 + C39363) * C823) *
               C90634 * C39125 +
           ((C39357 + C39356) * C826 + (C39359 + C39358) * C821 -
            (C39361 + C39360) * C827 - (C39363 + C39362) * C822 +
            (C39365 + C39364) * C828 + (C39367 + C39366) * C823) *
               C90634 * C39126) *
              C90567 * C90752 +
          (((C40220 + C40221) * C827 -
            ((C39330 * C2577 + C39128 * C2831 + C39329 * C839 +
              C39127 * C1098) *
                 C821 +
             (C39330 * C2570 + C39128 * C2827 + C39329 * C832 +
              C39127 * C1094) *
                 C826) +
            (C40222 + C40223) * C822 - (C40224 + C40225) * C828 -
            (C40226 + C40227) * C823) *
               C90634 * C39125 +
           ((C40225 + C40224) * C827 -
            ((C40223 + C40222) * C821 + (C40221 + C40220) * C826) +
            (C40227 + C40226) * C822 -
            (C39330 * C2573 + C39128 * C2830 + C39329 * C831 + C39127 * C1096) *
                C828 -
            (C39330 * C2581 + C39128 * C2834 + C39329 * C841 + C39127 * C1101) *
                C823) *
               C90634 * C39126) *
              C90567 * C90555)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                 C3364 +
             (C39329 * C116 + C39127 * C314 + C39330 * C839 + C39128 * C1098) *
                 C90498) *
                C90634 * C39125 +
            ((C39357 + C39356) * C3364 + (C39359 + C39358) * C90498) * C90634 *
                C39126) *
               C4653 -
           (((C41170 + C41169) * C90498 + (C41168 + C41167) * C3364) * C90634 *
                C39126 +
            ((C39330 * C3900 + C39128 * C4167 + C39329 * C1707 +
              C39127 * C1966) *
                 C90498 +
             (C39330 * C3891 + C39128 * C4161 + C39329 * C1700 +
              C39127 * C1962) *
                 C3364) *
                C90634 * C39125) *
               C4654 +
           (((C39329 * C4656 + C39127 * C4913 + C39330 * C5471 +
              C39128 * C5717) *
                 C3364 +
             (C39329 * C4663 + C39127 * C4917 + C39330 * C5474 +
              C39128 * C5720) *
                 C90498) *
                C90634 * C39125 +
            ((C44621 + C44620) * C3364 + (C44623 + C44622) * C90498) * C90634 *
                C39126) *
               C4655) *
              C90752 +
          ((((C39329 * C3891 + C39127 * C4161 + C39330 * C3896 +
              C39128 * C4166) *
                 C3364 +
             (C39329 * C3900 + C39127 * C4167 + C39330 * C3905 +
              C39128 * C4172) *
                 C90498) *
                C90634 * C39125 +
            ((C39329 * C3892 + C39127 * C4162 + C39330 * C3895 +
              C39128 * C4165) *
                 C3364 +
             (C39329 * C3901 + C39127 * C4168 + C39330 * C3904 +
              C39128 * C4171) *
                 C90498) *
                C90634 * C39126) *
               C4654 -
           (((C40223 + C40222) * C90498 + (C40221 + C40220) * C3364) * C90634 *
                C39126 +
            ((C39330 * C2577 + C39128 * C2831 + C39329 * C839 +
              C39127 * C1098) *
                 C90498 +
             (C39330 * C2570 + C39128 * C2827 + C39329 * C832 +
              C39127 * C1094) *
                 C3364) *
                C90634 * C39125) *
               C4653 -
           (((C39330 * C17656 + C39128 * C17892 + C39329 * C5473 +
              C39127 * C5719) *
                 C90498 +
             (C39330 * C17652 + C39128 * C17890 + C39329 * C5470 +
              C39127 * C5716) *
                 C3364) *
                C90634 * C39126 +
            ((C39330 * C17654 + C39128 * C17891 + C39329 * C5474 +
              C39127 * C5720) *
                 C90498 +
             (C39330 * C17651 + C39128 * C17889 + C39329 * C5471 +
              C39127 * C5717) *
                 C3364) *
                C90634 * C39125) *
               C4655) *
              C90555)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
               C3427 +
           (C39329 * C182 + C39127 * C394 + C39330 * C927 + C39128 * C1195) *
               C3360 -
           (C39330 * C2570 + C39128 * C2827 + C39329 * C832 + C39127 * C1094) *
               C3428 -
           (C39330 * C2663 + C39128 * C2921 + C39329 * C927 + C39127 * C1195) *
               C3361 +
           (C39329 * C2570 + C39127 * C2827 + C39330 * C3367 + C39128 * C3545) *
               C3429 +
           (C39329 * C2663 + C39127 * C2921 + C39330 * C3433 + C39128 * C3599) *
               C3362 -
           (C39330 * C15525 + C39128 * C15808 + C39329 * C3367 +
            C39127 * C3545) *
               C3430 -
           (C39330 * C15634 + C39128 * C15886 + C39329 * C3433 +
            C39127 * C3599) *
               C3363) *
              C90634 * C39125 +
          ((C39357 + C39356) * C3427 + (C39446 + C39447) * C3360 -
           (C40221 + C40220) * C3428 - (C40334 + C40335) * C3361 +
           (C42142 + C42141) * C3429 + (C42247 + C42248) * C3362 -
           (C39330 * C15526 + C39128 * C15809 + C39329 * C3366 +
            C39127 * C3544) *
               C3430 -
           (C39330 * C15635 + C39128 * C15887 + C39329 * C3432 +
            C39127 * C3600) *
               C3363) *
              C90634 * C39126) *
         C90498 * C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C923 +
            (C39329 * C182 + C39127 * C394 + C39330 * C927 + C39128 * C1195) *
                C90752 -
            (C39330 * C2570 + C39128 * C2827 + C39329 * C832 + C39127 * C1094) *
                C924 -
            (C39330 * C2663 + C39128 * C2921 + C39329 * C927 + C39127 * C1195) *
                C90555) *
               C90634 * C39125 +
           ((C39357 + C39356) * C923 + (C39446 + C39447) * C90752 -
            (C40221 + C40220) * C924 - (C40334 + C40335) * C90555) *
               C90634 * C39126) *
              C821 +
          (((C40220 + C40221) * C924 -
            ((C39447 + C39446) * C90752 + (C39356 + C39357) * C923) +
            (C40335 + C40334) * C90555) *
               C90634 * C39125 +
           ((C40225 + C40224) * C924 -
            ((C39448 + C39449) * C90752 + (C39361 + C39360) * C923) +
            (C40336 + C40337) * C90555) *
               C90634 * C39126) *
              C822 +
          (((C39360 + C39361) * C923 + (C39449 + C39448) * C90752 -
            (C40224 + C40225) * C924 - (C40337 + C40336) * C90555) *
               C90634 * C39125 +
           ((C39365 + C39364) * C923 + (C39450 + C39451) * C90752 -
            (C39330 * C2573 + C39128 * C2830 + C39329 * C831 + C39127 * C1096) *
                C924 -
            (C39330 * C2666 + C39128 * C2924 + C39329 * C928 + C39127 * C1198) *
                C90555) *
               C90634 * C39126) *
              C823) *
         C90567) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C923 +
            (C39329 * C182 + C39127 * C394 + C39330 * C927 + C39128 * C1195) *
                C90752 -
            (C39330 * C2570 + C39128 * C2827 + C39329 * C832 + C39127 * C1094) *
                C924 -
            (C39330 * C2663 + C39128 * C2921 + C39329 * C927 + C39127 * C1195) *
                C90555) *
               C90634 * C39125 +
           ((C39357 + C39356) * C923 + (C39446 + C39447) * C90752 -
            (C40221 + C40220) * C924 - (C40334 + C40335) * C90555) *
               C90634 * C39126) *
              C90498 * C4653 +
          (((C39329 * C3891 + C39127 * C4161 + C39330 * C3896 +
             C39128 * C4166) *
                C924 -
            ((C39330 * C3989 + C39128 * C4247 + C39329 * C1794 +
              C39127 * C2066) *
                 C90752 +
             (C39330 * C3891 + C39128 * C4161 + C39329 * C1700 +
              C39127 * C1962) *
                 C923) +
            (C39329 * C3989 + C39127 * C4247 + C39330 * C3994 +
             C39128 * C4248) *
                C90555) *
               C90634 * C39125 +
           ((C39329 * C3892 + C39127 * C4162 + C39330 * C3895 +
             C39128 * C4165) *
                C924 -
            ((C41282 + C41281) * C90752 + (C41168 + C41167) * C923) +
            (C39329 * C3990 + C39127 * C4249 + C39330 * C3993 +
             C39128 * C4250) *
                C90555) *
               C90634 * C39126) *
              C90498 * C4654 +
          (((C39329 * C4656 + C39127 * C4913 + C39330 * C5471 +
             C39128 * C5717) *
                C923 +
            (C39329 * C4746 + C39127 * C5007 + C39330 * C5557 +
             C39128 * C5795) *
                C90752 -
            (C39330 * C17651 + C39128 * C17889 + C39329 * C5471 +
             C39127 * C5717) *
                C924 -
            (C39330 * C17733 + C39128 * C17967 + C39329 * C5557 +
             C39127 * C5795) *
                C90555) *
               C90634 * C39125 +
           ((C44621 + C44620) * C923 + (C44726 + C44727) * C90752 -
            (C39330 * C17652 + C39128 * C17890 + C39329 * C5470 +
             C39127 * C5716) *
                C924 -
            (C39330 * C17734 + C39128 * C17968 + C39329 * C5556 +
             C39127 * C5796) *
                C90555) *
               C90634 * C39126) *
              C90498 * C4655)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C244 +
            (C39329 * C245 + C39127 * C474 + C39330 * C1011 + C39128 * C1301) *
                C90567) *
               C90634 * C39125 +
           ((C39357 + C39356) * C244 + (C39530 + C39531) * C90567) * C90634 *
               C39126) *
              C3360 -
          (((C40444 + C40445) * C90567 + (C40221 + C40220) * C244) * C90634 *
               C39126 +
           ((C39330 * C2745 + C39128 * C3017 + C39329 * C1011 +
             C39127 * C1301) *
                C90567 +
            (C39330 * C2570 + C39128 * C2827 + C39329 * C832 + C39127 * C1094) *
                C244) *
               C90634 * C39125) *
              C3361 +
          (((C39329 * C2570 + C39127 * C2827 + C39330 * C3367 +
             C39128 * C3545) *
                C244 +
            (C39329 * C2745 + C39127 * C3017 + C39330 * C3489 +
             C39128 * C3654) *
                C90567) *
               C90634 * C39125 +
           ((C42142 + C42141) * C244 + (C42351 + C42352) * C90567) * C90634 *
               C39126) *
              C3362 -
          (((C39330 * C15719 + C39128 * C15963 + C39329 * C3488 +
             C39127 * C3653) *
                C90567 +
            (C39330 * C15526 + C39128 * C15809 + C39329 * C3366 +
             C39127 * C3544) *
                C244) *
               C90634 * C39126 +
           ((C39330 * C15718 + C39128 * C15962 + C39329 * C3489 +
             C39127 * C3654) *
                C90567 +
            (C39330 * C15525 + C39128 * C15808 + C39329 * C3367 +
             C39127 * C3545) *
                C244) *
               C90634 * C39125) *
              C3363) *
         C90498) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                 C244 +
             (C39329 * C245 + C39127 * C474 + C39330 * C1011 + C39128 * C1301) *
                 C90567) *
                C90634 * C39125 +
            ((C39357 + C39356) * C244 + (C39530 + C39531) * C90567) * C90634 *
                C39126) *
               C90752 -
           (((C40444 + C40445) * C90567 + (C40221 + C40220) * C244) * C90634 *
                C39126 +
            ((C39330 * C2745 + C39128 * C3017 + C39329 * C1011 +
              C39127 * C1301) *
                 C90567 +
             (C39330 * C2570 + C39128 * C2827 + C39329 * C832 +
              C39127 * C1094) *
                 C244) *
                C90634 * C39125) *
               C90555) *
              C821 +
          ((((C40220 + C40221) * C244 + (C40445 + C40444) * C90567) * C90634 *
                C39125 +
            ((C40225 + C40224) * C244 + (C40446 + C40447) * C90567) * C90634 *
                C39126) *
               C90555 -
           (((C39532 + C39533) * C90567 + (C39361 + C39360) * C244) * C90634 *
                C39126 +
            ((C39531 + C39530) * C90567 + (C39356 + C39357) * C244) * C90634 *
                C39125) *
               C90752) *
              C822 +
          ((((C39360 + C39361) * C244 + (C39533 + C39532) * C90567) * C90634 *
                C39125 +
            ((C39365 + C39364) * C244 + (C39534 + C39535) * C90567) * C90634 *
                C39126) *
               C90752 -
           (((C39330 * C2748 + C39128 * C3020 + C39329 * C1012 +
              C39127 * C1302) *
                 C90567 +
             (C39330 * C2573 + C39128 * C2830 + C39329 * C831 +
              C39127 * C1096) *
                 C244) *
                C90634 * C39126 +
            ((C40447 + C40446) * C90567 + (C40224 + C40225) * C244) * C90634 *
                C39125) *
               C90555) *
              C823)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C4828 +
            (C39329 * C245 + C39127 * C474 + C39330 * C1011 + C39128 * C1301) *
                C4653 -
            (C39330 * C3891 + C39128 * C4161 + C39329 * C1700 +
             C39127 * C1962) *
                C4829 -
            (C39330 * C4075 + C39128 * C4327 + C39329 * C1879 +
             C39127 * C2159) *
                C4654 +
            (C39329 * C4656 + C39127 * C4913 + C39330 * C5471 +
             C39128 * C5717) *
                C4830 +
            (C39329 * C4831 + C39127 * C5095 + C39330 * C5637 +
             C39128 * C5872) *
                C4655) *
               C90634 * C39125 +
           ((C39357 + C39356) * C4828 + (C39530 + C39531) * C4653 -
            (C41168 + C41167) * C4829 - (C41391 + C41392) * C4654 +
            (C44621 + C44620) * C4830 + (C44830 + C44831) * C4655) *
               C90634 * C39126) *
              C90752 +
          (((C39329 * C3891 + C39127 * C4161 + C39330 * C3896 +
             C39128 * C4166) *
                C4829 -
            ((C39330 * C2745 + C39128 * C3017 + C39329 * C1011 +
              C39127 * C1301) *
                 C4653 +
             (C39330 * C2570 + C39128 * C2827 + C39329 * C832 +
              C39127 * C1094) *
                 C4828) +
            (C39329 * C4075 + C39127 * C4327 + C39330 * C4080 +
             C39128 * C4330) *
                C4654 -
            (C39330 * C17651 + C39128 * C17889 + C39329 * C5471 +
             C39127 * C5717) *
                C4830 -
            (C39330 * C17811 + C39128 * C18043 + C39329 * C5637 +
             C39127 * C5872) *
                C4655) *
               C90634 * C39125 +
           ((C39329 * C3892 + C39127 * C4162 + C39330 * C3895 +
             C39128 * C4165) *
                C4829 -
            ((C40444 + C40445) * C4653 + (C40221 + C40220) * C4828) +
            (C39329 * C4076 + C39127 * C4328 + C39330 * C4079 +
             C39128 * C4331) *
                C4654 -
            (C39330 * C17652 + C39128 * C17890 + C39329 * C5470 +
             C39127 * C5716) *
                C4830 -
            (C39330 * C17812 + C39128 * C18044 + C39329 * C5636 +
             C39127 * C5873) *
                C4655) *
               C90634 * C39126) *
              C90555) *
         C90498) /
            (p * q * std::sqrt(p + q));
    d2eezx[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C3364 +
             (C554 * C116 + C90634 * C561) * C90498) *
                C39125 +
            (C584 * C3364 + C585 * C90498) * C39126) *
               C39127 +
           ((C16632 + C16633) * C39125 + (C43148 + C43149) * C39126) * C39128) *
              C90567 * C3360 -
          (((C43150 + C43151) * C39126 + (C16635 + C16634) * C39125) * C39128 +
           ((C43149 + C43148) * C39126 + (C16633 + C16632) * C39125) * C39127) *
              C90567 * C3361 +
          ((C16642 * C39125 + (C43151 + C43150) * C39126) * C39127 +
           ((C16637 + C16636) * C39125 + (C43152 + C43153) * C39126) * C39128) *
              C90567 * C3362 -
          ((((C554 * C15530 + C90634 * C16041) * C90498 +
             (C554 * C15526 + C90634 * C16039) * C3364) *
                C39126 +
            (C16649 + C16648) * C39125) *
               C39128 +
           ((C43153 + C43152) * C39126 + C16643 * C39125) * C39127) *
              C90567 * C3363)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C826 +
             (C554 * C116 + C90634 * C561) * C821 - C584 * C827 - C585 * C822 +
             C586 * C828 + C587 * C823) *
                C39125 +
            (C584 * C826 + C585 * C821 - C586 * C827 - C587 * C822 +
             C588 * C828 + C589 * C823) *
                C39126) *
               C39127 +
           ((C14618 + C14619 - C14602 - C14603 + C14604 + C14605) * C39125 +
            (C40546 + C40547 - C40548 - C40549 + C40550 + C40551) * C39126) *
               C39128) *
              C90567 * C90752 +
          (((C14602 - (C14619 + C14618) + C14603 - C14604 - C14605) * C39125 +
            (C40548 - (C40547 + C40546) + C40549 - C40550 - C40551) * C39126) *
               C39127 +
           ((C14610 - (C14621 + C14620) + C14611 - C14612 - C14613) * C39125 +
            (C3124 * C827 - (C3123 * C821 + C3122 * C826) + C3125 * C822 -
             (C554 * C2573 + C90634 * C3108) * C828 -
             (C554 * C2581 + C90634 * C3112) * C823) *
                C39126) *
               C39128) *
              C90567 * C90555)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C90634 * C555) * C3364 +
              (C554 * C116 + C90634 * C561) * C90498) *
                 C39125 +
             (C584 * C3364 + C585 * C90498) * C39126) *
                C39127 +
            ((C16632 + C16633) * C39125 + (C43148 + C43149) * C39126) *
                C39128) *
               C4653 -
           (((C44020 + C44021) * C39126 + (C17386 + C17387) * C39125) * C39128 +
            ((C2287 * C90498 + C2286 * C3364) * C39126 +
             ((C554 * C1707 + C90634 * C2268) * C90498 +
              (C554 * C1700 + C90634 * C2264) * C3364) *
                 C39125) *
                C39127) *
               C4654 +
           ((((C554 * C4656 + C90634 * C5191) * C3364 +
              (C554 * C4663 + C90634 * C5195) * C90498) *
                 C39125 +
             (C5208 * C3364 + C5209 * C90498) * C39126) *
                C39127 +
            ((C18860 + C18861) * C39125 + (C45856 + C45857) * C39126) *
                C39128) *
               C4655) *
              C90752 +
          ((((C17387 + C17386) * C39125 + (C44021 + C44020) * C39126) * C39127 +
            ((C17385 + C17384) * C39125 + (C44022 + C44023) * C39126) *
                C39128) *
               C4654 -
           (((C43150 + C43151) * C39126 + (C16635 + C16634) * C39125) * C39128 +
            ((C43149 + C43148) * C39126 + (C16633 + C16632) * C39125) *
                C39127) *
               C4653 -
           ((((C554 * C17656 + C90634 * C18122) * C90498 +
              (C554 * C17652 + C90634 * C18120) * C3364) *
                 C39126 +
             (C18863 + C18862) * C39125) *
                C39128 +
            ((C45857 + C45856) * C39126 + (C18861 + C18860) * C39125) *
                C39127) *
               C4655) *
              C90555)) /
            (p * q * std::sqrt(p + q));
    d2eezy[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C3427 +
            (C554 * C182 + C90634 * C641) * C3360 - C14614 * C3428 -
            C14700 * C3361 + C14616 * C3429 + C14701 * C3362 - C16062 * C3430 -
            C16151 * C3363) *
               C39125 +
           (C584 * C3427 + C660 * C3360 - C1418 * C3428 - C1518 * C3361 +
            C3122 * C3429 + C3218 * C3362 - C16060 * C3430 - C16152 * C3363) *
               C39126) *
              C39127 +
          ((C14614 * C3427 + C14700 * C3360 - C14616 * C3428 - C14701 * C3361 +
            C16062 * C3429 + C16151 * C3362 - C16644 * C3430 - C16703 * C3363) *
               C39125 +
           (C1418 * C3427 + C1518 * C3360 - C3122 * C3428 - C3218 * C3361 +
            C16060 * C3429 + C16152 * C3362 -
            (C554 * C15526 + C90634 * C16039) * C3430 -
            (C554 * C15635 + C90634 * C16145) * C3363) *
               C39126) *
              C39128) *
         C90498 * C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C923 +
             (C554 * C182 + C90634 * C641) * C90752 - C14614 * C924 -
             C14700 * C90555) *
                C39125 +
            (C1503 + C1504 - C1505 - C1522) * C39126) *
               C39127 +
           ((C14614 * C923 + C14700 * C90752 - C14616 * C924 -
             C14701 * C90555) *
                C39125 +
            (C40650 + C40651 - C40652 - C40653) * C39126) *
               C39128) *
              C821 +
          (((C1505 - (C1504 + C1503) + C1522) * C39125 +
            (C1510 - (C1509 + C1508) + C1524) * C39126) *
               C39127 +
           ((C40652 - (C40651 + C40650) + C40653) * C39125 +
            (C40654 - (C40655 + C40656) + C40657) * C39126) *
               C39128) *
              C822 +
          ((C1526 * C39125 + (C1515 + C1514 - C1513 - C1525) * C39126) *
               C39127 +
           ((C40656 + C40655 - C40654 - C40657) * C39125 +
            (C1422 * C923 + C1521 * C90752 -
             (C554 * C2573 + C90634 * C3108) * C924 -
             (C554 * C2666 + C90634 * C3202) * C90555) *
                C39126) *
               C39128) *
              C823) *
         C90567) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C923 +
             (C554 * C182 + C90634 * C641) * C90752 - C14614 * C924 -
             C14700 * C90555) *
                C39125 +
            (C1503 + C1504 - C1505 - C1522) * C39126) *
               C39127 +
           ((C14614 * C923 + C14700 * C90752 - C14616 * C924 -
             C14701 * C90555) *
                C39125 +
            (C40650 + C40651 - C40652 - C40653) * C39126) *
               C39128) *
              C90498 * C4653 +
          (((C17381 * C924 -
             ((C554 * C1794 + C90634 * C2368) * C90752 +
              (C554 * C1700 + C90634 * C2264) * C923) +
             C17474 * C90555) *
                C39125 +
            (C10502 - (C10503 + C10504) + C10505) * C39126) *
               C39127 +
           ((C17379 * C924 - (C17474 * C90752 + C17381 * C923) +
             C17475 * C90555) *
                C39125 +
            (C21657 * C924 - (C8884 * C90752 + C8771 * C923) +
             C21762 * C90555) *
                C39126) *
               C39128) *
              C90498 * C4654 +
          ((((C554 * C4656 + C90634 * C5191) * C923 +
             (C554 * C4746 + C90634 * C5285) * C90752 - C18856 * C924 -
             C18943 * C90555) *
                C39125 +
            (C5208 * C923 + C5296 * C90752 - C44934 * C924 - C45037 * C90555) *
                C39126) *
               C39127 +
           ((C18856 * C923 + C18943 * C90752 - C18858 * C924 -
             C18944 * C90555) *
                C39125 +
            (C44934 * C923 + C45037 * C90752 -
             (C554 * C17652 + C90634 * C18120) * C924 -
             (C554 * C17734 + C90634 * C18198) * C90555) *
                C39126) *
               C39128) *
              C90498 * C4655)) /
            (p * q * std::sqrt(p + q));
    d2eezz[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C244 +
             (C554 * C245 + C90634 * C719) * C90567) *
                C39125 +
            (C726 + C742) * C39126) *
               C39127 +
           ((C14776 + C14784) * C39125 + C40756 * C39126) * C39128) *
              C3360 -
          ((C16236 * C39126 + (C14785 + C14779) * C39125) * C39128 +
           (C40757 * C39126 + (C14784 + C14776) * C39125) * C39127) *
              C3361 +
          ((C16229 * C39125 + C42661 * C39126) * C39127 +
           ((C16232 + C16241) * C39125 + (C16233 + C16242) * C39126) * C39128) *
              C3362 -
          ((((C554 * C15719 + C90634 * C16227) * C90567 +
             (C554 * C15526 + C90634 * C16039) * C244) *
                C39126 +
            (C16761 + C16756) * C39125) *
               C39128 +
           ((C16242 + C16233) * C39126 + C16755 * C39125) * C39127) *
              C3363) *
         C90498) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C90634 * C555) * C244 +
              (C554 * C245 + C90634 * C719) * C90567) *
                 C39125 +
             (C726 + C742) * C39126) *
                C39127 +
            ((C14776 + C14784) * C39125 + C40756 * C39126) * C39128) *
               C90752 -
           ((C16236 * C39126 + (C14785 + C14779) * C39125) * C39128 +
            (C40757 * C39126 + (C14784 + C14776) * C39125) * C39127) *
               C90555) *
              C821 +
          (((C40756 * C39125 + C40758 * C39126) * C39127 +
            ((C3300 + C3308) * C39125 + (C3303 + C3309) * C39126) * C39128) *
               C90555 -
           ((C1621 * C39126 + C40757 * C39125) * C39128 +
            ((C743 + C729) * C39126 + (C742 + C726) * C39125) * C39127) *
               C90752) *
              C822 +
          (((C746 * C39125 + (C734 + C744) * C39126) * C39127 +
            (C40758 * C39125 + (C1612 + C1620) * C39126) * C39128) *
               C90752 -
           ((((C554 * C2748 + C90634 * C3298) * C90567 +
              (C554 * C2573 + C90634 * C3108) * C244) *
                 C39126 +
             (C3309 + C3303) * C39125) *
                C39128 +
            ((C1620 + C1612) * C39126 + C1621 * C39125) * C39127) *
               C90555) *
              C823)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C4828 +
             (C554 * C245 + C90634 * C719) * C4653 -
             (C554 * C1700 + C90634 * C2264) * C4829 -
             (C554 * C1879 + C90634 * C2460) * C4654 +
             (C554 * C4656 + C90634 * C5191) * C4830 +
             (C554 * C4831 + C90634 * C5373) * C4655) *
                C39125 +
            (C5378 + C5379 - C5380 - C5381 + C5382 + C5394) * C39126) *
               C39127 +
           ((C19020 + C19021 - C19022 - C19023 + C19024 + C19036) * C39125 +
            (C45137 + C45138 - C45139 - C45140 + C45141 + C45145) * C39126) *
               C39128) *
              C90752 +
          (((C19022 - (C19021 + C19020) + C19023 - C19024 - C19036) * C39125 +
            (C45139 - (C45138 + C45137) + C45140 - C45141 - C45145) * C39126) *
               C39127 +
           ((C19029 - (C19028 + C19027) + C19030 - C19031 - C19037) * C39125 +
            (C21657 * C4829 - (C3306 * C4653 + C3122 * C4828) + C21867 * C4654 -
             (C554 * C17652 + C90634 * C18120) * C4830 -
             (C554 * C17812 + C90634 * C18274) * C4655) *
                C39126) *
               C39128) *
              C90555) *
         C90498) /
            (p * q * std::sqrt(p + q));
    d2eexx[8] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                 C3364 +
             (C39129 * C116 + C39125 * C125 + C39130 * C117 + C39126 * C126) *
                 C90498) *
                C39127 +
            ((C39862 + C39863) * C3364 + (C39864 + C39865) * C90498) * C39128) *
               C90634 * C90753 -
           (((C43400 + C43401) * C90498 + (C43402 + C43403) * C3364) * C39128 +
            ((C39130 * C1706 + C39126 * C1713 + C39129 * C1707 +
              C39125 * C1714) *
                 C90498 +
             (C39130 * C1697 + C39126 * C1702 + C39129 * C1700 +
              C39125 * C1708) *
                 C3364) *
                C39127) *
               C90634 * C90579) *
              C2565 +
          ((((C43403 + C43402) * C3364 + (C43401 + C43400) * C90498) * C39127 +
            ((C43404 + C43405) * C3364 + (C43406 + C43407) * C90498) * C39128) *
               C90634 * C90579 -
           (((C41809 + C41810) * C90498 + (C41811 + C41812) * C3364) * C39128 +
            ((C39865 + C39864) * C90498 + (C39863 + C39862) * C3364) * C39127) *
               C90634 * C90753) *
              C2566 +
          ((((C41812 + C41811) * C3364 + (C41810 + C41809) * C90498) * C39127 +
            ((C42736 + C42737) * C3364 + (C42738 + C42739) * C90498) * C39128) *
               C90634 * C90753 -
           (((C39130 * C21006 + C39126 * C21007 + C39129 * C16838 +
              C39125 * C16841) *
                 C90498 +
             (C39130 * C21004 + C39126 * C21005 + C39129 * C16835 +
              C39125 * C16837) *
                 C3364) *
                C39128 +
            ((C43407 + C43406) * C90498 + (C43405 + C43404) * C3364) * C39127) *
               C90634 * C90579) *
              C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C826 +
            (C39129 * C116 + C39125 * C125 + C39130 * C117 + C39126 * C126) *
                C821 -
            (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                C827 -
            (C39130 * C118 + C39126 * C127 + C39129 * C117 + C39125 * C126) *
                C822 +
            (C39129 * C109 + C39125 * C115 + C39130 * C110 + C39126 * C119) *
                C828 +
            (C39129 * C118 + C39125 * C127 + C39130 * C120 + C39126 * C128) *
                C823) *
               C39127 +
           ((C39862 + C39863) * C826 + (C39864 + C39865) * C821 -
            (C39866 + C39867) * C827 - (C39868 + C39869) * C822 +
            (C39870 + C39871) * C828 + (C39872 + C39873) * C823) *
               C39128) *
              C90634 * C90753 +
          (((C39129 * C1697 + C39125 * C1702 + C39130 * C1698 +
             C39126 * C1703) *
                C827 -
            ((C39130 * C1706 + C39126 * C1713 + C39129 * C1707 +
              C39125 * C1714) *
                 C821 +
             (C39130 * C1697 + C39126 * C1702 + C39129 * C1700 +
              C39125 * C1708) *
                 C826) +
            (C39129 * C1706 + C39125 * C1713 + C39130 * C1705 +
             C39126 * C1712) *
                C822 -
            (C39130 * C1699 + C39126 * C1704 + C39129 * C1698 +
             C39125 * C1703) *
                C828 -
            (C39130 * C1709 + C39126 * C1715 + C39129 * C1705 +
             C39125 * C1712) *
                C823) *
               C39127 +
           ((C39129 * C3892 + C39125 * C3898 + C39130 * C3893 +
             C39126 * C3899) *
                C827 -
            ((C39130 * C3901 + C39126 * C3910 + C39129 * C3900 +
              C39125 * C3909) *
                 C821 +
             (C39130 * C3892 + C39126 * C3898 + C39129 * C3891 +
              C39125 * C3897) *
                 C826) +
            (C39129 * C3901 + C39125 * C3910 + C39130 * C3902 +
             C39126 * C3911) *
                C822 -
            (C39130 * C8120 + C39126 * C8121 + C39129 * C3893 +
             C39125 * C3899) *
                C828 -
            (C39130 * C8122 + C39126 * C8123 + C39129 * C3902 +
             C39125 * C3911) *
                C823) *
               C39128) *
              C90634 * C90579) *
         C90541) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C3364 +
            (C39129 * C116 + C39125 * C125 + C39130 * C117 + C39126 * C126) *
                C90498) *
               C39127 +
           ((C39862 + C39863) * C3364 + (C39864 + C39865) * C90498) * C39128) *
              C90634 * C6159 -
          (((C43400 + C43401) * C90498 + (C43402 + C43403) * C3364) * C39128 +
           ((C39130 * C1706 + C39126 * C1713 + C39129 * C1707 +
             C39125 * C1714) *
                C90498 +
            (C39130 * C1697 + C39126 * C1702 + C39129 * C1700 +
             C39125 * C1708) *
                C3364) *
               C39127) *
              C90634 * C6160 +
          (((C39129 * C4656 + C39125 * C4660 + C39130 * C4657 +
             C39126 * C4661) *
                C3364 +
            (C39129 * C4663 + C39125 * C4668 + C39130 * C4664 +
             C39126 * C4669) *
                C90498) *
               C39127 +
           ((C45252 + C45253) * C3364 + (C45254 + C45255) * C90498) * C39128) *
              C90634 * C6161 -
          (((C39130 * C33651 + C39126 * C33652 + C39129 * C19091 +
             C39125 * C19094) *
                C90498 +
            (C39130 * C33649 + C39126 * C33650 + C39129 * C19088 +
             C39125 * C19092) *
                C3364) *
               C39128 +
           ((C39130 * C6167 + C39126 * C6173 + C39129 * C6168 +
             C39125 * C6174) *
                C90498 +
            (C39130 * C6164 + C39126 * C6170 + C39129 * C6165 +
             C39125 * C6171) *
                C3364) *
               C39127) *
              C90634 * C6162) *
         C90541) /
            (p * q * std::sqrt(p + q));
    d2eexy[8] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C2660 +
            (C39129 * C182 + C39125 * C188 + C39130 * C183 + C39126 * C189) *
                C2565 -
            (C39863 + C39862) * C2661 - (C39984 + C39985) * C2566 +
            (C41812 + C41811) * C2662 + (C41921 + C41922) * C2567) *
               C39127 +
           ((C39862 + C39863) * C2660 + (C39985 + C39984) * C2565 -
            (C41811 + C41812) * C2661 - (C41922 + C41921) * C2566 +
            (C42736 + C42737) * C2662 + (C42811 + C42810) * C2567) *
               C39128) *
              C90634 * C90498 * C90753 +
          (((C43403 + C43402) * C2661 -
            ((C39130 * C1791 + C39126 * C1796 + C39129 * C1794 +
              C39125 * C1799) *
                 C2565 +
             (C39130 * C1697 + C39126 * C1702 + C39129 * C1700 +
              C39125 * C1708) *
                 C2660) +
            (C43514 + C43515) * C2566 - (C43405 + C43404) * C2662 -
            (C43516 + C43517) * C2567) *
               C39127 +
           ((C43404 + C43405) * C2661 -
            ((C43515 + C43514) * C2565 + (C43402 + C43403) * C2660) +
            (C43517 + C43516) * C2566 -
            (C39130 * C21004 + C39126 * C21005 + C39129 * C16835 +
             C39125 * C16837) *
                C2662 -
            (C39130 * C21126 + C39126 * C21127 + C39129 * C16942 +
             C39125 * C16944) *
                C2567) *
               C39128) *
              C90634 * C90498 * C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                 C181 +
             (C39129 * C182 + C39125 * C188 + C39130 * C183 + C39126 * C189) *
                 C90541) *
                C39127 +
            ((C39862 + C39863) * C181 + (C39985 + C39984) * C90541) * C39128) *
               C90634 * C821 -
           (((C39987 + C39986) * C90541 + (C39866 + C39867) * C181) * C39128 +
            ((C39130 * C184 + C39126 * C190 + C39129 * C183 + C39125 * C189) *
                 C90541 +
             (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                 C181) *
                C39127) *
               C90634 * C822 +
           (((C39129 * C109 + C39125 * C115 + C39130 * C110 + C39126 * C119) *
                 C181 +
             (C39129 * C184 + C39125 * C190 + C39130 * C185 + C39126 * C191) *
                 C90541) *
                C39127 +
            ((C39870 + C39871) * C181 + (C39989 + C39988) * C90541) * C39128) *
               C90634 * C823) *
              C90753 +
          ((((C39129 * C1697 + C39125 * C1702 + C39130 * C1698 +
              C39126 * C1703) *
                 C181 +
             (C39129 * C1791 + C39125 * C1796 + C39130 * C1792 +
              C39126 * C1797) *
                 C90541) *
                C39127 +
            ((C39129 * C3892 + C39125 * C3898 + C39130 * C3893 +
              C39126 * C3899) *
                 C181 +
             (C39129 * C3990 + C39125 * C3996 + C39130 * C3991 +
              C39126 * C3997) *
                 C90541) *
                C39128) *
               C90634 * C822 -
           (((C39130 * C3990 + C39126 * C3996 + C39129 * C3989 +
              C39125 * C3995) *
                 C90541 +
             (C39130 * C3892 + C39126 * C3898 + C39129 * C3891 +
              C39125 * C3897) *
                 C181) *
                C39128 +
            ((C39130 * C1791 + C39126 * C1796 + C39129 * C1794 +
              C39125 * C1799) *
                 C90541 +
             (C39130 * C1697 + C39126 * C1702 + C39129 * C1700 +
              C39125 * C1708) *
                 C181) *
                C39127) *
               C90634 * C821 -
           (((C39130 * C8222 + C39126 * C8223 + C39129 * C3991 +
              C39125 * C3997) *
                 C90541 +
             (C39130 * C8120 + C39126 * C8121 + C39129 * C3893 +
              C39125 * C3899) *
                 C181) *
                C39128 +
            ((C39130 * C1793 + C39126 * C1798 + C39129 * C1792 +
              C39125 * C1797) *
                 C90541 +
             (C39130 * C1699 + C39126 * C1704 + C39129 * C1698 +
              C39125 * C1703) *
                 C181) *
                C39127) *
               C90634 * C823) *
              C90579)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C181 +
            (C39129 * C182 + C39125 * C188 + C39130 * C183 + C39126 * C189) *
                C90541) *
               C39127 +
           ((C39862 + C39863) * C181 + (C39985 + C39984) * C90541) * C39128) *
              C90634 * C90498 * C6159 -
          (((C43515 + C43514) * C90541 + (C43402 + C43403) * C181) * C39128 +
           ((C39130 * C1791 + C39126 * C1796 + C39129 * C1794 +
             C39125 * C1799) *
                C90541 +
            (C39130 * C1697 + C39126 * C1702 + C39129 * C1700 +
             C39125 * C1708) *
                C181) *
               C39127) *
              C90634 * C90498 * C6160 +
          (((C39129 * C4656 + C39125 * C4660 + C39130 * C4657 +
             C39126 * C4661) *
                C181 +
            (C39129 * C4746 + C39125 * C4750 + C39130 * C4747 +
             C39126 * C4751) *
                C90541) *
               C39127 +
           ((C45252 + C45253) * C181 + (C45359 + C45358) * C90541) * C39128) *
              C90634 * C90498 * C6161 -
          (((C39130 * C33769 + C39126 * C33770 + C39129 * C19146 +
             C39125 * C19148) *
                C90541 +
            (C39130 * C33649 + C39126 * C33650 + C39129 * C19088 +
             C39125 * C19092) *
                C181) *
               C39128 +
           ((C39130 * C6226 + C39126 * C6229 + C39129 * C6227 +
             C39125 * C6230) *
                C90541 +
            (C39130 * C6164 + C39126 * C6170 + C39129 * C6165 +
             C39125 * C6171) *
                C181) *
               C39127) *
              C90634 * C90498 * C6162)) /
            (p * q * std::sqrt(p + q));
    d2eexz[8] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C1875 +
            (C39129 * C245 + C39125 * C251 + C39130 * C246 + C39126 * C252) *
                C90753 -
            (C39130 * C1697 + C39126 * C1702 + C39129 * C1700 +
             C39125 * C1708) *
                C1876 -
            (C39130 * C1878 + C39126 * C1883 + C39129 * C1879 +
             C39125 * C1884) *
                C90579) *
               C39127 +
           ((C39862 + C39863) * C1875 + (C40100 + C40101) * C90753 -
            (C43402 + C43403) * C1876 - (C43624 + C43625) * C90579) *
               C39128) *
              C90634 * C2565 +
          (((C43403 + C43402) * C1876 -
            ((C40101 + C40100) * C90753 + (C39863 + C39862) * C1875) +
            (C43625 + C43624) * C90579) *
               C39127 +
           ((C43404 + C43405) * C1876 -
            ((C42031 + C42032) * C90753 + (C41811 + C41812) * C1875) +
            (C43626 + C43627) * C90579) *
               C39128) *
              C90634 * C2566 +
          (((C41812 + C41811) * C1875 + (C42032 + C42031) * C90753 -
            (C43405 + C43404) * C1876 - (C43627 + C43626) * C90579) *
               C39127 +
           ((C42736 + C42737) * C1875 + (C42882 + C42883) * C90753 -
            (C39130 * C21004 + C39126 * C21005 + C39129 * C16835 +
             C39125 * C16837) *
                C1876 -
            (C39130 * C21232 + C39126 * C21233 + C39129 * C17029 +
             C39125 * C17031) *
                C90579) *
               C39128) *
              C90634 * C2567) *
         C90498) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C1875 +
            (C39129 * C245 + C39125 * C251 + C39130 * C246 + C39126 * C252) *
                C90753 -
            (C39130 * C1697 + C39126 * C1702 + C39129 * C1700 +
             C39125 * C1708) *
                C1876 -
            (C39130 * C1878 + C39126 * C1883 + C39129 * C1879 +
             C39125 * C1884) *
                C90579) *
               C39127 +
           ((C39862 + C39863) * C1875 + (C40100 + C40101) * C90753 -
            (C39130 * C3892 + C39126 * C3898 + C39129 * C3891 +
             C39125 * C3897) *
                C1876 -
            (C39130 * C4076 + C39126 * C4082 + C39129 * C4075 +
             C39125 * C4081) *
                C90579) *
               C39128) *
              C90634 * C90541 * C821 +
          (((C39129 * C1697 + C39125 * C1702 + C39130 * C1698 +
             C39126 * C1703) *
                C1876 -
            ((C39130 * C247 + C39126 * C253 + C39129 * C246 + C39125 * C252) *
                 C90753 +
             (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                 C1875) +
            (C39129 * C1878 + C39125 * C1883 + C39130 * C1877 +
             C39126 * C1882) *
                C90579) *
               C39127 +
           ((C39129 * C3892 + C39125 * C3898 + C39130 * C3893 +
             C39126 * C3899) *
                C1876 -
            ((C40103 + C40102) * C90753 + (C39866 + C39867) * C1875) +
            (C39129 * C4076 + C39125 * C4082 + C39130 * C4077 +
             C39126 * C4083) *
                C90579) *
               C39128) *
              C90634 * C90541 * C822 +
          (((C39129 * C109 + C39125 * C115 + C39130 * C110 + C39126 * C119) *
                C1875 +
            (C39129 * C247 + C39125 * C253 + C39130 * C248 + C39126 * C254) *
                C90753 -
            (C39130 * C1699 + C39126 * C1704 + C39129 * C1698 +
             C39125 * C1703) *
                C1876 -
            (C39130 * C1880 + C39126 * C1885 + C39129 * C1877 +
             C39125 * C1882) *
                C90579) *
               C39127 +
           ((C39870 + C39871) * C1875 + (C40104 + C40105) * C90753 -
            (C39130 * C8120 + C39126 * C8121 + C39129 * C3893 +
             C39125 * C3899) *
                C1876 -
            (C39130 * C8322 + C39126 * C8323 + C39129 * C4077 +
             C39125 * C4083) *
                C90579) *
               C39128) *
              C90634 * C90541 * C823)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
               C6281 +
           (C39129 * C245 + C39125 * C251 + C39130 * C246 + C39126 * C252) *
               C6159 -
           (C39130 * C1697 + C39126 * C1702 + C39129 * C1700 + C39125 * C1708) *
               C6282 -
           (C39130 * C1878 + C39126 * C1883 + C39129 * C1879 + C39125 * C1884) *
               C6160 +
           (C39129 * C4656 + C39125 * C4660 + C39130 * C4657 + C39126 * C4661) *
               C6283 +
           (C39129 * C4831 + C39125 * C4835 + C39130 * C4832 + C39126 * C4836) *
               C6161 -
           (C39130 * C6164 + C39126 * C6170 + C39129 * C6165 + C39125 * C6171) *
               C6284 -
           (C39130 * C6286 + C39126 * C6289 + C39129 * C6287 + C39125 * C6290) *
               C6162) *
              C39127 +
          ((C39862 + C39863) * C6281 + (C40100 + C40101) * C6159 -
           (C43402 + C43403) * C6282 - (C43624 + C43625) * C6160 +
           (C45252 + C45253) * C6283 + (C45462 + C45463) * C6161 -
           (C39130 * C33649 + C39126 * C33650 + C39129 * C19088 +
            C39125 * C19092) *
               C6284 -
           (C39130 * C33888 + C39126 * C33889 + C39129 * C19199 +
            C39125 * C19201) *
               C6162) *
              C39128) *
         C90634 * C90541 * C90498) /
            (p * q * std::sqrt(p + q));
    d2eeyx[8] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                 C3364 +
             (C39329 * C116 + C39127 * C314 + C39330 * C839 + C39128 * C1098) *
                 C90498) *
                C90634 * C39125 +
            ((C39357 + C39356) * C3364 + (C39359 + C39358) * C90498) * C90634 *
                C39126) *
               C90753 -
           (((C41170 + C41169) * C90498 + (C41168 + C41167) * C3364) * C90634 *
                C39126 +
            ((C39330 * C3900 + C39128 * C4167 + C39329 * C1707 +
              C39127 * C1966) *
                 C90498 +
             (C39330 * C3891 + C39128 * C4161 + C39329 * C1700 +
              C39127 * C1962) *
                 C3364) *
                C90634 * C39125) *
               C90579) *
              C2565 +
          ((((C39329 * C3891 + C39127 * C4161 + C39330 * C3896 +
              C39128 * C4166) *
                 C3364 +
             (C39329 * C3900 + C39127 * C4167 + C39330 * C3905 +
              C39128 * C4172) *
                 C90498) *
                C90634 * C39125 +
            ((C39329 * C3892 + C39127 * C4162 + C39330 * C3895 +
              C39128 * C4165) *
                 C3364 +
             (C39329 * C3901 + C39127 * C4168 + C39330 * C3904 +
              C39128 * C4171) *
                 C90498) *
                C90634 * C39126) *
               C90579 -
           (((C40223 + C40222) * C90498 + (C40221 + C40220) * C3364) * C90634 *
                C39126 +
            ((C39330 * C2577 + C39128 * C2831 + C39329 * C839 +
              C39127 * C1098) *
                 C90498 +
             (C39330 * C2570 + C39128 * C2827 + C39329 * C832 +
              C39127 * C1094) *
                 C3364) *
                C90634 * C39125) *
               C90753) *
              C2566 +
          ((((C39329 * C2570 + C39127 * C2827 + C39330 * C3367 +
              C39128 * C3545) *
                 C3364 +
             (C39329 * C2577 + C39127 * C2831 + C39330 * C3370 +
              C39128 * C3548) *
                 C90498) *
                C90634 * C39125 +
            ((C42142 + C42141) * C3364 + (C42144 + C42143) * C90498) * C90634 *
                C39126) *
               C90753 -
           (((C39330 * C21006 + C39128 * C21347 + C39329 * C3904 +
              C39127 * C4171) *
                 C90498 +
             (C39330 * C21004 + C39128 * C21346 + C39329 * C3895 +
              C39127 * C4165) *
                 C3364) *
                C90634 * C39126 +
            ((C39330 * C16838 + C39128 * C17133 + C39329 * C3905 +
              C39127 * C4172) *
                 C90498 +
             (C39330 * C16835 + C39128 * C17131 + C39329 * C3896 +
              C39127 * C4166) *
                 C3364) *
                C90634 * C39125) *
               C90579) *
              C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C826 +
            (C39329 * C116 + C39127 * C314 + C39330 * C839 + C39128 * C1098) *
                C821 -
            (C39356 + C39357) * C827 - (C39358 + C39359) * C822 +
            (C39360 + C39361) * C828 + (C39362 + C39363) * C823) *
               C90634 * C39125 +
           ((C39357 + C39356) * C826 + (C39359 + C39358) * C821 -
            (C39361 + C39360) * C827 - (C39363 + C39362) * C822 +
            (C39365 + C39364) * C828 + (C39367 + C39366) * C823) *
               C90634 * C39126) *
              C90753 +
          (((C41167 + C41168) * C827 -
            ((C39330 * C3900 + C39128 * C4167 + C39329 * C1707 +
              C39127 * C1966) *
                 C821 +
             (C39330 * C3891 + C39128 * C4161 + C39329 * C1700 +
              C39127 * C1962) *
                 C826) +
            (C41169 + C41170) * C822 - (C41171 + C41172) * C828 -
            (C41173 + C41174) * C823) *
               C90634 * C39125 +
           ((C41172 + C41171) * C827 -
            ((C41170 + C41169) * C821 + (C41168 + C41167) * C826) +
            (C41174 + C41173) * C822 -
            (C39330 * C8120 + C39128 * C8422 + C39329 * C1699 +
             C39127 * C1964) *
                C828 -
            (C39330 * C8122 + C39128 * C8423 + C39329 * C1709 +
             C39127 * C1969) *
                C823) *
               C90634 * C39126) *
              C90579) *
         C90541) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C3364 +
            (C39329 * C116 + C39127 * C314 + C39330 * C839 + C39128 * C1098) *
                C90498) *
               C90634 * C39125 +
           ((C39357 + C39356) * C3364 + (C39359 + C39358) * C90498) * C90634 *
               C39126) *
              C6159 -
          (((C41170 + C41169) * C90498 + (C41168 + C41167) * C3364) * C90634 *
               C39126 +
           ((C39330 * C3900 + C39128 * C4167 + C39329 * C1707 +
             C39127 * C1966) *
                C90498 +
            (C39330 * C3891 + C39128 * C4161 + C39329 * C1700 +
             C39127 * C1962) *
                C3364) *
               C90634 * C39125) *
              C6160 +
          (((C39329 * C4656 + C39127 * C4913 + C39330 * C5471 +
             C39128 * C5717) *
                C3364 +
            (C39329 * C4663 + C39127 * C4917 + C39330 * C5474 +
             C39128 * C5720) *
                C90498) *
               C90634 * C39125 +
           ((C44621 + C44620) * C3364 + (C44623 + C44622) * C90498) * C90634 *
               C39126) *
              C6161 -
          (((C39330 * C33651 + C39128 * C33992 + C39329 * C6167 +
             C39127 * C6345) *
                C90498 +
            (C39330 * C33649 + C39128 * C33991 + C39329 * C6164 +
             C39127 * C6342) *
                C3364) *
               C90634 * C39126 +
           ((C39330 * C19091 + C39128 * C19256 + C39329 * C6168 +
             C39127 * C6346) *
                C90498 +
            (C39330 * C19088 + C39128 * C19254 + C39329 * C6165 +
             C39127 * C6343) *
                C3364) *
               C90634 * C39125) *
              C6162) *
         C90541) /
            (p * q * std::sqrt(p + q));
    d2eeyy[8] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C2660 +
            (C39329 * C182 + C39127 * C394 + C39330 * C927 + C39128 * C1195) *
                C2565 -
            (C39330 * C2570 + C39128 * C2827 + C39329 * C832 + C39127 * C1094) *
                C2661 -
            (C39330 * C2663 + C39128 * C2921 + C39329 * C927 + C39127 * C1195) *
                C2566 +
            (C39329 * C2570 + C39127 * C2827 + C39330 * C3367 +
             C39128 * C3545) *
                C2662 +
            (C39329 * C2663 + C39127 * C2921 + C39330 * C3433 +
             C39128 * C3599) *
                C2567) *
               C90634 * C39125 +
           ((C39357 + C39356) * C2660 + (C39446 + C39447) * C2565 -
            (C40221 + C40220) * C2661 - (C40334 + C40335) * C2566 +
            (C42142 + C42141) * C2662 + (C42247 + C42248) * C2567) *
               C90634 * C39126) *
              C90498 * C90753 +
          (((C39329 * C3891 + C39127 * C4161 + C39330 * C3896 +
             C39128 * C4166) *
                C2661 -
            ((C39330 * C3989 + C39128 * C4247 + C39329 * C1794 +
              C39127 * C2066) *
                 C2565 +
             (C39330 * C3891 + C39128 * C4161 + C39329 * C1700 +
              C39127 * C1962) *
                 C2660) +
            (C39329 * C3989 + C39127 * C4247 + C39330 * C3994 +
             C39128 * C4248) *
                C2566 -
            (C39330 * C16835 + C39128 * C17131 + C39329 * C3896 +
             C39127 * C4166) *
                C2662 -
            (C39330 * C16942 + C39128 * C17209 + C39329 * C3994 +
             C39127 * C4248) *
                C2567) *
               C90634 * C39125 +
           ((C39329 * C3892 + C39127 * C4162 + C39330 * C3895 +
             C39128 * C4165) *
                C2661 -
            ((C41282 + C41281) * C2565 + (C41168 + C41167) * C2660) +
            (C39329 * C3990 + C39127 * C4249 + C39330 * C3993 +
             C39128 * C4250) *
                C2566 -
            (C39330 * C21004 + C39128 * C21346 + C39329 * C3895 +
             C39127 * C4165) *
                C2662 -
            (C39330 * C21126 + C39128 * C21446 + C39329 * C3993 +
             C39127 * C4250) *
                C2567) *
               C90634 * C39126) *
              C90498 * C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                 C181 +
             (C39329 * C182 + C39127 * C394 + C39330 * C927 + C39128 * C1195) *
                 C90541) *
                C90634 * C39125 +
            ((C39357 + C39356) * C181 + (C39446 + C39447) * C90541) * C90634 *
                C39126) *
               C821 -
           (((C39448 + C39449) * C90541 + (C39361 + C39360) * C181) * C90634 *
                C39126 +
            ((C39447 + C39446) * C90541 + (C39356 + C39357) * C181) * C90634 *
                C39125) *
               C822 +
           (((C39360 + C39361) * C181 + (C39449 + C39448) * C90541) * C90634 *
                C39125 +
            ((C39365 + C39364) * C181 + (C39450 + C39451) * C90541) * C90634 *
                C39126) *
               C823) *
              C90753 +
          ((((C41167 + C41168) * C181 + (C41281 + C41282) * C90541) * C90634 *
                C39125 +
            ((C41172 + C41171) * C181 + (C41283 + C41284) * C90541) * C90634 *
                C39126) *
               C822 -
           (((C41282 + C41281) * C90541 + (C41168 + C41167) * C181) * C90634 *
                C39126 +
            ((C39330 * C3989 + C39128 * C4247 + C39329 * C1794 +
              C39127 * C2066) *
                 C90541 +
             (C39330 * C3891 + C39128 * C4161 + C39329 * C1700 +
              C39127 * C1962) *
                 C181) *
                C90634 * C39125) *
               C821 -
           (((C39330 * C8222 + C39128 * C8534 + C39329 * C1793 +
              C39127 * C2065) *
                 C90541 +
             (C39330 * C8120 + C39128 * C8422 + C39329 * C1699 +
              C39127 * C1964) *
                 C181) *
                C90634 * C39126 +
            ((C41284 + C41283) * C90541 + (C41171 + C41172) * C181) * C90634 *
                C39125) *
               C823) *
              C90579)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C181 +
            (C39329 * C182 + C39127 * C394 + C39330 * C927 + C39128 * C1195) *
                C90541) *
               C90634 * C39125 +
           ((C39357 + C39356) * C181 + (C39446 + C39447) * C90541) * C90634 *
               C39126) *
              C90498 * C6159 -
          (((C41282 + C41281) * C90541 + (C41168 + C41167) * C181) * C90634 *
               C39126 +
           ((C39330 * C3989 + C39128 * C4247 + C39329 * C1794 +
             C39127 * C2066) *
                C90541 +
            (C39330 * C3891 + C39128 * C4161 + C39329 * C1700 +
             C39127 * C1962) *
                C181) *
               C90634 * C39125) *
              C90498 * C6160 +
          (((C39329 * C4656 + C39127 * C4913 + C39330 * C5471 +
             C39128 * C5717) *
                C181 +
            (C39329 * C4746 + C39127 * C5007 + C39330 * C5557 +
             C39128 * C5795) *
                C90541) *
               C90634 * C39125 +
           ((C44621 + C44620) * C181 + (C44726 + C44727) * C90541) * C90634 *
               C39126) *
              C90498 * C6161 -
          (((C39330 * C33769 + C39128 * C34113 + C39329 * C6226 +
             C39127 * C6398) *
                C90541 +
            (C39330 * C33649 + C39128 * C33991 + C39329 * C6164 +
             C39127 * C6342) *
                C181) *
               C90634 * C39126 +
           ((C39330 * C19146 + C39128 * C19308 + C39329 * C6227 +
             C39127 * C6399) *
                C90541 +
            (C39330 * C19088 + C39128 * C19254 + C39329 * C6165 +
             C39127 * C6343) *
                C181) *
               C90634 * C39125) *
              C90498 * C6162)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[8] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C1875 +
            (C39329 * C245 + C39127 * C474 + C39330 * C1011 + C39128 * C1301) *
                C90753 -
            (C39330 * C3891 + C39128 * C4161 + C39329 * C1700 +
             C39127 * C1962) *
                C1876 -
            (C39330 * C4075 + C39128 * C4327 + C39329 * C1879 +
             C39127 * C2159) *
                C90579) *
               C90634 * C39125 +
           ((C39357 + C39356) * C1875 + (C39530 + C39531) * C90753 -
            (C41168 + C41167) * C1876 - (C41391 + C41392) * C90579) *
               C90634 * C39126) *
              C2565 +
          (((C39329 * C3891 + C39127 * C4161 + C39330 * C3896 +
             C39128 * C4166) *
                C1876 -
            ((C39330 * C2745 + C39128 * C3017 + C39329 * C1011 +
              C39127 * C1301) *
                 C90753 +
             (C39330 * C2570 + C39128 * C2827 + C39329 * C832 +
              C39127 * C1094) *
                 C1875) +
            (C39329 * C4075 + C39127 * C4327 + C39330 * C4080 +
             C39128 * C4330) *
                C90579) *
               C90634 * C39125 +
           ((C39329 * C3892 + C39127 * C4162 + C39330 * C3895 +
             C39128 * C4165) *
                C1876 -
            ((C40444 + C40445) * C90753 + (C40221 + C40220) * C1875) +
            (C39329 * C4076 + C39127 * C4328 + C39330 * C4079 +
             C39128 * C4331) *
                C90579) *
               C90634 * C39126) *
              C2566 +
          (((C39329 * C2570 + C39127 * C2827 + C39330 * C3367 +
             C39128 * C3545) *
                C1875 +
            (C39329 * C2745 + C39127 * C3017 + C39330 * C3489 +
             C39128 * C3654) *
                C90753 -
            (C39330 * C16835 + C39128 * C17131 + C39329 * C3896 +
             C39127 * C4166) *
                C1876 -
            (C39330 * C17029 + C39128 * C17285 + C39329 * C4080 +
             C39127 * C4330) *
                C90579) *
               C90634 * C39125 +
           ((C42142 + C42141) * C1875 + (C42351 + C42352) * C90753 -
            (C39330 * C21004 + C39128 * C21346 + C39329 * C3895 +
             C39127 * C4165) *
                C1876 -
            (C39330 * C21232 + C39128 * C21545 + C39329 * C4079 +
             C39127 * C4331) *
                C90579) *
               C90634 * C39126) *
              C2567) *
         C90498) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C1875 +
            (C39329 * C245 + C39127 * C474 + C39330 * C1011 + C39128 * C1301) *
                C90753 -
            (C39330 * C3891 + C39128 * C4161 + C39329 * C1700 +
             C39127 * C1962) *
                C1876 -
            (C39330 * C4075 + C39128 * C4327 + C39329 * C1879 +
             C39127 * C2159) *
                C90579) *
               C90634 * C39125 +
           ((C39357 + C39356) * C1875 + (C39530 + C39531) * C90753 -
            (C41168 + C41167) * C1876 - (C41391 + C41392) * C90579) *
               C90634 * C39126) *
              C90541 * C821 +
          (((C41167 + C41168) * C1876 -
            ((C39531 + C39530) * C90753 + (C39356 + C39357) * C1875) +
            (C41392 + C41391) * C90579) *
               C90634 * C39125 +
           ((C41172 + C41171) * C1876 -
            ((C39532 + C39533) * C90753 + (C39361 + C39360) * C1875) +
            (C41393 + C41394) * C90579) *
               C90634 * C39126) *
              C90541 * C822 +
          (((C39360 + C39361) * C1875 + (C39533 + C39532) * C90753 -
            (C41171 + C41172) * C1876 - (C41394 + C41393) * C90579) *
               C90634 * C39125 +
           ((C39365 + C39364) * C1875 + (C39534 + C39535) * C90753 -
            (C39330 * C8120 + C39128 * C8422 + C39329 * C1699 +
             C39127 * C1964) *
                C1876 -
            (C39330 * C8322 + C39128 * C8647 + C39329 * C1880 +
             C39127 * C2162) *
                C90579) *
               C90634 * C39126) *
              C90541 * C823)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
               C6281 +
           (C39329 * C245 + C39127 * C474 + C39330 * C1011 + C39128 * C1301) *
               C6159 -
           (C39330 * C3891 + C39128 * C4161 + C39329 * C1700 + C39127 * C1962) *
               C6282 -
           (C39330 * C4075 + C39128 * C4327 + C39329 * C1879 + C39127 * C2159) *
               C6160 +
           (C39329 * C4656 + C39127 * C4913 + C39330 * C5471 + C39128 * C5717) *
               C6283 +
           (C39329 * C4831 + C39127 * C5095 + C39330 * C5637 + C39128 * C5872) *
               C6161 -
           (C39330 * C19088 + C39128 * C19254 + C39329 * C6165 +
            C39127 * C6343) *
               C6284 -
           (C39330 * C19199 + C39128 * C19360 + C39329 * C6287 +
            C39127 * C6450) *
               C6162) *
              C90634 * C39125 +
          ((C39357 + C39356) * C6281 + (C39530 + C39531) * C6159 -
           (C41168 + C41167) * C6282 - (C41391 + C41392) * C6160 +
           (C44621 + C44620) * C6283 + (C44830 + C44831) * C6161 -
           (C39330 * C33649 + C39128 * C33991 + C39329 * C6164 +
            C39127 * C6342) *
               C6284 -
           (C39330 * C33888 + C39128 * C34227 + C39329 * C6286 +
            C39127 * C6451) *
               C6162) *
              C90634 * C39126) *
         C90541 * C90498) /
            (p * q * std::sqrt(p + q));
    d2eezx[8] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C90634 * C555) * C3364 +
              (C554 * C116 + C90634 * C561) * C90498) *
                 C39125 +
             (C584 * C3364 + C585 * C90498) * C39126) *
                C39127 +
            ((C16632 + C16633) * C39125 + (C43148 + C43149) * C39126) *
                C39128) *
               C90753 -
           (((C44020 + C44021) * C39126 + (C17386 + C17387) * C39125) * C39128 +
            ((C2287 * C90498 + C2286 * C3364) * C39126 +
             ((C554 * C1707 + C90634 * C2268) * C90498 +
              (C554 * C1700 + C90634 * C2264) * C3364) *
                 C39125) *
                C39127) *
               C90579) *
              C2565 +
          ((((C17387 + C17386) * C39125 + (C44021 + C44020) * C39126) * C39127 +
            ((C17385 + C17384) * C39125 + (C44022 + C44023) * C39126) *
                C39128) *
               C90579 -
           (((C43150 + C43151) * C39126 + (C16635 + C16634) * C39125) * C39128 +
            ((C43149 + C43148) * C39126 + (C16633 + C16632) * C39125) *
                C39127) *
               C90753) *
              C2566 +
          (((C16642 * C39125 + (C43151 + C43150) * C39126) * C39127 +
            ((C16637 + C16636) * C39125 + (C43152 + C43153) * C39126) *
                C39128) *
               C90753 -
           ((((C554 * C21006 + C90634 * C21645) * C90498 +
              (C554 * C21004 + C90634 * C21644) * C3364) *
                 C39126 +
             (C17389 + C17388) * C39125) *
                C39128 +
            ((C44023 + C44022) * C39126 + C17390 * C39125) * C39127) *
               C90579) *
              C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C826 +
             (C554 * C116 + C90634 * C561) * C821 - C584 * C827 - C585 * C822 +
             C586 * C828 + C587 * C823) *
                C39125 +
            (C584 * C826 + C585 * C821 - C586 * C827 - C587 * C822 +
             C588 * C828 + C589 * C823) *
                C39126) *
               C39127 +
           ((C14618 + C14619 - C14602 - C14603 + C14604 + C14605) * C39125 +
            (C40546 + C40547 - C40548 - C40549 + C40550 + C40551) * C39126) *
               C39128) *
              C90753 +
          (((C2286 * C827 -
             ((C554 * C1707 + C90634 * C2268) * C821 +
              (C554 * C1700 + C90634 * C2264) * C826) +
             C2287 * C822 - C2288 * C828 - C2289 * C823) *
                C39125 +
            (C2288 * C827 - (C2287 * C821 + C2286 * C826) + C2289 * C822 -
             C2290 * C828 - C2291 * C823) *
                C39126) *
               C39127 +
           ((C8771 * C827 - (C17380 * C821 + C17381 * C826) + C8772 * C822 -
             C8773 * C828 - C8774 * C823) *
                C39125 +
            (C8773 * C827 - (C8772 * C821 + C8771 * C826) + C8774 * C822 -
             (C554 * C8120 + C90634 * C8760) * C828 -
             (C554 * C8122 + C90634 * C8761) * C823) *
                C39126) *
               C39128) *
              C90579) *
         C90541) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C3364 +
             (C554 * C116 + C90634 * C561) * C90498) *
                C39125 +
            (C584 * C3364 + C585 * C90498) * C39126) *
               C39127 +
           ((C16632 + C16633) * C39125 + (C43148 + C43149) * C39126) * C39128) *
              C6159 -
          (((C44020 + C44021) * C39126 + (C17386 + C17387) * C39125) * C39128 +
           ((C2287 * C90498 + C2286 * C3364) * C39126 +
            ((C554 * C1707 + C90634 * C2268) * C90498 +
             (C554 * C1700 + C90634 * C2264) * C3364) *
                C39125) *
               C39127) *
              C6160 +
          ((((C554 * C4656 + C90634 * C5191) * C3364 +
             (C554 * C4663 + C90634 * C5195) * C90498) *
                C39125 +
            (C5208 * C3364 + C5209 * C90498) * C39126) *
               C39127 +
           ((C18860 + C18861) * C39125 + (C45856 + C45857) * C39126) * C39128) *
              C6161 -
          ((((C554 * C33651 + C90634 * C34330) * C90498 +
             (C554 * C33649 + C90634 * C34329) * C3364) *
                C39126 +
            ((C554 * C19091 + C90634 * C19414) * C90498 +
             (C554 * C19088 + C90634 * C19412) * C3364) *
                C39125) *
               C39128 +
           (((C554 * C6167 + C90634 * C6507) * C90498 +
             (C554 * C6164 + C90634 * C6504) * C3364) *
                C39126 +
            ((C554 * C6168 + C90634 * C6508) * C90498 +
             (C554 * C6165 + C90634 * C6505) * C3364) *
                C39125) *
               C39127) *
              C6162) *
         C90541) /
            (p * q * std::sqrt(p + q));
    d2eezy[8] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C2660 +
             (C554 * C182 + C90634 * C641) * C2565 - C14614 * C2661 -
             C14700 * C2566 + C14616 * C2662 + C14701 * C2567) *
                C39125 +
            (C3204 + C3205 - C3206 - C3207 + C3208 + C3220) * C39126) *
               C39127 +
           ((C14614 * C2660 + C14700 * C2565 - C14616 * C2661 - C14701 * C2566 +
             C16062 * C2662 + C16151 * C2567) *
                C39125 +
            (C42557 + C42558 - C42559 - C42560 + C42561 + C42562) * C39126) *
               C39128) *
              C90498 * C90753 +
          (((C17381 * C2661 -
             ((C554 * C1794 + C90634 * C2368) * C2565 +
              (C554 * C1700 + C90634 * C2264) * C2660) +
             C17474 * C2566 - C17379 * C2662 - C17475 * C2567) *
                C39125 +
            (C8771 * C2661 - (C2380 * C2565 + C2286 * C2660) + C8884 * C2566 -
             C21657 * C2662 - C21762 * C2567) *
                C39126) *
               C39127 +
           ((C17379 * C2661 - (C17474 * C2565 + C17381 * C2660) +
             C17475 * C2566 - C17382 * C2662 - C17476 * C2567) *
                C39125 +
            (C21657 * C2661 - (C8884 * C2565 + C8771 * C2660) + C21762 * C2566 -
             (C554 * C21004 + C90634 * C21644) * C2662 -
             (C554 * C21126 + C90634 * C21758) * C2567) *
                C39126) *
               C39128) *
              C90498 * C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C90634 * C555) * C181 +
              (C554 * C182 + C90634 * C641) * C90541) *
                 C39125 +
             (C648 + C664) * C39126) *
                C39127 +
            ((C14614 * C181 + C14700 * C90541) * C39125 +
             (C39668 + C39669) * C39126) *
                C39128) *
               C821 -
           (((C39670 + C39671) * C39126 + (C39669 + C39668) * C39125) * C39128 +
            ((C665 + C651) * C39126 + (C664 + C648) * C39125) * C39127) *
               C822 +
           ((C668 * C39125 + (C656 + C666) * C39126) * C39127 +
            ((C39671 + C39670) * C39125 + (C39672 + C39673) * C39126) *
                C39128) *
               C823) *
              C90753 +
          ((((C2371 + C2383) * C39125 + (C2374 + C2384) * C39126) * C39127 +
            ((C41591 + C41592) * C39125 + (C41593 + C41594) * C39126) *
                C39128) *
               C822 -
           (((C41592 + C41591) * C39126 +
             (C17474 * C90541 + C17381 * C181) * C39125) *
                C39128 +
            ((C2383 + C2371) * C39126 +
             ((C554 * C1794 + C90634 * C2368) * C90541 +
              (C554 * C1700 + C90634 * C2264) * C181) *
                 C39125) *
                C39127) *
               C821 -
           ((((C554 * C8222 + C90634 * C8872) * C90541 +
              (C554 * C8120 + C90634 * C8760) * C181) *
                 C39126 +
             (C41594 + C41593) * C39125) *
                C39128 +
            ((C2385 + C2377) * C39126 + C2386 * C39125) * C39127) *
               C823) *
              C90579)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C181 +
             (C554 * C182 + C90634 * C641) * C90541) *
                C39125 +
            (C648 + C664) * C39126) *
               C39127 +
           ((C14614 * C181 + C14700 * C90541) * C39125 +
            (C39668 + C39669) * C39126) *
               C39128) *
              C90498 * C6159 -
          (((C41592 + C41591) * C39126 +
            (C17474 * C90541 + C17381 * C181) * C39125) *
               C39128 +
           ((C2383 + C2371) * C39126 +
            ((C554 * C1794 + C90634 * C2368) * C90541 +
             (C554 * C1700 + C90634 * C2264) * C181) *
                C39125) *
               C39127) *
              C90498 * C6160 +
          ((((C554 * C4656 + C90634 * C5191) * C181 +
             (C554 * C4746 + C90634 * C5285) * C90541) *
                C39125 +
            (C5290 + C5298) * C39126) *
               C39127 +
           ((C18856 * C181 + C18943 * C90541) * C39125 +
            (C45034 + C45038) * C39126) *
               C39128) *
              C90498 * C6161 -
          ((((C554 * C33769 + C90634 * C34429) * C90541 +
             (C554 * C33649 + C90634 * C34329) * C181) *
                C39126 +
            ((C554 * C19146 + C90634 * C19466) * C90541 +
             (C554 * C19088 + C90634 * C19412) * C181) *
                C39125) *
               C39128 +
           (((C554 * C6226 + C90634 * C6560) * C90541 +
             (C554 * C6164 + C90634 * C6504) * C181) *
                C39126 +
            ((C554 * C6227 + C90634 * C6561) * C90541 +
             (C554 * C6165 + C90634 * C6505) * C181) *
                C39125) *
               C39127) *
              C90498 * C6162)) /
            (p * q * std::sqrt(p + q));
    d2eezz[8] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C1875 +
             (C554 * C245 + C90634 * C719) * C90753 -
             (C554 * C1700 + C90634 * C2264) * C1876 -
             (C554 * C1879 + C90634 * C2460) * C90579) *
                C39125 +
            (C2466 + C2467 - C2468 - C2485) * C39126) *
               C39127 +
           ((C17553 + C17554 - C17555 - C17572) * C39125 +
            (C8989 + C8988 - C8987 - C8999) * C39126) *
               C39128) *
              C2565 +
          (((C17555 - (C17554 + C17553) + C17572) * C39125 +
            (C8987 - (C8988 + C8989) + C8999) * C39126) *
               C39127 +
           ((C17560 - (C17559 + C17558) + C17574) * C39125 +
            (C21862 - (C21863 + C21864) + C21868) * C39126) *
               C39128) *
              C2566 +
          ((C17576 * C39125 + (C21864 + C21863 - C21862 - C21868) * C39126) *
               C39127 +
           ((C17565 + C17564 - C17563 - C17575) * C39125 +
            (C16060 * C1875 + C16239 * C90753 -
             (C554 * C21004 + C90634 * C21644) * C1876 -
             (C554 * C21232 + C90634 * C21860) * C90579) *
                C39126) *
               C39128) *
              C2567) *
         C90498) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C1875 +
             (C554 * C245 + C90634 * C719) * C90753 -
             (C554 * C1700 + C90634 * C2264) * C1876 -
             (C554 * C1879 + C90634 * C2460) * C90579) *
                C39125 +
            (C2466 + C2467 - C2468 - C2485) * C39126) *
               C39127 +
           ((C17553 + C17554 - C17555 - C17572) * C39125 +
            (C8989 + C8988 - C8987 - C8999) * C39126) *
               C39128) *
              C90541 * C821 +
          (((C2468 - (C2467 + C2466) + C2485) * C39125 +
            (C2473 - (C2472 + C2471) + C2487) * C39126) *
               C39127 +
           ((C8987 - (C8988 + C8989) + C8999) * C39125 +
            (C8992 - (C8993 + C8994) + C9000) * C39126) *
               C39128) *
              C90541 * C822 +
          ((C2489 * C39125 + (C2478 + C2477 - C2476 - C2488) * C39126) *
               C39127 +
           ((C8994 + C8993 - C8992 - C9000) * C39125 +
            (C1422 * C1875 + C1617 * C90753 -
             (C554 * C8120 + C90634 * C8760) * C1876 -
             (C554 * C8322 + C90634 * C8985) * C90579) *
                C39126) *
               C39128) *
              C90541 * C823)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C6281 +
            (C554 * C245 + C90634 * C719) * C6159 -
            (C554 * C1700 + C90634 * C2264) * C6282 -
            (C554 * C1879 + C90634 * C2460) * C6160 +
            (C554 * C4656 + C90634 * C5191) * C6283 +
            (C554 * C4831 + C90634 * C5373) * C6161 -
            (C554 * C6165 + C90634 * C6505) * C6284 -
            (C554 * C6287 + C90634 * C6612) * C6162) *
               C39125 +
           (C584 * C6281 + C738 * C6159 - C2286 * C6282 - C2481 * C6160 +
            C5208 * C6283 + C5392 * C6161 -
            (C554 * C6164 + C90634 * C6504) * C6284 -
            (C554 * C6286 + C90634 * C6613) * C6162) *
               C39126) *
              C39127 +
          ((C14614 * C6281 + C14782 * C6159 - C17381 * C6282 - C17568 * C6160 +
            C18856 * C6283 + C19034 * C6161 -
            (C554 * C19088 + C90634 * C19412) * C6284 -
            (C554 * C19199 + C90634 * C19517) * C6162) *
               C39125 +
           (C1418 * C6281 + C1616 * C6159 - C8771 * C6282 - C8997 * C6160 +
            C44934 * C6283 + C45144 * C6161 -
            (C554 * C33649 + C90634 * C34329) * C6284 -
            (C554 * C33888 + C90634 * C34528) * C6162) *
               C39126) *
              C39128) *
         C90541 * C90498) /
            (p * q * std::sqrt(p + q));
    d2eexx[9] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C6694 +
            (C39129 * C116 + C39125 * C125 + C39130 * C117 + C39126 * C126) *
                C90780 -
            (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                C6695 -
            (C39130 * C118 + C39126 * C127 + C39129 * C117 + C39125 * C126) *
                C90771 +
            (C39129 * C109 + C39125 * C115 + C39130 * C110 + C39126 * C119) *
                C6696 +
            (C39129 * C118 + C39125 * C127 + C39130 * C120 + C39126 * C128) *
                C6691) *
               C39127 +
           ((C39862 + C39863) * C6694 + (C39864 + C39865) * C90780 -
            (C39866 + C39867) * C6695 - (C39868 + C39869) * C90771 +
            (C39870 + C39871) * C6696 + (C39872 + C39873) * C6691) *
               C39128) *
              C90634 * C9074 +
          (((C39129 * C1697 + C39125 * C1702 + C39130 * C1698 +
             C39126 * C1703) *
                C6695 -
            ((C39130 * C1706 + C39126 * C1713 + C39129 * C1707 +
              C39125 * C1714) *
                 C90780 +
             (C39130 * C1697 + C39126 * C1702 + C39129 * C1700 +
              C39125 * C1708) *
                 C6694) +
            (C39129 * C1706 + C39125 * C1713 + C39130 * C1705 +
             C39126 * C1712) *
                C90771 -
            (C39130 * C1699 + C39126 * C1704 + C39129 * C1698 +
             C39125 * C1703) *
                C6696 -
            (C39130 * C1709 + C39126 * C1715 + C39129 * C1705 +
             C39125 * C1712) *
                C6691) *
               C39127 +
           ((C48578 + C48579) * C6695 -
            ((C43400 + C43401) * C90780 + (C43402 + C43403) * C6694) +
            (C48580 + C48581) * C90771 -
            (C39130 * C8120 + C39126 * C8121 + C39129 * C3893 +
             C39125 * C3899) *
                C6696 -
            (C39130 * C8122 + C39126 * C8123 + C39129 * C3902 +
             C39125 * C3911) *
                C6691) *
               C39128) *
              C90634 * C90579) *
         C90541) /
        (p * q * std::sqrt(p + q));
    d2eexy[9] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                 C181 +
             (C39129 * C182 + C39125 * C188 + C39130 * C183 + C39126 * C189) *
                 C90541) *
                C39127 +
            ((C39862 + C39863) * C181 + (C39985 + C39984) * C90541) * C39128) *
               C90634 * C90780 -
           (((C39987 + C39986) * C90541 + (C39866 + C39867) * C181) * C39128 +
            ((C39130 * C184 + C39126 * C190 + C39129 * C183 + C39125 * C189) *
                 C90541 +
             (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                 C181) *
                C39127) *
               C90634 * C90771 +
           (((C39129 * C109 + C39125 * C115 + C39130 * C110 + C39126 * C119) *
                 C181 +
             (C39129 * C184 + C39125 * C190 + C39130 * C185 + C39126 * C191) *
                 C90541) *
                C39127 +
            ((C39870 + C39871) * C181 + (C39989 + C39988) * C90541) * C39128) *
               C90634 * C6691) *
              C9074 +
          ((((C39129 * C1697 + C39125 * C1702 + C39130 * C1698 +
              C39126 * C1703) *
                 C181 +
             (C39129 * C1791 + C39125 * C1796 + C39130 * C1792 +
              C39126 * C1797) *
                 C90541) *
                C39127 +
            ((C48578 + C48579) * C181 + (C48717 + C48716) * C90541) * C39128) *
               C90634 * C90771 -
           (((C43515 + C43514) * C90541 + (C43402 + C43403) * C181) * C39128 +
            ((C39130 * C1791 + C39126 * C1796 + C39129 * C1794 +
              C39125 * C1799) *
                 C90541 +
             (C39130 * C1697 + C39126 * C1702 + C39129 * C1700 +
              C39125 * C1708) *
                 C181) *
                C39127) *
               C90634 * C90780 -
           (((C39130 * C8222 + C39126 * C8223 + C39129 * C3991 +
              C39125 * C3997) *
                 C90541 +
             (C39130 * C8120 + C39126 * C8121 + C39129 * C3893 +
              C39125 * C3899) *
                 C181) *
                C39128 +
            ((C39130 * C1793 + C39126 * C1798 + C39129 * C1792 +
              C39125 * C1797) *
                 C90541 +
             (C39130 * C1699 + C39126 * C1704 + C39129 * C1698 +
              C39125 * C1703) *
                 C181) *
                C39127) *
               C90634 * C6691) *
              C90579)) /
        (p * q * std::sqrt(p + q));
    d2eexz[9] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C9224 +
            (C39129 * C245 + C39125 * C251 + C39130 * C246 + C39126 * C252) *
                C9074 -
            (C39130 * C1697 + C39126 * C1702 + C39129 * C1700 +
             C39125 * C1708) *
                C9225 -
            (C39130 * C1878 + C39126 * C1883 + C39129 * C1879 +
             C39125 * C1884) *
                C90579) *
               C39127 +
           ((C39862 + C39863) * C9224 + (C40100 + C40101) * C9074 -
            (C43402 + C43403) * C9225 - (C43624 + C43625) * C90579) *
               C39128) *
              C90634 * C90541 * C90780 +
          (((C39129 * C1697 + C39125 * C1702 + C39130 * C1698 +
             C39126 * C1703) *
                C9225 -
            ((C39130 * C247 + C39126 * C253 + C39129 * C246 + C39125 * C252) *
                 C9074 +
             (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                 C9224) +
            (C39129 * C1878 + C39125 * C1883 + C39130 * C1877 +
             C39126 * C1882) *
                C90579) *
               C39127 +
           ((C48578 + C48579) * C9225 -
            ((C40103 + C40102) * C9074 + (C39866 + C39867) * C9224) +
            (C48852 + C48853) * C90579) *
               C39128) *
              C90634 * C90541 * C90771 +
          (((C39129 * C109 + C39125 * C115 + C39130 * C110 + C39126 * C119) *
                C9224 +
            (C39129 * C247 + C39125 * C253 + C39130 * C248 + C39126 * C254) *
                C9074 -
            (C39130 * C1699 + C39126 * C1704 + C39129 * C1698 +
             C39125 * C1703) *
                C9225 -
            (C39130 * C1880 + C39126 * C1885 + C39129 * C1877 +
             C39125 * C1882) *
                C90579) *
               C39127 +
           ((C39870 + C39871) * C9224 + (C40104 + C40105) * C9074 -
            (C39130 * C8120 + C39126 * C8121 + C39129 * C3893 +
             C39125 * C3899) *
                C9225 -
            (C39130 * C8322 + C39126 * C8323 + C39129 * C4077 +
             C39125 * C4083) *
                C90579) *
               C39128) *
              C90634 * C90541 * C6691)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[9] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C6694 +
            (C39329 * C116 + C39127 * C314 + C39330 * C839 + C39128 * C1098) *
                C90780 -
            (C39356 + C39357) * C6695 - (C39358 + C39359) * C90771 +
            (C39360 + C39361) * C6696 + (C39362 + C39363) * C6691) *
               C90634 * C39125 +
           ((C39357 + C39356) * C6694 + (C39359 + C39358) * C90780 -
            (C39361 + C39360) * C6695 - (C39363 + C39362) * C90771 +
            (C39365 + C39364) * C6696 + (C39367 + C39366) * C6691) *
               C90634 * C39126) *
              C9074 +
          (((C41167 + C41168) * C6695 -
            ((C39330 * C3900 + C39128 * C4167 + C39329 * C1707 +
              C39127 * C1966) *
                 C90780 +
             (C39330 * C3891 + C39128 * C4161 + C39329 * C1700 +
              C39127 * C1962) *
                 C6694) +
            (C41169 + C41170) * C90771 - (C41171 + C41172) * C6696 -
            (C41173 + C41174) * C6691) *
               C90634 * C39125 +
           ((C41172 + C41171) * C6695 -
            ((C41170 + C41169) * C90780 + (C41168 + C41167) * C6694) +
            (C41174 + C41173) * C90771 -
            (C39330 * C8120 + C39128 * C8422 + C39329 * C1699 +
             C39127 * C1964) *
                C6696 -
            (C39330 * C8122 + C39128 * C8423 + C39329 * C1709 +
             C39127 * C1969) *
                C6691) *
               C90634 * C39126) *
              C90579) *
         C90541) /
        (p * q * std::sqrt(p + q));
    d2eeyy[9] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                 C181 +
             (C39329 * C182 + C39127 * C394 + C39330 * C927 + C39128 * C1195) *
                 C90541) *
                C90634 * C39125 +
            ((C39357 + C39356) * C181 + (C39446 + C39447) * C90541) * C90634 *
                C39126) *
               C90780 -
           (((C39448 + C39449) * C90541 + (C39361 + C39360) * C181) * C90634 *
                C39126 +
            ((C39447 + C39446) * C90541 + (C39356 + C39357) * C181) * C90634 *
                C39125) *
               C90771 +
           (((C39360 + C39361) * C181 + (C39449 + C39448) * C90541) * C90634 *
                C39125 +
            ((C39365 + C39364) * C181 + (C39450 + C39451) * C90541) * C90634 *
                C39126) *
               C6691) *
              C9074 +
          ((((C41167 + C41168) * C181 + (C41281 + C41282) * C90541) * C90634 *
                C39125 +
            ((C41172 + C41171) * C181 + (C41283 + C41284) * C90541) * C90634 *
                C39126) *
               C90771 -
           (((C41282 + C41281) * C90541 + (C41168 + C41167) * C181) * C90634 *
                C39126 +
            ((C39330 * C3989 + C39128 * C4247 + C39329 * C1794 +
              C39127 * C2066) *
                 C90541 +
             (C39330 * C3891 + C39128 * C4161 + C39329 * C1700 +
              C39127 * C1962) *
                 C181) *
                C90634 * C39125) *
               C90780 -
           (((C39330 * C8222 + C39128 * C8534 + C39329 * C1793 +
              C39127 * C2065) *
                 C90541 +
             (C39330 * C8120 + C39128 * C8422 + C39329 * C1699 +
              C39127 * C1964) *
                 C181) *
                C90634 * C39126 +
            ((C41284 + C41283) * C90541 + (C41171 + C41172) * C181) * C90634 *
                C39125) *
               C6691) *
              C90579)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[9] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C9224 +
            (C39329 * C245 + C39127 * C474 + C39330 * C1011 + C39128 * C1301) *
                C9074 -
            (C39330 * C3891 + C39128 * C4161 + C39329 * C1700 +
             C39127 * C1962) *
                C9225 -
            (C39330 * C4075 + C39128 * C4327 + C39329 * C1879 +
             C39127 * C2159) *
                C90579) *
               C90634 * C39125 +
           ((C39357 + C39356) * C9224 + (C39530 + C39531) * C9074 -
            (C41168 + C41167) * C9225 - (C41391 + C41392) * C90579) *
               C90634 * C39126) *
              C90541 * C90780 +
          (((C41167 + C41168) * C9225 -
            ((C39531 + C39530) * C9074 + (C39356 + C39357) * C9224) +
            (C41392 + C41391) * C90579) *
               C90634 * C39125 +
           ((C41172 + C41171) * C9225 -
            ((C39532 + C39533) * C9074 + (C39361 + C39360) * C9224) +
            (C41393 + C41394) * C90579) *
               C90634 * C39126) *
              C90541 * C90771 +
          (((C39360 + C39361) * C9224 + (C39533 + C39532) * C9074 -
            (C41171 + C41172) * C9225 - (C41394 + C41393) * C90579) *
               C90634 * C39125 +
           ((C39365 + C39364) * C9224 + (C39534 + C39535) * C9074 -
            (C39330 * C8120 + C39128 * C8422 + C39329 * C1699 +
             C39127 * C1964) *
                C9225 -
            (C39330 * C8322 + C39128 * C8647 + C39329 * C1880 +
             C39127 * C2162) *
                C90579) *
               C90634 * C39126) *
              C90541 * C6691)) /
        (p * q * std::sqrt(p + q));
    d2eezx[9] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C6694 +
             (C554 * C116 + C90634 * C561) * C90780 - C584 * C6695 -
             C585 * C90771 + C586 * C6696 + C587 * C6691) *
                C39125 +
            (C584 * C6694 + C585 * C90780 - C586 * C6695 - C587 * C90771 +
             C588 * C6696 + C589 * C6691) *
                C39126) *
               C39127 +
           ((C20050 + C20051 - C20052 - C20053 + C20054 + C20055) * C39125 +
            (C47334 + C47335 - C47336 - C47337 + C47338 + C47339) * C39126) *
               C39128) *
              C9074 +
          (((C2286 * C6695 -
             ((C554 * C1707 + C90634 * C2268) * C90780 +
              (C554 * C1700 + C90634 * C2264) * C6694) +
             C2287 * C90771 - C2288 * C6696 - C2289 * C6691) *
                C39125 +
            (C2288 * C6695 - (C2287 * C90780 + C2286 * C6694) + C2289 * C90771 -
             C2290 * C6696 - C2291 * C6691) *
                C39126) *
               C39127 +
           ((C8771 * C6695 - (C17380 * C90780 + C17381 * C6694) +
             C8772 * C90771 - C8773 * C6696 - C8774 * C6691) *
                C39125 +
            (C8773 * C6695 - (C8772 * C90780 + C8771 * C6694) + C8774 * C90771 -
             (C554 * C8120 + C90634 * C8760) * C6696 -
             (C554 * C8122 + C90634 * C8761) * C6691) *
                C39126) *
               C39128) *
              C90579) *
         C90541) /
        (p * q * std::sqrt(p + q));
    d2eezy[9] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C90634 * C555) * C181 +
              (C554 * C182 + C90634 * C641) * C90541) *
                 C39125 +
             (C648 + C664) * C39126) *
                C39127 +
            ((C14614 * C181 + C14700 * C90541) * C39125 +
             (C39668 + C39669) * C39126) *
                C39128) *
               C90780 -
           (((C39670 + C39671) * C39126 + (C39669 + C39668) * C39125) * C39128 +
            ((C665 + C651) * C39126 + (C664 + C648) * C39125) * C39127) *
               C90771 +
           ((C668 * C39125 + (C656 + C666) * C39126) * C39127 +
            ((C39671 + C39670) * C39125 + (C39672 + C39673) * C39126) *
                C39128) *
               C6691) *
              C9074 +
          ((((C2371 + C2383) * C39125 + (C2374 + C2384) * C39126) * C39127 +
            ((C41591 + C41592) * C39125 + (C41593 + C41594) * C39126) *
                C39128) *
               C90771 -
           (((C41592 + C41591) * C39126 +
             (C17474 * C90541 + C17381 * C181) * C39125) *
                C39128 +
            ((C2383 + C2371) * C39126 +
             ((C554 * C1794 + C90634 * C2368) * C90541 +
              (C554 * C1700 + C90634 * C2264) * C181) *
                 C39125) *
                C39127) *
               C90780 -
           ((((C554 * C8222 + C90634 * C8872) * C90541 +
              (C554 * C8120 + C90634 * C8760) * C181) *
                 C39126 +
             (C41594 + C41593) * C39125) *
                C39128 +
            ((C2385 + C2377) * C39126 + C2386 * C39125) * C39127) *
               C6691) *
              C90579)) /
        (p * q * std::sqrt(p + q));
    d2eezz[9] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C9224 +
             (C554 * C245 + C90634 * C719) * C9074 -
             (C554 * C1700 + C90634 * C2264) * C9225 -
             (C554 * C1879 + C90634 * C2460) * C90579) *
                C39125 +
            (C9687 + C9688 - C9689 - C9690) * C39126) *
               C39127 +
           ((C23433 + C23434 - C23435 - C23436) * C39125 +
            (C10610 + C10609 - C10608 - C10611) * C39126) *
               C39128) *
              C90541 * C90780 +
          (((C9689 - (C9688 + C9687) + C9690) * C39125 +
            (C9693 - (C9692 + C9691) + C9694) * C39126) *
               C39127 +
           ((C10608 - (C10609 + C10610) + C10611) * C39125 +
            (C10612 - (C10613 + C10614) + C10615) * C39126) *
               C39128) *
              C90541 * C90771 +
          ((C9701 * C39125 + (C9697 + C9696 - C9695 - C9698) * C39126) *
               C39127 +
           ((C10614 + C10613 - C10612 - C10615) * C39125 +
            (C1422 * C9224 + C1617 * C9074 -
             (C554 * C8120 + C90634 * C8760) * C9225 -
             (C554 * C8322 + C90634 * C8985) * C90579) *
                C39126) *
               C39128) *
              C90541 * C6691)) /
        (p * q * std::sqrt(p + q));
    d2eexx[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                 C7401 +
             (C39129 * C116 + C39125 * C125 + C39130 * C117 + C39126 * C126) *
                 C7396 -
             (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                 C7402 -
             (C39130 * C118 + C39126 * C127 + C39129 * C117 + C39125 * C126) *
                 C90503) *
                C39127 +
            ((C39862 + C39863) * C7401 + (C39864 + C39865) * C7396 -
             (C39866 + C39867) * C7402 - (C39868 + C39869) * C90503) *
                C39128) *
               C90634 * C9074 +
           (((C39129 * C1697 + C39125 * C1702 + C39130 * C1698 +
              C39126 * C1703) *
                 C7402 -
             ((C39130 * C1706 + C39126 * C1713 + C39129 * C1707 +
               C39125 * C1714) *
                  C7396 +
              (C39130 * C1697 + C39126 * C1702 + C39129 * C1700 +
               C39125 * C1708) *
                  C7401) +
             (C39129 * C1706 + C39125 * C1713 + C39130 * C1705 +
              C39126 * C1712) *
                 C90503) *
                C39127 +
            ((C48578 + C48579) * C7402 -
             ((C43400 + C43401) * C7396 + (C43402 + C43403) * C7401) +
             (C48580 + C48581) * C90503) *
                C39128) *
               C90634 * C90579) *
              C90752 +
          ((((C39867 + C39866) * C7402 -
             ((C39865 + C39864) * C7396 + (C39863 + C39862) * C7401) +
             (C39869 + C39868) * C90503) *
                C39127 +
            ((C41807 + C41808) * C7402 -
             ((C41809 + C41810) * C7396 + (C41811 + C41812) * C7401) +
             (C41813 + C41814) * C90503) *
                C39128) *
               C90634 * C9074 +
           (((C43403 + C43402) * C7401 + (C43401 + C43400) * C7396 -
             (C48579 + C48578) * C7402 - (C48581 + C48580) * C90503) *
                C39127 +
            ((C43404 + C43405) * C7401 + (C43406 + C43407) * C7396 -
             (C39130 * C3894 + C39126 * C3906 + C39129 * C3895 +
              C39125 * C3907) *
                 C7402 -
             (C39130 * C3903 + C39126 * C3912 + C39129 * C3904 +
              C39125 * C3913) *
                 C90503) *
                C39128) *
               C90634 * C90579) *
              C90555)) /
        (p * q * std::sqrt(p + q));
    d2eexy[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                 C923 +
             (C39129 * C182 + C39125 * C188 + C39130 * C183 + C39126 * C189) *
                 C90752 -
             (C39863 + C39862) * C924 - (C39984 + C39985) * C90555) *
                C39127 +
            ((C39862 + C39863) * C923 + (C39985 + C39984) * C90752 -
             (C41811 + C41812) * C924 - (C41922 + C41921) * C90555) *
                C39128) *
               C90634 * C7396 +
           (((C39867 + C39866) * C924 -
             ((C39130 * C184 + C39126 * C190 + C39129 * C183 + C39125 * C189) *
                  C90752 +
              (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                  C923) +
             (C39986 + C39987) * C90555) *
                C39127 +
            ((C41807 + C41808) * C924 -
             ((C39987 + C39986) * C90752 + (C39866 + C39867) * C923) +
             (C41924 + C41923) * C90555) *
                C39128) *
               C90634 * C90503) *
              C9074 +
          ((((C43403 + C43402) * C924 -
             ((C39130 * C1791 + C39126 * C1796 + C39129 * C1794 +
               C39125 * C1799) *
                  C90752 +
              (C39130 * C1697 + C39126 * C1702 + C39129 * C1700 +
               C39125 * C1708) *
                  C923) +
             (C43514 + C43515) * C90555) *
                C39127 +
            ((C43404 + C43405) * C924 -
             ((C43515 + C43514) * C90752 + (C43402 + C43403) * C923) +
             (C43517 + C43516) * C90555) *
                C39128) *
               C90634 * C7396 +
           (((C39129 * C1697 + C39125 * C1702 + C39130 * C1698 +
              C39126 * C1703) *
                 C923 +
             (C39129 * C1791 + C39125 * C1796 + C39130 * C1792 +
              C39126 * C1797) *
                 C90752 -
             (C48579 + C48578) * C924 - (C48716 + C48717) * C90555) *
                C39127 +
            ((C48578 + C48579) * C923 + (C48717 + C48716) * C90752 -
             (C39130 * C3894 + C39126 * C3906 + C39129 * C3895 +
              C39125 * C3907) *
                 C924 -
             (C39130 * C3992 + C39126 * C3998 + C39129 * C3993 +
              C39125 * C3999) *
                 C90555) *
                C39128) *
               C90634 * C90503) *
              C90579)) /
        (p * q * std::sqrt(p + q));
    d2eexz[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                 C9224 +
             (C39129 * C245 + C39125 * C251 + C39130 * C246 + C39126 * C252) *
                 C9074 -
             (C39130 * C1697 + C39126 * C1702 + C39129 * C1700 +
              C39125 * C1708) *
                 C9225 -
             (C39130 * C1878 + C39126 * C1883 + C39129 * C1879 +
              C39125 * C1884) *
                 C90579) *
                C39127 +
            ((C39862 + C39863) * C9224 + (C40100 + C40101) * C9074 -
             (C43402 + C43403) * C9225 - (C43624 + C43625) * C90579) *
                C39128) *
               C90634 * C90752 +
           (((C43403 + C43402) * C9225 -
             ((C40101 + C40100) * C9074 + (C39863 + C39862) * C9224) +
             (C43625 + C43624) * C90579) *
                C39127 +
            ((C43404 + C43405) * C9225 -
             ((C42031 + C42032) * C9074 + (C41811 + C41812) * C9224) +
             (C43626 + C43627) * C90579) *
                C39128) *
               C90634 * C90555) *
              C7396 +
          ((((C39129 * C1697 + C39125 * C1702 + C39130 * C1698 +
              C39126 * C1703) *
                 C9225 -
             ((C39130 * C247 + C39126 * C253 + C39129 * C246 + C39125 * C252) *
                  C9074 +
              (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                  C9224) +
             (C39129 * C1878 + C39125 * C1883 + C39130 * C1877 +
              C39126 * C1882) *
                 C90579) *
                C39127 +
            ((C48578 + C48579) * C9225 -
             ((C40103 + C40102) * C9074 + (C39866 + C39867) * C9224) +
             (C48852 + C48853) * C90579) *
                C39128) *
               C90634 * C90752 +
           (((C39867 + C39866) * C9224 + (C40102 + C40103) * C9074 -
             (C48579 + C48578) * C9225 - (C48853 + C48852) * C90579) *
                C39127 +
            ((C41807 + C41808) * C9224 + (C42033 + C42034) * C9074 -
             (C39130 * C3894 + C39126 * C3906 + C39129 * C3895 +
              C39125 * C3907) *
                 C9225 -
             (C39130 * C4078 + C39126 * C4084 + C39129 * C4079 +
              C39125 * C4085) *
                 C90579) *
                C39128) *
               C90634 * C90555) *
              C90503)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                 C7401 +
             (C39329 * C116 + C39127 * C314 + C39330 * C839 + C39128 * C1098) *
                 C7396 -
             (C39356 + C39357) * C7402 - (C39358 + C39359) * C90503) *
                C90634 * C39125 +
            ((C39357 + C39356) * C7401 + (C39359 + C39358) * C7396 -
             (C39361 + C39360) * C7402 - (C39363 + C39362) * C90503) *
                C90634 * C39126) *
               C9074 +
           (((C41167 + C41168) * C7402 -
             ((C39330 * C3900 + C39128 * C4167 + C39329 * C1707 +
               C39127 * C1966) *
                  C7396 +
              (C39330 * C3891 + C39128 * C4161 + C39329 * C1700 +
               C39127 * C1962) *
                  C7401) +
             (C41169 + C41170) * C90503) *
                C90634 * C39125 +
            ((C41172 + C41171) * C7402 -
             ((C41170 + C41169) * C7396 + (C41168 + C41167) * C7401) +
             (C41174 + C41173) * C90503) *
                C90634 * C39126) *
               C90579) *
              C90752 +
          ((((C40220 + C40221) * C7402 -
             ((C39330 * C2577 + C39128 * C2831 + C39329 * C839 +
               C39127 * C1098) *
                  C7396 +
              (C39330 * C2570 + C39128 * C2827 + C39329 * C832 +
               C39127 * C1094) *
                  C7401) +
             (C40222 + C40223) * C90503) *
                C90634 * C39125 +
            ((C40225 + C40224) * C7402 -
             ((C40223 + C40222) * C7396 + (C40221 + C40220) * C7401) +
             (C40227 + C40226) * C90503) *
                C90634 * C39126) *
               C9074 +
           (((C39329 * C3891 + C39127 * C4161 + C39330 * C3896 +
              C39128 * C4166) *
                 C7401 +
             (C39329 * C3900 + C39127 * C4167 + C39330 * C3905 +
              C39128 * C4172) *
                 C7396 -
             (C48992 + C48993) * C7402 - (C48994 + C48995) * C90503) *
                C90634 * C39125 +
            ((C48993 + C48992) * C7401 + (C48995 + C48994) * C7396 -
             (C39330 * C3894 + C39128 * C4164 + C39329 * C3893 +
              C39127 * C4163) *
                 C7402 -
             (C39330 * C3903 + C39128 * C4170 + C39329 * C3902 +
              C39127 * C4169) *
                 C90503) *
                C90634 * C39126) *
               C90579) *
              C90555)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                 C923 +
             (C39329 * C182 + C39127 * C394 + C39330 * C927 + C39128 * C1195) *
                 C90752 -
             (C39330 * C2570 + C39128 * C2827 + C39329 * C832 +
              C39127 * C1094) *
                 C924 -
             (C39330 * C2663 + C39128 * C2921 + C39329 * C927 +
              C39127 * C1195) *
                 C90555) *
                C90634 * C39125 +
            ((C39357 + C39356) * C923 + (C39446 + C39447) * C90752 -
             (C40221 + C40220) * C924 - (C40334 + C40335) * C90555) *
                C90634 * C39126) *
               C7396 +
           (((C40220 + C40221) * C924 -
             ((C39447 + C39446) * C90752 + (C39356 + C39357) * C923) +
             (C40335 + C40334) * C90555) *
                C90634 * C39125 +
            ((C40225 + C40224) * C924 -
             ((C39448 + C39449) * C90752 + (C39361 + C39360) * C923) +
             (C40336 + C40337) * C90555) *
                C90634 * C39126) *
               C90503) *
              C9074 +
          ((((C39329 * C3891 + C39127 * C4161 + C39330 * C3896 +
              C39128 * C4166) *
                 C924 -
             ((C39330 * C3989 + C39128 * C4247 + C39329 * C1794 +
               C39127 * C2066) *
                  C90752 +
              (C39330 * C3891 + C39128 * C4161 + C39329 * C1700 +
               C39127 * C1962) *
                  C923) +
             (C39329 * C3989 + C39127 * C4247 + C39330 * C3994 +
              C39128 * C4248) *
                 C90555) *
                C90634 * C39125 +
            ((C48993 + C48992) * C924 -
             ((C41282 + C41281) * C90752 + (C41168 + C41167) * C923) +
             (C49130 + C49131) * C90555) *
                C90634 * C39126) *
               C7396 +
           (((C41167 + C41168) * C923 + (C41281 + C41282) * C90752 -
             (C48992 + C48993) * C924 - (C49131 + C49130) * C90555) *
                C90634 * C39125 +
            ((C41172 + C41171) * C923 + (C41283 + C41284) * C90752 -
             (C39330 * C3894 + C39128 * C4164 + C39329 * C3893 +
              C39127 * C4163) *
                 C924 -
             (C39330 * C3992 + C39128 * C4252 + C39329 * C3991 +
              C39127 * C4251) *
                 C90555) *
                C90634 * C39126) *
               C90503) *
              C90579)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                 C9224 +
             (C39329 * C245 + C39127 * C474 + C39330 * C1011 + C39128 * C1301) *
                 C9074 -
             (C39330 * C3891 + C39128 * C4161 + C39329 * C1700 +
              C39127 * C1962) *
                 C9225 -
             (C39330 * C4075 + C39128 * C4327 + C39329 * C1879 +
              C39127 * C2159) *
                 C90579) *
                C90634 * C39125 +
            ((C39357 + C39356) * C9224 + (C39530 + C39531) * C9074 -
             (C41168 + C41167) * C9225 - (C41391 + C41392) * C90579) *
                C90634 * C39126) *
               C90752 +
           (((C39329 * C3891 + C39127 * C4161 + C39330 * C3896 +
              C39128 * C4166) *
                 C9225 -
             ((C39330 * C2745 + C39128 * C3017 + C39329 * C1011 +
               C39127 * C1301) *
                  C9074 +
              (C39330 * C2570 + C39128 * C2827 + C39329 * C832 +
               C39127 * C1094) *
                  C9224) +
             (C39329 * C4075 + C39127 * C4327 + C39330 * C4080 +
              C39128 * C4330) *
                 C90579) *
                C90634 * C39125 +
            ((C48993 + C48992) * C9225 -
             ((C40444 + C40445) * C9074 + (C40221 + C40220) * C9224) +
             (C49266 + C49267) * C90579) *
                C90634 * C39126) *
               C90555) *
              C7396 +
          ((((C41167 + C41168) * C9225 -
             ((C39531 + C39530) * C9074 + (C39356 + C39357) * C9224) +
             (C41392 + C41391) * C90579) *
                C90634 * C39125 +
            ((C41172 + C41171) * C9225 -
             ((C39532 + C39533) * C9074 + (C39361 + C39360) * C9224) +
             (C41393 + C41394) * C90579) *
                C90634 * C39126) *
               C90752 +
           (((C40220 + C40221) * C9224 + (C40445 + C40444) * C9074 -
             (C48992 + C48993) * C9225 - (C49267 + C49266) * C90579) *
                C90634 * C39125 +
            ((C40225 + C40224) * C9224 + (C40446 + C40447) * C9074 -
             (C39330 * C3894 + C39128 * C4164 + C39329 * C3893 +
              C39127 * C4163) *
                 C9225 -
             (C39330 * C4078 + C39128 * C4332 + C39329 * C4077 +
              C39127 * C4329) *
                 C90579) *
                C90634 * C39126) *
               C90555) *
              C90503)) /
        (p * q * std::sqrt(p + q));
    d2eezx[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C90634 * C555) * C7401 +
              (C554 * C116 + C90634 * C561) * C7396 - C584 * C7402 -
              C585 * C90503) *
                 C39125 +
             (C584 * C7401 + C585 * C7396 - C586 * C7402 - C587 * C90503) *
                 C39126) *
                C39127 +
            ((C20743 + C20744 - C20745 - C20746) * C39125 +
             (C48230 + C48231 - C48232 - C48233) * C39126) *
                C39128) *
               C9074 +
           (((C2286 * C7402 -
              ((C554 * C1707 + C90634 * C2268) * C7396 +
               (C554 * C1700 + C90634 * C2264) * C7401) +
              C2287 * C90503) *
                 C39125 +
             (C2288 * C7402 - (C2287 * C7396 + C2286 * C7401) +
              C2289 * C90503) *
                 C39126) *
                C39127 +
            ((C21647 - (C21648 + C21649) + C21650) * C39125 +
             (C49398 - (C49399 + C49400) + C49401) * C39126) *
                C39128) *
               C90579) *
              C90752 +
          ((((C20745 - (C20744 + C20743) + C20746) * C39125 +
             (C48232 - (C48231 + C48230) + C48233) * C39126) *
                C39127 +
            ((C20749 - (C20748 + C20747) + C20750) * C39125 +
             (C48234 - (C48235 + C48236) + C48237) * C39126) *
                C39128) *
               C9074 +
           (((C21649 + C21648 - C21647 - C21650) * C39125 +
             (C49400 + C49399 - C49398 - C49401) * C39126) *
                C39127 +
            ((C21654 + C21653 - C21659 - C21660) * C39125 +
             (C21657 * C7401 + C21658 * C7396 -
              (C554 * C3894 + C90634 * C4410) * C7402 -
              (C554 * C3903 + C90634 * C4416) * C90503) *
                 C39126) *
                C39128) *
               C90579) *
              C90555)) /
        (p * q * std::sqrt(p + q));
    d2eezy[10] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((((C554 * C107 + C90634 * C555) * C923 +
                        (C554 * C182 + C90634 * C641) * C90752 - C14614 * C924 -
                        C14700 * C90555) *
                           C39125 +
                       (C1503 + C1504 - C1505 - C1522) * C39126) *
                          C39127 +
                      ((C14614 * C923 + C14700 * C90752 - C14616 * C924 -
                        C14701 * C90555) *
                           C39125 +
                       (C40650 + C40651 - C40652 - C40653) * C39126) *
                          C39128) *
                         C7396 +
                     (((C1505 - (C1504 + C1503) + C1522) * C39125 +
                       (C1510 - (C1509 + C1508) + C1524) * C39126) *
                          C39127 +
                      ((C40652 - (C40651 + C40650) + C40653) * C39125 +
                       (C40654 - (C40655 + C40656) + C40657) * C39126) *
                          C39128) *
                         C90503) *
                        C9074 +
                    ((((C17381 * C924 -
                        ((C554 * C1794 + C90634 * C2368) * C90752 +
                         (C554 * C1700 + C90634 * C2264) * C923) +
                        C17474 * C90555) *
                           C39125 +
                       (C10502 - (C10503 + C10504) + C10505) * C39126) *
                          C39127 +
                      ((C17379 * C924 - (C17474 * C90752 + C17381 * C923) +
                        C17475 * C90555) *
                           C39125 +
                       (C51594 - (C51595 + C51596) + C51597) * C39126) *
                          C39128) *
                         C7396 +
                     (((C10504 + C10503 - C10502 - C10505) * C39125 +
                       (C10508 + C10507 - C10506 - C10509) * C39126) *
                          C39127 +
                      ((C51596 + C51595 - C51594 - C51597) * C39125 +
                       (C8773 * C923 + C8885 * C90752 -
                        (C554 * C3894 + C90634 * C4410) * C924 -
                        (C554 * C3992 + C90634 * C4498) * C90555) *
                           C39126) *
                          C39128) *
                         C90503) *
                        C90579)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C90634 * C555) * C9224 +
              (C554 * C245 + C90634 * C719) * C9074 -
              (C554 * C1700 + C90634 * C2264) * C9225 -
              (C554 * C1879 + C90634 * C2460) * C90579) *
                 C39125 +
             (C9687 + C9688 - C9689 - C9690) * C39126) *
                C39127 +
            ((C23433 + C23434 - C23435 - C23436) * C39125 + C51732 * C39126) *
                C39128) *
               C90752 +
           (((C23435 - (C23434 + C23433) + C23436) * C39125 + C51733 * C39126) *
                C39127 +
            ((C23439 - (C23438 + C23437) + C23440) * C39125 +
             (C23441 - (C23442 + C23443) + C23444) * C39126) *
                C39128) *
               C90555) *
              C7396 +
          ((((C9689 - (C9688 + C9687) + C9690) * C39125 +
             (C9693 - (C9692 + C9691) + C9694) * C39126) *
                C39127 +
            (C51733 * C39125 + (C10612 - (C10613 + C10614) + C10615) * C39126) *
                C39128) *
               C90752 +
           ((C51732 * C39125 + (C10614 + C10613 - C10612 - C10615) * C39126) *
                C39127 +
            ((C23443 + C23442 - C23441 - C23444) * C39125 +
             (C3124 * C9224 + C3307 * C9074 -
              (C554 * C3894 + C90634 * C4410) * C9225 -
              (C554 * C4078 + C90634 * C4578) * C90579) *
                 C39126) *
                C39128) *
               C90555) *
              C90503)) /
        (p * q * std::sqrt(p + q));
    d2eexx[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C7401 +
            (C39129 * C116 + C39125 * C125 + C39130 * C117 + C39126 * C126) *
                C7396 -
            (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                C7402 -
            (C39130 * C118 + C39126 * C127 + C39129 * C117 + C39125 * C126) *
                C90503) *
               C39127 +
           ((C39862 + C39863) * C7401 + (C39864 + C39865) * C7396 -
            (C39866 + C39867) * C7402 - (C39868 + C39869) * C90503) *
               C39128) *
              C90634 * C90782 +
          (((C39129 * C1697 + C39125 * C1702 + C39130 * C1698 +
             C39126 * C1703) *
                C7402 -
            ((C39130 * C1706 + C39126 * C1713 + C39129 * C1707 +
              C39125 * C1714) *
                 C7396 +
             (C39130 * C1697 + C39126 * C1702 + C39129 * C1700 +
              C39125 * C1708) *
                 C7401) +
            (C39129 * C1706 + C39125 * C1713 + C39130 * C1705 +
             C39126 * C1712) *
                C90503) *
               C39127 +
           ((C48578 + C48579) * C7402 -
            ((C43400 + C43401) * C7396 + (C43402 + C43403) * C7401) +
            (C48580 + C48581) * C90503) *
               C39128) *
              C90634 * C90777 +
          (((C39129 * C4656 + C39125 * C4660 + C39130 * C4657 +
             C39126 * C4661) *
                C7401 +
            (C39129 * C4663 + C39125 * C4668 + C39130 * C4664 +
             C39126 * C4669) *
                C7396 -
            (C39130 * C4658 + C39126 * C4662 + C39129 * C4657 +
             C39125 * C4661) *
                C7402 -
            (C39130 * C4665 + C39126 * C4670 + C39129 * C4664 +
             C39125 * C4669) *
                C90503) *
               C39127 +
           ((C45252 + C45253) * C7401 + (C45254 + C45255) * C7396 -
            (C39130 * C5469 + C39126 * C5475 + C39129 * C5470 +
             C39125 * C5476) *
                C7402 -
            (C39130 * C5472 + C39126 * C5478 + C39129 * C5473 +
             C39125 * C5479) *
                C90503) *
               C39128) *
              C90634 * C10691) *
         C90541) /
        (p * q * std::sqrt(p + q));
    d2eexy[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                 C181 +
             (C39129 * C182 + C39125 * C188 + C39130 * C183 + C39126 * C189) *
                 C90541) *
                C39127 +
            ((C39862 + C39863) * C181 + (C39985 + C39984) * C90541) * C39128) *
               C90634 * C7396 -
           (((C39987 + C39986) * C90541 + (C39866 + C39867) * C181) * C39128 +
            ((C39130 * C184 + C39126 * C190 + C39129 * C183 + C39125 * C189) *
                 C90541 +
             (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                 C181) *
                C39127) *
               C90634 * C90503) *
              C90782 +
          ((((C39129 * C1697 + C39125 * C1702 + C39130 * C1698 +
              C39126 * C1703) *
                 C181 +
             (C39129 * C1791 + C39125 * C1796 + C39130 * C1792 +
              C39126 * C1797) *
                 C90541) *
                C39127 +
            ((C48578 + C48579) * C181 + (C48717 + C48716) * C90541) * C39128) *
               C90634 * C90503 -
           (((C43515 + C43514) * C90541 + (C43402 + C43403) * C181) * C39128 +
            ((C39130 * C1791 + C39126 * C1796 + C39129 * C1794 +
              C39125 * C1799) *
                 C90541 +
             (C39130 * C1697 + C39126 * C1702 + C39129 * C1700 +
              C39125 * C1708) *
                 C181) *
                C39127) *
               C90634 * C7396) *
              C90777 +
          ((((C39129 * C4656 + C39125 * C4660 + C39130 * C4657 +
              C39126 * C4661) *
                 C181 +
             (C39129 * C4746 + C39125 * C4750 + C39130 * C4747 +
              C39126 * C4751) *
                 C90541) *
                C39127 +
            ((C45252 + C45253) * C181 + (C45359 + C45358) * C90541) * C39128) *
               C90634 * C7396 -
           (((C39130 * C5555 + C39126 * C5558 + C39129 * C5556 +
              C39125 * C5559) *
                 C90541 +
             (C39130 * C5469 + C39126 * C5475 + C39129 * C5470 +
              C39125 * C5476) *
                 C181) *
                C39128 +
            ((C39130 * C4748 + C39126 * C4752 + C39129 * C4747 +
              C39125 * C4751) *
                 C90541 +
             (C39130 * C4658 + C39126 * C4662 + C39129 * C4657 +
              C39125 * C4661) *
                 C181) *
                C39127) *
               C90634 * C90503) *
              C10691)) /
        (p * q * std::sqrt(p + q));
    d2eexz[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C10840 +
            (C39129 * C245 + C39125 * C251 + C39130 * C246 + C39126 * C252) *
                C90782 -
            (C39130 * C1697 + C39126 * C1702 + C39129 * C1700 +
             C39125 * C1708) *
                C10841 -
            (C39130 * C1878 + C39126 * C1883 + C39129 * C1879 +
             C39125 * C1884) *
                C90777 +
            (C39129 * C4656 + C39125 * C4660 + C39130 * C4657 +
             C39126 * C4661) *
                C10842 +
            (C39129 * C4831 + C39125 * C4835 + C39130 * C4832 +
             C39126 * C4836) *
                C10691) *
               C39127 +
           ((C39862 + C39863) * C10840 + (C40100 + C40101) * C90782 -
            (C43402 + C43403) * C10841 - (C43624 + C43625) * C90777 +
            (C45252 + C45253) * C10842 + (C45462 + C45463) * C10691) *
               C39128) *
              C90634 * C90541 * C7396 +
          (((C39129 * C1697 + C39125 * C1702 + C39130 * C1698 +
             C39126 * C1703) *
                C10841 -
            ((C39130 * C247 + C39126 * C253 + C39129 * C246 + C39125 * C252) *
                 C90782 +
             (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                 C10840) +
            (C39129 * C1878 + C39125 * C1883 + C39130 * C1877 +
             C39126 * C1882) *
                C90777 -
            (C39130 * C4658 + C39126 * C4662 + C39129 * C4657 +
             C39125 * C4661) *
                C10842 -
            (C39130 * C4833 + C39126 * C4837 + C39129 * C4832 +
             C39125 * C4836) *
                C10691) *
               C39127 +
           ((C48578 + C48579) * C10841 -
            ((C40103 + C40102) * C90782 + (C39866 + C39867) * C10840) +
            (C48852 + C48853) * C90777 -
            (C39130 * C5469 + C39126 * C5475 + C39129 * C5470 +
             C39125 * C5476) *
                C10842 -
            (C39130 * C5635 + C39126 * C5638 + C39129 * C5636 +
             C39125 * C5639) *
                C10691) *
               C39128) *
              C90634 * C90541 * C90503)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C7401 +
            (C39329 * C116 + C39127 * C314 + C39330 * C839 + C39128 * C1098) *
                C7396 -
            (C39356 + C39357) * C7402 - (C39358 + C39359) * C90503) *
               C90634 * C39125 +
           ((C39357 + C39356) * C7401 + (C39359 + C39358) * C7396 -
            (C39361 + C39360) * C7402 - (C39363 + C39362) * C90503) *
               C90634 * C39126) *
              C90782 +
          (((C41167 + C41168) * C7402 -
            ((C39330 * C3900 + C39128 * C4167 + C39329 * C1707 +
              C39127 * C1966) *
                 C7396 +
             (C39330 * C3891 + C39128 * C4161 + C39329 * C1700 +
              C39127 * C1962) *
                 C7401) +
            (C41169 + C41170) * C90503) *
               C90634 * C39125 +
           ((C41172 + C41171) * C7402 -
            ((C41170 + C41169) * C7396 + (C41168 + C41167) * C7401) +
            (C41174 + C41173) * C90503) *
               C90634 * C39126) *
              C90777 +
          (((C39329 * C4656 + C39127 * C4913 + C39330 * C5471 +
             C39128 * C5717) *
                C7401 +
            (C39329 * C4663 + C39127 * C4917 + C39330 * C5474 +
             C39128 * C5720) *
                C7396 -
            (C44620 + C44621) * C7402 - (C44622 + C44623) * C90503) *
               C90634 * C39125 +
           ((C44621 + C44620) * C7401 + (C44623 + C44622) * C7396 -
            (C39330 * C5469 + C39128 * C5715 + C39329 * C4658 +
             C39127 * C4915) *
                C7402 -
            (C39330 * C5472 + C39128 * C5718 + C39329 * C4665 +
             C39127 * C4919) *
                C90503) *
               C90634 * C39126) *
              C10691) *
         C90541) /
        (p * q * std::sqrt(p + q));
    d2eeyy[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                 C181 +
             (C39329 * C182 + C39127 * C394 + C39330 * C927 + C39128 * C1195) *
                 C90541) *
                C90634 * C39125 +
            ((C39357 + C39356) * C181 + (C39446 + C39447) * C90541) * C90634 *
                C39126) *
               C7396 -
           (((C39448 + C39449) * C90541 + (C39361 + C39360) * C181) * C90634 *
                C39126 +
            ((C39447 + C39446) * C90541 + (C39356 + C39357) * C181) * C90634 *
                C39125) *
               C90503) *
              C90782 +
          ((((C41167 + C41168) * C181 + (C41281 + C41282) * C90541) * C90634 *
                C39125 +
            ((C41172 + C41171) * C181 + (C41283 + C41284) * C90541) * C90634 *
                C39126) *
               C90503 -
           (((C41282 + C41281) * C90541 + (C41168 + C41167) * C181) * C90634 *
                C39126 +
            ((C39330 * C3989 + C39128 * C4247 + C39329 * C1794 +
              C39127 * C2066) *
                 C90541 +
             (C39330 * C3891 + C39128 * C4161 + C39329 * C1700 +
              C39127 * C1962) *
                 C181) *
                C90634 * C39125) *
               C7396) *
              C90777 +
          ((((C39329 * C4656 + C39127 * C4913 + C39330 * C5471 +
              C39128 * C5717) *
                 C181 +
             (C39329 * C4746 + C39127 * C5007 + C39330 * C5557 +
              C39128 * C5795) *
                 C90541) *
                C90634 * C39125 +
            ((C44621 + C44620) * C181 + (C44726 + C44727) * C90541) * C90634 *
                C39126) *
               C7396 -
           (((C39330 * C5555 + C39128 * C5797 + C39329 * C4748 +
              C39127 * C5009) *
                 C90541 +
             (C39330 * C5469 + C39128 * C5715 + C39329 * C4658 +
              C39127 * C4915) *
                 C181) *
                C90634 * C39126 +
            ((C44727 + C44726) * C90541 + (C44620 + C44621) * C181) * C90634 *
                C39125) *
               C90503) *
              C10691)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C10840 +
            (C39329 * C245 + C39127 * C474 + C39330 * C1011 + C39128 * C1301) *
                C90782 -
            (C39330 * C3891 + C39128 * C4161 + C39329 * C1700 +
             C39127 * C1962) *
                C10841 -
            (C39330 * C4075 + C39128 * C4327 + C39329 * C1879 +
             C39127 * C2159) *
                C90777 +
            (C39329 * C4656 + C39127 * C4913 + C39330 * C5471 +
             C39128 * C5717) *
                C10842 +
            (C39329 * C4831 + C39127 * C5095 + C39330 * C5637 +
             C39128 * C5872) *
                C10691) *
               C90634 * C39125 +
           ((C39357 + C39356) * C10840 + (C39530 + C39531) * C90782 -
            (C41168 + C41167) * C10841 - (C41391 + C41392) * C90777 +
            (C44621 + C44620) * C10842 + (C44830 + C44831) * C10691) *
               C90634 * C39126) *
              C90541 * C7396 +
          (((C41167 + C41168) * C10841 -
            ((C39531 + C39530) * C90782 + (C39356 + C39357) * C10840) +
            (C41392 + C41391) * C90777 - (C44620 + C44621) * C10842 -
            (C44831 + C44830) * C10691) *
               C90634 * C39125 +
           ((C41172 + C41171) * C10841 -
            ((C39532 + C39533) * C90782 + (C39361 + C39360) * C10840) +
            (C41393 + C41394) * C90777 -
            (C39330 * C5469 + C39128 * C5715 + C39329 * C4658 +
             C39127 * C4915) *
                C10842 -
            (C39330 * C5635 + C39128 * C5874 + C39329 * C4833 +
             C39127 * C5097) *
                C10691) *
               C90634 * C39126) *
              C90541 * C90503)) /
        (p * q * std::sqrt(p + q));
    d2eezx[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C7401 +
             (C554 * C116 + C90634 * C561) * C7396 - C584 * C7402 -
             C585 * C90503) *
                C39125 +
            (C584 * C7401 + C585 * C7396 - C586 * C7402 - C587 * C90503) *
                C39126) *
               C39127 +
           ((C20743 + C20744 - C20745 - C20746) * C39125 +
            (C48230 + C48231 - C48232 - C48233) * C39126) *
               C39128) *
              C90782 +
          (((C2286 * C7402 -
             ((C554 * C1707 + C90634 * C2268) * C7396 +
              (C554 * C1700 + C90634 * C2264) * C7401) +
             C2287 * C90503) *
                C39125 +
            (C2288 * C7402 - (C2287 * C7396 + C2286 * C7401) + C2289 * C90503) *
                C39126) *
               C39127 +
           ((C21647 - (C21648 + C21649) + C21650) * C39125 +
            (C49398 - (C49399 + C49400) + C49401) * C39126) *
               C39128) *
              C90777 +
          ((((C554 * C4656 + C90634 * C5191) * C7401 +
             (C554 * C4663 + C90634 * C5195) * C7396 - C5208 * C7402 -
             C5209 * C90503) *
                C39125 +
            (C5208 * C7401 + C5209 * C7396 - C5210 * C7402 - C5211 * C90503) *
                C39126) *
               C39127 +
           ((C18856 * C7401 + C18857 * C7396 - C44934 * C7402 -
             C44935 * C90503) *
                C39125 +
            (C44934 * C7401 + C44935 * C7396 -
             (C554 * C5469 + C90634 * C5949) * C7402 -
             (C554 * C5472 + C90634 * C5952) * C90503) *
                C39126) *
               C39128) *
              C10691) *
         C90541) /
        (p * q * std::sqrt(p + q));
    d2eezy[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C90634 * C555) * C181 +
              (C554 * C182 + C90634 * C641) * C90541) *
                 C39125 +
             (C648 + C664) * C39126) *
                C39127 +
            ((C14614 * C181 + C14700 * C90541) * C39125 +
             (C39668 + C39669) * C39126) *
                C39128) *
               C7396 -
           (((C39670 + C39671) * C39126 + (C39669 + C39668) * C39125) * C39128 +
            ((C665 + C651) * C39126 + (C664 + C648) * C39125) * C39127) *
               C90503) *
              C90782 +
          ((((C2371 + C2383) * C39125 + (C2374 + C2384) * C39126) * C39127 +
            ((C41591 + C41592) * C39125 + (C41593 + C41594) * C39126) *
                C39128) *
               C90503 -
           (((C41592 + C41591) * C39126 +
             (C17474 * C90541 + C17381 * C181) * C39125) *
                C39128 +
            ((C2383 + C2371) * C39126 +
             ((C554 * C1794 + C90634 * C2368) * C90541 +
              (C554 * C1700 + C90634 * C2264) * C181) *
                 C39125) *
                C39127) *
               C7396) *
              C90777 +
          (((((C554 * C4656 + C90634 * C5191) * C181 +
              (C554 * C4746 + C90634 * C5285) * C90541) *
                 C39125 +
             (C5290 + C5298) * C39126) *
                C39127 +
            ((C18856 * C181 + C18943 * C90541) * C39125 +
             (C45034 + C45038) * C39126) *
                C39128) *
               C7396 -
           ((((C554 * C5555 + C90634 * C6031) * C90541 +
              (C554 * C5469 + C90634 * C5949) * C181) *
                 C39126 +
             (C45038 + C45034) * C39125) *
                C39128 +
            ((C5299 + C5293) * C39126 + (C5298 + C5290) * C39125) * C39127) *
               C90503) *
              C10691)) /
        (p * q * std::sqrt(p + q));
    d2eezz[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C10840 +
             (C554 * C245 + C90634 * C719) * C90782 -
             (C554 * C1700 + C90634 * C2264) * C10841 -
             (C554 * C1879 + C90634 * C2460) * C90777 +
             (C554 * C4656 + C90634 * C5191) * C10842 +
             (C554 * C4831 + C90634 * C5373) * C10691) *
                C39125 +
            (C11300 + C11301 - C11302 - C11303 + C11304 + C11305) * C39126) *
               C39127 +
           ((C26368 + C26369 - C26370 - C26371 + C26372 + C26373) * C39125 +
            (C52616 + C52617 - C52618 - C52619 + C52620 + C52621) * C39126) *
               C39128) *
              C90541 * C7396 +
          (((C11302 - (C11301 + C11300) + C11303 - C11304 - C11305) * C39125 +
            (C11308 - (C11307 + C11306) + C11309 - C11310 - C11311) * C39126) *
               C39127 +
           ((C52618 - (C52617 + C52616) + C52619 - C52620 - C52621) * C39125 +
            (C8773 * C10841 - (C1615 * C90782 + C1420 * C10840) +
             C8998 * C90777 - (C554 * C5469 + C90634 * C5949) * C10842 -
             (C554 * C5635 + C90634 * C6108) * C10691) *
                C39126) *
               C39128) *
              C90541 * C90503)) /
        (p * q * std::sqrt(p + q));
    d2eexx[12] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
               C103 +
           (C39129 * C116 + C39125 * C125 + C39130 * C117 + C39126 * C126) *
               C92 -
           (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
               C104 -
           (C39130 * C118 + C39126 * C127 + C39129 * C117 + C39125 * C126) *
               C93 +
           (C39129 * C109 + C39125 * C115 + C39130 * C110 + C39126 * C119) *
               C105 +
           (C39129 * C118 + C39125 * C127 + C39130 * C120 + C39126 * C128) *
               C94 -
           (C39130 * C111 + C39126 * C121 + C39129 * C110 + C39125 * C119) *
               C106 -
           (C39130 * C122 + C39126 * C129 + C39129 * C120 + C39125 * C128) *
               C95) *
              C39127 +
          ((C39129 * C832 + C39125 * C840 + C39130 * C829 + C39126 * C834) *
               C103 +
           (C39129 * C839 + C39125 * C846 + C39130 * C838 + C39126 * C845) *
               C92 -
           (C39130 * C830 + C39126 * C835 + C39129 * C829 + C39125 * C834) *
               C104 -
           (C39130 * C837 + C39126 * C844 + C39129 * C838 + C39125 * C845) *
               C93 +
           (C39129 * C830 + C39125 * C835 + C39130 * C831 + C39126 * C836) *
               C105 +
           (C39129 * C837 + C39125 * C844 + C39130 * C841 + C39126 * C847) *
               C94 -
           (C39130 * C833 + C39126 * C842 + C39129 * C831 + C39125 * C836) *
               C106 -
           (C39130 * C843 + C39126 * C848 + C39129 * C841 + C39125 * C847) *
               C95) *
              C39128) *
         C90634 * C90567 * C90541) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C88316 +
            (C39129 * C116 + C39125 * C125 + C39130 * C117 + C39126 * C126) *
                C90744 -
            (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                C88309 -
            (C39130 * C118 + C39126 * C127 + C39129 * C117 + C39125 * C126) *
                C90503) *
               C39127 +
           ((C39862 + C39863) * C88316 + (C39864 + C39865) * C90744 -
            (C39866 + C39867) * C88309 - (C39868 + C39869) * C90503) *
               C39128) *
              C90634 * C90567 * C2565 +
          (((C39867 + C39866) * C88309 -
            ((C39865 + C39864) * C90744 + (C39863 + C39862) * C88316) +
            (C39869 + C39868) * C90503) *
               C39127 +
           ((C41807 + C41808) * C88309 -
            ((C41809 + C41810) * C90744 + (C41811 + C41812) * C88316) +
            (C41813 + C41814) * C90503) *
               C39128) *
              C90634 * C90567 * C2566 +
          (((C41812 + C41811) * C88316 + (C41810 + C41809) * C90744 -
            (C41808 + C41807) * C88309 - (C41814 + C41813) * C90503) *
               C39127 +
           ((C39129 * C3367 + C39125 * C3373 + C39130 * C3366 +
             C39126 * C3372) *
                C88316 +
            (C39129 * C3370 + C39125 * C3376 + C39130 * C3369 +
             C39126 * C3375) *
                C90744 -
            (C39130 * C3365 + C39126 * C3371 + C39129 * C3366 +
             C39125 * C3372) *
                C88309 -
            (C39130 * C3368 + C39126 * C3374 + C39129 * C3369 +
             C39125 * C3375) *
                C90503) *
               C39128) *
              C90634 * C90567 * C2567)) /
            (p * q * std::sqrt(p + q));
    d2eexy[12] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C181 +
            (C39129 * C182 + C39125 * C188 + C39130 * C183 + C39126 * C189) *
                C90541) *
               C39127 +
           ((C39129 * C832 + C39125 * C840 + C39130 * C829 + C39126 * C834) *
                C181 +
            (C39129 * C927 + C39125 * C932 + C39130 * C926 + C39126 * C931) *
                C90541) *
               C39128) *
              C90634 * C92 -
          (((C39130 * C925 + C39126 * C930 + C39129 * C926 + C39125 * C931) *
                C90541 +
            (C39130 * C830 + C39126 * C835 + C39129 * C829 + C39125 * C834) *
                C181) *
               C39128 +
           ((C39130 * C184 + C39126 * C190 + C39129 * C183 + C39125 * C189) *
                C90541 +
            (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                C181) *
               C39127) *
              C90634 * C93 +
          (((C39129 * C109 + C39125 * C115 + C39130 * C110 + C39126 * C119) *
                C181 +
            (C39129 * C184 + C39125 * C190 + C39130 * C185 + C39126 * C191) *
                C90541) *
               C39127 +
           ((C39129 * C830 + C39125 * C835 + C39130 * C831 + C39126 * C836) *
                C181 +
            (C39129 * C925 + C39125 * C930 + C39130 * C928 + C39126 * C933) *
                C90541) *
               C39128) *
              C90634 * C94 -
          (((C39130 * C929 + C39126 * C934 + C39129 * C928 + C39125 * C933) *
                C90541 +
            (C39130 * C833 + C39126 * C842 + C39129 * C831 + C39125 * C836) *
                C181) *
               C39128 +
           ((C39130 * C186 + C39126 * C192 + C39129 * C185 + C39125 * C191) *
                C90541 +
            (C39130 * C111 + C39126 * C121 + C39129 * C110 + C39125 * C119) *
                C181) *
               C39127) *
              C90634 * C95) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C2660 +
            (C39129 * C182 + C39125 * C188 + C39130 * C183 + C39126 * C189) *
                C2565 -
            (C39863 + C39862) * C2661 - (C39984 + C39985) * C2566 +
            (C41812 + C41811) * C2662 + (C41921 + C41922) * C2567) *
               C39127 +
           ((C39862 + C39863) * C2660 + (C39985 + C39984) * C2565 -
            (C41811 + C41812) * C2661 - (C41922 + C41921) * C2566 +
            (C39129 * C3367 + C39125 * C3373 + C39130 * C3366 +
             C39126 * C3372) *
                C2662 +
            (C39129 * C3433 + C39125 * C3436 + C39130 * C3432 +
             C39126 * C3435) *
                C2567) *
               C39128) *
              C90634 * C90744 +
          (((C39867 + C39866) * C2661 -
            ((C39130 * C184 + C39126 * C190 + C39129 * C183 + C39125 * C189) *
                 C2565 +
             (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                 C2660) +
            (C39986 + C39987) * C2566 - (C41808 + C41807) * C2662 -
            (C41923 + C41924) * C2567) *
               C39127 +
           ((C41807 + C41808) * C2661 -
            ((C39987 + C39986) * C2565 + (C39866 + C39867) * C2660) +
            (C41924 + C41923) * C2566 -
            (C39130 * C3365 + C39126 * C3371 + C39129 * C3366 +
             C39125 * C3372) *
                C2662 -
            (C39130 * C3431 + C39126 * C3434 + C39129 * C3432 +
             C39125 * C3435) *
                C2567) *
               C39128) *
              C90634 * C90503) *
         C90567) /
            (p * q * std::sqrt(p + q));
    d2eexz[12] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C244 +
            (C39129 * C245 + C39125 * C251 + C39130 * C246 + C39126 * C252) *
                C90567) *
               C39127 +
           ((C39129 * C832 + C39125 * C840 + C39130 * C829 + C39126 * C834) *
                C244 +
            (C39129 * C1011 + C39125 * C1016 + C39130 * C1010 +
             C39126 * C1015) *
                C90567) *
               C39128) *
              C90634 * C90541 * C92 -
          (((C39130 * C1009 + C39126 * C1014 + C39129 * C1010 +
             C39125 * C1015) *
                C90567 +
            (C39130 * C830 + C39126 * C835 + C39129 * C829 + C39125 * C834) *
                C244) *
               C39128 +
           ((C39130 * C247 + C39126 * C253 + C39129 * C246 + C39125 * C252) *
                C90567 +
            (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                C244) *
               C39127) *
              C90634 * C90541 * C93 +
          (((C39129 * C109 + C39125 * C115 + C39130 * C110 + C39126 * C119) *
                C244 +
            (C39129 * C247 + C39125 * C253 + C39130 * C248 + C39126 * C254) *
                C90567) *
               C39127 +
           ((C39129 * C830 + C39125 * C835 + C39130 * C831 + C39126 * C836) *
                C244 +
            (C39129 * C1009 + C39125 * C1014 + C39130 * C1012 +
             C39126 * C1017) *
                C90567) *
               C39128) *
              C90634 * C90541 * C94 -
          (((C39130 * C1013 + C39126 * C1018 + C39129 * C1012 +
             C39125 * C1017) *
                C90567 +
            (C39130 * C833 + C39126 * C842 + C39129 * C831 + C39125 * C836) *
                C244) *
               C39128 +
           ((C39130 * C249 + C39126 * C255 + C39129 * C248 + C39125 * C254) *
                C90567 +
            (C39130 * C111 + C39126 * C121 + C39129 * C110 + C39125 * C119) *
                C244) *
               C39127) *
              C90634 * C90541 * C95)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                 C244 +
             (C39129 * C245 + C39125 * C251 + C39130 * C246 + C39126 * C252) *
                 C90567) *
                C39127 +
            ((C39862 + C39863) * C244 + (C40100 + C40101) * C90567) * C39128) *
               C90634 * C2565 -
           (((C42031 + C42032) * C90567 + (C41811 + C41812) * C244) * C39128 +
            ((C40101 + C40100) * C90567 + (C39863 + C39862) * C244) * C39127) *
               C90634 * C2566 +
           (((C41812 + C41811) * C244 + (C42032 + C42031) * C90567) * C39127 +
            ((C39129 * C3367 + C39125 * C3373 + C39130 * C3366 +
              C39126 * C3372) *
                 C244 +
             (C39129 * C3489 + C39125 * C3492 + C39130 * C3488 +
              C39126 * C3491) *
                 C90567) *
                C39128) *
               C90634 * C2567) *
              C90744 +
          ((((C39867 + C39866) * C244 + (C40102 + C40103) * C90567) * C39127 +
            ((C41807 + C41808) * C244 + (C42033 + C42034) * C90567) * C39128) *
               C90634 * C2566 -
           (((C40103 + C40102) * C90567 + (C39866 + C39867) * C244) * C39128 +
            ((C39130 * C247 + C39126 * C253 + C39129 * C246 + C39125 * C252) *
                 C90567 +
             (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                 C244) *
                C39127) *
               C90634 * C2565 -
           (((C39130 * C3487 + C39126 * C3490 + C39129 * C3488 +
              C39125 * C3491) *
                 C90567 +
             (C39130 * C3365 + C39126 * C3371 + C39129 * C3366 +
              C39125 * C3372) *
                 C244) *
                C39128 +
            ((C42034 + C42033) * C90567 + (C41808 + C41807) * C244) * C39127) *
               C90634 * C2567) *
              C90503)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[12] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
               C103 +
           (C39329 * C116 + C39127 * C314 + C39330 * C839 + C39128 * C1098) *
               C92 -
           (C39356 + C39357) * C104 - (C39358 + C39359) * C93 +
           (C39360 + C39361) * C105 + (C39362 + C39363) * C94 -
           (C39364 + C39365) * C106 - (C39366 + C39367) * C95) *
              C90634 * C39125 +
          ((C39357 + C39356) * C103 + (C39359 + C39358) * C92 -
           (C39361 + C39360) * C104 - (C39363 + C39362) * C93 +
           (C39365 + C39364) * C105 + (C39367 + C39366) * C94 -
           (C39330 * C833 + C39128 * C1097 + C39329 * C111 + C39127 * C312) *
               C106 -
           (C39330 * C843 + C39128 * C1102 + C39329 * C122 + C39127 * C318) *
               C95) *
              C90634 * C39126) *
         C90567 * C90541) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C88316 +
            (C39329 * C116 + C39127 * C314 + C39330 * C839 + C39128 * C1098) *
                C90744 -
            (C39356 + C39357) * C88309 - (C39358 + C39359) * C90503) *
               C90634 * C39125 +
           ((C39357 + C39356) * C88316 + (C39359 + C39358) * C90744 -
            (C39361 + C39360) * C88309 - (C39363 + C39362) * C90503) *
               C90634 * C39126) *
              C90567 * C2565 +
          (((C40220 + C40221) * C88309 -
            ((C39330 * C2577 + C39128 * C2831 + C39329 * C839 +
              C39127 * C1098) *
                 C90744 +
             (C39330 * C2570 + C39128 * C2827 + C39329 * C832 +
              C39127 * C1094) *
                 C88316) +
            (C40222 + C40223) * C90503) *
               C90634 * C39125 +
           ((C40225 + C40224) * C88309 -
            ((C40223 + C40222) * C90744 + (C40221 + C40220) * C88316) +
            (C40227 + C40226) * C90503) *
               C90634 * C39126) *
              C90567 * C2566 +
          (((C39329 * C2570 + C39127 * C2827 + C39330 * C3367 +
             C39128 * C3545) *
                C88316 +
            (C39329 * C2577 + C39127 * C2831 + C39330 * C3370 +
             C39128 * C3548) *
                C90744 -
            (C42141 + C42142) * C88309 - (C42143 + C42144) * C90503) *
               C90634 * C39125 +
           ((C42142 + C42141) * C88316 + (C42144 + C42143) * C90744 -
            (C39330 * C3365 + C39128 * C3543 + C39329 * C2572 +
             C39127 * C2829) *
                C88309 -
            (C39330 * C3368 + C39128 * C3546 + C39329 * C2579 +
             C39127 * C2833) *
                C90503) *
               C90634 * C39126) *
              C90567 * C2567)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[12] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C181 +
            (C39329 * C182 + C39127 * C394 + C39330 * C927 + C39128 * C1195) *
                C90541) *
               C90634 * C39125 +
           ((C39357 + C39356) * C181 + (C39446 + C39447) * C90541) * C90634 *
               C39126) *
              C92 -
          (((C39448 + C39449) * C90541 + (C39361 + C39360) * C181) * C90634 *
               C39126 +
           ((C39447 + C39446) * C90541 + (C39356 + C39357) * C181) * C90634 *
               C39125) *
              C93 +
          (((C39360 + C39361) * C181 + (C39449 + C39448) * C90541) * C90634 *
               C39125 +
           ((C39365 + C39364) * C181 + (C39450 + C39451) * C90541) * C90634 *
               C39126) *
              C94 -
          (((C39330 * C929 + C39128 * C1199 + C39329 * C186 + C39127 * C398) *
                C90541 +
            (C39330 * C833 + C39128 * C1097 + C39329 * C111 + C39127 * C312) *
                C181) *
               C90634 * C39126 +
           ((C39451 + C39450) * C90541 + (C39364 + C39365) * C181) * C90634 *
               C39125) *
              C95) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C2660 +
            (C39329 * C182 + C39127 * C394 + C39330 * C927 + C39128 * C1195) *
                C2565 -
            (C39330 * C2570 + C39128 * C2827 + C39329 * C832 + C39127 * C1094) *
                C2661 -
            (C39330 * C2663 + C39128 * C2921 + C39329 * C927 + C39127 * C1195) *
                C2566 +
            (C39329 * C2570 + C39127 * C2827 + C39330 * C3367 +
             C39128 * C3545) *
                C2662 +
            (C39329 * C2663 + C39127 * C2921 + C39330 * C3433 +
             C39128 * C3599) *
                C2567) *
               C90634 * C39125 +
           ((C39357 + C39356) * C2660 + (C39446 + C39447) * C2565 -
            (C40221 + C40220) * C2661 - (C40334 + C40335) * C2566 +
            (C42142 + C42141) * C2662 + (C42247 + C42248) * C2567) *
               C90634 * C39126) *
              C90744 +
          (((C40220 + C40221) * C2661 -
            ((C39447 + C39446) * C2565 + (C39356 + C39357) * C2660) +
            (C40335 + C40334) * C2566 - (C42141 + C42142) * C2662 -
            (C42248 + C42247) * C2567) *
               C90634 * C39125 +
           ((C40225 + C40224) * C2661 -
            ((C39448 + C39449) * C2565 + (C39361 + C39360) * C2660) +
            (C40336 + C40337) * C2566 -
            (C39330 * C3365 + C39128 * C3543 + C39329 * C2572 +
             C39127 * C2829) *
                C2662 -
            (C39330 * C3431 + C39128 * C3601 + C39329 * C2665 +
             C39127 * C2923) *
                C2567) *
               C90634 * C39126) *
              C90503) *
         C90567) /
            (p * q * std::sqrt(p + q));
    d2eeyz[12] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C244 +
            (C39329 * C245 + C39127 * C474 + C39330 * C1011 + C39128 * C1301) *
                C90567) *
               C90634 * C39125 +
           ((C39357 + C39356) * C244 + (C39530 + C39531) * C90567) * C90634 *
               C39126) *
              C90541 * C92 -
          (((C39532 + C39533) * C90567 + (C39361 + C39360) * C244) * C90634 *
               C39126 +
           ((C39531 + C39530) * C90567 + (C39356 + C39357) * C244) * C90634 *
               C39125) *
              C90541 * C93 +
          (((C39360 + C39361) * C244 + (C39533 + C39532) * C90567) * C90634 *
               C39125 +
           ((C39365 + C39364) * C244 + (C39534 + C39535) * C90567) * C90634 *
               C39126) *
              C90541 * C94 -
          (((C39330 * C1013 + C39128 * C1303 + C39329 * C249 + C39127 * C478) *
                C90567 +
            (C39330 * C833 + C39128 * C1097 + C39329 * C111 + C39127 * C312) *
                C244) *
               C90634 * C39126 +
           ((C39535 + C39534) * C90567 + (C39364 + C39365) * C244) * C90634 *
               C39125) *
              C90541 * C95)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                 C244 +
             (C39329 * C245 + C39127 * C474 + C39330 * C1011 + C39128 * C1301) *
                 C90567) *
                C90634 * C39125 +
            ((C39357 + C39356) * C244 + (C39530 + C39531) * C90567) * C90634 *
                C39126) *
               C2565 -
           (((C40444 + C40445) * C90567 + (C40221 + C40220) * C244) * C90634 *
                C39126 +
            ((C39330 * C2745 + C39128 * C3017 + C39329 * C1011 +
              C39127 * C1301) *
                 C90567 +
             (C39330 * C2570 + C39128 * C2827 + C39329 * C832 +
              C39127 * C1094) *
                 C244) *
                C90634 * C39125) *
               C2566 +
           (((C39329 * C2570 + C39127 * C2827 + C39330 * C3367 +
              C39128 * C3545) *
                 C244 +
             (C39329 * C2745 + C39127 * C3017 + C39330 * C3489 +
              C39128 * C3654) *
                 C90567) *
                C90634 * C39125 +
            ((C42142 + C42141) * C244 + (C42351 + C42352) * C90567) * C90634 *
                C39126) *
               C2567) *
              C90744 +
          ((((C40220 + C40221) * C244 + (C40445 + C40444) * C90567) * C90634 *
                C39125 +
            ((C40225 + C40224) * C244 + (C40446 + C40447) * C90567) * C90634 *
                C39126) *
               C2566 -
           (((C39532 + C39533) * C90567 + (C39361 + C39360) * C244) * C90634 *
                C39126 +
            ((C39531 + C39530) * C90567 + (C39356 + C39357) * C244) * C90634 *
                C39125) *
               C2565 -
           (((C39330 * C3487 + C39128 * C3652 + C39329 * C2747 +
              C39127 * C3019) *
                 C90567 +
             (C39330 * C3365 + C39128 * C3543 + C39329 * C2572 +
              C39127 * C2829) *
                 C244) *
                C90634 * C39126 +
            ((C42352 + C42351) * C90567 + (C42141 + C42142) * C244) * C90634 *
                C39125) *
               C2567) *
              C90503)) /
            (p * q * std::sqrt(p + q));
    d2eezx[12] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C103 +
            (C554 * C116 + C90634 * C561) * C92 - C584 * C104 - C585 * C93 +
            C586 * C105 + C587 * C94 - C588 * C106 - C589 * C95) *
               C39125 +
           (C584 * C103 + C585 * C92 - C586 * C104 - C587 * C93 + C588 * C105 +
            C589 * C94 - C590 * C106 - C591 * C95) *
               C39126) *
              C39127 +
          ((C14614 * C103 + C14615 * C92 - C1418 * C104 - C1419 * C93 +
            C1420 * C105 + C1421 * C94 - C1422 * C106 - C1423 * C95) *
               C39125 +
           (C1418 * C103 + C1419 * C92 - C1420 * C104 - C1421 * C93 +
            C1422 * C105 + C1423 * C94 - (C554 * C833 + C90634 * C1399) * C106 -
            (C554 * C843 + C90634 * C1404) * C95) *
               C39126) *
              C39128) *
         C90567 * C90541) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C88316 +
             (C554 * C116 + C90634 * C561) * C90744 - C584 * C88309 -
             C585 * C90503) *
                C39125 +
            (C584 * C88316 + C585 * C90744 - C586 * C88309 - C587 * C90503) *
                C39126) *
               C39127 +
           ((C16043 + C16044 - C16045 - C16046) * C39125 +
            (C42451 + C42452 - C42453 - C42454) * C39126) *
               C39128) *
              C90567 * C2565 +
          (((C16045 - (C16044 + C16043) + C16046) * C39125 +
            (C42453 - (C42452 + C42451) + C42454) * C39126) *
               C39127 +
           ((C16049 - (C16048 + C16047) + C16050) * C39125 +
            (C42455 - (C42456 + C42457) + C42458) * C39126) *
               C39128) *
              C90567 * C2566 +
          ((C16069 * C39125 + (C42457 + C42456 - C42455 - C42458) * C39126) *
               C39127 +
           ((C16067 + C16066 - C16065 - C16068) * C39125 +
            (C16060 * C88316 + C16063 * C90744 -
             (C554 * C3365 + C90634 * C3705) * C88309 -
             (C554 * C3368 + C90634 * C3708) * C90503) *
                C39126) *
               C39128) *
              C90567 * C2567)) /
            (p * q * std::sqrt(p + q));
    d2eezy[12] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C181 +
             (C554 * C182 + C90634 * C641) * C90541) *
                C39125 +
            (C648 + C664) * C39126) *
               C39127 +
           ((C14614 * C181 + C14700 * C90541) * C39125 +
            (C39668 + C39669) * C39126) *
               C39128) *
              C92 -
          (((C39670 + C39671) * C39126 + (C39669 + C39668) * C39125) * C39128 +
           ((C665 + C651) * C39126 + (C664 + C648) * C39125) * C39127) *
              C93 +
          ((C668 * C39125 + (C656 + C666) * C39126) * C39127 +
           ((C39671 + C39670) * C39125 + (C39672 + C39673) * C39126) * C39128) *
              C94 -
          ((((C554 * C929 + C90634 * C1501) * C90541 +
             (C554 * C833 + C90634 * C1399) * C181) *
                C39126 +
            (C39673 + C39672) * C39125) *
               C39128 +
           ((C667 + C657) * C39126 + C669 * C39125) * C39127) *
              C95) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C2660 +
             (C554 * C182 + C90634 * C641) * C2565 - C14614 * C2661 -
             C14700 * C2566 + C14616 * C2662 + C14701 * C2567) *
                C39125 +
            (C3204 + C3205 - C3206 - C3207 + C3208 + C3220) * C39126) *
               C39127 +
           ((C14614 * C2660 + C14700 * C2565 - C14616 * C2661 - C14701 * C2566 +
             C16062 * C2662 + C16151 * C2567) *
                C39125 +
            (C42557 + C42558 - C42559 - C42560 + C42561 + C42562) * C39126) *
               C39128) *
              C90744 +
          (((C3206 - (C3205 + C3204) + C3207 - C3208 - C3220) * C39125 +
            (C3213 - (C3212 + C3211) + C3214 - C3215 - C3221) * C39126) *
               C39127 +
           ((C42559 - (C42558 + C42557) + C42560 - C42561 - C42562) * C39125 +
            (C3124 * C2661 - (C1520 * C2565 + C1420 * C2660) + C3219 * C2566 -
             (C554 * C3365 + C90634 * C3705) * C2662 -
             (C554 * C3431 + C90634 * C3763) * C2567) *
                C39126) *
               C39128) *
              C90503) *
         C90567) /
            (p * q * std::sqrt(p + q));
    d2eezz[12] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C244 +
             (C554 * C245 + C90634 * C719) * C90567) *
                C39125 +
            (C726 + C742) * C39126) *
               C39127 +
           ((C14776 + C14784) * C39125 + (C1611 + C1619) * C39126) * C39128) *
              C90541 * C92 -
          ((C1621 * C39126 + (C1619 + C1611) * C39125) * C39128 +
           ((C743 + C729) * C39126 + (C742 + C726) * C39125) * C39127) *
              C90541 * C93 +
          ((C746 * C39125 + (C734 + C744) * C39126) * C39127 +
           ((C1608 + C1618) * C39125 + (C1612 + C1620) * C39126) * C39128) *
              C90541 * C94 -
          ((((C554 * C1013 + C90634 * C1604) * C90567 +
             (C554 * C833 + C90634 * C1399) * C244) *
                C39126 +
            (C1620 + C1612) * C39125) *
               C39128 +
           ((C745 + C735) * C39126 + C747 * C39125) * C39127) *
              C90541 * C95)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C90634 * C555) * C244 +
              (C554 * C245 + C90634 * C719) * C90567) *
                 C39125 +
             (C726 + C742) * C39126) *
                C39127 +
            ((C14776 + C14784) * C39125 + C40756 * C39126) * C39128) *
               C2565 -
           ((C16236 * C39126 + (C14785 + C14779) * C39125) * C39128 +
            (C40757 * C39126 + (C14784 + C14776) * C39125) * C39127) *
               C2566 +
           ((C16229 * C39125 + C42661 * C39126) * C39127 +
            ((C16232 + C16241) * C39125 + (C16233 + C16242) * C39126) *
                C39128) *
               C2567) *
              C90744 +
          (((C40756 * C39125 + C40758 * C39126) * C39127 +
            (C42661 * C39125 + (C3303 + C3309) * C39126) * C39128) *
               C2566 -
           ((C1621 * C39126 + C40757 * C39125) * C39128 +
            ((C743 + C729) * C39126 + (C742 + C726) * C39125) * C39127) *
               C2565 -
           ((((C554 * C3487 + C90634 * C3814) * C90567 +
              (C554 * C3365 + C90634 * C3705) * C244) *
                 C39126 +
             (C16242 + C16233) * C39125) *
                C39128 +
            ((C3309 + C3303) * C39126 + C16236 * C39125) * C39127) *
               C2567) *
              C90503)) /
            (p * q * std::sqrt(p + q));
    d2eexx[13] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C826 +
            (C39129 * C116 + C39125 * C125 + C39130 * C117 + C39126 * C126) *
                C821 -
            (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                C827 -
            (C39130 * C118 + C39126 * C127 + C39129 * C117 + C39125 * C126) *
                C822 +
            (C39129 * C109 + C39125 * C115 + C39130 * C110 + C39126 * C119) *
                C828 +
            (C39129 * C118 + C39125 * C127 + C39130 * C120 + C39126 * C128) *
                C823) *
               C39127 +
           ((C39862 + C39863) * C826 + (C39864 + C39865) * C821 -
            (C39866 + C39867) * C827 - (C39868 + C39869) * C822 +
            (C39870 + C39871) * C828 + (C39872 + C39873) * C823) *
               C39128) *
              C90634 * C90567 * C90752 +
          (((C39867 + C39866) * C827 -
            ((C39865 + C39864) * C821 + (C39863 + C39862) * C826) +
            (C39869 + C39868) * C822 - (C39871 + C39870) * C828 -
            (C39873 + C39872) * C823) *
               C39127 +
           ((C39129 * C2571 + C39125 * C2575 + C39130 * C2572 +
             C39126 * C2576) *
                C827 -
            ((C39130 * C2578 + C39126 * C2583 + C39129 * C2577 +
              C39125 * C2582) *
                 C821 +
             (C39130 * C2571 + C39126 * C2575 + C39129 * C2570 +
              C39125 * C2574) *
                 C826) +
            (C39129 * C2578 + C39125 * C2583 + C39130 * C2579 +
             C39126 * C2584) *
                C822 -
            (C39130 * C2573 + C39126 * C2580 + C39129 * C2572 +
             C39125 * C2576) *
                C828 -
            (C39130 * C2581 + C39126 * C2585 + C39129 * C2579 +
             C39125 * C2584) *
                C823) *
               C39128) *
              C90634 * C90567 * C90555)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C3364 +
            (C39129 * C116 + C39125 * C125 + C39130 * C117 + C39126 * C126) *
                C90498) *
               C39127 +
           ((C39862 + C39863) * C3364 + (C39864 + C39865) * C90498) * C39128) *
              C90634 * C90567 * C3360 -
          (((C41809 + C41810) * C90498 + (C41811 + C41812) * C3364) * C39128 +
           ((C39865 + C39864) * C90498 + (C39863 + C39862) * C3364) * C39127) *
              C90634 * C90567 * C3361 +
          (((C41812 + C41811) * C3364 + (C41810 + C41809) * C90498) * C39127 +
           ((C42736 + C42737) * C3364 + (C42738 + C42739) * C90498) * C39128) *
              C90634 * C90567 * C3362 -
          (((C39130 * C15530 + C39126 * C15532 + C39129 * C15528 +
             C39125 * C15531) *
                C90498 +
            (C39130 * C15526 + C39126 * C15529 + C39129 * C15525 +
             C39125 * C15527) *
                C3364) *
               C39128 +
           ((C42739 + C42738) * C90498 + (C42737 + C42736) * C3364) * C39127) *
              C90634 * C90567 * C3363)) /
            (p * q * std::sqrt(p + q));
    d2eexy[13] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C923 +
            (C39129 * C182 + C39125 * C188 + C39130 * C183 + C39126 * C189) *
                C90752 -
            (C39863 + C39862) * C924 - (C39984 + C39985) * C90555) *
               C39127 +
           ((C39862 + C39863) * C923 + (C39985 + C39984) * C90752 -
            (C39130 * C2571 + C39126 * C2575 + C39129 * C2570 +
             C39125 * C2574) *
                C924 -
            (C39130 * C2664 + C39126 * C2668 + C39129 * C2663 +
             C39125 * C2667) *
                C90555) *
               C39128) *
              C90634 * C821 +
          (((C39867 + C39866) * C924 -
            ((C39130 * C184 + C39126 * C190 + C39129 * C183 + C39125 * C189) *
                 C90752 +
             (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                 C923) +
            (C39986 + C39987) * C90555) *
               C39127 +
           ((C39129 * C2571 + C39125 * C2575 + C39130 * C2572 +
             C39126 * C2576) *
                C924 -
            ((C39987 + C39986) * C90752 + (C39866 + C39867) * C923) +
            (C39129 * C2664 + C39125 * C2668 + C39130 * C2665 +
             C39126 * C2669) *
                C90555) *
               C39128) *
              C90634 * C822 +
          (((C39129 * C109 + C39125 * C115 + C39130 * C110 + C39126 * C119) *
                C923 +
            (C39129 * C184 + C39125 * C190 + C39130 * C185 + C39126 * C191) *
                C90752 -
            (C39871 + C39870) * C924 - (C39988 + C39989) * C90555) *
               C39127 +
           ((C39870 + C39871) * C923 + (C39989 + C39988) * C90752 -
            (C39130 * C2573 + C39126 * C2580 + C39129 * C2572 +
             C39125 * C2576) *
                C924 -
            (C39130 * C2666 + C39126 * C2670 + C39129 * C2665 +
             C39125 * C2669) *
                C90555) *
               C39128) *
              C90634 * C823) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
               C3427 +
           (C39129 * C182 + C39125 * C188 + C39130 * C183 + C39126 * C189) *
               C3360 -
           (C39863 + C39862) * C3428 - (C39984 + C39985) * C3361 +
           (C41812 + C41811) * C3429 + (C41921 + C41922) * C3362 -
           (C42737 + C42736) * C3430 - (C42810 + C42811) * C3363) *
              C39127 +
          ((C39862 + C39863) * C3427 + (C39985 + C39984) * C3360 -
           (C41811 + C41812) * C3428 - (C41922 + C41921) * C3361 +
           (C42736 + C42737) * C3429 + (C42811 + C42810) * C3362 -
           (C39130 * C15526 + C39126 * C15529 + C39129 * C15525 +
            C39125 * C15527) *
               C3430 -
           (C39130 * C15635 + C39126 * C15637 + C39129 * C15634 +
            C39125 * C15636) *
               C3363) *
              C39128) *
         C90634 * C90498 * C90567) /
            (p * q * std::sqrt(p + q));
    d2eexz[13] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                 C244 +
             (C39129 * C245 + C39125 * C251 + C39130 * C246 + C39126 * C252) *
                 C90567) *
                C39127 +
            ((C39862 + C39863) * C244 + (C40100 + C40101) * C90567) * C39128) *
               C90634 * C90752 -
           (((C39130 * C2746 + C39126 * C2750 + C39129 * C2745 +
              C39125 * C2749) *
                 C90567 +
             (C39130 * C2571 + C39126 * C2575 + C39129 * C2570 +
              C39125 * C2574) *
                 C244) *
                C39128 +
            ((C40101 + C40100) * C90567 + (C39863 + C39862) * C244) * C39127) *
               C90634 * C90555) *
              C821 +
          ((((C39867 + C39866) * C244 + (C40102 + C40103) * C90567) * C39127 +
            ((C39129 * C2571 + C39125 * C2575 + C39130 * C2572 +
              C39126 * C2576) *
                 C244 +
             (C39129 * C2746 + C39125 * C2750 + C39130 * C2747 +
              C39126 * C2751) *
                 C90567) *
                C39128) *
               C90634 * C90555 -
           (((C40103 + C40102) * C90567 + (C39866 + C39867) * C244) * C39128 +
            ((C39130 * C247 + C39126 * C253 + C39129 * C246 + C39125 * C252) *
                 C90567 +
             (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                 C244) *
                C39127) *
               C90634 * C90752) *
              C822 +
          ((((C39129 * C109 + C39125 * C115 + C39130 * C110 + C39126 * C119) *
                 C244 +
             (C39129 * C247 + C39125 * C253 + C39130 * C248 + C39126 * C254) *
                 C90567) *
                C39127 +
            ((C39870 + C39871) * C244 + (C40104 + C40105) * C90567) * C39128) *
               C90634 * C90752 -
           (((C39130 * C2748 + C39126 * C2752 + C39129 * C2747 +
              C39125 * C2751) *
                 C90567 +
             (C39130 * C2573 + C39126 * C2580 + C39129 * C2572 +
              C39125 * C2576) *
                 C244) *
                C39128 +
            ((C40105 + C40104) * C90567 + (C39871 + C39870) * C244) * C39127) *
               C90634 * C90555) *
              C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C244 +
            (C39129 * C245 + C39125 * C251 + C39130 * C246 + C39126 * C252) *
                C90567) *
               C39127 +
           ((C39862 + C39863) * C244 + (C40100 + C40101) * C90567) * C39128) *
              C90634 * C3360 -
          (((C42031 + C42032) * C90567 + (C41811 + C41812) * C244) * C39128 +
           ((C40101 + C40100) * C90567 + (C39863 + C39862) * C244) * C39127) *
              C90634 * C3361 +
          (((C41812 + C41811) * C244 + (C42032 + C42031) * C90567) * C39127 +
           ((C42736 + C42737) * C244 + (C42882 + C42883) * C90567) * C39128) *
              C90634 * C3362 -
          (((C39130 * C15719 + C39126 * C15721 + C39129 * C15718 +
             C39125 * C15720) *
                C90567 +
            (C39130 * C15526 + C39126 * C15529 + C39129 * C15525 +
             C39125 * C15527) *
                C244) *
               C39128 +
           ((C42883 + C42882) * C90567 + (C42737 + C42736) * C244) * C39127) *
              C90634 * C3363) *
         C90498) /
            (p * q * std::sqrt(p + q));
    d2eeyx[13] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C826 +
            (C39329 * C116 + C39127 * C314 + C39330 * C839 + C39128 * C1098) *
                C821 -
            (C39356 + C39357) * C827 - (C39358 + C39359) * C822 +
            (C39360 + C39361) * C828 + (C39362 + C39363) * C823) *
               C90634 * C39125 +
           ((C39357 + C39356) * C826 + (C39359 + C39358) * C821 -
            (C39361 + C39360) * C827 - (C39363 + C39362) * C822 +
            (C39365 + C39364) * C828 + (C39367 + C39366) * C823) *
               C90634 * C39126) *
              C90567 * C90752 +
          (((C40220 + C40221) * C827 -
            ((C39330 * C2577 + C39128 * C2831 + C39329 * C839 +
              C39127 * C1098) *
                 C821 +
             (C39330 * C2570 + C39128 * C2827 + C39329 * C832 +
              C39127 * C1094) *
                 C826) +
            (C40222 + C40223) * C822 - (C40224 + C40225) * C828 -
            (C40226 + C40227) * C823) *
               C90634 * C39125 +
           ((C40225 + C40224) * C827 -
            ((C40223 + C40222) * C821 + (C40221 + C40220) * C826) +
            (C40227 + C40226) * C822 -
            (C39330 * C2573 + C39128 * C2830 + C39329 * C831 + C39127 * C1096) *
                C828 -
            (C39330 * C2581 + C39128 * C2834 + C39329 * C841 + C39127 * C1101) *
                C823) *
               C90634 * C39126) *
              C90567 * C90555)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C3364 +
            (C39329 * C116 + C39127 * C314 + C39330 * C839 + C39128 * C1098) *
                C90498) *
               C90634 * C39125 +
           ((C39357 + C39356) * C3364 + (C39359 + C39358) * C90498) * C90634 *
               C39126) *
              C90567 * C3360 -
          (((C40223 + C40222) * C90498 + (C40221 + C40220) * C3364) * C90634 *
               C39126 +
           ((C39330 * C2577 + C39128 * C2831 + C39329 * C839 + C39127 * C1098) *
                C90498 +
            (C39330 * C2570 + C39128 * C2827 + C39329 * C832 + C39127 * C1094) *
                C3364) *
               C90634 * C39125) *
              C90567 * C3361 +
          (((C39329 * C2570 + C39127 * C2827 + C39330 * C3367 +
             C39128 * C3545) *
                C3364 +
            (C39329 * C2577 + C39127 * C2831 + C39330 * C3370 +
             C39128 * C3548) *
                C90498) *
               C90634 * C39125 +
           ((C42142 + C42141) * C3364 + (C42144 + C42143) * C90498) * C90634 *
               C39126) *
              C90567 * C3362 -
          (((C39330 * C15530 + C39128 * C15811 + C39329 * C3369 +
             C39127 * C3547) *
                C90498 +
            (C39330 * C15526 + C39128 * C15809 + C39329 * C3366 +
             C39127 * C3544) *
                C3364) *
               C90634 * C39126 +
           ((C39330 * C15528 + C39128 * C15810 + C39329 * C3370 +
             C39127 * C3548) *
                C90498 +
            (C39330 * C15525 + C39128 * C15808 + C39329 * C3367 +
             C39127 * C3545) *
                C3364) *
               C90634 * C39125) *
              C90567 * C3363)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[13] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C923 +
            (C39329 * C182 + C39127 * C394 + C39330 * C927 + C39128 * C1195) *
                C90752 -
            (C39330 * C2570 + C39128 * C2827 + C39329 * C832 + C39127 * C1094) *
                C924 -
            (C39330 * C2663 + C39128 * C2921 + C39329 * C927 + C39127 * C1195) *
                C90555) *
               C90634 * C39125 +
           ((C39357 + C39356) * C923 + (C39446 + C39447) * C90752 -
            (C40221 + C40220) * C924 - (C40334 + C40335) * C90555) *
               C90634 * C39126) *
              C821 +
          (((C40220 + C40221) * C924 -
            ((C39447 + C39446) * C90752 + (C39356 + C39357) * C923) +
            (C40335 + C40334) * C90555) *
               C90634 * C39125 +
           ((C40225 + C40224) * C924 -
            ((C39448 + C39449) * C90752 + (C39361 + C39360) * C923) +
            (C40336 + C40337) * C90555) *
               C90634 * C39126) *
              C822 +
          (((C39360 + C39361) * C923 + (C39449 + C39448) * C90752 -
            (C40224 + C40225) * C924 - (C40337 + C40336) * C90555) *
               C90634 * C39125 +
           ((C39365 + C39364) * C923 + (C39450 + C39451) * C90752 -
            (C39330 * C2573 + C39128 * C2830 + C39329 * C831 + C39127 * C1096) *
                C924 -
            (C39330 * C2666 + C39128 * C2924 + C39329 * C928 + C39127 * C1198) *
                C90555) *
               C90634 * C39126) *
              C823) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
               C3427 +
           (C39329 * C182 + C39127 * C394 + C39330 * C927 + C39128 * C1195) *
               C3360 -
           (C39330 * C2570 + C39128 * C2827 + C39329 * C832 + C39127 * C1094) *
               C3428 -
           (C39330 * C2663 + C39128 * C2921 + C39329 * C927 + C39127 * C1195) *
               C3361 +
           (C39329 * C2570 + C39127 * C2827 + C39330 * C3367 + C39128 * C3545) *
               C3429 +
           (C39329 * C2663 + C39127 * C2921 + C39330 * C3433 + C39128 * C3599) *
               C3362 -
           (C39330 * C15525 + C39128 * C15808 + C39329 * C3367 +
            C39127 * C3545) *
               C3430 -
           (C39330 * C15634 + C39128 * C15886 + C39329 * C3433 +
            C39127 * C3599) *
               C3363) *
              C90634 * C39125 +
          ((C39357 + C39356) * C3427 + (C39446 + C39447) * C3360 -
           (C40221 + C40220) * C3428 - (C40334 + C40335) * C3361 +
           (C42142 + C42141) * C3429 + (C42247 + C42248) * C3362 -
           (C39330 * C15526 + C39128 * C15809 + C39329 * C3366 +
            C39127 * C3544) *
               C3430 -
           (C39330 * C15635 + C39128 * C15887 + C39329 * C3432 +
            C39127 * C3600) *
               C3363) *
              C90634 * C39126) *
         C90498 * C90567) /
            (p * q * std::sqrt(p + q));
    d2eeyz[13] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                 C244 +
             (C39329 * C245 + C39127 * C474 + C39330 * C1011 + C39128 * C1301) *
                 C90567) *
                C90634 * C39125 +
            ((C39357 + C39356) * C244 + (C39530 + C39531) * C90567) * C90634 *
                C39126) *
               C90752 -
           (((C40444 + C40445) * C90567 + (C40221 + C40220) * C244) * C90634 *
                C39126 +
            ((C39330 * C2745 + C39128 * C3017 + C39329 * C1011 +
              C39127 * C1301) *
                 C90567 +
             (C39330 * C2570 + C39128 * C2827 + C39329 * C832 +
              C39127 * C1094) *
                 C244) *
                C90634 * C39125) *
               C90555) *
              C821 +
          ((((C40220 + C40221) * C244 + (C40445 + C40444) * C90567) * C90634 *
                C39125 +
            ((C40225 + C40224) * C244 + (C40446 + C40447) * C90567) * C90634 *
                C39126) *
               C90555 -
           (((C39532 + C39533) * C90567 + (C39361 + C39360) * C244) * C90634 *
                C39126 +
            ((C39531 + C39530) * C90567 + (C39356 + C39357) * C244) * C90634 *
                C39125) *
               C90752) *
              C822 +
          ((((C39360 + C39361) * C244 + (C39533 + C39532) * C90567) * C90634 *
                C39125 +
            ((C39365 + C39364) * C244 + (C39534 + C39535) * C90567) * C90634 *
                C39126) *
               C90752 -
           (((C39330 * C2748 + C39128 * C3020 + C39329 * C1012 +
              C39127 * C1302) *
                 C90567 +
             (C39330 * C2573 + C39128 * C2830 + C39329 * C831 +
              C39127 * C1096) *
                 C244) *
                C90634 * C39126 +
            ((C40447 + C40446) * C90567 + (C40224 + C40225) * C244) * C90634 *
                C39125) *
               C90555) *
              C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C244 +
            (C39329 * C245 + C39127 * C474 + C39330 * C1011 + C39128 * C1301) *
                C90567) *
               C90634 * C39125 +
           ((C39357 + C39356) * C244 + (C39530 + C39531) * C90567) * C90634 *
               C39126) *
              C3360 -
          (((C40444 + C40445) * C90567 + (C40221 + C40220) * C244) * C90634 *
               C39126 +
           ((C39330 * C2745 + C39128 * C3017 + C39329 * C1011 +
             C39127 * C1301) *
                C90567 +
            (C39330 * C2570 + C39128 * C2827 + C39329 * C832 + C39127 * C1094) *
                C244) *
               C90634 * C39125) *
              C3361 +
          (((C39329 * C2570 + C39127 * C2827 + C39330 * C3367 +
             C39128 * C3545) *
                C244 +
            (C39329 * C2745 + C39127 * C3017 + C39330 * C3489 +
             C39128 * C3654) *
                C90567) *
               C90634 * C39125 +
           ((C42142 + C42141) * C244 + (C42351 + C42352) * C90567) * C90634 *
               C39126) *
              C3362 -
          (((C39330 * C15719 + C39128 * C15963 + C39329 * C3488 +
             C39127 * C3653) *
                C90567 +
            (C39330 * C15526 + C39128 * C15809 + C39329 * C3366 +
             C39127 * C3544) *
                C244) *
               C90634 * C39126 +
           ((C39330 * C15718 + C39128 * C15962 + C39329 * C3489 +
             C39127 * C3654) *
                C90567 +
            (C39330 * C15525 + C39128 * C15808 + C39329 * C3367 +
             C39127 * C3545) *
                C244) *
               C90634 * C39125) *
              C3363) *
         C90498) /
            (p * q * std::sqrt(p + q));
    d2eezx[13] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C826 +
             (C554 * C116 + C90634 * C561) * C821 - C584 * C827 - C585 * C822 +
             C586 * C828 + C587 * C823) *
                C39125 +
            (C584 * C826 + C585 * C821 - C586 * C827 - C587 * C822 +
             C588 * C828 + C589 * C823) *
                C39126) *
               C39127 +
           ((C14618 + C14619 - C14602 - C14603 + C14604 + C14605) * C39125 +
            (C40546 + C40547 - C40548 - C40549 + C40550 + C40551) * C39126) *
               C39128) *
              C90567 * C90752 +
          (((C14602 - (C14619 + C14618) + C14603 - C14604 - C14605) * C39125 +
            (C40548 - (C40547 + C40546) + C40549 - C40550 - C40551) * C39126) *
               C39127 +
           ((C14610 - (C14621 + C14620) + C14611 - C14612 - C14613) * C39125 +
            (C3124 * C827 - (C3123 * C821 + C3122 * C826) + C3125 * C822 -
             (C554 * C2573 + C90634 * C3108) * C828 -
             (C554 * C2581 + C90634 * C3112) * C823) *
                C39126) *
               C39128) *
              C90567 * C90555)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C3364 +
             (C554 * C116 + C90634 * C561) * C90498) *
                C39125 +
            (C584 * C3364 + C585 * C90498) * C39126) *
               C39127 +
           ((C16632 + C16633) * C39125 + (C43148 + C43149) * C39126) * C39128) *
              C90567 * C3360 -
          (((C43150 + C43151) * C39126 + (C16635 + C16634) * C39125) * C39128 +
           ((C43149 + C43148) * C39126 + (C16633 + C16632) * C39125) * C39127) *
              C90567 * C3361 +
          ((C16642 * C39125 + (C43151 + C43150) * C39126) * C39127 +
           ((C16637 + C16636) * C39125 + (C43152 + C43153) * C39126) * C39128) *
              C90567 * C3362 -
          ((((C554 * C15530 + C90634 * C16041) * C90498 +
             (C554 * C15526 + C90634 * C16039) * C3364) *
                C39126 +
            (C16649 + C16648) * C39125) *
               C39128 +
           ((C43153 + C43152) * C39126 + C16643 * C39125) * C39127) *
              C90567 * C3363)) /
            (p * q * std::sqrt(p + q));
    d2eezy[13] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C923 +
             (C554 * C182 + C90634 * C641) * C90752 - C14614 * C924 -
             C14700 * C90555) *
                C39125 +
            (C1503 + C1504 - C1505 - C1522) * C39126) *
               C39127 +
           ((C14614 * C923 + C14700 * C90752 - C14616 * C924 -
             C14701 * C90555) *
                C39125 +
            (C40650 + C40651 - C40652 - C40653) * C39126) *
               C39128) *
              C821 +
          (((C1505 - (C1504 + C1503) + C1522) * C39125 +
            (C1510 - (C1509 + C1508) + C1524) * C39126) *
               C39127 +
           ((C40652 - (C40651 + C40650) + C40653) * C39125 +
            (C40654 - (C40655 + C40656) + C40657) * C39126) *
               C39128) *
              C822 +
          ((C1526 * C39125 + (C1515 + C1514 - C1513 - C1525) * C39126) *
               C39127 +
           ((C40656 + C40655 - C40654 - C40657) * C39125 +
            (C1422 * C923 + C1521 * C90752 -
             (C554 * C2573 + C90634 * C3108) * C924 -
             (C554 * C2666 + C90634 * C3202) * C90555) *
                C39126) *
               C39128) *
              C823) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C3427 +
            (C554 * C182 + C90634 * C641) * C3360 - C14614 * C3428 -
            C14700 * C3361 + C14616 * C3429 + C14701 * C3362 - C16062 * C3430 -
            C16151 * C3363) *
               C39125 +
           (C584 * C3427 + C660 * C3360 - C1418 * C3428 - C1518 * C3361 +
            C3122 * C3429 + C3218 * C3362 - C16060 * C3430 - C16152 * C3363) *
               C39126) *
              C39127 +
          ((C14614 * C3427 + C14700 * C3360 - C14616 * C3428 - C14701 * C3361 +
            C16062 * C3429 + C16151 * C3362 - C16644 * C3430 - C16703 * C3363) *
               C39125 +
           (C1418 * C3427 + C1518 * C3360 - C3122 * C3428 - C3218 * C3361 +
            C16060 * C3429 + C16152 * C3362 -
            (C554 * C15526 + C90634 * C16039) * C3430 -
            (C554 * C15635 + C90634 * C16145) * C3363) *
               C39126) *
              C39128) *
         C90498 * C90567) /
            (p * q * std::sqrt(p + q));
    d2eezz[13] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C90634 * C555) * C244 +
              (C554 * C245 + C90634 * C719) * C90567) *
                 C39125 +
             (C726 + C742) * C39126) *
                C39127 +
            ((C14776 + C14784) * C39125 + C40756 * C39126) * C39128) *
               C90752 -
           ((C16236 * C39126 + (C14785 + C14779) * C39125) * C39128 +
            (C40757 * C39126 + (C14784 + C14776) * C39125) * C39127) *
               C90555) *
              C821 +
          (((C40756 * C39125 + C40758 * C39126) * C39127 +
            ((C3300 + C3308) * C39125 + (C3303 + C3309) * C39126) * C39128) *
               C90555 -
           ((C1621 * C39126 + C40757 * C39125) * C39128 +
            ((C743 + C729) * C39126 + (C742 + C726) * C39125) * C39127) *
               C90752) *
              C822 +
          (((C746 * C39125 + (C734 + C744) * C39126) * C39127 +
            (C40758 * C39125 + (C1612 + C1620) * C39126) * C39128) *
               C90752 -
           ((((C554 * C2748 + C90634 * C3298) * C90567 +
              (C554 * C2573 + C90634 * C3108) * C244) *
                 C39126 +
             (C3309 + C3303) * C39125) *
                C39128 +
            ((C1620 + C1612) * C39126 + C1621 * C39125) * C39127) *
               C90555) *
              C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C244 +
             (C554 * C245 + C90634 * C719) * C90567) *
                C39125 +
            (C726 + C742) * C39126) *
               C39127 +
           ((C14776 + C14784) * C39125 + C40756 * C39126) * C39128) *
              C3360 -
          ((C16236 * C39126 + (C14785 + C14779) * C39125) * C39128 +
           (C40757 * C39126 + (C14784 + C14776) * C39125) * C39127) *
              C3361 +
          ((C16229 * C39125 + C42661 * C39126) * C39127 +
           ((C16232 + C16241) * C39125 + (C16233 + C16242) * C39126) * C39128) *
              C3362 -
          ((((C554 * C15719 + C90634 * C16227) * C90567 +
             (C554 * C15526 + C90634 * C16039) * C244) *
                C39126 +
            (C16761 + C16756) * C39125) *
               C39128 +
           ((C16242 + C16233) * C39126 + C16755 * C39125) * C39127) *
              C3363) *
         C90498) /
            (p * q * std::sqrt(p + q));
    d2eexx[14] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C826 +
            (C39129 * C116 + C39125 * C125 + C39130 * C117 + C39126 * C126) *
                C821 -
            (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                C827 -
            (C39130 * C118 + C39126 * C127 + C39129 * C117 + C39125 * C126) *
                C822 +
            (C39129 * C109 + C39125 * C115 + C39130 * C110 + C39126 * C119) *
                C828 +
            (C39129 * C118 + C39125 * C127 + C39130 * C120 + C39126 * C128) *
                C823) *
               C39127 +
           ((C39862 + C39863) * C826 + (C39864 + C39865) * C821 -
            (C39866 + C39867) * C827 - (C39868 + C39869) * C822 +
            (C39870 + C39871) * C828 + (C39872 + C39873) * C823) *
               C39128) *
              C90634 * C90753 +
          (((C39129 * C1697 + C39125 * C1702 + C39130 * C1698 +
             C39126 * C1703) *
                C827 -
            ((C39130 * C1706 + C39126 * C1713 + C39129 * C1707 +
              C39125 * C1714) *
                 C821 +
             (C39130 * C1697 + C39126 * C1702 + C39129 * C1700 +
              C39125 * C1708) *
                 C826) +
            (C39129 * C1706 + C39125 * C1713 + C39130 * C1705 +
             C39126 * C1712) *
                C822 -
            (C39130 * C1699 + C39126 * C1704 + C39129 * C1698 +
             C39125 * C1703) *
                C828 -
            (C39130 * C1709 + C39126 * C1715 + C39129 * C1705 +
             C39125 * C1712) *
                C823) *
               C39127 +
           ((C39129 * C3892 + C39125 * C3898 + C39130 * C3893 +
             C39126 * C3899) *
                C827 -
            ((C39130 * C3901 + C39126 * C3910 + C39129 * C3900 +
              C39125 * C3909) *
                 C821 +
             (C39130 * C3892 + C39126 * C3898 + C39129 * C3891 +
              C39125 * C3897) *
                 C826) +
            (C39129 * C3901 + C39125 * C3910 + C39130 * C3902 +
             C39126 * C3911) *
                C822 -
            (C39130 * C8120 + C39126 * C8121 + C39129 * C3893 +
             C39125 * C3899) *
                C828 -
            (C39130 * C8122 + C39126 * C8123 + C39129 * C3902 +
             C39125 * C3911) *
                C823) *
               C39128) *
              C90634 * C90579) *
         C90541) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                 C3364 +
             (C39129 * C116 + C39125 * C125 + C39130 * C117 + C39126 * C126) *
                 C90498) *
                C39127 +
            ((C39862 + C39863) * C3364 + (C39864 + C39865) * C90498) * C39128) *
               C90634 * C90753 -
           (((C43400 + C43401) * C90498 + (C43402 + C43403) * C3364) * C39128 +
            ((C39130 * C1706 + C39126 * C1713 + C39129 * C1707 +
              C39125 * C1714) *
                 C90498 +
             (C39130 * C1697 + C39126 * C1702 + C39129 * C1700 +
              C39125 * C1708) *
                 C3364) *
                C39127) *
               C90634 * C90579) *
              C2565 +
          ((((C43403 + C43402) * C3364 + (C43401 + C43400) * C90498) * C39127 +
            ((C43404 + C43405) * C3364 + (C43406 + C43407) * C90498) * C39128) *
               C90634 * C90579 -
           (((C41809 + C41810) * C90498 + (C41811 + C41812) * C3364) * C39128 +
            ((C39865 + C39864) * C90498 + (C39863 + C39862) * C3364) * C39127) *
               C90634 * C90753) *
              C2566 +
          ((((C41812 + C41811) * C3364 + (C41810 + C41809) * C90498) * C39127 +
            ((C42736 + C42737) * C3364 + (C42738 + C42739) * C90498) * C39128) *
               C90634 * C90753 -
           (((C39130 * C21006 + C39126 * C21007 + C39129 * C16838 +
              C39125 * C16841) *
                 C90498 +
             (C39130 * C21004 + C39126 * C21005 + C39129 * C16835 +
              C39125 * C16837) *
                 C3364) *
                C39128 +
            ((C43407 + C43406) * C90498 + (C43405 + C43404) * C3364) * C39127) *
               C90634 * C90579) *
              C2567)) /
            (p * q * std::sqrt(p + q));
    d2eexy[14] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                 C181 +
             (C39129 * C182 + C39125 * C188 + C39130 * C183 + C39126 * C189) *
                 C90541) *
                C39127 +
            ((C39862 + C39863) * C181 + (C39985 + C39984) * C90541) * C39128) *
               C90634 * C821 -
           (((C39987 + C39986) * C90541 + (C39866 + C39867) * C181) * C39128 +
            ((C39130 * C184 + C39126 * C190 + C39129 * C183 + C39125 * C189) *
                 C90541 +
             (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                 C181) *
                C39127) *
               C90634 * C822 +
           (((C39129 * C109 + C39125 * C115 + C39130 * C110 + C39126 * C119) *
                 C181 +
             (C39129 * C184 + C39125 * C190 + C39130 * C185 + C39126 * C191) *
                 C90541) *
                C39127 +
            ((C39870 + C39871) * C181 + (C39989 + C39988) * C90541) * C39128) *
               C90634 * C823) *
              C90753 +
          ((((C39129 * C1697 + C39125 * C1702 + C39130 * C1698 +
              C39126 * C1703) *
                 C181 +
             (C39129 * C1791 + C39125 * C1796 + C39130 * C1792 +
              C39126 * C1797) *
                 C90541) *
                C39127 +
            ((C39129 * C3892 + C39125 * C3898 + C39130 * C3893 +
              C39126 * C3899) *
                 C181 +
             (C39129 * C3990 + C39125 * C3996 + C39130 * C3991 +
              C39126 * C3997) *
                 C90541) *
                C39128) *
               C90634 * C822 -
           (((C39130 * C3990 + C39126 * C3996 + C39129 * C3989 +
              C39125 * C3995) *
                 C90541 +
             (C39130 * C3892 + C39126 * C3898 + C39129 * C3891 +
              C39125 * C3897) *
                 C181) *
                C39128 +
            ((C39130 * C1791 + C39126 * C1796 + C39129 * C1794 +
              C39125 * C1799) *
                 C90541 +
             (C39130 * C1697 + C39126 * C1702 + C39129 * C1700 +
              C39125 * C1708) *
                 C181) *
                C39127) *
               C90634 * C821 -
           (((C39130 * C8222 + C39126 * C8223 + C39129 * C3991 +
              C39125 * C3997) *
                 C90541 +
             (C39130 * C8120 + C39126 * C8121 + C39129 * C3893 +
              C39125 * C3899) *
                 C181) *
                C39128 +
            ((C39130 * C1793 + C39126 * C1798 + C39129 * C1792 +
              C39125 * C1797) *
                 C90541 +
             (C39130 * C1699 + C39126 * C1704 + C39129 * C1698 +
              C39125 * C1703) *
                 C181) *
                C39127) *
               C90634 * C823) *
              C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C2660 +
            (C39129 * C182 + C39125 * C188 + C39130 * C183 + C39126 * C189) *
                C2565 -
            (C39863 + C39862) * C2661 - (C39984 + C39985) * C2566 +
            (C41812 + C41811) * C2662 + (C41921 + C41922) * C2567) *
               C39127 +
           ((C39862 + C39863) * C2660 + (C39985 + C39984) * C2565 -
            (C41811 + C41812) * C2661 - (C41922 + C41921) * C2566 +
            (C42736 + C42737) * C2662 + (C42811 + C42810) * C2567) *
               C39128) *
              C90634 * C90498 * C90753 +
          (((C43403 + C43402) * C2661 -
            ((C39130 * C1791 + C39126 * C1796 + C39129 * C1794 +
              C39125 * C1799) *
                 C2565 +
             (C39130 * C1697 + C39126 * C1702 + C39129 * C1700 +
              C39125 * C1708) *
                 C2660) +
            (C43514 + C43515) * C2566 - (C43405 + C43404) * C2662 -
            (C43516 + C43517) * C2567) *
               C39127 +
           ((C43404 + C43405) * C2661 -
            ((C43515 + C43514) * C2565 + (C43402 + C43403) * C2660) +
            (C43517 + C43516) * C2566 -
            (C39130 * C21004 + C39126 * C21005 + C39129 * C16835 +
             C39125 * C16837) *
                C2662 -
            (C39130 * C21126 + C39126 * C21127 + C39129 * C16942 +
             C39125 * C16944) *
                C2567) *
               C39128) *
              C90634 * C90498 * C90579)) /
            (p * q * std::sqrt(p + q));
    d2eexz[14] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C1875 +
            (C39129 * C245 + C39125 * C251 + C39130 * C246 + C39126 * C252) *
                C90753 -
            (C39130 * C1697 + C39126 * C1702 + C39129 * C1700 +
             C39125 * C1708) *
                C1876 -
            (C39130 * C1878 + C39126 * C1883 + C39129 * C1879 +
             C39125 * C1884) *
                C90579) *
               C39127 +
           ((C39862 + C39863) * C1875 + (C40100 + C40101) * C90753 -
            (C39130 * C3892 + C39126 * C3898 + C39129 * C3891 +
             C39125 * C3897) *
                C1876 -
            (C39130 * C4076 + C39126 * C4082 + C39129 * C4075 +
             C39125 * C4081) *
                C90579) *
               C39128) *
              C90634 * C90541 * C821 +
          (((C39129 * C1697 + C39125 * C1702 + C39130 * C1698 +
             C39126 * C1703) *
                C1876 -
            ((C39130 * C247 + C39126 * C253 + C39129 * C246 + C39125 * C252) *
                 C90753 +
             (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                 C1875) +
            (C39129 * C1878 + C39125 * C1883 + C39130 * C1877 +
             C39126 * C1882) *
                C90579) *
               C39127 +
           ((C39129 * C3892 + C39125 * C3898 + C39130 * C3893 +
             C39126 * C3899) *
                C1876 -
            ((C40103 + C40102) * C90753 + (C39866 + C39867) * C1875) +
            (C39129 * C4076 + C39125 * C4082 + C39130 * C4077 +
             C39126 * C4083) *
                C90579) *
               C39128) *
              C90634 * C90541 * C822 +
          (((C39129 * C109 + C39125 * C115 + C39130 * C110 + C39126 * C119) *
                C1875 +
            (C39129 * C247 + C39125 * C253 + C39130 * C248 + C39126 * C254) *
                C90753 -
            (C39130 * C1699 + C39126 * C1704 + C39129 * C1698 +
             C39125 * C1703) *
                C1876 -
            (C39130 * C1880 + C39126 * C1885 + C39129 * C1877 +
             C39125 * C1882) *
                C90579) *
               C39127 +
           ((C39870 + C39871) * C1875 + (C40104 + C40105) * C90753 -
            (C39130 * C8120 + C39126 * C8121 + C39129 * C3893 +
             C39125 * C3899) *
                C1876 -
            (C39130 * C8322 + C39126 * C8323 + C39129 * C4077 +
             C39125 * C4083) *
                C90579) *
               C39128) *
              C90634 * C90541 * C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C1875 +
            (C39129 * C245 + C39125 * C251 + C39130 * C246 + C39126 * C252) *
                C90753 -
            (C39130 * C1697 + C39126 * C1702 + C39129 * C1700 +
             C39125 * C1708) *
                C1876 -
            (C39130 * C1878 + C39126 * C1883 + C39129 * C1879 +
             C39125 * C1884) *
                C90579) *
               C39127 +
           ((C39862 + C39863) * C1875 + (C40100 + C40101) * C90753 -
            (C43402 + C43403) * C1876 - (C43624 + C43625) * C90579) *
               C39128) *
              C90634 * C2565 +
          (((C43403 + C43402) * C1876 -
            ((C40101 + C40100) * C90753 + (C39863 + C39862) * C1875) +
            (C43625 + C43624) * C90579) *
               C39127 +
           ((C43404 + C43405) * C1876 -
            ((C42031 + C42032) * C90753 + (C41811 + C41812) * C1875) +
            (C43626 + C43627) * C90579) *
               C39128) *
              C90634 * C2566 +
          (((C41812 + C41811) * C1875 + (C42032 + C42031) * C90753 -
            (C43405 + C43404) * C1876 - (C43627 + C43626) * C90579) *
               C39127 +
           ((C42736 + C42737) * C1875 + (C42882 + C42883) * C90753 -
            (C39130 * C21004 + C39126 * C21005 + C39129 * C16835 +
             C39125 * C16837) *
                C1876 -
            (C39130 * C21232 + C39126 * C21233 + C39129 * C17029 +
             C39125 * C17031) *
                C90579) *
               C39128) *
              C90634 * C2567) *
         C90498) /
            (p * q * std::sqrt(p + q));
    d2eeyx[14] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C826 +
            (C39329 * C116 + C39127 * C314 + C39330 * C839 + C39128 * C1098) *
                C821 -
            (C39356 + C39357) * C827 - (C39358 + C39359) * C822 +
            (C39360 + C39361) * C828 + (C39362 + C39363) * C823) *
               C90634 * C39125 +
           ((C39357 + C39356) * C826 + (C39359 + C39358) * C821 -
            (C39361 + C39360) * C827 - (C39363 + C39362) * C822 +
            (C39365 + C39364) * C828 + (C39367 + C39366) * C823) *
               C90634 * C39126) *
              C90753 +
          (((C41167 + C41168) * C827 -
            ((C39330 * C3900 + C39128 * C4167 + C39329 * C1707 +
              C39127 * C1966) *
                 C821 +
             (C39330 * C3891 + C39128 * C4161 + C39329 * C1700 +
              C39127 * C1962) *
                 C826) +
            (C41169 + C41170) * C822 - (C41171 + C41172) * C828 -
            (C41173 + C41174) * C823) *
               C90634 * C39125 +
           ((C41172 + C41171) * C827 -
            ((C41170 + C41169) * C821 + (C41168 + C41167) * C826) +
            (C41174 + C41173) * C822 -
            (C39330 * C8120 + C39128 * C8422 + C39329 * C1699 +
             C39127 * C1964) *
                C828 -
            (C39330 * C8122 + C39128 * C8423 + C39329 * C1709 +
             C39127 * C1969) *
                C823) *
               C90634 * C39126) *
              C90579) *
         C90541) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                 C3364 +
             (C39329 * C116 + C39127 * C314 + C39330 * C839 + C39128 * C1098) *
                 C90498) *
                C90634 * C39125 +
            ((C39357 + C39356) * C3364 + (C39359 + C39358) * C90498) * C90634 *
                C39126) *
               C90753 -
           (((C41170 + C41169) * C90498 + (C41168 + C41167) * C3364) * C90634 *
                C39126 +
            ((C39330 * C3900 + C39128 * C4167 + C39329 * C1707 +
              C39127 * C1966) *
                 C90498 +
             (C39330 * C3891 + C39128 * C4161 + C39329 * C1700 +
              C39127 * C1962) *
                 C3364) *
                C90634 * C39125) *
               C90579) *
              C2565 +
          ((((C39329 * C3891 + C39127 * C4161 + C39330 * C3896 +
              C39128 * C4166) *
                 C3364 +
             (C39329 * C3900 + C39127 * C4167 + C39330 * C3905 +
              C39128 * C4172) *
                 C90498) *
                C90634 * C39125 +
            ((C39329 * C3892 + C39127 * C4162 + C39330 * C3895 +
              C39128 * C4165) *
                 C3364 +
             (C39329 * C3901 + C39127 * C4168 + C39330 * C3904 +
              C39128 * C4171) *
                 C90498) *
                C90634 * C39126) *
               C90579 -
           (((C40223 + C40222) * C90498 + (C40221 + C40220) * C3364) * C90634 *
                C39126 +
            ((C39330 * C2577 + C39128 * C2831 + C39329 * C839 +
              C39127 * C1098) *
                 C90498 +
             (C39330 * C2570 + C39128 * C2827 + C39329 * C832 +
              C39127 * C1094) *
                 C3364) *
                C90634 * C39125) *
               C90753) *
              C2566 +
          ((((C39329 * C2570 + C39127 * C2827 + C39330 * C3367 +
              C39128 * C3545) *
                 C3364 +
             (C39329 * C2577 + C39127 * C2831 + C39330 * C3370 +
              C39128 * C3548) *
                 C90498) *
                C90634 * C39125 +
            ((C42142 + C42141) * C3364 + (C42144 + C42143) * C90498) * C90634 *
                C39126) *
               C90753 -
           (((C39330 * C21006 + C39128 * C21347 + C39329 * C3904 +
              C39127 * C4171) *
                 C90498 +
             (C39330 * C21004 + C39128 * C21346 + C39329 * C3895 +
              C39127 * C4165) *
                 C3364) *
                C90634 * C39126 +
            ((C39330 * C16838 + C39128 * C17133 + C39329 * C3905 +
              C39127 * C4172) *
                 C90498 +
             (C39330 * C16835 + C39128 * C17131 + C39329 * C3896 +
              C39127 * C4166) *
                 C3364) *
                C90634 * C39125) *
               C90579) *
              C2567)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[14] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                 C181 +
             (C39329 * C182 + C39127 * C394 + C39330 * C927 + C39128 * C1195) *
                 C90541) *
                C90634 * C39125 +
            ((C39357 + C39356) * C181 + (C39446 + C39447) * C90541) * C90634 *
                C39126) *
               C821 -
           (((C39448 + C39449) * C90541 + (C39361 + C39360) * C181) * C90634 *
                C39126 +
            ((C39447 + C39446) * C90541 + (C39356 + C39357) * C181) * C90634 *
                C39125) *
               C822 +
           (((C39360 + C39361) * C181 + (C39449 + C39448) * C90541) * C90634 *
                C39125 +
            ((C39365 + C39364) * C181 + (C39450 + C39451) * C90541) * C90634 *
                C39126) *
               C823) *
              C90753 +
          ((((C41167 + C41168) * C181 + (C41281 + C41282) * C90541) * C90634 *
                C39125 +
            ((C41172 + C41171) * C181 + (C41283 + C41284) * C90541) * C90634 *
                C39126) *
               C822 -
           (((C41282 + C41281) * C90541 + (C41168 + C41167) * C181) * C90634 *
                C39126 +
            ((C39330 * C3989 + C39128 * C4247 + C39329 * C1794 +
              C39127 * C2066) *
                 C90541 +
             (C39330 * C3891 + C39128 * C4161 + C39329 * C1700 +
              C39127 * C1962) *
                 C181) *
                C90634 * C39125) *
               C821 -
           (((C39330 * C8222 + C39128 * C8534 + C39329 * C1793 +
              C39127 * C2065) *
                 C90541 +
             (C39330 * C8120 + C39128 * C8422 + C39329 * C1699 +
              C39127 * C1964) *
                 C181) *
                C90634 * C39126 +
            ((C41284 + C41283) * C90541 + (C41171 + C41172) * C181) * C90634 *
                C39125) *
               C823) *
              C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C2660 +
            (C39329 * C182 + C39127 * C394 + C39330 * C927 + C39128 * C1195) *
                C2565 -
            (C39330 * C2570 + C39128 * C2827 + C39329 * C832 + C39127 * C1094) *
                C2661 -
            (C39330 * C2663 + C39128 * C2921 + C39329 * C927 + C39127 * C1195) *
                C2566 +
            (C39329 * C2570 + C39127 * C2827 + C39330 * C3367 +
             C39128 * C3545) *
                C2662 +
            (C39329 * C2663 + C39127 * C2921 + C39330 * C3433 +
             C39128 * C3599) *
                C2567) *
               C90634 * C39125 +
           ((C39357 + C39356) * C2660 + (C39446 + C39447) * C2565 -
            (C40221 + C40220) * C2661 - (C40334 + C40335) * C2566 +
            (C42142 + C42141) * C2662 + (C42247 + C42248) * C2567) *
               C90634 * C39126) *
              C90498 * C90753 +
          (((C39329 * C3891 + C39127 * C4161 + C39330 * C3896 +
             C39128 * C4166) *
                C2661 -
            ((C39330 * C3989 + C39128 * C4247 + C39329 * C1794 +
              C39127 * C2066) *
                 C2565 +
             (C39330 * C3891 + C39128 * C4161 + C39329 * C1700 +
              C39127 * C1962) *
                 C2660) +
            (C39329 * C3989 + C39127 * C4247 + C39330 * C3994 +
             C39128 * C4248) *
                C2566 -
            (C39330 * C16835 + C39128 * C17131 + C39329 * C3896 +
             C39127 * C4166) *
                C2662 -
            (C39330 * C16942 + C39128 * C17209 + C39329 * C3994 +
             C39127 * C4248) *
                C2567) *
               C90634 * C39125 +
           ((C39329 * C3892 + C39127 * C4162 + C39330 * C3895 +
             C39128 * C4165) *
                C2661 -
            ((C41282 + C41281) * C2565 + (C41168 + C41167) * C2660) +
            (C39329 * C3990 + C39127 * C4249 + C39330 * C3993 +
             C39128 * C4250) *
                C2566 -
            (C39330 * C21004 + C39128 * C21346 + C39329 * C3895 +
             C39127 * C4165) *
                C2662 -
            (C39330 * C21126 + C39128 * C21446 + C39329 * C3993 +
             C39127 * C4250) *
                C2567) *
               C90634 * C39126) *
              C90498 * C90579)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[14] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C1875 +
            (C39329 * C245 + C39127 * C474 + C39330 * C1011 + C39128 * C1301) *
                C90753 -
            (C39330 * C3891 + C39128 * C4161 + C39329 * C1700 +
             C39127 * C1962) *
                C1876 -
            (C39330 * C4075 + C39128 * C4327 + C39329 * C1879 +
             C39127 * C2159) *
                C90579) *
               C90634 * C39125 +
           ((C39357 + C39356) * C1875 + (C39530 + C39531) * C90753 -
            (C41168 + C41167) * C1876 - (C41391 + C41392) * C90579) *
               C90634 * C39126) *
              C90541 * C821 +
          (((C41167 + C41168) * C1876 -
            ((C39531 + C39530) * C90753 + (C39356 + C39357) * C1875) +
            (C41392 + C41391) * C90579) *
               C90634 * C39125 +
           ((C41172 + C41171) * C1876 -
            ((C39532 + C39533) * C90753 + (C39361 + C39360) * C1875) +
            (C41393 + C41394) * C90579) *
               C90634 * C39126) *
              C90541 * C822 +
          (((C39360 + C39361) * C1875 + (C39533 + C39532) * C90753 -
            (C41171 + C41172) * C1876 - (C41394 + C41393) * C90579) *
               C90634 * C39125 +
           ((C39365 + C39364) * C1875 + (C39534 + C39535) * C90753 -
            (C39330 * C8120 + C39128 * C8422 + C39329 * C1699 +
             C39127 * C1964) *
                C1876 -
            (C39330 * C8322 + C39128 * C8647 + C39329 * C1880 +
             C39127 * C2162) *
                C90579) *
               C90634 * C39126) *
              C90541 * C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C1875 +
            (C39329 * C245 + C39127 * C474 + C39330 * C1011 + C39128 * C1301) *
                C90753 -
            (C39330 * C3891 + C39128 * C4161 + C39329 * C1700 +
             C39127 * C1962) *
                C1876 -
            (C39330 * C4075 + C39128 * C4327 + C39329 * C1879 +
             C39127 * C2159) *
                C90579) *
               C90634 * C39125 +
           ((C39357 + C39356) * C1875 + (C39530 + C39531) * C90753 -
            (C41168 + C41167) * C1876 - (C41391 + C41392) * C90579) *
               C90634 * C39126) *
              C2565 +
          (((C39329 * C3891 + C39127 * C4161 + C39330 * C3896 +
             C39128 * C4166) *
                C1876 -
            ((C39330 * C2745 + C39128 * C3017 + C39329 * C1011 +
              C39127 * C1301) *
                 C90753 +
             (C39330 * C2570 + C39128 * C2827 + C39329 * C832 +
              C39127 * C1094) *
                 C1875) +
            (C39329 * C4075 + C39127 * C4327 + C39330 * C4080 +
             C39128 * C4330) *
                C90579) *
               C90634 * C39125 +
           ((C39329 * C3892 + C39127 * C4162 + C39330 * C3895 +
             C39128 * C4165) *
                C1876 -
            ((C40444 + C40445) * C90753 + (C40221 + C40220) * C1875) +
            (C39329 * C4076 + C39127 * C4328 + C39330 * C4079 +
             C39128 * C4331) *
                C90579) *
               C90634 * C39126) *
              C2566 +
          (((C39329 * C2570 + C39127 * C2827 + C39330 * C3367 +
             C39128 * C3545) *
                C1875 +
            (C39329 * C2745 + C39127 * C3017 + C39330 * C3489 +
             C39128 * C3654) *
                C90753 -
            (C39330 * C16835 + C39128 * C17131 + C39329 * C3896 +
             C39127 * C4166) *
                C1876 -
            (C39330 * C17029 + C39128 * C17285 + C39329 * C4080 +
             C39127 * C4330) *
                C90579) *
               C90634 * C39125 +
           ((C42142 + C42141) * C1875 + (C42351 + C42352) * C90753 -
            (C39330 * C21004 + C39128 * C21346 + C39329 * C3895 +
             C39127 * C4165) *
                C1876 -
            (C39330 * C21232 + C39128 * C21545 + C39329 * C4079 +
             C39127 * C4331) *
                C90579) *
               C90634 * C39126) *
              C2567) *
         C90498) /
            (p * q * std::sqrt(p + q));
    d2eezx[14] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C826 +
             (C554 * C116 + C90634 * C561) * C821 - C584 * C827 - C585 * C822 +
             C586 * C828 + C587 * C823) *
                C39125 +
            (C584 * C826 + C585 * C821 - C586 * C827 - C587 * C822 +
             C588 * C828 + C589 * C823) *
                C39126) *
               C39127 +
           ((C14618 + C14619 - C14602 - C14603 + C14604 + C14605) * C39125 +
            (C40546 + C40547 - C40548 - C40549 + C40550 + C40551) * C39126) *
               C39128) *
              C90753 +
          (((C2286 * C827 -
             ((C554 * C1707 + C90634 * C2268) * C821 +
              (C554 * C1700 + C90634 * C2264) * C826) +
             C2287 * C822 - C2288 * C828 - C2289 * C823) *
                C39125 +
            (C2288 * C827 - (C2287 * C821 + C2286 * C826) + C2289 * C822 -
             C2290 * C828 - C2291 * C823) *
                C39126) *
               C39127 +
           ((C8771 * C827 - (C17380 * C821 + C17381 * C826) + C8772 * C822 -
             C8773 * C828 - C8774 * C823) *
                C39125 +
            (C8773 * C827 - (C8772 * C821 + C8771 * C826) + C8774 * C822 -
             (C554 * C8120 + C90634 * C8760) * C828 -
             (C554 * C8122 + C90634 * C8761) * C823) *
                C39126) *
               C39128) *
              C90579) *
         C90541) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C90634 * C555) * C3364 +
              (C554 * C116 + C90634 * C561) * C90498) *
                 C39125 +
             (C584 * C3364 + C585 * C90498) * C39126) *
                C39127 +
            ((C16632 + C16633) * C39125 + (C43148 + C43149) * C39126) *
                C39128) *
               C90753 -
           (((C44020 + C44021) * C39126 + (C17386 + C17387) * C39125) * C39128 +
            ((C2287 * C90498 + C2286 * C3364) * C39126 +
             ((C554 * C1707 + C90634 * C2268) * C90498 +
              (C554 * C1700 + C90634 * C2264) * C3364) *
                 C39125) *
                C39127) *
               C90579) *
              C2565 +
          ((((C17387 + C17386) * C39125 + (C44021 + C44020) * C39126) * C39127 +
            ((C17385 + C17384) * C39125 + (C44022 + C44023) * C39126) *
                C39128) *
               C90579 -
           (((C43150 + C43151) * C39126 + (C16635 + C16634) * C39125) * C39128 +
            ((C43149 + C43148) * C39126 + (C16633 + C16632) * C39125) *
                C39127) *
               C90753) *
              C2566 +
          (((C16642 * C39125 + (C43151 + C43150) * C39126) * C39127 +
            ((C16637 + C16636) * C39125 + (C43152 + C43153) * C39126) *
                C39128) *
               C90753 -
           ((((C554 * C21006 + C90634 * C21645) * C90498 +
              (C554 * C21004 + C90634 * C21644) * C3364) *
                 C39126 +
             (C17389 + C17388) * C39125) *
                C39128 +
            ((C44023 + C44022) * C39126 + C17390 * C39125) * C39127) *
               C90579) *
              C2567)) /
            (p * q * std::sqrt(p + q));
    d2eezy[14] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C554 * C107 + C90634 * C555) * C181 +
              (C554 * C182 + C90634 * C641) * C90541) *
                 C39125 +
             (C648 + C664) * C39126) *
                C39127 +
            ((C14614 * C181 + C14700 * C90541) * C39125 +
             (C39668 + C39669) * C39126) *
                C39128) *
               C821 -
           (((C39670 + C39671) * C39126 + (C39669 + C39668) * C39125) * C39128 +
            ((C665 + C651) * C39126 + (C664 + C648) * C39125) * C39127) *
               C822 +
           ((C668 * C39125 + (C656 + C666) * C39126) * C39127 +
            ((C39671 + C39670) * C39125 + (C39672 + C39673) * C39126) *
                C39128) *
               C823) *
              C90753 +
          ((((C2371 + C2383) * C39125 + (C2374 + C2384) * C39126) * C39127 +
            ((C41591 + C41592) * C39125 + (C41593 + C41594) * C39126) *
                C39128) *
               C822 -
           (((C41592 + C41591) * C39126 +
             (C17474 * C90541 + C17381 * C181) * C39125) *
                C39128 +
            ((C2383 + C2371) * C39126 +
             ((C554 * C1794 + C90634 * C2368) * C90541 +
              (C554 * C1700 + C90634 * C2264) * C181) *
                 C39125) *
                C39127) *
               C821 -
           ((((C554 * C8222 + C90634 * C8872) * C90541 +
              (C554 * C8120 + C90634 * C8760) * C181) *
                 C39126 +
             (C41594 + C41593) * C39125) *
                C39128 +
            ((C2385 + C2377) * C39126 + C2386 * C39125) * C39127) *
               C823) *
              C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C2660 +
             (C554 * C182 + C90634 * C641) * C2565 - C14614 * C2661 -
             C14700 * C2566 + C14616 * C2662 + C14701 * C2567) *
                C39125 +
            (C3204 + C3205 - C3206 - C3207 + C3208 + C3220) * C39126) *
               C39127 +
           ((C14614 * C2660 + C14700 * C2565 - C14616 * C2661 - C14701 * C2566 +
             C16062 * C2662 + C16151 * C2567) *
                C39125 +
            (C42557 + C42558 - C42559 - C42560 + C42561 + C42562) * C39126) *
               C39128) *
              C90498 * C90753 +
          (((C17381 * C2661 -
             ((C554 * C1794 + C90634 * C2368) * C2565 +
              (C554 * C1700 + C90634 * C2264) * C2660) +
             C17474 * C2566 - C17379 * C2662 - C17475 * C2567) *
                C39125 +
            (C8771 * C2661 - (C2380 * C2565 + C2286 * C2660) + C8884 * C2566 -
             C21657 * C2662 - C21762 * C2567) *
                C39126) *
               C39127 +
           ((C17379 * C2661 - (C17474 * C2565 + C17381 * C2660) +
             C17475 * C2566 - C17382 * C2662 - C17476 * C2567) *
                C39125 +
            (C21657 * C2661 - (C8884 * C2565 + C8771 * C2660) + C21762 * C2566 -
             (C554 * C21004 + C90634 * C21644) * C2662 -
             (C554 * C21126 + C90634 * C21758) * C2567) *
                C39126) *
               C39128) *
              C90498 * C90579)) /
            (p * q * std::sqrt(p + q));
    d2eezz[14] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C1875 +
             (C554 * C245 + C90634 * C719) * C90753 -
             (C554 * C1700 + C90634 * C2264) * C1876 -
             (C554 * C1879 + C90634 * C2460) * C90579) *
                C39125 +
            (C2466 + C2467 - C2468 - C2485) * C39126) *
               C39127 +
           ((C17553 + C17554 - C17555 - C17572) * C39125 +
            (C8989 + C8988 - C8987 - C8999) * C39126) *
               C39128) *
              C90541 * C821 +
          (((C2468 - (C2467 + C2466) + C2485) * C39125 +
            (C2473 - (C2472 + C2471) + C2487) * C39126) *
               C39127 +
           ((C8987 - (C8988 + C8989) + C8999) * C39125 +
            (C8992 - (C8993 + C8994) + C9000) * C39126) *
               C39128) *
              C90541 * C822 +
          ((C2489 * C39125 + (C2478 + C2477 - C2476 - C2488) * C39126) *
               C39127 +
           ((C8994 + C8993 - C8992 - C9000) * C39125 +
            (C1422 * C1875 + C1617 * C90753 -
             (C554 * C8120 + C90634 * C8760) * C1876 -
             (C554 * C8322 + C90634 * C8985) * C90579) *
                C39126) *
               C39128) *
              C90541 * C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C1875 +
             (C554 * C245 + C90634 * C719) * C90753 -
             (C554 * C1700 + C90634 * C2264) * C1876 -
             (C554 * C1879 + C90634 * C2460) * C90579) *
                C39125 +
            (C2466 + C2467 - C2468 - C2485) * C39126) *
               C39127 +
           ((C17553 + C17554 - C17555 - C17572) * C39125 +
            (C8989 + C8988 - C8987 - C8999) * C39126) *
               C39128) *
              C2565 +
          (((C17555 - (C17554 + C17553) + C17572) * C39125 +
            (C8987 - (C8988 + C8989) + C8999) * C39126) *
               C39127 +
           ((C17560 - (C17559 + C17558) + C17574) * C39125 +
            (C21862 - (C21863 + C21864) + C21868) * C39126) *
               C39128) *
              C2566 +
          ((C17576 * C39125 + (C21864 + C21863 - C21862 - C21868) * C39126) *
               C39127 +
           ((C17565 + C17564 - C17563 - C17575) * C39125 +
            (C16060 * C1875 + C16239 * C90753 -
             (C554 * C21004 + C90634 * C21644) * C1876 -
             (C554 * C21232 + C90634 * C21860) * C90579) *
                C39126) *
               C39128) *
              C2567) *
         C90498) /
            (p * q * std::sqrt(p + q));
    d2eexx[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C6694 +
             (C13579 * C116 + C90485 * C125) * C90780 -
             (C13579 * C108 + C90485 * C114) * C6695 -
             (C13579 * C117 + C90485 * C126) * C90771 +
             (C13579 * C109 + C90485 * C115) * C6696 +
             (C13579 * C118 + C90485 * C127) * C6691) *
                C39127 +
            (C19594 + C19595 - C19596 - C19597 + C19598 + C19599) * C39128) *
               C55625 +
           ((C34604 + C34605 - C34606 - C34607 + C34608 + C34609) * C39127 +
            (C79494 + C79495 - C79496 - C79497 + C79498 + C79499) * C39128) *
               C55626) *
              C90567 * C6692 +
          (((C19596 - (C19595 + C19594) + C19597 - C19598 - C19599) * C39127 +
            (C19602 - (C19601 + C19600) + C19603 - C19604 - C19605) * C39128) *
               C55625 +
           ((C79496 - (C79495 + C79494) + C79497 - C79498 - C79499) * C39127 +
            (C21023 * C6695 - (C16856 * C90780 + C16857 * C6694) +
             C21024 * C90771 - (C13579 * C3894 + C90485 * C3906) * C6696 -
             (C13579 * C3903 + C90485 * C3912) * C6691) *
                C39128) *
               C55626) *
              C90567 * C90555)) /
        (p * q * std::sqrt(p + q));
    d2eexy[15] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C13579 * C107 + C90485 * C113) * C6771 +
                       (C13579 * C182 + C90485 * C188) * C6692 -
                       C14082 * C6772 - C14192 * C90555) *
                          C39127 +
                      (C14082 * C6771 + C14192 * C6692 - C14088 * C6772 -
                       C14193 * C90555) *
                          C39128) *
                         C55625 +
                     ((C33772 + C33773 - C33774 - C33775) * C39127 +
                      (C16859 * C6771 + C16953 * C6692 - C16857 * C6772 -
                       C16954 * C90555) *
                          C39128) *
                         C55626) *
                        C90780 +
                    (((C14084 * C6772 -
                       ((C13579 * C183 + C90485 * C189) * C6692 +
                        (C13579 * C108 + C90485 * C114) * C6771) +
                       C14194 * C90555) *
                          C39127 +
                      (C14090 * C6772 - (C14194 * C6692 + C14084 * C6771) +
                       C14195 * C90555) *
                          C39128) *
                         C55625 +
                     ((C33780 - (C33781 + C33782) + C33783) * C39127 +
                      (C21023 * C6772 - (C21133 * C6692 + C21021 * C6771) +
                       C21134 * C90555) *
                          C39128) *
                         C55626) *
                        C90771 +
                    ((((C13579 * C109 + C90485 * C115) * C6771 +
                       (C13579 * C184 + C90485 * C190) * C6692 -
                       C14086 * C6772 - C14196 * C90555) *
                          C39127 +
                      (C14086 * C6771 + C14196 * C6692 - C14092 * C6772 -
                       C14197 * C90555) *
                          C39128) *
                         C55625 +
                     ((C27604 * C6771 + C27720 * C6692 - C72660 * C6772 -
                       C72764 * C90555) *
                          C39127 +
                      (C72660 * C6771 + C72764 * C6692 -
                       (C13579 * C3894 + C90485 * C3906) * C6772 -
                       (C13579 * C3992 + C90485 * C3998) * C90555) *
                          C39128) *
                         C55626) *
                        C6691) *
                   C90567) /
                  (p * q * std::sqrt(p + q));
    d2eexz[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C13579 * C107 + C90485 * C113) * C244 +
              (C13579 * C245 + C90485 * C251) * C90567) *
                 C39127 +
             (C14272 + C14296) * C39128) *
                C55625 +
            ((C27600 * C244 + C27814 * C90567) * C39127 +
             (C72863 + C72864) * C39128) *
                C55626) *
               C6692 -
           (((C74690 + C74691) * C39128 + (C72864 + C72863) * C39127) * C55626 +
            ((C14297 + C14275) * C39128 + (C14296 + C14272) * C39127) *
                C55625) *
               C90555) *
              C90780 +
          ((((C14278 + C14298) * C39127 + (C14281 + C14299) * C39128) * C55625 +
            ((C72865 + C72866) * C39127 + (C74692 + C74693) * C39128) *
                C55626) *
               C90555 -
           (((C72866 + C72865) * C39128 +
             (C27816 * C90567 + C27602 * C244) * C39127) *
                C55626 +
            ((C14298 + C14278) * C39128 +
             ((C13579 * C246 + C90485 * C252) * C90567 +
              (C13579 * C108 + C90485 * C114) * C244) *
                 C39127) *
                C55625) *
               C6692) *
              C90771 +
          (((((C13579 * C109 + C90485 * C115) * C244 +
              (C13579 * C247 + C90485 * C253) * C90567) *
                 C39127 +
             (C14284 + C14300) * C39128) *
                C55625 +
            ((C27604 * C244 + C27818 * C90567) * C39127 +
             (C72867 + C72871) * C39128) *
                C55626) *
               C6692 -
           ((((C13579 * C4078 + C90485 * C4084) * C90567 +
              (C13579 * C3894 + C90485 * C3906) * C244) *
                 C39128 +
             (C72871 + C72867) * C39127) *
                C55626 +
            ((C14301 + C14287) * C39128 + (C14300 + C14284) * C39127) *
                C55625) *
               C90555) *
              C6691)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C6694 +
            (C39329 * C116 + C39127 * C314 + C39330 * C839 + C39128 * C1098) *
                C90780 -
            (C39356 + C39357) * C6695 - (C39358 + C39359) * C90771 +
            (C39360 + C39361) * C6696 + (C39362 + C39363) * C6691) *
               C55625 +
           ((C73890 + C73891) * C6694 + (C73892 + C73893) * C90780 -
            (C41168 + C41167) * C6695 - (C41170 + C41169) * C90771 +
            (C41172 + C41171) * C6696 + (C41174 + C41173) * C6691) *
               C55626) *
              C90485 * C90567 * C6692 +
          (((C40220 + C40221) * C6695 -
            ((C39330 * C2577 + C39128 * C2831 + C39329 * C839 +
              C39127 * C1098) *
                 C90780 +
             (C39330 * C2570 + C39128 * C2827 + C39329 * C832 +
              C39127 * C1094) *
                 C6694) +
            (C40222 + C40223) * C90771 - (C40224 + C40225) * C6696 -
            (C40226 + C40227) * C6691) *
               C55625 +
           ((C48993 + C48992) * C6695 -
            ((C76354 + C76353) * C90780 + (C76352 + C76351) * C6694) +
            (C48995 + C48994) * C90771 -
            (C39330 * C3894 + C39128 * C4164 + C39329 * C3893 +
             C39127 * C4163) *
                C6696 -
            (C39330 * C3903 + C39128 * C4170 + C39329 * C3902 +
             C39127 * C4169) *
                C6691) *
               C55626) *
              C90485 * C90567 * C90555)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C6771 +
            (C39329 * C182 + C39127 * C394 + C39330 * C927 + C39128 * C1195) *
                C6692 -
            (C39330 * C2570 + C39128 * C2827 + C39329 * C832 + C39127 * C1094) *
                C6772 -
            (C39330 * C2663 + C39128 * C2921 + C39329 * C927 + C39127 * C1195) *
                C90555) *
               C55625 +
           ((C73890 + C73891) * C6771 + (C73996 + C73997) * C6692 -
            (C76352 + C76351) * C6772 - (C76465 + C76466) * C90555) *
               C55626) *
              C90485 * C90780 +
          (((C40220 + C40221) * C6772 -
            ((C39447 + C39446) * C6692 + (C39356 + C39357) * C6771) +
            (C40335 + C40334) * C90555) *
               C55625 +
           ((C48993 + C48992) * C6772 -
            ((C41282 + C41281) * C6692 + (C41168 + C41167) * C6771) +
            (C49130 + C49131) * C90555) *
               C55626) *
              C90485 * C90771 +
          (((C39360 + C39361) * C6771 + (C39449 + C39448) * C6692 -
            (C40224 + C40225) * C6772 - (C40337 + C40336) * C90555) *
               C55625 +
           ((C41172 + C41171) * C6771 + (C41283 + C41284) * C6692 -
            (C39330 * C3894 + C39128 * C4164 + C39329 * C3893 +
             C39127 * C4163) *
                C6772 -
            (C39330 * C3992 + C39128 * C4252 + C39329 * C3991 +
             C39127 * C4251) *
                C90555) *
               C55626) *
              C90485 * C6691) *
         C90567) /
        (p * q * std::sqrt(p + q));
    d2eeyz[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                 C244 +
             (C39329 * C245 + C39127 * C474 + C39330 * C1011 + C39128 * C1301) *
                 C90567) *
                C55625 +
            ((C73890 + C73891) * C244 + (C74101 + C74100) * C90567) * C55626) *
               C90485 * C6692 -
           (((C76576 + C76575) * C90567 + (C76352 + C76351) * C244) * C55626 +
            ((C39330 * C2745 + C39128 * C3017 + C39329 * C1011 +
              C39127 * C1301) *
                 C90567 +
             (C39330 * C2570 + C39128 * C2827 + C39329 * C832 +
              C39127 * C1094) *
                 C244) *
                C55625) *
               C90485 * C90555) *
              C90780 +
          ((((C40220 + C40221) * C244 + (C40445 + C40444) * C90567) * C55625 +
            ((C48993 + C48992) * C244 + (C49266 + C49267) * C90567) * C55626) *
               C90485 * C90555 -
           (((C41391 + C41392) * C90567 + (C41168 + C41167) * C244) * C55626 +
            ((C39531 + C39530) * C90567 + (C39356 + C39357) * C244) * C55625) *
               C90485 * C6692) *
              C90771 +
          ((((C39360 + C39361) * C244 + (C39533 + C39532) * C90567) * C55625 +
            ((C41172 + C41171) * C244 + (C41393 + C41394) * C90567) * C55626) *
               C90485 * C6692 -
           (((C39330 * C4078 + C39128 * C4332 + C39329 * C4077 +
              C39127 * C4329) *
                 C90567 +
             (C39330 * C3894 + C39128 * C4164 + C39329 * C3893 +
              C39127 * C4163) *
                 C244) *
                C55626 +
            ((C40447 + C40446) * C90567 + (C40224 + C40225) * C244) * C55625) *
               C90485 * C90555) *
              C6691)) /
        (p * q * std::sqrt(p + q));
    d2eezx[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C6694 +
            (C56029 * C116 + C55625 * C561 + C56030 * C1707 + C55626 * C2268) *
                C90780 -
            (C56056 + C56057) * C6695 - (C56058 + C56059) * C90771 +
            (C56060 + C56061) * C6696 + (C56062 + C56063) * C6691) *
               C90485 * C39127 +
           ((C73272 + C73273) * C6694 + (C73274 + C73275) * C90780 -
            (C56943 + C56942) * C6695 - (C56945 + C56944) * C90771 +
            (C56947 + C56946) * C6696 + (C56949 + C56948) * C6691) *
               C90485 * C39128) *
              C90567 * C6692 +
          (((C56942 + C56943) * C6695 -
            ((C73275 + C73274) * C90780 + (C73273 + C73272) * C6694) +
            (C56944 + C56945) * C90771 - (C56946 + C56947) * C6696 -
            (C56948 + C56949) * C6691) *
               C90485 * C39127 +
           ((C58904 + C58903) * C6695 -
            ((C75094 + C75095) * C90780 + (C75096 + C75097) * C6694) +
            (C58906 + C58905) * C90771 -
            (C56030 * C3894 + C55626 * C4410 + C56029 * C2572 +
             C55625 * C3107) *
                C6696 -
            (C56030 * C3903 + C55626 * C4416 + C56029 * C2579 +
             C55625 * C3111) *
                C6691) *
               C90485 * C39128) *
              C90567 * C90555)) /
        (p * q * std::sqrt(p + q));
    d2eezy[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C6771 +
            (C56029 * C182 + C55625 * C641 + C56030 * C1794 + C55626 * C2368) *
                C6692 -
            (C73273 + C73272) * C6772 - (C73378 + C73379) * C90555) *
               C90485 * C39127 +
           ((C73272 + C73273) * C6771 + (C73379 + C73378) * C6692 -
            (C75096 + C75097) * C6772 - (C75201 + C75200) * C90555) *
               C90485 * C39128) *
              C90780 +
          (((C56942 + C56943) * C6772 -
            ((C56147 + C56146) * C6692 + (C56056 + C56057) * C6771) +
            (C57057 + C57056) * C90555) *
               C90485 * C39127 +
           ((C58904 + C58903) * C6772 -
            ((C57056 + C57057) * C6692 + (C56943 + C56942) * C6771) +
            (C59009 + C59010) * C90555) *
               C90485 * C39128) *
              C90771 +
          (((C56060 + C56061) * C6771 + (C56149 + C56148) * C6692 -
            (C56946 + C56947) * C6772 - (C57059 + C57058) * C90555) *
               C90485 * C39127 +
           ((C56947 + C56946) * C6771 + (C57058 + C57059) * C6692 -
            (C56030 * C3894 + C55626 * C4410 + C56029 * C2572 +
             C55625 * C3107) *
                C6772 -
            (C56030 * C3992 + C55626 * C4498 + C56029 * C2665 +
             C55625 * C3201) *
                C90555) *
               C90485 * C39128) *
              C6691) *
         C90567) /
        (p * q * std::sqrt(p + q));
    d2eezz[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                 C244 +
             (C56029 * C245 + C55625 * C719 + C56030 * C1879 + C55626 * C2460) *
                 C90567) *
                C90485 * C39127 +
            ((C73272 + C73273) * C244 + (C73482 + C73483) * C90567) * C90485 *
                C39128) *
               C6692 -
           (((C75304 + C75305) * C90567 + (C75096 + C75097) * C244) * C90485 *
                C39128 +
            ((C73483 + C73482) * C90567 + (C73273 + C73272) * C244) * C90485 *
                C39127) *
               C90555) *
              C90780 +
          ((((C56942 + C56943) * C244 + (C57167 + C57166) * C90567) * C90485 *
                C39127 +
            ((C58904 + C58903) * C244 + (C59113 + C59114) * C90567) * C90485 *
                C39128) *
               C90555 -
           (((C57166 + C57167) * C90567 + (C56943 + C56942) * C244) * C90485 *
                C39128 +
            ((C56231 + C56230) * C90567 + (C56056 + C56057) * C244) * C90485 *
                C39127) *
               C6692) *
              C90771 +
          ((((C56060 + C56061) * C244 + (C56233 + C56232) * C90567) * C90485 *
                C39127 +
            ((C56947 + C56946) * C244 + (C57168 + C57169) * C90567) * C90485 *
                C39128) *
               C6692 -
           (((C56030 * C4078 + C55626 * C4578 + C56029 * C2747 +
              C55625 * C3297) *
                 C90567 +
             (C56030 * C3894 + C55626 * C4410 + C56029 * C2572 +
              C55625 * C3107) *
                 C244) *
                C90485 * C39128 +
            ((C57169 + C57168) * C90567 + (C56946 + C56947) * C244) * C90485 *
                C39127) *
               C90555) *
              C6691)) /
        (p * q * std::sqrt(p + q));
    d2eexx[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C7401 +
             (C13579 * C116 + C90485 * C125) * C7396 -
             (C13579 * C108 + C90485 * C114) * C7402 -
             (C13579 * C117 + C90485 * C126) * C90503) *
                C39127 +
            (C20284 + C20285 - C20286 - C20287) * C39128) *
               C55625 +
           ((C33654 + C33655 - C33656 - C33657) * C39127 +
            (C21012 + C21011 - C21025 - C21026) * C39128) *
               C55626) *
              C90567 * C90781 +
          (((C20286 - (C20285 + C20284) + C20287) * C39127 +
            (C20290 - (C20289 + C20288) + C20291) * C39128) *
               C55625 +
           ((C21025 - (C21011 + C21012) + C21026) * C39127 +
            (C21027 - (C21017 + C21018) + C21028) * C39128) *
               C55626) *
              C90567 * C90774 +
          ((C20298 * C39127 + (C20294 + C20293 - C20292 - C20295) * C39128) *
               C55625 +
           ((C21018 + C21017 - C21027 - C21028) * C39127 +
            (C16860 * C7401 + C16861 * C7396 -
             (C13579 * C21004 + C90485 * C21005) * C7402 -
             (C13579 * C21006 + C90485 * C21007) * C90503) *
                C39128) *
               C55626) *
              C90567 * C7400)) /
        (p * q * std::sqrt(p + q));
    d2eexy[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C7477 +
             (C13579 * C182 + C90485 * C188) * C90781 - C14082 * C7478 -
             C14192 * C90774 + C14088 * C7479 + C14193 * C7400) *
                C39127 +
            (C14082 * C7477 + C14192 * C90781 - C14088 * C7478 -
             C14193 * C90774 + C15553 * C7479 + C15643 * C7400) *
                C39128) *
               C55625 +
           ((C37837 + C37838 - C37839 - C37840 + C37841 + C37842) * C39127 +
            (C16859 * C7477 + C16953 * C90781 - C16857 * C7478 -
             C16954 * C90774 + C16860 * C7479 + C16955 * C7400) *
                C39128) *
               C55626) *
              C7396 +
          (((C14084 * C7478 -
             ((C13579 * C183 + C90485 * C189) * C90781 +
              (C13579 * C108 + C90485 * C114) * C7477) +
             C14194 * C90774 - C14090 * C7479 - C14195 * C7400) *
                C39127 +
            (C14090 * C7478 - (C14194 * C90781 + C14084 * C7477) +
             C14195 * C90774 - C15551 * C7479 - C15644 * C7400) *
                C39128) *
               C55625 +
           ((C21021 * C7478 - (C27719 * C90781 + C27602 * C7477) +
             C21133 * C90774 - C21023 * C7479 - C21134 * C7400) *
                C39127 +
            (C21023 * C7478 - (C21133 * C90781 + C21021 * C7477) +
             C21134 * C90774 - (C13579 * C21004 + C90485 * C21005) * C7479 -
             (C13579 * C21126 + C90485 * C21127) * C7400) *
                C39128) *
               C55626) *
              C90503) *
         C90567) /
        (p * q * std::sqrt(p + q));
    d2eexz[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C13579 * C107 + C90485 * C113) * C244 +
              (C13579 * C245 + C90485 * C251) * C90567) *
                 C39127 +
             (C14272 + C14296) * C39128) *
                C55625 +
            ((C27600 * C244 + C27814 * C90567) * C39127 +
             (C72863 + C72864) * C39128) *
                C55626) *
               C90781 -
           (((C74690 + C74691) * C39128 + (C72864 + C72863) * C39127) * C55626 +
            ((C14297 + C14275) * C39128 + (C14296 + C14272) * C39127) *
                C55625) *
               C90774 +
           ((C15723 * C39127 + (C15726 + C15733) * C39128) * C55625 +
            ((C74691 + C74690) * C39127 + (C75504 + C75505) * C39128) *
                C55626) *
               C7400) *
              C7396 +
          ((((C14278 + C14298) * C39127 + (C14281 + C14299) * C39128) * C55625 +
            ((C72865 + C72866) * C39127 + (C74692 + C74693) * C39128) *
                C55626) *
               C90774 -
           (((C72866 + C72865) * C39128 +
             (C27816 * C90567 + C27602 * C244) * C39127) *
                C55626 +
            ((C14298 + C14278) * C39128 +
             ((C13579 * C246 + C90485 * C252) * C90567 +
              (C13579 * C108 + C90485 * C114) * C244) *
                 C39127) *
                C55625) *
               C90781 -
           ((((C13579 * C21232 + C90485 * C21233) * C90567 +
              (C13579 * C21004 + C90485 * C21005) * C244) *
                 C39128 +
             (C74693 + C74692) * C39127) *
                C55626 +
            ((C15734 + C15727) * C39128 + C15730 * C39127) * C55625) *
               C7400) *
              C90503)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C7401 +
            (C39329 * C116 + C39127 * C314 + C39330 * C839 + C39128 * C1098) *
                C7396 -
            (C39356 + C39357) * C7402 - (C39358 + C39359) * C90503) *
               C55625 +
           ((C73890 + C73891) * C7401 + (C73892 + C73893) * C7396 -
            (C41168 + C41167) * C7402 - (C41170 + C41169) * C90503) *
               C55626) *
              C90485 * C90567 * C90781 +
          (((C40220 + C40221) * C7402 -
            ((C39330 * C2577 + C39128 * C2831 + C39329 * C839 +
              C39127 * C1098) *
                 C7396 +
             (C39330 * C2570 + C39128 * C2827 + C39329 * C832 +
              C39127 * C1094) *
                 C7401) +
            (C40222 + C40223) * C90503) *
               C55625 +
           ((C48993 + C48992) * C7402 -
            ((C76354 + C76353) * C7396 + (C76352 + C76351) * C7401) +
            (C48995 + C48994) * C90503) *
               C55626) *
              C90485 * C90567 * C90774 +
          (((C39329 * C2570 + C39127 * C2827 + C39330 * C3367 +
             C39128 * C3545) *
                C7401 +
            (C39329 * C2577 + C39127 * C2831 + C39330 * C3370 +
             C39128 * C3548) *
                C7396 -
            (C42141 + C42142) * C7402 - (C42143 + C42144) * C90503) *
               C55625 +
           ((C76355 + C76356) * C7401 + (C76357 + C76358) * C7396 -
            (C39330 * C21004 + C39128 * C21346 + C39329 * C3895 +
             C39127 * C4165) *
                C7402 -
            (C39330 * C21006 + C39128 * C21347 + C39329 * C3904 +
             C39127 * C4171) *
                C90503) *
               C55626) *
              C90485 * C90567 * C7400)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C7477 +
            (C39329 * C182 + C39127 * C394 + C39330 * C927 + C39128 * C1195) *
                C90781 -
            (C39330 * C2570 + C39128 * C2827 + C39329 * C832 + C39127 * C1094) *
                C7478 -
            (C39330 * C2663 + C39128 * C2921 + C39329 * C927 + C39127 * C1195) *
                C90774 +
            (C39329 * C2570 + C39127 * C2827 + C39330 * C3367 +
             C39128 * C3545) *
                C7479 +
            (C39329 * C2663 + C39127 * C2921 + C39330 * C3433 +
             C39128 * C3599) *
                C7400) *
               C55625 +
           ((C73890 + C73891) * C7477 + (C73996 + C73997) * C90781 -
            (C76352 + C76351) * C7478 - (C76465 + C76466) * C90774 +
            (C76355 + C76356) * C7479 + (C76467 + C76468) * C7400) *
               C55626) *
              C90485 * C7396 +
          (((C40220 + C40221) * C7478 -
            ((C39447 + C39446) * C90781 + (C39356 + C39357) * C7477) +
            (C40335 + C40334) * C90774 - (C42141 + C42142) * C7479 -
            (C42248 + C42247) * C7400) *
               C55625 +
           ((C48993 + C48992) * C7478 -
            ((C41282 + C41281) * C90781 + (C41168 + C41167) * C7477) +
            (C49130 + C49131) * C90774 -
            (C39330 * C21004 + C39128 * C21346 + C39329 * C3895 +
             C39127 * C4165) *
                C7479 -
            (C39330 * C21126 + C39128 * C21446 + C39329 * C3993 +
             C39127 * C4250) *
                C7400) *
               C55626) *
              C90485 * C90503) *
         C90567) /
        (p * q * std::sqrt(p + q));
    d2eeyz[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                 C244 +
             (C39329 * C245 + C39127 * C474 + C39330 * C1011 + C39128 * C1301) *
                 C90567) *
                C55625 +
            ((C73890 + C73891) * C244 + (C74101 + C74100) * C90567) * C55626) *
               C90485 * C90781 -
           (((C76576 + C76575) * C90567 + (C76352 + C76351) * C244) * C55626 +
            ((C39330 * C2745 + C39128 * C3017 + C39329 * C1011 +
              C39127 * C1301) *
                 C90567 +
             (C39330 * C2570 + C39128 * C2827 + C39329 * C832 +
              C39127 * C1094) *
                 C244) *
                C55625) *
               C90485 * C90774 +
           (((C39329 * C2570 + C39127 * C2827 + C39330 * C3367 +
              C39128 * C3545) *
                 C244 +
             (C39329 * C2745 + C39127 * C3017 + C39330 * C3489 +
              C39128 * C3654) *
                 C90567) *
                C55625 +
            ((C76355 + C76356) * C244 + (C76578 + C76577) * C90567) * C55626) *
               C90485 * C7400) *
              C7396 +
          ((((C40220 + C40221) * C244 + (C40445 + C40444) * C90567) * C55625 +
            ((C48993 + C48992) * C244 + (C49266 + C49267) * C90567) * C55626) *
               C90485 * C90774 -
           (((C41391 + C41392) * C90567 + (C41168 + C41167) * C244) * C55626 +
            ((C39531 + C39530) * C90567 + (C39356 + C39357) * C244) * C55625) *
               C90485 * C90781 -
           (((C39330 * C21232 + C39128 * C21545 + C39329 * C4079 +
              C39127 * C4331) *
                 C90567 +
             (C39330 * C21004 + C39128 * C21346 + C39329 * C3895 +
              C39127 * C4165) *
                 C244) *
                C55626 +
            ((C42352 + C42351) * C90567 + (C42141 + C42142) * C244) * C55625) *
               C90485 * C7400) *
              C90503)) /
        (p * q * std::sqrt(p + q));
    d2eezx[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C7401 +
            (C56029 * C116 + C55625 * C561 + C56030 * C1707 + C55626 * C2268) *
                C7396 -
            (C56056 + C56057) * C7402 - (C56058 + C56059) * C90503) *
               C90485 * C39127 +
           ((C73272 + C73273) * C7401 + (C73274 + C73275) * C7396 -
            (C56943 + C56942) * C7402 - (C56945 + C56944) * C90503) *
               C90485 * C39128) *
              C90567 * C90781 +
          (((C56942 + C56943) * C7402 -
            ((C73275 + C73274) * C7396 + (C73273 + C73272) * C7401) +
            (C56944 + C56945) * C90503) *
               C90485 * C39127 +
           ((C58904 + C58903) * C7402 -
            ((C75094 + C75095) * C7396 + (C75096 + C75097) * C7401) +
            (C58906 + C58905) * C90503) *
               C90485 * C39128) *
              C90567 * C90774 +
          (((C75097 + C75096) * C7401 + (C75095 + C75094) * C7396 -
            (C58903 + C58904) * C7402 - (C58905 + C58906) * C90503) *
               C90485 * C39127 +
           ((C75778 + C75779) * C7401 + (C75780 + C75781) * C7396 -
            (C56030 * C21004 + C55626 * C21644 + C56029 * C3366 +
             C55625 * C3706) *
                C7402 -
            (C56030 * C21006 + C55626 * C21645 + C56029 * C3369 +
             C55625 * C3709) *
                C90503) *
               C90485 * C39128) *
              C90567 * C7400)) /
        (p * q * std::sqrt(p + q));
    d2eezy[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C7477 +
            (C56029 * C182 + C55625 * C641 + C56030 * C1794 + C55626 * C2368) *
                C90781 -
            (C73273 + C73272) * C7478 - (C73378 + C73379) * C90774 +
            (C75097 + C75096) * C7479 + (C75200 + C75201) * C7400) *
               C90485 * C39127 +
           ((C73272 + C73273) * C7477 + (C73379 + C73378) * C90781 -
            (C75096 + C75097) * C7478 - (C75201 + C75200) * C90774 +
            (C75778 + C75779) * C7479 + (C75853 + C75852) * C7400) *
               C90485 * C39128) *
              C7396 +
          (((C56942 + C56943) * C7478 -
            ((C56147 + C56146) * C90781 + (C56056 + C56057) * C7477) +
            (C57057 + C57056) * C90774 - (C58903 + C58904) * C7479 -
            (C59010 + C59009) * C7400) *
               C90485 * C39127 +
           ((C58904 + C58903) * C7478 -
            ((C57056 + C57057) * C90781 + (C56943 + C56942) * C7477) +
            (C59009 + C59010) * C90774 -
            (C56030 * C21004 + C55626 * C21644 + C56029 * C3366 +
             C55625 * C3706) *
                C7479 -
            (C56030 * C21126 + C55626 * C21758 + C56029 * C3432 +
             C55625 * C3762) *
                C7400) *
               C90485 * C39128) *
              C90503) *
         C90567) /
        (p * q * std::sqrt(p + q));
    d2eezz[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                 C244 +
             (C56029 * C245 + C55625 * C719 + C56030 * C1879 + C55626 * C2460) *
                 C90567) *
                C90485 * C39127 +
            ((C73272 + C73273) * C244 + (C73482 + C73483) * C90567) * C90485 *
                C39128) *
               C90781 -
           (((C75304 + C75305) * C90567 + (C75096 + C75097) * C244) * C90485 *
                C39128 +
            ((C73483 + C73482) * C90567 + (C73273 + C73272) * C244) * C90485 *
                C39127) *
               C90774 +
           (((C75097 + C75096) * C244 + (C75305 + C75304) * C90567) * C90485 *
                C39127 +
            ((C75778 + C75779) * C244 + (C75924 + C75925) * C90567) * C90485 *
                C39128) *
               C7400) *
              C7396 +
          ((((C56942 + C56943) * C244 + (C57167 + C57166) * C90567) * C90485 *
                C39127 +
            ((C58904 + C58903) * C244 + (C59113 + C59114) * C90567) * C90485 *
                C39128) *
               C90774 -
           (((C57166 + C57167) * C90567 + (C56943 + C56942) * C244) * C90485 *
                C39128 +
            ((C56231 + C56230) * C90567 + (C56056 + C56057) * C244) * C90485 *
                C39127) *
               C90781 -
           (((C56030 * C21232 + C55626 * C21860 + C56029 * C3488 +
              C55625 * C3815) *
                 C90567 +
             (C56030 * C21004 + C55626 * C21644 + C56029 * C3366 +
              C55625 * C3706) *
                 C244) *
                C90485 * C39128 +
            ((C59114 + C59113) * C90567 + (C58903 + C58904) * C244) * C90485 *
                C39127) *
               C7400) *
              C90503)) /
        (p * q * std::sqrt(p + q));
    d2eexx[17] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C13579 * C107 + C90485 * C113) * C7401 +
              (C13579 * C116 + C90485 * C125) * C7396 -
              (C13579 * C108 + C90485 * C114) * C7402 -
              (C13579 * C117 + C90485 * C126) * C90503) *
                 C39127 +
             (C20284 + C20285 - C20286 - C20287) * C39128) *
                C55625 +
            ((C33654 + C33655 - C33656 - C33657) * C39127 + C81300 * C39128) *
                C55626) *
               C90753 +
           (((C33656 - (C33655 + C33654) + C33657) * C39127 + C81301 * C39128) *
                C55625 +
            ((C33660 - (C33659 + C33658) + C33661) * C39127 +
             (C33670 - (C33664 + C33665) + C33671) * C39128) *
                C55626) *
               C90579) *
              C6692 +
          ((((C20286 - (C20285 + C20284) + C20287) * C39127 +
             (C20290 - (C20289 + C20288) + C20291) * C39128) *
                C55625 +
            (C81301 * C39127 + (C21027 - (C21017 + C21018) + C21028) * C39128) *
                C55626) *
               C90753 +
           ((C81300 * C39127 + (C21018 + C21017 - C21027 - C21028) * C39128) *
                C55625 +
            ((C33665 + C33664 - C33670 - C33671) * C39127 +
             (C18364 * C7401 + C18365 * C7396 -
              (C13579 * C17652 + C90485 * C17655) * C7402 -
              (C13579 * C17656 + C90485 * C17658) * C90503) *
                 C39128) *
                C55626) *
               C90579) *
              C90555)) /
        (p * q * std::sqrt(p + q));
    d2eexy[17] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((((C13579 * C107 + C90485 * C113) * C6771 +
                        (C13579 * C182 + C90485 * C188) * C6692 -
                        C14082 * C6772 - C14192 * C90555) *
                           C39127 +
                       (C14082 * C6771 + C14192 * C6692 - C14088 * C6772 -
                        C14193 * C90555) *
                           C39128) *
                          C55625 +
                      ((C33772 + C33773 - C33774 - C33775) * C39127 +
                       (C81432 + C81433 - C81434 - C81435) * C39128) *
                          C55626) *
                         C7396 +
                     (((C14084 * C6772 -
                        ((C13579 * C183 + C90485 * C189) * C6692 +
                         (C13579 * C108 + C90485 * C114) * C6771) +
                        C14194 * C90555) *
                           C39127 +
                       (C14090 * C6772 - (C14194 * C6692 + C14084 * C6771) +
                        C14195 * C90555) *
                           C39128) *
                          C55625 +
                      ((C33780 - (C33781 + C33782) + C33783) * C39127 +
                       (C81436 - (C81437 + C81438) + C81439) * C39128) *
                          C55626) *
                         C90503) *
                        C90753 +
                    ((((C33774 - (C33773 + C33772) + C33775) * C39127 +
                       (C81434 - (C81433 + C81432) + C81435) * C39128) *
                          C55625 +
                      ((C33778 - (C33777 + C33776) + C33779) * C39127 +
                       (C18364 * C6772 - (C18450 * C6692 + C18362 * C6771) +
                        C18451 * C90555) *
                           C39128) *
                          C55626) *
                         C7396 +
                     (((C33782 + C33781 - C33780 - C33783) * C39127 +
                       (C81438 + C81437 - C81436 - C81439) * C39128) *
                          C55625 +
                      ((C33786 + C33785 - C33784 - C33790) * C39127 +
                       (C33668 * C6771 + C33789 * C6692 -
                        (C13579 * C17652 + C90485 * C17655) * C6772 -
                        (C13579 * C17734 + C90485 * C17736) * C90555) *
                           C39128) *
                          C55626) *
                         C90503) *
                        C90579)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[17] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((((C13579 * C107 + C90485 * C113) * C1875 +
                        (C13579 * C245 + C90485 * C251) * C90753 -
                        C27600 * C1876 - C27814 * C90579) *
                           C39127 +
                       (C17034 + C17035 - C17036 - C17053) * C39128) *
                          C55625 +
                      ((C27600 * C1875 + C27814 * C90753 - C27606 * C1876 -
                        C27815 * C90579) *
                           C39127 +
                       (C76229 + C76230 - C76231 - C76232) * C39128) *
                          C55626) *
                         C6692 +
                     (((C17036 - (C17035 + C17034) + C17053) * C39127 +
                       (C17041 - (C17040 + C17039) + C17055) * C39128) *
                          C55625 +
                      ((C76231 - (C76230 + C76229) + C76232) * C39127 +
                       (C76233 - (C76234 + C76235) + C76236) * C39128) *
                          C55626) *
                         C90555) *
                        C7396 +
                    ((((C27602 * C1876 -
                        ((C13579 * C246 + C90485 * C252) * C90753 +
                         (C13579 * C108 + C90485 * C114) * C1875) +
                        C27816 * C90579) *
                           C39127 +
                       (C21235 - (C21236 + C21237) + C21247) * C39128) *
                          C55625 +
                      ((C27608 * C1876 - (C27816 * C90753 + C27602 * C1875) +
                        C27817 * C90579) *
                           C39127 +
                       (C81570 - (C81571 + C81572) + C81573) * C39128) *
                          C55626) *
                         C6692 +
                     (((C21237 + C21236 - C21235 - C21247) * C39127 +
                       (C21242 + C21241 - C21240 - C21248) * C39128) *
                          C55625 +
                      ((C81572 + C81571 - C81570 - C81573) * C39127 +
                       (C21023 * C1875 + C21246 * C90753 -
                        (C13579 * C17652 + C90485 * C17655) * C1876 -
                        (C13579 * C17812 + C90485 * C17814) * C90579) *
                           C39128) *
                          C55626) *
                         C90555) *
                        C90503)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[17] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                 C7401 +
             (C39329 * C116 + C39127 * C314 + C39330 * C839 + C39128 * C1098) *
                 C7396 -
             (C39356 + C39357) * C7402 - (C39358 + C39359) * C90503) *
                C55625 +
            ((C73890 + C73891) * C7401 + (C73892 + C73893) * C7396 -
             (C41168 + C41167) * C7402 - (C41170 + C41169) * C90503) *
                C55626) *
               C90485 * C90753 +
           (((C41167 + C41168) * C7402 -
             ((C73893 + C73892) * C7396 + (C73891 + C73890) * C7401) +
             (C41169 + C41170) * C90503) *
                C55625 +
            ((C44621 + C44620) * C7402 -
             ((C77325 + C77326) * C7396 + (C77327 + C77328) * C7401) +
             (C44623 + C44622) * C90503) *
                C55626) *
               C90485 * C90579) *
              C6692 +
          ((((C40220 + C40221) * C7402 -
             ((C39330 * C2577 + C39128 * C2831 + C39329 * C839 +
               C39127 * C1098) *
                  C7396 +
              (C39330 * C2570 + C39128 * C2827 + C39329 * C832 +
               C39127 * C1094) *
                  C7401) +
             (C40222 + C40223) * C90503) *
                C55625 +
            ((C48993 + C48992) * C7402 -
             ((C76354 + C76353) * C7396 + (C76352 + C76351) * C7401) +
             (C48995 + C48994) * C90503) *
                C55626) *
               C90485 * C90753 +
           (((C76351 + C76352) * C7401 + (C76353 + C76354) * C7396 -
             (C48992 + C48993) * C7402 - (C48994 + C48995) * C90503) *
                C55625 +
            ((C78246 + C78247) * C7401 + (C78248 + C78249) * C7396 -
             (C39330 * C17652 + C39128 * C17890 + C39329 * C5470 +
              C39127 * C5716) *
                 C7402 -
             (C39330 * C17656 + C39128 * C17892 + C39329 * C5473 +
              C39127 * C5719) *
                 C90503) *
                C55626) *
               C90485 * C90579) *
              C90555)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[17] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                 C6771 +
             (C39329 * C182 + C39127 * C394 + C39330 * C927 + C39128 * C1195) *
                 C6692 -
             (C39330 * C2570 + C39128 * C2827 + C39329 * C832 +
              C39127 * C1094) *
                 C6772 -
             (C39330 * C2663 + C39128 * C2921 + C39329 * C927 +
              C39127 * C1195) *
                 C90555) *
                C55625 +
            ((C73890 + C73891) * C6771 + (C73996 + C73997) * C6692 -
             (C76352 + C76351) * C6772 - (C76465 + C76466) * C90555) *
                C55626) *
               C90485 * C7396 +
           (((C40220 + C40221) * C6772 -
             ((C39447 + C39446) * C6692 + (C39356 + C39357) * C6771) +
             (C40335 + C40334) * C90555) *
                C55625 +
            ((C48993 + C48992) * C6772 -
             ((C41282 + C41281) * C6692 + (C41168 + C41167) * C6771) +
             (C49130 + C49131) * C90555) *
                C55626) *
               C90485 * C90503) *
              C90753 +
          ((((C76351 + C76352) * C6772 -
             ((C73997 + C73996) * C6692 + (C73891 + C73890) * C6771) +
             (C76466 + C76465) * C90555) *
                C55625 +
            ((C78246 + C78247) * C6772 -
             ((C77431 + C77432) * C6692 + (C77327 + C77328) * C6771) +
             (C78352 + C78353) * C90555) *
                C55626) *
               C90485 * C7396 +
           (((C41167 + C41168) * C6771 + (C41281 + C41282) * C6692 -
             (C48992 + C48993) * C6772 - (C49131 + C49130) * C90555) *
                C55625 +
            ((C44621 + C44620) * C6771 + (C44726 + C44727) * C6692 -
             (C39330 * C17652 + C39128 * C17890 + C39329 * C5470 +
              C39127 * C5716) *
                 C6772 -
             (C39330 * C17734 + C39128 * C17968 + C39329 * C5556 +
              C39127 * C5796) *
                 C90555) *
                C55626) *
               C90485 * C90503) *
              C90579)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[17] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                 C1875 +
             (C39329 * C245 + C39127 * C474 + C39330 * C1011 + C39128 * C1301) *
                 C90753 -
             (C73891 + C73890) * C1876 - (C74100 + C74101) * C90579) *
                C55625 +
            ((C73890 + C73891) * C1875 + (C74101 + C74100) * C90753 -
             (C77327 + C77328) * C1876 - (C77536 + C77535) * C90579) *
                C55626) *
               C90485 * C6692 +
           (((C76351 + C76352) * C1876 -
             ((C39330 * C2745 + C39128 * C3017 + C39329 * C1011 +
               C39127 * C1301) *
                  C90753 +
              (C39330 * C2570 + C39128 * C2827 + C39329 * C832 +
               C39127 * C1094) *
                  C1875) +
             (C76575 + C76576) * C90579) *
                C55625 +
            ((C78246 + C78247) * C1876 -
             ((C76576 + C76575) * C90753 + (C76352 + C76351) * C1875) +
             (C78457 + C78456) * C90579) *
                C55626) *
               C90485 * C90555) *
              C7396 +
          ((((C41167 + C41168) * C1876 -
             ((C39531 + C39530) * C90753 + (C39356 + C39357) * C1875) +
             (C41392 + C41391) * C90579) *
                C55625 +
            ((C44621 + C44620) * C1876 -
             ((C41391 + C41392) * C90753 + (C41168 + C41167) * C1875) +
             (C44830 + C44831) * C90579) *
                C55626) *
               C90485 * C6692 +
           (((C40220 + C40221) * C1875 + (C40445 + C40444) * C90753 -
             (C48992 + C48993) * C1876 - (C49267 + C49266) * C90579) *
                C55625 +
            ((C48993 + C48992) * C1875 + (C49266 + C49267) * C90753 -
             (C39330 * C17652 + C39128 * C17890 + C39329 * C5470 +
              C39127 * C5716) *
                 C1876 -
             (C39330 * C17812 + C39128 * C18044 + C39329 * C5636 +
              C39127 * C5873) *
                 C90579) *
                C55626) *
               C90485 * C90555) *
              C90503)) /
        (p * q * std::sqrt(p + q));
    d2eezx[17] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                 C7401 +
             (C56029 * C116 + C55625 * C561 + C56030 * C1707 + C55626 * C2268) *
                 C7396 -
             (C56056 + C56057) * C7402 - (C56058 + C56059) * C90503) *
                C90485 * C39127 +
            ((C73272 + C73273) * C7401 + (C73274 + C73275) * C7396 -
             (C56943 + C56942) * C7402 - (C56945 + C56944) * C90503) *
                C90485 * C39128) *
               C90753 +
           (((C57961 + C57962) * C7402 -
             ((C56030 * C4663 + C55626 * C5195 + C56029 * C1707 +
               C55625 * C2268) *
                  C7396 +
              (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
               C55625 * C2264) *
                  C7401) +
             (C57963 + C57964) * C90503) *
                C90485 * C39127 +
            ((C65779 + C65778) * C7402 -
             ((C76693 + C76694) * C7396 + (C76695 + C76696) * C7401) +
             (C65781 + C65780) * C90503) *
                C90485 * C39128) *
               C90579) *
              C6692 +
          ((((C56942 + C56943) * C7402 -
             ((C73275 + C73274) * C7396 + (C73273 + C73272) * C7401) +
             (C56944 + C56945) * C90503) *
                C90485 * C39127 +
            ((C58904 + C58903) * C7402 -
             ((C75094 + C75095) * C7396 + (C75096 + C75097) * C7401) +
             (C58906 + C58905) * C90503) *
                C90485 * C39128) *
               C90753 +
           (((C76696 + C76695) * C7401 + (C76694 + C76693) * C7396 -
             (C65778 + C65779) * C7402 - (C65780 + C65781) * C90503) *
                C90485 * C39127 +
            ((C76697 + C76698) * C7401 + (C76699 + C76700) * C7396 -
             (C56030 * C17652 + C55626 * C18120 + C56029 * C3895 +
              C55625 * C4411) *
                 C7402 -
             (C56030 * C17656 + C55626 * C18122 + C56029 * C3904 +
              C55625 * C4417) *
                 C90503) *
                C90485 * C39128) *
               C90579) *
              C90555)) /
        (p * q * std::sqrt(p + q));
    d2eezy[17] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                 C6771 +
             (C56029 * C182 + C55625 * C641 + C56030 * C1794 + C55626 * C2368) *
                 C6692 -
             (C73273 + C73272) * C6772 - (C73378 + C73379) * C90555) *
                C90485 * C39127 +
            ((C73272 + C73273) * C6771 + (C73379 + C73378) * C6692 -
             (C75096 + C75097) * C6772 - (C75201 + C75200) * C90555) *
                C90485 * C39128) *
               C7396 +
           (((C56942 + C56943) * C6772 -
             ((C56147 + C56146) * C6692 + (C56056 + C56057) * C6771) +
             (C57057 + C57056) * C90555) *
                C90485 * C39127 +
            ((C58904 + C58903) * C6772 -
             ((C57056 + C57057) * C6692 + (C56943 + C56942) * C6771) +
             (C59009 + C59010) * C90555) *
                C90485 * C39128) *
               C90503) *
              C90753 +
          ((((C76696 + C76695) * C6772 -
             ((C56030 * C4746 + C55626 * C5285 + C56029 * C1794 +
               C55625 * C2368) *
                  C6692 +
              (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
               C55625 * C2264) *
                  C6771) +
             (C76807 + C76808) * C90555) *
                C90485 * C39127 +
            ((C76697 + C76698) * C6772 -
             ((C76808 + C76807) * C6692 + (C76695 + C76696) * C6771) +
             (C76810 + C76809) * C90555) *
                C90485 * C39128) *
               C7396 +
           (((C57961 + C57962) * C6771 + (C58075 + C58076) * C6692 -
             (C65778 + C65779) * C6772 - (C65917 + C65916) * C90555) *
                C90485 * C39127 +
            ((C65779 + C65778) * C6771 + (C65916 + C65917) * C6692 -
             (C56030 * C17652 + C55626 * C18120 + C56029 * C3895 +
              C55625 * C4411) *
                 C6772 -
             (C56030 * C17734 + C55626 * C18198 + C56029 * C3993 +
              C55625 * C4496) *
                 C90555) *
                C90485 * C39128) *
               C90503) *
              C90579)) /
        (p * q * std::sqrt(p + q));
    d2eezz[17] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                 C1875 +
             (C56029 * C245 + C55625 * C719 + C56030 * C1879 + C55626 * C2460) *
                 C90753 -
             (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
              C55625 * C2264) *
                 C1876 -
             (C56030 * C4831 + C55626 * C5373 + C56029 * C1879 +
              C55625 * C2460) *
                 C90579) *
                C90485 * C39127 +
            ((C73272 + C73273) * C1875 + (C73482 + C73483) * C90753 -
             (C76695 + C76696) * C1876 - (C76917 + C76918) * C90579) *
                C90485 * C39128) *
               C6692 +
           (((C76696 + C76695) * C1876 -
             ((C73483 + C73482) * C90753 + (C73273 + C73272) * C1875) +
             (C76918 + C76917) * C90579) *
                C90485 * C39127 +
            ((C76697 + C76698) * C1876 -
             ((C75304 + C75305) * C90753 + (C75096 + C75097) * C1875) +
             (C76919 + C76920) * C90579) *
                C90485 * C39128) *
               C90555) *
              C7396 +
          ((((C57961 + C57962) * C1876 -
             ((C56231 + C56230) * C90753 + (C56056 + C56057) * C1875) +
             (C58186 + C58185) * C90579) *
                C90485 * C39127 +
            ((C65779 + C65778) * C1876 -
             ((C57166 + C57167) * C90753 + (C56943 + C56942) * C1875) +
             (C66052 + C66053) * C90579) *
                C90485 * C39128) *
               C6692 +
           (((C56942 + C56943) * C1875 + (C57167 + C57166) * C90753 -
             (C65778 + C65779) * C1876 - (C66053 + C66052) * C90579) *
                C90485 * C39127 +
            ((C58904 + C58903) * C1875 + (C59113 + C59114) * C90753 -
             (C56030 * C17652 + C55626 * C18120 + C56029 * C3895 +
              C55625 * C4411) *
                 C1876 -
             (C56030 * C17812 + C55626 * C18274 + C56029 * C4079 +
              C55625 * C4577) *
                 C90579) *
                C90485 * C39128) *
               C90555) *
              C90503)) /
        (p * q * std::sqrt(p + q));
    d2eexx[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C13579 * C107 + C90485 * C113) * C88316 +
              (C13579 * C116 + C90485 * C125) * C90744 -
              (C13579 * C108 + C90485 * C114) * C88309 -
              (C13579 * C117 + C90485 * C126) * C90503) *
                 C39127 +
             (C15534 + C15535 - C15536 - C15537) * C39128) *
                C55625 +
            ((C30256 + C30257 - C30258 - C30259) * C39127 + C85434 * C39128) *
                C55626) *
               C9074 +
           (((C30258 - (C30257 + C30256) + C30259) * C39127 + C85435 * C39128) *
                C55625 +
            ((C30262 - (C30261 + C30260) + C30263) * C39127 +
             (C36893 - (C36894 + C36895) + C36896) * C39128) *
                C55626) *
               C90579) *
              C6692 +
          ((((C15536 - (C15535 + C15534) + C15537) * C39127 +
             (C15540 - (C15539 + C15538) + C15541) * C39128) *
                C55625 +
            (C85435 * C39127 + (C24213 - (C24214 + C24215) + C24216) * C39128) *
                C55626) *
               C9074 +
           ((C85434 * C39127 + (C24215 + C24214 - C24213 - C24216) * C39128) *
                C55625 +
            ((C36895 + C36894 - C36893 - C36896) * C39127 +
             (C18364 * C88316 + C18365 * C90744 -
              (C13579 * C17652 + C90485 * C17655) * C88309 -
              (C13579 * C17656 + C90485 * C17658) * C90503) *
                 C39128) *
                C55626) *
               C90579) *
              C90555)) /
        (p * q * std::sqrt(p + q));
    d2eexy[18] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((((C13579 * C107 + C90485 * C113) * C6771 +
                        (C13579 * C182 + C90485 * C188) * C6692 -
                        C14082 * C6772 - C14192 * C90555) *
                           C39127 +
                       (C14082 * C6771 + C14192 * C6692 - C14088 * C6772 -
                        C14193 * C90555) *
                           C39128) *
                          C55625 +
                      ((C33772 + C33773 - C33774 - C33775) * C39127 +
                       (C81432 + C81433 - C81434 - C81435) * C39128) *
                          C55626) *
                         C90744 +
                     (((C14084 * C6772 -
                        ((C13579 * C183 + C90485 * C189) * C6692 +
                         (C13579 * C108 + C90485 * C114) * C6771) +
                        C14194 * C90555) *
                           C39127 +
                       (C14090 * C6772 - (C14194 * C6692 + C14084 * C6771) +
                        C14195 * C90555) *
                           C39128) *
                          C55625 +
                      ((C33780 - (C33781 + C33782) + C33783) * C39127 +
                       (C81436 - (C81437 + C81438) + C81439) * C39128) *
                          C55626) *
                         C90503) *
                        C9074 +
                    ((((C33774 - (C33773 + C33772) + C33775) * C39127 +
                       (C81434 - (C81433 + C81432) + C81435) * C39128) *
                          C55625 +
                      ((C33778 - (C33777 + C33776) + C33779) * C39127 +
                       (C18364 * C6772 - (C18450 * C6692 + C18362 * C6771) +
                        C18451 * C90555) *
                           C39128) *
                          C55626) *
                         C90744 +
                     (((C33782 + C33781 - C33780 - C33783) * C39127 +
                       (C81438 + C81437 - C81436 - C81439) * C39128) *
                          C55625 +
                      ((C33786 + C33785 - C33784 - C33790) * C39127 +
                       (C33668 * C6771 + C33789 * C6692 -
                        (C13579 * C17652 + C90485 * C17655) * C6772 -
                        (C13579 * C17734 + C90485 * C17736) * C90555) *
                           C39128) *
                          C55626) *
                         C90503) *
                        C90579)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[18] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((((C13579 * C107 + C90485 * C113) * C9224 +
                        (C13579 * C245 + C90485 * C251) * C9074 -
                        C27600 * C9225 - C27814 * C90579) *
                           C39127 +
                       (C22829 + C22830 - C22831 - C22832) * C39128) *
                          C55625 +
                      ((C27600 * C9224 + C27814 * C9074 - C27606 * C9225 -
                        C27815 * C90579) *
                           C39127 +
                       (C83630 + C83631 - C83632 - C83633) * C39128) *
                          C55626) *
                         C6692 +
                     (((C22831 - (C22830 + C22829) + C22832) * C39127 +
                       (C22835 - (C22834 + C22833) + C22836) * C39128) *
                          C55625 +
                      ((C83632 - (C83631 + C83630) + C83633) * C39127 +
                       (C18364 * C9225 - (C17051 * C9074 + C16857 * C9224) +
                        C18543 * C90579) *
                           C39128) *
                          C55626) *
                         C90555) *
                        C90744 +
                    ((((C27602 * C9225 -
                        ((C13579 * C246 + C90485 * C252) * C9074 +
                         (C13579 * C108 + C90485 * C114) * C9224) +
                        C27816 * C90579) *
                           C39127 +
                       (C22837 - (C22838 + C22839) + C22840) * C39128) *
                          C55625 +
                      ((C27608 * C9225 - (C27816 * C9074 + C27602 * C9224) +
                        C27817 * C90579) *
                           C39127 +
                       (C83634 - (C83635 + C83636) + C83637) * C39128) *
                          C55626) *
                         C6692 +
                     (((C22839 + C22838 - C22837 - C22840) * C39127 +
                       (C22843 + C22842 - C22841 - C22844) * C39128) *
                          C55625 +
                      ((C83636 + C83635 - C83634 - C83637) * C39127 +
                       (C21023 * C9224 + C21246 * C9074 -
                        (C13579 * C17652 + C90485 * C17655) * C9225 -
                        (C13579 * C17812 + C90485 * C17814) * C90579) *
                           C39128) *
                          C55626) *
                         C90555) *
                        C90503)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                 C88316 +
             (C39329 * C116 + C39127 * C314 + C39330 * C839 + C39128 * C1098) *
                 C90744 -
             (C39356 + C39357) * C88309 - (C39358 + C39359) * C90503) *
                C55625 +
            ((C73890 + C73891) * C88316 + (C73892 + C73893) * C90744 -
             (C41168 + C41167) * C88309 - (C41170 + C41169) * C90503) *
                C55626) *
               C90485 * C9074 +
           (((C41167 + C41168) * C88309 -
             ((C73893 + C73892) * C90744 + (C73891 + C73890) * C88316) +
             (C41169 + C41170) * C90503) *
                C55625 +
            ((C44621 + C44620) * C88309 -
             ((C77325 + C77326) * C90744 + (C77327 + C77328) * C88316) +
             (C44623 + C44622) * C90503) *
                C55626) *
               C90485 * C90579) *
              C6692 +
          ((((C40220 + C40221) * C88309 -
             ((C39330 * C2577 + C39128 * C2831 + C39329 * C839 +
               C39127 * C1098) *
                  C90744 +
              (C39330 * C2570 + C39128 * C2827 + C39329 * C832 +
               C39127 * C1094) *
                  C88316) +
             (C40222 + C40223) * C90503) *
                C55625 +
            ((C48993 + C48992) * C88309 -
             ((C76354 + C76353) * C90744 + (C76352 + C76351) * C88316) +
             (C48995 + C48994) * C90503) *
                C55626) *
               C90485 * C9074 +
           (((C76351 + C76352) * C88316 + (C76353 + C76354) * C90744 -
             (C48992 + C48993) * C88309 - (C48994 + C48995) * C90503) *
                C55625 +
            ((C78246 + C78247) * C88316 + (C78248 + C78249) * C90744 -
             (C39330 * C17652 + C39128 * C17890 + C39329 * C5470 +
              C39127 * C5716) *
                 C88309 -
             (C39330 * C17656 + C39128 * C17892 + C39329 * C5473 +
              C39127 * C5719) *
                 C90503) *
                C55626) *
               C90485 * C90579) *
              C90555)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                 C6771 +
             (C39329 * C182 + C39127 * C394 + C39330 * C927 + C39128 * C1195) *
                 C6692 -
             (C39330 * C2570 + C39128 * C2827 + C39329 * C832 +
              C39127 * C1094) *
                 C6772 -
             (C39330 * C2663 + C39128 * C2921 + C39329 * C927 +
              C39127 * C1195) *
                 C90555) *
                C55625 +
            ((C73890 + C73891) * C6771 + (C73996 + C73997) * C6692 -
             (C76352 + C76351) * C6772 - (C76465 + C76466) * C90555) *
                C55626) *
               C90485 * C90744 +
           (((C40220 + C40221) * C6772 -
             ((C39447 + C39446) * C6692 + (C39356 + C39357) * C6771) +
             (C40335 + C40334) * C90555) *
                C55625 +
            ((C48993 + C48992) * C6772 -
             ((C41282 + C41281) * C6692 + (C41168 + C41167) * C6771) +
             (C49130 + C49131) * C90555) *
                C55626) *
               C90485 * C90503) *
              C9074 +
          ((((C76351 + C76352) * C6772 -
             ((C73997 + C73996) * C6692 + (C73891 + C73890) * C6771) +
             (C76466 + C76465) * C90555) *
                C55625 +
            ((C78246 + C78247) * C6772 -
             ((C77431 + C77432) * C6692 + (C77327 + C77328) * C6771) +
             (C78352 + C78353) * C90555) *
                C55626) *
               C90485 * C90744 +
           (((C41167 + C41168) * C6771 + (C41281 + C41282) * C6692 -
             (C48992 + C48993) * C6772 - (C49131 + C49130) * C90555) *
                C55625 +
            ((C44621 + C44620) * C6771 + (C44726 + C44727) * C6692 -
             (C39330 * C17652 + C39128 * C17890 + C39329 * C5470 +
              C39127 * C5716) *
                 C6772 -
             (C39330 * C17734 + C39128 * C17968 + C39329 * C5556 +
              C39127 * C5796) *
                 C90555) *
                C55626) *
               C90485 * C90503) *
              C90579)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                 C9224 +
             (C39329 * C245 + C39127 * C474 + C39330 * C1011 + C39128 * C1301) *
                 C9074 -
             (C73891 + C73890) * C9225 - (C74100 + C74101) * C90579) *
                C55625 +
            ((C73890 + C73891) * C9224 + (C74101 + C74100) * C9074 -
             (C77327 + C77328) * C9225 - (C77536 + C77535) * C90579) *
                C55626) *
               C90485 * C6692 +
           (((C76351 + C76352) * C9225 -
             ((C39330 * C2745 + C39128 * C3017 + C39329 * C1011 +
               C39127 * C1301) *
                  C9074 +
              (C39330 * C2570 + C39128 * C2827 + C39329 * C832 +
               C39127 * C1094) *
                  C9224) +
             (C76575 + C76576) * C90579) *
                C55625 +
            ((C78246 + C78247) * C9225 -
             ((C76576 + C76575) * C9074 + (C76352 + C76351) * C9224) +
             (C78457 + C78456) * C90579) *
                C55626) *
               C90485 * C90555) *
              C90744 +
          ((((C41167 + C41168) * C9225 -
             ((C39531 + C39530) * C9074 + (C39356 + C39357) * C9224) +
             (C41392 + C41391) * C90579) *
                C55625 +
            ((C44621 + C44620) * C9225 -
             ((C41391 + C41392) * C9074 + (C41168 + C41167) * C9224) +
             (C44830 + C44831) * C90579) *
                C55626) *
               C90485 * C6692 +
           (((C40220 + C40221) * C9224 + (C40445 + C40444) * C9074 -
             (C48992 + C48993) * C9225 - (C49267 + C49266) * C90579) *
                C55625 +
            ((C48993 + C48992) * C9224 + (C49266 + C49267) * C9074 -
             (C39330 * C17652 + C39128 * C17890 + C39329 * C5470 +
              C39127 * C5716) *
                 C9225 -
             (C39330 * C17812 + C39128 * C18044 + C39329 * C5636 +
              C39127 * C5873) *
                 C90579) *
                C55626) *
               C90485 * C90555) *
              C90503)) /
        (p * q * std::sqrt(p + q));
    d2eezx[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                 C88316 +
             (C56029 * C116 + C55625 * C561 + C56030 * C1707 + C55626 * C2268) *
                 C90744 -
             (C56056 + C56057) * C88309 - (C56058 + C56059) * C90503) *
                C90485 * C39127 +
            ((C73272 + C73273) * C88316 + (C73274 + C73275) * C90744 -
             (C56943 + C56942) * C88309 - (C56945 + C56944) * C90503) *
                C90485 * C39128) *
               C9074 +
           (((C57961 + C57962) * C88309 -
             ((C56030 * C4663 + C55626 * C5195 + C56029 * C1707 +
               C55625 * C2268) *
                  C90744 +
              (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
               C55625 * C2264) *
                  C88316) +
             (C57963 + C57964) * C90503) *
                C90485 * C39127 +
            ((C65779 + C65778) * C88309 -
             ((C76693 + C76694) * C90744 + (C76695 + C76696) * C88316) +
             (C65781 + C65780) * C90503) *
                C90485 * C39128) *
               C90579) *
              C6692 +
          ((((C56942 + C56943) * C88309 -
             ((C73275 + C73274) * C90744 + (C73273 + C73272) * C88316) +
             (C56944 + C56945) * C90503) *
                C90485 * C39127 +
            ((C58904 + C58903) * C88309 -
             ((C75094 + C75095) * C90744 + (C75096 + C75097) * C88316) +
             (C58906 + C58905) * C90503) *
                C90485 * C39128) *
               C9074 +
           (((C76696 + C76695) * C88316 + (C76694 + C76693) * C90744 -
             (C65778 + C65779) * C88309 - (C65780 + C65781) * C90503) *
                C90485 * C39127 +
            ((C76697 + C76698) * C88316 + (C76699 + C76700) * C90744 -
             (C56030 * C17652 + C55626 * C18120 + C56029 * C3895 +
              C55625 * C4411) *
                 C88309 -
             (C56030 * C17656 + C55626 * C18122 + C56029 * C3904 +
              C55625 * C4417) *
                 C90503) *
                C90485 * C39128) *
               C90579) *
              C90555)) /
        (p * q * std::sqrt(p + q));
    d2eezy[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                 C6771 +
             (C56029 * C182 + C55625 * C641 + C56030 * C1794 + C55626 * C2368) *
                 C6692 -
             (C73273 + C73272) * C6772 - (C73378 + C73379) * C90555) *
                C90485 * C39127 +
            ((C73272 + C73273) * C6771 + (C73379 + C73378) * C6692 -
             (C75096 + C75097) * C6772 - (C75201 + C75200) * C90555) *
                C90485 * C39128) *
               C90744 +
           (((C56942 + C56943) * C6772 -
             ((C56147 + C56146) * C6692 + (C56056 + C56057) * C6771) +
             (C57057 + C57056) * C90555) *
                C90485 * C39127 +
            ((C58904 + C58903) * C6772 -
             ((C57056 + C57057) * C6692 + (C56943 + C56942) * C6771) +
             (C59009 + C59010) * C90555) *
                C90485 * C39128) *
               C90503) *
              C9074 +
          ((((C76696 + C76695) * C6772 -
             ((C56030 * C4746 + C55626 * C5285 + C56029 * C1794 +
               C55625 * C2368) *
                  C6692 +
              (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
               C55625 * C2264) *
                  C6771) +
             (C76807 + C76808) * C90555) *
                C90485 * C39127 +
            ((C76697 + C76698) * C6772 -
             ((C76808 + C76807) * C6692 + (C76695 + C76696) * C6771) +
             (C76810 + C76809) * C90555) *
                C90485 * C39128) *
               C90744 +
           (((C57961 + C57962) * C6771 + (C58075 + C58076) * C6692 -
             (C65778 + C65779) * C6772 - (C65917 + C65916) * C90555) *
                C90485 * C39127 +
            ((C65779 + C65778) * C6771 + (C65916 + C65917) * C6692 -
             (C56030 * C17652 + C55626 * C18120 + C56029 * C3895 +
              C55625 * C4411) *
                 C6772 -
             (C56030 * C17734 + C55626 * C18198 + C56029 * C3993 +
              C55625 * C4496) *
                 C90555) *
                C90485 * C39128) *
               C90503) *
              C90579)) /
        (p * q * std::sqrt(p + q));
    d2eezz[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                 C9224 +
             (C56029 * C245 + C55625 * C719 + C56030 * C1879 + C55626 * C2460) *
                 C9074 -
             (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
              C55625 * C2264) *
                 C9225 -
             (C56030 * C4831 + C55626 * C5373 + C56029 * C1879 +
              C55625 * C2460) *
                 C90579) *
                C90485 * C39127 +
            ((C73272 + C73273) * C9224 + (C73482 + C73483) * C9074 -
             (C76695 + C76696) * C9225 - (C76917 + C76918) * C90579) *
                C90485 * C39128) *
               C6692 +
           (((C76696 + C76695) * C9225 -
             ((C73483 + C73482) * C9074 + (C73273 + C73272) * C9224) +
             (C76918 + C76917) * C90579) *
                C90485 * C39127 +
            ((C76697 + C76698) * C9225 -
             ((C75304 + C75305) * C9074 + (C75096 + C75097) * C9224) +
             (C76919 + C76920) * C90579) *
                C90485 * C39128) *
               C90555) *
              C90744 +
          ((((C57961 + C57962) * C9225 -
             ((C56231 + C56230) * C9074 + (C56056 + C56057) * C9224) +
             (C58186 + C58185) * C90579) *
                C90485 * C39127 +
            ((C65779 + C65778) * C9225 -
             ((C57166 + C57167) * C9074 + (C56943 + C56942) * C9224) +
             (C66052 + C66053) * C90579) *
                C90485 * C39128) *
               C6692 +
           (((C56942 + C56943) * C9224 + (C57167 + C57166) * C9074 -
             (C65778 + C65779) * C9225 - (C66053 + C66052) * C90579) *
                C90485 * C39127 +
            ((C58904 + C58903) * C9224 + (C59113 + C59114) * C9074 -
             (C56030 * C17652 + C55626 * C18120 + C56029 * C3895 +
              C55625 * C4411) *
                 C9225 -
             (C56030 * C17812 + C55626 * C18274 + C56029 * C4079 +
              C55625 * C4577) *
                 C90579) *
                C90485 * C39128) *
               C90555) *
              C90503)) /
        (p * q * std::sqrt(p + q));
    d2eexx[19] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C13579 * C107 + C90485 * C113) * C3364 +
              (C13579 * C116 + C90485 * C125) * C90498) *
                 C39127 +
             (C16297 + C16298) * C39128) *
                C55625 +
            ((C29494 + C29495) * C39127 + C76024 * C39128) * C55626) *
               C9074 -
           ((C31050 * C39128 + (C29497 + C29496) * C39127) * C55626 +
            (C76025 * C39128 + (C29495 + C29494) * C39127) * C55625) *
               C90579) *
              C90781 +
          (((C76024 * C39127 + C76026 * C39128) * C55625 +
            (C77929 * C39127 + (C18368 + C18369) * C39128) * C55626) *
               C90579 -
           ((C16868 * C39128 + C76025 * C39127) * C55626 +
            ((C16300 + C16299) * C39128 + (C16298 + C16297) * C39127) *
                C55625) *
               C9074) *
              C90774 +
          (((C16307 * C39127 + (C16302 + C16301) * C39128) * C55625 +
            (C76026 * C39127 + (C16866 + C16867) * C39128) * C55626) *
               C9074 -
           ((((C13579 * C18350 + C90485 * C18352) * C90498 +
              (C13579 * C18349 + C90485 * C18351) * C3364) *
                 C39128 +
             (C18369 + C18368) * C39127) *
                C55626 +
            ((C16867 + C16866) * C39128 + C16868 * C39127) * C55625) *
               C90579) *
              C7400)) /
        (p * q * std::sqrt(p + q));
    d2eexy[19] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C7477 +
             (C13579 * C182 + C90485 * C188) * C90781 - C14082 * C7478 -
             C14192 * C90774 + C14088 * C7479 + C14193 * C7400) *
                C39127 +
            (C14082 * C7477 + C14192 * C90781 - C14088 * C7478 -
             C14193 * C90774 + C15553 * C7479 + C15643 * C7400) *
                C39128) *
               C55625 +
           ((C37837 + C37838 - C37839 - C37840 + C37841 + C37842) * C39127 +
            (C86672 + C86673 - C86674 - C86675 + C86676 + C86677) * C39128) *
               C55626) *
              C90498 * C9074 +
          (((C37839 - (C37838 + C37837) + C37840 - C37841 - C37842) * C39127 +
            (C86674 - (C86673 + C86672) + C86675 - C86676 - C86677) * C39128) *
               C55625 +
           ((C37845 - (C37844 + C37843) + C37846 - C37847 - C37848) * C39127 +
            (C18364 * C7478 - (C18450 * C90781 + C18362 * C7477) +
             C18451 * C90774 - (C13579 * C18349 + C90485 * C18351) * C7479 -
             (C13579 * C18443 + C90485 * C18444) * C7400) *
                C39128) *
               C55626) *
              C90498 * C90579)) /
        (p * q * std::sqrt(p + q));
    d2eexz[19] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C9224 +
             (C13579 * C245 + C90485 * C251) * C9074 - C27600 * C9225 -
             C27814 * C90579) *
                C39127 +
            (C22829 + C22830 - C22831 - C22832) * C39128) *
               C55625 +
           ((C27600 * C9224 + C27814 * C9074 - C27606 * C9225 -
             C27815 * C90579) *
                C39127 +
            (C83630 + C83631 - C83632 - C83633) * C39128) *
               C55626) *
              C90781 +
          (((C22831 - (C22830 + C22829) + C22832) * C39127 +
            (C22835 - (C22834 + C22833) + C22836) * C39128) *
               C55625 +
           ((C83632 - (C83631 + C83630) + C83633) * C39127 +
            (C86776 - (C86777 + C86778) + C86779) * C39128) *
               C55626) *
              C90774 +
          ((C25237 * C39127 + (C25234 + C25233 - C25232 - C25235) * C39128) *
               C55625 +
           ((C86778 + C86777 - C86776 - C86779) * C39127 +
            (C16860 * C9224 + C17052 * C9074 -
             (C13579 * C18349 + C90485 * C18351) * C9225 -
             (C13579 * C18525 + C90485 * C18526) * C90579) *
                C39128) *
               C55626) *
              C7400) *
         C90498) /
        (p * q * std::sqrt(p + q));
    d2eeyx[19] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                 C3364 +
             (C39329 * C116 + C39127 * C314 + C39330 * C839 + C39128 * C1098) *
                 C90498) *
                C55625 +
            ((C73890 + C73891) * C3364 + (C73892 + C73893) * C90498) * C55626) *
               C90485 * C9074 -
           (((C77325 + C77326) * C90498 + (C77327 + C77328) * C3364) * C55626 +
            ((C73893 + C73892) * C90498 + (C73891 + C73890) * C3364) * C55625) *
               C90485 * C90579) *
              C90781 +
          ((((C76351 + C76352) * C3364 + (C76353 + C76354) * C90498) * C55625 +
            ((C78246 + C78247) * C3364 + (C78248 + C78249) * C90498) * C55626) *
               C90485 * C90579 -
           (((C76354 + C76353) * C90498 + (C76352 + C76351) * C3364) * C55626 +
            ((C39330 * C2577 + C39128 * C2831 + C39329 * C839 +
              C39127 * C1098) *
                 C90498 +
             (C39330 * C2570 + C39128 * C2827 + C39329 * C832 +
              C39127 * C1094) *
                 C3364) *
                C55625) *
               C90485 * C9074) *
              C90774 +
          ((((C39329 * C2570 + C39127 * C2827 + C39330 * C3367 +
              C39128 * C3545) *
                 C3364 +
             (C39329 * C2577 + C39127 * C2831 + C39330 * C3370 +
              C39128 * C3548) *
                 C90498) *
                C55625 +
            ((C76355 + C76356) * C3364 + (C76357 + C76358) * C90498) * C55626) *
               C90485 * C9074 -
           (((C39330 * C18350 + C39128 * C18620 + C39329 * C17654 +
              C39127 * C17891) *
                 C90498 +
             (C39330 * C18349 + C39128 * C18619 + C39329 * C17651 +
              C39127 * C17889) *
                 C3364) *
                C55626 +
            ((C76358 + C76357) * C90498 + (C76356 + C76355) * C3364) * C55625) *
               C90485 * C90579) *
              C7400)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[19] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C7477 +
            (C39329 * C182 + C39127 * C394 + C39330 * C927 + C39128 * C1195) *
                C90781 -
            (C39330 * C2570 + C39128 * C2827 + C39329 * C832 + C39127 * C1094) *
                C7478 -
            (C39330 * C2663 + C39128 * C2921 + C39329 * C927 + C39127 * C1195) *
                C90774 +
            (C39329 * C2570 + C39127 * C2827 + C39330 * C3367 +
             C39128 * C3545) *
                C7479 +
            (C39329 * C2663 + C39127 * C2921 + C39330 * C3433 +
             C39128 * C3599) *
                C7400) *
               C55625 +
           ((C73890 + C73891) * C7477 + (C73996 + C73997) * C90781 -
            (C76352 + C76351) * C7478 - (C76465 + C76466) * C90774 +
            (C76355 + C76356) * C7479 + (C76467 + C76468) * C7400) *
               C55626) *
              C90485 * C90498 * C9074 +
          (((C76351 + C76352) * C7478 -
            ((C73997 + C73996) * C90781 + (C73891 + C73890) * C7477) +
            (C76466 + C76465) * C90774 - (C76356 + C76355) * C7479 -
            (C76468 + C76467) * C7400) *
               C55625 +
           ((C78246 + C78247) * C7478 -
            ((C77431 + C77432) * C90781 + (C77327 + C77328) * C7477) +
            (C78352 + C78353) * C90774 -
            (C39330 * C18349 + C39128 * C18619 + C39329 * C17651 +
             C39127 * C17889) *
                C7479 -
            (C39330 * C18443 + C39128 * C18695 + C39329 * C17733 +
             C39127 * C17967) *
                C7400) *
               C55626) *
              C90485 * C90498 * C90579)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[19] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C9224 +
            (C39329 * C245 + C39127 * C474 + C39330 * C1011 + C39128 * C1301) *
                C9074 -
            (C73891 + C73890) * C9225 - (C74100 + C74101) * C90579) *
               C55625 +
           ((C73890 + C73891) * C9224 + (C74101 + C74100) * C9074 -
            (C77327 + C77328) * C9225 - (C77536 + C77535) * C90579) *
               C55626) *
              C90485 * C90781 +
          (((C76351 + C76352) * C9225 -
            ((C39330 * C2745 + C39128 * C3017 + C39329 * C1011 +
              C39127 * C1301) *
                 C9074 +
             (C39330 * C2570 + C39128 * C2827 + C39329 * C832 +
              C39127 * C1094) *
                 C9224) +
            (C76575 + C76576) * C90579) *
               C55625 +
           ((C78246 + C78247) * C9225 -
            ((C76576 + C76575) * C9074 + (C76352 + C76351) * C9224) +
            (C78457 + C78456) * C90579) *
               C55626) *
              C90485 * C90774 +
          (((C39329 * C2570 + C39127 * C2827 + C39330 * C3367 +
             C39128 * C3545) *
                C9224 +
            (C39329 * C2745 + C39127 * C3017 + C39330 * C3489 +
             C39128 * C3654) *
                C9074 -
            (C76356 + C76355) * C9225 - (C76577 + C76578) * C90579) *
               C55625 +
           ((C76355 + C76356) * C9224 + (C76578 + C76577) * C9074 -
            (C39330 * C18349 + C39128 * C18619 + C39329 * C17651 +
             C39127 * C17889) *
                C9225 -
            (C39330 * C18525 + C39128 * C18770 + C39329 * C17811 +
             C39127 * C18043) *
                C90579) *
               C55626) *
              C90485 * C7400) *
         C90498) /
        (p * q * std::sqrt(p + q));
    d2eezx[19] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                 C3364 +
             (C56029 * C116 + C55625 * C561 + C56030 * C1707 + C55626 * C2268) *
                 C90498) *
                C90485 * C39127 +
            ((C73272 + C73273) * C3364 + (C73274 + C73275) * C90498) * C90485 *
                C39128) *
               C9074 -
           (((C76693 + C76694) * C90498 + (C76695 + C76696) * C3364) * C90485 *
                C39128 +
            ((C56030 * C4663 + C55626 * C5195 + C56029 * C1707 +
              C55625 * C2268) *
                 C90498 +
             (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
              C55625 * C2264) *
                 C3364) *
                C90485 * C39127) *
               C90579) *
              C90781 +
          ((((C76696 + C76695) * C3364 + (C76694 + C76693) * C90498) * C90485 *
                C39127 +
            ((C76697 + C76698) * C3364 + (C76699 + C76700) * C90498) * C90485 *
                C39128) *
               C90579 -
           (((C75094 + C75095) * C90498 + (C75096 + C75097) * C3364) * C90485 *
                C39128 +
            ((C73275 + C73274) * C90498 + (C73273 + C73272) * C3364) * C90485 *
                C39127) *
               C9074) *
              C90774 +
          ((((C75097 + C75096) * C3364 + (C75095 + C75094) * C90498) * C90485 *
                C39127 +
            ((C75778 + C75779) * C3364 + (C75780 + C75781) * C90498) * C90485 *
                C39128) *
               C9074 -
           (((C56030 * C18350 + C55626 * C18846 + C56029 * C16838 +
              C55625 * C17363) *
                 C90498 +
             (C56030 * C18349 + C55626 * C18845 + C56029 * C16835 +
              C55625 * C17361) *
                 C3364) *
                C90485 * C39128 +
            ((C76700 + C76699) * C90498 + (C76698 + C76697) * C3364) * C90485 *
                C39127) *
               C90579) *
              C7400)) /
        (p * q * std::sqrt(p + q));
    d2eezy[19] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C7477 +
            (C56029 * C182 + C55625 * C641 + C56030 * C1794 + C55626 * C2368) *
                C90781 -
            (C73273 + C73272) * C7478 - (C73378 + C73379) * C90774 +
            (C75097 + C75096) * C7479 + (C75200 + C75201) * C7400) *
               C90485 * C39127 +
           ((C73272 + C73273) * C7477 + (C73379 + C73378) * C90781 -
            (C75096 + C75097) * C7478 - (C75201 + C75200) * C90774 +
            (C75778 + C75779) * C7479 + (C75853 + C75852) * C7400) *
               C90485 * C39128) *
              C90498 * C9074 +
          (((C76696 + C76695) * C7478 -
            ((C56030 * C4746 + C55626 * C5285 + C56029 * C1794 +
              C55625 * C2368) *
                 C90781 +
             (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
              C55625 * C2264) *
                 C7477) +
            (C76807 + C76808) * C90774 - (C76698 + C76697) * C7479 -
            (C76809 + C76810) * C7400) *
               C90485 * C39127 +
           ((C76697 + C76698) * C7478 -
            ((C76808 + C76807) * C90781 + (C76695 + C76696) * C7477) +
            (C76810 + C76809) * C90774 -
            (C56030 * C18349 + C55626 * C18845 + C56029 * C16835 +
             C55625 * C17361) *
                C7479 -
            (C56030 * C18443 + C55626 * C18937 + C56029 * C16942 +
             C55625 * C17465) *
                C7400) *
               C90485 * C39128) *
              C90498 * C90579)) /
        (p * q * std::sqrt(p + q));
    d2eezz[19] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C9224 +
            (C56029 * C245 + C55625 * C719 + C56030 * C1879 + C55626 * C2460) *
                C9074 -
            (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
             C55625 * C2264) *
                C9225 -
            (C56030 * C4831 + C55626 * C5373 + C56029 * C1879 +
             C55625 * C2460) *
                C90579) *
               C90485 * C39127 +
           ((C73272 + C73273) * C9224 + (C73482 + C73483) * C9074 -
            (C76695 + C76696) * C9225 - (C76917 + C76918) * C90579) *
               C90485 * C39128) *
              C90781 +
          (((C76696 + C76695) * C9225 -
            ((C73483 + C73482) * C9074 + (C73273 + C73272) * C9224) +
            (C76918 + C76917) * C90579) *
               C90485 * C39127 +
           ((C76697 + C76698) * C9225 -
            ((C75304 + C75305) * C9074 + (C75096 + C75097) * C9224) +
            (C76919 + C76920) * C90579) *
               C90485 * C39128) *
              C90774 +
          (((C75097 + C75096) * C9224 + (C75305 + C75304) * C9074 -
            (C76698 + C76697) * C9225 - (C76920 + C76919) * C90579) *
               C90485 * C39127 +
           ((C75778 + C75779) * C9224 + (C75924 + C75925) * C9074 -
            (C56030 * C18349 + C55626 * C18845 + C56029 * C16835 +
             C55625 * C17361) *
                C9225 -
            (C56030 * C18525 + C55626 * C19018 + C56029 * C17029 +
             C55625 * C17550) *
                C90579) *
               C90485 * C39128) *
              C7400) *
         C90498) /
        (p * q * std::sqrt(p + q));
    d2eexx[20] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C13579 * C107 + C90485 * C113) * C3364 +
              (C13579 * C116 + C90485 * C125) * C90498) *
                 C39127 +
             (C16297 + C16298) * C39128) *
                C55625 +
            ((C29494 + C29495) * C39127 + C76024 * C39128) * C55626) *
               C90782 -
           ((C31050 * C39128 + (C29497 + C29496) * C39127) * C55626 +
            (C76025 * C39128 + (C29495 + C29494) * C39127) * C55625) *
               C90777 +
           ((C31043 * C39127 + C77929 * C39128) * C55625 +
            ((C31045 + C31044) * C39127 + (C31055 + C31056) * C39128) *
                C55626) *
               C10691) *
              C6692 +
          (((C76024 * C39127 + C76026 * C39128) * C55625 +
            (C77929 * C39127 + (C18368 + C18369) * C39128) * C55626) *
               C90777 -
           ((C16868 * C39128 + C76025 * C39127) * C55626 +
            ((C16300 + C16299) * C39128 + (C16298 + C16297) * C39127) *
                C55625) *
               C90782 -
           ((((C13579 * C19089 + C90485 * C19093) * C90498 +
              (C13579 * C19087 + C90485 * C19090) * C3364) *
                 C39128 +
             (C31056 + C31055) * C39127) *
                C55626 +
            ((C18369 + C18368) * C39128 + C31050 * C39127) * C55625) *
               C10691) *
              C90555)) /
        (p * q * std::sqrt(p + q));
    d2eexy[20] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C6771 +
             (C13579 * C182 + C90485 * C188) * C6692 - C14082 * C6772 -
             C14192 * C90555) *
                C39127 +
            (C14082 * C6771 + C14192 * C6692 - C14088 * C6772 -
             C14193 * C90555) *
                C39128) *
               C55625 +
           ((C33772 + C33773 - C33774 - C33775) * C39127 +
            (C81432 + C81433 - C81434 - C81435) * C39128) *
               C55626) *
              C90498 * C90782 +
          (((C33774 - (C33773 + C33772) + C33775) * C39127 +
            (C81434 - (C81433 + C81432) + C81435) * C39128) *
               C55625 +
           ((C33778 - (C33777 + C33776) + C33779) * C39127 +
            (C87564 - (C87565 + C87566) + C87567) * C39128) *
               C55626) *
              C90498 * C90777 +
          ((C38533 * C39127 + (C87566 + C87565 - C87564 - C87567) * C39128) *
               C55625 +
           ((C38530 + C38529 - C38528 - C38531) * C39127 +
            (C31052 * C6771 + C31147 * C6692 -
             (C13579 * C19087 + C90485 * C19090) * C6772 -
             (C13579 * C19145 + C90485 * C19147) * C90555) *
                C39128) *
               C55626) *
              C90498 * C10691)) /
        (p * q * std::sqrt(p + q));
    d2eexz[20] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C10840 +
             (C13579 * C245 + C90485 * C251) * C90782 - C27600 * C10841 -
             C27814 * C90777 + C27606 * C10842 + C27815 * C10691) *
                C39127 +
            (C25912 + C25913 - C25914 - C25915 + C25916 + C25917) * C39128) *
               C55625 +
           ((C27600 * C10840 + C27814 * C90782 - C27606 * C10841 -
             C27815 * C90777 + C30275 * C10842 + C30458 * C10691) *
                C39127 +
            (C87666 + C87667 - C87668 - C87669 + C87670 + C87671) * C39128) *
               C55626) *
              C6692 +
          (((C25914 - (C25913 + C25912) + C25915 - C25916 - C25917) * C39127 +
            (C25920 - (C25919 + C25918) + C25921 - C25922 - C25923) * C39128) *
               C55625 +
           ((C87668 - (C87667 + C87666) + C87669 - C87670 - C87671) * C39127 +
            (C18364 * C10841 - (C17051 * C90782 + C16857 * C10840) +
             C18543 * C90777 - (C13579 * C19087 + C90485 * C19090) * C10842 -
             (C13579 * C19200 + C90485 * C19202) * C10691) *
                C39128) *
               C55626) *
              C90555) *
         C90498) /
        (p * q * std::sqrt(p + q));
    d2eeyx[20] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                 C3364 +
             (C39329 * C116 + C39127 * C314 + C39330 * C839 + C39128 * C1098) *
                 C90498) *
                C55625 +
            ((C73890 + C73891) * C3364 + (C73892 + C73893) * C90498) * C55626) *
               C90485 * C90782 -
           (((C77325 + C77326) * C90498 + (C77327 + C77328) * C3364) * C55626 +
            ((C73893 + C73892) * C90498 + (C73891 + C73890) * C3364) * C55625) *
               C90485 * C90777 +
           (((C77328 + C77327) * C3364 + (C77326 + C77325) * C90498) * C55625 +
            ((C79050 + C79051) * C3364 + (C79052 + C79053) * C90498) * C55626) *
               C90485 * C10691) *
              C6692 +
          ((((C76351 + C76352) * C3364 + (C76353 + C76354) * C90498) * C55625 +
            ((C78246 + C78247) * C3364 + (C78248 + C78249) * C90498) * C55626) *
               C90485 * C90777 -
           (((C76354 + C76353) * C90498 + (C76352 + C76351) * C3364) * C55626 +
            ((C39330 * C2577 + C39128 * C2831 + C39329 * C839 +
              C39127 * C1098) *
                 C90498 +
             (C39330 * C2570 + C39128 * C2827 + C39329 * C832 +
              C39127 * C1094) *
                 C3364) *
                C55625) *
               C90485 * C90782 -
           (((C39330 * C19089 + C39128 * C19255 + C39329 * C19091 +
              C39127 * C19256) *
                 C90498 +
             (C39330 * C19087 + C39128 * C19253 + C39329 * C19088 +
              C39127 * C19254) *
                 C3364) *
                C55626 +
            ((C78249 + C78248) * C90498 + (C78247 + C78246) * C3364) * C55625) *
               C90485 * C10691) *
              C90555)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[20] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C6771 +
            (C39329 * C182 + C39127 * C394 + C39330 * C927 + C39128 * C1195) *
                C6692 -
            (C39330 * C2570 + C39128 * C2827 + C39329 * C832 + C39127 * C1094) *
                C6772 -
            (C39330 * C2663 + C39128 * C2921 + C39329 * C927 + C39127 * C1195) *
                C90555) *
               C55625 +
           ((C73890 + C73891) * C6771 + (C73996 + C73997) * C6692 -
            (C76352 + C76351) * C6772 - (C76465 + C76466) * C90555) *
               C55626) *
              C90485 * C90498 * C90782 +
          (((C76351 + C76352) * C6772 -
            ((C73997 + C73996) * C6692 + (C73891 + C73890) * C6771) +
            (C76466 + C76465) * C90555) *
               C55625 +
           ((C78246 + C78247) * C6772 -
            ((C77431 + C77432) * C6692 + (C77327 + C77328) * C6771) +
            (C78352 + C78353) * C90555) *
               C55626) *
              C90485 * C90498 * C90777 +
          (((C77328 + C77327) * C6771 + (C77432 + C77431) * C6692 -
            (C78247 + C78246) * C6772 - (C78353 + C78352) * C90555) *
               C55625 +
           ((C79050 + C79051) * C6771 + (C79124 + C79125) * C6692 -
            (C39330 * C19087 + C39128 * C19253 + C39329 * C19088 +
             C39127 * C19254) *
                C6772 -
            (C39330 * C19145 + C39128 * C19307 + C39329 * C19146 +
             C39127 * C19308) *
                C90555) *
               C55626) *
              C90485 * C90498 * C10691)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[20] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C10840 +
            (C39329 * C245 + C39127 * C474 + C39330 * C1011 + C39128 * C1301) *
                C90782 -
            (C73891 + C73890) * C10841 - (C74100 + C74101) * C90777 +
            (C77328 + C77327) * C10842 + (C77535 + C77536) * C10691) *
               C55625 +
           ((C73890 + C73891) * C10840 + (C74101 + C74100) * C90782 -
            (C77327 + C77328) * C10841 - (C77536 + C77535) * C90777 +
            (C79050 + C79051) * C10842 + (C79197 + C79196) * C10691) *
               C55626) *
              C90485 * C6692 +
          (((C76351 + C76352) * C10841 -
            ((C39330 * C2745 + C39128 * C3017 + C39329 * C1011 +
              C39127 * C1301) *
                 C90782 +
             (C39330 * C2570 + C39128 * C2827 + C39329 * C832 +
              C39127 * C1094) *
                 C10840) +
            (C76575 + C76576) * C90777 - (C78247 + C78246) * C10842 -
            (C78456 + C78457) * C10691) *
               C55625 +
           ((C78246 + C78247) * C10841 -
            ((C76576 + C76575) * C90782 + (C76352 + C76351) * C10840) +
            (C78457 + C78456) * C90777 -
            (C39330 * C19087 + C39128 * C19253 + C39329 * C19088 +
             C39127 * C19254) *
                C10842 -
            (C39330 * C19200 + C39128 * C19359 + C39329 * C19199 +
             C39127 * C19360) *
                C10691) *
               C55626) *
              C90485 * C90555) *
         C90498) /
        (p * q * std::sqrt(p + q));
    d2eezx[20] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                 C3364 +
             (C56029 * C116 + C55625 * C561 + C56030 * C1707 + C55626 * C2268) *
                 C90498) *
                C90485 * C39127 +
            ((C73272 + C73273) * C3364 + (C73274 + C73275) * C90498) * C90485 *
                C39128) *
               C90782 -
           (((C76693 + C76694) * C90498 + (C76695 + C76696) * C3364) * C90485 *
                C39128 +
            ((C56030 * C4663 + C55626 * C5195 + C56029 * C1707 +
              C55625 * C2268) *
                 C90498 +
             (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
              C55625 * C2264) *
                 C3364) *
                C90485 * C39127) *
               C90777 +
           (((C56029 * C4656 + C55625 * C5191 + C56030 * C6165 +
              C55626 * C6505) *
                 C3364 +
             (C56029 * C4663 + C55625 * C5195 + C56030 * C6168 +
              C55626 * C6508) *
                 C90498) *
                C90485 * C39127 +
            ((C78564 + C78565) * C3364 + (C78566 + C78567) * C90498) * C90485 *
                C39128) *
               C10691) *
              C6692 +
          ((((C76696 + C76695) * C3364 + (C76694 + C76693) * C90498) * C90485 *
                C39127 +
            ((C76697 + C76698) * C3364 + (C76699 + C76700) * C90498) * C90485 *
                C39128) *
               C90777 -
           (((C75094 + C75095) * C90498 + (C75096 + C75097) * C3364) * C90485 *
                C39128 +
            ((C73275 + C73274) * C90498 + (C73273 + C73272) * C3364) * C90485 *
                C39127) *
               C90782 -
           (((C56030 * C19089 + C55626 * C19413 + C56029 * C17654 +
              C55625 * C18121) *
                 C90498 +
             (C56030 * C19087 + C55626 * C19411 + C56029 * C17651 +
              C55625 * C18119) *
                 C3364) *
                C90485 * C39128 +
            ((C78567 + C78566) * C90498 + (C78565 + C78564) * C3364) * C90485 *
                C39127) *
               C10691) *
              C90555)) /
        (p * q * std::sqrt(p + q));
    d2eezy[20] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C6771 +
            (C56029 * C182 + C55625 * C641 + C56030 * C1794 + C55626 * C2368) *
                C6692 -
            (C73273 + C73272) * C6772 - (C73378 + C73379) * C90555) *
               C90485 * C39127 +
           ((C73272 + C73273) * C6771 + (C73379 + C73378) * C6692 -
            (C75096 + C75097) * C6772 - (C75201 + C75200) * C90555) *
               C90485 * C39128) *
              C90498 * C90782 +
          (((C76696 + C76695) * C6772 -
            ((C56030 * C4746 + C55626 * C5285 + C56029 * C1794 +
              C55625 * C2368) *
                 C6692 +
             (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
              C55625 * C2264) *
                 C6771) +
            (C76807 + C76808) * C90555) *
               C90485 * C39127 +
           ((C76697 + C76698) * C6772 -
            ((C76808 + C76807) * C6692 + (C76695 + C76696) * C6771) +
            (C76810 + C76809) * C90555) *
               C90485 * C39128) *
              C90498 * C90777 +
          (((C56029 * C4656 + C55625 * C5191 + C56030 * C6165 +
             C55626 * C6505) *
                C6771 +
            (C56029 * C4746 + C55625 * C5285 + C56030 * C6227 +
             C55626 * C6561) *
                C6692 -
            (C78565 + C78564) * C6772 - (C78670 + C78671) * C90555) *
               C90485 * C39127 +
           ((C78564 + C78565) * C6771 + (C78671 + C78670) * C6692 -
            (C56030 * C19087 + C55626 * C19411 + C56029 * C17651 +
             C55625 * C18119) *
                C6772 -
            (C56030 * C19145 + C55626 * C19465 + C56029 * C17733 +
             C55625 * C18197) *
                C90555) *
               C90485 * C39128) *
              C90498 * C10691)) /
        (p * q * std::sqrt(p + q));
    d2eezz[20] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C10840 +
            (C56029 * C245 + C55625 * C719 + C56030 * C1879 + C55626 * C2460) *
                C90782 -
            (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
             C55625 * C2264) *
                C10841 -
            (C56030 * C4831 + C55626 * C5373 + C56029 * C1879 +
             C55625 * C2460) *
                C90777 +
            (C56029 * C4656 + C55625 * C5191 + C56030 * C6165 +
             C55626 * C6505) *
                C10842 +
            (C56029 * C4831 + C55625 * C5373 + C56030 * C6287 +
             C55626 * C6612) *
                C10691) *
               C90485 * C39127 +
           ((C73272 + C73273) * C10840 + (C73482 + C73483) * C90782 -
            (C76695 + C76696) * C10841 - (C76917 + C76918) * C90777 +
            (C78564 + C78565) * C10842 + (C78774 + C78775) * C10691) *
               C90485 * C39128) *
              C6692 +
          (((C76696 + C76695) * C10841 -
            ((C73483 + C73482) * C90782 + (C73273 + C73272) * C10840) +
            (C76918 + C76917) * C90777 - (C78565 + C78564) * C10842 -
            (C78775 + C78774) * C10691) *
               C90485 * C39127 +
           ((C76697 + C76698) * C10841 -
            ((C75304 + C75305) * C90782 + (C75096 + C75097) * C10840) +
            (C76919 + C76920) * C90777 -
            (C56030 * C19087 + C55626 * C19411 + C56029 * C17651 +
             C55625 * C18119) *
                C10842 -
            (C56030 * C19200 + C55626 * C19518 + C56029 * C17811 +
             C55625 * C18273) *
                C10691) *
               C90485 * C39128) *
              C90555) *
         C90498) /
        (p * q * std::sqrt(p + q));
    d2eexx[21] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C88316 +
             (C13579 * C116 + C90485 * C125) * C90744 -
             (C13579 * C108 + C90485 * C114) * C88309 -
             (C13579 * C117 + C90485 * C126) * C90503) *
                C39127 +
            (C15534 + C15535 - C15536 - C15537) * C39128) *
               C55625 +
           ((C30256 + C30257 - C30258 - C30259) * C39127 +
            (C24211 + C24210 - C24209 - C24212) * C39128) *
               C55626) *
              C90567 * C2565 +
          (((C15536 - (C15535 + C15534) + C15537) * C39127 +
            (C15540 - (C15539 + C15538) + C15541) * C39128) *
               C55625 +
           ((C24209 - (C24210 + C24211) + C24212) * C39127 +
            (C24213 - (C24214 + C24215) + C24216) * C39128) *
               C55626) *
              C90567 * C2566 +
          ((C15560 * C39127 + (C15558 + C15557 - C15556 - C15559) * C39128) *
               C55625 +
           ((C24215 + C24214 - C24213 - C24216) * C39127 +
            (C16860 * C88316 + C16861 * C90744 -
             (C13579 * C21004 + C90485 * C21005) * C88309 -
             (C13579 * C21006 + C90485 * C21007) * C90503) *
                C39128) *
               C55626) *
              C90567 * C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C103 +
            (C13579 * C116 + C90485 * C125) * C92 -
            (C13579 * C108 + C90485 * C114) * C104 -
            (C13579 * C117 + C90485 * C126) * C93 +
            (C13579 * C109 + C90485 * C115) * C105 +
            (C13579 * C118 + C90485 * C127) * C94 -
            (C13579 * C110 + C90485 * C119) * C106 -
            (C13579 * C120 + C90485 * C128) * C95) *
               C39127 +
           (C14082 * C103 + C14083 * C92 - C14084 * C104 - C14085 * C93 +
            C14086 * C105 + C14087 * C94 -
            (C13579 * C831 + C90485 * C836) * C106 -
            (C13579 * C841 + C90485 * C847) * C95) *
               C39128) *
              C55625 +
          ((C27600 * C103 + C27601 * C92 - C27602 * C104 - C27603 * C93 +
            C27604 * C105 + C27605 * C94 -
            (C13579 * C1699 + C90485 * C1704) * C106 -
            (C13579 * C1709 + C90485 * C1715) * C95) *
               C39127 +
           (C16859 * C103 + C16858 * C92 - C21021 * C104 - C21022 * C93 +
            (C13579 * C3893 + C90485 * C3899) * C105 +
            (C13579 * C3902 + C90485 * C3911) * C94 -
            (C13579 * C8120 + C90485 * C8121) * C106 -
            (C13579 * C8122 + C90485 * C8123) * C95) *
               C39128) *
              C55626) *
         C90567 * C90541) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C88316 +
             (C13579 * C116 + C90485 * C125) * C90744 -
             (C13579 * C108 + C90485 * C114) * C88309 -
             (C13579 * C117 + C90485 * C126) * C90503) *
                C39127 +
            (C15534 + C15535 - C15536 - C15537) * C39128) *
               C55625 +
           ((C30256 + C30257 - C30258 - C30259) * C39127 +
            (C24211 + C24210 - C24209 - C24212) * C39128) *
               C55626) *
              C4653 +
          (((C30258 - (C30257 + C30256) + C30259) * C39127 +
            (C24209 - (C24210 + C24211) + C24212) * C39128) *
               C55625 +
           ((C30262 - (C30261 + C30260) + C30263) * C39127 +
            (C36893 - (C36894 + C36895) + C36896) * C39128) *
               C55626) *
              C4654 +
          ((C30282 * C39127 + (C36895 + C36894 - C36893 - C36896) * C39128) *
               C55625 +
           ((C30280 + C30279 - C30278 - C30281) * C39127 +
            (C31052 * C88316 + C31053 * C90744 -
             (C13579 * C33649 + C90485 * C33650) * C88309 -
             (C13579 * C33651 + C90485 * C33652) * C90503) *
                C39128) *
               C55626) *
              C4655) *
         C90541) /
            (p * q * std::sqrt(p + q));
    d2eexy[21] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C2660 +
             (C13579 * C182 + C90485 * C188) * C2565 - C14082 * C2661 -
             C14192 * C2566 + C14088 * C2662 + C14193 * C2567) *
                C39127 +
            (C14082 * C2660 + C14192 * C2565 - C14088 * C2661 - C14193 * C2566 +
             C15553 * C2662 + C15643 * C2567) *
                C39128) *
               C55625 +
           ((C29572 + C29573 - C29574 - C29575 + C29576 + C29577) * C39127 +
            (C16859 * C2660 + C16953 * C2565 - C16857 * C2661 - C16954 * C2566 +
             C16860 * C2662 + C16955 * C2567) *
                C39128) *
               C55626) *
              C90744 +
          (((C14084 * C2661 -
             ((C13579 * C183 + C90485 * C189) * C2565 +
              (C13579 * C108 + C90485 * C114) * C2660) +
             C14194 * C2566 - C14090 * C2662 - C14195 * C2567) *
                C39127 +
            (C14090 * C2661 - (C14194 * C2565 + C14084 * C2660) +
             C14195 * C2566 - C15551 * C2662 - C15644 * C2567) *
                C39128) *
               C55625 +
           ((C21021 * C2661 - (C27719 * C2565 + C27602 * C2660) +
             C21133 * C2566 - C21023 * C2662 - C21134 * C2567) *
                C39127 +
            (C21023 * C2661 - (C21133 * C2565 + C21021 * C2660) +
             C21134 * C2566 - (C13579 * C21004 + C90485 * C21005) * C2662 -
             (C13579 * C21126 + C90485 * C21127) * C2567) *
                C39128) *
               C55626) *
              C90503) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C181 +
             (C13579 * C182 + C90485 * C188) * C90541) *
                C39127 +
            (C14082 * C181 + C14192 * C90541) * C39128) *
               C55625 +
           ((C27698 + C27722) * C39127 +
            (C16859 * C181 + C16953 * C90541) * C39128) *
               C55626) *
              C92 -
          (((C21133 * C90541 + C21021 * C181) * C39128 +
            (C27725 + C27709) * C39127) *
               C55626 +
           ((C14194 * C90541 + C14084 * C181) * C39128 +
            ((C13579 * C183 + C90485 * C189) * C90541 +
             (C13579 * C108 + C90485 * C114) * C181) *
                C39127) *
               C55625) *
              C93 +
          ((((C13579 * C109 + C90485 * C115) * C181 +
             (C13579 * C184 + C90485 * C190) * C90541) *
                C39127 +
            (C14086 * C181 + C14196 * C90541) * C39128) *
               C55625 +
           ((C27710 + C27726) * C39127 +
            ((C13579 * C3893 + C90485 * C3899) * C181 +
             (C13579 * C3991 + C90485 * C3997) * C90541) *
                C39128) *
               C55626) *
              C94 -
          ((((C13579 * C8222 + C90485 * C8223) * C90541 +
             (C13579 * C8120 + C90485 * C8121) * C181) *
                C39128 +
            ((C13579 * C1793 + C90485 * C1798) * C90541 +
             (C13579 * C1699 + C90485 * C1704) * C181) *
                C39127) *
               C55626 +
           (((C13579 * C928 + C90485 * C933) * C90541 +
             (C13579 * C831 + C90485 * C836) * C181) *
                C39128 +
            ((C13579 * C185 + C90485 * C191) * C90541 +
             (C13579 * C110 + C90485 * C119) * C181) *
                C39127) *
               C55625) *
              C95) *
         C90567) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C13579 * C107 + C90485 * C113) * C181 +
              (C13579 * C182 + C90485 * C188) * C90541) *
                 C39127 +
             (C14082 * C181 + C14192 * C90541) * C39128) *
                C55625 +
            ((C27698 + C27722) * C39127 + (C73680 + C73681) * C39128) *
                C55626) *
               C90744 -
           (((C73682 + C73683) * C39128 + (C27725 + C27709) * C39127) * C55626 +
            ((C14194 * C90541 + C14084 * C181) * C39128 +
             ((C13579 * C183 + C90485 * C189) * C90541 +
              (C13579 * C108 + C90485 * C114) * C181) *
                 C39127) *
                C55625) *
               C90503) *
              C4653 +
          ((((C27709 + C27725) * C39127 + (C73683 + C73682) * C39128) * C55625 +
            ((C27706 + C27724) * C39127 + (C77117 + C77118) * C39128) *
                C55626) *
               C90503 -
           (((C77119 + C77120) * C39128 + (C27723 + C27701) * C39127) * C55626 +
            ((C73681 + C73680) * C39128 + (C27722 + C27698) * C39127) *
                C55625) *
               C90744) *
              C4654 +
          (((C30362 * C39127 + (C77120 + C77119) * C39128) * C55625 +
            ((C30369 + C30375) * C39127 +
             (C31052 * C181 + C31147 * C90541) * C39128) *
                C55626) *
               C90744 -
           ((((C13579 * C33769 + C90485 * C33770) * C90541 +
              (C13579 * C33649 + C90485 * C33650) * C181) *
                 C39128 +
             (C30374 + C30364) * C39127) *
                C55626 +
            ((C77118 + C77117) * C39128 + C30363 * C39127) * C55625) *
               C90503) *
              C4655)) /
            (p * q * std::sqrt(p + q));
    d2eexz[21] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C13579 * C107 + C90485 * C113) * C244 +
              (C13579 * C245 + C90485 * C251) * C90567) *
                 C39127 +
             (C14272 + C14296) * C39128) *
                C55625 +
            ((C27600 * C244 + C27814 * C90567) * C39127 +
             (C72863 + C72864) * C39128) *
                C55626) *
               C2565 -
           (((C74690 + C74691) * C39128 + (C72864 + C72863) * C39127) * C55626 +
            ((C14297 + C14275) * C39128 + (C14296 + C14272) * C39127) *
                C55625) *
               C2566 +
           ((C15723 * C39127 + (C15726 + C15733) * C39128) * C55625 +
            ((C74691 + C74690) * C39127 +
             (C16860 * C244 + C17052 * C90567) * C39128) *
                C55626) *
               C2567) *
              C90744 +
          ((((C14278 + C14298) * C39127 + (C14281 + C14299) * C39128) * C55625 +
            ((C72865 + C72866) * C39127 + (C74692 + C74693) * C39128) *
                C55626) *
               C2566 -
           (((C72866 + C72865) * C39128 +
             (C27816 * C90567 + C27602 * C244) * C39127) *
                C55626 +
            ((C14298 + C14278) * C39128 +
             ((C13579 * C246 + C90485 * C252) * C90567 +
              (C13579 * C108 + C90485 * C114) * C244) *
                 C39127) *
                C55625) *
               C2565 -
           ((((C13579 * C21232 + C90485 * C21233) * C90567 +
              (C13579 * C21004 + C90485 * C21005) * C244) *
                 C39128 +
             (C74693 + C74692) * C39127) *
                C55626 +
            ((C15734 + C15727) * C39128 + C15730 * C39127) * C55625) *
               C2567) *
              C90503)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C244 +
             (C13579 * C245 + C90485 * C251) * C90567) *
                C39127 +
            (C14272 + C14296) * C39128) *
               C55625 +
           ((C27600 * C244 + C27814 * C90567) * C39127 +
            (C16859 * C244 + C17049 * C90567) * C39128) *
               C55626) *
              C90541 * C92 -
          (((C21245 * C90567 + C21021 * C244) * C39128 +
            (C27816 * C90567 + C27602 * C244) * C39127) *
               C55626 +
           ((C14298 + C14278) * C39128 +
            ((C13579 * C246 + C90485 * C252) * C90567 +
             (C13579 * C108 + C90485 * C114) * C244) *
                C39127) *
               C55625) *
              C90541 * C93 +
          ((((C13579 * C109 + C90485 * C115) * C244 +
             (C13579 * C247 + C90485 * C253) * C90567) *
                C39127 +
            (C14284 + C14300) * C39128) *
               C55625 +
           ((C27604 * C244 + C27818 * C90567) * C39127 +
            ((C13579 * C3893 + C90485 * C3899) * C244 +
             (C13579 * C4077 + C90485 * C4083) * C90567) *
                C39128) *
               C55626) *
              C90541 * C94 -
          ((((C13579 * C8322 + C90485 * C8323) * C90567 +
             (C13579 * C8120 + C90485 * C8121) * C244) *
                C39128 +
            ((C13579 * C1880 + C90485 * C1885) * C90567 +
             (C13579 * C1699 + C90485 * C1704) * C244) *
                C39127) *
               C55626 +
           (((C13579 * C1012 + C90485 * C1017) * C90567 +
             (C13579 * C831 + C90485 * C836) * C244) *
                C39128 +
            ((C13579 * C248 + C90485 * C254) * C90567 +
             (C13579 * C110 + C90485 * C119) * C244) *
                C39127) *
               C55625) *
              C90541 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C4828 +
             (C13579 * C245 + C90485 * C251) * C4653 - C27600 * C4829 -
             C27814 * C4654 + C27606 * C4830 + C27815 * C4655) *
                C39127 +
            (C18528 + C18529 - C18530 - C18531 + C18532 + C18544) * C39128) *
               C55625 +
           ((C27600 * C4828 + C27814 * C4653 - C27606 * C4829 - C27815 * C4654 +
             C30275 * C4830 + C30458 * C4655) *
                C39127 +
            (C16859 * C4828 + C17049 * C4653 - C18362 * C4829 - C18542 * C4654 +
             C31052 * C4830 + C31230 * C4655) *
                C39128) *
               C55626) *
              C90541 * C90744 +
          (((C27602 * C4829 -
             ((C13579 * C246 + C90485 * C252) * C4653 +
              (C13579 * C108 + C90485 * C114) * C4828) +
             C27816 * C4654 - C27608 * C4830 - C27817 * C4655) *
                C39127 +
            (C21021 * C4829 - (C14292 * C4653 + C14084 * C4828) +
             C21245 * C4654 - C33668 * C4830 - C33893 * C4655) *
                C39128) *
               C55625 +
           ((C27608 * C4829 - (C27816 * C4653 + C27602 * C4828) +
             C27817 * C4654 - C30273 * C4830 - C30459 * C4655) *
                C39127 +
            (C33668 * C4829 - (C21245 * C4653 + C21021 * C4828) +
             C33893 * C4654 - (C13579 * C33649 + C90485 * C33650) * C4830 -
             (C13579 * C33888 + C90485 * C33889) * C4655) *
                C39128) *
               C55626) *
              C90541 * C90503)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[21] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C88316 +
            (C39329 * C116 + C39127 * C314 + C39330 * C839 + C39128 * C1098) *
                C90744 -
            (C39356 + C39357) * C88309 - (C39358 + C39359) * C90503) *
               C55625 +
           ((C73890 + C73891) * C88316 + (C73892 + C73893) * C90744 -
            (C41168 + C41167) * C88309 - (C41170 + C41169) * C90503) *
               C55626) *
              C90485 * C90567 * C2565 +
          (((C40220 + C40221) * C88309 -
            ((C39330 * C2577 + C39128 * C2831 + C39329 * C839 +
              C39127 * C1098) *
                 C90744 +
             (C39330 * C2570 + C39128 * C2827 + C39329 * C832 +
              C39127 * C1094) *
                 C88316) +
            (C40222 + C40223) * C90503) *
               C55625 +
           ((C48993 + C48992) * C88309 -
            ((C39330 * C3905 + C39128 * C4172 + C39329 * C3900 +
              C39127 * C4167) *
                 C90744 +
             (C39330 * C3896 + C39128 * C4166 + C39329 * C3891 +
              C39127 * C4161) *
                 C88316) +
            (C48995 + C48994) * C90503) *
               C55626) *
              C90485 * C90567 * C2566 +
          (((C39329 * C2570 + C39127 * C2827 + C39330 * C3367 +
             C39128 * C3545) *
                C88316 +
            (C39329 * C2577 + C39127 * C2831 + C39330 * C3370 +
             C39128 * C3548) *
                C90744 -
            (C42141 + C42142) * C88309 - (C42143 + C42144) * C90503) *
               C55625 +
           ((C39329 * C3896 + C39127 * C4166 + C39330 * C16835 +
             C39128 * C17131) *
                C88316 +
            (C39329 * C3905 + C39127 * C4172 + C39330 * C16838 +
             C39128 * C17133) *
                C90744 -
            (C39330 * C21004 + C39128 * C21346 + C39329 * C3895 +
             C39127 * C4165) *
                C88309 -
            (C39330 * C21006 + C39128 * C21347 + C39329 * C3904 +
             C39127 * C4171) *
                C90503) *
               C55626) *
              C90485 * C90567 * C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
               C103 +
           (C39329 * C116 + C39127 * C314 + C39330 * C839 + C39128 * C1098) *
               C92 -
           (C39356 + C39357) * C104 - (C39358 + C39359) * C93 +
           (C39360 + C39361) * C105 + (C39362 + C39363) * C94 -
           (C39364 + C39365) * C106 - (C39366 + C39367) * C95) *
              C55625 +
          ((C39329 * C1700 + C39127 * C1962 + C39330 * C3891 + C39128 * C4161) *
               C103 +
           (C39329 * C1707 + C39127 * C1966 + C39330 * C3900 + C39128 * C4167) *
               C92 -
           (C41168 + C41167) * C104 - (C41170 + C41169) * C93 +
           (C41172 + C41171) * C105 + (C41174 + C41173) * C94 -
           (C39330 * C8120 + C39128 * C8422 + C39329 * C1699 + C39127 * C1964) *
               C106 -
           (C39330 * C8122 + C39128 * C8423 + C39329 * C1709 + C39127 * C1969) *
               C95) *
              C55626) *
         C90485 * C90567 * C90541) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C88316 +
            (C39329 * C116 + C39127 * C314 + C39330 * C839 + C39128 * C1098) *
                C90744 -
            (C39356 + C39357) * C88309 - (C39358 + C39359) * C90503) *
               C55625 +
           ((C73890 + C73891) * C88316 + (C73892 + C73893) * C90744 -
            (C41168 + C41167) * C88309 - (C41170 + C41169) * C90503) *
               C55626) *
              C90485 * C4653 +
          (((C41167 + C41168) * C88309 -
            ((C73893 + C73892) * C90744 + (C73891 + C73890) * C88316) +
            (C41169 + C41170) * C90503) *
               C55625 +
           ((C44621 + C44620) * C88309 -
            ((C77325 + C77326) * C90744 + (C77327 + C77328) * C88316) +
            (C44623 + C44622) * C90503) *
               C55626) *
              C90485 * C4654 +
          (((C77328 + C77327) * C88316 + (C77326 + C77325) * C90744 -
            (C44620 + C44621) * C88309 - (C44622 + C44623) * C90503) *
               C55625 +
           ((C39329 * C6165 + C39127 * C6343 + C39330 * C19088 +
             C39128 * C19254) *
                C88316 +
            (C39329 * C6168 + C39127 * C6346 + C39330 * C19091 +
             C39128 * C19256) *
                C90744 -
            (C39330 * C33649 + C39128 * C33991 + C39329 * C6164 +
             C39127 * C6342) *
                C88309 -
            (C39330 * C33651 + C39128 * C33992 + C39329 * C6167 +
             C39127 * C6345) *
                C90503) *
               C55626) *
              C90485 * C4655) *
         C90541) /
            (p * q * std::sqrt(p + q));
    d2eeyy[21] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C2660 +
            (C39329 * C182 + C39127 * C394 + C39330 * C927 + C39128 * C1195) *
                C2565 -
            (C39330 * C2570 + C39128 * C2827 + C39329 * C832 + C39127 * C1094) *
                C2661 -
            (C39330 * C2663 + C39128 * C2921 + C39329 * C927 + C39127 * C1195) *
                C2566 +
            (C39329 * C2570 + C39127 * C2827 + C39330 * C3367 +
             C39128 * C3545) *
                C2662 +
            (C39329 * C2663 + C39127 * C2921 + C39330 * C3433 +
             C39128 * C3599) *
                C2567) *
               C55625 +
           ((C73890 + C73891) * C2660 + (C73996 + C73997) * C2565 -
            (C39330 * C3896 + C39128 * C4166 + C39329 * C3891 +
             C39127 * C4161) *
                C2661 -
            (C39330 * C3994 + C39128 * C4248 + C39329 * C3989 +
             C39127 * C4247) *
                C2566 +
            (C39329 * C3896 + C39127 * C4166 + C39330 * C16835 +
             C39128 * C17131) *
                C2662 +
            (C39329 * C3994 + C39127 * C4248 + C39330 * C16942 +
             C39128 * C17209) *
                C2567) *
               C55626) *
              C90485 * C90744 +
          (((C40220 + C40221) * C2661 -
            ((C39447 + C39446) * C2565 + (C39356 + C39357) * C2660) +
            (C40335 + C40334) * C2566 - (C42141 + C42142) * C2662 -
            (C42248 + C42247) * C2567) *
               C55625 +
           ((C48993 + C48992) * C2661 -
            ((C41282 + C41281) * C2565 + (C41168 + C41167) * C2660) +
            (C49130 + C49131) * C2566 -
            (C39330 * C21004 + C39128 * C21346 + C39329 * C3895 +
             C39127 * C4165) *
                C2662 -
            (C39330 * C21126 + C39128 * C21446 + C39329 * C3993 +
             C39127 * C4250) *
                C2567) *
               C55626) *
              C90485 * C90503) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C181 +
            (C39329 * C182 + C39127 * C394 + C39330 * C927 + C39128 * C1195) *
                C90541) *
               C55625 +
           ((C39329 * C1700 + C39127 * C1962 + C39330 * C3891 +
             C39128 * C4161) *
                C181 +
            (C39329 * C1794 + C39127 * C2066 + C39330 * C3989 +
             C39128 * C4247) *
                C90541) *
               C55626) *
              C90485 * C92 -
          (((C41282 + C41281) * C90541 + (C41168 + C41167) * C181) * C55626 +
           ((C39447 + C39446) * C90541 + (C39356 + C39357) * C181) * C55625) *
              C90485 * C93 +
          (((C39360 + C39361) * C181 + (C39449 + C39448) * C90541) * C55625 +
           ((C41172 + C41171) * C181 + (C41283 + C41284) * C90541) * C55626) *
              C90485 * C94 -
          (((C39330 * C8222 + C39128 * C8534 + C39329 * C1793 +
             C39127 * C2065) *
                C90541 +
            (C39330 * C8120 + C39128 * C8422 + C39329 * C1699 +
             C39127 * C1964) *
                C181) *
               C55626 +
           ((C39451 + C39450) * C90541 + (C39364 + C39365) * C181) * C55625) *
              C90485 * C95) *
         C90567) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                 C181 +
             (C39329 * C182 + C39127 * C394 + C39330 * C927 + C39128 * C1195) *
                 C90541) *
                C55625 +
            ((C73890 + C73891) * C181 + (C73996 + C73997) * C90541) * C55626) *
               C90485 * C90744 -
           (((C41282 + C41281) * C90541 + (C41168 + C41167) * C181) * C55626 +
            ((C39447 + C39446) * C90541 + (C39356 + C39357) * C181) * C55625) *
               C90485 * C90503) *
              C4653 +
          ((((C41167 + C41168) * C181 + (C41281 + C41282) * C90541) * C55625 +
            ((C44621 + C44620) * C181 + (C44726 + C44727) * C90541) * C55626) *
               C90485 * C90503 -
           (((C77431 + C77432) * C90541 + (C77327 + C77328) * C181) * C55626 +
            ((C73997 + C73996) * C90541 + (C73891 + C73890) * C181) * C55625) *
               C90485 * C90744) *
              C4654 +
          ((((C77328 + C77327) * C181 + (C77432 + C77431) * C90541) * C55625 +
            ((C39329 * C6165 + C39127 * C6343 + C39330 * C19088 +
              C39128 * C19254) *
                 C181 +
             (C39329 * C6227 + C39127 * C6399 + C39330 * C19146 +
              C39128 * C19308) *
                 C90541) *
                C55626) *
               C90485 * C90744 -
           (((C39330 * C33769 + C39128 * C34113 + C39329 * C6226 +
              C39127 * C6398) *
                 C90541 +
             (C39330 * C33649 + C39128 * C33991 + C39329 * C6164 +
              C39127 * C6342) *
                 C181) *
                C55626 +
            ((C44727 + C44726) * C90541 + (C44620 + C44621) * C181) * C55625) *
               C90485 * C90503) *
              C4655)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[21] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                 C244 +
             (C39329 * C245 + C39127 * C474 + C39330 * C1011 + C39128 * C1301) *
                 C90567) *
                C55625 +
            ((C73890 + C73891) * C244 + (C74101 + C74100) * C90567) * C55626) *
               C90485 * C2565 -
           (((C39330 * C4080 + C39128 * C4330 + C39329 * C4075 +
              C39127 * C4327) *
                 C90567 +
             (C39330 * C3896 + C39128 * C4166 + C39329 * C3891 +
              C39127 * C4161) *
                 C244) *
                C55626 +
            ((C39330 * C2745 + C39128 * C3017 + C39329 * C1011 +
              C39127 * C1301) *
                 C90567 +
             (C39330 * C2570 + C39128 * C2827 + C39329 * C832 +
              C39127 * C1094) *
                 C244) *
                C55625) *
               C90485 * C2566 +
           (((C39329 * C2570 + C39127 * C2827 + C39330 * C3367 +
              C39128 * C3545) *
                 C244 +
             (C39329 * C2745 + C39127 * C3017 + C39330 * C3489 +
              C39128 * C3654) *
                 C90567) *
                C55625 +
            ((C39329 * C3896 + C39127 * C4166 + C39330 * C16835 +
              C39128 * C17131) *
                 C244 +
             (C39329 * C4080 + C39127 * C4330 + C39330 * C17029 +
              C39128 * C17285) *
                 C90567) *
                C55626) *
               C90485 * C2567) *
              C90744 +
          ((((C40220 + C40221) * C244 + (C40445 + C40444) * C90567) * C55625 +
            ((C48993 + C48992) * C244 + (C49266 + C49267) * C90567) * C55626) *
               C90485 * C2566 -
           (((C41391 + C41392) * C90567 + (C41168 + C41167) * C244) * C55626 +
            ((C39531 + C39530) * C90567 + (C39356 + C39357) * C244) * C55625) *
               C90485 * C2565 -
           (((C39330 * C21232 + C39128 * C21545 + C39329 * C4079 +
              C39127 * C4331) *
                 C90567 +
             (C39330 * C21004 + C39128 * C21346 + C39329 * C3895 +
              C39127 * C4165) *
                 C244) *
                C55626 +
            ((C42352 + C42351) * C90567 + (C42141 + C42142) * C244) * C55625) *
               C90485 * C2567) *
              C90503)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C244 +
            (C39329 * C245 + C39127 * C474 + C39330 * C1011 + C39128 * C1301) *
                C90567) *
               C55625 +
           ((C39329 * C1700 + C39127 * C1962 + C39330 * C3891 +
             C39128 * C4161) *
                C244 +
            (C39329 * C1879 + C39127 * C2159 + C39330 * C4075 +
             C39128 * C4327) *
                C90567) *
               C55626) *
              C90485 * C90541 * C92 -
          (((C41391 + C41392) * C90567 + (C41168 + C41167) * C244) * C55626 +
           ((C39531 + C39530) * C90567 + (C39356 + C39357) * C244) * C55625) *
              C90485 * C90541 * C93 +
          (((C39360 + C39361) * C244 + (C39533 + C39532) * C90567) * C55625 +
           ((C41172 + C41171) * C244 + (C41393 + C41394) * C90567) * C55626) *
              C90485 * C90541 * C94 -
          (((C39330 * C8322 + C39128 * C8647 + C39329 * C1880 +
             C39127 * C2162) *
                C90567 +
            (C39330 * C8120 + C39128 * C8422 + C39329 * C1699 +
             C39127 * C1964) *
                C244) *
               C55626 +
           ((C39535 + C39534) * C90567 + (C39364 + C39365) * C244) * C55625) *
              C90485 * C90541 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C4828 +
            (C39329 * C245 + C39127 * C474 + C39330 * C1011 + C39128 * C1301) *
                C4653 -
            (C73891 + C73890) * C4829 - (C74100 + C74101) * C4654 +
            (C77328 + C77327) * C4830 + (C77535 + C77536) * C4655) *
               C55625 +
           ((C73890 + C73891) * C4828 + (C74101 + C74100) * C4653 -
            (C77327 + C77328) * C4829 - (C77536 + C77535) * C4654 +
            (C39329 * C6165 + C39127 * C6343 + C39330 * C19088 +
             C39128 * C19254) *
                C4830 +
            (C39329 * C6287 + C39127 * C6450 + C39330 * C19199 +
             C39128 * C19360) *
                C4655) *
               C55626) *
              C90485 * C90541 * C90744 +
          (((C41167 + C41168) * C4829 -
            ((C39531 + C39530) * C4653 + (C39356 + C39357) * C4828) +
            (C41392 + C41391) * C4654 - (C44620 + C44621) * C4830 -
            (C44831 + C44830) * C4655) *
               C55625 +
           ((C44621 + C44620) * C4829 -
            ((C41391 + C41392) * C4653 + (C41168 + C41167) * C4828) +
            (C44830 + C44831) * C4654 -
            (C39330 * C33649 + C39128 * C33991 + C39329 * C6164 +
             C39127 * C6342) *
                C4830 -
            (C39330 * C33888 + C39128 * C34227 + C39329 * C6286 +
             C39127 * C6451) *
                C4655) *
               C55626) *
              C90485 * C90541 * C90503)) /
            (p * q * std::sqrt(p + q));
    d2eezx[21] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C88316 +
            (C56029 * C116 + C55625 * C561 + C56030 * C1707 + C55626 * C2268) *
                C90744 -
            (C56056 + C56057) * C88309 - (C56058 + C56059) * C90503) *
               C90485 * C39127 +
           ((C73272 + C73273) * C88316 + (C73274 + C73275) * C90744 -
            (C56943 + C56942) * C88309 - (C56945 + C56944) * C90503) *
               C90485 * C39128) *
              C90567 * C2565 +
          (((C56942 + C56943) * C88309 -
            ((C73275 + C73274) * C90744 + (C73273 + C73272) * C88316) +
            (C56944 + C56945) * C90503) *
               C90485 * C39127 +
           ((C58904 + C58903) * C88309 -
            ((C75094 + C75095) * C90744 + (C75096 + C75097) * C88316) +
            (C58906 + C58905) * C90503) *
               C90485 * C39128) *
              C90567 * C2566 +
          (((C75097 + C75096) * C88316 + (C75095 + C75094) * C90744 -
            (C58903 + C58904) * C88309 - (C58905 + C58906) * C90503) *
               C90485 * C39127 +
           ((C56029 * C3367 + C55625 * C3707 + C56030 * C16835 +
             C55626 * C17361) *
                C88316 +
            (C56029 * C3370 + C55625 * C3710 + C56030 * C16838 +
             C55626 * C17363) *
                C90744 -
            (C56030 * C21004 + C55626 * C21644 + C56029 * C3366 +
             C55625 * C3706) *
                C88309 -
            (C56030 * C21006 + C55626 * C21645 + C56029 * C3369 +
             C55625 * C3709) *
                C90503) *
               C90485 * C39128) *
              C90567 * C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
               C103 +
           (C56029 * C116 + C55625 * C561 + C56030 * C1707 + C55626 * C2268) *
               C92 -
           (C56056 + C56057) * C104 - (C56058 + C56059) * C93 +
           (C56060 + C56061) * C105 + (C56062 + C56063) * C94 -
           (C56064 + C56065) * C106 - (C56066 + C56067) * C95) *
              C90485 * C39127 +
          ((C56029 * C832 + C55625 * C1396 + C56030 * C3891 + C55626 * C4407) *
               C103 +
           (C56029 * C839 + C55625 * C1400 + C56030 * C3900 + C55626 * C4413) *
               C92 -
           (C56943 + C56942) * C104 - (C56945 + C56944) * C93 +
           (C56947 + C56946) * C105 + (C56949 + C56948) * C94 -
           (C56030 * C8120 + C55626 * C8760 + C56029 * C831 + C55625 * C1398) *
               C106 -
           (C56030 * C8122 + C55626 * C8761 + C56029 * C841 + C55625 * C1403) *
               C95) *
              C90485 * C39128) *
         C90567 * C90541) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C88316 +
            (C56029 * C116 + C55625 * C561 + C56030 * C1707 + C55626 * C2268) *
                C90744 -
            (C56056 + C56057) * C88309 - (C56058 + C56059) * C90503) *
               C90485 * C39127 +
           ((C73272 + C73273) * C88316 + (C73274 + C73275) * C90744 -
            (C56943 + C56942) * C88309 - (C56945 + C56944) * C90503) *
               C90485 * C39128) *
              C4653 +
          (((C57961 + C57962) * C88309 -
            ((C56030 * C4663 + C55626 * C5195 + C56029 * C1707 +
              C55625 * C2268) *
                 C90744 +
             (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
              C55625 * C2264) *
                 C88316) +
            (C57963 + C57964) * C90503) *
               C90485 * C39127 +
           ((C65779 + C65778) * C88309 -
            ((C76693 + C76694) * C90744 + (C76695 + C76696) * C88316) +
            (C65781 + C65780) * C90503) *
               C90485 * C39128) *
              C4654 +
          (((C56029 * C4656 + C55625 * C5191 + C56030 * C6165 +
             C55626 * C6505) *
                C88316 +
            (C56029 * C4663 + C55625 * C5195 + C56030 * C6168 +
             C55626 * C6508) *
                C90744 -
            (C61354 + C61355) * C88309 - (C61356 + C61357) * C90503) *
               C90485 * C39127 +
           ((C56029 * C5471 + C55625 * C5951 + C56030 * C19088 +
             C55626 * C19412) *
                C88316 +
            (C56029 * C5474 + C55625 * C5954 + C56030 * C19091 +
             C55626 * C19414) *
                C90744 -
            (C56030 * C33649 + C55626 * C34329 + C56029 * C5470 +
             C55625 * C5950) *
                C88309 -
            (C56030 * C33651 + C55626 * C34330 + C56029 * C5473 +
             C55625 * C5953) *
                C90503) *
               C90485 * C39128) *
              C4655) *
         C90541) /
            (p * q * std::sqrt(p + q));
    d2eezy[21] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C2660 +
            (C56029 * C182 + C55625 * C641 + C56030 * C1794 + C55626 * C2368) *
                C2565 -
            (C73273 + C73272) * C2661 - (C73378 + C73379) * C2566 +
            (C75097 + C75096) * C2662 + (C75200 + C75201) * C2567) *
               C90485 * C39127 +
           ((C73272 + C73273) * C2660 + (C73379 + C73378) * C2565 -
            (C75096 + C75097) * C2661 - (C75201 + C75200) * C2566 +
            (C56029 * C3367 + C55625 * C3707 + C56030 * C16835 +
             C55626 * C17361) *
                C2662 +
            (C56029 * C3433 + C55625 * C3761 + C56030 * C16942 +
             C55626 * C17465) *
                C2567) *
               C90485 * C39128) *
              C90744 +
          (((C56942 + C56943) * C2661 -
            ((C56147 + C56146) * C2565 + (C56056 + C56057) * C2660) +
            (C57057 + C57056) * C2566 - (C58903 + C58904) * C2662 -
            (C59010 + C59009) * C2567) *
               C90485 * C39127 +
           ((C58904 + C58903) * C2661 -
            ((C57056 + C57057) * C2565 + (C56943 + C56942) * C2660) +
            (C59009 + C59010) * C2566 -
            (C56030 * C21004 + C55626 * C21644 + C56029 * C3366 +
             C55625 * C3706) *
                C2662 -
            (C56030 * C21126 + C55626 * C21758 + C56029 * C3432 +
             C55625 * C3762) *
                C2567) *
               C90485 * C39128) *
              C90503) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C181 +
            (C56029 * C182 + C55625 * C641 + C56030 * C1794 + C55626 * C2368) *
                C90541) *
               C90485 * C39127 +
           ((C56029 * C832 + C55625 * C1396 + C56030 * C3891 + C55626 * C4407) *
                C181 +
            (C56029 * C927 + C55625 * C1497 + C56030 * C3989 + C55626 * C4493) *
                C90541) *
               C90485 * C39128) *
              C92 -
          (((C57056 + C57057) * C90541 + (C56943 + C56942) * C181) * C90485 *
               C39128 +
           ((C56147 + C56146) * C90541 + (C56056 + C56057) * C181) * C90485 *
               C39127) *
              C93 +
          (((C56060 + C56061) * C181 + (C56149 + C56148) * C90541) * C90485 *
               C39127 +
           ((C56947 + C56946) * C181 + (C57058 + C57059) * C90541) * C90485 *
               C39128) *
              C94 -
          (((C56030 * C8222 + C55626 * C8872 + C56029 * C928 + C55625 * C1500) *
                C90541 +
            (C56030 * C8120 + C55626 * C8760 + C56029 * C831 + C55625 * C1398) *
                C181) *
               C90485 * C39128 +
           ((C56151 + C56150) * C90541 + (C56064 + C56065) * C181) * C90485 *
               C39127) *
              C95) *
         C90567) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                 C181 +
             (C56029 * C182 + C55625 * C641 + C56030 * C1794 + C55626 * C2368) *
                 C90541) *
                C90485 * C39127 +
            ((C73272 + C73273) * C181 + (C73379 + C73378) * C90541) * C90485 *
                C39128) *
               C90744 -
           (((C57056 + C57057) * C90541 + (C56943 + C56942) * C181) * C90485 *
                C39128 +
            ((C56147 + C56146) * C90541 + (C56056 + C56057) * C181) * C90485 *
                C39127) *
               C90503) *
              C4653 +
          ((((C57961 + C57962) * C181 + (C58075 + C58076) * C90541) * C90485 *
                C39127 +
            ((C65779 + C65778) * C181 + (C65916 + C65917) * C90541) * C90485 *
                C39128) *
               C90503 -
           (((C76808 + C76807) * C90541 + (C76695 + C76696) * C181) * C90485 *
                C39128 +
            ((C56030 * C4746 + C55626 * C5285 + C56029 * C1794 +
              C55625 * C2368) *
                 C90541 +
             (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
              C55625 * C2264) *
                 C181) *
                C90485 * C39127) *
               C90744) *
              C4654 +
          ((((C56029 * C4656 + C55625 * C5191 + C56030 * C6165 +
              C55626 * C6505) *
                 C181 +
             (C56029 * C4746 + C55625 * C5285 + C56030 * C6227 +
              C55626 * C6561) *
                 C90541) *
                C90485 * C39127 +
            ((C56029 * C5471 + C55625 * C5951 + C56030 * C19088 +
              C55626 * C19412) *
                 C181 +
             (C56029 * C5557 + C55625 * C6029 + C56030 * C19146 +
              C55626 * C19466) *
                 C90541) *
                C90485 * C39128) *
               C90744 -
           (((C56030 * C33769 + C55626 * C34429 + C56029 * C5556 +
              C55625 * C6030) *
                 C90541 +
             (C56030 * C33649 + C55626 * C34329 + C56029 * C5470 +
              C55625 * C5950) *
                 C181) *
                C90485 * C39128 +
            ((C61461 + C61460) * C90541 + (C61354 + C61355) * C181) * C90485 *
                C39127) *
               C90503) *
              C4655)) /
            (p * q * std::sqrt(p + q));
    d2eezz[21] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                 C244 +
             (C56029 * C245 + C55625 * C719 + C56030 * C1879 + C55626 * C2460) *
                 C90567) *
                C90485 * C39127 +
            ((C73272 + C73273) * C244 + (C73482 + C73483) * C90567) * C90485 *
                C39128) *
               C2565 -
           (((C75304 + C75305) * C90567 + (C75096 + C75097) * C244) * C90485 *
                C39128 +
            ((C73483 + C73482) * C90567 + (C73273 + C73272) * C244) * C90485 *
                C39127) *
               C2566 +
           (((C75097 + C75096) * C244 + (C75305 + C75304) * C90567) * C90485 *
                C39127 +
            ((C56029 * C3367 + C55625 * C3707 + C56030 * C16835 +
              C55626 * C17361) *
                 C244 +
             (C56029 * C3489 + C55625 * C3816 + C56030 * C17029 +
              C55626 * C17550) *
                 C90567) *
                C90485 * C39128) *
               C2567) *
              C90744 +
          ((((C56942 + C56943) * C244 + (C57167 + C57166) * C90567) * C90485 *
                C39127 +
            ((C58904 + C58903) * C244 + (C59113 + C59114) * C90567) * C90485 *
                C39128) *
               C2566 -
           (((C57166 + C57167) * C90567 + (C56943 + C56942) * C244) * C90485 *
                C39128 +
            ((C56231 + C56230) * C90567 + (C56056 + C56057) * C244) * C90485 *
                C39127) *
               C2565 -
           (((C56030 * C21232 + C55626 * C21860 + C56029 * C3488 +
              C55625 * C3815) *
                 C90567 +
             (C56030 * C21004 + C55626 * C21644 + C56029 * C3366 +
              C55625 * C3706) *
                 C244) *
                C90485 * C39128 +
            ((C59114 + C59113) * C90567 + (C58903 + C58904) * C244) * C90485 *
                C39127) *
               C2567) *
              C90503)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C244 +
            (C56029 * C245 + C55625 * C719 + C56030 * C1879 + C55626 * C2460) *
                C90567) *
               C90485 * C39127 +
           ((C56029 * C832 + C55625 * C1396 + C56030 * C3891 + C55626 * C4407) *
                C244 +
            (C56029 * C1011 + C55625 * C1602 + C56030 * C4075 +
             C55626 * C4573) *
                C90567) *
               C90485 * C39128) *
              C90541 * C92 -
          (((C57166 + C57167) * C90567 + (C56943 + C56942) * C244) * C90485 *
               C39128 +
           ((C56231 + C56230) * C90567 + (C56056 + C56057) * C244) * C90485 *
               C39127) *
              C90541 * C93 +
          (((C56060 + C56061) * C244 + (C56233 + C56232) * C90567) * C90485 *
               C39127 +
           ((C56947 + C56946) * C244 + (C57168 + C57169) * C90567) * C90485 *
               C39128) *
              C90541 * C94 -
          (((C56030 * C8322 + C55626 * C8985 + C56029 * C1012 +
             C55625 * C1603) *
                C90567 +
            (C56030 * C8120 + C55626 * C8760 + C56029 * C831 + C55625 * C1398) *
                C244) *
               C90485 * C39128 +
           ((C56235 + C56234) * C90567 + (C56064 + C56065) * C244) * C90485 *
               C39127) *
              C90541 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C4828 +
            (C56029 * C245 + C55625 * C719 + C56030 * C1879 + C55626 * C2460) *
                C4653 -
            (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
             C55625 * C2264) *
                C4829 -
            (C56030 * C4831 + C55626 * C5373 + C56029 * C1879 +
             C55625 * C2460) *
                C4654 +
            (C56029 * C4656 + C55625 * C5191 + C56030 * C6165 +
             C55626 * C6505) *
                C4830 +
            (C56029 * C4831 + C55625 * C5373 + C56030 * C6287 +
             C55626 * C6612) *
                C4655) *
               C90485 * C39127 +
           ((C73272 + C73273) * C4828 + (C73482 + C73483) * C4653 -
            (C76695 + C76696) * C4829 - (C76917 + C76918) * C4654 +
            (C56029 * C5471 + C55625 * C5951 + C56030 * C19088 +
             C55626 * C19412) *
                C4830 +
            (C56029 * C5637 + C55625 * C6106 + C56030 * C19199 +
             C55626 * C19517) *
                C4655) *
               C90485 * C39128) *
              C90541 * C90744 +
          (((C57961 + C57962) * C4829 -
            ((C56231 + C56230) * C4653 + (C56056 + C56057) * C4828) +
            (C58186 + C58185) * C4654 - (C61354 + C61355) * C4830 -
            (C61565 + C61564) * C4655) *
               C90485 * C39127 +
           ((C65779 + C65778) * C4829 -
            ((C57166 + C57167) * C4653 + (C56943 + C56942) * C4828) +
            (C66052 + C66053) * C4654 -
            (C56030 * C33649 + C55626 * C34329 + C56029 * C5470 +
             C55625 * C5950) *
                C4830 -
            (C56030 * C33888 + C55626 * C34528 + C56029 * C5636 +
             C55625 * C6107) *
                C4655) *
               C90485 * C39128) *
              C90541 * C90503)) /
            (p * q * std::sqrt(p + q));
    d2eexx[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C3364 +
             (C13579 * C116 + C90485 * C125) * C90498) *
                C39127 +
            (C16297 + C16298) * C39128) *
               C55625 +
           ((C29494 + C29495) * C39127 + (C16865 + C16864) * C39128) * C55626) *
              C90567 * C3360 -
          ((C16868 * C39128 + (C16864 + C16865) * C39127) * C55626 +
           ((C16300 + C16299) * C39128 + (C16298 + C16297) * C39127) * C55625) *
              C90567 * C3361 +
          ((C16307 * C39127 + (C16302 + C16301) * C39128) * C55625 +
           ((C16863 + C16862) * C39127 + (C16866 + C16867) * C39128) * C55626) *
              C90567 * C3362 -
          ((((C13579 * C16839 + C90485 * C16842) * C90498 +
             (C13579 * C16836 + C90485 * C16840) * C3364) *
                C39128 +
            (C16867 + C16866) * C39127) *
               C55626 +
           ((C16312 + C16311) * C39128 + C16308 * C39127) * C55625) *
              C90567 * C3363)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C826 +
             (C13579 * C116 + C90485 * C125) * C821 -
             (C13579 * C108 + C90485 * C114) * C827 -
             (C13579 * C117 + C90485 * C126) * C822 +
             (C13579 * C109 + C90485 * C115) * C828 +
             (C13579 * C118 + C90485 * C127) * C823) *
                C39127 +
            (C14094 + C14095 - C14096 - C14097 + C14098 + C14099) * C39128) *
               C55625 +
           ((C27612 + C27613 - C27614 - C27615 + C27616 + C27617) * C39127 +
            (C72652 + C72653 - C72654 - C72655 + C72662 + C72663) * C39128) *
               C55626) *
              C90567 * C90752 +
          (((C14096 - (C14095 + C14094) + C14097 - C14098 - C14099) * C39127 +
            (C14102 - (C14101 + C14100) + C14103 - C14104 - C14105) * C39128) *
               C55625 +
           ((C72654 - (C72653 + C72652) + C72655 - C72662 - C72663) * C39127 +
            (C21023 * C827 - (C16856 * C821 + C16857 * C826) + C21024 * C822 -
             (C13579 * C3894 + C90485 * C3906) * C828 -
             (C13579 * C3903 + C90485 * C3912) * C823) *
                C39128) *
               C55626) *
              C90567 * C90555)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C13579 * C107 + C90485 * C113) * C3364 +
              (C13579 * C116 + C90485 * C125) * C90498) *
                 C39127 +
             (C16297 + C16298) * C39128) *
                C55625 +
            ((C29494 + C29495) * C39127 + C76024 * C39128) * C55626) *
               C4653 -
           ((C31050 * C39128 + (C29497 + C29496) * C39127) * C55626 +
            (C76025 * C39128 + (C29495 + C29494) * C39127) * C55625) *
               C4654 +
           ((C31043 * C39127 + C77929 * C39128) * C55625 +
            ((C31045 + C31044) * C39127 + (C31055 + C31056) * C39128) *
                C55626) *
               C4655) *
              C90752 +
          (((C76024 * C39127 + C76026 * C39128) * C55625 +
            (C77929 * C39127 + (C18368 + C18369) * C39128) * C55626) *
               C4654 -
           ((C16868 * C39128 + C76025 * C39127) * C55626 +
            ((C16300 + C16299) * C39128 + (C16298 + C16297) * C39127) *
                C55625) *
               C4653 -
           ((((C13579 * C19089 + C90485 * C19093) * C90498 +
              (C13579 * C19087 + C90485 * C19090) * C3364) *
                 C39128 +
             (C31056 + C31055) * C39127) *
                C55626 +
            ((C18369 + C18368) * C39128 + C31050 * C39127) * C55625) *
               C4655) *
              C90555)) /
            (p * q * std::sqrt(p + q));
    d2eexy[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C3427 +
            (C13579 * C182 + C90485 * C188) * C3360 - C14082 * C3428 -
            C14192 * C3361 + C14088 * C3429 + C14193 * C3362 - C15553 * C3430 -
            C15643 * C3363) *
               C39127 +
           (C14082 * C3427 + C14192 * C3360 - C14088 * C3428 - C14193 * C3361 +
            C15553 * C3429 + C15643 * C3362 - C16309 * C3430 - C16367 * C3363) *
               C39128) *
              C55625 +
          ((C27600 * C3427 + C27716 * C3360 - C16859 * C3428 - C16953 * C3361 +
            C16857 * C3429 + C16954 * C3362 - C16860 * C3430 - C16955 * C3363) *
               C39127 +
           (C16859 * C3427 + C16953 * C3360 - C16857 * C3428 - C16954 * C3361 +
            C16860 * C3429 + C16955 * C3362 -
            (C13579 * C16836 + C90485 * C16840) * C3430 -
            (C13579 * C16943 + C90485 * C16945) * C3363) *
               C39128) *
              C55626) *
         C90498 * C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C923 +
             (C13579 * C182 + C90485 * C188) * C90752 - C14082 * C924 -
             C14192 * C90555) *
                C39127 +
            (C14082 * C923 + C14192 * C90752 - C14088 * C924 -
             C14193 * C90555) *
                C39128) *
               C55625 +
           ((C31133 + C31134 - C31135 - C31136) * C39127 +
            (C16859 * C923 + C16953 * C90752 - C16857 * C924 -
             C16954 * C90555) *
                C39128) *
               C55626) *
              C821 +
          (((C14084 * C924 -
             ((C13579 * C183 + C90485 * C189) * C90752 +
              (C13579 * C108 + C90485 * C114) * C923) +
             C14194 * C90555) *
                C39127 +
            (C14090 * C924 - (C14194 * C90752 + C14084 * C923) +
             C14195 * C90555) *
                C39128) *
               C55625 +
           ((C35416 - (C35417 + C35418) + C35419) * C39127 +
            (C21023 * C924 - (C21133 * C90752 + C21021 * C923) +
             C21134 * C90555) *
                C39128) *
               C55626) *
              C822 +
          ((((C13579 * C109 + C90485 * C115) * C923 +
             (C13579 * C184 + C90485 * C190) * C90752 - C14086 * C924 -
             C14196 * C90555) *
                C39127 +
            (C14086 * C923 + C14196 * C90752 - C14092 * C924 -
             C14197 * C90555) *
                C39128) *
               C55625 +
           ((C27604 * C923 + C27720 * C90752 - C72660 * C924 -
             C72764 * C90555) *
                C39127 +
            (C72660 * C923 + C72764 * C90752 -
             (C13579 * C3894 + C90485 * C3906) * C924 -
             (C13579 * C3992 + C90485 * C3998) * C90555) *
                C39128) *
               C55626) *
              C823) *
         C90567) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C923 +
             (C13579 * C182 + C90485 * C188) * C90752 - C14082 * C924 -
             C14192 * C90555) *
                C39127 +
            (C14082 * C923 + C14192 * C90752 - C14088 * C924 -
             C14193 * C90555) *
                C39128) *
               C55625 +
           ((C31133 + C31134 - C31135 - C31136) * C39127 +
            (C78028 + C78029 - C78030 - C78031) * C39128) *
               C55626) *
              C90498 * C4653 +
          (((C31135 - (C31134 + C31133) + C31136) * C39127 +
            (C78030 - (C78029 + C78028) + C78031) * C39128) *
               C55625 +
           ((C31139 - (C31138 + C31137) + C31140) * C39127 +
            (C78032 - (C78033 + C78034) + C78035) * C39128) *
               C55626) *
              C90498 * C4654 +
          ((C31150 * C39127 + (C78034 + C78033 - C78032 - C78035) * C39128) *
               C55625 +
           ((C31143 + C31142 - C31141 - C31149) * C39127 +
            (C31052 * C923 + C31147 * C90752 -
             (C13579 * C19087 + C90485 * C19090) * C924 -
             (C13579 * C19145 + C90485 * C19147) * C90555) *
                C39128) *
               C55626) *
              C90498 * C4655)) /
            (p * q * std::sqrt(p + q));
    d2eexz[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C244 +
             (C13579 * C245 + C90485 * C251) * C90567) *
                C39127 +
            (C14272 + C14296) * C39128) *
               C55625 +
           ((C27600 * C244 + C27814 * C90567) * C39127 +
            (C72863 + C72864) * C39128) *
               C55626) *
              C3360 -
          (((C74690 + C74691) * C39128 + (C72864 + C72863) * C39127) * C55626 +
           ((C14297 + C14275) * C39128 + (C14296 + C14272) * C39127) * C55625) *
              C3361 +
          ((C15723 * C39127 + (C15726 + C15733) * C39128) * C55625 +
           ((C74691 + C74690) * C39127 + (C75504 + C75505) * C39128) * C55626) *
              C3362 -
          ((((C13579 * C17030 + C90485 * C17032) * C90567 +
             (C13579 * C16836 + C90485 * C16840) * C244) *
                C39128 +
            (C75505 + C75504) * C39127) *
               C55626 +
           ((C16425 + C16421) * C39128 + C16420 * C39127) * C55625) *
              C3363) *
         C90498) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C13579 * C107 + C90485 * C113) * C244 +
              (C13579 * C245 + C90485 * C251) * C90567) *
                 C39127 +
             (C14272 + C14296) * C39128) *
                C55625 +
            ((C27600 * C244 + C27814 * C90567) * C39127 +
             (C72863 + C72864) * C39128) *
                C55626) *
               C90752 -
           (((C17051 * C90567 + C16857 * C244) * C39128 +
             (C72864 + C72863) * C39127) *
                C55626 +
            ((C14297 + C14275) * C39128 + (C14296 + C14272) * C39127) *
                C55625) *
               C90555) *
              C821 +
          ((((C14278 + C14298) * C39127 + (C14281 + C14299) * C39128) * C55625 +
            ((C72865 + C72866) * C39127 +
             (C21023 * C244 + C21246 * C90567) * C39128) *
                C55626) *
               C90555 -
           (((C72866 + C72865) * C39128 +
             (C27816 * C90567 + C27602 * C244) * C39127) *
                C55626 +
            ((C14298 + C14278) * C39128 +
             ((C13579 * C246 + C90485 * C252) * C90567 +
              (C13579 * C108 + C90485 * C114) * C244) *
                 C39127) *
                C55625) *
               C90752) *
              C822 +
          (((((C13579 * C109 + C90485 * C115) * C244 +
              (C13579 * C247 + C90485 * C253) * C90567) *
                 C39127 +
             (C14284 + C14300) * C39128) *
                C55625 +
            ((C27604 * C244 + C27818 * C90567) * C39127 +
             (C72867 + C72871) * C39128) *
                C55626) *
               C90752 -
           ((((C13579 * C4078 + C90485 * C4084) * C90567 +
              (C13579 * C3894 + C90485 * C3906) * C244) *
                 C39128 +
             (C72871 + C72867) * C39127) *
                C55626 +
            ((C14301 + C14287) * C39128 + (C14300 + C14284) * C39127) *
                C55625) *
               C90555) *
              C823)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C4828 +
             (C13579 * C245 + C90485 * C251) * C4653 - C27600 * C4829 -
             C27814 * C4654 + C27606 * C4830 + C27815 * C4655) *
                C39127 +
            (C18528 + C18529 - C18530 - C18531 + C18532 + C18544) * C39128) *
               C55625 +
           ((C27600 * C4828 + C27814 * C4653 - C27606 * C4829 - C27815 * C4654 +
             C30275 * C4830 + C30458 * C4655) *
                C39127 +
            (C78134 + C78135 - C78136 - C78137 + C78138 + C78139) * C39128) *
               C55626) *
              C90752 +
          (((C18530 - (C18529 + C18528) + C18531 - C18532 - C18544) * C39127 +
            (C18537 - (C18536 + C18535) + C18538 - C18539 - C18545) * C39128) *
               C55625 +
           ((C78136 - (C78135 + C78134) + C78137 - C78138 - C78139) * C39127 +
            (C18364 * C4829 - (C17051 * C4653 + C16857 * C4828) +
             C18543 * C4654 - (C13579 * C19087 + C90485 * C19090) * C4830 -
             (C13579 * C19200 + C90485 * C19202) * C4655) *
                C39128) *
               C55626) *
              C90555) *
         C90498) /
            (p * q * std::sqrt(p + q));
    d2eeyx[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C3364 +
            (C39329 * C116 + C39127 * C314 + C39330 * C839 + C39128 * C1098) *
                C90498) *
               C55625 +
           ((C73890 + C73891) * C3364 + (C73892 + C73893) * C90498) * C55626) *
              C90485 * C90567 * C3360 -
          (((C39330 * C3905 + C39128 * C4172 + C39329 * C3900 +
             C39127 * C4167) *
                C90498 +
            (C39330 * C3896 + C39128 * C4166 + C39329 * C3891 +
             C39127 * C4161) *
                C3364) *
               C55626 +
           ((C39330 * C2577 + C39128 * C2831 + C39329 * C839 + C39127 * C1098) *
                C90498 +
            (C39330 * C2570 + C39128 * C2827 + C39329 * C832 + C39127 * C1094) *
                C3364) *
               C55625) *
              C90485 * C90567 * C3361 +
          (((C39329 * C2570 + C39127 * C2827 + C39330 * C3367 +
             C39128 * C3545) *
                C3364 +
            (C39329 * C2577 + C39127 * C2831 + C39330 * C3370 +
             C39128 * C3548) *
                C90498) *
               C55625 +
           ((C39329 * C3896 + C39127 * C4166 + C39330 * C16835 +
             C39128 * C17131) *
                C3364 +
            (C39329 * C3905 + C39127 * C4172 + C39330 * C16838 +
             C39128 * C17133) *
                C90498) *
               C55626) *
              C90485 * C90567 * C3362 -
          (((C39330 * C16839 + C39128 * C17134 + C39329 * C16838 +
             C39127 * C17133) *
                C90498 +
            (C39330 * C16836 + C39128 * C17132 + C39329 * C16835 +
             C39127 * C17131) *
                C3364) *
               C55626 +
           ((C39330 * C15528 + C39128 * C15810 + C39329 * C3370 +
             C39127 * C3548) *
                C90498 +
            (C39330 * C15525 + C39128 * C15808 + C39329 * C3367 +
             C39127 * C3545) *
                C3364) *
               C55625) *
              C90485 * C90567 * C3363)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C826 +
            (C39329 * C116 + C39127 * C314 + C39330 * C839 + C39128 * C1098) *
                C821 -
            (C39356 + C39357) * C827 - (C39358 + C39359) * C822 +
            (C39360 + C39361) * C828 + (C39362 + C39363) * C823) *
               C55625 +
           ((C39329 * C1700 + C39127 * C1962 + C39330 * C3891 +
             C39128 * C4161) *
                C826 +
            (C39329 * C1707 + C39127 * C1966 + C39330 * C3900 +
             C39128 * C4167) *
                C821 -
            (C41168 + C41167) * C827 - (C41170 + C41169) * C822 +
            (C41172 + C41171) * C828 + (C41174 + C41173) * C823) *
               C55626) *
              C90485 * C90567 * C90752 +
          (((C40220 + C40221) * C827 -
            ((C39330 * C2577 + C39128 * C2831 + C39329 * C839 +
              C39127 * C1098) *
                 C821 +
             (C39330 * C2570 + C39128 * C2827 + C39329 * C832 +
              C39127 * C1094) *
                 C826) +
            (C40222 + C40223) * C822 - (C40224 + C40225) * C828 -
            (C40226 + C40227) * C823) *
               C55625 +
           ((C48993 + C48992) * C827 -
            ((C39330 * C3905 + C39128 * C4172 + C39329 * C3900 +
              C39127 * C4167) *
                 C821 +
             (C39330 * C3896 + C39128 * C4166 + C39329 * C3891 +
              C39127 * C4161) *
                 C826) +
            (C48995 + C48994) * C822 -
            (C39330 * C3894 + C39128 * C4164 + C39329 * C3893 +
             C39127 * C4163) *
                C828 -
            (C39330 * C3903 + C39128 * C4170 + C39329 * C3902 +
             C39127 * C4169) *
                C823) *
               C55626) *
              C90485 * C90567 * C90555)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                 C3364 +
             (C39329 * C116 + C39127 * C314 + C39330 * C839 + C39128 * C1098) *
                 C90498) *
                C55625 +
            ((C73890 + C73891) * C3364 + (C73892 + C73893) * C90498) * C55626) *
               C90485 * C4653 -
           (((C77325 + C77326) * C90498 + (C77327 + C77328) * C3364) * C55626 +
            ((C73893 + C73892) * C90498 + (C73891 + C73890) * C3364) * C55625) *
               C90485 * C4654 +
           (((C77328 + C77327) * C3364 + (C77326 + C77325) * C90498) * C55625 +
            ((C39329 * C6165 + C39127 * C6343 + C39330 * C19088 +
              C39128 * C19254) *
                 C3364 +
             (C39329 * C6168 + C39127 * C6346 + C39330 * C19091 +
              C39128 * C19256) *
                 C90498) *
                C55626) *
               C90485 * C4655) *
              C90752 +
          ((((C76351 + C76352) * C3364 + (C76353 + C76354) * C90498) * C55625 +
            ((C78246 + C78247) * C3364 + (C78248 + C78249) * C90498) * C55626) *
               C90485 * C4654 -
           (((C76354 + C76353) * C90498 + (C76352 + C76351) * C3364) * C55626 +
            ((C39330 * C2577 + C39128 * C2831 + C39329 * C839 +
              C39127 * C1098) *
                 C90498 +
             (C39330 * C2570 + C39128 * C2827 + C39329 * C832 +
              C39127 * C1094) *
                 C3364) *
                C55625) *
               C90485 * C4653 -
           (((C39330 * C19089 + C39128 * C19255 + C39329 * C19091 +
              C39127 * C19256) *
                 C90498 +
             (C39330 * C19087 + C39128 * C19253 + C39329 * C19088 +
              C39127 * C19254) *
                 C3364) *
                C55626 +
            ((C78249 + C78248) * C90498 + (C78247 + C78246) * C3364) * C55625) *
               C90485 * C4655) *
              C90555)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
               C3427 +
           (C39329 * C182 + C39127 * C394 + C39330 * C927 + C39128 * C1195) *
               C3360 -
           (C39330 * C2570 + C39128 * C2827 + C39329 * C832 + C39127 * C1094) *
               C3428 -
           (C39330 * C2663 + C39128 * C2921 + C39329 * C927 + C39127 * C1195) *
               C3361 +
           (C39329 * C2570 + C39127 * C2827 + C39330 * C3367 + C39128 * C3545) *
               C3429 +
           (C39329 * C2663 + C39127 * C2921 + C39330 * C3433 + C39128 * C3599) *
               C3362 -
           (C39330 * C15525 + C39128 * C15808 + C39329 * C3367 +
            C39127 * C3545) *
               C3430 -
           (C39330 * C15634 + C39128 * C15886 + C39329 * C3433 +
            C39127 * C3599) *
               C3363) *
              C55625 +
          ((C73890 + C73891) * C3427 + (C73996 + C73997) * C3360 -
           (C39330 * C3896 + C39128 * C4166 + C39329 * C3891 + C39127 * C4161) *
               C3428 -
           (C39330 * C3994 + C39128 * C4248 + C39329 * C3989 + C39127 * C4247) *
               C3361 +
           (C39329 * C3896 + C39127 * C4166 + C39330 * C16835 +
            C39128 * C17131) *
               C3429 +
           (C39329 * C3994 + C39127 * C4248 + C39330 * C16942 +
            C39128 * C17209) *
               C3362 -
           (C39330 * C16836 + C39128 * C17132 + C39329 * C16835 +
            C39127 * C17131) *
               C3430 -
           (C39330 * C16943 + C39128 * C17210 + C39329 * C16942 +
            C39127 * C17209) *
               C3363) *
              C55626) *
         C90485 * C90498 * C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C923 +
            (C39329 * C182 + C39127 * C394 + C39330 * C927 + C39128 * C1195) *
                C90752 -
            (C39330 * C2570 + C39128 * C2827 + C39329 * C832 + C39127 * C1094) *
                C924 -
            (C39330 * C2663 + C39128 * C2921 + C39329 * C927 + C39127 * C1195) *
                C90555) *
               C55625 +
           ((C39329 * C1700 + C39127 * C1962 + C39330 * C3891 +
             C39128 * C4161) *
                C923 +
            (C39329 * C1794 + C39127 * C2066 + C39330 * C3989 +
             C39128 * C4247) *
                C90752 -
            (C39330 * C3896 + C39128 * C4166 + C39329 * C3891 +
             C39127 * C4161) *
                C924 -
            (C39330 * C3994 + C39128 * C4248 + C39329 * C3989 +
             C39127 * C4247) *
                C90555) *
               C55626) *
              C90485 * C821 +
          (((C40220 + C40221) * C924 -
            ((C39447 + C39446) * C90752 + (C39356 + C39357) * C923) +
            (C40335 + C40334) * C90555) *
               C55625 +
           ((C48993 + C48992) * C924 -
            ((C41282 + C41281) * C90752 + (C41168 + C41167) * C923) +
            (C49130 + C49131) * C90555) *
               C55626) *
              C90485 * C822 +
          (((C39360 + C39361) * C923 + (C39449 + C39448) * C90752 -
            (C40224 + C40225) * C924 - (C40337 + C40336) * C90555) *
               C55625 +
           ((C41172 + C41171) * C923 + (C41283 + C41284) * C90752 -
            (C39330 * C3894 + C39128 * C4164 + C39329 * C3893 +
             C39127 * C4163) *
                C924 -
            (C39330 * C3992 + C39128 * C4252 + C39329 * C3991 +
             C39127 * C4251) *
                C90555) *
               C55626) *
              C90485 * C823) *
         C90567) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C923 +
            (C39329 * C182 + C39127 * C394 + C39330 * C927 + C39128 * C1195) *
                C90752 -
            (C39330 * C2570 + C39128 * C2827 + C39329 * C832 + C39127 * C1094) *
                C924 -
            (C39330 * C2663 + C39128 * C2921 + C39329 * C927 + C39127 * C1195) *
                C90555) *
               C55625 +
           ((C73890 + C73891) * C923 + (C73996 + C73997) * C90752 -
            (C76352 + C76351) * C924 - (C76465 + C76466) * C90555) *
               C55626) *
              C90485 * C90498 * C4653 +
          (((C76351 + C76352) * C924 -
            ((C73997 + C73996) * C90752 + (C73891 + C73890) * C923) +
            (C76466 + C76465) * C90555) *
               C55625 +
           ((C78246 + C78247) * C924 -
            ((C77431 + C77432) * C90752 + (C77327 + C77328) * C923) +
            (C78352 + C78353) * C90555) *
               C55626) *
              C90485 * C90498 * C4654 +
          (((C77328 + C77327) * C923 + (C77432 + C77431) * C90752 -
            (C78247 + C78246) * C924 - (C78353 + C78352) * C90555) *
               C55625 +
           ((C39329 * C6165 + C39127 * C6343 + C39330 * C19088 +
             C39128 * C19254) *
                C923 +
            (C39329 * C6227 + C39127 * C6399 + C39330 * C19146 +
             C39128 * C19308) *
                C90752 -
            (C39330 * C19087 + C39128 * C19253 + C39329 * C19088 +
             C39127 * C19254) *
                C924 -
            (C39330 * C19145 + C39128 * C19307 + C39329 * C19146 +
             C39127 * C19308) *
                C90555) *
               C55626) *
              C90485 * C90498 * C4655)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C244 +
            (C39329 * C245 + C39127 * C474 + C39330 * C1011 + C39128 * C1301) *
                C90567) *
               C55625 +
           ((C73890 + C73891) * C244 + (C74101 + C74100) * C90567) * C55626) *
              C90485 * C3360 -
          (((C39330 * C4080 + C39128 * C4330 + C39329 * C4075 +
             C39127 * C4327) *
                C90567 +
            (C39330 * C3896 + C39128 * C4166 + C39329 * C3891 +
             C39127 * C4161) *
                C244) *
               C55626 +
           ((C39330 * C2745 + C39128 * C3017 + C39329 * C1011 +
             C39127 * C1301) *
                C90567 +
            (C39330 * C2570 + C39128 * C2827 + C39329 * C832 + C39127 * C1094) *
                C244) *
               C55625) *
              C90485 * C3361 +
          (((C39329 * C2570 + C39127 * C2827 + C39330 * C3367 +
             C39128 * C3545) *
                C244 +
            (C39329 * C2745 + C39127 * C3017 + C39330 * C3489 +
             C39128 * C3654) *
                C90567) *
               C55625 +
           ((C39329 * C3896 + C39127 * C4166 + C39330 * C16835 +
             C39128 * C17131) *
                C244 +
            (C39329 * C4080 + C39127 * C4330 + C39330 * C17029 +
             C39128 * C17285) *
                C90567) *
               C55626) *
              C90485 * C3362 -
          (((C39330 * C17030 + C39128 * C17286 + C39329 * C17029 +
             C39127 * C17285) *
                C90567 +
            (C39330 * C16836 + C39128 * C17132 + C39329 * C16835 +
             C39127 * C17131) *
                C244) *
               C55626 +
           ((C39330 * C15718 + C39128 * C15962 + C39329 * C3489 +
             C39127 * C3654) *
                C90567 +
            (C39330 * C15525 + C39128 * C15808 + C39329 * C3367 +
             C39127 * C3545) *
                C244) *
               C55625) *
              C90485 * C3363) *
         C90498) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                 C244 +
             (C39329 * C245 + C39127 * C474 + C39330 * C1011 + C39128 * C1301) *
                 C90567) *
                C55625 +
            ((C39329 * C1700 + C39127 * C1962 + C39330 * C3891 +
              C39128 * C4161) *
                 C244 +
             (C39329 * C1879 + C39127 * C2159 + C39330 * C4075 +
              C39128 * C4327) *
                 C90567) *
                C55626) *
               C90485 * C90752 -
           (((C39330 * C4080 + C39128 * C4330 + C39329 * C4075 +
              C39127 * C4327) *
                 C90567 +
             (C39330 * C3896 + C39128 * C4166 + C39329 * C3891 +
              C39127 * C4161) *
                 C244) *
                C55626 +
            ((C39330 * C2745 + C39128 * C3017 + C39329 * C1011 +
              C39127 * C1301) *
                 C90567 +
             (C39330 * C2570 + C39128 * C2827 + C39329 * C832 +
              C39127 * C1094) *
                 C244) *
                C55625) *
               C90485 * C90555) *
              C821 +
          ((((C40220 + C40221) * C244 + (C40445 + C40444) * C90567) * C55625 +
            ((C48993 + C48992) * C244 + (C49266 + C49267) * C90567) * C55626) *
               C90485 * C90555 -
           (((C41391 + C41392) * C90567 + (C41168 + C41167) * C244) * C55626 +
            ((C39531 + C39530) * C90567 + (C39356 + C39357) * C244) * C55625) *
               C90485 * C90752) *
              C822 +
          ((((C39360 + C39361) * C244 + (C39533 + C39532) * C90567) * C55625 +
            ((C41172 + C41171) * C244 + (C41393 + C41394) * C90567) * C55626) *
               C90485 * C90752 -
           (((C39330 * C4078 + C39128 * C4332 + C39329 * C4077 +
              C39127 * C4329) *
                 C90567 +
             (C39330 * C3894 + C39128 * C4164 + C39329 * C3893 +
              C39127 * C4163) *
                 C244) *
                C55626 +
            ((C40447 + C40446) * C90567 + (C40224 + C40225) * C244) * C55625) *
               C90485 * C90555) *
              C823)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C4828 +
            (C39329 * C245 + C39127 * C474 + C39330 * C1011 + C39128 * C1301) *
                C4653 -
            (C73891 + C73890) * C4829 - (C74100 + C74101) * C4654 +
            (C77328 + C77327) * C4830 + (C77535 + C77536) * C4655) *
               C55625 +
           ((C73890 + C73891) * C4828 + (C74101 + C74100) * C4653 -
            (C77327 + C77328) * C4829 - (C77536 + C77535) * C4654 +
            (C39329 * C6165 + C39127 * C6343 + C39330 * C19088 +
             C39128 * C19254) *
                C4830 +
            (C39329 * C6287 + C39127 * C6450 + C39330 * C19199 +
             C39128 * C19360) *
                C4655) *
               C55626) *
              C90485 * C90752 +
          (((C76351 + C76352) * C4829 -
            ((C39330 * C2745 + C39128 * C3017 + C39329 * C1011 +
              C39127 * C1301) *
                 C4653 +
             (C39330 * C2570 + C39128 * C2827 + C39329 * C832 +
              C39127 * C1094) *
                 C4828) +
            (C76575 + C76576) * C4654 - (C78247 + C78246) * C4830 -
            (C78456 + C78457) * C4655) *
               C55625 +
           ((C78246 + C78247) * C4829 -
            ((C76576 + C76575) * C4653 + (C76352 + C76351) * C4828) +
            (C78457 + C78456) * C4654 -
            (C39330 * C19087 + C39128 * C19253 + C39329 * C19088 +
             C39127 * C19254) *
                C4830 -
            (C39330 * C19200 + C39128 * C19359 + C39329 * C19199 +
             C39127 * C19360) *
                C4655) *
               C55626) *
              C90485 * C90555) *
         C90498) /
            (p * q * std::sqrt(p + q));
    d2eezx[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C3364 +
            (C56029 * C116 + C55625 * C561 + C56030 * C1707 + C55626 * C2268) *
                C90498) *
               C90485 * C39127 +
           ((C73272 + C73273) * C3364 + (C73274 + C73275) * C90498) * C90485 *
               C39128) *
              C90567 * C3360 -
          (((C75094 + C75095) * C90498 + (C75096 + C75097) * C3364) * C90485 *
               C39128 +
           ((C73275 + C73274) * C90498 + (C73273 + C73272) * C3364) * C90485 *
               C39127) *
              C90567 * C3361 +
          (((C75097 + C75096) * C3364 + (C75095 + C75094) * C90498) * C90485 *
               C39127 +
           ((C75778 + C75779) * C3364 + (C75780 + C75781) * C90498) * C90485 *
               C39128) *
              C90567 * C3362 -
          (((C56030 * C16839 + C55626 * C17364 + C56029 * C15528 +
             C55625 * C16040) *
                C90498 +
            (C56030 * C16836 + C55626 * C17362 + C56029 * C15525 +
             C55625 * C16038) *
                C3364) *
               C90485 * C39128 +
           ((C75781 + C75780) * C90498 + (C75779 + C75778) * C3364) * C90485 *
               C39127) *
              C90567 * C3363)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C826 +
            (C56029 * C116 + C55625 * C561 + C56030 * C1707 + C55626 * C2268) *
                C821 -
            (C56056 + C56057) * C827 - (C56058 + C56059) * C822 +
            (C56060 + C56061) * C828 + (C56062 + C56063) * C823) *
               C90485 * C39127 +
           ((C73272 + C73273) * C826 + (C73274 + C73275) * C821 -
            (C56943 + C56942) * C827 - (C56945 + C56944) * C822 +
            (C56947 + C56946) * C828 + (C56949 + C56948) * C823) *
               C90485 * C39128) *
              C90567 * C90752 +
          (((C56942 + C56943) * C827 -
            ((C73275 + C73274) * C821 + (C73273 + C73272) * C826) +
            (C56944 + C56945) * C822 - (C56946 + C56947) * C828 -
            (C56948 + C56949) * C823) *
               C90485 * C39127 +
           ((C58904 + C58903) * C827 -
            ((C56030 * C3905 + C55626 * C4418 + C56029 * C2577 +
              C55625 * C3109) *
                 C821 +
             (C56030 * C3896 + C55626 * C4412 + C56029 * C2570 +
              C55625 * C3105) *
                 C826) +
            (C58906 + C58905) * C822 -
            (C56030 * C3894 + C55626 * C4410 + C56029 * C2572 +
             C55625 * C3107) *
                C828 -
            (C56030 * C3903 + C55626 * C4416 + C56029 * C2579 +
             C55625 * C3111) *
                C823) *
               C90485 * C39128) *
              C90567 * C90555)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                 C3364 +
             (C56029 * C116 + C55625 * C561 + C56030 * C1707 + C55626 * C2268) *
                 C90498) *
                C90485 * C39127 +
            ((C73272 + C73273) * C3364 + (C73274 + C73275) * C90498) * C90485 *
                C39128) *
               C4653 -
           (((C76693 + C76694) * C90498 + (C76695 + C76696) * C3364) * C90485 *
                C39128 +
            ((C56030 * C4663 + C55626 * C5195 + C56029 * C1707 +
              C55625 * C2268) *
                 C90498 +
             (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
              C55625 * C2264) *
                 C3364) *
                C90485 * C39127) *
               C4654 +
           (((C56029 * C4656 + C55625 * C5191 + C56030 * C6165 +
              C55626 * C6505) *
                 C3364 +
             (C56029 * C4663 + C55625 * C5195 + C56030 * C6168 +
              C55626 * C6508) *
                 C90498) *
                C90485 * C39127 +
            ((C78564 + C78565) * C3364 + (C78566 + C78567) * C90498) * C90485 *
                C39128) *
               C4655) *
              C90752 +
          ((((C76696 + C76695) * C3364 + (C76694 + C76693) * C90498) * C90485 *
                C39127 +
            ((C76697 + C76698) * C3364 + (C76699 + C76700) * C90498) * C90485 *
                C39128) *
               C4654 -
           (((C75094 + C75095) * C90498 + (C75096 + C75097) * C3364) * C90485 *
                C39128 +
            ((C73275 + C73274) * C90498 + (C73273 + C73272) * C3364) * C90485 *
                C39127) *
               C4653 -
           (((C56030 * C19089 + C55626 * C19413 + C56029 * C17654 +
              C55625 * C18121) *
                 C90498 +
             (C56030 * C19087 + C55626 * C19411 + C56029 * C17651 +
              C55625 * C18119) *
                 C3364) *
                C90485 * C39128 +
            ((C78567 + C78566) * C90498 + (C78565 + C78564) * C3364) * C90485 *
                C39127) *
               C4655) *
              C90555)) /
            (p * q * std::sqrt(p + q));
    d2eezy[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
               C3427 +
           (C56029 * C182 + C55625 * C641 + C56030 * C1794 + C55626 * C2368) *
               C3360 -
           (C73273 + C73272) * C3428 - (C73378 + C73379) * C3361 +
           (C75097 + C75096) * C3429 + (C75200 + C75201) * C3362 -
           (C75779 + C75778) * C3430 - (C75852 + C75853) * C3363) *
              C90485 * C39127 +
          ((C73272 + C73273) * C3427 + (C73379 + C73378) * C3360 -
           (C75096 + C75097) * C3428 - (C75201 + C75200) * C3361 +
           (C75778 + C75779) * C3429 + (C75853 + C75852) * C3362 -
           (C56030 * C16836 + C55626 * C17362 + C56029 * C15525 +
            C55625 * C16038) *
               C3430 -
           (C56030 * C16943 + C55626 * C17466 + C56029 * C15634 +
            C55625 * C16144) *
               C3363) *
              C90485 * C39128) *
         C90498 * C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C923 +
            (C56029 * C182 + C55625 * C641 + C56030 * C1794 + C55626 * C2368) *
                C90752 -
            (C73273 + C73272) * C924 - (C73378 + C73379) * C90555) *
               C90485 * C39127 +
           ((C73272 + C73273) * C923 + (C73379 + C73378) * C90752 -
            (C56030 * C3896 + C55626 * C4412 + C56029 * C2570 +
             C55625 * C3105) *
                C924 -
            (C56030 * C3994 + C55626 * C4494 + C56029 * C2663 +
             C55625 * C3199) *
                C90555) *
               C90485 * C39128) *
              C821 +
          (((C56942 + C56943) * C924 -
            ((C56147 + C56146) * C90752 + (C56056 + C56057) * C923) +
            (C57057 + C57056) * C90555) *
               C90485 * C39127 +
           ((C58904 + C58903) * C924 -
            ((C57056 + C57057) * C90752 + (C56943 + C56942) * C923) +
            (C59009 + C59010) * C90555) *
               C90485 * C39128) *
              C822 +
          (((C56060 + C56061) * C923 + (C56149 + C56148) * C90752 -
            (C56946 + C56947) * C924 - (C57059 + C57058) * C90555) *
               C90485 * C39127 +
           ((C56947 + C56946) * C923 + (C57058 + C57059) * C90752 -
            (C56030 * C3894 + C55626 * C4410 + C56029 * C2572 +
             C55625 * C3107) *
                C924 -
            (C56030 * C3992 + C55626 * C4498 + C56029 * C2665 +
             C55625 * C3201) *
                C90555) *
               C90485 * C39128) *
              C823) *
         C90567) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C923 +
            (C56029 * C182 + C55625 * C641 + C56030 * C1794 + C55626 * C2368) *
                C90752 -
            (C73273 + C73272) * C924 - (C73378 + C73379) * C90555) *
               C90485 * C39127 +
           ((C73272 + C73273) * C923 + (C73379 + C73378) * C90752 -
            (C75096 + C75097) * C924 - (C75201 + C75200) * C90555) *
               C90485 * C39128) *
              C90498 * C4653 +
          (((C76696 + C76695) * C924 -
            ((C56030 * C4746 + C55626 * C5285 + C56029 * C1794 +
              C55625 * C2368) *
                 C90752 +
             (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
              C55625 * C2264) *
                 C923) +
            (C76807 + C76808) * C90555) *
               C90485 * C39127 +
           ((C76697 + C76698) * C924 -
            ((C76808 + C76807) * C90752 + (C76695 + C76696) * C923) +
            (C76810 + C76809) * C90555) *
               C90485 * C39128) *
              C90498 * C4654 +
          (((C56029 * C4656 + C55625 * C5191 + C56030 * C6165 +
             C55626 * C6505) *
                C923 +
            (C56029 * C4746 + C55625 * C5285 + C56030 * C6227 +
             C55626 * C6561) *
                C90752 -
            (C78565 + C78564) * C924 - (C78670 + C78671) * C90555) *
               C90485 * C39127 +
           ((C78564 + C78565) * C923 + (C78671 + C78670) * C90752 -
            (C56030 * C19087 + C55626 * C19411 + C56029 * C17651 +
             C55625 * C18119) *
                C924 -
            (C56030 * C19145 + C55626 * C19465 + C56029 * C17733 +
             C55625 * C18197) *
                C90555) *
               C90485 * C39128) *
              C90498 * C4655)) /
            (p * q * std::sqrt(p + q));
    d2eezz[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C244 +
            (C56029 * C245 + C55625 * C719 + C56030 * C1879 + C55626 * C2460) *
                C90567) *
               C90485 * C39127 +
           ((C73272 + C73273) * C244 + (C73482 + C73483) * C90567) * C90485 *
               C39128) *
              C3360 -
          (((C75304 + C75305) * C90567 + (C75096 + C75097) * C244) * C90485 *
               C39128 +
           ((C73483 + C73482) * C90567 + (C73273 + C73272) * C244) * C90485 *
               C39127) *
              C3361 +
          (((C75097 + C75096) * C244 + (C75305 + C75304) * C90567) * C90485 *
               C39127 +
           ((C75778 + C75779) * C244 + (C75924 + C75925) * C90567) * C90485 *
               C39128) *
              C3362 -
          (((C56030 * C17030 + C55626 * C17551 + C56029 * C15718 +
             C55625 * C16226) *
                C90567 +
            (C56030 * C16836 + C55626 * C17362 + C56029 * C15525 +
             C55625 * C16038) *
                C244) *
               C90485 * C39128 +
           ((C75925 + C75924) * C90567 + (C75779 + C75778) * C244) * C90485 *
               C39127) *
              C3363) *
         C90498) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                 C244 +
             (C56029 * C245 + C55625 * C719 + C56030 * C1879 + C55626 * C2460) *
                 C90567) *
                C90485 * C39127 +
            ((C73272 + C73273) * C244 + (C73482 + C73483) * C90567) * C90485 *
                C39128) *
               C90752 -
           (((C56030 * C4080 + C55626 * C4576 + C56029 * C2745 +
              C55625 * C3295) *
                 C90567 +
             (C56030 * C3896 + C55626 * C4412 + C56029 * C2570 +
              C55625 * C3105) *
                 C244) *
                C90485 * C39128 +
            ((C73483 + C73482) * C90567 + (C73273 + C73272) * C244) * C90485 *
                C39127) *
               C90555) *
              C821 +
          ((((C56942 + C56943) * C244 + (C57167 + C57166) * C90567) * C90485 *
                C39127 +
            ((C58904 + C58903) * C244 + (C59113 + C59114) * C90567) * C90485 *
                C39128) *
               C90555 -
           (((C57166 + C57167) * C90567 + (C56943 + C56942) * C244) * C90485 *
                C39128 +
            ((C56231 + C56230) * C90567 + (C56056 + C56057) * C244) * C90485 *
                C39127) *
               C90752) *
              C822 +
          ((((C56060 + C56061) * C244 + (C56233 + C56232) * C90567) * C90485 *
                C39127 +
            ((C56947 + C56946) * C244 + (C57168 + C57169) * C90567) * C90485 *
                C39128) *
               C90752 -
           (((C56030 * C4078 + C55626 * C4578 + C56029 * C2747 +
              C55625 * C3297) *
                 C90567 +
             (C56030 * C3894 + C55626 * C4410 + C56029 * C2572 +
              C55625 * C3107) *
                 C244) *
                C90485 * C39128 +
            ((C57169 + C57168) * C90567 + (C56946 + C56947) * C244) * C90485 *
                C39127) *
               C90555) *
              C823)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C4828 +
            (C56029 * C245 + C55625 * C719 + C56030 * C1879 + C55626 * C2460) *
                C4653 -
            (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
             C55625 * C2264) *
                C4829 -
            (C56030 * C4831 + C55626 * C5373 + C56029 * C1879 +
             C55625 * C2460) *
                C4654 +
            (C56029 * C4656 + C55625 * C5191 + C56030 * C6165 +
             C55626 * C6505) *
                C4830 +
            (C56029 * C4831 + C55625 * C5373 + C56030 * C6287 +
             C55626 * C6612) *
                C4655) *
               C90485 * C39127 +
           ((C73272 + C73273) * C4828 + (C73482 + C73483) * C4653 -
            (C76695 + C76696) * C4829 - (C76917 + C76918) * C4654 +
            (C78564 + C78565) * C4830 + (C78774 + C78775) * C4655) *
               C90485 * C39128) *
              C90752 +
          (((C76696 + C76695) * C4829 -
            ((C73483 + C73482) * C4653 + (C73273 + C73272) * C4828) +
            (C76918 + C76917) * C4654 - (C78565 + C78564) * C4830 -
            (C78775 + C78774) * C4655) *
               C90485 * C39127 +
           ((C76697 + C76698) * C4829 -
            ((C75304 + C75305) * C4653 + (C75096 + C75097) * C4828) +
            (C76919 + C76920) * C4654 -
            (C56030 * C19087 + C55626 * C19411 + C56029 * C17651 +
             C55625 * C18119) *
                C4830 -
            (C56030 * C19200 + C55626 * C19518 + C56029 * C17811 +
             C55625 * C18273) *
                C4655) *
               C90485 * C39128) *
              C90555) *
         C90498) /
            (p * q * std::sqrt(p + q));
    d2eexx[23] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C13579 * C107 + C90485 * C113) * C3364 +
              (C13579 * C116 + C90485 * C125) * C90498) *
                 C39127 +
             (C16297 + C16298) * C39128) *
                C55625 +
            ((C29494 + C29495) * C39127 + C76024 * C39128) * C55626) *
               C90753 -
           ((C31050 * C39128 + (C29497 + C29496) * C39127) * C55626 +
            (C76025 * C39128 + (C29495 + C29494) * C39127) * C55625) *
               C90579) *
              C2565 +
          (((C76024 * C39127 + C76026 * C39128) * C55625 +
            ((C18366 + C18367) * C39127 + (C18368 + C18369) * C39128) *
                C55626) *
               C90579 -
           ((C16868 * C39128 + C76025 * C39127) * C55626 +
            ((C16300 + C16299) * C39128 + (C16298 + C16297) * C39127) *
                C55625) *
               C90753) *
              C2566 +
          (((C16307 * C39127 + (C16302 + C16301) * C39128) * C55625 +
            (C76026 * C39127 + (C16866 + C16867) * C39128) * C55626) *
               C90753 -
           ((((C13579 * C18350 + C90485 * C18352) * C90498 +
              (C13579 * C18349 + C90485 * C18351) * C3364) *
                 C39128 +
             (C18369 + C18368) * C39127) *
                C55626 +
            ((C16867 + C16866) * C39128 + C16868 * C39127) * C55625) *
               C90579) *
              C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C826 +
             (C13579 * C116 + C90485 * C125) * C821 -
             (C13579 * C108 + C90485 * C114) * C827 -
             (C13579 * C117 + C90485 * C126) * C822 +
             (C13579 * C109 + C90485 * C115) * C828 +
             (C13579 * C118 + C90485 * C127) * C823) *
                C39127 +
            (C14094 + C14095 - C14096 - C14097 + C14098 + C14099) * C39128) *
               C55625 +
           ((C27612 + C27613 - C27614 - C27615 + C27616 + C27617) * C39127 +
            (C72652 + C72653 - C72654 - C72655 + C72662 + C72663) * C39128) *
               C55626) *
              C90753 +
          (((C27614 - (C27613 + C27612) + C27615 - C27616 - C27617) * C39127 +
            (C72654 - (C72653 + C72652) + C72655 - C72662 - C72663) * C39128) *
               C55625 +
           ((C27620 - (C27619 + C27618) + C27621 - C27622 - C27623) * C39127 +
            (C33668 * C827 - (C18363 * C821 + C18362 * C826) + C33669 * C822 -
             (C13579 * C5469 + C90485 * C5475) * C828 -
             (C13579 * C5472 + C90485 * C5478) * C823) *
                C39128) *
               C55626) *
              C90579) *
         C90541) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C3364 +
             (C13579 * C116 + C90485 * C125) * C90498) *
                C39127 +
            (C16297 + C16298) * C39128) *
               C55625 +
           ((C29494 + C29495) * C39127 + C76024 * C39128) * C55626) *
              C6159 -
          ((C31050 * C39128 + (C29497 + C29496) * C39127) * C55626 +
           (C76025 * C39128 + (C29495 + C29494) * C39127) * C55625) *
              C6160 +
          ((C31043 * C39127 + C77929 * C39128) * C55625 +
           ((C31045 + C31044) * C39127 + (C31055 + C31056) * C39128) * C55626) *
              C6161 -
          ((((C13579 * C31039 + C90485 * C31041) * C90498 +
             (C13579 * C31038 + C90485 * C31040) * C3364) *
                C39128 +
            (C31779 + C31778) * C39127) *
               C55626 +
           ((C31056 + C31055) * C39128 + C31770 * C39127) * C55625) *
              C6162) *
         C90541) /
            (p * q * std::sqrt(p + q));
    d2eexy[23] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C2660 +
             (C13579 * C182 + C90485 * C188) * C2565 - C14082 * C2661 -
             C14192 * C2566 + C14088 * C2662 + C14193 * C2567) *
                C39127 +
            (C14082 * C2660 + C14192 * C2565 - C14088 * C2661 - C14193 * C2566 +
             C15553 * C2662 + C15643 * C2567) *
                C39128) *
               C55625 +
           ((C29572 + C29573 - C29574 - C29575 + C29576 + C29577) * C39127 +
            (C76125 + C76126 - C76127 - C76128 + C76129 + C76130) * C39128) *
               C55626) *
              C90498 * C90753 +
          (((C29574 - (C29573 + C29572) + C29575 - C29576 - C29577) * C39127 +
            (C76127 - (C76126 + C76125) + C76128 - C76129 - C76130) * C39128) *
               C55625 +
           ((C29580 - (C29579 + C29578) + C29581 - C29582 - C29583) * C39127 +
            (C18364 * C2661 - (C18450 * C2565 + C18362 * C2660) +
             C18451 * C2566 - (C13579 * C18349 + C90485 * C18351) * C2662 -
             (C13579 * C18443 + C90485 * C18444) * C2567) *
                C39128) *
               C55626) *
              C90498 * C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C13579 * C107 + C90485 * C113) * C181 +
              (C13579 * C182 + C90485 * C188) * C90541) *
                 C39127 +
             (C14082 * C181 + C14192 * C90541) * C39128) *
                C55625 +
            ((C27698 + C27722) * C39127 + (C73680 + C73681) * C39128) *
                C55626) *
               C821 -
           (((C73682 + C73683) * C39128 + (C27725 + C27709) * C39127) * C55626 +
            ((C14194 * C90541 + C14084 * C181) * C39128 +
             ((C13579 * C183 + C90485 * C189) * C90541 +
              (C13579 * C108 + C90485 * C114) * C181) *
                 C39127) *
                C55625) *
               C822 +
           ((((C13579 * C109 + C90485 * C115) * C181 +
              (C13579 * C184 + C90485 * C190) * C90541) *
                 C39127 +
             (C14086 * C181 + C14196 * C90541) * C39128) *
                C55625 +
            ((C27710 + C27726) * C39127 + (C73684 + C73685) * C39128) *
                C55626) *
               C823) *
              C90753 +
          ((((C27709 + C27725) * C39127 + (C73683 + C73682) * C39128) * C55625 +
            ((C27706 + C27724) * C39127 +
             (C33668 * C181 + C33789 * C90541) * C39128) *
                C55626) *
               C822 -
           (((C18450 * C90541 + C18362 * C181) * C39128 +
             (C27723 + C27701) * C39127) *
                C55626 +
            ((C73681 + C73680) * C39128 + (C27722 + C27698) * C39127) *
                C55625) *
               C821 -
           ((((C13579 * C5555 + C90485 * C5558) * C90541 +
              (C13579 * C5469 + C90485 * C5475) * C181) *
                 C39128 +
             (C27727 + C27713) * C39127) *
                C55626 +
            ((C73685 + C73684) * C39128 + (C27726 + C27710) * C39127) *
                C55625) *
               C823) *
              C90579)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C181 +
             (C13579 * C182 + C90485 * C188) * C90541) *
                C39127 +
            (C14082 * C181 + C14192 * C90541) * C39128) *
               C55625 +
           ((C27698 + C27722) * C39127 + (C73680 + C73681) * C39128) * C55626) *
              C90498 * C6159 -
          (((C77119 + C77120) * C39128 + (C27723 + C27701) * C39127) * C55626 +
           ((C73681 + C73680) * C39128 + (C27722 + C27698) * C39127) * C55625) *
              C90498 * C6160 +
          ((C30362 * C39127 + (C77120 + C77119) * C39128) * C55625 +
           ((C30369 + C30375) * C39127 + (C78908 + C78909) * C39128) * C55626) *
              C90498 * C6161 -
          ((((C13579 * C31130 + C90485 * C31131) * C90541 +
             (C13579 * C31038 + C90485 * C31040) * C181) *
                C39128 +
            (C31838 + C31833) * C39127) *
               C55626 +
           ((C78909 + C78908) * C39128 + C31832 * C39127) * C55625) *
              C90498 * C6162)) /
            (p * q * std::sqrt(p + q));
    d2eexz[23] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C1875 +
             (C13579 * C245 + C90485 * C251) * C90753 - C27600 * C1876 -
             C27814 * C90579) *
                C39127 +
            (C17034 + C17035 - C17036 - C17053) * C39128) *
               C55625 +
           ((C27600 * C1875 + C27814 * C90753 - C27606 * C1876 -
             C27815 * C90579) *
                C39127 +
            (C76229 + C76230 - C76231 - C76232) * C39128) *
               C55626) *
              C2565 +
          (((C17036 - (C17035 + C17034) + C17053) * C39127 +
            (C17041 - (C17040 + C17039) + C17055) * C39128) *
               C55625 +
           ((C76231 - (C76230 + C76229) + C76232) * C39127 +
            (C76233 - (C76234 + C76235) + C76236) * C39128) *
               C55626) *
              C2566 +
          ((C17057 * C39127 + (C17046 + C17045 - C17044 - C17056) * C39128) *
               C55625 +
           ((C76235 + C76234 - C76233 - C76236) * C39127 +
            (C16860 * C1875 + C17052 * C90753 -
             (C13579 * C18349 + C90485 * C18351) * C1876 -
             (C13579 * C18525 + C90485 * C18526) * C90579) *
                C39128) *
               C55626) *
              C2567) *
         C90498) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C1875 +
             (C13579 * C245 + C90485 * C251) * C90753 - C27600 * C1876 -
             C27814 * C90579) *
                C39127 +
            (C17034 + C17035 - C17036 - C17053) * C39128) *
               C55625 +
           ((C27600 * C1875 + C27814 * C90753 - C27606 * C1876 -
             C27815 * C90579) *
                C39127 +
            (C16859 * C1875 + C17049 * C90753 - C18362 * C1876 -
             C18542 * C90579) *
                C39128) *
               C55626) *
              C90541 * C821 +
          (((C27602 * C1876 -
             ((C13579 * C246 + C90485 * C252) * C90753 +
              (C13579 * C108 + C90485 * C114) * C1875) +
             C27816 * C90579) *
                C39127 +
            (C21235 - (C21236 + C21237) + C21247) * C39128) *
               C55625 +
           ((C27608 * C1876 - (C27816 * C90753 + C27602 * C1875) +
             C27817 * C90579) *
                C39127 +
            (C33668 * C1876 - (C21245 * C90753 + C21021 * C1875) +
             C33893 * C90579) *
                C39128) *
               C55626) *
              C90541 * C822 +
          ((((C13579 * C109 + C90485 * C115) * C1875 +
             (C13579 * C247 + C90485 * C253) * C90753 - C27604 * C1876 -
             C27818 * C90579) *
                C39127 +
            (C14086 * C1875 + C14294 * C90753 - C72660 * C1876 -
             C72870 * C90579) *
                C39128) *
               C55625 +
           ((C27604 * C1875 + C27818 * C90753 - C27610 * C1876 -
             C27819 * C90579) *
                C39127 +
            (C72660 * C1875 + C72870 * C90753 -
             (C13579 * C5469 + C90485 * C5475) * C1876 -
             (C13579 * C5635 + C90485 * C5638) * C90579) *
                C39128) *
               C55626) *
              C90541 * C823)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C6281 +
            (C13579 * C245 + C90485 * C251) * C6159 - C27600 * C6282 -
            C27814 * C6160 + C27606 * C6283 + C27815 * C6161 - C30275 * C6284 -
            C30458 * C6162) *
               C39127 +
           (C14082 * C6281 + C14290 * C6159 - C16859 * C6282 - C17049 * C6160 +
            C18362 * C6283 + C18542 * C6161 - C31052 * C6284 - C31230 * C6162) *
               C39128) *
              C55625 +
          ((C27600 * C6281 + C27814 * C6159 - C27606 * C6282 - C27815 * C6160 +
            C30275 * C6283 + C30458 * C6161 - C31776 * C6284 - C31893 * C6162) *
               C39127 +
           (C16859 * C6281 + C17049 * C6159 - C18362 * C6282 - C18542 * C6160 +
            C31052 * C6283 + C31230 * C6161 -
            (C13579 * C31038 + C90485 * C31040) * C6284 -
            (C13579 * C31225 + C90485 * C31226) * C6162) *
               C39128) *
              C55626) *
         C90541 * C90498) /
            (p * q * std::sqrt(p + q));
    d2eeyx[23] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                 C3364 +
             (C39329 * C116 + C39127 * C314 + C39330 * C839 + C39128 * C1098) *
                 C90498) *
                C55625 +
            ((C73890 + C73891) * C3364 + (C73892 + C73893) * C90498) * C55626) *
               C90485 * C90753 -
           (((C39330 * C5474 + C39128 * C5720 + C39329 * C4663 +
              C39127 * C4917) *
                 C90498 +
             (C39330 * C5471 + C39128 * C5717 + C39329 * C4656 +
              C39127 * C4913) *
                 C3364) *
                C55626 +
            ((C73893 + C73892) * C90498 + (C73891 + C73890) * C3364) * C55625) *
               C90485 * C90579) *
              C2565 +
          ((((C76351 + C76352) * C3364 + (C76353 + C76354) * C90498) * C55625 +
            ((C39329 * C5471 + C39127 * C5717 + C39330 * C17651 +
              C39128 * C17889) *
                 C3364 +
             (C39329 * C5474 + C39127 * C5720 + C39330 * C17654 +
              C39128 * C17891) *
                 C90498) *
                C55626) *
               C90485 * C90579 -
           (((C76354 + C76353) * C90498 + (C76352 + C76351) * C3364) * C55626 +
            ((C39330 * C2577 + C39128 * C2831 + C39329 * C839 +
              C39127 * C1098) *
                 C90498 +
             (C39330 * C2570 + C39128 * C2827 + C39329 * C832 +
              C39127 * C1094) *
                 C3364) *
                C55625) *
               C90485 * C90753) *
              C2566 +
          ((((C39329 * C2570 + C39127 * C2827 + C39330 * C3367 +
              C39128 * C3545) *
                 C3364 +
             (C39329 * C2577 + C39127 * C2831 + C39330 * C3370 +
              C39128 * C3548) *
                 C90498) *
                C55625 +
            ((C76355 + C76356) * C3364 + (C76357 + C76358) * C90498) * C55626) *
               C90485 * C90753 -
           (((C39330 * C18350 + C39128 * C18620 + C39329 * C17654 +
              C39127 * C17891) *
                 C90498 +
             (C39330 * C18349 + C39128 * C18619 + C39329 * C17651 +
              C39127 * C17889) *
                 C3364) *
                C55626 +
            ((C76358 + C76357) * C90498 + (C76356 + C76355) * C3364) * C55625) *
               C90485 * C90579) *
              C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C826 +
            (C39329 * C116 + C39127 * C314 + C39330 * C839 + C39128 * C1098) *
                C821 -
            (C39356 + C39357) * C827 - (C39358 + C39359) * C822 +
            (C39360 + C39361) * C828 + (C39362 + C39363) * C823) *
               C55625 +
           ((C73890 + C73891) * C826 + (C73892 + C73893) * C821 -
            (C41168 + C41167) * C827 - (C41170 + C41169) * C822 +
            (C41172 + C41171) * C828 + (C41174 + C41173) * C823) *
               C55626) *
              C90485 * C90753 +
          (((C41167 + C41168) * C827 -
            ((C73893 + C73892) * C821 + (C73891 + C73890) * C826) +
            (C41169 + C41170) * C822 - (C41171 + C41172) * C828 -
            (C41173 + C41174) * C823) *
               C55625 +
           ((C44621 + C44620) * C827 -
            ((C39330 * C5474 + C39128 * C5720 + C39329 * C4663 +
              C39127 * C4917) *
                 C821 +
             (C39330 * C5471 + C39128 * C5717 + C39329 * C4656 +
              C39127 * C4913) *
                 C826) +
            (C44623 + C44622) * C822 -
            (C39330 * C5469 + C39128 * C5715 + C39329 * C4658 +
             C39127 * C4915) *
                C828 -
            (C39330 * C5472 + C39128 * C5718 + C39329 * C4665 +
             C39127 * C4919) *
                C823) *
               C55626) *
              C90485 * C90579) *
         C90541) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C3364 +
            (C39329 * C116 + C39127 * C314 + C39330 * C839 + C39128 * C1098) *
                C90498) *
               C55625 +
           ((C73890 + C73891) * C3364 + (C73892 + C73893) * C90498) * C55626) *
              C90485 * C6159 -
          (((C77325 + C77326) * C90498 + (C77327 + C77328) * C3364) * C55626 +
           ((C73893 + C73892) * C90498 + (C73891 + C73890) * C3364) * C55625) *
              C90485 * C6160 +
          (((C77328 + C77327) * C3364 + (C77326 + C77325) * C90498) * C55625 +
           ((C79050 + C79051) * C3364 + (C79052 + C79053) * C90498) * C55626) *
              C90485 * C6161 -
          (((C39330 * C31039 + C39128 * C31305 + C39329 * C30250 +
             C39127 * C30535) *
                C90498 +
            (C39330 * C31038 + C39128 * C31304 + C39329 * C30247 +
             C39127 * C30533) *
                C3364) *
               C55626 +
           ((C79053 + C79052) * C90498 + (C79051 + C79050) * C3364) * C55625) *
              C90485 * C6162) *
         C90541) /
            (p * q * std::sqrt(p + q));
    d2eeyy[23] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C2660 +
            (C39329 * C182 + C39127 * C394 + C39330 * C927 + C39128 * C1195) *
                C2565 -
            (C39330 * C2570 + C39128 * C2827 + C39329 * C832 + C39127 * C1094) *
                C2661 -
            (C39330 * C2663 + C39128 * C2921 + C39329 * C927 + C39127 * C1195) *
                C2566 +
            (C39329 * C2570 + C39127 * C2827 + C39330 * C3367 +
             C39128 * C3545) *
                C2662 +
            (C39329 * C2663 + C39127 * C2921 + C39330 * C3433 +
             C39128 * C3599) *
                C2567) *
               C55625 +
           ((C73890 + C73891) * C2660 + (C73996 + C73997) * C2565 -
            (C76352 + C76351) * C2661 - (C76465 + C76466) * C2566 +
            (C76355 + C76356) * C2662 + (C76467 + C76468) * C2567) *
               C55626) *
              C90485 * C90498 * C90753 +
          (((C76351 + C76352) * C2661 -
            ((C73997 + C73996) * C2565 + (C73891 + C73890) * C2660) +
            (C76466 + C76465) * C2566 - (C76356 + C76355) * C2662 -
            (C76468 + C76467) * C2567) *
               C55625 +
           ((C39329 * C5471 + C39127 * C5717 + C39330 * C17651 +
             C39128 * C17889) *
                C2661 -
            ((C39330 * C5557 + C39128 * C5795 + C39329 * C4746 +
              C39127 * C5007) *
                 C2565 +
             (C39330 * C5471 + C39128 * C5717 + C39329 * C4656 +
              C39127 * C4913) *
                 C2660) +
            (C39329 * C5557 + C39127 * C5795 + C39330 * C17733 +
             C39128 * C17967) *
                C2566 -
            (C39330 * C18349 + C39128 * C18619 + C39329 * C17651 +
             C39127 * C17889) *
                C2662 -
            (C39330 * C18443 + C39128 * C18695 + C39329 * C17733 +
             C39127 * C17967) *
                C2567) *
               C55626) *
              C90485 * C90498 * C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                 C181 +
             (C39329 * C182 + C39127 * C394 + C39330 * C927 + C39128 * C1195) *
                 C90541) *
                C55625 +
            ((C73890 + C73891) * C181 + (C73996 + C73997) * C90541) * C55626) *
               C90485 * C821 -
           (((C41282 + C41281) * C90541 + (C41168 + C41167) * C181) * C55626 +
            ((C39447 + C39446) * C90541 + (C39356 + C39357) * C181) * C55625) *
               C90485 * C822 +
           (((C39360 + C39361) * C181 + (C39449 + C39448) * C90541) * C55625 +
            ((C41172 + C41171) * C181 + (C41283 + C41284) * C90541) * C55626) *
               C90485 * C823) *
              C90753 +
          ((((C41167 + C41168) * C181 + (C41281 + C41282) * C90541) * C55625 +
            ((C44621 + C44620) * C181 + (C44726 + C44727) * C90541) * C55626) *
               C90485 * C822 -
           (((C39330 * C5557 + C39128 * C5795 + C39329 * C4746 +
              C39127 * C5007) *
                 C90541 +
             (C39330 * C5471 + C39128 * C5717 + C39329 * C4656 +
              C39127 * C4913) *
                 C181) *
                C55626 +
            ((C73997 + C73996) * C90541 + (C73891 + C73890) * C181) * C55625) *
               C90485 * C821 -
           (((C39330 * C5555 + C39128 * C5797 + C39329 * C4748 +
              C39127 * C5009) *
                 C90541 +
             (C39330 * C5469 + C39128 * C5715 + C39329 * C4658 +
              C39127 * C4915) *
                 C181) *
                C55626 +
            ((C41284 + C41283) * C90541 + (C41171 + C41172) * C181) * C55625) *
               C90485 * C823) *
              C90579)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C181 +
            (C39329 * C182 + C39127 * C394 + C39330 * C927 + C39128 * C1195) *
                C90541) *
               C55625 +
           ((C73890 + C73891) * C181 + (C73996 + C73997) * C90541) * C55626) *
              C90485 * C90498 * C6159 -
          (((C77431 + C77432) * C90541 + (C77327 + C77328) * C181) * C55626 +
           ((C73997 + C73996) * C90541 + (C73891 + C73890) * C181) * C55625) *
              C90485 * C90498 * C6160 +
          (((C77328 + C77327) * C181 + (C77432 + C77431) * C90541) * C55625 +
           ((C79050 + C79051) * C181 + (C79124 + C79125) * C90541) * C55626) *
              C90485 * C90498 * C6161 -
          (((C39330 * C31130 + C39128 * C31392 + C39329 * C30357 +
             C39127 * C30638) *
                C90541 +
            (C39330 * C31038 + C39128 * C31304 + C39329 * C30247 +
             C39127 * C30533) *
                C181) *
               C55626 +
           ((C79125 + C79124) * C90541 + (C79051 + C79050) * C181) * C55625) *
              C90485 * C90498 * C6162)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[23] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C1875 +
            (C39329 * C245 + C39127 * C474 + C39330 * C1011 + C39128 * C1301) *
                C90753 -
            (C73891 + C73890) * C1876 - (C74100 + C74101) * C90579) *
               C55625 +
           ((C73890 + C73891) * C1875 + (C74101 + C74100) * C90753 -
            (C39330 * C5471 + C39128 * C5717 + C39329 * C4656 +
             C39127 * C4913) *
                C1876 -
            (C39330 * C5637 + C39128 * C5872 + C39329 * C4831 +
             C39127 * C5095) *
                C90579) *
               C55626) *
              C90485 * C2565 +
          (((C76351 + C76352) * C1876 -
            ((C39330 * C2745 + C39128 * C3017 + C39329 * C1011 +
              C39127 * C1301) *
                 C90753 +
             (C39330 * C2570 + C39128 * C2827 + C39329 * C832 +
              C39127 * C1094) *
                 C1875) +
            (C76575 + C76576) * C90579) *
               C55625 +
           ((C39329 * C5471 + C39127 * C5717 + C39330 * C17651 +
             C39128 * C17889) *
                C1876 -
            ((C76576 + C76575) * C90753 + (C76352 + C76351) * C1875) +
            (C39329 * C5637 + C39127 * C5872 + C39330 * C17811 +
             C39128 * C18043) *
                C90579) *
               C55626) *
              C90485 * C2566 +
          (((C39329 * C2570 + C39127 * C2827 + C39330 * C3367 +
             C39128 * C3545) *
                C1875 +
            (C39329 * C2745 + C39127 * C3017 + C39330 * C3489 +
             C39128 * C3654) *
                C90753 -
            (C76356 + C76355) * C1876 - (C76577 + C76578) * C90579) *
               C55625 +
           ((C76355 + C76356) * C1875 + (C76578 + C76577) * C90753 -
            (C39330 * C18349 + C39128 * C18619 + C39329 * C17651 +
             C39127 * C17889) *
                C1876 -
            (C39330 * C18525 + C39128 * C18770 + C39329 * C17811 +
             C39127 * C18043) *
                C90579) *
               C55626) *
              C90485 * C2567) *
         C90498) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C1875 +
            (C39329 * C245 + C39127 * C474 + C39330 * C1011 + C39128 * C1301) *
                C90753 -
            (C73891 + C73890) * C1876 - (C74100 + C74101) * C90579) *
               C55625 +
           ((C73890 + C73891) * C1875 + (C74101 + C74100) * C90753 -
            (C39330 * C5471 + C39128 * C5717 + C39329 * C4656 +
             C39127 * C4913) *
                C1876 -
            (C39330 * C5637 + C39128 * C5872 + C39329 * C4831 +
             C39127 * C5095) *
                C90579) *
               C55626) *
              C90485 * C90541 * C821 +
          (((C41167 + C41168) * C1876 -
            ((C39531 + C39530) * C90753 + (C39356 + C39357) * C1875) +
            (C41392 + C41391) * C90579) *
               C55625 +
           ((C44621 + C44620) * C1876 -
            ((C41391 + C41392) * C90753 + (C41168 + C41167) * C1875) +
            (C44830 + C44831) * C90579) *
               C55626) *
              C90485 * C90541 * C822 +
          (((C39360 + C39361) * C1875 + (C39533 + C39532) * C90753 -
            (C41171 + C41172) * C1876 - (C41394 + C41393) * C90579) *
               C55625 +
           ((C41172 + C41171) * C1875 + (C41393 + C41394) * C90753 -
            (C39330 * C5469 + C39128 * C5715 + C39329 * C4658 +
             C39127 * C4915) *
                C1876 -
            (C39330 * C5635 + C39128 * C5874 + C39329 * C4833 +
             C39127 * C5097) *
                C90579) *
               C55626) *
              C90485 * C90541 * C823)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
               C6281 +
           (C39329 * C245 + C39127 * C474 + C39330 * C1011 + C39128 * C1301) *
               C6159 -
           (C73891 + C73890) * C6282 - (C74100 + C74101) * C6160 +
           (C77328 + C77327) * C6283 + (C77535 + C77536) * C6161 -
           (C79051 + C79050) * C6284 - (C79196 + C79197) * C6162) *
              C55625 +
          ((C73890 + C73891) * C6281 + (C74101 + C74100) * C6159 -
           (C77327 + C77328) * C6282 - (C77536 + C77535) * C6160 +
           (C79050 + C79051) * C6283 + (C79197 + C79196) * C6161 -
           (C39330 * C31038 + C39128 * C31304 + C39329 * C30247 +
            C39127 * C30533) *
               C6284 -
           (C39330 * C31225 + C39128 * C31485 + C39329 * C30449 +
            C39127 * C30726) *
               C6162) *
              C55626) *
         C90485 * C90541 * C90498) /
            (p * q * std::sqrt(p + q));
    d2eezx[23] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                 C3364 +
             (C56029 * C116 + C55625 * C561 + C56030 * C1707 + C55626 * C2268) *
                 C90498) *
                C90485 * C39127 +
            ((C73272 + C73273) * C3364 + (C73274 + C73275) * C90498) * C90485 *
                C39128) *
               C90753 -
           (((C76693 + C76694) * C90498 + (C76695 + C76696) * C3364) * C90485 *
                C39128 +
            ((C56030 * C4663 + C55626 * C5195 + C56029 * C1707 +
              C55625 * C2268) *
                 C90498 +
             (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
              C55625 * C2264) *
                 C3364) *
                C90485 * C39127) *
               C90579) *
              C2565 +
          ((((C76696 + C76695) * C3364 + (C76694 + C76693) * C90498) * C90485 *
                C39127 +
            ((C76697 + C76698) * C3364 + (C76699 + C76700) * C90498) * C90485 *
                C39128) *
               C90579 -
           (((C75094 + C75095) * C90498 + (C75096 + C75097) * C3364) * C90485 *
                C39128 +
            ((C73275 + C73274) * C90498 + (C73273 + C73272) * C3364) * C90485 *
                C39127) *
               C90753) *
              C2566 +
          ((((C75097 + C75096) * C3364 + (C75095 + C75094) * C90498) * C90485 *
                C39127 +
            ((C75778 + C75779) * C3364 + (C75780 + C75781) * C90498) * C90485 *
                C39128) *
               C90753 -
           (((C56030 * C18350 + C55626 * C18846 + C56029 * C16838 +
              C55625 * C17363) *
                 C90498 +
             (C56030 * C18349 + C55626 * C18845 + C56029 * C16835 +
              C55625 * C17361) *
                 C3364) *
                C90485 * C39128 +
            ((C76700 + C76699) * C90498 + (C76698 + C76697) * C3364) * C90485 *
                C39127) *
               C90579) *
              C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C826 +
            (C56029 * C116 + C55625 * C561 + C56030 * C1707 + C55626 * C2268) *
                C821 -
            (C56056 + C56057) * C827 - (C56058 + C56059) * C822 +
            (C56060 + C56061) * C828 + (C56062 + C56063) * C823) *
               C90485 * C39127 +
           ((C73272 + C73273) * C826 + (C73274 + C73275) * C821 -
            (C56943 + C56942) * C827 - (C56945 + C56944) * C822 +
            (C56947 + C56946) * C828 + (C56949 + C56948) * C823) *
               C90485 * C39128) *
              C90753 +
          (((C57961 + C57962) * C827 -
            ((C56030 * C4663 + C55626 * C5195 + C56029 * C1707 +
              C55625 * C2268) *
                 C821 +
             (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
              C55625 * C2264) *
                 C826) +
            (C57963 + C57964) * C822 - (C57965 + C57966) * C828 -
            (C57967 + C57968) * C823) *
               C90485 * C39127 +
           ((C65779 + C65778) * C827 -
            ((C56030 * C5474 + C55626 * C5954 + C56029 * C3900 +
              C55625 * C4413) *
                 C821 +
             (C56030 * C5471 + C55626 * C5951 + C56029 * C3891 +
              C55625 * C4407) *
                 C826) +
            (C65781 + C65780) * C822 -
            (C56030 * C5469 + C55626 * C5949 + C56029 * C3893 +
             C55625 * C4409) *
                C828 -
            (C56030 * C5472 + C55626 * C5952 + C56029 * C3902 +
             C55625 * C4415) *
                C823) *
               C90485 * C39128) *
              C90579) *
         C90541) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C3364 +
            (C56029 * C116 + C55625 * C561 + C56030 * C1707 + C55626 * C2268) *
                C90498) *
               C90485 * C39127 +
           ((C73272 + C73273) * C3364 + (C73274 + C73275) * C90498) * C90485 *
               C39128) *
              C6159 -
          (((C76693 + C76694) * C90498 + (C76695 + C76696) * C3364) * C90485 *
               C39128 +
           ((C56030 * C4663 + C55626 * C5195 + C56029 * C1707 +
             C55625 * C2268) *
                C90498 +
            (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
             C55625 * C2264) *
                C3364) *
               C90485 * C39127) *
              C6160 +
          (((C56029 * C4656 + C55625 * C5191 + C56030 * C6165 +
             C55626 * C6505) *
                C3364 +
            (C56029 * C4663 + C55625 * C5195 + C56030 * C6168 +
             C55626 * C6508) *
                C90498) *
               C90485 * C39127 +
           ((C78564 + C78565) * C3364 + (C78566 + C78567) * C90498) * C90485 *
               C39128) *
              C6161 -
          (((C56030 * C31039 + C55626 * C31564 + C56029 * C19091 +
             C55625 * C19414) *
                C90498 +
            (C56030 * C31038 + C55626 * C31563 + C56029 * C19088 +
             C55625 * C19412) *
                C3364) *
               C90485 * C39128 +
           ((C56030 * C30250 + C55626 * C30810 + C56029 * C6168 +
             C55625 * C6508) *
                C90498 +
            (C56030 * C30247 + C55626 * C30808 + C56029 * C6165 +
             C55625 * C6505) *
                C3364) *
               C90485 * C39127) *
              C6162) *
         C90541) /
            (p * q * std::sqrt(p + q));
    d2eezy[23] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C2660 +
            (C56029 * C182 + C55625 * C641 + C56030 * C1794 + C55626 * C2368) *
                C2565 -
            (C73273 + C73272) * C2661 - (C73378 + C73379) * C2566 +
            (C75097 + C75096) * C2662 + (C75200 + C75201) * C2567) *
               C90485 * C39127 +
           ((C73272 + C73273) * C2660 + (C73379 + C73378) * C2565 -
            (C75096 + C75097) * C2661 - (C75201 + C75200) * C2566 +
            (C75778 + C75779) * C2662 + (C75853 + C75852) * C2567) *
               C90485 * C39128) *
              C90498 * C90753 +
          (((C76696 + C76695) * C2661 -
            ((C56030 * C4746 + C55626 * C5285 + C56029 * C1794 +
              C55625 * C2368) *
                 C2565 +
             (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
              C55625 * C2264) *
                 C2660) +
            (C76807 + C76808) * C2566 - (C76698 + C76697) * C2662 -
            (C76809 + C76810) * C2567) *
               C90485 * C39127 +
           ((C76697 + C76698) * C2661 -
            ((C76808 + C76807) * C2565 + (C76695 + C76696) * C2660) +
            (C76810 + C76809) * C2566 -
            (C56030 * C18349 + C55626 * C18845 + C56029 * C16835 +
             C55625 * C17361) *
                C2662 -
            (C56030 * C18443 + C55626 * C18937 + C56029 * C16942 +
             C55625 * C17465) *
                C2567) *
               C90485 * C39128) *
              C90498 * C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                 C181 +
             (C56029 * C182 + C55625 * C641 + C56030 * C1794 + C55626 * C2368) *
                 C90541) *
                C90485 * C39127 +
            ((C73272 + C73273) * C181 + (C73379 + C73378) * C90541) * C90485 *
                C39128) *
               C821 -
           (((C57056 + C57057) * C90541 + (C56943 + C56942) * C181) * C90485 *
                C39128 +
            ((C56147 + C56146) * C90541 + (C56056 + C56057) * C181) * C90485 *
                C39127) *
               C822 +
           (((C56060 + C56061) * C181 + (C56149 + C56148) * C90541) * C90485 *
                C39127 +
            ((C56947 + C56946) * C181 + (C57058 + C57059) * C90541) * C90485 *
                C39128) *
               C823) *
              C90753 +
          ((((C57961 + C57962) * C181 + (C58075 + C58076) * C90541) * C90485 *
                C39127 +
            ((C65779 + C65778) * C181 + (C65916 + C65917) * C90541) * C90485 *
                C39128) *
               C822 -
           (((C56030 * C5557 + C55626 * C6029 + C56029 * C3989 +
              C55625 * C4493) *
                 C90541 +
             (C56030 * C5471 + C55626 * C5951 + C56029 * C3891 +
              C55625 * C4407) *
                 C181) *
                C90485 * C39128 +
            ((C56030 * C4746 + C55626 * C5285 + C56029 * C1794 +
              C55625 * C2368) *
                 C90541 +
             (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
              C55625 * C2264) *
                 C181) *
                C90485 * C39127) *
               C821 -
           (((C56030 * C5555 + C55626 * C6031 + C56029 * C3991 +
              C55625 * C4497) *
                 C90541 +
             (C56030 * C5469 + C55626 * C5949 + C56029 * C3893 +
              C55625 * C4409) *
                 C181) *
                C90485 * C39128 +
            ((C58078 + C58077) * C90541 + (C57965 + C57966) * C181) * C90485 *
                C39127) *
               C823) *
              C90579)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C181 +
            (C56029 * C182 + C55625 * C641 + C56030 * C1794 + C55626 * C2368) *
                C90541) *
               C90485 * C39127 +
           ((C73272 + C73273) * C181 + (C73379 + C73378) * C90541) * C90485 *
               C39128) *
              C90498 * C6159 -
          (((C76808 + C76807) * C90541 + (C76695 + C76696) * C181) * C90485 *
               C39128 +
           ((C56030 * C4746 + C55626 * C5285 + C56029 * C1794 +
             C55625 * C2368) *
                C90541 +
            (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
             C55625 * C2264) *
                C181) *
               C90485 * C39127) *
              C90498 * C6160 +
          (((C56029 * C4656 + C55625 * C5191 + C56030 * C6165 +
             C55626 * C6505) *
                C181 +
            (C56029 * C4746 + C55625 * C5285 + C56030 * C6227 +
             C55626 * C6561) *
                C90541) *
               C90485 * C39127 +
           ((C78564 + C78565) * C181 + (C78671 + C78670) * C90541) * C90485 *
               C39128) *
              C90498 * C6161 -
          (((C56030 * C31130 + C55626 * C31639 + C56029 * C19146 +
             C55625 * C19466) *
                C90541 +
            (C56030 * C31038 + C55626 * C31563 + C56029 * C19088 +
             C55625 * C19412) *
                C181) *
               C90485 * C39128 +
           ((C56030 * C30357 + C55626 * C30886 + C56029 * C6227 +
             C55625 * C6561) *
                C90541 +
            (C56030 * C30247 + C55626 * C30808 + C56029 * C6165 +
             C55625 * C6505) *
                C181) *
               C90485 * C39127) *
              C90498 * C6162)) /
            (p * q * std::sqrt(p + q));
    d2eezz[23] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C1875 +
            (C56029 * C245 + C55625 * C719 + C56030 * C1879 + C55626 * C2460) *
                C90753 -
            (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
             C55625 * C2264) *
                C1876 -
            (C56030 * C4831 + C55626 * C5373 + C56029 * C1879 +
             C55625 * C2460) *
                C90579) *
               C90485 * C39127 +
           ((C73272 + C73273) * C1875 + (C73482 + C73483) * C90753 -
            (C76695 + C76696) * C1876 - (C76917 + C76918) * C90579) *
               C90485 * C39128) *
              C2565 +
          (((C76696 + C76695) * C1876 -
            ((C73483 + C73482) * C90753 + (C73273 + C73272) * C1875) +
            (C76918 + C76917) * C90579) *
               C90485 * C39127 +
           ((C76697 + C76698) * C1876 -
            ((C75304 + C75305) * C90753 + (C75096 + C75097) * C1875) +
            (C76919 + C76920) * C90579) *
               C90485 * C39128) *
              C2566 +
          (((C75097 + C75096) * C1875 + (C75305 + C75304) * C90753 -
            (C76698 + C76697) * C1876 - (C76920 + C76919) * C90579) *
               C90485 * C39127 +
           ((C75778 + C75779) * C1875 + (C75924 + C75925) * C90753 -
            (C56030 * C18349 + C55626 * C18845 + C56029 * C16835 +
             C55625 * C17361) *
                C1876 -
            (C56030 * C18525 + C55626 * C19018 + C56029 * C17029 +
             C55625 * C17550) *
                C90579) *
               C90485 * C39128) *
              C2567) *
         C90498) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C1875 +
            (C56029 * C245 + C55625 * C719 + C56030 * C1879 + C55626 * C2460) *
                C90753 -
            (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
             C55625 * C2264) *
                C1876 -
            (C56030 * C4831 + C55626 * C5373 + C56029 * C1879 +
             C55625 * C2460) *
                C90579) *
               C90485 * C39127 +
           ((C73272 + C73273) * C1875 + (C73482 + C73483) * C90753 -
            (C56030 * C5471 + C55626 * C5951 + C56029 * C3891 +
             C55625 * C4407) *
                C1876 -
            (C56030 * C5637 + C55626 * C6106 + C56029 * C4075 +
             C55625 * C4573) *
                C90579) *
               C90485 * C39128) *
              C90541 * C821 +
          (((C57961 + C57962) * C1876 -
            ((C56231 + C56230) * C90753 + (C56056 + C56057) * C1875) +
            (C58186 + C58185) * C90579) *
               C90485 * C39127 +
           ((C65779 + C65778) * C1876 -
            ((C57166 + C57167) * C90753 + (C56943 + C56942) * C1875) +
            (C66052 + C66053) * C90579) *
               C90485 * C39128) *
              C90541 * C822 +
          (((C56060 + C56061) * C1875 + (C56233 + C56232) * C90753 -
            (C57965 + C57966) * C1876 - (C58188 + C58187) * C90579) *
               C90485 * C39127 +
           ((C56947 + C56946) * C1875 + (C57168 + C57169) * C90753 -
            (C56030 * C5469 + C55626 * C5949 + C56029 * C3893 +
             C55625 * C4409) *
                C1876 -
            (C56030 * C5635 + C55626 * C6108 + C56029 * C4077 +
             C55625 * C4575) *
                C90579) *
               C90485 * C39128) *
              C90541 * C823)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
               C6281 +
           (C56029 * C245 + C55625 * C719 + C56030 * C1879 + C55626 * C2460) *
               C6159 -
           (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 + C55625 * C2264) *
               C6282 -
           (C56030 * C4831 + C55626 * C5373 + C56029 * C1879 + C55625 * C2460) *
               C6160 +
           (C56029 * C4656 + C55625 * C5191 + C56030 * C6165 + C55626 * C6505) *
               C6283 +
           (C56029 * C4831 + C55625 * C5373 + C56030 * C6287 + C55626 * C6612) *
               C6161 -
           (C56030 * C30247 + C55626 * C30808 + C56029 * C6165 +
            C55625 * C6505) *
               C6284 -
           (C56030 * C30449 + C55626 * C30962 + C56029 * C6287 +
            C55625 * C6612) *
               C6162) *
              C90485 * C39127 +
          ((C73272 + C73273) * C6281 + (C73482 + C73483) * C6159 -
           (C76695 + C76696) * C6282 - (C76917 + C76918) * C6160 +
           (C78564 + C78565) * C6283 + (C78774 + C78775) * C6161 -
           (C56030 * C31038 + C55626 * C31563 + C56029 * C19088 +
            C55625 * C19412) *
               C6284 -
           (C56030 * C31225 + C55626 * C31714 + C56029 * C19199 +
            C55625 * C19517) *
               C6162) *
              C90485 * C39128) *
         C90541 * C90498) /
            (p * q * std::sqrt(p + q));
    d2eexx[24] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C6694 +
             (C13579 * C116 + C90485 * C125) * C90780 -
             (C13579 * C108 + C90485 * C114) * C6695 -
             (C13579 * C117 + C90485 * C126) * C90771 +
             (C13579 * C109 + C90485 * C115) * C6696 +
             (C13579 * C118 + C90485 * C127) * C6691) *
                C39127 +
            (C19594 + C19595 - C19596 - C19597 + C19598 + C19599) * C39128) *
               C55625 +
           ((C34604 + C34605 - C34606 - C34607 + C34608 + C34609) * C39127 +
            (C79494 + C79495 - C79496 - C79497 + C79498 + C79499) * C39128) *
               C55626) *
              C9074 +
          (((C34606 - (C34605 + C34604) + C34607 - C34608 - C34609) * C39127 +
            (C79496 - (C79495 + C79494) + C79497 - C79498 - C79499) * C39128) *
               C55625 +
           ((C34612 - (C34611 + C34610) + C34613 - C34614 - C34615) * C39127 +
            (C33668 * C6695 - (C18363 * C90780 + C18362 * C6694) +
             C33669 * C90771 - (C13579 * C5469 + C90485 * C5475) * C6696 -
             (C13579 * C5472 + C90485 * C5478) * C6691) *
                C39128) *
               C55626) *
              C90579) *
         C90541) /
        (p * q * std::sqrt(p + q));
    d2eexy[24] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C13579 * C107 + C90485 * C113) * C181 +
              (C13579 * C182 + C90485 * C188) * C90541) *
                 C39127 +
             (C14082 * C181 + C14192 * C90541) * C39128) *
                C55625 +
            ((C27698 + C27722) * C39127 + (C73680 + C73681) * C39128) *
                C55626) *
               C90780 -
           (((C73682 + C73683) * C39128 + (C27725 + C27709) * C39127) * C55626 +
            ((C14194 * C90541 + C14084 * C181) * C39128 +
             ((C13579 * C183 + C90485 * C189) * C90541 +
              (C13579 * C108 + C90485 * C114) * C181) *
                 C39127) *
                C55625) *
               C90771 +
           ((((C13579 * C109 + C90485 * C115) * C181 +
              (C13579 * C184 + C90485 * C190) * C90541) *
                 C39127 +
             (C14086 * C181 + C14196 * C90541) * C39128) *
                C55625 +
            ((C27710 + C27726) * C39127 + (C73684 + C73685) * C39128) *
                C55626) *
               C6691) *
              C9074 +
          ((((C27709 + C27725) * C39127 + (C73683 + C73682) * C39128) * C55625 +
            ((C27706 + C27724) * C39127 + (C77117 + C77118) * C39128) *
                C55626) *
               C90771 -
           (((C77119 + C77120) * C39128 + (C27723 + C27701) * C39127) * C55626 +
            ((C73681 + C73680) * C39128 + (C27722 + C27698) * C39127) *
                C55625) *
               C90780 -
           ((((C13579 * C5555 + C90485 * C5558) * C90541 +
              (C13579 * C5469 + C90485 * C5475) * C181) *
                 C39128 +
             (C27727 + C27713) * C39127) *
                C55626 +
            ((C73685 + C73684) * C39128 + (C27726 + C27710) * C39127) *
                C55625) *
               C6691) *
              C90579)) /
        (p * q * std::sqrt(p + q));
    d2eexz[24] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C13579 * C107 + C90485 * C113) * C9224 +
                       (C13579 * C245 + C90485 * C251) * C9074 -
                       C27600 * C9225 - C27814 * C90579) *
                          C39127 +
                      (C22829 + C22830 - C22831 - C22832) * C39128) *
                         C55625 +
                     ((C27600 * C9224 + C27814 * C9074 - C27606 * C9225 -
                       C27815 * C90579) *
                          C39127 +
                      (C16859 * C9224 + C17049 * C9074 - C18362 * C9225 -
                       C18542 * C90579) *
                          C39128) *
                         C55626) *
                        C90541 * C90780 +
                    (((C27602 * C9225 -
                       ((C13579 * C246 + C90485 * C252) * C9074 +
                        (C13579 * C108 + C90485 * C114) * C9224) +
                       C27816 * C90579) *
                          C39127 +
                      (C22837 - (C22838 + C22839) + C22840) * C39128) *
                         C55625 +
                     ((C27608 * C9225 - (C27816 * C9074 + C27602 * C9224) +
                       C27817 * C90579) *
                          C39127 +
                      (C33668 * C9225 - (C21245 * C9074 + C21021 * C9224) +
                       C33893 * C90579) *
                          C39128) *
                         C55626) *
                        C90541 * C90771 +
                    ((((C13579 * C109 + C90485 * C115) * C9224 +
                       (C13579 * C247 + C90485 * C253) * C9074 -
                       C27604 * C9225 - C27818 * C90579) *
                          C39127 +
                      (C14086 * C9224 + C14294 * C9074 - C72660 * C9225 -
                       C72870 * C90579) *
                          C39128) *
                         C55625 +
                     ((C27604 * C9224 + C27818 * C9074 - C27610 * C9225 -
                       C27819 * C90579) *
                          C39127 +
                      (C72660 * C9224 + C72870 * C9074 -
                       (C13579 * C5469 + C90485 * C5475) * C9225 -
                       (C13579 * C5635 + C90485 * C5638) * C90579) *
                          C39128) *
                         C55626) *
                        C90541 * C6691)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[24] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C6694 +
            (C39329 * C116 + C39127 * C314 + C39330 * C839 + C39128 * C1098) *
                C90780 -
            (C39356 + C39357) * C6695 - (C39358 + C39359) * C90771 +
            (C39360 + C39361) * C6696 + (C39362 + C39363) * C6691) *
               C55625 +
           ((C73890 + C73891) * C6694 + (C73892 + C73893) * C90780 -
            (C41168 + C41167) * C6695 - (C41170 + C41169) * C90771 +
            (C41172 + C41171) * C6696 + (C41174 + C41173) * C6691) *
               C55626) *
              C90485 * C9074 +
          (((C41167 + C41168) * C6695 -
            ((C73893 + C73892) * C90780 + (C73891 + C73890) * C6694) +
            (C41169 + C41170) * C90771 - (C41171 + C41172) * C6696 -
            (C41173 + C41174) * C6691) *
               C55625 +
           ((C44621 + C44620) * C6695 -
            ((C77325 + C77326) * C90780 + (C77327 + C77328) * C6694) +
            (C44623 + C44622) * C90771 -
            (C39330 * C5469 + C39128 * C5715 + C39329 * C4658 +
             C39127 * C4915) *
                C6696 -
            (C39330 * C5472 + C39128 * C5718 + C39329 * C4665 +
             C39127 * C4919) *
                C6691) *
               C55626) *
              C90485 * C90579) *
         C90541) /
        (p * q * std::sqrt(p + q));
    d2eeyy[24] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                 C181 +
             (C39329 * C182 + C39127 * C394 + C39330 * C927 + C39128 * C1195) *
                 C90541) *
                C55625 +
            ((C73890 + C73891) * C181 + (C73996 + C73997) * C90541) * C55626) *
               C90485 * C90780 -
           (((C41282 + C41281) * C90541 + (C41168 + C41167) * C181) * C55626 +
            ((C39447 + C39446) * C90541 + (C39356 + C39357) * C181) * C55625) *
               C90485 * C90771 +
           (((C39360 + C39361) * C181 + (C39449 + C39448) * C90541) * C55625 +
            ((C41172 + C41171) * C181 + (C41283 + C41284) * C90541) * C55626) *
               C90485 * C6691) *
              C9074 +
          ((((C41167 + C41168) * C181 + (C41281 + C41282) * C90541) * C55625 +
            ((C44621 + C44620) * C181 + (C44726 + C44727) * C90541) * C55626) *
               C90485 * C90771 -
           (((C77431 + C77432) * C90541 + (C77327 + C77328) * C181) * C55626 +
            ((C73997 + C73996) * C90541 + (C73891 + C73890) * C181) * C55625) *
               C90485 * C90780 -
           (((C39330 * C5555 + C39128 * C5797 + C39329 * C4748 +
              C39127 * C5009) *
                 C90541 +
             (C39330 * C5469 + C39128 * C5715 + C39329 * C4658 +
              C39127 * C4915) *
                 C181) *
                C55626 +
            ((C41284 + C41283) * C90541 + (C41171 + C41172) * C181) * C55625) *
               C90485 * C6691) *
              C90579)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[24] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C9224 +
            (C39329 * C245 + C39127 * C474 + C39330 * C1011 + C39128 * C1301) *
                C9074 -
            (C73891 + C73890) * C9225 - (C74100 + C74101) * C90579) *
               C55625 +
           ((C73890 + C73891) * C9224 + (C74101 + C74100) * C9074 -
            (C77327 + C77328) * C9225 - (C77536 + C77535) * C90579) *
               C55626) *
              C90485 * C90541 * C90780 +
          (((C41167 + C41168) * C9225 -
            ((C39531 + C39530) * C9074 + (C39356 + C39357) * C9224) +
            (C41392 + C41391) * C90579) *
               C55625 +
           ((C44621 + C44620) * C9225 -
            ((C41391 + C41392) * C9074 + (C41168 + C41167) * C9224) +
            (C44830 + C44831) * C90579) *
               C55626) *
              C90485 * C90541 * C90771 +
          (((C39360 + C39361) * C9224 + (C39533 + C39532) * C9074 -
            (C41171 + C41172) * C9225 - (C41394 + C41393) * C90579) *
               C55625 +
           ((C41172 + C41171) * C9224 + (C41393 + C41394) * C9074 -
            (C39330 * C5469 + C39128 * C5715 + C39329 * C4658 +
             C39127 * C4915) *
                C9225 -
            (C39330 * C5635 + C39128 * C5874 + C39329 * C4833 +
             C39127 * C5097) *
                C90579) *
               C55626) *
              C90485 * C90541 * C6691)) /
        (p * q * std::sqrt(p + q));
    d2eezx[24] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C6694 +
            (C56029 * C116 + C55625 * C561 + C56030 * C1707 + C55626 * C2268) *
                C90780 -
            (C56056 + C56057) * C6695 - (C56058 + C56059) * C90771 +
            (C56060 + C56061) * C6696 + (C56062 + C56063) * C6691) *
               C90485 * C39127 +
           ((C73272 + C73273) * C6694 + (C73274 + C73275) * C90780 -
            (C56943 + C56942) * C6695 - (C56945 + C56944) * C90771 +
            (C56947 + C56946) * C6696 + (C56949 + C56948) * C6691) *
               C90485 * C39128) *
              C9074 +
          (((C57961 + C57962) * C6695 -
            ((C56030 * C4663 + C55626 * C5195 + C56029 * C1707 +
              C55625 * C2268) *
                 C90780 +
             (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
              C55625 * C2264) *
                 C6694) +
            (C57963 + C57964) * C90771 - (C57965 + C57966) * C6696 -
            (C57967 + C57968) * C6691) *
               C90485 * C39127 +
           ((C65779 + C65778) * C6695 -
            ((C76693 + C76694) * C90780 + (C76695 + C76696) * C6694) +
            (C65781 + C65780) * C90771 -
            (C56030 * C5469 + C55626 * C5949 + C56029 * C3893 +
             C55625 * C4409) *
                C6696 -
            (C56030 * C5472 + C55626 * C5952 + C56029 * C3902 +
             C55625 * C4415) *
                C6691) *
               C90485 * C39128) *
              C90579) *
         C90541) /
        (p * q * std::sqrt(p + q));
    d2eezy[24] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                 C181 +
             (C56029 * C182 + C55625 * C641 + C56030 * C1794 + C55626 * C2368) *
                 C90541) *
                C90485 * C39127 +
            ((C73272 + C73273) * C181 + (C73379 + C73378) * C90541) * C90485 *
                C39128) *
               C90780 -
           (((C57056 + C57057) * C90541 + (C56943 + C56942) * C181) * C90485 *
                C39128 +
            ((C56147 + C56146) * C90541 + (C56056 + C56057) * C181) * C90485 *
                C39127) *
               C90771 +
           (((C56060 + C56061) * C181 + (C56149 + C56148) * C90541) * C90485 *
                C39127 +
            ((C56947 + C56946) * C181 + (C57058 + C57059) * C90541) * C90485 *
                C39128) *
               C6691) *
              C9074 +
          ((((C57961 + C57962) * C181 + (C58075 + C58076) * C90541) * C90485 *
                C39127 +
            ((C65779 + C65778) * C181 + (C65916 + C65917) * C90541) * C90485 *
                C39128) *
               C90771 -
           (((C76808 + C76807) * C90541 + (C76695 + C76696) * C181) * C90485 *
                C39128 +
            ((C56030 * C4746 + C55626 * C5285 + C56029 * C1794 +
              C55625 * C2368) *
                 C90541 +
             (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
              C55625 * C2264) *
                 C181) *
                C90485 * C39127) *
               C90780 -
           (((C56030 * C5555 + C55626 * C6031 + C56029 * C3991 +
              C55625 * C4497) *
                 C90541 +
             (C56030 * C5469 + C55626 * C5949 + C56029 * C3893 +
              C55625 * C4409) *
                 C181) *
                C90485 * C39128 +
            ((C58078 + C58077) * C90541 + (C57965 + C57966) * C181) * C90485 *
                C39127) *
               C6691) *
              C90579)) /
        (p * q * std::sqrt(p + q));
    d2eezz[24] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C9224 +
            (C56029 * C245 + C55625 * C719 + C56030 * C1879 + C55626 * C2460) *
                C9074 -
            (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
             C55625 * C2264) *
                C9225 -
            (C56030 * C4831 + C55626 * C5373 + C56029 * C1879 +
             C55625 * C2460) *
                C90579) *
               C90485 * C39127 +
           ((C73272 + C73273) * C9224 + (C73482 + C73483) * C9074 -
            (C76695 + C76696) * C9225 - (C76917 + C76918) * C90579) *
               C90485 * C39128) *
              C90541 * C90780 +
          (((C57961 + C57962) * C9225 -
            ((C56231 + C56230) * C9074 + (C56056 + C56057) * C9224) +
            (C58186 + C58185) * C90579) *
               C90485 * C39127 +
           ((C65779 + C65778) * C9225 -
            ((C57166 + C57167) * C9074 + (C56943 + C56942) * C9224) +
            (C66052 + C66053) * C90579) *
               C90485 * C39128) *
              C90541 * C90771 +
          (((C56060 + C56061) * C9224 + (C56233 + C56232) * C9074 -
            (C57965 + C57966) * C9225 - (C58188 + C58187) * C90579) *
               C90485 * C39127 +
           ((C56947 + C56946) * C9224 + (C57168 + C57169) * C9074 -
            (C56030 * C5469 + C55626 * C5949 + C56029 * C3893 +
             C55625 * C4409) *
                C9225 -
            (C56030 * C5635 + C55626 * C6108 + C56029 * C4077 +
             C55625 * C4575) *
                C90579) *
               C90485 * C39128) *
              C90541 * C6691)) /
        (p * q * std::sqrt(p + q));
    d2eexx[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C13579 * C107 + C90485 * C113) * C7401 +
              (C13579 * C116 + C90485 * C125) * C7396 -
              (C13579 * C108 + C90485 * C114) * C7402 -
              (C13579 * C117 + C90485 * C126) * C90503) *
                 C39127 +
             (C20284 + C20285 - C20286 - C20287) * C39128) *
                C55625 +
            ((C33654 + C33655 - C33656 - C33657) * C39127 + C81300 * C39128) *
                C55626) *
               C9074 +
           (((C33656 - (C33655 + C33654) + C33657) * C39127 + C81301 * C39128) *
                C55625 +
            ((C33660 - (C33659 + C33658) + C33661) * C39127 +
             (C33670 - (C33664 + C33665) + C33671) * C39128) *
                C55626) *
               C90579) *
              C90752 +
          ((((C20286 - (C20285 + C20284) + C20287) * C39127 +
             (C20290 - (C20289 + C20288) + C20291) * C39128) *
                C55625 +
            (C81301 * C39127 + (C21027 - (C21017 + C21018) + C21028) * C39128) *
                C55626) *
               C9074 +
           ((C81300 * C39127 + (C21018 + C21017 - C21027 - C21028) * C39128) *
                C55625 +
            ((C33665 + C33664 - C33670 - C33671) * C39127 +
             (C18364 * C7401 + C18365 * C7396 -
              (C13579 * C17652 + C90485 * C17655) * C7402 -
              (C13579 * C17656 + C90485 * C17658) * C90503) *
                 C39128) *
                C55626) *
               C90579) *
              C90555)) /
        (p * q * std::sqrt(p + q));
    d2eexy[25] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((((C13579 * C107 + C90485 * C113) * C923 +
                        (C13579 * C182 + C90485 * C188) * C90752 -
                        C14082 * C924 - C14192 * C90555) *
                           C39127 +
                       (C14082 * C923 + C14192 * C90752 - C14088 * C924 -
                        C14193 * C90555) *
                           C39128) *
                          C55625 +
                      ((C31133 + C31134 - C31135 - C31136) * C39127 +
                       (C78028 + C78029 - C78030 - C78031) * C39128) *
                          C55626) *
                         C7396 +
                     (((C14084 * C924 -
                        ((C13579 * C183 + C90485 * C189) * C90752 +
                         (C13579 * C108 + C90485 * C114) * C923) +
                        C14194 * C90555) *
                           C39127 +
                       (C14090 * C924 - (C14194 * C90752 + C14084 * C923) +
                        C14195 * C90555) *
                           C39128) *
                          C55625 +
                      ((C35416 - (C35417 + C35418) + C35419) * C39127 +
                       (C83496 - (C83497 + C83498) + C83499) * C39128) *
                          C55626) *
                         C90503) *
                        C9074 +
                    ((((C31135 - (C31134 + C31133) + C31136) * C39127 +
                       (C78030 - (C78029 + C78028) + C78031) * C39128) *
                          C55625 +
                      ((C31139 - (C31138 + C31137) + C31140) * C39127 +
                       (C78032 - (C78033 + C78034) + C78035) * C39128) *
                          C55626) *
                         C7396 +
                     (((C35418 + C35417 - C35416 - C35419) * C39127 +
                       (C83498 + C83497 - C83496 - C83499) * C39128) *
                          C55625 +
                      ((C35422 + C35421 - C35420 - C35423) * C39127 +
                       (C33668 * C923 + C33789 * C90752 -
                        (C13579 * C17652 + C90485 * C17655) * C924 -
                        (C13579 * C17734 + C90485 * C17736) * C90555) *
                           C39128) *
                          C55626) *
                         C90503) *
                        C90579)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[25] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((((C13579 * C107 + C90485 * C113) * C9224 +
                        (C13579 * C245 + C90485 * C251) * C9074 -
                        C27600 * C9225 - C27814 * C90579) *
                           C39127 +
                       (C22829 + C22830 - C22831 - C22832) * C39128) *
                          C55625 +
                      ((C27600 * C9224 + C27814 * C9074 - C27606 * C9225 -
                        C27815 * C90579) *
                           C39127 +
                       (C83630 + C83631 - C83632 - C83633) * C39128) *
                          C55626) *
                         C90752 +
                     (((C22831 - (C22830 + C22829) + C22832) * C39127 +
                       (C22835 - (C22834 + C22833) + C22836) * C39128) *
                          C55625 +
                      ((C83632 - (C83631 + C83630) + C83633) * C39127 +
                       (C18364 * C9225 - (C17051 * C9074 + C16857 * C9224) +
                        C18543 * C90579) *
                           C39128) *
                          C55626) *
                         C90555) *
                        C7396 +
                    ((((C27602 * C9225 -
                        ((C13579 * C246 + C90485 * C252) * C9074 +
                         (C13579 * C108 + C90485 * C114) * C9224) +
                        C27816 * C90579) *
                           C39127 +
                       (C22837 - (C22838 + C22839) + C22840) * C39128) *
                          C55625 +
                      ((C27608 * C9225 - (C27816 * C9074 + C27602 * C9224) +
                        C27817 * C90579) *
                           C39127 +
                       (C83634 - (C83635 + C83636) + C83637) * C39128) *
                          C55626) *
                         C90752 +
                     (((C22839 + C22838 - C22837 - C22840) * C39127 +
                       (C22843 + C22842 - C22841 - C22844) * C39128) *
                          C55625 +
                      ((C83636 + C83635 - C83634 - C83637) * C39127 +
                       (C21023 * C9224 + C21246 * C9074 -
                        (C13579 * C17652 + C90485 * C17655) * C9225 -
                        (C13579 * C17812 + C90485 * C17814) * C90579) *
                           C39128) *
                          C55626) *
                         C90555) *
                        C90503)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                 C7401 +
             (C39329 * C116 + C39127 * C314 + C39330 * C839 + C39128 * C1098) *
                 C7396 -
             (C39356 + C39357) * C7402 - (C39358 + C39359) * C90503) *
                C55625 +
            ((C73890 + C73891) * C7401 + (C73892 + C73893) * C7396 -
             (C41168 + C41167) * C7402 - (C41170 + C41169) * C90503) *
                C55626) *
               C90485 * C9074 +
           (((C41167 + C41168) * C7402 -
             ((C73893 + C73892) * C7396 + (C73891 + C73890) * C7401) +
             (C41169 + C41170) * C90503) *
                C55625 +
            ((C44621 + C44620) * C7402 -
             ((C77325 + C77326) * C7396 + (C77327 + C77328) * C7401) +
             (C44623 + C44622) * C90503) *
                C55626) *
               C90485 * C90579) *
              C90752 +
          ((((C40220 + C40221) * C7402 -
             ((C39330 * C2577 + C39128 * C2831 + C39329 * C839 +
               C39127 * C1098) *
                  C7396 +
              (C39330 * C2570 + C39128 * C2827 + C39329 * C832 +
               C39127 * C1094) *
                  C7401) +
             (C40222 + C40223) * C90503) *
                C55625 +
            ((C48993 + C48992) * C7402 -
             ((C76354 + C76353) * C7396 + (C76352 + C76351) * C7401) +
             (C48995 + C48994) * C90503) *
                C55626) *
               C90485 * C9074 +
           (((C76351 + C76352) * C7401 + (C76353 + C76354) * C7396 -
             (C48992 + C48993) * C7402 - (C48994 + C48995) * C90503) *
                C55625 +
            ((C78246 + C78247) * C7401 + (C78248 + C78249) * C7396 -
             (C39330 * C17652 + C39128 * C17890 + C39329 * C5470 +
              C39127 * C5716) *
                 C7402 -
             (C39330 * C17656 + C39128 * C17892 + C39329 * C5473 +
              C39127 * C5719) *
                 C90503) *
                C55626) *
               C90485 * C90579) *
              C90555)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                 C923 +
             (C39329 * C182 + C39127 * C394 + C39330 * C927 + C39128 * C1195) *
                 C90752 -
             (C39330 * C2570 + C39128 * C2827 + C39329 * C832 +
              C39127 * C1094) *
                 C924 -
             (C39330 * C2663 + C39128 * C2921 + C39329 * C927 +
              C39127 * C1195) *
                 C90555) *
                C55625 +
            ((C73890 + C73891) * C923 + (C73996 + C73997) * C90752 -
             (C76352 + C76351) * C924 - (C76465 + C76466) * C90555) *
                C55626) *
               C90485 * C7396 +
           (((C40220 + C40221) * C924 -
             ((C39447 + C39446) * C90752 + (C39356 + C39357) * C923) +
             (C40335 + C40334) * C90555) *
                C55625 +
            ((C48993 + C48992) * C924 -
             ((C41282 + C41281) * C90752 + (C41168 + C41167) * C923) +
             (C49130 + C49131) * C90555) *
                C55626) *
               C90485 * C90503) *
              C9074 +
          ((((C76351 + C76352) * C924 -
             ((C73997 + C73996) * C90752 + (C73891 + C73890) * C923) +
             (C76466 + C76465) * C90555) *
                C55625 +
            ((C78246 + C78247) * C924 -
             ((C77431 + C77432) * C90752 + (C77327 + C77328) * C923) +
             (C78352 + C78353) * C90555) *
                C55626) *
               C90485 * C7396 +
           (((C41167 + C41168) * C923 + (C41281 + C41282) * C90752 -
             (C48992 + C48993) * C924 - (C49131 + C49130) * C90555) *
                C55625 +
            ((C44621 + C44620) * C923 + (C44726 + C44727) * C90752 -
             (C39330 * C17652 + C39128 * C17890 + C39329 * C5470 +
              C39127 * C5716) *
                 C924 -
             (C39330 * C17734 + C39128 * C17968 + C39329 * C5556 +
              C39127 * C5796) *
                 C90555) *
                C55626) *
               C90485 * C90503) *
              C90579)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                 C9224 +
             (C39329 * C245 + C39127 * C474 + C39330 * C1011 + C39128 * C1301) *
                 C9074 -
             (C73891 + C73890) * C9225 - (C74100 + C74101) * C90579) *
                C55625 +
            ((C73890 + C73891) * C9224 + (C74101 + C74100) * C9074 -
             (C77327 + C77328) * C9225 - (C77536 + C77535) * C90579) *
                C55626) *
               C90485 * C90752 +
           (((C76351 + C76352) * C9225 -
             ((C39330 * C2745 + C39128 * C3017 + C39329 * C1011 +
               C39127 * C1301) *
                  C9074 +
              (C39330 * C2570 + C39128 * C2827 + C39329 * C832 +
               C39127 * C1094) *
                  C9224) +
             (C76575 + C76576) * C90579) *
                C55625 +
            ((C78246 + C78247) * C9225 -
             ((C76576 + C76575) * C9074 + (C76352 + C76351) * C9224) +
             (C78457 + C78456) * C90579) *
                C55626) *
               C90485 * C90555) *
              C7396 +
          ((((C41167 + C41168) * C9225 -
             ((C39531 + C39530) * C9074 + (C39356 + C39357) * C9224) +
             (C41392 + C41391) * C90579) *
                C55625 +
            ((C44621 + C44620) * C9225 -
             ((C41391 + C41392) * C9074 + (C41168 + C41167) * C9224) +
             (C44830 + C44831) * C90579) *
                C55626) *
               C90485 * C90752 +
           (((C40220 + C40221) * C9224 + (C40445 + C40444) * C9074 -
             (C48992 + C48993) * C9225 - (C49267 + C49266) * C90579) *
                C55625 +
            ((C48993 + C48992) * C9224 + (C49266 + C49267) * C9074 -
             (C39330 * C17652 + C39128 * C17890 + C39329 * C5470 +
              C39127 * C5716) *
                 C9225 -
             (C39330 * C17812 + C39128 * C18044 + C39329 * C5636 +
              C39127 * C5873) *
                 C90579) *
                C55626) *
               C90485 * C90555) *
              C90503)) /
        (p * q * std::sqrt(p + q));
    d2eezx[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                 C7401 +
             (C56029 * C116 + C55625 * C561 + C56030 * C1707 + C55626 * C2268) *
                 C7396 -
             (C56056 + C56057) * C7402 - (C56058 + C56059) * C90503) *
                C90485 * C39127 +
            ((C73272 + C73273) * C7401 + (C73274 + C73275) * C7396 -
             (C56943 + C56942) * C7402 - (C56945 + C56944) * C90503) *
                C90485 * C39128) *
               C9074 +
           (((C57961 + C57962) * C7402 -
             ((C56030 * C4663 + C55626 * C5195 + C56029 * C1707 +
               C55625 * C2268) *
                  C7396 +
              (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
               C55625 * C2264) *
                  C7401) +
             (C57963 + C57964) * C90503) *
                C90485 * C39127 +
            ((C65779 + C65778) * C7402 -
             ((C76693 + C76694) * C7396 + (C76695 + C76696) * C7401) +
             (C65781 + C65780) * C90503) *
                C90485 * C39128) *
               C90579) *
              C90752 +
          ((((C56942 + C56943) * C7402 -
             ((C73275 + C73274) * C7396 + (C73273 + C73272) * C7401) +
             (C56944 + C56945) * C90503) *
                C90485 * C39127 +
            ((C58904 + C58903) * C7402 -
             ((C75094 + C75095) * C7396 + (C75096 + C75097) * C7401) +
             (C58906 + C58905) * C90503) *
                C90485 * C39128) *
               C9074 +
           (((C76696 + C76695) * C7401 + (C76694 + C76693) * C7396 -
             (C65778 + C65779) * C7402 - (C65780 + C65781) * C90503) *
                C90485 * C39127 +
            ((C76697 + C76698) * C7401 + (C76699 + C76700) * C7396 -
             (C56030 * C17652 + C55626 * C18120 + C56029 * C3895 +
              C55625 * C4411) *
                 C7402 -
             (C56030 * C17656 + C55626 * C18122 + C56029 * C3904 +
              C55625 * C4417) *
                 C90503) *
                C90485 * C39128) *
               C90579) *
              C90555)) /
        (p * q * std::sqrt(p + q));
    d2eezy[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                 C923 +
             (C56029 * C182 + C55625 * C641 + C56030 * C1794 + C55626 * C2368) *
                 C90752 -
             (C73273 + C73272) * C924 - (C73378 + C73379) * C90555) *
                C90485 * C39127 +
            ((C73272 + C73273) * C923 + (C73379 + C73378) * C90752 -
             (C75096 + C75097) * C924 - (C75201 + C75200) * C90555) *
                C90485 * C39128) *
               C7396 +
           (((C56942 + C56943) * C924 -
             ((C56147 + C56146) * C90752 + (C56056 + C56057) * C923) +
             (C57057 + C57056) * C90555) *
                C90485 * C39127 +
            ((C58904 + C58903) * C924 -
             ((C57056 + C57057) * C90752 + (C56943 + C56942) * C923) +
             (C59009 + C59010) * C90555) *
                C90485 * C39128) *
               C90503) *
              C9074 +
          ((((C76696 + C76695) * C924 -
             ((C56030 * C4746 + C55626 * C5285 + C56029 * C1794 +
               C55625 * C2368) *
                  C90752 +
              (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
               C55625 * C2264) *
                  C923) +
             (C76807 + C76808) * C90555) *
                C90485 * C39127 +
            ((C76697 + C76698) * C924 -
             ((C76808 + C76807) * C90752 + (C76695 + C76696) * C923) +
             (C76810 + C76809) * C90555) *
                C90485 * C39128) *
               C7396 +
           (((C57961 + C57962) * C923 + (C58075 + C58076) * C90752 -
             (C65778 + C65779) * C924 - (C65917 + C65916) * C90555) *
                C90485 * C39127 +
            ((C65779 + C65778) * C923 + (C65916 + C65917) * C90752 -
             (C56030 * C17652 + C55626 * C18120 + C56029 * C3895 +
              C55625 * C4411) *
                 C924 -
             (C56030 * C17734 + C55626 * C18198 + C56029 * C3993 +
              C55625 * C4496) *
                 C90555) *
                C90485 * C39128) *
               C90503) *
              C90579)) /
        (p * q * std::sqrt(p + q));
    d2eezz[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                 C9224 +
             (C56029 * C245 + C55625 * C719 + C56030 * C1879 + C55626 * C2460) *
                 C9074 -
             (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
              C55625 * C2264) *
                 C9225 -
             (C56030 * C4831 + C55626 * C5373 + C56029 * C1879 +
              C55625 * C2460) *
                 C90579) *
                C90485 * C39127 +
            ((C73272 + C73273) * C9224 + (C73482 + C73483) * C9074 -
             (C76695 + C76696) * C9225 - (C76917 + C76918) * C90579) *
                C90485 * C39128) *
               C90752 +
           (((C76696 + C76695) * C9225 -
             ((C73483 + C73482) * C9074 + (C73273 + C73272) * C9224) +
             (C76918 + C76917) * C90579) *
                C90485 * C39127 +
            ((C76697 + C76698) * C9225 -
             ((C75304 + C75305) * C9074 + (C75096 + C75097) * C9224) +
             (C76919 + C76920) * C90579) *
                C90485 * C39128) *
               C90555) *
              C7396 +
          ((((C57961 + C57962) * C9225 -
             ((C56231 + C56230) * C9074 + (C56056 + C56057) * C9224) +
             (C58186 + C58185) * C90579) *
                C90485 * C39127 +
            ((C65779 + C65778) * C9225 -
             ((C57166 + C57167) * C9074 + (C56943 + C56942) * C9224) +
             (C66052 + C66053) * C90579) *
                C90485 * C39128) *
               C90752 +
           (((C56942 + C56943) * C9224 + (C57167 + C57166) * C9074 -
             (C65778 + C65779) * C9225 - (C66053 + C66052) * C90579) *
                C90485 * C39127 +
            ((C58904 + C58903) * C9224 + (C59113 + C59114) * C9074 -
             (C56030 * C17652 + C55626 * C18120 + C56029 * C3895 +
              C55625 * C4411) *
                 C9225 -
             (C56030 * C17812 + C55626 * C18274 + C56029 * C4079 +
              C55625 * C4577) *
                 C90579) *
                C90485 * C39128) *
               C90555) *
              C90503)) /
        (p * q * std::sqrt(p + q));
    d2eexx[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C7401 +
             (C13579 * C116 + C90485 * C125) * C7396 -
             (C13579 * C108 + C90485 * C114) * C7402 -
             (C13579 * C117 + C90485 * C126) * C90503) *
                C39127 +
            (C20284 + C20285 - C20286 - C20287) * C39128) *
               C55625 +
           ((C33654 + C33655 - C33656 - C33657) * C39127 + C81300 * C39128) *
               C55626) *
              C90782 +
          (((C33656 - (C33655 + C33654) + C33657) * C39127 + C81301 * C39128) *
               C55625 +
           ((C33660 - (C33659 + C33658) + C33661) * C39127 +
            (C33670 - (C33664 + C33665) + C33671) * C39128) *
               C55626) *
              C90777 +
          ((C36194 * C39127 + (C33665 + C33664 - C33670 - C33671) * C39128) *
               C55625 +
           ((C36191 + C36190 - C36189 - C36192) * C39127 +
            (C31052 * C7401 + C31053 * C7396 -
             (C13579 * C33649 + C90485 * C33650) * C7402 -
             (C13579 * C33651 + C90485 * C33652) * C90503) *
                C39128) *
               C55626) *
              C10691) *
         C90541) /
        (p * q * std::sqrt(p + q));
    d2eexy[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C13579 * C107 + C90485 * C113) * C181 +
              (C13579 * C182 + C90485 * C188) * C90541) *
                 C39127 +
             (C14082 * C181 + C14192 * C90541) * C39128) *
                C55625 +
            ((C27698 + C27722) * C39127 + (C73680 + C73681) * C39128) *
                C55626) *
               C7396 -
           (((C73682 + C73683) * C39128 + (C27725 + C27709) * C39127) * C55626 +
            ((C14194 * C90541 + C14084 * C181) * C39128 +
             ((C13579 * C183 + C90485 * C189) * C90541 +
              (C13579 * C108 + C90485 * C114) * C181) *
                 C39127) *
                C55625) *
               C90503) *
              C90782 +
          ((((C27709 + C27725) * C39127 + (C73683 + C73682) * C39128) * C55625 +
            ((C27706 + C27724) * C39127 + (C77117 + C77118) * C39128) *
                C55626) *
               C90503 -
           (((C77119 + C77120) * C39128 + (C27723 + C27701) * C39127) * C55626 +
            ((C73681 + C73680) * C39128 + (C27722 + C27698) * C39127) *
                C55625) *
               C7396) *
              C90777 +
          (((C30362 * C39127 + (C77120 + C77119) * C39128) * C55625 +
            ((C30369 + C30375) * C39127 + (C78908 + C78909) * C39128) *
                C55626) *
               C7396 -
           ((((C13579 * C33769 + C90485 * C33770) * C90541 +
              (C13579 * C33649 + C90485 * C33650) * C181) *
                 C39128 +
             (C30374 + C30364) * C39127) *
                C55626 +
            ((C77118 + C77117) * C39128 + C30363 * C39127) * C55625) *
               C90503) *
              C10691)) /
        (p * q * std::sqrt(p + q));
    d2eexz[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C10840 +
             (C13579 * C245 + C90485 * C251) * C90782 - C27600 * C10841 -
             C27814 * C90777 + C27606 * C10842 + C27815 * C10691) *
                C39127 +
            (C25912 + C25913 - C25914 - C25915 + C25916 + C25917) * C39128) *
               C55625 +
           ((C27600 * C10840 + C27814 * C90782 - C27606 * C10841 -
             C27815 * C90777 + C30275 * C10842 + C30458 * C10691) *
                C39127 +
            (C16859 * C10840 + C17049 * C90782 - C18362 * C10841 -
             C18542 * C90777 + C31052 * C10842 + C31230 * C10691) *
                C39128) *
               C55626) *
              C90541 * C7396 +
          (((C27602 * C10841 -
             ((C13579 * C246 + C90485 * C252) * C90782 +
              (C13579 * C108 + C90485 * C114) * C10840) +
             C27816 * C90777 - C27608 * C10842 - C27817 * C10691) *
                C39127 +
            (C21021 * C10841 - (C14292 * C90782 + C14084 * C10840) +
             C21245 * C90777 - C33668 * C10842 - C33893 * C10691) *
                C39128) *
               C55625 +
           ((C27608 * C10841 - (C27816 * C90782 + C27602 * C10840) +
             C27817 * C90777 - C30273 * C10842 - C30459 * C10691) *
                C39127 +
            (C33668 * C10841 - (C21245 * C90782 + C21021 * C10840) +
             C33893 * C90777 - (C13579 * C33649 + C90485 * C33650) * C10842 -
             (C13579 * C33888 + C90485 * C33889) * C10691) *
                C39128) *
               C55626) *
              C90541 * C90503)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C7401 +
            (C39329 * C116 + C39127 * C314 + C39330 * C839 + C39128 * C1098) *
                C7396 -
            (C39356 + C39357) * C7402 - (C39358 + C39359) * C90503) *
               C55625 +
           ((C73890 + C73891) * C7401 + (C73892 + C73893) * C7396 -
            (C41168 + C41167) * C7402 - (C41170 + C41169) * C90503) *
               C55626) *
              C90485 * C90782 +
          (((C41167 + C41168) * C7402 -
            ((C73893 + C73892) * C7396 + (C73891 + C73890) * C7401) +
            (C41169 + C41170) * C90503) *
               C55625 +
           ((C44621 + C44620) * C7402 -
            ((C77325 + C77326) * C7396 + (C77327 + C77328) * C7401) +
            (C44623 + C44622) * C90503) *
               C55626) *
              C90485 * C90777 +
          (((C77328 + C77327) * C7401 + (C77326 + C77325) * C7396 -
            (C44620 + C44621) * C7402 - (C44622 + C44623) * C90503) *
               C55625 +
           ((C79050 + C79051) * C7401 + (C79052 + C79053) * C7396 -
            (C39330 * C33649 + C39128 * C33991 + C39329 * C6164 +
             C39127 * C6342) *
                C7402 -
            (C39330 * C33651 + C39128 * C33992 + C39329 * C6167 +
             C39127 * C6345) *
                C90503) *
               C55626) *
              C90485 * C10691) *
         C90541) /
        (p * q * std::sqrt(p + q));
    d2eeyy[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                 C181 +
             (C39329 * C182 + C39127 * C394 + C39330 * C927 + C39128 * C1195) *
                 C90541) *
                C55625 +
            ((C73890 + C73891) * C181 + (C73996 + C73997) * C90541) * C55626) *
               C90485 * C7396 -
           (((C41282 + C41281) * C90541 + (C41168 + C41167) * C181) * C55626 +
            ((C39447 + C39446) * C90541 + (C39356 + C39357) * C181) * C55625) *
               C90485 * C90503) *
              C90782 +
          ((((C41167 + C41168) * C181 + (C41281 + C41282) * C90541) * C55625 +
            ((C44621 + C44620) * C181 + (C44726 + C44727) * C90541) * C55626) *
               C90485 * C90503 -
           (((C77431 + C77432) * C90541 + (C77327 + C77328) * C181) * C55626 +
            ((C73997 + C73996) * C90541 + (C73891 + C73890) * C181) * C55625) *
               C90485 * C7396) *
              C90777 +
          ((((C77328 + C77327) * C181 + (C77432 + C77431) * C90541) * C55625 +
            ((C79050 + C79051) * C181 + (C79124 + C79125) * C90541) * C55626) *
               C90485 * C7396 -
           (((C39330 * C33769 + C39128 * C34113 + C39329 * C6226 +
              C39127 * C6398) *
                 C90541 +
             (C39330 * C33649 + C39128 * C33991 + C39329 * C6164 +
              C39127 * C6342) *
                 C181) *
                C55626 +
            ((C44727 + C44726) * C90541 + (C44620 + C44621) * C181) * C55625) *
               C90485 * C90503) *
              C10691)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C10840 +
            (C39329 * C245 + C39127 * C474 + C39330 * C1011 + C39128 * C1301) *
                C90782 -
            (C73891 + C73890) * C10841 - (C74100 + C74101) * C90777 +
            (C77328 + C77327) * C10842 + (C77535 + C77536) * C10691) *
               C55625 +
           ((C73890 + C73891) * C10840 + (C74101 + C74100) * C90782 -
            (C77327 + C77328) * C10841 - (C77536 + C77535) * C90777 +
            (C79050 + C79051) * C10842 + (C79197 + C79196) * C10691) *
               C55626) *
              C90485 * C90541 * C7396 +
          (((C41167 + C41168) * C10841 -
            ((C39531 + C39530) * C90782 + (C39356 + C39357) * C10840) +
            (C41392 + C41391) * C90777 - (C44620 + C44621) * C10842 -
            (C44831 + C44830) * C10691) *
               C55625 +
           ((C44621 + C44620) * C10841 -
            ((C41391 + C41392) * C90782 + (C41168 + C41167) * C10840) +
            (C44830 + C44831) * C90777 -
            (C39330 * C33649 + C39128 * C33991 + C39329 * C6164 +
             C39127 * C6342) *
                C10842 -
            (C39330 * C33888 + C39128 * C34227 + C39329 * C6286 +
             C39127 * C6451) *
                C10691) *
               C55626) *
              C90485 * C90541 * C90503)) /
        (p * q * std::sqrt(p + q));
    d2eezx[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C7401 +
            (C56029 * C116 + C55625 * C561 + C56030 * C1707 + C55626 * C2268) *
                C7396 -
            (C56056 + C56057) * C7402 - (C56058 + C56059) * C90503) *
               C90485 * C39127 +
           ((C73272 + C73273) * C7401 + (C73274 + C73275) * C7396 -
            (C56943 + C56942) * C7402 - (C56945 + C56944) * C90503) *
               C90485 * C39128) *
              C90782 +
          (((C57961 + C57962) * C7402 -
            ((C56030 * C4663 + C55626 * C5195 + C56029 * C1707 +
              C55625 * C2268) *
                 C7396 +
             (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
              C55625 * C2264) *
                 C7401) +
            (C57963 + C57964) * C90503) *
               C90485 * C39127 +
           ((C65779 + C65778) * C7402 -
            ((C76693 + C76694) * C7396 + (C76695 + C76696) * C7401) +
            (C65781 + C65780) * C90503) *
               C90485 * C39128) *
              C90777 +
          (((C56029 * C4656 + C55625 * C5191 + C56030 * C6165 +
             C55626 * C6505) *
                C7401 +
            (C56029 * C4663 + C55625 * C5195 + C56030 * C6168 +
             C55626 * C6508) *
                C7396 -
            (C61354 + C61355) * C7402 - (C61356 + C61357) * C90503) *
               C90485 * C39127 +
           ((C78564 + C78565) * C7401 + (C78566 + C78567) * C7396 -
            (C56030 * C33649 + C55626 * C34329 + C56029 * C5470 +
             C55625 * C5950) *
                C7402 -
            (C56030 * C33651 + C55626 * C34330 + C56029 * C5473 +
             C55625 * C5953) *
                C90503) *
               C90485 * C39128) *
              C10691) *
         C90541) /
        (p * q * std::sqrt(p + q));
    d2eezy[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                 C181 +
             (C56029 * C182 + C55625 * C641 + C56030 * C1794 + C55626 * C2368) *
                 C90541) *
                C90485 * C39127 +
            ((C73272 + C73273) * C181 + (C73379 + C73378) * C90541) * C90485 *
                C39128) *
               C7396 -
           (((C57056 + C57057) * C90541 + (C56943 + C56942) * C181) * C90485 *
                C39128 +
            ((C56147 + C56146) * C90541 + (C56056 + C56057) * C181) * C90485 *
                C39127) *
               C90503) *
              C90782 +
          ((((C57961 + C57962) * C181 + (C58075 + C58076) * C90541) * C90485 *
                C39127 +
            ((C65779 + C65778) * C181 + (C65916 + C65917) * C90541) * C90485 *
                C39128) *
               C90503 -
           (((C76808 + C76807) * C90541 + (C76695 + C76696) * C181) * C90485 *
                C39128 +
            ((C56030 * C4746 + C55626 * C5285 + C56029 * C1794 +
              C55625 * C2368) *
                 C90541 +
             (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
              C55625 * C2264) *
                 C181) *
                C90485 * C39127) *
               C7396) *
              C90777 +
          ((((C56029 * C4656 + C55625 * C5191 + C56030 * C6165 +
              C55626 * C6505) *
                 C181 +
             (C56029 * C4746 + C55625 * C5285 + C56030 * C6227 +
              C55626 * C6561) *
                 C90541) *
                C90485 * C39127 +
            ((C78564 + C78565) * C181 + (C78671 + C78670) * C90541) * C90485 *
                C39128) *
               C7396 -
           (((C56030 * C33769 + C55626 * C34429 + C56029 * C5556 +
              C55625 * C6030) *
                 C90541 +
             (C56030 * C33649 + C55626 * C34329 + C56029 * C5470 +
              C55625 * C5950) *
                 C181) *
                C90485 * C39128 +
            ((C61461 + C61460) * C90541 + (C61354 + C61355) * C181) * C90485 *
                C39127) *
               C90503) *
              C10691)) /
        (p * q * std::sqrt(p + q));
    d2eezz[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C10840 +
            (C56029 * C245 + C55625 * C719 + C56030 * C1879 + C55626 * C2460) *
                C90782 -
            (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
             C55625 * C2264) *
                C10841 -
            (C56030 * C4831 + C55626 * C5373 + C56029 * C1879 +
             C55625 * C2460) *
                C90777 +
            (C56029 * C4656 + C55625 * C5191 + C56030 * C6165 +
             C55626 * C6505) *
                C10842 +
            (C56029 * C4831 + C55625 * C5373 + C56030 * C6287 +
             C55626 * C6612) *
                C10691) *
               C90485 * C39127 +
           ((C73272 + C73273) * C10840 + (C73482 + C73483) * C90782 -
            (C76695 + C76696) * C10841 - (C76917 + C76918) * C90777 +
            (C78564 + C78565) * C10842 + (C78774 + C78775) * C10691) *
               C90485 * C39128) *
              C90541 * C7396 +
          (((C57961 + C57962) * C10841 -
            ((C56231 + C56230) * C90782 + (C56056 + C56057) * C10840) +
            (C58186 + C58185) * C90777 - (C61354 + C61355) * C10842 -
            (C61565 + C61564) * C10691) *
               C90485 * C39127 +
           ((C65779 + C65778) * C10841 -
            ((C57166 + C57167) * C90782 + (C56943 + C56942) * C10840) +
            (C66052 + C66053) * C90777 -
            (C56030 * C33649 + C55626 * C34329 + C56029 * C5470 +
             C55625 * C5950) *
                C10842 -
            (C56030 * C33888 + C55626 * C34528 + C56029 * C5636 +
             C55625 * C6107) *
                C10691) *
               C90485 * C39128) *
              C90541 * C90503)) /
        (p * q * std::sqrt(p + q));
    d2eexx[27] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C103 +
            (C13579 * C116 + C90485 * C125) * C92 -
            (C13579 * C108 + C90485 * C114) * C104 -
            (C13579 * C117 + C90485 * C126) * C93 +
            (C13579 * C109 + C90485 * C115) * C105 +
            (C13579 * C118 + C90485 * C127) * C94 -
            (C13579 * C110 + C90485 * C119) * C106 -
            (C13579 * C120 + C90485 * C128) * C95) *
               C39127 +
           (C14082 * C103 + C14083 * C92 - C14084 * C104 - C14085 * C93 +
            C14086 * C105 + C14087 * C94 -
            (C13579 * C831 + C90485 * C836) * C106 -
            (C13579 * C841 + C90485 * C847) * C95) *
               C39128) *
              C55625 +
          ((C27600 * C103 + C27601 * C92 - C27602 * C104 - C27603 * C93 +
            C27604 * C105 + C27605 * C94 -
            (C13579 * C1699 + C90485 * C1704) * C106 -
            (C13579 * C1709 + C90485 * C1715) * C95) *
               C39127 +
           (C16859 * C103 + C16858 * C92 - C21021 * C104 - C21022 * C93 +
            (C13579 * C3893 + C90485 * C3899) * C105 +
            (C13579 * C3902 + C90485 * C3911) * C94 -
            (C13579 * C8120 + C90485 * C8121) * C106 -
            (C13579 * C8122 + C90485 * C8123) * C95) *
               C39128) *
              C55626) *
         C90567 * C90541) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C88316 +
             (C13579 * C116 + C90485 * C125) * C90744 -
             (C13579 * C108 + C90485 * C114) * C88309 -
             (C13579 * C117 + C90485 * C126) * C90503) *
                C39127 +
            (C15534 + C15535 - C15536 - C15537) * C39128) *
               C55625 +
           ((C30256 + C30257 - C30258 - C30259) * C39127 +
            (C24211 + C24210 - C24209 - C24212) * C39128) *
               C55626) *
              C90567 * C2565 +
          (((C15536 - (C15535 + C15534) + C15537) * C39127 +
            (C15540 - (C15539 + C15538) + C15541) * C39128) *
               C55625 +
           ((C24209 - (C24210 + C24211) + C24212) * C39127 +
            (C24213 - (C24214 + C24215) + C24216) * C39128) *
               C55626) *
              C90567 * C2566 +
          ((C15560 * C39127 + (C15558 + C15557 - C15556 - C15559) * C39128) *
               C55625 +
           ((C24215 + C24214 - C24213 - C24216) * C39127 +
            (C16860 * C88316 + C16861 * C90744 -
             (C13579 * C21004 + C90485 * C21005) * C88309 -
             (C13579 * C21006 + C90485 * C21007) * C90503) *
                C39128) *
               C55626) *
              C90567 * C2567)) /
            (p * q * std::sqrt(p + q));
    d2eexy[27] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C181 +
             (C13579 * C182 + C90485 * C188) * C90541) *
                C39127 +
            (C14082 * C181 + C14192 * C90541) * C39128) *
               C55625 +
           ((C27698 + C27722) * C39127 +
            (C16859 * C181 + C16953 * C90541) * C39128) *
               C55626) *
              C92 -
          (((C21133 * C90541 + C21021 * C181) * C39128 +
            (C27725 + C27709) * C39127) *
               C55626 +
           ((C14194 * C90541 + C14084 * C181) * C39128 +
            ((C13579 * C183 + C90485 * C189) * C90541 +
             (C13579 * C108 + C90485 * C114) * C181) *
                C39127) *
               C55625) *
              C93 +
          ((((C13579 * C109 + C90485 * C115) * C181 +
             (C13579 * C184 + C90485 * C190) * C90541) *
                C39127 +
            (C14086 * C181 + C14196 * C90541) * C39128) *
               C55625 +
           ((C27710 + C27726) * C39127 +
            ((C13579 * C3893 + C90485 * C3899) * C181 +
             (C13579 * C3991 + C90485 * C3997) * C90541) *
                C39128) *
               C55626) *
              C94 -
          ((((C13579 * C8222 + C90485 * C8223) * C90541 +
             (C13579 * C8120 + C90485 * C8121) * C181) *
                C39128 +
            ((C13579 * C1793 + C90485 * C1798) * C90541 +
             (C13579 * C1699 + C90485 * C1704) * C181) *
                C39127) *
               C55626 +
           (((C13579 * C928 + C90485 * C933) * C90541 +
             (C13579 * C831 + C90485 * C836) * C181) *
                C39128 +
            ((C13579 * C185 + C90485 * C191) * C90541 +
             (C13579 * C110 + C90485 * C119) * C181) *
                C39127) *
               C55625) *
              C95) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C2660 +
             (C13579 * C182 + C90485 * C188) * C2565 - C14082 * C2661 -
             C14192 * C2566 + C14088 * C2662 + C14193 * C2567) *
                C39127 +
            (C14082 * C2660 + C14192 * C2565 - C14088 * C2661 - C14193 * C2566 +
             C15553 * C2662 + C15643 * C2567) *
                C39128) *
               C55625 +
           ((C29572 + C29573 - C29574 - C29575 + C29576 + C29577) * C39127 +
            (C16859 * C2660 + C16953 * C2565 - C16857 * C2661 - C16954 * C2566 +
             C16860 * C2662 + C16955 * C2567) *
                C39128) *
               C55626) *
              C90744 +
          (((C14084 * C2661 -
             ((C13579 * C183 + C90485 * C189) * C2565 +
              (C13579 * C108 + C90485 * C114) * C2660) +
             C14194 * C2566 - C14090 * C2662 - C14195 * C2567) *
                C39127 +
            (C14090 * C2661 - (C14194 * C2565 + C14084 * C2660) +
             C14195 * C2566 - C15551 * C2662 - C15644 * C2567) *
                C39128) *
               C55625 +
           ((C21021 * C2661 - (C27719 * C2565 + C27602 * C2660) +
             C21133 * C2566 - C21023 * C2662 - C21134 * C2567) *
                C39127 +
            (C21023 * C2661 - (C21133 * C2565 + C21021 * C2660) +
             C21134 * C2566 - (C13579 * C21004 + C90485 * C21005) * C2662 -
             (C13579 * C21126 + C90485 * C21127) * C2567) *
                C39128) *
               C55626) *
              C90503) *
         C90567) /
            (p * q * std::sqrt(p + q));
    d2eexz[27] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C244 +
             (C13579 * C245 + C90485 * C251) * C90567) *
                C39127 +
            (C14272 + C14296) * C39128) *
               C55625 +
           ((C27600 * C244 + C27814 * C90567) * C39127 +
            (C16859 * C244 + C17049 * C90567) * C39128) *
               C55626) *
              C90541 * C92 -
          (((C21245 * C90567 + C21021 * C244) * C39128 +
            (C27816 * C90567 + C27602 * C244) * C39127) *
               C55626 +
           ((C14298 + C14278) * C39128 +
            ((C13579 * C246 + C90485 * C252) * C90567 +
             (C13579 * C108 + C90485 * C114) * C244) *
                C39127) *
               C55625) *
              C90541 * C93 +
          ((((C13579 * C109 + C90485 * C115) * C244 +
             (C13579 * C247 + C90485 * C253) * C90567) *
                C39127 +
            (C14284 + C14300) * C39128) *
               C55625 +
           ((C27604 * C244 + C27818 * C90567) * C39127 +
            ((C13579 * C3893 + C90485 * C3899) * C244 +
             (C13579 * C4077 + C90485 * C4083) * C90567) *
                C39128) *
               C55626) *
              C90541 * C94 -
          ((((C13579 * C8322 + C90485 * C8323) * C90567 +
             (C13579 * C8120 + C90485 * C8121) * C244) *
                C39128 +
            ((C13579 * C1880 + C90485 * C1885) * C90567 +
             (C13579 * C1699 + C90485 * C1704) * C244) *
                C39127) *
               C55626 +
           (((C13579 * C1012 + C90485 * C1017) * C90567 +
             (C13579 * C831 + C90485 * C836) * C244) *
                C39128 +
            ((C13579 * C248 + C90485 * C254) * C90567 +
             (C13579 * C110 + C90485 * C119) * C244) *
                C39127) *
               C55625) *
              C90541 * C95)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C13579 * C107 + C90485 * C113) * C244 +
              (C13579 * C245 + C90485 * C251) * C90567) *
                 C39127 +
             (C14272 + C14296) * C39128) *
                C55625 +
            ((C27600 * C244 + C27814 * C90567) * C39127 +
             (C72863 + C72864) * C39128) *
                C55626) *
               C2565 -
           (((C74690 + C74691) * C39128 + (C72864 + C72863) * C39127) * C55626 +
            ((C14297 + C14275) * C39128 + (C14296 + C14272) * C39127) *
                C55625) *
               C2566 +
           ((C15723 * C39127 + (C15726 + C15733) * C39128) * C55625 +
            ((C74691 + C74690) * C39127 +
             (C16860 * C244 + C17052 * C90567) * C39128) *
                C55626) *
               C2567) *
              C90744 +
          ((((C14278 + C14298) * C39127 + (C14281 + C14299) * C39128) * C55625 +
            ((C72865 + C72866) * C39127 + (C74692 + C74693) * C39128) *
                C55626) *
               C2566 -
           (((C72866 + C72865) * C39128 +
             (C27816 * C90567 + C27602 * C244) * C39127) *
                C55626 +
            ((C14298 + C14278) * C39128 +
             ((C13579 * C246 + C90485 * C252) * C90567 +
              (C13579 * C108 + C90485 * C114) * C244) *
                 C39127) *
                C55625) *
               C2565 -
           ((((C13579 * C21232 + C90485 * C21233) * C90567 +
              (C13579 * C21004 + C90485 * C21005) * C244) *
                 C39128 +
             (C74693 + C74692) * C39127) *
                C55626 +
            ((C15734 + C15727) * C39128 + C15730 * C39127) * C55625) *
               C2567) *
              C90503)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[27] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
               C103 +
           (C39329 * C116 + C39127 * C314 + C39330 * C839 + C39128 * C1098) *
               C92 -
           (C39356 + C39357) * C104 - (C39358 + C39359) * C93 +
           (C39360 + C39361) * C105 + (C39362 + C39363) * C94 -
           (C39364 + C39365) * C106 - (C39366 + C39367) * C95) *
              C55625 +
          ((C39329 * C1700 + C39127 * C1962 + C39330 * C3891 + C39128 * C4161) *
               C103 +
           (C39329 * C1707 + C39127 * C1966 + C39330 * C3900 + C39128 * C4167) *
               C92 -
           (C41168 + C41167) * C104 - (C41170 + C41169) * C93 +
           (C41172 + C41171) * C105 + (C41174 + C41173) * C94 -
           (C39330 * C8120 + C39128 * C8422 + C39329 * C1699 + C39127 * C1964) *
               C106 -
           (C39330 * C8122 + C39128 * C8423 + C39329 * C1709 + C39127 * C1969) *
               C95) *
              C55626) *
         C90485 * C90567 * C90541) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C88316 +
            (C39329 * C116 + C39127 * C314 + C39330 * C839 + C39128 * C1098) *
                C90744 -
            (C39356 + C39357) * C88309 - (C39358 + C39359) * C90503) *
               C55625 +
           ((C73890 + C73891) * C88316 + (C73892 + C73893) * C90744 -
            (C41168 + C41167) * C88309 - (C41170 + C41169) * C90503) *
               C55626) *
              C90485 * C90567 * C2565 +
          (((C40220 + C40221) * C88309 -
            ((C39330 * C2577 + C39128 * C2831 + C39329 * C839 +
              C39127 * C1098) *
                 C90744 +
             (C39330 * C2570 + C39128 * C2827 + C39329 * C832 +
              C39127 * C1094) *
                 C88316) +
            (C40222 + C40223) * C90503) *
               C55625 +
           ((C48993 + C48992) * C88309 -
            ((C39330 * C3905 + C39128 * C4172 + C39329 * C3900 +
              C39127 * C4167) *
                 C90744 +
             (C39330 * C3896 + C39128 * C4166 + C39329 * C3891 +
              C39127 * C4161) *
                 C88316) +
            (C48995 + C48994) * C90503) *
               C55626) *
              C90485 * C90567 * C2566 +
          (((C39329 * C2570 + C39127 * C2827 + C39330 * C3367 +
             C39128 * C3545) *
                C88316 +
            (C39329 * C2577 + C39127 * C2831 + C39330 * C3370 +
             C39128 * C3548) *
                C90744 -
            (C42141 + C42142) * C88309 - (C42143 + C42144) * C90503) *
               C55625 +
           ((C39329 * C3896 + C39127 * C4166 + C39330 * C16835 +
             C39128 * C17131) *
                C88316 +
            (C39329 * C3905 + C39127 * C4172 + C39330 * C16838 +
             C39128 * C17133) *
                C90744 -
            (C39330 * C21004 + C39128 * C21346 + C39329 * C3895 +
             C39127 * C4165) *
                C88309 -
            (C39330 * C21006 + C39128 * C21347 + C39329 * C3904 +
             C39127 * C4171) *
                C90503) *
               C55626) *
              C90485 * C90567 * C2567)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[27] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C181 +
            (C39329 * C182 + C39127 * C394 + C39330 * C927 + C39128 * C1195) *
                C90541) *
               C55625 +
           ((C39329 * C1700 + C39127 * C1962 + C39330 * C3891 +
             C39128 * C4161) *
                C181 +
            (C39329 * C1794 + C39127 * C2066 + C39330 * C3989 +
             C39128 * C4247) *
                C90541) *
               C55626) *
              C90485 * C92 -
          (((C41282 + C41281) * C90541 + (C41168 + C41167) * C181) * C55626 +
           ((C39447 + C39446) * C90541 + (C39356 + C39357) * C181) * C55625) *
              C90485 * C93 +
          (((C39360 + C39361) * C181 + (C39449 + C39448) * C90541) * C55625 +
           ((C41172 + C41171) * C181 + (C41283 + C41284) * C90541) * C55626) *
              C90485 * C94 -
          (((C39330 * C8222 + C39128 * C8534 + C39329 * C1793 +
             C39127 * C2065) *
                C90541 +
            (C39330 * C8120 + C39128 * C8422 + C39329 * C1699 +
             C39127 * C1964) *
                C181) *
               C55626 +
           ((C39451 + C39450) * C90541 + (C39364 + C39365) * C181) * C55625) *
              C90485 * C95) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C2660 +
            (C39329 * C182 + C39127 * C394 + C39330 * C927 + C39128 * C1195) *
                C2565 -
            (C39330 * C2570 + C39128 * C2827 + C39329 * C832 + C39127 * C1094) *
                C2661 -
            (C39330 * C2663 + C39128 * C2921 + C39329 * C927 + C39127 * C1195) *
                C2566 +
            (C39329 * C2570 + C39127 * C2827 + C39330 * C3367 +
             C39128 * C3545) *
                C2662 +
            (C39329 * C2663 + C39127 * C2921 + C39330 * C3433 +
             C39128 * C3599) *
                C2567) *
               C55625 +
           ((C73890 + C73891) * C2660 + (C73996 + C73997) * C2565 -
            (C39330 * C3896 + C39128 * C4166 + C39329 * C3891 +
             C39127 * C4161) *
                C2661 -
            (C39330 * C3994 + C39128 * C4248 + C39329 * C3989 +
             C39127 * C4247) *
                C2566 +
            (C39329 * C3896 + C39127 * C4166 + C39330 * C16835 +
             C39128 * C17131) *
                C2662 +
            (C39329 * C3994 + C39127 * C4248 + C39330 * C16942 +
             C39128 * C17209) *
                C2567) *
               C55626) *
              C90485 * C90744 +
          (((C40220 + C40221) * C2661 -
            ((C39447 + C39446) * C2565 + (C39356 + C39357) * C2660) +
            (C40335 + C40334) * C2566 - (C42141 + C42142) * C2662 -
            (C42248 + C42247) * C2567) *
               C55625 +
           ((C48993 + C48992) * C2661 -
            ((C41282 + C41281) * C2565 + (C41168 + C41167) * C2660) +
            (C49130 + C49131) * C2566 -
            (C39330 * C21004 + C39128 * C21346 + C39329 * C3895 +
             C39127 * C4165) *
                C2662 -
            (C39330 * C21126 + C39128 * C21446 + C39329 * C3993 +
             C39127 * C4250) *
                C2567) *
               C55626) *
              C90485 * C90503) *
         C90567) /
            (p * q * std::sqrt(p + q));
    d2eeyz[27] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C244 +
            (C39329 * C245 + C39127 * C474 + C39330 * C1011 + C39128 * C1301) *
                C90567) *
               C55625 +
           ((C39329 * C1700 + C39127 * C1962 + C39330 * C3891 +
             C39128 * C4161) *
                C244 +
            (C39329 * C1879 + C39127 * C2159 + C39330 * C4075 +
             C39128 * C4327) *
                C90567) *
               C55626) *
              C90485 * C90541 * C92 -
          (((C41391 + C41392) * C90567 + (C41168 + C41167) * C244) * C55626 +
           ((C39531 + C39530) * C90567 + (C39356 + C39357) * C244) * C55625) *
              C90485 * C90541 * C93 +
          (((C39360 + C39361) * C244 + (C39533 + C39532) * C90567) * C55625 +
           ((C41172 + C41171) * C244 + (C41393 + C41394) * C90567) * C55626) *
              C90485 * C90541 * C94 -
          (((C39330 * C8322 + C39128 * C8647 + C39329 * C1880 +
             C39127 * C2162) *
                C90567 +
            (C39330 * C8120 + C39128 * C8422 + C39329 * C1699 +
             C39127 * C1964) *
                C244) *
               C55626 +
           ((C39535 + C39534) * C90567 + (C39364 + C39365) * C244) * C55625) *
              C90485 * C90541 * C95)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                 C244 +
             (C39329 * C245 + C39127 * C474 + C39330 * C1011 + C39128 * C1301) *
                 C90567) *
                C55625 +
            ((C73890 + C73891) * C244 + (C74101 + C74100) * C90567) * C55626) *
               C90485 * C2565 -
           (((C39330 * C4080 + C39128 * C4330 + C39329 * C4075 +
              C39127 * C4327) *
                 C90567 +
             (C39330 * C3896 + C39128 * C4166 + C39329 * C3891 +
              C39127 * C4161) *
                 C244) *
                C55626 +
            ((C39330 * C2745 + C39128 * C3017 + C39329 * C1011 +
              C39127 * C1301) *
                 C90567 +
             (C39330 * C2570 + C39128 * C2827 + C39329 * C832 +
              C39127 * C1094) *
                 C244) *
                C55625) *
               C90485 * C2566 +
           (((C39329 * C2570 + C39127 * C2827 + C39330 * C3367 +
              C39128 * C3545) *
                 C244 +
             (C39329 * C2745 + C39127 * C3017 + C39330 * C3489 +
              C39128 * C3654) *
                 C90567) *
                C55625 +
            ((C39329 * C3896 + C39127 * C4166 + C39330 * C16835 +
              C39128 * C17131) *
                 C244 +
             (C39329 * C4080 + C39127 * C4330 + C39330 * C17029 +
              C39128 * C17285) *
                 C90567) *
                C55626) *
               C90485 * C2567) *
              C90744 +
          ((((C40220 + C40221) * C244 + (C40445 + C40444) * C90567) * C55625 +
            ((C48993 + C48992) * C244 + (C49266 + C49267) * C90567) * C55626) *
               C90485 * C2566 -
           (((C41391 + C41392) * C90567 + (C41168 + C41167) * C244) * C55626 +
            ((C39531 + C39530) * C90567 + (C39356 + C39357) * C244) * C55625) *
               C90485 * C2565 -
           (((C39330 * C21232 + C39128 * C21545 + C39329 * C4079 +
              C39127 * C4331) *
                 C90567 +
             (C39330 * C21004 + C39128 * C21346 + C39329 * C3895 +
              C39127 * C4165) *
                 C244) *
                C55626 +
            ((C42352 + C42351) * C90567 + (C42141 + C42142) * C244) * C55625) *
               C90485 * C2567) *
              C90503)) /
            (p * q * std::sqrt(p + q));
    d2eezx[27] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
               C103 +
           (C56029 * C116 + C55625 * C561 + C56030 * C1707 + C55626 * C2268) *
               C92 -
           (C56056 + C56057) * C104 - (C56058 + C56059) * C93 +
           (C56060 + C56061) * C105 + (C56062 + C56063) * C94 -
           (C56064 + C56065) * C106 - (C56066 + C56067) * C95) *
              C90485 * C39127 +
          ((C56029 * C832 + C55625 * C1396 + C56030 * C3891 + C55626 * C4407) *
               C103 +
           (C56029 * C839 + C55625 * C1400 + C56030 * C3900 + C55626 * C4413) *
               C92 -
           (C56943 + C56942) * C104 - (C56945 + C56944) * C93 +
           (C56947 + C56946) * C105 + (C56949 + C56948) * C94 -
           (C56030 * C8120 + C55626 * C8760 + C56029 * C831 + C55625 * C1398) *
               C106 -
           (C56030 * C8122 + C55626 * C8761 + C56029 * C841 + C55625 * C1403) *
               C95) *
              C90485 * C39128) *
         C90567 * C90541) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C88316 +
            (C56029 * C116 + C55625 * C561 + C56030 * C1707 + C55626 * C2268) *
                C90744 -
            (C56056 + C56057) * C88309 - (C56058 + C56059) * C90503) *
               C90485 * C39127 +
           ((C73272 + C73273) * C88316 + (C73274 + C73275) * C90744 -
            (C56943 + C56942) * C88309 - (C56945 + C56944) * C90503) *
               C90485 * C39128) *
              C90567 * C2565 +
          (((C56942 + C56943) * C88309 -
            ((C73275 + C73274) * C90744 + (C73273 + C73272) * C88316) +
            (C56944 + C56945) * C90503) *
               C90485 * C39127 +
           ((C58904 + C58903) * C88309 -
            ((C75094 + C75095) * C90744 + (C75096 + C75097) * C88316) +
            (C58906 + C58905) * C90503) *
               C90485 * C39128) *
              C90567 * C2566 +
          (((C75097 + C75096) * C88316 + (C75095 + C75094) * C90744 -
            (C58903 + C58904) * C88309 - (C58905 + C58906) * C90503) *
               C90485 * C39127 +
           ((C56029 * C3367 + C55625 * C3707 + C56030 * C16835 +
             C55626 * C17361) *
                C88316 +
            (C56029 * C3370 + C55625 * C3710 + C56030 * C16838 +
             C55626 * C17363) *
                C90744 -
            (C56030 * C21004 + C55626 * C21644 + C56029 * C3366 +
             C55625 * C3706) *
                C88309 -
            (C56030 * C21006 + C55626 * C21645 + C56029 * C3369 +
             C55625 * C3709) *
                C90503) *
               C90485 * C39128) *
              C90567 * C2567)) /
            (p * q * std::sqrt(p + q));
    d2eezy[27] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C181 +
            (C56029 * C182 + C55625 * C641 + C56030 * C1794 + C55626 * C2368) *
                C90541) *
               C90485 * C39127 +
           ((C56029 * C832 + C55625 * C1396 + C56030 * C3891 + C55626 * C4407) *
                C181 +
            (C56029 * C927 + C55625 * C1497 + C56030 * C3989 + C55626 * C4493) *
                C90541) *
               C90485 * C39128) *
              C92 -
          (((C57056 + C57057) * C90541 + (C56943 + C56942) * C181) * C90485 *
               C39128 +
           ((C56147 + C56146) * C90541 + (C56056 + C56057) * C181) * C90485 *
               C39127) *
              C93 +
          (((C56060 + C56061) * C181 + (C56149 + C56148) * C90541) * C90485 *
               C39127 +
           ((C56947 + C56946) * C181 + (C57058 + C57059) * C90541) * C90485 *
               C39128) *
              C94 -
          (((C56030 * C8222 + C55626 * C8872 + C56029 * C928 + C55625 * C1500) *
                C90541 +
            (C56030 * C8120 + C55626 * C8760 + C56029 * C831 + C55625 * C1398) *
                C181) *
               C90485 * C39128 +
           ((C56151 + C56150) * C90541 + (C56064 + C56065) * C181) * C90485 *
               C39127) *
              C95) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C2660 +
            (C56029 * C182 + C55625 * C641 + C56030 * C1794 + C55626 * C2368) *
                C2565 -
            (C73273 + C73272) * C2661 - (C73378 + C73379) * C2566 +
            (C75097 + C75096) * C2662 + (C75200 + C75201) * C2567) *
               C90485 * C39127 +
           ((C73272 + C73273) * C2660 + (C73379 + C73378) * C2565 -
            (C75096 + C75097) * C2661 - (C75201 + C75200) * C2566 +
            (C56029 * C3367 + C55625 * C3707 + C56030 * C16835 +
             C55626 * C17361) *
                C2662 +
            (C56029 * C3433 + C55625 * C3761 + C56030 * C16942 +
             C55626 * C17465) *
                C2567) *
               C90485 * C39128) *
              C90744 +
          (((C56942 + C56943) * C2661 -
            ((C56147 + C56146) * C2565 + (C56056 + C56057) * C2660) +
            (C57057 + C57056) * C2566 - (C58903 + C58904) * C2662 -
            (C59010 + C59009) * C2567) *
               C90485 * C39127 +
           ((C58904 + C58903) * C2661 -
            ((C57056 + C57057) * C2565 + (C56943 + C56942) * C2660) +
            (C59009 + C59010) * C2566 -
            (C56030 * C21004 + C55626 * C21644 + C56029 * C3366 +
             C55625 * C3706) *
                C2662 -
            (C56030 * C21126 + C55626 * C21758 + C56029 * C3432 +
             C55625 * C3762) *
                C2567) *
               C90485 * C39128) *
              C90503) *
         C90567) /
            (p * q * std::sqrt(p + q));
    d2eezz[27] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C244 +
            (C56029 * C245 + C55625 * C719 + C56030 * C1879 + C55626 * C2460) *
                C90567) *
               C90485 * C39127 +
           ((C56029 * C832 + C55625 * C1396 + C56030 * C3891 + C55626 * C4407) *
                C244 +
            (C56029 * C1011 + C55625 * C1602 + C56030 * C4075 +
             C55626 * C4573) *
                C90567) *
               C90485 * C39128) *
              C90541 * C92 -
          (((C57166 + C57167) * C90567 + (C56943 + C56942) * C244) * C90485 *
               C39128 +
           ((C56231 + C56230) * C90567 + (C56056 + C56057) * C244) * C90485 *
               C39127) *
              C90541 * C93 +
          (((C56060 + C56061) * C244 + (C56233 + C56232) * C90567) * C90485 *
               C39127 +
           ((C56947 + C56946) * C244 + (C57168 + C57169) * C90567) * C90485 *
               C39128) *
              C90541 * C94 -
          (((C56030 * C8322 + C55626 * C8985 + C56029 * C1012 +
             C55625 * C1603) *
                C90567 +
            (C56030 * C8120 + C55626 * C8760 + C56029 * C831 + C55625 * C1398) *
                C244) *
               C90485 * C39128 +
           ((C56235 + C56234) * C90567 + (C56064 + C56065) * C244) * C90485 *
               C39127) *
              C90541 * C95)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                 C244 +
             (C56029 * C245 + C55625 * C719 + C56030 * C1879 + C55626 * C2460) *
                 C90567) *
                C90485 * C39127 +
            ((C73272 + C73273) * C244 + (C73482 + C73483) * C90567) * C90485 *
                C39128) *
               C2565 -
           (((C75304 + C75305) * C90567 + (C75096 + C75097) * C244) * C90485 *
                C39128 +
            ((C73483 + C73482) * C90567 + (C73273 + C73272) * C244) * C90485 *
                C39127) *
               C2566 +
           (((C75097 + C75096) * C244 + (C75305 + C75304) * C90567) * C90485 *
                C39127 +
            ((C56029 * C3367 + C55625 * C3707 + C56030 * C16835 +
              C55626 * C17361) *
                 C244 +
             (C56029 * C3489 + C55625 * C3816 + C56030 * C17029 +
              C55626 * C17550) *
                 C90567) *
                C90485 * C39128) *
               C2567) *
              C90744 +
          ((((C56942 + C56943) * C244 + (C57167 + C57166) * C90567) * C90485 *
                C39127 +
            ((C58904 + C58903) * C244 + (C59113 + C59114) * C90567) * C90485 *
                C39128) *
               C2566 -
           (((C57166 + C57167) * C90567 + (C56943 + C56942) * C244) * C90485 *
                C39128 +
            ((C56231 + C56230) * C90567 + (C56056 + C56057) * C244) * C90485 *
                C39127) *
               C2565 -
           (((C56030 * C21232 + C55626 * C21860 + C56029 * C3488 +
              C55625 * C3815) *
                 C90567 +
             (C56030 * C21004 + C55626 * C21644 + C56029 * C3366 +
              C55625 * C3706) *
                 C244) *
                C90485 * C39128 +
            ((C59114 + C59113) * C90567 + (C58903 + C58904) * C244) * C90485 *
                C39127) *
               C2567) *
              C90503)) /
            (p * q * std::sqrt(p + q));
    d2eexx[28] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C826 +
             (C13579 * C116 + C90485 * C125) * C821 -
             (C13579 * C108 + C90485 * C114) * C827 -
             (C13579 * C117 + C90485 * C126) * C822 +
             (C13579 * C109 + C90485 * C115) * C828 +
             (C13579 * C118 + C90485 * C127) * C823) *
                C39127 +
            (C14094 + C14095 - C14096 - C14097 + C14098 + C14099) * C39128) *
               C55625 +
           ((C27612 + C27613 - C27614 - C27615 + C27616 + C27617) * C39127 +
            (C72652 + C72653 - C72654 - C72655 + C72662 + C72663) * C39128) *
               C55626) *
              C90567 * C90752 +
          (((C14096 - (C14095 + C14094) + C14097 - C14098 - C14099) * C39127 +
            (C14102 - (C14101 + C14100) + C14103 - C14104 - C14105) * C39128) *
               C55625 +
           ((C72654 - (C72653 + C72652) + C72655 - C72662 - C72663) * C39127 +
            (C21023 * C827 - (C16856 * C821 + C16857 * C826) + C21024 * C822 -
             (C13579 * C3894 + C90485 * C3906) * C828 -
             (C13579 * C3903 + C90485 * C3912) * C823) *
                C39128) *
               C55626) *
              C90567 * C90555)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C3364 +
             (C13579 * C116 + C90485 * C125) * C90498) *
                C39127 +
            (C16297 + C16298) * C39128) *
               C55625 +
           ((C29494 + C29495) * C39127 + (C16865 + C16864) * C39128) * C55626) *
              C90567 * C3360 -
          ((C16868 * C39128 + (C16864 + C16865) * C39127) * C55626 +
           ((C16300 + C16299) * C39128 + (C16298 + C16297) * C39127) * C55625) *
              C90567 * C3361 +
          ((C16307 * C39127 + (C16302 + C16301) * C39128) * C55625 +
           ((C16863 + C16862) * C39127 + (C16866 + C16867) * C39128) * C55626) *
              C90567 * C3362 -
          ((((C13579 * C16839 + C90485 * C16842) * C90498 +
             (C13579 * C16836 + C90485 * C16840) * C3364) *
                C39128 +
            (C16867 + C16866) * C39127) *
               C55626 +
           ((C16312 + C16311) * C39128 + C16308 * C39127) * C55625) *
              C90567 * C3363)) /
            (p * q * std::sqrt(p + q));
    d2eexy[28] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C923 +
             (C13579 * C182 + C90485 * C188) * C90752 - C14082 * C924 -
             C14192 * C90555) *
                C39127 +
            (C14082 * C923 + C14192 * C90752 - C14088 * C924 -
             C14193 * C90555) *
                C39128) *
               C55625 +
           ((C31133 + C31134 - C31135 - C31136) * C39127 +
            (C16859 * C923 + C16953 * C90752 - C16857 * C924 -
             C16954 * C90555) *
                C39128) *
               C55626) *
              C821 +
          (((C14084 * C924 -
             ((C13579 * C183 + C90485 * C189) * C90752 +
              (C13579 * C108 + C90485 * C114) * C923) +
             C14194 * C90555) *
                C39127 +
            (C14090 * C924 - (C14194 * C90752 + C14084 * C923) +
             C14195 * C90555) *
                C39128) *
               C55625 +
           ((C35416 - (C35417 + C35418) + C35419) * C39127 +
            (C21023 * C924 - (C21133 * C90752 + C21021 * C923) +
             C21134 * C90555) *
                C39128) *
               C55626) *
              C822 +
          ((((C13579 * C109 + C90485 * C115) * C923 +
             (C13579 * C184 + C90485 * C190) * C90752 - C14086 * C924 -
             C14196 * C90555) *
                C39127 +
            (C14086 * C923 + C14196 * C90752 - C14092 * C924 -
             C14197 * C90555) *
                C39128) *
               C55625 +
           ((C27604 * C923 + C27720 * C90752 - C72660 * C924 -
             C72764 * C90555) *
                C39127 +
            (C72660 * C923 + C72764 * C90752 -
             (C13579 * C3894 + C90485 * C3906) * C924 -
             (C13579 * C3992 + C90485 * C3998) * C90555) *
                C39128) *
               C55626) *
              C823) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C3427 +
            (C13579 * C182 + C90485 * C188) * C3360 - C14082 * C3428 -
            C14192 * C3361 + C14088 * C3429 + C14193 * C3362 - C15553 * C3430 -
            C15643 * C3363) *
               C39127 +
           (C14082 * C3427 + C14192 * C3360 - C14088 * C3428 - C14193 * C3361 +
            C15553 * C3429 + C15643 * C3362 - C16309 * C3430 - C16367 * C3363) *
               C39128) *
              C55625 +
          ((C27600 * C3427 + C27716 * C3360 - C16859 * C3428 - C16953 * C3361 +
            C16857 * C3429 + C16954 * C3362 - C16860 * C3430 - C16955 * C3363) *
               C39127 +
           (C16859 * C3427 + C16953 * C3360 - C16857 * C3428 - C16954 * C3361 +
            C16860 * C3429 + C16955 * C3362 -
            (C13579 * C16836 + C90485 * C16840) * C3430 -
            (C13579 * C16943 + C90485 * C16945) * C3363) *
               C39128) *
              C55626) *
         C90498 * C90567) /
            (p * q * std::sqrt(p + q));
    d2eexz[28] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C13579 * C107 + C90485 * C113) * C244 +
              (C13579 * C245 + C90485 * C251) * C90567) *
                 C39127 +
             (C14272 + C14296) * C39128) *
                C55625 +
            ((C27600 * C244 + C27814 * C90567) * C39127 +
             (C72863 + C72864) * C39128) *
                C55626) *
               C90752 -
           (((C17051 * C90567 + C16857 * C244) * C39128 +
             (C72864 + C72863) * C39127) *
                C55626 +
            ((C14297 + C14275) * C39128 + (C14296 + C14272) * C39127) *
                C55625) *
               C90555) *
              C821 +
          ((((C14278 + C14298) * C39127 + (C14281 + C14299) * C39128) * C55625 +
            ((C72865 + C72866) * C39127 +
             (C21023 * C244 + C21246 * C90567) * C39128) *
                C55626) *
               C90555 -
           (((C72866 + C72865) * C39128 +
             (C27816 * C90567 + C27602 * C244) * C39127) *
                C55626 +
            ((C14298 + C14278) * C39128 +
             ((C13579 * C246 + C90485 * C252) * C90567 +
              (C13579 * C108 + C90485 * C114) * C244) *
                 C39127) *
                C55625) *
               C90752) *
              C822 +
          (((((C13579 * C109 + C90485 * C115) * C244 +
              (C13579 * C247 + C90485 * C253) * C90567) *
                 C39127 +
             (C14284 + C14300) * C39128) *
                C55625 +
            ((C27604 * C244 + C27818 * C90567) * C39127 +
             (C72867 + C72871) * C39128) *
                C55626) *
               C90752 -
           ((((C13579 * C4078 + C90485 * C4084) * C90567 +
              (C13579 * C3894 + C90485 * C3906) * C244) *
                 C39128 +
             (C72871 + C72867) * C39127) *
                C55626 +
            ((C14301 + C14287) * C39128 + (C14300 + C14284) * C39127) *
                C55625) *
               C90555) *
              C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C244 +
             (C13579 * C245 + C90485 * C251) * C90567) *
                C39127 +
            (C14272 + C14296) * C39128) *
               C55625 +
           ((C27600 * C244 + C27814 * C90567) * C39127 +
            (C72863 + C72864) * C39128) *
               C55626) *
              C3360 -
          (((C74690 + C74691) * C39128 + (C72864 + C72863) * C39127) * C55626 +
           ((C14297 + C14275) * C39128 + (C14296 + C14272) * C39127) * C55625) *
              C3361 +
          ((C15723 * C39127 + (C15726 + C15733) * C39128) * C55625 +
           ((C74691 + C74690) * C39127 + (C75504 + C75505) * C39128) * C55626) *
              C3362 -
          ((((C13579 * C17030 + C90485 * C17032) * C90567 +
             (C13579 * C16836 + C90485 * C16840) * C244) *
                C39128 +
            (C75505 + C75504) * C39127) *
               C55626 +
           ((C16425 + C16421) * C39128 + C16420 * C39127) * C55625) *
              C3363) *
         C90498) /
            (p * q * std::sqrt(p + q));
    d2eeyx[28] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C826 +
            (C39329 * C116 + C39127 * C314 + C39330 * C839 + C39128 * C1098) *
                C821 -
            (C39356 + C39357) * C827 - (C39358 + C39359) * C822 +
            (C39360 + C39361) * C828 + (C39362 + C39363) * C823) *
               C55625 +
           ((C39329 * C1700 + C39127 * C1962 + C39330 * C3891 +
             C39128 * C4161) *
                C826 +
            (C39329 * C1707 + C39127 * C1966 + C39330 * C3900 +
             C39128 * C4167) *
                C821 -
            (C41168 + C41167) * C827 - (C41170 + C41169) * C822 +
            (C41172 + C41171) * C828 + (C41174 + C41173) * C823) *
               C55626) *
              C90485 * C90567 * C90752 +
          (((C40220 + C40221) * C827 -
            ((C39330 * C2577 + C39128 * C2831 + C39329 * C839 +
              C39127 * C1098) *
                 C821 +
             (C39330 * C2570 + C39128 * C2827 + C39329 * C832 +
              C39127 * C1094) *
                 C826) +
            (C40222 + C40223) * C822 - (C40224 + C40225) * C828 -
            (C40226 + C40227) * C823) *
               C55625 +
           ((C48993 + C48992) * C827 -
            ((C39330 * C3905 + C39128 * C4172 + C39329 * C3900 +
              C39127 * C4167) *
                 C821 +
             (C39330 * C3896 + C39128 * C4166 + C39329 * C3891 +
              C39127 * C4161) *
                 C826) +
            (C48995 + C48994) * C822 -
            (C39330 * C3894 + C39128 * C4164 + C39329 * C3893 +
             C39127 * C4163) *
                C828 -
            (C39330 * C3903 + C39128 * C4170 + C39329 * C3902 +
             C39127 * C4169) *
                C823) *
               C55626) *
              C90485 * C90567 * C90555)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C3364 +
            (C39329 * C116 + C39127 * C314 + C39330 * C839 + C39128 * C1098) *
                C90498) *
               C55625 +
           ((C73890 + C73891) * C3364 + (C73892 + C73893) * C90498) * C55626) *
              C90485 * C90567 * C3360 -
          (((C39330 * C3905 + C39128 * C4172 + C39329 * C3900 +
             C39127 * C4167) *
                C90498 +
            (C39330 * C3896 + C39128 * C4166 + C39329 * C3891 +
             C39127 * C4161) *
                C3364) *
               C55626 +
           ((C39330 * C2577 + C39128 * C2831 + C39329 * C839 + C39127 * C1098) *
                C90498 +
            (C39330 * C2570 + C39128 * C2827 + C39329 * C832 + C39127 * C1094) *
                C3364) *
               C55625) *
              C90485 * C90567 * C3361 +
          (((C39329 * C2570 + C39127 * C2827 + C39330 * C3367 +
             C39128 * C3545) *
                C3364 +
            (C39329 * C2577 + C39127 * C2831 + C39330 * C3370 +
             C39128 * C3548) *
                C90498) *
               C55625 +
           ((C39329 * C3896 + C39127 * C4166 + C39330 * C16835 +
             C39128 * C17131) *
                C3364 +
            (C39329 * C3905 + C39127 * C4172 + C39330 * C16838 +
             C39128 * C17133) *
                C90498) *
               C55626) *
              C90485 * C90567 * C3362 -
          (((C39330 * C16839 + C39128 * C17134 + C39329 * C16838 +
             C39127 * C17133) *
                C90498 +
            (C39330 * C16836 + C39128 * C17132 + C39329 * C16835 +
             C39127 * C17131) *
                C3364) *
               C55626 +
           ((C39330 * C15528 + C39128 * C15810 + C39329 * C3370 +
             C39127 * C3548) *
                C90498 +
            (C39330 * C15525 + C39128 * C15808 + C39329 * C3367 +
             C39127 * C3545) *
                C3364) *
               C55625) *
              C90485 * C90567 * C3363)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[28] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C923 +
            (C39329 * C182 + C39127 * C394 + C39330 * C927 + C39128 * C1195) *
                C90752 -
            (C39330 * C2570 + C39128 * C2827 + C39329 * C832 + C39127 * C1094) *
                C924 -
            (C39330 * C2663 + C39128 * C2921 + C39329 * C927 + C39127 * C1195) *
                C90555) *
               C55625 +
           ((C39329 * C1700 + C39127 * C1962 + C39330 * C3891 +
             C39128 * C4161) *
                C923 +
            (C39329 * C1794 + C39127 * C2066 + C39330 * C3989 +
             C39128 * C4247) *
                C90752 -
            (C39330 * C3896 + C39128 * C4166 + C39329 * C3891 +
             C39127 * C4161) *
                C924 -
            (C39330 * C3994 + C39128 * C4248 + C39329 * C3989 +
             C39127 * C4247) *
                C90555) *
               C55626) *
              C90485 * C821 +
          (((C40220 + C40221) * C924 -
            ((C39447 + C39446) * C90752 + (C39356 + C39357) * C923) +
            (C40335 + C40334) * C90555) *
               C55625 +
           ((C48993 + C48992) * C924 -
            ((C41282 + C41281) * C90752 + (C41168 + C41167) * C923) +
            (C49130 + C49131) * C90555) *
               C55626) *
              C90485 * C822 +
          (((C39360 + C39361) * C923 + (C39449 + C39448) * C90752 -
            (C40224 + C40225) * C924 - (C40337 + C40336) * C90555) *
               C55625 +
           ((C41172 + C41171) * C923 + (C41283 + C41284) * C90752 -
            (C39330 * C3894 + C39128 * C4164 + C39329 * C3893 +
             C39127 * C4163) *
                C924 -
            (C39330 * C3992 + C39128 * C4252 + C39329 * C3991 +
             C39127 * C4251) *
                C90555) *
               C55626) *
              C90485 * C823) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
               C3427 +
           (C39329 * C182 + C39127 * C394 + C39330 * C927 + C39128 * C1195) *
               C3360 -
           (C39330 * C2570 + C39128 * C2827 + C39329 * C832 + C39127 * C1094) *
               C3428 -
           (C39330 * C2663 + C39128 * C2921 + C39329 * C927 + C39127 * C1195) *
               C3361 +
           (C39329 * C2570 + C39127 * C2827 + C39330 * C3367 + C39128 * C3545) *
               C3429 +
           (C39329 * C2663 + C39127 * C2921 + C39330 * C3433 + C39128 * C3599) *
               C3362 -
           (C39330 * C15525 + C39128 * C15808 + C39329 * C3367 +
            C39127 * C3545) *
               C3430 -
           (C39330 * C15634 + C39128 * C15886 + C39329 * C3433 +
            C39127 * C3599) *
               C3363) *
              C55625 +
          ((C73890 + C73891) * C3427 + (C73996 + C73997) * C3360 -
           (C39330 * C3896 + C39128 * C4166 + C39329 * C3891 + C39127 * C4161) *
               C3428 -
           (C39330 * C3994 + C39128 * C4248 + C39329 * C3989 + C39127 * C4247) *
               C3361 +
           (C39329 * C3896 + C39127 * C4166 + C39330 * C16835 +
            C39128 * C17131) *
               C3429 +
           (C39329 * C3994 + C39127 * C4248 + C39330 * C16942 +
            C39128 * C17209) *
               C3362 -
           (C39330 * C16836 + C39128 * C17132 + C39329 * C16835 +
            C39127 * C17131) *
               C3430 -
           (C39330 * C16943 + C39128 * C17210 + C39329 * C16942 +
            C39127 * C17209) *
               C3363) *
              C55626) *
         C90485 * C90498 * C90567) /
            (p * q * std::sqrt(p + q));
    d2eeyz[28] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                 C244 +
             (C39329 * C245 + C39127 * C474 + C39330 * C1011 + C39128 * C1301) *
                 C90567) *
                C55625 +
            ((C39329 * C1700 + C39127 * C1962 + C39330 * C3891 +
              C39128 * C4161) *
                 C244 +
             (C39329 * C1879 + C39127 * C2159 + C39330 * C4075 +
              C39128 * C4327) *
                 C90567) *
                C55626) *
               C90485 * C90752 -
           (((C39330 * C4080 + C39128 * C4330 + C39329 * C4075 +
              C39127 * C4327) *
                 C90567 +
             (C39330 * C3896 + C39128 * C4166 + C39329 * C3891 +
              C39127 * C4161) *
                 C244) *
                C55626 +
            ((C39330 * C2745 + C39128 * C3017 + C39329 * C1011 +
              C39127 * C1301) *
                 C90567 +
             (C39330 * C2570 + C39128 * C2827 + C39329 * C832 +
              C39127 * C1094) *
                 C244) *
                C55625) *
               C90485 * C90555) *
              C821 +
          ((((C40220 + C40221) * C244 + (C40445 + C40444) * C90567) * C55625 +
            ((C48993 + C48992) * C244 + (C49266 + C49267) * C90567) * C55626) *
               C90485 * C90555 -
           (((C41391 + C41392) * C90567 + (C41168 + C41167) * C244) * C55626 +
            ((C39531 + C39530) * C90567 + (C39356 + C39357) * C244) * C55625) *
               C90485 * C90752) *
              C822 +
          ((((C39360 + C39361) * C244 + (C39533 + C39532) * C90567) * C55625 +
            ((C41172 + C41171) * C244 + (C41393 + C41394) * C90567) * C55626) *
               C90485 * C90752 -
           (((C39330 * C4078 + C39128 * C4332 + C39329 * C4077 +
              C39127 * C4329) *
                 C90567 +
             (C39330 * C3894 + C39128 * C4164 + C39329 * C3893 +
              C39127 * C4163) *
                 C244) *
                C55626 +
            ((C40447 + C40446) * C90567 + (C40224 + C40225) * C244) * C55625) *
               C90485 * C90555) *
              C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C244 +
            (C39329 * C245 + C39127 * C474 + C39330 * C1011 + C39128 * C1301) *
                C90567) *
               C55625 +
           ((C73890 + C73891) * C244 + (C74101 + C74100) * C90567) * C55626) *
              C90485 * C3360 -
          (((C39330 * C4080 + C39128 * C4330 + C39329 * C4075 +
             C39127 * C4327) *
                C90567 +
            (C39330 * C3896 + C39128 * C4166 + C39329 * C3891 +
             C39127 * C4161) *
                C244) *
               C55626 +
           ((C39330 * C2745 + C39128 * C3017 + C39329 * C1011 +
             C39127 * C1301) *
                C90567 +
            (C39330 * C2570 + C39128 * C2827 + C39329 * C832 + C39127 * C1094) *
                C244) *
               C55625) *
              C90485 * C3361 +
          (((C39329 * C2570 + C39127 * C2827 + C39330 * C3367 +
             C39128 * C3545) *
                C244 +
            (C39329 * C2745 + C39127 * C3017 + C39330 * C3489 +
             C39128 * C3654) *
                C90567) *
               C55625 +
           ((C39329 * C3896 + C39127 * C4166 + C39330 * C16835 +
             C39128 * C17131) *
                C244 +
            (C39329 * C4080 + C39127 * C4330 + C39330 * C17029 +
             C39128 * C17285) *
                C90567) *
               C55626) *
              C90485 * C3362 -
          (((C39330 * C17030 + C39128 * C17286 + C39329 * C17029 +
             C39127 * C17285) *
                C90567 +
            (C39330 * C16836 + C39128 * C17132 + C39329 * C16835 +
             C39127 * C17131) *
                C244) *
               C55626 +
           ((C39330 * C15718 + C39128 * C15962 + C39329 * C3489 +
             C39127 * C3654) *
                C90567 +
            (C39330 * C15525 + C39128 * C15808 + C39329 * C3367 +
             C39127 * C3545) *
                C244) *
               C55625) *
              C90485 * C3363) *
         C90498) /
            (p * q * std::sqrt(p + q));
    d2eezx[28] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C826 +
            (C56029 * C116 + C55625 * C561 + C56030 * C1707 + C55626 * C2268) *
                C821 -
            (C56056 + C56057) * C827 - (C56058 + C56059) * C822 +
            (C56060 + C56061) * C828 + (C56062 + C56063) * C823) *
               C90485 * C39127 +
           ((C73272 + C73273) * C826 + (C73274 + C73275) * C821 -
            (C56943 + C56942) * C827 - (C56945 + C56944) * C822 +
            (C56947 + C56946) * C828 + (C56949 + C56948) * C823) *
               C90485 * C39128) *
              C90567 * C90752 +
          (((C56942 + C56943) * C827 -
            ((C73275 + C73274) * C821 + (C73273 + C73272) * C826) +
            (C56944 + C56945) * C822 - (C56946 + C56947) * C828 -
            (C56948 + C56949) * C823) *
               C90485 * C39127 +
           ((C58904 + C58903) * C827 -
            ((C56030 * C3905 + C55626 * C4418 + C56029 * C2577 +
              C55625 * C3109) *
                 C821 +
             (C56030 * C3896 + C55626 * C4412 + C56029 * C2570 +
              C55625 * C3105) *
                 C826) +
            (C58906 + C58905) * C822 -
            (C56030 * C3894 + C55626 * C4410 + C56029 * C2572 +
             C55625 * C3107) *
                C828 -
            (C56030 * C3903 + C55626 * C4416 + C56029 * C2579 +
             C55625 * C3111) *
                C823) *
               C90485 * C39128) *
              C90567 * C90555)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C3364 +
            (C56029 * C116 + C55625 * C561 + C56030 * C1707 + C55626 * C2268) *
                C90498) *
               C90485 * C39127 +
           ((C73272 + C73273) * C3364 + (C73274 + C73275) * C90498) * C90485 *
               C39128) *
              C90567 * C3360 -
          (((C75094 + C75095) * C90498 + (C75096 + C75097) * C3364) * C90485 *
               C39128 +
           ((C73275 + C73274) * C90498 + (C73273 + C73272) * C3364) * C90485 *
               C39127) *
              C90567 * C3361 +
          (((C75097 + C75096) * C3364 + (C75095 + C75094) * C90498) * C90485 *
               C39127 +
           ((C75778 + C75779) * C3364 + (C75780 + C75781) * C90498) * C90485 *
               C39128) *
              C90567 * C3362 -
          (((C56030 * C16839 + C55626 * C17364 + C56029 * C15528 +
             C55625 * C16040) *
                C90498 +
            (C56030 * C16836 + C55626 * C17362 + C56029 * C15525 +
             C55625 * C16038) *
                C3364) *
               C90485 * C39128 +
           ((C75781 + C75780) * C90498 + (C75779 + C75778) * C3364) * C90485 *
               C39127) *
              C90567 * C3363)) /
            (p * q * std::sqrt(p + q));
    d2eezy[28] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C923 +
            (C56029 * C182 + C55625 * C641 + C56030 * C1794 + C55626 * C2368) *
                C90752 -
            (C73273 + C73272) * C924 - (C73378 + C73379) * C90555) *
               C90485 * C39127 +
           ((C73272 + C73273) * C923 + (C73379 + C73378) * C90752 -
            (C56030 * C3896 + C55626 * C4412 + C56029 * C2570 +
             C55625 * C3105) *
                C924 -
            (C56030 * C3994 + C55626 * C4494 + C56029 * C2663 +
             C55625 * C3199) *
                C90555) *
               C90485 * C39128) *
              C821 +
          (((C56942 + C56943) * C924 -
            ((C56147 + C56146) * C90752 + (C56056 + C56057) * C923) +
            (C57057 + C57056) * C90555) *
               C90485 * C39127 +
           ((C58904 + C58903) * C924 -
            ((C57056 + C57057) * C90752 + (C56943 + C56942) * C923) +
            (C59009 + C59010) * C90555) *
               C90485 * C39128) *
              C822 +
          (((C56060 + C56061) * C923 + (C56149 + C56148) * C90752 -
            (C56946 + C56947) * C924 - (C57059 + C57058) * C90555) *
               C90485 * C39127 +
           ((C56947 + C56946) * C923 + (C57058 + C57059) * C90752 -
            (C56030 * C3894 + C55626 * C4410 + C56029 * C2572 +
             C55625 * C3107) *
                C924 -
            (C56030 * C3992 + C55626 * C4498 + C56029 * C2665 +
             C55625 * C3201) *
                C90555) *
               C90485 * C39128) *
              C823) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
               C3427 +
           (C56029 * C182 + C55625 * C641 + C56030 * C1794 + C55626 * C2368) *
               C3360 -
           (C73273 + C73272) * C3428 - (C73378 + C73379) * C3361 +
           (C75097 + C75096) * C3429 + (C75200 + C75201) * C3362 -
           (C75779 + C75778) * C3430 - (C75852 + C75853) * C3363) *
              C90485 * C39127 +
          ((C73272 + C73273) * C3427 + (C73379 + C73378) * C3360 -
           (C75096 + C75097) * C3428 - (C75201 + C75200) * C3361 +
           (C75778 + C75779) * C3429 + (C75853 + C75852) * C3362 -
           (C56030 * C16836 + C55626 * C17362 + C56029 * C15525 +
            C55625 * C16038) *
               C3430 -
           (C56030 * C16943 + C55626 * C17466 + C56029 * C15634 +
            C55625 * C16144) *
               C3363) *
              C90485 * C39128) *
         C90498 * C90567) /
            (p * q * std::sqrt(p + q));
    d2eezz[28] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                 C244 +
             (C56029 * C245 + C55625 * C719 + C56030 * C1879 + C55626 * C2460) *
                 C90567) *
                C90485 * C39127 +
            ((C73272 + C73273) * C244 + (C73482 + C73483) * C90567) * C90485 *
                C39128) *
               C90752 -
           (((C56030 * C4080 + C55626 * C4576 + C56029 * C2745 +
              C55625 * C3295) *
                 C90567 +
             (C56030 * C3896 + C55626 * C4412 + C56029 * C2570 +
              C55625 * C3105) *
                 C244) *
                C90485 * C39128 +
            ((C73483 + C73482) * C90567 + (C73273 + C73272) * C244) * C90485 *
                C39127) *
               C90555) *
              C821 +
          ((((C56942 + C56943) * C244 + (C57167 + C57166) * C90567) * C90485 *
                C39127 +
            ((C58904 + C58903) * C244 + (C59113 + C59114) * C90567) * C90485 *
                C39128) *
               C90555 -
           (((C57166 + C57167) * C90567 + (C56943 + C56942) * C244) * C90485 *
                C39128 +
            ((C56231 + C56230) * C90567 + (C56056 + C56057) * C244) * C90485 *
                C39127) *
               C90752) *
              C822 +
          ((((C56060 + C56061) * C244 + (C56233 + C56232) * C90567) * C90485 *
                C39127 +
            ((C56947 + C56946) * C244 + (C57168 + C57169) * C90567) * C90485 *
                C39128) *
               C90752 -
           (((C56030 * C4078 + C55626 * C4578 + C56029 * C2747 +
              C55625 * C3297) *
                 C90567 +
             (C56030 * C3894 + C55626 * C4410 + C56029 * C2572 +
              C55625 * C3107) *
                 C244) *
                C90485 * C39128 +
            ((C57169 + C57168) * C90567 + (C56946 + C56947) * C244) * C90485 *
                C39127) *
               C90555) *
              C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C244 +
            (C56029 * C245 + C55625 * C719 + C56030 * C1879 + C55626 * C2460) *
                C90567) *
               C90485 * C39127 +
           ((C73272 + C73273) * C244 + (C73482 + C73483) * C90567) * C90485 *
               C39128) *
              C3360 -
          (((C75304 + C75305) * C90567 + (C75096 + C75097) * C244) * C90485 *
               C39128 +
           ((C73483 + C73482) * C90567 + (C73273 + C73272) * C244) * C90485 *
               C39127) *
              C3361 +
          (((C75097 + C75096) * C244 + (C75305 + C75304) * C90567) * C90485 *
               C39127 +
           ((C75778 + C75779) * C244 + (C75924 + C75925) * C90567) * C90485 *
               C39128) *
              C3362 -
          (((C56030 * C17030 + C55626 * C17551 + C56029 * C15718 +
             C55625 * C16226) *
                C90567 +
            (C56030 * C16836 + C55626 * C17362 + C56029 * C15525 +
             C55625 * C16038) *
                C244) *
               C90485 * C39128 +
           ((C75925 + C75924) * C90567 + (C75779 + C75778) * C244) * C90485 *
               C39127) *
              C3363) *
         C90498) /
            (p * q * std::sqrt(p + q));
    d2eexx[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C826 +
             (C13579 * C116 + C90485 * C125) * C821 -
             (C13579 * C108 + C90485 * C114) * C827 -
             (C13579 * C117 + C90485 * C126) * C822 +
             (C13579 * C109 + C90485 * C115) * C828 +
             (C13579 * C118 + C90485 * C127) * C823) *
                C39127 +
            (C14094 + C14095 - C14096 - C14097 + C14098 + C14099) * C39128) *
               C55625 +
           ((C27612 + C27613 - C27614 - C27615 + C27616 + C27617) * C39127 +
            (C72652 + C72653 - C72654 - C72655 + C72662 + C72663) * C39128) *
               C55626) *
              C90753 +
          (((C27614 - (C27613 + C27612) + C27615 - C27616 - C27617) * C39127 +
            (C72654 - (C72653 + C72652) + C72655 - C72662 - C72663) * C39128) *
               C55625 +
           ((C27620 - (C27619 + C27618) + C27621 - C27622 - C27623) * C39127 +
            (C33668 * C827 - (C18363 * C821 + C18362 * C826) + C33669 * C822 -
             (C13579 * C5469 + C90485 * C5475) * C828 -
             (C13579 * C5472 + C90485 * C5478) * C823) *
                C39128) *
               C55626) *
              C90579) *
         C90541) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C13579 * C107 + C90485 * C113) * C3364 +
              (C13579 * C116 + C90485 * C125) * C90498) *
                 C39127 +
             (C16297 + C16298) * C39128) *
                C55625 +
            ((C29494 + C29495) * C39127 + C76024 * C39128) * C55626) *
               C90753 -
           ((C31050 * C39128 + (C29497 + C29496) * C39127) * C55626 +
            (C76025 * C39128 + (C29495 + C29494) * C39127) * C55625) *
               C90579) *
              C2565 +
          (((C76024 * C39127 + C76026 * C39128) * C55625 +
            ((C18366 + C18367) * C39127 + (C18368 + C18369) * C39128) *
                C55626) *
               C90579 -
           ((C16868 * C39128 + C76025 * C39127) * C55626 +
            ((C16300 + C16299) * C39128 + (C16298 + C16297) * C39127) *
                C55625) *
               C90753) *
              C2566 +
          (((C16307 * C39127 + (C16302 + C16301) * C39128) * C55625 +
            (C76026 * C39127 + (C16866 + C16867) * C39128) * C55626) *
               C90753 -
           ((((C13579 * C18350 + C90485 * C18352) * C90498 +
              (C13579 * C18349 + C90485 * C18351) * C3364) *
                 C39128 +
             (C18369 + C18368) * C39127) *
                C55626 +
            ((C16867 + C16866) * C39128 + C16868 * C39127) * C55625) *
               C90579) *
              C2567)) /
            (p * q * std::sqrt(p + q));
    d2eexy[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C13579 * C107 + C90485 * C113) * C181 +
              (C13579 * C182 + C90485 * C188) * C90541) *
                 C39127 +
             (C14082 * C181 + C14192 * C90541) * C39128) *
                C55625 +
            ((C27698 + C27722) * C39127 + (C73680 + C73681) * C39128) *
                C55626) *
               C821 -
           (((C73682 + C73683) * C39128 + (C27725 + C27709) * C39127) * C55626 +
            ((C14194 * C90541 + C14084 * C181) * C39128 +
             ((C13579 * C183 + C90485 * C189) * C90541 +
              (C13579 * C108 + C90485 * C114) * C181) *
                 C39127) *
                C55625) *
               C822 +
           ((((C13579 * C109 + C90485 * C115) * C181 +
              (C13579 * C184 + C90485 * C190) * C90541) *
                 C39127 +
             (C14086 * C181 + C14196 * C90541) * C39128) *
                C55625 +
            ((C27710 + C27726) * C39127 + (C73684 + C73685) * C39128) *
                C55626) *
               C823) *
              C90753 +
          ((((C27709 + C27725) * C39127 + (C73683 + C73682) * C39128) * C55625 +
            ((C27706 + C27724) * C39127 +
             (C33668 * C181 + C33789 * C90541) * C39128) *
                C55626) *
               C822 -
           (((C18450 * C90541 + C18362 * C181) * C39128 +
             (C27723 + C27701) * C39127) *
                C55626 +
            ((C73681 + C73680) * C39128 + (C27722 + C27698) * C39127) *
                C55625) *
               C821 -
           ((((C13579 * C5555 + C90485 * C5558) * C90541 +
              (C13579 * C5469 + C90485 * C5475) * C181) *
                 C39128 +
             (C27727 + C27713) * C39127) *
                C55626 +
            ((C73685 + C73684) * C39128 + (C27726 + C27710) * C39127) *
                C55625) *
               C823) *
              C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C2660 +
             (C13579 * C182 + C90485 * C188) * C2565 - C14082 * C2661 -
             C14192 * C2566 + C14088 * C2662 + C14193 * C2567) *
                C39127 +
            (C14082 * C2660 + C14192 * C2565 - C14088 * C2661 - C14193 * C2566 +
             C15553 * C2662 + C15643 * C2567) *
                C39128) *
               C55625 +
           ((C29572 + C29573 - C29574 - C29575 + C29576 + C29577) * C39127 +
            (C76125 + C76126 - C76127 - C76128 + C76129 + C76130) * C39128) *
               C55626) *
              C90498 * C90753 +
          (((C29574 - (C29573 + C29572) + C29575 - C29576 - C29577) * C39127 +
            (C76127 - (C76126 + C76125) + C76128 - C76129 - C76130) * C39128) *
               C55625 +
           ((C29580 - (C29579 + C29578) + C29581 - C29582 - C29583) * C39127 +
            (C18364 * C2661 - (C18450 * C2565 + C18362 * C2660) +
             C18451 * C2566 - (C13579 * C18349 + C90485 * C18351) * C2662 -
             (C13579 * C18443 + C90485 * C18444) * C2567) *
                C39128) *
               C55626) *
              C90498 * C90579)) /
            (p * q * std::sqrt(p + q));
    d2eexz[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C1875 +
             (C13579 * C245 + C90485 * C251) * C90753 - C27600 * C1876 -
             C27814 * C90579) *
                C39127 +
            (C17034 + C17035 - C17036 - C17053) * C39128) *
               C55625 +
           ((C27600 * C1875 + C27814 * C90753 - C27606 * C1876 -
             C27815 * C90579) *
                C39127 +
            (C16859 * C1875 + C17049 * C90753 - C18362 * C1876 -
             C18542 * C90579) *
                C39128) *
               C55626) *
              C90541 * C821 +
          (((C27602 * C1876 -
             ((C13579 * C246 + C90485 * C252) * C90753 +
              (C13579 * C108 + C90485 * C114) * C1875) +
             C27816 * C90579) *
                C39127 +
            (C21235 - (C21236 + C21237) + C21247) * C39128) *
               C55625 +
           ((C27608 * C1876 - (C27816 * C90753 + C27602 * C1875) +
             C27817 * C90579) *
                C39127 +
            (C33668 * C1876 - (C21245 * C90753 + C21021 * C1875) +
             C33893 * C90579) *
                C39128) *
               C55626) *
              C90541 * C822 +
          ((((C13579 * C109 + C90485 * C115) * C1875 +
             (C13579 * C247 + C90485 * C253) * C90753 - C27604 * C1876 -
             C27818 * C90579) *
                C39127 +
            (C14086 * C1875 + C14294 * C90753 - C72660 * C1876 -
             C72870 * C90579) *
                C39128) *
               C55625 +
           ((C27604 * C1875 + C27818 * C90753 - C27610 * C1876 -
             C27819 * C90579) *
                C39127 +
            (C72660 * C1875 + C72870 * C90753 -
             (C13579 * C5469 + C90485 * C5475) * C1876 -
             (C13579 * C5635 + C90485 * C5638) * C90579) *
                C39128) *
               C55626) *
              C90541 * C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C1875 +
             (C13579 * C245 + C90485 * C251) * C90753 - C27600 * C1876 -
             C27814 * C90579) *
                C39127 +
            (C17034 + C17035 - C17036 - C17053) * C39128) *
               C55625 +
           ((C27600 * C1875 + C27814 * C90753 - C27606 * C1876 -
             C27815 * C90579) *
                C39127 +
            (C76229 + C76230 - C76231 - C76232) * C39128) *
               C55626) *
              C2565 +
          (((C17036 - (C17035 + C17034) + C17053) * C39127 +
            (C17041 - (C17040 + C17039) + C17055) * C39128) *
               C55625 +
           ((C76231 - (C76230 + C76229) + C76232) * C39127 +
            (C76233 - (C76234 + C76235) + C76236) * C39128) *
               C55626) *
              C2566 +
          ((C17057 * C39127 + (C17046 + C17045 - C17044 - C17056) * C39128) *
               C55625 +
           ((C76235 + C76234 - C76233 - C76236) * C39127 +
            (C16860 * C1875 + C17052 * C90753 -
             (C13579 * C18349 + C90485 * C18351) * C1876 -
             (C13579 * C18525 + C90485 * C18526) * C90579) *
                C39128) *
               C55626) *
              C2567) *
         C90498) /
            (p * q * std::sqrt(p + q));
    d2eeyx[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C826 +
            (C39329 * C116 + C39127 * C314 + C39330 * C839 + C39128 * C1098) *
                C821 -
            (C39356 + C39357) * C827 - (C39358 + C39359) * C822 +
            (C39360 + C39361) * C828 + (C39362 + C39363) * C823) *
               C55625 +
           ((C73890 + C73891) * C826 + (C73892 + C73893) * C821 -
            (C41168 + C41167) * C827 - (C41170 + C41169) * C822 +
            (C41172 + C41171) * C828 + (C41174 + C41173) * C823) *
               C55626) *
              C90485 * C90753 +
          (((C41167 + C41168) * C827 -
            ((C73893 + C73892) * C821 + (C73891 + C73890) * C826) +
            (C41169 + C41170) * C822 - (C41171 + C41172) * C828 -
            (C41173 + C41174) * C823) *
               C55625 +
           ((C44621 + C44620) * C827 -
            ((C39330 * C5474 + C39128 * C5720 + C39329 * C4663 +
              C39127 * C4917) *
                 C821 +
             (C39330 * C5471 + C39128 * C5717 + C39329 * C4656 +
              C39127 * C4913) *
                 C826) +
            (C44623 + C44622) * C822 -
            (C39330 * C5469 + C39128 * C5715 + C39329 * C4658 +
             C39127 * C4915) *
                C828 -
            (C39330 * C5472 + C39128 * C5718 + C39329 * C4665 +
             C39127 * C4919) *
                C823) *
               C55626) *
              C90485 * C90579) *
         C90541) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                 C3364 +
             (C39329 * C116 + C39127 * C314 + C39330 * C839 + C39128 * C1098) *
                 C90498) *
                C55625 +
            ((C73890 + C73891) * C3364 + (C73892 + C73893) * C90498) * C55626) *
               C90485 * C90753 -
           (((C39330 * C5474 + C39128 * C5720 + C39329 * C4663 +
              C39127 * C4917) *
                 C90498 +
             (C39330 * C5471 + C39128 * C5717 + C39329 * C4656 +
              C39127 * C4913) *
                 C3364) *
                C55626 +
            ((C73893 + C73892) * C90498 + (C73891 + C73890) * C3364) * C55625) *
               C90485 * C90579) *
              C2565 +
          ((((C76351 + C76352) * C3364 + (C76353 + C76354) * C90498) * C55625 +
            ((C39329 * C5471 + C39127 * C5717 + C39330 * C17651 +
              C39128 * C17889) *
                 C3364 +
             (C39329 * C5474 + C39127 * C5720 + C39330 * C17654 +
              C39128 * C17891) *
                 C90498) *
                C55626) *
               C90485 * C90579 -
           (((C76354 + C76353) * C90498 + (C76352 + C76351) * C3364) * C55626 +
            ((C39330 * C2577 + C39128 * C2831 + C39329 * C839 +
              C39127 * C1098) *
                 C90498 +
             (C39330 * C2570 + C39128 * C2827 + C39329 * C832 +
              C39127 * C1094) *
                 C3364) *
                C55625) *
               C90485 * C90753) *
              C2566 +
          ((((C39329 * C2570 + C39127 * C2827 + C39330 * C3367 +
              C39128 * C3545) *
                 C3364 +
             (C39329 * C2577 + C39127 * C2831 + C39330 * C3370 +
              C39128 * C3548) *
                 C90498) *
                C55625 +
            ((C76355 + C76356) * C3364 + (C76357 + C76358) * C90498) * C55626) *
               C90485 * C90753 -
           (((C39330 * C18350 + C39128 * C18620 + C39329 * C17654 +
              C39127 * C17891) *
                 C90498 +
             (C39330 * C18349 + C39128 * C18619 + C39329 * C17651 +
              C39127 * C17889) *
                 C3364) *
                C55626 +
            ((C76358 + C76357) * C90498 + (C76356 + C76355) * C3364) * C55625) *
               C90485 * C90579) *
              C2567)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                 C181 +
             (C39329 * C182 + C39127 * C394 + C39330 * C927 + C39128 * C1195) *
                 C90541) *
                C55625 +
            ((C73890 + C73891) * C181 + (C73996 + C73997) * C90541) * C55626) *
               C90485 * C821 -
           (((C41282 + C41281) * C90541 + (C41168 + C41167) * C181) * C55626 +
            ((C39447 + C39446) * C90541 + (C39356 + C39357) * C181) * C55625) *
               C90485 * C822 +
           (((C39360 + C39361) * C181 + (C39449 + C39448) * C90541) * C55625 +
            ((C41172 + C41171) * C181 + (C41283 + C41284) * C90541) * C55626) *
               C90485 * C823) *
              C90753 +
          ((((C41167 + C41168) * C181 + (C41281 + C41282) * C90541) * C55625 +
            ((C44621 + C44620) * C181 + (C44726 + C44727) * C90541) * C55626) *
               C90485 * C822 -
           (((C39330 * C5557 + C39128 * C5795 + C39329 * C4746 +
              C39127 * C5007) *
                 C90541 +
             (C39330 * C5471 + C39128 * C5717 + C39329 * C4656 +
              C39127 * C4913) *
                 C181) *
                C55626 +
            ((C73997 + C73996) * C90541 + (C73891 + C73890) * C181) * C55625) *
               C90485 * C821 -
           (((C39330 * C5555 + C39128 * C5797 + C39329 * C4748 +
              C39127 * C5009) *
                 C90541 +
             (C39330 * C5469 + C39128 * C5715 + C39329 * C4658 +
              C39127 * C4915) *
                 C181) *
                C55626 +
            ((C41284 + C41283) * C90541 + (C41171 + C41172) * C181) * C55625) *
               C90485 * C823) *
              C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C2660 +
            (C39329 * C182 + C39127 * C394 + C39330 * C927 + C39128 * C1195) *
                C2565 -
            (C39330 * C2570 + C39128 * C2827 + C39329 * C832 + C39127 * C1094) *
                C2661 -
            (C39330 * C2663 + C39128 * C2921 + C39329 * C927 + C39127 * C1195) *
                C2566 +
            (C39329 * C2570 + C39127 * C2827 + C39330 * C3367 +
             C39128 * C3545) *
                C2662 +
            (C39329 * C2663 + C39127 * C2921 + C39330 * C3433 +
             C39128 * C3599) *
                C2567) *
               C55625 +
           ((C73890 + C73891) * C2660 + (C73996 + C73997) * C2565 -
            (C76352 + C76351) * C2661 - (C76465 + C76466) * C2566 +
            (C76355 + C76356) * C2662 + (C76467 + C76468) * C2567) *
               C55626) *
              C90485 * C90498 * C90753 +
          (((C76351 + C76352) * C2661 -
            ((C73997 + C73996) * C2565 + (C73891 + C73890) * C2660) +
            (C76466 + C76465) * C2566 - (C76356 + C76355) * C2662 -
            (C76468 + C76467) * C2567) *
               C55625 +
           ((C39329 * C5471 + C39127 * C5717 + C39330 * C17651 +
             C39128 * C17889) *
                C2661 -
            ((C39330 * C5557 + C39128 * C5795 + C39329 * C4746 +
              C39127 * C5007) *
                 C2565 +
             (C39330 * C5471 + C39128 * C5717 + C39329 * C4656 +
              C39127 * C4913) *
                 C2660) +
            (C39329 * C5557 + C39127 * C5795 + C39330 * C17733 +
             C39128 * C17967) *
                C2566 -
            (C39330 * C18349 + C39128 * C18619 + C39329 * C17651 +
             C39127 * C17889) *
                C2662 -
            (C39330 * C18443 + C39128 * C18695 + C39329 * C17733 +
             C39127 * C17967) *
                C2567) *
               C55626) *
              C90485 * C90498 * C90579)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C1875 +
            (C39329 * C245 + C39127 * C474 + C39330 * C1011 + C39128 * C1301) *
                C90753 -
            (C73891 + C73890) * C1876 - (C74100 + C74101) * C90579) *
               C55625 +
           ((C73890 + C73891) * C1875 + (C74101 + C74100) * C90753 -
            (C39330 * C5471 + C39128 * C5717 + C39329 * C4656 +
             C39127 * C4913) *
                C1876 -
            (C39330 * C5637 + C39128 * C5872 + C39329 * C4831 +
             C39127 * C5095) *
                C90579) *
               C55626) *
              C90485 * C90541 * C821 +
          (((C41167 + C41168) * C1876 -
            ((C39531 + C39530) * C90753 + (C39356 + C39357) * C1875) +
            (C41392 + C41391) * C90579) *
               C55625 +
           ((C44621 + C44620) * C1876 -
            ((C41391 + C41392) * C90753 + (C41168 + C41167) * C1875) +
            (C44830 + C44831) * C90579) *
               C55626) *
              C90485 * C90541 * C822 +
          (((C39360 + C39361) * C1875 + (C39533 + C39532) * C90753 -
            (C41171 + C41172) * C1876 - (C41394 + C41393) * C90579) *
               C55625 +
           ((C41172 + C41171) * C1875 + (C41393 + C41394) * C90753 -
            (C39330 * C5469 + C39128 * C5715 + C39329 * C4658 +
             C39127 * C4915) *
                C1876 -
            (C39330 * C5635 + C39128 * C5874 + C39329 * C4833 +
             C39127 * C5097) *
                C90579) *
               C55626) *
              C90485 * C90541 * C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39329 * C107 + C39127 * C308 + C39330 * C832 + C39128 * C1094) *
                C1875 +
            (C39329 * C245 + C39127 * C474 + C39330 * C1011 + C39128 * C1301) *
                C90753 -
            (C73891 + C73890) * C1876 - (C74100 + C74101) * C90579) *
               C55625 +
           ((C73890 + C73891) * C1875 + (C74101 + C74100) * C90753 -
            (C39330 * C5471 + C39128 * C5717 + C39329 * C4656 +
             C39127 * C4913) *
                C1876 -
            (C39330 * C5637 + C39128 * C5872 + C39329 * C4831 +
             C39127 * C5095) *
                C90579) *
               C55626) *
              C90485 * C2565 +
          (((C76351 + C76352) * C1876 -
            ((C39330 * C2745 + C39128 * C3017 + C39329 * C1011 +
              C39127 * C1301) *
                 C90753 +
             (C39330 * C2570 + C39128 * C2827 + C39329 * C832 +
              C39127 * C1094) *
                 C1875) +
            (C76575 + C76576) * C90579) *
               C55625 +
           ((C39329 * C5471 + C39127 * C5717 + C39330 * C17651 +
             C39128 * C17889) *
                C1876 -
            ((C76576 + C76575) * C90753 + (C76352 + C76351) * C1875) +
            (C39329 * C5637 + C39127 * C5872 + C39330 * C17811 +
             C39128 * C18043) *
                C90579) *
               C55626) *
              C90485 * C2566 +
          (((C39329 * C2570 + C39127 * C2827 + C39330 * C3367 +
             C39128 * C3545) *
                C1875 +
            (C39329 * C2745 + C39127 * C3017 + C39330 * C3489 +
             C39128 * C3654) *
                C90753 -
            (C76356 + C76355) * C1876 - (C76577 + C76578) * C90579) *
               C55625 +
           ((C76355 + C76356) * C1875 + (C76578 + C76577) * C90753 -
            (C39330 * C18349 + C39128 * C18619 + C39329 * C17651 +
             C39127 * C17889) *
                C1876 -
            (C39330 * C18525 + C39128 * C18770 + C39329 * C17811 +
             C39127 * C18043) *
                C90579) *
               C55626) *
              C90485 * C2567) *
         C90498) /
            (p * q * std::sqrt(p + q));
    d2eezx[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C826 +
            (C56029 * C116 + C55625 * C561 + C56030 * C1707 + C55626 * C2268) *
                C821 -
            (C56056 + C56057) * C827 - (C56058 + C56059) * C822 +
            (C56060 + C56061) * C828 + (C56062 + C56063) * C823) *
               C90485 * C39127 +
           ((C73272 + C73273) * C826 + (C73274 + C73275) * C821 -
            (C56943 + C56942) * C827 - (C56945 + C56944) * C822 +
            (C56947 + C56946) * C828 + (C56949 + C56948) * C823) *
               C90485 * C39128) *
              C90753 +
          (((C57961 + C57962) * C827 -
            ((C56030 * C4663 + C55626 * C5195 + C56029 * C1707 +
              C55625 * C2268) *
                 C821 +
             (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
              C55625 * C2264) *
                 C826) +
            (C57963 + C57964) * C822 - (C57965 + C57966) * C828 -
            (C57967 + C57968) * C823) *
               C90485 * C39127 +
           ((C65779 + C65778) * C827 -
            ((C56030 * C5474 + C55626 * C5954 + C56029 * C3900 +
              C55625 * C4413) *
                 C821 +
             (C56030 * C5471 + C55626 * C5951 + C56029 * C3891 +
              C55625 * C4407) *
                 C826) +
            (C65781 + C65780) * C822 -
            (C56030 * C5469 + C55626 * C5949 + C56029 * C3893 +
             C55625 * C4409) *
                C828 -
            (C56030 * C5472 + C55626 * C5952 + C56029 * C3902 +
             C55625 * C4415) *
                C823) *
               C90485 * C39128) *
              C90579) *
         C90541) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                 C3364 +
             (C56029 * C116 + C55625 * C561 + C56030 * C1707 + C55626 * C2268) *
                 C90498) *
                C90485 * C39127 +
            ((C73272 + C73273) * C3364 + (C73274 + C73275) * C90498) * C90485 *
                C39128) *
               C90753 -
           (((C76693 + C76694) * C90498 + (C76695 + C76696) * C3364) * C90485 *
                C39128 +
            ((C56030 * C4663 + C55626 * C5195 + C56029 * C1707 +
              C55625 * C2268) *
                 C90498 +
             (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
              C55625 * C2264) *
                 C3364) *
                C90485 * C39127) *
               C90579) *
              C2565 +
          ((((C76696 + C76695) * C3364 + (C76694 + C76693) * C90498) * C90485 *
                C39127 +
            ((C76697 + C76698) * C3364 + (C76699 + C76700) * C90498) * C90485 *
                C39128) *
               C90579 -
           (((C75094 + C75095) * C90498 + (C75096 + C75097) * C3364) * C90485 *
                C39128 +
            ((C73275 + C73274) * C90498 + (C73273 + C73272) * C3364) * C90485 *
                C39127) *
               C90753) *
              C2566 +
          ((((C75097 + C75096) * C3364 + (C75095 + C75094) * C90498) * C90485 *
                C39127 +
            ((C75778 + C75779) * C3364 + (C75780 + C75781) * C90498) * C90485 *
                C39128) *
               C90753 -
           (((C56030 * C18350 + C55626 * C18846 + C56029 * C16838 +
              C55625 * C17363) *
                 C90498 +
             (C56030 * C18349 + C55626 * C18845 + C56029 * C16835 +
              C55625 * C17361) *
                 C3364) *
                C90485 * C39128 +
            ((C76700 + C76699) * C90498 + (C76698 + C76697) * C3364) * C90485 *
                C39127) *
               C90579) *
              C2567)) /
            (p * q * std::sqrt(p + q));
    d2eezy[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                 C181 +
             (C56029 * C182 + C55625 * C641 + C56030 * C1794 + C55626 * C2368) *
                 C90541) *
                C90485 * C39127 +
            ((C73272 + C73273) * C181 + (C73379 + C73378) * C90541) * C90485 *
                C39128) *
               C821 -
           (((C57056 + C57057) * C90541 + (C56943 + C56942) * C181) * C90485 *
                C39128 +
            ((C56147 + C56146) * C90541 + (C56056 + C56057) * C181) * C90485 *
                C39127) *
               C822 +
           (((C56060 + C56061) * C181 + (C56149 + C56148) * C90541) * C90485 *
                C39127 +
            ((C56947 + C56946) * C181 + (C57058 + C57059) * C90541) * C90485 *
                C39128) *
               C823) *
              C90753 +
          ((((C57961 + C57962) * C181 + (C58075 + C58076) * C90541) * C90485 *
                C39127 +
            ((C65779 + C65778) * C181 + (C65916 + C65917) * C90541) * C90485 *
                C39128) *
               C822 -
           (((C56030 * C5557 + C55626 * C6029 + C56029 * C3989 +
              C55625 * C4493) *
                 C90541 +
             (C56030 * C5471 + C55626 * C5951 + C56029 * C3891 +
              C55625 * C4407) *
                 C181) *
                C90485 * C39128 +
            ((C56030 * C4746 + C55626 * C5285 + C56029 * C1794 +
              C55625 * C2368) *
                 C90541 +
             (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
              C55625 * C2264) *
                 C181) *
                C90485 * C39127) *
               C821 -
           (((C56030 * C5555 + C55626 * C6031 + C56029 * C3991 +
              C55625 * C4497) *
                 C90541 +
             (C56030 * C5469 + C55626 * C5949 + C56029 * C3893 +
              C55625 * C4409) *
                 C181) *
                C90485 * C39128 +
            ((C58078 + C58077) * C90541 + (C57965 + C57966) * C181) * C90485 *
                C39127) *
               C823) *
              C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C2660 +
            (C56029 * C182 + C55625 * C641 + C56030 * C1794 + C55626 * C2368) *
                C2565 -
            (C73273 + C73272) * C2661 - (C73378 + C73379) * C2566 +
            (C75097 + C75096) * C2662 + (C75200 + C75201) * C2567) *
               C90485 * C39127 +
           ((C73272 + C73273) * C2660 + (C73379 + C73378) * C2565 -
            (C75096 + C75097) * C2661 - (C75201 + C75200) * C2566 +
            (C75778 + C75779) * C2662 + (C75853 + C75852) * C2567) *
               C90485 * C39128) *
              C90498 * C90753 +
          (((C76696 + C76695) * C2661 -
            ((C56030 * C4746 + C55626 * C5285 + C56029 * C1794 +
              C55625 * C2368) *
                 C2565 +
             (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
              C55625 * C2264) *
                 C2660) +
            (C76807 + C76808) * C2566 - (C76698 + C76697) * C2662 -
            (C76809 + C76810) * C2567) *
               C90485 * C39127 +
           ((C76697 + C76698) * C2661 -
            ((C76808 + C76807) * C2565 + (C76695 + C76696) * C2660) +
            (C76810 + C76809) * C2566 -
            (C56030 * C18349 + C55626 * C18845 + C56029 * C16835 +
             C55625 * C17361) *
                C2662 -
            (C56030 * C18443 + C55626 * C18937 + C56029 * C16942 +
             C55625 * C17465) *
                C2567) *
               C90485 * C39128) *
              C90498 * C90579)) /
            (p * q * std::sqrt(p + q));
    d2eezz[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C1875 +
            (C56029 * C245 + C55625 * C719 + C56030 * C1879 + C55626 * C2460) *
                C90753 -
            (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
             C55625 * C2264) *
                C1876 -
            (C56030 * C4831 + C55626 * C5373 + C56029 * C1879 +
             C55625 * C2460) *
                C90579) *
               C90485 * C39127 +
           ((C73272 + C73273) * C1875 + (C73482 + C73483) * C90753 -
            (C56030 * C5471 + C55626 * C5951 + C56029 * C3891 +
             C55625 * C4407) *
                C1876 -
            (C56030 * C5637 + C55626 * C6106 + C56029 * C4075 +
             C55625 * C4573) *
                C90579) *
               C90485 * C39128) *
              C90541 * C821 +
          (((C57961 + C57962) * C1876 -
            ((C56231 + C56230) * C90753 + (C56056 + C56057) * C1875) +
            (C58186 + C58185) * C90579) *
               C90485 * C39127 +
           ((C65779 + C65778) * C1876 -
            ((C57166 + C57167) * C90753 + (C56943 + C56942) * C1875) +
            (C66052 + C66053) * C90579) *
               C90485 * C39128) *
              C90541 * C822 +
          (((C56060 + C56061) * C1875 + (C56233 + C56232) * C90753 -
            (C57965 + C57966) * C1876 - (C58188 + C58187) * C90579) *
               C90485 * C39127 +
           ((C56947 + C56946) * C1875 + (C57168 + C57169) * C90753 -
            (C56030 * C5469 + C55626 * C5949 + C56029 * C3893 +
             C55625 * C4409) *
                C1876 -
            (C56030 * C5635 + C55626 * C6108 + C56029 * C4077 +
             C55625 * C4575) *
                C90579) *
               C90485 * C39128) *
              C90541 * C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C1875 +
            (C56029 * C245 + C55625 * C719 + C56030 * C1879 + C55626 * C2460) *
                C90753 -
            (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
             C55625 * C2264) *
                C1876 -
            (C56030 * C4831 + C55626 * C5373 + C56029 * C1879 +
             C55625 * C2460) *
                C90579) *
               C90485 * C39127 +
           ((C73272 + C73273) * C1875 + (C73482 + C73483) * C90753 -
            (C76695 + C76696) * C1876 - (C76917 + C76918) * C90579) *
               C90485 * C39128) *
              C2565 +
          (((C76696 + C76695) * C1876 -
            ((C73483 + C73482) * C90753 + (C73273 + C73272) * C1875) +
            (C76918 + C76917) * C90579) *
               C90485 * C39127 +
           ((C76697 + C76698) * C1876 -
            ((C75304 + C75305) * C90753 + (C75096 + C75097) * C1875) +
            (C76919 + C76920) * C90579) *
               C90485 * C39128) *
              C2566 +
          (((C75097 + C75096) * C1875 + (C75305 + C75304) * C90753 -
            (C76698 + C76697) * C1876 - (C76920 + C76919) * C90579) *
               C90485 * C39127 +
           ((C75778 + C75779) * C1875 + (C75924 + C75925) * C90753 -
            (C56030 * C18349 + C55626 * C18845 + C56029 * C16835 +
             C55625 * C17361) *
                C1876 -
            (C56030 * C18525 + C55626 * C19018 + C56029 * C17029 +
             C55625 * C17550) *
                C90579) *
               C90485 * C39128) *
              C2567) *
         C90498) /
            (p * q * std::sqrt(p + q));
    d2eexx[30] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C6694 +
            (C13579 * C116 + C90485 * C125) * C90780 -
            (C13579 * C108 + C90485 * C114) * C6695 -
            (C13579 * C117 + C90485 * C126) * C90771 +
            (C13579 * C109 + C90485 * C115) * C6696 +
            (C13579 * C118 + C90485 * C127) * C6691) *
               C13576 +
           (C19594 + C19595 - C19596 - C19597 + C19598 + C19599) * C13577 +
           (C19600 + C19601 - C19602 - C19603 + C19604 + C19605) * C13578) *
              C90634 * C90567 * C6692 +
          ((C19596 - (C19595 + C19594) + C19597 - C19598 - C19599) * C13576 +
           (C19602 - (C19601 + C19600) + C19603 - C19604 - C19605) * C13577 +
           (C15551 * C6695 - (C15552 * C90780 + C15553 * C6694) +
            C15554 * C90771 - (C13579 * C3365 + C90485 * C3371) * C6696 -
            (C13579 * C3368 + C90485 * C3374) * C6691) *
               C13578) *
              C90634 * C90567 * C90555)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C6694 +
           (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 + C102 * C118 +
            C91 * C127) *
               C90780 -
           (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 + C100 * C108 +
            C89 * C114) *
               C6695 -
           (C102 * C120 + C91 * C128 + C101 * C118 + C90 * C127 + C100 * C117 +
            C89 * C126) *
               C90771 +
           (C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 + C102 * C111 +
            C91 * C121) *
               C6696 +
           (C100 * C118 + C89 * C127 + C101 * C120 + C90 * C128 + C102 * C122 +
            C91 * C129) *
               C6691) *
              C90623 * C90634 * C90567 * C6692 +
          ((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 + C102 * C831 +
            C91 * C836) *
               C6695 -
           ((C102 * C837 + C91 * C844 + C101 * C838 + C90 * C845 + C100 * C839 +
             C89 * C846) *
                C90780 +
            (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 + C100 * C832 +
             C89 * C840) *
                C6694) +
           (C100 * C838 + C89 * C845 + C101 * C837 + C90 * C844 + C102 * C841 +
            C91 * C847) *
               C90771 -
           (C102 * C833 + C91 * C842 + C101 * C831 + C90 * C836 + C100 * C830 +
            C89 * C835) *
               C6696 -
           (C102 * C843 + C91 * C848 + C101 * C841 + C90 * C847 + C100 * C837 +
            C89 * C844) *
               C6691) *
              C90623 * C90634 * C90567 * C90555)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C6694 +
            (C13579 * C116 + C90485 * C125) * C90780 -
            (C13579 * C108 + C90485 * C114) * C6695 -
            (C13579 * C117 + C90485 * C126) * C90771 +
            (C13579 * C109 + C90485 * C115) * C6696 +
            (C13579 * C118 + C90485 * C127) * C6691) *
               C90623 * C26429 +
           (C27600 * C6694 + C27601 * C90780 - C27602 * C6695 -
            C27603 * C90771 + C27604 * C6696 + C27605 * C6691) *
               C90623 * C26430 +
           (C27606 * C6694 + C27607 * C90780 - C27608 * C6695 -
            C27609 * C90771 + C27610 * C6696 + C27611 * C6691) *
               C90623 * C26431) *
              C90567 * C6692 +
          ((C19596 - (C19595 + C19594) + C19597 - C19598 - C19599) * C90623 *
               C26429 +
           (C21021 * C6695 - (C16858 * C90780 + C16859 * C6694) +
            C21022 * C90771 - (C13579 * C3893 + C90485 * C3899) * C6696 -
            (C13579 * C3902 + C90485 * C3911) * C6691) *
               C90623 * C26430 +
           ((C13579 * C5470 + C90485 * C5476) * C6695 -
            (C18363 * C90780 + C18362 * C6694) +
            (C13579 * C5473 + C90485 * C5479) * C90771 -
            (C13579 * C5469 + C90485 * C5475) * C6696 -
            (C13579 * C5472 + C90485 * C5478) * C6691) *
               C90623 * C26431) *
              C90567 * C90555)) /
            (p * q * std::sqrt(p + q));
    d2eexy[30] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C13579 * C107 + C90485 * C113) * C6771 +
                      (C13579 * C182 + C90485 * C188) * C6692 - C14082 * C6772 -
                      C14192 * C90555) *
                         C13576 +
                     (C14082 * C6771 + C14192 * C6692 - C14088 * C6772 -
                      C14193 * C90555) *
                         C13577 +
                     (C14088 * C6771 + C14193 * C6692 - C15553 * C6772 -
                      C15643 * C90555) *
                         C13578) *
                        C90634 * C90780 +
                    ((C14084 * C6772 -
                      ((C13579 * C183 + C90485 * C189) * C6692 +
                       (C13579 * C108 + C90485 * C114) * C6771) +
                      C14194 * C90555) *
                         C13576 +
                     (C14090 * C6772 - (C14194 * C6692 + C14084 * C6771) +
                      C14195 * C90555) *
                         C13577 +
                     (C15551 * C6772 - (C14195 * C6692 + C14090 * C6771) +
                      C15644 * C90555) *
                         C13578) *
                        C90634 * C90771 +
                    (((C13579 * C109 + C90485 * C115) * C6771 +
                      (C13579 * C184 + C90485 * C190) * C6692 - C14086 * C6772 -
                      C14196 * C90555) *
                         C13576 +
                     (C14086 * C6771 + C14196 * C6692 - C14092 * C6772 -
                      C14197 * C90555) *
                         C13577 +
                     (C14092 * C6771 + C14197 * C6692 -
                      (C13579 * C3365 + C90485 * C3371) * C6772 -
                      (C13579 * C3431 + C90485 * C3434) * C90555) *
                         C13578) *
                        C90634 * C6691) *
                   C90567) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                      C102 * C109 + C91 * C115) *
                         C6771 +
                     (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 +
                      C102 * C184 + C91 * C190) *
                         C6692 -
                     (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                      C100 * C832 + C89 * C840) *
                         C6772 -
                     (C102 * C925 + C91 * C930 + C101 * C926 + C90 * C931 +
                      C100 * C927 + C89 * C932) *
                         C90555) *
                        C90623 * C90634 * C90780 +
                    ((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 +
                      C102 * C831 + C91 * C836) *
                         C6772 -
                     ((C102 * C185 + C91 * C191 + C101 * C184 + C90 * C190 +
                       C100 * C183 + C89 * C189) *
                          C6692 +
                      (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                       C100 * C108 + C89 * C114) *
                          C6771) +
                     (C100 * C926 + C89 * C931 + C101 * C925 + C90 * C930 +
                      C102 * C928 + C91 * C933) *
                         C90555) *
                        C90623 * C90634 * C90771 +
                    ((C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 +
                      C102 * C111 + C91 * C121) *
                         C6771 +
                     (C100 * C184 + C89 * C190 + C101 * C185 + C90 * C191 +
                      C102 * C186 + C91 * C192) *
                         C6692 -
                     (C102 * C833 + C91 * C842 + C101 * C831 + C90 * C836 +
                      C100 * C830 + C89 * C835) *
                         C6772 -
                     (C102 * C929 + C91 * C934 + C101 * C928 + C90 * C933 +
                      C100 * C925 + C89 * C930) *
                         C90555) *
                        C90623 * C90634 * C6691) *
                   C90567) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C13579 * C107 + C90485 * C113) * C6771 +
                      (C13579 * C182 + C90485 * C188) * C6692 - C14082 * C6772 -
                      C14192 * C90555) *
                         C90623 * C26429 +
                     (C27600 * C6771 + C27716 * C6692 - C16859 * C6772 -
                      C16953 * C90555) *
                         C90623 * C26430 +
                     (C27606 * C6771 + C27717 * C6692 - C18362 * C6772 -
                      C18450 * C90555) *
                         C90623 * C26431) *
                        C90780 +
                    ((C14084 * C6772 -
                      ((C13579 * C183 + C90485 * C189) * C6692 +
                       (C13579 * C108 + C90485 * C114) * C6771) +
                      C14194 * C90555) *
                         C90623 * C26429 +
                     (C21021 * C6772 - (C27719 * C6692 + C27602 * C6771) +
                      C21133 * C90555) *
                         C90623 * C26430 +
                     ((C13579 * C5470 + C90485 * C5476) * C6772 -
                      (C27718 * C6692 + C27608 * C6771) +
                      (C13579 * C5556 + C90485 * C5559) * C90555) *
                         C90623 * C26431) *
                        C90771 +
                    (((C13579 * C109 + C90485 * C115) * C6771 +
                      (C13579 * C184 + C90485 * C190) * C6692 - C14086 * C6772 -
                      C14196 * C90555) *
                         C90623 * C26429 +
                     (C27604 * C6771 + C27720 * C6692 -
                      (C13579 * C3893 + C90485 * C3899) * C6772 -
                      (C13579 * C3991 + C90485 * C3997) * C90555) *
                         C90623 * C26430 +
                     (C27610 * C6771 + C27721 * C6692 -
                      (C13579 * C5469 + C90485 * C5475) * C6772 -
                      (C13579 * C5555 + C90485 * C5558) * C90555) *
                         C90623 * C26431) *
                        C6691) *
                   C90567) /
                      (p * q * std::sqrt(p + q));
    d2eexz[30] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C13579 * C107 + C90485 * C113) * C244 +
                       (C13579 * C245 + C90485 * C251) * C90567) *
                          C13576 +
                      (C14272 + C14296) * C13577 + C15723 * C13578) *
                         C90634 * C6692 -
                     (C16420 * C13578 + (C14297 + C14275) * C13577 +
                      (C14296 + C14272) * C13576) *
                         C90634 * C90555) *
                        C90780 +
                    (((C14278 + C14298) * C13576 + (C14281 + C14299) * C13577 +
                      (C15727 + C15734) * C13578) *
                         C90634 * C90555 -
                     (C15730 * C13578 + (C14298 + C14278) * C13577 +
                      ((C13579 * C246 + C90485 * C252) * C90567 +
                       (C13579 * C108 + C90485 * C114) * C244) *
                          C13576) *
                         C90634 * C6692) *
                        C90771 +
                    ((((C13579 * C109 + C90485 * C115) * C244 +
                       (C13579 * C247 + C90485 * C253) * C90567) *
                          C13576 +
                      (C14284 + C14300) * C13577 + (C14287 + C14301) * C13578) *
                         C90634 * C6692 -
                     (((C13579 * C3487 + C90485 * C3490) * C90567 +
                       (C13579 * C3365 + C90485 * C3371) * C244) *
                          C13578 +
                      (C14301 + C14287) * C13577 + (C14300 + C14284) * C13576) *
                         C90634 * C90555) *
                        C6691)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                       C102 * C109 + C91 * C115) *
                          C244 +
                      (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 +
                       C102 * C247 + C91 * C253) *
                          C90567) *
                         C90623 * C90634 * C6692 -
                     ((C102 * C1009 + C91 * C1014 + C101 * C1010 + C90 * C1015 +
                       C100 * C1011 + C89 * C1016) *
                          C90567 +
                      (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                       C100 * C832 + C89 * C840) *
                          C244) *
                         C90623 * C90634 * C90555) *
                        C90780 +
                    (((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 +
                       C102 * C831 + C91 * C836) *
                          C244 +
                      (C100 * C1010 + C89 * C1015 + C101 * C1009 + C90 * C1014 +
                       C102 * C1012 + C91 * C1017) *
                          C90567) *
                         C90623 * C90634 * C90555 -
                     ((C102 * C248 + C91 * C254 + C101 * C247 + C90 * C253 +
                       C100 * C246 + C89 * C252) *
                          C90567 +
                      (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                       C100 * C108 + C89 * C114) *
                          C244) *
                         C90623 * C90634 * C6692) *
                        C90771 +
                    (((C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 +
                       C102 * C111 + C91 * C121) *
                          C244 +
                      (C100 * C247 + C89 * C253 + C101 * C248 + C90 * C254 +
                       C102 * C249 + C91 * C255) *
                          C90567) *
                         C90623 * C90634 * C6692 -
                     ((C102 * C1013 + C91 * C1018 + C101 * C1012 + C90 * C1017 +
                       C100 * C1009 + C89 * C1014) *
                          C90567 +
                      (C102 * C833 + C91 * C842 + C101 * C831 + C90 * C836 +
                       C100 * C830 + C89 * C835) *
                          C244) *
                         C90623 * C90634 * C90555) *
                        C6691)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C13579 * C107 + C90485 * C113) * C244 +
                       (C13579 * C245 + C90485 * C251) * C90567) *
                          C90623 * C26429 +
                      (C27600 * C244 + C27814 * C90567) * C90623 * C26430 +
                      (C27606 * C244 + C27815 * C90567) * C90623 * C26431) *
                         C6692 -
                     ((C18542 * C90567 + C18362 * C244) * C90623 * C26431 +
                      (C17049 * C90567 + C16859 * C244) * C90623 * C26430 +
                      (C14296 + C14272) * C90623 * C26429) *
                         C90555) *
                        C90780 +
                    (((C14278 + C14298) * C90623 * C26429 +
                      (C21021 * C244 + C21245 * C90567) * C90623 * C26430 +
                      ((C13579 * C5470 + C90485 * C5476) * C244 +
                       (C13579 * C5636 + C90485 * C5639) * C90567) *
                          C90623 * C26431) *
                         C90555 -
                     ((C27817 * C90567 + C27608 * C244) * C90623 * C26431 +
                      (C27816 * C90567 + C27602 * C244) * C90623 * C26430 +
                      ((C13579 * C246 + C90485 * C252) * C90567 +
                       (C13579 * C108 + C90485 * C114) * C244) *
                          C90623 * C26429) *
                         C6692) *
                        C90771 +
                    ((((C13579 * C109 + C90485 * C115) * C244 +
                       (C13579 * C247 + C90485 * C253) * C90567) *
                          C90623 * C26429 +
                      (C27604 * C244 + C27818 * C90567) * C90623 * C26430 +
                      (C27610 * C244 + C27819 * C90567) * C90623 * C26431) *
                         C6692 -
                     (((C13579 * C5635 + C90485 * C5638) * C90567 +
                       (C13579 * C5469 + C90485 * C5475) * C244) *
                          C90623 * C26431 +
                      ((C13579 * C4077 + C90485 * C4083) * C90567 +
                       (C13579 * C3893 + C90485 * C3899) * C244) *
                          C90623 * C26430 +
                      (C14300 + C14284) * C90623 * C26429) *
                         C90555) *
                        C6691)) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[30] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C13730 * C107 + C13576 * C308 + C13731 * C832 +
                      C13577 * C1094 + C13732 * C2570 + C13578 * C2827) *
                         C6694 +
                     (C13730 * C116 + C13576 * C314 + C13731 * C839 +
                      C13577 * C1098 + C13732 * C2577 + C13578 * C2831) *
                         C90780 -
                     (C13732 * C2571 + C13578 * C2828 + C13731 * C829 +
                      C13577 * C1093 + C13730 * C108 + C13576 * C309) *
                         C6695 -
                     (C13732 * C2578 + C13578 * C2832 + C13731 * C838 +
                      C13577 * C1099 + C13730 * C117 + C13576 * C315) *
                         C90771 +
                     (C13730 * C109 + C13576 * C310 + C13731 * C830 +
                      C13577 * C1095 + C13732 * C2572 + C13578 * C2829) *
                         C6696 +
                     (C13730 * C118 + C13576 * C316 + C13731 * C837 +
                      C13577 * C1100 + C13732 * C2579 + C13578 * C2833) *
                         C6691) *
                        C90634 * C90485 * C90567 * C6692 +
                    ((C13730 * C829 + C13576 * C1093 + C13731 * C2571 +
                      C13577 * C2828 + C13732 * C3366 + C13578 * C3544) *
                         C6695 -
                     ((C13732 * C3370 + C13578 * C3548 + C13731 * C2577 +
                       C13577 * C2831 + C13730 * C839 + C13576 * C1098) *
                          C90780 +
                      (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 +
                       C13577 * C2827 + C13730 * C832 + C13576 * C1094) *
                          C6694) +
                     (C13730 * C838 + C13576 * C1099 + C13731 * C2578 +
                      C13577 * C2832 + C13732 * C3369 + C13578 * C3547) *
                         C90771 -
                     (C13732 * C3365 + C13578 * C3543 + C13731 * C2572 +
                      C13577 * C2829 + C13730 * C830 + C13576 * C1095) *
                         C6696 -
                     (C13732 * C3368 + C13578 * C3546 + C13731 * C2579 +
                      C13577 * C2833 + C13730 * C837 + C13576 * C1100) *
                         C6691) *
                        C90634 * C90485 * C90567 * C90555)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C307 * C107 + C90623 * C308) * C6694 +
                      (C307 * C116 + C90623 * C314) * C90780 - C337 * C6695 -
                      C338 * C90771 + C339 * C6696 + C340 * C6691) *
                         C90634 * C89 +
                     (C337 * C6694 + C338 * C90780 - C339 * C6695 -
                      C340 * C90771 + C341 * C6696 + C342 * C6691) *
                         C90634 * C90 +
                     (C339 * C6694 + C340 * C90780 - C341 * C6695 -
                      C342 * C90771 + C343 * C6696 + C344 * C6691) *
                         C90634 * C91) *
                        C90567 * C6692 +
                    ((C1116 * C6695 -
                      ((C307 * C839 + C90623 * C1098) * C90780 +
                       (C307 * C832 + C90623 * C1094) * C6694) +
                      C1117 * C90771 - C1118 * C6696 - C1119 * C6691) *
                         C90634 * C89 +
                     (C1118 * C6695 - (C1117 * C90780 + C1116 * C6694) +
                      C1119 * C90771 - C1120 * C6696 - C1121 * C6691) *
                         C90634 * C90 +
                     (C1120 * C6695 - (C1119 * C90780 + C1118 * C6694) +
                      C1121 * C90771 - (C307 * C833 + C90623 * C1097) * C6696 -
                      (C307 * C843 + C90623 * C1102) * C6691) *
                         C90634 * C91) *
                        C90567 * C90555)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C307 * C107 + C90623 * C308) * C6694 +
                      (C307 * C116 + C90623 * C314) * C90780 - C337 * C6695 -
                      C338 * C90771 + C339 * C6696 + C340 * C6691) *
                         C26429 +
                     (C27910 * C6694 + C27911 * C90780 - C1984 * C6695 -
                      C1985 * C90771 + C1986 * C6696 + C1987 * C6691) *
                         C26430 +
                     (C27912 * C6694 + C27913 * C90780 - C4930 * C6695 -
                      C4931 * C90771 + C4932 * C6696 + C4933 * C6691) *
                         C26431) *
                        C90485 * C90567 * C6692 +
                    ((C1116 * C6695 -
                      ((C307 * C839 + C90623 * C1098) * C90780 +
                       (C307 * C832 + C90623 * C1094) * C6694) +
                      C1117 * C90771 - C1118 * C6696 - C1119 * C6691) *
                         C26429 +
                     (C8433 * C6695 - (C29753 * C90780 + C29752 * C6694) +
                      C8434 * C90771 - C8435 * C6696 - C8436 * C6691) *
                         C26430 +
                     ((C307 * C5470 + C90623 * C5716) * C6695 -
                      (C29755 * C90780 + C29754 * C6694) +
                      (C307 * C5473 + C90623 * C5719) * C90771 -
                      (C307 * C5469 + C90623 * C5715) * C6696 -
                      (C307 * C5472 + C90623 * C5718) * C6691) *
                         C26431) *
                        C90485 * C90567 * C90555)) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[30] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C6771 +
           (C13730 * C182 + C13576 * C394 + C13731 * C927 + C13577 * C1195 +
            C13732 * C2663 + C13578 * C2921) *
               C6692 -
           (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
            C13730 * C832 + C13576 * C1094) *
               C6772 -
           (C13732 * C3433 + C13578 * C3599 + C13731 * C2663 + C13577 * C2921 +
            C13730 * C927 + C13576 * C1195) *
               C90555) *
              C90634 * C90485 * C90780 +
          ((C13730 * C829 + C13576 * C1093 + C13731 * C2571 + C13577 * C2828 +
            C13732 * C3366 + C13578 * C3544) *
               C6772 -
           ((C13732 * C2664 + C13578 * C2922 + C13731 * C926 + C13577 * C1196 +
             C13730 * C183 + C13576 * C395) *
                C6692 +
            (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
             C13730 * C108 + C13576 * C309) *
                C6771) +
           (C13730 * C926 + C13576 * C1196 + C13731 * C2664 + C13577 * C2922 +
            C13732 * C3432 + C13578 * C3600) *
               C90555) *
              C90634 * C90485 * C90771 +
          ((C13730 * C109 + C13576 * C310 + C13731 * C830 + C13577 * C1095 +
            C13732 * C2572 + C13578 * C2829) *
               C6771 +
           (C13730 * C184 + C13576 * C396 + C13731 * C925 + C13577 * C1197 +
            C13732 * C2665 + C13578 * C2923) *
               C6692 -
           (C13732 * C3365 + C13578 * C3543 + C13731 * C2572 + C13577 * C2829 +
            C13730 * C830 + C13576 * C1095) *
               C6772 -
           (C13732 * C3431 + C13578 * C3601 + C13731 * C2665 + C13577 * C2923 +
            C13730 * C925 + C13576 * C1197) *
               C90555) *
              C90634 * C90485 * C6691) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C6771 +
            (C307 * C182 + C90623 * C394) * C6692 -
            (C307 * C832 + C90623 * C1094) * C6772 -
            (C307 * C927 + C90623 * C1195) * C90555) *
               C90634 * C89 +
           (C6996 + C6997 - C6998 - C6999) * C90634 * C90 + C7011 * C91) *
              C90780 +
          ((C6998 - (C6997 + C6996) + C6999) * C90634 * C89 +
           (C7002 - (C7001 + C7000) + C7003) * C90634 * C90 +
           (C7004 - (C7005 + C7006) + C7007) * C90634 * C91) *
              C90771 +
          (C7011 * C89 + (C7006 + C7005 - C7004 - C7007) * C90634 * C90 +
           (C343 * C6771 + C416 * C6692 -
            (C307 * C833 + C90623 * C1097) * C6772 -
            (C307 * C929 + C90623 * C1199) * C90555) *
               C90634 * C91) *
              C6691) *
         C90567) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C6771 +
            (C307 * C182 + C90623 * C394) * C6692 -
            (C307 * C832 + C90623 * C1094) * C6772 -
            (C307 * C927 + C90623 * C1195) * C90555) *
               C26429 +
           (C27910 * C6771 + C27998 * C6692 - C29752 * C6772 -
            C29858 * C90555) *
               C26430 +
           (C27912 * C6771 + C27999 * C6692 - C29754 * C6772 -
            C29860 * C90555) *
               C26431) *
              C90485 * C90780 +
          ((C6998 - (C6997 + C6996) + C6999) * C26429 +
           (C8536 - (C8537 + C8538) + C8548) * C26430 +
           ((C307 * C5470 + C90623 * C5716) * C6772 -
            (C5018 * C6692 + C4930 * C6771) +
            (C307 * C5556 + C90623 * C5796) * C90555) *
               C26431) *
              C90485 * C90771 +
          (C7010 * C26429 + (C8543 + C8542 - C8541 - C8549) * C26430 +
           (C4932 * C6771 + C5019 * C6692 -
            (C307 * C5469 + C90623 * C5715) * C6772 -
            (C307 * C5555 + C90623 * C5797) * C90555) *
               C26431) *
              C90485 * C6691) *
         C90567) /
            (p * q * std::sqrt(p + q));
    d2eeyz[30] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
             C13732 * C2570 + C13578 * C2827) *
                C244 +
            (C13730 * C245 + C13576 * C474 + C13731 * C1011 + C13577 * C1301 +
             C13732 * C2745 + C13578 * C3017) *
                C90567) *
               C90634 * C90485 * C6692 -
           ((C13732 * C3489 + C13578 * C3654 + C13731 * C2745 + C13577 * C3017 +
             C13730 * C1011 + C13576 * C1301) *
                C90567 +
            (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
             C13730 * C832 + C13576 * C1094) *
                C244) *
               C90634 * C90485 * C90555) *
              C90780 +
          (((C13730 * C829 + C13576 * C1093 + C13731 * C2571 + C13577 * C2828 +
             C13732 * C3366 + C13578 * C3544) *
                C244 +
            (C13730 * C1010 + C13576 * C1300 + C13731 * C2746 + C13577 * C3018 +
             C13732 * C3488 + C13578 * C3653) *
                C90567) *
               C90634 * C90485 * C90555 -
           ((C13732 * C2746 + C13578 * C3018 + C13731 * C1010 + C13577 * C1300 +
             C13730 * C246 + C13576 * C475) *
                C90567 +
            (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
             C13730 * C108 + C13576 * C309) *
                C244) *
               C90634 * C90485 * C6692) *
              C90771 +
          (((C13730 * C109 + C13576 * C310 + C13731 * C830 + C13577 * C1095 +
             C13732 * C2572 + C13578 * C2829) *
                C244 +
            (C13730 * C247 + C13576 * C476 + C13731 * C1009 + C13577 * C1299 +
             C13732 * C2747 + C13578 * C3019) *
                C90567) *
               C90634 * C90485 * C6692 -
           ((C13732 * C3487 + C13578 * C3652 + C13731 * C2747 + C13577 * C3019 +
             C13730 * C1009 + C13576 * C1299) *
                C90567 +
            (C13732 * C3365 + C13578 * C3543 + C13731 * C2572 + C13577 * C2829 +
             C13730 * C830 + C13576 * C1095) *
                C244) *
               C90634 * C90485 * C90555) *
              C6691)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C244 +
             (C307 * C245 + C90623 * C474) * C90567) *
                C90634 * C89 +
            (C481 + C497) * C90634 * C90 + C503 * C91) *
               C6692 -
           (C1321 * C91 + (C1318 + C1310) * C90634 * C90 +
            ((C307 * C1011 + C90623 * C1301) * C90567 +
             (C307 * C832 + C90623 * C1094) * C244) *
                C90634 * C89) *
               C90555) *
              C90780 +
          (((C1310 + C1318) * C90634 * C89 + (C1307 + C1317) * C90634 * C90 +
            (C1311 + C1319) * C90634 * C91) *
               C90555 -
           (C504 * C91 + (C498 + C484) * C90634 * C90 +
            (C497 + C481) * C90634 * C89) *
               C6692) *
              C90771 +
          ((C503 * C89 + (C489 + C499) * C90634 * C90 +
            (C490 + C500) * C90634 * C91) *
               C6692 -
           (((C307 * C1013 + C90623 * C1303) * C90567 +
             (C307 * C833 + C90623 * C1097) * C244) *
                C90634 * C91 +
            (C1319 + C1311) * C90634 * C90 + C1321 * C89) *
               C90555) *
              C6691)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C244 +
             (C307 * C245 + C90623 * C474) * C90567) *
                C26429 +
            (C27910 * C244 + C28080 * C90567) * C26430 +
            (C27912 * C244 + C28081 * C90567) * C26431) *
               C90485 * C6692 -
           ((C29949 * C90567 + C29754 * C244) * C26431 +
            (C29948 * C90567 + C29752 * C244) * C26430 +
            ((C307 * C1011 + C90623 * C1301) * C90567 +
             (C307 * C832 + C90623 * C1094) * C244) *
                C26429) *
               C90485 * C90555) *
              C90780 +
          (((C1310 + C1318) * C26429 +
            (C8433 * C244 + C8659 * C90567) * C26430 +
            ((C307 * C5470 + C90623 * C5716) * C244 +
             (C307 * C5636 + C90623 * C5873) * C90567) *
                C26431) *
               C90485 * C90555 -
           ((C5114 * C90567 + C4930 * C244) * C26431 +
            (C2180 * C90567 + C1984 * C244) * C26430 + (C497 + C481) * C26429) *
               C90485 * C6692) *
              C90771 +
          ((C501 * C26429 + (C1986 * C244 + C2182 * C90567) * C26430 +
            (C4932 * C244 + C5115 * C90567) * C26431) *
               C90485 * C6692 -
           (((C307 * C5635 + C90623 * C5874) * C90567 +
             (C307 * C5469 + C90623 * C5715) * C244) *
                C26431 +
            (C8660 * C90567 + C8435 * C244) * C26430 + C1320 * C26429) *
               C90485 * C90555) *
              C6691)) /
            (p * q * std::sqrt(p + q));
    d2eezx[30] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C6694 +
            (C554 * C116 + C90634 * C561) * C90780 - C584 * C6695 -
            C585 * C90771 + C586 * C6696 + C587 * C6691) *
               C90485 * C13576 +
           (C20050 + C20051 - C20052 - C20053 + C20054 + C20055) * C90485 *
               C13577 +
           (C20056 + C20057 - C20058 - C20059 + C20060 + C20061) * C90485 *
               C13578) *
              C90567 * C6692 +
          ((C20052 - (C20051 + C20050) + C20053 - C20054 - C20055) * C90485 *
               C13576 +
           (C20058 - (C20057 + C20056) + C20059 - C20060 - C20061) * C90485 *
               C13577 +
           (C16060 * C6695 - (C16061 * C90780 + C16062 * C6694) +
            C16063 * C90771 - (C554 * C3365 + C90634 * C3705) * C6696 -
            (C554 * C3368 + C90634 * C3708) * C6691) *
               C90485 * C13578) *
              C90567 * C90555)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C6694 +
            (C554 * C116 + C90634 * C561) * C90780 - C584 * C6695 -
            C585 * C90771 + C586 * C6696 + C587 * C6691) *
               C89 +
           (C584 * C6694 + C585 * C90780 - C586 * C6695 - C587 * C90771 +
            C588 * C6696 + C589 * C6691) *
               C90 +
           (C586 * C6694 + C587 * C90780 - C588 * C6695 - C589 * C90771 +
            C590 * C6696 + C591 * C6691) *
               C91) *
              C90623 * C90567 * C6692 +
          ((C1418 * C6695 -
            ((C554 * C839 + C90634 * C1400) * C90780 +
             (C554 * C832 + C90634 * C1396) * C6694) +
            C1419 * C90771 - C1420 * C6696 - C1421 * C6691) *
               C89 +
           (C1420 * C6695 - (C1419 * C90780 + C1418 * C6694) + C1421 * C90771 -
            C1422 * C6696 - C1423 * C6691) *
               C90 +
           (C1422 * C6695 - (C1421 * C90780 + C1420 * C6694) + C1423 * C90771 -
            (C554 * C833 + C90634 * C1399) * C6696 -
            (C554 * C843 + C90634 * C1404) * C6691) *
               C91) *
              C90623 * C90567 * C90555)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C26732 * C107 + C26429 * C555 + C26733 * C1700 + C26430 * C2264 +
            C26734 * C4656 + C26431 * C5191) *
               C6694 +
           (C26732 * C116 + C26429 * C561 + C26733 * C1707 + C26430 * C2268 +
            C26734 * C4663 + C26431 * C5195) *
               C90780 -
           (C26734 * C4657 + C26431 * C5192 + C26733 * C1697 + C26430 * C2263 +
            C26732 * C108 + C26429 * C556) *
               C6695 -
           (C26734 * C4664 + C26431 * C5196 + C26733 * C1706 + C26430 * C2269 +
            C26732 * C117 + C26429 * C562) *
               C90771 +
           (C26732 * C109 + C26429 * C557 + C26733 * C1698 + C26430 * C2265 +
            C26734 * C4658 + C26431 * C5193) *
               C6696 +
           (C26732 * C118 + C26429 * C563 + C26733 * C1705 + C26430 * C2270 +
            C26734 * C4665 + C26431 * C5197) *
               C6691) *
              C90485 * C90623 * C90567 * C6692 +
          ((C26732 * C829 + C26429 * C1395 + C26733 * C3892 + C26430 * C4408 +
            C26734 * C5470 + C26431 * C5950) *
               C6695 -
           ((C26734 * C5474 + C26431 * C5954 + C26733 * C3900 + C26430 * C4413 +
             C26732 * C839 + C26429 * C1400) *
                C90780 +
            (C26734 * C5471 + C26431 * C5951 + C26733 * C3891 + C26430 * C4407 +
             C26732 * C832 + C26429 * C1396) *
                C6694) +
           (C26732 * C838 + C26429 * C1401 + C26733 * C3901 + C26430 * C4414 +
            C26734 * C5473 + C26431 * C5953) *
               C90771 -
           (C26734 * C5469 + C26431 * C5949 + C26733 * C3893 + C26430 * C4409 +
            C26732 * C830 + C26429 * C1397) *
               C6696 -
           (C26734 * C5472 + C26431 * C5952 + C26733 * C3902 + C26430 * C4415 +
            C26732 * C837 + C26429 * C1402) *
               C6691) *
              C90485 * C90623 * C90567 * C90555)) /
            (p * q * std::sqrt(p + q));
    d2eezy[30] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C6771 +
            (C554 * C182 + C90634 * C641) * C6692 - C14614 * C6772 -
            C14700 * C90555) *
               C90485 * C13576 +
           (C14614 * C6771 + C14700 * C6692 - C14616 * C6772 -
            C14701 * C90555) *
               C90485 * C13577 +
           (C14616 * C6771 + C14701 * C6692 - C16062 * C6772 -
            C16151 * C90555) *
               C90485 * C13578) *
              C90780 +
          ((C7236 - (C7235 + C7234) + C7237) * C90485 * C13576 +
           (C3122 * C6772 - (C1518 * C6692 + C1418 * C6771) + C3218 * C90555) *
               C90485 * C13577 +
           (C16060 * C6772 - (C3218 * C6692 + C3122 * C6771) +
            C16152 * C90555) *
               C90485 * C13578) *
              C90771 +
          (C7248 * C90485 * C13576 +
           (C1420 * C6771 + C1520 * C6692 - C3124 * C6772 - C3219 * C90555) *
               C90485 * C13577 +
           (C3124 * C6771 + C3219 * C6692 -
            (C554 * C3365 + C90634 * C3705) * C6772 -
            (C554 * C3431 + C90634 * C3763) * C90555) *
               C90485 * C13578) *
              C6691) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C6771 +
            (C554 * C182 + C90634 * C641) * C6692 -
            (C554 * C832 + C90634 * C1396) * C6772 -
            (C554 * C927 + C90634 * C1497) * C90555) *
               C89 +
           (C7234 + C7235 - C7236 - C7237) * C90 + C7248 * C91) *
              C90623 * C90780 +
          ((C7236 - (C7235 + C7234) + C7237) * C89 +
           (C7240 - (C7239 + C7238) + C7241) * C90 +
           (C7242 - (C7243 + C7244) + C7245) * C91) *
              C90623 * C90771 +
          (C7248 * C89 + (C7244 + C7243 - C7242 - C7245) * C90 +
           (C590 * C6771 + C663 * C6692 -
            (C554 * C833 + C90634 * C1399) * C6772 -
            (C554 * C929 + C90634 * C1501) * C90555) *
               C91) *
              C90623 * C6691) *
         C90567) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C26732 * C107 + C26429 * C555 + C26733 * C1700 + C26430 * C2264 +
            C26734 * C4656 + C26431 * C5191) *
               C6771 +
           (C26732 * C182 + C26429 * C641 + C26733 * C1794 + C26430 * C2368 +
            C26734 * C4746 + C26431 * C5285) *
               C6692 -
           (C26734 * C5471 + C26431 * C5951 + C26733 * C3891 + C26430 * C4407 +
            C26732 * C832 + C26429 * C1396) *
               C6772 -
           (C26734 * C5557 + C26431 * C6029 + C26733 * C3989 + C26430 * C4493 +
            C26732 * C927 + C26429 * C1497) *
               C90555) *
              C90485 * C90623 * C90780 +
          ((C26732 * C829 + C26429 * C1395 + C26733 * C3892 + C26430 * C4408 +
            C26734 * C5470 + C26431 * C5950) *
               C6772 -
           ((C26734 * C4747 + C26431 * C5286 + C26733 * C1791 + C26430 * C2365 +
             C26732 * C183 + C26429 * C642) *
                C6692 +
            (C26734 * C4657 + C26431 * C5192 + C26733 * C1697 + C26430 * C2263 +
             C26732 * C108 + C26429 * C556) *
                C6771) +
           (C26732 * C926 + C26429 * C1498 + C26733 * C3990 + C26430 * C4495 +
            C26734 * C5556 + C26431 * C6030) *
               C90555) *
              C90485 * C90623 * C90771 +
          ((C26732 * C109 + C26429 * C557 + C26733 * C1698 + C26430 * C2265 +
            C26734 * C4658 + C26431 * C5193) *
               C6771 +
           (C26732 * C184 + C26429 * C643 + C26733 * C1792 + C26430 * C2366 +
            C26734 * C4748 + C26431 * C5287) *
               C6692 -
           (C26734 * C5469 + C26431 * C5949 + C26733 * C3893 + C26430 * C4409 +
            C26732 * C830 + C26429 * C1397) *
               C6772 -
           (C26734 * C5555 + C26431 * C6031 + C26733 * C3991 + C26430 * C4497 +
            C26732 * C925 + C26429 * C1499) *
               C90555) *
              C90485 * C90623 * C6691) *
         C90567) /
            (p * q * std::sqrt(p + q));
    d2eezz[30] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C244 +
             (C554 * C245 + C90634 * C719) * C90567) *
                C90485 * C13576 +
            (C14776 + C14784) * C90485 * C13577 + C16237 * C13578) *
               C6692 -
           (C16759 * C13578 + (C14785 + C14779) * C90485 * C13577 +
            (C14784 + C14776) * C90485 * C13576) *
               C90555) *
              C90780 +
          (((C1611 + C1619) * C90485 * C13576 +
            (C3300 + C3308) * C90485 * C13577 +
            (C16233 + C16242) * C90485 * C13578) *
               C90555 -
           (C16240 * C13578 + (C1619 + C1611) * C90485 * C13577 +
            (C742 + C726) * C90485 * C13576) *
               C6692) *
              C90771 +
          ((C746 * C90485 * C13576 + (C1608 + C1618) * C90485 * C13577 +
            (C3303 + C3309) * C90485 * C13578) *
               C6692 -
           (((C554 * C3487 + C90634 * C3814) * C90567 +
             (C554 * C3365 + C90634 * C3705) * C244) *
                C90485 * C13578 +
            (C3309 + C3303) * C90485 * C13577 + C1621 * C90485 * C13576) *
               C90555) *
              C6691)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C244 +
             (C554 * C245 + C90634 * C719) * C90567) *
                C89 +
            (C726 + C742) * C90 + C746 * C91) *
               C90623 * C6692 -
           (C1621 * C91 + (C1619 + C1611) * C90 +
            ((C554 * C1011 + C90634 * C1602) * C90567 +
             (C554 * C832 + C90634 * C1396) * C244) *
                C89) *
               C90623 * C90555) *
              C90780 +
          (((C1611 + C1619) * C89 + (C1608 + C1618) * C90 +
            (C1612 + C1620) * C91) *
               C90623 * C90555 -
           (C747 * C91 + (C743 + C729) * C90 + (C742 + C726) * C89) * C90623 *
               C6692) *
              C90771 +
          ((C746 * C89 + (C734 + C744) * C90 + (C735 + C745) * C91) * C90623 *
               C6692 -
           (((C554 * C1013 + C90634 * C1604) * C90567 +
             (C554 * C833 + C90634 * C1399) * C244) *
                C91 +
            (C1620 + C1612) * C90 + C1621 * C89) *
               C90623 * C90555) *
              C6691)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C26732 * C107 + C26429 * C555 + C26733 * C1700 + C26430 * C2264 +
             C26734 * C4656 + C26431 * C5191) *
                C244 +
            (C26732 * C245 + C26429 * C719 + C26733 * C1879 + C26430 * C2460 +
             C26734 * C4831 + C26431 * C5373) *
                C90567) *
               C90485 * C90623 * C6692 -
           ((C26734 * C5637 + C26431 * C6106 + C26733 * C4075 + C26430 * C4573 +
             C26732 * C1011 + C26429 * C1602) *
                C90567 +
            (C26734 * C5471 + C26431 * C5951 + C26733 * C3891 + C26430 * C4407 +
             C26732 * C832 + C26429 * C1396) *
                C244) *
               C90485 * C90623 * C90555) *
              C90780 +
          (((C26732 * C829 + C26429 * C1395 + C26733 * C3892 + C26430 * C4408 +
             C26734 * C5470 + C26431 * C5950) *
                C244 +
            (C26732 * C1010 + C26429 * C1601 + C26733 * C4076 + C26430 * C4574 +
             C26734 * C5636 + C26431 * C6107) *
                C90567) *
               C90485 * C90623 * C90555 -
           ((C26734 * C4832 + C26431 * C5374 + C26733 * C1878 + C26430 * C2461 +
             C26732 * C246 + C26429 * C720) *
                C90567 +
            (C26734 * C4657 + C26431 * C5192 + C26733 * C1697 + C26430 * C2263 +
             C26732 * C108 + C26429 * C556) *
                C244) *
               C90485 * C90623 * C6692) *
              C90771 +
          (((C26732 * C109 + C26429 * C557 + C26733 * C1698 + C26430 * C2265 +
             C26734 * C4658 + C26431 * C5193) *
                C244 +
            (C26732 * C247 + C26429 * C721 + C26733 * C1877 + C26430 * C2462 +
             C26734 * C4833 + C26431 * C5375) *
                C90567) *
               C90485 * C90623 * C6692 -
           ((C26734 * C5635 + C26431 * C6108 + C26733 * C4077 + C26430 * C4575 +
             C26732 * C1009 + C26429 * C1600) *
                C90567 +
            (C26734 * C5469 + C26431 * C5949 + C26733 * C3893 + C26430 * C4409 +
             C26732 * C830 + C26429 * C1397) *
                C244) *
               C90485 * C90623 * C90555) *
              C6691)) /
            (p * q * std::sqrt(p + q));
    d2eexx[31] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C7401 +
            (C13579 * C116 + C90485 * C125) * C7396 -
            (C13579 * C108 + C90485 * C114) * C7402 -
            (C13579 * C117 + C90485 * C126) * C90503) *
               C13576 +
           (C20284 + C20285 - C20286 - C20287) * C13577 + C20298 * C13578) *
              C90634 * C90567 * C90781 +
          ((C20286 - (C20285 + C20284) + C20287) * C13576 +
           (C20290 - (C20289 + C20288) + C20291) * C13577 +
           (C20292 - (C20293 + C20294) + C20295) * C13578) *
              C90634 * C90567 * C90774 +
          (C20298 * C13576 + (C20294 + C20293 - C20292 - C20295) * C13577 +
           (C16309 * C7401 + C16310 * C7396 -
            (C13579 * C15526 + C90485 * C15529) * C7402 -
            (C13579 * C15530 + C90485 * C15532) * C90503) *
               C13578) *
              C90634 * C90567 * C7400)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C7401 +
           (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 + C102 * C118 +
            C91 * C127) *
               C7396 -
           (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 + C100 * C108 +
            C89 * C114) *
               C7402 -
           (C102 * C120 + C91 * C128 + C101 * C118 + C90 * C127 + C100 * C117 +
            C89 * C126) *
               C90503) *
              C90623 * C90634 * C90567 * C90781 +
          ((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 + C102 * C831 +
            C91 * C836) *
               C7402 -
           ((C102 * C837 + C91 * C844 + C101 * C838 + C90 * C845 + C100 * C839 +
             C89 * C846) *
                C7396 +
            (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 + C100 * C832 +
             C89 * C840) *
                C7401) +
           (C100 * C838 + C89 * C845 + C101 * C837 + C90 * C844 + C102 * C841 +
            C91 * C847) *
               C90503) *
              C90623 * C90634 * C90567 * C90774 +
          ((C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
            C102 * C2572 + C91 * C2576) *
               C7401 +
           (C100 * C2577 + C89 * C2582 + C101 * C2578 + C90 * C2583 +
            C102 * C2579 + C91 * C2584) *
               C7396 -
           (C102 * C2573 + C91 * C2580 + C101 * C2572 + C90 * C2576 +
            C100 * C2571 + C89 * C2575) *
               C7402 -
           (C102 * C2581 + C91 * C2585 + C101 * C2579 + C90 * C2584 +
            C100 * C2578 + C89 * C2583) *
               C90503) *
              C90623 * C90634 * C90567 * C7400)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C7401 +
            (C13579 * C116 + C90485 * C125) * C7396 -
            (C13579 * C108 + C90485 * C114) * C7402 -
            (C13579 * C117 + C90485 * C126) * C90503) *
               C90623 * C26429 +
           (C27600 * C7401 + C27601 * C7396 - C27602 * C7402 -
            C27603 * C90503) *
               C90623 * C26430 +
           (C27606 * C7401 + C27607 * C7396 - C27608 * C7402 -
            C27609 * C90503) *
               C90623 * C26431) *
              C90567 * C90781 +
          ((C20286 - (C20285 + C20284) + C20287) * C90623 * C26429 +
           (C21025 - (C21011 + C21012) + C21026) * C90623 * C26430 +
           ((C13579 * C5470 + C90485 * C5476) * C7402 -
            (C18363 * C7396 + C18362 * C7401) +
            (C13579 * C5473 + C90485 * C5479) * C90503) *
               C90623 * C26431) *
              C90567 * C90774 +
          (C20298 * C90623 * C26429 +
           (C21018 + C21017 - C21027 - C21028) * C90623 * C26430 +
           (C18364 * C7401 + C18365 * C7396 -
            (C13579 * C17652 + C90485 * C17655) * C7402 -
            (C13579 * C17656 + C90485 * C17658) * C90503) *
               C90623 * C26431) *
              C90567 * C7400)) /
            (p * q * std::sqrt(p + q));
    d2eexy[31] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C7477 +
            (C13579 * C182 + C90485 * C188) * C90781 - C14082 * C7478 -
            C14192 * C90774 + C14088 * C7479 + C14193 * C7400) *
               C13576 +
           (C14082 * C7477 + C14192 * C90781 - C14088 * C7478 -
            C14193 * C90774 + C15553 * C7479 + C15643 * C7400) *
               C13577 +
           (C14088 * C7477 + C14193 * C90781 - C15553 * C7478 -
            C15643 * C90774 + C16309 * C7479 + C16367 * C7400) *
               C13578) *
              C90634 * C7396 +
          ((C14084 * C7478 -
            ((C13579 * C183 + C90485 * C189) * C90781 +
             (C13579 * C108 + C90485 * C114) * C7477) +
            C14194 * C90774 - C14090 * C7479 - C14195 * C7400) *
               C13576 +
           (C14090 * C7478 - (C14194 * C90781 + C14084 * C7477) +
            C14195 * C90774 - C15551 * C7479 - C15644 * C7400) *
               C13577 +
           (C15551 * C7478 - (C14195 * C90781 + C14090 * C7477) +
            C15644 * C90774 - (C13579 * C15526 + C90485 * C15529) * C7479 -
            (C13579 * C15635 + C90485 * C15637) * C7400) *
               C13578) *
              C90634 * C90503) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C7477 +
           (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 + C102 * C184 +
            C91 * C190) *
               C90781 -
           (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 + C100 * C832 +
            C89 * C840) *
               C7478 -
           (C102 * C925 + C91 * C930 + C101 * C926 + C90 * C931 + C100 * C927 +
            C89 * C932) *
               C90774 +
           (C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
            C102 * C2572 + C91 * C2576) *
               C7479 +
           (C100 * C2663 + C89 * C2667 + C101 * C2664 + C90 * C2668 +
            C102 * C2665 + C91 * C2669) *
               C7400) *
              C90623 * C90634 * C7396 +
          ((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 + C102 * C831 +
            C91 * C836) *
               C7478 -
           ((C102 * C185 + C91 * C191 + C101 * C184 + C90 * C190 + C100 * C183 +
             C89 * C189) *
                C90781 +
            (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 + C100 * C108 +
             C89 * C114) *
                C7477) +
           (C100 * C926 + C89 * C931 + C101 * C925 + C90 * C930 + C102 * C928 +
            C91 * C933) *
               C90774 -
           (C102 * C2573 + C91 * C2580 + C101 * C2572 + C90 * C2576 +
            C100 * C2571 + C89 * C2575) *
               C7479 -
           (C102 * C2666 + C91 * C2670 + C101 * C2665 + C90 * C2669 +
            C100 * C2664 + C89 * C2668) *
               C7400) *
              C90623 * C90634 * C90503) *
         C90567) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C7477 +
            (C13579 * C182 + C90485 * C188) * C90781 - C14082 * C7478 -
            C14192 * C90774 + C14088 * C7479 + C14193 * C7400) *
               C90623 * C26429 +
           (C27600 * C7477 + C27716 * C90781 - C16859 * C7478 -
            C16953 * C90774 + C16857 * C7479 + C16954 * C7400) *
               C90623 * C26430 +
           (C27606 * C7477 + C27717 * C90781 - C18362 * C7478 -
            C18450 * C90774 + C18364 * C7479 + C18451 * C7400) *
               C90623 * C26431) *
              C7396 +
          ((C14084 * C7478 -
            ((C13579 * C183 + C90485 * C189) * C90781 +
             (C13579 * C108 + C90485 * C114) * C7477) +
            C14194 * C90774 - C14090 * C7479 - C14195 * C7400) *
               C90623 * C26429 +
           (C21021 * C7478 - (C27719 * C90781 + C27602 * C7477) +
            C21133 * C90774 - C21023 * C7479 - C21134 * C7400) *
               C90623 * C26430 +
           ((C13579 * C5470 + C90485 * C5476) * C7478 -
            (C27718 * C90781 + C27608 * C7477) +
            (C13579 * C5556 + C90485 * C5559) * C90774 -
            (C13579 * C17652 + C90485 * C17655) * C7479 -
            (C13579 * C17734 + C90485 * C17736) * C7400) *
               C90623 * C26431) *
              C90503) *
         C90567) /
            (p * q * std::sqrt(p + q));
    d2eexz[31] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C13579 * C107 + C90485 * C113) * C244 +
                       (C13579 * C245 + C90485 * C251) * C90567) *
                          C13576 +
                      (C14272 + C14296) * C13577 + C15723 * C13578) *
                         C90634 * C90781 -
                     (C16420 * C13578 + (C14297 + C14275) * C13577 +
                      (C14296 + C14272) * C13576) *
                         C90634 * C90774 +
                     (C15723 * C13576 + (C15726 + C15733) * C13577 +
                      (C16421 + C16425) * C13578) *
                         C90634 * C7400) *
                        C7396 +
                    (((C14278 + C14298) * C13576 + (C14281 + C14299) * C13577 +
                      (C15727 + C15734) * C13578) *
                         C90634 * C90774 -
                     (C15730 * C13578 + (C14298 + C14278) * C13577 +
                      ((C13579 * C246 + C90485 * C252) * C90567 +
                       (C13579 * C108 + C90485 * C114) * C244) *
                          C13576) *
                         C90634 * C90781 -
                     (((C13579 * C15719 + C90485 * C15721) * C90567 +
                       (C13579 * C15526 + C90485 * C15529) * C244) *
                          C13578 +
                      (C15734 + C15727) * C13577 + C15730 * C13576) *
                         C90634 * C7400) *
                        C90503)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                       C102 * C109 + C91 * C115) *
                          C244 +
                      (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 +
                       C102 * C247 + C91 * C253) *
                          C90567) *
                         C90623 * C90634 * C90781 -
                     ((C102 * C1009 + C91 * C1014 + C101 * C1010 + C90 * C1015 +
                       C100 * C1011 + C89 * C1016) *
                          C90567 +
                      (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                       C100 * C832 + C89 * C840) *
                          C244) *
                         C90623 * C90634 * C90774 +
                     ((C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
                       C102 * C2572 + C91 * C2576) *
                          C244 +
                      (C100 * C2745 + C89 * C2749 + C101 * C2746 + C90 * C2750 +
                       C102 * C2747 + C91 * C2751) *
                          C90567) *
                         C90623 * C90634 * C7400) *
                        C7396 +
                    (((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 +
                       C102 * C831 + C91 * C836) *
                          C244 +
                      (C100 * C1010 + C89 * C1015 + C101 * C1009 + C90 * C1014 +
                       C102 * C1012 + C91 * C1017) *
                          C90567) *
                         C90623 * C90634 * C90774 -
                     ((C102 * C248 + C91 * C254 + C101 * C247 + C90 * C253 +
                       C100 * C246 + C89 * C252) *
                          C90567 +
                      (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                       C100 * C108 + C89 * C114) *
                          C244) *
                         C90623 * C90634 * C90781 -
                     ((C102 * C2748 + C91 * C2752 + C101 * C2747 + C90 * C2751 +
                       C100 * C2746 + C89 * C2750) *
                          C90567 +
                      (C102 * C2573 + C91 * C2580 + C101 * C2572 + C90 * C2576 +
                       C100 * C2571 + C89 * C2575) *
                          C244) *
                         C90623 * C90634 * C7400) *
                        C90503)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C13579 * C107 + C90485 * C113) * C244 +
                       (C13579 * C245 + C90485 * C251) * C90567) *
                          C90623 * C26429 +
                      (C27600 * C244 + C27814 * C90567) * C90623 * C26430 +
                      (C27606 * C244 + C27815 * C90567) * C90623 * C26431) *
                         C90781 -
                     ((C18542 * C90567 + C18362 * C244) * C90623 * C26431 +
                      (C17049 * C90567 + C16859 * C244) * C90623 * C26430 +
                      (C14296 + C14272) * C90623 * C26429) *
                         C90774 +
                     (C15723 * C90623 * C26429 +
                      (C16857 * C244 + C17051 * C90567) * C90623 * C26430 +
                      (C18364 * C244 + C18543 * C90567) * C90623 * C26431) *
                         C7400) *
                        C7396 +
                    (((C14278 + C14298) * C90623 * C26429 +
                      (C21021 * C244 + C21245 * C90567) * C90623 * C26430 +
                      ((C13579 * C5470 + C90485 * C5476) * C244 +
                       (C13579 * C5636 + C90485 * C5639) * C90567) *
                          C90623 * C26431) *
                         C90774 -
                     ((C27817 * C90567 + C27608 * C244) * C90623 * C26431 +
                      (C27816 * C90567 + C27602 * C244) * C90623 * C26430 +
                      ((C13579 * C246 + C90485 * C252) * C90567 +
                       (C13579 * C108 + C90485 * C114) * C244) *
                          C90623 * C26429) *
                         C90781 -
                     (((C13579 * C17812 + C90485 * C17814) * C90567 +
                       (C13579 * C17652 + C90485 * C17655) * C244) *
                          C90623 * C26431 +
                      (C21246 * C90567 + C21023 * C244) * C90623 * C26430 +
                      C15730 * C90623 * C26429) *
                         C7400) *
                        C90503)) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[31] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C7401 +
           (C13730 * C116 + C13576 * C314 + C13731 * C839 + C13577 * C1098 +
            C13732 * C2577 + C13578 * C2831) *
               C7396 -
           (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
            C13730 * C108 + C13576 * C309) *
               C7402 -
           (C13732 * C2578 + C13578 * C2832 + C13731 * C838 + C13577 * C1099 +
            C13730 * C117 + C13576 * C315) *
               C90503) *
              C90634 * C90485 * C90567 * C90781 +
          ((C13730 * C829 + C13576 * C1093 + C13731 * C2571 + C13577 * C2828 +
            C13732 * C3366 + C13578 * C3544) *
               C7402 -
           ((C13732 * C3370 + C13578 * C3548 + C13731 * C2577 + C13577 * C2831 +
             C13730 * C839 + C13576 * C1098) *
                C7396 +
            (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
             C13730 * C832 + C13576 * C1094) *
                C7401) +
           (C13730 * C838 + C13576 * C1099 + C13731 * C2578 + C13577 * C2832 +
            C13732 * C3369 + C13578 * C3547) *
               C90503) *
              C90634 * C90485 * C90567 * C90774 +
          ((C13730 * C2570 + C13576 * C2827 + C13731 * C3367 + C13577 * C3545 +
            C13732 * C15525 + C13578 * C15808) *
               C7401 +
           (C13730 * C2577 + C13576 * C2831 + C13731 * C3370 + C13577 * C3548 +
            C13732 * C15528 + C13578 * C15810) *
               C7396 -
           (C13732 * C15526 + C13578 * C15809 + C13731 * C3366 +
            C13577 * C3544 + C13730 * C2571 + C13576 * C2828) *
               C7402 -
           (C13732 * C15530 + C13578 * C15811 + C13731 * C3369 +
            C13577 * C3547 + C13730 * C2578 + C13576 * C2832) *
               C90503) *
              C90634 * C90485 * C90567 * C7400)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C7401 +
            (C307 * C116 + C90623 * C314) * C7396 - C337 * C7402 -
            C338 * C90503) *
               C90634 * C89 +
           (C337 * C7401 + C338 * C7396 - C339 * C7402 - C340 * C90503) *
               C90634 * C90 +
           (C339 * C7401 + C340 * C7396 - C341 * C7402 - C342 * C90503) *
               C90634 * C91) *
              C90567 * C90781 +
          ((C1116 * C7402 -
            ((C307 * C839 + C90623 * C1098) * C7396 +
             (C307 * C832 + C90623 * C1094) * C7401) +
            C1117 * C90503) *
               C90634 * C89 +
           (C1118 * C7402 - (C1117 * C7396 + C1116 * C7401) + C1119 * C90503) *
               C90634 * C90 +
           (C1120 * C7402 - (C1119 * C7396 + C1118 * C7401) + C1121 * C90503) *
               C90634 * C91) *
              C90567 * C90774 +
          (((C307 * C2570 + C90623 * C2827) * C7401 +
            (C307 * C2577 + C90623 * C2831) * C7396 - C2844 * C7402 -
            C2845 * C90503) *
               C90634 * C89 +
           (C2844 * C7401 + C2845 * C7396 - C2846 * C7402 - C2847 * C90503) *
               C90634 * C90 +
           (C2846 * C7401 + C2847 * C7396 -
            (C307 * C2573 + C90623 * C2830) * C7402 -
            (C307 * C2581 + C90623 * C2834) * C90503) *
               C90634 * C91) *
              C90567 * C7400)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C7401 +
            (C307 * C116 + C90623 * C314) * C7396 - C337 * C7402 -
            C338 * C90503) *
               C26429 +
           (C27910 * C7401 + C27911 * C7396 - C1984 * C7402 - C1985 * C90503) *
               C26430 +
           (C27912 * C7401 + C27913 * C7396 - C4930 * C7402 - C4931 * C90503) *
               C26431) *
              C90485 * C90567 * C90781 +
          ((C1116 * C7402 -
            ((C307 * C839 + C90623 * C1098) * C7396 +
             (C307 * C832 + C90623 * C1094) * C7401) +
            C1117 * C90503) *
               C26429 +
           (C8433 * C7402 - (C29753 * C7396 + C29752 * C7401) +
            C8434 * C90503) *
               C26430 +
           ((C307 * C5470 + C90623 * C5716) * C7402 -
            (C29755 * C7396 + C29754 * C7401) +
            (C307 * C5473 + C90623 * C5719) * C90503) *
               C26431) *
              C90485 * C90567 * C90774 +
          (((C307 * C2570 + C90623 * C2827) * C7401 +
            (C307 * C2577 + C90623 * C2831) * C7396 - C2844 * C7402 -
            C2845 * C90503) *
               C26429 +
           (C29756 * C7401 + C29757 * C7396 -
            (C307 * C3895 + C90623 * C4165) * C7402 -
            (C307 * C3904 + C90623 * C4171) * C90503) *
               C26430 +
           (C29758 * C7401 + C29759 * C7396 -
            (C307 * C17652 + C90623 * C17890) * C7402 -
            (C307 * C17656 + C90623 * C17892) * C90503) *
               C26431) *
              C90485 * C90567 * C7400)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[31] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C7477 +
           (C13730 * C182 + C13576 * C394 + C13731 * C927 + C13577 * C1195 +
            C13732 * C2663 + C13578 * C2921) *
               C90781 -
           (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
            C13730 * C832 + C13576 * C1094) *
               C7478 -
           (C13732 * C3433 + C13578 * C3599 + C13731 * C2663 + C13577 * C2921 +
            C13730 * C927 + C13576 * C1195) *
               C90774 +
           (C13730 * C2570 + C13576 * C2827 + C13731 * C3367 + C13577 * C3545 +
            C13732 * C15525 + C13578 * C15808) *
               C7479 +
           (C13730 * C2663 + C13576 * C2921 + C13731 * C3433 + C13577 * C3599 +
            C13732 * C15634 + C13578 * C15886) *
               C7400) *
              C90634 * C90485 * C7396 +
          ((C13730 * C829 + C13576 * C1093 + C13731 * C2571 + C13577 * C2828 +
            C13732 * C3366 + C13578 * C3544) *
               C7478 -
           ((C13732 * C2664 + C13578 * C2922 + C13731 * C926 + C13577 * C1196 +
             C13730 * C183 + C13576 * C395) *
                C90781 +
            (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
             C13730 * C108 + C13576 * C309) *
                C7477) +
           (C13730 * C926 + C13576 * C1196 + C13731 * C2664 + C13577 * C2922 +
            C13732 * C3432 + C13578 * C3600) *
               C90774 -
           (C13732 * C15526 + C13578 * C15809 + C13731 * C3366 +
            C13577 * C3544 + C13730 * C2571 + C13576 * C2828) *
               C7479 -
           (C13732 * C15635 + C13578 * C15887 + C13731 * C3432 +
            C13577 * C3600 + C13730 * C2664 + C13576 * C2922) *
               C7400) *
              C90634 * C90485 * C90503) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C7477 +
            (C307 * C182 + C90623 * C394) * C90781 -
            (C307 * C832 + C90623 * C1094) * C7478 -
            (C307 * C927 + C90623 * C1195) * C90774 +
            (C307 * C2570 + C90623 * C2827) * C7479 +
            (C307 * C2663 + C90623 * C2921) * C7400) *
               C90634 * C89 +
           (C7703 + C7704 - C7705 - C7706 + C7707 + C7708) * C90634 * C90 +
           (C7709 + C7710 - C7711 - C7712 + C7713 + C7714) * C90634 * C91) *
              C7396 +
          ((C7705 - (C7704 + C7703) + C7706 - C7707 - C7708) * C90634 * C89 +
           (C7711 - (C7710 + C7709) + C7712 - C7713 - C7714) * C90634 * C90 +
           (C1120 * C7478 - (C415 * C90781 + C341 * C7477) + C1219 * C90774 -
            (C307 * C2573 + C90623 * C2830) * C7479 -
            (C307 * C2666 + C90623 * C2924) * C7400) *
               C90634 * C91) *
              C90503) *
         C90567) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C7477 +
            (C307 * C182 + C90623 * C394) * C90781 -
            (C307 * C832 + C90623 * C1094) * C7478 -
            (C307 * C927 + C90623 * C1195) * C90774 +
            (C307 * C2570 + C90623 * C2827) * C7479 +
            (C307 * C2663 + C90623 * C2921) * C7400) *
               C26429 +
           (C27910 * C7477 + C27998 * C90781 - C29752 * C7478 -
            C29858 * C90774 + C29756 * C7479 + C29859 * C7400) *
               C26430 +
           (C27912 * C7477 + C27999 * C90781 - C29754 * C7478 -
            C29860 * C90774 + C29758 * C7479 + C29861 * C7400) *
               C26431) *
              C90485 * C7396 +
          ((C7705 - (C7704 + C7703) + C7706 - C7707 - C7708) * C26429 +
           (C8433 * C7478 - (C2078 * C90781 + C1984 * C7477) + C8546 * C90774 -
            (C307 * C3895 + C90623 * C4165) * C7479 -
            (C307 * C3993 + C90623 * C4250) * C7400) *
               C26430 +
           ((C307 * C5470 + C90623 * C5716) * C7478 -
            (C5018 * C90781 + C4930 * C7477) +
            (C307 * C5556 + C90623 * C5796) * C90774 -
            (C307 * C17652 + C90623 * C17890) * C7479 -
            (C307 * C17734 + C90623 * C17968) * C7400) *
               C26431) *
              C90485 * C90503) *
         C90567) /
            (p * q * std::sqrt(p + q));
    d2eeyz[31] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
             C13732 * C2570 + C13578 * C2827) *
                C244 +
            (C13730 * C245 + C13576 * C474 + C13731 * C1011 + C13577 * C1301 +
             C13732 * C2745 + C13578 * C3017) *
                C90567) *
               C90634 * C90485 * C90781 -
           ((C13732 * C3489 + C13578 * C3654 + C13731 * C2745 + C13577 * C3017 +
             C13730 * C1011 + C13576 * C1301) *
                C90567 +
            (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
             C13730 * C832 + C13576 * C1094) *
                C244) *
               C90634 * C90485 * C90774 +
           ((C13730 * C2570 + C13576 * C2827 + C13731 * C3367 + C13577 * C3545 +
             C13732 * C15525 + C13578 * C15808) *
                C244 +
            (C13730 * C2745 + C13576 * C3017 + C13731 * C3489 + C13577 * C3654 +
             C13732 * C15718 + C13578 * C15962) *
                C90567) *
               C90634 * C90485 * C7400) *
              C7396 +
          (((C13730 * C829 + C13576 * C1093 + C13731 * C2571 + C13577 * C2828 +
             C13732 * C3366 + C13578 * C3544) *
                C244 +
            (C13730 * C1010 + C13576 * C1300 + C13731 * C2746 + C13577 * C3018 +
             C13732 * C3488 + C13578 * C3653) *
                C90567) *
               C90634 * C90485 * C90774 -
           ((C13732 * C2746 + C13578 * C3018 + C13731 * C1010 + C13577 * C1300 +
             C13730 * C246 + C13576 * C475) *
                C90567 +
            (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
             C13730 * C108 + C13576 * C309) *
                C244) *
               C90634 * C90485 * C90781 -
           ((C13732 * C15719 + C13578 * C15963 + C13731 * C3488 +
             C13577 * C3653 + C13730 * C2746 + C13576 * C3018) *
                C90567 +
            (C13732 * C15526 + C13578 * C15809 + C13731 * C3366 +
             C13577 * C3544 + C13730 * C2571 + C13576 * C2828) *
                C244) *
               C90634 * C90485 * C7400) *
              C90503)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C244 +
             (C307 * C245 + C90623 * C474) * C90567) *
                C90634 * C89 +
            (C481 + C497) * C90634 * C90 + C503 * C91) *
               C90781 -
           (C1321 * C91 + (C1318 + C1310) * C90634 * C90 +
            ((C307 * C1011 + C90623 * C1301) * C90567 +
             (C307 * C832 + C90623 * C1094) * C244) *
                C90634 * C89) *
               C90774 +
           (((C307 * C2570 + C90623 * C2827) * C244 +
             (C307 * C2745 + C90623 * C3017) * C90567) *
                C90634 * C89 +
            (C3022 + C3030) * C90634 * C90 + (C3025 + C3031) * C90634 * C91) *
               C7400) *
              C7396 +
          (((C1310 + C1318) * C90634 * C89 + (C1307 + C1317) * C90634 * C90 +
            (C1311 + C1319) * C90634 * C91) *
               C90774 -
           (C504 * C91 + (C498 + C484) * C90634 * C90 +
            (C497 + C481) * C90634 * C89) *
               C90781 -
           (((C307 * C2748 + C90623 * C3020) * C90567 +
             (C307 * C2573 + C90623 * C2830) * C244) *
                C90634 * C91 +
            (C3031 + C3025) * C90634 * C90 + (C3030 + C3022) * C90634 * C89) *
               C7400) *
              C90503)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C244 +
             (C307 * C245 + C90623 * C474) * C90567) *
                C26429 +
            (C27910 * C244 + C28080 * C90567) * C26430 +
            (C27912 * C244 + C28081 * C90567) * C26431) *
               C90485 * C90781 -
           ((C29949 * C90567 + C29754 * C244) * C26431 +
            (C29948 * C90567 + C29752 * C244) * C26430 +
            ((C307 * C1011 + C90623 * C1301) * C90567 +
             (C307 * C832 + C90623 * C1094) * C244) *
                C26429) *
               C90485 * C90774 +
           (((C307 * C2570 + C90623 * C2827) * C244 +
             (C307 * C2745 + C90623 * C3017) * C90567) *
                C26429 +
            (C29756 * C244 + C29950 * C90567) * C26430 +
            (C29758 * C244 + C29951 * C90567) * C26431) *
               C90485 * C7400) *
              C7396 +
          (((C1310 + C1318) * C26429 +
            (C8433 * C244 + C8659 * C90567) * C26430 +
            ((C307 * C5470 + C90623 * C5716) * C244 +
             (C307 * C5636 + C90623 * C5873) * C90567) *
                C26431) *
               C90485 * C90774 -
           ((C5114 * C90567 + C4930 * C244) * C26431 +
            (C2180 * C90567 + C1984 * C244) * C26430 + (C497 + C481) * C26429) *
               C90485 * C90781 -
           (((C307 * C17812 + C90623 * C18044) * C90567 +
             (C307 * C17652 + C90623 * C17890) * C244) *
                C26431 +
            ((C307 * C4079 + C90623 * C4331) * C90567 +
             (C307 * C3895 + C90623 * C4165) * C244) *
                C26430 +
            (C3030 + C3022) * C26429) *
               C90485 * C7400) *
              C90503)) /
            (p * q * std::sqrt(p + q));
    d2eezx[31] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C7401 +
            (C554 * C116 + C90634 * C561) * C7396 - C584 * C7402 -
            C585 * C90503) *
               C90485 * C13576 +
           (C20743 + C20744 - C20745 - C20746) * C90485 * C13577 +
           C20758 * C13578) *
              C90567 * C90781 +
          ((C20745 - (C20744 + C20743) + C20746) * C90485 * C13576 +
           (C20749 - (C20748 + C20747) + C20750) * C90485 * C13577 +
           (C20751 - (C20752 + C20753) + C20754) * C90485 * C13578) *
              C90567 * C90774 +
          (C20758 * C13576 +
           (C20753 + C20752 - C20751 - C20754) * C90485 * C13577 +
           (C16644 * C7401 + C16645 * C7396 -
            (C554 * C15526 + C90634 * C16039) * C7402 -
            (C554 * C15530 + C90634 * C16041) * C90503) *
               C90485 * C13578) *
              C90567 * C7400)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C7401 +
            (C554 * C116 + C90634 * C561) * C7396 - C584 * C7402 -
            C585 * C90503) *
               C89 +
           (C584 * C7401 + C585 * C7396 - C586 * C7402 - C587 * C90503) * C90 +
           (C586 * C7401 + C587 * C7396 - C588 * C7402 - C589 * C90503) * C91) *
              C90623 * C90567 * C90781 +
          ((C1418 * C7402 -
            ((C554 * C839 + C90634 * C1400) * C7396 +
             (C554 * C832 + C90634 * C1396) * C7401) +
            C1419 * C90503) *
               C89 +
           (C1420 * C7402 - (C1419 * C7396 + C1418 * C7401) + C1421 * C90503) *
               C90 +
           (C1422 * C7402 - (C1421 * C7396 + C1420 * C7401) + C1423 * C90503) *
               C91) *
              C90623 * C90567 * C90774 +
          (((C554 * C2570 + C90634 * C3105) * C7401 +
            (C554 * C2577 + C90634 * C3109) * C7396 - C3122 * C7402 -
            C3123 * C90503) *
               C89 +
           (C3122 * C7401 + C3123 * C7396 - C3124 * C7402 - C3125 * C90503) *
               C90 +
           (C3124 * C7401 + C3125 * C7396 -
            (C554 * C2573 + C90634 * C3108) * C7402 -
            (C554 * C2581 + C90634 * C3112) * C90503) *
               C91) *
              C90623 * C90567 * C7400)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C26732 * C107 + C26429 * C555 + C26733 * C1700 + C26430 * C2264 +
            C26734 * C4656 + C26431 * C5191) *
               C7401 +
           (C26732 * C116 + C26429 * C561 + C26733 * C1707 + C26430 * C2268 +
            C26734 * C4663 + C26431 * C5195) *
               C7396 -
           (C26734 * C4657 + C26431 * C5192 + C26733 * C1697 + C26430 * C2263 +
            C26732 * C108 + C26429 * C556) *
               C7402 -
           (C26734 * C4664 + C26431 * C5196 + C26733 * C1706 + C26430 * C2269 +
            C26732 * C117 + C26429 * C562) *
               C90503) *
              C90485 * C90623 * C90567 * C90781 +
          ((C26732 * C829 + C26429 * C1395 + C26733 * C3892 + C26430 * C4408 +
            C26734 * C5470 + C26431 * C5950) *
               C7402 -
           ((C26734 * C5474 + C26431 * C5954 + C26733 * C3900 + C26430 * C4413 +
             C26732 * C839 + C26429 * C1400) *
                C7396 +
            (C26734 * C5471 + C26431 * C5951 + C26733 * C3891 + C26430 * C4407 +
             C26732 * C832 + C26429 * C1396) *
                C7401) +
           (C26732 * C838 + C26429 * C1401 + C26733 * C3901 + C26430 * C4414 +
            C26734 * C5473 + C26431 * C5953) *
               C90503) *
              C90485 * C90623 * C90567 * C90774 +
          ((C26732 * C2570 + C26429 * C3105 + C26733 * C3896 + C26430 * C4412 +
            C26734 * C17651 + C26431 * C18119) *
               C7401 +
           (C26732 * C2577 + C26429 * C3109 + C26733 * C3905 + C26430 * C4418 +
            C26734 * C17654 + C26431 * C18121) *
               C7396 -
           (C26734 * C17652 + C26431 * C18120 + C26733 * C3895 +
            C26430 * C4411 + C26732 * C2571 + C26429 * C3106) *
               C7402 -
           (C26734 * C17656 + C26431 * C18122 + C26733 * C3904 +
            C26430 * C4417 + C26732 * C2578 + C26429 * C3110) *
               C90503) *
              C90485 * C90623 * C90567 * C7400)) /
            (p * q * std::sqrt(p + q));
    d2eezy[31] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C7477 +
            (C554 * C182 + C90634 * C641) * C90781 - C14614 * C7478 -
            C14700 * C90774 + C14616 * C7479 + C14701 * C7400) *
               C90485 * C13576 +
           (C14614 * C7477 + C14700 * C90781 - C14616 * C7478 -
            C14701 * C90774 + C16062 * C7479 + C16151 * C7400) *
               C90485 * C13577 +
           (C14616 * C7477 + C14701 * C90781 - C16062 * C7478 -
            C16151 * C90774 + C16644 * C7479 + C16703 * C7400) *
               C90485 * C13578) *
              C7396 +
          ((C7939 - (C7938 + C7937) + C7940 - C7941 - C7942) * C90485 * C13576 +
           (C3122 * C7478 - (C1518 * C90781 + C1418 * C7477) + C3218 * C90774 -
            C16060 * C7479 - C16152 * C7400) *
               C90485 * C13577 +
           (C16060 * C7478 - (C3218 * C90781 + C3122 * C7477) +
            C16152 * C90774 - (C554 * C15526 + C90634 * C16039) * C7479 -
            (C554 * C15635 + C90634 * C16145) * C7400) *
               C90485 * C13578) *
              C90503) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C7477 +
            (C554 * C182 + C90634 * C641) * C90781 -
            (C554 * C832 + C90634 * C1396) * C7478 -
            (C554 * C927 + C90634 * C1497) * C90774 +
            (C554 * C2570 + C90634 * C3105) * C7479 +
            (C554 * C2663 + C90634 * C3199) * C7400) *
               C89 +
           (C7937 + C7938 - C7939 - C7940 + C7941 + C7942) * C90 +
           (C7943 + C7944 - C7945 - C7946 + C7947 + C7948) * C91) *
              C90623 * C7396 +
          ((C7939 - (C7938 + C7937) + C7940 - C7941 - C7942) * C89 +
           (C7945 - (C7944 + C7943) + C7946 - C7947 - C7948) * C90 +
           (C1422 * C7478 - (C662 * C90781 + C588 * C7477) + C1521 * C90774 -
            (C554 * C2573 + C90634 * C3108) * C7479 -
            (C554 * C2666 + C90634 * C3202) * C7400) *
               C91) *
              C90623 * C90503) *
         C90567) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C26732 * C107 + C26429 * C555 + C26733 * C1700 + C26430 * C2264 +
            C26734 * C4656 + C26431 * C5191) *
               C7477 +
           (C26732 * C182 + C26429 * C641 + C26733 * C1794 + C26430 * C2368 +
            C26734 * C4746 + C26431 * C5285) *
               C90781 -
           (C26734 * C5471 + C26431 * C5951 + C26733 * C3891 + C26430 * C4407 +
            C26732 * C832 + C26429 * C1396) *
               C7478 -
           (C26734 * C5557 + C26431 * C6029 + C26733 * C3989 + C26430 * C4493 +
            C26732 * C927 + C26429 * C1497) *
               C90774 +
           (C26732 * C2570 + C26429 * C3105 + C26733 * C3896 + C26430 * C4412 +
            C26734 * C17651 + C26431 * C18119) *
               C7479 +
           (C26732 * C2663 + C26429 * C3199 + C26733 * C3994 + C26430 * C4494 +
            C26734 * C17733 + C26431 * C18197) *
               C7400) *
              C90485 * C90623 * C7396 +
          ((C26732 * C829 + C26429 * C1395 + C26733 * C3892 + C26430 * C4408 +
            C26734 * C5470 + C26431 * C5950) *
               C7478 -
           ((C26734 * C4747 + C26431 * C5286 + C26733 * C1791 + C26430 * C2365 +
             C26732 * C183 + C26429 * C642) *
                C90781 +
            (C26734 * C4657 + C26431 * C5192 + C26733 * C1697 + C26430 * C2263 +
             C26732 * C108 + C26429 * C556) *
                C7477) +
           (C26732 * C926 + C26429 * C1498 + C26733 * C3990 + C26430 * C4495 +
            C26734 * C5556 + C26431 * C6030) *
               C90774 -
           (C26734 * C17652 + C26431 * C18120 + C26733 * C3895 +
            C26430 * C4411 + C26732 * C2571 + C26429 * C3106) *
               C7479 -
           (C26734 * C17734 + C26431 * C18198 + C26733 * C3993 +
            C26430 * C4496 + C26732 * C2664 + C26429 * C3200) *
               C7400) *
              C90485 * C90623 * C90503) *
         C90567) /
            (p * q * std::sqrt(p + q));
    d2eezz[31] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C90634 * C555) * C244 +
                       (C554 * C245 + C90634 * C719) * C90567) *
                          C90485 * C13576 +
                      (C14776 + C14784) * C90485 * C13577 + C16237 * C13578) *
                         C90781 -
                     (C16759 * C13578 + (C14785 + C14779) * C90485 * C13577 +
                      (C14784 + C14776) * C90485 * C13576) *
                         C90774 +
                     (C16237 * C13576 + (C16232 + C16241) * C90485 * C13577 +
                      (C16756 + C16761) * C90485 * C13578) *
                         C7400) *
                        C7396 +
                    (((C1611 + C1619) * C90485 * C13576 +
                      (C3300 + C3308) * C90485 * C13577 +
                      (C16233 + C16242) * C90485 * C13578) *
                         C90774 -
                     (C16240 * C13578 + (C1619 + C1611) * C90485 * C13577 +
                      (C742 + C726) * C90485 * C13576) *
                         C90781 -
                     (((C554 * C15719 + C90634 * C16227) * C90567 +
                       (C554 * C15526 + C90634 * C16039) * C244) *
                          C90485 * C13578 +
                      (C16242 + C16233) * C90485 * C13577 + C16240 * C13576) *
                         C7400) *
                        C90503)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C90634 * C555) * C244 +
                       (C554 * C245 + C90634 * C719) * C90567) *
                          C89 +
                      (C726 + C742) * C90 + C746 * C91) *
                         C90623 * C90781 -
                     (C1621 * C91 + (C1619 + C1611) * C90 +
                      ((C554 * C1011 + C90634 * C1602) * C90567 +
                       (C554 * C832 + C90634 * C1396) * C244) *
                          C89) *
                         C90623 * C90774 +
                     (((C554 * C2570 + C90634 * C3105) * C244 +
                       (C554 * C2745 + C90634 * C3295) * C90567) *
                          C89 +
                      (C3300 + C3308) * C90 + (C3303 + C3309) * C91) *
                         C90623 * C7400) *
                        C7396 +
                    (((C1611 + C1619) * C89 + (C1608 + C1618) * C90 +
                      (C1612 + C1620) * C91) *
                         C90623 * C90774 -
                     (C747 * C91 + (C743 + C729) * C90 + (C742 + C726) * C89) *
                         C90623 * C90781 -
                     (((C554 * C2748 + C90634 * C3298) * C90567 +
                       (C554 * C2573 + C90634 * C3108) * C244) *
                          C91 +
                      (C3309 + C3303) * C90 + (C3308 + C3300) * C89) *
                         C90623 * C7400) *
                        C90503)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C26732 * C107 + C26429 * C555 + C26733 * C1700 +
                       C26430 * C2264 + C26734 * C4656 + C26431 * C5191) *
                          C244 +
                      (C26732 * C245 + C26429 * C719 + C26733 * C1879 +
                       C26430 * C2460 + C26734 * C4831 + C26431 * C5373) *
                          C90567) *
                         C90485 * C90623 * C90781 -
                     ((C26734 * C5637 + C26431 * C6106 + C26733 * C4075 +
                       C26430 * C4573 + C26732 * C1011 + C26429 * C1602) *
                          C90567 +
                      (C26734 * C5471 + C26431 * C5951 + C26733 * C3891 +
                       C26430 * C4407 + C26732 * C832 + C26429 * C1396) *
                          C244) *
                         C90485 * C90623 * C90774 +
                     ((C26732 * C2570 + C26429 * C3105 + C26733 * C3896 +
                       C26430 * C4412 + C26734 * C17651 + C26431 * C18119) *
                          C244 +
                      (C26732 * C2745 + C26429 * C3295 + C26733 * C4080 +
                       C26430 * C4576 + C26734 * C17811 + C26431 * C18273) *
                          C90567) *
                         C90485 * C90623 * C7400) *
                        C7396 +
                    (((C26732 * C829 + C26429 * C1395 + C26733 * C3892 +
                       C26430 * C4408 + C26734 * C5470 + C26431 * C5950) *
                          C244 +
                      (C26732 * C1010 + C26429 * C1601 + C26733 * C4076 +
                       C26430 * C4574 + C26734 * C5636 + C26431 * C6107) *
                          C90567) *
                         C90485 * C90623 * C90774 -
                     ((C26734 * C4832 + C26431 * C5374 + C26733 * C1878 +
                       C26430 * C2461 + C26732 * C246 + C26429 * C720) *
                          C90567 +
                      (C26734 * C4657 + C26431 * C5192 + C26733 * C1697 +
                       C26430 * C2263 + C26732 * C108 + C26429 * C556) *
                          C244) *
                         C90485 * C90623 * C90781 -
                     ((C26734 * C17812 + C26431 * C18274 + C26733 * C4079 +
                       C26430 * C4577 + C26732 * C2746 + C26429 * C3296) *
                          C90567 +
                      (C26734 * C17652 + C26431 * C18120 + C26733 * C3895 +
                       C26430 * C4411 + C26732 * C2571 + C26429 * C3106) *
                          C244) *
                         C90485 * C90623 * C7400) *
                        C90503)) /
                      (p * q * std::sqrt(p + q));
    d2eexx[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C7401 +
             (C13579 * C116 + C90485 * C125) * C7396 -
             (C13579 * C108 + C90485 * C114) * C7402 -
             (C13579 * C117 + C90485 * C126) * C90503) *
                C13576 +
            (C20284 + C20285 - C20286 - C20287) * C13577 + C20298 * C13578) *
               C90634 * C90753 +
           (((C13579 * C1697 + C90485 * C1702) * C7402 -
             ((C13579 * C1707 + C90485 * C1714) * C7396 +
              (C13579 * C1700 + C90485 * C1708) * C7401) +
             (C13579 * C1706 + C90485 * C1713) * C90503) *
                C13576 +
            (C21025 - (C21011 + C21012) + C21026) * C13577 +
            (C21027 - (C21017 + C21018) + C21028) * C13578) *
               C90634 * C90579) *
              C6692 +
          (((C20286 - (C20285 + C20284) + C20287) * C13576 +
            (C20290 - (C20289 + C20288) + C20291) * C13577 +
            (C20292 - (C20293 + C20294) + C20295) * C13578) *
               C90634 * C90753 +
           ((C21012 + C21011 - C21025 - C21026) * C13576 +
            (C21018 + C21017 - C21027 - C21028) * C13577 +
            (C16860 * C7401 + C16861 * C7396 -
             (C13579 * C21004 + C90485 * C21005) * C7402 -
             (C13579 * C21006 + C90485 * C21007) * C90503) *
                C13578) *
               C90634 * C90579) *
              C90555)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
             C91 * C115) *
                C7401 +
            (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 + C102 * C118 +
             C91 * C127) *
                C7396 -
            (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 + C100 * C108 +
             C89 * C114) *
                C7402 -
            (C102 * C120 + C91 * C128 + C101 * C118 + C90 * C127 + C100 * C117 +
             C89 * C126) *
                C90503) *
               C90623 * C90634 * C90753 +
           ((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
             C102 * C1699 + C91 * C1704) *
                C7402 -
            ((C102 * C1705 + C91 * C1712 + C101 * C1706 + C90 * C1713 +
              C100 * C1707 + C89 * C1714) *
                 C7396 +
             (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
              C100 * C1700 + C89 * C1708) *
                 C7401) +
            (C100 * C1706 + C89 * C1713 + C101 * C1705 + C90 * C1712 +
             C102 * C1709 + C91 * C1715) *
                C90503) *
               C90623 * C90634 * C90579) *
              C6692 +
          (((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 + C102 * C831 +
             C91 * C836) *
                C7402 -
            ((C102 * C837 + C91 * C844 + C101 * C838 + C90 * C845 +
              C100 * C839 + C89 * C846) *
                 C7396 +
             (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
              C100 * C832 + C89 * C840) *
                 C7401) +
            (C100 * C838 + C89 * C845 + C101 * C837 + C90 * C844 + C102 * C841 +
             C91 * C847) *
                C90503) *
               C90623 * C90634 * C90753 +
           ((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
             C102 * C3893 + C91 * C3899) *
                C7401 +
            (C100 * C3900 + C89 * C3909 + C101 * C3901 + C90 * C3910 +
             C102 * C3902 + C91 * C3911) *
                C7396 -
            (C102 * C8120 + C91 * C8121 + C101 * C3893 + C90 * C3899 +
             C100 * C3892 + C89 * C3898) *
                C7402 -
            (C102 * C8122 + C91 * C8123 + C101 * C3902 + C90 * C3911 +
             C100 * C3901 + C89 * C3910) *
                C90503) *
               C90623 * C90634 * C90579) *
              C90555)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C7401 +
             (C13579 * C116 + C90485 * C125) * C7396 -
             (C13579 * C108 + C90485 * C114) * C7402 -
             (C13579 * C117 + C90485 * C126) * C90503) *
                C90623 * C26429 +
            (C33654 + C33655 - C33656 - C33657) * C90623 * C26430 +
            (C33658 + C33659 - C33660 - C33661) * C90623 * C26431) *
               C90753 +
           ((C33656 - (C33655 + C33654) + C33657) * C90623 * C26429 +
            (C33660 - (C33659 + C33658) + C33661) * C90623 * C26430 +
            (C30273 * C7402 - (C30274 * C7396 + C30275 * C7401) +
             C30276 * C90503) *
                C90623 * C26431) *
               C90579) *
              C6692 +
          (((C20286 - (C20285 + C20284) + C20287) * C90623 * C26429 +
            (C21025 - (C21011 + C21012) + C21026) * C90623 * C26430 +
            (C33670 - (C33664 + C33665) + C33671) * C90623 * C26431) *
               C90753 +
           ((C21012 + C21011 - C21025 - C21026) * C90623 * C26429 +
            (C33665 + C33664 - C33670 - C33671) * C90623 * C26430 +
            (C31052 * C7401 + C31053 * C7396 -
             (C13579 * C33649 + C90485 * C33650) * C7402 -
             (C13579 * C33651 + C90485 * C33652) * C90503) *
                C90623 * C26431) *
               C90579) *
              C90555)) /
            (p * q * std::sqrt(p + q));
    d2eexy[32] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C13579 * C107 + C90485 * C113) * C6771 +
                       (C13579 * C182 + C90485 * C188) * C6692 -
                       C14082 * C6772 - C14192 * C90555) *
                          C13576 +
                      (C14082 * C6771 + C14192 * C6692 - C14088 * C6772 -
                       C14193 * C90555) *
                          C13577 +
                      (C14088 * C6771 + C14193 * C6692 - C15553 * C6772 -
                       C15643 * C90555) *
                          C13578) *
                         C90634 * C7396 +
                     ((C14084 * C6772 -
                       ((C13579 * C183 + C90485 * C189) * C6692 +
                        (C13579 * C108 + C90485 * C114) * C6771) +
                       C14194 * C90555) *
                          C13576 +
                      (C14090 * C6772 - (C14194 * C6692 + C14084 * C6771) +
                       C14195 * C90555) *
                          C13577 +
                      (C15551 * C6772 - (C14195 * C6692 + C14090 * C6771) +
                       C15644 * C90555) *
                          C13578) *
                         C90634 * C90503) *
                        C90753 +
                    (((C16859 * C6772 -
                       ((C13579 * C1794 + C90485 * C1799) * C6692 +
                        (C13579 * C1700 + C90485 * C1708) * C6771) +
                       C16953 * C90555) *
                          C13576 +
                      (C16857 * C6772 - (C16953 * C6692 + C16859 * C6771) +
                       C16954 * C90555) *
                          C13577 +
                      (C16860 * C6772 - (C16954 * C6692 + C16857 * C6771) +
                       C16955 * C90555) *
                          C13578) *
                         C90634 * C7396 +
                     (((C13579 * C1697 + C90485 * C1702) * C6771 +
                       (C13579 * C1791 + C90485 * C1796) * C6692 -
                       C21021 * C6772 - C21133 * C90555) *
                          C13576 +
                      (C21021 * C6771 + C21133 * C6692 - C21023 * C6772 -
                       C21134 * C90555) *
                          C13577 +
                      (C21023 * C6771 + C21134 * C6692 -
                       (C13579 * C21004 + C90485 * C21005) * C6772 -
                       (C13579 * C21126 + C90485 * C21127) * C90555) *
                          C13578) *
                         C90634 * C90503) *
                        C90579)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                       C102 * C109 + C91 * C115) *
                          C6771 +
                      (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 +
                       C102 * C184 + C91 * C190) *
                          C6692 -
                      (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                       C100 * C832 + C89 * C840) *
                          C6772 -
                      (C102 * C925 + C91 * C930 + C101 * C926 + C90 * C931 +
                       C100 * C927 + C89 * C932) *
                          C90555) *
                         C90623 * C90634 * C7396 +
                     ((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 +
                       C102 * C831 + C91 * C836) *
                          C6772 -
                      ((C102 * C185 + C91 * C191 + C101 * C184 + C90 * C190 +
                        C100 * C183 + C89 * C189) *
                           C6692 +
                       (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                        C100 * C108 + C89 * C114) *
                           C6771) +
                      (C100 * C926 + C89 * C931 + C101 * C925 + C90 * C930 +
                       C102 * C928 + C91 * C933) *
                          C90555) *
                         C90623 * C90634 * C90503) *
                        C90753 +
                    (((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
                       C102 * C3893 + C91 * C3899) *
                          C6772 -
                      ((C102 * C1792 + C91 * C1797 + C101 * C1791 +
                        C90 * C1796 + C100 * C1794 + C89 * C1799) *
                           C6692 +
                       (C102 * C1698 + C91 * C1703 + C101 * C1697 +
                        C90 * C1702 + C100 * C1700 + C89 * C1708) *
                           C6771) +
                      (C100 * C3989 + C89 * C3995 + C101 * C3990 + C90 * C3996 +
                       C102 * C3991 + C91 * C3997) *
                          C90555) *
                         C90623 * C90634 * C7396 +
                     ((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
                       C102 * C1699 + C91 * C1704) *
                          C6771 +
                      (C100 * C1791 + C89 * C1796 + C101 * C1792 + C90 * C1797 +
                       C102 * C1793 + C91 * C1798) *
                          C6692 -
                      (C102 * C8120 + C91 * C8121 + C101 * C3893 + C90 * C3899 +
                       C100 * C3892 + C89 * C3898) *
                          C6772 -
                      (C102 * C8222 + C91 * C8223 + C101 * C3991 + C90 * C3997 +
                       C100 * C3990 + C89 * C3996) *
                          C90555) *
                         C90623 * C90634 * C90503) *
                        C90579)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C13579 * C107 + C90485 * C113) * C6771 +
                       (C13579 * C182 + C90485 * C188) * C6692 -
                       C14082 * C6772 - C14192 * C90555) *
                          C90623 * C26429 +
                      (C33772 + C33773 - C33774 - C33775) * C90623 * C26430 +
                      (C33776 + C33777 - C33778 - C33779) * C90623 * C26431) *
                         C7396 +
                     ((C14084 * C6772 -
                       ((C13579 * C183 + C90485 * C189) * C6692 +
                        (C13579 * C108 + C90485 * C114) * C6771) +
                       C14194 * C90555) *
                          C90623 * C26429 +
                      (C33780 - (C33781 + C33782) + C33783) * C90623 * C26430 +
                      (C33784 - (C33785 + C33786) + C33790) * C90623 * C26431) *
                         C90503) *
                        C90753 +
                    (((C33774 - (C33773 + C33772) + C33775) * C90623 * C26429 +
                      (C33778 - (C33777 + C33776) + C33779) * C90623 * C26430 +
                      (C31052 * C6772 - (C30373 * C6692 + C30275 * C6771) +
                       C31147 * C90555) *
                          C90623 * C26431) *
                         C7396 +
                     ((C33782 + C33781 - C33780 - C33783) * C90623 * C26429 +
                      (C33786 + C33785 - C33784 - C33790) * C90623 * C26430 +
                      (C30273 * C6771 + C30372 * C6692 -
                       (C13579 * C33649 + C90485 * C33650) * C6772 -
                       (C13579 * C33769 + C90485 * C33770) * C90555) *
                          C90623 * C26431) *
                         C90503) *
                        C90579)) /
                      (p * q * std::sqrt(p + q));
    d2eexz[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C1875 +
             (C13579 * C245 + C90485 * C251) * C90753 -
             (C13579 * C1700 + C90485 * C1708) * C1876 -
             (C13579 * C1879 + C90485 * C1884) * C90579) *
                C13576 +
            (C17034 + C17035 - C17036 - C17053) * C13577 + C17057 * C13578) *
               C90634 * C6692 +
           ((C17036 - (C17035 + C17034) + C17053) * C13576 +
            (C17041 - (C17040 + C17039) + C17055) * C13577 +
            (C17044 - (C17045 + C17046) + C17056) * C13578) *
               C90634 * C90555) *
              C7396 +
          ((((C13579 * C1697 + C90485 * C1702) * C1876 -
             ((C13579 * C246 + C90485 * C252) * C90753 +
              (C13579 * C108 + C90485 * C114) * C1875) +
             (C13579 * C1878 + C90485 * C1883) * C90579) *
                C13576 +
            (C21235 - (C21236 + C21237) + C21247) * C13577 +
            (C21240 - (C21241 + C21242) + C21248) * C13578) *
               C90634 * C6692 +
           ((C21237 + C21236 - C21235 - C21247) * C13576 +
            (C21242 + C21241 - C21240 - C21248) * C13577 +
            (C15551 * C1875 + C15732 * C90753 -
             (C13579 * C21004 + C90485 * C21005) * C1876 -
             (C13579 * C21232 + C90485 * C21233) * C90579) *
                C13578) *
               C90634 * C90555) *
              C90503)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
             C91 * C115) *
                C1875 +
            (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 + C102 * C247 +
             C91 * C253) *
                C90753 -
            (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
             C100 * C1700 + C89 * C1708) *
                C1876 -
            (C102 * C1877 + C91 * C1882 + C101 * C1878 + C90 * C1883 +
             C100 * C1879 + C89 * C1884) *
                C90579) *
               C90623 * C90634 * C6692 +
           ((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
             C102 * C3893 + C91 * C3899) *
                C1876 -
            ((C102 * C1009 + C91 * C1014 + C101 * C1010 + C90 * C1015 +
              C100 * C1011 + C89 * C1016) *
                 C90753 +
             (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
              C100 * C832 + C89 * C840) *
                 C1875) +
            (C100 * C4075 + C89 * C4081 + C101 * C4076 + C90 * C4082 +
             C102 * C4077 + C91 * C4083) *
                C90579) *
               C90623 * C90634 * C90555) *
              C7396 +
          (((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
             C102 * C1699 + C91 * C1704) *
                C1876 -
            ((C102 * C248 + C91 * C254 + C101 * C247 + C90 * C253 +
              C100 * C246 + C89 * C252) *
                 C90753 +
             (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
              C100 * C108 + C89 * C114) *
                 C1875) +
            (C100 * C1878 + C89 * C1883 + C101 * C1877 + C90 * C1882 +
             C102 * C1880 + C91 * C1885) *
                C90579) *
               C90623 * C90634 * C6692 +
           ((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 + C102 * C831 +
             C91 * C836) *
                C1875 +
            (C100 * C1010 + C89 * C1015 + C101 * C1009 + C90 * C1014 +
             C102 * C1012 + C91 * C1017) *
                C90753 -
            (C102 * C8120 + C91 * C8121 + C101 * C3893 + C90 * C3899 +
             C100 * C3892 + C89 * C3898) *
                C1876 -
            (C102 * C8322 + C91 * C8323 + C101 * C4077 + C90 * C4083 +
             C100 * C4076 + C89 * C4082) *
                C90579) *
               C90623 * C90634 * C90555) *
              C90503)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C1875 +
             (C13579 * C245 + C90485 * C251) * C90753 - C27600 * C1876 -
             C27814 * C90579) *
                C90623 * C26429 +
            (C27600 * C1875 + C27814 * C90753 - C27606 * C1876 -
             C27815 * C90579) *
                C90623 * C26430 +
            (C27606 * C1875 + C27815 * C90753 - C30275 * C1876 -
             C30458 * C90579) *
                C90623 * C26431) *
               C6692 +
           ((C17036 - (C17035 + C17034) + C17053) * C90623 * C26429 +
            (C18362 * C1876 - (C17049 * C90753 + C16859 * C1875) +
             C18542 * C90579) *
                C90623 * C26430 +
            (C31052 * C1876 - (C18542 * C90753 + C18362 * C1875) +
             C31230 * C90579) *
                C90623 * C26431) *
               C90555) *
              C7396 +
          (((C27602 * C1876 -
             ((C13579 * C246 + C90485 * C252) * C90753 +
              (C13579 * C108 + C90485 * C114) * C1875) +
             C27816 * C90579) *
                C90623 * C26429 +
            (C27608 * C1876 - (C27816 * C90753 + C27602 * C1875) +
             C27817 * C90579) *
                C90623 * C26430 +
            (C30273 * C1876 - (C27817 * C90753 + C27608 * C1875) +
             C30459 * C90579) *
                C90623 * C26431) *
               C6692 +
           ((C21237 + C21236 - C21235 - C21247) * C90623 * C26429 +
            (C21021 * C1875 + C21245 * C90753 - C33668 * C1876 -
             C33893 * C90579) *
                C90623 * C26430 +
            (C33668 * C1875 + C33893 * C90753 -
             (C13579 * C33649 + C90485 * C33650) * C1876 -
             (C13579 * C33888 + C90485 * C33889) * C90579) *
                C90623 * C26431) *
               C90555) *
              C90503)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
             C13732 * C2570 + C13578 * C2827) *
                C7401 +
            (C13730 * C116 + C13576 * C314 + C13731 * C839 + C13577 * C1098 +
             C13732 * C2577 + C13578 * C2831) *
                C7396 -
            (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
             C13730 * C108 + C13576 * C309) *
                C7402 -
            (C13732 * C2578 + C13578 * C2832 + C13731 * C838 + C13577 * C1099 +
             C13730 * C117 + C13576 * C315) *
                C90503) *
               C90634 * C90485 * C90753 +
           ((C13730 * C1697 + C13576 * C1961 + C13731 * C3892 + C13577 * C4162 +
             C13732 * C3895 + C13578 * C4165) *
                C7402 -
            ((C13732 * C3905 + C13578 * C4172 + C13731 * C3900 +
              C13577 * C4167 + C13730 * C1707 + C13576 * C1966) *
                 C7396 +
             (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 +
              C13577 * C4161 + C13730 * C1700 + C13576 * C1962) *
                 C7401) +
            (C13730 * C1706 + C13576 * C1967 + C13731 * C3901 + C13577 * C4168 +
             C13732 * C3904 + C13578 * C4171) *
                C90503) *
               C90634 * C90485 * C90579) *
              C6692 +
          (((C13730 * C829 + C13576 * C1093 + C13731 * C2571 + C13577 * C2828 +
             C13732 * C3366 + C13578 * C3544) *
                C7402 -
            ((C13732 * C3370 + C13578 * C3548 + C13731 * C2577 +
              C13577 * C2831 + C13730 * C839 + C13576 * C1098) *
                 C7396 +
             (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 +
              C13577 * C2827 + C13730 * C832 + C13576 * C1094) *
                 C7401) +
            (C13730 * C838 + C13576 * C1099 + C13731 * C2578 + C13577 * C2832 +
             C13732 * C3369 + C13578 * C3547) *
                C90503) *
               C90634 * C90485 * C90753 +
           ((C13730 * C3891 + C13576 * C4161 + C13731 * C3896 + C13577 * C4166 +
             C13732 * C16835 + C13578 * C17131) *
                C7401 +
            (C13730 * C3900 + C13576 * C4167 + C13731 * C3905 + C13577 * C4172 +
             C13732 * C16838 + C13578 * C17133) *
                C7396 -
            (C13732 * C21004 + C13578 * C21346 + C13731 * C3895 +
             C13577 * C4165 + C13730 * C3892 + C13576 * C4162) *
                C7402 -
            (C13732 * C21006 + C13578 * C21347 + C13731 * C3904 +
             C13577 * C4171 + C13730 * C3901 + C13576 * C4168) *
                C90503) *
               C90634 * C90485 * C90579) *
              C90555)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C7401 +
             (C307 * C116 + C90623 * C314) * C7396 - C337 * C7402 -
             C338 * C90503) *
                C90634 * C89 +
            (C337 * C7401 + C338 * C7396 - C339 * C7402 - C340 * C90503) *
                C90634 * C90 +
            (C339 * C7401 + C340 * C7396 - C341 * C7402 - C342 * C90503) *
                C90634 * C91) *
               C90753 +
           ((C1984 * C7402 -
             ((C307 * C1707 + C90623 * C1966) * C7396 +
              (C307 * C1700 + C90623 * C1962) * C7401) +
             C1985 * C90503) *
                C90634 * C89 +
            (C1986 * C7402 - (C1985 * C7396 + C1984 * C7401) + C1987 * C90503) *
                C90634 * C90 +
            (C1988 * C7402 - (C1987 * C7396 + C1986 * C7401) + C1989 * C90503) *
                C90634 * C91) *
               C90579) *
              C6692 +
          (((C1116 * C7402 -
             ((C307 * C839 + C90623 * C1098) * C7396 +
              (C307 * C832 + C90623 * C1094) * C7401) +
             C1117 * C90503) *
                C90634 * C89 +
            (C1118 * C7402 - (C1117 * C7396 + C1116 * C7401) + C1119 * C90503) *
                C90634 * C90 +
            (C1120 * C7402 - (C1119 * C7396 + C1118 * C7401) + C1121 * C90503) *
                C90634 * C91) *
               C90753 +
           (((C307 * C3891 + C90623 * C4161) * C7401 +
             (C307 * C3900 + C90623 * C4167) * C7396 - C8433 * C7402 -
             C8434 * C90503) *
                C90634 * C89 +
            (C8433 * C7401 + C8434 * C7396 - C8435 * C7402 - C8436 * C90503) *
                C90634 * C90 +
            (C8435 * C7401 + C8436 * C7396 -
             (C307 * C8120 + C90623 * C8422) * C7402 -
             (C307 * C8122 + C90623 * C8423) * C90503) *
                C90634 * C91) *
               C90579) *
              C90555)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C7401 +
             (C307 * C116 + C90623 * C314) * C7396 - C337 * C7402 -
             C338 * C90503) *
                C26429 +
            (C33994 + C33995 - C33996 - C33997) * C26430 +
            (C33998 + C33999 - C34000 - C34001) * C26431) *
               C90485 * C90753 +
           ((C33996 - (C33995 + C33994) + C33997) * C26429 +
            (C34000 - (C33999 + C33998) + C34001) * C26430 +
            (C30555 * C7402 - (C30556 * C7396 + C30557 * C7401) +
             C30558 * C90503) *
                C26431) *
               C90485 * C90579) *
              C6692 +
          (((C1116 * C7402 -
             ((C307 * C839 + C90623 * C1098) * C7396 +
              (C307 * C832 + C90623 * C1094) * C7401) +
             C1117 * C90503) *
                C26429 +
            (C34002 - (C34003 + C34004) + C34005) * C26430 +
            (C34014 - (C34008 + C34009) + C34015) * C26431) *
               C90485 * C90753 +
           ((C34004 + C34003 - C34002 - C34005) * C26429 +
            (C34009 + C34008 - C34014 - C34015) * C26430 +
            (C31315 * C7401 + C31316 * C7396 -
             (C307 * C33649 + C90623 * C33991) * C7402 -
             (C307 * C33651 + C90623 * C33992) * C90503) *
                C26431) *
               C90485 * C90579) *
              C90555)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
             C13732 * C2570 + C13578 * C2827) *
                C6771 +
            (C13730 * C182 + C13576 * C394 + C13731 * C927 + C13577 * C1195 +
             C13732 * C2663 + C13578 * C2921) *
                C6692 -
            (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
             C13730 * C832 + C13576 * C1094) *
                C6772 -
            (C13732 * C3433 + C13578 * C3599 + C13731 * C2663 + C13577 * C2921 +
             C13730 * C927 + C13576 * C1195) *
                C90555) *
               C90634 * C90485 * C7396 +
           ((C13730 * C829 + C13576 * C1093 + C13731 * C2571 + C13577 * C2828 +
             C13732 * C3366 + C13578 * C3544) *
                C6772 -
            ((C13732 * C2664 + C13578 * C2922 + C13731 * C926 + C13577 * C1196 +
              C13730 * C183 + C13576 * C395) *
                 C6692 +
             (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
              C13730 * C108 + C13576 * C309) *
                 C6771) +
            (C13730 * C926 + C13576 * C1196 + C13731 * C2664 + C13577 * C2922 +
             C13732 * C3432 + C13578 * C3600) *
                C90555) *
               C90634 * C90485 * C90503) *
              C90753 +
          (((C13730 * C3891 + C13576 * C4161 + C13731 * C3896 + C13577 * C4166 +
             C13732 * C16835 + C13578 * C17131) *
                C6772 -
            ((C13732 * C3994 + C13578 * C4248 + C13731 * C3989 +
              C13577 * C4247 + C13730 * C1794 + C13576 * C2066) *
                 C6692 +
             (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 +
              C13577 * C4161 + C13730 * C1700 + C13576 * C1962) *
                 C6771) +
            (C13730 * C3989 + C13576 * C4247 + C13731 * C3994 + C13577 * C4248 +
             C13732 * C16942 + C13578 * C17209) *
                C90555) *
               C90634 * C90485 * C7396 +
           ((C13730 * C1697 + C13576 * C1961 + C13731 * C3892 + C13577 * C4162 +
             C13732 * C3895 + C13578 * C4165) *
                C6771 +
            (C13730 * C1791 + C13576 * C2063 + C13731 * C3990 + C13577 * C4249 +
             C13732 * C3993 + C13578 * C4250) *
                C6692 -
            (C13732 * C21004 + C13578 * C21346 + C13731 * C3895 +
             C13577 * C4165 + C13730 * C3892 + C13576 * C4162) *
                C6772 -
            (C13732 * C21126 + C13578 * C21446 + C13731 * C3993 +
             C13577 * C4250 + C13730 * C3990 + C13576 * C4249) *
                C90555) *
               C90634 * C90485 * C90503) *
              C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C6771 +
             (C307 * C182 + C90623 * C394) * C6692 -
             (C307 * C832 + C90623 * C1094) * C6772 -
             (C307 * C927 + C90623 * C1195) * C90555) *
                C90634 * C89 +
            (C6996 + C6997 - C6998 - C6999) * C90634 * C90 + C7011 * C91) *
               C7396 +
           ((C6998 - (C6997 + C6996) + C6999) * C90634 * C89 +
            (C7002 - (C7001 + C7000) + C7003) * C90634 * C90 +
            (C7004 - (C7005 + C7006) + C7007) * C90634 * C91) *
               C90503) *
              C90753 +
          ((((C307 * C3891 + C90623 * C4161) * C6772 -
             ((C307 * C1794 + C90623 * C2066) * C6692 +
              (C307 * C1700 + C90623 * C1962) * C6771) +
             (C307 * C3989 + C90623 * C4247) * C90555) *
                C90634 * C89 +
            (C8536 - (C8537 + C8538) + C8548) * C90634 * C90 +
            (C8541 - (C8542 + C8543) + C8549) * C90634 * C91) *
               C7396 +
           ((C8538 + C8537 - C8536 - C8548) * C90634 * C89 +
            (C8543 + C8542 - C8541 - C8549) * C90634 * C90 +
            (C1988 * C6771 + C2080 * C6692 -
             (C307 * C8120 + C90623 * C8422) * C6772 -
             (C307 * C8222 + C90623 * C8534) * C90555) *
                C90634 * C91) *
               C90503) *
              C90579)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C6771 +
             (C307 * C182 + C90623 * C394) * C6692 -
             (C307 * C832 + C90623 * C1094) * C6772 -
             (C307 * C927 + C90623 * C1195) * C90555) *
                C26429 +
            (C34115 + C34116 - C34117 - C34118) * C26430 +
            (C34119 + C34120 - C34121 - C34122) * C26431) *
               C90485 * C7396 +
           ((C6998 - (C6997 + C6996) + C6999) * C26429 +
            (C8536 - (C8537 + C8538) + C8548) * C26430 +
            (C34123 - (C34124 + C34125) + C34129) * C26431) *
               C90485 * C90503) *
              C90753 +
          (((C34117 - (C34116 + C34115) + C34118) * C26429 +
            (C34121 - (C34120 + C34119) + C34122) * C26430 +
            (C31315 * C6772 - (C30650 * C6692 + C30557 * C6771) +
             C31408 * C90555) *
                C26431) *
               C90485 * C7396 +
           ((C8538 + C8537 - C8536 - C8548) * C26429 +
            (C34125 + C34124 - C34123 - C34129) * C26430 +
            (C30555 * C6771 + C30649 * C6692 -
             (C307 * C33649 + C90623 * C33991) * C6772 -
             (C307 * C33769 + C90623 * C34113) * C90555) *
                C26431) *
               C90485 * C90503) *
              C90579)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
             C13732 * C2570 + C13578 * C2827) *
                C1875 +
            (C13730 * C245 + C13576 * C474 + C13731 * C1011 + C13577 * C1301 +
             C13732 * C2745 + C13578 * C3017) *
                C90753 -
            (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 + C13577 * C4161 +
             C13730 * C1700 + C13576 * C1962) *
                C1876 -
            (C13732 * C4080 + C13578 * C4330 + C13731 * C4075 + C13577 * C4327 +
             C13730 * C1879 + C13576 * C2159) *
                C90579) *
               C90634 * C90485 * C6692 +
           ((C13730 * C3891 + C13576 * C4161 + C13731 * C3896 + C13577 * C4166 +
             C13732 * C16835 + C13578 * C17131) *
                C1876 -
            ((C13732 * C3489 + C13578 * C3654 + C13731 * C2745 +
              C13577 * C3017 + C13730 * C1011 + C13576 * C1301) *
                 C90753 +
             (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 +
              C13577 * C2827 + C13730 * C832 + C13576 * C1094) *
                 C1875) +
            (C13730 * C4075 + C13576 * C4327 + C13731 * C4080 + C13577 * C4330 +
             C13732 * C17029 + C13578 * C17285) *
                C90579) *
               C90634 * C90485 * C90555) *
              C7396 +
          (((C13730 * C1697 + C13576 * C1961 + C13731 * C3892 + C13577 * C4162 +
             C13732 * C3895 + C13578 * C4165) *
                C1876 -
            ((C13732 * C2746 + C13578 * C3018 + C13731 * C1010 +
              C13577 * C1300 + C13730 * C246 + C13576 * C475) *
                 C90753 +
             (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
              C13730 * C108 + C13576 * C309) *
                 C1875) +
            (C13730 * C1878 + C13576 * C2160 + C13731 * C4076 + C13577 * C4328 +
             C13732 * C4079 + C13578 * C4331) *
                C90579) *
               C90634 * C90485 * C6692 +
           ((C13730 * C829 + C13576 * C1093 + C13731 * C2571 + C13577 * C2828 +
             C13732 * C3366 + C13578 * C3544) *
                C1875 +
            (C13730 * C1010 + C13576 * C1300 + C13731 * C2746 + C13577 * C3018 +
             C13732 * C3488 + C13578 * C3653) *
                C90753 -
            (C13732 * C21004 + C13578 * C21346 + C13731 * C3895 +
             C13577 * C4165 + C13730 * C3892 + C13576 * C4162) *
                C1876 -
            (C13732 * C21232 + C13578 * C21545 + C13731 * C4079 +
             C13577 * C4331 + C13730 * C4076 + C13576 * C4328) *
                C90579) *
               C90634 * C90485 * C90555) *
              C90503)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C1875 +
             (C307 * C245 + C90623 * C474) * C90753 -
             (C307 * C1700 + C90623 * C1962) * C1876 -
             (C307 * C1879 + C90623 * C2159) * C90579) *
                C90634 * C89 +
            (C2165 + C2166 - C2167 - C2184) * C90634 * C90 + C2189 * C91) *
               C6692 +
           (((C307 * C3891 + C90623 * C4161) * C1876 -
             ((C307 * C1011 + C90623 * C1301) * C90753 +
              (C307 * C832 + C90623 * C1094) * C1875) +
             (C307 * C4075 + C90623 * C4327) * C90579) *
                C90634 * C89 +
            (C8649 - (C8650 + C8651) + C8661) * C90634 * C90 +
            (C8654 - (C8655 + C8656) + C8662) * C90634 * C91) *
               C90555) *
              C7396 +
          (((C2167 - (C2166 + C2165) + C2184) * C90634 * C89 +
            (C2172 - (C2171 + C2170) + C2186) * C90634 * C90 +
            (C2175 - (C2176 + C2177) + C2187) * C90634 * C91) *
               C6692 +
           ((C8651 + C8650 - C8649 - C8661) * C90634 * C89 +
            (C8656 + C8655 - C8654 - C8662) * C90634 * C90 +
            (C1120 * C1875 + C1316 * C90753 -
             (C307 * C8120 + C90623 * C8422) * C1876 -
             (C307 * C8322 + C90623 * C8647) * C90579) *
                C90634 * C91) *
               C90555) *
              C90503)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C1875 +
             (C307 * C245 + C90623 * C474) * C90753 - C27910 * C1876 -
             C28080 * C90579) *
                C26429 +
            (C27910 * C1875 + C28080 * C90753 - C27912 * C1876 -
             C28081 * C90579) *
                C26430 +
            (C27912 * C1875 + C28081 * C90753 - C30557 * C1876 -
             C30733 * C90579) *
                C26431) *
               C90485 * C6692 +
           ((C29752 * C1876 -
             ((C307 * C1011 + C90623 * C1301) * C90753 +
              (C307 * C832 + C90623 * C1094) * C1875) +
             C29948 * C90579) *
                C26429 +
            (C29754 * C1876 - (C29948 * C90753 + C29752 * C1875) +
             C29949 * C90579) *
                C26430 +
            (C31315 * C1876 - (C29949 * C90753 + C29754 * C1875) +
             C31489 * C90579) *
                C26431) *
               C90485 * C90555) *
              C7396 +
          (((C2167 - (C2166 + C2165) + C2184) * C26429 +
            (C4930 * C1876 - (C2180 * C90753 + C1984 * C1875) +
             C5114 * C90579) *
                C26430 +
            (C30555 * C1876 - (C5114 * C90753 + C4930 * C1875) +
             C30734 * C90579) *
                C26431) *
               C90485 * C6692 +
           ((C8651 + C8650 - C8649 - C8661) * C26429 +
            (C8433 * C1875 + C8659 * C90753 - C34012 * C1876 -
             C34231 * C90579) *
                C26430 +
            (C34012 * C1875 + C34231 * C90753 -
             (C307 * C33649 + C90623 * C33991) * C1876 -
             (C307 * C33888 + C90623 * C34227) * C90579) *
                C26431) *
               C90485 * C90555) *
              C90503)) /
            (p * q * std::sqrt(p + q));
    d2eezx[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C7401 +
             (C554 * C116 + C90634 * C561) * C7396 - C584 * C7402 -
             C585 * C90503) *
                C90485 * C13576 +
            (C20743 + C20744 - C20745 - C20746) * C90485 * C13577 +
            C20758 * C13578) *
               C90753 +
           ((C2286 * C7402 -
             ((C554 * C1707 + C90634 * C2268) * C7396 +
              (C554 * C1700 + C90634 * C2264) * C7401) +
             C2287 * C90503) *
                C90485 * C13576 +
            (C21647 - (C21648 + C21649) + C21650) * C90485 * C13577 +
            (C21659 - (C21653 + C21654) + C21660) * C90485 * C13578) *
               C90579) *
              C6692 +
          (((C20745 - (C20744 + C20743) + C20746) * C90485 * C13576 +
            (C20749 - (C20748 + C20747) + C20750) * C90485 * C13577 +
            (C20751 - (C20752 + C20753) + C20754) * C90485 * C13578) *
               C90753 +
           ((C21649 + C21648 - C21647 - C21650) * C90485 * C13576 +
            (C21654 + C21653 - C21659 - C21660) * C90485 * C13577 +
            (C17382 * C7401 + C17383 * C7396 -
             (C554 * C21004 + C90634 * C21644) * C7402 -
             (C554 * C21006 + C90634 * C21645) * C90503) *
                C90485 * C13578) *
               C90579) *
              C90555)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C7401 +
             (C554 * C116 + C90634 * C561) * C7396 - C584 * C7402 -
             C585 * C90503) *
                C89 +
            (C584 * C7401 + C585 * C7396 - C586 * C7402 - C587 * C90503) * C90 +
            (C586 * C7401 + C587 * C7396 - C588 * C7402 - C589 * C90503) *
                C91) *
               C90623 * C90753 +
           ((C2286 * C7402 -
             ((C554 * C1707 + C90634 * C2268) * C7396 +
              (C554 * C1700 + C90634 * C2264) * C7401) +
             C2287 * C90503) *
                C89 +
            (C2288 * C7402 - (C2287 * C7396 + C2286 * C7401) + C2289 * C90503) *
                C90 +
            (C2290 * C7402 - (C2289 * C7396 + C2288 * C7401) + C2291 * C90503) *
                C91) *
               C90623 * C90579) *
              C6692 +
          (((C1418 * C7402 -
             ((C554 * C839 + C90634 * C1400) * C7396 +
              (C554 * C832 + C90634 * C1396) * C7401) +
             C1419 * C90503) *
                C89 +
            (C1420 * C7402 - (C1419 * C7396 + C1418 * C7401) + C1421 * C90503) *
                C90 +
            (C1422 * C7402 - (C1421 * C7396 + C1420 * C7401) + C1423 * C90503) *
                C91) *
               C90623 * C90753 +
           (((C554 * C3891 + C90634 * C4407) * C7401 +
             (C554 * C3900 + C90634 * C4413) * C7396 - C8771 * C7402 -
             C8772 * C90503) *
                C89 +
            (C8771 * C7401 + C8772 * C7396 - C8773 * C7402 - C8774 * C90503) *
                C90 +
            (C8773 * C7401 + C8774 * C7396 -
             (C554 * C8120 + C90634 * C8760) * C7402 -
             (C554 * C8122 + C90634 * C8761) * C90503) *
                C91) *
               C90623 * C90579) *
              C90555)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C26732 * C107 + C26429 * C555 + C26733 * C1700 + C26430 * C2264 +
             C26734 * C4656 + C26431 * C5191) *
                C7401 +
            (C26732 * C116 + C26429 * C561 + C26733 * C1707 + C26430 * C2268 +
             C26734 * C4663 + C26431 * C5195) *
                C7396 -
            (C26734 * C4657 + C26431 * C5192 + C26733 * C1697 + C26430 * C2263 +
             C26732 * C108 + C26429 * C556) *
                C7402 -
            (C26734 * C4664 + C26431 * C5196 + C26733 * C1706 + C26430 * C2269 +
             C26732 * C117 + C26429 * C562) *
                C90503) *
               C90485 * C90623 * C90753 +
           ((C26732 * C1697 + C26429 * C2263 + C26733 * C4657 + C26430 * C5192 +
             C26734 * C6164 + C26431 * C6504) *
                C7402 -
            ((C26734 * C6168 + C26431 * C6508 + C26733 * C4663 +
              C26430 * C5195 + C26732 * C1707 + C26429 * C2268) *
                 C7396 +
             (C26734 * C6165 + C26431 * C6505 + C26733 * C4656 +
              C26430 * C5191 + C26732 * C1700 + C26429 * C2264) *
                 C7401) +
            (C26732 * C1706 + C26429 * C2269 + C26733 * C4664 + C26430 * C5196 +
             C26734 * C6167 + C26431 * C6507) *
                C90503) *
               C90485 * C90623 * C90579) *
              C6692 +
          (((C26732 * C829 + C26429 * C1395 + C26733 * C3892 + C26430 * C4408 +
             C26734 * C5470 + C26431 * C5950) *
                C7402 -
            ((C26734 * C5474 + C26431 * C5954 + C26733 * C3900 +
              C26430 * C4413 + C26732 * C839 + C26429 * C1400) *
                 C7396 +
             (C26734 * C5471 + C26431 * C5951 + C26733 * C3891 +
              C26430 * C4407 + C26732 * C832 + C26429 * C1396) *
                 C7401) +
            (C26732 * C838 + C26429 * C1401 + C26733 * C3901 + C26430 * C4414 +
             C26734 * C5473 + C26431 * C5953) *
                C90503) *
               C90485 * C90623 * C90753 +
           ((C26732 * C3891 + C26429 * C4407 + C26733 * C5471 + C26430 * C5951 +
             C26734 * C19088 + C26431 * C19412) *
                C7401 +
            (C26732 * C3900 + C26429 * C4413 + C26733 * C5474 + C26430 * C5954 +
             C26734 * C19091 + C26431 * C19414) *
                C7396 -
            (C26734 * C33649 + C26431 * C34329 + C26733 * C5470 +
             C26430 * C5950 + C26732 * C3892 + C26429 * C4408) *
                C7402 -
            (C26734 * C33651 + C26431 * C34330 + C26733 * C5473 +
             C26430 * C5953 + C26732 * C3901 + C26429 * C4414) *
                C90503) *
               C90485 * C90623 * C90579) *
              C90555)) /
            (p * q * std::sqrt(p + q));
    d2eezy[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C6771 +
             (C554 * C182 + C90634 * C641) * C6692 - C14614 * C6772 -
             C14700 * C90555) *
                C90485 * C13576 +
            (C14614 * C6771 + C14700 * C6692 - C14616 * C6772 -
             C14701 * C90555) *
                C90485 * C13577 +
            (C14616 * C6771 + C14701 * C6692 - C16062 * C6772 -
             C16151 * C90555) *
                C90485 * C13578) *
               C7396 +
           ((C7236 - (C7235 + C7234) + C7237) * C90485 * C13576 +
            (C3122 * C6772 - (C1518 * C6692 + C1418 * C6771) + C3218 * C90555) *
                C90485 * C13577 +
            (C16060 * C6772 - (C3218 * C6692 + C3122 * C6771) +
             C16152 * C90555) *
                C90485 * C13578) *
               C90503) *
              C90753 +
          (((C17381 * C6772 -
             ((C554 * C1794 + C90634 * C2368) * C6692 +
              (C554 * C1700 + C90634 * C2264) * C6771) +
             C17474 * C90555) *
                C90485 * C13576 +
            (C17379 * C6772 - (C17474 * C6692 + C17381 * C6771) +
             C17475 * C90555) *
                C90485 * C13577 +
            (C17382 * C6772 - (C17475 * C6692 + C17379 * C6771) +
             C17476 * C90555) *
                C90485 * C13578) *
               C7396 +
           ((C8876 + C8875 - C8874 - C8886) * C90485 * C13576 +
            (C8771 * C6771 + C8884 * C6692 - C21657 * C6772 - C21762 * C90555) *
                C90485 * C13577 +
            (C21657 * C6771 + C21762 * C6692 -
             (C554 * C21004 + C90634 * C21644) * C6772 -
             (C554 * C21126 + C90634 * C21758) * C90555) *
                C90485 * C13578) *
               C90503) *
              C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C6771 +
             (C554 * C182 + C90634 * C641) * C6692 -
             (C554 * C832 + C90634 * C1396) * C6772 -
             (C554 * C927 + C90634 * C1497) * C90555) *
                C89 +
            (C7234 + C7235 - C7236 - C7237) * C90 + C7248 * C91) *
               C90623 * C7396 +
           ((C7236 - (C7235 + C7234) + C7237) * C89 +
            (C7240 - (C7239 + C7238) + C7241) * C90 +
            (C7242 - (C7243 + C7244) + C7245) * C91) *
               C90623 * C90503) *
              C90753 +
          ((((C554 * C3891 + C90634 * C4407) * C6772 -
             ((C554 * C1794 + C90634 * C2368) * C6692 +
              (C554 * C1700 + C90634 * C2264) * C6771) +
             (C554 * C3989 + C90634 * C4493) * C90555) *
                C89 +
            (C8874 - (C8875 + C8876) + C8886) * C90 +
            (C8879 - (C8880 + C8881) + C8887) * C91) *
               C90623 * C7396 +
           ((C8876 + C8875 - C8874 - C8886) * C89 +
            (C8881 + C8880 - C8879 - C8887) * C90 +
            (C2290 * C6771 + C2382 * C6692 -
             (C554 * C8120 + C90634 * C8760) * C6772 -
             (C554 * C8222 + C90634 * C8872) * C90555) *
                C91) *
               C90623 * C90503) *
              C90579)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C26732 * C107 + C26429 * C555 + C26733 * C1700 + C26430 * C2264 +
             C26734 * C4656 + C26431 * C5191) *
                C6771 +
            (C26732 * C182 + C26429 * C641 + C26733 * C1794 + C26430 * C2368 +
             C26734 * C4746 + C26431 * C5285) *
                C6692 -
            (C26734 * C5471 + C26431 * C5951 + C26733 * C3891 + C26430 * C4407 +
             C26732 * C832 + C26429 * C1396) *
                C6772 -
            (C26734 * C5557 + C26431 * C6029 + C26733 * C3989 + C26430 * C4493 +
             C26732 * C927 + C26429 * C1497) *
                C90555) *
               C90485 * C90623 * C7396 +
           ((C26732 * C829 + C26429 * C1395 + C26733 * C3892 + C26430 * C4408 +
             C26734 * C5470 + C26431 * C5950) *
                C6772 -
            ((C26734 * C4747 + C26431 * C5286 + C26733 * C1791 +
              C26430 * C2365 + C26732 * C183 + C26429 * C642) *
                 C6692 +
             (C26734 * C4657 + C26431 * C5192 + C26733 * C1697 +
              C26430 * C2263 + C26732 * C108 + C26429 * C556) *
                 C6771) +
            (C26732 * C926 + C26429 * C1498 + C26733 * C3990 + C26430 * C4495 +
             C26734 * C5556 + C26431 * C6030) *
                C90555) *
               C90485 * C90623 * C90503) *
              C90753 +
          (((C26732 * C3891 + C26429 * C4407 + C26733 * C5471 + C26430 * C5951 +
             C26734 * C19088 + C26431 * C19412) *
                C6772 -
            ((C26734 * C6227 + C26431 * C6561 + C26733 * C4746 +
              C26430 * C5285 + C26732 * C1794 + C26429 * C2368) *
                 C6692 +
             (C26734 * C6165 + C26431 * C6505 + C26733 * C4656 +
              C26430 * C5191 + C26732 * C1700 + C26429 * C2264) *
                 C6771) +
            (C26732 * C3989 + C26429 * C4493 + C26733 * C5557 + C26430 * C6029 +
             C26734 * C19146 + C26431 * C19466) *
                C90555) *
               C90485 * C90623 * C7396 +
           ((C26732 * C1697 + C26429 * C2263 + C26733 * C4657 + C26430 * C5192 +
             C26734 * C6164 + C26431 * C6504) *
                C6771 +
            (C26732 * C1791 + C26429 * C2365 + C26733 * C4747 + C26430 * C5286 +
             C26734 * C6226 + C26431 * C6560) *
                C6692 -
            (C26734 * C33649 + C26431 * C34329 + C26733 * C5470 +
             C26430 * C5950 + C26732 * C3892 + C26429 * C4408) *
                C6772 -
            (C26734 * C33769 + C26431 * C34429 + C26733 * C5556 +
             C26430 * C6030 + C26732 * C3990 + C26429 * C4495) *
                C90555) *
               C90485 * C90623 * C90503) *
              C90579)) /
            (p * q * std::sqrt(p + q));
    d2eezz[32] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C90634 * C555) * C1875 +
                       (C554 * C245 + C90634 * C719) * C90753 -
                       (C554 * C1700 + C90634 * C2264) * C1876 -
                       (C554 * C1879 + C90634 * C2460) * C90579) *
                          C90485 * C13576 +
                      (C17553 + C17554 - C17555 - C17572) * C90485 * C13577 +
                      C17577 * C13578) *
                         C6692 +
                     ((C17555 - (C17554 + C17553) + C17572) * C90485 * C13576 +
                      (C17560 - (C17559 + C17558) + C17574) * C90485 * C13577 +
                      (C17563 - (C17564 + C17565) + C17575) * C90485 * C13578) *
                         C90555) *
                        C7396 +
                    (((C2468 - (C2467 + C2466) + C2485) * C90485 * C13576 +
                      (C8987 - (C8988 + C8989) + C8999) * C90485 * C13577 +
                      (C21862 - (C21863 + C21864) + C21868) * C90485 * C13578) *
                         C6692 +
                     ((C8989 + C8988 - C8987 - C8999) * C90485 * C13576 +
                      (C21864 + C21863 - C21862 - C21868) * C90485 * C13577 +
                      (C16060 * C1875 + C16239 * C90753 -
                       (C554 * C21004 + C90634 * C21644) * C1876 -
                       (C554 * C21232 + C90634 * C21860) * C90579) *
                          C90485 * C13578) *
                         C90555) *
                        C90503)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C90634 * C555) * C1875 +
                       (C554 * C245 + C90634 * C719) * C90753 -
                       (C554 * C1700 + C90634 * C2264) * C1876 -
                       (C554 * C1879 + C90634 * C2460) * C90579) *
                          C89 +
                      (C2466 + C2467 - C2468 - C2485) * C90 + C2489 * C91) *
                         C90623 * C6692 +
                     (((C554 * C3891 + C90634 * C4407) * C1876 -
                       ((C554 * C1011 + C90634 * C1602) * C90753 +
                        (C554 * C832 + C90634 * C1396) * C1875) +
                       (C554 * C4075 + C90634 * C4573) * C90579) *
                          C89 +
                      (C8987 - (C8988 + C8989) + C8999) * C90 +
                      (C8992 - (C8993 + C8994) + C9000) * C91) *
                         C90623 * C90555) *
                        C7396 +
                    (((C2468 - (C2467 + C2466) + C2485) * C89 +
                      (C2473 - (C2472 + C2471) + C2487) * C90 +
                      (C2476 - (C2477 + C2478) + C2488) * C91) *
                         C90623 * C6692 +
                     ((C8989 + C8988 - C8987 - C8999) * C89 +
                      (C8994 + C8993 - C8992 - C9000) * C90 +
                      (C1422 * C1875 + C1617 * C90753 -
                       (C554 * C8120 + C90634 * C8760) * C1876 -
                       (C554 * C8322 + C90634 * C8985) * C90579) *
                          C91) *
                         C90623 * C90555) *
                        C90503)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C26732 * C107 + C26429 * C555 + C26733 * C1700 +
                       C26430 * C2264 + C26734 * C4656 + C26431 * C5191) *
                          C1875 +
                      (C26732 * C245 + C26429 * C719 + C26733 * C1879 +
                       C26430 * C2460 + C26734 * C4831 + C26431 * C5373) *
                          C90753 -
                      (C26734 * C6165 + C26431 * C6505 + C26733 * C4656 +
                       C26430 * C5191 + C26732 * C1700 + C26429 * C2264) *
                          C1876 -
                      (C26734 * C6287 + C26431 * C6612 + C26733 * C4831 +
                       C26430 * C5373 + C26732 * C1879 + C26429 * C2460) *
                          C90579) *
                         C90485 * C90623 * C6692 +
                     ((C26732 * C3891 + C26429 * C4407 + C26733 * C5471 +
                       C26430 * C5951 + C26734 * C19088 + C26431 * C19412) *
                          C1876 -
                      ((C26734 * C5637 + C26431 * C6106 + C26733 * C4075 +
                        C26430 * C4573 + C26732 * C1011 + C26429 * C1602) *
                           C90753 +
                       (C26734 * C5471 + C26431 * C5951 + C26733 * C3891 +
                        C26430 * C4407 + C26732 * C832 + C26429 * C1396) *
                           C1875) +
                      (C26732 * C4075 + C26429 * C4573 + C26733 * C5637 +
                       C26430 * C6106 + C26734 * C19199 + C26431 * C19517) *
                          C90579) *
                         C90485 * C90623 * C90555) *
                        C7396 +
                    (((C26732 * C1697 + C26429 * C2263 + C26733 * C4657 +
                       C26430 * C5192 + C26734 * C6164 + C26431 * C6504) *
                          C1876 -
                      ((C26734 * C4832 + C26431 * C5374 + C26733 * C1878 +
                        C26430 * C2461 + C26732 * C246 + C26429 * C720) *
                           C90753 +
                       (C26734 * C4657 + C26431 * C5192 + C26733 * C1697 +
                        C26430 * C2263 + C26732 * C108 + C26429 * C556) *
                           C1875) +
                      (C26732 * C1878 + C26429 * C2461 + C26733 * C4832 +
                       C26430 * C5374 + C26734 * C6286 + C26431 * C6613) *
                          C90579) *
                         C90485 * C90623 * C6692 +
                     ((C26732 * C829 + C26429 * C1395 + C26733 * C3892 +
                       C26430 * C4408 + C26734 * C5470 + C26431 * C5950) *
                          C1875 +
                      (C26732 * C1010 + C26429 * C1601 + C26733 * C4076 +
                       C26430 * C4574 + C26734 * C5636 + C26431 * C6107) *
                          C90753 -
                      (C26734 * C33649 + C26431 * C34329 + C26733 * C5470 +
                       C26430 * C5950 + C26732 * C3892 + C26429 * C4408) *
                          C1876 -
                      (C26734 * C33888 + C26431 * C34528 + C26733 * C5636 +
                       C26430 * C6107 + C26732 * C4076 + C26429 * C4574) *
                          C90579) *
                         C90485 * C90623 * C90555) *
                        C90503)) /
                      (p * q * std::sqrt(p + q));
    d2eexx[33] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C88316 +
             (C13579 * C116 + C90485 * C125) * C90744 -
             (C13579 * C108 + C90485 * C114) * C88309 -
             (C13579 * C117 + C90485 * C126) * C90503) *
                C13576 +
            (C15534 + C15535 - C15536 - C15537) * C13577 + C15560 * C13578) *
               C90634 * C9074 +
           (((C13579 * C1697 + C90485 * C1702) * C88309 -
             ((C13579 * C1707 + C90485 * C1714) * C90744 +
              (C13579 * C1700 + C90485 * C1708) * C88316) +
             (C13579 * C1706 + C90485 * C1713) * C90503) *
                C13576 +
            (C24209 - (C24210 + C24211) + C24212) * C13577 +
            (C24213 - (C24214 + C24215) + C24216) * C13578) *
               C90634 * C90579) *
              C6692 +
          (((C15536 - (C15535 + C15534) + C15537) * C13576 +
            (C15540 - (C15539 + C15538) + C15541) * C13577 +
            (C15556 - (C15557 + C15558) + C15559) * C13578) *
               C90634 * C9074 +
           ((C24211 + C24210 - C24209 - C24212) * C13576 +
            (C24215 + C24214 - C24213 - C24216) * C13577 +
            (C16860 * C88316 + C16861 * C90744 -
             (C13579 * C21004 + C90485 * C21005) * C88309 -
             (C13579 * C21006 + C90485 * C21007) * C90503) *
                C13578) *
               C90634 * C90579) *
              C90555)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
             C91 * C115) *
                C88316 +
            (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 + C102 * C118 +
             C91 * C127) *
                C90744 -
            (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 + C100 * C108 +
             C89 * C114) *
                C88309 -
            (C102 * C120 + C91 * C128 + C101 * C118 + C90 * C127 + C100 * C117 +
             C89 * C126) *
                C90503) *
               C90623 * C90634 * C9074 +
           ((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
             C102 * C1699 + C91 * C1704) *
                C88309 -
            ((C102 * C1705 + C91 * C1712 + C101 * C1706 + C90 * C1713 +
              C100 * C1707 + C89 * C1714) *
                 C90744 +
             (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
              C100 * C1700 + C89 * C1708) *
                 C88316) +
            (C100 * C1706 + C89 * C1713 + C101 * C1705 + C90 * C1712 +
             C102 * C1709 + C91 * C1715) *
                C90503) *
               C90623 * C90634 * C90579) *
              C6692 +
          (((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 + C102 * C831 +
             C91 * C836) *
                C88309 -
            ((C102 * C837 + C91 * C844 + C101 * C838 + C90 * C845 +
              C100 * C839 + C89 * C846) *
                 C90744 +
             (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
              C100 * C832 + C89 * C840) *
                 C88316) +
            (C100 * C838 + C89 * C845 + C101 * C837 + C90 * C844 + C102 * C841 +
             C91 * C847) *
                C90503) *
               C90623 * C90634 * C9074 +
           ((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
             C102 * C3893 + C91 * C3899) *
                C88316 +
            (C100 * C3900 + C89 * C3909 + C101 * C3901 + C90 * C3910 +
             C102 * C3902 + C91 * C3911) *
                C90744 -
            (C102 * C8120 + C91 * C8121 + C101 * C3893 + C90 * C3899 +
             C100 * C3892 + C89 * C3898) *
                C88309 -
            (C102 * C8122 + C91 * C8123 + C101 * C3902 + C90 * C3911 +
             C100 * C3901 + C89 * C3910) *
                C90503) *
               C90623 * C90634 * C90579) *
              C90555)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C88316 +
             (C13579 * C116 + C90485 * C125) * C90744 -
             (C13579 * C108 + C90485 * C114) * C88309 -
             (C13579 * C117 + C90485 * C126) * C90503) *
                C90623 * C26429 +
            (C30256 + C30257 - C30258 - C30259) * C90623 * C26430 +
            C30283 * C26431) *
               C9074 +
           ((C30258 - (C30257 + C30256) + C30259) * C90623 * C26429 +
            (C30262 - (C30261 + C30260) + C30263) * C90623 * C26430 +
            (C30278 - (C30279 + C30280) + C30281) * C90623 * C26431) *
               C90579) *
              C6692 +
          (((C15536 - (C15535 + C15534) + C15537) * C90623 * C26429 +
            (C24209 - (C24210 + C24211) + C24212) * C90623 * C26430 +
            (C36893 - (C36894 + C36895) + C36896) * C90623 * C26431) *
               C9074 +
           ((C24211 + C24210 - C24209 - C24212) * C90623 * C26429 +
            (C36895 + C36894 - C36893 - C36896) * C90623 * C26430 +
            (C31052 * C88316 + C31053 * C90744 -
             (C13579 * C33649 + C90485 * C33650) * C88309 -
             (C13579 * C33651 + C90485 * C33652) * C90503) *
                C90623 * C26431) *
               C90579) *
              C90555)) /
            (p * q * std::sqrt(p + q));
    d2eexy[33] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C13579 * C107 + C90485 * C113) * C6771 +
                       (C13579 * C182 + C90485 * C188) * C6692 -
                       C14082 * C6772 - C14192 * C90555) *
                          C13576 +
                      (C14082 * C6771 + C14192 * C6692 - C14088 * C6772 -
                       C14193 * C90555) *
                          C13577 +
                      (C14088 * C6771 + C14193 * C6692 - C15553 * C6772 -
                       C15643 * C90555) *
                          C13578) *
                         C90634 * C90744 +
                     ((C14084 * C6772 -
                       ((C13579 * C183 + C90485 * C189) * C6692 +
                        (C13579 * C108 + C90485 * C114) * C6771) +
                       C14194 * C90555) *
                          C13576 +
                      (C14090 * C6772 - (C14194 * C6692 + C14084 * C6771) +
                       C14195 * C90555) *
                          C13577 +
                      (C15551 * C6772 - (C14195 * C6692 + C14090 * C6771) +
                       C15644 * C90555) *
                          C13578) *
                         C90634 * C90503) *
                        C9074 +
                    (((C16859 * C6772 -
                       ((C13579 * C1794 + C90485 * C1799) * C6692 +
                        (C13579 * C1700 + C90485 * C1708) * C6771) +
                       C16953 * C90555) *
                          C13576 +
                      (C16857 * C6772 - (C16953 * C6692 + C16859 * C6771) +
                       C16954 * C90555) *
                          C13577 +
                      (C16860 * C6772 - (C16954 * C6692 + C16857 * C6771) +
                       C16955 * C90555) *
                          C13578) *
                         C90634 * C90744 +
                     (((C13579 * C1697 + C90485 * C1702) * C6771 +
                       (C13579 * C1791 + C90485 * C1796) * C6692 -
                       C21021 * C6772 - C21133 * C90555) *
                          C13576 +
                      (C21021 * C6771 + C21133 * C6692 - C21023 * C6772 -
                       C21134 * C90555) *
                          C13577 +
                      (C21023 * C6771 + C21134 * C6692 -
                       (C13579 * C21004 + C90485 * C21005) * C6772 -
                       (C13579 * C21126 + C90485 * C21127) * C90555) *
                          C13578) *
                         C90634 * C90503) *
                        C90579)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                       C102 * C109 + C91 * C115) *
                          C6771 +
                      (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 +
                       C102 * C184 + C91 * C190) *
                          C6692 -
                      (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                       C100 * C832 + C89 * C840) *
                          C6772 -
                      (C102 * C925 + C91 * C930 + C101 * C926 + C90 * C931 +
                       C100 * C927 + C89 * C932) *
                          C90555) *
                         C90623 * C90634 * C90744 +
                     ((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 +
                       C102 * C831 + C91 * C836) *
                          C6772 -
                      ((C102 * C185 + C91 * C191 + C101 * C184 + C90 * C190 +
                        C100 * C183 + C89 * C189) *
                           C6692 +
                       (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                        C100 * C108 + C89 * C114) *
                           C6771) +
                      (C100 * C926 + C89 * C931 + C101 * C925 + C90 * C930 +
                       C102 * C928 + C91 * C933) *
                          C90555) *
                         C90623 * C90634 * C90503) *
                        C9074 +
                    (((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
                       C102 * C3893 + C91 * C3899) *
                          C6772 -
                      ((C102 * C1792 + C91 * C1797 + C101 * C1791 +
                        C90 * C1796 + C100 * C1794 + C89 * C1799) *
                           C6692 +
                       (C102 * C1698 + C91 * C1703 + C101 * C1697 +
                        C90 * C1702 + C100 * C1700 + C89 * C1708) *
                           C6771) +
                      (C100 * C3989 + C89 * C3995 + C101 * C3990 + C90 * C3996 +
                       C102 * C3991 + C91 * C3997) *
                          C90555) *
                         C90623 * C90634 * C90744 +
                     ((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
                       C102 * C1699 + C91 * C1704) *
                          C6771 +
                      (C100 * C1791 + C89 * C1796 + C101 * C1792 + C90 * C1797 +
                       C102 * C1793 + C91 * C1798) *
                          C6692 -
                      (C102 * C8120 + C91 * C8121 + C101 * C3893 + C90 * C3899 +
                       C100 * C3892 + C89 * C3898) *
                          C6772 -
                      (C102 * C8222 + C91 * C8223 + C101 * C3991 + C90 * C3997 +
                       C100 * C3990 + C89 * C3996) *
                          C90555) *
                         C90623 * C90634 * C90503) *
                        C90579)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C13579 * C107 + C90485 * C113) * C6771 +
                       (C13579 * C182 + C90485 * C188) * C6692 -
                       C14082 * C6772 - C14192 * C90555) *
                          C90623 * C26429 +
                      (C33772 + C33773 - C33774 - C33775) * C90623 * C26430 +
                      (C33776 + C33777 - C33778 - C33779) * C90623 * C26431) *
                         C90744 +
                     ((C14084 * C6772 -
                       ((C13579 * C183 + C90485 * C189) * C6692 +
                        (C13579 * C108 + C90485 * C114) * C6771) +
                       C14194 * C90555) *
                          C90623 * C26429 +
                      (C33780 - (C33781 + C33782) + C33783) * C90623 * C26430 +
                      (C33784 - (C33785 + C33786) + C33790) * C90623 * C26431) *
                         C90503) *
                        C9074 +
                    (((C33774 - (C33773 + C33772) + C33775) * C90623 * C26429 +
                      (C33778 - (C33777 + C33776) + C33779) * C90623 * C26430 +
                      (C31052 * C6772 - (C30373 * C6692 + C30275 * C6771) +
                       C31147 * C90555) *
                          C90623 * C26431) *
                         C90744 +
                     ((C33782 + C33781 - C33780 - C33783) * C90623 * C26429 +
                      (C33786 + C33785 - C33784 - C33790) * C90623 * C26430 +
                      (C30273 * C6771 + C30372 * C6692 -
                       (C13579 * C33649 + C90485 * C33650) * C6772 -
                       (C13579 * C33769 + C90485 * C33770) * C90555) *
                          C90623 * C26431) *
                         C90503) *
                        C90579)) /
                      (p * q * std::sqrt(p + q));
    d2eexz[33] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C13579 * C107 + C90485 * C113) * C9224 +
                       (C13579 * C245 + C90485 * C251) * C9074 -
                       (C13579 * C1700 + C90485 * C1708) * C9225 -
                       (C13579 * C1879 + C90485 * C1884) * C90579) *
                          C13576 +
                      (C22829 + C22830 - C22831 - C22832) * C13577 +
                      (C22833 + C22834 - C22835 - C22836) * C13578) *
                         C90634 * C6692 +
                     ((C22831 - (C22830 + C22829) + C22832) * C13576 +
                      (C22835 - (C22834 + C22833) + C22836) * C13577 +
                      (C16860 * C9225 - (C15731 * C9074 + C15553 * C9224) +
                       C17052 * C90579) *
                          C13578) *
                         C90634 * C90555) *
                        C90744 +
                    ((((C13579 * C1697 + C90485 * C1702) * C9225 -
                       ((C13579 * C246 + C90485 * C252) * C9074 +
                        (C13579 * C108 + C90485 * C114) * C9224) +
                       (C13579 * C1878 + C90485 * C1883) * C90579) *
                          C13576 +
                      (C22837 - (C22838 + C22839) + C22840) * C13577 +
                      (C22841 - (C22842 + C22843) + C22844) * C13578) *
                         C90634 * C6692 +
                     ((C22839 + C22838 - C22837 - C22840) * C13576 +
                      (C22843 + C22842 - C22841 - C22844) * C13577 +
                      (C15551 * C9224 + C15732 * C9074 -
                       (C13579 * C21004 + C90485 * C21005) * C9225 -
                       (C13579 * C21232 + C90485 * C21233) * C90579) *
                          C13578) *
                         C90634 * C90555) *
                        C90503)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                       C102 * C109 + C91 * C115) *
                          C9224 +
                      (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 +
                       C102 * C247 + C91 * C253) *
                          C9074 -
                      (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
                       C100 * C1700 + C89 * C1708) *
                          C9225 -
                      (C102 * C1877 + C91 * C1882 + C101 * C1878 + C90 * C1883 +
                       C100 * C1879 + C89 * C1884) *
                          C90579) *
                         C90623 * C90634 * C6692 +
                     ((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
                       C102 * C3893 + C91 * C3899) *
                          C9225 -
                      ((C102 * C1009 + C91 * C1014 + C101 * C1010 +
                        C90 * C1015 + C100 * C1011 + C89 * C1016) *
                           C9074 +
                       (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                        C100 * C832 + C89 * C840) *
                           C9224) +
                      (C100 * C4075 + C89 * C4081 + C101 * C4076 + C90 * C4082 +
                       C102 * C4077 + C91 * C4083) *
                          C90579) *
                         C90623 * C90634 * C90555) *
                        C90744 +
                    (((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
                       C102 * C1699 + C91 * C1704) *
                          C9225 -
                      ((C102 * C248 + C91 * C254 + C101 * C247 + C90 * C253 +
                        C100 * C246 + C89 * C252) *
                           C9074 +
                       (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                        C100 * C108 + C89 * C114) *
                           C9224) +
                      (C100 * C1878 + C89 * C1883 + C101 * C1877 + C90 * C1882 +
                       C102 * C1880 + C91 * C1885) *
                          C90579) *
                         C90623 * C90634 * C6692 +
                     ((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 +
                       C102 * C831 + C91 * C836) *
                          C9224 +
                      (C100 * C1010 + C89 * C1015 + C101 * C1009 + C90 * C1014 +
                       C102 * C1012 + C91 * C1017) *
                          C9074 -
                      (C102 * C8120 + C91 * C8121 + C101 * C3893 + C90 * C3899 +
                       C100 * C3892 + C89 * C3898) *
                          C9225 -
                      (C102 * C8322 + C91 * C8323 + C101 * C4077 + C90 * C4083 +
                       C100 * C4076 + C89 * C4082) *
                          C90579) *
                         C90623 * C90634 * C90555) *
                        C90503)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C13579 * C107 + C90485 * C113) * C9224 +
                       (C13579 * C245 + C90485 * C251) * C9074 -
                       C27600 * C9225 - C27814 * C90579) *
                          C90623 * C26429 +
                      (C27600 * C9224 + C27814 * C9074 - C27606 * C9225 -
                       C27815 * C90579) *
                          C90623 * C26430 +
                      (C27606 * C9224 + C27815 * C9074 - C30275 * C9225 -
                       C30458 * C90579) *
                          C90623 * C26431) *
                         C6692 +
                     ((C22831 - (C22830 + C22829) + C22832) * C90623 * C26429 +
                      (C18362 * C9225 - (C17049 * C9074 + C16859 * C9224) +
                       C18542 * C90579) *
                          C90623 * C26430 +
                      (C31052 * C9225 - (C18542 * C9074 + C18362 * C9224) +
                       C31230 * C90579) *
                          C90623 * C26431) *
                         C90555) *
                        C90744 +
                    (((C27602 * C9225 -
                       ((C13579 * C246 + C90485 * C252) * C9074 +
                        (C13579 * C108 + C90485 * C114) * C9224) +
                       C27816 * C90579) *
                          C90623 * C26429 +
                      (C27608 * C9225 - (C27816 * C9074 + C27602 * C9224) +
                       C27817 * C90579) *
                          C90623 * C26430 +
                      (C30273 * C9225 - (C27817 * C9074 + C27608 * C9224) +
                       C30459 * C90579) *
                          C90623 * C26431) *
                         C6692 +
                     ((C22839 + C22838 - C22837 - C22840) * C90623 * C26429 +
                      (C21021 * C9224 + C21245 * C9074 - C33668 * C9225 -
                       C33893 * C90579) *
                          C90623 * C26430 +
                      (C33668 * C9224 + C33893 * C9074 -
                       (C13579 * C33649 + C90485 * C33650) * C9225 -
                       (C13579 * C33888 + C90485 * C33889) * C90579) *
                          C90623 * C26431) *
                         C90555) *
                        C90503)) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[33] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
             C13732 * C2570 + C13578 * C2827) *
                C88316 +
            (C13730 * C116 + C13576 * C314 + C13731 * C839 + C13577 * C1098 +
             C13732 * C2577 + C13578 * C2831) *
                C90744 -
            (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
             C13730 * C108 + C13576 * C309) *
                C88309 -
            (C13732 * C2578 + C13578 * C2832 + C13731 * C838 + C13577 * C1099 +
             C13730 * C117 + C13576 * C315) *
                C90503) *
               C90634 * C90485 * C9074 +
           ((C13730 * C1697 + C13576 * C1961 + C13731 * C3892 + C13577 * C4162 +
             C13732 * C3895 + C13578 * C4165) *
                C88309 -
            ((C13732 * C3905 + C13578 * C4172 + C13731 * C3900 +
              C13577 * C4167 + C13730 * C1707 + C13576 * C1966) *
                 C90744 +
             (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 +
              C13577 * C4161 + C13730 * C1700 + C13576 * C1962) *
                 C88316) +
            (C13730 * C1706 + C13576 * C1967 + C13731 * C3901 + C13577 * C4168 +
             C13732 * C3904 + C13578 * C4171) *
                C90503) *
               C90634 * C90485 * C90579) *
              C6692 +
          (((C13730 * C829 + C13576 * C1093 + C13731 * C2571 + C13577 * C2828 +
             C13732 * C3366 + C13578 * C3544) *
                C88309 -
            ((C13732 * C3370 + C13578 * C3548 + C13731 * C2577 +
              C13577 * C2831 + C13730 * C839 + C13576 * C1098) *
                 C90744 +
             (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 +
              C13577 * C2827 + C13730 * C832 + C13576 * C1094) *
                 C88316) +
            (C13730 * C838 + C13576 * C1099 + C13731 * C2578 + C13577 * C2832 +
             C13732 * C3369 + C13578 * C3547) *
                C90503) *
               C90634 * C90485 * C9074 +
           ((C13730 * C3891 + C13576 * C4161 + C13731 * C3896 + C13577 * C4166 +
             C13732 * C16835 + C13578 * C17131) *
                C88316 +
            (C13730 * C3900 + C13576 * C4167 + C13731 * C3905 + C13577 * C4172 +
             C13732 * C16838 + C13578 * C17133) *
                C90744 -
            (C13732 * C21004 + C13578 * C21346 + C13731 * C3895 +
             C13577 * C4165 + C13730 * C3892 + C13576 * C4162) *
                C88309 -
            (C13732 * C21006 + C13578 * C21347 + C13731 * C3904 +
             C13577 * C4171 + C13730 * C3901 + C13576 * C4168) *
                C90503) *
               C90634 * C90485 * C90579) *
              C90555)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C88316 +
             (C307 * C116 + C90623 * C314) * C90744 - C337 * C88309 -
             C338 * C90503) *
                C90634 * C89 +
            (C337 * C88316 + C338 * C90744 - C339 * C88309 - C340 * C90503) *
                C90634 * C90 +
            (C339 * C88316 + C340 * C90744 - C341 * C88309 - C342 * C90503) *
                C90634 * C91) *
               C9074 +
           ((C1984 * C88309 -
             ((C307 * C1707 + C90623 * C1966) * C90744 +
              (C307 * C1700 + C90623 * C1962) * C88316) +
             C1985 * C90503) *
                C90634 * C89 +
            (C1986 * C88309 - (C1985 * C90744 + C1984 * C88316) +
             C1987 * C90503) *
                C90634 * C90 +
            (C1988 * C88309 - (C1987 * C90744 + C1986 * C88316) +
             C1989 * C90503) *
                C90634 * C91) *
               C90579) *
              C6692 +
          (((C1116 * C88309 -
             ((C307 * C839 + C90623 * C1098) * C90744 +
              (C307 * C832 + C90623 * C1094) * C88316) +
             C1117 * C90503) *
                C90634 * C89 +
            (C1118 * C88309 - (C1117 * C90744 + C1116 * C88316) +
             C1119 * C90503) *
                C90634 * C90 +
            (C1120 * C88309 - (C1119 * C90744 + C1118 * C88316) +
             C1121 * C90503) *
                C90634 * C91) *
               C9074 +
           (((C307 * C3891 + C90623 * C4161) * C88316 +
             (C307 * C3900 + C90623 * C4167) * C90744 - C8433 * C88309 -
             C8434 * C90503) *
                C90634 * C89 +
            (C8433 * C88316 + C8434 * C90744 - C8435 * C88309 -
             C8436 * C90503) *
                C90634 * C90 +
            (C8435 * C88316 + C8436 * C90744 -
             (C307 * C8120 + C90623 * C8422) * C88309 -
             (C307 * C8122 + C90623 * C8423) * C90503) *
                C90634 * C91) *
               C90579) *
              C90555)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C88316 +
             (C307 * C116 + C90623 * C314) * C90744 - C337 * C88309 -
             C338 * C90503) *
                C26429 +
            (C30538 + C30539 - C30540 - C30541) * C26430 + C30564 * C26431) *
               C90485 * C9074 +
           ((C30540 - (C30539 + C30538) + C30541) * C26429 +
            (C30544 - (C30543 + C30542) + C30545) * C26430 +
            (C30560 - (C30561 + C30562) + C30563) * C26431) *
               C90485 * C90579) *
              C6692 +
          (((C1116 * C88309 -
             ((C307 * C839 + C90623 * C1098) * C90744 +
              (C307 * C832 + C90623 * C1094) * C88316) +
             C1117 * C90503) *
                C26429 +
            (C37191 - (C37192 + C37193) + C37194) * C26430 +
            (C37195 - (C37196 + C37197) + C37198) * C26431) *
               C90485 * C9074 +
           ((C37193 + C37192 - C37191 - C37194) * C26429 +
            (C37197 + C37196 - C37195 - C37198) * C26430 +
            (C31315 * C88316 + C31316 * C90744 -
             (C307 * C33649 + C90623 * C33991) * C88309 -
             (C307 * C33651 + C90623 * C33992) * C90503) *
                C26431) *
               C90485 * C90579) *
              C90555)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[33] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
             C13732 * C2570 + C13578 * C2827) *
                C6771 +
            (C13730 * C182 + C13576 * C394 + C13731 * C927 + C13577 * C1195 +
             C13732 * C2663 + C13578 * C2921) *
                C6692 -
            (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
             C13730 * C832 + C13576 * C1094) *
                C6772 -
            (C13732 * C3433 + C13578 * C3599 + C13731 * C2663 + C13577 * C2921 +
             C13730 * C927 + C13576 * C1195) *
                C90555) *
               C90634 * C90485 * C90744 +
           ((C13730 * C829 + C13576 * C1093 + C13731 * C2571 + C13577 * C2828 +
             C13732 * C3366 + C13578 * C3544) *
                C6772 -
            ((C13732 * C2664 + C13578 * C2922 + C13731 * C926 + C13577 * C1196 +
              C13730 * C183 + C13576 * C395) *
                 C6692 +
             (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
              C13730 * C108 + C13576 * C309) *
                 C6771) +
            (C13730 * C926 + C13576 * C1196 + C13731 * C2664 + C13577 * C2922 +
             C13732 * C3432 + C13578 * C3600) *
                C90555) *
               C90634 * C90485 * C90503) *
              C9074 +
          (((C13730 * C3891 + C13576 * C4161 + C13731 * C3896 + C13577 * C4166 +
             C13732 * C16835 + C13578 * C17131) *
                C6772 -
            ((C13732 * C3994 + C13578 * C4248 + C13731 * C3989 +
              C13577 * C4247 + C13730 * C1794 + C13576 * C2066) *
                 C6692 +
             (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 +
              C13577 * C4161 + C13730 * C1700 + C13576 * C1962) *
                 C6771) +
            (C13730 * C3989 + C13576 * C4247 + C13731 * C3994 + C13577 * C4248 +
             C13732 * C16942 + C13578 * C17209) *
                C90555) *
               C90634 * C90485 * C90744 +
           ((C13730 * C1697 + C13576 * C1961 + C13731 * C3892 + C13577 * C4162 +
             C13732 * C3895 + C13578 * C4165) *
                C6771 +
            (C13730 * C1791 + C13576 * C2063 + C13731 * C3990 + C13577 * C4249 +
             C13732 * C3993 + C13578 * C4250) *
                C6692 -
            (C13732 * C21004 + C13578 * C21346 + C13731 * C3895 +
             C13577 * C4165 + C13730 * C3892 + C13576 * C4162) *
                C6772 -
            (C13732 * C21126 + C13578 * C21446 + C13731 * C3993 +
             C13577 * C4250 + C13730 * C3990 + C13576 * C4249) *
                C90555) *
               C90634 * C90485 * C90503) *
              C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C6771 +
             (C307 * C182 + C90623 * C394) * C6692 -
             (C307 * C832 + C90623 * C1094) * C6772 -
             (C307 * C927 + C90623 * C1195) * C90555) *
                C90634 * C89 +
            (C6996 + C6997 - C6998 - C6999) * C90634 * C90 + C7011 * C91) *
               C90744 +
           ((C6998 - (C6997 + C6996) + C6999) * C90634 * C89 +
            (C7002 - (C7001 + C7000) + C7003) * C90634 * C90 +
            (C7004 - (C7005 + C7006) + C7007) * C90634 * C91) *
               C90503) *
              C9074 +
          ((((C307 * C3891 + C90623 * C4161) * C6772 -
             ((C307 * C1794 + C90623 * C2066) * C6692 +
              (C307 * C1700 + C90623 * C1962) * C6771) +
             (C307 * C3989 + C90623 * C4247) * C90555) *
                C90634 * C89 +
            (C8536 - (C8537 + C8538) + C8548) * C90634 * C90 +
            (C8541 - (C8542 + C8543) + C8549) * C90634 * C91) *
               C90744 +
           ((C8538 + C8537 - C8536 - C8548) * C90634 * C89 +
            (C8543 + C8542 - C8541 - C8549) * C90634 * C90 +
            (C1988 * C6771 + C2080 * C6692 -
             (C307 * C8120 + C90623 * C8422) * C6772 -
             (C307 * C8222 + C90623 * C8534) * C90555) *
                C90634 * C91) *
               C90503) *
              C90579)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C6771 +
             (C307 * C182 + C90623 * C394) * C6692 -
             (C307 * C832 + C90623 * C1094) * C6772 -
             (C307 * C927 + C90623 * C1195) * C90555) *
                C26429 +
            (C34115 + C34116 - C34117 - C34118) * C26430 +
            (C34119 + C34120 - C34121 - C34122) * C26431) *
               C90485 * C90744 +
           ((C6998 - (C6997 + C6996) + C6999) * C26429 +
            (C8536 - (C8537 + C8538) + C8548) * C26430 +
            (C34123 - (C34124 + C34125) + C34129) * C26431) *
               C90485 * C90503) *
              C9074 +
          (((C34117 - (C34116 + C34115) + C34118) * C26429 +
            (C34121 - (C34120 + C34119) + C34122) * C26430 +
            (C31315 * C6772 - (C30650 * C6692 + C30557 * C6771) +
             C31408 * C90555) *
                C26431) *
               C90485 * C90744 +
           ((C8538 + C8537 - C8536 - C8548) * C26429 +
            (C34125 + C34124 - C34123 - C34129) * C26430 +
            (C30555 * C6771 + C30649 * C6692 -
             (C307 * C33649 + C90623 * C33991) * C6772 -
             (C307 * C33769 + C90623 * C34113) * C90555) *
                C26431) *
               C90485 * C90503) *
              C90579)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[33] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
             C13732 * C2570 + C13578 * C2827) *
                C9224 +
            (C13730 * C245 + C13576 * C474 + C13731 * C1011 + C13577 * C1301 +
             C13732 * C2745 + C13578 * C3017) *
                C9074 -
            (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 + C13577 * C4161 +
             C13730 * C1700 + C13576 * C1962) *
                C9225 -
            (C13732 * C4080 + C13578 * C4330 + C13731 * C4075 + C13577 * C4327 +
             C13730 * C1879 + C13576 * C2159) *
                C90579) *
               C90634 * C90485 * C6692 +
           ((C13730 * C3891 + C13576 * C4161 + C13731 * C3896 + C13577 * C4166 +
             C13732 * C16835 + C13578 * C17131) *
                C9225 -
            ((C13732 * C3489 + C13578 * C3654 + C13731 * C2745 +
              C13577 * C3017 + C13730 * C1011 + C13576 * C1301) *
                 C9074 +
             (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 +
              C13577 * C2827 + C13730 * C832 + C13576 * C1094) *
                 C9224) +
            (C13730 * C4075 + C13576 * C4327 + C13731 * C4080 + C13577 * C4330 +
             C13732 * C17029 + C13578 * C17285) *
                C90579) *
               C90634 * C90485 * C90555) *
              C90744 +
          (((C13730 * C1697 + C13576 * C1961 + C13731 * C3892 + C13577 * C4162 +
             C13732 * C3895 + C13578 * C4165) *
                C9225 -
            ((C13732 * C2746 + C13578 * C3018 + C13731 * C1010 +
              C13577 * C1300 + C13730 * C246 + C13576 * C475) *
                 C9074 +
             (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
              C13730 * C108 + C13576 * C309) *
                 C9224) +
            (C13730 * C1878 + C13576 * C2160 + C13731 * C4076 + C13577 * C4328 +
             C13732 * C4079 + C13578 * C4331) *
                C90579) *
               C90634 * C90485 * C6692 +
           ((C13730 * C829 + C13576 * C1093 + C13731 * C2571 + C13577 * C2828 +
             C13732 * C3366 + C13578 * C3544) *
                C9224 +
            (C13730 * C1010 + C13576 * C1300 + C13731 * C2746 + C13577 * C3018 +
             C13732 * C3488 + C13578 * C3653) *
                C9074 -
            (C13732 * C21004 + C13578 * C21346 + C13731 * C3895 +
             C13577 * C4165 + C13730 * C3892 + C13576 * C4162) *
                C9225 -
            (C13732 * C21232 + C13578 * C21545 + C13731 * C4079 +
             C13577 * C4331 + C13730 * C4076 + C13576 * C4328) *
                C90579) *
               C90634 * C90485 * C90555) *
              C90503)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C9224 +
             (C307 * C245 + C90623 * C474) * C9074 -
             (C307 * C1700 + C90623 * C1962) * C9225 -
             (C307 * C1879 + C90623 * C2159) * C90579) *
                C90634 * C89 +
            (C9449 + C9450 - C9451 - C9452) * C90634 * C90 + C9464 * C91) *
               C6692 +
           (((C307 * C3891 + C90623 * C4161) * C9225 -
             ((C307 * C1011 + C90623 * C1301) * C9074 +
              (C307 * C832 + C90623 * C1094) * C9224) +
             (C307 * C4075 + C90623 * C4327) * C90579) *
                C90634 * C89 +
            (C10298 - (C10299 + C10300) + C10301) * C90634 * C90 +
            (C10302 - (C10303 + C10304) + C10305) * C90634 * C91) *
               C90555) *
              C90744 +
          (((C9451 - (C9450 + C9449) + C9452) * C90634 * C89 +
            (C9455 - (C9454 + C9453) + C9456) * C90634 * C90 +
            (C9457 - (C9458 + C9459) + C9460) * C90634 * C91) *
               C6692 +
           ((C10300 + C10299 - C10298 - C10301) * C90634 * C89 +
            (C10304 + C10303 - C10302 - C10305) * C90634 * C90 +
            (C1120 * C9224 + C1316 * C9074 -
             (C307 * C8120 + C90623 * C8422) * C9225 -
             (C307 * C8322 + C90623 * C8647) * C90579) *
                C90634 * C91) *
               C90555) *
              C90503)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C9224 +
             (C307 * C245 + C90623 * C474) * C9074 - C27910 * C9225 -
             C28080 * C90579) *
                C26429 +
            (C27910 * C9224 + C28080 * C9074 - C27912 * C9225 -
             C28081 * C90579) *
                C26430 +
            (C27912 * C9224 + C28081 * C9074 - C30557 * C9225 -
             C30733 * C90579) *
                C26431) *
               C90485 * C6692 +
           ((C29752 * C9225 -
             ((C307 * C1011 + C90623 * C1301) * C9074 +
              (C307 * C832 + C90623 * C1094) * C9224) +
             C29948 * C90579) *
                C26429 +
            (C29754 * C9225 - (C29948 * C9074 + C29752 * C9224) +
             C29949 * C90579) *
                C26430 +
            (C31315 * C9225 - (C29949 * C9074 + C29754 * C9224) +
             C31489 * C90579) *
                C26431) *
               C90485 * C90555) *
              C90744 +
          (((C9451 - (C9450 + C9449) + C9452) * C26429 +
            (C4930 * C9225 - (C2180 * C9074 + C1984 * C9224) + C5114 * C90579) *
                C26430 +
            (C30555 * C9225 - (C5114 * C9074 + C4930 * C9224) +
             C30734 * C90579) *
                C26431) *
               C90485 * C6692 +
           ((C10300 + C10299 - C10298 - C10301) * C26429 +
            (C8433 * C9224 + C8659 * C9074 - C34012 * C9225 - C34231 * C90579) *
                C26430 +
            (C34012 * C9224 + C34231 * C9074 -
             (C307 * C33649 + C90623 * C33991) * C9225 -
             (C307 * C33888 + C90623 * C34227) * C90579) *
                C26431) *
               C90485 * C90555) *
              C90503)) /
            (p * q * std::sqrt(p + q));
    d2eezx[33] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C88316 +
             (C554 * C116 + C90634 * C561) * C90744 - C584 * C88309 -
             C585 * C90503) *
                C90485 * C13576 +
            (C16043 + C16044 - C16045 - C16046) * C90485 * C13577 +
            C16070 * C13578) *
               C9074 +
           ((C2286 * C88309 -
             ((C554 * C1707 + C90634 * C2268) * C90744 +
              (C554 * C1700 + C90634 * C2264) * C88316) +
             C2287 * C90503) *
                C90485 * C13576 +
            (C24805 - (C24806 + C24807) + C24808) * C90485 * C13577 +
            (C24809 - (C24810 + C24811) + C24812) * C90485 * C13578) *
               C90579) *
              C6692 +
          (((C16045 - (C16044 + C16043) + C16046) * C90485 * C13576 +
            (C16049 - (C16048 + C16047) + C16050) * C90485 * C13577 +
            (C16065 - (C16066 + C16067) + C16068) * C90485 * C13578) *
               C9074 +
           ((C24807 + C24806 - C24805 - C24808) * C90485 * C13576 +
            (C24811 + C24810 - C24809 - C24812) * C90485 * C13577 +
            (C17382 * C88316 + C17383 * C90744 -
             (C554 * C21004 + C90634 * C21644) * C88309 -
             (C554 * C21006 + C90634 * C21645) * C90503) *
                C90485 * C13578) *
               C90579) *
              C90555)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C88316 +
             (C554 * C116 + C90634 * C561) * C90744 - C584 * C88309 -
             C585 * C90503) *
                C89 +
            (C584 * C88316 + C585 * C90744 - C586 * C88309 - C587 * C90503) *
                C90 +
            (C586 * C88316 + C587 * C90744 - C588 * C88309 - C589 * C90503) *
                C91) *
               C90623 * C9074 +
           ((C2286 * C88309 -
             ((C554 * C1707 + C90634 * C2268) * C90744 +
              (C554 * C1700 + C90634 * C2264) * C88316) +
             C2287 * C90503) *
                C89 +
            (C2288 * C88309 - (C2287 * C90744 + C2286 * C88316) +
             C2289 * C90503) *
                C90 +
            (C2290 * C88309 - (C2289 * C90744 + C2288 * C88316) +
             C2291 * C90503) *
                C91) *
               C90623 * C90579) *
              C6692 +
          (((C1418 * C88309 -
             ((C554 * C839 + C90634 * C1400) * C90744 +
              (C554 * C832 + C90634 * C1396) * C88316) +
             C1419 * C90503) *
                C89 +
            (C1420 * C88309 - (C1419 * C90744 + C1418 * C88316) +
             C1421 * C90503) *
                C90 +
            (C1422 * C88309 - (C1421 * C90744 + C1420 * C88316) +
             C1423 * C90503) *
                C91) *
               C90623 * C9074 +
           (((C554 * C3891 + C90634 * C4407) * C88316 +
             (C554 * C3900 + C90634 * C4413) * C90744 - C8771 * C88309 -
             C8772 * C90503) *
                C89 +
            (C8771 * C88316 + C8772 * C90744 - C8773 * C88309 -
             C8774 * C90503) *
                C90 +
            (C8773 * C88316 + C8774 * C90744 -
             (C554 * C8120 + C90634 * C8760) * C88309 -
             (C554 * C8122 + C90634 * C8761) * C90503) *
                C91) *
               C90623 * C90579) *
              C90555)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C26732 * C107 + C26429 * C555 + C26733 * C1700 + C26430 * C2264 +
             C26734 * C4656 + C26431 * C5191) *
                C88316 +
            (C26732 * C116 + C26429 * C561 + C26733 * C1707 + C26430 * C2268 +
             C26734 * C4663 + C26431 * C5195) *
                C90744 -
            (C26734 * C4657 + C26431 * C5192 + C26733 * C1697 + C26430 * C2263 +
             C26732 * C108 + C26429 * C556) *
                C88309 -
            (C26734 * C4664 + C26431 * C5196 + C26733 * C1706 + C26430 * C2269 +
             C26732 * C117 + C26429 * C562) *
                C90503) *
               C90485 * C90623 * C9074 +
           ((C26732 * C1697 + C26429 * C2263 + C26733 * C4657 + C26430 * C5192 +
             C26734 * C6164 + C26431 * C6504) *
                C88309 -
            ((C26734 * C6168 + C26431 * C6508 + C26733 * C4663 +
              C26430 * C5195 + C26732 * C1707 + C26429 * C2268) *
                 C90744 +
             (C26734 * C6165 + C26431 * C6505 + C26733 * C4656 +
              C26430 * C5191 + C26732 * C1700 + C26429 * C2264) *
                 C88316) +
            (C26732 * C1706 + C26429 * C2269 + C26733 * C4664 + C26430 * C5196 +
             C26734 * C6167 + C26431 * C6507) *
                C90503) *
               C90485 * C90623 * C90579) *
              C6692 +
          (((C26732 * C829 + C26429 * C1395 + C26733 * C3892 + C26430 * C4408 +
             C26734 * C5470 + C26431 * C5950) *
                C88309 -
            ((C26734 * C5474 + C26431 * C5954 + C26733 * C3900 +
              C26430 * C4413 + C26732 * C839 + C26429 * C1400) *
                 C90744 +
             (C26734 * C5471 + C26431 * C5951 + C26733 * C3891 +
              C26430 * C4407 + C26732 * C832 + C26429 * C1396) *
                 C88316) +
            (C26732 * C838 + C26429 * C1401 + C26733 * C3901 + C26430 * C4414 +
             C26734 * C5473 + C26431 * C5953) *
                C90503) *
               C90485 * C90623 * C9074 +
           ((C26732 * C3891 + C26429 * C4407 + C26733 * C5471 + C26430 * C5951 +
             C26734 * C19088 + C26431 * C19412) *
                C88316 +
            (C26732 * C3900 + C26429 * C4413 + C26733 * C5474 + C26430 * C5954 +
             C26734 * C19091 + C26431 * C19414) *
                C90744 -
            (C26734 * C33649 + C26431 * C34329 + C26733 * C5470 +
             C26430 * C5950 + C26732 * C3892 + C26429 * C4408) *
                C88309 -
            (C26734 * C33651 + C26431 * C34330 + C26733 * C5473 +
             C26430 * C5953 + C26732 * C3901 + C26429 * C4414) *
                C90503) *
               C90485 * C90623 * C90579) *
              C90555)) /
            (p * q * std::sqrt(p + q));
    d2eezy[33] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C6771 +
             (C554 * C182 + C90634 * C641) * C6692 - C14614 * C6772 -
             C14700 * C90555) *
                C90485 * C13576 +
            (C14614 * C6771 + C14700 * C6692 - C14616 * C6772 -
             C14701 * C90555) *
                C90485 * C13577 +
            (C14616 * C6771 + C14701 * C6692 - C16062 * C6772 -
             C16151 * C90555) *
                C90485 * C13578) *
               C90744 +
           ((C7236 - (C7235 + C7234) + C7237) * C90485 * C13576 +
            (C3122 * C6772 - (C1518 * C6692 + C1418 * C6771) + C3218 * C90555) *
                C90485 * C13577 +
            (C16060 * C6772 - (C3218 * C6692 + C3122 * C6771) +
             C16152 * C90555) *
                C90485 * C13578) *
               C90503) *
              C9074 +
          (((C17381 * C6772 -
             ((C554 * C1794 + C90634 * C2368) * C6692 +
              (C554 * C1700 + C90634 * C2264) * C6771) +
             C17474 * C90555) *
                C90485 * C13576 +
            (C17379 * C6772 - (C17474 * C6692 + C17381 * C6771) +
             C17475 * C90555) *
                C90485 * C13577 +
            (C17382 * C6772 - (C17475 * C6692 + C17379 * C6771) +
             C17476 * C90555) *
                C90485 * C13578) *
               C90744 +
           ((C8876 + C8875 - C8874 - C8886) * C90485 * C13576 +
            (C8771 * C6771 + C8884 * C6692 - C21657 * C6772 - C21762 * C90555) *
                C90485 * C13577 +
            (C21657 * C6771 + C21762 * C6692 -
             (C554 * C21004 + C90634 * C21644) * C6772 -
             (C554 * C21126 + C90634 * C21758) * C90555) *
                C90485 * C13578) *
               C90503) *
              C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C6771 +
             (C554 * C182 + C90634 * C641) * C6692 -
             (C554 * C832 + C90634 * C1396) * C6772 -
             (C554 * C927 + C90634 * C1497) * C90555) *
                C89 +
            (C7234 + C7235 - C7236 - C7237) * C90 + C7248 * C91) *
               C90623 * C90744 +
           ((C7236 - (C7235 + C7234) + C7237) * C89 +
            (C7240 - (C7239 + C7238) + C7241) * C90 +
            (C7242 - (C7243 + C7244) + C7245) * C91) *
               C90623 * C90503) *
              C9074 +
          ((((C554 * C3891 + C90634 * C4407) * C6772 -
             ((C554 * C1794 + C90634 * C2368) * C6692 +
              (C554 * C1700 + C90634 * C2264) * C6771) +
             (C554 * C3989 + C90634 * C4493) * C90555) *
                C89 +
            (C8874 - (C8875 + C8876) + C8886) * C90 +
            (C8879 - (C8880 + C8881) + C8887) * C91) *
               C90623 * C90744 +
           ((C8876 + C8875 - C8874 - C8886) * C89 +
            (C8881 + C8880 - C8879 - C8887) * C90 +
            (C2290 * C6771 + C2382 * C6692 -
             (C554 * C8120 + C90634 * C8760) * C6772 -
             (C554 * C8222 + C90634 * C8872) * C90555) *
                C91) *
               C90623 * C90503) *
              C90579)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C26732 * C107 + C26429 * C555 + C26733 * C1700 + C26430 * C2264 +
             C26734 * C4656 + C26431 * C5191) *
                C6771 +
            (C26732 * C182 + C26429 * C641 + C26733 * C1794 + C26430 * C2368 +
             C26734 * C4746 + C26431 * C5285) *
                C6692 -
            (C26734 * C5471 + C26431 * C5951 + C26733 * C3891 + C26430 * C4407 +
             C26732 * C832 + C26429 * C1396) *
                C6772 -
            (C26734 * C5557 + C26431 * C6029 + C26733 * C3989 + C26430 * C4493 +
             C26732 * C927 + C26429 * C1497) *
                C90555) *
               C90485 * C90623 * C90744 +
           ((C26732 * C829 + C26429 * C1395 + C26733 * C3892 + C26430 * C4408 +
             C26734 * C5470 + C26431 * C5950) *
                C6772 -
            ((C26734 * C4747 + C26431 * C5286 + C26733 * C1791 +
              C26430 * C2365 + C26732 * C183 + C26429 * C642) *
                 C6692 +
             (C26734 * C4657 + C26431 * C5192 + C26733 * C1697 +
              C26430 * C2263 + C26732 * C108 + C26429 * C556) *
                 C6771) +
            (C26732 * C926 + C26429 * C1498 + C26733 * C3990 + C26430 * C4495 +
             C26734 * C5556 + C26431 * C6030) *
                C90555) *
               C90485 * C90623 * C90503) *
              C9074 +
          (((C26732 * C3891 + C26429 * C4407 + C26733 * C5471 + C26430 * C5951 +
             C26734 * C19088 + C26431 * C19412) *
                C6772 -
            ((C26734 * C6227 + C26431 * C6561 + C26733 * C4746 +
              C26430 * C5285 + C26732 * C1794 + C26429 * C2368) *
                 C6692 +
             (C26734 * C6165 + C26431 * C6505 + C26733 * C4656 +
              C26430 * C5191 + C26732 * C1700 + C26429 * C2264) *
                 C6771) +
            (C26732 * C3989 + C26429 * C4493 + C26733 * C5557 + C26430 * C6029 +
             C26734 * C19146 + C26431 * C19466) *
                C90555) *
               C90485 * C90623 * C90744 +
           ((C26732 * C1697 + C26429 * C2263 + C26733 * C4657 + C26430 * C5192 +
             C26734 * C6164 + C26431 * C6504) *
                C6771 +
            (C26732 * C1791 + C26429 * C2365 + C26733 * C4747 + C26430 * C5286 +
             C26734 * C6226 + C26431 * C6560) *
                C6692 -
            (C26734 * C33649 + C26431 * C34329 + C26733 * C5470 +
             C26430 * C5950 + C26732 * C3892 + C26429 * C4408) *
                C6772 -
            (C26734 * C33769 + C26431 * C34429 + C26733 * C5556 +
             C26430 * C6030 + C26732 * C3990 + C26429 * C4495) *
                C90555) *
               C90485 * C90623 * C90503) *
              C90579)) /
            (p * q * std::sqrt(p + q));
    d2eezz[33] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C90634 * C555) * C9224 +
                       (C554 * C245 + C90634 * C719) * C9074 -
                       (C554 * C1700 + C90634 * C2264) * C9225 -
                       (C554 * C1879 + C90634 * C2460) * C90579) *
                          C90485 * C13576 +
                      (C23433 + C23434 - C23435 - C23436) * C90485 * C13577 +
                      (C23437 + C23438 - C23439 - C23440) * C90485 * C13578) *
                         C6692 +
                     ((C23435 - (C23434 + C23433) + C23436) * C90485 * C13576 +
                      (C23439 - (C23438 + C23437) + C23440) * C90485 * C13577 +
                      (C17382 * C9225 - (C16238 * C9074 + C16062 * C9224) +
                       C17571 * C90579) *
                          C90485 * C13578) *
                         C90555) *
                        C90744 +
                    (((C9689 - (C9688 + C9687) + C9690) * C90485 * C13576 +
                      (C10608 - (C10609 + C10610) + C10611) * C90485 * C13577 +
                      (C23441 - (C23442 + C23443) + C23444) * C90485 * C13578) *
                         C6692 +
                     ((C10610 + C10609 - C10608 - C10611) * C90485 * C13576 +
                      (C23443 + C23442 - C23441 - C23444) * C90485 * C13577 +
                      (C16060 * C9224 + C16239 * C9074 -
                       (C554 * C21004 + C90634 * C21644) * C9225 -
                       (C554 * C21232 + C90634 * C21860) * C90579) *
                          C90485 * C13578) *
                         C90555) *
                        C90503)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C90634 * C555) * C9224 +
                       (C554 * C245 + C90634 * C719) * C9074 -
                       (C554 * C1700 + C90634 * C2264) * C9225 -
                       (C554 * C1879 + C90634 * C2460) * C90579) *
                          C89 +
                      (C9687 + C9688 - C9689 - C9690) * C90 + C9701 * C91) *
                         C90623 * C6692 +
                     (((C554 * C3891 + C90634 * C4407) * C9225 -
                       ((C554 * C1011 + C90634 * C1602) * C9074 +
                        (C554 * C832 + C90634 * C1396) * C9224) +
                       (C554 * C4075 + C90634 * C4573) * C90579) *
                          C89 +
                      (C10608 - (C10609 + C10610) + C10611) * C90 +
                      (C10612 - (C10613 + C10614) + C10615) * C91) *
                         C90623 * C90555) *
                        C90744 +
                    (((C9689 - (C9688 + C9687) + C9690) * C89 +
                      (C9693 - (C9692 + C9691) + C9694) * C90 +
                      (C9695 - (C9696 + C9697) + C9698) * C91) *
                         C90623 * C6692 +
                     ((C10610 + C10609 - C10608 - C10611) * C89 +
                      (C10614 + C10613 - C10612 - C10615) * C90 +
                      (C1422 * C9224 + C1617 * C9074 -
                       (C554 * C8120 + C90634 * C8760) * C9225 -
                       (C554 * C8322 + C90634 * C8985) * C90579) *
                          C91) *
                         C90623 * C90555) *
                        C90503)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C26732 * C107 + C26429 * C555 + C26733 * C1700 +
                       C26430 * C2264 + C26734 * C4656 + C26431 * C5191) *
                          C9224 +
                      (C26732 * C245 + C26429 * C719 + C26733 * C1879 +
                       C26430 * C2460 + C26734 * C4831 + C26431 * C5373) *
                          C9074 -
                      (C26734 * C6165 + C26431 * C6505 + C26733 * C4656 +
                       C26430 * C5191 + C26732 * C1700 + C26429 * C2264) *
                          C9225 -
                      (C26734 * C6287 + C26431 * C6612 + C26733 * C4831 +
                       C26430 * C5373 + C26732 * C1879 + C26429 * C2460) *
                          C90579) *
                         C90485 * C90623 * C6692 +
                     ((C26732 * C3891 + C26429 * C4407 + C26733 * C5471 +
                       C26430 * C5951 + C26734 * C19088 + C26431 * C19412) *
                          C9225 -
                      ((C26734 * C5637 + C26431 * C6106 + C26733 * C4075 +
                        C26430 * C4573 + C26732 * C1011 + C26429 * C1602) *
                           C9074 +
                       (C26734 * C5471 + C26431 * C5951 + C26733 * C3891 +
                        C26430 * C4407 + C26732 * C832 + C26429 * C1396) *
                           C9224) +
                      (C26732 * C4075 + C26429 * C4573 + C26733 * C5637 +
                       C26430 * C6106 + C26734 * C19199 + C26431 * C19517) *
                          C90579) *
                         C90485 * C90623 * C90555) *
                        C90744 +
                    (((C26732 * C1697 + C26429 * C2263 + C26733 * C4657 +
                       C26430 * C5192 + C26734 * C6164 + C26431 * C6504) *
                          C9225 -
                      ((C26734 * C4832 + C26431 * C5374 + C26733 * C1878 +
                        C26430 * C2461 + C26732 * C246 + C26429 * C720) *
                           C9074 +
                       (C26734 * C4657 + C26431 * C5192 + C26733 * C1697 +
                        C26430 * C2263 + C26732 * C108 + C26429 * C556) *
                           C9224) +
                      (C26732 * C1878 + C26429 * C2461 + C26733 * C4832 +
                       C26430 * C5374 + C26734 * C6286 + C26431 * C6613) *
                          C90579) *
                         C90485 * C90623 * C6692 +
                     ((C26732 * C829 + C26429 * C1395 + C26733 * C3892 +
                       C26430 * C4408 + C26734 * C5470 + C26431 * C5950) *
                          C9224 +
                      (C26732 * C1010 + C26429 * C1601 + C26733 * C4076 +
                       C26430 * C4574 + C26734 * C5636 + C26431 * C6107) *
                          C9074 -
                      (C26734 * C33649 + C26431 * C34329 + C26733 * C5470 +
                       C26430 * C5950 + C26732 * C3892 + C26429 * C4408) *
                          C9225 -
                      (C26734 * C33888 + C26431 * C34528 + C26733 * C5636 +
                       C26430 * C6107 + C26732 * C4076 + C26429 * C4574) *
                          C90579) *
                         C90485 * C90623 * C90555) *
                        C90503)) /
                      (p * q * std::sqrt(p + q));
    d2eexx[34] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C3364 +
             (C13579 * C116 + C90485 * C125) * C90498) *
                C13576 +
            (C16297 + C16298) * C13577 + C16307 * C13578) *
               C90634 * C9074 -
           (C16868 * C13578 + (C16864 + C16865) * C13577 +
            ((C13579 * C1707 + C90485 * C1714) * C90498 +
             (C13579 * C1700 + C90485 * C1708) * C3364) *
                C13576) *
               C90634 * C90579) *
              C90781 +
          (((C16865 + C16864) * C13576 + (C16863 + C16862) * C13577 +
            (C16866 + C16867) * C13578) *
               C90634 * C90579 -
           (C16308 * C13578 + (C16300 + C16299) * C13577 +
            (C16298 + C16297) * C13576) *
               C90634 * C9074) *
              C90774 +
          ((C16307 * C13576 + (C16302 + C16301) * C13577 +
            (C16311 + C16312) * C13578) *
               C90634 * C9074 -
           (((C13579 * C16839 + C90485 * C16842) * C90498 +
             (C13579 * C16836 + C90485 * C16840) * C3364) *
                C13578 +
            (C16867 + C16866) * C13577 + C16868 * C13576) *
               C90634 * C90579) *
              C7400)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
             C91 * C115) *
                C3364 +
            (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 + C102 * C118 +
             C91 * C127) *
                C90498) *
               C90623 * C90634 * C9074 -
           ((C102 * C1705 + C91 * C1712 + C101 * C1706 + C90 * C1713 +
             C100 * C1707 + C89 * C1714) *
                C90498 +
            (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
             C100 * C1700 + C89 * C1708) *
                C3364) *
               C90623 * C90634 * C90579) *
              C90781 +
          (((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
             C102 * C3893 + C91 * C3899) *
                C3364 +
            (C100 * C3900 + C89 * C3909 + C101 * C3901 + C90 * C3910 +
             C102 * C3902 + C91 * C3911) *
                C90498) *
               C90623 * C90634 * C90579 -
           ((C102 * C837 + C91 * C844 + C101 * C838 + C90 * C845 + C100 * C839 +
             C89 * C846) *
                C90498 +
            (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 + C100 * C832 +
             C89 * C840) *
                C3364) *
               C90623 * C90634 * C9074) *
              C90774 +
          (((C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
             C102 * C2572 + C91 * C2576) *
                C3364 +
            (C100 * C2577 + C89 * C2582 + C101 * C2578 + C90 * C2583 +
             C102 * C2579 + C91 * C2584) *
                C90498) *
               C90623 * C90634 * C9074 -
           ((C102 * C3903 + C91 * C3912 + C101 * C3904 + C90 * C3913 +
             C100 * C3905 + C89 * C3914) *
                C90498 +
            (C102 * C3894 + C91 * C3906 + C101 * C3895 + C90 * C3907 +
             C100 * C3896 + C89 * C3908) *
                C3364) *
               C90623 * C90634 * C90579) *
              C7400)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C3364 +
             (C13579 * C116 + C90485 * C125) * C90498) *
                C90623 * C26429 +
            (C29494 + C29495) * C90623 * C26430 + C31051 * C26431) *
               C9074 -
           (C31775 * C26431 + (C29497 + C29496) * C90623 * C26430 +
            (C29495 + C29494) * C90623 * C26429) *
               C90579) *
              C90781 +
          (((C16865 + C16864) * C90623 * C26429 +
            (C18366 + C18367) * C90623 * C26430 +
            (C31055 + C31056) * C90623 * C26431) *
               C90579 -
           (C31054 * C26431 + (C16864 + C16865) * C90623 * C26430 +
            (C16298 + C16297) * C90623 * C26429) *
               C9074) *
              C90774 +
          ((C16307 * C90623 * C26429 + (C16863 + C16862) * C90623 * C26430 +
            (C18368 + C18369) * C90623 * C26431) *
               C9074 -
           (((C13579 * C19089 + C90485 * C19093) * C90498 +
             (C13579 * C19087 + C90485 * C19090) * C3364) *
                C90623 * C26431 +
            (C18369 + C18368) * C90623 * C26430 + C16868 * C90623 * C26429) *
               C90579) *
              C7400)) /
            (p * q * std::sqrt(p + q));
    d2eexy[34] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C7477 +
            (C13579 * C182 + C90485 * C188) * C90781 - C14082 * C7478 -
            C14192 * C90774 + C14088 * C7479 + C14193 * C7400) *
               C13576 +
           (C14082 * C7477 + C14192 * C90781 - C14088 * C7478 -
            C14193 * C90774 + C15553 * C7479 + C15643 * C7400) *
               C13577 +
           (C14088 * C7477 + C14193 * C90781 - C15553 * C7478 -
            C15643 * C90774 + C16309 * C7479 + C16367 * C7400) *
               C13578) *
              C90634 * C90498 * C9074 +
          ((C16859 * C7478 -
            ((C13579 * C1794 + C90485 * C1799) * C90781 +
             (C13579 * C1700 + C90485 * C1708) * C7477) +
            C16953 * C90774 - C16857 * C7479 - C16954 * C7400) *
               C13576 +
           (C16857 * C7478 - (C16953 * C90781 + C16859 * C7477) +
            C16954 * C90774 - C16860 * C7479 - C16955 * C7400) *
               C13577 +
           (C16860 * C7478 - (C16954 * C90781 + C16857 * C7477) +
            C16955 * C90774 - (C13579 * C16836 + C90485 * C16840) * C7479 -
            (C13579 * C16943 + C90485 * C16945) * C7400) *
               C13578) *
              C90634 * C90498 * C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C7477 +
           (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 + C102 * C184 +
            C91 * C190) *
               C90781 -
           (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 + C100 * C832 +
            C89 * C840) *
               C7478 -
           (C102 * C925 + C91 * C930 + C101 * C926 + C90 * C931 + C100 * C927 +
            C89 * C932) *
               C90774 +
           (C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
            C102 * C2572 + C91 * C2576) *
               C7479 +
           (C100 * C2663 + C89 * C2667 + C101 * C2664 + C90 * C2668 +
            C102 * C2665 + C91 * C2669) *
               C7400) *
              C90623 * C90634 * C90498 * C9074 +
          ((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
            C102 * C3893 + C91 * C3899) *
               C7478 -
           ((C102 * C1792 + C91 * C1797 + C101 * C1791 + C90 * C1796 +
             C100 * C1794 + C89 * C1799) *
                C90781 +
            (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
             C100 * C1700 + C89 * C1708) *
                C7477) +
           (C100 * C3989 + C89 * C3995 + C101 * C3990 + C90 * C3996 +
            C102 * C3991 + C91 * C3997) *
               C90774 -
           (C102 * C3894 + C91 * C3906 + C101 * C3895 + C90 * C3907 +
            C100 * C3896 + C89 * C3908) *
               C7479 -
           (C102 * C3992 + C91 * C3998 + C101 * C3993 + C90 * C3999 +
            C100 * C3994 + C89 * C4000) *
               C7400) *
              C90623 * C90634 * C90498 * C90579)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C7477 +
            (C13579 * C182 + C90485 * C188) * C90781 - C14082 * C7478 -
            C14192 * C90774 + C14088 * C7479 + C14193 * C7400) *
               C90623 * C26429 +
           (C37837 + C37838 - C37839 - C37840 + C37841 + C37842) * C90623 *
               C26430 +
           (C37843 + C37844 - C37845 - C37846 + C37847 + C37848) * C90623 *
               C26431) *
              C90498 * C9074 +
          ((C37839 - (C37838 + C37837) + C37840 - C37841 - C37842) * C90623 *
               C26429 +
           (C37845 - (C37844 + C37843) + C37846 - C37847 - C37848) * C90623 *
               C26430 +
           (C31052 * C7478 - (C30373 * C90781 + C30275 * C7477) +
            C31147 * C90774 - (C13579 * C19087 + C90485 * C19090) * C7479 -
            (C13579 * C19145 + C90485 * C19147) * C7400) *
               C90623 * C26431) *
              C90498 * C90579)) /
            (p * q * std::sqrt(p + q));
    d2eexz[34] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C9224 +
            (C13579 * C245 + C90485 * C251) * C9074 -
            (C13579 * C1700 + C90485 * C1708) * C9225 -
            (C13579 * C1879 + C90485 * C1884) * C90579) *
               C13576 +
           (C22829 + C22830 - C22831 - C22832) * C13577 + C25237 * C13578) *
              C90634 * C90781 +
          ((C22831 - (C22830 + C22829) + C22832) * C13576 +
           (C22835 - (C22834 + C22833) + C22836) * C13577 +
           (C25232 - (C25233 + C25234) + C25235) * C13578) *
              C90634 * C90774 +
          (C25237 * C13576 + (C25234 + C25233 - C25232 - C25235) * C13577 +
           (C16309 * C9224 + C16424 * C9074 -
            (C13579 * C16836 + C90485 * C16840) * C9225 -
            (C13579 * C17030 + C90485 * C17032) * C90579) *
               C13578) *
              C90634 * C7400) *
         C90498) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C9224 +
           (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 + C102 * C247 +
            C91 * C253) *
               C9074 -
           (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
            C100 * C1700 + C89 * C1708) *
               C9225 -
           (C102 * C1877 + C91 * C1882 + C101 * C1878 + C90 * C1883 +
            C100 * C1879 + C89 * C1884) *
               C90579) *
              C90623 * C90634 * C90781 +
          ((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
            C102 * C3893 + C91 * C3899) *
               C9225 -
           ((C102 * C1009 + C91 * C1014 + C101 * C1010 + C90 * C1015 +
             C100 * C1011 + C89 * C1016) *
                C9074 +
            (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 + C100 * C832 +
             C89 * C840) *
                C9224) +
           (C100 * C4075 + C89 * C4081 + C101 * C4076 + C90 * C4082 +
            C102 * C4077 + C91 * C4083) *
               C90579) *
              C90623 * C90634 * C90774 +
          ((C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
            C102 * C2572 + C91 * C2576) *
               C9224 +
           (C100 * C2745 + C89 * C2749 + C101 * C2746 + C90 * C2750 +
            C102 * C2747 + C91 * C2751) *
               C9074 -
           (C102 * C3894 + C91 * C3906 + C101 * C3895 + C90 * C3907 +
            C100 * C3896 + C89 * C3908) *
               C9225 -
           (C102 * C4078 + C91 * C4084 + C101 * C4079 + C90 * C4085 +
            C100 * C4080 + C89 * C4086) *
               C90579) *
              C90623 * C90634 * C7400) *
         C90498) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C9224 +
            (C13579 * C245 + C90485 * C251) * C9074 - C27600 * C9225 -
            C27814 * C90579) *
               C90623 * C26429 +
           (C27600 * C9224 + C27814 * C9074 - C27606 * C9225 -
            C27815 * C90579) *
               C90623 * C26430 +
           (C27606 * C9224 + C27815 * C9074 - C30275 * C9225 -
            C30458 * C90579) *
               C90623 * C26431) *
              C90781 +
          ((C22831 - (C22830 + C22829) + C22832) * C90623 * C26429 +
           (C18362 * C9225 - (C17049 * C9074 + C16859 * C9224) +
            C18542 * C90579) *
               C90623 * C26430 +
           (C31052 * C9225 - (C18542 * C9074 + C18362 * C9224) +
            C31230 * C90579) *
               C90623 * C26431) *
              C90774 +
          (C25237 * C90623 * C26429 +
           (C16857 * C9224 + C17051 * C9074 - C18364 * C9225 -
            C18543 * C90579) *
               C90623 * C26430 +
           (C18364 * C9224 + C18543 * C9074 -
            (C13579 * C19087 + C90485 * C19090) * C9225 -
            (C13579 * C19200 + C90485 * C19202) * C90579) *
               C90623 * C26431) *
              C7400) *
         C90498) /
            (p * q * std::sqrt(p + q));
    d2eeyx[34] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C13730 * C107 + C13576 * C308 + C13731 * C832 +
                       C13577 * C1094 + C13732 * C2570 + C13578 * C2827) *
                          C3364 +
                      (C13730 * C116 + C13576 * C314 + C13731 * C839 +
                       C13577 * C1098 + C13732 * C2577 + C13578 * C2831) *
                          C90498) *
                         C90634 * C90485 * C9074 -
                     ((C13732 * C3905 + C13578 * C4172 + C13731 * C3900 +
                       C13577 * C4167 + C13730 * C1707 + C13576 * C1966) *
                          C90498 +
                      (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 +
                       C13577 * C4161 + C13730 * C1700 + C13576 * C1962) *
                          C3364) *
                         C90634 * C90485 * C90579) *
                        C90781 +
                    (((C13730 * C3891 + C13576 * C4161 + C13731 * C3896 +
                       C13577 * C4166 + C13732 * C16835 + C13578 * C17131) *
                          C3364 +
                      (C13730 * C3900 + C13576 * C4167 + C13731 * C3905 +
                       C13577 * C4172 + C13732 * C16838 + C13578 * C17133) *
                          C90498) *
                         C90634 * C90485 * C90579 -
                     ((C13732 * C3370 + C13578 * C3548 + C13731 * C2577 +
                       C13577 * C2831 + C13730 * C839 + C13576 * C1098) *
                          C90498 +
                      (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 +
                       C13577 * C2827 + C13730 * C832 + C13576 * C1094) *
                          C3364) *
                         C90634 * C90485 * C9074) *
                        C90774 +
                    (((C13730 * C2570 + C13576 * C2827 + C13731 * C3367 +
                       C13577 * C3545 + C13732 * C15525 + C13578 * C15808) *
                          C3364 +
                      (C13730 * C2577 + C13576 * C2831 + C13731 * C3370 +
                       C13577 * C3548 + C13732 * C15528 + C13578 * C15810) *
                          C90498) *
                         C90634 * C90485 * C9074 -
                     ((C13732 * C16839 + C13578 * C17134 + C13731 * C16838 +
                       C13577 * C17133 + C13730 * C3905 + C13576 * C4172) *
                          C90498 +
                      (C13732 * C16836 + C13578 * C17132 + C13731 * C16835 +
                       C13577 * C17131 + C13730 * C3896 + C13576 * C4166) *
                          C3364) *
                         C90634 * C90485 * C90579) *
                        C7400)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C307 * C107 + C90623 * C308) * C3364 +
                       (C307 * C116 + C90623 * C314) * C90498) *
                          C90634 * C89 +
                      (C337 * C3364 + C338 * C90498) * C90634 * C90 +
                      (C339 * C3364 + C340 * C90498) * C90634 * C91) *
                         C9074 -
                     ((C1987 * C90498 + C1986 * C3364) * C90634 * C91 +
                      (C1985 * C90498 + C1984 * C3364) * C90634 * C90 +
                      ((C307 * C1707 + C90623 * C1966) * C90498 +
                       (C307 * C1700 + C90623 * C1962) * C3364) *
                          C90634 * C89) *
                         C90579) *
                        C90781 +
                    ((((C307 * C3891 + C90623 * C4161) * C3364 +
                       (C307 * C3900 + C90623 * C4167) * C90498) *
                          C90634 * C89 +
                      (C8433 * C3364 + C8434 * C90498) * C90634 * C90 +
                      (C8435 * C3364 + C8436 * C90498) * C90634 * C91) *
                         C90579 -
                     ((C1119 * C90498 + C1118 * C3364) * C90634 * C91 +
                      (C1117 * C90498 + C1116 * C3364) * C90634 * C90 +
                      ((C307 * C839 + C90623 * C1098) * C90498 +
                       (C307 * C832 + C90623 * C1094) * C3364) *
                          C90634 * C89) *
                         C9074) *
                        C90774 +
                    ((((C307 * C2570 + C90623 * C2827) * C3364 +
                       (C307 * C2577 + C90623 * C2831) * C90498) *
                          C90634 * C89 +
                      (C2844 * C3364 + C2845 * C90498) * C90634 * C90 +
                      (C2846 * C3364 + C2847 * C90498) * C90634 * C91) *
                         C9074 -
                     (((C307 * C3903 + C90623 * C4170) * C90498 +
                       (C307 * C3894 + C90623 * C4164) * C3364) *
                          C90634 * C91 +
                      ((C307 * C3904 + C90623 * C4171) * C90498 +
                       (C307 * C3895 + C90623 * C4165) * C3364) *
                          C90634 * C90 +
                      ((C307 * C3905 + C90623 * C4172) * C90498 +
                       (C307 * C3896 + C90623 * C4166) * C3364) *
                          C90634 * C89) *
                         C90579) *
                        C7400)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C307 * C107 + C90623 * C308) * C3364 +
                       (C307 * C116 + C90623 * C314) * C90498) *
                          C26429 +
                      (C29732 + C29733) * C26430 + C31307 * C26431) *
                         C90485 * C9074 -
                     (C31946 * C26431 + (C29735 + C29734) * C26430 +
                      (C29733 + C29732) * C26429) *
                         C90485 * C90579) *
                        C90781 +
                    (((C29760 + C29761) * C26429 + (C29762 + C29763) * C26430 +
                      (C31317 + C31318) * C26431) *
                         C90485 * C90579 -
                     (C31314 * C26431 + (C29761 + C29760) * C26430 +
                      ((C307 * C839 + C90623 * C1098) * C90498 +
                       (C307 * C832 + C90623 * C1094) * C3364) *
                          C26429) *
                         C90485 * C9074) *
                        C90774 +
                    ((((C307 * C2570 + C90623 * C2827) * C3364 +
                       (C307 * C2577 + C90623 * C2831) * C90498) *
                          C26429 +
                      (C29764 + C29765) * C26430 + (C29766 + C29767) * C26431) *
                         C90485 * C9074 -
                     (((C307 * C19089 + C90623 * C19255) * C90498 +
                       (C307 * C19087 + C90623 * C19253) * C3364) *
                          C26431 +
                      (C29767 + C29766) * C26430 + (C29765 + C29764) * C26429) *
                         C90485 * C90579) *
                        C7400)) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[34] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C7477 +
           (C13730 * C182 + C13576 * C394 + C13731 * C927 + C13577 * C1195 +
            C13732 * C2663 + C13578 * C2921) *
               C90781 -
           (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
            C13730 * C832 + C13576 * C1094) *
               C7478 -
           (C13732 * C3433 + C13578 * C3599 + C13731 * C2663 + C13577 * C2921 +
            C13730 * C927 + C13576 * C1195) *
               C90774 +
           (C13730 * C2570 + C13576 * C2827 + C13731 * C3367 + C13577 * C3545 +
            C13732 * C15525 + C13578 * C15808) *
               C7479 +
           (C13730 * C2663 + C13576 * C2921 + C13731 * C3433 + C13577 * C3599 +
            C13732 * C15634 + C13578 * C15886) *
               C7400) *
              C90634 * C90485 * C90498 * C9074 +
          ((C13730 * C3891 + C13576 * C4161 + C13731 * C3896 + C13577 * C4166 +
            C13732 * C16835 + C13578 * C17131) *
               C7478 -
           ((C13732 * C3994 + C13578 * C4248 + C13731 * C3989 + C13577 * C4247 +
             C13730 * C1794 + C13576 * C2066) *
                C90781 +
            (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 + C13577 * C4161 +
             C13730 * C1700 + C13576 * C1962) *
                C7477) +
           (C13730 * C3989 + C13576 * C4247 + C13731 * C3994 + C13577 * C4248 +
            C13732 * C16942 + C13578 * C17209) *
               C90774 -
           (C13732 * C16836 + C13578 * C17132 + C13731 * C16835 +
            C13577 * C17131 + C13730 * C3896 + C13576 * C4166) *
               C7479 -
           (C13732 * C16943 + C13578 * C17210 + C13731 * C16942 +
            C13577 * C17209 + C13730 * C3994 + C13576 * C4248) *
               C7400) *
              C90634 * C90485 * C90498 * C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C7477 +
            (C307 * C182 + C90623 * C394) * C90781 -
            (C307 * C832 + C90623 * C1094) * C7478 -
            (C307 * C927 + C90623 * C1195) * C90774 +
            (C307 * C2570 + C90623 * C2827) * C7479 +
            (C307 * C2663 + C90623 * C2921) * C7400) *
               C90634 * C89 +
           (C7703 + C7704 - C7705 - C7706 + C7707 + C7708) * C90634 * C90 +
           (C7709 + C7710 - C7711 - C7712 + C7713 + C7714) * C90634 * C91) *
              C90498 * C9074 +
          (((C307 * C3891 + C90623 * C4161) * C7478 -
            ((C307 * C1794 + C90623 * C2066) * C90781 +
             (C307 * C1700 + C90623 * C1962) * C7477) +
            (C307 * C3989 + C90623 * C4247) * C90774 -
            (C307 * C3896 + C90623 * C4166) * C7479 -
            (C307 * C3994 + C90623 * C4248) * C7400) *
               C90634 * C89 +
           (C8433 * C7478 - (C2078 * C90781 + C1984 * C7477) + C8546 * C90774 -
            (C307 * C3895 + C90623 * C4165) * C7479 -
            (C307 * C3993 + C90623 * C4250) * C7400) *
               C90634 * C90 +
           (C8435 * C7478 - (C2079 * C90781 + C1986 * C7477) + C8547 * C90774 -
            (C307 * C3894 + C90623 * C4164) * C7479 -
            (C307 * C3992 + C90623 * C4252) * C7400) *
               C90634 * C91) *
              C90498 * C90579)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C7477 +
            (C307 * C182 + C90623 * C394) * C90781 -
            (C307 * C832 + C90623 * C1094) * C7478 -
            (C307 * C927 + C90623 * C1195) * C90774 +
            (C307 * C2570 + C90623 * C2827) * C7479 +
            (C307 * C2663 + C90623 * C2921) * C7400) *
               C26429 +
           (C38071 + C38072 - C38073 - C38074 + C38075 + C38076) * C26430 +
           (C38077 + C38078 - C38079 - C38080 + C38081 + C38082) * C26431) *
              C90485 * C90498 * C9074 +
          ((C38073 - (C38072 + C38071) + C38074 - C38075 - C38076) * C26429 +
           (C38079 - (C38078 + C38077) + C38080 - C38081 - C38082) * C26430 +
           (C31315 * C7478 - (C30650 * C90781 + C30557 * C7477) +
            C31408 * C90774 - (C307 * C19087 + C90623 * C19253) * C7479 -
            (C307 * C19145 + C90623 * C19307) * C7400) *
               C26431) *
              C90485 * C90498 * C90579)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[34] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C9224 +
           (C13730 * C245 + C13576 * C474 + C13731 * C1011 + C13577 * C1301 +
            C13732 * C2745 + C13578 * C3017) *
               C9074 -
           (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 + C13577 * C4161 +
            C13730 * C1700 + C13576 * C1962) *
               C9225 -
           (C13732 * C4080 + C13578 * C4330 + C13731 * C4075 + C13577 * C4327 +
            C13730 * C1879 + C13576 * C2159) *
               C90579) *
              C90634 * C90485 * C90781 +
          ((C13730 * C3891 + C13576 * C4161 + C13731 * C3896 + C13577 * C4166 +
            C13732 * C16835 + C13578 * C17131) *
               C9225 -
           ((C13732 * C3489 + C13578 * C3654 + C13731 * C2745 + C13577 * C3017 +
             C13730 * C1011 + C13576 * C1301) *
                C9074 +
            (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
             C13730 * C832 + C13576 * C1094) *
                C9224) +
           (C13730 * C4075 + C13576 * C4327 + C13731 * C4080 + C13577 * C4330 +
            C13732 * C17029 + C13578 * C17285) *
               C90579) *
              C90634 * C90485 * C90774 +
          ((C13730 * C2570 + C13576 * C2827 + C13731 * C3367 + C13577 * C3545 +
            C13732 * C15525 + C13578 * C15808) *
               C9224 +
           (C13730 * C2745 + C13576 * C3017 + C13731 * C3489 + C13577 * C3654 +
            C13732 * C15718 + C13578 * C15962) *
               C9074 -
           (C13732 * C16836 + C13578 * C17132 + C13731 * C16835 +
            C13577 * C17131 + C13730 * C3896 + C13576 * C4166) *
               C9225 -
           (C13732 * C17030 + C13578 * C17286 + C13731 * C17029 +
            C13577 * C17285 + C13730 * C4080 + C13576 * C4330) *
               C90579) *
              C90634 * C90485 * C7400) *
         C90498) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C9224 +
            (C307 * C245 + C90623 * C474) * C9074 -
            (C307 * C1700 + C90623 * C1962) * C9225 -
            (C307 * C1879 + C90623 * C2159) * C90579) *
               C90634 * C89 +
           (C9449 + C9450 - C9451 - C9452) * C90634 * C90 + C9464 * C91) *
              C90781 +
          (((C307 * C3891 + C90623 * C4161) * C9225 -
            ((C307 * C1011 + C90623 * C1301) * C9074 +
             (C307 * C832 + C90623 * C1094) * C9224) +
            (C307 * C4075 + C90623 * C4327) * C90579) *
               C90634 * C89 +
           (C10298 - (C10299 + C10300) + C10301) * C90634 * C90 +
           (C10302 - (C10303 + C10304) + C10305) * C90634 * C91) *
              C90774 +
          (((C307 * C2570 + C90623 * C2827) * C9224 +
            (C307 * C2745 + C90623 * C3017) * C9074 -
            (C307 * C3896 + C90623 * C4166) * C9225 -
            (C307 * C4080 + C90623 * C4330) * C90579) *
               C90634 * C89 +
           (C2844 * C9224 + C3028 * C9074 -
            (C307 * C3895 + C90623 * C4165) * C9225 -
            (C307 * C4079 + C90623 * C4331) * C90579) *
               C90634 * C90 +
           (C2846 * C9224 + C3029 * C9074 -
            (C307 * C3894 + C90623 * C4164) * C9225 -
            (C307 * C4078 + C90623 * C4332) * C90579) *
               C90634 * C91) *
              C7400) *
         C90498) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C9224 +
            (C307 * C245 + C90623 * C474) * C9074 - C27910 * C9225 -
            C28080 * C90579) *
               C26429 +
           (C27910 * C9224 + C28080 * C9074 - C27912 * C9225 -
            C28081 * C90579) *
               C26430 +
           (C27912 * C9224 + C28081 * C9074 - C30557 * C9225 -
            C30733 * C90579) *
               C26431) *
              C90485 * C90781 +
          ((C29752 * C9225 -
            ((C307 * C1011 + C90623 * C1301) * C9074 +
             (C307 * C832 + C90623 * C1094) * C9224) +
            C29948 * C90579) *
               C26429 +
           (C29754 * C9225 - (C29948 * C9074 + C29752 * C9224) +
            C29949 * C90579) *
               C26430 +
           (C31315 * C9225 - (C29949 * C9074 + C29754 * C9224) +
            C31489 * C90579) *
               C26431) *
              C90485 * C90774 +
          (((C307 * C2570 + C90623 * C2827) * C9224 +
            (C307 * C2745 + C90623 * C3017) * C9074 - C29756 * C9225 -
            C29950 * C90579) *
               C26429 +
           (C29756 * C9224 + C29950 * C9074 - C29758 * C9225 -
            C29951 * C90579) *
               C26430 +
           (C29758 * C9224 + C29951 * C9074 -
            (C307 * C19087 + C90623 * C19253) * C9225 -
            (C307 * C19200 + C90623 * C19359) * C90579) *
               C26431) *
              C90485 * C7400) *
         C90498) /
            (p * q * std::sqrt(p + q));
    d2eezx[34] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C90634 * C555) * C3364 +
                       (C554 * C116 + C90634 * C561) * C90498) *
                          C90485 * C13576 +
                      (C16632 + C16633) * C90485 * C13577 + C16646 * C13578) *
                         C9074 -
                     (C17391 * C13578 + (C17386 + C17387) * C90485 * C13577 +
                      ((C554 * C1707 + C90634 * C2268) * C90498 +
                       (C554 * C1700 + C90634 * C2264) * C3364) *
                          C90485 * C13576) *
                         C90579) *
                        C90781 +
                    (((C17387 + C17386) * C90485 * C13576 +
                      (C17385 + C17384) * C90485 * C13577 +
                      (C17388 + C17389) * C90485 * C13578) *
                         C90579 -
                     (C16647 * C13578 + (C16635 + C16634) * C90485 * C13577 +
                      (C16633 + C16632) * C90485 * C13576) *
                         C9074) *
                        C90774 +
                    ((C16646 * C13576 + (C16637 + C16636) * C90485 * C13577 +
                      (C16648 + C16649) * C90485 * C13578) *
                         C9074 -
                     (((C554 * C16839 + C90634 * C17364) * C90498 +
                       (C554 * C16836 + C90634 * C17362) * C3364) *
                          C90485 * C13578 +
                      (C17389 + C17388) * C90485 * C13577 + C17391 * C13576) *
                         C90579) *
                        C7400)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C90634 * C555) * C3364 +
                       (C554 * C116 + C90634 * C561) * C90498) *
                          C89 +
                      (C584 * C3364 + C585 * C90498) * C90 +
                      (C586 * C3364 + C587 * C90498) * C91) *
                         C90623 * C9074 -
                     ((C2289 * C90498 + C2288 * C3364) * C91 +
                      (C2287 * C90498 + C2286 * C3364) * C90 +
                      ((C554 * C1707 + C90634 * C2268) * C90498 +
                       (C554 * C1700 + C90634 * C2264) * C3364) *
                          C89) *
                         C90623 * C90579) *
                        C90781 +
                    ((((C554 * C3891 + C90634 * C4407) * C3364 +
                       (C554 * C3900 + C90634 * C4413) * C90498) *
                          C89 +
                      (C8771 * C3364 + C8772 * C90498) * C90 +
                      (C8773 * C3364 + C8774 * C90498) * C91) *
                         C90623 * C90579 -
                     ((C1421 * C90498 + C1420 * C3364) * C91 +
                      (C1419 * C90498 + C1418 * C3364) * C90 +
                      ((C554 * C839 + C90634 * C1400) * C90498 +
                       (C554 * C832 + C90634 * C1396) * C3364) *
                          C89) *
                         C90623 * C9074) *
                        C90774 +
                    ((((C554 * C2570 + C90634 * C3105) * C3364 +
                       (C554 * C2577 + C90634 * C3109) * C90498) *
                          C89 +
                      (C3122 * C3364 + C3123 * C90498) * C90 +
                      (C3124 * C3364 + C3125 * C90498) * C91) *
                         C90623 * C9074 -
                     (((C554 * C3903 + C90634 * C4416) * C90498 +
                       (C554 * C3894 + C90634 * C4410) * C3364) *
                          C91 +
                      ((C554 * C3904 + C90634 * C4417) * C90498 +
                       (C554 * C3895 + C90634 * C4411) * C3364) *
                          C90 +
                      ((C554 * C3905 + C90634 * C4418) * C90498 +
                       (C554 * C3896 + C90634 * C4412) * C3364) *
                          C89) *
                         C90623 * C90579) *
                        C7400)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C26732 * C107 + C26429 * C555 + C26733 * C1700 +
                       C26430 * C2264 + C26734 * C4656 + C26431 * C5191) *
                          C3364 +
                      (C26732 * C116 + C26429 * C561 + C26733 * C1707 +
                       C26430 * C2268 + C26734 * C4663 + C26431 * C5195) *
                          C90498) *
                         C90485 * C90623 * C9074 -
                     ((C26734 * C6168 + C26431 * C6508 + C26733 * C4663 +
                       C26430 * C5195 + C26732 * C1707 + C26429 * C2268) *
                          C90498 +
                      (C26734 * C6165 + C26431 * C6505 + C26733 * C4656 +
                       C26430 * C5191 + C26732 * C1700 + C26429 * C2264) *
                          C3364) *
                         C90485 * C90623 * C90579) *
                        C90781 +
                    (((C26732 * C3891 + C26429 * C4407 + C26733 * C5471 +
                       C26430 * C5951 + C26734 * C19088 + C26431 * C19412) *
                          C3364 +
                      (C26732 * C3900 + C26429 * C4413 + C26733 * C5474 +
                       C26430 * C5954 + C26734 * C19091 + C26431 * C19414) *
                          C90498) *
                         C90485 * C90623 * C90579 -
                     ((C26734 * C5474 + C26431 * C5954 + C26733 * C3900 +
                       C26430 * C4413 + C26732 * C839 + C26429 * C1400) *
                          C90498 +
                      (C26734 * C5471 + C26431 * C5951 + C26733 * C3891 +
                       C26430 * C4407 + C26732 * C832 + C26429 * C1396) *
                          C3364) *
                         C90485 * C90623 * C9074) *
                        C90774 +
                    (((C26732 * C2570 + C26429 * C3105 + C26733 * C3896 +
                       C26430 * C4412 + C26734 * C17651 + C26431 * C18119) *
                          C3364 +
                      (C26732 * C2577 + C26429 * C3109 + C26733 * C3905 +
                       C26430 * C4418 + C26734 * C17654 + C26431 * C18121) *
                          C90498) *
                         C90485 * C90623 * C9074 -
                     ((C26734 * C19089 + C26431 * C19413 + C26733 * C17654 +
                       C26430 * C18121 + C26732 * C3905 + C26429 * C4418) *
                          C90498 +
                      (C26734 * C19087 + C26431 * C19411 + C26733 * C17651 +
                       C26430 * C18119 + C26732 * C3896 + C26429 * C4412) *
                          C3364) *
                         C90485 * C90623 * C90579) *
                        C7400)) /
                      (p * q * std::sqrt(p + q));
    d2eezy[34] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C7477 +
            (C554 * C182 + C90634 * C641) * C90781 - C14614 * C7478 -
            C14700 * C90774 + C14616 * C7479 + C14701 * C7400) *
               C90485 * C13576 +
           (C14614 * C7477 + C14700 * C90781 - C14616 * C7478 -
            C14701 * C90774 + C16062 * C7479 + C16151 * C7400) *
               C90485 * C13577 +
           (C14616 * C7477 + C14701 * C90781 - C16062 * C7478 -
            C16151 * C90774 + C16644 * C7479 + C16703 * C7400) *
               C90485 * C13578) *
              C90498 * C9074 +
          ((C17381 * C7478 -
            ((C554 * C1794 + C90634 * C2368) * C90781 +
             (C554 * C1700 + C90634 * C2264) * C7477) +
            C17474 * C90774 - C17379 * C7479 - C17475 * C7400) *
               C90485 * C13576 +
           (C17379 * C7478 - (C17474 * C90781 + C17381 * C7477) +
            C17475 * C90774 - C17382 * C7479 - C17476 * C7400) *
               C90485 * C13577 +
           (C17382 * C7478 - (C17475 * C90781 + C17379 * C7477) +
            C17476 * C90774 - (C554 * C16836 + C90634 * C17362) * C7479 -
            (C554 * C16943 + C90634 * C17466) * C7400) *
               C90485 * C13578) *
              C90498 * C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C7477 +
            (C554 * C182 + C90634 * C641) * C90781 -
            (C554 * C832 + C90634 * C1396) * C7478 -
            (C554 * C927 + C90634 * C1497) * C90774 +
            (C554 * C2570 + C90634 * C3105) * C7479 +
            (C554 * C2663 + C90634 * C3199) * C7400) *
               C89 +
           (C7937 + C7938 - C7939 - C7940 + C7941 + C7942) * C90 +
           (C7943 + C7944 - C7945 - C7946 + C7947 + C7948) * C91) *
              C90623 * C90498 * C9074 +
          (((C554 * C3891 + C90634 * C4407) * C7478 -
            ((C554 * C1794 + C90634 * C2368) * C90781 +
             (C554 * C1700 + C90634 * C2264) * C7477) +
            (C554 * C3989 + C90634 * C4493) * C90774 -
            (C554 * C3896 + C90634 * C4412) * C7479 -
            (C554 * C3994 + C90634 * C4494) * C7400) *
               C89 +
           (C8771 * C7478 - (C2380 * C90781 + C2286 * C7477) + C8884 * C90774 -
            (C554 * C3895 + C90634 * C4411) * C7479 -
            (C554 * C3993 + C90634 * C4496) * C7400) *
               C90 +
           (C8773 * C7478 - (C2381 * C90781 + C2288 * C7477) + C8885 * C90774 -
            (C554 * C3894 + C90634 * C4410) * C7479 -
            (C554 * C3992 + C90634 * C4498) * C7400) *
               C91) *
              C90623 * C90498 * C90579)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C26732 * C107 + C26429 * C555 + C26733 * C1700 + C26430 * C2264 +
            C26734 * C4656 + C26431 * C5191) *
               C7477 +
           (C26732 * C182 + C26429 * C641 + C26733 * C1794 + C26430 * C2368 +
            C26734 * C4746 + C26431 * C5285) *
               C90781 -
           (C26734 * C5471 + C26431 * C5951 + C26733 * C3891 + C26430 * C4407 +
            C26732 * C832 + C26429 * C1396) *
               C7478 -
           (C26734 * C5557 + C26431 * C6029 + C26733 * C3989 + C26430 * C4493 +
            C26732 * C927 + C26429 * C1497) *
               C90774 +
           (C26732 * C2570 + C26429 * C3105 + C26733 * C3896 + C26430 * C4412 +
            C26734 * C17651 + C26431 * C18119) *
               C7479 +
           (C26732 * C2663 + C26429 * C3199 + C26733 * C3994 + C26430 * C4494 +
            C26734 * C17733 + C26431 * C18197) *
               C7400) *
              C90485 * C90623 * C90498 * C9074 +
          ((C26732 * C3891 + C26429 * C4407 + C26733 * C5471 + C26430 * C5951 +
            C26734 * C19088 + C26431 * C19412) *
               C7478 -
           ((C26734 * C6227 + C26431 * C6561 + C26733 * C4746 + C26430 * C5285 +
             C26732 * C1794 + C26429 * C2368) *
                C90781 +
            (C26734 * C6165 + C26431 * C6505 + C26733 * C4656 + C26430 * C5191 +
             C26732 * C1700 + C26429 * C2264) *
                C7477) +
           (C26732 * C3989 + C26429 * C4493 + C26733 * C5557 + C26430 * C6029 +
            C26734 * C19146 + C26431 * C19466) *
               C90774 -
           (C26734 * C19087 + C26431 * C19411 + C26733 * C17651 +
            C26430 * C18119 + C26732 * C3896 + C26429 * C4412) *
               C7479 -
           (C26734 * C19145 + C26431 * C19465 + C26733 * C17733 +
            C26430 * C18197 + C26732 * C3994 + C26429 * C4494) *
               C7400) *
              C90485 * C90623 * C90498 * C90579)) /
            (p * q * std::sqrt(p + q));
    d2eezz[34] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C90634 * C555) * C9224 +
                      (C554 * C245 + C90634 * C719) * C9074 -
                      (C554 * C1700 + C90634 * C2264) * C9225 -
                      (C554 * C1879 + C90634 * C2460) * C90579) *
                         C90485 * C13576 +
                     (C23433 + C23434 - C23435 - C23436) * C90485 * C13577 +
                     C25689 * C13578) *
                        C90781 +
                    ((C23435 - (C23434 + C23433) + C23436) * C90485 * C13576 +
                     (C23439 - (C23438 + C23437) + C23440) * C90485 * C13577 +
                     (C25683 - (C25684 + C25685) + C25686) * C90485 * C13578) *
                        C90774 +
                    (C25689 * C13576 +
                     (C25685 + C25684 - C25683 - C25686) * C90485 * C13577 +
                     (C16644 * C9224 + C16760 * C9074 -
                      (C554 * C16836 + C90634 * C17362) * C9225 -
                      (C554 * C17030 + C90634 * C17551) * C90579) *
                         C90485 * C13578) *
                        C7400) *
                   C90498) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C90634 * C555) * C9224 +
                      (C554 * C245 + C90634 * C719) * C9074 -
                      (C554 * C1700 + C90634 * C2264) * C9225 -
                      (C554 * C1879 + C90634 * C2460) * C90579) *
                         C89 +
                     (C9687 + C9688 - C9689 - C9690) * C90 + C9701 * C91) *
                        C90623 * C90781 +
                    (((C554 * C3891 + C90634 * C4407) * C9225 -
                      ((C554 * C1011 + C90634 * C1602) * C9074 +
                       (C554 * C832 + C90634 * C1396) * C9224) +
                      (C554 * C4075 + C90634 * C4573) * C90579) *
                         C89 +
                     (C10608 - (C10609 + C10610) + C10611) * C90 +
                     (C10612 - (C10613 + C10614) + C10615) * C91) *
                        C90623 * C90774 +
                    (((C554 * C2570 + C90634 * C3105) * C9224 +
                      (C554 * C2745 + C90634 * C3295) * C9074 -
                      (C554 * C3896 + C90634 * C4412) * C9225 -
                      (C554 * C4080 + C90634 * C4576) * C90579) *
                         C89 +
                     (C3122 * C9224 + C3306 * C9074 -
                      (C554 * C3895 + C90634 * C4411) * C9225 -
                      (C554 * C4079 + C90634 * C4577) * C90579) *
                         C90 +
                     (C3124 * C9224 + C3307 * C9074 -
                      (C554 * C3894 + C90634 * C4410) * C9225 -
                      (C554 * C4078 + C90634 * C4578) * C90579) *
                         C91) *
                        C90623 * C7400) *
                   C90498) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C26732 * C107 + C26429 * C555 + C26733 * C1700 +
                      C26430 * C2264 + C26734 * C4656 + C26431 * C5191) *
                         C9224 +
                     (C26732 * C245 + C26429 * C719 + C26733 * C1879 +
                      C26430 * C2460 + C26734 * C4831 + C26431 * C5373) *
                         C9074 -
                     (C26734 * C6165 + C26431 * C6505 + C26733 * C4656 +
                      C26430 * C5191 + C26732 * C1700 + C26429 * C2264) *
                         C9225 -
                     (C26734 * C6287 + C26431 * C6612 + C26733 * C4831 +
                      C26430 * C5373 + C26732 * C1879 + C26429 * C2460) *
                         C90579) *
                        C90485 * C90623 * C90781 +
                    ((C26732 * C3891 + C26429 * C4407 + C26733 * C5471 +
                      C26430 * C5951 + C26734 * C19088 + C26431 * C19412) *
                         C9225 -
                     ((C26734 * C5637 + C26431 * C6106 + C26733 * C4075 +
                       C26430 * C4573 + C26732 * C1011 + C26429 * C1602) *
                          C9074 +
                      (C26734 * C5471 + C26431 * C5951 + C26733 * C3891 +
                       C26430 * C4407 + C26732 * C832 + C26429 * C1396) *
                          C9224) +
                     (C26732 * C4075 + C26429 * C4573 + C26733 * C5637 +
                      C26430 * C6106 + C26734 * C19199 + C26431 * C19517) *
                         C90579) *
                        C90485 * C90623 * C90774 +
                    ((C26732 * C2570 + C26429 * C3105 + C26733 * C3896 +
                      C26430 * C4412 + C26734 * C17651 + C26431 * C18119) *
                         C9224 +
                     (C26732 * C2745 + C26429 * C3295 + C26733 * C4080 +
                      C26430 * C4576 + C26734 * C17811 + C26431 * C18273) *
                         C9074 -
                     (C26734 * C19087 + C26431 * C19411 + C26733 * C17651 +
                      C26430 * C18119 + C26732 * C3896 + C26429 * C4412) *
                         C9225 -
                     (C26734 * C19200 + C26431 * C19518 + C26733 * C17811 +
                      C26430 * C18273 + C26732 * C4080 + C26429 * C4576) *
                         C90579) *
                        C90485 * C90623 * C7400) *
                   C90498) /
                      (p * q * std::sqrt(p + q));
    d2eexx[35] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C13579 * C107 + C90485 * C113) * C3364 +
                       (C13579 * C116 + C90485 * C125) * C90498) *
                          C13576 +
                      (C16297 + C16298) * C13577 + C16307 * C13578) *
                         C90634 * C90782 -
                     (C16868 * C13578 + (C16864 + C16865) * C13577 +
                      ((C13579 * C1707 + C90485 * C1714) * C90498 +
                       (C13579 * C1700 + C90485 * C1708) * C3364) *
                          C13576) *
                         C90634 * C90777 +
                     (((C13579 * C4656 + C90485 * C4660) * C3364 +
                       (C13579 * C4663 + C90485 * C4668) * C90498) *
                          C13576 +
                      (C18366 + C18367) * C13577 + (C18368 + C18369) * C13578) *
                         C90634 * C10691) *
                        C6692 +
                    (((C16865 + C16864) * C13576 + (C16863 + C16862) * C13577 +
                      (C16866 + C16867) * C13578) *
                         C90634 * C90777 -
                     (C16308 * C13578 + (C16300 + C16299) * C13577 +
                      (C16298 + C16297) * C13576) *
                         C90634 * C90782 -
                     (((C13579 * C18350 + C90485 * C18352) * C90498 +
                       (C13579 * C18349 + C90485 * C18351) * C3364) *
                          C13578 +
                      (C18369 + C18368) * C13577 + (C18367 + C18366) * C13576) *
                         C90634 * C10691) *
                        C90555)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                       C102 * C109 + C91 * C115) *
                          C3364 +
                      (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 +
                       C102 * C118 + C91 * C127) *
                          C90498) *
                         C90623 * C90634 * C90782 -
                     ((C102 * C1705 + C91 * C1712 + C101 * C1706 + C90 * C1713 +
                       C100 * C1707 + C89 * C1714) *
                          C90498 +
                      (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
                       C100 * C1700 + C89 * C1708) *
                          C3364) *
                         C90623 * C90634 * C90777 +
                     ((C100 * C4656 + C89 * C4660 + C101 * C4657 + C90 * C4661 +
                       C102 * C4658 + C91 * C4662) *
                          C3364 +
                      (C100 * C4663 + C89 * C4668 + C101 * C4664 + C90 * C4669 +
                       C102 * C4665 + C91 * C4670) *
                          C90498) *
                         C90623 * C90634 * C10691) *
                        C6692 +
                    (((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
                       C102 * C3893 + C91 * C3899) *
                          C3364 +
                      (C100 * C3900 + C89 * C3909 + C101 * C3901 + C90 * C3910 +
                       C102 * C3902 + C91 * C3911) *
                          C90498) *
                         C90623 * C90634 * C90777 -
                     ((C102 * C837 + C91 * C844 + C101 * C838 + C90 * C845 +
                       C100 * C839 + C89 * C846) *
                          C90498 +
                      (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                       C100 * C832 + C89 * C840) *
                          C3364) *
                         C90623 * C90634 * C90782 -
                     ((C102 * C5472 + C91 * C5478 + C101 * C5473 + C90 * C5479 +
                       C100 * C5474 + C89 * C5480) *
                          C90498 +
                      (C102 * C5469 + C91 * C5475 + C101 * C5470 + C90 * C5476 +
                       C100 * C5471 + C89 * C5477) *
                          C3364) *
                         C90623 * C90634 * C10691) *
                        C90555)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C13579 * C107 + C90485 * C113) * C3364 +
                       (C13579 * C116 + C90485 * C125) * C90498) *
                          C90623 * C26429 +
                      (C29494 + C29495) * C90623 * C26430 + C31051 * C26431) *
                         C90782 -
                     (C31775 * C26431 + (C29497 + C29496) * C90623 * C26430 +
                      (C29495 + C29494) * C90623 * C26429) *
                         C90777 +
                     (C31051 * C26429 + (C31045 + C31044) * C90623 * C26430 +
                      (C31778 + C31779) * C90623 * C26431) *
                         C10691) *
                        C6692 +
                    (((C16865 + C16864) * C90623 * C26429 +
                      (C18366 + C18367) * C90623 * C26430 +
                      (C31055 + C31056) * C90623 * C26431) *
                         C90777 -
                     (C31054 * C26431 + (C16864 + C16865) * C90623 * C26430 +
                      (C16298 + C16297) * C90623 * C26429) *
                         C90782 -
                     (((C13579 * C31039 + C90485 * C31041) * C90498 +
                       (C13579 * C31038 + C90485 * C31040) * C3364) *
                          C90623 * C26431 +
                      (C31056 + C31055) * C90623 * C26430 + C31054 * C26429) *
                         C10691) *
                        C90555)) /
                      (p * q * std::sqrt(p + q));
    d2eexy[35] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C13579 * C107 + C90485 * C113) * C6771 +
                      (C13579 * C182 + C90485 * C188) * C6692 - C14082 * C6772 -
                      C14192 * C90555) *
                         C13576 +
                     (C14082 * C6771 + C14192 * C6692 - C14088 * C6772 -
                      C14193 * C90555) *
                         C13577 +
                     (C14088 * C6771 + C14193 * C6692 - C15553 * C6772 -
                      C15643 * C90555) *
                         C13578) *
                        C90634 * C90498 * C90782 +
                    ((C16859 * C6772 -
                      ((C13579 * C1794 + C90485 * C1799) * C6692 +
                       (C13579 * C1700 + C90485 * C1708) * C6771) +
                      C16953 * C90555) *
                         C13576 +
                     (C16857 * C6772 - (C16953 * C6692 + C16859 * C6771) +
                      C16954 * C90555) *
                         C13577 +
                     (C16860 * C6772 - (C16954 * C6692 + C16857 * C6771) +
                      C16955 * C90555) *
                         C13578) *
                        C90634 * C90498 * C90777 +
                    (((C13579 * C4656 + C90485 * C4660) * C6771 +
                      (C13579 * C4746 + C90485 * C4750) * C6692 -
                      C18362 * C6772 - C18450 * C90555) *
                         C13576 +
                     (C18362 * C6771 + C18450 * C6692 - C18364 * C6772 -
                      C18451 * C90555) *
                         C13577 +
                     (C18364 * C6771 + C18451 * C6692 -
                      (C13579 * C18349 + C90485 * C18351) * C6772 -
                      (C13579 * C18443 + C90485 * C18444) * C90555) *
                         C13578) *
                        C90634 * C90498 * C10691)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                      C102 * C109 + C91 * C115) *
                         C6771 +
                     (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 +
                      C102 * C184 + C91 * C190) *
                         C6692 -
                     (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                      C100 * C832 + C89 * C840) *
                         C6772 -
                     (C102 * C925 + C91 * C930 + C101 * C926 + C90 * C931 +
                      C100 * C927 + C89 * C932) *
                         C90555) *
                        C90623 * C90634 * C90498 * C90782 +
                    ((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
                      C102 * C3893 + C91 * C3899) *
                         C6772 -
                     ((C102 * C1792 + C91 * C1797 + C101 * C1791 + C90 * C1796 +
                       C100 * C1794 + C89 * C1799) *
                          C6692 +
                      (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
                       C100 * C1700 + C89 * C1708) *
                          C6771) +
                     (C100 * C3989 + C89 * C3995 + C101 * C3990 + C90 * C3996 +
                      C102 * C3991 + C91 * C3997) *
                         C90555) *
                        C90623 * C90634 * C90498 * C90777 +
                    ((C100 * C4656 + C89 * C4660 + C101 * C4657 + C90 * C4661 +
                      C102 * C4658 + C91 * C4662) *
                         C6771 +
                     (C100 * C4746 + C89 * C4750 + C101 * C4747 + C90 * C4751 +
                      C102 * C4748 + C91 * C4752) *
                         C6692 -
                     (C102 * C5469 + C91 * C5475 + C101 * C5470 + C90 * C5476 +
                      C100 * C5471 + C89 * C5477) *
                         C6772 -
                     (C102 * C5555 + C91 * C5558 + C101 * C5556 + C90 * C5559 +
                      C100 * C5557 + C89 * C5560) *
                         C90555) *
                        C90623 * C90634 * C90498 * C10691)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C13579 * C107 + C90485 * C113) * C6771 +
                      (C13579 * C182 + C90485 * C188) * C6692 - C14082 * C6772 -
                      C14192 * C90555) *
                         C90623 * C26429 +
                     (C33772 + C33773 - C33774 - C33775) * C90623 * C26430 +
                     C38534 * C26431) *
                        C90498 * C90782 +
                    ((C33774 - (C33773 + C33772) + C33775) * C90623 * C26429 +
                     (C33778 - (C33777 + C33776) + C33779) * C90623 * C26430 +
                     (C38528 - (C38529 + C38530) + C38531) * C90623 * C26431) *
                        C90498 * C90777 +
                    (C38534 * C26429 +
                     (C38530 + C38529 - C38528 - C38531) * C90623 * C26430 +
                     (C31776 * C6771 + C31837 * C6692 -
                      (C13579 * C31038 + C90485 * C31040) * C6772 -
                      (C13579 * C31130 + C90485 * C31131) * C90555) *
                         C90623 * C26431) *
                        C90498 * C10691)) /
                      (p * q * std::sqrt(p + q));
    d2eexz[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C10840 +
            (C13579 * C245 + C90485 * C251) * C90782 -
            (C13579 * C1700 + C90485 * C1708) * C10841 -
            (C13579 * C1879 + C90485 * C1884) * C90777 +
            (C13579 * C4656 + C90485 * C4660) * C10842 +
            (C13579 * C4831 + C90485 * C4835) * C10691) *
               C13576 +
           (C25912 + C25913 - C25914 - C25915 + C25916 + C25917) * C13577 +
           (C25918 + C25919 - C25920 - C25921 + C25922 + C25923) * C13578) *
              C90634 * C6692 +
          ((C25914 - (C25913 + C25912) + C25915 - C25916 - C25917) * C13576 +
           (C25920 - (C25919 + C25918) + C25921 - C25922 - C25923) * C13577 +
           (C16860 * C10841 - (C15731 * C90782 + C15553 * C10840) +
            C17052 * C90777 - (C13579 * C18349 + C90485 * C18351) * C10842 -
            (C13579 * C18525 + C90485 * C18526) * C10691) *
               C13578) *
              C90634 * C90555) *
         C90498) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C10840 +
           (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 + C102 * C247 +
            C91 * C253) *
               C90782 -
           (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
            C100 * C1700 + C89 * C1708) *
               C10841 -
           (C102 * C1877 + C91 * C1882 + C101 * C1878 + C90 * C1883 +
            C100 * C1879 + C89 * C1884) *
               C90777 +
           (C100 * C4656 + C89 * C4660 + C101 * C4657 + C90 * C4661 +
            C102 * C4658 + C91 * C4662) *
               C10842 +
           (C100 * C4831 + C89 * C4835 + C101 * C4832 + C90 * C4836 +
            C102 * C4833 + C91 * C4837) *
               C10691) *
              C90623 * C90634 * C6692 +
          ((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
            C102 * C3893 + C91 * C3899) *
               C10841 -
           ((C102 * C1009 + C91 * C1014 + C101 * C1010 + C90 * C1015 +
             C100 * C1011 + C89 * C1016) *
                C90782 +
            (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 + C100 * C832 +
             C89 * C840) *
                C10840) +
           (C100 * C4075 + C89 * C4081 + C101 * C4076 + C90 * C4082 +
            C102 * C4077 + C91 * C4083) *
               C90777 -
           (C102 * C5469 + C91 * C5475 + C101 * C5470 + C90 * C5476 +
            C100 * C5471 + C89 * C5477) *
               C10842 -
           (C102 * C5635 + C91 * C5638 + C101 * C5636 + C90 * C5639 +
            C100 * C5637 + C89 * C5640) *
               C10691) *
              C90623 * C90634 * C90555) *
         C90498) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C10840 +
            (C13579 * C245 + C90485 * C251) * C90782 - C27600 * C10841 -
            C27814 * C90777 + C27606 * C10842 + C27815 * C10691) *
               C90623 * C26429 +
           (C27600 * C10840 + C27814 * C90782 - C27606 * C10841 -
            C27815 * C90777 + C30275 * C10842 + C30458 * C10691) *
               C90623 * C26430 +
           (C27606 * C10840 + C27815 * C90782 - C30275 * C10841 -
            C30458 * C90777 + C31776 * C10842 + C31893 * C10691) *
               C90623 * C26431) *
              C6692 +
          ((C25914 - (C25913 + C25912) + C25915 - C25916 - C25917) * C90623 *
               C26429 +
           (C18362 * C10841 - (C17049 * C90782 + C16859 * C10840) +
            C18542 * C90777 - C31052 * C10842 - C31230 * C10691) *
               C90623 * C26430 +
           (C31052 * C10841 - (C18542 * C90782 + C18362 * C10840) +
            C31230 * C90777 - (C13579 * C31038 + C90485 * C31040) * C10842 -
            (C13579 * C31225 + C90485 * C31226) * C10691) *
               C90623 * C26431) *
              C90555) *
         C90498) /
            (p * q * std::sqrt(p + q));
    d2eeyx[35] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C13730 * C107 + C13576 * C308 + C13731 * C832 +
                       C13577 * C1094 + C13732 * C2570 + C13578 * C2827) *
                          C3364 +
                      (C13730 * C116 + C13576 * C314 + C13731 * C839 +
                       C13577 * C1098 + C13732 * C2577 + C13578 * C2831) *
                          C90498) *
                         C90634 * C90485 * C90782 -
                     ((C13732 * C3905 + C13578 * C4172 + C13731 * C3900 +
                       C13577 * C4167 + C13730 * C1707 + C13576 * C1966) *
                          C90498 +
                      (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 +
                       C13577 * C4161 + C13730 * C1700 + C13576 * C1962) *
                          C3364) *
                         C90634 * C90485 * C90777 +
                     ((C13730 * C4656 + C13576 * C4913 + C13731 * C5471 +
                       C13577 * C5717 + C13732 * C17651 + C13578 * C17889) *
                          C3364 +
                      (C13730 * C4663 + C13576 * C4917 + C13731 * C5474 +
                       C13577 * C5720 + C13732 * C17654 + C13578 * C17891) *
                          C90498) *
                         C90634 * C90485 * C10691) *
                        C6692 +
                    (((C13730 * C3891 + C13576 * C4161 + C13731 * C3896 +
                       C13577 * C4166 + C13732 * C16835 + C13578 * C17131) *
                          C3364 +
                      (C13730 * C3900 + C13576 * C4167 + C13731 * C3905 +
                       C13577 * C4172 + C13732 * C16838 + C13578 * C17133) *
                          C90498) *
                         C90634 * C90485 * C90777 -
                     ((C13732 * C3370 + C13578 * C3548 + C13731 * C2577 +
                       C13577 * C2831 + C13730 * C839 + C13576 * C1098) *
                          C90498 +
                      (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 +
                       C13577 * C2827 + C13730 * C832 + C13576 * C1094) *
                          C3364) *
                         C90634 * C90485 * C90782 -
                     ((C13732 * C18350 + C13578 * C18620 + C13731 * C17654 +
                       C13577 * C17891 + C13730 * C5474 + C13576 * C5720) *
                          C90498 +
                      (C13732 * C18349 + C13578 * C18619 + C13731 * C17651 +
                       C13577 * C17889 + C13730 * C5471 + C13576 * C5717) *
                          C3364) *
                         C90634 * C90485 * C10691) *
                        C90555)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C307 * C107 + C90623 * C308) * C3364 +
                       (C307 * C116 + C90623 * C314) * C90498) *
                          C90634 * C89 +
                      (C337 * C3364 + C338 * C90498) * C90634 * C90 +
                      (C339 * C3364 + C340 * C90498) * C90634 * C91) *
                         C90782 -
                     ((C1987 * C90498 + C1986 * C3364) * C90634 * C91 +
                      (C1985 * C90498 + C1984 * C3364) * C90634 * C90 +
                      ((C307 * C1707 + C90623 * C1966) * C90498 +
                       (C307 * C1700 + C90623 * C1962) * C3364) *
                          C90634 * C89) *
                         C90777 +
                     (((C307 * C4656 + C90623 * C4913) * C3364 +
                       (C307 * C4663 + C90623 * C4917) * C90498) *
                          C90634 * C89 +
                      (C4930 * C3364 + C4931 * C90498) * C90634 * C90 +
                      (C4932 * C3364 + C4933 * C90498) * C90634 * C91) *
                         C10691) *
                        C6692 +
                    ((((C307 * C3891 + C90623 * C4161) * C3364 +
                       (C307 * C3900 + C90623 * C4167) * C90498) *
                          C90634 * C89 +
                      (C8433 * C3364 + C8434 * C90498) * C90634 * C90 +
                      (C8435 * C3364 + C8436 * C90498) * C90634 * C91) *
                         C90777 -
                     ((C1119 * C90498 + C1118 * C3364) * C90634 * C91 +
                      (C1117 * C90498 + C1116 * C3364) * C90634 * C90 +
                      ((C307 * C839 + C90623 * C1098) * C90498 +
                       (C307 * C832 + C90623 * C1094) * C3364) *
                          C90634 * C89) *
                         C90782 -
                     (((C307 * C5472 + C90623 * C5718) * C90498 +
                       (C307 * C5469 + C90623 * C5715) * C3364) *
                          C90634 * C91 +
                      ((C307 * C5473 + C90623 * C5719) * C90498 +
                       (C307 * C5470 + C90623 * C5716) * C3364) *
                          C90634 * C90 +
                      ((C307 * C5474 + C90623 * C5720) * C90498 +
                       (C307 * C5471 + C90623 * C5717) * C3364) *
                          C90634 * C89) *
                         C10691) *
                        C90555)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C307 * C107 + C90623 * C308) * C3364 +
                       (C307 * C116 + C90623 * C314) * C90498) *
                          C26429 +
                      (C29732 + C29733) * C26430 + C31307 * C26431) *
                         C90485 * C90782 -
                     (C31946 * C26431 + (C29735 + C29734) * C26430 +
                      (C29733 + C29732) * C26429) *
                         C90485 * C90777 +
                     (C31307 * C26429 + (C31309 + C31308) * C26430 +
                      (C31953 + C31954) * C26431) *
                         C90485 * C10691) *
                        C6692 +
                    (((C29760 + C29761) * C26429 + (C29762 + C29763) * C26430 +
                      (C31317 + C31318) * C26431) *
                         C90485 * C90777 -
                     (C31314 * C26431 + (C29761 + C29760) * C26430 +
                      ((C307 * C839 + C90623 * C1098) * C90498 +
                       (C307 * C832 + C90623 * C1094) * C3364) *
                          C26429) *
                         C90485 * C90782 -
                     (((C307 * C31039 + C90623 * C31305) * C90498 +
                       (C307 * C31038 + C90623 * C31304) * C3364) *
                          C26431 +
                      (C31318 + C31317) * C26430 + C31314 * C26429) *
                         C90485 * C10691) *
                        C90555)) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C6771 +
           (C13730 * C182 + C13576 * C394 + C13731 * C927 + C13577 * C1195 +
            C13732 * C2663 + C13578 * C2921) *
               C6692 -
           (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
            C13730 * C832 + C13576 * C1094) *
               C6772 -
           (C13732 * C3433 + C13578 * C3599 + C13731 * C2663 + C13577 * C2921 +
            C13730 * C927 + C13576 * C1195) *
               C90555) *
              C90634 * C90485 * C90498 * C90782 +
          ((C13730 * C3891 + C13576 * C4161 + C13731 * C3896 + C13577 * C4166 +
            C13732 * C16835 + C13578 * C17131) *
               C6772 -
           ((C13732 * C3994 + C13578 * C4248 + C13731 * C3989 + C13577 * C4247 +
             C13730 * C1794 + C13576 * C2066) *
                C6692 +
            (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 + C13577 * C4161 +
             C13730 * C1700 + C13576 * C1962) *
                C6771) +
           (C13730 * C3989 + C13576 * C4247 + C13731 * C3994 + C13577 * C4248 +
            C13732 * C16942 + C13578 * C17209) *
               C90555) *
              C90634 * C90485 * C90498 * C90777 +
          ((C13730 * C4656 + C13576 * C4913 + C13731 * C5471 + C13577 * C5717 +
            C13732 * C17651 + C13578 * C17889) *
               C6771 +
           (C13730 * C4746 + C13576 * C5007 + C13731 * C5557 + C13577 * C5795 +
            C13732 * C17733 + C13578 * C17967) *
               C6692 -
           (C13732 * C18349 + C13578 * C18619 + C13731 * C17651 +
            C13577 * C17889 + C13730 * C5471 + C13576 * C5717) *
               C6772 -
           (C13732 * C18443 + C13578 * C18695 + C13731 * C17733 +
            C13577 * C17967 + C13730 * C5557 + C13576 * C5795) *
               C90555) *
              C90634 * C90485 * C90498 * C10691)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C6771 +
            (C307 * C182 + C90623 * C394) * C6692 -
            (C307 * C832 + C90623 * C1094) * C6772 -
            (C307 * C927 + C90623 * C1195) * C90555) *
               C90634 * C89 +
           (C6996 + C6997 - C6998 - C6999) * C90634 * C90 + C7011 * C91) *
              C90498 * C90782 +
          (((C307 * C3891 + C90623 * C4161) * C6772 -
            ((C307 * C1794 + C90623 * C2066) * C6692 +
             (C307 * C1700 + C90623 * C1962) * C6771) +
            (C307 * C3989 + C90623 * C4247) * C90555) *
               C90634 * C89 +
           (C8536 - (C8537 + C8538) + C8548) * C90634 * C90 +
           (C8541 - (C8542 + C8543) + C8549) * C90634 * C91) *
              C90498 * C90777 +
          (((C307 * C4656 + C90623 * C4913) * C6771 +
            (C307 * C4746 + C90623 * C5007) * C6692 -
            (C307 * C5471 + C90623 * C5717) * C6772 -
            (C307 * C5557 + C90623 * C5795) * C90555) *
               C90634 * C89 +
           (C4930 * C6771 + C5018 * C6692 -
            (C307 * C5470 + C90623 * C5716) * C6772 -
            (C307 * C5556 + C90623 * C5796) * C90555) *
               C90634 * C90 +
           (C4932 * C6771 + C5019 * C6692 -
            (C307 * C5469 + C90623 * C5715) * C6772 -
            (C307 * C5555 + C90623 * C5797) * C90555) *
               C90634 * C91) *
              C90498 * C10691)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C6771 +
            (C307 * C182 + C90623 * C394) * C6692 -
            (C307 * C832 + C90623 * C1094) * C6772 -
            (C307 * C927 + C90623 * C1195) * C90555) *
               C26429 +
           (C34115 + C34116 - C34117 - C34118) * C26430 + C38763 * C26431) *
              C90485 * C90498 * C90782 +
          ((C34117 - (C34116 + C34115) + C34118) * C26429 +
           (C34121 - (C34120 + C34119) + C34122) * C26430 +
           (C38758 - (C38759 + C38760) + C38761) * C26431) *
              C90485 * C90498 * C90777 +
          (C38763 * C26429 + (C38760 + C38759 - C38758 - C38761) * C26430 +
           (C31951 * C6771 + C32010 * C6692 -
            (C307 * C31038 + C90623 * C31304) * C6772 -
            (C307 * C31130 + C90623 * C31392) * C90555) *
               C26431) *
              C90485 * C90498 * C10691)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C10840 +
           (C13730 * C245 + C13576 * C474 + C13731 * C1011 + C13577 * C1301 +
            C13732 * C2745 + C13578 * C3017) *
               C90782 -
           (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 + C13577 * C4161 +
            C13730 * C1700 + C13576 * C1962) *
               C10841 -
           (C13732 * C4080 + C13578 * C4330 + C13731 * C4075 + C13577 * C4327 +
            C13730 * C1879 + C13576 * C2159) *
               C90777 +
           (C13730 * C4656 + C13576 * C4913 + C13731 * C5471 + C13577 * C5717 +
            C13732 * C17651 + C13578 * C17889) *
               C10842 +
           (C13730 * C4831 + C13576 * C5095 + C13731 * C5637 + C13577 * C5872 +
            C13732 * C17811 + C13578 * C18043) *
               C10691) *
              C90634 * C90485 * C6692 +
          ((C13730 * C3891 + C13576 * C4161 + C13731 * C3896 + C13577 * C4166 +
            C13732 * C16835 + C13578 * C17131) *
               C10841 -
           ((C13732 * C3489 + C13578 * C3654 + C13731 * C2745 + C13577 * C3017 +
             C13730 * C1011 + C13576 * C1301) *
                C90782 +
            (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
             C13730 * C832 + C13576 * C1094) *
                C10840) +
           (C13730 * C4075 + C13576 * C4327 + C13731 * C4080 + C13577 * C4330 +
            C13732 * C17029 + C13578 * C17285) *
               C90777 -
           (C13732 * C18349 + C13578 * C18619 + C13731 * C17651 +
            C13577 * C17889 + C13730 * C5471 + C13576 * C5717) *
               C10842 -
           (C13732 * C18525 + C13578 * C18770 + C13731 * C17811 +
            C13577 * C18043 + C13730 * C5637 + C13576 * C5872) *
               C10691) *
              C90634 * C90485 * C90555) *
         C90498) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C10840 +
            (C307 * C245 + C90623 * C474) * C90782 -
            (C307 * C1700 + C90623 * C1962) * C10841 -
            (C307 * C1879 + C90623 * C2159) * C90777 +
            (C307 * C4656 + C90623 * C4913) * C10842 +
            (C307 * C4831 + C90623 * C5095) * C10691) *
               C90634 * C89 +
           (C11066 + C11067 - C11068 - C11069 + C11070 + C11071) * C90634 *
               C90 +
           (C11072 + C11073 - C11074 - C11075 + C11076 + C11077) * C90634 *
               C91) *
              C6692 +
          (((C307 * C3891 + C90623 * C4161) * C10841 -
            ((C307 * C1011 + C90623 * C1301) * C90782 +
             (C307 * C832 + C90623 * C1094) * C10840) +
            (C307 * C4075 + C90623 * C4327) * C90777 -
            (C307 * C5471 + C90623 * C5717) * C10842 -
            (C307 * C5637 + C90623 * C5872) * C10691) *
               C90634 * C89 +
           (C8433 * C10841 - (C1315 * C90782 + C1116 * C10840) +
            C8659 * C90777 - (C307 * C5470 + C90623 * C5716) * C10842 -
            (C307 * C5636 + C90623 * C5873) * C10691) *
               C90634 * C90 +
           (C8435 * C10841 - (C1314 * C90782 + C1118 * C10840) +
            C8660 * C90777 - (C307 * C5469 + C90623 * C5715) * C10842 -
            (C307 * C5635 + C90623 * C5874) * C10691) *
               C90634 * C91) *
              C90555) *
         C90498) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C10840 +
            (C307 * C245 + C90623 * C474) * C90782 - C27910 * C10841 -
            C28080 * C90777 + C27912 * C10842 + C28081 * C10691) *
               C26429 +
           (C27910 * C10840 + C28080 * C90782 - C27912 * C10841 -
            C28081 * C90777 + C30557 * C10842 + C30733 * C10691) *
               C26430 +
           (C27912 * C10840 + C28081 * C90782 - C30557 * C10841 -
            C30733 * C90777 + C31951 * C10842 + C32065 * C10691) *
               C26431) *
              C90485 * C6692 +
          ((C29752 * C10841 -
            ((C307 * C1011 + C90623 * C1301) * C90782 +
             (C307 * C832 + C90623 * C1094) * C10840) +
            C29948 * C90777 - C29754 * C10842 - C29949 * C10691) *
               C26429 +
           (C29754 * C10841 - (C29948 * C90782 + C29752 * C10840) +
            C29949 * C90777 - C31315 * C10842 - C31489 * C10691) *
               C26430 +
           (C31315 * C10841 - (C29949 * C90782 + C29754 * C10840) +
            C31489 * C90777 - (C307 * C31038 + C90623 * C31304) * C10842 -
            (C307 * C31225 + C90623 * C31485) * C10691) *
               C26431) *
              C90485 * C90555) *
         C90498) /
            (p * q * std::sqrt(p + q));
    d2eezx[35] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C90634 * C555) * C3364 +
                       (C554 * C116 + C90634 * C561) * C90498) *
                          C90485 * C13576 +
                      (C16632 + C16633) * C90485 * C13577 + C16646 * C13578) *
                         C90782 -
                     (C17391 * C13578 + (C17386 + C17387) * C90485 * C13577 +
                      ((C554 * C1707 + C90634 * C2268) * C90498 +
                       (C554 * C1700 + C90634 * C2264) * C3364) *
                          C90485 * C13576) *
                         C90777 +
                     (((C554 * C4656 + C90634 * C5191) * C3364 +
                       (C554 * C4663 + C90634 * C5195) * C90498) *
                          C90485 * C13576 +
                      (C18860 + C18861) * C90485 * C13577 +
                      (C18862 + C18863) * C90485 * C13578) *
                         C10691) *
                        C6692 +
                    (((C17387 + C17386) * C90485 * C13576 +
                      (C17385 + C17384) * C90485 * C13577 +
                      (C17388 + C17389) * C90485 * C13578) *
                         C90777 -
                     (C16647 * C13578 + (C16635 + C16634) * C90485 * C13577 +
                      (C16633 + C16632) * C90485 * C13576) *
                         C90782 -
                     (((C554 * C18350 + C90634 * C18846) * C90498 +
                       (C554 * C18349 + C90634 * C18845) * C3364) *
                          C90485 * C13578 +
                      (C18863 + C18862) * C90485 * C13577 +
                      (C18861 + C18860) * C90485 * C13576) *
                         C10691) *
                        C90555)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C90634 * C555) * C3364 +
                       (C554 * C116 + C90634 * C561) * C90498) *
                          C89 +
                      (C584 * C3364 + C585 * C90498) * C90 +
                      (C586 * C3364 + C587 * C90498) * C91) *
                         C90623 * C90782 -
                     ((C2289 * C90498 + C2288 * C3364) * C91 +
                      (C2287 * C90498 + C2286 * C3364) * C90 +
                      ((C554 * C1707 + C90634 * C2268) * C90498 +
                       (C554 * C1700 + C90634 * C2264) * C3364) *
                          C89) *
                         C90623 * C90777 +
                     (((C554 * C4656 + C90634 * C5191) * C3364 +
                       (C554 * C4663 + C90634 * C5195) * C90498) *
                          C89 +
                      (C5208 * C3364 + C5209 * C90498) * C90 +
                      (C5210 * C3364 + C5211 * C90498) * C91) *
                         C90623 * C10691) *
                        C6692 +
                    ((((C554 * C3891 + C90634 * C4407) * C3364 +
                       (C554 * C3900 + C90634 * C4413) * C90498) *
                          C89 +
                      (C8771 * C3364 + C8772 * C90498) * C90 +
                      (C8773 * C3364 + C8774 * C90498) * C91) *
                         C90623 * C90777 -
                     ((C1421 * C90498 + C1420 * C3364) * C91 +
                      (C1419 * C90498 + C1418 * C3364) * C90 +
                      ((C554 * C839 + C90634 * C1400) * C90498 +
                       (C554 * C832 + C90634 * C1396) * C3364) *
                          C89) *
                         C90623 * C90782 -
                     (((C554 * C5472 + C90634 * C5952) * C90498 +
                       (C554 * C5469 + C90634 * C5949) * C3364) *
                          C91 +
                      ((C554 * C5473 + C90634 * C5953) * C90498 +
                       (C554 * C5470 + C90634 * C5950) * C3364) *
                          C90 +
                      ((C554 * C5474 + C90634 * C5954) * C90498 +
                       (C554 * C5471 + C90634 * C5951) * C3364) *
                          C89) *
                         C90623 * C10691) *
                        C90555)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C26732 * C107 + C26429 * C555 + C26733 * C1700 +
                       C26430 * C2264 + C26734 * C4656 + C26431 * C5191) *
                          C3364 +
                      (C26732 * C116 + C26429 * C561 + C26733 * C1707 +
                       C26430 * C2268 + C26734 * C4663 + C26431 * C5195) *
                          C90498) *
                         C90485 * C90623 * C90782 -
                     ((C26734 * C6168 + C26431 * C6508 + C26733 * C4663 +
                       C26430 * C5195 + C26732 * C1707 + C26429 * C2268) *
                          C90498 +
                      (C26734 * C6165 + C26431 * C6505 + C26733 * C4656 +
                       C26430 * C5191 + C26732 * C1700 + C26429 * C2264) *
                          C3364) *
                         C90485 * C90623 * C90777 +
                     ((C26732 * C4656 + C26429 * C5191 + C26733 * C6165 +
                       C26430 * C6505 + C26734 * C30247 + C26431 * C30808) *
                          C3364 +
                      (C26732 * C4663 + C26429 * C5195 + C26733 * C6168 +
                       C26430 * C6508 + C26734 * C30250 + C26431 * C30810) *
                          C90498) *
                         C90485 * C90623 * C10691) *
                        C6692 +
                    (((C26732 * C3891 + C26429 * C4407 + C26733 * C5471 +
                       C26430 * C5951 + C26734 * C19088 + C26431 * C19412) *
                          C3364 +
                      (C26732 * C3900 + C26429 * C4413 + C26733 * C5474 +
                       C26430 * C5954 + C26734 * C19091 + C26431 * C19414) *
                          C90498) *
                         C90485 * C90623 * C90777 -
                     ((C26734 * C5474 + C26431 * C5954 + C26733 * C3900 +
                       C26430 * C4413 + C26732 * C839 + C26429 * C1400) *
                          C90498 +
                      (C26734 * C5471 + C26431 * C5951 + C26733 * C3891 +
                       C26430 * C4407 + C26732 * C832 + C26429 * C1396) *
                          C3364) *
                         C90485 * C90623 * C90782 -
                     ((C26734 * C31039 + C26431 * C31564 + C26733 * C19091 +
                       C26430 * C19414 + C26732 * C5474 + C26429 * C5954) *
                          C90498 +
                      (C26734 * C31038 + C26431 * C31563 + C26733 * C19088 +
                       C26430 * C19412 + C26732 * C5471 + C26429 * C5951) *
                          C3364) *
                         C90485 * C90623 * C10691) *
                        C90555)) /
                      (p * q * std::sqrt(p + q));
    d2eezy[35] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C90634 * C555) * C6771 +
                      (C554 * C182 + C90634 * C641) * C6692 - C14614 * C6772 -
                      C14700 * C90555) *
                         C90485 * C13576 +
                     (C14614 * C6771 + C14700 * C6692 - C14616 * C6772 -
                      C14701 * C90555) *
                         C90485 * C13577 +
                     (C14616 * C6771 + C14701 * C6692 - C16062 * C6772 -
                      C16151 * C90555) *
                         C90485 * C13578) *
                        C90498 * C90782 +
                    ((C17381 * C6772 -
                      ((C554 * C1794 + C90634 * C2368) * C6692 +
                       (C554 * C1700 + C90634 * C2264) * C6771) +
                      C17474 * C90555) *
                         C90485 * C13576 +
                     (C17379 * C6772 - (C17474 * C6692 + C17381 * C6771) +
                      C17475 * C90555) *
                         C90485 * C13577 +
                     (C17382 * C6772 - (C17475 * C6692 + C17379 * C6771) +
                      C17476 * C90555) *
                         C90485 * C13578) *
                        C90498 * C90777 +
                    (((C554 * C4656 + C90634 * C5191) * C6771 +
                      (C554 * C4746 + C90634 * C5285) * C6692 - C18856 * C6772 -
                      C18943 * C90555) *
                         C90485 * C13576 +
                     (C18856 * C6771 + C18943 * C6692 - C18858 * C6772 -
                      C18944 * C90555) *
                         C90485 * C13577 +
                     (C18858 * C6771 + C18944 * C6692 -
                      (C554 * C18349 + C90634 * C18845) * C6772 -
                      (C554 * C18443 + C90634 * C18937) * C90555) *
                         C90485 * C13578) *
                        C90498 * C10691)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C90634 * C555) * C6771 +
                      (C554 * C182 + C90634 * C641) * C6692 -
                      (C554 * C832 + C90634 * C1396) * C6772 -
                      (C554 * C927 + C90634 * C1497) * C90555) *
                         C89 +
                     (C7234 + C7235 - C7236 - C7237) * C90 + C7248 * C91) *
                        C90623 * C90498 * C90782 +
                    (((C554 * C3891 + C90634 * C4407) * C6772 -
                      ((C554 * C1794 + C90634 * C2368) * C6692 +
                       (C554 * C1700 + C90634 * C2264) * C6771) +
                      (C554 * C3989 + C90634 * C4493) * C90555) *
                         C89 +
                     (C8874 - (C8875 + C8876) + C8886) * C90 +
                     (C8879 - (C8880 + C8881) + C8887) * C91) *
                        C90623 * C90498 * C90777 +
                    (((C554 * C4656 + C90634 * C5191) * C6771 +
                      (C554 * C4746 + C90634 * C5285) * C6692 -
                      (C554 * C5471 + C90634 * C5951) * C6772 -
                      (C554 * C5557 + C90634 * C6029) * C90555) *
                         C89 +
                     (C5208 * C6771 + C5296 * C6692 -
                      (C554 * C5470 + C90634 * C5950) * C6772 -
                      (C554 * C5556 + C90634 * C6030) * C90555) *
                         C90 +
                     (C5210 * C6771 + C5297 * C6692 -
                      (C554 * C5469 + C90634 * C5949) * C6772 -
                      (C554 * C5555 + C90634 * C6031) * C90555) *
                         C91) *
                        C90623 * C90498 * C10691)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C26732 * C107 + C26429 * C555 + C26733 * C1700 +
                      C26430 * C2264 + C26734 * C4656 + C26431 * C5191) *
                         C6771 +
                     (C26732 * C182 + C26429 * C641 + C26733 * C1794 +
                      C26430 * C2368 + C26734 * C4746 + C26431 * C5285) *
                         C6692 -
                     (C26734 * C5471 + C26431 * C5951 + C26733 * C3891 +
                      C26430 * C4407 + C26732 * C832 + C26429 * C1396) *
                         C6772 -
                     (C26734 * C5557 + C26431 * C6029 + C26733 * C3989 +
                      C26430 * C4493 + C26732 * C927 + C26429 * C1497) *
                         C90555) *
                        C90485 * C90623 * C90498 * C90782 +
                    ((C26732 * C3891 + C26429 * C4407 + C26733 * C5471 +
                      C26430 * C5951 + C26734 * C19088 + C26431 * C19412) *
                         C6772 -
                     ((C26734 * C6227 + C26431 * C6561 + C26733 * C4746 +
                       C26430 * C5285 + C26732 * C1794 + C26429 * C2368) *
                          C6692 +
                      (C26734 * C6165 + C26431 * C6505 + C26733 * C4656 +
                       C26430 * C5191 + C26732 * C1700 + C26429 * C2264) *
                          C6771) +
                     (C26732 * C3989 + C26429 * C4493 + C26733 * C5557 +
                      C26430 * C6029 + C26734 * C19146 + C26431 * C19466) *
                         C90555) *
                        C90485 * C90623 * C90498 * C90777 +
                    ((C26732 * C4656 + C26429 * C5191 + C26733 * C6165 +
                      C26430 * C6505 + C26734 * C30247 + C26431 * C30808) *
                         C6771 +
                     (C26732 * C4746 + C26429 * C5285 + C26733 * C6227 +
                      C26430 * C6561 + C26734 * C30357 + C26431 * C30886) *
                         C6692 -
                     (C26734 * C31038 + C26431 * C31563 + C26733 * C19088 +
                      C26430 * C19412 + C26732 * C5471 + C26429 * C5951) *
                         C6772 -
                     (C26734 * C31130 + C26431 * C31639 + C26733 * C19146 +
                      C26430 * C19466 + C26732 * C5557 + C26429 * C6029) *
                         C90555) *
                        C90485 * C90623 * C90498 * C10691)) /
                      (p * q * std::sqrt(p + q));
    d2eezz[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C10840 +
            (C554 * C245 + C90634 * C719) * C90782 -
            (C554 * C1700 + C90634 * C2264) * C10841 -
            (C554 * C1879 + C90634 * C2460) * C90777 +
            (C554 * C4656 + C90634 * C5191) * C10842 +
            (C554 * C4831 + C90634 * C5373) * C10691) *
               C90485 * C13576 +
           (C26368 + C26369 - C26370 - C26371 + C26372 + C26373) * C90485 *
               C13577 +
           (C26374 + C26375 - C26376 - C26377 + C26378 + C26379) * C90485 *
               C13578) *
              C6692 +
          ((C26370 - (C26369 + C26368) + C26371 - C26372 - C26373) * C90485 *
               C13576 +
           (C26376 - (C26375 + C26374) + C26377 - C26378 - C26379) * C90485 *
               C13577 +
           (C17382 * C10841 - (C16238 * C90782 + C16062 * C10840) +
            C17571 * C90777 - (C554 * C18349 + C90634 * C18845) * C10842 -
            (C554 * C18525 + C90634 * C19018) * C10691) *
               C90485 * C13578) *
              C90555) *
         C90498) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C10840 +
            (C554 * C245 + C90634 * C719) * C90782 -
            (C554 * C1700 + C90634 * C2264) * C10841 -
            (C554 * C1879 + C90634 * C2460) * C90777 +
            (C554 * C4656 + C90634 * C5191) * C10842 +
            (C554 * C4831 + C90634 * C5373) * C10691) *
               C89 +
           (C11300 + C11301 - C11302 - C11303 + C11304 + C11305) * C90 +
           (C11306 + C11307 - C11308 - C11309 + C11310 + C11311) * C91) *
              C90623 * C6692 +
          (((C554 * C3891 + C90634 * C4407) * C10841 -
            ((C554 * C1011 + C90634 * C1602) * C90782 +
             (C554 * C832 + C90634 * C1396) * C10840) +
            (C554 * C4075 + C90634 * C4573) * C90777 -
            (C554 * C5471 + C90634 * C5951) * C10842 -
            (C554 * C5637 + C90634 * C6106) * C10691) *
               C89 +
           (C8771 * C10841 - (C1616 * C90782 + C1418 * C10840) +
            C8997 * C90777 - (C554 * C5470 + C90634 * C5950) * C10842 -
            (C554 * C5636 + C90634 * C6107) * C10691) *
               C90 +
           (C8773 * C10841 - (C1615 * C90782 + C1420 * C10840) +
            C8998 * C90777 - (C554 * C5469 + C90634 * C5949) * C10842 -
            (C554 * C5635 + C90634 * C6108) * C10691) *
               C91) *
              C90623 * C90555) *
         C90498) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C26732 * C107 + C26429 * C555 + C26733 * C1700 + C26430 * C2264 +
            C26734 * C4656 + C26431 * C5191) *
               C10840 +
           (C26732 * C245 + C26429 * C719 + C26733 * C1879 + C26430 * C2460 +
            C26734 * C4831 + C26431 * C5373) *
               C90782 -
           (C26734 * C6165 + C26431 * C6505 + C26733 * C4656 + C26430 * C5191 +
            C26732 * C1700 + C26429 * C2264) *
               C10841 -
           (C26734 * C6287 + C26431 * C6612 + C26733 * C4831 + C26430 * C5373 +
            C26732 * C1879 + C26429 * C2460) *
               C90777 +
           (C26732 * C4656 + C26429 * C5191 + C26733 * C6165 + C26430 * C6505 +
            C26734 * C30247 + C26431 * C30808) *
               C10842 +
           (C26732 * C4831 + C26429 * C5373 + C26733 * C6287 + C26430 * C6612 +
            C26734 * C30449 + C26431 * C30962) *
               C10691) *
              C90485 * C90623 * C6692 +
          ((C26732 * C3891 + C26429 * C4407 + C26733 * C5471 + C26430 * C5951 +
            C26734 * C19088 + C26431 * C19412) *
               C10841 -
           ((C26734 * C5637 + C26431 * C6106 + C26733 * C4075 + C26430 * C4573 +
             C26732 * C1011 + C26429 * C1602) *
                C90782 +
            (C26734 * C5471 + C26431 * C5951 + C26733 * C3891 + C26430 * C4407 +
             C26732 * C832 + C26429 * C1396) *
                C10840) +
           (C26732 * C4075 + C26429 * C4573 + C26733 * C5637 + C26430 * C6106 +
            C26734 * C19199 + C26431 * C19517) *
               C90777 -
           (C26734 * C31038 + C26431 * C31563 + C26733 * C19088 +
            C26430 * C19412 + C26732 * C5471 + C26429 * C5951) *
               C10842 -
           (C26734 * C31225 + C26431 * C31714 + C26733 * C19199 +
            C26430 * C19517 + C26732 * C5637 + C26429 * C6106) *
               C10691) *
              C90485 * C90623 * C90555) *
         C90498) /
            (p * q * std::sqrt(p + q));
    d2eexx[36] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
               C102 * C109 + C91 * C115) *
                  C103 +
              (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 +
               C102 * C118 + C91 * C127) *
                  C92 -
              (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
               C100 * C108 + C89 * C114) *
                  C104 -
              (C102 * C120 + C91 * C128 + C101 * C118 + C90 * C127 +
               C100 * C117 + C89 * C126) *
                  C93 +
              (C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 +
               C102 * C111 + C91 * C121) *
                  C105 +
              (C100 * C118 + C89 * C127 + C101 * C120 + C90 * C128 +
               C102 * C122 + C91 * C129) *
                  C94 -
              (C102 * C112 + C91 * C123 + C101 * C111 + C90 * C121 +
               C100 * C110 + C89 * C119) *
                  C106 -
              (C102 * C124 + C91 * C130 + C101 * C122 + C90 * C129 +
               C100 * C120 + C89 * C128) *
                  C95) *
             C90623 * C90634 * C90567 * C90541 +
         0.5 * std::pow(Pi, 2.5) *
             (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                C102 * C109 + C91 * C115) *
                   C88316 +
               (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 +
                C102 * C118 + C91 * C127) *
                   C90744 -
               (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                C100 * C108 + C89 * C114) *
                   C88309 -
               (C102 * C120 + C91 * C128 + C101 * C118 + C90 * C127 +
                C100 * C117 + C89 * C126) *
                   C90503) *
                  C90623 * C90634 * C90567 * C2565 +
              ((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 +
                C102 * C831 + C91 * C836) *
                   C88309 -
               ((C102 * C837 + C91 * C844 + C101 * C838 + C90 * C845 +
                 C100 * C839 + C89 * C846) *
                    C90744 +
                (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                 C100 * C832 + C89 * C840) *
                    C88316) +
               (C100 * C838 + C89 * C845 + C101 * C837 + C90 * C844 +
                C102 * C841 + C91 * C847) *
                   C90503) *
                  C90623 * C90634 * C90567 * C2566 +
              ((C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
                C102 * C2572 + C91 * C2576) *
                   C88316 +
               (C100 * C2577 + C89 * C2582 + C101 * C2578 + C90 * C2583 +
                C102 * C2579 + C91 * C2584) *
                   C90744 -
               (C102 * C2573 + C91 * C2580 + C101 * C2572 + C90 * C2576 +
                C100 * C2571 + C89 * C2575) *
                   C88309 -
               (C102 * C2581 + C91 * C2585 + C101 * C2579 + C90 * C2584 +
                C100 * C2578 + C89 * C2583) *
                   C90503) *
                  C90623 * C90634 * C90567 * C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C88316 +
           (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 + C102 * C118 +
            C91 * C127) *
               C90744 -
           (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 + C100 * C108 +
            C89 * C114) *
               C88309 -
           (C102 * C120 + C91 * C128 + C101 * C118 + C90 * C127 + C100 * C117 +
            C89 * C126) *
               C90503) *
              C90623 * C90634 * C4653 +
          ((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
            C102 * C1699 + C91 * C1704) *
               C88309 -
           ((C102 * C1705 + C91 * C1712 + C101 * C1706 + C90 * C1713 +
             C100 * C1707 + C89 * C1714) *
                C90744 +
            (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
             C100 * C1700 + C89 * C1708) *
                C88316) +
           (C100 * C1706 + C89 * C1713 + C101 * C1705 + C90 * C1712 +
            C102 * C1709 + C91 * C1715) *
               C90503) *
              C90623 * C90634 * C4654 +
          ((C100 * C4656 + C89 * C4660 + C101 * C4657 + C90 * C4661 +
            C102 * C4658 + C91 * C4662) *
               C88316 +
           (C100 * C4663 + C89 * C4668 + C101 * C4664 + C90 * C4669 +
            C102 * C4665 + C91 * C4670) *
               C90744 -
           (C102 * C4659 + C91 * C4666 + C101 * C4658 + C90 * C4662 +
            C100 * C4657 + C89 * C4661) *
               C88309 -
           (C102 * C4667 + C91 * C4671 + C101 * C4665 + C90 * C4670 +
            C100 * C4664 + C89 * C4669) *
               C90503) *
              C90623 * C90634 * C4655) *
         C90541) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C13579 * C107 + C90485 * C113) * C103 +
           (C13579 * C116 + C90485 * C125) * C92 -
           (C13579 * C108 + C90485 * C114) * C104 -
           (C13579 * C117 + C90485 * C126) * C93 +
           (C13579 * C109 + C90485 * C115) * C105 +
           (C13579 * C118 + C90485 * C127) * C94 -
           (C13579 * C110 + C90485 * C119) * C106 -
           (C13579 * C120 + C90485 * C128) * C95) *
              C13576 +
          ((C13579 * C832 + C90485 * C840) * C103 +
           (C13579 * C839 + C90485 * C846) * C92 -
           (C13579 * C829 + C90485 * C834) * C104 -
           (C13579 * C838 + C90485 * C845) * C93 +
           (C13579 * C830 + C90485 * C835) * C105 +
           (C13579 * C837 + C90485 * C844) * C94 -
           (C13579 * C831 + C90485 * C836) * C106 -
           (C13579 * C841 + C90485 * C847) * C95) *
              C13577 +
          ((C13579 * C2570 + C90485 * C2574) * C103 +
           (C13579 * C2577 + C90485 * C2582) * C92 -
           (C13579 * C2571 + C90485 * C2575) * C104 -
           (C13579 * C2578 + C90485 * C2583) * C93 +
           (C13579 * C2572 + C90485 * C2576) * C105 +
           (C13579 * C2579 + C90485 * C2584) * C94 -
           (C13579 * C2573 + C90485 * C2580) * C106 -
           (C13579 * C2581 + C90485 * C2585) * C95) *
              C13578) *
         C90634 * C90567 * C90541) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C88316 +
            (C13579 * C116 + C90485 * C125) * C90744 -
            (C13579 * C108 + C90485 * C114) * C88309 -
            (C13579 * C117 + C90485 * C126) * C90503) *
               C13576 +
           (C15534 + C15535 - C15536 - C15537) * C13577 + C15560 * C13578) *
              C90634 * C90567 * C2565 +
          ((C15536 - (C15535 + C15534) + C15537) * C13576 +
           (C15540 - (C15539 + C15538) + C15541) * C13577 +
           (C15556 - (C15557 + C15558) + C15559) * C13578) *
              C90634 * C90567 * C2566 +
          (C15560 * C13576 + (C15558 + C15557 - C15556 - C15559) * C13577 +
           ((C13579 * C15525 + C90485 * C15527) * C88316 +
            (C13579 * C15528 + C90485 * C15531) * C90744 -
            (C13579 * C15526 + C90485 * C15529) * C88309 -
            (C13579 * C15530 + C90485 * C15532) * C90503) *
               C13578) *
              C90634 * C90567 * C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C88316 +
            (C13579 * C116 + C90485 * C125) * C90744 -
            (C13579 * C108 + C90485 * C114) * C88309 -
            (C13579 * C117 + C90485 * C126) * C90503) *
               C13576 +
           (C15534 + C15535 - C15536 - C15537) * C13577 + C15560 * C13578) *
              C90634 * C4653 +
          (((C13579 * C1697 + C90485 * C1702) * C88309 -
            ((C13579 * C1707 + C90485 * C1714) * C90744 +
             (C13579 * C1700 + C90485 * C1708) * C88316) +
            (C13579 * C1706 + C90485 * C1713) * C90503) *
               C13576 +
           ((C13579 * C3892 + C90485 * C3898) * C88309 -
            (C16858 * C90744 + C16859 * C88316) +
            (C13579 * C3901 + C90485 * C3910) * C90503) *
               C13577 +
           ((C13579 * C3895 + C90485 * C3907) * C88309 -
            (C16856 * C90744 + C16857 * C88316) +
            (C13579 * C3904 + C90485 * C3913) * C90503) *
               C13578) *
              C90634 * C4654 +
          (((C13579 * C4656 + C90485 * C4660) * C88316 +
            (C13579 * C4663 + C90485 * C4668) * C90744 -
            (C13579 * C4657 + C90485 * C4661) * C88309 -
            (C13579 * C4664 + C90485 * C4669) * C90503) *
               C13576 +
           ((C13579 * C5471 + C90485 * C5477) * C88316 +
            (C13579 * C5474 + C90485 * C5480) * C90744 -
            (C13579 * C5470 + C90485 * C5476) * C88309 -
            (C13579 * C5473 + C90485 * C5479) * C90503) *
               C13577 +
           ((C13579 * C17651 + C90485 * C17653) * C88316 +
            (C13579 * C17654 + C90485 * C17657) * C90744 -
            (C13579 * C17652 + C90485 * C17655) * C88309 -
            (C13579 * C17656 + C90485 * C17658) * C90503) *
               C13578) *
              C90634 * C4655) *
         C90541) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C13579 * C107 + C90485 * C113) * C103 +
           (C13579 * C116 + C90485 * C125) * C92 -
           (C13579 * C108 + C90485 * C114) * C104 -
           (C13579 * C117 + C90485 * C126) * C93 +
           (C13579 * C109 + C90485 * C115) * C105 +
           (C13579 * C118 + C90485 * C127) * C94 -
           (C13579 * C110 + C90485 * C119) * C106 -
           (C13579 * C120 + C90485 * C128) * C95) *
              C90623 * C26429 +
          ((C13579 * C1700 + C90485 * C1708) * C103 +
           (C13579 * C1707 + C90485 * C1714) * C92 -
           (C13579 * C1697 + C90485 * C1702) * C104 -
           (C13579 * C1706 + C90485 * C1713) * C93 +
           (C13579 * C1698 + C90485 * C1703) * C105 +
           (C13579 * C1705 + C90485 * C1712) * C94 -
           (C13579 * C1699 + C90485 * C1704) * C106 -
           (C13579 * C1709 + C90485 * C1715) * C95) *
              C90623 * C26430 +
          ((C13579 * C4656 + C90485 * C4660) * C103 +
           (C13579 * C4663 + C90485 * C4668) * C92 -
           (C13579 * C4657 + C90485 * C4661) * C104 -
           (C13579 * C4664 + C90485 * C4669) * C93 +
           (C13579 * C4658 + C90485 * C4662) * C105 +
           (C13579 * C4665 + C90485 * C4670) * C94 -
           (C13579 * C4659 + C90485 * C4666) * C106 -
           (C13579 * C4667 + C90485 * C4671) * C95) *
              C90623 * C26431) *
         C90567 * C90541) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C88316 +
            (C13579 * C116 + C90485 * C125) * C90744 -
            (C13579 * C108 + C90485 * C114) * C88309 -
            (C13579 * C117 + C90485 * C126) * C90503) *
               C90623 * C26429 +
           (C27600 * C88316 + C27601 * C90744 - C27602 * C88309 -
            C27603 * C90503) *
               C90623 * C26430 +
           (C27606 * C88316 + C27607 * C90744 - C27608 * C88309 -
            C27609 * C90503) *
               C90623 * C26431) *
              C90567 * C2565 +
          ((C15536 - (C15535 + C15534) + C15537) * C90623 * C26429 +
           (C24209 - (C24210 + C24211) + C24212) * C90623 * C26430 +
           ((C13579 * C5470 + C90485 * C5476) * C88309 -
            (C18363 * C90744 + C18362 * C88316) +
            (C13579 * C5473 + C90485 * C5479) * C90503) *
               C90623 * C26431) *
              C90567 * C2566 +
          (C15560 * C90623 * C26429 +
           (C24215 + C24214 - C24213 - C24216) * C90623 * C26430 +
           (C18364 * C88316 + C18365 * C90744 -
            (C13579 * C17652 + C90485 * C17655) * C88309 -
            (C13579 * C17656 + C90485 * C17658) * C90503) *
               C90623 * C26431) *
              C90567 * C2567)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C88316 +
            (C13579 * C116 + C90485 * C125) * C90744 -
            (C13579 * C108 + C90485 * C114) * C88309 -
            (C13579 * C117 + C90485 * C126) * C90503) *
               C90623 * C26429 +
           (C30256 + C30257 - C30258 - C30259) * C90623 * C26430 +
           C30283 * C26431) *
              C4653 +
          ((C30258 - (C30257 + C30256) + C30259) * C90623 * C26429 +
           (C30262 - (C30261 + C30260) + C30263) * C90623 * C26430 +
           (C30278 - (C30279 + C30280) + C30281) * C90623 * C26431) *
              C4654 +
          (C30283 * C26429 +
           (C30280 + C30279 - C30278 - C30281) * C90623 * C26430 +
           ((C13579 * C30247 + C90485 * C30249) * C88316 +
            (C13579 * C30250 + C90485 * C30253) * C90744 -
            (C13579 * C30248 + C90485 * C30251) * C88309 -
            (C13579 * C30252 + C90485 * C30254) * C90503) *
               C90623 * C26431) *
              C4655) *
         C90541) /
            (p * q * std::sqrt(p + q));
    d2eexy[36] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                C102 * C109 + C91 * C115) *
                   C181 +
               (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 +
                C102 * C184 + C91 * C190) *
                   C90541) *
                  C90623 * C90634 * C92 -
              ((C102 * C185 + C91 * C191 + C101 * C184 + C90 * C190 +
                C100 * C183 + C89 * C189) *
                   C90541 +
               (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                C100 * C108 + C89 * C114) *
                   C181) *
                  C90623 * C90634 * C93 +
              ((C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 +
                C102 * C111 + C91 * C121) *
                   C181 +
               (C100 * C184 + C89 * C190 + C101 * C185 + C90 * C191 +
                C102 * C186 + C91 * C192) *
                   C90541) *
                  C90623 * C90634 * C94 -
              ((C102 * C187 + C91 * C193 + C101 * C186 + C90 * C192 +
                C100 * C185 + C89 * C191) *
                   C90541 +
               (C102 * C112 + C91 * C123 + C101 * C111 + C90 * C121 +
                C100 * C110 + C89 * C119) *
                   C181) *
                  C90623 * C90634 * C95) *
             C90567 +
         0.5 * std::pow(Pi, 2.5) *
             (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                C102 * C109 + C91 * C115) *
                   C2660 +
               (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 +
                C102 * C184 + C91 * C190) *
                   C2565 -
               (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                C100 * C832 + C89 * C840) *
                   C2661 -
               (C102 * C925 + C91 * C930 + C101 * C926 + C90 * C931 +
                C100 * C927 + C89 * C932) *
                   C2566 +
               (C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
                C102 * C2572 + C91 * C2576) *
                   C2662 +
               (C100 * C2663 + C89 * C2667 + C101 * C2664 + C90 * C2668 +
                C102 * C2665 + C91 * C2669) *
                   C2567) *
                  C90623 * C90634 * C90744 +
              ((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 +
                C102 * C831 + C91 * C836) *
                   C2661 -
               ((C102 * C185 + C91 * C191 + C101 * C184 + C90 * C190 +
                 C100 * C183 + C89 * C189) *
                    C2565 +
                (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                 C100 * C108 + C89 * C114) *
                    C2660) +
               (C100 * C926 + C89 * C931 + C101 * C925 + C90 * C930 +
                C102 * C928 + C91 * C933) *
                   C2566 -
               (C102 * C2573 + C91 * C2580 + C101 * C2572 + C90 * C2576 +
                C100 * C2571 + C89 * C2575) *
                   C2662 -
               (C102 * C2666 + C91 * C2670 + C101 * C2665 + C90 * C2669 +
                C100 * C2664 + C89 * C2668) *
                   C2567) *
                  C90623 * C90634 * C90503) *
             C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C100 * C107 + C89 * C113 + C101 * C108 +
                                 C90 * C114 + C102 * C109 + C91 * C115) *
                                    C181 +
                                (C100 * C182 + C89 * C188 + C101 * C183 +
                                 C90 * C189 + C102 * C184 + C91 * C190) *
                                    C90541) *
                                   C90623 * C90634 * C90744 -
                               ((C102 * C185 + C91 * C191 + C101 * C184 +
                                 C90 * C190 + C100 * C183 + C89 * C189) *
                                    C90541 +
                                (C102 * C110 + C91 * C119 + C101 * C109 +
                                 C90 * C115 + C100 * C108 + C89 * C114) *
                                    C181) *
                                   C90623 * C90634 * C90503) *
                                  C4653 +
                              (((C100 * C1697 + C89 * C1702 + C101 * C1698 +
                                 C90 * C1703 + C102 * C1699 + C91 * C1704) *
                                    C181 +
                                (C100 * C1791 + C89 * C1796 + C101 * C1792 +
                                 C90 * C1797 + C102 * C1793 + C91 * C1798) *
                                    C90541) *
                                   C90623 * C90634 * C90503 -
                               ((C102 * C1792 + C91 * C1797 + C101 * C1791 +
                                 C90 * C1796 + C100 * C1794 + C89 * C1799) *
                                    C90541 +
                                (C102 * C1698 + C91 * C1703 + C101 * C1697 +
                                 C90 * C1702 + C100 * C1700 + C89 * C1708) *
                                    C181) *
                                   C90623 * C90634 * C90744) *
                                  C4654 +
                              (((C100 * C4656 + C89 * C4660 + C101 * C4657 +
                                 C90 * C4661 + C102 * C4658 + C91 * C4662) *
                                    C181 +
                                (C100 * C4746 + C89 * C4750 + C101 * C4747 +
                                 C90 * C4751 + C102 * C4748 + C91 * C4752) *
                                    C90541) *
                                   C90623 * C90634 * C90744 -
                               ((C102 * C4749 + C91 * C4753 + C101 * C4748 +
                                 C90 * C4752 + C100 * C4747 + C89 * C4751) *
                                    C90541 +
                                (C102 * C4659 + C91 * C4666 + C101 * C4658 +
                                 C90 * C4662 + C100 * C4657 + C89 * C4661) *
                                    C181) *
                                   C90623 * C90634 * C90503) *
                                  C4655)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C181 +
            (C13579 * C182 + C90485 * C188) * C90541) *
               C13576 +
           ((C13579 * C832 + C90485 * C840) * C181 +
            (C13579 * C927 + C90485 * C932) * C90541) *
               C13577 +
           ((C13579 * C2570 + C90485 * C2574) * C181 +
            (C13579 * C2663 + C90485 * C2667) * C90541) *
               C13578) *
              C90634 * C92 -
          (((C13579 * C2664 + C90485 * C2668) * C90541 +
            (C13579 * C2571 + C90485 * C2575) * C181) *
               C13578 +
           ((C13579 * C926 + C90485 * C931) * C90541 +
            (C13579 * C829 + C90485 * C834) * C181) *
               C13577 +
           ((C13579 * C183 + C90485 * C189) * C90541 +
            (C13579 * C108 + C90485 * C114) * C181) *
               C13576) *
              C90634 * C93 +
          (((C13579 * C109 + C90485 * C115) * C181 +
            (C13579 * C184 + C90485 * C190) * C90541) *
               C13576 +
           ((C13579 * C830 + C90485 * C835) * C181 +
            (C13579 * C925 + C90485 * C930) * C90541) *
               C13577 +
           ((C13579 * C2572 + C90485 * C2576) * C181 +
            (C13579 * C2665 + C90485 * C2669) * C90541) *
               C13578) *
              C90634 * C94 -
          (((C13579 * C2666 + C90485 * C2670) * C90541 +
            (C13579 * C2573 + C90485 * C2580) * C181) *
               C13578 +
           ((C13579 * C928 + C90485 * C933) * C90541 +
            (C13579 * C831 + C90485 * C836) * C181) *
               C13577 +
           ((C13579 * C185 + C90485 * C191) * C90541 +
            (C13579 * C110 + C90485 * C119) * C181) *
               C13576) *
              C90634 * C95) *
         C90567) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C2660 +
            (C13579 * C182 + C90485 * C188) * C2565 - C14082 * C2661 -
            C14192 * C2566 + C14088 * C2662 + C14193 * C2567) *
               C13576 +
           (C14082 * C2660 + C14192 * C2565 - C14088 * C2661 - C14193 * C2566 +
            C15553 * C2662 + C15643 * C2567) *
               C13577 +
           (C14088 * C2660 + C14193 * C2565 - C15553 * C2661 - C15643 * C2566 +
            (C13579 * C15525 + C90485 * C15527) * C2662 +
            (C13579 * C15634 + C90485 * C15636) * C2567) *
               C13578) *
              C90634 * C90744 +
          ((C14084 * C2661 -
            ((C13579 * C183 + C90485 * C189) * C2565 +
             (C13579 * C108 + C90485 * C114) * C2660) +
            C14194 * C2566 - C14090 * C2662 - C14195 * C2567) *
               C13576 +
           (C14090 * C2661 - (C14194 * C2565 + C14084 * C2660) +
            C14195 * C2566 - C15551 * C2662 - C15644 * C2567) *
               C13577 +
           (C15551 * C2661 - (C14195 * C2565 + C14090 * C2660) +
            C15644 * C2566 - (C13579 * C15526 + C90485 * C15529) * C2662 -
            (C13579 * C15635 + C90485 * C15637) * C2567) *
               C13578) *
              C90634 * C90503) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C13579 * C107 + C90485 * C113) * C181 +
                                 (C13579 * C182 + C90485 * C188) * C90541) *
                                    C13576 +
                                (C14082 * C181 + C14192 * C90541) * C13577 +
                                (C14088 * C181 + C14193 * C90541) * C13578) *
                                   C90634 * C90744 -
                               ((C14195 * C90541 + C14090 * C181) * C13578 +
                                (C14194 * C90541 + C14084 * C181) * C13577 +
                                ((C13579 * C183 + C90485 * C189) * C90541 +
                                 (C13579 * C108 + C90485 * C114) * C181) *
                                    C13576) *
                                   C90634 * C90503) *
                                  C4653 +
                              ((((C13579 * C1697 + C90485 * C1702) * C181 +
                                 (C13579 * C1791 + C90485 * C1796) * C90541) *
                                    C13576 +
                                ((C13579 * C3892 + C90485 * C3898) * C181 +
                                 (C13579 * C3990 + C90485 * C3996) * C90541) *
                                    C13577 +
                                ((C13579 * C3895 + C90485 * C3907) * C181 +
                                 (C13579 * C3993 + C90485 * C3999) * C90541) *
                                    C13578) *
                                   C90634 * C90503 -
                               ((C16954 * C90541 + C16857 * C181) * C13578 +
                                (C16953 * C90541 + C16859 * C181) * C13577 +
                                ((C13579 * C1794 + C90485 * C1799) * C90541 +
                                 (C13579 * C1700 + C90485 * C1708) * C181) *
                                    C13576) *
                                   C90634 * C90744) *
                                  C4654 +
                              ((((C13579 * C4656 + C90485 * C4660) * C181 +
                                 (C13579 * C4746 + C90485 * C4750) * C90541) *
                                    C13576 +
                                ((C13579 * C5471 + C90485 * C5477) * C181 +
                                 (C13579 * C5557 + C90485 * C5560) * C90541) *
                                    C13577 +
                                ((C13579 * C17651 + C90485 * C17653) * C181 +
                                 (C13579 * C17733 + C90485 * C17735) * C90541) *
                                    C13578) *
                                   C90634 * C90744 -
                               (((C13579 * C17734 + C90485 * C17736) * C90541 +
                                 (C13579 * C17652 + C90485 * C17655) * C181) *
                                    C13578 +
                                ((C13579 * C5556 + C90485 * C5559) * C90541 +
                                 (C13579 * C5470 + C90485 * C5476) * C181) *
                                    C13577 +
                                ((C13579 * C4747 + C90485 * C4751) * C90541 +
                                 (C13579 * C4657 + C90485 * C4661) * C181) *
                                    C13576) *
                                   C90634 * C90503) *
                                  C4655)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C181 +
            (C13579 * C182 + C90485 * C188) * C90541) *
               C90623 * C26429 +
           ((C13579 * C1700 + C90485 * C1708) * C181 +
            (C13579 * C1794 + C90485 * C1799) * C90541) *
               C90623 * C26430 +
           ((C13579 * C4656 + C90485 * C4660) * C181 +
            (C13579 * C4746 + C90485 * C4750) * C90541) *
               C90623 * C26431) *
              C92 -
          (((C13579 * C4747 + C90485 * C4751) * C90541 +
            (C13579 * C4657 + C90485 * C4661) * C181) *
               C90623 * C26431 +
           ((C13579 * C1791 + C90485 * C1796) * C90541 +
            (C13579 * C1697 + C90485 * C1702) * C181) *
               C90623 * C26430 +
           ((C13579 * C183 + C90485 * C189) * C90541 +
            (C13579 * C108 + C90485 * C114) * C181) *
               C90623 * C26429) *
              C93 +
          (((C13579 * C109 + C90485 * C115) * C181 +
            (C13579 * C184 + C90485 * C190) * C90541) *
               C90623 * C26429 +
           ((C13579 * C1698 + C90485 * C1703) * C181 +
            (C13579 * C1792 + C90485 * C1797) * C90541) *
               C90623 * C26430 +
           ((C13579 * C4658 + C90485 * C4662) * C181 +
            (C13579 * C4748 + C90485 * C4752) * C90541) *
               C90623 * C26431) *
              C94 -
          (((C13579 * C4749 + C90485 * C4753) * C90541 +
            (C13579 * C4659 + C90485 * C4666) * C181) *
               C90623 * C26431 +
           ((C13579 * C1793 + C90485 * C1798) * C90541 +
            (C13579 * C1699 + C90485 * C1704) * C181) *
               C90623 * C26430 +
           ((C13579 * C185 + C90485 * C191) * C90541 +
            (C13579 * C110 + C90485 * C119) * C181) *
               C90623 * C26429) *
              C95) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C2660 +
            (C13579 * C182 + C90485 * C188) * C2565 - C14082 * C2661 -
            C14192 * C2566 + C14088 * C2662 + C14193 * C2567) *
               C90623 * C26429 +
           (C27600 * C2660 + C27716 * C2565 - C16859 * C2661 - C16953 * C2566 +
            C16857 * C2662 + C16954 * C2567) *
               C90623 * C26430 +
           (C27606 * C2660 + C27717 * C2565 - C18362 * C2661 - C18450 * C2566 +
            C18364 * C2662 + C18451 * C2567) *
               C90623 * C26431) *
              C90744 +
          ((C14084 * C2661 -
            ((C13579 * C183 + C90485 * C189) * C2565 +
             (C13579 * C108 + C90485 * C114) * C2660) +
            C14194 * C2566 - C14090 * C2662 - C14195 * C2567) *
               C90623 * C26429 +
           (C21021 * C2661 - (C27719 * C2565 + C27602 * C2660) +
            C21133 * C2566 - C21023 * C2662 - C21134 * C2567) *
               C90623 * C26430 +
           ((C13579 * C5470 + C90485 * C5476) * C2661 -
            (C27718 * C2565 + C27608 * C2660) +
            (C13579 * C5556 + C90485 * C5559) * C2566 -
            (C13579 * C17652 + C90485 * C17655) * C2662 -
            (C13579 * C17734 + C90485 * C17736) * C2567) *
               C90623 * C26431) *
              C90503) *
         C90567) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C181 +
             (C13579 * C182 + C90485 * C188) * C90541) *
                C90623 * C26429 +
            (C27698 + C27722) * C90623 * C26430 + C30370 * C26431) *
               C90744 -
           (C30371 * C26431 + (C27725 + C27709) * C90623 * C26430 +
            ((C13579 * C183 + C90485 * C189) * C90541 +
             (C13579 * C108 + C90485 * C114) * C181) *
                C90623 * C26429) *
               C90503) *
              C4653 +
          (((C27709 + C27725) * C90623 * C26429 +
            (C27706 + C27724) * C90623 * C26430 +
            (C30364 + C30374) * C90623 * C26431) *
               C90503 -
           ((C30375 + C30369) * C90623 * C26431 +
            (C27723 + C27701) * C90623 * C26430 +
            (C27722 + C27698) * C90623 * C26429) *
               C90744) *
              C4654 +
          ((C30370 * C26429 + (C30369 + C30375) * C90623 * C26430 +
            ((C13579 * C30247 + C90485 * C30249) * C181 +
             (C13579 * C30357 + C90485 * C30359) * C90541) *
                C90623 * C26431) *
               C90744 -
           (((C13579 * C30358 + C90485 * C30360) * C90541 +
             (C13579 * C30248 + C90485 * C30251) * C181) *
                C90623 * C26431 +
            (C30374 + C30364) * C90623 * C26430 + C30371 * C26429) *
               C90503) *
              C4655)) /
            (p * q * std::sqrt(p + q));
    d2eexz[36] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                C102 * C109 + C91 * C115) *
                   C244 +
               (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 +
                C102 * C247 + C91 * C253) *
                   C90567) *
                  C90623 * C90634 * C90541 * C92 -
              ((C102 * C248 + C91 * C254 + C101 * C247 + C90 * C253 +
                C100 * C246 + C89 * C252) *
                   C90567 +
               (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                C100 * C108 + C89 * C114) *
                   C244) *
                  C90623 * C90634 * C90541 * C93 +
              ((C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 +
                C102 * C111 + C91 * C121) *
                   C244 +
               (C100 * C247 + C89 * C253 + C101 * C248 + C90 * C254 +
                C102 * C249 + C91 * C255) *
                   C90567) *
                  C90623 * C90634 * C90541 * C94 -
              ((C102 * C250 + C91 * C256 + C101 * C249 + C90 * C255 +
                C100 * C248 + C89 * C254) *
                   C90567 +
               (C102 * C112 + C91 * C123 + C101 * C111 + C90 * C121 +
                C100 * C110 + C89 * C119) *
                   C244) *
                  C90623 * C90634 * C90541 * C95) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                 C102 * C109 + C91 * C115) *
                    C244 +
                (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 +
                 C102 * C247 + C91 * C253) *
                    C90567) *
                   C90623 * C90634 * C2565 -
               ((C102 * C1009 + C91 * C1014 + C101 * C1010 + C90 * C1015 +
                 C100 * C1011 + C89 * C1016) *
                    C90567 +
                (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                 C100 * C832 + C89 * C840) *
                    C244) *
                   C90623 * C90634 * C2566 +
               ((C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
                 C102 * C2572 + C91 * C2576) *
                    C244 +
                (C100 * C2745 + C89 * C2749 + C101 * C2746 + C90 * C2750 +
                 C102 * C2747 + C91 * C2751) *
                    C90567) *
                   C90623 * C90634 * C2567) *
                  C90744 +
              (((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 +
                 C102 * C831 + C91 * C836) *
                    C244 +
                (C100 * C1010 + C89 * C1015 + C101 * C1009 + C90 * C1014 +
                 C102 * C1012 + C91 * C1017) *
                    C90567) *
                   C90623 * C90634 * C2566 -
               ((C102 * C248 + C91 * C254 + C101 * C247 + C90 * C253 +
                 C100 * C246 + C89 * C252) *
                    C90567 +
                (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                 C100 * C108 + C89 * C114) *
                    C244) *
                   C90623 * C90634 * C2565 -
               ((C102 * C2748 + C91 * C2752 + C101 * C2747 + C90 * C2751 +
                 C100 * C2746 + C89 * C2750) *
                    C90567 +
                (C102 * C2573 + C91 * C2580 + C101 * C2572 + C90 * C2576 +
                 C100 * C2571 + C89 * C2575) *
                    C244) *
                   C90623 * C90634 * C2567) *
                  C90503)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((C100 * C107 + C89 * C113 + C101 * C108 +
                                C90 * C114 + C102 * C109 + C91 * C115) *
                                   C4828 +
                               (C100 * C245 + C89 * C251 + C101 * C246 +
                                C90 * C252 + C102 * C247 + C91 * C253) *
                                   C4653 -
                               (C102 * C1698 + C91 * C1703 + C101 * C1697 +
                                C90 * C1702 + C100 * C1700 + C89 * C1708) *
                                   C4829 -
                               (C102 * C1877 + C91 * C1882 + C101 * C1878 +
                                C90 * C1883 + C100 * C1879 + C89 * C1884) *
                                   C4654 +
                               (C100 * C4656 + C89 * C4660 + C101 * C4657 +
                                C90 * C4661 + C102 * C4658 + C91 * C4662) *
                                   C4830 +
                               (C100 * C4831 + C89 * C4835 + C101 * C4832 +
                                C90 * C4836 + C102 * C4833 + C91 * C4837) *
                                   C4655) *
                                  C90623 * C90634 * C90541 * C90744 +
                              ((C100 * C1697 + C89 * C1702 + C101 * C1698 +
                                C90 * C1703 + C102 * C1699 + C91 * C1704) *
                                   C4829 -
                               ((C102 * C248 + C91 * C254 + C101 * C247 +
                                 C90 * C253 + C100 * C246 + C89 * C252) *
                                    C4653 +
                                (C102 * C110 + C91 * C119 + C101 * C109 +
                                 C90 * C115 + C100 * C108 + C89 * C114) *
                                    C4828) +
                               (C100 * C1878 + C89 * C1883 + C101 * C1877 +
                                C90 * C1882 + C102 * C1880 + C91 * C1885) *
                                   C4654 -
                               (C102 * C4659 + C91 * C4666 + C101 * C4658 +
                                C90 * C4662 + C100 * C4657 + C89 * C4661) *
                                   C4830 -
                               (C102 * C4834 + C91 * C4838 + C101 * C4833 +
                                C90 * C4837 + C100 * C4832 + C89 * C4836) *
                                   C4655) *
                                  C90623 * C90634 * C90541 * C90503)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C244 +
            (C13579 * C245 + C90485 * C251) * C90567) *
               C13576 +
           ((C13579 * C832 + C90485 * C840) * C244 +
            (C13579 * C1011 + C90485 * C1016) * C90567) *
               C13577 +
           ((C13579 * C2570 + C90485 * C2574) * C244 +
            (C13579 * C2745 + C90485 * C2749) * C90567) *
               C13578) *
              C90634 * C90541 * C92 -
          (((C13579 * C2746 + C90485 * C2750) * C90567 +
            (C13579 * C2571 + C90485 * C2575) * C244) *
               C13578 +
           ((C13579 * C1010 + C90485 * C1015) * C90567 +
            (C13579 * C829 + C90485 * C834) * C244) *
               C13577 +
           ((C13579 * C246 + C90485 * C252) * C90567 +
            (C13579 * C108 + C90485 * C114) * C244) *
               C13576) *
              C90634 * C90541 * C93 +
          (((C13579 * C109 + C90485 * C115) * C244 +
            (C13579 * C247 + C90485 * C253) * C90567) *
               C13576 +
           ((C13579 * C830 + C90485 * C835) * C244 +
            (C13579 * C1009 + C90485 * C1014) * C90567) *
               C13577 +
           ((C13579 * C2572 + C90485 * C2576) * C244 +
            (C13579 * C2747 + C90485 * C2751) * C90567) *
               C13578) *
              C90634 * C90541 * C94 -
          (((C13579 * C2748 + C90485 * C2752) * C90567 +
            (C13579 * C2573 + C90485 * C2580) * C244) *
               C13578 +
           ((C13579 * C1012 + C90485 * C1017) * C90567 +
            (C13579 * C831 + C90485 * C836) * C244) *
               C13577 +
           ((C13579 * C248 + C90485 * C254) * C90567 +
            (C13579 * C110 + C90485 * C119) * C244) *
               C13576) *
              C90634 * C90541 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C244 +
             (C13579 * C245 + C90485 * C251) * C90567) *
                C13576 +
            (C14272 + C14296) * C13577 + C15723 * C13578) *
               C90634 * C2565 -
           ((C15733 + C15726) * C13578 + (C14297 + C14275) * C13577 +
            (C14296 + C14272) * C13576) *
               C90634 * C2566 +
           (C15723 * C13576 + (C15726 + C15733) * C13577 +
            ((C13579 * C15525 + C90485 * C15527) * C244 +
             (C13579 * C15718 + C90485 * C15720) * C90567) *
                C13578) *
               C90634 * C2567) *
              C90744 +
          (((C14278 + C14298) * C13576 + (C14281 + C14299) * C13577 +
            (C15727 + C15734) * C13578) *
               C90634 * C2566 -
           (C15730 * C13578 + (C14298 + C14278) * C13577 +
            ((C13579 * C246 + C90485 * C252) * C90567 +
             (C13579 * C108 + C90485 * C114) * C244) *
                C13576) *
               C90634 * C2565 -
           (((C13579 * C15719 + C90485 * C15721) * C90567 +
             (C13579 * C15526 + C90485 * C15529) * C244) *
                C13578 +
            (C15734 + C15727) * C13577 + C15730 * C13576) *
               C90634 * C2567) *
              C90503)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C4828 +
            (C13579 * C245 + C90485 * C251) * C4653 -
            (C13579 * C1700 + C90485 * C1708) * C4829 -
            (C13579 * C1879 + C90485 * C1884) * C4654 +
            (C13579 * C4656 + C90485 * C4660) * C4830 +
            (C13579 * C4831 + C90485 * C4835) * C4655) *
               C13576 +
           (C14082 * C4828 + C14290 * C4653 - C16859 * C4829 - C17049 * C4654 +
            (C13579 * C5471 + C90485 * C5477) * C4830 +
            (C13579 * C5637 + C90485 * C5640) * C4655) *
               C13577 +
           (C14088 * C4828 + C14291 * C4653 - C16857 * C4829 - C17051 * C4654 +
            (C13579 * C17651 + C90485 * C17653) * C4830 +
            (C13579 * C17811 + C90485 * C17813) * C4655) *
               C13578) *
              C90634 * C90541 * C90744 +
          (((C13579 * C1697 + C90485 * C1702) * C4829 -
            ((C13579 * C246 + C90485 * C252) * C4653 +
             (C13579 * C108 + C90485 * C114) * C4828) +
            (C13579 * C1878 + C90485 * C1883) * C4654 -
            (C13579 * C4657 + C90485 * C4661) * C4830 -
            (C13579 * C4832 + C90485 * C4836) * C4655) *
               C13576 +
           ((C13579 * C3892 + C90485 * C3898) * C4829 -
            (C14292 * C4653 + C14084 * C4828) +
            (C13579 * C4076 + C90485 * C4082) * C4654 -
            (C13579 * C5470 + C90485 * C5476) * C4830 -
            (C13579 * C5636 + C90485 * C5639) * C4655) *
               C13577 +
           ((C13579 * C3895 + C90485 * C3907) * C4829 -
            (C14293 * C4653 + C14090 * C4828) +
            (C13579 * C4079 + C90485 * C4085) * C4654 -
            (C13579 * C17652 + C90485 * C17655) * C4830 -
            (C13579 * C17812 + C90485 * C17814) * C4655) *
               C13578) *
              C90634 * C90541 * C90503)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C13579 * C107 + C90485 * C113) * C244 +
                                (C13579 * C245 + C90485 * C251) * C90567) *
                                   C90623 * C26429 +
                               ((C13579 * C1700 + C90485 * C1708) * C244 +
                                (C13579 * C1879 + C90485 * C1884) * C90567) *
                                   C90623 * C26430 +
                               ((C13579 * C4656 + C90485 * C4660) * C244 +
                                (C13579 * C4831 + C90485 * C4835) * C90567) *
                                   C90623 * C26431) *
                                  C90541 * C92 -
                              (((C13579 * C4832 + C90485 * C4836) * C90567 +
                                (C13579 * C4657 + C90485 * C4661) * C244) *
                                   C90623 * C26431 +
                               ((C13579 * C1878 + C90485 * C1883) * C90567 +
                                (C13579 * C1697 + C90485 * C1702) * C244) *
                                   C90623 * C26430 +
                               ((C13579 * C246 + C90485 * C252) * C90567 +
                                (C13579 * C108 + C90485 * C114) * C244) *
                                   C90623 * C26429) *
                                  C90541 * C93 +
                              (((C13579 * C109 + C90485 * C115) * C244 +
                                (C13579 * C247 + C90485 * C253) * C90567) *
                                   C90623 * C26429 +
                               ((C13579 * C1698 + C90485 * C1703) * C244 +
                                (C13579 * C1877 + C90485 * C1882) * C90567) *
                                   C90623 * C26430 +
                               ((C13579 * C4658 + C90485 * C4662) * C244 +
                                (C13579 * C4833 + C90485 * C4837) * C90567) *
                                   C90623 * C26431) *
                                  C90541 * C94 -
                              (((C13579 * C4834 + C90485 * C4838) * C90567 +
                                (C13579 * C4659 + C90485 * C4666) * C244) *
                                   C90623 * C26431 +
                               ((C13579 * C1880 + C90485 * C1885) * C90567 +
                                (C13579 * C1699 + C90485 * C1704) * C244) *
                                   C90623 * C26430 +
                               ((C13579 * C248 + C90485 * C254) * C90567 +
                                (C13579 * C110 + C90485 * C119) * C244) *
                                   C90623 * C26429) *
                                  C90541 * C95)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C244 +
             (C13579 * C245 + C90485 * C251) * C90567) *
                C90623 * C26429 +
            (C27600 * C244 + C27814 * C90567) * C90623 * C26430 +
            (C27606 * C244 + C27815 * C90567) * C90623 * C26431) *
               C2565 -
           ((C18542 * C90567 + C18362 * C244) * C90623 * C26431 +
            (C17049 * C90567 + C16859 * C244) * C90623 * C26430 +
            (C14296 + C14272) * C90623 * C26429) *
               C2566 +
           (C15723 * C90623 * C26429 +
            (C16857 * C244 + C17051 * C90567) * C90623 * C26430 +
            (C18364 * C244 + C18543 * C90567) * C90623 * C26431) *
               C2567) *
              C90744 +
          (((C14278 + C14298) * C90623 * C26429 +
            (C21021 * C244 + C21245 * C90567) * C90623 * C26430 +
            ((C13579 * C5470 + C90485 * C5476) * C244 +
             (C13579 * C5636 + C90485 * C5639) * C90567) *
                C90623 * C26431) *
               C2566 -
           ((C27817 * C90567 + C27608 * C244) * C90623 * C26431 +
            (C27816 * C90567 + C27602 * C244) * C90623 * C26430 +
            ((C13579 * C246 + C90485 * C252) * C90567 +
             (C13579 * C108 + C90485 * C114) * C244) *
                C90623 * C26429) *
               C2565 -
           (((C13579 * C17812 + C90485 * C17814) * C90567 +
             (C13579 * C17652 + C90485 * C17655) * C244) *
                C90623 * C26431 +
            (C21246 * C90567 + C21023 * C244) * C90623 * C26430 +
            C15730 * C90623 * C26429) *
               C2567) *
              C90503)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C4828 +
            (C13579 * C245 + C90485 * C251) * C4653 - C27600 * C4829 -
            C27814 * C4654 + C27606 * C4830 + C27815 * C4655) *
               C90623 * C26429 +
           (C27600 * C4828 + C27814 * C4653 - C27606 * C4829 - C27815 * C4654 +
            C30275 * C4830 + C30458 * C4655) *
               C90623 * C26430 +
           (C27606 * C4828 + C27815 * C4653 - C30275 * C4829 - C30458 * C4654 +
            (C13579 * C30247 + C90485 * C30249) * C4830 +
            (C13579 * C30449 + C90485 * C30451) * C4655) *
               C90623 * C26431) *
              C90541 * C90744 +
          ((C27602 * C4829 -
            ((C13579 * C246 + C90485 * C252) * C4653 +
             (C13579 * C108 + C90485 * C114) * C4828) +
            C27816 * C4654 - C27608 * C4830 - C27817 * C4655) *
               C90623 * C26429 +
           (C27608 * C4829 - (C27816 * C4653 + C27602 * C4828) +
            C27817 * C4654 - C30273 * C4830 - C30459 * C4655) *
               C90623 * C26430 +
           (C30273 * C4829 - (C27817 * C4653 + C27608 * C4828) +
            C30459 * C4654 - (C13579 * C30248 + C90485 * C30251) * C4830 -
            (C13579 * C30450 + C90485 * C30452) * C4655) *
               C90623 * C26431) *
              C90541 * C90503)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[36] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C307 * C107 + C90623 * C308) * C103 +
               (C307 * C116 + C90623 * C314) * C92 - C337 * C104 - C338 * C93 +
               C339 * C105 + C340 * C94 - C341 * C106 - C342 * C95) *
                  C90634 * C89 +
              (C337 * C103 + C338 * C92 - C339 * C104 - C340 * C93 +
               C341 * C105 + C342 * C94 - C343 * C106 - C344 * C95) *
                  C90634 * C90 +
              (C339 * C103 + C340 * C92 - C341 * C104 - C342 * C93 +
               C343 * C105 + C344 * C94 - (C307 * C112 + C90623 * C313) * C106 -
               (C307 * C124 + C90623 * C319) * C95) *
                  C90634 * C91) *
             C90567 * C90541 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C307 * C107 + C90623 * C308) * C88316 +
                (C307 * C116 + C90623 * C314) * C90744 - C337 * C88309 -
                C338 * C90503) *
                   C90634 * C89 +
               (C337 * C88316 + C338 * C90744 - C339 * C88309 - C340 * C90503) *
                   C90634 * C90 +
               (C339 * C88316 + C340 * C90744 - C341 * C88309 - C342 * C90503) *
                   C90634 * C91) *
                  C90567 * C2565 +
              ((C1116 * C88309 -
                ((C307 * C839 + C90623 * C1098) * C90744 +
                 (C307 * C832 + C90623 * C1094) * C88316) +
                C1117 * C90503) *
                   C90634 * C89 +
               (C1118 * C88309 - (C1117 * C90744 + C1116 * C88316) +
                C1119 * C90503) *
                   C90634 * C90 +
               (C1120 * C88309 - (C1119 * C90744 + C1118 * C88316) +
                C1121 * C90503) *
                   C90634 * C91) *
                  C90567 * C2566 +
              (((C307 * C2570 + C90623 * C2827) * C88316 +
                (C307 * C2577 + C90623 * C2831) * C90744 - C2844 * C88309 -
                C2845 * C90503) *
                   C90634 * C89 +
               (C2844 * C88316 + C2845 * C90744 - C2846 * C88309 -
                C2847 * C90503) *
                   C90634 * C90 +
               (C2846 * C88316 + C2847 * C90744 -
                (C307 * C2573 + C90623 * C2830) * C88309 -
                (C307 * C2581 + C90623 * C2834) * C90503) *
                   C90634 * C91) *
                  C90567 * C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C88316 +
            (C307 * C116 + C90623 * C314) * C90744 - C337 * C88309 -
            C338 * C90503) *
               C90634 * C89 +
           (C337 * C88316 + C338 * C90744 - C339 * C88309 - C340 * C90503) *
               C90634 * C90 +
           (C339 * C88316 + C340 * C90744 - C341 * C88309 - C342 * C90503) *
               C90634 * C91) *
              C4653 +
          ((C1984 * C88309 -
            ((C307 * C1707 + C90623 * C1966) * C90744 +
             (C307 * C1700 + C90623 * C1962) * C88316) +
            C1985 * C90503) *
               C90634 * C89 +
           (C1986 * C88309 - (C1985 * C90744 + C1984 * C88316) +
            C1987 * C90503) *
               C90634 * C90 +
           (C1988 * C88309 - (C1987 * C90744 + C1986 * C88316) +
            C1989 * C90503) *
               C90634 * C91) *
              C4654 +
          (((C307 * C4656 + C90623 * C4913) * C88316 +
            (C307 * C4663 + C90623 * C4917) * C90744 - C4930 * C88309 -
            C4931 * C90503) *
               C90634 * C89 +
           (C4930 * C88316 + C4931 * C90744 - C4932 * C88309 - C4933 * C90503) *
               C90634 * C90 +
           (C4932 * C88316 + C4933 * C90744 -
            (C307 * C4659 + C90623 * C4916) * C88309 -
            (C307 * C4667 + C90623 * C4920) * C90503) *
               C90634 * C91) *
              C4655) *
         C90541) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
           C13732 * C2570 + C13578 * C2827) *
              C103 +
          (C13730 * C116 + C13576 * C314 + C13731 * C839 + C13577 * C1098 +
           C13732 * C2577 + C13578 * C2831) *
              C92 -
          (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
           C13730 * C108 + C13576 * C309) *
              C104 -
          (C13732 * C2578 + C13578 * C2832 + C13731 * C838 + C13577 * C1099 +
           C13730 * C117 + C13576 * C315) *
              C93 +
          (C13730 * C109 + C13576 * C310 + C13731 * C830 + C13577 * C1095 +
           C13732 * C2572 + C13578 * C2829) *
              C105 +
          (C13730 * C118 + C13576 * C316 + C13731 * C837 + C13577 * C1100 +
           C13732 * C2579 + C13578 * C2833) *
              C94 -
          (C13732 * C2573 + C13578 * C2830 + C13731 * C831 + C13577 * C1096 +
           C13730 * C110 + C13576 * C311) *
              C106 -
          (C13732 * C2581 + C13578 * C2834 + C13731 * C841 + C13577 * C1101 +
           C13730 * C120 + C13576 * C317) *
              C95) *
         C90634 * C90485 * C90567 * C90541) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C88316 +
           (C13730 * C116 + C13576 * C314 + C13731 * C839 + C13577 * C1098 +
            C13732 * C2577 + C13578 * C2831) *
               C90744 -
           (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
            C13730 * C108 + C13576 * C309) *
               C88309 -
           (C13732 * C2578 + C13578 * C2832 + C13731 * C838 + C13577 * C1099 +
            C13730 * C117 + C13576 * C315) *
               C90503) *
              C90634 * C90485 * C90567 * C2565 +
          ((C13730 * C829 + C13576 * C1093 + C13731 * C2571 + C13577 * C2828 +
            C13732 * C3366 + C13578 * C3544) *
               C88309 -
           ((C13732 * C3370 + C13578 * C3548 + C13731 * C2577 + C13577 * C2831 +
             C13730 * C839 + C13576 * C1098) *
                C90744 +
            (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
             C13730 * C832 + C13576 * C1094) *
                C88316) +
           (C13730 * C838 + C13576 * C1099 + C13731 * C2578 + C13577 * C2832 +
            C13732 * C3369 + C13578 * C3547) *
               C90503) *
              C90634 * C90485 * C90567 * C2566 +
          ((C13730 * C2570 + C13576 * C2827 + C13731 * C3367 + C13577 * C3545 +
            C13732 * C15525 + C13578 * C15808) *
               C88316 +
           (C13730 * C2577 + C13576 * C2831 + C13731 * C3370 + C13577 * C3548 +
            C13732 * C15528 + C13578 * C15810) *
               C90744 -
           (C13732 * C15526 + C13578 * C15809 + C13731 * C3366 +
            C13577 * C3544 + C13730 * C2571 + C13576 * C2828) *
               C88309 -
           (C13732 * C15530 + C13578 * C15811 + C13731 * C3369 +
            C13577 * C3547 + C13730 * C2578 + C13576 * C2832) *
               C90503) *
              C90634 * C90485 * C90567 * C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C88316 +
           (C13730 * C116 + C13576 * C314 + C13731 * C839 + C13577 * C1098 +
            C13732 * C2577 + C13578 * C2831) *
               C90744 -
           (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
            C13730 * C108 + C13576 * C309) *
               C88309 -
           (C13732 * C2578 + C13578 * C2832 + C13731 * C838 + C13577 * C1099 +
            C13730 * C117 + C13576 * C315) *
               C90503) *
              C90634 * C90485 * C4653 +
          ((C13730 * C1697 + C13576 * C1961 + C13731 * C3892 + C13577 * C4162 +
            C13732 * C3895 + C13578 * C4165) *
               C88309 -
           ((C13732 * C3905 + C13578 * C4172 + C13731 * C3900 + C13577 * C4167 +
             C13730 * C1707 + C13576 * C1966) *
                C90744 +
            (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 + C13577 * C4161 +
             C13730 * C1700 + C13576 * C1962) *
                C88316) +
           (C13730 * C1706 + C13576 * C1967 + C13731 * C3901 + C13577 * C4168 +
            C13732 * C3904 + C13578 * C4171) *
               C90503) *
              C90634 * C90485 * C4654 +
          ((C13730 * C4656 + C13576 * C4913 + C13731 * C5471 + C13577 * C5717 +
            C13732 * C17651 + C13578 * C17889) *
               C88316 +
           (C13730 * C4663 + C13576 * C4917 + C13731 * C5474 + C13577 * C5720 +
            C13732 * C17654 + C13578 * C17891) *
               C90744 -
           (C13732 * C17652 + C13578 * C17890 + C13731 * C5470 +
            C13577 * C5716 + C13730 * C4657 + C13576 * C4914) *
               C88309 -
           (C13732 * C17656 + C13578 * C17892 + C13731 * C5473 +
            C13577 * C5719 + C13730 * C4664 + C13576 * C4918) *
               C90503) *
              C90634 * C90485 * C4655) *
         C90541) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C307 * C107 + C90623 * C308) * C103 +
           (C307 * C116 + C90623 * C314) * C92 - C337 * C104 - C338 * C93 +
           C339 * C105 + C340 * C94 - C341 * C106 - C342 * C95) *
              C26429 +
          ((C307 * C1700 + C90623 * C1962) * C103 +
           (C307 * C1707 + C90623 * C1966) * C92 - C1984 * C104 - C1985 * C93 +
           C1986 * C105 + C1987 * C94 - C1988 * C106 - C1989 * C95) *
              C26430 +
          ((C307 * C4656 + C90623 * C4913) * C103 +
           (C307 * C4663 + C90623 * C4917) * C92 - C4930 * C104 - C4931 * C93 +
           C4932 * C105 + C4933 * C94 - (C307 * C4659 + C90623 * C4916) * C106 -
           (C307 * C4667 + C90623 * C4920) * C95) *
              C26431) *
         C90485 * C90567 * C90541) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C307 * C107 + C90623 * C308) * C88316 +
                                (C307 * C116 + C90623 * C314) * C90744 -
                                C337 * C88309 - C338 * C90503) *
                                   C26429 +
                               (C27910 * C88316 + C27911 * C90744 -
                                C1984 * C88309 - C1985 * C90503) *
                                   C26430 +
                               (C27912 * C88316 + C27913 * C90744 -
                                C4930 * C88309 - C4931 * C90503) *
                                   C26431) *
                                  C90485 * C90567 * C2565 +
                              ((C1116 * C88309 -
                                ((C307 * C839 + C90623 * C1098) * C90744 +
                                 (C307 * C832 + C90623 * C1094) * C88316) +
                                C1117 * C90503) *
                                   C26429 +
                               (C8433 * C88309 -
                                ((C307 * C3900 + C90623 * C4167) * C90744 +
                                 (C307 * C3891 + C90623 * C4161) * C88316) +
                                C8434 * C90503) *
                                   C26430 +
                               ((C307 * C5470 + C90623 * C5716) * C88309 -
                                ((C307 * C5474 + C90623 * C5720) * C90744 +
                                 (C307 * C5471 + C90623 * C5717) * C88316) +
                                (C307 * C5473 + C90623 * C5719) * C90503) *
                                   C26431) *
                                  C90485 * C90567 * C2566 +
                              (((C307 * C2570 + C90623 * C2827) * C88316 +
                                (C307 * C2577 + C90623 * C2831) * C90744 -
                                C2844 * C88309 - C2845 * C90503) *
                                   C26429 +
                               ((C307 * C3896 + C90623 * C4166) * C88316 +
                                (C307 * C3905 + C90623 * C4172) * C90744 -
                                (C307 * C3895 + C90623 * C4165) * C88309 -
                                (C307 * C3904 + C90623 * C4171) * C90503) *
                                   C26430 +
                               ((C307 * C17651 + C90623 * C17889) * C88316 +
                                (C307 * C17654 + C90623 * C17891) * C90744 -
                                (C307 * C17652 + C90623 * C17890) * C88309 -
                                (C307 * C17656 + C90623 * C17892) * C90503) *
                                   C26431) *
                                  C90485 * C90567 * C2567)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C88316 +
            (C307 * C116 + C90623 * C314) * C90744 - C337 * C88309 -
            C338 * C90503) *
               C26429 +
           (C30538 + C30539 - C30540 - C30541) * C26430 + C30564 * C26431) *
              C90485 * C4653 +
          ((C30540 - (C30539 + C30538) + C30541) * C26429 +
           (C30544 - (C30543 + C30542) + C30545) * C26430 +
           (C30560 - (C30561 + C30562) + C30563) * C26431) *
              C90485 * C4654 +
          (C30564 * C26429 + (C30562 + C30561 - C30560 - C30563) * C26430 +
           ((C307 * C30247 + C90623 * C30533) * C88316 +
            (C307 * C30250 + C90623 * C30535) * C90744 -
            (C307 * C30248 + C90623 * C30534) * C88309 -
            (C307 * C30252 + C90623 * C30536) * C90503) *
               C26431) *
              C90485 * C4655) *
         C90541) /
            (p * q * std::sqrt(p + q));
    d2eeyy[36] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C307 * C107 + C90623 * C308) * C181 +
                (C307 * C182 + C90623 * C394) * C90541) *
                   C90634 * C89 +
               (C401 + C417) * C90634 * C90 + C423 * C91) *
                  C92 -
              (C424 * C91 + (C418 + C404) * C90634 * C90 +
               (C417 + C401) * C90634 * C89) *
                  C93 +
              (C423 * C89 + (C409 + C419) * C90634 * C90 +
               (C410 + C420) * C90634 * C91) *
                  C94 -
              (((C307 * C187 + C90623 * C399) * C90541 +
                (C307 * C112 + C90623 * C313) * C181) *
                   C90634 * C91 +
               (C420 + C410) * C90634 * C90 + C424 * C89) *
                  C95) *
             C90567 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C307 * C107 + C90623 * C308) * C2660 +
                (C307 * C182 + C90623 * C394) * C2565 -
                (C307 * C832 + C90623 * C1094) * C2661 -
                (C307 * C927 + C90623 * C1195) * C2566 +
                (C307 * C2570 + C90623 * C2827) * C2662 +
                (C307 * C2663 + C90623 * C2921) * C2567) *
                   C90634 * C89 +
               (C2926 + C2927 - C2928 - C2929 + C2930 + C2942) * C90634 * C90 +
               (C2933 + C2934 - C2935 - C2936 + C2937 + C2943) * C90634 * C91) *
                  C90744 +
              ((C2928 - (C2927 + C2926) + C2929 - C2930 - C2942) * C90634 *
                   C89 +
               (C2935 - (C2934 + C2933) + C2936 - C2937 - C2943) * C90634 *
                   C90 +
               (C1120 * C2661 - (C415 * C2565 + C341 * C2660) + C1219 * C2566 -
                (C307 * C2573 + C90623 * C2830) * C2662 -
                (C307 * C2666 + C90623 * C2924) * C2567) *
                   C90634 * C91) *
                  C90503) *
             C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C181 +
             (C307 * C182 + C90623 * C394) * C90541) *
                C90634 * C89 +
            (C401 + C417) * C90634 * C90 + C423 * C91) *
               C90744 -
           (C424 * C91 + (C418 + C404) * C90634 * C90 +
            (C417 + C401) * C90634 * C89) *
               C90503) *
              C4653 +
          (((C2069 + C2081) * C90634 * C89 + (C2072 + C2082) * C90634 * C90 +
            (C2075 + C2083) * C90634 * C91) *
               C90503 -
           (C2085 * C91 + (C2081 + C2069) * C90634 * C90 +
            ((C307 * C1794 + C90623 * C2066) * C90541 +
             (C307 * C1700 + C90623 * C1962) * C181) *
                C90634 * C89) *
               C90744) *
              C4654 +
          ((((C307 * C4656 + C90623 * C4913) * C181 +
             (C307 * C4746 + C90623 * C5007) * C90541) *
                C90634 * C89 +
            (C5012 + C5020) * C90634 * C90 + (C5015 + C5021) * C90634 * C91) *
               C90744 -
           (((C307 * C4749 + C90623 * C5010) * C90541 +
             (C307 * C4659 + C90623 * C4916) * C181) *
                C90634 * C91 +
            (C5021 + C5015) * C90634 * C90 + (C5020 + C5012) * C90634 * C89) *
               C90503) *
              C4655)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C181 +
           (C13730 * C182 + C13576 * C394 + C13731 * C927 + C13577 * C1195 +
            C13732 * C2663 + C13578 * C2921) *
               C90541) *
              C90634 * C90485 * C92 -
          ((C13732 * C2664 + C13578 * C2922 + C13731 * C926 + C13577 * C1196 +
            C13730 * C183 + C13576 * C395) *
               C90541 +
           (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
            C13730 * C108 + C13576 * C309) *
               C181) *
              C90634 * C90485 * C93 +
          ((C13730 * C109 + C13576 * C310 + C13731 * C830 + C13577 * C1095 +
            C13732 * C2572 + C13578 * C2829) *
               C181 +
           (C13730 * C184 + C13576 * C396 + C13731 * C925 + C13577 * C1197 +
            C13732 * C2665 + C13578 * C2923) *
               C90541) *
              C90634 * C90485 * C94 -
          ((C13732 * C2666 + C13578 * C2924 + C13731 * C928 + C13577 * C1198 +
            C13730 * C185 + C13576 * C397) *
               C90541 +
           (C13732 * C2573 + C13578 * C2830 + C13731 * C831 + C13577 * C1096 +
            C13730 * C110 + C13576 * C311) *
               C181) *
              C90634 * C90485 * C95) *
         C90567) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C2660 +
           (C13730 * C182 + C13576 * C394 + C13731 * C927 + C13577 * C1195 +
            C13732 * C2663 + C13578 * C2921) *
               C2565 -
           (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
            C13730 * C832 + C13576 * C1094) *
               C2661 -
           (C13732 * C3433 + C13578 * C3599 + C13731 * C2663 + C13577 * C2921 +
            C13730 * C927 + C13576 * C1195) *
               C2566 +
           (C13730 * C2570 + C13576 * C2827 + C13731 * C3367 + C13577 * C3545 +
            C13732 * C15525 + C13578 * C15808) *
               C2662 +
           (C13730 * C2663 + C13576 * C2921 + C13731 * C3433 + C13577 * C3599 +
            C13732 * C15634 + C13578 * C15886) *
               C2567) *
              C90634 * C90485 * C90744 +
          ((C13730 * C829 + C13576 * C1093 + C13731 * C2571 + C13577 * C2828 +
            C13732 * C3366 + C13578 * C3544) *
               C2661 -
           ((C13732 * C2664 + C13578 * C2922 + C13731 * C926 + C13577 * C1196 +
             C13730 * C183 + C13576 * C395) *
                C2565 +
            (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
             C13730 * C108 + C13576 * C309) *
                C2660) +
           (C13730 * C926 + C13576 * C1196 + C13731 * C2664 + C13577 * C2922 +
            C13732 * C3432 + C13578 * C3600) *
               C2566 -
           (C13732 * C15526 + C13578 * C15809 + C13731 * C3366 +
            C13577 * C3544 + C13730 * C2571 + C13576 * C2828) *
               C2662 -
           (C13732 * C15635 + C13578 * C15887 + C13731 * C3432 +
            C13577 * C3600 + C13730 * C2664 + C13576 * C2922) *
               C2567) *
              C90634 * C90485 * C90503) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
             C13732 * C2570 + C13578 * C2827) *
                C181 +
            (C13730 * C182 + C13576 * C394 + C13731 * C927 + C13577 * C1195 +
             C13732 * C2663 + C13578 * C2921) *
                C90541) *
               C90634 * C90485 * C90744 -
           ((C13732 * C2664 + C13578 * C2922 + C13731 * C926 + C13577 * C1196 +
             C13730 * C183 + C13576 * C395) *
                C90541 +
            (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
             C13730 * C108 + C13576 * C309) *
                C181) *
               C90634 * C90485 * C90503) *
              C4653 +
          (((C13730 * C1697 + C13576 * C1961 + C13731 * C3892 + C13577 * C4162 +
             C13732 * C3895 + C13578 * C4165) *
                C181 +
            (C13730 * C1791 + C13576 * C2063 + C13731 * C3990 + C13577 * C4249 +
             C13732 * C3993 + C13578 * C4250) *
                C90541) *
               C90634 * C90485 * C90503 -
           ((C13732 * C3994 + C13578 * C4248 + C13731 * C3989 + C13577 * C4247 +
             C13730 * C1794 + C13576 * C2066) *
                C90541 +
            (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 + C13577 * C4161 +
             C13730 * C1700 + C13576 * C1962) *
                C181) *
               C90634 * C90485 * C90744) *
              C4654 +
          (((C13730 * C4656 + C13576 * C4913 + C13731 * C5471 + C13577 * C5717 +
             C13732 * C17651 + C13578 * C17889) *
                C181 +
            (C13730 * C4746 + C13576 * C5007 + C13731 * C5557 + C13577 * C5795 +
             C13732 * C17733 + C13578 * C17967) *
                C90541) *
               C90634 * C90485 * C90744 -
           ((C13732 * C17734 + C13578 * C17968 + C13731 * C5556 +
             C13577 * C5796 + C13730 * C4747 + C13576 * C5008) *
                C90541 +
            (C13732 * C17652 + C13578 * C17890 + C13731 * C5470 +
             C13577 * C5716 + C13730 * C4657 + C13576 * C4914) *
                C181) *
               C90634 * C90485 * C90503) *
              C4655)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C181 +
            (C307 * C182 + C90623 * C394) * C90541) *
               C26429 +
           ((C307 * C1700 + C90623 * C1962) * C181 +
            (C307 * C1794 + C90623 * C2066) * C90541) *
               C26430 +
           ((C307 * C4656 + C90623 * C4913) * C181 +
            (C307 * C4746 + C90623 * C5007) * C90541) *
               C26431) *
              C90485 * C92 -
          ((C5020 + C5012) * C26431 + (C2081 + C2069) * C26430 +
           (C417 + C401) * C26429) *
              C90485 * C93 +
          (C421 * C26429 + (C2072 + C2082) * C26430 +
           (C5015 + C5021) * C26431) *
              C90485 * C94 -
          (((C307 * C4749 + C90623 * C5010) * C90541 +
            (C307 * C4659 + C90623 * C4916) * C181) *
               C26431 +
           (C2083 + C2075) * C26430 + C422 * C26429) *
              C90485 * C95) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C2660 +
            (C307 * C182 + C90623 * C394) * C2565 -
            (C307 * C832 + C90623 * C1094) * C2661 -
            (C307 * C927 + C90623 * C1195) * C2566 +
            (C307 * C2570 + C90623 * C2827) * C2662 +
            (C307 * C2663 + C90623 * C2921) * C2567) *
               C26429 +
           (C27910 * C2660 + C27998 * C2565 -
            (C307 * C3891 + C90623 * C4161) * C2661 -
            (C307 * C3989 + C90623 * C4247) * C2566 +
            (C307 * C3896 + C90623 * C4166) * C2662 +
            (C307 * C3994 + C90623 * C4248) * C2567) *
               C26430 +
           (C27912 * C2660 + C27999 * C2565 -
            (C307 * C5471 + C90623 * C5717) * C2661 -
            (C307 * C5557 + C90623 * C5795) * C2566 +
            (C307 * C17651 + C90623 * C17889) * C2662 +
            (C307 * C17733 + C90623 * C17967) * C2567) *
               C26431) *
              C90485 * C90744 +
          ((C2928 - (C2927 + C2926) + C2929 - C2930 - C2942) * C26429 +
           (C8433 * C2661 - (C2078 * C2565 + C1984 * C2660) + C8546 * C2566 -
            (C307 * C3895 + C90623 * C4165) * C2662 -
            (C307 * C3993 + C90623 * C4250) * C2567) *
               C26430 +
           ((C307 * C5470 + C90623 * C5716) * C2661 -
            (C5018 * C2565 + C4930 * C2660) +
            (C307 * C5556 + C90623 * C5796) * C2566 -
            (C307 * C17652 + C90623 * C17890) * C2662 -
            (C307 * C17734 + C90623 * C17968) * C2567) *
               C26431) *
              C90485 * C90503) *
         C90567) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C181 +
             (C307 * C182 + C90623 * C394) * C90541) *
                C26429 +
            (C27992 + C28000) * C26430 + C30641 * C26431) *
               C90485 * C90744 -
           (C30642 * C26431 + (C2081 + C2069) * C26430 +
            (C417 + C401) * C26429) *
               C90485 * C90503) *
              C4653 +
          (((C2069 + C2081) * C26429 + (C5012 + C5020) * C26430 +
            (C30643 + C30651) * C26431) *
               C90485 * C90503 -
           ((C30652 + C30648) * C26431 + (C28001 + C27995) * C26430 +
            (C28000 + C27992) * C26429) *
               C90485 * C90744) *
              C4654 +
          ((C30641 * C26429 + (C30648 + C30652) * C26430 +
            ((C307 * C30247 + C90623 * C30533) * C181 +
             (C307 * C30357 + C90623 * C30638) * C90541) *
                C26431) *
               C90485 * C90744 -
           (((C307 * C30358 + C90623 * C30639) * C90541 +
             (C307 * C30248 + C90623 * C30534) * C181) *
                C26431 +
            (C30651 + C30643) * C26430 + C30642 * C26429) *
               C90485 * C90503) *
              C4655)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[36] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C307 * C107 + C90623 * C308) * C244 +
                (C307 * C245 + C90623 * C474) * C90567) *
                   C90634 * C89 +
               (C481 + C497) * C90634 * C90 + C503 * C91) *
                  C90541 * C92 -
              (C504 * C91 + (C498 + C484) * C90634 * C90 +
               (C497 + C481) * C90634 * C89) *
                  C90541 * C93 +
              (C503 * C89 + (C489 + C499) * C90634 * C90 +
               (C490 + C500) * C90634 * C91) *
                  C90541 * C94 -
              (((C307 * C250 + C90623 * C479) * C90567 +
                (C307 * C112 + C90623 * C313) * C244) *
                   C90634 * C91 +
               (C500 + C490) * C90634 * C90 + C504 * C89) *
                  C90541 * C95) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C307 * C107 + C90623 * C308) * C244 +
                 (C307 * C245 + C90623 * C474) * C90567) *
                    C90634 * C89 +
                (C481 + C497) * C90634 * C90 + C503 * C91) *
                   C2565 -
               (C1321 * C91 + (C1318 + C1310) * C90634 * C90 +
                ((C307 * C1011 + C90623 * C1301) * C90567 +
                 (C307 * C832 + C90623 * C1094) * C244) *
                    C90634 * C89) *
                   C2566 +
               (((C307 * C2570 + C90623 * C2827) * C244 +
                 (C307 * C2745 + C90623 * C3017) * C90567) *
                    C90634 * C89 +
                (C3022 + C3030) * C90634 * C90 +
                (C3025 + C3031) * C90634 * C91) *
                   C2567) *
                  C90744 +
              (((C1310 + C1318) * C90634 * C89 +
                (C1307 + C1317) * C90634 * C90 +
                (C1311 + C1319) * C90634 * C91) *
                   C2566 -
               (C504 * C91 + (C498 + C484) * C90634 * C90 +
                (C497 + C481) * C90634 * C89) *
                   C2565 -
               (((C307 * C2748 + C90623 * C3020) * C90567 +
                 (C307 * C2573 + C90623 * C2830) * C244) *
                    C90634 * C91 +
                (C3031 + C3025) * C90634 * C90 +
                (C3030 + C3022) * C90634 * C89) *
                   C2567) *
                  C90503)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C4828 +
            (C307 * C245 + C90623 * C474) * C4653 -
            (C307 * C1700 + C90623 * C1962) * C4829 -
            (C307 * C1879 + C90623 * C2159) * C4654 +
            (C307 * C4656 + C90623 * C4913) * C4830 +
            (C307 * C4831 + C90623 * C5095) * C4655) *
               C90634 * C89 +
           (C5100 + C5101 - C5102 - C5103 + C5104 + C5116) * C90634 * C90 +
           (C5107 + C5108 - C5109 - C5110 + C5111 + C5117) * C90634 * C91) *
              C90541 * C90744 +
          ((C5102 - (C5101 + C5100) + C5103 - C5104 - C5116) * C90634 * C89 +
           (C5109 - (C5108 + C5107) + C5110 - C5111 - C5117) * C90634 * C90 +
           (C1988 * C4829 - (C495 * C4653 + C341 * C4828) + C2183 * C4654 -
            (C307 * C4659 + C90623 * C4916) * C4830 -
            (C307 * C4834 + C90623 * C5098) * C4655) *
               C90634 * C91) *
              C90541 * C90503)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C244 +
           (C13730 * C245 + C13576 * C474 + C13731 * C1011 + C13577 * C1301 +
            C13732 * C2745 + C13578 * C3017) *
               C90567) *
              C90634 * C90485 * C90541 * C92 -
          ((C13732 * C2746 + C13578 * C3018 + C13731 * C1010 + C13577 * C1300 +
            C13730 * C246 + C13576 * C475) *
               C90567 +
           (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
            C13730 * C108 + C13576 * C309) *
               C244) *
              C90634 * C90485 * C90541 * C93 +
          ((C13730 * C109 + C13576 * C310 + C13731 * C830 + C13577 * C1095 +
            C13732 * C2572 + C13578 * C2829) *
               C244 +
           (C13730 * C247 + C13576 * C476 + C13731 * C1009 + C13577 * C1299 +
            C13732 * C2747 + C13578 * C3019) *
               C90567) *
              C90634 * C90485 * C90541 * C94 -
          ((C13732 * C2748 + C13578 * C3020 + C13731 * C1012 + C13577 * C1302 +
            C13730 * C248 + C13576 * C477) *
               C90567 +
           (C13732 * C2573 + C13578 * C2830 + C13731 * C831 + C13577 * C1096 +
            C13730 * C110 + C13576 * C311) *
               C244) *
              C90634 * C90485 * C90541 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
             C13732 * C2570 + C13578 * C2827) *
                C244 +
            (C13730 * C245 + C13576 * C474 + C13731 * C1011 + C13577 * C1301 +
             C13732 * C2745 + C13578 * C3017) *
                C90567) *
               C90634 * C90485 * C2565 -
           ((C13732 * C3489 + C13578 * C3654 + C13731 * C2745 + C13577 * C3017 +
             C13730 * C1011 + C13576 * C1301) *
                C90567 +
            (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
             C13730 * C832 + C13576 * C1094) *
                C244) *
               C90634 * C90485 * C2566 +
           ((C13730 * C2570 + C13576 * C2827 + C13731 * C3367 + C13577 * C3545 +
             C13732 * C15525 + C13578 * C15808) *
                C244 +
            (C13730 * C2745 + C13576 * C3017 + C13731 * C3489 + C13577 * C3654 +
             C13732 * C15718 + C13578 * C15962) *
                C90567) *
               C90634 * C90485 * C2567) *
              C90744 +
          (((C13730 * C829 + C13576 * C1093 + C13731 * C2571 + C13577 * C2828 +
             C13732 * C3366 + C13578 * C3544) *
                C244 +
            (C13730 * C1010 + C13576 * C1300 + C13731 * C2746 + C13577 * C3018 +
             C13732 * C3488 + C13578 * C3653) *
                C90567) *
               C90634 * C90485 * C2566 -
           ((C13732 * C2746 + C13578 * C3018 + C13731 * C1010 + C13577 * C1300 +
             C13730 * C246 + C13576 * C475) *
                C90567 +
            (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
             C13730 * C108 + C13576 * C309) *
                C244) *
               C90634 * C90485 * C2565 -
           ((C13732 * C15719 + C13578 * C15963 + C13731 * C3488 +
             C13577 * C3653 + C13730 * C2746 + C13576 * C3018) *
                C90567 +
            (C13732 * C15526 + C13578 * C15809 + C13731 * C3366 +
             C13577 * C3544 + C13730 * C2571 + C13576 * C2828) *
                C244) *
               C90634 * C90485 * C2567) *
              C90503)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C4828 +
           (C13730 * C245 + C13576 * C474 + C13731 * C1011 + C13577 * C1301 +
            C13732 * C2745 + C13578 * C3017) *
               C4653 -
           (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 + C13577 * C4161 +
            C13730 * C1700 + C13576 * C1962) *
               C4829 -
           (C13732 * C4080 + C13578 * C4330 + C13731 * C4075 + C13577 * C4327 +
            C13730 * C1879 + C13576 * C2159) *
               C4654 +
           (C13730 * C4656 + C13576 * C4913 + C13731 * C5471 + C13577 * C5717 +
            C13732 * C17651 + C13578 * C17889) *
               C4830 +
           (C13730 * C4831 + C13576 * C5095 + C13731 * C5637 + C13577 * C5872 +
            C13732 * C17811 + C13578 * C18043) *
               C4655) *
              C90634 * C90485 * C90541 * C90744 +
          ((C13730 * C1697 + C13576 * C1961 + C13731 * C3892 + C13577 * C4162 +
            C13732 * C3895 + C13578 * C4165) *
               C4829 -
           ((C13732 * C2746 + C13578 * C3018 + C13731 * C1010 + C13577 * C1300 +
             C13730 * C246 + C13576 * C475) *
                C4653 +
            (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
             C13730 * C108 + C13576 * C309) *
                C4828) +
           (C13730 * C1878 + C13576 * C2160 + C13731 * C4076 + C13577 * C4328 +
            C13732 * C4079 + C13578 * C4331) *
               C4654 -
           (C13732 * C17652 + C13578 * C17890 + C13731 * C5470 +
            C13577 * C5716 + C13730 * C4657 + C13576 * C4914) *
               C4830 -
           (C13732 * C17812 + C13578 * C18044 + C13731 * C5636 +
            C13577 * C5873 + C13730 * C4832 + C13576 * C5096) *
               C4655) *
              C90634 * C90485 * C90541 * C90503)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C244 +
            (C307 * C245 + C90623 * C474) * C90567) *
               C26429 +
           ((C307 * C1700 + C90623 * C1962) * C244 +
            (C307 * C1879 + C90623 * C2159) * C90567) *
               C26430 +
           ((C307 * C4656 + C90623 * C4913) * C244 +
            (C307 * C4831 + C90623 * C5095) * C90567) *
               C26431) *
              C90485 * C90541 * C92 -
          ((C5114 * C90567 + C4930 * C244) * C26431 +
           (C2180 * C90567 + C1984 * C244) * C26430 + (C497 + C481) * C26429) *
              C90485 * C90541 * C93 +
          (C501 * C26429 + (C1986 * C244 + C2182 * C90567) * C26430 +
           (C4932 * C244 + C5115 * C90567) * C26431) *
              C90485 * C90541 * C94 -
          (((C307 * C4834 + C90623 * C5098) * C90567 +
            (C307 * C4659 + C90623 * C4916) * C244) *
               C26431 +
           (C2183 * C90567 + C1988 * C244) * C26430 + C502 * C26429) *
              C90485 * C90541 * C95)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C244 +
             (C307 * C245 + C90623 * C474) * C90567) *
                C26429 +
            (C27910 * C244 + C28080 * C90567) * C26430 +
            (C27912 * C244 + C28081 * C90567) * C26431) *
               C90485 * C2565 -
           (((C307 * C5637 + C90623 * C5872) * C90567 +
             (C307 * C5471 + C90623 * C5717) * C244) *
                C26431 +
            ((C307 * C4075 + C90623 * C4327) * C90567 +
             (C307 * C3891 + C90623 * C4161) * C244) *
                C26430 +
            ((C307 * C1011 + C90623 * C1301) * C90567 +
             (C307 * C832 + C90623 * C1094) * C244) *
                C26429) *
               C90485 * C2566 +
           (((C307 * C2570 + C90623 * C2827) * C244 +
             (C307 * C2745 + C90623 * C3017) * C90567) *
                C26429 +
            ((C307 * C3896 + C90623 * C4166) * C244 +
             (C307 * C4080 + C90623 * C4330) * C90567) *
                C26430 +
            ((C307 * C17651 + C90623 * C17889) * C244 +
             (C307 * C17811 + C90623 * C18043) * C90567) *
                C26431) *
               C90485 * C2567) *
              C90744 +
          (((C1310 + C1318) * C26429 +
            (C8433 * C244 + C8659 * C90567) * C26430 +
            ((C307 * C5470 + C90623 * C5716) * C244 +
             (C307 * C5636 + C90623 * C5873) * C90567) *
                C26431) *
               C90485 * C2566 -
           ((C5114 * C90567 + C4930 * C244) * C26431 +
            (C2180 * C90567 + C1984 * C244) * C26430 + (C497 + C481) * C26429) *
               C90485 * C2565 -
           (((C307 * C17812 + C90623 * C18044) * C90567 +
             (C307 * C17652 + C90623 * C17890) * C244) *
                C26431 +
            ((C307 * C4079 + C90623 * C4331) * C90567 +
             (C307 * C3895 + C90623 * C4165) * C244) *
                C26430 +
            (C3030 + C3022) * C26429) *
               C90485 * C2567) *
              C90503)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C4828 +
            (C307 * C245 + C90623 * C474) * C4653 - C27910 * C4829 -
            C28080 * C4654 + C27912 * C4830 + C28081 * C4655) *
               C26429 +
           (C27910 * C4828 + C28080 * C4653 - C27912 * C4829 - C28081 * C4654 +
            C30557 * C4830 + C30733 * C4655) *
               C26430 +
           (C27912 * C4828 + C28081 * C4653 - C30557 * C4829 - C30733 * C4654 +
            (C307 * C30247 + C90623 * C30533) * C4830 +
            (C307 * C30449 + C90623 * C30726) * C4655) *
               C26431) *
              C90485 * C90541 * C90744 +
          ((C5102 - (C5101 + C5100) + C5103 - C5104 - C5116) * C26429 +
           (C4930 * C4829 - (C2180 * C4653 + C1984 * C4828) + C5114 * C4654 -
            C30555 * C4830 - C30734 * C4655) *
               C26430 +
           (C30555 * C4829 - (C5114 * C4653 + C4930 * C4828) + C30734 * C4654 -
            (C307 * C30248 + C90623 * C30534) * C4830 -
            (C307 * C30450 + C90623 * C30727) * C4655) *
               C26431) *
              C90485 * C90541 * C90503)) /
            (p * q * std::sqrt(p + q));
    d2eezx[36] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C554 * C107 + C90634 * C555) * C103 +
               (C554 * C116 + C90634 * C561) * C92 - C584 * C104 - C585 * C93 +
               C586 * C105 + C587 * C94 - C588 * C106 - C589 * C95) *
                  C89 +
              (C584 * C103 + C585 * C92 - C586 * C104 - C587 * C93 +
               C588 * C105 + C589 * C94 - C590 * C106 - C591 * C95) *
                  C90 +
              (C586 * C103 + C587 * C92 - C588 * C104 - C589 * C93 +
               C590 * C105 + C591 * C94 - (C554 * C112 + C90634 * C560) * C106 -
               (C554 * C124 + C90634 * C566) * C95) *
                  C91) *
             C90623 * C90567 * C90541 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C554 * C107 + C90634 * C555) * C88316 +
                (C554 * C116 + C90634 * C561) * C90744 - C584 * C88309 -
                C585 * C90503) *
                   C89 +
               (C584 * C88316 + C585 * C90744 - C586 * C88309 - C587 * C90503) *
                   C90 +
               (C586 * C88316 + C587 * C90744 - C588 * C88309 - C589 * C90503) *
                   C91) *
                  C90623 * C90567 * C2565 +
              ((C1418 * C88309 -
                ((C554 * C839 + C90634 * C1400) * C90744 +
                 (C554 * C832 + C90634 * C1396) * C88316) +
                C1419 * C90503) *
                   C89 +
               (C1420 * C88309 - (C1419 * C90744 + C1418 * C88316) +
                C1421 * C90503) *
                   C90 +
               (C1422 * C88309 - (C1421 * C90744 + C1420 * C88316) +
                C1423 * C90503) *
                   C91) *
                  C90623 * C90567 * C2566 +
              (((C554 * C2570 + C90634 * C3105) * C88316 +
                (C554 * C2577 + C90634 * C3109) * C90744 - C3122 * C88309 -
                C3123 * C90503) *
                   C89 +
               (C3122 * C88316 + C3123 * C90744 - C3124 * C88309 -
                C3125 * C90503) *
                   C90 +
               (C3124 * C88316 + C3125 * C90744 -
                (C554 * C2573 + C90634 * C3108) * C88309 -
                (C554 * C2581 + C90634 * C3112) * C90503) *
                   C91) *
                  C90623 * C90567 * C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C88316 +
            (C554 * C116 + C90634 * C561) * C90744 - C584 * C88309 -
            C585 * C90503) *
               C89 +
           (C584 * C88316 + C585 * C90744 - C586 * C88309 - C587 * C90503) *
               C90 +
           (C586 * C88316 + C587 * C90744 - C588 * C88309 - C589 * C90503) *
               C91) *
              C90623 * C4653 +
          ((C2286 * C88309 -
            ((C554 * C1707 + C90634 * C2268) * C90744 +
             (C554 * C1700 + C90634 * C2264) * C88316) +
            C2287 * C90503) *
               C89 +
           (C2288 * C88309 - (C2287 * C90744 + C2286 * C88316) +
            C2289 * C90503) *
               C90 +
           (C2290 * C88309 - (C2289 * C90744 + C2288 * C88316) +
            C2291 * C90503) *
               C91) *
              C90623 * C4654 +
          (((C554 * C4656 + C90634 * C5191) * C88316 +
            (C554 * C4663 + C90634 * C5195) * C90744 - C5208 * C88309 -
            C5209 * C90503) *
               C89 +
           (C5208 * C88316 + C5209 * C90744 - C5210 * C88309 - C5211 * C90503) *
               C90 +
           (C5210 * C88316 + C5211 * C90744 -
            (C554 * C4659 + C90634 * C5194) * C88309 -
            (C554 * C4667 + C90634 * C5198) * C90503) *
               C91) *
              C90623 * C4655) *
         C90541) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C554 * C107 + C90634 * C555) * C103 +
           (C554 * C116 + C90634 * C561) * C92 - C584 * C104 - C585 * C93 +
           C586 * C105 + C587 * C94 - C588 * C106 - C589 * C95) *
              C90485 * C13576 +
          ((C554 * C832 + C90634 * C1396) * C103 +
           (C554 * C839 + C90634 * C1400) * C92 - C1418 * C104 - C1419 * C93 +
           C1420 * C105 + C1421 * C94 - C1422 * C106 - C1423 * C95) *
              C90485 * C13577 +
          ((C554 * C2570 + C90634 * C3105) * C103 +
           (C554 * C2577 + C90634 * C3109) * C92 - C3122 * C104 - C3123 * C93 +
           C3124 * C105 + C3125 * C94 - (C554 * C2573 + C90634 * C3108) * C106 -
           (C554 * C2581 + C90634 * C3112) * C95) *
              C90485 * C13578) *
         C90567 * C90541) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C88316 +
            (C554 * C116 + C90634 * C561) * C90744 - C584 * C88309 -
            C585 * C90503) *
               C90485 * C13576 +
           (C16043 + C16044 - C16045 - C16046) * C90485 * C13577 +
           C16070 * C13578) *
              C90567 * C2565 +
          ((C16045 - (C16044 + C16043) + C16046) * C90485 * C13576 +
           (C16049 - (C16048 + C16047) + C16050) * C90485 * C13577 +
           (C16065 - (C16066 + C16067) + C16068) * C90485 * C13578) *
              C90567 * C2566 +
          (C16070 * C13576 +
           (C16067 + C16066 - C16065 - C16068) * C90485 * C13577 +
           ((C554 * C15525 + C90634 * C16038) * C88316 +
            (C554 * C15528 + C90634 * C16040) * C90744 -
            (C554 * C15526 + C90634 * C16039) * C88309 -
            (C554 * C15530 + C90634 * C16041) * C90503) *
               C90485 * C13578) *
              C90567 * C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C88316 +
            (C554 * C116 + C90634 * C561) * C90744 - C584 * C88309 -
            C585 * C90503) *
               C90485 * C13576 +
           (C16043 + C16044 - C16045 - C16046) * C90485 * C13577 +
           C16070 * C13578) *
              C4653 +
          ((C2286 * C88309 -
            ((C554 * C1707 + C90634 * C2268) * C90744 +
             (C554 * C1700 + C90634 * C2264) * C88316) +
            C2287 * C90503) *
               C90485 * C13576 +
           (C8771 * C88309 - (C17380 * C90744 + C17381 * C88316) +
            C8772 * C90503) *
               C90485 * C13577 +
           ((C554 * C3895 + C90634 * C4411) * C88309 -
            (C17378 * C90744 + C17379 * C88316) +
            (C554 * C3904 + C90634 * C4417) * C90503) *
               C90485 * C13578) *
              C4654 +
          (((C554 * C4656 + C90634 * C5191) * C88316 +
            (C554 * C4663 + C90634 * C5195) * C90744 - C5208 * C88309 -
            C5209 * C90503) *
               C90485 * C13576 +
           ((C554 * C5471 + C90634 * C5951) * C88316 +
            (C554 * C5474 + C90634 * C5954) * C90744 -
            (C554 * C5470 + C90634 * C5950) * C88309 -
            (C554 * C5473 + C90634 * C5953) * C90503) *
               C90485 * C13577 +
           ((C554 * C17651 + C90634 * C18119) * C88316 +
            (C554 * C17654 + C90634 * C18121) * C90744 -
            (C554 * C17652 + C90634 * C18120) * C88309 -
            (C554 * C17656 + C90634 * C18122) * C90503) *
               C90485 * C13578) *
              C4655) *
         C90541) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((C26732 * C107 + C26429 * C555 + C26733 * C1700 + C26430 * C2264 +
           C26734 * C4656 + C26431 * C5191) *
              C103 +
          (C26732 * C116 + C26429 * C561 + C26733 * C1707 + C26430 * C2268 +
           C26734 * C4663 + C26431 * C5195) *
              C92 -
          (C26734 * C4657 + C26431 * C5192 + C26733 * C1697 + C26430 * C2263 +
           C26732 * C108 + C26429 * C556) *
              C104 -
          (C26734 * C4664 + C26431 * C5196 + C26733 * C1706 + C26430 * C2269 +
           C26732 * C117 + C26429 * C562) *
              C93 +
          (C26732 * C109 + C26429 * C557 + C26733 * C1698 + C26430 * C2265 +
           C26734 * C4658 + C26431 * C5193) *
              C105 +
          (C26732 * C118 + C26429 * C563 + C26733 * C1705 + C26430 * C2270 +
           C26734 * C4665 + C26431 * C5197) *
              C94 -
          (C26734 * C4659 + C26431 * C5194 + C26733 * C1699 + C26430 * C2266 +
           C26732 * C110 + C26429 * C558) *
              C106 -
          (C26734 * C4667 + C26431 * C5198 + C26733 * C1709 + C26430 * C2271 +
           C26732 * C120 + C26429 * C564) *
              C95) *
         C90485 * C90623 * C90567 * C90541) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C26732 * C107 + C26429 * C555 + C26733 * C1700 + C26430 * C2264 +
            C26734 * C4656 + C26431 * C5191) *
               C88316 +
           (C26732 * C116 + C26429 * C561 + C26733 * C1707 + C26430 * C2268 +
            C26734 * C4663 + C26431 * C5195) *
               C90744 -
           (C26734 * C4657 + C26431 * C5192 + C26733 * C1697 + C26430 * C2263 +
            C26732 * C108 + C26429 * C556) *
               C88309 -
           (C26734 * C4664 + C26431 * C5196 + C26733 * C1706 + C26430 * C2269 +
            C26732 * C117 + C26429 * C562) *
               C90503) *
              C90485 * C90623 * C90567 * C2565 +
          ((C26732 * C829 + C26429 * C1395 + C26733 * C3892 + C26430 * C4408 +
            C26734 * C5470 + C26431 * C5950) *
               C88309 -
           ((C26734 * C5474 + C26431 * C5954 + C26733 * C3900 + C26430 * C4413 +
             C26732 * C839 + C26429 * C1400) *
                C90744 +
            (C26734 * C5471 + C26431 * C5951 + C26733 * C3891 + C26430 * C4407 +
             C26732 * C832 + C26429 * C1396) *
                C88316) +
           (C26732 * C838 + C26429 * C1401 + C26733 * C3901 + C26430 * C4414 +
            C26734 * C5473 + C26431 * C5953) *
               C90503) *
              C90485 * C90623 * C90567 * C2566 +
          ((C26732 * C2570 + C26429 * C3105 + C26733 * C3896 + C26430 * C4412 +
            C26734 * C17651 + C26431 * C18119) *
               C88316 +
           (C26732 * C2577 + C26429 * C3109 + C26733 * C3905 + C26430 * C4418 +
            C26734 * C17654 + C26431 * C18121) *
               C90744 -
           (C26734 * C17652 + C26431 * C18120 + C26733 * C3895 +
            C26430 * C4411 + C26732 * C2571 + C26429 * C3106) *
               C88309 -
           (C26734 * C17656 + C26431 * C18122 + C26733 * C3904 +
            C26430 * C4417 + C26732 * C2578 + C26429 * C3110) *
               C90503) *
              C90485 * C90623 * C90567 * C2567)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C26732 * C107 + C26429 * C555 + C26733 * C1700 + C26430 * C2264 +
            C26734 * C4656 + C26431 * C5191) *
               C88316 +
           (C26732 * C116 + C26429 * C561 + C26733 * C1707 + C26430 * C2268 +
            C26734 * C4663 + C26431 * C5195) *
               C90744 -
           (C26734 * C4657 + C26431 * C5192 + C26733 * C1697 + C26430 * C2263 +
            C26732 * C108 + C26429 * C556) *
               C88309 -
           (C26734 * C4664 + C26431 * C5196 + C26733 * C1706 + C26430 * C2269 +
            C26732 * C117 + C26429 * C562) *
               C90503) *
              C90485 * C90623 * C4653 +
          ((C26732 * C1697 + C26429 * C2263 + C26733 * C4657 + C26430 * C5192 +
            C26734 * C6164 + C26431 * C6504) *
               C88309 -
           ((C26734 * C6168 + C26431 * C6508 + C26733 * C4663 + C26430 * C5195 +
             C26732 * C1707 + C26429 * C2268) *
                C90744 +
            (C26734 * C6165 + C26431 * C6505 + C26733 * C4656 + C26430 * C5191 +
             C26732 * C1700 + C26429 * C2264) *
                C88316) +
           (C26732 * C1706 + C26429 * C2269 + C26733 * C4664 + C26430 * C5196 +
            C26734 * C6167 + C26431 * C6507) *
               C90503) *
              C90485 * C90623 * C4654 +
          ((C26732 * C4656 + C26429 * C5191 + C26733 * C6165 + C26430 * C6505 +
            C26734 * C30247 + C26431 * C30808) *
               C88316 +
           (C26732 * C4663 + C26429 * C5195 + C26733 * C6168 + C26430 * C6508 +
            C26734 * C30250 + C26431 * C30810) *
               C90744 -
           (C26734 * C30248 + C26431 * C30809 + C26733 * C6164 +
            C26430 * C6504 + C26732 * C4657 + C26429 * C5192) *
               C88309 -
           (C26734 * C30252 + C26431 * C30811 + C26733 * C6167 +
            C26430 * C6507 + C26732 * C4664 + C26429 * C5196) *
               C90503) *
              C90485 * C90623 * C4655) *
         C90541) /
            (p * q * std::sqrt(p + q));
    d2eezy[36] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C554 * C107 + C90634 * C555) * C181 +
                (C554 * C182 + C90634 * C641) * C90541) *
                   C89 +
               (C648 + C664) * C90 + C668 * C91) *
                  C90623 * C92 -
              (C669 * C91 + (C665 + C651) * C90 + (C664 + C648) * C89) *
                  C90623 * C93 +
              (C668 * C89 + (C656 + C666) * C90 + (C657 + C667) * C91) *
                  C90623 * C94 -
              (((C554 * C187 + C90634 * C646) * C90541 +
                (C554 * C112 + C90634 * C560) * C181) *
                   C91 +
               (C667 + C657) * C90 + C669 * C89) *
                  C90623 * C95) *
             C90567 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C554 * C107 + C90634 * C555) * C2660 +
                (C554 * C182 + C90634 * C641) * C2565 -
                (C554 * C832 + C90634 * C1396) * C2661 -
                (C554 * C927 + C90634 * C1497) * C2566 +
                (C554 * C2570 + C90634 * C3105) * C2662 +
                (C554 * C2663 + C90634 * C3199) * C2567) *
                   C89 +
               (C3204 + C3205 - C3206 - C3207 + C3208 + C3220) * C90 +
               (C3211 + C3212 - C3213 - C3214 + C3215 + C3221) * C91) *
                  C90623 * C90744 +
              ((C3206 - (C3205 + C3204) + C3207 - C3208 - C3220) * C89 +
               (C3213 - (C3212 + C3211) + C3214 - C3215 - C3221) * C90 +
               (C1422 * C2661 - (C662 * C2565 + C588 * C2660) + C1521 * C2566 -
                (C554 * C2573 + C90634 * C3108) * C2662 -
                (C554 * C2666 + C90634 * C3202) * C2567) *
                   C91) *
                  C90623 * C90503) *
             C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C181 +
             (C554 * C182 + C90634 * C641) * C90541) *
                C89 +
            (C648 + C664) * C90 + C668 * C91) *
               C90623 * C90744 -
           (C669 * C91 + (C665 + C651) * C90 + (C664 + C648) * C89) * C90623 *
               C90503) *
              C4653 +
          (((C2371 + C2383) * C89 + (C2374 + C2384) * C90 +
            (C2377 + C2385) * C91) *
               C90623 * C90503 -
           (C2386 * C91 + (C2383 + C2371) * C90 +
            ((C554 * C1794 + C90634 * C2368) * C90541 +
             (C554 * C1700 + C90634 * C2264) * C181) *
                C89) *
               C90623 * C90744) *
              C4654 +
          ((((C554 * C4656 + C90634 * C5191) * C181 +
             (C554 * C4746 + C90634 * C5285) * C90541) *
                C89 +
            (C5290 + C5298) * C90 + (C5293 + C5299) * C91) *
               C90623 * C90744 -
           (((C554 * C4749 + C90634 * C5288) * C90541 +
             (C554 * C4659 + C90634 * C5194) * C181) *
                C91 +
            (C5299 + C5293) * C90 + (C5298 + C5290) * C89) *
               C90623 * C90503) *
              C4655)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C181 +
            (C554 * C182 + C90634 * C641) * C90541) *
               C90485 * C13576 +
           ((C554 * C832 + C90634 * C1396) * C181 +
            (C554 * C927 + C90634 * C1497) * C90541) *
               C90485 * C13577 +
           ((C554 * C2570 + C90634 * C3105) * C181 +
            (C554 * C2663 + C90634 * C3199) * C90541) *
               C90485 * C13578) *
              C92 -
          ((C3218 * C90541 + C3122 * C181) * C90485 * C13578 +
           (C1518 * C90541 + C1418 * C181) * C90485 * C13577 +
           (C664 + C648) * C90485 * C13576) *
              C93 +
          (C668 * C90485 * C13576 +
           (C1420 * C181 + C1520 * C90541) * C90485 * C13577 +
           (C3124 * C181 + C3219 * C90541) * C90485 * C13578) *
              C94 -
          (((C554 * C2666 + C90634 * C3202) * C90541 +
            (C554 * C2573 + C90634 * C3108) * C181) *
               C90485 * C13578 +
           (C1521 * C90541 + C1422 * C181) * C90485 * C13577 +
           C669 * C90485 * C13576) *
              C95) *
         C90567) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C2660 +
            (C554 * C182 + C90634 * C641) * C2565 - C14614 * C2661 -
            C14700 * C2566 + C14616 * C2662 + C14701 * C2567) *
               C90485 * C13576 +
           (C14614 * C2660 + C14700 * C2565 - C14616 * C2661 - C14701 * C2566 +
            C16062 * C2662 + C16151 * C2567) *
               C90485 * C13577 +
           (C14616 * C2660 + C14701 * C2565 - C16062 * C2661 - C16151 * C2566 +
            (C554 * C15525 + C90634 * C16038) * C2662 +
            (C554 * C15634 + C90634 * C16144) * C2567) *
               C90485 * C13578) *
              C90744 +
          ((C3206 - (C3205 + C3204) + C3207 - C3208 - C3220) * C90485 * C13576 +
           (C3122 * C2661 - (C1518 * C2565 + C1418 * C2660) + C3218 * C2566 -
            C16060 * C2662 - C16152 * C2567) *
               C90485 * C13577 +
           (C16060 * C2661 - (C3218 * C2565 + C3122 * C2660) + C16152 * C2566 -
            (C554 * C15526 + C90634 * C16039) * C2662 -
            (C554 * C15635 + C90634 * C16145) * C2567) *
               C90485 * C13578) *
              C90503) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C181 +
             (C554 * C182 + C90634 * C641) * C90541) *
                C90485 * C13576 +
            (C14614 * C181 + C14700 * C90541) * C90485 * C13577 +
            (C14616 * C181 + C14701 * C90541) * C90485 * C13578) *
               C90744 -
           ((C3218 * C90541 + C3122 * C181) * C90485 * C13578 +
            (C1518 * C90541 + C1418 * C181) * C90485 * C13577 +
            (C664 + C648) * C90485 * C13576) *
               C90503) *
              C4653 +
          (((C2371 + C2383) * C90485 * C13576 +
            (C8771 * C181 + C8884 * C90541) * C90485 * C13577 +
            ((C554 * C3895 + C90634 * C4411) * C181 +
             (C554 * C3993 + C90634 * C4496) * C90541) *
                C90485 * C13578) *
               C90503 -
           ((C17475 * C90541 + C17379 * C181) * C90485 * C13578 +
            (C17474 * C90541 + C17381 * C181) * C90485 * C13577 +
            ((C554 * C1794 + C90634 * C2368) * C90541 +
             (C554 * C1700 + C90634 * C2264) * C181) *
                C90485 * C13576) *
               C90744) *
              C4654 +
          ((((C554 * C4656 + C90634 * C5191) * C181 +
             (C554 * C4746 + C90634 * C5285) * C90541) *
                C90485 * C13576 +
            ((C554 * C5471 + C90634 * C5951) * C181 +
             (C554 * C5557 + C90634 * C6029) * C90541) *
                C90485 * C13577 +
            ((C554 * C17651 + C90634 * C18119) * C181 +
             (C554 * C17733 + C90634 * C18197) * C90541) *
                C90485 * C13578) *
               C90744 -
           (((C554 * C17734 + C90634 * C18198) * C90541 +
             (C554 * C17652 + C90634 * C18120) * C181) *
                C90485 * C13578 +
            ((C554 * C5556 + C90634 * C6030) * C90541 +
             (C554 * C5470 + C90634 * C5950) * C181) *
                C90485 * C13577 +
            (C5298 + C5290) * C90485 * C13576) *
               C90503) *
              C4655)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C26732 * C107 + C26429 * C555 + C26733 * C1700 + C26430 * C2264 +
            C26734 * C4656 + C26431 * C5191) *
               C181 +
           (C26732 * C182 + C26429 * C641 + C26733 * C1794 + C26430 * C2368 +
            C26734 * C4746 + C26431 * C5285) *
               C90541) *
              C90485 * C90623 * C92 -
          ((C26734 * C4747 + C26431 * C5286 + C26733 * C1791 + C26430 * C2365 +
            C26732 * C183 + C26429 * C642) *
               C90541 +
           (C26734 * C4657 + C26431 * C5192 + C26733 * C1697 + C26430 * C2263 +
            C26732 * C108 + C26429 * C556) *
               C181) *
              C90485 * C90623 * C93 +
          ((C26732 * C109 + C26429 * C557 + C26733 * C1698 + C26430 * C2265 +
            C26734 * C4658 + C26431 * C5193) *
               C181 +
           (C26732 * C184 + C26429 * C643 + C26733 * C1792 + C26430 * C2366 +
            C26734 * C4748 + C26431 * C5287) *
               C90541) *
              C90485 * C90623 * C94 -
          ((C26734 * C4749 + C26431 * C5288 + C26733 * C1793 + C26430 * C2367 +
            C26732 * C185 + C26429 * C644) *
               C90541 +
           (C26734 * C4659 + C26431 * C5194 + C26733 * C1699 + C26430 * C2266 +
            C26732 * C110 + C26429 * C558) *
               C181) *
              C90485 * C90623 * C95) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C26732 * C107 + C26429 * C555 + C26733 * C1700 + C26430 * C2264 +
            C26734 * C4656 + C26431 * C5191) *
               C2660 +
           (C26732 * C182 + C26429 * C641 + C26733 * C1794 + C26430 * C2368 +
            C26734 * C4746 + C26431 * C5285) *
               C2565 -
           (C26734 * C5471 + C26431 * C5951 + C26733 * C3891 + C26430 * C4407 +
            C26732 * C832 + C26429 * C1396) *
               C2661 -
           (C26734 * C5557 + C26431 * C6029 + C26733 * C3989 + C26430 * C4493 +
            C26732 * C927 + C26429 * C1497) *
               C2566 +
           (C26732 * C2570 + C26429 * C3105 + C26733 * C3896 + C26430 * C4412 +
            C26734 * C17651 + C26431 * C18119) *
               C2662 +
           (C26732 * C2663 + C26429 * C3199 + C26733 * C3994 + C26430 * C4494 +
            C26734 * C17733 + C26431 * C18197) *
               C2567) *
              C90485 * C90623 * C90744 +
          ((C26732 * C829 + C26429 * C1395 + C26733 * C3892 + C26430 * C4408 +
            C26734 * C5470 + C26431 * C5950) *
               C2661 -
           ((C26734 * C4747 + C26431 * C5286 + C26733 * C1791 + C26430 * C2365 +
             C26732 * C183 + C26429 * C642) *
                C2565 +
            (C26734 * C4657 + C26431 * C5192 + C26733 * C1697 + C26430 * C2263 +
             C26732 * C108 + C26429 * C556) *
                C2660) +
           (C26732 * C926 + C26429 * C1498 + C26733 * C3990 + C26430 * C4495 +
            C26734 * C5556 + C26431 * C6030) *
               C2566 -
           (C26734 * C17652 + C26431 * C18120 + C26733 * C3895 +
            C26430 * C4411 + C26732 * C2571 + C26429 * C3106) *
               C2662 -
           (C26734 * C17734 + C26431 * C18198 + C26733 * C3993 +
            C26430 * C4496 + C26732 * C2664 + C26429 * C3200) *
               C2567) *
              C90485 * C90623 * C90503) *
         C90567) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C26732 * C107 + C26429 * C555 + C26733 * C1700 + C26430 * C2264 +
             C26734 * C4656 + C26431 * C5191) *
                C181 +
            (C26732 * C182 + C26429 * C641 + C26733 * C1794 + C26430 * C2368 +
             C26734 * C4746 + C26431 * C5285) *
                C90541) *
               C90485 * C90623 * C90744 -
           ((C26734 * C4747 + C26431 * C5286 + C26733 * C1791 + C26430 * C2365 +
             C26732 * C183 + C26429 * C642) *
                C90541 +
            (C26734 * C4657 + C26431 * C5192 + C26733 * C1697 + C26430 * C2263 +
             C26732 * C108 + C26429 * C556) *
                C181) *
               C90485 * C90623 * C90503) *
              C4653 +
          (((C26732 * C1697 + C26429 * C2263 + C26733 * C4657 + C26430 * C5192 +
             C26734 * C6164 + C26431 * C6504) *
                C181 +
            (C26732 * C1791 + C26429 * C2365 + C26733 * C4747 + C26430 * C5286 +
             C26734 * C6226 + C26431 * C6560) *
                C90541) *
               C90485 * C90623 * C90503 -
           ((C26734 * C6227 + C26431 * C6561 + C26733 * C4746 + C26430 * C5285 +
             C26732 * C1794 + C26429 * C2368) *
                C90541 +
            (C26734 * C6165 + C26431 * C6505 + C26733 * C4656 + C26430 * C5191 +
             C26732 * C1700 + C26429 * C2264) *
                C181) *
               C90485 * C90623 * C90744) *
              C4654 +
          (((C26732 * C4656 + C26429 * C5191 + C26733 * C6165 + C26430 * C6505 +
             C26734 * C30247 + C26431 * C30808) *
                C181 +
            (C26732 * C4746 + C26429 * C5285 + C26733 * C6227 + C26430 * C6561 +
             C26734 * C30357 + C26431 * C30886) *
                C90541) *
               C90485 * C90623 * C90744 -
           ((C26734 * C30358 + C26431 * C30887 + C26733 * C6226 +
             C26430 * C6560 + C26732 * C4747 + C26429 * C5286) *
                C90541 +
            (C26734 * C30248 + C26431 * C30809 + C26733 * C6164 +
             C26430 * C6504 + C26732 * C4657 + C26429 * C5192) *
                C181) *
               C90485 * C90623 * C90503) *
              C4655)) /
            (p * q * std::sqrt(p + q));
    d2eezz[36] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C554 * C107 + C90634 * C555) * C244 +
                (C554 * C245 + C90634 * C719) * C90567) *
                   C89 +
               (C726 + C742) * C90 + C746 * C91) *
                  C90623 * C90541 * C92 -
              (C747 * C91 + (C743 + C729) * C90 + (C742 + C726) * C89) *
                  C90623 * C90541 * C93 +
              (C746 * C89 + (C734 + C744) * C90 + (C735 + C745) * C91) *
                  C90623 * C90541 * C94 -
              (((C554 * C250 + C90634 * C724) * C90567 +
                (C554 * C112 + C90634 * C560) * C244) *
                   C91 +
               (C745 + C735) * C90 + C747 * C89) *
                  C90623 * C90541 * C95) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C554 * C107 + C90634 * C555) * C244 +
                 (C554 * C245 + C90634 * C719) * C90567) *
                    C89 +
                (C726 + C742) * C90 + C746 * C91) *
                   C90623 * C2565 -
               (C1621 * C91 + (C1619 + C1611) * C90 +
                ((C554 * C1011 + C90634 * C1602) * C90567 +
                 (C554 * C832 + C90634 * C1396) * C244) *
                    C89) *
                   C90623 * C2566 +
               (((C554 * C2570 + C90634 * C3105) * C244 +
                 (C554 * C2745 + C90634 * C3295) * C90567) *
                    C89 +
                (C3300 + C3308) * C90 + (C3303 + C3309) * C91) *
                   C90623 * C2567) *
                  C90744 +
              (((C1611 + C1619) * C89 + (C1608 + C1618) * C90 +
                (C1612 + C1620) * C91) *
                   C90623 * C2566 -
               (C747 * C91 + (C743 + C729) * C90 + (C742 + C726) * C89) *
                   C90623 * C2565 -
               (((C554 * C2748 + C90634 * C3298) * C90567 +
                 (C554 * C2573 + C90634 * C3108) * C244) *
                    C91 +
                (C3309 + C3303) * C90 + (C3308 + C3300) * C89) *
                   C90623 * C2567) *
                  C90503)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C4828 +
            (C554 * C245 + C90634 * C719) * C4653 -
            (C554 * C1700 + C90634 * C2264) * C4829 -
            (C554 * C1879 + C90634 * C2460) * C4654 +
            (C554 * C4656 + C90634 * C5191) * C4830 +
            (C554 * C4831 + C90634 * C5373) * C4655) *
               C89 +
           (C5378 + C5379 - C5380 - C5381 + C5382 + C5394) * C90 +
           (C5385 + C5386 - C5387 - C5388 + C5389 + C5395) * C91) *
              C90623 * C90541 * C90744 +
          ((C5380 - (C5379 + C5378) + C5381 - C5382 - C5394) * C89 +
           (C5387 - (C5386 + C5385) + C5388 - C5389 - C5395) * C90 +
           (C2290 * C4829 - (C740 * C4653 + C588 * C4828) + C2484 * C4654 -
            (C554 * C4659 + C90634 * C5194) * C4830 -
            (C554 * C4834 + C90634 * C5376) * C4655) *
               C91) *
              C90623 * C90541 * C90503)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C244 +
            (C554 * C245 + C90634 * C719) * C90567) *
               C90485 * C13576 +
           ((C554 * C832 + C90634 * C1396) * C244 +
            (C554 * C1011 + C90634 * C1602) * C90567) *
               C90485 * C13577 +
           ((C554 * C2570 + C90634 * C3105) * C244 +
            (C554 * C2745 + C90634 * C3295) * C90567) *
               C90485 * C13578) *
              C90541 * C92 -
          ((C3308 + C3300) * C90485 * C13578 +
           (C1619 + C1611) * C90485 * C13577 +
           (C742 + C726) * C90485 * C13576) *
              C90541 * C93 +
          (C746 * C90485 * C13576 + (C1608 + C1618) * C90485 * C13577 +
           (C3303 + C3309) * C90485 * C13578) *
              C90541 * C94 -
          (((C554 * C2748 + C90634 * C3298) * C90567 +
            (C554 * C2573 + C90634 * C3108) * C244) *
               C90485 * C13578 +
           (C1620 + C1612) * C90485 * C13577 + C747 * C90485 * C13576) *
              C90541 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C244 +
             (C554 * C245 + C90634 * C719) * C90567) *
                C90485 * C13576 +
            (C14776 + C14784) * C90485 * C13577 + C16237 * C13578) *
               C2565 -
           ((C16241 + C16232) * C90485 * C13578 +
            (C14785 + C14779) * C90485 * C13577 +
            (C14784 + C14776) * C90485 * C13576) *
               C2566 +
           (C16237 * C13576 + (C16232 + C16241) * C90485 * C13577 +
            ((C554 * C15525 + C90634 * C16038) * C244 +
             (C554 * C15718 + C90634 * C16226) * C90567) *
                C90485 * C13578) *
               C2567) *
              C90744 +
          (((C1611 + C1619) * C90485 * C13576 +
            (C3300 + C3308) * C90485 * C13577 +
            (C16233 + C16242) * C90485 * C13578) *
               C2566 -
           (C16240 * C13578 + (C1619 + C1611) * C90485 * C13577 +
            (C742 + C726) * C90485 * C13576) *
               C2565 -
           (((C554 * C15719 + C90634 * C16227) * C90567 +
             (C554 * C15526 + C90634 * C16039) * C244) *
                C90485 * C13578 +
            (C16242 + C16233) * C90485 * C13577 + C16240 * C13576) *
               C2567) *
              C90503)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C4828 +
            (C554 * C245 + C90634 * C719) * C4653 -
            (C554 * C1700 + C90634 * C2264) * C4829 -
            (C554 * C1879 + C90634 * C2460) * C4654 +
            (C554 * C4656 + C90634 * C5191) * C4830 +
            (C554 * C4831 + C90634 * C5373) * C4655) *
               C90485 * C13576 +
           (C14614 * C4828 + C14782 * C4653 - C17381 * C4829 - C17568 * C4654 +
            (C554 * C5471 + C90634 * C5951) * C4830 +
            (C554 * C5637 + C90634 * C6106) * C4655) *
               C90485 * C13577 +
           (C14616 * C4828 + C14783 * C4653 - C17379 * C4829 - C17570 * C4654 +
            (C554 * C17651 + C90634 * C18119) * C4830 +
            (C554 * C17811 + C90634 * C18273) * C4655) *
               C90485 * C13578) *
              C90541 * C90744 +
          ((C5380 - (C5379 + C5378) + C5381 - C5382 - C5394) * C90485 * C13576 +
           (C8771 * C4829 - (C1616 * C4653 + C1418 * C4828) + C8997 * C4654 -
            (C554 * C5470 + C90634 * C5950) * C4830 -
            (C554 * C5636 + C90634 * C6107) * C4655) *
               C90485 * C13577 +
           ((C554 * C3895 + C90634 * C4411) * C4829 -
            (C3306 * C4653 + C3122 * C4828) +
            (C554 * C4079 + C90634 * C4577) * C4654 -
            (C554 * C17652 + C90634 * C18120) * C4830 -
            (C554 * C17812 + C90634 * C18274) * C4655) *
               C90485 * C13578) *
              C90541 * C90503)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C26732 * C107 + C26429 * C555 + C26733 * C1700 + C26430 * C2264 +
            C26734 * C4656 + C26431 * C5191) *
               C244 +
           (C26732 * C245 + C26429 * C719 + C26733 * C1879 + C26430 * C2460 +
            C26734 * C4831 + C26431 * C5373) *
               C90567) *
              C90485 * C90623 * C90541 * C92 -
          ((C26734 * C4832 + C26431 * C5374 + C26733 * C1878 + C26430 * C2461 +
            C26732 * C246 + C26429 * C720) *
               C90567 +
           (C26734 * C4657 + C26431 * C5192 + C26733 * C1697 + C26430 * C2263 +
            C26732 * C108 + C26429 * C556) *
               C244) *
              C90485 * C90623 * C90541 * C93 +
          ((C26732 * C109 + C26429 * C557 + C26733 * C1698 + C26430 * C2265 +
            C26734 * C4658 + C26431 * C5193) *
               C244 +
           (C26732 * C247 + C26429 * C721 + C26733 * C1877 + C26430 * C2462 +
            C26734 * C4833 + C26431 * C5375) *
               C90567) *
              C90485 * C90623 * C90541 * C94 -
          ((C26734 * C4834 + C26431 * C5376 + C26733 * C1880 + C26430 * C2463 +
            C26732 * C248 + C26429 * C722) *
               C90567 +
           (C26734 * C4659 + C26431 * C5194 + C26733 * C1699 + C26430 * C2266 +
            C26732 * C110 + C26429 * C558) *
               C244) *
              C90485 * C90623 * C90541 * C95)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C26732 * C107 + C26429 * C555 + C26733 * C1700 + C26430 * C2264 +
             C26734 * C4656 + C26431 * C5191) *
                C244 +
            (C26732 * C245 + C26429 * C719 + C26733 * C1879 + C26430 * C2460 +
             C26734 * C4831 + C26431 * C5373) *
                C90567) *
               C90485 * C90623 * C2565 -
           ((C26734 * C5637 + C26431 * C6106 + C26733 * C4075 + C26430 * C4573 +
             C26732 * C1011 + C26429 * C1602) *
                C90567 +
            (C26734 * C5471 + C26431 * C5951 + C26733 * C3891 + C26430 * C4407 +
             C26732 * C832 + C26429 * C1396) *
                C244) *
               C90485 * C90623 * C2566 +
           ((C26732 * C2570 + C26429 * C3105 + C26733 * C3896 + C26430 * C4412 +
             C26734 * C17651 + C26431 * C18119) *
                C244 +
            (C26732 * C2745 + C26429 * C3295 + C26733 * C4080 + C26430 * C4576 +
             C26734 * C17811 + C26431 * C18273) *
                C90567) *
               C90485 * C90623 * C2567) *
              C90744 +
          (((C26732 * C829 + C26429 * C1395 + C26733 * C3892 + C26430 * C4408 +
             C26734 * C5470 + C26431 * C5950) *
                C244 +
            (C26732 * C1010 + C26429 * C1601 + C26733 * C4076 + C26430 * C4574 +
             C26734 * C5636 + C26431 * C6107) *
                C90567) *
               C90485 * C90623 * C2566 -
           ((C26734 * C4832 + C26431 * C5374 + C26733 * C1878 + C26430 * C2461 +
             C26732 * C246 + C26429 * C720) *
                C90567 +
            (C26734 * C4657 + C26431 * C5192 + C26733 * C1697 + C26430 * C2263 +
             C26732 * C108 + C26429 * C556) *
                C244) *
               C90485 * C90623 * C2565 -
           ((C26734 * C17812 + C26431 * C18274 + C26733 * C4079 +
             C26430 * C4577 + C26732 * C2746 + C26429 * C3296) *
                C90567 +
            (C26734 * C17652 + C26431 * C18120 + C26733 * C3895 +
             C26430 * C4411 + C26732 * C2571 + C26429 * C3106) *
                C244) *
               C90485 * C90623 * C2567) *
              C90503)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C26732 * C107 + C26429 * C555 + C26733 * C1700 + C26430 * C2264 +
            C26734 * C4656 + C26431 * C5191) *
               C4828 +
           (C26732 * C245 + C26429 * C719 + C26733 * C1879 + C26430 * C2460 +
            C26734 * C4831 + C26431 * C5373) *
               C4653 -
           (C26734 * C6165 + C26431 * C6505 + C26733 * C4656 + C26430 * C5191 +
            C26732 * C1700 + C26429 * C2264) *
               C4829 -
           (C26734 * C6287 + C26431 * C6612 + C26733 * C4831 + C26430 * C5373 +
            C26732 * C1879 + C26429 * C2460) *
               C4654 +
           (C26732 * C4656 + C26429 * C5191 + C26733 * C6165 + C26430 * C6505 +
            C26734 * C30247 + C26431 * C30808) *
               C4830 +
           (C26732 * C4831 + C26429 * C5373 + C26733 * C6287 + C26430 * C6612 +
            C26734 * C30449 + C26431 * C30962) *
               C4655) *
              C90485 * C90623 * C90541 * C90744 +
          ((C26732 * C1697 + C26429 * C2263 + C26733 * C4657 + C26430 * C5192 +
            C26734 * C6164 + C26431 * C6504) *
               C4829 -
           ((C26734 * C4832 + C26431 * C5374 + C26733 * C1878 + C26430 * C2461 +
             C26732 * C246 + C26429 * C720) *
                C4653 +
            (C26734 * C4657 + C26431 * C5192 + C26733 * C1697 + C26430 * C2263 +
             C26732 * C108 + C26429 * C556) *
                C4828) +
           (C26732 * C1878 + C26429 * C2461 + C26733 * C4832 + C26430 * C5374 +
            C26734 * C6286 + C26431 * C6613) *
               C4654 -
           (C26734 * C30248 + C26431 * C30809 + C26733 * C6164 +
            C26430 * C6504 + C26732 * C4657 + C26429 * C5192) *
               C4830 -
           (C26734 * C30450 + C26431 * C30963 + C26733 * C6286 +
            C26430 * C6613 + C26732 * C4832 + C26429 * C5374) *
               C4655) *
              C90485 * C90623 * C90541 * C90503)) /
            (p * q * std::sqrt(p + q));
    d2eexx[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                C102 * C109 + C91 * C115) *
                   C826 +
               (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 +
                C102 * C118 + C91 * C127) *
                   C821 -
               (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                C100 * C108 + C89 * C114) *
                   C827 -
               (C102 * C120 + C91 * C128 + C101 * C118 + C90 * C127 +
                C100 * C117 + C89 * C126) *
                   C822 +
               (C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 +
                C102 * C111 + C91 * C121) *
                   C828 +
               (C100 * C118 + C89 * C127 + C101 * C120 + C90 * C128 +
                C102 * C122 + C91 * C129) *
                   C823) *
                  C90623 * C90634 * C90567 * C90752 +
              ((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 +
                C102 * C831 + C91 * C836) *
                   C827 -
               ((C102 * C837 + C91 * C844 + C101 * C838 + C90 * C845 +
                 C100 * C839 + C89 * C846) *
                    C821 +
                (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                 C100 * C832 + C89 * C840) *
                    C826) +
               (C100 * C838 + C89 * C845 + C101 * C837 + C90 * C844 +
                C102 * C841 + C91 * C847) *
                   C822 -
               (C102 * C833 + C91 * C842 + C101 * C831 + C90 * C836 +
                C100 * C830 + C89 * C835) *
                   C828 -
               (C102 * C843 + C91 * C848 + C101 * C841 + C90 * C847 +
                C100 * C837 + C89 * C844) *
                   C823) *
                  C90623 * C90634 * C90567 * C90555) +
         0.5 * std::pow(Pi, 2.5) *
             (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                C102 * C109 + C91 * C115) *
                   C3364 +
               (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 +
                C102 * C118 + C91 * C127) *
                   C90498) *
                  C90623 * C90634 * C90567 * C3360 -
              ((C102 * C837 + C91 * C844 + C101 * C838 + C90 * C845 +
                C100 * C839 + C89 * C846) *
                   C90498 +
               (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                C100 * C832 + C89 * C840) *
                   C3364) *
                  C90623 * C90634 * C90567 * C3361 +
              ((C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
                C102 * C2572 + C91 * C2576) *
                   C3364 +
               (C100 * C2577 + C89 * C2582 + C101 * C2578 + C90 * C2583 +
                C102 * C2579 + C91 * C2584) *
                   C90498) *
                  C90623 * C90634 * C90567 * C3362 -
              ((C102 * C3368 + C91 * C3374 + C101 * C3369 + C90 * C3375 +
                C100 * C3370 + C89 * C3376) *
                   C90498 +
               (C102 * C3365 + C91 * C3371 + C101 * C3366 + C90 * C3372 +
                C100 * C3367 + C89 * C3373) *
                   C3364) *
                  C90623 * C90634 * C90567 * C3363)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C100 * C107 + C89 * C113 + C101 * C108 +
                                 C90 * C114 + C102 * C109 + C91 * C115) *
                                    C3364 +
                                (C100 * C116 + C89 * C125 + C101 * C117 +
                                 C90 * C126 + C102 * C118 + C91 * C127) *
                                    C90498) *
                                   C90623 * C90634 * C4653 -
                               ((C102 * C1705 + C91 * C1712 + C101 * C1706 +
                                 C90 * C1713 + C100 * C1707 + C89 * C1714) *
                                    C90498 +
                                (C102 * C1698 + C91 * C1703 + C101 * C1697 +
                                 C90 * C1702 + C100 * C1700 + C89 * C1708) *
                                    C3364) *
                                   C90623 * C90634 * C4654 +
                               ((C100 * C4656 + C89 * C4660 + C101 * C4657 +
                                 C90 * C4661 + C102 * C4658 + C91 * C4662) *
                                    C3364 +
                                (C100 * C4663 + C89 * C4668 + C101 * C4664 +
                                 C90 * C4669 + C102 * C4665 + C91 * C4670) *
                                    C90498) *
                                   C90623 * C90634 * C4655) *
                                  C90752 +
                              (((C100 * C3891 + C89 * C3897 + C101 * C3892 +
                                 C90 * C3898 + C102 * C3893 + C91 * C3899) *
                                    C3364 +
                                (C100 * C3900 + C89 * C3909 + C101 * C3901 +
                                 C90 * C3910 + C102 * C3902 + C91 * C3911) *
                                    C90498) *
                                   C90623 * C90634 * C4654 -
                               ((C102 * C837 + C91 * C844 + C101 * C838 +
                                 C90 * C845 + C100 * C839 + C89 * C846) *
                                    C90498 +
                                (C102 * C830 + C91 * C835 + C101 * C829 +
                                 C90 * C834 + C100 * C832 + C89 * C840) *
                                    C3364) *
                                   C90623 * C90634 * C4653 -
                               ((C102 * C5472 + C91 * C5478 + C101 * C5473 +
                                 C90 * C5479 + C100 * C5474 + C89 * C5480) *
                                    C90498 +
                                (C102 * C5469 + C91 * C5475 + C101 * C5470 +
                                 C90 * C5476 + C100 * C5471 + C89 * C5477) *
                                    C3364) *
                                   C90623 * C90634 * C4655) *
                                  C90555)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C826 +
            (C13579 * C116 + C90485 * C125) * C821 -
            (C13579 * C108 + C90485 * C114) * C827 -
            (C13579 * C117 + C90485 * C126) * C822 +
            (C13579 * C109 + C90485 * C115) * C828 +
            (C13579 * C118 + C90485 * C127) * C823) *
               C13576 +
           (C14094 + C14095 - C14096 - C14097 + C14098 + C14099) * C13577 +
           (C14100 + C14101 - C14102 - C14103 + C14104 + C14105) * C13578) *
              C90634 * C90567 * C90752 +
          ((C14096 - (C14095 + C14094) + C14097 - C14098 - C14099) * C13576 +
           (C14102 - (C14101 + C14100) + C14103 - C14104 - C14105) * C13577 +
           ((C13579 * C3366 + C90485 * C3372) * C827 -
            ((C13579 * C3370 + C90485 * C3376) * C821 +
             (C13579 * C3367 + C90485 * C3373) * C826) +
            (C13579 * C3369 + C90485 * C3375) * C822 -
            (C13579 * C3365 + C90485 * C3371) * C828 -
            (C13579 * C3368 + C90485 * C3374) * C823) *
               C13578) *
              C90634 * C90567 * C90555)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C3364 +
            (C13579 * C116 + C90485 * C125) * C90498) *
               C13576 +
           (C16297 + C16298) * C13577 + C16307 * C13578) *
              C90634 * C90567 * C3360 -
          (C16308 * C13578 + (C16300 + C16299) * C13577 +
           (C16298 + C16297) * C13576) *
              C90634 * C90567 * C3361 +
          (C16307 * C13576 + (C16302 + C16301) * C13577 +
           (C16311 + C16312) * C13578) *
              C90634 * C90567 * C3362 -
          (((C13579 * C16293 + C90485 * C16295) * C90498 +
            (C13579 * C16292 + C90485 * C16294) * C3364) *
               C13578 +
           (C16312 + C16311) * C13577 + C16308 * C13576) *
              C90634 * C90567 * C3363)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C3364 +
             (C13579 * C116 + C90485 * C125) * C90498) *
                C13576 +
            (C16297 + C16298) * C13577 + C16307 * C13578) *
               C90634 * C4653 -
           (C16868 * C13578 + (C16864 + C16865) * C13577 +
            ((C13579 * C1707 + C90485 * C1714) * C90498 +
             (C13579 * C1700 + C90485 * C1708) * C3364) *
                C13576) *
               C90634 * C4654 +
           (((C13579 * C4656 + C90485 * C4660) * C3364 +
             (C13579 * C4663 + C90485 * C4668) * C90498) *
                C13576 +
            (C18366 + C18367) * C13577 + (C18368 + C18369) * C13578) *
               C90634 * C4655) *
              C90752 +
          (((C16865 + C16864) * C13576 + (C16863 + C16862) * C13577 +
            (C16866 + C16867) * C13578) *
               C90634 * C4654 -
           (C16308 * C13578 + (C16300 + C16299) * C13577 +
            (C16298 + C16297) * C13576) *
               C90634 * C4653 -
           (((C13579 * C18350 + C90485 * C18352) * C90498 +
             (C13579 * C18349 + C90485 * C18351) * C3364) *
                C13578 +
            (C18369 + C18368) * C13577 + (C18367 + C18366) * C13576) *
               C90634 * C4655) *
              C90555)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C826 +
            (C13579 * C116 + C90485 * C125) * C821 -
            (C13579 * C108 + C90485 * C114) * C827 -
            (C13579 * C117 + C90485 * C126) * C822 +
            (C13579 * C109 + C90485 * C115) * C828 +
            (C13579 * C118 + C90485 * C127) * C823) *
               C90623 * C26429 +
           ((C13579 * C1700 + C90485 * C1708) * C826 +
            (C13579 * C1707 + C90485 * C1714) * C821 -
            (C13579 * C1697 + C90485 * C1702) * C827 -
            (C13579 * C1706 + C90485 * C1713) * C822 +
            (C13579 * C1698 + C90485 * C1703) * C828 +
            (C13579 * C1705 + C90485 * C1712) * C823) *
               C90623 * C26430 +
           ((C13579 * C4656 + C90485 * C4660) * C826 +
            (C13579 * C4663 + C90485 * C4668) * C821 -
            (C13579 * C4657 + C90485 * C4661) * C827 -
            (C13579 * C4664 + C90485 * C4669) * C822 +
            (C13579 * C4658 + C90485 * C4662) * C828 +
            (C13579 * C4665 + C90485 * C4670) * C823) *
               C90623 * C26431) *
              C90567 * C90752 +
          ((C14096 - (C14095 + C14094) + C14097 - C14098 - C14099) * C90623 *
               C26429 +
           (C21021 * C827 - (C16858 * C821 + C16859 * C826) + C21022 * C822 -
            (C13579 * C3893 + C90485 * C3899) * C828 -
            (C13579 * C3902 + C90485 * C3911) * C823) *
               C90623 * C26430 +
           ((C13579 * C5470 + C90485 * C5476) * C827 -
            (C18363 * C821 + C18362 * C826) +
            (C13579 * C5473 + C90485 * C5479) * C822 -
            (C13579 * C5469 + C90485 * C5475) * C828 -
            (C13579 * C5472 + C90485 * C5478) * C823) *
               C90623 * C26431) *
              C90567 * C90555)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C3364 +
            (C13579 * C116 + C90485 * C125) * C90498) *
               C90623 * C26429 +
           (C27600 * C3364 + C27601 * C90498) * C90623 * C26430 +
           (C27606 * C3364 + C27607 * C90498) * C90623 * C26431) *
              C90567 * C3360 -
          ((C18367 + C18366) * C90623 * C26431 +
           (C16864 + C16865) * C90623 * C26430 +
           (C16298 + C16297) * C90623 * C26429) *
              C90567 * C3361 +
          (C16307 * C90623 * C26429 + (C16863 + C16862) * C90623 * C26430 +
           (C18368 + C18369) * C90623 * C26431) *
              C90567 * C3362 -
          (((C13579 * C18350 + C90485 * C18352) * C90498 +
            (C13579 * C18349 + C90485 * C18351) * C3364) *
               C90623 * C26431 +
           (C16867 + C16866) * C90623 * C26430 + C16308 * C90623 * C26429) *
              C90567 * C3363)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C3364 +
             (C13579 * C116 + C90485 * C125) * C90498) *
                C90623 * C26429 +
            (C29494 + C29495) * C90623 * C26430 + C31051 * C26431) *
               C4653 -
           ((C31044 + C31045) * C90623 * C26431 +
            (C29497 + C29496) * C90623 * C26430 +
            (C29495 + C29494) * C90623 * C26429) *
               C4654 +
           (C31051 * C26429 + (C31045 + C31044) * C90623 * C26430 +
            ((C13579 * C30247 + C90485 * C30249) * C3364 +
             (C13579 * C30250 + C90485 * C30253) * C90498) *
                C90623 * C26431) *
               C4655) *
              C90752 +
          (((C16865 + C16864) * C90623 * C26429 +
            (C18366 + C18367) * C90623 * C26430 +
            (C31055 + C31056) * C90623 * C26431) *
               C4654 -
           (C31054 * C26431 + (C16864 + C16865) * C90623 * C26430 +
            (C16298 + C16297) * C90623 * C26429) *
               C4653 -
           (((C13579 * C31039 + C90485 * C31041) * C90498 +
             (C13579 * C31038 + C90485 * C31040) * C3364) *
                C90623 * C26431 +
            (C31056 + C31055) * C90623 * C26430 + C31054 * C26429) *
               C4655) *
              C90555)) /
            (p * q * std::sqrt(p + q));
    d2eexy[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                C102 * C109 + C91 * C115) *
                   C923 +
               (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 +
                C102 * C184 + C91 * C190) *
                   C90752 -
               (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                C100 * C832 + C89 * C840) *
                   C924 -
               (C102 * C925 + C91 * C930 + C101 * C926 + C90 * C931 +
                C100 * C927 + C89 * C932) *
                   C90555) *
                  C90623 * C90634 * C821 +
              ((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 +
                C102 * C831 + C91 * C836) *
                   C924 -
               ((C102 * C185 + C91 * C191 + C101 * C184 + C90 * C190 +
                 C100 * C183 + C89 * C189) *
                    C90752 +
                (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                 C100 * C108 + C89 * C114) *
                    C923) +
               (C100 * C926 + C89 * C931 + C101 * C925 + C90 * C930 +
                C102 * C928 + C91 * C933) *
                   C90555) *
                  C90623 * C90634 * C822 +
              ((C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 +
                C102 * C111 + C91 * C121) *
                   C923 +
               (C100 * C184 + C89 * C190 + C101 * C185 + C90 * C191 +
                C102 * C186 + C91 * C192) *
                   C90752 -
               (C102 * C833 + C91 * C842 + C101 * C831 + C90 * C836 +
                C100 * C830 + C89 * C835) *
                   C924 -
               (C102 * C929 + C91 * C934 + C101 * C928 + C90 * C933 +
                C100 * C925 + C89 * C930) *
                   C90555) *
                  C90623 * C90634 * C823) *
             C90567 +
         0.5 * std::pow(Pi, 2.5) *
             ((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
               C102 * C109 + C91 * C115) *
                  C3427 +
              (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 +
               C102 * C184 + C91 * C190) *
                  C3360 -
              (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
               C100 * C832 + C89 * C840) *
                  C3428 -
              (C102 * C925 + C91 * C930 + C101 * C926 + C90 * C931 +
               C100 * C927 + C89 * C932) *
                  C3361 +
              (C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
               C102 * C2572 + C91 * C2576) *
                  C3429 +
              (C100 * C2663 + C89 * C2667 + C101 * C2664 + C90 * C2668 +
               C102 * C2665 + C91 * C2669) *
                  C3362 -
              (C102 * C3365 + C91 * C3371 + C101 * C3366 + C90 * C3372 +
               C100 * C3367 + C89 * C3373) *
                  C3430 -
              (C102 * C3431 + C91 * C3434 + C101 * C3432 + C90 * C3435 +
               C100 * C3433 + C89 * C3436) *
                  C3363) *
             C90623 * C90634 * C90498 * C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((C100 * C107 + C89 * C113 + C101 * C108 +
                                C90 * C114 + C102 * C109 + C91 * C115) *
                                   C923 +
                               (C100 * C182 + C89 * C188 + C101 * C183 +
                                C90 * C189 + C102 * C184 + C91 * C190) *
                                   C90752 -
                               (C102 * C830 + C91 * C835 + C101 * C829 +
                                C90 * C834 + C100 * C832 + C89 * C840) *
                                   C924 -
                               (C102 * C925 + C91 * C930 + C101 * C926 +
                                C90 * C931 + C100 * C927 + C89 * C932) *
                                   C90555) *
                                  C90623 * C90634 * C90498 * C4653 +
                              ((C100 * C3891 + C89 * C3897 + C101 * C3892 +
                                C90 * C3898 + C102 * C3893 + C91 * C3899) *
                                   C924 -
                               ((C102 * C1792 + C91 * C1797 + C101 * C1791 +
                                 C90 * C1796 + C100 * C1794 + C89 * C1799) *
                                    C90752 +
                                (C102 * C1698 + C91 * C1703 + C101 * C1697 +
                                 C90 * C1702 + C100 * C1700 + C89 * C1708) *
                                    C923) +
                               (C100 * C3989 + C89 * C3995 + C101 * C3990 +
                                C90 * C3996 + C102 * C3991 + C91 * C3997) *
                                   C90555) *
                                  C90623 * C90634 * C90498 * C4654 +
                              ((C100 * C4656 + C89 * C4660 + C101 * C4657 +
                                C90 * C4661 + C102 * C4658 + C91 * C4662) *
                                   C923 +
                               (C100 * C4746 + C89 * C4750 + C101 * C4747 +
                                C90 * C4751 + C102 * C4748 + C91 * C4752) *
                                   C90752 -
                               (C102 * C5469 + C91 * C5475 + C101 * C5470 +
                                C90 * C5476 + C100 * C5471 + C89 * C5477) *
                                   C924 -
                               (C102 * C5555 + C91 * C5558 + C101 * C5556 +
                                C90 * C5559 + C100 * C5557 + C89 * C5560) *
                                   C90555) *
                                  C90623 * C90634 * C90498 * C4655)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C923 +
            (C13579 * C182 + C90485 * C188) * C90752 - C14082 * C924 -
            C14192 * C90555) *
               C13576 +
           (C14082 * C923 + C14192 * C90752 - C14088 * C924 - C14193 * C90555) *
               C13577 +
           (C14088 * C923 + C14193 * C90752 -
            (C13579 * C3367 + C90485 * C3373) * C924 -
            (C13579 * C3433 + C90485 * C3436) * C90555) *
               C13578) *
              C90634 * C821 +
          ((C14084 * C924 -
            ((C13579 * C183 + C90485 * C189) * C90752 +
             (C13579 * C108 + C90485 * C114) * C923) +
            C14194 * C90555) *
               C13576 +
           (C14090 * C924 - (C14194 * C90752 + C14084 * C923) +
            C14195 * C90555) *
               C13577 +
           ((C13579 * C3366 + C90485 * C3372) * C924 -
            (C14195 * C90752 + C14090 * C923) +
            (C13579 * C3432 + C90485 * C3435) * C90555) *
               C13578) *
              C90634 * C822 +
          (((C13579 * C109 + C90485 * C115) * C923 +
            (C13579 * C184 + C90485 * C190) * C90752 - C14086 * C924 -
            C14196 * C90555) *
               C13576 +
           (C14086 * C923 + C14196 * C90752 - C14092 * C924 - C14197 * C90555) *
               C13577 +
           (C14092 * C923 + C14197 * C90752 -
            (C13579 * C3365 + C90485 * C3371) * C924 -
            (C13579 * C3431 + C90485 * C3434) * C90555) *
               C13578) *
              C90634 * C823) *
         C90567) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C13579 * C107 + C90485 * C113) * C3427 +
           (C13579 * C182 + C90485 * C188) * C3360 - C14082 * C3428 -
           C14192 * C3361 + C14088 * C3429 + C14193 * C3362 - C15553 * C3430 -
           C15643 * C3363) *
              C13576 +
          (C14082 * C3427 + C14192 * C3360 - C14088 * C3428 - C14193 * C3361 +
           C15553 * C3429 + C15643 * C3362 - C16309 * C3430 - C16367 * C3363) *
              C13577 +
          (C14088 * C3427 + C14193 * C3360 - C15553 * C3428 - C15643 * C3361 +
           C16309 * C3429 + C16367 * C3362 -
           (C13579 * C16292 + C90485 * C16294) * C3430 -
           (C13579 * C16362 + C90485 * C16363) * C3363) *
              C13578) *
         C90634 * C90498 * C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C923 +
            (C13579 * C182 + C90485 * C188) * C90752 - C14082 * C924 -
            C14192 * C90555) *
               C13576 +
           (C14082 * C923 + C14192 * C90752 - C14088 * C924 - C14193 * C90555) *
               C13577 +
           (C14088 * C923 + C14193 * C90752 - C15553 * C924 - C15643 * C90555) *
               C13578) *
              C90634 * C90498 * C4653 +
          ((C16859 * C924 -
            ((C13579 * C1794 + C90485 * C1799) * C90752 +
             (C13579 * C1700 + C90485 * C1708) * C923) +
            C16953 * C90555) *
               C13576 +
           (C16857 * C924 - (C16953 * C90752 + C16859 * C923) +
            C16954 * C90555) *
               C13577 +
           (C16860 * C924 - (C16954 * C90752 + C16857 * C923) +
            C16955 * C90555) *
               C13578) *
              C90634 * C90498 * C4654 +
          (((C13579 * C4656 + C90485 * C4660) * C923 +
            (C13579 * C4746 + C90485 * C4750) * C90752 - C18362 * C924 -
            C18450 * C90555) *
               C13576 +
           (C18362 * C923 + C18450 * C90752 - C18364 * C924 - C18451 * C90555) *
               C13577 +
           (C18364 * C923 + C18451 * C90752 -
            (C13579 * C18349 + C90485 * C18351) * C924 -
            (C13579 * C18443 + C90485 * C18444) * C90555) *
               C13578) *
              C90634 * C90498 * C4655)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C923 +
            (C13579 * C182 + C90485 * C188) * C90752 - C14082 * C924 -
            C14192 * C90555) *
               C90623 * C26429 +
           ((C13579 * C1700 + C90485 * C1708) * C923 +
            (C13579 * C1794 + C90485 * C1799) * C90752 - C16859 * C924 -
            C16953 * C90555) *
               C90623 * C26430 +
           ((C13579 * C4656 + C90485 * C4660) * C923 +
            (C13579 * C4746 + C90485 * C4750) * C90752 - C18362 * C924 -
            C18450 * C90555) *
               C90623 * C26431) *
              C821 +
          ((C14084 * C924 -
            ((C13579 * C183 + C90485 * C189) * C90752 +
             (C13579 * C108 + C90485 * C114) * C923) +
            C14194 * C90555) *
               C90623 * C26429 +
           (C21021 * C924 -
            ((C13579 * C1791 + C90485 * C1796) * C90752 +
             (C13579 * C1697 + C90485 * C1702) * C923) +
            C21133 * C90555) *
               C90623 * C26430 +
           ((C13579 * C5470 + C90485 * C5476) * C924 -
            ((C13579 * C4747 + C90485 * C4751) * C90752 +
             (C13579 * C4657 + C90485 * C4661) * C923) +
            (C13579 * C5556 + C90485 * C5559) * C90555) *
               C90623 * C26431) *
              C822 +
          (((C13579 * C109 + C90485 * C115) * C923 +
            (C13579 * C184 + C90485 * C190) * C90752 - C14086 * C924 -
            C14196 * C90555) *
               C90623 * C26429 +
           ((C13579 * C1698 + C90485 * C1703) * C923 +
            (C13579 * C1792 + C90485 * C1797) * C90752 -
            (C13579 * C3893 + C90485 * C3899) * C924 -
            (C13579 * C3991 + C90485 * C3997) * C90555) *
               C90623 * C26430 +
           ((C13579 * C4658 + C90485 * C4662) * C923 +
            (C13579 * C4748 + C90485 * C4752) * C90752 -
            (C13579 * C5469 + C90485 * C5475) * C924 -
            (C13579 * C5555 + C90485 * C5558) * C90555) *
               C90623 * C26431) *
              C823) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C13579 * C107 + C90485 * C113) * C3427 +
           (C13579 * C182 + C90485 * C188) * C3360 - C14082 * C3428 -
           C14192 * C3361 + C14088 * C3429 + C14193 * C3362 - C15553 * C3430 -
           C15643 * C3363) *
              C90623 * C26429 +
          (C27600 * C3427 + C27716 * C3360 - C16859 * C3428 - C16953 * C3361 +
           C16857 * C3429 + C16954 * C3362 - C16860 * C3430 - C16955 * C3363) *
              C90623 * C26430 +
          (C27606 * C3427 + C27717 * C3360 - C18362 * C3428 - C18450 * C3361 +
           C18364 * C3429 + C18451 * C3362 -
           (C13579 * C18349 + C90485 * C18351) * C3430 -
           (C13579 * C18443 + C90485 * C18444) * C3363) *
              C90623 * C26431) *
         C90498 * C90567) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C923 +
            (C13579 * C182 + C90485 * C188) * C90752 - C14082 * C924 -
            C14192 * C90555) *
               C90623 * C26429 +
           (C31133 + C31134 - C31135 - C31136) * C90623 * C26430 +
           C31151 * C26431) *
              C90498 * C4653 +
          ((C31135 - (C31134 + C31133) + C31136) * C90623 * C26429 +
           (C31139 - (C31138 + C31137) + C31140) * C90623 * C26430 +
           (C31141 - (C31142 + C31143) + C31149) * C90623 * C26431) *
              C90498 * C4654 +
          (C31151 * C26429 +
           (C31143 + C31142 - C31141 - C31149) * C90623 * C26430 +
           ((C13579 * C30247 + C90485 * C30249) * C923 +
            (C13579 * C30357 + C90485 * C30359) * C90752 -
            (C13579 * C31038 + C90485 * C31040) * C924 -
            (C13579 * C31130 + C90485 * C31131) * C90555) *
               C90623 * C26431) *
              C90498 * C4655)) /
            (p * q * std::sqrt(p + q));
    d2eexz[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                 C102 * C109 + C91 * C115) *
                    C244 +
                (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 +
                 C102 * C247 + C91 * C253) *
                    C90567) *
                   C90623 * C90634 * C90752 -
               ((C102 * C1009 + C91 * C1014 + C101 * C1010 + C90 * C1015 +
                 C100 * C1011 + C89 * C1016) *
                    C90567 +
                (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                 C100 * C832 + C89 * C840) *
                    C244) *
                   C90623 * C90634 * C90555) *
                  C821 +
              (((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 +
                 C102 * C831 + C91 * C836) *
                    C244 +
                (C100 * C1010 + C89 * C1015 + C101 * C1009 + C90 * C1014 +
                 C102 * C1012 + C91 * C1017) *
                    C90567) *
                   C90623 * C90634 * C90555 -
               ((C102 * C248 + C91 * C254 + C101 * C247 + C90 * C253 +
                 C100 * C246 + C89 * C252) *
                    C90567 +
                (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                 C100 * C108 + C89 * C114) *
                    C244) *
                   C90623 * C90634 * C90752) *
                  C822 +
              (((C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 +
                 C102 * C111 + C91 * C121) *
                    C244 +
                (C100 * C247 + C89 * C253 + C101 * C248 + C90 * C254 +
                 C102 * C249 + C91 * C255) *
                    C90567) *
                   C90623 * C90634 * C90752 -
               ((C102 * C1013 + C91 * C1018 + C101 * C1012 + C90 * C1017 +
                 C100 * C1009 + C89 * C1014) *
                    C90567 +
                (C102 * C833 + C91 * C842 + C101 * C831 + C90 * C836 +
                 C100 * C830 + C89 * C835) *
                    C244) *
                   C90623 * C90634 * C90555) *
                  C823) +
         0.5 * std::pow(Pi, 2.5) *
             (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                C102 * C109 + C91 * C115) *
                   C244 +
               (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 +
                C102 * C247 + C91 * C253) *
                   C90567) *
                  C90623 * C90634 * C3360 -
              ((C102 * C1009 + C91 * C1014 + C101 * C1010 + C90 * C1015 +
                C100 * C1011 + C89 * C1016) *
                   C90567 +
               (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                C100 * C832 + C89 * C840) *
                   C244) *
                  C90623 * C90634 * C3361 +
              ((C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
                C102 * C2572 + C91 * C2576) *
                   C244 +
               (C100 * C2745 + C89 * C2749 + C101 * C2746 + C90 * C2750 +
                C102 * C2747 + C91 * C2751) *
                   C90567) *
                  C90623 * C90634 * C3362 -
              ((C102 * C3487 + C91 * C3490 + C101 * C3488 + C90 * C3491 +
                C100 * C3489 + C89 * C3492) *
                   C90567 +
               (C102 * C3365 + C91 * C3371 + C101 * C3366 + C90 * C3372 +
                C100 * C3367 + C89 * C3373) *
                   C244) *
                  C90623 * C90634 * C3363) *
             C90498) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C4828 +
           (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 + C102 * C247 +
            C91 * C253) *
               C4653 -
           (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
            C100 * C1700 + C89 * C1708) *
               C4829 -
           (C102 * C1877 + C91 * C1882 + C101 * C1878 + C90 * C1883 +
            C100 * C1879 + C89 * C1884) *
               C4654 +
           (C100 * C4656 + C89 * C4660 + C101 * C4657 + C90 * C4661 +
            C102 * C4658 + C91 * C4662) *
               C4830 +
           (C100 * C4831 + C89 * C4835 + C101 * C4832 + C90 * C4836 +
            C102 * C4833 + C91 * C4837) *
               C4655) *
              C90623 * C90634 * C90752 +
          ((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
            C102 * C3893 + C91 * C3899) *
               C4829 -
           ((C102 * C1009 + C91 * C1014 + C101 * C1010 + C90 * C1015 +
             C100 * C1011 + C89 * C1016) *
                C4653 +
            (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 + C100 * C832 +
             C89 * C840) *
                C4828) +
           (C100 * C4075 + C89 * C4081 + C101 * C4076 + C90 * C4082 +
            C102 * C4077 + C91 * C4083) *
               C4654 -
           (C102 * C5469 + C91 * C5475 + C101 * C5470 + C90 * C5476 +
            C100 * C5471 + C89 * C5477) *
               C4830 -
           (C102 * C5635 + C91 * C5638 + C101 * C5636 + C90 * C5639 +
            C100 * C5637 + C89 * C5640) *
               C4655) *
              C90623 * C90634 * C90555) *
         C90498) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C244 +
             (C13579 * C245 + C90485 * C251) * C90567) *
                C13576 +
            (C14272 + C14296) * C13577 + (C14275 + C14297) * C13578) *
               C90634 * C90752 -
           (((C13579 * C3489 + C90485 * C3492) * C90567 +
             (C13579 * C3367 + C90485 * C3373) * C244) *
                C13578 +
            (C14297 + C14275) * C13577 + (C14296 + C14272) * C13576) *
               C90634 * C90555) *
              C821 +
          (((C14278 + C14298) * C13576 + (C14281 + C14299) * C13577 +
            ((C13579 * C3366 + C90485 * C3372) * C244 +
             (C13579 * C3488 + C90485 * C3491) * C90567) *
                C13578) *
               C90634 * C90555 -
           ((C14299 + C14281) * C13578 + (C14298 + C14278) * C13577 +
            ((C13579 * C246 + C90485 * C252) * C90567 +
             (C13579 * C108 + C90485 * C114) * C244) *
                C13576) *
               C90634 * C90752) *
              C822 +
          ((((C13579 * C109 + C90485 * C115) * C244 +
             (C13579 * C247 + C90485 * C253) * C90567) *
                C13576 +
            (C14284 + C14300) * C13577 + (C14287 + C14301) * C13578) *
               C90634 * C90752 -
           (((C13579 * C3487 + C90485 * C3490) * C90567 +
             (C13579 * C3365 + C90485 * C3371) * C244) *
                C13578 +
            (C14301 + C14287) * C13577 + (C14300 + C14284) * C13576) *
               C90634 * C90555) *
              C823)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C244 +
            (C13579 * C245 + C90485 * C251) * C90567) *
               C13576 +
           (C14272 + C14296) * C13577 + C15723 * C13578) *
              C90634 * C3360 -
          (C16420 * C13578 + (C14297 + C14275) * C13577 +
           (C14296 + C14272) * C13576) *
              C90634 * C3361 +
          (C15723 * C13576 + (C15726 + C15733) * C13577 +
           (C16421 + C16425) * C13578) *
              C90634 * C3362 -
          (((C13579 * C16417 + C90485 * C16418) * C90567 +
            (C13579 * C16292 + C90485 * C16294) * C244) *
               C13578 +
           (C16425 + C16421) * C13577 + C16420 * C13576) *
              C90634 * C3363) *
         C90498) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C4828 +
            (C13579 * C245 + C90485 * C251) * C4653 -
            (C13579 * C1700 + C90485 * C1708) * C4829 -
            (C13579 * C1879 + C90485 * C1884) * C4654 +
            (C13579 * C4656 + C90485 * C4660) * C4830 +
            (C13579 * C4831 + C90485 * C4835) * C4655) *
               C13576 +
           (C18528 + C18529 - C18530 - C18531 + C18532 + C18544) * C13577 +
           (C18535 + C18536 - C18537 - C18538 + C18539 + C18545) * C13578) *
              C90634 * C90752 +
          ((C18530 - (C18529 + C18528) + C18531 - C18532 - C18544) * C13576 +
           (C18537 - (C18536 + C18535) + C18538 - C18539 - C18545) * C13577 +
           (C16860 * C4829 - (C15731 * C4653 + C15553 * C4828) +
            C17052 * C4654 - (C13579 * C18349 + C90485 * C18351) * C4830 -
            (C13579 * C18525 + C90485 * C18526) * C4655) *
               C13578) *
              C90634 * C90555) *
         C90498) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C244 +
             (C13579 * C245 + C90485 * C251) * C90567) *
                C90623 * C26429 +
            ((C13579 * C1700 + C90485 * C1708) * C244 +
             (C13579 * C1879 + C90485 * C1884) * C90567) *
                C90623 * C26430 +
            ((C13579 * C4656 + C90485 * C4660) * C244 +
             (C13579 * C4831 + C90485 * C4835) * C90567) *
                C90623 * C26431) *
               C90752 -
           ((C18542 * C90567 + C18362 * C244) * C90623 * C26431 +
            (C17049 * C90567 + C16859 * C244) * C90623 * C26430 +
            (C14296 + C14272) * C90623 * C26429) *
               C90555) *
              C821 +
          (((C14278 + C14298) * C90623 * C26429 +
            (C21021 * C244 + C21245 * C90567) * C90623 * C26430 +
            ((C13579 * C5470 + C90485 * C5476) * C244 +
             (C13579 * C5636 + C90485 * C5639) * C90567) *
                C90623 * C26431) *
               C90555 -
           (((C13579 * C4832 + C90485 * C4836) * C90567 +
             (C13579 * C4657 + C90485 * C4661) * C244) *
                C90623 * C26431 +
            ((C13579 * C1878 + C90485 * C1883) * C90567 +
             (C13579 * C1697 + C90485 * C1702) * C244) *
                C90623 * C26430 +
            ((C13579 * C246 + C90485 * C252) * C90567 +
             (C13579 * C108 + C90485 * C114) * C244) *
                C90623 * C26429) *
               C90752) *
              C822 +
          ((((C13579 * C109 + C90485 * C115) * C244 +
             (C13579 * C247 + C90485 * C253) * C90567) *
                C90623 * C26429 +
            ((C13579 * C1698 + C90485 * C1703) * C244 +
             (C13579 * C1877 + C90485 * C1882) * C90567) *
                C90623 * C26430 +
            ((C13579 * C4658 + C90485 * C4662) * C244 +
             (C13579 * C4833 + C90485 * C4837) * C90567) *
                C90623 * C26431) *
               C90752 -
           (((C13579 * C5635 + C90485 * C5638) * C90567 +
             (C13579 * C5469 + C90485 * C5475) * C244) *
                C90623 * C26431 +
            ((C13579 * C4077 + C90485 * C4083) * C90567 +
             (C13579 * C3893 + C90485 * C3899) * C244) *
                C90623 * C26430 +
            (C14300 + C14284) * C90623 * C26429) *
               C90555) *
              C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C244 +
            (C13579 * C245 + C90485 * C251) * C90567) *
               C90623 * C26429 +
           (C27600 * C244 + C27814 * C90567) * C90623 * C26430 +
           (C27606 * C244 + C27815 * C90567) * C90623 * C26431) *
              C3360 -
          ((C18542 * C90567 + C18362 * C244) * C90623 * C26431 +
           (C17049 * C90567 + C16859 * C244) * C90623 * C26430 +
           (C14296 + C14272) * C90623 * C26429) *
              C3361 +
          (C15723 * C90623 * C26429 +
           (C16857 * C244 + C17051 * C90567) * C90623 * C26430 +
           (C18364 * C244 + C18543 * C90567) * C90623 * C26431) *
              C3362 -
          (((C13579 * C18525 + C90485 * C18526) * C90567 +
            (C13579 * C18349 + C90485 * C18351) * C244) *
               C90623 * C26431 +
           (C17052 * C90567 + C16860 * C244) * C90623 * C26430 +
           C16420 * C90623 * C26429) *
              C3363) *
         C90498) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C4828 +
            (C13579 * C245 + C90485 * C251) * C4653 - C27600 * C4829 -
            C27814 * C4654 + C27606 * C4830 + C27815 * C4655) *
               C90623 * C26429 +
           (C27600 * C4828 + C27814 * C4653 - C27606 * C4829 - C27815 * C4654 +
            C30275 * C4830 + C30458 * C4655) *
               C90623 * C26430 +
           (C27606 * C4828 + C27815 * C4653 - C30275 * C4829 - C30458 * C4654 +
            (C13579 * C30247 + C90485 * C30249) * C4830 +
            (C13579 * C30449 + C90485 * C30451) * C4655) *
               C90623 * C26431) *
              C90752 +
          ((C18530 - (C18529 + C18528) + C18531 - C18532 - C18544) * C90623 *
               C26429 +
           (C18362 * C4829 - (C17049 * C4653 + C16859 * C4828) +
            C18542 * C4654 - C31052 * C4830 - C31230 * C4655) *
               C90623 * C26430 +
           (C31052 * C4829 - (C18542 * C4653 + C18362 * C4828) +
            C31230 * C4654 - (C13579 * C31038 + C90485 * C31040) * C4830 -
            (C13579 * C31225 + C90485 * C31226) * C4655) *
               C90623 * C26431) *
              C90555) *
         C90498) /
            (p * q * std::sqrt(p + q));
    d2eeyx[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C307 * C107 + C90623 * C308) * C826 +
                (C307 * C116 + C90623 * C314) * C821 - C337 * C827 -
                C338 * C822 + C339 * C828 + C340 * C823) *
                   C90634 * C89 +
               (C337 * C826 + C338 * C821 - C339 * C827 - C340 * C822 +
                C341 * C828 + C342 * C823) *
                   C90634 * C90 +
               (C339 * C826 + C340 * C821 - C341 * C827 - C342 * C822 +
                C343 * C828 + C344 * C823) *
                   C90634 * C91) *
                  C90567 * C90752 +
              ((C1116 * C827 -
                ((C307 * C839 + C90623 * C1098) * C821 +
                 (C307 * C832 + C90623 * C1094) * C826) +
                C1117 * C822 - C1118 * C828 - C1119 * C823) *
                   C90634 * C89 +
               (C1118 * C827 - (C1117 * C821 + C1116 * C826) + C1119 * C822 -
                C1120 * C828 - C1121 * C823) *
                   C90634 * C90 +
               (C1120 * C827 - (C1119 * C821 + C1118 * C826) + C1121 * C822 -
                (C307 * C833 + C90623 * C1097) * C828 -
                (C307 * C843 + C90623 * C1102) * C823) *
                   C90634 * C91) *
                  C90567 * C90555) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C307 * C107 + C90623 * C308) * C3364 +
                (C307 * C116 + C90623 * C314) * C90498) *
                   C90634 * C89 +
               (C337 * C3364 + C338 * C90498) * C90634 * C90 +
               (C339 * C3364 + C340 * C90498) * C90634 * C91) *
                  C90567 * C3360 -
              ((C1119 * C90498 + C1118 * C3364) * C90634 * C91 +
               (C1117 * C90498 + C1116 * C3364) * C90634 * C90 +
               ((C307 * C839 + C90623 * C1098) * C90498 +
                (C307 * C832 + C90623 * C1094) * C3364) *
                   C90634 * C89) *
                  C90567 * C3361 +
              (((C307 * C2570 + C90623 * C2827) * C3364 +
                (C307 * C2577 + C90623 * C2831) * C90498) *
                   C90634 * C89 +
               (C2844 * C3364 + C2845 * C90498) * C90634 * C90 +
               (C2846 * C3364 + C2847 * C90498) * C90634 * C91) *
                  C90567 * C3362 -
              (((C307 * C3368 + C90623 * C3546) * C90498 +
                (C307 * C3365 + C90623 * C3543) * C3364) *
                   C90634 * C91 +
               ((C307 * C3369 + C90623 * C3547) * C90498 +
                (C307 * C3366 + C90623 * C3544) * C3364) *
                   C90634 * C90 +
               ((C307 * C3370 + C90623 * C3548) * C90498 +
                (C307 * C3367 + C90623 * C3545) * C3364) *
                   C90634 * C89) *
                  C90567 * C3363)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C3364 +
             (C307 * C116 + C90623 * C314) * C90498) *
                C90634 * C89 +
            (C337 * C3364 + C338 * C90498) * C90634 * C90 +
            (C339 * C3364 + C340 * C90498) * C90634 * C91) *
               C4653 -
           ((C1987 * C90498 + C1986 * C3364) * C90634 * C91 +
            (C1985 * C90498 + C1984 * C3364) * C90634 * C90 +
            ((C307 * C1707 + C90623 * C1966) * C90498 +
             (C307 * C1700 + C90623 * C1962) * C3364) *
                C90634 * C89) *
               C4654 +
           (((C307 * C4656 + C90623 * C4913) * C3364 +
             (C307 * C4663 + C90623 * C4917) * C90498) *
                C90634 * C89 +
            (C4930 * C3364 + C4931 * C90498) * C90634 * C90 +
            (C4932 * C3364 + C4933 * C90498) * C90634 * C91) *
               C4655) *
              C90752 +
          ((((C307 * C3891 + C90623 * C4161) * C3364 +
             (C307 * C3900 + C90623 * C4167) * C90498) *
                C90634 * C89 +
            ((C307 * C3892 + C90623 * C4162) * C3364 +
             (C307 * C3901 + C90623 * C4168) * C90498) *
                C90634 * C90 +
            ((C307 * C3893 + C90623 * C4163) * C3364 +
             (C307 * C3902 + C90623 * C4169) * C90498) *
                C90634 * C91) *
               C4654 -
           ((C1119 * C90498 + C1118 * C3364) * C90634 * C91 +
            (C1117 * C90498 + C1116 * C3364) * C90634 * C90 +
            ((C307 * C839 + C90623 * C1098) * C90498 +
             (C307 * C832 + C90623 * C1094) * C3364) *
                C90634 * C89) *
               C4653 -
           (((C307 * C5472 + C90623 * C5718) * C90498 +
             (C307 * C5469 + C90623 * C5715) * C3364) *
                C90634 * C91 +
            ((C307 * C5473 + C90623 * C5719) * C90498 +
             (C307 * C5470 + C90623 * C5716) * C3364) *
                C90634 * C90 +
            ((C307 * C5474 + C90623 * C5720) * C90498 +
             (C307 * C5471 + C90623 * C5717) * C3364) *
                C90634 * C89) *
               C4655) *
              C90555)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C826 +
           (C13730 * C116 + C13576 * C314 + C13731 * C839 + C13577 * C1098 +
            C13732 * C2577 + C13578 * C2831) *
               C821 -
           (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
            C13730 * C108 + C13576 * C309) *
               C827 -
           (C13732 * C2578 + C13578 * C2832 + C13731 * C838 + C13577 * C1099 +
            C13730 * C117 + C13576 * C315) *
               C822 +
           (C13730 * C109 + C13576 * C310 + C13731 * C830 + C13577 * C1095 +
            C13732 * C2572 + C13578 * C2829) *
               C828 +
           (C13730 * C118 + C13576 * C316 + C13731 * C837 + C13577 * C1100 +
            C13732 * C2579 + C13578 * C2833) *
               C823) *
              C90634 * C90485 * C90567 * C90752 +
          ((C13730 * C829 + C13576 * C1093 + C13731 * C2571 + C13577 * C2828 +
            C13732 * C3366 + C13578 * C3544) *
               C827 -
           ((C13732 * C3370 + C13578 * C3548 + C13731 * C2577 + C13577 * C2831 +
             C13730 * C839 + C13576 * C1098) *
                C821 +
            (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
             C13730 * C832 + C13576 * C1094) *
                C826) +
           (C13730 * C838 + C13576 * C1099 + C13731 * C2578 + C13577 * C2832 +
            C13732 * C3369 + C13578 * C3547) *
               C822 -
           (C13732 * C3365 + C13578 * C3543 + C13731 * C2572 + C13577 * C2829 +
            C13730 * C830 + C13576 * C1095) *
               C828 -
           (C13732 * C3368 + C13578 * C3546 + C13731 * C2579 + C13577 * C2833 +
            C13730 * C837 + C13576 * C1100) *
               C823) *
              C90634 * C90485 * C90567 * C90555)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C3364 +
           (C13730 * C116 + C13576 * C314 + C13731 * C839 + C13577 * C1098 +
            C13732 * C2577 + C13578 * C2831) *
               C90498) *
              C90634 * C90485 * C90567 * C3360 -
          ((C13732 * C3370 + C13578 * C3548 + C13731 * C2577 + C13577 * C2831 +
            C13730 * C839 + C13576 * C1098) *
               C90498 +
           (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
            C13730 * C832 + C13576 * C1094) *
               C3364) *
              C90634 * C90485 * C90567 * C3361 +
          ((C13730 * C2570 + C13576 * C2827 + C13731 * C3367 + C13577 * C3545 +
            C13732 * C15525 + C13578 * C15808) *
               C3364 +
           (C13730 * C2577 + C13576 * C2831 + C13731 * C3370 + C13577 * C3548 +
            C13732 * C15528 + C13578 * C15810) *
               C90498) *
              C90634 * C90485 * C90567 * C3362 -
          ((C13732 * C16293 + C13578 * C16476 + C13731 * C15528 +
            C13577 * C15810 + C13730 * C3370 + C13576 * C3548) *
               C90498 +
           (C13732 * C16292 + C13578 * C16475 + C13731 * C15525 +
            C13577 * C15808 + C13730 * C3367 + C13576 * C3545) *
               C3364) *
              C90634 * C90485 * C90567 * C3363)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
             C13732 * C2570 + C13578 * C2827) *
                C3364 +
            (C13730 * C116 + C13576 * C314 + C13731 * C839 + C13577 * C1098 +
             C13732 * C2577 + C13578 * C2831) *
                C90498) *
               C90634 * C90485 * C4653 -
           ((C13732 * C3905 + C13578 * C4172 + C13731 * C3900 + C13577 * C4167 +
             C13730 * C1707 + C13576 * C1966) *
                C90498 +
            (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 + C13577 * C4161 +
             C13730 * C1700 + C13576 * C1962) *
                C3364) *
               C90634 * C90485 * C4654 +
           ((C13730 * C4656 + C13576 * C4913 + C13731 * C5471 + C13577 * C5717 +
             C13732 * C17651 + C13578 * C17889) *
                C3364 +
            (C13730 * C4663 + C13576 * C4917 + C13731 * C5474 + C13577 * C5720 +
             C13732 * C17654 + C13578 * C17891) *
                C90498) *
               C90634 * C90485 * C4655) *
              C90752 +
          (((C13730 * C3891 + C13576 * C4161 + C13731 * C3896 + C13577 * C4166 +
             C13732 * C16835 + C13578 * C17131) *
                C3364 +
            (C13730 * C3900 + C13576 * C4167 + C13731 * C3905 + C13577 * C4172 +
             C13732 * C16838 + C13578 * C17133) *
                C90498) *
               C90634 * C90485 * C4654 -
           ((C13732 * C3370 + C13578 * C3548 + C13731 * C2577 + C13577 * C2831 +
             C13730 * C839 + C13576 * C1098) *
                C90498 +
            (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
             C13730 * C832 + C13576 * C1094) *
                C3364) *
               C90634 * C90485 * C4653 -
           ((C13732 * C18350 + C13578 * C18620 + C13731 * C17654 +
             C13577 * C17891 + C13730 * C5474 + C13576 * C5720) *
                C90498 +
            (C13732 * C18349 + C13578 * C18619 + C13731 * C17651 +
             C13577 * C17889 + C13730 * C5471 + C13576 * C5717) *
                C3364) *
               C90634 * C90485 * C4655) *
              C90555)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C826 +
            (C307 * C116 + C90623 * C314) * C821 - C337 * C827 - C338 * C822 +
            C339 * C828 + C340 * C823) *
               C26429 +
           ((C307 * C1700 + C90623 * C1962) * C826 +
            (C307 * C1707 + C90623 * C1966) * C821 - C1984 * C827 -
            C1985 * C822 + C1986 * C828 + C1987 * C823) *
               C26430 +
           ((C307 * C4656 + C90623 * C4913) * C826 +
            (C307 * C4663 + C90623 * C4917) * C821 - C4930 * C827 -
            C4931 * C822 + C4932 * C828 + C4933 * C823) *
               C26431) *
              C90485 * C90567 * C90752 +
          ((C1116 * C827 -
            ((C307 * C839 + C90623 * C1098) * C821 +
             (C307 * C832 + C90623 * C1094) * C826) +
            C1117 * C822 - C1118 * C828 - C1119 * C823) *
               C26429 +
           (C8433 * C827 -
            ((C307 * C3900 + C90623 * C4167) * C821 +
             (C307 * C3891 + C90623 * C4161) * C826) +
            C8434 * C822 - C8435 * C828 - C8436 * C823) *
               C26430 +
           ((C307 * C5470 + C90623 * C5716) * C827 -
            ((C307 * C5474 + C90623 * C5720) * C821 +
             (C307 * C5471 + C90623 * C5717) * C826) +
            (C307 * C5473 + C90623 * C5719) * C822 -
            (C307 * C5469 + C90623 * C5715) * C828 -
            (C307 * C5472 + C90623 * C5718) * C823) *
               C26431) *
              C90485 * C90567 * C90555)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C307 * C107 + C90623 * C308) * C3364 +
                                (C307 * C116 + C90623 * C314) * C90498) *
                                   C26429 +
                               (C27910 * C3364 + C27911 * C90498) * C26430 +
                               (C27912 * C3364 + C27913 * C90498) * C26431) *
                                  C90485 * C90567 * C3360 -
                              (((C307 * C5474 + C90623 * C5720) * C90498 +
                                (C307 * C5471 + C90623 * C5717) * C3364) *
                                   C26431 +
                               ((C307 * C3900 + C90623 * C4167) * C90498 +
                                (C307 * C3891 + C90623 * C4161) * C3364) *
                                   C26430 +
                               ((C307 * C839 + C90623 * C1098) * C90498 +
                                (C307 * C832 + C90623 * C1094) * C3364) *
                                   C26429) *
                                  C90485 * C90567 * C3361 +
                              (((C307 * C2570 + C90623 * C2827) * C3364 +
                                (C307 * C2577 + C90623 * C2831) * C90498) *
                                   C26429 +
                               ((C307 * C3896 + C90623 * C4166) * C3364 +
                                (C307 * C3905 + C90623 * C4172) * C90498) *
                                   C26430 +
                               ((C307 * C17651 + C90623 * C17889) * C3364 +
                                (C307 * C17654 + C90623 * C17891) * C90498) *
                                   C26431) *
                                  C90485 * C90567 * C3362 -
                              (((C307 * C18350 + C90623 * C18620) * C90498 +
                                (C307 * C18349 + C90623 * C18619) * C3364) *
                                   C26431 +
                               ((C307 * C16838 + C90623 * C17133) * C90498 +
                                (C307 * C16835 + C90623 * C17131) * C3364) *
                                   C26430 +
                               ((C307 * C3370 + C90623 * C3548) * C90498 +
                                (C307 * C3367 + C90623 * C3545) * C3364) *
                                   C26429) *
                                  C90485 * C90567 * C3363)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C3364 +
             (C307 * C116 + C90623 * C314) * C90498) *
                C26429 +
            (C29732 + C29733) * C26430 + C31307 * C26431) *
               C90485 * C4653 -
           ((C31308 + C31309) * C26431 + (C29735 + C29734) * C26430 +
            (C29733 + C29732) * C26429) *
               C90485 * C4654 +
           (C31307 * C26429 + (C31309 + C31308) * C26430 +
            ((C307 * C30247 + C90623 * C30533) * C3364 +
             (C307 * C30250 + C90623 * C30535) * C90498) *
                C26431) *
               C90485 * C4655) *
              C90752 +
          (((C29760 + C29761) * C26429 + (C29762 + C29763) * C26430 +
            (C31317 + C31318) * C26431) *
               C90485 * C4654 -
           (C31314 * C26431 + (C29761 + C29760) * C26430 +
            ((C307 * C839 + C90623 * C1098) * C90498 +
             (C307 * C832 + C90623 * C1094) * C3364) *
                C26429) *
               C90485 * C4653 -
           (((C307 * C31039 + C90623 * C31305) * C90498 +
             (C307 * C31038 + C90623 * C31304) * C3364) *
                C26431 +
            (C31318 + C31317) * C26430 + C31314 * C26429) *
               C90485 * C4655) *
              C90555)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C307 * C107 + C90623 * C308) * C923 +
                (C307 * C182 + C90623 * C394) * C90752 -
                (C307 * C832 + C90623 * C1094) * C924 -
                (C307 * C927 + C90623 * C1195) * C90555) *
                   C90634 * C89 +
               (C1201 + C1202 - C1203 - C1220) * C90634 * C90 + C1225 * C91) *
                  C821 +
              ((C1203 - (C1202 + C1201) + C1220) * C90634 * C89 +
               (C1208 - (C1207 + C1206) + C1222) * C90634 * C90 +
               (C1211 - (C1212 + C1213) + C1223) * C90634 * C91) *
                  C822 +
              (C1225 * C89 + (C1213 + C1212 - C1211 - C1223) * C90634 * C90 +
               (C343 * C923 + C416 * C90752 -
                (C307 * C833 + C90623 * C1097) * C924 -
                (C307 * C929 + C90623 * C1199) * C90555) *
                   C90634 * C91) *
                  C823) *
             C90567 +
         0.5 * std::pow(Pi, 2.5) *
             (((C307 * C107 + C90623 * C308) * C3427 +
               (C307 * C182 + C90623 * C394) * C3360 -
               (C307 * C832 + C90623 * C1094) * C3428 -
               (C307 * C927 + C90623 * C1195) * C3361 +
               (C307 * C2570 + C90623 * C2827) * C3429 +
               (C307 * C2663 + C90623 * C2921) * C3362 -
               (C307 * C3367 + C90623 * C3545) * C3430 -
               (C307 * C3433 + C90623 * C3599) * C3363) *
                  C90634 * C89 +
              (C337 * C3427 + C413 * C3360 - C1116 * C3428 - C1216 * C3361 +
               C2844 * C3429 + C2940 * C3362 -
               (C307 * C3366 + C90623 * C3544) * C3430 -
               (C307 * C3432 + C90623 * C3600) * C3363) *
                  C90634 * C90 +
              (C339 * C3427 + C414 * C3360 - C1118 * C3428 - C1218 * C3361 +
               C2846 * C3429 + C2941 * C3362 -
               (C307 * C3365 + C90623 * C3543) * C3430 -
               (C307 * C3431 + C90623 * C3601) * C3363) *
                  C90634 * C91) *
             C90498 * C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C923 +
            (C307 * C182 + C90623 * C394) * C90752 -
            (C307 * C832 + C90623 * C1094) * C924 -
            (C307 * C927 + C90623 * C1195) * C90555) *
               C90634 * C89 +
           (C1201 + C1202 - C1203 - C1220) * C90634 * C90 + C1225 * C91) *
              C90498 * C4653 +
          (((C307 * C3891 + C90623 * C4161) * C924 -
            ((C307 * C1794 + C90623 * C2066) * C90752 +
             (C307 * C1700 + C90623 * C1962) * C923) +
            (C307 * C3989 + C90623 * C4247) * C90555) *
               C90634 * C89 +
           ((C307 * C3892 + C90623 * C4162) * C924 -
            (C2078 * C90752 + C1984 * C923) +
            (C307 * C3990 + C90623 * C4249) * C90555) *
               C90634 * C90 +
           ((C307 * C3893 + C90623 * C4163) * C924 -
            (C2079 * C90752 + C1986 * C923) +
            (C307 * C3991 + C90623 * C4251) * C90555) *
               C90634 * C91) *
              C90498 * C4654 +
          (((C307 * C4656 + C90623 * C4913) * C923 +
            (C307 * C4746 + C90623 * C5007) * C90752 -
            (C307 * C5471 + C90623 * C5717) * C924 -
            (C307 * C5557 + C90623 * C5795) * C90555) *
               C90634 * C89 +
           (C4930 * C923 + C5018 * C90752 -
            (C307 * C5470 + C90623 * C5716) * C924 -
            (C307 * C5556 + C90623 * C5796) * C90555) *
               C90634 * C90 +
           (C4932 * C923 + C5019 * C90752 -
            (C307 * C5469 + C90623 * C5715) * C924 -
            (C307 * C5555 + C90623 * C5797) * C90555) *
               C90634 * C91) *
              C90498 * C4655)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C923 +
           (C13730 * C182 + C13576 * C394 + C13731 * C927 + C13577 * C1195 +
            C13732 * C2663 + C13578 * C2921) *
               C90752 -
           (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
            C13730 * C832 + C13576 * C1094) *
               C924 -
           (C13732 * C3433 + C13578 * C3599 + C13731 * C2663 + C13577 * C2921 +
            C13730 * C927 + C13576 * C1195) *
               C90555) *
              C90634 * C90485 * C821 +
          ((C13730 * C829 + C13576 * C1093 + C13731 * C2571 + C13577 * C2828 +
            C13732 * C3366 + C13578 * C3544) *
               C924 -
           ((C13732 * C2664 + C13578 * C2922 + C13731 * C926 + C13577 * C1196 +
             C13730 * C183 + C13576 * C395) *
                C90752 +
            (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
             C13730 * C108 + C13576 * C309) *
                C923) +
           (C13730 * C926 + C13576 * C1196 + C13731 * C2664 + C13577 * C2922 +
            C13732 * C3432 + C13578 * C3600) *
               C90555) *
              C90634 * C90485 * C822 +
          ((C13730 * C109 + C13576 * C310 + C13731 * C830 + C13577 * C1095 +
            C13732 * C2572 + C13578 * C2829) *
               C923 +
           (C13730 * C184 + C13576 * C396 + C13731 * C925 + C13577 * C1197 +
            C13732 * C2665 + C13578 * C2923) *
               C90752 -
           (C13732 * C3365 + C13578 * C3543 + C13731 * C2572 + C13577 * C2829 +
            C13730 * C830 + C13576 * C1095) *
               C924 -
           (C13732 * C3431 + C13578 * C3601 + C13731 * C2665 + C13577 * C2923 +
            C13730 * C925 + C13576 * C1197) *
               C90555) *
              C90634 * C90485 * C823) *
         C90567) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
           C13732 * C2570 + C13578 * C2827) *
              C3427 +
          (C13730 * C182 + C13576 * C394 + C13731 * C927 + C13577 * C1195 +
           C13732 * C2663 + C13578 * C2921) *
              C3360 -
          (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
           C13730 * C832 + C13576 * C1094) *
              C3428 -
          (C13732 * C3433 + C13578 * C3599 + C13731 * C2663 + C13577 * C2921 +
           C13730 * C927 + C13576 * C1195) *
              C3361 +
          (C13730 * C2570 + C13576 * C2827 + C13731 * C3367 + C13577 * C3545 +
           C13732 * C15525 + C13578 * C15808) *
              C3429 +
          (C13730 * C2663 + C13576 * C2921 + C13731 * C3433 + C13577 * C3599 +
           C13732 * C15634 + C13578 * C15886) *
              C3362 -
          (C13732 * C16292 + C13578 * C16475 + C13731 * C15525 +
           C13577 * C15808 + C13730 * C3367 + C13576 * C3545) *
              C3430 -
          (C13732 * C16362 + C13578 * C16527 + C13731 * C15634 +
           C13577 * C15886 + C13730 * C3433 + C13576 * C3599) *
              C3363) *
         C90634 * C90485 * C90498 * C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C923 +
           (C13730 * C182 + C13576 * C394 + C13731 * C927 + C13577 * C1195 +
            C13732 * C2663 + C13578 * C2921) *
               C90752 -
           (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
            C13730 * C832 + C13576 * C1094) *
               C924 -
           (C13732 * C3433 + C13578 * C3599 + C13731 * C2663 + C13577 * C2921 +
            C13730 * C927 + C13576 * C1195) *
               C90555) *
              C90634 * C90485 * C90498 * C4653 +
          ((C13730 * C3891 + C13576 * C4161 + C13731 * C3896 + C13577 * C4166 +
            C13732 * C16835 + C13578 * C17131) *
               C924 -
           ((C13732 * C3994 + C13578 * C4248 + C13731 * C3989 + C13577 * C4247 +
             C13730 * C1794 + C13576 * C2066) *
                C90752 +
            (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 + C13577 * C4161 +
             C13730 * C1700 + C13576 * C1962) *
                C923) +
           (C13730 * C3989 + C13576 * C4247 + C13731 * C3994 + C13577 * C4248 +
            C13732 * C16942 + C13578 * C17209) *
               C90555) *
              C90634 * C90485 * C90498 * C4654 +
          ((C13730 * C4656 + C13576 * C4913 + C13731 * C5471 + C13577 * C5717 +
            C13732 * C17651 + C13578 * C17889) *
               C923 +
           (C13730 * C4746 + C13576 * C5007 + C13731 * C5557 + C13577 * C5795 +
            C13732 * C17733 + C13578 * C17967) *
               C90752 -
           (C13732 * C18349 + C13578 * C18619 + C13731 * C17651 +
            C13577 * C17889 + C13730 * C5471 + C13576 * C5717) *
               C924 -
           (C13732 * C18443 + C13578 * C18695 + C13731 * C17733 +
            C13577 * C17967 + C13730 * C5557 + C13576 * C5795) *
               C90555) *
              C90634 * C90485 * C90498 * C4655)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C923 +
            (C307 * C182 + C90623 * C394) * C90752 -
            (C307 * C832 + C90623 * C1094) * C924 -
            (C307 * C927 + C90623 * C1195) * C90555) *
               C26429 +
           ((C307 * C1700 + C90623 * C1962) * C923 +
            (C307 * C1794 + C90623 * C2066) * C90752 -
            (C307 * C3891 + C90623 * C4161) * C924 -
            (C307 * C3989 + C90623 * C4247) * C90555) *
               C26430 +
           ((C307 * C4656 + C90623 * C4913) * C923 +
            (C307 * C4746 + C90623 * C5007) * C90752 -
            (C307 * C5471 + C90623 * C5717) * C924 -
            (C307 * C5557 + C90623 * C5795) * C90555) *
               C26431) *
              C90485 * C821 +
          ((C1203 - (C1202 + C1201) + C1220) * C26429 +
           (C10192 - (C10193 + C10194) + C10195) * C26430 +
           ((C307 * C5470 + C90623 * C5716) * C924 -
            (C5018 * C90752 + C4930 * C923) +
            (C307 * C5556 + C90623 * C5796) * C90555) *
               C26431) *
              C90485 * C822 +
          (C1224 * C26429 + (C10198 + C10197 - C10196 - C10199) * C26430 +
           (C4932 * C923 + C5019 * C90752 -
            (C307 * C5469 + C90623 * C5715) * C924 -
            (C307 * C5555 + C90623 * C5797) * C90555) *
               C26431) *
              C90485 * C823) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C307 * C107 + C90623 * C308) * C3427 +
           (C307 * C182 + C90623 * C394) * C3360 -
           (C307 * C832 + C90623 * C1094) * C3428 -
           (C307 * C927 + C90623 * C1195) * C3361 +
           (C307 * C2570 + C90623 * C2827) * C3429 +
           (C307 * C2663 + C90623 * C2921) * C3362 -
           (C307 * C3367 + C90623 * C3545) * C3430 -
           (C307 * C3433 + C90623 * C3599) * C3363) *
              C26429 +
          (C27910 * C3427 + C27998 * C3360 -
           (C307 * C3891 + C90623 * C4161) * C3428 -
           (C307 * C3989 + C90623 * C4247) * C3361 +
           (C307 * C3896 + C90623 * C4166) * C3429 +
           (C307 * C3994 + C90623 * C4248) * C3362 -
           (C307 * C16835 + C90623 * C17131) * C3430 -
           (C307 * C16942 + C90623 * C17209) * C3363) *
              C26430 +
          (C27912 * C3427 + C27999 * C3360 -
           (C307 * C5471 + C90623 * C5717) * C3428 -
           (C307 * C5557 + C90623 * C5795) * C3361 +
           (C307 * C17651 + C90623 * C17889) * C3429 +
           (C307 * C17733 + C90623 * C17967) * C3362 -
           (C307 * C18349 + C90623 * C18619) * C3430 -
           (C307 * C18443 + C90623 * C18695) * C3363) *
              C26431) *
         C90485 * C90498 * C90567) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C923 +
            (C307 * C182 + C90623 * C394) * C90752 -
            (C307 * C832 + C90623 * C1094) * C924 -
            (C307 * C927 + C90623 * C1195) * C90555) *
               C26429 +
           (C31394 + C31395 - C31396 - C31397) * C26430 + C31411 * C26431) *
              C90485 * C90498 * C4653 +
          ((C31396 - (C31395 + C31394) + C31397) * C26429 +
           (C31400 - (C31399 + C31398) + C31401) * C26430 +
           (C31402 - (C31403 + C31404) + C31410) * C26431) *
              C90485 * C90498 * C4654 +
          (C31411 * C26429 + (C31404 + C31403 - C31402 - C31410) * C26430 +
           ((C307 * C30247 + C90623 * C30533) * C923 +
            (C307 * C30357 + C90623 * C30638) * C90752 -
            (C307 * C31038 + C90623 * C31304) * C924 -
            (C307 * C31130 + C90623 * C31392) * C90555) *
               C26431) *
              C90485 * C90498 * C4655)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C307 * C107 + C90623 * C308) * C244 +
                 (C307 * C245 + C90623 * C474) * C90567) *
                    C90634 * C89 +
                (C481 + C497) * C90634 * C90 + C503 * C91) *
                   C90752 -
               (C1321 * C91 + (C1318 + C1310) * C90634 * C90 +
                ((C307 * C1011 + C90623 * C1301) * C90567 +
                 (C307 * C832 + C90623 * C1094) * C244) *
                    C90634 * C89) *
                   C90555) *
                  C821 +
              (((C1310 + C1318) * C90634 * C89 +
                (C1307 + C1317) * C90634 * C90 +
                (C1311 + C1319) * C90634 * C91) *
                   C90555 -
               (C504 * C91 + (C498 + C484) * C90634 * C90 +
                (C497 + C481) * C90634 * C89) *
                   C90752) *
                  C822 +
              ((C503 * C89 + (C489 + C499) * C90634 * C90 +
                (C490 + C500) * C90634 * C91) *
                   C90752 -
               (((C307 * C1013 + C90623 * C1303) * C90567 +
                 (C307 * C833 + C90623 * C1097) * C244) *
                    C90634 * C91 +
                (C1319 + C1311) * C90634 * C90 + C1321 * C89) *
                   C90555) *
                  C823) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C307 * C107 + C90623 * C308) * C244 +
                (C307 * C245 + C90623 * C474) * C90567) *
                   C90634 * C89 +
               (C481 + C497) * C90634 * C90 + C503 * C91) *
                  C3360 -
              (C1321 * C91 + (C1318 + C1310) * C90634 * C90 +
               ((C307 * C1011 + C90623 * C1301) * C90567 +
                (C307 * C832 + C90623 * C1094) * C244) *
                   C90634 * C89) *
                  C3361 +
              (((C307 * C2570 + C90623 * C2827) * C244 +
                (C307 * C2745 + C90623 * C3017) * C90567) *
                   C90634 * C89 +
               (C3022 + C3030) * C90634 * C90 +
               (C3025 + C3031) * C90634 * C91) *
                  C3362 -
              (((C307 * C3487 + C90623 * C3652) * C90567 +
                (C307 * C3365 + C90623 * C3543) * C244) *
                   C90634 * C91 +
               ((C307 * C3488 + C90623 * C3653) * C90567 +
                (C307 * C3366 + C90623 * C3544) * C244) *
                   C90634 * C90 +
               ((C307 * C3489 + C90623 * C3654) * C90567 +
                (C307 * C3367 + C90623 * C3545) * C244) *
                   C90634 * C89) *
                  C3363) *
             C90498) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C4828 +
            (C307 * C245 + C90623 * C474) * C4653 -
            (C307 * C1700 + C90623 * C1962) * C4829 -
            (C307 * C1879 + C90623 * C2159) * C4654 +
            (C307 * C4656 + C90623 * C4913) * C4830 +
            (C307 * C4831 + C90623 * C5095) * C4655) *
               C90634 * C89 +
           (C5100 + C5101 - C5102 - C5103 + C5104 + C5116) * C90634 * C90 +
           (C5107 + C5108 - C5109 - C5110 + C5111 + C5117) * C90634 * C91) *
              C90752 +
          (((C307 * C3891 + C90623 * C4161) * C4829 -
            ((C307 * C1011 + C90623 * C1301) * C4653 +
             (C307 * C832 + C90623 * C1094) * C4828) +
            (C307 * C4075 + C90623 * C4327) * C4654 -
            (C307 * C5471 + C90623 * C5717) * C4830 -
            (C307 * C5637 + C90623 * C5872) * C4655) *
               C90634 * C89 +
           ((C307 * C3892 + C90623 * C4162) * C4829 -
            (C1315 * C4653 + C1116 * C4828) +
            (C307 * C4076 + C90623 * C4328) * C4654 -
            (C307 * C5470 + C90623 * C5716) * C4830 -
            (C307 * C5636 + C90623 * C5873) * C4655) *
               C90634 * C90 +
           ((C307 * C3893 + C90623 * C4163) * C4829 -
            (C1314 * C4653 + C1118 * C4828) +
            (C307 * C4077 + C90623 * C4329) * C4654 -
            (C307 * C5469 + C90623 * C5715) * C4830 -
            (C307 * C5635 + C90623 * C5874) * C4655) *
               C90634 * C91) *
              C90555) *
         C90498) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
             C13732 * C2570 + C13578 * C2827) *
                C244 +
            (C13730 * C245 + C13576 * C474 + C13731 * C1011 + C13577 * C1301 +
             C13732 * C2745 + C13578 * C3017) *
                C90567) *
               C90634 * C90485 * C90752 -
           ((C13732 * C3489 + C13578 * C3654 + C13731 * C2745 + C13577 * C3017 +
             C13730 * C1011 + C13576 * C1301) *
                C90567 +
            (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
             C13730 * C832 + C13576 * C1094) *
                C244) *
               C90634 * C90485 * C90555) *
              C821 +
          (((C13730 * C829 + C13576 * C1093 + C13731 * C2571 + C13577 * C2828 +
             C13732 * C3366 + C13578 * C3544) *
                C244 +
            (C13730 * C1010 + C13576 * C1300 + C13731 * C2746 + C13577 * C3018 +
             C13732 * C3488 + C13578 * C3653) *
                C90567) *
               C90634 * C90485 * C90555 -
           ((C13732 * C2746 + C13578 * C3018 + C13731 * C1010 + C13577 * C1300 +
             C13730 * C246 + C13576 * C475) *
                C90567 +
            (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
             C13730 * C108 + C13576 * C309) *
                C244) *
               C90634 * C90485 * C90752) *
              C822 +
          (((C13730 * C109 + C13576 * C310 + C13731 * C830 + C13577 * C1095 +
             C13732 * C2572 + C13578 * C2829) *
                C244 +
            (C13730 * C247 + C13576 * C476 + C13731 * C1009 + C13577 * C1299 +
             C13732 * C2747 + C13578 * C3019) *
                C90567) *
               C90634 * C90485 * C90752 -
           ((C13732 * C3487 + C13578 * C3652 + C13731 * C2747 + C13577 * C3019 +
             C13730 * C1009 + C13576 * C1299) *
                C90567 +
            (C13732 * C3365 + C13578 * C3543 + C13731 * C2572 + C13577 * C2829 +
             C13730 * C830 + C13576 * C1095) *
                C244) *
               C90634 * C90485 * C90555) *
              C823)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C244 +
           (C13730 * C245 + C13576 * C474 + C13731 * C1011 + C13577 * C1301 +
            C13732 * C2745 + C13578 * C3017) *
               C90567) *
              C90634 * C90485 * C3360 -
          ((C13732 * C3489 + C13578 * C3654 + C13731 * C2745 + C13577 * C3017 +
            C13730 * C1011 + C13576 * C1301) *
               C90567 +
           (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
            C13730 * C832 + C13576 * C1094) *
               C244) *
              C90634 * C90485 * C3361 +
          ((C13730 * C2570 + C13576 * C2827 + C13731 * C3367 + C13577 * C3545 +
            C13732 * C15525 + C13578 * C15808) *
               C244 +
           (C13730 * C2745 + C13576 * C3017 + C13731 * C3489 + C13577 * C3654 +
            C13732 * C15718 + C13578 * C15962) *
               C90567) *
              C90634 * C90485 * C3362 -
          ((C13732 * C16417 + C13578 * C16578 + C13731 * C15718 +
            C13577 * C15962 + C13730 * C3489 + C13576 * C3654) *
               C90567 +
           (C13732 * C16292 + C13578 * C16475 + C13731 * C15525 +
            C13577 * C15808 + C13730 * C3367 + C13576 * C3545) *
               C244) *
              C90634 * C90485 * C3363) *
         C90498) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C4828 +
           (C13730 * C245 + C13576 * C474 + C13731 * C1011 + C13577 * C1301 +
            C13732 * C2745 + C13578 * C3017) *
               C4653 -
           (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 + C13577 * C4161 +
            C13730 * C1700 + C13576 * C1962) *
               C4829 -
           (C13732 * C4080 + C13578 * C4330 + C13731 * C4075 + C13577 * C4327 +
            C13730 * C1879 + C13576 * C2159) *
               C4654 +
           (C13730 * C4656 + C13576 * C4913 + C13731 * C5471 + C13577 * C5717 +
            C13732 * C17651 + C13578 * C17889) *
               C4830 +
           (C13730 * C4831 + C13576 * C5095 + C13731 * C5637 + C13577 * C5872 +
            C13732 * C17811 + C13578 * C18043) *
               C4655) *
              C90634 * C90485 * C90752 +
          ((C13730 * C3891 + C13576 * C4161 + C13731 * C3896 + C13577 * C4166 +
            C13732 * C16835 + C13578 * C17131) *
               C4829 -
           ((C13732 * C3489 + C13578 * C3654 + C13731 * C2745 + C13577 * C3017 +
             C13730 * C1011 + C13576 * C1301) *
                C4653 +
            (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
             C13730 * C832 + C13576 * C1094) *
                C4828) +
           (C13730 * C4075 + C13576 * C4327 + C13731 * C4080 + C13577 * C4330 +
            C13732 * C17029 + C13578 * C17285) *
               C4654 -
           (C13732 * C18349 + C13578 * C18619 + C13731 * C17651 +
            C13577 * C17889 + C13730 * C5471 + C13576 * C5717) *
               C4830 -
           (C13732 * C18525 + C13578 * C18770 + C13731 * C17811 +
            C13577 * C18043 + C13730 * C5637 + C13576 * C5872) *
               C4655) *
              C90634 * C90485 * C90555) *
         C90498) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C244 +
             (C307 * C245 + C90623 * C474) * C90567) *
                C26429 +
            ((C307 * C1700 + C90623 * C1962) * C244 +
             (C307 * C1879 + C90623 * C2159) * C90567) *
                C26430 +
            ((C307 * C4656 + C90623 * C4913) * C244 +
             (C307 * C4831 + C90623 * C5095) * C90567) *
                C26431) *
               C90485 * C90752 -
           (((C307 * C5637 + C90623 * C5872) * C90567 +
             (C307 * C5471 + C90623 * C5717) * C244) *
                C26431 +
            ((C307 * C4075 + C90623 * C4327) * C90567 +
             (C307 * C3891 + C90623 * C4161) * C244) *
                C26430 +
            ((C307 * C1011 + C90623 * C1301) * C90567 +
             (C307 * C832 + C90623 * C1094) * C244) *
                C26429) *
               C90485 * C90555) *
              C821 +
          (((C1310 + C1318) * C26429 +
            (C8433 * C244 + C8659 * C90567) * C26430 +
            ((C307 * C5470 + C90623 * C5716) * C244 +
             (C307 * C5636 + C90623 * C5873) * C90567) *
                C26431) *
               C90485 * C90555 -
           ((C5114 * C90567 + C4930 * C244) * C26431 +
            (C2180 * C90567 + C1984 * C244) * C26430 + (C497 + C481) * C26429) *
               C90485 * C90752) *
              C822 +
          ((C501 * C26429 + (C1986 * C244 + C2182 * C90567) * C26430 +
            (C4932 * C244 + C5115 * C90567) * C26431) *
               C90485 * C90752 -
           (((C307 * C5635 + C90623 * C5874) * C90567 +
             (C307 * C5469 + C90623 * C5715) * C244) *
                C26431 +
            (C8660 * C90567 + C8435 * C244) * C26430 + C1320 * C26429) *
               C90485 * C90555) *
              C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C244 +
            (C307 * C245 + C90623 * C474) * C90567) *
               C26429 +
           (C27910 * C244 + C28080 * C90567) * C26430 +
           (C27912 * C244 + C28081 * C90567) * C26431) *
              C90485 * C3360 -
          (((C307 * C5637 + C90623 * C5872) * C90567 +
            (C307 * C5471 + C90623 * C5717) * C244) *
               C26431 +
           ((C307 * C4075 + C90623 * C4327) * C90567 +
            (C307 * C3891 + C90623 * C4161) * C244) *
               C26430 +
           ((C307 * C1011 + C90623 * C1301) * C90567 +
            (C307 * C832 + C90623 * C1094) * C244) *
               C26429) *
              C90485 * C3361 +
          (((C307 * C2570 + C90623 * C2827) * C244 +
            (C307 * C2745 + C90623 * C3017) * C90567) *
               C26429 +
           ((C307 * C3896 + C90623 * C4166) * C244 +
            (C307 * C4080 + C90623 * C4330) * C90567) *
               C26430 +
           ((C307 * C17651 + C90623 * C17889) * C244 +
            (C307 * C17811 + C90623 * C18043) * C90567) *
               C26431) *
              C90485 * C3362 -
          (((C307 * C18525 + C90623 * C18770) * C90567 +
            (C307 * C18349 + C90623 * C18619) * C244) *
               C26431 +
           ((C307 * C17029 + C90623 * C17285) * C90567 +
            (C307 * C16835 + C90623 * C17131) * C244) *
               C26430 +
           ((C307 * C3489 + C90623 * C3654) * C90567 +
            (C307 * C3367 + C90623 * C3545) * C244) *
               C26429) *
              C90485 * C3363) *
         C90498) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C4828 +
            (C307 * C245 + C90623 * C474) * C4653 - C27910 * C4829 -
            C28080 * C4654 + C27912 * C4830 + C28081 * C4655) *
               C26429 +
           (C27910 * C4828 + C28080 * C4653 - C27912 * C4829 - C28081 * C4654 +
            C30557 * C4830 + C30733 * C4655) *
               C26430 +
           (C27912 * C4828 + C28081 * C4653 - C30557 * C4829 - C30733 * C4654 +
            (C307 * C30247 + C90623 * C30533) * C4830 +
            (C307 * C30449 + C90623 * C30726) * C4655) *
               C26431) *
              C90485 * C90752 +
          ((C29752 * C4829 -
            ((C307 * C1011 + C90623 * C1301) * C4653 +
             (C307 * C832 + C90623 * C1094) * C4828) +
            C29948 * C4654 - C29754 * C4830 - C29949 * C4655) *
               C26429 +
           (C29754 * C4829 - (C29948 * C4653 + C29752 * C4828) +
            C29949 * C4654 - C31315 * C4830 - C31489 * C4655) *
               C26430 +
           (C31315 * C4829 - (C29949 * C4653 + C29754 * C4828) +
            C31489 * C4654 - (C307 * C31038 + C90623 * C31304) * C4830 -
            (C307 * C31225 + C90623 * C31485) * C4655) *
               C26431) *
              C90485 * C90555) *
         C90498) /
            (p * q * std::sqrt(p + q));
    d2eezx[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C554 * C107 + C90634 * C555) * C826 +
                (C554 * C116 + C90634 * C561) * C821 - C584 * C827 -
                C585 * C822 + C586 * C828 + C587 * C823) *
                   C89 +
               (C584 * C826 + C585 * C821 - C586 * C827 - C587 * C822 +
                C588 * C828 + C589 * C823) *
                   C90 +
               (C586 * C826 + C587 * C821 - C588 * C827 - C589 * C822 +
                C590 * C828 + C591 * C823) *
                   C91) *
                  C90623 * C90567 * C90752 +
              ((C1418 * C827 -
                ((C554 * C839 + C90634 * C1400) * C821 +
                 (C554 * C832 + C90634 * C1396) * C826) +
                C1419 * C822 - C1420 * C828 - C1421 * C823) *
                   C89 +
               (C1420 * C827 - (C1419 * C821 + C1418 * C826) + C1421 * C822 -
                C1422 * C828 - C1423 * C823) *
                   C90 +
               (C1422 * C827 - (C1421 * C821 + C1420 * C826) + C1423 * C822 -
                (C554 * C833 + C90634 * C1399) * C828 -
                (C554 * C843 + C90634 * C1404) * C823) *
                   C91) *
                  C90623 * C90567 * C90555) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C554 * C107 + C90634 * C555) * C3364 +
                (C554 * C116 + C90634 * C561) * C90498) *
                   C89 +
               (C584 * C3364 + C585 * C90498) * C90 +
               (C586 * C3364 + C587 * C90498) * C91) *
                  C90623 * C90567 * C3360 -
              ((C1421 * C90498 + C1420 * C3364) * C91 +
               (C1419 * C90498 + C1418 * C3364) * C90 +
               ((C554 * C839 + C90634 * C1400) * C90498 +
                (C554 * C832 + C90634 * C1396) * C3364) *
                   C89) *
                  C90623 * C90567 * C3361 +
              (((C554 * C2570 + C90634 * C3105) * C3364 +
                (C554 * C2577 + C90634 * C3109) * C90498) *
                   C89 +
               (C3122 * C3364 + C3123 * C90498) * C90 +
               (C3124 * C3364 + C3125 * C90498) * C91) *
                  C90623 * C90567 * C3362 -
              (((C554 * C3368 + C90634 * C3708) * C90498 +
                (C554 * C3365 + C90634 * C3705) * C3364) *
                   C91 +
               ((C554 * C3369 + C90634 * C3709) * C90498 +
                (C554 * C3366 + C90634 * C3706) * C3364) *
                   C90 +
               ((C554 * C3370 + C90634 * C3710) * C90498 +
                (C554 * C3367 + C90634 * C3707) * C3364) *
                   C89) *
                  C90623 * C90567 * C3363)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C554 * C107 + C90634 * C555) * C3364 +
                                 (C554 * C116 + C90634 * C561) * C90498) *
                                    C89 +
                                (C584 * C3364 + C585 * C90498) * C90 +
                                (C586 * C3364 + C587 * C90498) * C91) *
                                   C90623 * C4653 -
                               ((C2289 * C90498 + C2288 * C3364) * C91 +
                                (C2287 * C90498 + C2286 * C3364) * C90 +
                                ((C554 * C1707 + C90634 * C2268) * C90498 +
                                 (C554 * C1700 + C90634 * C2264) * C3364) *
                                    C89) *
                                   C90623 * C4654 +
                               (((C554 * C4656 + C90634 * C5191) * C3364 +
                                 (C554 * C4663 + C90634 * C5195) * C90498) *
                                    C89 +
                                (C5208 * C3364 + C5209 * C90498) * C90 +
                                (C5210 * C3364 + C5211 * C90498) * C91) *
                                   C90623 * C4655) *
                                  C90752 +
                              ((((C554 * C3891 + C90634 * C4407) * C3364 +
                                 (C554 * C3900 + C90634 * C4413) * C90498) *
                                    C89 +
                                ((C554 * C3892 + C90634 * C4408) * C3364 +
                                 (C554 * C3901 + C90634 * C4414) * C90498) *
                                    C90 +
                                ((C554 * C3893 + C90634 * C4409) * C3364 +
                                 (C554 * C3902 + C90634 * C4415) * C90498) *
                                    C91) *
                                   C90623 * C4654 -
                               ((C1421 * C90498 + C1420 * C3364) * C91 +
                                (C1419 * C90498 + C1418 * C3364) * C90 +
                                ((C554 * C839 + C90634 * C1400) * C90498 +
                                 (C554 * C832 + C90634 * C1396) * C3364) *
                                    C89) *
                                   C90623 * C4653 -
                               (((C554 * C5472 + C90634 * C5952) * C90498 +
                                 (C554 * C5469 + C90634 * C5949) * C3364) *
                                    C91 +
                                ((C554 * C5473 + C90634 * C5953) * C90498 +
                                 (C554 * C5470 + C90634 * C5950) * C3364) *
                                    C90 +
                                ((C554 * C5474 + C90634 * C5954) * C90498 +
                                 (C554 * C5471 + C90634 * C5951) * C3364) *
                                    C89) *
                                   C90623 * C4655) *
                                  C90555)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C826 +
            (C554 * C116 + C90634 * C561) * C821 - C584 * C827 - C585 * C822 +
            C586 * C828 + C587 * C823) *
               C90485 * C13576 +
           (C14618 + C14619 - C14602 - C14603 + C14604 + C14605) * C90485 *
               C13577 +
           (C14620 + C14621 - C14610 - C14611 + C14612 + C14613) * C90485 *
               C13578) *
              C90567 * C90752 +
          ((C14602 - (C14619 + C14618) + C14603 - C14604 - C14605) * C90485 *
               C13576 +
           (C14610 - (C14621 + C14620) + C14611 - C14612 - C14613) * C90485 *
               C13577 +
           ((C554 * C3366 + C90634 * C3706) * C827 -
            ((C554 * C3370 + C90634 * C3710) * C821 +
             (C554 * C3367 + C90634 * C3707) * C826) +
            (C554 * C3369 + C90634 * C3709) * C822 -
            (C554 * C3365 + C90634 * C3705) * C828 -
            (C554 * C3368 + C90634 * C3708) * C823) *
               C90485 * C13578) *
              C90567 * C90555)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C3364 +
            (C554 * C116 + C90634 * C561) * C90498) *
               C90485 * C13576 +
           (C16632 + C16633) * C90485 * C13577 + C16646 * C13578) *
              C90567 * C3360 -
          (C16647 * C13578 + (C16635 + C16634) * C90485 * C13577 +
           (C16633 + C16632) * C90485 * C13576) *
              C90567 * C3361 +
          (C16646 * C13576 + (C16637 + C16636) * C90485 * C13577 +
           (C16648 + C16649) * C90485 * C13578) *
              C90567 * C3362 -
          (((C554 * C16293 + C90634 * C16630) * C90498 +
            (C554 * C16292 + C90634 * C16629) * C3364) *
               C90485 * C13578 +
           (C16649 + C16648) * C90485 * C13577 + C16647 * C13576) *
              C90567 * C3363)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C3364 +
             (C554 * C116 + C90634 * C561) * C90498) *
                C90485 * C13576 +
            (C16632 + C16633) * C90485 * C13577 + C16646 * C13578) *
               C4653 -
           (C17391 * C13578 + (C17386 + C17387) * C90485 * C13577 +
            ((C554 * C1707 + C90634 * C2268) * C90498 +
             (C554 * C1700 + C90634 * C2264) * C3364) *
                C90485 * C13576) *
               C4654 +
           (((C554 * C4656 + C90634 * C5191) * C3364 +
             (C554 * C4663 + C90634 * C5195) * C90498) *
                C90485 * C13576 +
            (C18860 + C18861) * C90485 * C13577 +
            (C18862 + C18863) * C90485 * C13578) *
               C4655) *
              C90752 +
          (((C17387 + C17386) * C90485 * C13576 +
            (C17385 + C17384) * C90485 * C13577 +
            (C17388 + C17389) * C90485 * C13578) *
               C4654 -
           (C16647 * C13578 + (C16635 + C16634) * C90485 * C13577 +
            (C16633 + C16632) * C90485 * C13576) *
               C4653 -
           (((C554 * C18350 + C90634 * C18846) * C90498 +
             (C554 * C18349 + C90634 * C18845) * C3364) *
                C90485 * C13578 +
            (C18863 + C18862) * C90485 * C13577 +
            (C18861 + C18860) * C90485 * C13576) *
               C4655) *
              C90555)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C26732 * C107 + C26429 * C555 + C26733 * C1700 + C26430 * C2264 +
            C26734 * C4656 + C26431 * C5191) *
               C826 +
           (C26732 * C116 + C26429 * C561 + C26733 * C1707 + C26430 * C2268 +
            C26734 * C4663 + C26431 * C5195) *
               C821 -
           (C26734 * C4657 + C26431 * C5192 + C26733 * C1697 + C26430 * C2263 +
            C26732 * C108 + C26429 * C556) *
               C827 -
           (C26734 * C4664 + C26431 * C5196 + C26733 * C1706 + C26430 * C2269 +
            C26732 * C117 + C26429 * C562) *
               C822 +
           (C26732 * C109 + C26429 * C557 + C26733 * C1698 + C26430 * C2265 +
            C26734 * C4658 + C26431 * C5193) *
               C828 +
           (C26732 * C118 + C26429 * C563 + C26733 * C1705 + C26430 * C2270 +
            C26734 * C4665 + C26431 * C5197) *
               C823) *
              C90485 * C90623 * C90567 * C90752 +
          ((C26732 * C829 + C26429 * C1395 + C26733 * C3892 + C26430 * C4408 +
            C26734 * C5470 + C26431 * C5950) *
               C827 -
           ((C26734 * C5474 + C26431 * C5954 + C26733 * C3900 + C26430 * C4413 +
             C26732 * C839 + C26429 * C1400) *
                C821 +
            (C26734 * C5471 + C26431 * C5951 + C26733 * C3891 + C26430 * C4407 +
             C26732 * C832 + C26429 * C1396) *
                C826) +
           (C26732 * C838 + C26429 * C1401 + C26733 * C3901 + C26430 * C4414 +
            C26734 * C5473 + C26431 * C5953) *
               C822 -
           (C26734 * C5469 + C26431 * C5949 + C26733 * C3893 + C26430 * C4409 +
            C26732 * C830 + C26429 * C1397) *
               C828 -
           (C26734 * C5472 + C26431 * C5952 + C26733 * C3902 + C26430 * C4415 +
            C26732 * C837 + C26429 * C1402) *
               C823) *
              C90485 * C90623 * C90567 * C90555)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C26732 * C107 + C26429 * C555 + C26733 * C1700 + C26430 * C2264 +
            C26734 * C4656 + C26431 * C5191) *
               C3364 +
           (C26732 * C116 + C26429 * C561 + C26733 * C1707 + C26430 * C2268 +
            C26734 * C4663 + C26431 * C5195) *
               C90498) *
              C90485 * C90623 * C90567 * C3360 -
          ((C26734 * C5474 + C26431 * C5954 + C26733 * C3900 + C26430 * C4413 +
            C26732 * C839 + C26429 * C1400) *
               C90498 +
           (C26734 * C5471 + C26431 * C5951 + C26733 * C3891 + C26430 * C4407 +
            C26732 * C832 + C26429 * C1396) *
               C3364) *
              C90485 * C90623 * C90567 * C3361 +
          ((C26732 * C2570 + C26429 * C3105 + C26733 * C3896 + C26430 * C4412 +
            C26734 * C17651 + C26431 * C18119) *
               C3364 +
           (C26732 * C2577 + C26429 * C3109 + C26733 * C3905 + C26430 * C4418 +
            C26734 * C17654 + C26431 * C18121) *
               C90498) *
              C90485 * C90623 * C90567 * C3362 -
          ((C26734 * C18350 + C26431 * C18846 + C26733 * C16838 +
            C26430 * C17363 + C26732 * C3370 + C26429 * C3710) *
               C90498 +
           (C26734 * C18349 + C26431 * C18845 + C26733 * C16835 +
            C26430 * C17361 + C26732 * C3367 + C26429 * C3707) *
               C3364) *
              C90485 * C90623 * C90567 * C3363)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C26732 * C107 + C26429 * C555 + C26733 * C1700 + C26430 * C2264 +
             C26734 * C4656 + C26431 * C5191) *
                C3364 +
            (C26732 * C116 + C26429 * C561 + C26733 * C1707 + C26430 * C2268 +
             C26734 * C4663 + C26431 * C5195) *
                C90498) *
               C90485 * C90623 * C4653 -
           ((C26734 * C6168 + C26431 * C6508 + C26733 * C4663 + C26430 * C5195 +
             C26732 * C1707 + C26429 * C2268) *
                C90498 +
            (C26734 * C6165 + C26431 * C6505 + C26733 * C4656 + C26430 * C5191 +
             C26732 * C1700 + C26429 * C2264) *
                C3364) *
               C90485 * C90623 * C4654 +
           ((C26732 * C4656 + C26429 * C5191 + C26733 * C6165 + C26430 * C6505 +
             C26734 * C30247 + C26431 * C30808) *
                C3364 +
            (C26732 * C4663 + C26429 * C5195 + C26733 * C6168 + C26430 * C6508 +
             C26734 * C30250 + C26431 * C30810) *
                C90498) *
               C90485 * C90623 * C4655) *
              C90752 +
          (((C26732 * C3891 + C26429 * C4407 + C26733 * C5471 + C26430 * C5951 +
             C26734 * C19088 + C26431 * C19412) *
                C3364 +
            (C26732 * C3900 + C26429 * C4413 + C26733 * C5474 + C26430 * C5954 +
             C26734 * C19091 + C26431 * C19414) *
                C90498) *
               C90485 * C90623 * C4654 -
           ((C26734 * C5474 + C26431 * C5954 + C26733 * C3900 + C26430 * C4413 +
             C26732 * C839 + C26429 * C1400) *
                C90498 +
            (C26734 * C5471 + C26431 * C5951 + C26733 * C3891 + C26430 * C4407 +
             C26732 * C832 + C26429 * C1396) *
                C3364) *
               C90485 * C90623 * C4653 -
           ((C26734 * C31039 + C26431 * C31564 + C26733 * C19091 +
             C26430 * C19414 + C26732 * C5474 + C26429 * C5954) *
                C90498 +
            (C26734 * C31038 + C26431 * C31563 + C26733 * C19088 +
             C26430 * C19412 + C26732 * C5471 + C26429 * C5951) *
                C3364) *
               C90485 * C90623 * C4655) *
              C90555)) /
            (p * q * std::sqrt(p + q));
    d2eezy[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C554 * C107 + C90634 * C555) * C923 +
                (C554 * C182 + C90634 * C641) * C90752 -
                (C554 * C832 + C90634 * C1396) * C924 -
                (C554 * C927 + C90634 * C1497) * C90555) *
                   C89 +
               (C1503 + C1504 - C1505 - C1522) * C90 + C1526 * C91) *
                  C90623 * C821 +
              ((C1505 - (C1504 + C1503) + C1522) * C89 +
               (C1510 - (C1509 + C1508) + C1524) * C90 +
               (C1513 - (C1514 + C1515) + C1525) * C91) *
                  C90623 * C822 +
              (C1526 * C89 + (C1515 + C1514 - C1513 - C1525) * C90 +
               (C590 * C923 + C663 * C90752 -
                (C554 * C833 + C90634 * C1399) * C924 -
                (C554 * C929 + C90634 * C1501) * C90555) *
                   C91) *
                  C90623 * C823) *
             C90567 +
         0.5 * std::pow(Pi, 2.5) *
             (((C554 * C107 + C90634 * C555) * C3427 +
               (C554 * C182 + C90634 * C641) * C3360 -
               (C554 * C832 + C90634 * C1396) * C3428 -
               (C554 * C927 + C90634 * C1497) * C3361 +
               (C554 * C2570 + C90634 * C3105) * C3429 +
               (C554 * C2663 + C90634 * C3199) * C3362 -
               (C554 * C3367 + C90634 * C3707) * C3430 -
               (C554 * C3433 + C90634 * C3761) * C3363) *
                  C89 +
              (C584 * C3427 + C660 * C3360 - C1418 * C3428 - C1518 * C3361 +
               C3122 * C3429 + C3218 * C3362 -
               (C554 * C3366 + C90634 * C3706) * C3430 -
               (C554 * C3432 + C90634 * C3762) * C3363) *
                  C90 +
              (C586 * C3427 + C661 * C3360 - C1420 * C3428 - C1520 * C3361 +
               C3124 * C3429 + C3219 * C3362 -
               (C554 * C3365 + C90634 * C3705) * C3430 -
               (C554 * C3431 + C90634 * C3763) * C3363) *
                  C91) *
             C90623 * C90498 * C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C923 +
            (C554 * C182 + C90634 * C641) * C90752 -
            (C554 * C832 + C90634 * C1396) * C924 -
            (C554 * C927 + C90634 * C1497) * C90555) *
               C89 +
           (C1503 + C1504 - C1505 - C1522) * C90 + C1526 * C91) *
              C90623 * C90498 * C4653 +
          (((C554 * C3891 + C90634 * C4407) * C924 -
            ((C554 * C1794 + C90634 * C2368) * C90752 +
             (C554 * C1700 + C90634 * C2264) * C923) +
            (C554 * C3989 + C90634 * C4493) * C90555) *
               C89 +
           ((C554 * C3892 + C90634 * C4408) * C924 -
            (C2380 * C90752 + C2286 * C923) +
            (C554 * C3990 + C90634 * C4495) * C90555) *
               C90 +
           ((C554 * C3893 + C90634 * C4409) * C924 -
            (C2381 * C90752 + C2288 * C923) +
            (C554 * C3991 + C90634 * C4497) * C90555) *
               C91) *
              C90623 * C90498 * C4654 +
          (((C554 * C4656 + C90634 * C5191) * C923 +
            (C554 * C4746 + C90634 * C5285) * C90752 -
            (C554 * C5471 + C90634 * C5951) * C924 -
            (C554 * C5557 + C90634 * C6029) * C90555) *
               C89 +
           (C5208 * C923 + C5296 * C90752 -
            (C554 * C5470 + C90634 * C5950) * C924 -
            (C554 * C5556 + C90634 * C6030) * C90555) *
               C90 +
           (C5210 * C923 + C5297 * C90752 -
            (C554 * C5469 + C90634 * C5949) * C924 -
            (C554 * C5555 + C90634 * C6031) * C90555) *
               C91) *
              C90623 * C90498 * C4655)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C923 +
            (C554 * C182 + C90634 * C641) * C90752 - C14614 * C924 -
            C14700 * C90555) *
               C90485 * C13576 +
           (C14614 * C923 + C14700 * C90752 - C14616 * C924 - C14701 * C90555) *
               C90485 * C13577 +
           (C14616 * C923 + C14701 * C90752 -
            (C554 * C3367 + C90634 * C3707) * C924 -
            (C554 * C3433 + C90634 * C3761) * C90555) *
               C90485 * C13578) *
              C821 +
          ((C1505 - (C1504 + C1503) + C1522) * C90485 * C13576 +
           (C3122 * C924 - (C1518 * C90752 + C1418 * C923) + C3218 * C90555) *
               C90485 * C13577 +
           ((C554 * C3366 + C90634 * C3706) * C924 -
            (C3218 * C90752 + C3122 * C923) +
            (C554 * C3432 + C90634 * C3762) * C90555) *
               C90485 * C13578) *
              C822 +
          (C1526 * C90485 * C13576 +
           (C1420 * C923 + C1520 * C90752 - C3124 * C924 - C3219 * C90555) *
               C90485 * C13577 +
           (C3124 * C923 + C3219 * C90752 -
            (C554 * C3365 + C90634 * C3705) * C924 -
            (C554 * C3431 + C90634 * C3763) * C90555) *
               C90485 * C13578) *
              C823) *
         C90567) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C554 * C107 + C90634 * C555) * C3427 +
           (C554 * C182 + C90634 * C641) * C3360 - C14614 * C3428 -
           C14700 * C3361 + C14616 * C3429 + C14701 * C3362 - C16062 * C3430 -
           C16151 * C3363) *
              C90485 * C13576 +
          (C14614 * C3427 + C14700 * C3360 - C14616 * C3428 - C14701 * C3361 +
           C16062 * C3429 + C16151 * C3362 - C16644 * C3430 - C16703 * C3363) *
              C90485 * C13577 +
          (C14616 * C3427 + C14701 * C3360 - C16062 * C3428 - C16151 * C3361 +
           C16644 * C3429 + C16703 * C3362 -
           (C554 * C16292 + C90634 * C16629) * C3430 -
           (C554 * C16362 + C90634 * C16699) * C3363) *
              C90485 * C13578) *
         C90498 * C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C923 +
            (C554 * C182 + C90634 * C641) * C90752 - C14614 * C924 -
            C14700 * C90555) *
               C90485 * C13576 +
           (C14614 * C923 + C14700 * C90752 - C14616 * C924 - C14701 * C90555) *
               C90485 * C13577 +
           (C14616 * C923 + C14701 * C90752 - C16062 * C924 - C16151 * C90555) *
               C90485 * C13578) *
              C90498 * C4653 +
          ((C17381 * C924 -
            ((C554 * C1794 + C90634 * C2368) * C90752 +
             (C554 * C1700 + C90634 * C2264) * C923) +
            C17474 * C90555) *
               C90485 * C13576 +
           (C17379 * C924 - (C17474 * C90752 + C17381 * C923) +
            C17475 * C90555) *
               C90485 * C13577 +
           (C17382 * C924 - (C17475 * C90752 + C17379 * C923) +
            C17476 * C90555) *
               C90485 * C13578) *
              C90498 * C4654 +
          (((C554 * C4656 + C90634 * C5191) * C923 +
            (C554 * C4746 + C90634 * C5285) * C90752 - C18856 * C924 -
            C18943 * C90555) *
               C90485 * C13576 +
           (C18856 * C923 + C18943 * C90752 - C18858 * C924 - C18944 * C90555) *
               C90485 * C13577 +
           (C18858 * C923 + C18944 * C90752 -
            (C554 * C18349 + C90634 * C18845) * C924 -
            (C554 * C18443 + C90634 * C18937) * C90555) *
               C90485 * C13578) *
              C90498 * C4655)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C26732 * C107 + C26429 * C555 + C26733 * C1700 + C26430 * C2264 +
            C26734 * C4656 + C26431 * C5191) *
               C923 +
           (C26732 * C182 + C26429 * C641 + C26733 * C1794 + C26430 * C2368 +
            C26734 * C4746 + C26431 * C5285) *
               C90752 -
           (C26734 * C5471 + C26431 * C5951 + C26733 * C3891 + C26430 * C4407 +
            C26732 * C832 + C26429 * C1396) *
               C924 -
           (C26734 * C5557 + C26431 * C6029 + C26733 * C3989 + C26430 * C4493 +
            C26732 * C927 + C26429 * C1497) *
               C90555) *
              C90485 * C90623 * C821 +
          ((C26732 * C829 + C26429 * C1395 + C26733 * C3892 + C26430 * C4408 +
            C26734 * C5470 + C26431 * C5950) *
               C924 -
           ((C26734 * C4747 + C26431 * C5286 + C26733 * C1791 + C26430 * C2365 +
             C26732 * C183 + C26429 * C642) *
                C90752 +
            (C26734 * C4657 + C26431 * C5192 + C26733 * C1697 + C26430 * C2263 +
             C26732 * C108 + C26429 * C556) *
                C923) +
           (C26732 * C926 + C26429 * C1498 + C26733 * C3990 + C26430 * C4495 +
            C26734 * C5556 + C26431 * C6030) *
               C90555) *
              C90485 * C90623 * C822 +
          ((C26732 * C109 + C26429 * C557 + C26733 * C1698 + C26430 * C2265 +
            C26734 * C4658 + C26431 * C5193) *
               C923 +
           (C26732 * C184 + C26429 * C643 + C26733 * C1792 + C26430 * C2366 +
            C26734 * C4748 + C26431 * C5287) *
               C90752 -
           (C26734 * C5469 + C26431 * C5949 + C26733 * C3893 + C26430 * C4409 +
            C26732 * C830 + C26429 * C1397) *
               C924 -
           (C26734 * C5555 + C26431 * C6031 + C26733 * C3991 + C26430 * C4497 +
            C26732 * C925 + C26429 * C1499) *
               C90555) *
              C90485 * C90623 * C823) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((C26732 * C107 + C26429 * C555 + C26733 * C1700 + C26430 * C2264 +
           C26734 * C4656 + C26431 * C5191) *
              C3427 +
          (C26732 * C182 + C26429 * C641 + C26733 * C1794 + C26430 * C2368 +
           C26734 * C4746 + C26431 * C5285) *
              C3360 -
          (C26734 * C5471 + C26431 * C5951 + C26733 * C3891 + C26430 * C4407 +
           C26732 * C832 + C26429 * C1396) *
              C3428 -
          (C26734 * C5557 + C26431 * C6029 + C26733 * C3989 + C26430 * C4493 +
           C26732 * C927 + C26429 * C1497) *
              C3361 +
          (C26732 * C2570 + C26429 * C3105 + C26733 * C3896 + C26430 * C4412 +
           C26734 * C17651 + C26431 * C18119) *
              C3429 +
          (C26732 * C2663 + C26429 * C3199 + C26733 * C3994 + C26430 * C4494 +
           C26734 * C17733 + C26431 * C18197) *
              C3362 -
          (C26734 * C18349 + C26431 * C18845 + C26733 * C16835 +
           C26430 * C17361 + C26732 * C3367 + C26429 * C3707) *
              C3430 -
          (C26734 * C18443 + C26431 * C18937 + C26733 * C16942 +
           C26430 * C17465 + C26732 * C3433 + C26429 * C3761) *
              C3363) *
         C90485 * C90623 * C90498 * C90567) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C26732 * C107 + C26429 * C555 + C26733 * C1700 + C26430 * C2264 +
            C26734 * C4656 + C26431 * C5191) *
               C923 +
           (C26732 * C182 + C26429 * C641 + C26733 * C1794 + C26430 * C2368 +
            C26734 * C4746 + C26431 * C5285) *
               C90752 -
           (C26734 * C5471 + C26431 * C5951 + C26733 * C3891 + C26430 * C4407 +
            C26732 * C832 + C26429 * C1396) *
               C924 -
           (C26734 * C5557 + C26431 * C6029 + C26733 * C3989 + C26430 * C4493 +
            C26732 * C927 + C26429 * C1497) *
               C90555) *
              C90485 * C90623 * C90498 * C4653 +
          ((C26732 * C3891 + C26429 * C4407 + C26733 * C5471 + C26430 * C5951 +
            C26734 * C19088 + C26431 * C19412) *
               C924 -
           ((C26734 * C6227 + C26431 * C6561 + C26733 * C4746 + C26430 * C5285 +
             C26732 * C1794 + C26429 * C2368) *
                C90752 +
            (C26734 * C6165 + C26431 * C6505 + C26733 * C4656 + C26430 * C5191 +
             C26732 * C1700 + C26429 * C2264) *
                C923) +
           (C26732 * C3989 + C26429 * C4493 + C26733 * C5557 + C26430 * C6029 +
            C26734 * C19146 + C26431 * C19466) *
               C90555) *
              C90485 * C90623 * C90498 * C4654 +
          ((C26732 * C4656 + C26429 * C5191 + C26733 * C6165 + C26430 * C6505 +
            C26734 * C30247 + C26431 * C30808) *
               C923 +
           (C26732 * C4746 + C26429 * C5285 + C26733 * C6227 + C26430 * C6561 +
            C26734 * C30357 + C26431 * C30886) *
               C90752 -
           (C26734 * C31038 + C26431 * C31563 + C26733 * C19088 +
            C26430 * C19412 + C26732 * C5471 + C26429 * C5951) *
               C924 -
           (C26734 * C31130 + C26431 * C31639 + C26733 * C19146 +
            C26430 * C19466 + C26732 * C5557 + C26429 * C6029) *
               C90555) *
              C90485 * C90623 * C90498 * C4655)) /
            (p * q * std::sqrt(p + q));
    d2eezz[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C554 * C107 + C90634 * C555) * C244 +
                 (C554 * C245 + C90634 * C719) * C90567) *
                    C89 +
                (C726 + C742) * C90 + C746 * C91) *
                   C90623 * C90752 -
               (C1621 * C91 + (C1619 + C1611) * C90 +
                ((C554 * C1011 + C90634 * C1602) * C90567 +
                 (C554 * C832 + C90634 * C1396) * C244) *
                    C89) *
                   C90623 * C90555) *
                  C821 +
              (((C1611 + C1619) * C89 + (C1608 + C1618) * C90 +
                (C1612 + C1620) * C91) *
                   C90623 * C90555 -
               (C747 * C91 + (C743 + C729) * C90 + (C742 + C726) * C89) *
                   C90623 * C90752) *
                  C822 +
              ((C746 * C89 + (C734 + C744) * C90 + (C735 + C745) * C91) *
                   C90623 * C90752 -
               (((C554 * C1013 + C90634 * C1604) * C90567 +
                 (C554 * C833 + C90634 * C1399) * C244) *
                    C91 +
                (C1620 + C1612) * C90 + C1621 * C89) *
                   C90623 * C90555) *
                  C823) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C554 * C107 + C90634 * C555) * C244 +
                (C554 * C245 + C90634 * C719) * C90567) *
                   C89 +
               (C726 + C742) * C90 + C746 * C91) *
                  C90623 * C3360 -
              (C1621 * C91 + (C1619 + C1611) * C90 +
               ((C554 * C1011 + C90634 * C1602) * C90567 +
                (C554 * C832 + C90634 * C1396) * C244) *
                   C89) *
                  C90623 * C3361 +
              (((C554 * C2570 + C90634 * C3105) * C244 +
                (C554 * C2745 + C90634 * C3295) * C90567) *
                   C89 +
               (C3300 + C3308) * C90 + (C3303 + C3309) * C91) *
                  C90623 * C3362 -
              (((C554 * C3487 + C90634 * C3814) * C90567 +
                (C554 * C3365 + C90634 * C3705) * C244) *
                   C91 +
               ((C554 * C3488 + C90634 * C3815) * C90567 +
                (C554 * C3366 + C90634 * C3706) * C244) *
                   C90 +
               ((C554 * C3489 + C90634 * C3816) * C90567 +
                (C554 * C3367 + C90634 * C3707) * C244) *
                   C89) *
                  C90623 * C3363) *
             C90498) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C4828 +
            (C554 * C245 + C90634 * C719) * C4653 -
            (C554 * C1700 + C90634 * C2264) * C4829 -
            (C554 * C1879 + C90634 * C2460) * C4654 +
            (C554 * C4656 + C90634 * C5191) * C4830 +
            (C554 * C4831 + C90634 * C5373) * C4655) *
               C89 +
           (C5378 + C5379 - C5380 - C5381 + C5382 + C5394) * C90 +
           (C5385 + C5386 - C5387 - C5388 + C5389 + C5395) * C91) *
              C90623 * C90752 +
          (((C554 * C3891 + C90634 * C4407) * C4829 -
            ((C554 * C1011 + C90634 * C1602) * C4653 +
             (C554 * C832 + C90634 * C1396) * C4828) +
            (C554 * C4075 + C90634 * C4573) * C4654 -
            (C554 * C5471 + C90634 * C5951) * C4830 -
            (C554 * C5637 + C90634 * C6106) * C4655) *
               C89 +
           ((C554 * C3892 + C90634 * C4408) * C4829 -
            (C1616 * C4653 + C1418 * C4828) +
            (C554 * C4076 + C90634 * C4574) * C4654 -
            (C554 * C5470 + C90634 * C5950) * C4830 -
            (C554 * C5636 + C90634 * C6107) * C4655) *
               C90 +
           ((C554 * C3893 + C90634 * C4409) * C4829 -
            (C1615 * C4653 + C1420 * C4828) +
            (C554 * C4077 + C90634 * C4575) * C4654 -
            (C554 * C5469 + C90634 * C5949) * C4830 -
            (C554 * C5635 + C90634 * C6108) * C4655) *
               C91) *
              C90623 * C90555) *
         C90498) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C244 +
             (C554 * C245 + C90634 * C719) * C90567) *
                C90485 * C13576 +
            (C14776 + C14784) * C90485 * C13577 +
            (C14779 + C14785) * C90485 * C13578) *
               C90752 -
           (((C554 * C3489 + C90634 * C3816) * C90567 +
             (C554 * C3367 + C90634 * C3707) * C244) *
                C90485 * C13578 +
            (C14785 + C14779) * C90485 * C13577 +
            (C14784 + C14776) * C90485 * C13576) *
               C90555) *
              C821 +
          (((C1611 + C1619) * C90485 * C13576 +
            (C3300 + C3308) * C90485 * C13577 +
            ((C554 * C3366 + C90634 * C3706) * C244 +
             (C554 * C3488 + C90634 * C3815) * C90567) *
                C90485 * C13578) *
               C90555 -
           ((C3308 + C3300) * C90485 * C13578 +
            (C1619 + C1611) * C90485 * C13577 +
            (C742 + C726) * C90485 * C13576) *
               C90752) *
              C822 +
          ((C746 * C90485 * C13576 + (C1608 + C1618) * C90485 * C13577 +
            (C3303 + C3309) * C90485 * C13578) *
               C90752 -
           (((C554 * C3487 + C90634 * C3814) * C90567 +
             (C554 * C3365 + C90634 * C3705) * C244) *
                C90485 * C13578 +
            (C3309 + C3303) * C90485 * C13577 + C1621 * C90485 * C13576) *
               C90555) *
              C823)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C244 +
            (C554 * C245 + C90634 * C719) * C90567) *
               C90485 * C13576 +
           (C14776 + C14784) * C90485 * C13577 + C16237 * C13578) *
              C3360 -
          (C16759 * C13578 + (C14785 + C14779) * C90485 * C13577 +
           (C14784 + C14776) * C90485 * C13576) *
              C3361 +
          (C16237 * C13576 + (C16232 + C16241) * C90485 * C13577 +
           (C16756 + C16761) * C90485 * C13578) *
              C3362 -
          (((C554 * C16417 + C90634 * C16753) * C90567 +
            (C554 * C16292 + C90634 * C16629) * C244) *
               C90485 * C13578 +
           (C16761 + C16756) * C90485 * C13577 + C16759 * C13576) *
              C3363) *
         C90498) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C4828 +
            (C554 * C245 + C90634 * C719) * C4653 -
            (C554 * C1700 + C90634 * C2264) * C4829 -
            (C554 * C1879 + C90634 * C2460) * C4654 +
            (C554 * C4656 + C90634 * C5191) * C4830 +
            (C554 * C4831 + C90634 * C5373) * C4655) *
               C90485 * C13576 +
           (C19020 + C19021 - C19022 - C19023 + C19024 + C19036) * C90485 *
               C13577 +
           (C19027 + C19028 - C19029 - C19030 + C19031 + C19037) * C90485 *
               C13578) *
              C90752 +
          ((C19022 - (C19021 + C19020) + C19023 - C19024 - C19036) * C90485 *
               C13576 +
           (C19029 - (C19028 + C19027) + C19030 - C19031 - C19037) * C90485 *
               C13577 +
           (C17382 * C4829 - (C16238 * C4653 + C16062 * C4828) +
            C17571 * C4654 - (C554 * C18349 + C90634 * C18845) * C4830 -
            (C554 * C18525 + C90634 * C19018) * C4655) *
               C90485 * C13578) *
              C90555) *
         C90498) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C26732 * C107 + C26429 * C555 + C26733 * C1700 + C26430 * C2264 +
             C26734 * C4656 + C26431 * C5191) *
                C244 +
            (C26732 * C245 + C26429 * C719 + C26733 * C1879 + C26430 * C2460 +
             C26734 * C4831 + C26431 * C5373) *
                C90567) *
               C90485 * C90623 * C90752 -
           ((C26734 * C5637 + C26431 * C6106 + C26733 * C4075 + C26430 * C4573 +
             C26732 * C1011 + C26429 * C1602) *
                C90567 +
            (C26734 * C5471 + C26431 * C5951 + C26733 * C3891 + C26430 * C4407 +
             C26732 * C832 + C26429 * C1396) *
                C244) *
               C90485 * C90623 * C90555) *
              C821 +
          (((C26732 * C829 + C26429 * C1395 + C26733 * C3892 + C26430 * C4408 +
             C26734 * C5470 + C26431 * C5950) *
                C244 +
            (C26732 * C1010 + C26429 * C1601 + C26733 * C4076 + C26430 * C4574 +
             C26734 * C5636 + C26431 * C6107) *
                C90567) *
               C90485 * C90623 * C90555 -
           ((C26734 * C4832 + C26431 * C5374 + C26733 * C1878 + C26430 * C2461 +
             C26732 * C246 + C26429 * C720) *
                C90567 +
            (C26734 * C4657 + C26431 * C5192 + C26733 * C1697 + C26430 * C2263 +
             C26732 * C108 + C26429 * C556) *
                C244) *
               C90485 * C90623 * C90752) *
              C822 +
          (((C26732 * C109 + C26429 * C557 + C26733 * C1698 + C26430 * C2265 +
             C26734 * C4658 + C26431 * C5193) *
                C244 +
            (C26732 * C247 + C26429 * C721 + C26733 * C1877 + C26430 * C2462 +
             C26734 * C4833 + C26431 * C5375) *
                C90567) *
               C90485 * C90623 * C90752 -
           ((C26734 * C5635 + C26431 * C6108 + C26733 * C4077 + C26430 * C4575 +
             C26732 * C1009 + C26429 * C1600) *
                C90567 +
            (C26734 * C5469 + C26431 * C5949 + C26733 * C3893 + C26430 * C4409 +
             C26732 * C830 + C26429 * C1397) *
                C244) *
               C90485 * C90623 * C90555) *
              C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C26732 * C107 + C26429 * C555 + C26733 * C1700 + C26430 * C2264 +
            C26734 * C4656 + C26431 * C5191) *
               C244 +
           (C26732 * C245 + C26429 * C719 + C26733 * C1879 + C26430 * C2460 +
            C26734 * C4831 + C26431 * C5373) *
               C90567) *
              C90485 * C90623 * C3360 -
          ((C26734 * C5637 + C26431 * C6106 + C26733 * C4075 + C26430 * C4573 +
            C26732 * C1011 + C26429 * C1602) *
               C90567 +
           (C26734 * C5471 + C26431 * C5951 + C26733 * C3891 + C26430 * C4407 +
            C26732 * C832 + C26429 * C1396) *
               C244) *
              C90485 * C90623 * C3361 +
          ((C26732 * C2570 + C26429 * C3105 + C26733 * C3896 + C26430 * C4412 +
            C26734 * C17651 + C26431 * C18119) *
               C244 +
           (C26732 * C2745 + C26429 * C3295 + C26733 * C4080 + C26430 * C4576 +
            C26734 * C17811 + C26431 * C18273) *
               C90567) *
              C90485 * C90623 * C3362 -
          ((C26734 * C18525 + C26431 * C19018 + C26733 * C17029 +
            C26430 * C17550 + C26732 * C3489 + C26429 * C3816) *
               C90567 +
           (C26734 * C18349 + C26431 * C18845 + C26733 * C16835 +
            C26430 * C17361 + C26732 * C3367 + C26429 * C3707) *
               C244) *
              C90485 * C90623 * C3363) *
         C90498) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C26732 * C107 + C26429 * C555 + C26733 * C1700 + C26430 * C2264 +
            C26734 * C4656 + C26431 * C5191) *
               C4828 +
           (C26732 * C245 + C26429 * C719 + C26733 * C1879 + C26430 * C2460 +
            C26734 * C4831 + C26431 * C5373) *
               C4653 -
           (C26734 * C6165 + C26431 * C6505 + C26733 * C4656 + C26430 * C5191 +
            C26732 * C1700 + C26429 * C2264) *
               C4829 -
           (C26734 * C6287 + C26431 * C6612 + C26733 * C4831 + C26430 * C5373 +
            C26732 * C1879 + C26429 * C2460) *
               C4654 +
           (C26732 * C4656 + C26429 * C5191 + C26733 * C6165 + C26430 * C6505 +
            C26734 * C30247 + C26431 * C30808) *
               C4830 +
           (C26732 * C4831 + C26429 * C5373 + C26733 * C6287 + C26430 * C6612 +
            C26734 * C30449 + C26431 * C30962) *
               C4655) *
              C90485 * C90623 * C90752 +
          ((C26732 * C3891 + C26429 * C4407 + C26733 * C5471 + C26430 * C5951 +
            C26734 * C19088 + C26431 * C19412) *
               C4829 -
           ((C26734 * C5637 + C26431 * C6106 + C26733 * C4075 + C26430 * C4573 +
             C26732 * C1011 + C26429 * C1602) *
                C4653 +
            (C26734 * C5471 + C26431 * C5951 + C26733 * C3891 + C26430 * C4407 +
             C26732 * C832 + C26429 * C1396) *
                C4828) +
           (C26732 * C4075 + C26429 * C4573 + C26733 * C5637 + C26430 * C6106 +
            C26734 * C19199 + C26431 * C19517) *
               C4654 -
           (C26734 * C31038 + C26431 * C31563 + C26733 * C19088 +
            C26430 * C19412 + C26732 * C5471 + C26429 * C5951) *
               C4830 -
           (C26734 * C31225 + C26431 * C31714 + C26733 * C19199 +
            C26430 * C19517 + C26732 * C5637 + C26429 * C6106) *
               C4655) *
              C90485 * C90623 * C90555) *
         C90498) /
            (p * q * std::sqrt(p + q));
    d2eexx[38] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                C102 * C109 + C91 * C115) *
                   C826 +
               (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 +
                C102 * C118 + C91 * C127) *
                   C821 -
               (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                C100 * C108 + C89 * C114) *
                   C827 -
               (C102 * C120 + C91 * C128 + C101 * C118 + C90 * C127 +
                C100 * C117 + C89 * C126) *
                   C822 +
               (C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 +
                C102 * C111 + C91 * C121) *
                   C828 +
               (C100 * C118 + C89 * C127 + C101 * C120 + C90 * C128 +
                C102 * C122 + C91 * C129) *
                   C823) *
                  C90623 * C90634 * C90753 +
              ((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
                C102 * C1699 + C91 * C1704) *
                   C827 -
               ((C102 * C1705 + C91 * C1712 + C101 * C1706 + C90 * C1713 +
                 C100 * C1707 + C89 * C1714) *
                    C821 +
                (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
                 C100 * C1700 + C89 * C1708) *
                    C826) +
               (C100 * C1706 + C89 * C1713 + C101 * C1705 + C90 * C1712 +
                C102 * C1709 + C91 * C1715) *
                   C822 -
               (C102 * C1701 + C91 * C1710 + C101 * C1699 + C90 * C1704 +
                C100 * C1698 + C89 * C1703) *
                   C828 -
               (C102 * C1711 + C91 * C1716 + C101 * C1709 + C90 * C1715 +
                C100 * C1705 + C89 * C1712) *
                   C823) *
                  C90623 * C90634 * C90579) *
             C90541 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                 C102 * C109 + C91 * C115) *
                    C3364 +
                (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 +
                 C102 * C118 + C91 * C127) *
                    C90498) *
                   C90623 * C90634 * C90753 -
               ((C102 * C1705 + C91 * C1712 + C101 * C1706 + C90 * C1713 +
                 C100 * C1707 + C89 * C1714) *
                    C90498 +
                (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
                 C100 * C1700 + C89 * C1708) *
                    C3364) *
                   C90623 * C90634 * C90579) *
                  C2565 +
              (((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
                 C102 * C3893 + C91 * C3899) *
                    C3364 +
                (C100 * C3900 + C89 * C3909 + C101 * C3901 + C90 * C3910 +
                 C102 * C3902 + C91 * C3911) *
                    C90498) *
                   C90623 * C90634 * C90579 -
               ((C102 * C837 + C91 * C844 + C101 * C838 + C90 * C845 +
                 C100 * C839 + C89 * C846) *
                    C90498 +
                (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                 C100 * C832 + C89 * C840) *
                    C3364) *
                   C90623 * C90634 * C90753) *
                  C2566 +
              (((C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
                 C102 * C2572 + C91 * C2576) *
                    C3364 +
                (C100 * C2577 + C89 * C2582 + C101 * C2578 + C90 * C2583 +
                 C102 * C2579 + C91 * C2584) *
                    C90498) *
                   C90623 * C90634 * C90753 -
               ((C102 * C3903 + C91 * C3912 + C101 * C3904 + C90 * C3913 +
                 C100 * C3905 + C89 * C3914) *
                    C90498 +
                (C102 * C3894 + C91 * C3906 + C101 * C3895 + C90 * C3907 +
                 C100 * C3896 + C89 * C3908) *
                    C3364) *
                   C90623 * C90634 * C90579) *
                  C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C3364 +
           (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 + C102 * C118 +
            C91 * C127) *
               C90498) *
              C90623 * C90634 * C6159 -
          ((C102 * C1705 + C91 * C1712 + C101 * C1706 + C90 * C1713 +
            C100 * C1707 + C89 * C1714) *
               C90498 +
           (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
            C100 * C1700 + C89 * C1708) *
               C3364) *
              C90623 * C90634 * C6160 +
          ((C100 * C4656 + C89 * C4660 + C101 * C4657 + C90 * C4661 +
            C102 * C4658 + C91 * C4662) *
               C3364 +
           (C100 * C4663 + C89 * C4668 + C101 * C4664 + C90 * C4669 +
            C102 * C4665 + C91 * C4670) *
               C90498) *
              C90623 * C90634 * C6161 -
          ((C102 * C6166 + C91 * C6172 + C101 * C6167 + C90 * C6173 +
            C100 * C6168 + C89 * C6174) *
               C90498 +
           (C102 * C6163 + C91 * C6169 + C101 * C6164 + C90 * C6170 +
            C100 * C6165 + C89 * C6171) *
               C3364) *
              C90623 * C90634 * C6162) *
         C90541) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C826 +
            (C13579 * C116 + C90485 * C125) * C821 -
            (C13579 * C108 + C90485 * C114) * C827 -
            (C13579 * C117 + C90485 * C126) * C822 +
            (C13579 * C109 + C90485 * C115) * C828 +
            (C13579 * C118 + C90485 * C127) * C823) *
               C13576 +
           (C14094 + C14095 - C14096 - C14097 + C14098 + C14099) * C13577 +
           (C14100 + C14101 - C14102 - C14103 + C14104 + C14105) * C13578) *
              C90634 * C90753 +
          (((C13579 * C1697 + C90485 * C1702) * C827 -
            ((C13579 * C1707 + C90485 * C1714) * C821 +
             (C13579 * C1700 + C90485 * C1708) * C826) +
            (C13579 * C1706 + C90485 * C1713) * C822 -
            (C13579 * C1698 + C90485 * C1703) * C828 -
            (C13579 * C1705 + C90485 * C1712) * C823) *
               C13576 +
           ((C13579 * C3892 + C90485 * C3898) * C827 -
            ((C13579 * C3900 + C90485 * C3909) * C821 +
             (C13579 * C3891 + C90485 * C3897) * C826) +
            (C13579 * C3901 + C90485 * C3910) * C822 -
            (C13579 * C3893 + C90485 * C3899) * C828 -
            (C13579 * C3902 + C90485 * C3911) * C823) *
               C13577 +
           ((C13579 * C3895 + C90485 * C3907) * C827 -
            ((C13579 * C3905 + C90485 * C3914) * C821 +
             (C13579 * C3896 + C90485 * C3908) * C826) +
            (C13579 * C3904 + C90485 * C3913) * C822 -
            (C13579 * C3894 + C90485 * C3906) * C828 -
            (C13579 * C3903 + C90485 * C3912) * C823) *
               C13578) *
              C90634 * C90579) *
         C90541) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C3364 +
             (C13579 * C116 + C90485 * C125) * C90498) *
                C13576 +
            (C16297 + C16298) * C13577 + C16307 * C13578) *
               C90634 * C90753 -
           (C16868 * C13578 + (C16864 + C16865) * C13577 +
            ((C13579 * C1707 + C90485 * C1714) * C90498 +
             (C13579 * C1700 + C90485 * C1708) * C3364) *
                C13576) *
               C90634 * C90579) *
              C2565 +
          (((C16865 + C16864) * C13576 + (C16863 + C16862) * C13577 +
            (C16866 + C16867) * C13578) *
               C90634 * C90579 -
           (C16308 * C13578 + (C16300 + C16299) * C13577 +
            (C16298 + C16297) * C13576) *
               C90634 * C90753) *
              C2566 +
          ((C16307 * C13576 + (C16302 + C16301) * C13577 +
            (C16311 + C16312) * C13578) *
               C90634 * C90753 -
           (((C13579 * C16839 + C90485 * C16842) * C90498 +
             (C13579 * C16836 + C90485 * C16840) * C3364) *
                C13578 +
            (C16867 + C16866) * C13577 + C16868 * C13576) *
               C90634 * C90579) *
              C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C3364 +
            (C13579 * C116 + C90485 * C125) * C90498) *
               C13576 +
           (C16297 + C16298) * C13577 + C16307 * C13578) *
              C90634 * C6159 -
          (C16868 * C13578 + (C16864 + C16865) * C13577 +
           ((C13579 * C1707 + C90485 * C1714) * C90498 +
            (C13579 * C1700 + C90485 * C1708) * C3364) *
               C13576) *
              C90634 * C6160 +
          (((C13579 * C4656 + C90485 * C4660) * C3364 +
            (C13579 * C4663 + C90485 * C4668) * C90498) *
               C13576 +
           (C18366 + C18367) * C13577 + (C18368 + C18369) * C13578) *
              C90634 * C6161 -
          (((C13579 * C19089 + C90485 * C19093) * C90498 +
            (C13579 * C19087 + C90485 * C19090) * C3364) *
               C13578 +
           ((C13579 * C19091 + C90485 * C19094) * C90498 +
            (C13579 * C19088 + C90485 * C19092) * C3364) *
               C13577 +
           ((C13579 * C6168 + C90485 * C6174) * C90498 +
            (C13579 * C6165 + C90485 * C6171) * C3364) *
               C13576) *
              C90634 * C6162) *
         C90541) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C826 +
            (C13579 * C116 + C90485 * C125) * C821 -
            (C13579 * C108 + C90485 * C114) * C827 -
            (C13579 * C117 + C90485 * C126) * C822 +
            (C13579 * C109 + C90485 * C115) * C828 +
            (C13579 * C118 + C90485 * C127) * C823) *
               C90623 * C26429 +
           (C27612 + C27613 - C27614 - C27615 + C27616 + C27617) * C90623 *
               C26430 +
           (C27618 + C27619 - C27620 - C27621 + C27622 + C27623) * C90623 *
               C26431) *
              C90753 +
          ((C27614 - (C27613 + C27612) + C27615 - C27616 - C27617) * C90623 *
               C26429 +
           (C27620 - (C27619 + C27618) + C27621 - C27622 - C27623) * C90623 *
               C26430 +
           ((C13579 * C6164 + C90485 * C6170) * C827 -
            ((C13579 * C6168 + C90485 * C6174) * C821 +
             (C13579 * C6165 + C90485 * C6171) * C826) +
            (C13579 * C6167 + C90485 * C6173) * C822 -
            (C13579 * C6163 + C90485 * C6169) * C828 -
            (C13579 * C6166 + C90485 * C6172) * C823) *
               C90623 * C26431) *
              C90579) *
         C90541) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C3364 +
             (C13579 * C116 + C90485 * C125) * C90498) *
                C90623 * C26429 +
            (C29494 + C29495) * C90623 * C26430 +
            (C29496 + C29497) * C90623 * C26431) *
               C90753 -
           (((C13579 * C6168 + C90485 * C6174) * C90498 +
             (C13579 * C6165 + C90485 * C6171) * C3364) *
                C90623 * C26431 +
            (C29497 + C29496) * C90623 * C26430 +
            (C29495 + C29494) * C90623 * C26429) *
               C90579) *
              C2565 +
          (((C16865 + C16864) * C90623 * C26429 +
            (C18366 + C18367) * C90623 * C26430 +
            ((C13579 * C19088 + C90485 * C19092) * C3364 +
             (C13579 * C19091 + C90485 * C19094) * C90498) *
                C90623 * C26431) *
               C90579 -
           ((C18367 + C18366) * C90623 * C26431 +
            (C16864 + C16865) * C90623 * C26430 +
            (C16298 + C16297) * C90623 * C26429) *
               C90753) *
              C2566 +
          ((C16307 * C90623 * C26429 + (C16863 + C16862) * C90623 * C26430 +
            (C18368 + C18369) * C90623 * C26431) *
               C90753 -
           (((C13579 * C19089 + C90485 * C19093) * C90498 +
             (C13579 * C19087 + C90485 * C19090) * C3364) *
                C90623 * C26431 +
            (C18369 + C18368) * C90623 * C26430 + C16868 * C90623 * C26429) *
               C90579) *
              C2567)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C3364 +
            (C13579 * C116 + C90485 * C125) * C90498) *
               C90623 * C26429 +
           (C29494 + C29495) * C90623 * C26430 + C31051 * C26431) *
              C6159 -
          (C31775 * C26431 + (C29497 + C29496) * C90623 * C26430 +
           (C29495 + C29494) * C90623 * C26429) *
              C6160 +
          (C31051 * C26429 + (C31045 + C31044) * C90623 * C26430 +
           (C31778 + C31779) * C90623 * C26431) *
              C6161 -
          (((C13579 * C31766 + C90485 * C31768) * C90498 +
            (C13579 * C31765 + C90485 * C31767) * C3364) *
               C90623 * C26431 +
           (C31779 + C31778) * C90623 * C26430 + C31775 * C26429) *
              C6162) *
         C90541) /
            (p * q * std::sqrt(p + q));
    d2eexy[38] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                 C102 * C109 + C91 * C115) *
                    C181 +
                (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 +
                 C102 * C184 + C91 * C190) *
                    C90541) *
                   C90623 * C90634 * C821 -
               ((C102 * C185 + C91 * C191 + C101 * C184 + C90 * C190 +
                 C100 * C183 + C89 * C189) *
                    C90541 +
                (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                 C100 * C108 + C89 * C114) *
                    C181) *
                   C90623 * C90634 * C822 +
               ((C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 +
                 C102 * C111 + C91 * C121) *
                    C181 +
                (C100 * C184 + C89 * C190 + C101 * C185 + C90 * C191 +
                 C102 * C186 + C91 * C192) *
                    C90541) *
                   C90623 * C90634 * C823) *
                  C90753 +
              (((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
                 C102 * C1699 + C91 * C1704) *
                    C181 +
                (C100 * C1791 + C89 * C1796 + C101 * C1792 + C90 * C1797 +
                 C102 * C1793 + C91 * C1798) *
                    C90541) *
                   C90623 * C90634 * C822 -
               ((C102 * C1792 + C91 * C1797 + C101 * C1791 + C90 * C1796 +
                 C100 * C1794 + C89 * C1799) *
                    C90541 +
                (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
                 C100 * C1700 + C89 * C1708) *
                    C181) *
                   C90623 * C90634 * C821 -
               ((C102 * C1795 + C91 * C1800 + C101 * C1793 + C90 * C1798 +
                 C100 * C1792 + C89 * C1797) *
                    C90541 +
                (C102 * C1701 + C91 * C1710 + C101 * C1699 + C90 * C1704 +
                 C100 * C1698 + C89 * C1703) *
                    C181) *
                   C90623 * C90634 * C823) *
                  C90579) +
         0.5 * std::pow(Pi, 2.5) *
             (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                C102 * C109 + C91 * C115) *
                   C2660 +
               (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 +
                C102 * C184 + C91 * C190) *
                   C2565 -
               (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                C100 * C832 + C89 * C840) *
                   C2661 -
               (C102 * C925 + C91 * C930 + C101 * C926 + C90 * C931 +
                C100 * C927 + C89 * C932) *
                   C2566 +
               (C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
                C102 * C2572 + C91 * C2576) *
                   C2662 +
               (C100 * C2663 + C89 * C2667 + C101 * C2664 + C90 * C2668 +
                C102 * C2665 + C91 * C2669) *
                   C2567) *
                  C90623 * C90634 * C90498 * C90753 +
              ((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
                C102 * C3893 + C91 * C3899) *
                   C2661 -
               ((C102 * C1792 + C91 * C1797 + C101 * C1791 + C90 * C1796 +
                 C100 * C1794 + C89 * C1799) *
                    C2565 +
                (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
                 C100 * C1700 + C89 * C1708) *
                    C2660) +
               (C100 * C3989 + C89 * C3995 + C101 * C3990 + C90 * C3996 +
                C102 * C3991 + C91 * C3997) *
                   C2566 -
               (C102 * C3894 + C91 * C3906 + C101 * C3895 + C90 * C3907 +
                C100 * C3896 + C89 * C3908) *
                   C2662 -
               (C102 * C3992 + C91 * C3998 + C101 * C3993 + C90 * C3999 +
                C100 * C3994 + C89 * C4000) *
                   C2567) *
                  C90623 * C90634 * C90498 * C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((C100 * C107 + C89 * C113 + C101 * C108 +
                                C90 * C114 + C102 * C109 + C91 * C115) *
                                   C181 +
                               (C100 * C182 + C89 * C188 + C101 * C183 +
                                C90 * C189 + C102 * C184 + C91 * C190) *
                                   C90541) *
                                  C90623 * C90634 * C90498 * C6159 -
                              ((C102 * C1792 + C91 * C1797 + C101 * C1791 +
                                C90 * C1796 + C100 * C1794 + C89 * C1799) *
                                   C90541 +
                               (C102 * C1698 + C91 * C1703 + C101 * C1697 +
                                C90 * C1702 + C100 * C1700 + C89 * C1708) *
                                   C181) *
                                  C90623 * C90634 * C90498 * C6160 +
                              ((C100 * C4656 + C89 * C4660 + C101 * C4657 +
                                C90 * C4661 + C102 * C4658 + C91 * C4662) *
                                   C181 +
                               (C100 * C4746 + C89 * C4750 + C101 * C4747 +
                                C90 * C4751 + C102 * C4748 + C91 * C4752) *
                                   C90541) *
                                  C90623 * C90634 * C90498 * C6161 -
                              ((C102 * C6225 + C91 * C6228 + C101 * C6226 +
                                C90 * C6229 + C100 * C6227 + C89 * C6230) *
                                   C90541 +
                               (C102 * C6163 + C91 * C6169 + C101 * C6164 +
                                C90 * C6170 + C100 * C6165 + C89 * C6171) *
                                   C181) *
                                  C90623 * C90634 * C90498 * C6162)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C181 +
             (C13579 * C182 + C90485 * C188) * C90541) *
                C13576 +
            (C14082 * C181 + C14192 * C90541) * C13577 +
            (C14088 * C181 + C14193 * C90541) * C13578) *
               C90634 * C821 -
           ((C14195 * C90541 + C14090 * C181) * C13578 +
            (C14194 * C90541 + C14084 * C181) * C13577 +
            ((C13579 * C183 + C90485 * C189) * C90541 +
             (C13579 * C108 + C90485 * C114) * C181) *
                C13576) *
               C90634 * C822 +
           (((C13579 * C109 + C90485 * C115) * C181 +
             (C13579 * C184 + C90485 * C190) * C90541) *
                C13576 +
            (C14086 * C181 + C14196 * C90541) * C13577 +
            (C14092 * C181 + C14197 * C90541) * C13578) *
               C90634 * C823) *
              C90753 +
          ((((C13579 * C1697 + C90485 * C1702) * C181 +
             (C13579 * C1791 + C90485 * C1796) * C90541) *
                C13576 +
            ((C13579 * C3892 + C90485 * C3898) * C181 +
             (C13579 * C3990 + C90485 * C3996) * C90541) *
                C13577 +
            ((C13579 * C3895 + C90485 * C3907) * C181 +
             (C13579 * C3993 + C90485 * C3999) * C90541) *
                C13578) *
               C90634 * C822 -
           (((C13579 * C3994 + C90485 * C4000) * C90541 +
             (C13579 * C3896 + C90485 * C3908) * C181) *
                C13578 +
            ((C13579 * C3989 + C90485 * C3995) * C90541 +
             (C13579 * C3891 + C90485 * C3897) * C181) *
                C13577 +
            ((C13579 * C1794 + C90485 * C1799) * C90541 +
             (C13579 * C1700 + C90485 * C1708) * C181) *
                C13576) *
               C90634 * C821 -
           (((C13579 * C3992 + C90485 * C3998) * C90541 +
             (C13579 * C3894 + C90485 * C3906) * C181) *
                C13578 +
            ((C13579 * C3991 + C90485 * C3997) * C90541 +
             (C13579 * C3893 + C90485 * C3899) * C181) *
                C13577 +
            ((C13579 * C1792 + C90485 * C1797) * C90541 +
             (C13579 * C1698 + C90485 * C1703) * C181) *
                C13576) *
               C90634 * C823) *
              C90579)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C2660 +
            (C13579 * C182 + C90485 * C188) * C2565 - C14082 * C2661 -
            C14192 * C2566 + C14088 * C2662 + C14193 * C2567) *
               C13576 +
           (C14082 * C2660 + C14192 * C2565 - C14088 * C2661 - C14193 * C2566 +
            C15553 * C2662 + C15643 * C2567) *
               C13577 +
           (C14088 * C2660 + C14193 * C2565 - C15553 * C2661 - C15643 * C2566 +
            C16309 * C2662 + C16367 * C2567) *
               C13578) *
              C90634 * C90498 * C90753 +
          ((C16859 * C2661 -
            ((C13579 * C1794 + C90485 * C1799) * C2565 +
             (C13579 * C1700 + C90485 * C1708) * C2660) +
            C16953 * C2566 - C16857 * C2662 - C16954 * C2567) *
               C13576 +
           (C16857 * C2661 - (C16953 * C2565 + C16859 * C2660) +
            C16954 * C2566 - C16860 * C2662 - C16955 * C2567) *
               C13577 +
           (C16860 * C2661 - (C16954 * C2565 + C16857 * C2660) +
            C16955 * C2566 - (C13579 * C16836 + C90485 * C16840) * C2662 -
            (C13579 * C16943 + C90485 * C16945) * C2567) *
               C13578) *
              C90634 * C90498 * C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C13579 * C107 + C90485 * C113) * C181 +
                                (C13579 * C182 + C90485 * C188) * C90541) *
                                   C13576 +
                               (C14082 * C181 + C14192 * C90541) * C13577 +
                               (C14088 * C181 + C14193 * C90541) * C13578) *
                                  C90634 * C90498 * C6159 -
                              ((C16954 * C90541 + C16857 * C181) * C13578 +
                               (C16953 * C90541 + C16859 * C181) * C13577 +
                               ((C13579 * C1794 + C90485 * C1799) * C90541 +
                                (C13579 * C1700 + C90485 * C1708) * C181) *
                                   C13576) *
                                  C90634 * C90498 * C6160 +
                              (((C13579 * C4656 + C90485 * C4660) * C181 +
                                (C13579 * C4746 + C90485 * C4750) * C90541) *
                                   C13576 +
                               (C18362 * C181 + C18450 * C90541) * C13577 +
                               (C18364 * C181 + C18451 * C90541) * C13578) *
                                  C90634 * C90498 * C6161 -
                              (((C13579 * C19145 + C90485 * C19147) * C90541 +
                                (C13579 * C19087 + C90485 * C19090) * C181) *
                                   C13578 +
                               ((C13579 * C19146 + C90485 * C19148) * C90541 +
                                (C13579 * C19088 + C90485 * C19092) * C181) *
                                   C13577 +
                               ((C13579 * C6227 + C90485 * C6230) * C90541 +
                                (C13579 * C6165 + C90485 * C6171) * C181) *
                                   C13576) *
                                  C90634 * C90498 * C6162)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C13579 * C107 + C90485 * C113) * C181 +
                                 (C13579 * C182 + C90485 * C188) * C90541) *
                                    C90623 * C26429 +
                                (C27698 + C27722) * C90623 * C26430 +
                                (C27701 + C27723) * C90623 * C26431) *
                                   C821 -
                               ((C27724 + C27706) * C90623 * C26431 +
                                (C27725 + C27709) * C90623 * C26430 +
                                ((C13579 * C183 + C90485 * C189) * C90541 +
                                 (C13579 * C108 + C90485 * C114) * C181) *
                                    C90623 * C26429) *
                                   C822 +
                               (((C13579 * C109 + C90485 * C115) * C181 +
                                 (C13579 * C184 + C90485 * C190) * C90541) *
                                    C90623 * C26429 +
                                (C27710 + C27726) * C90623 * C26430 +
                                (C27713 + C27727) * C90623 * C26431) *
                                   C823) *
                                  C90753 +
                              (((C27709 + C27725) * C90623 * C26429 +
                                (C27706 + C27724) * C90623 * C26430 +
                                ((C13579 * C6164 + C90485 * C6170) * C181 +
                                 (C13579 * C6226 + C90485 * C6229) * C90541) *
                                    C90623 * C26431) *
                                   C822 -
                               (((C13579 * C6227 + C90485 * C6230) * C90541 +
                                 (C13579 * C6165 + C90485 * C6171) * C181) *
                                    C90623 * C26431 +
                                (C27723 + C27701) * C90623 * C26430 +
                                (C27722 + C27698) * C90623 * C26429) *
                                   C821 -
                               (((C13579 * C6225 + C90485 * C6228) * C90541 +
                                 (C13579 * C6163 + C90485 * C6169) * C181) *
                                    C90623 * C26431 +
                                (C27727 + C27713) * C90623 * C26430 +
                                (C27726 + C27710) * C90623 * C26429) *
                                   C823) *
                                  C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C2660 +
            (C13579 * C182 + C90485 * C188) * C2565 - C14082 * C2661 -
            C14192 * C2566 + C14088 * C2662 + C14193 * C2567) *
               C90623 * C26429 +
           (C29572 + C29573 - C29574 - C29575 + C29576 + C29577) * C90623 *
               C26430 +
           (C29578 + C29579 - C29580 - C29581 + C29582 + C29583) * C90623 *
               C26431) *
              C90498 * C90753 +
          ((C29574 - (C29573 + C29572) + C29575 - C29576 - C29577) * C90623 *
               C26429 +
           (C29580 - (C29579 + C29578) + C29581 - C29582 - C29583) * C90623 *
               C26430 +
           ((C13579 * C19088 + C90485 * C19092) * C2661 -
            ((C13579 * C6227 + C90485 * C6230) * C2565 +
             (C13579 * C6165 + C90485 * C6171) * C2660) +
            (C13579 * C19146 + C90485 * C19148) * C2566 -
            (C13579 * C19087 + C90485 * C19090) * C2662 -
            (C13579 * C19145 + C90485 * C19147) * C2567) *
               C90623 * C26431) *
              C90498 * C90579)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C181 +
            (C13579 * C182 + C90485 * C188) * C90541) *
               C90623 * C26429 +
           (C27698 + C27722) * C90623 * C26430 + C30370 * C26431) *
              C90498 * C6159 -
          (C31836 * C26431 + (C27723 + C27701) * C90623 * C26430 +
           (C27722 + C27698) * C90623 * C26429) *
              C90498 * C6160 +
          (C30370 * C26429 + (C30369 + C30375) * C90623 * C26430 +
           (C31833 + C31838) * C90623 * C26431) *
              C90498 * C6161 -
          (((C13579 * C31829 + C90485 * C31830) * C90541 +
            (C13579 * C31765 + C90485 * C31767) * C181) *
               C90623 * C26431 +
           (C31838 + C31833) * C90623 * C26430 + C31836 * C26429) *
              C90498 * C6162)) /
            (p * q * std::sqrt(p + q));
    d2eexz[38] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                C102 * C109 + C91 * C115) *
                   C1875 +
               (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 +
                C102 * C247 + C91 * C253) *
                   C90753 -
               (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
                C100 * C1700 + C89 * C1708) *
                   C1876 -
               (C102 * C1877 + C91 * C1882 + C101 * C1878 + C90 * C1883 +
                C100 * C1879 + C89 * C1884) *
                   C90579) *
                  C90623 * C90634 * C90541 * C821 +
              ((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
                C102 * C1699 + C91 * C1704) *
                   C1876 -
               ((C102 * C248 + C91 * C254 + C101 * C247 + C90 * C253 +
                 C100 * C246 + C89 * C252) *
                    C90753 +
                (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                 C100 * C108 + C89 * C114) *
                    C1875) +
               (C100 * C1878 + C89 * C1883 + C101 * C1877 + C90 * C1882 +
                C102 * C1880 + C91 * C1885) *
                   C90579) *
                  C90623 * C90634 * C90541 * C822 +
              ((C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 +
                C102 * C111 + C91 * C121) *
                   C1875 +
               (C100 * C247 + C89 * C253 + C101 * C248 + C90 * C254 +
                C102 * C249 + C91 * C255) *
                   C90753 -
               (C102 * C1701 + C91 * C1710 + C101 * C1699 + C90 * C1704 +
                C100 * C1698 + C89 * C1703) *
                   C1876 -
               (C102 * C1881 + C91 * C1886 + C101 * C1880 + C90 * C1885 +
                C100 * C1877 + C89 * C1882) *
                   C90579) *
                  C90623 * C90634 * C90541 * C823) +
         0.5 * std::pow(Pi, 2.5) *
             (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                C102 * C109 + C91 * C115) *
                   C1875 +
               (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 +
                C102 * C247 + C91 * C253) *
                   C90753 -
               (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
                C100 * C1700 + C89 * C1708) *
                   C1876 -
               (C102 * C1877 + C91 * C1882 + C101 * C1878 + C90 * C1883 +
                C100 * C1879 + C89 * C1884) *
                   C90579) *
                  C90623 * C90634 * C2565 +
              ((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
                C102 * C3893 + C91 * C3899) *
                   C1876 -
               ((C102 * C1009 + C91 * C1014 + C101 * C1010 + C90 * C1015 +
                 C100 * C1011 + C89 * C1016) *
                    C90753 +
                (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                 C100 * C832 + C89 * C840) *
                    C1875) +
               (C100 * C4075 + C89 * C4081 + C101 * C4076 + C90 * C4082 +
                C102 * C4077 + C91 * C4083) *
                   C90579) *
                  C90623 * C90634 * C2566 +
              ((C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
                C102 * C2572 + C91 * C2576) *
                   C1875 +
               (C100 * C2745 + C89 * C2749 + C101 * C2746 + C90 * C2750 +
                C102 * C2747 + C91 * C2751) *
                   C90753 -
               (C102 * C3894 + C91 * C3906 + C101 * C3895 + C90 * C3907 +
                C100 * C3896 + C89 * C3908) *
                   C1876 -
               (C102 * C4078 + C91 * C4084 + C101 * C4079 + C90 * C4085 +
                C100 * C4080 + C89 * C4086) *
                   C90579) *
                  C90623 * C90634 * C2567) *
             C90498) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
           C91 * C115) *
              C6281 +
          (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 + C102 * C247 +
           C91 * C253) *
              C6159 -
          (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
           C100 * C1700 + C89 * C1708) *
              C6282 -
          (C102 * C1877 + C91 * C1882 + C101 * C1878 + C90 * C1883 +
           C100 * C1879 + C89 * C1884) *
              C6160 +
          (C100 * C4656 + C89 * C4660 + C101 * C4657 + C90 * C4661 +
           C102 * C4658 + C91 * C4662) *
              C6283 +
          (C100 * C4831 + C89 * C4835 + C101 * C4832 + C90 * C4836 +
           C102 * C4833 + C91 * C4837) *
              C6161 -
          (C102 * C6163 + C91 * C6169 + C101 * C6164 + C90 * C6170 +
           C100 * C6165 + C89 * C6171) *
              C6284 -
          (C102 * C6285 + C91 * C6288 + C101 * C6286 + C90 * C6289 +
           C100 * C6287 + C89 * C6290) *
              C6162) *
         C90623 * C90634 * C90541 * C90498) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C1875 +
            (C13579 * C245 + C90485 * C251) * C90753 -
            (C13579 * C1700 + C90485 * C1708) * C1876 -
            (C13579 * C1879 + C90485 * C1884) * C90579) *
               C13576 +
           (C14082 * C1875 + C14290 * C90753 -
            (C13579 * C3891 + C90485 * C3897) * C1876 -
            (C13579 * C4075 + C90485 * C4081) * C90579) *
               C13577 +
           (C14088 * C1875 + C14291 * C90753 -
            (C13579 * C3896 + C90485 * C3908) * C1876 -
            (C13579 * C4080 + C90485 * C4086) * C90579) *
               C13578) *
              C90634 * C90541 * C821 +
          (((C13579 * C1697 + C90485 * C1702) * C1876 -
            ((C13579 * C246 + C90485 * C252) * C90753 +
             (C13579 * C108 + C90485 * C114) * C1875) +
            (C13579 * C1878 + C90485 * C1883) * C90579) *
               C13576 +
           ((C13579 * C3892 + C90485 * C3898) * C1876 -
            (C14292 * C90753 + C14084 * C1875) +
            (C13579 * C4076 + C90485 * C4082) * C90579) *
               C13577 +
           ((C13579 * C3895 + C90485 * C3907) * C1876 -
            (C14293 * C90753 + C14090 * C1875) +
            (C13579 * C4079 + C90485 * C4085) * C90579) *
               C13578) *
              C90634 * C90541 * C822 +
          (((C13579 * C109 + C90485 * C115) * C1875 +
            (C13579 * C247 + C90485 * C253) * C90753 -
            (C13579 * C1698 + C90485 * C1703) * C1876 -
            (C13579 * C1877 + C90485 * C1882) * C90579) *
               C13576 +
           (C14086 * C1875 + C14294 * C90753 -
            (C13579 * C3893 + C90485 * C3899) * C1876 -
            (C13579 * C4077 + C90485 * C4083) * C90579) *
               C13577 +
           (C14092 * C1875 + C14295 * C90753 -
            (C13579 * C3894 + C90485 * C3906) * C1876 -
            (C13579 * C4078 + C90485 * C4084) * C90579) *
               C13578) *
              C90634 * C90541 * C823)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C1875 +
            (C13579 * C245 + C90485 * C251) * C90753 -
            (C13579 * C1700 + C90485 * C1708) * C1876 -
            (C13579 * C1879 + C90485 * C1884) * C90579) *
               C13576 +
           (C17034 + C17035 - C17036 - C17053) * C13577 + C17057 * C13578) *
              C90634 * C2565 +
          ((C17036 - (C17035 + C17034) + C17053) * C13576 +
           (C17041 - (C17040 + C17039) + C17055) * C13577 +
           (C17044 - (C17045 + C17046) + C17056) * C13578) *
              C90634 * C2566 +
          (C17057 * C13576 + (C17046 + C17045 - C17044 - C17056) * C13577 +
           (C16309 * C1875 + C16424 * C90753 -
            (C13579 * C16836 + C90485 * C16840) * C1876 -
            (C13579 * C17030 + C90485 * C17032) * C90579) *
               C13578) *
              C90634 * C2567) *
         C90498) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C13579 * C107 + C90485 * C113) * C6281 +
           (C13579 * C245 + C90485 * C251) * C6159 -
           (C13579 * C1700 + C90485 * C1708) * C6282 -
           (C13579 * C1879 + C90485 * C1884) * C6160 +
           (C13579 * C4656 + C90485 * C4660) * C6283 +
           (C13579 * C4831 + C90485 * C4835) * C6161 -
           (C13579 * C6165 + C90485 * C6171) * C6284 -
           (C13579 * C6287 + C90485 * C6290) * C6162) *
              C13576 +
          (C14082 * C6281 + C14290 * C6159 - C16859 * C6282 - C17049 * C6160 +
           C18362 * C6283 + C18542 * C6161 -
           (C13579 * C19088 + C90485 * C19092) * C6284 -
           (C13579 * C19199 + C90485 * C19201) * C6162) *
              C13577 +
          (C14088 * C6281 + C14291 * C6159 - C16857 * C6282 - C17051 * C6160 +
           C18364 * C6283 + C18543 * C6161 -
           (C13579 * C19087 + C90485 * C19090) * C6284 -
           (C13579 * C19200 + C90485 * C19202) * C6162) *
              C13578) *
         C90634 * C90541 * C90498) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C1875 +
            (C13579 * C245 + C90485 * C251) * C90753 - C27600 * C1876 -
            C27814 * C90579) *
               C90623 * C26429 +
           (C27600 * C1875 + C27814 * C90753 - C27606 * C1876 -
            C27815 * C90579) *
               C90623 * C26430 +
           (C27606 * C1875 + C27815 * C90753 -
            (C13579 * C6165 + C90485 * C6171) * C1876 -
            (C13579 * C6287 + C90485 * C6290) * C90579) *
               C90623 * C26431) *
              C90541 * C821 +
          ((C27602 * C1876 -
            ((C13579 * C246 + C90485 * C252) * C90753 +
             (C13579 * C108 + C90485 * C114) * C1875) +
            C27816 * C90579) *
               C90623 * C26429 +
           (C27608 * C1876 - (C27816 * C90753 + C27602 * C1875) +
            C27817 * C90579) *
               C90623 * C26430 +
           ((C13579 * C6164 + C90485 * C6170) * C1876 -
            (C27817 * C90753 + C27608 * C1875) +
            (C13579 * C6286 + C90485 * C6289) * C90579) *
               C90623 * C26431) *
              C90541 * C822 +
          (((C13579 * C109 + C90485 * C115) * C1875 +
            (C13579 * C247 + C90485 * C253) * C90753 - C27604 * C1876 -
            C27818 * C90579) *
               C90623 * C26429 +
           (C27604 * C1875 + C27818 * C90753 - C27610 * C1876 -
            C27819 * C90579) *
               C90623 * C26430 +
           (C27610 * C1875 + C27819 * C90753 -
            (C13579 * C6163 + C90485 * C6169) * C1876 -
            (C13579 * C6285 + C90485 * C6288) * C90579) *
               C90623 * C26431) *
              C90541 * C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C1875 +
            (C13579 * C245 + C90485 * C251) * C90753 - C27600 * C1876 -
            C27814 * C90579) *
               C90623 * C26429 +
           (C27600 * C1875 + C27814 * C90753 - C27606 * C1876 -
            C27815 * C90579) *
               C90623 * C26430 +
           (C27606 * C1875 + C27815 * C90753 -
            (C13579 * C6165 + C90485 * C6171) * C1876 -
            (C13579 * C6287 + C90485 * C6290) * C90579) *
               C90623 * C26431) *
              C2565 +
          ((C17036 - (C17035 + C17034) + C17053) * C90623 * C26429 +
           (C18362 * C1876 - (C17049 * C90753 + C16859 * C1875) +
            C18542 * C90579) *
               C90623 * C26430 +
           ((C13579 * C19088 + C90485 * C19092) * C1876 -
            (C18542 * C90753 + C18362 * C1875) +
            (C13579 * C19199 + C90485 * C19201) * C90579) *
               C90623 * C26431) *
              C2566 +
          (C17057 * C90623 * C26429 +
           (C16857 * C1875 + C17051 * C90753 - C18364 * C1876 -
            C18543 * C90579) *
               C90623 * C26430 +
           (C18364 * C1875 + C18543 * C90753 -
            (C13579 * C19087 + C90485 * C19090) * C1876 -
            (C13579 * C19200 + C90485 * C19202) * C90579) *
               C90623 * C26431) *
              C2567) *
         C90498) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C13579 * C107 + C90485 * C113) * C6281 +
           (C13579 * C245 + C90485 * C251) * C6159 - C27600 * C6282 -
           C27814 * C6160 + C27606 * C6283 + C27815 * C6161 - C30275 * C6284 -
           C30458 * C6162) *
              C90623 * C26429 +
          (C27600 * C6281 + C27814 * C6159 - C27606 * C6282 - C27815 * C6160 +
           C30275 * C6283 + C30458 * C6161 - C31776 * C6284 - C31893 * C6162) *
              C90623 * C26430 +
          (C27606 * C6281 + C27815 * C6159 - C30275 * C6282 - C30458 * C6160 +
           C31776 * C6283 + C31893 * C6161 -
           (C13579 * C31765 + C90485 * C31767) * C6284 -
           (C13579 * C31888 + C90485 * C31889) * C6162) *
              C90623 * C26431) *
         C90541 * C90498) /
            (p * q * std::sqrt(p + q));
    d2eeyx[38] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C307 * C107 + C90623 * C308) * C826 +
                (C307 * C116 + C90623 * C314) * C821 - C337 * C827 -
                C338 * C822 + C339 * C828 + C340 * C823) *
                   C90634 * C89 +
               (C337 * C826 + C338 * C821 - C339 * C827 - C340 * C822 +
                C341 * C828 + C342 * C823) *
                   C90634 * C90 +
               (C339 * C826 + C340 * C821 - C341 * C827 - C342 * C822 +
                C343 * C828 + C344 * C823) *
                   C90634 * C91) *
                  C90753 +
              ((C1984 * C827 -
                ((C307 * C1707 + C90623 * C1966) * C821 +
                 (C307 * C1700 + C90623 * C1962) * C826) +
                C1985 * C822 - C1986 * C828 - C1987 * C823) *
                   C90634 * C89 +
               (C1986 * C827 - (C1985 * C821 + C1984 * C826) + C1987 * C822 -
                C1988 * C828 - C1989 * C823) *
                   C90634 * C90 +
               (C1988 * C827 - (C1987 * C821 + C1986 * C826) + C1989 * C822 -
                (C307 * C1701 + C90623 * C1965) * C828 -
                (C307 * C1711 + C90623 * C1970) * C823) *
                   C90634 * C91) *
                  C90579) *
             C90541 +
         0.5 * std::pow(Pi, 2.5) *
             (((((C307 * C107 + C90623 * C308) * C3364 +
                 (C307 * C116 + C90623 * C314) * C90498) *
                    C90634 * C89 +
                (C337 * C3364 + C338 * C90498) * C90634 * C90 +
                (C339 * C3364 + C340 * C90498) * C90634 * C91) *
                   C90753 -
               ((C1987 * C90498 + C1986 * C3364) * C90634 * C91 +
                (C1985 * C90498 + C1984 * C3364) * C90634 * C90 +
                ((C307 * C1707 + C90623 * C1966) * C90498 +
                 (C307 * C1700 + C90623 * C1962) * C3364) *
                    C90634 * C89) *
                   C90579) *
                  C2565 +
              ((((C307 * C3891 + C90623 * C4161) * C3364 +
                 (C307 * C3900 + C90623 * C4167) * C90498) *
                    C90634 * C89 +
                ((C307 * C3892 + C90623 * C4162) * C3364 +
                 (C307 * C3901 + C90623 * C4168) * C90498) *
                    C90634 * C90 +
                ((C307 * C3893 + C90623 * C4163) * C3364 +
                 (C307 * C3902 + C90623 * C4169) * C90498) *
                    C90634 * C91) *
                   C90579 -
               ((C1119 * C90498 + C1118 * C3364) * C90634 * C91 +
                (C1117 * C90498 + C1116 * C3364) * C90634 * C90 +
                ((C307 * C839 + C90623 * C1098) * C90498 +
                 (C307 * C832 + C90623 * C1094) * C3364) *
                    C90634 * C89) *
                   C90753) *
                  C2566 +
              ((((C307 * C2570 + C90623 * C2827) * C3364 +
                 (C307 * C2577 + C90623 * C2831) * C90498) *
                    C90634 * C89 +
                (C2844 * C3364 + C2845 * C90498) * C90634 * C90 +
                (C2846 * C3364 + C2847 * C90498) * C90634 * C91) *
                   C90753 -
               (((C307 * C3903 + C90623 * C4170) * C90498 +
                 (C307 * C3894 + C90623 * C4164) * C3364) *
                    C90634 * C91 +
                ((C307 * C3904 + C90623 * C4171) * C90498 +
                 (C307 * C3895 + C90623 * C4165) * C3364) *
                    C90634 * C90 +
                ((C307 * C3905 + C90623 * C4172) * C90498 +
                 (C307 * C3896 + C90623 * C4166) * C3364) *
                    C90634 * C89) *
                   C90579) *
                  C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C3364 +
            (C307 * C116 + C90623 * C314) * C90498) *
               C90634 * C89 +
           (C337 * C3364 + C338 * C90498) * C90634 * C90 +
           (C339 * C3364 + C340 * C90498) * C90634 * C91) *
              C6159 -
          ((C1987 * C90498 + C1986 * C3364) * C90634 * C91 +
           (C1985 * C90498 + C1984 * C3364) * C90634 * C90 +
           ((C307 * C1707 + C90623 * C1966) * C90498 +
            (C307 * C1700 + C90623 * C1962) * C3364) *
               C90634 * C89) *
              C6160 +
          (((C307 * C4656 + C90623 * C4913) * C3364 +
            (C307 * C4663 + C90623 * C4917) * C90498) *
               C90634 * C89 +
           (C4930 * C3364 + C4931 * C90498) * C90634 * C90 +
           (C4932 * C3364 + C4933 * C90498) * C90634 * C91) *
              C6161 -
          (((C307 * C6166 + C90623 * C6344) * C90498 +
            (C307 * C6163 + C90623 * C6341) * C3364) *
               C90634 * C91 +
           ((C307 * C6167 + C90623 * C6345) * C90498 +
            (C307 * C6164 + C90623 * C6342) * C3364) *
               C90634 * C90 +
           ((C307 * C6168 + C90623 * C6346) * C90498 +
            (C307 * C6165 + C90623 * C6343) * C3364) *
               C90634 * C89) *
              C6162) *
         C90541) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C826 +
           (C13730 * C116 + C13576 * C314 + C13731 * C839 + C13577 * C1098 +
            C13732 * C2577 + C13578 * C2831) *
               C821 -
           (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
            C13730 * C108 + C13576 * C309) *
               C827 -
           (C13732 * C2578 + C13578 * C2832 + C13731 * C838 + C13577 * C1099 +
            C13730 * C117 + C13576 * C315) *
               C822 +
           (C13730 * C109 + C13576 * C310 + C13731 * C830 + C13577 * C1095 +
            C13732 * C2572 + C13578 * C2829) *
               C828 +
           (C13730 * C118 + C13576 * C316 + C13731 * C837 + C13577 * C1100 +
            C13732 * C2579 + C13578 * C2833) *
               C823) *
              C90634 * C90485 * C90753 +
          ((C13730 * C1697 + C13576 * C1961 + C13731 * C3892 + C13577 * C4162 +
            C13732 * C3895 + C13578 * C4165) *
               C827 -
           ((C13732 * C3905 + C13578 * C4172 + C13731 * C3900 + C13577 * C4167 +
             C13730 * C1707 + C13576 * C1966) *
                C821 +
            (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 + C13577 * C4161 +
             C13730 * C1700 + C13576 * C1962) *
                C826) +
           (C13730 * C1706 + C13576 * C1967 + C13731 * C3901 + C13577 * C4168 +
            C13732 * C3904 + C13578 * C4171) *
               C822 -
           (C13732 * C3894 + C13578 * C4164 + C13731 * C3893 + C13577 * C4163 +
            C13730 * C1698 + C13576 * C1963) *
               C828 -
           (C13732 * C3903 + C13578 * C4170 + C13731 * C3902 + C13577 * C4169 +
            C13730 * C1705 + C13576 * C1968) *
               C823) *
              C90634 * C90485 * C90579) *
         C90541) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
             C13732 * C2570 + C13578 * C2827) *
                C3364 +
            (C13730 * C116 + C13576 * C314 + C13731 * C839 + C13577 * C1098 +
             C13732 * C2577 + C13578 * C2831) *
                C90498) *
               C90634 * C90485 * C90753 -
           ((C13732 * C3905 + C13578 * C4172 + C13731 * C3900 + C13577 * C4167 +
             C13730 * C1707 + C13576 * C1966) *
                C90498 +
            (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 + C13577 * C4161 +
             C13730 * C1700 + C13576 * C1962) *
                C3364) *
               C90634 * C90485 * C90579) *
              C2565 +
          (((C13730 * C3891 + C13576 * C4161 + C13731 * C3896 + C13577 * C4166 +
             C13732 * C16835 + C13578 * C17131) *
                C3364 +
            (C13730 * C3900 + C13576 * C4167 + C13731 * C3905 + C13577 * C4172 +
             C13732 * C16838 + C13578 * C17133) *
                C90498) *
               C90634 * C90485 * C90579 -
           ((C13732 * C3370 + C13578 * C3548 + C13731 * C2577 + C13577 * C2831 +
             C13730 * C839 + C13576 * C1098) *
                C90498 +
            (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
             C13730 * C832 + C13576 * C1094) *
                C3364) *
               C90634 * C90485 * C90753) *
              C2566 +
          (((C13730 * C2570 + C13576 * C2827 + C13731 * C3367 + C13577 * C3545 +
             C13732 * C15525 + C13578 * C15808) *
                C3364 +
            (C13730 * C2577 + C13576 * C2831 + C13731 * C3370 + C13577 * C3548 +
             C13732 * C15528 + C13578 * C15810) *
                C90498) *
               C90634 * C90485 * C90753 -
           ((C13732 * C16839 + C13578 * C17134 + C13731 * C16838 +
             C13577 * C17133 + C13730 * C3905 + C13576 * C4172) *
                C90498 +
            (C13732 * C16836 + C13578 * C17132 + C13731 * C16835 +
             C13577 * C17131 + C13730 * C3896 + C13576 * C4166) *
                C3364) *
               C90634 * C90485 * C90579) *
              C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C3364 +
           (C13730 * C116 + C13576 * C314 + C13731 * C839 + C13577 * C1098 +
            C13732 * C2577 + C13578 * C2831) *
               C90498) *
              C90634 * C90485 * C6159 -
          ((C13732 * C3905 + C13578 * C4172 + C13731 * C3900 + C13577 * C4167 +
            C13730 * C1707 + C13576 * C1966) *
               C90498 +
           (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 + C13577 * C4161 +
            C13730 * C1700 + C13576 * C1962) *
               C3364) *
              C90634 * C90485 * C6160 +
          ((C13730 * C4656 + C13576 * C4913 + C13731 * C5471 + C13577 * C5717 +
            C13732 * C17651 + C13578 * C17889) *
               C3364 +
           (C13730 * C4663 + C13576 * C4917 + C13731 * C5474 + C13577 * C5720 +
            C13732 * C17654 + C13578 * C17891) *
               C90498) *
              C90634 * C90485 * C6161 -
          ((C13732 * C19089 + C13578 * C19255 + C13731 * C19091 +
            C13577 * C19256 + C13730 * C6168 + C13576 * C6346) *
               C90498 +
           (C13732 * C19087 + C13578 * C19253 + C13731 * C19088 +
            C13577 * C19254 + C13730 * C6165 + C13576 * C6343) *
               C3364) *
              C90634 * C90485 * C6162) *
         C90541) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C826 +
            (C307 * C116 + C90623 * C314) * C821 - C337 * C827 - C338 * C822 +
            C339 * C828 + C340 * C823) *
               C26429 +
           (C27914 + C27915 - C27898 - C27899 + C27900 + C27901) * C26430 +
           (C27916 + C27917 - C27906 - C27907 + C27908 + C27909) * C26431) *
              C90485 * C90753 +
          ((C27898 - (C27915 + C27914) + C27899 - C27900 - C27901) * C26429 +
           (C27906 - (C27917 + C27916) + C27907 - C27908 - C27909) * C26430 +
           ((C307 * C6164 + C90623 * C6342) * C827 -
            ((C307 * C6168 + C90623 * C6346) * C821 +
             (C307 * C6165 + C90623 * C6343) * C826) +
            (C307 * C6167 + C90623 * C6345) * C822 -
            (C307 * C6163 + C90623 * C6341) * C828 -
            (C307 * C6166 + C90623 * C6344) * C823) *
               C26431) *
              C90485 * C90579) *
         C90541) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C3364 +
             (C307 * C116 + C90623 * C314) * C90498) *
                C26429 +
            (C29732 + C29733) * C26430 + (C29734 + C29735) * C26431) *
               C90485 * C90753 -
           (((C307 * C6168 + C90623 * C6346) * C90498 +
             (C307 * C6165 + C90623 * C6343) * C3364) *
                C26431 +
            (C29735 + C29734) * C26430 + (C29733 + C29732) * C26429) *
               C90485 * C90579) *
              C2565 +
          (((C29760 + C29761) * C26429 + (C29762 + C29763) * C26430 +
            ((C307 * C19088 + C90623 * C19254) * C3364 +
             (C307 * C19091 + C90623 * C19256) * C90498) *
                C26431) *
               C90485 * C90579 -
           ((C29763 + C29762) * C26431 + (C29761 + C29760) * C26430 +
            ((C307 * C839 + C90623 * C1098) * C90498 +
             (C307 * C832 + C90623 * C1094) * C3364) *
                C26429) *
               C90485 * C90753) *
              C2566 +
          ((((C307 * C2570 + C90623 * C2827) * C3364 +
             (C307 * C2577 + C90623 * C2831) * C90498) *
                C26429 +
            (C29764 + C29765) * C26430 + (C29766 + C29767) * C26431) *
               C90485 * C90753 -
           (((C307 * C19089 + C90623 * C19255) * C90498 +
             (C307 * C19087 + C90623 * C19253) * C3364) *
                C26431 +
            (C29767 + C29766) * C26430 + (C29765 + C29764) * C26429) *
               C90485 * C90579) *
              C2567)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C3364 +
            (C307 * C116 + C90623 * C314) * C90498) *
               C26429 +
           (C29732 + C29733) * C26430 + C31307 * C26431) *
              C90485 * C6159 -
          (C31946 * C26431 + (C29735 + C29734) * C26430 +
           (C29733 + C29732) * C26429) *
              C90485 * C6160 +
          (C31307 * C26429 + (C31309 + C31308) * C26430 +
           (C31953 + C31954) * C26431) *
              C90485 * C6161 -
          (((C307 * C31766 + C90623 * C31944) * C90498 +
            (C307 * C31765 + C90623 * C31943) * C3364) *
               C26431 +
           (C31954 + C31953) * C26430 + C31946 * C26429) *
              C90485 * C6162) *
         C90541) /
            (p * q * std::sqrt(p + q));
    d2eeyy[38] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C307 * C107 + C90623 * C308) * C181 +
                 (C307 * C182 + C90623 * C394) * C90541) *
                    C90634 * C89 +
                (C401 + C417) * C90634 * C90 + C423 * C91) *
                   C821 -
               (C424 * C91 + (C418 + C404) * C90634 * C90 +
                (C417 + C401) * C90634 * C89) *
                   C822 +
               (C423 * C89 + (C409 + C419) * C90634 * C90 +
                (C410 + C420) * C90634 * C91) *
                   C823) *
                  C90753 +
              (((C2069 + C2081) * C90634 * C89 +
                (C2072 + C2082) * C90634 * C90 +
                (C2075 + C2083) * C90634 * C91) *
                   C822 -
               (C2085 * C91 + (C2081 + C2069) * C90634 * C90 +
                ((C307 * C1794 + C90623 * C2066) * C90541 +
                 (C307 * C1700 + C90623 * C1962) * C181) *
                    C90634 * C89) *
                   C821 -
               (((C307 * C1795 + C90623 * C2067) * C90541 +
                 (C307 * C1701 + C90623 * C1965) * C181) *
                    C90634 * C91 +
                (C2083 + C2075) * C90634 * C90 + C2085 * C89) *
                   C823) *
                  C90579) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C307 * C107 + C90623 * C308) * C2660 +
                (C307 * C182 + C90623 * C394) * C2565 -
                (C307 * C832 + C90623 * C1094) * C2661 -
                (C307 * C927 + C90623 * C1195) * C2566 +
                (C307 * C2570 + C90623 * C2827) * C2662 +
                (C307 * C2663 + C90623 * C2921) * C2567) *
                   C90634 * C89 +
               (C2926 + C2927 - C2928 - C2929 + C2930 + C2942) * C90634 * C90 +
               (C2933 + C2934 - C2935 - C2936 + C2937 + C2943) * C90634 * C91) *
                  C90498 * C90753 +
              (((C307 * C3891 + C90623 * C4161) * C2661 -
                ((C307 * C1794 + C90623 * C2066) * C2565 +
                 (C307 * C1700 + C90623 * C1962) * C2660) +
                (C307 * C3989 + C90623 * C4247) * C2566 -
                (C307 * C3896 + C90623 * C4166) * C2662 -
                (C307 * C3994 + C90623 * C4248) * C2567) *
                   C90634 * C89 +
               ((C307 * C3892 + C90623 * C4162) * C2661 -
                (C2078 * C2565 + C1984 * C2660) +
                (C307 * C3990 + C90623 * C4249) * C2566 -
                (C307 * C3895 + C90623 * C4165) * C2662 -
                (C307 * C3993 + C90623 * C4250) * C2567) *
                   C90634 * C90 +
               ((C307 * C3893 + C90623 * C4163) * C2661 -
                (C2079 * C2565 + C1986 * C2660) +
                (C307 * C3991 + C90623 * C4251) * C2566 -
                (C307 * C3894 + C90623 * C4164) * C2662 -
                (C307 * C3992 + C90623 * C4252) * C2567) *
                   C90634 * C91) *
                  C90498 * C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C181 +
            (C307 * C182 + C90623 * C394) * C90541) *
               C90634 * C89 +
           (C401 + C417) * C90634 * C90 + C423 * C91) *
              C90498 * C6159 -
          (C2085 * C91 + (C2081 + C2069) * C90634 * C90 +
           ((C307 * C1794 + C90623 * C2066) * C90541 +
            (C307 * C1700 + C90623 * C1962) * C181) *
               C90634 * C89) *
              C90498 * C6160 +
          (((C307 * C4656 + C90623 * C4913) * C181 +
            (C307 * C4746 + C90623 * C5007) * C90541) *
               C90634 * C89 +
           (C5012 + C5020) * C90634 * C90 + (C5015 + C5021) * C90634 * C91) *
              C90498 * C6161 -
          (((C307 * C6225 + C90623 * C6397) * C90541 +
            (C307 * C6163 + C90623 * C6341) * C181) *
               C90634 * C91 +
           ((C307 * C6226 + C90623 * C6398) * C90541 +
            (C307 * C6164 + C90623 * C6342) * C181) *
               C90634 * C90 +
           ((C307 * C6227 + C90623 * C6399) * C90541 +
            (C307 * C6165 + C90623 * C6343) * C181) *
               C90634 * C89) *
              C90498 * C6162)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
             C13732 * C2570 + C13578 * C2827) *
                C181 +
            (C13730 * C182 + C13576 * C394 + C13731 * C927 + C13577 * C1195 +
             C13732 * C2663 + C13578 * C2921) *
                C90541) *
               C90634 * C90485 * C821 -
           ((C13732 * C2664 + C13578 * C2922 + C13731 * C926 + C13577 * C1196 +
             C13730 * C183 + C13576 * C395) *
                C90541 +
            (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
             C13730 * C108 + C13576 * C309) *
                C181) *
               C90634 * C90485 * C822 +
           ((C13730 * C109 + C13576 * C310 + C13731 * C830 + C13577 * C1095 +
             C13732 * C2572 + C13578 * C2829) *
                C181 +
            (C13730 * C184 + C13576 * C396 + C13731 * C925 + C13577 * C1197 +
             C13732 * C2665 + C13578 * C2923) *
                C90541) *
               C90634 * C90485 * C823) *
              C90753 +
          (((C13730 * C1697 + C13576 * C1961 + C13731 * C3892 + C13577 * C4162 +
             C13732 * C3895 + C13578 * C4165) *
                C181 +
            (C13730 * C1791 + C13576 * C2063 + C13731 * C3990 + C13577 * C4249 +
             C13732 * C3993 + C13578 * C4250) *
                C90541) *
               C90634 * C90485 * C822 -
           ((C13732 * C3994 + C13578 * C4248 + C13731 * C3989 + C13577 * C4247 +
             C13730 * C1794 + C13576 * C2066) *
                C90541 +
            (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 + C13577 * C4161 +
             C13730 * C1700 + C13576 * C1962) *
                C181) *
               C90634 * C90485 * C821 -
           ((C13732 * C3992 + C13578 * C4252 + C13731 * C3991 + C13577 * C4251 +
             C13730 * C1792 + C13576 * C2064) *
                C90541 +
            (C13732 * C3894 + C13578 * C4164 + C13731 * C3893 + C13577 * C4163 +
             C13730 * C1698 + C13576 * C1963) *
                C181) *
               C90634 * C90485 * C823) *
              C90579)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C2660 +
           (C13730 * C182 + C13576 * C394 + C13731 * C927 + C13577 * C1195 +
            C13732 * C2663 + C13578 * C2921) *
               C2565 -
           (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
            C13730 * C832 + C13576 * C1094) *
               C2661 -
           (C13732 * C3433 + C13578 * C3599 + C13731 * C2663 + C13577 * C2921 +
            C13730 * C927 + C13576 * C1195) *
               C2566 +
           (C13730 * C2570 + C13576 * C2827 + C13731 * C3367 + C13577 * C3545 +
            C13732 * C15525 + C13578 * C15808) *
               C2662 +
           (C13730 * C2663 + C13576 * C2921 + C13731 * C3433 + C13577 * C3599 +
            C13732 * C15634 + C13578 * C15886) *
               C2567) *
              C90634 * C90485 * C90498 * C90753 +
          ((C13730 * C3891 + C13576 * C4161 + C13731 * C3896 + C13577 * C4166 +
            C13732 * C16835 + C13578 * C17131) *
               C2661 -
           ((C13732 * C3994 + C13578 * C4248 + C13731 * C3989 + C13577 * C4247 +
             C13730 * C1794 + C13576 * C2066) *
                C2565 +
            (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 + C13577 * C4161 +
             C13730 * C1700 + C13576 * C1962) *
                C2660) +
           (C13730 * C3989 + C13576 * C4247 + C13731 * C3994 + C13577 * C4248 +
            C13732 * C16942 + C13578 * C17209) *
               C2566 -
           (C13732 * C16836 + C13578 * C17132 + C13731 * C16835 +
            C13577 * C17131 + C13730 * C3896 + C13576 * C4166) *
               C2662 -
           (C13732 * C16943 + C13578 * C17210 + C13731 * C16942 +
            C13577 * C17209 + C13730 * C3994 + C13576 * C4248) *
               C2567) *
              C90634 * C90485 * C90498 * C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C181 +
           (C13730 * C182 + C13576 * C394 + C13731 * C927 + C13577 * C1195 +
            C13732 * C2663 + C13578 * C2921) *
               C90541) *
              C90634 * C90485 * C90498 * C6159 -
          ((C13732 * C3994 + C13578 * C4248 + C13731 * C3989 + C13577 * C4247 +
            C13730 * C1794 + C13576 * C2066) *
               C90541 +
           (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 + C13577 * C4161 +
            C13730 * C1700 + C13576 * C1962) *
               C181) *
              C90634 * C90485 * C90498 * C6160 +
          ((C13730 * C4656 + C13576 * C4913 + C13731 * C5471 + C13577 * C5717 +
            C13732 * C17651 + C13578 * C17889) *
               C181 +
           (C13730 * C4746 + C13576 * C5007 + C13731 * C5557 + C13577 * C5795 +
            C13732 * C17733 + C13578 * C17967) *
               C90541) *
              C90634 * C90485 * C90498 * C6161 -
          ((C13732 * C19145 + C13578 * C19307 + C13731 * C19146 +
            C13577 * C19308 + C13730 * C6227 + C13576 * C6399) *
               C90541 +
           (C13732 * C19087 + C13578 * C19253 + C13731 * C19088 +
            C13577 * C19254 + C13730 * C6165 + C13576 * C6343) *
               C181) *
              C90634 * C90485 * C90498 * C6162)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C181 +
             (C307 * C182 + C90623 * C394) * C90541) *
                C26429 +
            (C27992 + C28000) * C26430 + (C27995 + C28001) * C26431) *
               C90485 * C821 -
           ((C5020 + C5012) * C26431 + (C2081 + C2069) * C26430 +
            (C417 + C401) * C26429) *
               C90485 * C822 +
           (C421 * C26429 + (C2072 + C2082) * C26430 +
            (C5015 + C5021) * C26431) *
               C90485 * C823) *
              C90753 +
          (((C2069 + C2081) * C26429 + (C5012 + C5020) * C26430 +
            ((C307 * C6164 + C90623 * C6342) * C181 +
             (C307 * C6226 + C90623 * C6398) * C90541) *
                C26431) *
               C90485 * C822 -
           (((C307 * C6227 + C90623 * C6399) * C90541 +
             (C307 * C6165 + C90623 * C6343) * C181) *
                C26431 +
            (C28001 + C27995) * C26430 + (C28000 + C27992) * C26429) *
               C90485 * C821 -
           (((C307 * C6225 + C90623 * C6397) * C90541 +
             (C307 * C6163 + C90623 * C6341) * C181) *
                C26431 +
            (C5021 + C5015) * C26430 + C2084 * C26429) *
               C90485 * C823) *
              C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C2660 +
            (C307 * C182 + C90623 * C394) * C2565 -
            (C307 * C832 + C90623 * C1094) * C2661 -
            (C307 * C927 + C90623 * C1195) * C2566 +
            (C307 * C2570 + C90623 * C2827) * C2662 +
            (C307 * C2663 + C90623 * C2921) * C2567) *
               C26429 +
           (C29842 + C29843 - C29844 - C29862 + C29847 + C29863) * C26430 +
           (C29850 + C29851 - C29852 - C29864 + C29855 + C29865) * C26431) *
              C90485 * C90498 * C90753 +
          ((C29844 - (C29843 + C29842) + C29862 - C29847 - C29863) * C26429 +
           (C29852 - (C29851 + C29850) + C29864 - C29855 - C29865) * C26430 +
           ((C307 * C19088 + C90623 * C19254) * C2661 -
            ((C307 * C6227 + C90623 * C6399) * C2565 +
             (C307 * C6165 + C90623 * C6343) * C2660) +
            (C307 * C19146 + C90623 * C19308) * C2566 -
            (C307 * C19087 + C90623 * C19253) * C2662 -
            (C307 * C19145 + C90623 * C19307) * C2567) *
               C26431) *
              C90485 * C90498 * C90579)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C181 +
            (C307 * C182 + C90623 * C394) * C90541) *
               C26429 +
           (C27992 + C28000) * C26430 + C30641 * C26431) *
              C90485 * C90498 * C6159 -
          (C32006 * C26431 + (C28001 + C27995) * C26430 +
           (C28000 + C27992) * C26429) *
              C90485 * C90498 * C6160 +
          (C30641 * C26429 + (C30648 + C30652) * C26430 +
           (C32007 + C32011) * C26431) *
              C90485 * C90498 * C6161 -
          (((C307 * C31829 + C90623 * C32004) * C90541 +
            (C307 * C31765 + C90623 * C31943) * C181) *
               C26431 +
           (C32011 + C32007) * C26430 + C32006 * C26429) *
              C90485 * C90498 * C6162)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[38] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C307 * C107 + C90623 * C308) * C1875 +
                (C307 * C245 + C90623 * C474) * C90753 -
                (C307 * C1700 + C90623 * C1962) * C1876 -
                (C307 * C1879 + C90623 * C2159) * C90579) *
                   C90634 * C89 +
               (C2165 + C2166 - C2167 - C2184) * C90634 * C90 + C2189 * C91) *
                  C90541 * C821 +
              ((C2167 - (C2166 + C2165) + C2184) * C90634 * C89 +
               (C2172 - (C2171 + C2170) + C2186) * C90634 * C90 +
               (C2175 - (C2176 + C2177) + C2187) * C90634 * C91) *
                  C90541 * C822 +
              (C2189 * C89 + (C2177 + C2176 - C2175 - C2187) * C90634 * C90 +
               (C343 * C1875 + C496 * C90753 -
                (C307 * C1701 + C90623 * C1965) * C1876 -
                (C307 * C1881 + C90623 * C2163) * C90579) *
                   C90634 * C91) *
                  C90541 * C823) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C307 * C107 + C90623 * C308) * C1875 +
                (C307 * C245 + C90623 * C474) * C90753 -
                (C307 * C1700 + C90623 * C1962) * C1876 -
                (C307 * C1879 + C90623 * C2159) * C90579) *
                   C90634 * C89 +
               (C2165 + C2166 - C2167 - C2184) * C90634 * C90 + C2189 * C91) *
                  C2565 +
              (((C307 * C3891 + C90623 * C4161) * C1876 -
                ((C307 * C1011 + C90623 * C1301) * C90753 +
                 (C307 * C832 + C90623 * C1094) * C1875) +
                (C307 * C4075 + C90623 * C4327) * C90579) *
                   C90634 * C89 +
               ((C307 * C3892 + C90623 * C4162) * C1876 -
                (C1315 * C90753 + C1116 * C1875) +
                (C307 * C4076 + C90623 * C4328) * C90579) *
                   C90634 * C90 +
               ((C307 * C3893 + C90623 * C4163) * C1876 -
                (C1314 * C90753 + C1118 * C1875) +
                (C307 * C4077 + C90623 * C4329) * C90579) *
                   C90634 * C91) *
                  C2566 +
              (((C307 * C2570 + C90623 * C2827) * C1875 +
                (C307 * C2745 + C90623 * C3017) * C90753 -
                (C307 * C3896 + C90623 * C4166) * C1876 -
                (C307 * C4080 + C90623 * C4330) * C90579) *
                   C90634 * C89 +
               (C2844 * C1875 + C3028 * C90753 -
                (C307 * C3895 + C90623 * C4165) * C1876 -
                (C307 * C4079 + C90623 * C4331) * C90579) *
                   C90634 * C90 +
               (C2846 * C1875 + C3029 * C90753 -
                (C307 * C3894 + C90623 * C4164) * C1876 -
                (C307 * C4078 + C90623 * C4332) * C90579) *
                   C90634 * C91) *
                  C2567) *
             C90498) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C307 * C107 + C90623 * C308) * C6281 +
           (C307 * C245 + C90623 * C474) * C6159 -
           (C307 * C1700 + C90623 * C1962) * C6282 -
           (C307 * C1879 + C90623 * C2159) * C6160 +
           (C307 * C4656 + C90623 * C4913) * C6283 +
           (C307 * C4831 + C90623 * C5095) * C6161 -
           (C307 * C6165 + C90623 * C6343) * C6284 -
           (C307 * C6287 + C90623 * C6450) * C6162) *
              C90634 * C89 +
          (C337 * C6281 + C493 * C6159 - C1984 * C6282 - C2180 * C6160 +
           C4930 * C6283 + C5114 * C6161 -
           (C307 * C6164 + C90623 * C6342) * C6284 -
           (C307 * C6286 + C90623 * C6451) * C6162) *
              C90634 * C90 +
          (C339 * C6281 + C494 * C6159 - C1986 * C6282 - C2182 * C6160 +
           C4932 * C6283 + C5115 * C6161 -
           (C307 * C6163 + C90623 * C6341) * C6284 -
           (C307 * C6285 + C90623 * C6452) * C6162) *
              C90634 * C91) *
         C90541 * C90498) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C1875 +
           (C13730 * C245 + C13576 * C474 + C13731 * C1011 + C13577 * C1301 +
            C13732 * C2745 + C13578 * C3017) *
               C90753 -
           (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 + C13577 * C4161 +
            C13730 * C1700 + C13576 * C1962) *
               C1876 -
           (C13732 * C4080 + C13578 * C4330 + C13731 * C4075 + C13577 * C4327 +
            C13730 * C1879 + C13576 * C2159) *
               C90579) *
              C90634 * C90485 * C90541 * C821 +
          ((C13730 * C1697 + C13576 * C1961 + C13731 * C3892 + C13577 * C4162 +
            C13732 * C3895 + C13578 * C4165) *
               C1876 -
           ((C13732 * C2746 + C13578 * C3018 + C13731 * C1010 + C13577 * C1300 +
             C13730 * C246 + C13576 * C475) *
                C90753 +
            (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
             C13730 * C108 + C13576 * C309) *
                C1875) +
           (C13730 * C1878 + C13576 * C2160 + C13731 * C4076 + C13577 * C4328 +
            C13732 * C4079 + C13578 * C4331) *
               C90579) *
              C90634 * C90485 * C90541 * C822 +
          ((C13730 * C109 + C13576 * C310 + C13731 * C830 + C13577 * C1095 +
            C13732 * C2572 + C13578 * C2829) *
               C1875 +
           (C13730 * C247 + C13576 * C476 + C13731 * C1009 + C13577 * C1299 +
            C13732 * C2747 + C13578 * C3019) *
               C90753 -
           (C13732 * C3894 + C13578 * C4164 + C13731 * C3893 + C13577 * C4163 +
            C13730 * C1698 + C13576 * C1963) *
               C1876 -
           (C13732 * C4078 + C13578 * C4332 + C13731 * C4077 + C13577 * C4329 +
            C13730 * C1877 + C13576 * C2161) *
               C90579) *
              C90634 * C90485 * C90541 * C823)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C1875 +
           (C13730 * C245 + C13576 * C474 + C13731 * C1011 + C13577 * C1301 +
            C13732 * C2745 + C13578 * C3017) *
               C90753 -
           (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 + C13577 * C4161 +
            C13730 * C1700 + C13576 * C1962) *
               C1876 -
           (C13732 * C4080 + C13578 * C4330 + C13731 * C4075 + C13577 * C4327 +
            C13730 * C1879 + C13576 * C2159) *
               C90579) *
              C90634 * C90485 * C2565 +
          ((C13730 * C3891 + C13576 * C4161 + C13731 * C3896 + C13577 * C4166 +
            C13732 * C16835 + C13578 * C17131) *
               C1876 -
           ((C13732 * C3489 + C13578 * C3654 + C13731 * C2745 + C13577 * C3017 +
             C13730 * C1011 + C13576 * C1301) *
                C90753 +
            (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
             C13730 * C832 + C13576 * C1094) *
                C1875) +
           (C13730 * C4075 + C13576 * C4327 + C13731 * C4080 + C13577 * C4330 +
            C13732 * C17029 + C13578 * C17285) *
               C90579) *
              C90634 * C90485 * C2566 +
          ((C13730 * C2570 + C13576 * C2827 + C13731 * C3367 + C13577 * C3545 +
            C13732 * C15525 + C13578 * C15808) *
               C1875 +
           (C13730 * C2745 + C13576 * C3017 + C13731 * C3489 + C13577 * C3654 +
            C13732 * C15718 + C13578 * C15962) *
               C90753 -
           (C13732 * C16836 + C13578 * C17132 + C13731 * C16835 +
            C13577 * C17131 + C13730 * C3896 + C13576 * C4166) *
               C1876 -
           (C13732 * C17030 + C13578 * C17286 + C13731 * C17029 +
            C13577 * C17285 + C13730 * C4080 + C13576 * C4330) *
               C90579) *
              C90634 * C90485 * C2567) *
         C90498) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
           C13732 * C2570 + C13578 * C2827) *
              C6281 +
          (C13730 * C245 + C13576 * C474 + C13731 * C1011 + C13577 * C1301 +
           C13732 * C2745 + C13578 * C3017) *
              C6159 -
          (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 + C13577 * C4161 +
           C13730 * C1700 + C13576 * C1962) *
              C6282 -
          (C13732 * C4080 + C13578 * C4330 + C13731 * C4075 + C13577 * C4327 +
           C13730 * C1879 + C13576 * C2159) *
              C6160 +
          (C13730 * C4656 + C13576 * C4913 + C13731 * C5471 + C13577 * C5717 +
           C13732 * C17651 + C13578 * C17889) *
              C6283 +
          (C13730 * C4831 + C13576 * C5095 + C13731 * C5637 + C13577 * C5872 +
           C13732 * C17811 + C13578 * C18043) *
              C6161 -
          (C13732 * C19087 + C13578 * C19253 + C13731 * C19088 +
           C13577 * C19254 + C13730 * C6165 + C13576 * C6343) *
              C6284 -
          (C13732 * C19200 + C13578 * C19359 + C13731 * C19199 +
           C13577 * C19360 + C13730 * C6287 + C13576 * C6450) *
              C6162) *
         C90634 * C90485 * C90541 * C90498) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C1875 +
            (C307 * C245 + C90623 * C474) * C90753 - C27910 * C1876 -
            C28080 * C90579) *
               C26429 +
           (C27910 * C1875 + C28080 * C90753 - C27912 * C1876 -
            C28081 * C90579) *
               C26430 +
           (C27912 * C1875 + C28081 * C90753 -
            (C307 * C6165 + C90623 * C6343) * C1876 -
            (C307 * C6287 + C90623 * C6450) * C90579) *
               C26431) *
              C90485 * C90541 * C821 +
          ((C2167 - (C2166 + C2165) + C2184) * C26429 +
           (C4930 * C1876 - (C2180 * C90753 + C1984 * C1875) + C5114 * C90579) *
               C26430 +
           ((C307 * C6164 + C90623 * C6342) * C1876 -
            (C5114 * C90753 + C4930 * C1875) +
            (C307 * C6286 + C90623 * C6451) * C90579) *
               C26431) *
              C90485 * C90541 * C822 +
          (C2188 * C26429 +
           (C1986 * C1875 + C2182 * C90753 - C4932 * C1876 - C5115 * C90579) *
               C26430 +
           (C4932 * C1875 + C5115 * C90753 -
            (C307 * C6163 + C90623 * C6341) * C1876 -
            (C307 * C6285 + C90623 * C6452) * C90579) *
               C26431) *
              C90485 * C90541 * C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C1875 +
            (C307 * C245 + C90623 * C474) * C90753 - C27910 * C1876 -
            C28080 * C90579) *
               C26429 +
           (C27910 * C1875 + C28080 * C90753 - C27912 * C1876 -
            C28081 * C90579) *
               C26430 +
           (C27912 * C1875 + C28081 * C90753 -
            (C307 * C6165 + C90623 * C6343) * C1876 -
            (C307 * C6287 + C90623 * C6450) * C90579) *
               C26431) *
              C90485 * C2565 +
          ((C29752 * C1876 -
            ((C307 * C1011 + C90623 * C1301) * C90753 +
             (C307 * C832 + C90623 * C1094) * C1875) +
            C29948 * C90579) *
               C26429 +
           (C29754 * C1876 - (C29948 * C90753 + C29752 * C1875) +
            C29949 * C90579) *
               C26430 +
           ((C307 * C19088 + C90623 * C19254) * C1876 -
            (C29949 * C90753 + C29754 * C1875) +
            (C307 * C19199 + C90623 * C19360) * C90579) *
               C26431) *
              C90485 * C2566 +
          (((C307 * C2570 + C90623 * C2827) * C1875 +
            (C307 * C2745 + C90623 * C3017) * C90753 - C29756 * C1876 -
            C29950 * C90579) *
               C26429 +
           (C29756 * C1875 + C29950 * C90753 - C29758 * C1876 -
            C29951 * C90579) *
               C26430 +
           (C29758 * C1875 + C29951 * C90753 -
            (C307 * C19087 + C90623 * C19253) * C1876 -
            (C307 * C19200 + C90623 * C19359) * C90579) *
               C26431) *
              C90485 * C2567) *
         C90498) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C307 * C107 + C90623 * C308) * C6281 +
           (C307 * C245 + C90623 * C474) * C6159 - C27910 * C6282 -
           C28080 * C6160 + C27912 * C6283 + C28081 * C6161 - C30557 * C6284 -
           C30733 * C6162) *
              C26429 +
          (C27910 * C6281 + C28080 * C6159 - C27912 * C6282 - C28081 * C6160 +
           C30557 * C6283 + C30733 * C6161 - C31951 * C6284 - C32065 * C6162) *
              C26430 +
          (C27912 * C6281 + C28081 * C6159 - C30557 * C6282 - C30733 * C6160 +
           C31951 * C6283 + C32065 * C6161 -
           (C307 * C31765 + C90623 * C31943) * C6284 -
           (C307 * C31888 + C90623 * C32061) * C6162) *
              C26431) *
         C90485 * C90541 * C90498) /
            (p * q * std::sqrt(p + q));
    d2eezx[38] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C554 * C107 + C90634 * C555) * C826 +
                (C554 * C116 + C90634 * C561) * C821 - C584 * C827 -
                C585 * C822 + C586 * C828 + C587 * C823) *
                   C89 +
               (C584 * C826 + C585 * C821 - C586 * C827 - C587 * C822 +
                C588 * C828 + C589 * C823) *
                   C90 +
               (C586 * C826 + C587 * C821 - C588 * C827 - C589 * C822 +
                C590 * C828 + C591 * C823) *
                   C91) *
                  C90623 * C90753 +
              ((C2286 * C827 -
                ((C554 * C1707 + C90634 * C2268) * C821 +
                 (C554 * C1700 + C90634 * C2264) * C826) +
                C2287 * C822 - C2288 * C828 - C2289 * C823) *
                   C89 +
               (C2288 * C827 - (C2287 * C821 + C2286 * C826) + C2289 * C822 -
                C2290 * C828 - C2291 * C823) *
                   C90 +
               (C2290 * C827 - (C2289 * C821 + C2288 * C826) + C2291 * C822 -
                (C554 * C1701 + C90634 * C2267) * C828 -
                (C554 * C1711 + C90634 * C2272) * C823) *
                   C91) *
                  C90623 * C90579) *
             C90541 +
         0.5 * std::pow(Pi, 2.5) *
             (((((C554 * C107 + C90634 * C555) * C3364 +
                 (C554 * C116 + C90634 * C561) * C90498) *
                    C89 +
                (C584 * C3364 + C585 * C90498) * C90 +
                (C586 * C3364 + C587 * C90498) * C91) *
                   C90623 * C90753 -
               ((C2289 * C90498 + C2288 * C3364) * C91 +
                (C2287 * C90498 + C2286 * C3364) * C90 +
                ((C554 * C1707 + C90634 * C2268) * C90498 +
                 (C554 * C1700 + C90634 * C2264) * C3364) *
                    C89) *
                   C90623 * C90579) *
                  C2565 +
              ((((C554 * C3891 + C90634 * C4407) * C3364 +
                 (C554 * C3900 + C90634 * C4413) * C90498) *
                    C89 +
                ((C554 * C3892 + C90634 * C4408) * C3364 +
                 (C554 * C3901 + C90634 * C4414) * C90498) *
                    C90 +
                ((C554 * C3893 + C90634 * C4409) * C3364 +
                 (C554 * C3902 + C90634 * C4415) * C90498) *
                    C91) *
                   C90623 * C90579 -
               ((C1421 * C90498 + C1420 * C3364) * C91 +
                (C1419 * C90498 + C1418 * C3364) * C90 +
                ((C554 * C839 + C90634 * C1400) * C90498 +
                 (C554 * C832 + C90634 * C1396) * C3364) *
                    C89) *
                   C90623 * C90753) *
                  C2566 +
              ((((C554 * C2570 + C90634 * C3105) * C3364 +
                 (C554 * C2577 + C90634 * C3109) * C90498) *
                    C89 +
                (C3122 * C3364 + C3123 * C90498) * C90 +
                (C3124 * C3364 + C3125 * C90498) * C91) *
                   C90623 * C90753 -
               (((C554 * C3903 + C90634 * C4416) * C90498 +
                 (C554 * C3894 + C90634 * C4410) * C3364) *
                    C91 +
                ((C554 * C3904 + C90634 * C4417) * C90498 +
                 (C554 * C3895 + C90634 * C4411) * C3364) *
                    C90 +
                ((C554 * C3905 + C90634 * C4418) * C90498 +
                 (C554 * C3896 + C90634 * C4412) * C3364) *
                    C89) *
                   C90623 * C90579) *
                  C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C3364 +
            (C554 * C116 + C90634 * C561) * C90498) *
               C89 +
           (C584 * C3364 + C585 * C90498) * C90 +
           (C586 * C3364 + C587 * C90498) * C91) *
              C90623 * C6159 -
          ((C2289 * C90498 + C2288 * C3364) * C91 +
           (C2287 * C90498 + C2286 * C3364) * C90 +
           ((C554 * C1707 + C90634 * C2268) * C90498 +
            (C554 * C1700 + C90634 * C2264) * C3364) *
               C89) *
              C90623 * C6160 +
          (((C554 * C4656 + C90634 * C5191) * C3364 +
            (C554 * C4663 + C90634 * C5195) * C90498) *
               C89 +
           (C5208 * C3364 + C5209 * C90498) * C90 +
           (C5210 * C3364 + C5211 * C90498) * C91) *
              C90623 * C6161 -
          (((C554 * C6166 + C90634 * C6506) * C90498 +
            (C554 * C6163 + C90634 * C6503) * C3364) *
               C91 +
           ((C554 * C6167 + C90634 * C6507) * C90498 +
            (C554 * C6164 + C90634 * C6504) * C3364) *
               C90 +
           ((C554 * C6168 + C90634 * C6508) * C90498 +
            (C554 * C6165 + C90634 * C6505) * C3364) *
               C89) *
              C90623 * C6162) *
         C90541) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C826 +
            (C554 * C116 + C90634 * C561) * C821 - C584 * C827 - C585 * C822 +
            C586 * C828 + C587 * C823) *
               C90485 * C13576 +
           (C14618 + C14619 - C14602 - C14603 + C14604 + C14605) * C90485 *
               C13577 +
           (C14620 + C14621 - C14610 - C14611 + C14612 + C14613) * C90485 *
               C13578) *
              C90753 +
          ((C2286 * C827 -
            ((C554 * C1707 + C90634 * C2268) * C821 +
             (C554 * C1700 + C90634 * C2264) * C826) +
            C2287 * C822 - C2288 * C828 - C2289 * C823) *
               C90485 * C13576 +
           (C8771 * C827 -
            ((C554 * C3900 + C90634 * C4413) * C821 +
             (C554 * C3891 + C90634 * C4407) * C826) +
            C8772 * C822 - C8773 * C828 - C8774 * C823) *
               C90485 * C13577 +
           ((C554 * C3895 + C90634 * C4411) * C827 -
            ((C554 * C3905 + C90634 * C4418) * C821 +
             (C554 * C3896 + C90634 * C4412) * C826) +
            (C554 * C3904 + C90634 * C4417) * C822 -
            (C554 * C3894 + C90634 * C4410) * C828 -
            (C554 * C3903 + C90634 * C4416) * C823) *
               C90485 * C13578) *
              C90579) *
         C90541) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C3364 +
             (C554 * C116 + C90634 * C561) * C90498) *
                C90485 * C13576 +
            (C16632 + C16633) * C90485 * C13577 + C16646 * C13578) *
               C90753 -
           (C17391 * C13578 + (C17386 + C17387) * C90485 * C13577 +
            ((C554 * C1707 + C90634 * C2268) * C90498 +
             (C554 * C1700 + C90634 * C2264) * C3364) *
                C90485 * C13576) *
               C90579) *
              C2565 +
          (((C17387 + C17386) * C90485 * C13576 +
            (C17385 + C17384) * C90485 * C13577 +
            (C17388 + C17389) * C90485 * C13578) *
               C90579 -
           (C16647 * C13578 + (C16635 + C16634) * C90485 * C13577 +
            (C16633 + C16632) * C90485 * C13576) *
               C90753) *
              C2566 +
          ((C16646 * C13576 + (C16637 + C16636) * C90485 * C13577 +
            (C16648 + C16649) * C90485 * C13578) *
               C90753 -
           (((C554 * C16839 + C90634 * C17364) * C90498 +
             (C554 * C16836 + C90634 * C17362) * C3364) *
                C90485 * C13578 +
            (C17389 + C17388) * C90485 * C13577 + C17391 * C13576) *
               C90579) *
              C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C3364 +
            (C554 * C116 + C90634 * C561) * C90498) *
               C90485 * C13576 +
           (C16632 + C16633) * C90485 * C13577 + C16646 * C13578) *
              C6159 -
          (C17391 * C13578 + (C17386 + C17387) * C90485 * C13577 +
           ((C554 * C1707 + C90634 * C2268) * C90498 +
            (C554 * C1700 + C90634 * C2264) * C3364) *
               C90485 * C13576) *
              C6160 +
          (((C554 * C4656 + C90634 * C5191) * C3364 +
            (C554 * C4663 + C90634 * C5195) * C90498) *
               C90485 * C13576 +
           (C18860 + C18861) * C90485 * C13577 +
           (C18862 + C18863) * C90485 * C13578) *
              C6161 -
          (((C554 * C19089 + C90634 * C19413) * C90498 +
            (C554 * C19087 + C90634 * C19411) * C3364) *
               C90485 * C13578 +
           ((C554 * C19091 + C90634 * C19414) * C90498 +
            (C554 * C19088 + C90634 * C19412) * C3364) *
               C90485 * C13577 +
           ((C554 * C6168 + C90634 * C6508) * C90498 +
            (C554 * C6165 + C90634 * C6505) * C3364) *
               C90485 * C13576) *
              C6162) *
         C90541) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C26732 * C107 + C26429 * C555 + C26733 * C1700 + C26430 * C2264 +
            C26734 * C4656 + C26431 * C5191) *
               C826 +
           (C26732 * C116 + C26429 * C561 + C26733 * C1707 + C26430 * C2268 +
            C26734 * C4663 + C26431 * C5195) *
               C821 -
           (C26734 * C4657 + C26431 * C5192 + C26733 * C1697 + C26430 * C2263 +
            C26732 * C108 + C26429 * C556) *
               C827 -
           (C26734 * C4664 + C26431 * C5196 + C26733 * C1706 + C26430 * C2269 +
            C26732 * C117 + C26429 * C562) *
               C822 +
           (C26732 * C109 + C26429 * C557 + C26733 * C1698 + C26430 * C2265 +
            C26734 * C4658 + C26431 * C5193) *
               C828 +
           (C26732 * C118 + C26429 * C563 + C26733 * C1705 + C26430 * C2270 +
            C26734 * C4665 + C26431 * C5197) *
               C823) *
              C90485 * C90623 * C90753 +
          ((C26732 * C1697 + C26429 * C2263 + C26733 * C4657 + C26430 * C5192 +
            C26734 * C6164 + C26431 * C6504) *
               C827 -
           ((C26734 * C6168 + C26431 * C6508 + C26733 * C4663 + C26430 * C5195 +
             C26732 * C1707 + C26429 * C2268) *
                C821 +
            (C26734 * C6165 + C26431 * C6505 + C26733 * C4656 + C26430 * C5191 +
             C26732 * C1700 + C26429 * C2264) *
                C826) +
           (C26732 * C1706 + C26429 * C2269 + C26733 * C4664 + C26430 * C5196 +
            C26734 * C6167 + C26431 * C6507) *
               C822 -
           (C26734 * C6163 + C26431 * C6503 + C26733 * C4658 + C26430 * C5193 +
            C26732 * C1698 + C26429 * C2265) *
               C828 -
           (C26734 * C6166 + C26431 * C6506 + C26733 * C4665 + C26430 * C5197 +
            C26732 * C1705 + C26429 * C2270) *
               C823) *
              C90485 * C90623 * C90579) *
         C90541) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C26732 * C107 + C26429 * C555 + C26733 * C1700 + C26430 * C2264 +
             C26734 * C4656 + C26431 * C5191) *
                C3364 +
            (C26732 * C116 + C26429 * C561 + C26733 * C1707 + C26430 * C2268 +
             C26734 * C4663 + C26431 * C5195) *
                C90498) *
               C90485 * C90623 * C90753 -
           ((C26734 * C6168 + C26431 * C6508 + C26733 * C4663 + C26430 * C5195 +
             C26732 * C1707 + C26429 * C2268) *
                C90498 +
            (C26734 * C6165 + C26431 * C6505 + C26733 * C4656 + C26430 * C5191 +
             C26732 * C1700 + C26429 * C2264) *
                C3364) *
               C90485 * C90623 * C90579) *
              C2565 +
          (((C26732 * C3891 + C26429 * C4407 + C26733 * C5471 + C26430 * C5951 +
             C26734 * C19088 + C26431 * C19412) *
                C3364 +
            (C26732 * C3900 + C26429 * C4413 + C26733 * C5474 + C26430 * C5954 +
             C26734 * C19091 + C26431 * C19414) *
                C90498) *
               C90485 * C90623 * C90579 -
           ((C26734 * C5474 + C26431 * C5954 + C26733 * C3900 + C26430 * C4413 +
             C26732 * C839 + C26429 * C1400) *
                C90498 +
            (C26734 * C5471 + C26431 * C5951 + C26733 * C3891 + C26430 * C4407 +
             C26732 * C832 + C26429 * C1396) *
                C3364) *
               C90485 * C90623 * C90753) *
              C2566 +
          (((C26732 * C2570 + C26429 * C3105 + C26733 * C3896 + C26430 * C4412 +
             C26734 * C17651 + C26431 * C18119) *
                C3364 +
            (C26732 * C2577 + C26429 * C3109 + C26733 * C3905 + C26430 * C4418 +
             C26734 * C17654 + C26431 * C18121) *
                C90498) *
               C90485 * C90623 * C90753 -
           ((C26734 * C19089 + C26431 * C19413 + C26733 * C17654 +
             C26430 * C18121 + C26732 * C3905 + C26429 * C4418) *
                C90498 +
            (C26734 * C19087 + C26431 * C19411 + C26733 * C17651 +
             C26430 * C18119 + C26732 * C3896 + C26429 * C4412) *
                C3364) *
               C90485 * C90623 * C90579) *
              C2567)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C26732 * C107 + C26429 * C555 + C26733 * C1700 + C26430 * C2264 +
            C26734 * C4656 + C26431 * C5191) *
               C3364 +
           (C26732 * C116 + C26429 * C561 + C26733 * C1707 + C26430 * C2268 +
            C26734 * C4663 + C26431 * C5195) *
               C90498) *
              C90485 * C90623 * C6159 -
          ((C26734 * C6168 + C26431 * C6508 + C26733 * C4663 + C26430 * C5195 +
            C26732 * C1707 + C26429 * C2268) *
               C90498 +
           (C26734 * C6165 + C26431 * C6505 + C26733 * C4656 + C26430 * C5191 +
            C26732 * C1700 + C26429 * C2264) *
               C3364) *
              C90485 * C90623 * C6160 +
          ((C26732 * C4656 + C26429 * C5191 + C26733 * C6165 + C26430 * C6505 +
            C26734 * C30247 + C26431 * C30808) *
               C3364 +
           (C26732 * C4663 + C26429 * C5195 + C26733 * C6168 + C26430 * C6508 +
            C26734 * C30250 + C26431 * C30810) *
               C90498) *
              C90485 * C90623 * C6161 -
          ((C26734 * C31766 + C26431 * C32116 + C26733 * C30250 +
            C26430 * C30810 + C26732 * C6168 + C26429 * C6508) *
               C90498 +
           (C26734 * C31765 + C26431 * C32115 + C26733 * C30247 +
            C26430 * C30808 + C26732 * C6165 + C26429 * C6505) *
               C3364) *
              C90485 * C90623 * C6162) *
         C90541) /
            (p * q * std::sqrt(p + q));
    d2eezy[38] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C554 * C107 + C90634 * C555) * C181 +
                 (C554 * C182 + C90634 * C641) * C90541) *
                    C89 +
                (C648 + C664) * C90 + C668 * C91) *
                   C90623 * C821 -
               (C669 * C91 + (C665 + C651) * C90 + (C664 + C648) * C89) *
                   C90623 * C822 +
               (C668 * C89 + (C656 + C666) * C90 + (C657 + C667) * C91) *
                   C90623 * C823) *
                  C90753 +
              (((C2371 + C2383) * C89 + (C2374 + C2384) * C90 +
                (C2377 + C2385) * C91) *
                   C90623 * C822 -
               (C2386 * C91 + (C2383 + C2371) * C90 +
                ((C554 * C1794 + C90634 * C2368) * C90541 +
                 (C554 * C1700 + C90634 * C2264) * C181) *
                    C89) *
                   C90623 * C821 -
               (((C554 * C1795 + C90634 * C2369) * C90541 +
                 (C554 * C1701 + C90634 * C2267) * C181) *
                    C91 +
                (C2385 + C2377) * C90 + C2386 * C89) *
                   C90623 * C823) *
                  C90579) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C554 * C107 + C90634 * C555) * C2660 +
                (C554 * C182 + C90634 * C641) * C2565 -
                (C554 * C832 + C90634 * C1396) * C2661 -
                (C554 * C927 + C90634 * C1497) * C2566 +
                (C554 * C2570 + C90634 * C3105) * C2662 +
                (C554 * C2663 + C90634 * C3199) * C2567) *
                   C89 +
               (C3204 + C3205 - C3206 - C3207 + C3208 + C3220) * C90 +
               (C3211 + C3212 - C3213 - C3214 + C3215 + C3221) * C91) *
                  C90623 * C90498 * C90753 +
              (((C554 * C3891 + C90634 * C4407) * C2661 -
                ((C554 * C1794 + C90634 * C2368) * C2565 +
                 (C554 * C1700 + C90634 * C2264) * C2660) +
                (C554 * C3989 + C90634 * C4493) * C2566 -
                (C554 * C3896 + C90634 * C4412) * C2662 -
                (C554 * C3994 + C90634 * C4494) * C2567) *
                   C89 +
               ((C554 * C3892 + C90634 * C4408) * C2661 -
                (C2380 * C2565 + C2286 * C2660) +
                (C554 * C3990 + C90634 * C4495) * C2566 -
                (C554 * C3895 + C90634 * C4411) * C2662 -
                (C554 * C3993 + C90634 * C4496) * C2567) *
                   C90 +
               ((C554 * C3893 + C90634 * C4409) * C2661 -
                (C2381 * C2565 + C2288 * C2660) +
                (C554 * C3991 + C90634 * C4497) * C2566 -
                (C554 * C3894 + C90634 * C4410) * C2662 -
                (C554 * C3992 + C90634 * C4498) * C2567) *
                   C91) *
                  C90623 * C90498 * C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C554 * C107 + C90634 * C555) * C181 +
                                (C554 * C182 + C90634 * C641) * C90541) *
                                   C89 +
                               (C648 + C664) * C90 + C668 * C91) *
                                  C90623 * C90498 * C6159 -
                              (C2386 * C91 + (C2383 + C2371) * C90 +
                               ((C554 * C1794 + C90634 * C2368) * C90541 +
                                (C554 * C1700 + C90634 * C2264) * C181) *
                                   C89) *
                                  C90623 * C90498 * C6160 +
                              (((C554 * C4656 + C90634 * C5191) * C181 +
                                (C554 * C4746 + C90634 * C5285) * C90541) *
                                   C89 +
                               (C5290 + C5298) * C90 + (C5293 + C5299) * C91) *
                                  C90623 * C90498 * C6161 -
                              (((C554 * C6225 + C90634 * C6559) * C90541 +
                                (C554 * C6163 + C90634 * C6503) * C181) *
                                   C91 +
                               ((C554 * C6226 + C90634 * C6560) * C90541 +
                                (C554 * C6164 + C90634 * C6504) * C181) *
                                   C90 +
                               ((C554 * C6227 + C90634 * C6561) * C90541 +
                                (C554 * C6165 + C90634 * C6505) * C181) *
                                   C89) *
                                  C90623 * C90498 * C6162)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C181 +
             (C554 * C182 + C90634 * C641) * C90541) *
                C90485 * C13576 +
            (C14614 * C181 + C14700 * C90541) * C90485 * C13577 +
            (C14616 * C181 + C14701 * C90541) * C90485 * C13578) *
               C821 -
           ((C3218 * C90541 + C3122 * C181) * C90485 * C13578 +
            (C1518 * C90541 + C1418 * C181) * C90485 * C13577 +
            (C664 + C648) * C90485 * C13576) *
               C822 +
           (C668 * C90485 * C13576 +
            (C1420 * C181 + C1520 * C90541) * C90485 * C13577 +
            (C3124 * C181 + C3219 * C90541) * C90485 * C13578) *
               C823) *
              C90753 +
          (((C2371 + C2383) * C90485 * C13576 +
            (C8771 * C181 + C8884 * C90541) * C90485 * C13577 +
            ((C554 * C3895 + C90634 * C4411) * C181 +
             (C554 * C3993 + C90634 * C4496) * C90541) *
                C90485 * C13578) *
               C822 -
           (((C554 * C3994 + C90634 * C4494) * C90541 +
             (C554 * C3896 + C90634 * C4412) * C181) *
                C90485 * C13578 +
            ((C554 * C3989 + C90634 * C4493) * C90541 +
             (C554 * C3891 + C90634 * C4407) * C181) *
                C90485 * C13577 +
            ((C554 * C1794 + C90634 * C2368) * C90541 +
             (C554 * C1700 + C90634 * C2264) * C181) *
                C90485 * C13576) *
               C821 -
           (((C554 * C3992 + C90634 * C4498) * C90541 +
             (C554 * C3894 + C90634 * C4410) * C181) *
                C90485 * C13578 +
            (C8885 * C90541 + C8773 * C181) * C90485 * C13577 +
            C2386 * C90485 * C13576) *
               C823) *
              C90579)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C2660 +
            (C554 * C182 + C90634 * C641) * C2565 - C14614 * C2661 -
            C14700 * C2566 + C14616 * C2662 + C14701 * C2567) *
               C90485 * C13576 +
           (C14614 * C2660 + C14700 * C2565 - C14616 * C2661 - C14701 * C2566 +
            C16062 * C2662 + C16151 * C2567) *
               C90485 * C13577 +
           (C14616 * C2660 + C14701 * C2565 - C16062 * C2661 - C16151 * C2566 +
            C16644 * C2662 + C16703 * C2567) *
               C90485 * C13578) *
              C90498 * C90753 +
          ((C17381 * C2661 -
            ((C554 * C1794 + C90634 * C2368) * C2565 +
             (C554 * C1700 + C90634 * C2264) * C2660) +
            C17474 * C2566 - C17379 * C2662 - C17475 * C2567) *
               C90485 * C13576 +
           (C17379 * C2661 - (C17474 * C2565 + C17381 * C2660) +
            C17475 * C2566 - C17382 * C2662 - C17476 * C2567) *
               C90485 * C13577 +
           (C17382 * C2661 - (C17475 * C2565 + C17379 * C2660) +
            C17476 * C2566 - (C554 * C16836 + C90634 * C17362) * C2662 -
            (C554 * C16943 + C90634 * C17466) * C2567) *
               C90485 * C13578) *
              C90498 * C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C181 +
            (C554 * C182 + C90634 * C641) * C90541) *
               C90485 * C13576 +
           (C14614 * C181 + C14700 * C90541) * C90485 * C13577 +
           (C14616 * C181 + C14701 * C90541) * C90485 * C13578) *
              C90498 * C6159 -
          ((C17475 * C90541 + C17379 * C181) * C90485 * C13578 +
           (C17474 * C90541 + C17381 * C181) * C90485 * C13577 +
           ((C554 * C1794 + C90634 * C2368) * C90541 +
            (C554 * C1700 + C90634 * C2264) * C181) *
               C90485 * C13576) *
              C90498 * C6160 +
          (((C554 * C4656 + C90634 * C5191) * C181 +
            (C554 * C4746 + C90634 * C5285) * C90541) *
               C90485 * C13576 +
           (C18856 * C181 + C18943 * C90541) * C90485 * C13577 +
           (C18858 * C181 + C18944 * C90541) * C90485 * C13578) *
              C90498 * C6161 -
          (((C554 * C19145 + C90634 * C19465) * C90541 +
            (C554 * C19087 + C90634 * C19411) * C181) *
               C90485 * C13578 +
           ((C554 * C19146 + C90634 * C19466) * C90541 +
            (C554 * C19088 + C90634 * C19412) * C181) *
               C90485 * C13577 +
           ((C554 * C6227 + C90634 * C6561) * C90541 +
            (C554 * C6165 + C90634 * C6505) * C181) *
               C90485 * C13576) *
              C90498 * C6162)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C26732 * C107 + C26429 * C555 + C26733 * C1700 + C26430 * C2264 +
             C26734 * C4656 + C26431 * C5191) *
                C181 +
            (C26732 * C182 + C26429 * C641 + C26733 * C1794 + C26430 * C2368 +
             C26734 * C4746 + C26431 * C5285) *
                C90541) *
               C90485 * C90623 * C821 -
           ((C26734 * C4747 + C26431 * C5286 + C26733 * C1791 + C26430 * C2365 +
             C26732 * C183 + C26429 * C642) *
                C90541 +
            (C26734 * C4657 + C26431 * C5192 + C26733 * C1697 + C26430 * C2263 +
             C26732 * C108 + C26429 * C556) *
                C181) *
               C90485 * C90623 * C822 +
           ((C26732 * C109 + C26429 * C557 + C26733 * C1698 + C26430 * C2265 +
             C26734 * C4658 + C26431 * C5193) *
                C181 +
            (C26732 * C184 + C26429 * C643 + C26733 * C1792 + C26430 * C2366 +
             C26734 * C4748 + C26431 * C5287) *
                C90541) *
               C90485 * C90623 * C823) *
              C90753 +
          (((C26732 * C1697 + C26429 * C2263 + C26733 * C4657 + C26430 * C5192 +
             C26734 * C6164 + C26431 * C6504) *
                C181 +
            (C26732 * C1791 + C26429 * C2365 + C26733 * C4747 + C26430 * C5286 +
             C26734 * C6226 + C26431 * C6560) *
                C90541) *
               C90485 * C90623 * C822 -
           ((C26734 * C6227 + C26431 * C6561 + C26733 * C4746 + C26430 * C5285 +
             C26732 * C1794 + C26429 * C2368) *
                C90541 +
            (C26734 * C6165 + C26431 * C6505 + C26733 * C4656 + C26430 * C5191 +
             C26732 * C1700 + C26429 * C2264) *
                C181) *
               C90485 * C90623 * C821 -
           ((C26734 * C6225 + C26431 * C6559 + C26733 * C4748 + C26430 * C5287 +
             C26732 * C1792 + C26429 * C2366) *
                C90541 +
            (C26734 * C6163 + C26431 * C6503 + C26733 * C4658 + C26430 * C5193 +
             C26732 * C1698 + C26429 * C2265) *
                C181) *
               C90485 * C90623 * C823) *
              C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C26732 * C107 + C26429 * C555 + C26733 * C1700 + C26430 * C2264 +
            C26734 * C4656 + C26431 * C5191) *
               C2660 +
           (C26732 * C182 + C26429 * C641 + C26733 * C1794 + C26430 * C2368 +
            C26734 * C4746 + C26431 * C5285) *
               C2565 -
           (C26734 * C5471 + C26431 * C5951 + C26733 * C3891 + C26430 * C4407 +
            C26732 * C832 + C26429 * C1396) *
               C2661 -
           (C26734 * C5557 + C26431 * C6029 + C26733 * C3989 + C26430 * C4493 +
            C26732 * C927 + C26429 * C1497) *
               C2566 +
           (C26732 * C2570 + C26429 * C3105 + C26733 * C3896 + C26430 * C4412 +
            C26734 * C17651 + C26431 * C18119) *
               C2662 +
           (C26732 * C2663 + C26429 * C3199 + C26733 * C3994 + C26430 * C4494 +
            C26734 * C17733 + C26431 * C18197) *
               C2567) *
              C90485 * C90623 * C90498 * C90753 +
          ((C26732 * C3891 + C26429 * C4407 + C26733 * C5471 + C26430 * C5951 +
            C26734 * C19088 + C26431 * C19412) *
               C2661 -
           ((C26734 * C6227 + C26431 * C6561 + C26733 * C4746 + C26430 * C5285 +
             C26732 * C1794 + C26429 * C2368) *
                C2565 +
            (C26734 * C6165 + C26431 * C6505 + C26733 * C4656 + C26430 * C5191 +
             C26732 * C1700 + C26429 * C2264) *
                C2660) +
           (C26732 * C3989 + C26429 * C4493 + C26733 * C5557 + C26430 * C6029 +
            C26734 * C19146 + C26431 * C19466) *
               C2566 -
           (C26734 * C19087 + C26431 * C19411 + C26733 * C17651 +
            C26430 * C18119 + C26732 * C3896 + C26429 * C4412) *
               C2662 -
           (C26734 * C19145 + C26431 * C19465 + C26733 * C17733 +
            C26430 * C18197 + C26732 * C3994 + C26429 * C4494) *
               C2567) *
              C90485 * C90623 * C90498 * C90579)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C26732 * C107 + C26429 * C555 + C26733 * C1700 + C26430 * C2264 +
            C26734 * C4656 + C26431 * C5191) *
               C181 +
           (C26732 * C182 + C26429 * C641 + C26733 * C1794 + C26430 * C2368 +
            C26734 * C4746 + C26431 * C5285) *
               C90541) *
              C90485 * C90623 * C90498 * C6159 -
          ((C26734 * C6227 + C26431 * C6561 + C26733 * C4746 + C26430 * C5285 +
            C26732 * C1794 + C26429 * C2368) *
               C90541 +
           (C26734 * C6165 + C26431 * C6505 + C26733 * C4656 + C26430 * C5191 +
            C26732 * C1700 + C26429 * C2264) *
               C181) *
              C90485 * C90623 * C90498 * C6160 +
          ((C26732 * C4656 + C26429 * C5191 + C26733 * C6165 + C26430 * C6505 +
            C26734 * C30247 + C26431 * C30808) *
               C181 +
           (C26732 * C4746 + C26429 * C5285 + C26733 * C6227 + C26430 * C6561 +
            C26734 * C30357 + C26431 * C30886) *
               C90541) *
              C90485 * C90623 * C90498 * C6161 -
          ((C26734 * C31829 + C26431 * C32167 + C26733 * C30357 +
            C26430 * C30886 + C26732 * C6227 + C26429 * C6561) *
               C90541 +
           (C26734 * C31765 + C26431 * C32115 + C26733 * C30247 +
            C26430 * C30808 + C26732 * C6165 + C26429 * C6505) *
               C181) *
              C90485 * C90623 * C90498 * C6162)) /
            (p * q * std::sqrt(p + q));
    d2eezz[38] += (0.5 * std::pow(Pi, 2.5) *
                       ((((C554 * C107 + C90634 * C555) * C1875 +
                          (C554 * C245 + C90634 * C719) * C90753 -
                          (C554 * C1700 + C90634 * C2264) * C1876 -
                          (C554 * C1879 + C90634 * C2460) * C90579) *
                             C89 +
                         (C2466 + C2467 - C2468 - C2485) * C90 + C2489 * C91) *
                            C90623 * C90541 * C821 +
                        ((C2468 - (C2467 + C2466) + C2485) * C89 +
                         (C2473 - (C2472 + C2471) + C2487) * C90 +
                         (C2476 - (C2477 + C2478) + C2488) * C91) *
                            C90623 * C90541 * C822 +
                        (C2489 * C89 + (C2478 + C2477 - C2476 - C2488) * C90 +
                         (C590 * C1875 + C741 * C90753 -
                          (C554 * C1701 + C90634 * C2267) * C1876 -
                          (C554 * C1881 + C90634 * C2464) * C90579) *
                             C91) *
                            C90623 * C90541 * C823) +
                   0.5 * std::pow(Pi, 2.5) *
                       ((((C554 * C107 + C90634 * C555) * C1875 +
                          (C554 * C245 + C90634 * C719) * C90753 -
                          (C554 * C1700 + C90634 * C2264) * C1876 -
                          (C554 * C1879 + C90634 * C2460) * C90579) *
                             C89 +
                         (C2466 + C2467 - C2468 - C2485) * C90 + C2489 * C91) *
                            C90623 * C2565 +
                        (((C554 * C3891 + C90634 * C4407) * C1876 -
                          ((C554 * C1011 + C90634 * C1602) * C90753 +
                           (C554 * C832 + C90634 * C1396) * C1875) +
                          (C554 * C4075 + C90634 * C4573) * C90579) *
                             C89 +
                         ((C554 * C3892 + C90634 * C4408) * C1876 -
                          (C1616 * C90753 + C1418 * C1875) +
                          (C554 * C4076 + C90634 * C4574) * C90579) *
                             C90 +
                         ((C554 * C3893 + C90634 * C4409) * C1876 -
                          (C1615 * C90753 + C1420 * C1875) +
                          (C554 * C4077 + C90634 * C4575) * C90579) *
                             C91) *
                            C90623 * C2566 +
                        (((C554 * C2570 + C90634 * C3105) * C1875 +
                          (C554 * C2745 + C90634 * C3295) * C90753 -
                          (C554 * C3896 + C90634 * C4412) * C1876 -
                          (C554 * C4080 + C90634 * C4576) * C90579) *
                             C89 +
                         (C3122 * C1875 + C3306 * C90753 -
                          (C554 * C3895 + C90634 * C4411) * C1876 -
                          (C554 * C4079 + C90634 * C4577) * C90579) *
                             C90 +
                         (C3124 * C1875 + C3307 * C90753 -
                          (C554 * C3894 + C90634 * C4410) * C1876 -
                          (C554 * C4078 + C90634 * C4578) * C90579) *
                             C91) *
                            C90623 * C2567) *
                       C90498) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   (((C554 * C107 + C90634 * C555) * C6281 +
                     (C554 * C245 + C90634 * C719) * C6159 -
                     (C554 * C1700 + C90634 * C2264) * C6282 -
                     (C554 * C1879 + C90634 * C2460) * C6160 +
                     (C554 * C4656 + C90634 * C5191) * C6283 +
                     (C554 * C4831 + C90634 * C5373) * C6161 -
                     (C554 * C6165 + C90634 * C6505) * C6284 -
                     (C554 * C6287 + C90634 * C6612) * C6162) *
                        C89 +
                    (C584 * C6281 + C738 * C6159 - C2286 * C6282 -
                     C2481 * C6160 + C5208 * C6283 + C5392 * C6161 -
                     (C554 * C6164 + C90634 * C6504) * C6284 -
                     (C554 * C6286 + C90634 * C6613) * C6162) *
                        C90 +
                    (C586 * C6281 + C739 * C6159 - C2288 * C6282 -
                     C2483 * C6160 + C5210 * C6283 + C5393 * C6161 -
                     (C554 * C6163 + C90634 * C6503) * C6284 -
                     (C554 * C6285 + C90634 * C6614) * C6162) *
                        C91) *
                   C90623 * C90541 * C90498) /
                      (p * q * std::sqrt(p + q)) +
                  (0.5 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C90634 * C555) * C1875 +
                      (C554 * C245 + C90634 * C719) * C90753 -
                      (C554 * C1700 + C90634 * C2264) * C1876 -
                      (C554 * C1879 + C90634 * C2460) * C90579) *
                         C90485 * C13576 +
                     (C14614 * C1875 + C14782 * C90753 -
                      (C554 * C3891 + C90634 * C4407) * C1876 -
                      (C554 * C4075 + C90634 * C4573) * C90579) *
                         C90485 * C13577 +
                     (C14616 * C1875 + C14783 * C90753 -
                      (C554 * C3896 + C90634 * C4412) * C1876 -
                      (C554 * C4080 + C90634 * C4576) * C90579) *
                         C90485 * C13578) *
                        C90541 * C821 +
                    ((C2468 - (C2467 + C2466) + C2485) * C90485 * C13576 +
                     (C8987 - (C8988 + C8989) + C8999) * C90485 * C13577 +
                     ((C554 * C3895 + C90634 * C4411) * C1876 -
                      (C3306 * C90753 + C3122 * C1875) +
                      (C554 * C4079 + C90634 * C4577) * C90579) *
                         C90485 * C13578) *
                        C90541 * C822 +
                    (C2489 * C90485 * C13576 +
                     (C8994 + C8993 - C8992 - C9000) * C90485 * C13577 +
                     (C3124 * C1875 + C3307 * C90753 -
                      (C554 * C3894 + C90634 * C4410) * C1876 -
                      (C554 * C4078 + C90634 * C4578) * C90579) *
                         C90485 * C13578) *
                        C90541 * C823)) /
                      (p * q * std::sqrt(p + q)) +
                  (0.5 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C90634 * C555) * C1875 +
                      (C554 * C245 + C90634 * C719) * C90753 -
                      (C554 * C1700 + C90634 * C2264) * C1876 -
                      (C554 * C1879 + C90634 * C2460) * C90579) *
                         C90485 * C13576 +
                     (C17553 + C17554 - C17555 - C17572) * C90485 * C13577 +
                     C17577 * C13578) *
                        C2565 +
                    ((C17555 - (C17554 + C17553) + C17572) * C90485 * C13576 +
                     (C17560 - (C17559 + C17558) + C17574) * C90485 * C13577 +
                     (C17563 - (C17564 + C17565) + C17575) * C90485 * C13578) *
                        C2566 +
                    (C17577 * C13576 +
                     (C17565 + C17564 - C17563 - C17575) * C90485 * C13577 +
                     (C16644 * C1875 + C16760 * C90753 -
                      (C554 * C16836 + C90634 * C17362) * C1876 -
                      (C554 * C17030 + C90634 * C17551) * C90579) *
                         C90485 * C13578) *
                        C2567) *
                   C90498) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   (((C554 * C107 + C90634 * C555) * C6281 +
                     (C554 * C245 + C90634 * C719) * C6159 -
                     (C554 * C1700 + C90634 * C2264) * C6282 -
                     (C554 * C1879 + C90634 * C2460) * C6160 +
                     (C554 * C4656 + C90634 * C5191) * C6283 +
                     (C554 * C4831 + C90634 * C5373) * C6161 -
                     (C554 * C6165 + C90634 * C6505) * C6284 -
                     (C554 * C6287 + C90634 * C6612) * C6162) *
                        C90485 * C13576 +
                    (C14614 * C6281 + C14782 * C6159 - C17381 * C6282 -
                     C17568 * C6160 + C18856 * C6283 + C19034 * C6161 -
                     (C554 * C19088 + C90634 * C19412) * C6284 -
                     (C554 * C19199 + C90634 * C19517) * C6162) *
                        C90485 * C13577 +
                    (C14616 * C6281 + C14783 * C6159 - C17379 * C6282 -
                     C17570 * C6160 + C18858 * C6283 + C19035 * C6161 -
                     (C554 * C19087 + C90634 * C19411) * C6284 -
                     (C554 * C19200 + C90634 * C19518) * C6162) *
                        C90485 * C13578) *
                   C90541 * C90498) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   (((C26732 * C107 + C26429 * C555 + C26733 * C1700 +
                      C26430 * C2264 + C26734 * C4656 + C26431 * C5191) *
                         C1875 +
                     (C26732 * C245 + C26429 * C719 + C26733 * C1879 +
                      C26430 * C2460 + C26734 * C4831 + C26431 * C5373) *
                         C90753 -
                     (C26734 * C6165 + C26431 * C6505 + C26733 * C4656 +
                      C26430 * C5191 + C26732 * C1700 + C26429 * C2264) *
                         C1876 -
                     (C26734 * C6287 + C26431 * C6612 + C26733 * C4831 +
                      C26430 * C5373 + C26732 * C1879 + C26429 * C2460) *
                         C90579) *
                        C90485 * C90623 * C90541 * C821 +
                    ((C26732 * C1697 + C26429 * C2263 + C26733 * C4657 +
                      C26430 * C5192 + C26734 * C6164 + C26431 * C6504) *
                         C1876 -
                     ((C26734 * C4832 + C26431 * C5374 + C26733 * C1878 +
                       C26430 * C2461 + C26732 * C246 + C26429 * C720) *
                          C90753 +
                      (C26734 * C4657 + C26431 * C5192 + C26733 * C1697 +
                       C26430 * C2263 + C26732 * C108 + C26429 * C556) *
                          C1875) +
                     (C26732 * C1878 + C26429 * C2461 + C26733 * C4832 +
                      C26430 * C5374 + C26734 * C6286 + C26431 * C6613) *
                         C90579) *
                        C90485 * C90623 * C90541 * C822 +
                    ((C26732 * C109 + C26429 * C557 + C26733 * C1698 +
                      C26430 * C2265 + C26734 * C4658 + C26431 * C5193) *
                         C1875 +
                     (C26732 * C247 + C26429 * C721 + C26733 * C1877 +
                      C26430 * C2462 + C26734 * C4833 + C26431 * C5375) *
                         C90753 -
                     (C26734 * C6163 + C26431 * C6503 + C26733 * C4658 +
                      C26430 * C5193 + C26732 * C1698 + C26429 * C2265) *
                         C1876 -
                     (C26734 * C6285 + C26431 * C6614 + C26733 * C4833 +
                      C26430 * C5375 + C26732 * C1877 + C26429 * C2462) *
                         C90579) *
                        C90485 * C90623 * C90541 * C823)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   (((C26732 * C107 + C26429 * C555 + C26733 * C1700 +
                      C26430 * C2264 + C26734 * C4656 + C26431 * C5191) *
                         C1875 +
                     (C26732 * C245 + C26429 * C719 + C26733 * C1879 +
                      C26430 * C2460 + C26734 * C4831 + C26431 * C5373) *
                         C90753 -
                     (C26734 * C6165 + C26431 * C6505 + C26733 * C4656 +
                      C26430 * C5191 + C26732 * C1700 + C26429 * C2264) *
                         C1876 -
                     (C26734 * C6287 + C26431 * C6612 + C26733 * C4831 +
                      C26430 * C5373 + C26732 * C1879 + C26429 * C2460) *
                         C90579) *
                        C90485 * C90623 * C2565 +
                    ((C26732 * C3891 + C26429 * C4407 + C26733 * C5471 +
                      C26430 * C5951 + C26734 * C19088 + C26431 * C19412) *
                         C1876 -
                     ((C26734 * C5637 + C26431 * C6106 + C26733 * C4075 +
                       C26430 * C4573 + C26732 * C1011 + C26429 * C1602) *
                          C90753 +
                      (C26734 * C5471 + C26431 * C5951 + C26733 * C3891 +
                       C26430 * C4407 + C26732 * C832 + C26429 * C1396) *
                          C1875) +
                     (C26732 * C4075 + C26429 * C4573 + C26733 * C5637 +
                      C26430 * C6106 + C26734 * C19199 + C26431 * C19517) *
                         C90579) *
                        C90485 * C90623 * C2566 +
                    ((C26732 * C2570 + C26429 * C3105 + C26733 * C3896 +
                      C26430 * C4412 + C26734 * C17651 + C26431 * C18119) *
                         C1875 +
                     (C26732 * C2745 + C26429 * C3295 + C26733 * C4080 +
                      C26430 * C4576 + C26734 * C17811 + C26431 * C18273) *
                         C90753 -
                     (C26734 * C19087 + C26431 * C19411 + C26733 * C17651 +
                      C26430 * C18119 + C26732 * C3896 + C26429 * C4412) *
                         C1876 -
                     (C26734 * C19200 + C26431 * C19518 + C26733 * C17811 +
                      C26430 * C18273 + C26732 * C4080 + C26429 * C4576) *
                         C90579) *
                        C90485 * C90623 * C2567) *
                   C90498) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   ((C26732 * C107 + C26429 * C555 + C26733 * C1700 +
                     C26430 * C2264 + C26734 * C4656 + C26431 * C5191) *
                        C6281 +
                    (C26732 * C245 + C26429 * C719 + C26733 * C1879 +
                     C26430 * C2460 + C26734 * C4831 + C26431 * C5373) *
                        C6159 -
                    (C26734 * C6165 + C26431 * C6505 + C26733 * C4656 +
                     C26430 * C5191 + C26732 * C1700 + C26429 * C2264) *
                        C6282 -
                    (C26734 * C6287 + C26431 * C6612 + C26733 * C4831 +
                     C26430 * C5373 + C26732 * C1879 + C26429 * C2460) *
                        C6160 +
                    (C26732 * C4656 + C26429 * C5191 + C26733 * C6165 +
                     C26430 * C6505 + C26734 * C30247 + C26431 * C30808) *
                        C6283 +
                    (C26732 * C4831 + C26429 * C5373 + C26733 * C6287 +
                     C26430 * C6612 + C26734 * C30449 + C26431 * C30962) *
                        C6161 -
                    (C26734 * C31765 + C26431 * C32115 + C26733 * C30247 +
                     C26430 * C30808 + C26732 * C6165 + C26429 * C6505) *
                        C6284 -
                    (C26734 * C31888 + C26431 * C32218 + C26733 * C30449 +
                     C26430 * C30962 + C26732 * C6287 + C26429 * C6612) *
                        C6162) *
                   C90485 * C90623 * C90541 * C90498) /
                      (p * q * std::sqrt(p + q));
    d2eexx[39] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C6694 +
            (C13579 * C116 + C90485 * C125) * C90780 -
            (C13579 * C108 + C90485 * C114) * C6695 -
            (C13579 * C117 + C90485 * C126) * C90771 +
            (C13579 * C109 + C90485 * C115) * C6696 +
            (C13579 * C118 + C90485 * C127) * C6691) *
               C13576 +
           (C19594 + C19595 - C19596 - C19597 + C19598 + C19599) * C13577 +
           (C19600 + C19601 - C19602 - C19603 + C19604 + C19605) * C13578) *
              C90634 * C9074 +
          (((C13579 * C1697 + C90485 * C1702) * C6695 -
            ((C13579 * C1707 + C90485 * C1714) * C90780 +
             (C13579 * C1700 + C90485 * C1708) * C6694) +
            (C13579 * C1706 + C90485 * C1713) * C90771 -
            (C13579 * C1698 + C90485 * C1703) * C6696 -
            (C13579 * C1705 + C90485 * C1712) * C6691) *
               C13576 +
           (C21021 * C6695 - (C16858 * C90780 + C16859 * C6694) +
            C21022 * C90771 - (C13579 * C3893 + C90485 * C3899) * C6696 -
            (C13579 * C3902 + C90485 * C3911) * C6691) *
               C13577 +
           (C21023 * C6695 - (C16856 * C90780 + C16857 * C6694) +
            C21024 * C90771 - (C13579 * C3894 + C90485 * C3906) * C6696 -
            (C13579 * C3903 + C90485 * C3912) * C6691) *
               C13578) *
              C90634 * C90579) *
         C90541) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C6694 +
           (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 + C102 * C118 +
            C91 * C127) *
               C90780 -
           (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 + C100 * C108 +
            C89 * C114) *
               C6695 -
           (C102 * C120 + C91 * C128 + C101 * C118 + C90 * C127 + C100 * C117 +
            C89 * C126) *
               C90771 +
           (C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 + C102 * C111 +
            C91 * C121) *
               C6696 +
           (C100 * C118 + C89 * C127 + C101 * C120 + C90 * C128 + C102 * C122 +
            C91 * C129) *
               C6691) *
              C90623 * C90634 * C9074 +
          ((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
            C102 * C1699 + C91 * C1704) *
               C6695 -
           ((C102 * C1705 + C91 * C1712 + C101 * C1706 + C90 * C1713 +
             C100 * C1707 + C89 * C1714) *
                C90780 +
            (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
             C100 * C1700 + C89 * C1708) *
                C6694) +
           (C100 * C1706 + C89 * C1713 + C101 * C1705 + C90 * C1712 +
            C102 * C1709 + C91 * C1715) *
               C90771 -
           (C102 * C1701 + C91 * C1710 + C101 * C1699 + C90 * C1704 +
            C100 * C1698 + C89 * C1703) *
               C6696 -
           (C102 * C1711 + C91 * C1716 + C101 * C1709 + C90 * C1715 +
            C100 * C1705 + C89 * C1712) *
               C6691) *
              C90623 * C90634 * C90579) *
         C90541) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C6694 +
            (C13579 * C116 + C90485 * C125) * C90780 -
            (C13579 * C108 + C90485 * C114) * C6695 -
            (C13579 * C117 + C90485 * C126) * C90771 +
            (C13579 * C109 + C90485 * C115) * C6696 +
            (C13579 * C118 + C90485 * C127) * C6691) *
               C90623 * C26429 +
           (C34604 + C34605 - C34606 - C34607 + C34608 + C34609) * C90623 *
               C26430 +
           (C34610 + C34611 - C34612 - C34613 + C34614 + C34615) * C90623 *
               C26431) *
              C9074 +
          ((C34606 - (C34605 + C34604) + C34607 - C34608 - C34609) * C90623 *
               C26429 +
           (C34612 - (C34611 + C34610) + C34613 - C34614 - C34615) * C90623 *
               C26430 +
           (C30273 * C6695 - (C30274 * C90780 + C30275 * C6694) +
            C30276 * C90771 - (C13579 * C6163 + C90485 * C6169) * C6696 -
            (C13579 * C6166 + C90485 * C6172) * C6691) *
               C90623 * C26431) *
              C90579) *
         C90541) /
            (p * q * std::sqrt(p + q));
    d2eexy[39] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C13579 * C107 + C90485 * C113) * C181 +
                       (C13579 * C182 + C90485 * C188) * C90541) *
                          C13576 +
                      (C14082 * C181 + C14192 * C90541) * C13577 +
                      (C14088 * C181 + C14193 * C90541) * C13578) *
                         C90634 * C90780 -
                     ((C14195 * C90541 + C14090 * C181) * C13578 +
                      (C14194 * C90541 + C14084 * C181) * C13577 +
                      ((C13579 * C183 + C90485 * C189) * C90541 +
                       (C13579 * C108 + C90485 * C114) * C181) *
                          C13576) *
                         C90634 * C90771 +
                     (((C13579 * C109 + C90485 * C115) * C181 +
                       (C13579 * C184 + C90485 * C190) * C90541) *
                          C13576 +
                      (C14086 * C181 + C14196 * C90541) * C13577 +
                      (C14092 * C181 + C14197 * C90541) * C13578) *
                         C90634 * C6691) *
                        C9074 +
                    ((((C13579 * C1697 + C90485 * C1702) * C181 +
                       (C13579 * C1791 + C90485 * C1796) * C90541) *
                          C13576 +
                      (C21021 * C181 + C21133 * C90541) * C13577 +
                      (C21023 * C181 + C21134 * C90541) * C13578) *
                         C90634 * C90771 -
                     ((C16954 * C90541 + C16857 * C181) * C13578 +
                      (C16953 * C90541 + C16859 * C181) * C13577 +
                      ((C13579 * C1794 + C90485 * C1799) * C90541 +
                       (C13579 * C1700 + C90485 * C1708) * C181) *
                          C13576) *
                         C90634 * C90780 -
                     (((C13579 * C3992 + C90485 * C3998) * C90541 +
                       (C13579 * C3894 + C90485 * C3906) * C181) *
                          C13578 +
                      ((C13579 * C3991 + C90485 * C3997) * C90541 +
                       (C13579 * C3893 + C90485 * C3899) * C181) *
                          C13577 +
                      ((C13579 * C1792 + C90485 * C1797) * C90541 +
                       (C13579 * C1698 + C90485 * C1703) * C181) *
                          C13576) *
                         C90634 * C6691) *
                        C90579)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                       C102 * C109 + C91 * C115) *
                          C181 +
                      (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 +
                       C102 * C184 + C91 * C190) *
                          C90541) *
                         C90623 * C90634 * C90780 -
                     ((C102 * C185 + C91 * C191 + C101 * C184 + C90 * C190 +
                       C100 * C183 + C89 * C189) *
                          C90541 +
                      (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                       C100 * C108 + C89 * C114) *
                          C181) *
                         C90623 * C90634 * C90771 +
                     ((C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 +
                       C102 * C111 + C91 * C121) *
                          C181 +
                      (C100 * C184 + C89 * C190 + C101 * C185 + C90 * C191 +
                       C102 * C186 + C91 * C192) *
                          C90541) *
                         C90623 * C90634 * C6691) *
                        C9074 +
                    (((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
                       C102 * C1699 + C91 * C1704) *
                          C181 +
                      (C100 * C1791 + C89 * C1796 + C101 * C1792 + C90 * C1797 +
                       C102 * C1793 + C91 * C1798) *
                          C90541) *
                         C90623 * C90634 * C90771 -
                     ((C102 * C1792 + C91 * C1797 + C101 * C1791 + C90 * C1796 +
                       C100 * C1794 + C89 * C1799) *
                          C90541 +
                      (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
                       C100 * C1700 + C89 * C1708) *
                          C181) *
                         C90623 * C90634 * C90780 -
                     ((C102 * C1795 + C91 * C1800 + C101 * C1793 + C90 * C1798 +
                       C100 * C1792 + C89 * C1797) *
                          C90541 +
                      (C102 * C1701 + C91 * C1710 + C101 * C1699 + C90 * C1704 +
                       C100 * C1698 + C89 * C1703) *
                          C181) *
                         C90623 * C90634 * C6691) *
                        C90579)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C13579 * C107 + C90485 * C113) * C181 +
                       (C13579 * C182 + C90485 * C188) * C90541) *
                          C90623 * C26429 +
                      (C27698 + C27722) * C90623 * C26430 + C30370 * C26431) *
                         C90780 -
                     (C30371 * C26431 + (C27725 + C27709) * C90623 * C26430 +
                      ((C13579 * C183 + C90485 * C189) * C90541 +
                       (C13579 * C108 + C90485 * C114) * C181) *
                          C90623 * C26429) *
                         C90771 +
                     (((C13579 * C109 + C90485 * C115) * C181 +
                       (C13579 * C184 + C90485 * C190) * C90541) *
                          C90623 * C26429 +
                      (C27710 + C27726) * C90623 * C26430 +
                      (C27713 + C27727) * C90623 * C26431) *
                         C6691) *
                        C9074 +
                    (((C27709 + C27725) * C90623 * C26429 +
                      (C27706 + C27724) * C90623 * C26430 +
                      (C30364 + C30374) * C90623 * C26431) *
                         C90771 -
                     (C31836 * C26431 + (C27723 + C27701) * C90623 * C26430 +
                      (C27722 + C27698) * C90623 * C26429) *
                         C90780 -
                     (((C13579 * C6225 + C90485 * C6228) * C90541 +
                       (C13579 * C6163 + C90485 * C6169) * C181) *
                          C90623 * C26431 +
                      (C27727 + C27713) * C90623 * C26430 +
                      (C27726 + C27710) * C90623 * C26429) *
                         C6691) *
                        C90579)) /
                      (p * q * std::sqrt(p + q));
    d2eexz[39] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C13579 * C107 + C90485 * C113) * C9224 +
                      (C13579 * C245 + C90485 * C251) * C9074 -
                      (C13579 * C1700 + C90485 * C1708) * C9225 -
                      (C13579 * C1879 + C90485 * C1884) * C90579) *
                         C13576 +
                     (C14082 * C9224 + C14290 * C9074 - C16859 * C9225 -
                      C17049 * C90579) *
                         C13577 +
                     (C14088 * C9224 + C14291 * C9074 - C16857 * C9225 -
                      C17051 * C90579) *
                         C13578) *
                        C90634 * C90541 * C90780 +
                    (((C13579 * C1697 + C90485 * C1702) * C9225 -
                      ((C13579 * C246 + C90485 * C252) * C9074 +
                       (C13579 * C108 + C90485 * C114) * C9224) +
                      (C13579 * C1878 + C90485 * C1883) * C90579) *
                         C13576 +
                     (C21021 * C9225 - (C14292 * C9074 + C14084 * C9224) +
                      C21245 * C90579) *
                         C13577 +
                     (C21023 * C9225 - (C14293 * C9074 + C14090 * C9224) +
                      C21246 * C90579) *
                         C13578) *
                        C90634 * C90541 * C90771 +
                    (((C13579 * C109 + C90485 * C115) * C9224 +
                      (C13579 * C247 + C90485 * C253) * C9074 -
                      (C13579 * C1698 + C90485 * C1703) * C9225 -
                      (C13579 * C1877 + C90485 * C1882) * C90579) *
                         C13576 +
                     (C14086 * C9224 + C14294 * C9074 -
                      (C13579 * C3893 + C90485 * C3899) * C9225 -
                      (C13579 * C4077 + C90485 * C4083) * C90579) *
                         C13577 +
                     (C14092 * C9224 + C14295 * C9074 -
                      (C13579 * C3894 + C90485 * C3906) * C9225 -
                      (C13579 * C4078 + C90485 * C4084) * C90579) *
                         C13578) *
                        C90634 * C90541 * C6691)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                      C102 * C109 + C91 * C115) *
                         C9224 +
                     (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 +
                      C102 * C247 + C91 * C253) *
                         C9074 -
                     (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
                      C100 * C1700 + C89 * C1708) *
                         C9225 -
                     (C102 * C1877 + C91 * C1882 + C101 * C1878 + C90 * C1883 +
                      C100 * C1879 + C89 * C1884) *
                         C90579) *
                        C90623 * C90634 * C90541 * C90780 +
                    ((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
                      C102 * C1699 + C91 * C1704) *
                         C9225 -
                     ((C102 * C248 + C91 * C254 + C101 * C247 + C90 * C253 +
                       C100 * C246 + C89 * C252) *
                          C9074 +
                      (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                       C100 * C108 + C89 * C114) *
                          C9224) +
                     (C100 * C1878 + C89 * C1883 + C101 * C1877 + C90 * C1882 +
                      C102 * C1880 + C91 * C1885) *
                         C90579) *
                        C90623 * C90634 * C90541 * C90771 +
                    ((C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 +
                      C102 * C111 + C91 * C121) *
                         C9224 +
                     (C100 * C247 + C89 * C253 + C101 * C248 + C90 * C254 +
                      C102 * C249 + C91 * C255) *
                         C9074 -
                     (C102 * C1701 + C91 * C1710 + C101 * C1699 + C90 * C1704 +
                      C100 * C1698 + C89 * C1703) *
                         C9225 -
                     (C102 * C1881 + C91 * C1886 + C101 * C1880 + C90 * C1885 +
                      C100 * C1877 + C89 * C1882) *
                         C90579) *
                        C90623 * C90634 * C90541 * C6691)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C13579 * C107 + C90485 * C113) * C9224 +
                      (C13579 * C245 + C90485 * C251) * C9074 - C27600 * C9225 -
                      C27814 * C90579) *
                         C90623 * C26429 +
                     (C27600 * C9224 + C27814 * C9074 - C27606 * C9225 -
                      C27815 * C90579) *
                         C90623 * C26430 +
                     (C27606 * C9224 + C27815 * C9074 - C30275 * C9225 -
                      C30458 * C90579) *
                         C90623 * C26431) *
                        C90541 * C90780 +
                    ((C27602 * C9225 -
                      ((C13579 * C246 + C90485 * C252) * C9074 +
                       (C13579 * C108 + C90485 * C114) * C9224) +
                      C27816 * C90579) *
                         C90623 * C26429 +
                     (C27608 * C9225 - (C27816 * C9074 + C27602 * C9224) +
                      C27817 * C90579) *
                         C90623 * C26430 +
                     (C30273 * C9225 - (C27817 * C9074 + C27608 * C9224) +
                      C30459 * C90579) *
                         C90623 * C26431) *
                        C90541 * C90771 +
                    (((C13579 * C109 + C90485 * C115) * C9224 +
                      (C13579 * C247 + C90485 * C253) * C9074 - C27604 * C9225 -
                      C27818 * C90579) *
                         C90623 * C26429 +
                     (C27604 * C9224 + C27818 * C9074 - C27610 * C9225 -
                      C27819 * C90579) *
                         C90623 * C26430 +
                     (C27610 * C9224 + C27819 * C9074 -
                      (C13579 * C6163 + C90485 * C6169) * C9225 -
                      (C13579 * C6285 + C90485 * C6288) * C90579) *
                         C90623 * C26431) *
                        C90541 * C6691)) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[39] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C6694 +
           (C13730 * C116 + C13576 * C314 + C13731 * C839 + C13577 * C1098 +
            C13732 * C2577 + C13578 * C2831) *
               C90780 -
           (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
            C13730 * C108 + C13576 * C309) *
               C6695 -
           (C13732 * C2578 + C13578 * C2832 + C13731 * C838 + C13577 * C1099 +
            C13730 * C117 + C13576 * C315) *
               C90771 +
           (C13730 * C109 + C13576 * C310 + C13731 * C830 + C13577 * C1095 +
            C13732 * C2572 + C13578 * C2829) *
               C6696 +
           (C13730 * C118 + C13576 * C316 + C13731 * C837 + C13577 * C1100 +
            C13732 * C2579 + C13578 * C2833) *
               C6691) *
              C90634 * C90485 * C9074 +
          ((C13730 * C1697 + C13576 * C1961 + C13731 * C3892 + C13577 * C4162 +
            C13732 * C3895 + C13578 * C4165) *
               C6695 -
           ((C13732 * C3905 + C13578 * C4172 + C13731 * C3900 + C13577 * C4167 +
             C13730 * C1707 + C13576 * C1966) *
                C90780 +
            (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 + C13577 * C4161 +
             C13730 * C1700 + C13576 * C1962) *
                C6694) +
           (C13730 * C1706 + C13576 * C1967 + C13731 * C3901 + C13577 * C4168 +
            C13732 * C3904 + C13578 * C4171) *
               C90771 -
           (C13732 * C3894 + C13578 * C4164 + C13731 * C3893 + C13577 * C4163 +
            C13730 * C1698 + C13576 * C1963) *
               C6696 -
           (C13732 * C3903 + C13578 * C4170 + C13731 * C3902 + C13577 * C4169 +
            C13730 * C1705 + C13576 * C1968) *
               C6691) *
              C90634 * C90485 * C90579) *
         C90541) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C6694 +
            (C307 * C116 + C90623 * C314) * C90780 - C337 * C6695 -
            C338 * C90771 + C339 * C6696 + C340 * C6691) *
               C90634 * C89 +
           (C337 * C6694 + C338 * C90780 - C339 * C6695 - C340 * C90771 +
            C341 * C6696 + C342 * C6691) *
               C90634 * C90 +
           (C339 * C6694 + C340 * C90780 - C341 * C6695 - C342 * C90771 +
            C343 * C6696 + C344 * C6691) *
               C90634 * C91) *
              C9074 +
          ((C1984 * C6695 -
            ((C307 * C1707 + C90623 * C1966) * C90780 +
             (C307 * C1700 + C90623 * C1962) * C6694) +
            C1985 * C90771 - C1986 * C6696 - C1987 * C6691) *
               C90634 * C89 +
           (C1986 * C6695 - (C1985 * C90780 + C1984 * C6694) + C1987 * C90771 -
            C1988 * C6696 - C1989 * C6691) *
               C90634 * C90 +
           (C1988 * C6695 - (C1987 * C90780 + C1986 * C6694) + C1989 * C90771 -
            (C307 * C1701 + C90623 * C1965) * C6696 -
            (C307 * C1711 + C90623 * C1970) * C6691) *
               C90634 * C91) *
              C90579) *
         C90541) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C6694 +
            (C307 * C116 + C90623 * C314) * C90780 - C337 * C6695 -
            C338 * C90771 + C339 * C6696 + C340 * C6691) *
               C26429 +
           (C34838 + C34839 - C34840 - C34841 + C34842 + C34843) * C26430 +
           (C34844 + C34845 - C34846 - C34847 + C34848 + C34849) * C26431) *
              C90485 * C9074 +
          ((C34840 - (C34839 + C34838) + C34841 - C34842 - C34843) * C26429 +
           (C34846 - (C34845 + C34844) + C34847 - C34848 - C34849) * C26430 +
           (C30555 * C6695 - (C30556 * C90780 + C30557 * C6694) +
            C30558 * C90771 - (C307 * C6163 + C90623 * C6341) * C6696 -
            (C307 * C6166 + C90623 * C6344) * C6691) *
               C26431) *
              C90485 * C90579) *
         C90541) /
            (p * q * std::sqrt(p + q));
    d2eeyy[39] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
             C13732 * C2570 + C13578 * C2827) *
                C181 +
            (C13730 * C182 + C13576 * C394 + C13731 * C927 + C13577 * C1195 +
             C13732 * C2663 + C13578 * C2921) *
                C90541) *
               C90634 * C90485 * C90780 -
           ((C13732 * C2664 + C13578 * C2922 + C13731 * C926 + C13577 * C1196 +
             C13730 * C183 + C13576 * C395) *
                C90541 +
            (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
             C13730 * C108 + C13576 * C309) *
                C181) *
               C90634 * C90485 * C90771 +
           ((C13730 * C109 + C13576 * C310 + C13731 * C830 + C13577 * C1095 +
             C13732 * C2572 + C13578 * C2829) *
                C181 +
            (C13730 * C184 + C13576 * C396 + C13731 * C925 + C13577 * C1197 +
             C13732 * C2665 + C13578 * C2923) *
                C90541) *
               C90634 * C90485 * C6691) *
              C9074 +
          (((C13730 * C1697 + C13576 * C1961 + C13731 * C3892 + C13577 * C4162 +
             C13732 * C3895 + C13578 * C4165) *
                C181 +
            (C13730 * C1791 + C13576 * C2063 + C13731 * C3990 + C13577 * C4249 +
             C13732 * C3993 + C13578 * C4250) *
                C90541) *
               C90634 * C90485 * C90771 -
           ((C13732 * C3994 + C13578 * C4248 + C13731 * C3989 + C13577 * C4247 +
             C13730 * C1794 + C13576 * C2066) *
                C90541 +
            (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 + C13577 * C4161 +
             C13730 * C1700 + C13576 * C1962) *
                C181) *
               C90634 * C90485 * C90780 -
           ((C13732 * C3992 + C13578 * C4252 + C13731 * C3991 + C13577 * C4251 +
             C13730 * C1792 + C13576 * C2064) *
                C90541 +
            (C13732 * C3894 + C13578 * C4164 + C13731 * C3893 + C13577 * C4163 +
             C13730 * C1698 + C13576 * C1963) *
                C181) *
               C90634 * C90485 * C6691) *
              C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C181 +
             (C307 * C182 + C90623 * C394) * C90541) *
                C90634 * C89 +
            (C401 + C417) * C90634 * C90 + C423 * C91) *
               C90780 -
           (C424 * C91 + (C418 + C404) * C90634 * C90 +
            (C417 + C401) * C90634 * C89) *
               C90771 +
           (C423 * C89 + (C409 + C419) * C90634 * C90 +
            (C410 + C420) * C90634 * C91) *
               C6691) *
              C9074 +
          (((C2069 + C2081) * C90634 * C89 + (C2072 + C2082) * C90634 * C90 +
            (C2075 + C2083) * C90634 * C91) *
               C90771 -
           (C2085 * C91 + (C2081 + C2069) * C90634 * C90 +
            ((C307 * C1794 + C90623 * C2066) * C90541 +
             (C307 * C1700 + C90623 * C1962) * C181) *
                C90634 * C89) *
               C90780 -
           (((C307 * C1795 + C90623 * C2067) * C90541 +
             (C307 * C1701 + C90623 * C1965) * C181) *
                C90634 * C91 +
            (C2083 + C2075) * C90634 * C90 + C2085 * C89) *
               C6691) *
              C90579)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C181 +
             (C307 * C182 + C90623 * C394) * C90541) *
                C26429 +
            (C27992 + C28000) * C26430 + C30641 * C26431) *
               C90485 * C90780 -
           (C30642 * C26431 + (C2081 + C2069) * C26430 +
            (C417 + C401) * C26429) *
               C90485 * C90771 +
           (C421 * C26429 + (C2072 + C2082) * C26430 +
            (C5015 + C5021) * C26431) *
               C90485 * C6691) *
              C9074 +
          (((C2069 + C2081) * C26429 + (C5012 + C5020) * C26430 +
            (C30643 + C30651) * C26431) *
               C90485 * C90771 -
           (C32006 * C26431 + (C28001 + C27995) * C26430 +
            (C28000 + C27992) * C26429) *
               C90485 * C90780 -
           (((C307 * C6225 + C90623 * C6397) * C90541 +
             (C307 * C6163 + C90623 * C6341) * C181) *
                C26431 +
            (C5021 + C5015) * C26430 + C2084 * C26429) *
               C90485 * C6691) *
              C90579)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[39] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C9224 +
           (C13730 * C245 + C13576 * C474 + C13731 * C1011 + C13577 * C1301 +
            C13732 * C2745 + C13578 * C3017) *
               C9074 -
           (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 + C13577 * C4161 +
            C13730 * C1700 + C13576 * C1962) *
               C9225 -
           (C13732 * C4080 + C13578 * C4330 + C13731 * C4075 + C13577 * C4327 +
            C13730 * C1879 + C13576 * C2159) *
               C90579) *
              C90634 * C90485 * C90541 * C90780 +
          ((C13730 * C1697 + C13576 * C1961 + C13731 * C3892 + C13577 * C4162 +
            C13732 * C3895 + C13578 * C4165) *
               C9225 -
           ((C13732 * C2746 + C13578 * C3018 + C13731 * C1010 + C13577 * C1300 +
             C13730 * C246 + C13576 * C475) *
                C9074 +
            (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
             C13730 * C108 + C13576 * C309) *
                C9224) +
           (C13730 * C1878 + C13576 * C2160 + C13731 * C4076 + C13577 * C4328 +
            C13732 * C4079 + C13578 * C4331) *
               C90579) *
              C90634 * C90485 * C90541 * C90771 +
          ((C13730 * C109 + C13576 * C310 + C13731 * C830 + C13577 * C1095 +
            C13732 * C2572 + C13578 * C2829) *
               C9224 +
           (C13730 * C247 + C13576 * C476 + C13731 * C1009 + C13577 * C1299 +
            C13732 * C2747 + C13578 * C3019) *
               C9074 -
           (C13732 * C3894 + C13578 * C4164 + C13731 * C3893 + C13577 * C4163 +
            C13730 * C1698 + C13576 * C1963) *
               C9225 -
           (C13732 * C4078 + C13578 * C4332 + C13731 * C4077 + C13577 * C4329 +
            C13730 * C1877 + C13576 * C2161) *
               C90579) *
              C90634 * C90485 * C90541 * C6691)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C9224 +
            (C307 * C245 + C90623 * C474) * C9074 -
            (C307 * C1700 + C90623 * C1962) * C9225 -
            (C307 * C1879 + C90623 * C2159) * C90579) *
               C90634 * C89 +
           (C9449 + C9450 - C9451 - C9452) * C90634 * C90 + C9464 * C91) *
              C90541 * C90780 +
          ((C9451 - (C9450 + C9449) + C9452) * C90634 * C89 +
           (C9455 - (C9454 + C9453) + C9456) * C90634 * C90 +
           (C9457 - (C9458 + C9459) + C9460) * C90634 * C91) *
              C90541 * C90771 +
          (C9464 * C89 + (C9459 + C9458 - C9457 - C9460) * C90634 * C90 +
           (C343 * C9224 + C496 * C9074 -
            (C307 * C1701 + C90623 * C1965) * C9225 -
            (C307 * C1881 + C90623 * C2163) * C90579) *
               C90634 * C91) *
              C90541 * C6691)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C9224 +
            (C307 * C245 + C90623 * C474) * C9074 - C27910 * C9225 -
            C28080 * C90579) *
               C26429 +
           (C27910 * C9224 + C28080 * C9074 - C27912 * C9225 -
            C28081 * C90579) *
               C26430 +
           (C27912 * C9224 + C28081 * C9074 - C30557 * C9225 -
            C30733 * C90579) *
               C26431) *
              C90485 * C90541 * C90780 +
          ((C9451 - (C9450 + C9449) + C9452) * C26429 +
           (C4930 * C9225 - (C2180 * C9074 + C1984 * C9224) + C5114 * C90579) *
               C26430 +
           (C30555 * C9225 - (C5114 * C9074 + C4930 * C9224) +
            C30734 * C90579) *
               C26431) *
              C90485 * C90541 * C90771 +
          (C9463 * C26429 +
           (C1986 * C9224 + C2182 * C9074 - C4932 * C9225 - C5115 * C90579) *
               C26430 +
           (C4932 * C9224 + C5115 * C9074 -
            (C307 * C6163 + C90623 * C6341) * C9225 -
            (C307 * C6285 + C90623 * C6452) * C90579) *
               C26431) *
              C90485 * C90541 * C6691)) /
            (p * q * std::sqrt(p + q));
    d2eezx[39] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C6694 +
            (C554 * C116 + C90634 * C561) * C90780 - C584 * C6695 -
            C585 * C90771 + C586 * C6696 + C587 * C6691) *
               C90485 * C13576 +
           (C20050 + C20051 - C20052 - C20053 + C20054 + C20055) * C90485 *
               C13577 +
           (C20056 + C20057 - C20058 - C20059 + C20060 + C20061) * C90485 *
               C13578) *
              C9074 +
          ((C2286 * C6695 -
            ((C554 * C1707 + C90634 * C2268) * C90780 +
             (C554 * C1700 + C90634 * C2264) * C6694) +
            C2287 * C90771 - C2288 * C6696 - C2289 * C6691) *
               C90485 * C13576 +
           (C8771 * C6695 - (C17380 * C90780 + C17381 * C6694) +
            C8772 * C90771 - C8773 * C6696 - C8774 * C6691) *
               C90485 * C13577 +
           (C21657 * C6695 - (C17378 * C90780 + C17379 * C6694) +
            C21658 * C90771 - (C554 * C3894 + C90634 * C4410) * C6696 -
            (C554 * C3903 + C90634 * C4416) * C6691) *
               C90485 * C13578) *
              C90579) *
         C90541) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C6694 +
            (C554 * C116 + C90634 * C561) * C90780 - C584 * C6695 -
            C585 * C90771 + C586 * C6696 + C587 * C6691) *
               C89 +
           (C584 * C6694 + C585 * C90780 - C586 * C6695 - C587 * C90771 +
            C588 * C6696 + C589 * C6691) *
               C90 +
           (C586 * C6694 + C587 * C90780 - C588 * C6695 - C589 * C90771 +
            C590 * C6696 + C591 * C6691) *
               C91) *
              C90623 * C9074 +
          ((C2286 * C6695 -
            ((C554 * C1707 + C90634 * C2268) * C90780 +
             (C554 * C1700 + C90634 * C2264) * C6694) +
            C2287 * C90771 - C2288 * C6696 - C2289 * C6691) *
               C89 +
           (C2288 * C6695 - (C2287 * C90780 + C2286 * C6694) + C2289 * C90771 -
            C2290 * C6696 - C2291 * C6691) *
               C90 +
           (C2290 * C6695 - (C2289 * C90780 + C2288 * C6694) + C2291 * C90771 -
            (C554 * C1701 + C90634 * C2267) * C6696 -
            (C554 * C1711 + C90634 * C2272) * C6691) *
               C91) *
              C90623 * C90579) *
         C90541) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C26732 * C107 + C26429 * C555 + C26733 * C1700 + C26430 * C2264 +
            C26734 * C4656 + C26431 * C5191) *
               C6694 +
           (C26732 * C116 + C26429 * C561 + C26733 * C1707 + C26430 * C2268 +
            C26734 * C4663 + C26431 * C5195) *
               C90780 -
           (C26734 * C4657 + C26431 * C5192 + C26733 * C1697 + C26430 * C2263 +
            C26732 * C108 + C26429 * C556) *
               C6695 -
           (C26734 * C4664 + C26431 * C5196 + C26733 * C1706 + C26430 * C2269 +
            C26732 * C117 + C26429 * C562) *
               C90771 +
           (C26732 * C109 + C26429 * C557 + C26733 * C1698 + C26430 * C2265 +
            C26734 * C4658 + C26431 * C5193) *
               C6696 +
           (C26732 * C118 + C26429 * C563 + C26733 * C1705 + C26430 * C2270 +
            C26734 * C4665 + C26431 * C5197) *
               C6691) *
              C90485 * C90623 * C9074 +
          ((C26732 * C1697 + C26429 * C2263 + C26733 * C4657 + C26430 * C5192 +
            C26734 * C6164 + C26431 * C6504) *
               C6695 -
           ((C26734 * C6168 + C26431 * C6508 + C26733 * C4663 + C26430 * C5195 +
             C26732 * C1707 + C26429 * C2268) *
                C90780 +
            (C26734 * C6165 + C26431 * C6505 + C26733 * C4656 + C26430 * C5191 +
             C26732 * C1700 + C26429 * C2264) *
                C6694) +
           (C26732 * C1706 + C26429 * C2269 + C26733 * C4664 + C26430 * C5196 +
            C26734 * C6167 + C26431 * C6507) *
               C90771 -
           (C26734 * C6163 + C26431 * C6503 + C26733 * C4658 + C26430 * C5193 +
            C26732 * C1698 + C26429 * C2265) *
               C6696 -
           (C26734 * C6166 + C26431 * C6506 + C26733 * C4665 + C26430 * C5197 +
            C26732 * C1705 + C26429 * C2270) *
               C6691) *
              C90485 * C90623 * C90579) *
         C90541) /
            (p * q * std::sqrt(p + q));
    d2eezy[39] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C90634 * C555) * C181 +
                       (C554 * C182 + C90634 * C641) * C90541) *
                          C90485 * C13576 +
                      (C14614 * C181 + C14700 * C90541) * C90485 * C13577 +
                      (C14616 * C181 + C14701 * C90541) * C90485 * C13578) *
                         C90780 -
                     ((C3218 * C90541 + C3122 * C181) * C90485 * C13578 +
                      (C1518 * C90541 + C1418 * C181) * C90485 * C13577 +
                      (C664 + C648) * C90485 * C13576) *
                         C90771 +
                     (C668 * C90485 * C13576 +
                      (C1420 * C181 + C1520 * C90541) * C90485 * C13577 +
                      (C3124 * C181 + C3219 * C90541) * C90485 * C13578) *
                         C6691) *
                        C9074 +
                    (((C2371 + C2383) * C90485 * C13576 +
                      (C8771 * C181 + C8884 * C90541) * C90485 * C13577 +
                      (C21657 * C181 + C21762 * C90541) * C90485 * C13578) *
                         C90771 -
                     ((C17475 * C90541 + C17379 * C181) * C90485 * C13578 +
                      (C17474 * C90541 + C17381 * C181) * C90485 * C13577 +
                      ((C554 * C1794 + C90634 * C2368) * C90541 +
                       (C554 * C1700 + C90634 * C2264) * C181) *
                          C90485 * C13576) *
                         C90780 -
                     (((C554 * C3992 + C90634 * C4498) * C90541 +
                       (C554 * C3894 + C90634 * C4410) * C181) *
                          C90485 * C13578 +
                      (C8885 * C90541 + C8773 * C181) * C90485 * C13577 +
                      C2386 * C90485 * C13576) *
                         C6691) *
                        C90579)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C90634 * C555) * C181 +
                       (C554 * C182 + C90634 * C641) * C90541) *
                          C89 +
                      (C648 + C664) * C90 + C668 * C91) *
                         C90623 * C90780 -
                     (C669 * C91 + (C665 + C651) * C90 + (C664 + C648) * C89) *
                         C90623 * C90771 +
                     (C668 * C89 + (C656 + C666) * C90 + (C657 + C667) * C91) *
                         C90623 * C6691) *
                        C9074 +
                    (((C2371 + C2383) * C89 + (C2374 + C2384) * C90 +
                      (C2377 + C2385) * C91) *
                         C90623 * C90771 -
                     (C2386 * C91 + (C2383 + C2371) * C90 +
                      ((C554 * C1794 + C90634 * C2368) * C90541 +
                       (C554 * C1700 + C90634 * C2264) * C181) *
                          C89) *
                         C90623 * C90780 -
                     (((C554 * C1795 + C90634 * C2369) * C90541 +
                       (C554 * C1701 + C90634 * C2267) * C181) *
                          C91 +
                      (C2385 + C2377) * C90 + C2386 * C89) *
                         C90623 * C6691) *
                        C90579)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C26732 * C107 + C26429 * C555 + C26733 * C1700 +
                       C26430 * C2264 + C26734 * C4656 + C26431 * C5191) *
                          C181 +
                      (C26732 * C182 + C26429 * C641 + C26733 * C1794 +
                       C26430 * C2368 + C26734 * C4746 + C26431 * C5285) *
                          C90541) *
                         C90485 * C90623 * C90780 -
                     ((C26734 * C4747 + C26431 * C5286 + C26733 * C1791 +
                       C26430 * C2365 + C26732 * C183 + C26429 * C642) *
                          C90541 +
                      (C26734 * C4657 + C26431 * C5192 + C26733 * C1697 +
                       C26430 * C2263 + C26732 * C108 + C26429 * C556) *
                          C181) *
                         C90485 * C90623 * C90771 +
                     ((C26732 * C109 + C26429 * C557 + C26733 * C1698 +
                       C26430 * C2265 + C26734 * C4658 + C26431 * C5193) *
                          C181 +
                      (C26732 * C184 + C26429 * C643 + C26733 * C1792 +
                       C26430 * C2366 + C26734 * C4748 + C26431 * C5287) *
                          C90541) *
                         C90485 * C90623 * C6691) *
                        C9074 +
                    (((C26732 * C1697 + C26429 * C2263 + C26733 * C4657 +
                       C26430 * C5192 + C26734 * C6164 + C26431 * C6504) *
                          C181 +
                      (C26732 * C1791 + C26429 * C2365 + C26733 * C4747 +
                       C26430 * C5286 + C26734 * C6226 + C26431 * C6560) *
                          C90541) *
                         C90485 * C90623 * C90771 -
                     ((C26734 * C6227 + C26431 * C6561 + C26733 * C4746 +
                       C26430 * C5285 + C26732 * C1794 + C26429 * C2368) *
                          C90541 +
                      (C26734 * C6165 + C26431 * C6505 + C26733 * C4656 +
                       C26430 * C5191 + C26732 * C1700 + C26429 * C2264) *
                          C181) *
                         C90485 * C90623 * C90780 -
                     ((C26734 * C6225 + C26431 * C6559 + C26733 * C4748 +
                       C26430 * C5287 + C26732 * C1792 + C26429 * C2366) *
                          C90541 +
                      (C26734 * C6163 + C26431 * C6503 + C26733 * C4658 +
                       C26430 * C5193 + C26732 * C1698 + C26429 * C2265) *
                          C181) *
                         C90485 * C90623 * C6691) *
                        C90579)) /
                      (p * q * std::sqrt(p + q));
    d2eezz[39] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C90634 * C555) * C9224 +
                      (C554 * C245 + C90634 * C719) * C9074 -
                      (C554 * C1700 + C90634 * C2264) * C9225 -
                      (C554 * C1879 + C90634 * C2460) * C90579) *
                         C90485 * C13576 +
                     (C14614 * C9224 + C14782 * C9074 - C17381 * C9225 -
                      C17568 * C90579) *
                         C90485 * C13577 +
                     (C14616 * C9224 + C14783 * C9074 - C17379 * C9225 -
                      C17570 * C90579) *
                         C90485 * C13578) *
                        C90541 * C90780 +
                    ((C9689 - (C9688 + C9687) + C9690) * C90485 * C13576 +
                     (C10608 - (C10609 + C10610) + C10611) * C90485 * C13577 +
                     (C21657 * C9225 - (C3306 * C9074 + C3122 * C9224) +
                      C21867 * C90579) *
                         C90485 * C13578) *
                        C90541 * C90771 +
                    (C9701 * C90485 * C13576 +
                     (C10614 + C10613 - C10612 - C10615) * C90485 * C13577 +
                     (C3124 * C9224 + C3307 * C9074 -
                      (C554 * C3894 + C90634 * C4410) * C9225 -
                      (C554 * C4078 + C90634 * C4578) * C90579) *
                         C90485 * C13578) *
                        C90541 * C6691)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C90634 * C555) * C9224 +
                      (C554 * C245 + C90634 * C719) * C9074 -
                      (C554 * C1700 + C90634 * C2264) * C9225 -
                      (C554 * C1879 + C90634 * C2460) * C90579) *
                         C89 +
                     (C9687 + C9688 - C9689 - C9690) * C90 + C9701 * C91) *
                        C90623 * C90541 * C90780 +
                    ((C9689 - (C9688 + C9687) + C9690) * C89 +
                     (C9693 - (C9692 + C9691) + C9694) * C90 +
                     (C9695 - (C9696 + C9697) + C9698) * C91) *
                        C90623 * C90541 * C90771 +
                    (C9701 * C89 + (C9697 + C9696 - C9695 - C9698) * C90 +
                     (C590 * C9224 + C741 * C9074 -
                      (C554 * C1701 + C90634 * C2267) * C9225 -
                      (C554 * C1881 + C90634 * C2464) * C90579) *
                         C91) *
                        C90623 * C90541 * C6691)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C26732 * C107 + C26429 * C555 + C26733 * C1700 +
                      C26430 * C2264 + C26734 * C4656 + C26431 * C5191) *
                         C9224 +
                     (C26732 * C245 + C26429 * C719 + C26733 * C1879 +
                      C26430 * C2460 + C26734 * C4831 + C26431 * C5373) *
                         C9074 -
                     (C26734 * C6165 + C26431 * C6505 + C26733 * C4656 +
                      C26430 * C5191 + C26732 * C1700 + C26429 * C2264) *
                         C9225 -
                     (C26734 * C6287 + C26431 * C6612 + C26733 * C4831 +
                      C26430 * C5373 + C26732 * C1879 + C26429 * C2460) *
                         C90579) *
                        C90485 * C90623 * C90541 * C90780 +
                    ((C26732 * C1697 + C26429 * C2263 + C26733 * C4657 +
                      C26430 * C5192 + C26734 * C6164 + C26431 * C6504) *
                         C9225 -
                     ((C26734 * C4832 + C26431 * C5374 + C26733 * C1878 +
                       C26430 * C2461 + C26732 * C246 + C26429 * C720) *
                          C9074 +
                      (C26734 * C4657 + C26431 * C5192 + C26733 * C1697 +
                       C26430 * C2263 + C26732 * C108 + C26429 * C556) *
                          C9224) +
                     (C26732 * C1878 + C26429 * C2461 + C26733 * C4832 +
                      C26430 * C5374 + C26734 * C6286 + C26431 * C6613) *
                         C90579) *
                        C90485 * C90623 * C90541 * C90771 +
                    ((C26732 * C109 + C26429 * C557 + C26733 * C1698 +
                      C26430 * C2265 + C26734 * C4658 + C26431 * C5193) *
                         C9224 +
                     (C26732 * C247 + C26429 * C721 + C26733 * C1877 +
                      C26430 * C2462 + C26734 * C4833 + C26431 * C5375) *
                         C9074 -
                     (C26734 * C6163 + C26431 * C6503 + C26733 * C4658 +
                      C26430 * C5193 + C26732 * C1698 + C26429 * C2265) *
                         C9225 -
                     (C26734 * C6285 + C26431 * C6614 + C26733 * C4833 +
                      C26430 * C5375 + C26732 * C1877 + C26429 * C2462) *
                         C90579) *
                        C90485 * C90623 * C90541 * C6691)) /
                      (p * q * std::sqrt(p + q));
    d2eexx[40] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C7401 +
             (C13579 * C116 + C90485 * C125) * C7396 -
             (C13579 * C108 + C90485 * C114) * C7402 -
             (C13579 * C117 + C90485 * C126) * C90503) *
                C13576 +
            (C20284 + C20285 - C20286 - C20287) * C13577 + C20298 * C13578) *
               C90634 * C9074 +
           (((C13579 * C1697 + C90485 * C1702) * C7402 -
             ((C13579 * C1707 + C90485 * C1714) * C7396 +
              (C13579 * C1700 + C90485 * C1708) * C7401) +
             (C13579 * C1706 + C90485 * C1713) * C90503) *
                C13576 +
            (C21025 - (C21011 + C21012) + C21026) * C13577 +
            (C21027 - (C21017 + C21018) + C21028) * C13578) *
               C90634 * C90579) *
              C90752 +
          (((C20286 - (C20285 + C20284) + C20287) * C13576 +
            (C20290 - (C20289 + C20288) + C20291) * C13577 +
            (C20292 - (C20293 + C20294) + C20295) * C13578) *
               C90634 * C9074 +
           ((C21012 + C21011 - C21025 - C21026) * C13576 +
            (C21018 + C21017 - C21027 - C21028) * C13577 +
            (C16860 * C7401 + C16861 * C7396 -
             (C13579 * C21004 + C90485 * C21005) * C7402 -
             (C13579 * C21006 + C90485 * C21007) * C90503) *
                C13578) *
               C90634 * C90579) *
              C90555)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
             C91 * C115) *
                C7401 +
            (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 + C102 * C118 +
             C91 * C127) *
                C7396 -
            (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 + C100 * C108 +
             C89 * C114) *
                C7402 -
            (C102 * C120 + C91 * C128 + C101 * C118 + C90 * C127 + C100 * C117 +
             C89 * C126) *
                C90503) *
               C90623 * C90634 * C9074 +
           ((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
             C102 * C1699 + C91 * C1704) *
                C7402 -
            ((C102 * C1705 + C91 * C1712 + C101 * C1706 + C90 * C1713 +
              C100 * C1707 + C89 * C1714) *
                 C7396 +
             (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
              C100 * C1700 + C89 * C1708) *
                 C7401) +
            (C100 * C1706 + C89 * C1713 + C101 * C1705 + C90 * C1712 +
             C102 * C1709 + C91 * C1715) *
                C90503) *
               C90623 * C90634 * C90579) *
              C90752 +
          (((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 + C102 * C831 +
             C91 * C836) *
                C7402 -
            ((C102 * C837 + C91 * C844 + C101 * C838 + C90 * C845 +
              C100 * C839 + C89 * C846) *
                 C7396 +
             (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
              C100 * C832 + C89 * C840) *
                 C7401) +
            (C100 * C838 + C89 * C845 + C101 * C837 + C90 * C844 + C102 * C841 +
             C91 * C847) *
                C90503) *
               C90623 * C90634 * C9074 +
           ((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
             C102 * C3893 + C91 * C3899) *
                C7401 +
            (C100 * C3900 + C89 * C3909 + C101 * C3901 + C90 * C3910 +
             C102 * C3902 + C91 * C3911) *
                C7396 -
            (C102 * C8120 + C91 * C8121 + C101 * C3893 + C90 * C3899 +
             C100 * C3892 + C89 * C3898) *
                C7402 -
            (C102 * C8122 + C91 * C8123 + C101 * C3902 + C90 * C3911 +
             C100 * C3901 + C89 * C3910) *
                C90503) *
               C90623 * C90634 * C90579) *
              C90555)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C7401 +
             (C13579 * C116 + C90485 * C125) * C7396 -
             (C13579 * C108 + C90485 * C114) * C7402 -
             (C13579 * C117 + C90485 * C126) * C90503) *
                C90623 * C26429 +
            (C33654 + C33655 - C33656 - C33657) * C90623 * C26430 +
            (C33658 + C33659 - C33660 - C33661) * C90623 * C26431) *
               C9074 +
           ((C33656 - (C33655 + C33654) + C33657) * C90623 * C26429 +
            (C33660 - (C33659 + C33658) + C33661) * C90623 * C26430 +
            (C30273 * C7402 - (C30274 * C7396 + C30275 * C7401) +
             C30276 * C90503) *
                C90623 * C26431) *
               C90579) *
              C90752 +
          (((C20286 - (C20285 + C20284) + C20287) * C90623 * C26429 +
            (C21025 - (C21011 + C21012) + C21026) * C90623 * C26430 +
            (C33670 - (C33664 + C33665) + C33671) * C90623 * C26431) *
               C9074 +
           ((C21012 + C21011 - C21025 - C21026) * C90623 * C26429 +
            (C33665 + C33664 - C33670 - C33671) * C90623 * C26430 +
            (C31052 * C7401 + C31053 * C7396 -
             (C13579 * C33649 + C90485 * C33650) * C7402 -
             (C13579 * C33651 + C90485 * C33652) * C90503) *
                C90623 * C26431) *
               C90579) *
              C90555)) /
            (p * q * std::sqrt(p + q));
    d2eexy[40] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C13579 * C107 + C90485 * C113) * C923 +
                       (C13579 * C182 + C90485 * C188) * C90752 -
                       C14082 * C924 - C14192 * C90555) *
                          C13576 +
                      (C14082 * C923 + C14192 * C90752 - C14088 * C924 -
                       C14193 * C90555) *
                          C13577 +
                      (C14088 * C923 + C14193 * C90752 - C15553 * C924 -
                       C15643 * C90555) *
                          C13578) *
                         C90634 * C7396 +
                     ((C14084 * C924 -
                       ((C13579 * C183 + C90485 * C189) * C90752 +
                        (C13579 * C108 + C90485 * C114) * C923) +
                       C14194 * C90555) *
                          C13576 +
                      (C14090 * C924 - (C14194 * C90752 + C14084 * C923) +
                       C14195 * C90555) *
                          C13577 +
                      (C15551 * C924 - (C14195 * C90752 + C14090 * C923) +
                       C15644 * C90555) *
                          C13578) *
                         C90634 * C90503) *
                        C9074 +
                    (((C16859 * C924 -
                       ((C13579 * C1794 + C90485 * C1799) * C90752 +
                        (C13579 * C1700 + C90485 * C1708) * C923) +
                       C16953 * C90555) *
                          C13576 +
                      (C16857 * C924 - (C16953 * C90752 + C16859 * C923) +
                       C16954 * C90555) *
                          C13577 +
                      (C16860 * C924 - (C16954 * C90752 + C16857 * C923) +
                       C16955 * C90555) *
                          C13578) *
                         C90634 * C7396 +
                     (((C13579 * C1697 + C90485 * C1702) * C923 +
                       (C13579 * C1791 + C90485 * C1796) * C90752 -
                       C21021 * C924 - C21133 * C90555) *
                          C13576 +
                      (C21021 * C923 + C21133 * C90752 - C21023 * C924 -
                       C21134 * C90555) *
                          C13577 +
                      (C21023 * C923 + C21134 * C90752 -
                       (C13579 * C21004 + C90485 * C21005) * C924 -
                       (C13579 * C21126 + C90485 * C21127) * C90555) *
                          C13578) *
                         C90634 * C90503) *
                        C90579)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                       C102 * C109 + C91 * C115) *
                          C923 +
                      (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 +
                       C102 * C184 + C91 * C190) *
                          C90752 -
                      (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                       C100 * C832 + C89 * C840) *
                          C924 -
                      (C102 * C925 + C91 * C930 + C101 * C926 + C90 * C931 +
                       C100 * C927 + C89 * C932) *
                          C90555) *
                         C90623 * C90634 * C7396 +
                     ((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 +
                       C102 * C831 + C91 * C836) *
                          C924 -
                      ((C102 * C185 + C91 * C191 + C101 * C184 + C90 * C190 +
                        C100 * C183 + C89 * C189) *
                           C90752 +
                       (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                        C100 * C108 + C89 * C114) *
                           C923) +
                      (C100 * C926 + C89 * C931 + C101 * C925 + C90 * C930 +
                       C102 * C928 + C91 * C933) *
                          C90555) *
                         C90623 * C90634 * C90503) *
                        C9074 +
                    (((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
                       C102 * C3893 + C91 * C3899) *
                          C924 -
                      ((C102 * C1792 + C91 * C1797 + C101 * C1791 +
                        C90 * C1796 + C100 * C1794 + C89 * C1799) *
                           C90752 +
                       (C102 * C1698 + C91 * C1703 + C101 * C1697 +
                        C90 * C1702 + C100 * C1700 + C89 * C1708) *
                           C923) +
                      (C100 * C3989 + C89 * C3995 + C101 * C3990 + C90 * C3996 +
                       C102 * C3991 + C91 * C3997) *
                          C90555) *
                         C90623 * C90634 * C7396 +
                     ((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
                       C102 * C1699 + C91 * C1704) *
                          C923 +
                      (C100 * C1791 + C89 * C1796 + C101 * C1792 + C90 * C1797 +
                       C102 * C1793 + C91 * C1798) *
                          C90752 -
                      (C102 * C8120 + C91 * C8121 + C101 * C3893 + C90 * C3899 +
                       C100 * C3892 + C89 * C3898) *
                          C924 -
                      (C102 * C8222 + C91 * C8223 + C101 * C3991 + C90 * C3997 +
                       C100 * C3990 + C89 * C3996) *
                          C90555) *
                         C90623 * C90634 * C90503) *
                        C90579)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C13579 * C107 + C90485 * C113) * C923 +
                       (C13579 * C182 + C90485 * C188) * C90752 -
                       C14082 * C924 - C14192 * C90555) *
                          C90623 * C26429 +
                      (C31133 + C31134 - C31135 - C31136) * C90623 * C26430 +
                      C31151 * C26431) *
                         C7396 +
                     ((C14084 * C924 -
                       ((C13579 * C183 + C90485 * C189) * C90752 +
                        (C13579 * C108 + C90485 * C114) * C923) +
                       C14194 * C90555) *
                          C90623 * C26429 +
                      (C35416 - (C35417 + C35418) + C35419) * C90623 * C26430 +
                      (C35420 - (C35421 + C35422) + C35423) * C90623 * C26431) *
                         C90503) *
                        C9074 +
                    (((C31135 - (C31134 + C31133) + C31136) * C90623 * C26429 +
                      (C31139 - (C31138 + C31137) + C31140) * C90623 * C26430 +
                      (C31141 - (C31142 + C31143) + C31149) * C90623 * C26431) *
                         C7396 +
                     ((C35418 + C35417 - C35416 - C35419) * C90623 * C26429 +
                      (C35422 + C35421 - C35420 - C35423) * C90623 * C26430 +
                      (C30273 * C923 + C30372 * C90752 -
                       (C13579 * C33649 + C90485 * C33650) * C924 -
                       (C13579 * C33769 + C90485 * C33770) * C90555) *
                          C90623 * C26431) *
                         C90503) *
                        C90579)) /
                      (p * q * std::sqrt(p + q));
    d2eexz[40] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C13579 * C107 + C90485 * C113) * C9224 +
                       (C13579 * C245 + C90485 * C251) * C9074 -
                       (C13579 * C1700 + C90485 * C1708) * C9225 -
                       (C13579 * C1879 + C90485 * C1884) * C90579) *
                          C13576 +
                      (C22829 + C22830 - C22831 - C22832) * C13577 +
                      (C22833 + C22834 - C22835 - C22836) * C13578) *
                         C90634 * C90752 +
                     ((C22831 - (C22830 + C22829) + C22832) * C13576 +
                      (C22835 - (C22834 + C22833) + C22836) * C13577 +
                      (C16860 * C9225 - (C15731 * C9074 + C15553 * C9224) +
                       C17052 * C90579) *
                          C13578) *
                         C90634 * C90555) *
                        C7396 +
                    ((((C13579 * C1697 + C90485 * C1702) * C9225 -
                       ((C13579 * C246 + C90485 * C252) * C9074 +
                        (C13579 * C108 + C90485 * C114) * C9224) +
                       (C13579 * C1878 + C90485 * C1883) * C90579) *
                          C13576 +
                      (C22837 - (C22838 + C22839) + C22840) * C13577 +
                      (C22841 - (C22842 + C22843) + C22844) * C13578) *
                         C90634 * C90752 +
                     ((C22839 + C22838 - C22837 - C22840) * C13576 +
                      (C22843 + C22842 - C22841 - C22844) * C13577 +
                      (C15551 * C9224 + C15732 * C9074 -
                       (C13579 * C21004 + C90485 * C21005) * C9225 -
                       (C13579 * C21232 + C90485 * C21233) * C90579) *
                          C13578) *
                         C90634 * C90555) *
                        C90503)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                       C102 * C109 + C91 * C115) *
                          C9224 +
                      (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 +
                       C102 * C247 + C91 * C253) *
                          C9074 -
                      (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
                       C100 * C1700 + C89 * C1708) *
                          C9225 -
                      (C102 * C1877 + C91 * C1882 + C101 * C1878 + C90 * C1883 +
                       C100 * C1879 + C89 * C1884) *
                          C90579) *
                         C90623 * C90634 * C90752 +
                     ((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
                       C102 * C3893 + C91 * C3899) *
                          C9225 -
                      ((C102 * C1009 + C91 * C1014 + C101 * C1010 +
                        C90 * C1015 + C100 * C1011 + C89 * C1016) *
                           C9074 +
                       (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                        C100 * C832 + C89 * C840) *
                           C9224) +
                      (C100 * C4075 + C89 * C4081 + C101 * C4076 + C90 * C4082 +
                       C102 * C4077 + C91 * C4083) *
                          C90579) *
                         C90623 * C90634 * C90555) *
                        C7396 +
                    (((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
                       C102 * C1699 + C91 * C1704) *
                          C9225 -
                      ((C102 * C248 + C91 * C254 + C101 * C247 + C90 * C253 +
                        C100 * C246 + C89 * C252) *
                           C9074 +
                       (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                        C100 * C108 + C89 * C114) *
                           C9224) +
                      (C100 * C1878 + C89 * C1883 + C101 * C1877 + C90 * C1882 +
                       C102 * C1880 + C91 * C1885) *
                          C90579) *
                         C90623 * C90634 * C90752 +
                     ((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 +
                       C102 * C831 + C91 * C836) *
                          C9224 +
                      (C100 * C1010 + C89 * C1015 + C101 * C1009 + C90 * C1014 +
                       C102 * C1012 + C91 * C1017) *
                          C9074 -
                      (C102 * C8120 + C91 * C8121 + C101 * C3893 + C90 * C3899 +
                       C100 * C3892 + C89 * C3898) *
                          C9225 -
                      (C102 * C8322 + C91 * C8323 + C101 * C4077 + C90 * C4083 +
                       C100 * C4076 + C89 * C4082) *
                          C90579) *
                         C90623 * C90634 * C90555) *
                        C90503)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C13579 * C107 + C90485 * C113) * C9224 +
                       (C13579 * C245 + C90485 * C251) * C9074 -
                       C27600 * C9225 - C27814 * C90579) *
                          C90623 * C26429 +
                      (C27600 * C9224 + C27814 * C9074 - C27606 * C9225 -
                       C27815 * C90579) *
                          C90623 * C26430 +
                      (C27606 * C9224 + C27815 * C9074 - C30275 * C9225 -
                       C30458 * C90579) *
                          C90623 * C26431) *
                         C90752 +
                     ((C22831 - (C22830 + C22829) + C22832) * C90623 * C26429 +
                      (C18362 * C9225 - (C17049 * C9074 + C16859 * C9224) +
                       C18542 * C90579) *
                          C90623 * C26430 +
                      (C31052 * C9225 - (C18542 * C9074 + C18362 * C9224) +
                       C31230 * C90579) *
                          C90623 * C26431) *
                         C90555) *
                        C7396 +
                    (((C27602 * C9225 -
                       ((C13579 * C246 + C90485 * C252) * C9074 +
                        (C13579 * C108 + C90485 * C114) * C9224) +
                       C27816 * C90579) *
                          C90623 * C26429 +
                      (C27608 * C9225 - (C27816 * C9074 + C27602 * C9224) +
                       C27817 * C90579) *
                          C90623 * C26430 +
                      (C30273 * C9225 - (C27817 * C9074 + C27608 * C9224) +
                       C30459 * C90579) *
                          C90623 * C26431) *
                         C90752 +
                     ((C22839 + C22838 - C22837 - C22840) * C90623 * C26429 +
                      (C21021 * C9224 + C21245 * C9074 - C33668 * C9225 -
                       C33893 * C90579) *
                          C90623 * C26430 +
                      (C33668 * C9224 + C33893 * C9074 -
                       (C13579 * C33649 + C90485 * C33650) * C9225 -
                       (C13579 * C33888 + C90485 * C33889) * C90579) *
                          C90623 * C26431) *
                         C90555) *
                        C90503)) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[40] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
             C13732 * C2570 + C13578 * C2827) *
                C7401 +
            (C13730 * C116 + C13576 * C314 + C13731 * C839 + C13577 * C1098 +
             C13732 * C2577 + C13578 * C2831) *
                C7396 -
            (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
             C13730 * C108 + C13576 * C309) *
                C7402 -
            (C13732 * C2578 + C13578 * C2832 + C13731 * C838 + C13577 * C1099 +
             C13730 * C117 + C13576 * C315) *
                C90503) *
               C90634 * C90485 * C9074 +
           ((C13730 * C1697 + C13576 * C1961 + C13731 * C3892 + C13577 * C4162 +
             C13732 * C3895 + C13578 * C4165) *
                C7402 -
            ((C13732 * C3905 + C13578 * C4172 + C13731 * C3900 +
              C13577 * C4167 + C13730 * C1707 + C13576 * C1966) *
                 C7396 +
             (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 +
              C13577 * C4161 + C13730 * C1700 + C13576 * C1962) *
                 C7401) +
            (C13730 * C1706 + C13576 * C1967 + C13731 * C3901 + C13577 * C4168 +
             C13732 * C3904 + C13578 * C4171) *
                C90503) *
               C90634 * C90485 * C90579) *
              C90752 +
          (((C13730 * C829 + C13576 * C1093 + C13731 * C2571 + C13577 * C2828 +
             C13732 * C3366 + C13578 * C3544) *
                C7402 -
            ((C13732 * C3370 + C13578 * C3548 + C13731 * C2577 +
              C13577 * C2831 + C13730 * C839 + C13576 * C1098) *
                 C7396 +
             (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 +
              C13577 * C2827 + C13730 * C832 + C13576 * C1094) *
                 C7401) +
            (C13730 * C838 + C13576 * C1099 + C13731 * C2578 + C13577 * C2832 +
             C13732 * C3369 + C13578 * C3547) *
                C90503) *
               C90634 * C90485 * C9074 +
           ((C13730 * C3891 + C13576 * C4161 + C13731 * C3896 + C13577 * C4166 +
             C13732 * C16835 + C13578 * C17131) *
                C7401 +
            (C13730 * C3900 + C13576 * C4167 + C13731 * C3905 + C13577 * C4172 +
             C13732 * C16838 + C13578 * C17133) *
                C7396 -
            (C13732 * C21004 + C13578 * C21346 + C13731 * C3895 +
             C13577 * C4165 + C13730 * C3892 + C13576 * C4162) *
                C7402 -
            (C13732 * C21006 + C13578 * C21347 + C13731 * C3904 +
             C13577 * C4171 + C13730 * C3901 + C13576 * C4168) *
                C90503) *
               C90634 * C90485 * C90579) *
              C90555)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C7401 +
             (C307 * C116 + C90623 * C314) * C7396 - C337 * C7402 -
             C338 * C90503) *
                C90634 * C89 +
            (C337 * C7401 + C338 * C7396 - C339 * C7402 - C340 * C90503) *
                C90634 * C90 +
            (C339 * C7401 + C340 * C7396 - C341 * C7402 - C342 * C90503) *
                C90634 * C91) *
               C9074 +
           ((C1984 * C7402 -
             ((C307 * C1707 + C90623 * C1966) * C7396 +
              (C307 * C1700 + C90623 * C1962) * C7401) +
             C1985 * C90503) *
                C90634 * C89 +
            (C1986 * C7402 - (C1985 * C7396 + C1984 * C7401) + C1987 * C90503) *
                C90634 * C90 +
            (C1988 * C7402 - (C1987 * C7396 + C1986 * C7401) + C1989 * C90503) *
                C90634 * C91) *
               C90579) *
              C90752 +
          (((C1116 * C7402 -
             ((C307 * C839 + C90623 * C1098) * C7396 +
              (C307 * C832 + C90623 * C1094) * C7401) +
             C1117 * C90503) *
                C90634 * C89 +
            (C1118 * C7402 - (C1117 * C7396 + C1116 * C7401) + C1119 * C90503) *
                C90634 * C90 +
            (C1120 * C7402 - (C1119 * C7396 + C1118 * C7401) + C1121 * C90503) *
                C90634 * C91) *
               C9074 +
           (((C307 * C3891 + C90623 * C4161) * C7401 +
             (C307 * C3900 + C90623 * C4167) * C7396 - C8433 * C7402 -
             C8434 * C90503) *
                C90634 * C89 +
            (C8433 * C7401 + C8434 * C7396 - C8435 * C7402 - C8436 * C90503) *
                C90634 * C90 +
            (C8435 * C7401 + C8436 * C7396 -
             (C307 * C8120 + C90623 * C8422) * C7402 -
             (C307 * C8122 + C90623 * C8423) * C90503) *
                C90634 * C91) *
               C90579) *
              C90555)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C7401 +
             (C307 * C116 + C90623 * C314) * C7396 - C337 * C7402 -
             C338 * C90503) *
                C26429 +
            (C33994 + C33995 - C33996 - C33997) * C26430 +
            (C33998 + C33999 - C34000 - C34001) * C26431) *
               C90485 * C9074 +
           ((C33996 - (C33995 + C33994) + C33997) * C26429 +
            (C34000 - (C33999 + C33998) + C34001) * C26430 +
            (C30555 * C7402 - (C30556 * C7396 + C30557 * C7401) +
             C30558 * C90503) *
                C26431) *
               C90485 * C90579) *
              C90752 +
          (((C1116 * C7402 -
             ((C307 * C839 + C90623 * C1098) * C7396 +
              (C307 * C832 + C90623 * C1094) * C7401) +
             C1117 * C90503) *
                C26429 +
            (C34002 - (C34003 + C34004) + C34005) * C26430 +
            (C34014 - (C34008 + C34009) + C34015) * C26431) *
               C90485 * C9074 +
           ((C34004 + C34003 - C34002 - C34005) * C26429 +
            (C34009 + C34008 - C34014 - C34015) * C26430 +
            (C31315 * C7401 + C31316 * C7396 -
             (C307 * C33649 + C90623 * C33991) * C7402 -
             (C307 * C33651 + C90623 * C33992) * C90503) *
                C26431) *
               C90485 * C90579) *
              C90555)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[40] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
             C13732 * C2570 + C13578 * C2827) *
                C923 +
            (C13730 * C182 + C13576 * C394 + C13731 * C927 + C13577 * C1195 +
             C13732 * C2663 + C13578 * C2921) *
                C90752 -
            (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
             C13730 * C832 + C13576 * C1094) *
                C924 -
            (C13732 * C3433 + C13578 * C3599 + C13731 * C2663 + C13577 * C2921 +
             C13730 * C927 + C13576 * C1195) *
                C90555) *
               C90634 * C90485 * C7396 +
           ((C13730 * C829 + C13576 * C1093 + C13731 * C2571 + C13577 * C2828 +
             C13732 * C3366 + C13578 * C3544) *
                C924 -
            ((C13732 * C2664 + C13578 * C2922 + C13731 * C926 + C13577 * C1196 +
              C13730 * C183 + C13576 * C395) *
                 C90752 +
             (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
              C13730 * C108 + C13576 * C309) *
                 C923) +
            (C13730 * C926 + C13576 * C1196 + C13731 * C2664 + C13577 * C2922 +
             C13732 * C3432 + C13578 * C3600) *
                C90555) *
               C90634 * C90485 * C90503) *
              C9074 +
          (((C13730 * C3891 + C13576 * C4161 + C13731 * C3896 + C13577 * C4166 +
             C13732 * C16835 + C13578 * C17131) *
                C924 -
            ((C13732 * C3994 + C13578 * C4248 + C13731 * C3989 +
              C13577 * C4247 + C13730 * C1794 + C13576 * C2066) *
                 C90752 +
             (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 +
              C13577 * C4161 + C13730 * C1700 + C13576 * C1962) *
                 C923) +
            (C13730 * C3989 + C13576 * C4247 + C13731 * C3994 + C13577 * C4248 +
             C13732 * C16942 + C13578 * C17209) *
                C90555) *
               C90634 * C90485 * C7396 +
           ((C13730 * C1697 + C13576 * C1961 + C13731 * C3892 + C13577 * C4162 +
             C13732 * C3895 + C13578 * C4165) *
                C923 +
            (C13730 * C1791 + C13576 * C2063 + C13731 * C3990 + C13577 * C4249 +
             C13732 * C3993 + C13578 * C4250) *
                C90752 -
            (C13732 * C21004 + C13578 * C21346 + C13731 * C3895 +
             C13577 * C4165 + C13730 * C3892 + C13576 * C4162) *
                C924 -
            (C13732 * C21126 + C13578 * C21446 + C13731 * C3993 +
             C13577 * C4250 + C13730 * C3990 + C13576 * C4249) *
                C90555) *
               C90634 * C90485 * C90503) *
              C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C923 +
             (C307 * C182 + C90623 * C394) * C90752 -
             (C307 * C832 + C90623 * C1094) * C924 -
             (C307 * C927 + C90623 * C1195) * C90555) *
                C90634 * C89 +
            (C1201 + C1202 - C1203 - C1220) * C90634 * C90 + C1225 * C91) *
               C7396 +
           ((C1203 - (C1202 + C1201) + C1220) * C90634 * C89 +
            (C1208 - (C1207 + C1206) + C1222) * C90634 * C90 +
            (C1211 - (C1212 + C1213) + C1223) * C90634 * C91) *
               C90503) *
              C9074 +
          ((((C307 * C3891 + C90623 * C4161) * C924 -
             ((C307 * C1794 + C90623 * C2066) * C90752 +
              (C307 * C1700 + C90623 * C1962) * C923) +
             (C307 * C3989 + C90623 * C4247) * C90555) *
                C90634 * C89 +
            (C10192 - (C10193 + C10194) + C10195) * C90634 * C90 +
            (C10196 - (C10197 + C10198) + C10199) * C90634 * C91) *
               C7396 +
           ((C10194 + C10193 - C10192 - C10195) * C90634 * C89 +
            (C10198 + C10197 - C10196 - C10199) * C90634 * C90 +
            (C1988 * C923 + C2080 * C90752 -
             (C307 * C8120 + C90623 * C8422) * C924 -
             (C307 * C8222 + C90623 * C8534) * C90555) *
                C90634 * C91) *
               C90503) *
              C90579)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C923 +
             (C307 * C182 + C90623 * C394) * C90752 -
             (C307 * C832 + C90623 * C1094) * C924 -
             (C307 * C927 + C90623 * C1195) * C90555) *
                C26429 +
            (C31394 + C31395 - C31396 - C31397) * C26430 + C31411 * C26431) *
               C90485 * C7396 +
           ((C1203 - (C1202 + C1201) + C1220) * C26429 +
            (C10192 - (C10193 + C10194) + C10195) * C26430 +
            (C35718 - (C35719 + C35720) + C35721) * C26431) *
               C90485 * C90503) *
              C9074 +
          (((C31396 - (C31395 + C31394) + C31397) * C26429 +
            (C31400 - (C31399 + C31398) + C31401) * C26430 +
            (C31402 - (C31403 + C31404) + C31410) * C26431) *
               C90485 * C7396 +
           ((C10194 + C10193 - C10192 - C10195) * C26429 +
            (C35720 + C35719 - C35718 - C35721) * C26430 +
            (C30555 * C923 + C30649 * C90752 -
             (C307 * C33649 + C90623 * C33991) * C924 -
             (C307 * C33769 + C90623 * C34113) * C90555) *
                C26431) *
               C90485 * C90503) *
              C90579)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[40] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
             C13732 * C2570 + C13578 * C2827) *
                C9224 +
            (C13730 * C245 + C13576 * C474 + C13731 * C1011 + C13577 * C1301 +
             C13732 * C2745 + C13578 * C3017) *
                C9074 -
            (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 + C13577 * C4161 +
             C13730 * C1700 + C13576 * C1962) *
                C9225 -
            (C13732 * C4080 + C13578 * C4330 + C13731 * C4075 + C13577 * C4327 +
             C13730 * C1879 + C13576 * C2159) *
                C90579) *
               C90634 * C90485 * C90752 +
           ((C13730 * C3891 + C13576 * C4161 + C13731 * C3896 + C13577 * C4166 +
             C13732 * C16835 + C13578 * C17131) *
                C9225 -
            ((C13732 * C3489 + C13578 * C3654 + C13731 * C2745 +
              C13577 * C3017 + C13730 * C1011 + C13576 * C1301) *
                 C9074 +
             (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 +
              C13577 * C2827 + C13730 * C832 + C13576 * C1094) *
                 C9224) +
            (C13730 * C4075 + C13576 * C4327 + C13731 * C4080 + C13577 * C4330 +
             C13732 * C17029 + C13578 * C17285) *
                C90579) *
               C90634 * C90485 * C90555) *
              C7396 +
          (((C13730 * C1697 + C13576 * C1961 + C13731 * C3892 + C13577 * C4162 +
             C13732 * C3895 + C13578 * C4165) *
                C9225 -
            ((C13732 * C2746 + C13578 * C3018 + C13731 * C1010 +
              C13577 * C1300 + C13730 * C246 + C13576 * C475) *
                 C9074 +
             (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
              C13730 * C108 + C13576 * C309) *
                 C9224) +
            (C13730 * C1878 + C13576 * C2160 + C13731 * C4076 + C13577 * C4328 +
             C13732 * C4079 + C13578 * C4331) *
                C90579) *
               C90634 * C90485 * C90752 +
           ((C13730 * C829 + C13576 * C1093 + C13731 * C2571 + C13577 * C2828 +
             C13732 * C3366 + C13578 * C3544) *
                C9224 +
            (C13730 * C1010 + C13576 * C1300 + C13731 * C2746 + C13577 * C3018 +
             C13732 * C3488 + C13578 * C3653) *
                C9074 -
            (C13732 * C21004 + C13578 * C21346 + C13731 * C3895 +
             C13577 * C4165 + C13730 * C3892 + C13576 * C4162) *
                C9225 -
            (C13732 * C21232 + C13578 * C21545 + C13731 * C4079 +
             C13577 * C4331 + C13730 * C4076 + C13576 * C4328) *
                C90579) *
               C90634 * C90485 * C90555) *
              C90503)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C9224 +
             (C307 * C245 + C90623 * C474) * C9074 -
             (C307 * C1700 + C90623 * C1962) * C9225 -
             (C307 * C1879 + C90623 * C2159) * C90579) *
                C90634 * C89 +
            (C9449 + C9450 - C9451 - C9452) * C90634 * C90 + C9464 * C91) *
               C90752 +
           (((C307 * C3891 + C90623 * C4161) * C9225 -
             ((C307 * C1011 + C90623 * C1301) * C9074 +
              (C307 * C832 + C90623 * C1094) * C9224) +
             (C307 * C4075 + C90623 * C4327) * C90579) *
                C90634 * C89 +
            (C10298 - (C10299 + C10300) + C10301) * C90634 * C90 +
            (C10302 - (C10303 + C10304) + C10305) * C90634 * C91) *
               C90555) *
              C7396 +
          (((C9451 - (C9450 + C9449) + C9452) * C90634 * C89 +
            (C9455 - (C9454 + C9453) + C9456) * C90634 * C90 +
            (C9457 - (C9458 + C9459) + C9460) * C90634 * C91) *
               C90752 +
           ((C10300 + C10299 - C10298 - C10301) * C90634 * C89 +
            (C10304 + C10303 - C10302 - C10305) * C90634 * C90 +
            (C1120 * C9224 + C1316 * C9074 -
             (C307 * C8120 + C90623 * C8422) * C9225 -
             (C307 * C8322 + C90623 * C8647) * C90579) *
                C90634 * C91) *
               C90555) *
              C90503)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C9224 +
             (C307 * C245 + C90623 * C474) * C9074 - C27910 * C9225 -
             C28080 * C90579) *
                C26429 +
            (C27910 * C9224 + C28080 * C9074 - C27912 * C9225 -
             C28081 * C90579) *
                C26430 +
            (C27912 * C9224 + C28081 * C9074 - C30557 * C9225 -
             C30733 * C90579) *
                C26431) *
               C90485 * C90752 +
           ((C29752 * C9225 -
             ((C307 * C1011 + C90623 * C1301) * C9074 +
              (C307 * C832 + C90623 * C1094) * C9224) +
             C29948 * C90579) *
                C26429 +
            (C29754 * C9225 - (C29948 * C9074 + C29752 * C9224) +
             C29949 * C90579) *
                C26430 +
            (C31315 * C9225 - (C29949 * C9074 + C29754 * C9224) +
             C31489 * C90579) *
                C26431) *
               C90485 * C90555) *
              C7396 +
          (((C9451 - (C9450 + C9449) + C9452) * C26429 +
            (C4930 * C9225 - (C2180 * C9074 + C1984 * C9224) + C5114 * C90579) *
                C26430 +
            (C30555 * C9225 - (C5114 * C9074 + C4930 * C9224) +
             C30734 * C90579) *
                C26431) *
               C90485 * C90752 +
           ((C10300 + C10299 - C10298 - C10301) * C26429 +
            (C8433 * C9224 + C8659 * C9074 - C34012 * C9225 - C34231 * C90579) *
                C26430 +
            (C34012 * C9224 + C34231 * C9074 -
             (C307 * C33649 + C90623 * C33991) * C9225 -
             (C307 * C33888 + C90623 * C34227) * C90579) *
                C26431) *
               C90485 * C90555) *
              C90503)) /
            (p * q * std::sqrt(p + q));
    d2eezx[40] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C7401 +
             (C554 * C116 + C90634 * C561) * C7396 - C584 * C7402 -
             C585 * C90503) *
                C90485 * C13576 +
            (C20743 + C20744 - C20745 - C20746) * C90485 * C13577 +
            C20758 * C13578) *
               C9074 +
           ((C2286 * C7402 -
             ((C554 * C1707 + C90634 * C2268) * C7396 +
              (C554 * C1700 + C90634 * C2264) * C7401) +
             C2287 * C90503) *
                C90485 * C13576 +
            (C21647 - (C21648 + C21649) + C21650) * C90485 * C13577 +
            (C21659 - (C21653 + C21654) + C21660) * C90485 * C13578) *
               C90579) *
              C90752 +
          (((C20745 - (C20744 + C20743) + C20746) * C90485 * C13576 +
            (C20749 - (C20748 + C20747) + C20750) * C90485 * C13577 +
            (C20751 - (C20752 + C20753) + C20754) * C90485 * C13578) *
               C9074 +
           ((C21649 + C21648 - C21647 - C21650) * C90485 * C13576 +
            (C21654 + C21653 - C21659 - C21660) * C90485 * C13577 +
            (C17382 * C7401 + C17383 * C7396 -
             (C554 * C21004 + C90634 * C21644) * C7402 -
             (C554 * C21006 + C90634 * C21645) * C90503) *
                C90485 * C13578) *
               C90579) *
              C90555)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C7401 +
             (C554 * C116 + C90634 * C561) * C7396 - C584 * C7402 -
             C585 * C90503) *
                C89 +
            (C584 * C7401 + C585 * C7396 - C586 * C7402 - C587 * C90503) * C90 +
            (C586 * C7401 + C587 * C7396 - C588 * C7402 - C589 * C90503) *
                C91) *
               C90623 * C9074 +
           ((C2286 * C7402 -
             ((C554 * C1707 + C90634 * C2268) * C7396 +
              (C554 * C1700 + C90634 * C2264) * C7401) +
             C2287 * C90503) *
                C89 +
            (C2288 * C7402 - (C2287 * C7396 + C2286 * C7401) + C2289 * C90503) *
                C90 +
            (C2290 * C7402 - (C2289 * C7396 + C2288 * C7401) + C2291 * C90503) *
                C91) *
               C90623 * C90579) *
              C90752 +
          (((C1418 * C7402 -
             ((C554 * C839 + C90634 * C1400) * C7396 +
              (C554 * C832 + C90634 * C1396) * C7401) +
             C1419 * C90503) *
                C89 +
            (C1420 * C7402 - (C1419 * C7396 + C1418 * C7401) + C1421 * C90503) *
                C90 +
            (C1422 * C7402 - (C1421 * C7396 + C1420 * C7401) + C1423 * C90503) *
                C91) *
               C90623 * C9074 +
           (((C554 * C3891 + C90634 * C4407) * C7401 +
             (C554 * C3900 + C90634 * C4413) * C7396 - C8771 * C7402 -
             C8772 * C90503) *
                C89 +
            (C8771 * C7401 + C8772 * C7396 - C8773 * C7402 - C8774 * C90503) *
                C90 +
            (C8773 * C7401 + C8774 * C7396 -
             (C554 * C8120 + C90634 * C8760) * C7402 -
             (C554 * C8122 + C90634 * C8761) * C90503) *
                C91) *
               C90623 * C90579) *
              C90555)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C26732 * C107 + C26429 * C555 + C26733 * C1700 + C26430 * C2264 +
             C26734 * C4656 + C26431 * C5191) *
                C7401 +
            (C26732 * C116 + C26429 * C561 + C26733 * C1707 + C26430 * C2268 +
             C26734 * C4663 + C26431 * C5195) *
                C7396 -
            (C26734 * C4657 + C26431 * C5192 + C26733 * C1697 + C26430 * C2263 +
             C26732 * C108 + C26429 * C556) *
                C7402 -
            (C26734 * C4664 + C26431 * C5196 + C26733 * C1706 + C26430 * C2269 +
             C26732 * C117 + C26429 * C562) *
                C90503) *
               C90485 * C90623 * C9074 +
           ((C26732 * C1697 + C26429 * C2263 + C26733 * C4657 + C26430 * C5192 +
             C26734 * C6164 + C26431 * C6504) *
                C7402 -
            ((C26734 * C6168 + C26431 * C6508 + C26733 * C4663 +
              C26430 * C5195 + C26732 * C1707 + C26429 * C2268) *
                 C7396 +
             (C26734 * C6165 + C26431 * C6505 + C26733 * C4656 +
              C26430 * C5191 + C26732 * C1700 + C26429 * C2264) *
                 C7401) +
            (C26732 * C1706 + C26429 * C2269 + C26733 * C4664 + C26430 * C5196 +
             C26734 * C6167 + C26431 * C6507) *
                C90503) *
               C90485 * C90623 * C90579) *
              C90752 +
          (((C26732 * C829 + C26429 * C1395 + C26733 * C3892 + C26430 * C4408 +
             C26734 * C5470 + C26431 * C5950) *
                C7402 -
            ((C26734 * C5474 + C26431 * C5954 + C26733 * C3900 +
              C26430 * C4413 + C26732 * C839 + C26429 * C1400) *
                 C7396 +
             (C26734 * C5471 + C26431 * C5951 + C26733 * C3891 +
              C26430 * C4407 + C26732 * C832 + C26429 * C1396) *
                 C7401) +
            (C26732 * C838 + C26429 * C1401 + C26733 * C3901 + C26430 * C4414 +
             C26734 * C5473 + C26431 * C5953) *
                C90503) *
               C90485 * C90623 * C9074 +
           ((C26732 * C3891 + C26429 * C4407 + C26733 * C5471 + C26430 * C5951 +
             C26734 * C19088 + C26431 * C19412) *
                C7401 +
            (C26732 * C3900 + C26429 * C4413 + C26733 * C5474 + C26430 * C5954 +
             C26734 * C19091 + C26431 * C19414) *
                C7396 -
            (C26734 * C33649 + C26431 * C34329 + C26733 * C5470 +
             C26430 * C5950 + C26732 * C3892 + C26429 * C4408) *
                C7402 -
            (C26734 * C33651 + C26431 * C34330 + C26733 * C5473 +
             C26430 * C5953 + C26732 * C3901 + C26429 * C4414) *
                C90503) *
               C90485 * C90623 * C90579) *
              C90555)) /
            (p * q * std::sqrt(p + q));
    d2eezy[40] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C923 +
             (C554 * C182 + C90634 * C641) * C90752 - C14614 * C924 -
             C14700 * C90555) *
                C90485 * C13576 +
            (C14614 * C923 + C14700 * C90752 - C14616 * C924 -
             C14701 * C90555) *
                C90485 * C13577 +
            (C14616 * C923 + C14701 * C90752 - C16062 * C924 -
             C16151 * C90555) *
                C90485 * C13578) *
               C7396 +
           ((C1505 - (C1504 + C1503) + C1522) * C90485 * C13576 +
            (C3122 * C924 - (C1518 * C90752 + C1418 * C923) + C3218 * C90555) *
                C90485 * C13577 +
            (C16060 * C924 - (C3218 * C90752 + C3122 * C923) +
             C16152 * C90555) *
                C90485 * C13578) *
               C90503) *
              C9074 +
          (((C17381 * C924 -
             ((C554 * C1794 + C90634 * C2368) * C90752 +
              (C554 * C1700 + C90634 * C2264) * C923) +
             C17474 * C90555) *
                C90485 * C13576 +
            (C17379 * C924 - (C17474 * C90752 + C17381 * C923) +
             C17475 * C90555) *
                C90485 * C13577 +
            (C17382 * C924 - (C17475 * C90752 + C17379 * C923) +
             C17476 * C90555) *
                C90485 * C13578) *
               C7396 +
           ((C10504 + C10503 - C10502 - C10505) * C90485 * C13576 +
            (C8771 * C923 + C8884 * C90752 - C21657 * C924 - C21762 * C90555) *
                C90485 * C13577 +
            (C21657 * C923 + C21762 * C90752 -
             (C554 * C21004 + C90634 * C21644) * C924 -
             (C554 * C21126 + C90634 * C21758) * C90555) *
                C90485 * C13578) *
               C90503) *
              C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C923 +
             (C554 * C182 + C90634 * C641) * C90752 -
             (C554 * C832 + C90634 * C1396) * C924 -
             (C554 * C927 + C90634 * C1497) * C90555) *
                C89 +
            (C1503 + C1504 - C1505 - C1522) * C90 + C1526 * C91) *
               C90623 * C7396 +
           ((C1505 - (C1504 + C1503) + C1522) * C89 +
            (C1510 - (C1509 + C1508) + C1524) * C90 +
            (C1513 - (C1514 + C1515) + C1525) * C91) *
               C90623 * C90503) *
              C9074 +
          ((((C554 * C3891 + C90634 * C4407) * C924 -
             ((C554 * C1794 + C90634 * C2368) * C90752 +
              (C554 * C1700 + C90634 * C2264) * C923) +
             (C554 * C3989 + C90634 * C4493) * C90555) *
                C89 +
            (C10502 - (C10503 + C10504) + C10505) * C90 +
            (C10506 - (C10507 + C10508) + C10509) * C91) *
               C90623 * C7396 +
           ((C10504 + C10503 - C10502 - C10505) * C89 +
            (C10508 + C10507 - C10506 - C10509) * C90 +
            (C2290 * C923 + C2382 * C90752 -
             (C554 * C8120 + C90634 * C8760) * C924 -
             (C554 * C8222 + C90634 * C8872) * C90555) *
                C91) *
               C90623 * C90503) *
              C90579)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C26732 * C107 + C26429 * C555 + C26733 * C1700 + C26430 * C2264 +
             C26734 * C4656 + C26431 * C5191) *
                C923 +
            (C26732 * C182 + C26429 * C641 + C26733 * C1794 + C26430 * C2368 +
             C26734 * C4746 + C26431 * C5285) *
                C90752 -
            (C26734 * C5471 + C26431 * C5951 + C26733 * C3891 + C26430 * C4407 +
             C26732 * C832 + C26429 * C1396) *
                C924 -
            (C26734 * C5557 + C26431 * C6029 + C26733 * C3989 + C26430 * C4493 +
             C26732 * C927 + C26429 * C1497) *
                C90555) *
               C90485 * C90623 * C7396 +
           ((C26732 * C829 + C26429 * C1395 + C26733 * C3892 + C26430 * C4408 +
             C26734 * C5470 + C26431 * C5950) *
                C924 -
            ((C26734 * C4747 + C26431 * C5286 + C26733 * C1791 +
              C26430 * C2365 + C26732 * C183 + C26429 * C642) *
                 C90752 +
             (C26734 * C4657 + C26431 * C5192 + C26733 * C1697 +
              C26430 * C2263 + C26732 * C108 + C26429 * C556) *
                 C923) +
            (C26732 * C926 + C26429 * C1498 + C26733 * C3990 + C26430 * C4495 +
             C26734 * C5556 + C26431 * C6030) *
                C90555) *
               C90485 * C90623 * C90503) *
              C9074 +
          (((C26732 * C3891 + C26429 * C4407 + C26733 * C5471 + C26430 * C5951 +
             C26734 * C19088 + C26431 * C19412) *
                C924 -
            ((C26734 * C6227 + C26431 * C6561 + C26733 * C4746 +
              C26430 * C5285 + C26732 * C1794 + C26429 * C2368) *
                 C90752 +
             (C26734 * C6165 + C26431 * C6505 + C26733 * C4656 +
              C26430 * C5191 + C26732 * C1700 + C26429 * C2264) *
                 C923) +
            (C26732 * C3989 + C26429 * C4493 + C26733 * C5557 + C26430 * C6029 +
             C26734 * C19146 + C26431 * C19466) *
                C90555) *
               C90485 * C90623 * C7396 +
           ((C26732 * C1697 + C26429 * C2263 + C26733 * C4657 + C26430 * C5192 +
             C26734 * C6164 + C26431 * C6504) *
                C923 +
            (C26732 * C1791 + C26429 * C2365 + C26733 * C4747 + C26430 * C5286 +
             C26734 * C6226 + C26431 * C6560) *
                C90752 -
            (C26734 * C33649 + C26431 * C34329 + C26733 * C5470 +
             C26430 * C5950 + C26732 * C3892 + C26429 * C4408) *
                C924 -
            (C26734 * C33769 + C26431 * C34429 + C26733 * C5556 +
             C26430 * C6030 + C26732 * C3990 + C26429 * C4495) *
                C90555) *
               C90485 * C90623 * C90503) *
              C90579)) /
            (p * q * std::sqrt(p + q));
    d2eezz[40] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C90634 * C555) * C9224 +
                       (C554 * C245 + C90634 * C719) * C9074 -
                       (C554 * C1700 + C90634 * C2264) * C9225 -
                       (C554 * C1879 + C90634 * C2460) * C90579) *
                          C90485 * C13576 +
                      (C23433 + C23434 - C23435 - C23436) * C90485 * C13577 +
                      (C23437 + C23438 - C23439 - C23440) * C90485 * C13578) *
                         C90752 +
                     ((C23435 - (C23434 + C23433) + C23436) * C90485 * C13576 +
                      (C23439 - (C23438 + C23437) + C23440) * C90485 * C13577 +
                      (C17382 * C9225 - (C16238 * C9074 + C16062 * C9224) +
                       C17571 * C90579) *
                          C90485 * C13578) *
                         C90555) *
                        C7396 +
                    (((C9689 - (C9688 + C9687) + C9690) * C90485 * C13576 +
                      (C10608 - (C10609 + C10610) + C10611) * C90485 * C13577 +
                      (C23441 - (C23442 + C23443) + C23444) * C90485 * C13578) *
                         C90752 +
                     ((C10610 + C10609 - C10608 - C10611) * C90485 * C13576 +
                      (C23443 + C23442 - C23441 - C23444) * C90485 * C13577 +
                      (C16060 * C9224 + C16239 * C9074 -
                       (C554 * C21004 + C90634 * C21644) * C9225 -
                       (C554 * C21232 + C90634 * C21860) * C90579) *
                          C90485 * C13578) *
                         C90555) *
                        C90503)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C90634 * C555) * C9224 +
                       (C554 * C245 + C90634 * C719) * C9074 -
                       (C554 * C1700 + C90634 * C2264) * C9225 -
                       (C554 * C1879 + C90634 * C2460) * C90579) *
                          C89 +
                      (C9687 + C9688 - C9689 - C9690) * C90 + C9701 * C91) *
                         C90623 * C90752 +
                     (((C554 * C3891 + C90634 * C4407) * C9225 -
                       ((C554 * C1011 + C90634 * C1602) * C9074 +
                        (C554 * C832 + C90634 * C1396) * C9224) +
                       (C554 * C4075 + C90634 * C4573) * C90579) *
                          C89 +
                      (C10608 - (C10609 + C10610) + C10611) * C90 +
                      (C10612 - (C10613 + C10614) + C10615) * C91) *
                         C90623 * C90555) *
                        C7396 +
                    (((C9689 - (C9688 + C9687) + C9690) * C89 +
                      (C9693 - (C9692 + C9691) + C9694) * C90 +
                      (C9695 - (C9696 + C9697) + C9698) * C91) *
                         C90623 * C90752 +
                     ((C10610 + C10609 - C10608 - C10611) * C89 +
                      (C10614 + C10613 - C10612 - C10615) * C90 +
                      (C1422 * C9224 + C1617 * C9074 -
                       (C554 * C8120 + C90634 * C8760) * C9225 -
                       (C554 * C8322 + C90634 * C8985) * C90579) *
                          C91) *
                         C90623 * C90555) *
                        C90503)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C26732 * C107 + C26429 * C555 + C26733 * C1700 +
                       C26430 * C2264 + C26734 * C4656 + C26431 * C5191) *
                          C9224 +
                      (C26732 * C245 + C26429 * C719 + C26733 * C1879 +
                       C26430 * C2460 + C26734 * C4831 + C26431 * C5373) *
                          C9074 -
                      (C26734 * C6165 + C26431 * C6505 + C26733 * C4656 +
                       C26430 * C5191 + C26732 * C1700 + C26429 * C2264) *
                          C9225 -
                      (C26734 * C6287 + C26431 * C6612 + C26733 * C4831 +
                       C26430 * C5373 + C26732 * C1879 + C26429 * C2460) *
                          C90579) *
                         C90485 * C90623 * C90752 +
                     ((C26732 * C3891 + C26429 * C4407 + C26733 * C5471 +
                       C26430 * C5951 + C26734 * C19088 + C26431 * C19412) *
                          C9225 -
                      ((C26734 * C5637 + C26431 * C6106 + C26733 * C4075 +
                        C26430 * C4573 + C26732 * C1011 + C26429 * C1602) *
                           C9074 +
                       (C26734 * C5471 + C26431 * C5951 + C26733 * C3891 +
                        C26430 * C4407 + C26732 * C832 + C26429 * C1396) *
                           C9224) +
                      (C26732 * C4075 + C26429 * C4573 + C26733 * C5637 +
                       C26430 * C6106 + C26734 * C19199 + C26431 * C19517) *
                          C90579) *
                         C90485 * C90623 * C90555) *
                        C7396 +
                    (((C26732 * C1697 + C26429 * C2263 + C26733 * C4657 +
                       C26430 * C5192 + C26734 * C6164 + C26431 * C6504) *
                          C9225 -
                      ((C26734 * C4832 + C26431 * C5374 + C26733 * C1878 +
                        C26430 * C2461 + C26732 * C246 + C26429 * C720) *
                           C9074 +
                       (C26734 * C4657 + C26431 * C5192 + C26733 * C1697 +
                        C26430 * C2263 + C26732 * C108 + C26429 * C556) *
                           C9224) +
                      (C26732 * C1878 + C26429 * C2461 + C26733 * C4832 +
                       C26430 * C5374 + C26734 * C6286 + C26431 * C6613) *
                          C90579) *
                         C90485 * C90623 * C90752 +
                     ((C26732 * C829 + C26429 * C1395 + C26733 * C3892 +
                       C26430 * C4408 + C26734 * C5470 + C26431 * C5950) *
                          C9224 +
                      (C26732 * C1010 + C26429 * C1601 + C26733 * C4076 +
                       C26430 * C4574 + C26734 * C5636 + C26431 * C6107) *
                          C9074 -
                      (C26734 * C33649 + C26431 * C34329 + C26733 * C5470 +
                       C26430 * C5950 + C26732 * C3892 + C26429 * C4408) *
                          C9225 -
                      (C26734 * C33888 + C26431 * C34528 + C26733 * C5636 +
                       C26430 * C6107 + C26732 * C4076 + C26429 * C4574) *
                          C90579) *
                         C90485 * C90623 * C90555) *
                        C90503)) /
                      (p * q * std::sqrt(p + q));
    d2eexx[41] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C7401 +
            (C13579 * C116 + C90485 * C125) * C7396 -
            (C13579 * C108 + C90485 * C114) * C7402 -
            (C13579 * C117 + C90485 * C126) * C90503) *
               C13576 +
           (C20284 + C20285 - C20286 - C20287) * C13577 + C20298 * C13578) *
              C90634 * C90782 +
          (((C13579 * C1697 + C90485 * C1702) * C7402 -
            ((C13579 * C1707 + C90485 * C1714) * C7396 +
             (C13579 * C1700 + C90485 * C1708) * C7401) +
            (C13579 * C1706 + C90485 * C1713) * C90503) *
               C13576 +
           (C21025 - (C21011 + C21012) + C21026) * C13577 +
           (C21027 - (C21017 + C21018) + C21028) * C13578) *
              C90634 * C90777 +
          (((C13579 * C4656 + C90485 * C4660) * C7401 +
            (C13579 * C4663 + C90485 * C4668) * C7396 -
            (C13579 * C4657 + C90485 * C4661) * C7402 -
            (C13579 * C4664 + C90485 * C4669) * C90503) *
               C13576 +
           (C18362 * C7401 + C18363 * C7396 -
            (C13579 * C5470 + C90485 * C5476) * C7402 -
            (C13579 * C5473 + C90485 * C5479) * C90503) *
               C13577 +
           (C18364 * C7401 + C18365 * C7396 -
            (C13579 * C17652 + C90485 * C17655) * C7402 -
            (C13579 * C17656 + C90485 * C17658) * C90503) *
               C13578) *
              C90634 * C10691) *
         C90541) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C7401 +
           (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 + C102 * C118 +
            C91 * C127) *
               C7396 -
           (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 + C100 * C108 +
            C89 * C114) *
               C7402 -
           (C102 * C120 + C91 * C128 + C101 * C118 + C90 * C127 + C100 * C117 +
            C89 * C126) *
               C90503) *
              C90623 * C90634 * C90782 +
          ((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
            C102 * C1699 + C91 * C1704) *
               C7402 -
           ((C102 * C1705 + C91 * C1712 + C101 * C1706 + C90 * C1713 +
             C100 * C1707 + C89 * C1714) *
                C7396 +
            (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
             C100 * C1700 + C89 * C1708) *
                C7401) +
           (C100 * C1706 + C89 * C1713 + C101 * C1705 + C90 * C1712 +
            C102 * C1709 + C91 * C1715) *
               C90503) *
              C90623 * C90634 * C90777 +
          ((C100 * C4656 + C89 * C4660 + C101 * C4657 + C90 * C4661 +
            C102 * C4658 + C91 * C4662) *
               C7401 +
           (C100 * C4663 + C89 * C4668 + C101 * C4664 + C90 * C4669 +
            C102 * C4665 + C91 * C4670) *
               C7396 -
           (C102 * C4659 + C91 * C4666 + C101 * C4658 + C90 * C4662 +
            C100 * C4657 + C89 * C4661) *
               C7402 -
           (C102 * C4667 + C91 * C4671 + C101 * C4665 + C90 * C4670 +
            C100 * C4664 + C89 * C4669) *
               C90503) *
              C90623 * C90634 * C10691) *
         C90541) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C7401 +
            (C13579 * C116 + C90485 * C125) * C7396 -
            (C13579 * C108 + C90485 * C114) * C7402 -
            (C13579 * C117 + C90485 * C126) * C90503) *
               C90623 * C26429 +
           (C33654 + C33655 - C33656 - C33657) * C90623 * C26430 +
           C36195 * C26431) *
              C90782 +
          ((C33656 - (C33655 + C33654) + C33657) * C90623 * C26429 +
           (C33660 - (C33659 + C33658) + C33661) * C90623 * C26430 +
           (C36189 - (C36190 + C36191) + C36192) * C90623 * C26431) *
              C90777 +
          (C36195 * C26429 +
           (C36191 + C36190 - C36189 - C36192) * C90623 * C26430 +
           (C31776 * C7401 + C31777 * C7396 -
            (C13579 * C30248 + C90485 * C30251) * C7402 -
            (C13579 * C30252 + C90485 * C30254) * C90503) *
               C90623 * C26431) *
              C10691) *
         C90541) /
            (p * q * std::sqrt(p + q));
    d2eexy[41] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C13579 * C107 + C90485 * C113) * C181 +
                       (C13579 * C182 + C90485 * C188) * C90541) *
                          C13576 +
                      (C14082 * C181 + C14192 * C90541) * C13577 +
                      (C14088 * C181 + C14193 * C90541) * C13578) *
                         C90634 * C7396 -
                     ((C14195 * C90541 + C14090 * C181) * C13578 +
                      (C14194 * C90541 + C14084 * C181) * C13577 +
                      ((C13579 * C183 + C90485 * C189) * C90541 +
                       (C13579 * C108 + C90485 * C114) * C181) *
                          C13576) *
                         C90634 * C90503) *
                        C90782 +
                    ((((C13579 * C1697 + C90485 * C1702) * C181 +
                       (C13579 * C1791 + C90485 * C1796) * C90541) *
                          C13576 +
                      (C21021 * C181 + C21133 * C90541) * C13577 +
                      (C21023 * C181 + C21134 * C90541) * C13578) *
                         C90634 * C90503 -
                     ((C16954 * C90541 + C16857 * C181) * C13578 +
                      (C16953 * C90541 + C16859 * C181) * C13577 +
                      ((C13579 * C1794 + C90485 * C1799) * C90541 +
                       (C13579 * C1700 + C90485 * C1708) * C181) *
                          C13576) *
                         C90634 * C7396) *
                        C90777 +
                    ((((C13579 * C4656 + C90485 * C4660) * C181 +
                       (C13579 * C4746 + C90485 * C4750) * C90541) *
                          C13576 +
                      (C18362 * C181 + C18450 * C90541) * C13577 +
                      (C18364 * C181 + C18451 * C90541) * C13578) *
                         C90634 * C7396 -
                     (((C13579 * C17734 + C90485 * C17736) * C90541 +
                       (C13579 * C17652 + C90485 * C17655) * C181) *
                          C13578 +
                      ((C13579 * C5556 + C90485 * C5559) * C90541 +
                       (C13579 * C5470 + C90485 * C5476) * C181) *
                          C13577 +
                      ((C13579 * C4747 + C90485 * C4751) * C90541 +
                       (C13579 * C4657 + C90485 * C4661) * C181) *
                          C13576) *
                         C90634 * C90503) *
                        C10691)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                       C102 * C109 + C91 * C115) *
                          C181 +
                      (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 +
                       C102 * C184 + C91 * C190) *
                          C90541) *
                         C90623 * C90634 * C7396 -
                     ((C102 * C185 + C91 * C191 + C101 * C184 + C90 * C190 +
                       C100 * C183 + C89 * C189) *
                          C90541 +
                      (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                       C100 * C108 + C89 * C114) *
                          C181) *
                         C90623 * C90634 * C90503) *
                        C90782 +
                    (((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
                       C102 * C1699 + C91 * C1704) *
                          C181 +
                      (C100 * C1791 + C89 * C1796 + C101 * C1792 + C90 * C1797 +
                       C102 * C1793 + C91 * C1798) *
                          C90541) *
                         C90623 * C90634 * C90503 -
                     ((C102 * C1792 + C91 * C1797 + C101 * C1791 + C90 * C1796 +
                       C100 * C1794 + C89 * C1799) *
                          C90541 +
                      (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
                       C100 * C1700 + C89 * C1708) *
                          C181) *
                         C90623 * C90634 * C7396) *
                        C90777 +
                    (((C100 * C4656 + C89 * C4660 + C101 * C4657 + C90 * C4661 +
                       C102 * C4658 + C91 * C4662) *
                          C181 +
                      (C100 * C4746 + C89 * C4750 + C101 * C4747 + C90 * C4751 +
                       C102 * C4748 + C91 * C4752) *
                          C90541) *
                         C90623 * C90634 * C7396 -
                     ((C102 * C4749 + C91 * C4753 + C101 * C4748 + C90 * C4752 +
                       C100 * C4747 + C89 * C4751) *
                          C90541 +
                      (C102 * C4659 + C91 * C4666 + C101 * C4658 + C90 * C4662 +
                       C100 * C4657 + C89 * C4661) *
                          C181) *
                         C90623 * C90634 * C90503) *
                        C10691)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C13579 * C107 + C90485 * C113) * C181 +
                       (C13579 * C182 + C90485 * C188) * C90541) *
                          C90623 * C26429 +
                      (C27698 + C27722) * C90623 * C26430 + C30370 * C26431) *
                         C7396 -
                     (C30371 * C26431 + (C27725 + C27709) * C90623 * C26430 +
                      ((C13579 * C183 + C90485 * C189) * C90541 +
                       (C13579 * C108 + C90485 * C114) * C181) *
                          C90623 * C26429) *
                         C90503) *
                        C90782 +
                    (((C27709 + C27725) * C90623 * C26429 +
                      (C27706 + C27724) * C90623 * C26430 +
                      (C30364 + C30374) * C90623 * C26431) *
                         C90503 -
                     (C31836 * C26431 + (C27723 + C27701) * C90623 * C26430 +
                      (C27722 + C27698) * C90623 * C26429) *
                         C7396) *
                        C90777 +
                    ((C30370 * C26429 + (C30369 + C30375) * C90623 * C26430 +
                      (C31833 + C31838) * C90623 * C26431) *
                         C7396 -
                     (((C13579 * C30358 + C90485 * C30360) * C90541 +
                       (C13579 * C30248 + C90485 * C30251) * C181) *
                          C90623 * C26431 +
                      (C30374 + C30364) * C90623 * C26430 + C30371 * C26429) *
                         C90503) *
                        C10691)) /
                      (p * q * std::sqrt(p + q));
    d2eexz[41] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C10840 +
            (C13579 * C245 + C90485 * C251) * C90782 -
            (C13579 * C1700 + C90485 * C1708) * C10841 -
            (C13579 * C1879 + C90485 * C1884) * C90777 +
            (C13579 * C4656 + C90485 * C4660) * C10842 +
            (C13579 * C4831 + C90485 * C4835) * C10691) *
               C13576 +
           (C14082 * C10840 + C14290 * C90782 - C16859 * C10841 -
            C17049 * C90777 + C18362 * C10842 + C18542 * C10691) *
               C13577 +
           (C14088 * C10840 + C14291 * C90782 - C16857 * C10841 -
            C17051 * C90777 + C18364 * C10842 + C18543 * C10691) *
               C13578) *
              C90634 * C90541 * C7396 +
          (((C13579 * C1697 + C90485 * C1702) * C10841 -
            ((C13579 * C246 + C90485 * C252) * C90782 +
             (C13579 * C108 + C90485 * C114) * C10840) +
            (C13579 * C1878 + C90485 * C1883) * C90777 -
            (C13579 * C4657 + C90485 * C4661) * C10842 -
            (C13579 * C4832 + C90485 * C4836) * C10691) *
               C13576 +
           (C21021 * C10841 - (C14292 * C90782 + C14084 * C10840) +
            C21245 * C90777 - (C13579 * C5470 + C90485 * C5476) * C10842 -
            (C13579 * C5636 + C90485 * C5639) * C10691) *
               C13577 +
           (C21023 * C10841 - (C14293 * C90782 + C14090 * C10840) +
            C21246 * C90777 - (C13579 * C17652 + C90485 * C17655) * C10842 -
            (C13579 * C17812 + C90485 * C17814) * C10691) *
               C13578) *
              C90634 * C90541 * C90503)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C10840 +
           (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 + C102 * C247 +
            C91 * C253) *
               C90782 -
           (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
            C100 * C1700 + C89 * C1708) *
               C10841 -
           (C102 * C1877 + C91 * C1882 + C101 * C1878 + C90 * C1883 +
            C100 * C1879 + C89 * C1884) *
               C90777 +
           (C100 * C4656 + C89 * C4660 + C101 * C4657 + C90 * C4661 +
            C102 * C4658 + C91 * C4662) *
               C10842 +
           (C100 * C4831 + C89 * C4835 + C101 * C4832 + C90 * C4836 +
            C102 * C4833 + C91 * C4837) *
               C10691) *
              C90623 * C90634 * C90541 * C7396 +
          ((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
            C102 * C1699 + C91 * C1704) *
               C10841 -
           ((C102 * C248 + C91 * C254 + C101 * C247 + C90 * C253 + C100 * C246 +
             C89 * C252) *
                C90782 +
            (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 + C100 * C108 +
             C89 * C114) *
                C10840) +
           (C100 * C1878 + C89 * C1883 + C101 * C1877 + C90 * C1882 +
            C102 * C1880 + C91 * C1885) *
               C90777 -
           (C102 * C4659 + C91 * C4666 + C101 * C4658 + C90 * C4662 +
            C100 * C4657 + C89 * C4661) *
               C10842 -
           (C102 * C4834 + C91 * C4838 + C101 * C4833 + C90 * C4837 +
            C100 * C4832 + C89 * C4836) *
               C10691) *
              C90623 * C90634 * C90541 * C90503)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C10840 +
            (C13579 * C245 + C90485 * C251) * C90782 - C27600 * C10841 -
            C27814 * C90777 + C27606 * C10842 + C27815 * C10691) *
               C90623 * C26429 +
           (C27600 * C10840 + C27814 * C90782 - C27606 * C10841 -
            C27815 * C90777 + C30275 * C10842 + C30458 * C10691) *
               C90623 * C26430 +
           (C27606 * C10840 + C27815 * C90782 - C30275 * C10841 -
            C30458 * C90777 + C31776 * C10842 + C31893 * C10691) *
               C90623 * C26431) *
              C90541 * C7396 +
          ((C27602 * C10841 -
            ((C13579 * C246 + C90485 * C252) * C90782 +
             (C13579 * C108 + C90485 * C114) * C10840) +
            C27816 * C90777 - C27608 * C10842 - C27817 * C10691) *
               C90623 * C26429 +
           (C27608 * C10841 - (C27816 * C90782 + C27602 * C10840) +
            C27817 * C90777 - C30273 * C10842 - C30459 * C10691) *
               C90623 * C26430 +
           (C30273 * C10841 - (C27817 * C90782 + C27608 * C10840) +
            C30459 * C90777 - (C13579 * C30248 + C90485 * C30251) * C10842 -
            (C13579 * C30450 + C90485 * C30452) * C10691) *
               C90623 * C26431) *
              C90541 * C90503)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[41] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C7401 +
           (C13730 * C116 + C13576 * C314 + C13731 * C839 + C13577 * C1098 +
            C13732 * C2577 + C13578 * C2831) *
               C7396 -
           (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
            C13730 * C108 + C13576 * C309) *
               C7402 -
           (C13732 * C2578 + C13578 * C2832 + C13731 * C838 + C13577 * C1099 +
            C13730 * C117 + C13576 * C315) *
               C90503) *
              C90634 * C90485 * C90782 +
          ((C13730 * C1697 + C13576 * C1961 + C13731 * C3892 + C13577 * C4162 +
            C13732 * C3895 + C13578 * C4165) *
               C7402 -
           ((C13732 * C3905 + C13578 * C4172 + C13731 * C3900 + C13577 * C4167 +
             C13730 * C1707 + C13576 * C1966) *
                C7396 +
            (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 + C13577 * C4161 +
             C13730 * C1700 + C13576 * C1962) *
                C7401) +
           (C13730 * C1706 + C13576 * C1967 + C13731 * C3901 + C13577 * C4168 +
            C13732 * C3904 + C13578 * C4171) *
               C90503) *
              C90634 * C90485 * C90777 +
          ((C13730 * C4656 + C13576 * C4913 + C13731 * C5471 + C13577 * C5717 +
            C13732 * C17651 + C13578 * C17889) *
               C7401 +
           (C13730 * C4663 + C13576 * C4917 + C13731 * C5474 + C13577 * C5720 +
            C13732 * C17654 + C13578 * C17891) *
               C7396 -
           (C13732 * C17652 + C13578 * C17890 + C13731 * C5470 +
            C13577 * C5716 + C13730 * C4657 + C13576 * C4914) *
               C7402 -
           (C13732 * C17656 + C13578 * C17892 + C13731 * C5473 +
            C13577 * C5719 + C13730 * C4664 + C13576 * C4918) *
               C90503) *
              C90634 * C90485 * C10691) *
         C90541) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C7401 +
            (C307 * C116 + C90623 * C314) * C7396 - C337 * C7402 -
            C338 * C90503) *
               C90634 * C89 +
           (C337 * C7401 + C338 * C7396 - C339 * C7402 - C340 * C90503) *
               C90634 * C90 +
           (C339 * C7401 + C340 * C7396 - C341 * C7402 - C342 * C90503) *
               C90634 * C91) *
              C90782 +
          ((C1984 * C7402 -
            ((C307 * C1707 + C90623 * C1966) * C7396 +
             (C307 * C1700 + C90623 * C1962) * C7401) +
            C1985 * C90503) *
               C90634 * C89 +
           (C1986 * C7402 - (C1985 * C7396 + C1984 * C7401) + C1987 * C90503) *
               C90634 * C90 +
           (C1988 * C7402 - (C1987 * C7396 + C1986 * C7401) + C1989 * C90503) *
               C90634 * C91) *
              C90777 +
          (((C307 * C4656 + C90623 * C4913) * C7401 +
            (C307 * C4663 + C90623 * C4917) * C7396 - C4930 * C7402 -
            C4931 * C90503) *
               C90634 * C89 +
           (C4930 * C7401 + C4931 * C7396 - C4932 * C7402 - C4933 * C90503) *
               C90634 * C90 +
           (C4932 * C7401 + C4933 * C7396 -
            (C307 * C4659 + C90623 * C4916) * C7402 -
            (C307 * C4667 + C90623 * C4920) * C90503) *
               C90634 * C91) *
              C10691) *
         C90541) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C7401 +
            (C307 * C116 + C90623 * C314) * C7396 - C337 * C7402 -
            C338 * C90503) *
               C26429 +
           (C33994 + C33995 - C33996 - C33997) * C26430 + C36424 * C26431) *
              C90485 * C90782 +
          ((C33996 - (C33995 + C33994) + C33997) * C26429 +
           (C34000 - (C33999 + C33998) + C34001) * C26430 +
           (C36419 - (C36420 + C36421) + C36422) * C26431) *
              C90485 * C90777 +
          (C36424 * C26429 + (C36421 + C36420 - C36419 - C36422) * C26430 +
           (C31951 * C7401 + C31952 * C7396 -
            (C307 * C30248 + C90623 * C30534) * C7402 -
            (C307 * C30252 + C90623 * C30536) * C90503) *
               C26431) *
              C90485 * C10691) *
         C90541) /
            (p * q * std::sqrt(p + q));
    d2eeyy[41] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
             C13732 * C2570 + C13578 * C2827) *
                C181 +
            (C13730 * C182 + C13576 * C394 + C13731 * C927 + C13577 * C1195 +
             C13732 * C2663 + C13578 * C2921) *
                C90541) *
               C90634 * C90485 * C7396 -
           ((C13732 * C2664 + C13578 * C2922 + C13731 * C926 + C13577 * C1196 +
             C13730 * C183 + C13576 * C395) *
                C90541 +
            (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
             C13730 * C108 + C13576 * C309) *
                C181) *
               C90634 * C90485 * C90503) *
              C90782 +
          (((C13730 * C1697 + C13576 * C1961 + C13731 * C3892 + C13577 * C4162 +
             C13732 * C3895 + C13578 * C4165) *
                C181 +
            (C13730 * C1791 + C13576 * C2063 + C13731 * C3990 + C13577 * C4249 +
             C13732 * C3993 + C13578 * C4250) *
                C90541) *
               C90634 * C90485 * C90503 -
           ((C13732 * C3994 + C13578 * C4248 + C13731 * C3989 + C13577 * C4247 +
             C13730 * C1794 + C13576 * C2066) *
                C90541 +
            (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 + C13577 * C4161 +
             C13730 * C1700 + C13576 * C1962) *
                C181) *
               C90634 * C90485 * C7396) *
              C90777 +
          (((C13730 * C4656 + C13576 * C4913 + C13731 * C5471 + C13577 * C5717 +
             C13732 * C17651 + C13578 * C17889) *
                C181 +
            (C13730 * C4746 + C13576 * C5007 + C13731 * C5557 + C13577 * C5795 +
             C13732 * C17733 + C13578 * C17967) *
                C90541) *
               C90634 * C90485 * C7396 -
           ((C13732 * C17734 + C13578 * C17968 + C13731 * C5556 +
             C13577 * C5796 + C13730 * C4747 + C13576 * C5008) *
                C90541 +
            (C13732 * C17652 + C13578 * C17890 + C13731 * C5470 +
             C13577 * C5716 + C13730 * C4657 + C13576 * C4914) *
                C181) *
               C90634 * C90485 * C90503) *
              C10691)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C181 +
             (C307 * C182 + C90623 * C394) * C90541) *
                C90634 * C89 +
            (C401 + C417) * C90634 * C90 + C423 * C91) *
               C7396 -
           (C424 * C91 + (C418 + C404) * C90634 * C90 +
            (C417 + C401) * C90634 * C89) *
               C90503) *
              C90782 +
          (((C2069 + C2081) * C90634 * C89 + (C2072 + C2082) * C90634 * C90 +
            (C2075 + C2083) * C90634 * C91) *
               C90503 -
           (C2085 * C91 + (C2081 + C2069) * C90634 * C90 +
            ((C307 * C1794 + C90623 * C2066) * C90541 +
             (C307 * C1700 + C90623 * C1962) * C181) *
                C90634 * C89) *
               C7396) *
              C90777 +
          ((((C307 * C4656 + C90623 * C4913) * C181 +
             (C307 * C4746 + C90623 * C5007) * C90541) *
                C90634 * C89 +
            (C5012 + C5020) * C90634 * C90 + (C5015 + C5021) * C90634 * C91) *
               C7396 -
           (((C307 * C4749 + C90623 * C5010) * C90541 +
             (C307 * C4659 + C90623 * C4916) * C181) *
                C90634 * C91 +
            (C5021 + C5015) * C90634 * C90 + (C5020 + C5012) * C90634 * C89) *
               C90503) *
              C10691)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C181 +
             (C307 * C182 + C90623 * C394) * C90541) *
                C26429 +
            (C27992 + C28000) * C26430 + C30641 * C26431) *
               C90485 * C7396 -
           (C30642 * C26431 + (C2081 + C2069) * C26430 +
            (C417 + C401) * C26429) *
               C90485 * C90503) *
              C90782 +
          (((C2069 + C2081) * C26429 + (C5012 + C5020) * C26430 +
            (C30643 + C30651) * C26431) *
               C90485 * C90503 -
           (C32006 * C26431 + (C28001 + C27995) * C26430 +
            (C28000 + C27992) * C26429) *
               C90485 * C7396) *
              C90777 +
          ((C30641 * C26429 + (C30648 + C30652) * C26430 +
            (C32007 + C32011) * C26431) *
               C90485 * C7396 -
           (((C307 * C30358 + C90623 * C30639) * C90541 +
             (C307 * C30248 + C90623 * C30534) * C181) *
                C26431 +
            (C30651 + C30643) * C26430 + C30642 * C26429) *
               C90485 * C90503) *
              C10691)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[41] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C10840 +
           (C13730 * C245 + C13576 * C474 + C13731 * C1011 + C13577 * C1301 +
            C13732 * C2745 + C13578 * C3017) *
               C90782 -
           (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 + C13577 * C4161 +
            C13730 * C1700 + C13576 * C1962) *
               C10841 -
           (C13732 * C4080 + C13578 * C4330 + C13731 * C4075 + C13577 * C4327 +
            C13730 * C1879 + C13576 * C2159) *
               C90777 +
           (C13730 * C4656 + C13576 * C4913 + C13731 * C5471 + C13577 * C5717 +
            C13732 * C17651 + C13578 * C17889) *
               C10842 +
           (C13730 * C4831 + C13576 * C5095 + C13731 * C5637 + C13577 * C5872 +
            C13732 * C17811 + C13578 * C18043) *
               C10691) *
              C90634 * C90485 * C90541 * C7396 +
          ((C13730 * C1697 + C13576 * C1961 + C13731 * C3892 + C13577 * C4162 +
            C13732 * C3895 + C13578 * C4165) *
               C10841 -
           ((C13732 * C2746 + C13578 * C3018 + C13731 * C1010 + C13577 * C1300 +
             C13730 * C246 + C13576 * C475) *
                C90782 +
            (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
             C13730 * C108 + C13576 * C309) *
                C10840) +
           (C13730 * C1878 + C13576 * C2160 + C13731 * C4076 + C13577 * C4328 +
            C13732 * C4079 + C13578 * C4331) *
               C90777 -
           (C13732 * C17652 + C13578 * C17890 + C13731 * C5470 +
            C13577 * C5716 + C13730 * C4657 + C13576 * C4914) *
               C10842 -
           (C13732 * C17812 + C13578 * C18044 + C13731 * C5636 +
            C13577 * C5873 + C13730 * C4832 + C13576 * C5096) *
               C10691) *
              C90634 * C90485 * C90541 * C90503)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C10840 +
            (C307 * C245 + C90623 * C474) * C90782 -
            (C307 * C1700 + C90623 * C1962) * C10841 -
            (C307 * C1879 + C90623 * C2159) * C90777 +
            (C307 * C4656 + C90623 * C4913) * C10842 +
            (C307 * C4831 + C90623 * C5095) * C10691) *
               C90634 * C89 +
           (C11066 + C11067 - C11068 - C11069 + C11070 + C11071) * C90634 *
               C90 +
           (C11072 + C11073 - C11074 - C11075 + C11076 + C11077) * C90634 *
               C91) *
              C90541 * C7396 +
          ((C11068 - (C11067 + C11066) + C11069 - C11070 - C11071) * C90634 *
               C89 +
           (C11074 - (C11073 + C11072) + C11075 - C11076 - C11077) * C90634 *
               C90 +
           (C1988 * C10841 - (C495 * C90782 + C341 * C10840) + C2183 * C90777 -
            (C307 * C4659 + C90623 * C4916) * C10842 -
            (C307 * C4834 + C90623 * C5098) * C10691) *
               C90634 * C91) *
              C90541 * C90503)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C10840 +
            (C307 * C245 + C90623 * C474) * C90782 - C27910 * C10841 -
            C28080 * C90777 + C27912 * C10842 + C28081 * C10691) *
               C26429 +
           (C27910 * C10840 + C28080 * C90782 - C27912 * C10841 -
            C28081 * C90777 + C30557 * C10842 + C30733 * C10691) *
               C26430 +
           (C27912 * C10840 + C28081 * C90782 - C30557 * C10841 -
            C30733 * C90777 + C31951 * C10842 + C32065 * C10691) *
               C26431) *
              C90485 * C90541 * C7396 +
          ((C11068 - (C11067 + C11066) + C11069 - C11070 - C11071) * C26429 +
           (C4930 * C10841 - (C2180 * C90782 + C1984 * C10840) +
            C5114 * C90777 - C30555 * C10842 - C30734 * C10691) *
               C26430 +
           (C30555 * C10841 - (C5114 * C90782 + C4930 * C10840) +
            C30734 * C90777 - (C307 * C30248 + C90623 * C30534) * C10842 -
            (C307 * C30450 + C90623 * C30727) * C10691) *
               C26431) *
              C90485 * C90541 * C90503)) /
            (p * q * std::sqrt(p + q));
    d2eezx[41] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C7401 +
            (C554 * C116 + C90634 * C561) * C7396 - C584 * C7402 -
            C585 * C90503) *
               C90485 * C13576 +
           (C20743 + C20744 - C20745 - C20746) * C90485 * C13577 +
           C20758 * C13578) *
              C90782 +
          ((C2286 * C7402 -
            ((C554 * C1707 + C90634 * C2268) * C7396 +
             (C554 * C1700 + C90634 * C2264) * C7401) +
            C2287 * C90503) *
               C90485 * C13576 +
           (C21647 - (C21648 + C21649) + C21650) * C90485 * C13577 +
           (C21659 - (C21653 + C21654) + C21660) * C90485 * C13578) *
              C90777 +
          (((C554 * C4656 + C90634 * C5191) * C7401 +
            (C554 * C4663 + C90634 * C5195) * C7396 - C5208 * C7402 -
            C5209 * C90503) *
               C90485 * C13576 +
           (C18856 * C7401 + C18857 * C7396 -
            (C554 * C5470 + C90634 * C5950) * C7402 -
            (C554 * C5473 + C90634 * C5953) * C90503) *
               C90485 * C13577 +
           (C18858 * C7401 + C18859 * C7396 -
            (C554 * C17652 + C90634 * C18120) * C7402 -
            (C554 * C17656 + C90634 * C18122) * C90503) *
               C90485 * C13578) *
              C10691) *
         C90541) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C7401 +
            (C554 * C116 + C90634 * C561) * C7396 - C584 * C7402 -
            C585 * C90503) *
               C89 +
           (C584 * C7401 + C585 * C7396 - C586 * C7402 - C587 * C90503) * C90 +
           (C586 * C7401 + C587 * C7396 - C588 * C7402 - C589 * C90503) * C91) *
              C90623 * C90782 +
          ((C2286 * C7402 -
            ((C554 * C1707 + C90634 * C2268) * C7396 +
             (C554 * C1700 + C90634 * C2264) * C7401) +
            C2287 * C90503) *
               C89 +
           (C2288 * C7402 - (C2287 * C7396 + C2286 * C7401) + C2289 * C90503) *
               C90 +
           (C2290 * C7402 - (C2289 * C7396 + C2288 * C7401) + C2291 * C90503) *
               C91) *
              C90623 * C90777 +
          (((C554 * C4656 + C90634 * C5191) * C7401 +
            (C554 * C4663 + C90634 * C5195) * C7396 - C5208 * C7402 -
            C5209 * C90503) *
               C89 +
           (C5208 * C7401 + C5209 * C7396 - C5210 * C7402 - C5211 * C90503) *
               C90 +
           (C5210 * C7401 + C5211 * C7396 -
            (C554 * C4659 + C90634 * C5194) * C7402 -
            (C554 * C4667 + C90634 * C5198) * C90503) *
               C91) *
              C90623 * C10691) *
         C90541) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C26732 * C107 + C26429 * C555 + C26733 * C1700 + C26430 * C2264 +
            C26734 * C4656 + C26431 * C5191) *
               C7401 +
           (C26732 * C116 + C26429 * C561 + C26733 * C1707 + C26430 * C2268 +
            C26734 * C4663 + C26431 * C5195) *
               C7396 -
           (C26734 * C4657 + C26431 * C5192 + C26733 * C1697 + C26430 * C2263 +
            C26732 * C108 + C26429 * C556) *
               C7402 -
           (C26734 * C4664 + C26431 * C5196 + C26733 * C1706 + C26430 * C2269 +
            C26732 * C117 + C26429 * C562) *
               C90503) *
              C90485 * C90623 * C90782 +
          ((C26732 * C1697 + C26429 * C2263 + C26733 * C4657 + C26430 * C5192 +
            C26734 * C6164 + C26431 * C6504) *
               C7402 -
           ((C26734 * C6168 + C26431 * C6508 + C26733 * C4663 + C26430 * C5195 +
             C26732 * C1707 + C26429 * C2268) *
                C7396 +
            (C26734 * C6165 + C26431 * C6505 + C26733 * C4656 + C26430 * C5191 +
             C26732 * C1700 + C26429 * C2264) *
                C7401) +
           (C26732 * C1706 + C26429 * C2269 + C26733 * C4664 + C26430 * C5196 +
            C26734 * C6167 + C26431 * C6507) *
               C90503) *
              C90485 * C90623 * C90777 +
          ((C26732 * C4656 + C26429 * C5191 + C26733 * C6165 + C26430 * C6505 +
            C26734 * C30247 + C26431 * C30808) *
               C7401 +
           (C26732 * C4663 + C26429 * C5195 + C26733 * C6168 + C26430 * C6508 +
            C26734 * C30250 + C26431 * C30810) *
               C7396 -
           (C26734 * C30248 + C26431 * C30809 + C26733 * C6164 +
            C26430 * C6504 + C26732 * C4657 + C26429 * C5192) *
               C7402 -
           (C26734 * C30252 + C26431 * C30811 + C26733 * C6167 +
            C26430 * C6507 + C26732 * C4664 + C26429 * C5196) *
               C90503) *
              C90485 * C90623 * C10691) *
         C90541) /
            (p * q * std::sqrt(p + q));
    d2eezy[41] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C90634 * C555) * C181 +
                       (C554 * C182 + C90634 * C641) * C90541) *
                          C90485 * C13576 +
                      (C14614 * C181 + C14700 * C90541) * C90485 * C13577 +
                      (C14616 * C181 + C14701 * C90541) * C90485 * C13578) *
                         C7396 -
                     ((C3218 * C90541 + C3122 * C181) * C90485 * C13578 +
                      (C1518 * C90541 + C1418 * C181) * C90485 * C13577 +
                      (C664 + C648) * C90485 * C13576) *
                         C90503) *
                        C90782 +
                    (((C2371 + C2383) * C90485 * C13576 +
                      (C8771 * C181 + C8884 * C90541) * C90485 * C13577 +
                      (C21657 * C181 + C21762 * C90541) * C90485 * C13578) *
                         C90503 -
                     ((C17475 * C90541 + C17379 * C181) * C90485 * C13578 +
                      (C17474 * C90541 + C17381 * C181) * C90485 * C13577 +
                      ((C554 * C1794 + C90634 * C2368) * C90541 +
                       (C554 * C1700 + C90634 * C2264) * C181) *
                          C90485 * C13576) *
                         C7396) *
                        C90777 +
                    ((((C554 * C4656 + C90634 * C5191) * C181 +
                       (C554 * C4746 + C90634 * C5285) * C90541) *
                          C90485 * C13576 +
                      (C18856 * C181 + C18943 * C90541) * C90485 * C13577 +
                      (C18858 * C181 + C18944 * C90541) * C90485 * C13578) *
                         C7396 -
                     (((C554 * C17734 + C90634 * C18198) * C90541 +
                       (C554 * C17652 + C90634 * C18120) * C181) *
                          C90485 * C13578 +
                      ((C554 * C5556 + C90634 * C6030) * C90541 +
                       (C554 * C5470 + C90634 * C5950) * C181) *
                          C90485 * C13577 +
                      (C5298 + C5290) * C90485 * C13576) *
                         C90503) *
                        C10691)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C90634 * C555) * C181 +
                       (C554 * C182 + C90634 * C641) * C90541) *
                          C89 +
                      (C648 + C664) * C90 + C668 * C91) *
                         C90623 * C7396 -
                     (C669 * C91 + (C665 + C651) * C90 + (C664 + C648) * C89) *
                         C90623 * C90503) *
                        C90782 +
                    (((C2371 + C2383) * C89 + (C2374 + C2384) * C90 +
                      (C2377 + C2385) * C91) *
                         C90623 * C90503 -
                     (C2386 * C91 + (C2383 + C2371) * C90 +
                      ((C554 * C1794 + C90634 * C2368) * C90541 +
                       (C554 * C1700 + C90634 * C2264) * C181) *
                          C89) *
                         C90623 * C7396) *
                        C90777 +
                    ((((C554 * C4656 + C90634 * C5191) * C181 +
                       (C554 * C4746 + C90634 * C5285) * C90541) *
                          C89 +
                      (C5290 + C5298) * C90 + (C5293 + C5299) * C91) *
                         C90623 * C7396 -
                     (((C554 * C4749 + C90634 * C5288) * C90541 +
                       (C554 * C4659 + C90634 * C5194) * C181) *
                          C91 +
                      (C5299 + C5293) * C90 + (C5298 + C5290) * C89) *
                         C90623 * C90503) *
                        C10691)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C26732 * C107 + C26429 * C555 + C26733 * C1700 +
                       C26430 * C2264 + C26734 * C4656 + C26431 * C5191) *
                          C181 +
                      (C26732 * C182 + C26429 * C641 + C26733 * C1794 +
                       C26430 * C2368 + C26734 * C4746 + C26431 * C5285) *
                          C90541) *
                         C90485 * C90623 * C7396 -
                     ((C26734 * C4747 + C26431 * C5286 + C26733 * C1791 +
                       C26430 * C2365 + C26732 * C183 + C26429 * C642) *
                          C90541 +
                      (C26734 * C4657 + C26431 * C5192 + C26733 * C1697 +
                       C26430 * C2263 + C26732 * C108 + C26429 * C556) *
                          C181) *
                         C90485 * C90623 * C90503) *
                        C90782 +
                    (((C26732 * C1697 + C26429 * C2263 + C26733 * C4657 +
                       C26430 * C5192 + C26734 * C6164 + C26431 * C6504) *
                          C181 +
                      (C26732 * C1791 + C26429 * C2365 + C26733 * C4747 +
                       C26430 * C5286 + C26734 * C6226 + C26431 * C6560) *
                          C90541) *
                         C90485 * C90623 * C90503 -
                     ((C26734 * C6227 + C26431 * C6561 + C26733 * C4746 +
                       C26430 * C5285 + C26732 * C1794 + C26429 * C2368) *
                          C90541 +
                      (C26734 * C6165 + C26431 * C6505 + C26733 * C4656 +
                       C26430 * C5191 + C26732 * C1700 + C26429 * C2264) *
                          C181) *
                         C90485 * C90623 * C7396) *
                        C90777 +
                    (((C26732 * C4656 + C26429 * C5191 + C26733 * C6165 +
                       C26430 * C6505 + C26734 * C30247 + C26431 * C30808) *
                          C181 +
                      (C26732 * C4746 + C26429 * C5285 + C26733 * C6227 +
                       C26430 * C6561 + C26734 * C30357 + C26431 * C30886) *
                          C90541) *
                         C90485 * C90623 * C7396 -
                     ((C26734 * C30358 + C26431 * C30887 + C26733 * C6226 +
                       C26430 * C6560 + C26732 * C4747 + C26429 * C5286) *
                          C90541 +
                      (C26734 * C30248 + C26431 * C30809 + C26733 * C6164 +
                       C26430 * C6504 + C26732 * C4657 + C26429 * C5192) *
                          C181) *
                         C90485 * C90623 * C90503) *
                        C10691)) /
                      (p * q * std::sqrt(p + q));
    d2eezz[41] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C10840 +
            (C554 * C245 + C90634 * C719) * C90782 -
            (C554 * C1700 + C90634 * C2264) * C10841 -
            (C554 * C1879 + C90634 * C2460) * C90777 +
            (C554 * C4656 + C90634 * C5191) * C10842 +
            (C554 * C4831 + C90634 * C5373) * C10691) *
               C90485 * C13576 +
           (C14614 * C10840 + C14782 * C90782 - C17381 * C10841 -
            C17568 * C90777 + C18856 * C10842 + C19034 * C10691) *
               C90485 * C13577 +
           (C14616 * C10840 + C14783 * C90782 - C17379 * C10841 -
            C17570 * C90777 + C18858 * C10842 + C19035 * C10691) *
               C90485 * C13578) *
              C90541 * C7396 +
          ((C11302 - (C11301 + C11300) + C11303 - C11304 - C11305) * C90485 *
               C13576 +
           (C8771 * C10841 - (C1616 * C90782 + C1418 * C10840) +
            C8997 * C90777 - (C554 * C5470 + C90634 * C5950) * C10842 -
            (C554 * C5636 + C90634 * C6107) * C10691) *
               C90485 * C13577 +
           (C21657 * C10841 - (C3306 * C90782 + C3122 * C10840) +
            C21867 * C90777 - (C554 * C17652 + C90634 * C18120) * C10842 -
            (C554 * C17812 + C90634 * C18274) * C10691) *
               C90485 * C13578) *
              C90541 * C90503)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C10840 +
            (C554 * C245 + C90634 * C719) * C90782 -
            (C554 * C1700 + C90634 * C2264) * C10841 -
            (C554 * C1879 + C90634 * C2460) * C90777 +
            (C554 * C4656 + C90634 * C5191) * C10842 +
            (C554 * C4831 + C90634 * C5373) * C10691) *
               C89 +
           (C11300 + C11301 - C11302 - C11303 + C11304 + C11305) * C90 +
           (C11306 + C11307 - C11308 - C11309 + C11310 + C11311) * C91) *
              C90623 * C90541 * C7396 +
          ((C11302 - (C11301 + C11300) + C11303 - C11304 - C11305) * C89 +
           (C11308 - (C11307 + C11306) + C11309 - C11310 - C11311) * C90 +
           (C2290 * C10841 - (C740 * C90782 + C588 * C10840) + C2484 * C90777 -
            (C554 * C4659 + C90634 * C5194) * C10842 -
            (C554 * C4834 + C90634 * C5376) * C10691) *
               C91) *
              C90623 * C90541 * C90503)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C26732 * C107 + C26429 * C555 + C26733 * C1700 + C26430 * C2264 +
            C26734 * C4656 + C26431 * C5191) *
               C10840 +
           (C26732 * C245 + C26429 * C719 + C26733 * C1879 + C26430 * C2460 +
            C26734 * C4831 + C26431 * C5373) *
               C90782 -
           (C26734 * C6165 + C26431 * C6505 + C26733 * C4656 + C26430 * C5191 +
            C26732 * C1700 + C26429 * C2264) *
               C10841 -
           (C26734 * C6287 + C26431 * C6612 + C26733 * C4831 + C26430 * C5373 +
            C26732 * C1879 + C26429 * C2460) *
               C90777 +
           (C26732 * C4656 + C26429 * C5191 + C26733 * C6165 + C26430 * C6505 +
            C26734 * C30247 + C26431 * C30808) *
               C10842 +
           (C26732 * C4831 + C26429 * C5373 + C26733 * C6287 + C26430 * C6612 +
            C26734 * C30449 + C26431 * C30962) *
               C10691) *
              C90485 * C90623 * C90541 * C7396 +
          ((C26732 * C1697 + C26429 * C2263 + C26733 * C4657 + C26430 * C5192 +
            C26734 * C6164 + C26431 * C6504) *
               C10841 -
           ((C26734 * C4832 + C26431 * C5374 + C26733 * C1878 + C26430 * C2461 +
             C26732 * C246 + C26429 * C720) *
                C90782 +
            (C26734 * C4657 + C26431 * C5192 + C26733 * C1697 + C26430 * C2263 +
             C26732 * C108 + C26429 * C556) *
                C10840) +
           (C26732 * C1878 + C26429 * C2461 + C26733 * C4832 + C26430 * C5374 +
            C26734 * C6286 + C26431 * C6613) *
               C90777 -
           (C26734 * C30248 + C26431 * C30809 + C26733 * C6164 +
            C26430 * C6504 + C26732 * C4657 + C26429 * C5192) *
               C10842 -
           (C26734 * C30450 + C26431 * C30963 + C26733 * C6286 +
            C26430 * C6613 + C26732 * C4832 + C26429 * C5374) *
               C10691) *
              C90485 * C90623 * C90541 * C90503)) /
            (p * q * std::sqrt(p + q));
    d2eexx[42] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C88316 +
           (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 + C102 * C118 +
            C91 * C127) *
               C90744 -
           (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 + C100 * C108 +
            C89 * C114) *
               C88309 -
           (C102 * C120 + C91 * C128 + C101 * C118 + C90 * C127 + C100 * C117 +
            C89 * C126) *
               C90503) *
              C90623 * C90634 * C90567 * C2565 +
          ((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 + C102 * C831 +
            C91 * C836) *
               C88309 -
           ((C102 * C837 + C91 * C844 + C101 * C838 + C90 * C845 + C100 * C839 +
             C89 * C846) *
                C90744 +
            (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 + C100 * C832 +
             C89 * C840) *
                C88316) +
           (C100 * C838 + C89 * C845 + C101 * C837 + C90 * C844 + C102 * C841 +
            C91 * C847) *
               C90503) *
              C90623 * C90634 * C90567 * C2566 +
          ((C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
            C102 * C2572 + C91 * C2576) *
               C88316 +
           (C100 * C2577 + C89 * C2582 + C101 * C2578 + C90 * C2583 +
            C102 * C2579 + C91 * C2584) *
               C90744 -
           (C102 * C2573 + C91 * C2580 + C101 * C2572 + C90 * C2576 +
            C100 * C2571 + C89 * C2575) *
               C88309 -
           (C102 * C2581 + C91 * C2585 + C101 * C2579 + C90 * C2584 +
            C100 * C2578 + C89 * C2583) *
               C90503) *
              C90623 * C90634 * C90567 * C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
           C91 * C115) *
              C103 +
          (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 + C102 * C118 +
           C91 * C127) *
              C92 -
          (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 + C100 * C108 +
           C89 * C114) *
              C104 -
          (C102 * C120 + C91 * C128 + C101 * C118 + C90 * C127 + C100 * C117 +
           C89 * C126) *
              C93 +
          (C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 + C102 * C111 +
           C91 * C121) *
              C105 +
          (C100 * C118 + C89 * C127 + C101 * C120 + C90 * C128 + C102 * C122 +
           C91 * C129) *
              C94 -
          (C102 * C112 + C91 * C123 + C101 * C111 + C90 * C121 + C100 * C110 +
           C89 * C119) *
              C106 -
          (C102 * C124 + C91 * C130 + C101 * C122 + C90 * C129 + C100 * C120 +
           C89 * C128) *
              C95) *
         C90623 * C90634 * C90567 * C90541) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13579 * C107 + C90485 * C113) * C103 +
           (C13579 * C116 + C90485 * C125) * C92 -
           (C13579 * C108 + C90485 * C114) * C104 -
           (C13579 * C117 + C90485 * C126) * C93 +
           (C13579 * C109 + C90485 * C115) * C105 +
           (C13579 * C118 + C90485 * C127) * C94 -
           (C13579 * C110 + C90485 * C119) * C106 -
           (C13579 * C120 + C90485 * C128) * C95) *
              C13576 +
          ((C13579 * C832 + C90485 * C840) * C103 +
           (C13579 * C839 + C90485 * C846) * C92 -
           (C13579 * C829 + C90485 * C834) * C104 -
           (C13579 * C838 + C90485 * C845) * C93 +
           (C13579 * C830 + C90485 * C835) * C105 +
           (C13579 * C837 + C90485 * C844) * C94 -
           (C13579 * C831 + C90485 * C836) * C106 -
           (C13579 * C841 + C90485 * C847) * C95) *
              C13577 +
          ((C13579 * C2570 + C90485 * C2574) * C103 +
           (C13579 * C2577 + C90485 * C2582) * C92 -
           (C13579 * C2571 + C90485 * C2575) * C104 -
           (C13579 * C2578 + C90485 * C2583) * C93 +
           (C13579 * C2572 + C90485 * C2576) * C105 +
           (C13579 * C2579 + C90485 * C2584) * C94 -
           (C13579 * C2573 + C90485 * C2580) * C106 -
           (C13579 * C2581 + C90485 * C2585) * C95) *
              C13578) *
         C90634 * C90567 * C90541) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C88316 +
            (C13579 * C116 + C90485 * C125) * C90744 -
            (C13579 * C108 + C90485 * C114) * C88309 -
            (C13579 * C117 + C90485 * C126) * C90503) *
               C13576 +
           (C15534 + C15535 - C15536 - C15537) * C13577 + C15560 * C13578) *
              C90634 * C90567 * C2565 +
          ((C15536 - (C15535 + C15534) + C15537) * C13576 +
           (C15540 - (C15539 + C15538) + C15541) * C13577 +
           (C15556 - (C15557 + C15558) + C15559) * C13578) *
              C90634 * C90567 * C2566 +
          (C15560 * C13576 + (C15558 + C15557 - C15556 - C15559) * C13577 +
           ((C13579 * C15525 + C90485 * C15527) * C88316 +
            (C13579 * C15528 + C90485 * C15531) * C90744 -
            (C13579 * C15526 + C90485 * C15529) * C88309 -
            (C13579 * C15530 + C90485 * C15532) * C90503) *
               C13578) *
              C90634 * C90567 * C2567)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13579 * C107 + C90485 * C113) * C103 +
           (C13579 * C116 + C90485 * C125) * C92 -
           (C13579 * C108 + C90485 * C114) * C104 -
           (C13579 * C117 + C90485 * C126) * C93 +
           (C13579 * C109 + C90485 * C115) * C105 +
           (C13579 * C118 + C90485 * C127) * C94 -
           (C13579 * C110 + C90485 * C119) * C106 -
           (C13579 * C120 + C90485 * C128) * C95) *
              C90623 * C26429 +
          ((C13579 * C1700 + C90485 * C1708) * C103 +
           (C13579 * C1707 + C90485 * C1714) * C92 -
           (C13579 * C1697 + C90485 * C1702) * C104 -
           (C13579 * C1706 + C90485 * C1713) * C93 +
           (C13579 * C1698 + C90485 * C1703) * C105 +
           (C13579 * C1705 + C90485 * C1712) * C94 -
           (C13579 * C1699 + C90485 * C1704) * C106 -
           (C13579 * C1709 + C90485 * C1715) * C95) *
              C90623 * C26430 +
          ((C13579 * C4656 + C90485 * C4660) * C103 +
           (C13579 * C4663 + C90485 * C4668) * C92 -
           (C13579 * C4657 + C90485 * C4661) * C104 -
           (C13579 * C4664 + C90485 * C4669) * C93 +
           (C13579 * C4658 + C90485 * C4662) * C105 +
           (C13579 * C4665 + C90485 * C4670) * C94 -
           (C13579 * C4659 + C90485 * C4666) * C106 -
           (C13579 * C4667 + C90485 * C4671) * C95) *
              C90623 * C26431) *
         C90567 * C90541) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C88316 +
            (C13579 * C116 + C90485 * C125) * C90744 -
            (C13579 * C108 + C90485 * C114) * C88309 -
            (C13579 * C117 + C90485 * C126) * C90503) *
               C90623 * C26429 +
           (C27600 * C88316 + C27601 * C90744 - C27602 * C88309 -
            C27603 * C90503) *
               C90623 * C26430 +
           (C27606 * C88316 + C27607 * C90744 - C27608 * C88309 -
            C27609 * C90503) *
               C90623 * C26431) *
              C90567 * C2565 +
          ((C15536 - (C15535 + C15534) + C15537) * C90623 * C26429 +
           (C24209 - (C24210 + C24211) + C24212) * C90623 * C26430 +
           ((C13579 * C5470 + C90485 * C5476) * C88309 -
            (C18363 * C90744 + C18362 * C88316) +
            (C13579 * C5473 + C90485 * C5479) * C90503) *
               C90623 * C26431) *
              C90567 * C2566 +
          (C15560 * C90623 * C26429 +
           (C24215 + C24214 - C24213 - C24216) * C90623 * C26430 +
           (C18364 * C88316 + C18365 * C90744 -
            (C13579 * C17652 + C90485 * C17655) * C88309 -
            (C13579 * C17656 + C90485 * C17658) * C90503) *
               C90623 * C26431) *
              C90567 * C2567)) /
            (p * q * std::sqrt(p + q));
    d2eexy[42] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C2660 +
           (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 + C102 * C184 +
            C91 * C190) *
               C2565 -
           (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 + C100 * C832 +
            C89 * C840) *
               C2661 -
           (C102 * C925 + C91 * C930 + C101 * C926 + C90 * C931 + C100 * C927 +
            C89 * C932) *
               C2566 +
           (C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
            C102 * C2572 + C91 * C2576) *
               C2662 +
           (C100 * C2663 + C89 * C2667 + C101 * C2664 + C90 * C2668 +
            C102 * C2665 + C91 * C2669) *
               C2567) *
              C90623 * C90634 * C90744 +
          ((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 + C102 * C831 +
            C91 * C836) *
               C2661 -
           ((C102 * C185 + C91 * C191 + C101 * C184 + C90 * C190 + C100 * C183 +
             C89 * C189) *
                C2565 +
            (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 + C100 * C108 +
             C89 * C114) *
                C2660) +
           (C100 * C926 + C89 * C931 + C101 * C925 + C90 * C930 + C102 * C928 +
            C91 * C933) *
               C2566 -
           (C102 * C2573 + C91 * C2580 + C101 * C2572 + C90 * C2576 +
            C100 * C2571 + C89 * C2575) *
               C2662 -
           (C102 * C2666 + C91 * C2670 + C101 * C2665 + C90 * C2669 +
            C100 * C2664 + C89 * C2668) *
               C2567) *
              C90623 * C90634 * C90503) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C181 +
           (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 + C102 * C184 +
            C91 * C190) *
               C90541) *
              C90623 * C90634 * C92 -
          ((C102 * C185 + C91 * C191 + C101 * C184 + C90 * C190 + C100 * C183 +
            C89 * C189) *
               C90541 +
           (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 + C100 * C108 +
            C89 * C114) *
               C181) *
              C90623 * C90634 * C93 +
          ((C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 + C102 * C111 +
            C91 * C121) *
               C181 +
           (C100 * C184 + C89 * C190 + C101 * C185 + C90 * C191 + C102 * C186 +
            C91 * C192) *
               C90541) *
              C90623 * C90634 * C94 -
          ((C102 * C187 + C91 * C193 + C101 * C186 + C90 * C192 + C100 * C185 +
            C89 * C191) *
               C90541 +
           (C102 * C112 + C91 * C123 + C101 * C111 + C90 * C121 + C100 * C110 +
            C89 * C119) *
               C181) *
              C90623 * C90634 * C95) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C181 +
            (C13579 * C182 + C90485 * C188) * C90541) *
               C13576 +
           ((C13579 * C832 + C90485 * C840) * C181 +
            (C13579 * C927 + C90485 * C932) * C90541) *
               C13577 +
           ((C13579 * C2570 + C90485 * C2574) * C181 +
            (C13579 * C2663 + C90485 * C2667) * C90541) *
               C13578) *
              C90634 * C92 -
          (((C13579 * C2664 + C90485 * C2668) * C90541 +
            (C13579 * C2571 + C90485 * C2575) * C181) *
               C13578 +
           ((C13579 * C926 + C90485 * C931) * C90541 +
            (C13579 * C829 + C90485 * C834) * C181) *
               C13577 +
           ((C13579 * C183 + C90485 * C189) * C90541 +
            (C13579 * C108 + C90485 * C114) * C181) *
               C13576) *
              C90634 * C93 +
          (((C13579 * C109 + C90485 * C115) * C181 +
            (C13579 * C184 + C90485 * C190) * C90541) *
               C13576 +
           ((C13579 * C830 + C90485 * C835) * C181 +
            (C13579 * C925 + C90485 * C930) * C90541) *
               C13577 +
           ((C13579 * C2572 + C90485 * C2576) * C181 +
            (C13579 * C2665 + C90485 * C2669) * C90541) *
               C13578) *
              C90634 * C94 -
          (((C13579 * C2666 + C90485 * C2670) * C90541 +
            (C13579 * C2573 + C90485 * C2580) * C181) *
               C13578 +
           ((C13579 * C928 + C90485 * C933) * C90541 +
            (C13579 * C831 + C90485 * C836) * C181) *
               C13577 +
           ((C13579 * C185 + C90485 * C191) * C90541 +
            (C13579 * C110 + C90485 * C119) * C181) *
               C13576) *
              C90634 * C95) *
         C90567) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C2660 +
            (C13579 * C182 + C90485 * C188) * C2565 - C14082 * C2661 -
            C14192 * C2566 + C14088 * C2662 + C14193 * C2567) *
               C13576 +
           (C14082 * C2660 + C14192 * C2565 - C14088 * C2661 - C14193 * C2566 +
            C15553 * C2662 + C15643 * C2567) *
               C13577 +
           (C14088 * C2660 + C14193 * C2565 - C15553 * C2661 - C15643 * C2566 +
            (C13579 * C15525 + C90485 * C15527) * C2662 +
            (C13579 * C15634 + C90485 * C15636) * C2567) *
               C13578) *
              C90634 * C90744 +
          ((C14084 * C2661 -
            ((C13579 * C183 + C90485 * C189) * C2565 +
             (C13579 * C108 + C90485 * C114) * C2660) +
            C14194 * C2566 - C14090 * C2662 - C14195 * C2567) *
               C13576 +
           (C14090 * C2661 - (C14194 * C2565 + C14084 * C2660) +
            C14195 * C2566 - C15551 * C2662 - C15644 * C2567) *
               C13577 +
           (C15551 * C2661 - (C14195 * C2565 + C14090 * C2660) +
            C15644 * C2566 - (C13579 * C15526 + C90485 * C15529) * C2662 -
            (C13579 * C15635 + C90485 * C15637) * C2567) *
               C13578) *
              C90634 * C90503) *
         C90567) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C181 +
            (C13579 * C182 + C90485 * C188) * C90541) *
               C90623 * C26429 +
           ((C13579 * C1700 + C90485 * C1708) * C181 +
            (C13579 * C1794 + C90485 * C1799) * C90541) *
               C90623 * C26430 +
           ((C13579 * C4656 + C90485 * C4660) * C181 +
            (C13579 * C4746 + C90485 * C4750) * C90541) *
               C90623 * C26431) *
              C92 -
          (((C13579 * C4747 + C90485 * C4751) * C90541 +
            (C13579 * C4657 + C90485 * C4661) * C181) *
               C90623 * C26431 +
           ((C13579 * C1791 + C90485 * C1796) * C90541 +
            (C13579 * C1697 + C90485 * C1702) * C181) *
               C90623 * C26430 +
           ((C13579 * C183 + C90485 * C189) * C90541 +
            (C13579 * C108 + C90485 * C114) * C181) *
               C90623 * C26429) *
              C93 +
          (((C13579 * C109 + C90485 * C115) * C181 +
            (C13579 * C184 + C90485 * C190) * C90541) *
               C90623 * C26429 +
           ((C13579 * C1698 + C90485 * C1703) * C181 +
            (C13579 * C1792 + C90485 * C1797) * C90541) *
               C90623 * C26430 +
           ((C13579 * C4658 + C90485 * C4662) * C181 +
            (C13579 * C4748 + C90485 * C4752) * C90541) *
               C90623 * C26431) *
              C94 -
          (((C13579 * C4749 + C90485 * C4753) * C90541 +
            (C13579 * C4659 + C90485 * C4666) * C181) *
               C90623 * C26431 +
           ((C13579 * C1793 + C90485 * C1798) * C90541 +
            (C13579 * C1699 + C90485 * C1704) * C181) *
               C90623 * C26430 +
           ((C13579 * C185 + C90485 * C191) * C90541 +
            (C13579 * C110 + C90485 * C119) * C181) *
               C90623 * C26429) *
              C95) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C2660 +
            (C13579 * C182 + C90485 * C188) * C2565 - C14082 * C2661 -
            C14192 * C2566 + C14088 * C2662 + C14193 * C2567) *
               C90623 * C26429 +
           (C27600 * C2660 + C27716 * C2565 - C16859 * C2661 - C16953 * C2566 +
            C16857 * C2662 + C16954 * C2567) *
               C90623 * C26430 +
           (C27606 * C2660 + C27717 * C2565 - C18362 * C2661 - C18450 * C2566 +
            C18364 * C2662 + C18451 * C2567) *
               C90623 * C26431) *
              C90744 +
          ((C14084 * C2661 -
            ((C13579 * C183 + C90485 * C189) * C2565 +
             (C13579 * C108 + C90485 * C114) * C2660) +
            C14194 * C2566 - C14090 * C2662 - C14195 * C2567) *
               C90623 * C26429 +
           (C21021 * C2661 - (C27719 * C2565 + C27602 * C2660) +
            C21133 * C2566 - C21023 * C2662 - C21134 * C2567) *
               C90623 * C26430 +
           ((C13579 * C5470 + C90485 * C5476) * C2661 -
            (C27718 * C2565 + C27608 * C2660) +
            (C13579 * C5556 + C90485 * C5559) * C2566 -
            (C13579 * C17652 + C90485 * C17655) * C2662 -
            (C13579 * C17734 + C90485 * C17736) * C2567) *
               C90623 * C26431) *
              C90503) *
         C90567) /
            (p * q * std::sqrt(p + q));
    d2eexz[42] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                       C102 * C109 + C91 * C115) *
                          C244 +
                      (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 +
                       C102 * C247 + C91 * C253) *
                          C90567) *
                         C90623 * C90634 * C2565 -
                     ((C102 * C1009 + C91 * C1014 + C101 * C1010 + C90 * C1015 +
                       C100 * C1011 + C89 * C1016) *
                          C90567 +
                      (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                       C100 * C832 + C89 * C840) *
                          C244) *
                         C90623 * C90634 * C2566 +
                     ((C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
                       C102 * C2572 + C91 * C2576) *
                          C244 +
                      (C100 * C2745 + C89 * C2749 + C101 * C2746 + C90 * C2750 +
                       C102 * C2747 + C91 * C2751) *
                          C90567) *
                         C90623 * C90634 * C2567) *
                        C90744 +
                    (((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 +
                       C102 * C831 + C91 * C836) *
                          C244 +
                      (C100 * C1010 + C89 * C1015 + C101 * C1009 + C90 * C1014 +
                       C102 * C1012 + C91 * C1017) *
                          C90567) *
                         C90623 * C90634 * C2566 -
                     ((C102 * C248 + C91 * C254 + C101 * C247 + C90 * C253 +
                       C100 * C246 + C89 * C252) *
                          C90567 +
                      (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                       C100 * C108 + C89 * C114) *
                          C244) *
                         C90623 * C90634 * C2565 -
                     ((C102 * C2748 + C91 * C2752 + C101 * C2747 + C90 * C2751 +
                       C100 * C2746 + C89 * C2750) *
                          C90567 +
                      (C102 * C2573 + C91 * C2580 + C101 * C2572 + C90 * C2576 +
                       C100 * C2571 + C89 * C2575) *
                          C244) *
                         C90623 * C90634 * C2567) *
                        C90503)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                      C102 * C109 + C91 * C115) *
                         C244 +
                     (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 +
                      C102 * C247 + C91 * C253) *
                         C90567) *
                        C90623 * C90634 * C90541 * C92 -
                    ((C102 * C248 + C91 * C254 + C101 * C247 + C90 * C253 +
                      C100 * C246 + C89 * C252) *
                         C90567 +
                     (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                      C100 * C108 + C89 * C114) *
                         C244) *
                        C90623 * C90634 * C90541 * C93 +
                    ((C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 +
                      C102 * C111 + C91 * C121) *
                         C244 +
                     (C100 * C247 + C89 * C253 + C101 * C248 + C90 * C254 +
                      C102 * C249 + C91 * C255) *
                         C90567) *
                        C90623 * C90634 * C90541 * C94 -
                    ((C102 * C250 + C91 * C256 + C101 * C249 + C90 * C255 +
                      C100 * C248 + C89 * C254) *
                         C90567 +
                     (C102 * C112 + C91 * C123 + C101 * C111 + C90 * C121 +
                      C100 * C110 + C89 * C119) *
                         C244) *
                        C90623 * C90634 * C90541 * C95)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C13579 * C107 + C90485 * C113) * C244 +
                      (C13579 * C245 + C90485 * C251) * C90567) *
                         C13576 +
                     ((C13579 * C832 + C90485 * C840) * C244 +
                      (C13579 * C1011 + C90485 * C1016) * C90567) *
                         C13577 +
                     ((C13579 * C2570 + C90485 * C2574) * C244 +
                      (C13579 * C2745 + C90485 * C2749) * C90567) *
                         C13578) *
                        C90634 * C90541 * C92 -
                    (((C13579 * C2746 + C90485 * C2750) * C90567 +
                      (C13579 * C2571 + C90485 * C2575) * C244) *
                         C13578 +
                     ((C13579 * C1010 + C90485 * C1015) * C90567 +
                      (C13579 * C829 + C90485 * C834) * C244) *
                         C13577 +
                     ((C13579 * C246 + C90485 * C252) * C90567 +
                      (C13579 * C108 + C90485 * C114) * C244) *
                         C13576) *
                        C90634 * C90541 * C93 +
                    (((C13579 * C109 + C90485 * C115) * C244 +
                      (C13579 * C247 + C90485 * C253) * C90567) *
                         C13576 +
                     ((C13579 * C830 + C90485 * C835) * C244 +
                      (C13579 * C1009 + C90485 * C1014) * C90567) *
                         C13577 +
                     ((C13579 * C2572 + C90485 * C2576) * C244 +
                      (C13579 * C2747 + C90485 * C2751) * C90567) *
                         C13578) *
                        C90634 * C90541 * C94 -
                    (((C13579 * C2748 + C90485 * C2752) * C90567 +
                      (C13579 * C2573 + C90485 * C2580) * C244) *
                         C13578 +
                     ((C13579 * C1012 + C90485 * C1017) * C90567 +
                      (C13579 * C831 + C90485 * C836) * C244) *
                         C13577 +
                     ((C13579 * C248 + C90485 * C254) * C90567 +
                      (C13579 * C110 + C90485 * C119) * C244) *
                         C13576) *
                        C90634 * C90541 * C95)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   (((((C13579 * C107 + C90485 * C113) * C244 +
                       (C13579 * C245 + C90485 * C251) * C90567) *
                          C13576 +
                      (C14272 + C14296) * C13577 + C15723 * C13578) *
                         C90634 * C2565 -
                     ((C15733 + C15726) * C13578 + (C14297 + C14275) * C13577 +
                      (C14296 + C14272) * C13576) *
                         C90634 * C2566 +
                     (C15723 * C13576 + (C15726 + C15733) * C13577 +
                      ((C13579 * C15525 + C90485 * C15527) * C244 +
                       (C13579 * C15718 + C90485 * C15720) * C90567) *
                          C13578) *
                         C90634 * C2567) *
                        C90744 +
                    (((C14278 + C14298) * C13576 + (C14281 + C14299) * C13577 +
                      (C15727 + C15734) * C13578) *
                         C90634 * C2566 -
                     (C15730 * C13578 + (C14298 + C14278) * C13577 +
                      ((C13579 * C246 + C90485 * C252) * C90567 +
                       (C13579 * C108 + C90485 * C114) * C244) *
                          C13576) *
                         C90634 * C2565 -
                     (((C13579 * C15719 + C90485 * C15721) * C90567 +
                       (C13579 * C15526 + C90485 * C15529) * C244) *
                          C13578 +
                      (C15734 + C15727) * C13577 + C15730 * C13576) *
                         C90634 * C2567) *
                        C90503)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C13579 * C107 + C90485 * C113) * C244 +
                      (C13579 * C245 + C90485 * C251) * C90567) *
                         C90623 * C26429 +
                     ((C13579 * C1700 + C90485 * C1708) * C244 +
                      (C13579 * C1879 + C90485 * C1884) * C90567) *
                         C90623 * C26430 +
                     ((C13579 * C4656 + C90485 * C4660) * C244 +
                      (C13579 * C4831 + C90485 * C4835) * C90567) *
                         C90623 * C26431) *
                        C90541 * C92 -
                    (((C13579 * C4832 + C90485 * C4836) * C90567 +
                      (C13579 * C4657 + C90485 * C4661) * C244) *
                         C90623 * C26431 +
                     ((C13579 * C1878 + C90485 * C1883) * C90567 +
                      (C13579 * C1697 + C90485 * C1702) * C244) *
                         C90623 * C26430 +
                     ((C13579 * C246 + C90485 * C252) * C90567 +
                      (C13579 * C108 + C90485 * C114) * C244) *
                         C90623 * C26429) *
                        C90541 * C93 +
                    (((C13579 * C109 + C90485 * C115) * C244 +
                      (C13579 * C247 + C90485 * C253) * C90567) *
                         C90623 * C26429 +
                     ((C13579 * C1698 + C90485 * C1703) * C244 +
                      (C13579 * C1877 + C90485 * C1882) * C90567) *
                         C90623 * C26430 +
                     ((C13579 * C4658 + C90485 * C4662) * C244 +
                      (C13579 * C4833 + C90485 * C4837) * C90567) *
                         C90623 * C26431) *
                        C90541 * C94 -
                    (((C13579 * C4834 + C90485 * C4838) * C90567 +
                      (C13579 * C4659 + C90485 * C4666) * C244) *
                         C90623 * C26431 +
                     ((C13579 * C1880 + C90485 * C1885) * C90567 +
                      (C13579 * C1699 + C90485 * C1704) * C244) *
                         C90623 * C26430 +
                     ((C13579 * C248 + C90485 * C254) * C90567 +
                      (C13579 * C110 + C90485 * C119) * C244) *
                         C90623 * C26429) *
                        C90541 * C95)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C13579 * C107 + C90485 * C113) * C244 +
                       (C13579 * C245 + C90485 * C251) * C90567) *
                          C90623 * C26429 +
                      (C27600 * C244 + C27814 * C90567) * C90623 * C26430 +
                      (C27606 * C244 + C27815 * C90567) * C90623 * C26431) *
                         C2565 -
                     ((C18542 * C90567 + C18362 * C244) * C90623 * C26431 +
                      (C17049 * C90567 + C16859 * C244) * C90623 * C26430 +
                      (C14296 + C14272) * C90623 * C26429) *
                         C2566 +
                     (C15723 * C90623 * C26429 +
                      (C16857 * C244 + C17051 * C90567) * C90623 * C26430 +
                      (C18364 * C244 + C18543 * C90567) * C90623 * C26431) *
                         C2567) *
                        C90744 +
                    (((C14278 + C14298) * C90623 * C26429 +
                      (C21021 * C244 + C21245 * C90567) * C90623 * C26430 +
                      ((C13579 * C5470 + C90485 * C5476) * C244 +
                       (C13579 * C5636 + C90485 * C5639) * C90567) *
                          C90623 * C26431) *
                         C2566 -
                     ((C27817 * C90567 + C27608 * C244) * C90623 * C26431 +
                      (C27816 * C90567 + C27602 * C244) * C90623 * C26430 +
                      ((C13579 * C246 + C90485 * C252) * C90567 +
                       (C13579 * C108 + C90485 * C114) * C244) *
                          C90623 * C26429) *
                         C2565 -
                     (((C13579 * C17812 + C90485 * C17814) * C90567 +
                       (C13579 * C17652 + C90485 * C17655) * C244) *
                          C90623 * C26431 +
                      (C21246 * C90567 + C21023 * C244) * C90623 * C26430 +
                      C15730 * C90623 * C26429) *
                         C2567) *
                        C90503)) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[42] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C88316 +
            (C307 * C116 + C90623 * C314) * C90744 - C337 * C88309 -
            C338 * C90503) *
               C90634 * C89 +
           (C337 * C88316 + C338 * C90744 - C339 * C88309 - C340 * C90503) *
               C90634 * C90 +
           (C339 * C88316 + C340 * C90744 - C341 * C88309 - C342 * C90503) *
               C90634 * C91) *
              C90567 * C2565 +
          ((C1116 * C88309 -
            ((C307 * C839 + C90623 * C1098) * C90744 +
             (C307 * C832 + C90623 * C1094) * C88316) +
            C1117 * C90503) *
               C90634 * C89 +
           (C1118 * C88309 - (C1117 * C90744 + C1116 * C88316) +
            C1119 * C90503) *
               C90634 * C90 +
           (C1120 * C88309 - (C1119 * C90744 + C1118 * C88316) +
            C1121 * C90503) *
               C90634 * C91) *
              C90567 * C2566 +
          (((C307 * C2570 + C90623 * C2827) * C88316 +
            (C307 * C2577 + C90623 * C2831) * C90744 - C2844 * C88309 -
            C2845 * C90503) *
               C90634 * C89 +
           (C2844 * C88316 + C2845 * C90744 - C2846 * C88309 - C2847 * C90503) *
               C90634 * C90 +
           (C2846 * C88316 + C2847 * C90744 -
            (C307 * C2573 + C90623 * C2830) * C88309 -
            (C307 * C2581 + C90623 * C2834) * C90503) *
               C90634 * C91) *
              C90567 * C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C307 * C107 + C90623 * C308) * C103 +
           (C307 * C116 + C90623 * C314) * C92 - C337 * C104 - C338 * C93 +
           C339 * C105 + C340 * C94 - C341 * C106 - C342 * C95) *
              C90634 * C89 +
          (C337 * C103 + C338 * C92 - C339 * C104 - C340 * C93 + C341 * C105 +
           C342 * C94 - C343 * C106 - C344 * C95) *
              C90634 * C90 +
          (C339 * C103 + C340 * C92 - C341 * C104 - C342 * C93 + C343 * C105 +
           C344 * C94 - (C307 * C112 + C90623 * C313) * C106 -
           (C307 * C124 + C90623 * C319) * C95) *
              C90634 * C91) *
         C90567 * C90541) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
           C13732 * C2570 + C13578 * C2827) *
              C103 +
          (C13730 * C116 + C13576 * C314 + C13731 * C839 + C13577 * C1098 +
           C13732 * C2577 + C13578 * C2831) *
              C92 -
          (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
           C13730 * C108 + C13576 * C309) *
              C104 -
          (C13732 * C2578 + C13578 * C2832 + C13731 * C838 + C13577 * C1099 +
           C13730 * C117 + C13576 * C315) *
              C93 +
          (C13730 * C109 + C13576 * C310 + C13731 * C830 + C13577 * C1095 +
           C13732 * C2572 + C13578 * C2829) *
              C105 +
          (C13730 * C118 + C13576 * C316 + C13731 * C837 + C13577 * C1100 +
           C13732 * C2579 + C13578 * C2833) *
              C94 -
          (C13732 * C2573 + C13578 * C2830 + C13731 * C831 + C13577 * C1096 +
           C13730 * C110 + C13576 * C311) *
              C106 -
          (C13732 * C2581 + C13578 * C2834 + C13731 * C841 + C13577 * C1101 +
           C13730 * C120 + C13576 * C317) *
              C95) *
         C90634 * C90485 * C90567 * C90541) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C88316 +
           (C13730 * C116 + C13576 * C314 + C13731 * C839 + C13577 * C1098 +
            C13732 * C2577 + C13578 * C2831) *
               C90744 -
           (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
            C13730 * C108 + C13576 * C309) *
               C88309 -
           (C13732 * C2578 + C13578 * C2832 + C13731 * C838 + C13577 * C1099 +
            C13730 * C117 + C13576 * C315) *
               C90503) *
              C90634 * C90485 * C90567 * C2565 +
          ((C13730 * C829 + C13576 * C1093 + C13731 * C2571 + C13577 * C2828 +
            C13732 * C3366 + C13578 * C3544) *
               C88309 -
           ((C13732 * C3370 + C13578 * C3548 + C13731 * C2577 + C13577 * C2831 +
             C13730 * C839 + C13576 * C1098) *
                C90744 +
            (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
             C13730 * C832 + C13576 * C1094) *
                C88316) +
           (C13730 * C838 + C13576 * C1099 + C13731 * C2578 + C13577 * C2832 +
            C13732 * C3369 + C13578 * C3547) *
               C90503) *
              C90634 * C90485 * C90567 * C2566 +
          ((C13730 * C2570 + C13576 * C2827 + C13731 * C3367 + C13577 * C3545 +
            C13732 * C15525 + C13578 * C15808) *
               C88316 +
           (C13730 * C2577 + C13576 * C2831 + C13731 * C3370 + C13577 * C3548 +
            C13732 * C15528 + C13578 * C15810) *
               C90744 -
           (C13732 * C15526 + C13578 * C15809 + C13731 * C3366 +
            C13577 * C3544 + C13730 * C2571 + C13576 * C2828) *
               C88309 -
           (C13732 * C15530 + C13578 * C15811 + C13731 * C3369 +
            C13577 * C3547 + C13730 * C2578 + C13576 * C2832) *
               C90503) *
              C90634 * C90485 * C90567 * C2567)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C307 * C107 + C90623 * C308) * C103 +
           (C307 * C116 + C90623 * C314) * C92 - C337 * C104 - C338 * C93 +
           C339 * C105 + C340 * C94 - C341 * C106 - C342 * C95) *
              C26429 +
          ((C307 * C1700 + C90623 * C1962) * C103 +
           (C307 * C1707 + C90623 * C1966) * C92 - C1984 * C104 - C1985 * C93 +
           C1986 * C105 + C1987 * C94 - C1988 * C106 - C1989 * C95) *
              C26430 +
          ((C307 * C4656 + C90623 * C4913) * C103 +
           (C307 * C4663 + C90623 * C4917) * C92 - C4930 * C104 - C4931 * C93 +
           C4932 * C105 + C4933 * C94 - (C307 * C4659 + C90623 * C4916) * C106 -
           (C307 * C4667 + C90623 * C4920) * C95) *
              C26431) *
         C90485 * C90567 * C90541) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C88316 +
            (C307 * C116 + C90623 * C314) * C90744 - C337 * C88309 -
            C338 * C90503) *
               C26429 +
           (C27910 * C88316 + C27911 * C90744 - C1984 * C88309 -
            C1985 * C90503) *
               C26430 +
           (C27912 * C88316 + C27913 * C90744 - C4930 * C88309 -
            C4931 * C90503) *
               C26431) *
              C90485 * C90567 * C2565 +
          ((C1116 * C88309 -
            ((C307 * C839 + C90623 * C1098) * C90744 +
             (C307 * C832 + C90623 * C1094) * C88316) +
            C1117 * C90503) *
               C26429 +
           (C8433 * C88309 -
            ((C307 * C3900 + C90623 * C4167) * C90744 +
             (C307 * C3891 + C90623 * C4161) * C88316) +
            C8434 * C90503) *
               C26430 +
           ((C307 * C5470 + C90623 * C5716) * C88309 -
            ((C307 * C5474 + C90623 * C5720) * C90744 +
             (C307 * C5471 + C90623 * C5717) * C88316) +
            (C307 * C5473 + C90623 * C5719) * C90503) *
               C26431) *
              C90485 * C90567 * C2566 +
          (((C307 * C2570 + C90623 * C2827) * C88316 +
            (C307 * C2577 + C90623 * C2831) * C90744 - C2844 * C88309 -
            C2845 * C90503) *
               C26429 +
           ((C307 * C3896 + C90623 * C4166) * C88316 +
            (C307 * C3905 + C90623 * C4172) * C90744 -
            (C307 * C3895 + C90623 * C4165) * C88309 -
            (C307 * C3904 + C90623 * C4171) * C90503) *
               C26430 +
           ((C307 * C17651 + C90623 * C17889) * C88316 +
            (C307 * C17654 + C90623 * C17891) * C90744 -
            (C307 * C17652 + C90623 * C17890) * C88309 -
            (C307 * C17656 + C90623 * C17892) * C90503) *
               C26431) *
              C90485 * C90567 * C2567)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[42] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C2660 +
            (C307 * C182 + C90623 * C394) * C2565 -
            (C307 * C832 + C90623 * C1094) * C2661 -
            (C307 * C927 + C90623 * C1195) * C2566 +
            (C307 * C2570 + C90623 * C2827) * C2662 +
            (C307 * C2663 + C90623 * C2921) * C2567) *
               C90634 * C89 +
           (C2926 + C2927 - C2928 - C2929 + C2930 + C2942) * C90634 * C90 +
           (C2933 + C2934 - C2935 - C2936 + C2937 + C2943) * C90634 * C91) *
              C90744 +
          ((C2928 - (C2927 + C2926) + C2929 - C2930 - C2942) * C90634 * C89 +
           (C2935 - (C2934 + C2933) + C2936 - C2937 - C2943) * C90634 * C90 +
           (C1120 * C2661 - (C415 * C2565 + C341 * C2660) + C1219 * C2566 -
            (C307 * C2573 + C90623 * C2830) * C2662 -
            (C307 * C2666 + C90623 * C2924) * C2567) *
               C90634 * C91) *
              C90503) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C181 +
            (C307 * C182 + C90623 * C394) * C90541) *
               C90634 * C89 +
           (C401 + C417) * C90634 * C90 + C423 * C91) *
              C92 -
          (C424 * C91 + (C418 + C404) * C90634 * C90 +
           (C417 + C401) * C90634 * C89) *
              C93 +
          (C423 * C89 + (C409 + C419) * C90634 * C90 +
           (C410 + C420) * C90634 * C91) *
              C94 -
          (((C307 * C187 + C90623 * C399) * C90541 +
            (C307 * C112 + C90623 * C313) * C181) *
               C90634 * C91 +
           (C420 + C410) * C90634 * C90 + C424 * C89) *
              C95) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C181 +
           (C13730 * C182 + C13576 * C394 + C13731 * C927 + C13577 * C1195 +
            C13732 * C2663 + C13578 * C2921) *
               C90541) *
              C90634 * C90485 * C92 -
          ((C13732 * C2664 + C13578 * C2922 + C13731 * C926 + C13577 * C1196 +
            C13730 * C183 + C13576 * C395) *
               C90541 +
           (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
            C13730 * C108 + C13576 * C309) *
               C181) *
              C90634 * C90485 * C93 +
          ((C13730 * C109 + C13576 * C310 + C13731 * C830 + C13577 * C1095 +
            C13732 * C2572 + C13578 * C2829) *
               C181 +
           (C13730 * C184 + C13576 * C396 + C13731 * C925 + C13577 * C1197 +
            C13732 * C2665 + C13578 * C2923) *
               C90541) *
              C90634 * C90485 * C94 -
          ((C13732 * C2666 + C13578 * C2924 + C13731 * C928 + C13577 * C1198 +
            C13730 * C185 + C13576 * C397) *
               C90541 +
           (C13732 * C2573 + C13578 * C2830 + C13731 * C831 + C13577 * C1096 +
            C13730 * C110 + C13576 * C311) *
               C181) *
              C90634 * C90485 * C95) *
         C90567) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C2660 +
           (C13730 * C182 + C13576 * C394 + C13731 * C927 + C13577 * C1195 +
            C13732 * C2663 + C13578 * C2921) *
               C2565 -
           (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
            C13730 * C832 + C13576 * C1094) *
               C2661 -
           (C13732 * C3433 + C13578 * C3599 + C13731 * C2663 + C13577 * C2921 +
            C13730 * C927 + C13576 * C1195) *
               C2566 +
           (C13730 * C2570 + C13576 * C2827 + C13731 * C3367 + C13577 * C3545 +
            C13732 * C15525 + C13578 * C15808) *
               C2662 +
           (C13730 * C2663 + C13576 * C2921 + C13731 * C3433 + C13577 * C3599 +
            C13732 * C15634 + C13578 * C15886) *
               C2567) *
              C90634 * C90485 * C90744 +
          ((C13730 * C829 + C13576 * C1093 + C13731 * C2571 + C13577 * C2828 +
            C13732 * C3366 + C13578 * C3544) *
               C2661 -
           ((C13732 * C2664 + C13578 * C2922 + C13731 * C926 + C13577 * C1196 +
             C13730 * C183 + C13576 * C395) *
                C2565 +
            (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
             C13730 * C108 + C13576 * C309) *
                C2660) +
           (C13730 * C926 + C13576 * C1196 + C13731 * C2664 + C13577 * C2922 +
            C13732 * C3432 + C13578 * C3600) *
               C2566 -
           (C13732 * C15526 + C13578 * C15809 + C13731 * C3366 +
            C13577 * C3544 + C13730 * C2571 + C13576 * C2828) *
               C2662 -
           (C13732 * C15635 + C13578 * C15887 + C13731 * C3432 +
            C13577 * C3600 + C13730 * C2664 + C13576 * C2922) *
               C2567) *
              C90634 * C90485 * C90503) *
         C90567) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C181 +
            (C307 * C182 + C90623 * C394) * C90541) *
               C26429 +
           ((C307 * C1700 + C90623 * C1962) * C181 +
            (C307 * C1794 + C90623 * C2066) * C90541) *
               C26430 +
           ((C307 * C4656 + C90623 * C4913) * C181 +
            (C307 * C4746 + C90623 * C5007) * C90541) *
               C26431) *
              C90485 * C92 -
          ((C5020 + C5012) * C26431 + (C2081 + C2069) * C26430 +
           (C417 + C401) * C26429) *
              C90485 * C93 +
          (C421 * C26429 + (C2072 + C2082) * C26430 +
           (C5015 + C5021) * C26431) *
              C90485 * C94 -
          (((C307 * C4749 + C90623 * C5010) * C90541 +
            (C307 * C4659 + C90623 * C4916) * C181) *
               C26431 +
           (C2083 + C2075) * C26430 + C422 * C26429) *
              C90485 * C95) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C2660 +
            (C307 * C182 + C90623 * C394) * C2565 -
            (C307 * C832 + C90623 * C1094) * C2661 -
            (C307 * C927 + C90623 * C1195) * C2566 +
            (C307 * C2570 + C90623 * C2827) * C2662 +
            (C307 * C2663 + C90623 * C2921) * C2567) *
               C26429 +
           (C27910 * C2660 + C27998 * C2565 -
            (C307 * C3891 + C90623 * C4161) * C2661 -
            (C307 * C3989 + C90623 * C4247) * C2566 +
            (C307 * C3896 + C90623 * C4166) * C2662 +
            (C307 * C3994 + C90623 * C4248) * C2567) *
               C26430 +
           (C27912 * C2660 + C27999 * C2565 -
            (C307 * C5471 + C90623 * C5717) * C2661 -
            (C307 * C5557 + C90623 * C5795) * C2566 +
            (C307 * C17651 + C90623 * C17889) * C2662 +
            (C307 * C17733 + C90623 * C17967) * C2567) *
               C26431) *
              C90485 * C90744 +
          ((C2928 - (C2927 + C2926) + C2929 - C2930 - C2942) * C26429 +
           (C8433 * C2661 - (C2078 * C2565 + C1984 * C2660) + C8546 * C2566 -
            (C307 * C3895 + C90623 * C4165) * C2662 -
            (C307 * C3993 + C90623 * C4250) * C2567) *
               C26430 +
           ((C307 * C5470 + C90623 * C5716) * C2661 -
            (C5018 * C2565 + C4930 * C2660) +
            (C307 * C5556 + C90623 * C5796) * C2566 -
            (C307 * C17652 + C90623 * C17890) * C2662 -
            (C307 * C17734 + C90623 * C17968) * C2567) *
               C26431) *
              C90485 * C90503) *
         C90567) /
            (p * q * std::sqrt(p + q));
    d2eeyz[42] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C244 +
             (C307 * C245 + C90623 * C474) * C90567) *
                C90634 * C89 +
            (C481 + C497) * C90634 * C90 + C503 * C91) *
               C2565 -
           (C1321 * C91 + (C1318 + C1310) * C90634 * C90 +
            ((C307 * C1011 + C90623 * C1301) * C90567 +
             (C307 * C832 + C90623 * C1094) * C244) *
                C90634 * C89) *
               C2566 +
           (((C307 * C2570 + C90623 * C2827) * C244 +
             (C307 * C2745 + C90623 * C3017) * C90567) *
                C90634 * C89 +
            (C3022 + C3030) * C90634 * C90 + (C3025 + C3031) * C90634 * C91) *
               C2567) *
              C90744 +
          (((C1310 + C1318) * C90634 * C89 + (C1307 + C1317) * C90634 * C90 +
            (C1311 + C1319) * C90634 * C91) *
               C2566 -
           (C504 * C91 + (C498 + C484) * C90634 * C90 +
            (C497 + C481) * C90634 * C89) *
               C2565 -
           (((C307 * C2748 + C90623 * C3020) * C90567 +
             (C307 * C2573 + C90623 * C2830) * C244) *
                C90634 * C91 +
            (C3031 + C3025) * C90634 * C90 + (C3030 + C3022) * C90634 * C89) *
               C2567) *
              C90503)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C244 +
            (C307 * C245 + C90623 * C474) * C90567) *
               C90634 * C89 +
           (C481 + C497) * C90634 * C90 + C503 * C91) *
              C90541 * C92 -
          (C504 * C91 + (C498 + C484) * C90634 * C90 +
           (C497 + C481) * C90634 * C89) *
              C90541 * C93 +
          (C503 * C89 + (C489 + C499) * C90634 * C90 +
           (C490 + C500) * C90634 * C91) *
              C90541 * C94 -
          (((C307 * C250 + C90623 * C479) * C90567 +
            (C307 * C112 + C90623 * C313) * C244) *
               C90634 * C91 +
           (C500 + C490) * C90634 * C90 + C504 * C89) *
              C90541 * C95)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C244 +
           (C13730 * C245 + C13576 * C474 + C13731 * C1011 + C13577 * C1301 +
            C13732 * C2745 + C13578 * C3017) *
               C90567) *
              C90634 * C90485 * C90541 * C92 -
          ((C13732 * C2746 + C13578 * C3018 + C13731 * C1010 + C13577 * C1300 +
            C13730 * C246 + C13576 * C475) *
               C90567 +
           (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
            C13730 * C108 + C13576 * C309) *
               C244) *
              C90634 * C90485 * C90541 * C93 +
          ((C13730 * C109 + C13576 * C310 + C13731 * C830 + C13577 * C1095 +
            C13732 * C2572 + C13578 * C2829) *
               C244 +
           (C13730 * C247 + C13576 * C476 + C13731 * C1009 + C13577 * C1299 +
            C13732 * C2747 + C13578 * C3019) *
               C90567) *
              C90634 * C90485 * C90541 * C94 -
          ((C13732 * C2748 + C13578 * C3020 + C13731 * C1012 + C13577 * C1302 +
            C13730 * C248 + C13576 * C477) *
               C90567 +
           (C13732 * C2573 + C13578 * C2830 + C13731 * C831 + C13577 * C1096 +
            C13730 * C110 + C13576 * C311) *
               C244) *
              C90634 * C90485 * C90541 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
             C13732 * C2570 + C13578 * C2827) *
                C244 +
            (C13730 * C245 + C13576 * C474 + C13731 * C1011 + C13577 * C1301 +
             C13732 * C2745 + C13578 * C3017) *
                C90567) *
               C90634 * C90485 * C2565 -
           ((C13732 * C3489 + C13578 * C3654 + C13731 * C2745 + C13577 * C3017 +
             C13730 * C1011 + C13576 * C1301) *
                C90567 +
            (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
             C13730 * C832 + C13576 * C1094) *
                C244) *
               C90634 * C90485 * C2566 +
           ((C13730 * C2570 + C13576 * C2827 + C13731 * C3367 + C13577 * C3545 +
             C13732 * C15525 + C13578 * C15808) *
                C244 +
            (C13730 * C2745 + C13576 * C3017 + C13731 * C3489 + C13577 * C3654 +
             C13732 * C15718 + C13578 * C15962) *
                C90567) *
               C90634 * C90485 * C2567) *
              C90744 +
          (((C13730 * C829 + C13576 * C1093 + C13731 * C2571 + C13577 * C2828 +
             C13732 * C3366 + C13578 * C3544) *
                C244 +
            (C13730 * C1010 + C13576 * C1300 + C13731 * C2746 + C13577 * C3018 +
             C13732 * C3488 + C13578 * C3653) *
                C90567) *
               C90634 * C90485 * C2566 -
           ((C13732 * C2746 + C13578 * C3018 + C13731 * C1010 + C13577 * C1300 +
             C13730 * C246 + C13576 * C475) *
                C90567 +
            (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
             C13730 * C108 + C13576 * C309) *
                C244) *
               C90634 * C90485 * C2565 -
           ((C13732 * C15719 + C13578 * C15963 + C13731 * C3488 +
             C13577 * C3653 + C13730 * C2746 + C13576 * C3018) *
                C90567 +
            (C13732 * C15526 + C13578 * C15809 + C13731 * C3366 +
             C13577 * C3544 + C13730 * C2571 + C13576 * C2828) *
                C244) *
               C90634 * C90485 * C2567) *
              C90503)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C244 +
            (C307 * C245 + C90623 * C474) * C90567) *
               C26429 +
           ((C307 * C1700 + C90623 * C1962) * C244 +
            (C307 * C1879 + C90623 * C2159) * C90567) *
               C26430 +
           ((C307 * C4656 + C90623 * C4913) * C244 +
            (C307 * C4831 + C90623 * C5095) * C90567) *
               C26431) *
              C90485 * C90541 * C92 -
          ((C5114 * C90567 + C4930 * C244) * C26431 +
           (C2180 * C90567 + C1984 * C244) * C26430 + (C497 + C481) * C26429) *
              C90485 * C90541 * C93 +
          (C501 * C26429 + (C1986 * C244 + C2182 * C90567) * C26430 +
           (C4932 * C244 + C5115 * C90567) * C26431) *
              C90485 * C90541 * C94 -
          (((C307 * C4834 + C90623 * C5098) * C90567 +
            (C307 * C4659 + C90623 * C4916) * C244) *
               C26431 +
           (C2183 * C90567 + C1988 * C244) * C26430 + C502 * C26429) *
              C90485 * C90541 * C95)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C244 +
             (C307 * C245 + C90623 * C474) * C90567) *
                C26429 +
            (C27910 * C244 + C28080 * C90567) * C26430 +
            (C27912 * C244 + C28081 * C90567) * C26431) *
               C90485 * C2565 -
           (((C307 * C5637 + C90623 * C5872) * C90567 +
             (C307 * C5471 + C90623 * C5717) * C244) *
                C26431 +
            ((C307 * C4075 + C90623 * C4327) * C90567 +
             (C307 * C3891 + C90623 * C4161) * C244) *
                C26430 +
            ((C307 * C1011 + C90623 * C1301) * C90567 +
             (C307 * C832 + C90623 * C1094) * C244) *
                C26429) *
               C90485 * C2566 +
           (((C307 * C2570 + C90623 * C2827) * C244 +
             (C307 * C2745 + C90623 * C3017) * C90567) *
                C26429 +
            ((C307 * C3896 + C90623 * C4166) * C244 +
             (C307 * C4080 + C90623 * C4330) * C90567) *
                C26430 +
            ((C307 * C17651 + C90623 * C17889) * C244 +
             (C307 * C17811 + C90623 * C18043) * C90567) *
                C26431) *
               C90485 * C2567) *
              C90744 +
          (((C1310 + C1318) * C26429 +
            (C8433 * C244 + C8659 * C90567) * C26430 +
            ((C307 * C5470 + C90623 * C5716) * C244 +
             (C307 * C5636 + C90623 * C5873) * C90567) *
                C26431) *
               C90485 * C2566 -
           ((C5114 * C90567 + C4930 * C244) * C26431 +
            (C2180 * C90567 + C1984 * C244) * C26430 + (C497 + C481) * C26429) *
               C90485 * C2565 -
           (((C307 * C17812 + C90623 * C18044) * C90567 +
             (C307 * C17652 + C90623 * C17890) * C244) *
                C26431 +
            ((C307 * C4079 + C90623 * C4331) * C90567 +
             (C307 * C3895 + C90623 * C4165) * C244) *
                C26430 +
            (C3030 + C3022) * C26429) *
               C90485 * C2567) *
              C90503)) /
            (p * q * std::sqrt(p + q));
    d2eezx[42] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C88316 +
            (C554 * C116 + C90634 * C561) * C90744 - C584 * C88309 -
            C585 * C90503) *
               C89 +
           (C584 * C88316 + C585 * C90744 - C586 * C88309 - C587 * C90503) *
               C90 +
           (C586 * C88316 + C587 * C90744 - C588 * C88309 - C589 * C90503) *
               C91) *
              C90623 * C90567 * C2565 +
          ((C1418 * C88309 -
            ((C554 * C839 + C90634 * C1400) * C90744 +
             (C554 * C832 + C90634 * C1396) * C88316) +
            C1419 * C90503) *
               C89 +
           (C1420 * C88309 - (C1419 * C90744 + C1418 * C88316) +
            C1421 * C90503) *
               C90 +
           (C1422 * C88309 - (C1421 * C90744 + C1420 * C88316) +
            C1423 * C90503) *
               C91) *
              C90623 * C90567 * C2566 +
          (((C554 * C2570 + C90634 * C3105) * C88316 +
            (C554 * C2577 + C90634 * C3109) * C90744 - C3122 * C88309 -
            C3123 * C90503) *
               C89 +
           (C3122 * C88316 + C3123 * C90744 - C3124 * C88309 - C3125 * C90503) *
               C90 +
           (C3124 * C88316 + C3125 * C90744 -
            (C554 * C2573 + C90634 * C3108) * C88309 -
            (C554 * C2581 + C90634 * C3112) * C90503) *
               C91) *
              C90623 * C90567 * C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C554 * C107 + C90634 * C555) * C103 +
           (C554 * C116 + C90634 * C561) * C92 - C584 * C104 - C585 * C93 +
           C586 * C105 + C587 * C94 - C588 * C106 - C589 * C95) *
              C89 +
          (C584 * C103 + C585 * C92 - C586 * C104 - C587 * C93 + C588 * C105 +
           C589 * C94 - C590 * C106 - C591 * C95) *
              C90 +
          (C586 * C103 + C587 * C92 - C588 * C104 - C589 * C93 + C590 * C105 +
           C591 * C94 - (C554 * C112 + C90634 * C560) * C106 -
           (C554 * C124 + C90634 * C566) * C95) *
              C91) *
         C90623 * C90567 * C90541) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C554 * C107 + C90634 * C555) * C103 +
           (C554 * C116 + C90634 * C561) * C92 - C584 * C104 - C585 * C93 +
           C586 * C105 + C587 * C94 - C588 * C106 - C589 * C95) *
              C90485 * C13576 +
          ((C554 * C832 + C90634 * C1396) * C103 +
           (C554 * C839 + C90634 * C1400) * C92 - C1418 * C104 - C1419 * C93 +
           C1420 * C105 + C1421 * C94 - C1422 * C106 - C1423 * C95) *
              C90485 * C13577 +
          ((C554 * C2570 + C90634 * C3105) * C103 +
           (C554 * C2577 + C90634 * C3109) * C92 - C3122 * C104 - C3123 * C93 +
           C3124 * C105 + C3125 * C94 - (C554 * C2573 + C90634 * C3108) * C106 -
           (C554 * C2581 + C90634 * C3112) * C95) *
              C90485 * C13578) *
         C90567 * C90541) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C88316 +
            (C554 * C116 + C90634 * C561) * C90744 - C584 * C88309 -
            C585 * C90503) *
               C90485 * C13576 +
           (C16043 + C16044 - C16045 - C16046) * C90485 * C13577 +
           C16070 * C13578) *
              C90567 * C2565 +
          ((C16045 - (C16044 + C16043) + C16046) * C90485 * C13576 +
           (C16049 - (C16048 + C16047) + C16050) * C90485 * C13577 +
           (C16065 - (C16066 + C16067) + C16068) * C90485 * C13578) *
              C90567 * C2566 +
          (C16070 * C13576 +
           (C16067 + C16066 - C16065 - C16068) * C90485 * C13577 +
           ((C554 * C15525 + C90634 * C16038) * C88316 +
            (C554 * C15528 + C90634 * C16040) * C90744 -
            (C554 * C15526 + C90634 * C16039) * C88309 -
            (C554 * C15530 + C90634 * C16041) * C90503) *
               C90485 * C13578) *
              C90567 * C2567)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((C26732 * C107 + C26429 * C555 + C26733 * C1700 + C26430 * C2264 +
           C26734 * C4656 + C26431 * C5191) *
              C103 +
          (C26732 * C116 + C26429 * C561 + C26733 * C1707 + C26430 * C2268 +
           C26734 * C4663 + C26431 * C5195) *
              C92 -
          (C26734 * C4657 + C26431 * C5192 + C26733 * C1697 + C26430 * C2263 +
           C26732 * C108 + C26429 * C556) *
              C104 -
          (C26734 * C4664 + C26431 * C5196 + C26733 * C1706 + C26430 * C2269 +
           C26732 * C117 + C26429 * C562) *
              C93 +
          (C26732 * C109 + C26429 * C557 + C26733 * C1698 + C26430 * C2265 +
           C26734 * C4658 + C26431 * C5193) *
              C105 +
          (C26732 * C118 + C26429 * C563 + C26733 * C1705 + C26430 * C2270 +
           C26734 * C4665 + C26431 * C5197) *
              C94 -
          (C26734 * C4659 + C26431 * C5194 + C26733 * C1699 + C26430 * C2266 +
           C26732 * C110 + C26429 * C558) *
              C106 -
          (C26734 * C4667 + C26431 * C5198 + C26733 * C1709 + C26430 * C2271 +
           C26732 * C120 + C26429 * C564) *
              C95) *
         C90485 * C90623 * C90567 * C90541) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C26732 * C107 + C26429 * C555 + C26733 * C1700 + C26430 * C2264 +
            C26734 * C4656 + C26431 * C5191) *
               C88316 +
           (C26732 * C116 + C26429 * C561 + C26733 * C1707 + C26430 * C2268 +
            C26734 * C4663 + C26431 * C5195) *
               C90744 -
           (C26734 * C4657 + C26431 * C5192 + C26733 * C1697 + C26430 * C2263 +
            C26732 * C108 + C26429 * C556) *
               C88309 -
           (C26734 * C4664 + C26431 * C5196 + C26733 * C1706 + C26430 * C2269 +
            C26732 * C117 + C26429 * C562) *
               C90503) *
              C90485 * C90623 * C90567 * C2565 +
          ((C26732 * C829 + C26429 * C1395 + C26733 * C3892 + C26430 * C4408 +
            C26734 * C5470 + C26431 * C5950) *
               C88309 -
           ((C26734 * C5474 + C26431 * C5954 + C26733 * C3900 + C26430 * C4413 +
             C26732 * C839 + C26429 * C1400) *
                C90744 +
            (C26734 * C5471 + C26431 * C5951 + C26733 * C3891 + C26430 * C4407 +
             C26732 * C832 + C26429 * C1396) *
                C88316) +
           (C26732 * C838 + C26429 * C1401 + C26733 * C3901 + C26430 * C4414 +
            C26734 * C5473 + C26431 * C5953) *
               C90503) *
              C90485 * C90623 * C90567 * C2566 +
          ((C26732 * C2570 + C26429 * C3105 + C26733 * C3896 + C26430 * C4412 +
            C26734 * C17651 + C26431 * C18119) *
               C88316 +
           (C26732 * C2577 + C26429 * C3109 + C26733 * C3905 + C26430 * C4418 +
            C26734 * C17654 + C26431 * C18121) *
               C90744 -
           (C26734 * C17652 + C26431 * C18120 + C26733 * C3895 +
            C26430 * C4411 + C26732 * C2571 + C26429 * C3106) *
               C88309 -
           (C26734 * C17656 + C26431 * C18122 + C26733 * C3904 +
            C26430 * C4417 + C26732 * C2578 + C26429 * C3110) *
               C90503) *
              C90485 * C90623 * C90567 * C2567)) /
            (p * q * std::sqrt(p + q));
    d2eezy[42] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C2660 +
            (C554 * C182 + C90634 * C641) * C2565 -
            (C554 * C832 + C90634 * C1396) * C2661 -
            (C554 * C927 + C90634 * C1497) * C2566 +
            (C554 * C2570 + C90634 * C3105) * C2662 +
            (C554 * C2663 + C90634 * C3199) * C2567) *
               C89 +
           (C3204 + C3205 - C3206 - C3207 + C3208 + C3220) * C90 +
           (C3211 + C3212 - C3213 - C3214 + C3215 + C3221) * C91) *
              C90623 * C90744 +
          ((C3206 - (C3205 + C3204) + C3207 - C3208 - C3220) * C89 +
           (C3213 - (C3212 + C3211) + C3214 - C3215 - C3221) * C90 +
           (C1422 * C2661 - (C662 * C2565 + C588 * C2660) + C1521 * C2566 -
            (C554 * C2573 + C90634 * C3108) * C2662 -
            (C554 * C2666 + C90634 * C3202) * C2567) *
               C91) *
              C90623 * C90503) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C181 +
            (C554 * C182 + C90634 * C641) * C90541) *
               C89 +
           (C648 + C664) * C90 + C668 * C91) *
              C90623 * C92 -
          (C669 * C91 + (C665 + C651) * C90 + (C664 + C648) * C89) * C90623 *
              C93 +
          (C668 * C89 + (C656 + C666) * C90 + (C657 + C667) * C91) * C90623 *
              C94 -
          (((C554 * C187 + C90634 * C646) * C90541 +
            (C554 * C112 + C90634 * C560) * C181) *
               C91 +
           (C667 + C657) * C90 + C669 * C89) *
              C90623 * C95) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C181 +
            (C554 * C182 + C90634 * C641) * C90541) *
               C90485 * C13576 +
           ((C554 * C832 + C90634 * C1396) * C181 +
            (C554 * C927 + C90634 * C1497) * C90541) *
               C90485 * C13577 +
           ((C554 * C2570 + C90634 * C3105) * C181 +
            (C554 * C2663 + C90634 * C3199) * C90541) *
               C90485 * C13578) *
              C92 -
          ((C3218 * C90541 + C3122 * C181) * C90485 * C13578 +
           (C1518 * C90541 + C1418 * C181) * C90485 * C13577 +
           (C664 + C648) * C90485 * C13576) *
              C93 +
          (C668 * C90485 * C13576 +
           (C1420 * C181 + C1520 * C90541) * C90485 * C13577 +
           (C3124 * C181 + C3219 * C90541) * C90485 * C13578) *
              C94 -
          (((C554 * C2666 + C90634 * C3202) * C90541 +
            (C554 * C2573 + C90634 * C3108) * C181) *
               C90485 * C13578 +
           (C1521 * C90541 + C1422 * C181) * C90485 * C13577 +
           C669 * C90485 * C13576) *
              C95) *
         C90567) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C2660 +
            (C554 * C182 + C90634 * C641) * C2565 - C14614 * C2661 -
            C14700 * C2566 + C14616 * C2662 + C14701 * C2567) *
               C90485 * C13576 +
           (C14614 * C2660 + C14700 * C2565 - C14616 * C2661 - C14701 * C2566 +
            C16062 * C2662 + C16151 * C2567) *
               C90485 * C13577 +
           (C14616 * C2660 + C14701 * C2565 - C16062 * C2661 - C16151 * C2566 +
            (C554 * C15525 + C90634 * C16038) * C2662 +
            (C554 * C15634 + C90634 * C16144) * C2567) *
               C90485 * C13578) *
              C90744 +
          ((C3206 - (C3205 + C3204) + C3207 - C3208 - C3220) * C90485 * C13576 +
           (C3122 * C2661 - (C1518 * C2565 + C1418 * C2660) + C3218 * C2566 -
            C16060 * C2662 - C16152 * C2567) *
               C90485 * C13577 +
           (C16060 * C2661 - (C3218 * C2565 + C3122 * C2660) + C16152 * C2566 -
            (C554 * C15526 + C90634 * C16039) * C2662 -
            (C554 * C15635 + C90634 * C16145) * C2567) *
               C90485 * C13578) *
              C90503) *
         C90567) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C26732 * C107 + C26429 * C555 + C26733 * C1700 + C26430 * C2264 +
            C26734 * C4656 + C26431 * C5191) *
               C181 +
           (C26732 * C182 + C26429 * C641 + C26733 * C1794 + C26430 * C2368 +
            C26734 * C4746 + C26431 * C5285) *
               C90541) *
              C90485 * C90623 * C92 -
          ((C26734 * C4747 + C26431 * C5286 + C26733 * C1791 + C26430 * C2365 +
            C26732 * C183 + C26429 * C642) *
               C90541 +
           (C26734 * C4657 + C26431 * C5192 + C26733 * C1697 + C26430 * C2263 +
            C26732 * C108 + C26429 * C556) *
               C181) *
              C90485 * C90623 * C93 +
          ((C26732 * C109 + C26429 * C557 + C26733 * C1698 + C26430 * C2265 +
            C26734 * C4658 + C26431 * C5193) *
               C181 +
           (C26732 * C184 + C26429 * C643 + C26733 * C1792 + C26430 * C2366 +
            C26734 * C4748 + C26431 * C5287) *
               C90541) *
              C90485 * C90623 * C94 -
          ((C26734 * C4749 + C26431 * C5288 + C26733 * C1793 + C26430 * C2367 +
            C26732 * C185 + C26429 * C644) *
               C90541 +
           (C26734 * C4659 + C26431 * C5194 + C26733 * C1699 + C26430 * C2266 +
            C26732 * C110 + C26429 * C558) *
               C181) *
              C90485 * C90623 * C95) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C26732 * C107 + C26429 * C555 + C26733 * C1700 + C26430 * C2264 +
            C26734 * C4656 + C26431 * C5191) *
               C2660 +
           (C26732 * C182 + C26429 * C641 + C26733 * C1794 + C26430 * C2368 +
            C26734 * C4746 + C26431 * C5285) *
               C2565 -
           (C26734 * C5471 + C26431 * C5951 + C26733 * C3891 + C26430 * C4407 +
            C26732 * C832 + C26429 * C1396) *
               C2661 -
           (C26734 * C5557 + C26431 * C6029 + C26733 * C3989 + C26430 * C4493 +
            C26732 * C927 + C26429 * C1497) *
               C2566 +
           (C26732 * C2570 + C26429 * C3105 + C26733 * C3896 + C26430 * C4412 +
            C26734 * C17651 + C26431 * C18119) *
               C2662 +
           (C26732 * C2663 + C26429 * C3199 + C26733 * C3994 + C26430 * C4494 +
            C26734 * C17733 + C26431 * C18197) *
               C2567) *
              C90485 * C90623 * C90744 +
          ((C26732 * C829 + C26429 * C1395 + C26733 * C3892 + C26430 * C4408 +
            C26734 * C5470 + C26431 * C5950) *
               C2661 -
           ((C26734 * C4747 + C26431 * C5286 + C26733 * C1791 + C26430 * C2365 +
             C26732 * C183 + C26429 * C642) *
                C2565 +
            (C26734 * C4657 + C26431 * C5192 + C26733 * C1697 + C26430 * C2263 +
             C26732 * C108 + C26429 * C556) *
                C2660) +
           (C26732 * C926 + C26429 * C1498 + C26733 * C3990 + C26430 * C4495 +
            C26734 * C5556 + C26431 * C6030) *
               C2566 -
           (C26734 * C17652 + C26431 * C18120 + C26733 * C3895 +
            C26430 * C4411 + C26732 * C2571 + C26429 * C3106) *
               C2662 -
           (C26734 * C17734 + C26431 * C18198 + C26733 * C3993 +
            C26430 * C4496 + C26732 * C2664 + C26429 * C3200) *
               C2567) *
              C90485 * C90623 * C90503) *
         C90567) /
            (p * q * std::sqrt(p + q));
    d2eezz[42] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C244 +
             (C554 * C245 + C90634 * C719) * C90567) *
                C89 +
            (C726 + C742) * C90 + C746 * C91) *
               C90623 * C2565 -
           (C1621 * C91 + (C1619 + C1611) * C90 +
            ((C554 * C1011 + C90634 * C1602) * C90567 +
             (C554 * C832 + C90634 * C1396) * C244) *
                C89) *
               C90623 * C2566 +
           (((C554 * C2570 + C90634 * C3105) * C244 +
             (C554 * C2745 + C90634 * C3295) * C90567) *
                C89 +
            (C3300 + C3308) * C90 + (C3303 + C3309) * C91) *
               C90623 * C2567) *
              C90744 +
          (((C1611 + C1619) * C89 + (C1608 + C1618) * C90 +
            (C1612 + C1620) * C91) *
               C90623 * C2566 -
           (C747 * C91 + (C743 + C729) * C90 + (C742 + C726) * C89) * C90623 *
               C2565 -
           (((C554 * C2748 + C90634 * C3298) * C90567 +
             (C554 * C2573 + C90634 * C3108) * C244) *
                C91 +
            (C3309 + C3303) * C90 + (C3308 + C3300) * C89) *
               C90623 * C2567) *
              C90503)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C244 +
            (C554 * C245 + C90634 * C719) * C90567) *
               C89 +
           (C726 + C742) * C90 + C746 * C91) *
              C90623 * C90541 * C92 -
          (C747 * C91 + (C743 + C729) * C90 + (C742 + C726) * C89) * C90623 *
              C90541 * C93 +
          (C746 * C89 + (C734 + C744) * C90 + (C735 + C745) * C91) * C90623 *
              C90541 * C94 -
          (((C554 * C250 + C90634 * C724) * C90567 +
            (C554 * C112 + C90634 * C560) * C244) *
               C91 +
           (C745 + C735) * C90 + C747 * C89) *
              C90623 * C90541 * C95)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C244 +
            (C554 * C245 + C90634 * C719) * C90567) *
               C90485 * C13576 +
           ((C554 * C832 + C90634 * C1396) * C244 +
            (C554 * C1011 + C90634 * C1602) * C90567) *
               C90485 * C13577 +
           ((C554 * C2570 + C90634 * C3105) * C244 +
            (C554 * C2745 + C90634 * C3295) * C90567) *
               C90485 * C13578) *
              C90541 * C92 -
          ((C3308 + C3300) * C90485 * C13578 +
           (C1619 + C1611) * C90485 * C13577 +
           (C742 + C726) * C90485 * C13576) *
              C90541 * C93 +
          (C746 * C90485 * C13576 + (C1608 + C1618) * C90485 * C13577 +
           (C3303 + C3309) * C90485 * C13578) *
              C90541 * C94 -
          (((C554 * C2748 + C90634 * C3298) * C90567 +
            (C554 * C2573 + C90634 * C3108) * C244) *
               C90485 * C13578 +
           (C1620 + C1612) * C90485 * C13577 + C747 * C90485 * C13576) *
              C90541 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C244 +
             (C554 * C245 + C90634 * C719) * C90567) *
                C90485 * C13576 +
            (C14776 + C14784) * C90485 * C13577 + C16237 * C13578) *
               C2565 -
           ((C16241 + C16232) * C90485 * C13578 +
            (C14785 + C14779) * C90485 * C13577 +
            (C14784 + C14776) * C90485 * C13576) *
               C2566 +
           (C16237 * C13576 + (C16232 + C16241) * C90485 * C13577 +
            ((C554 * C15525 + C90634 * C16038) * C244 +
             (C554 * C15718 + C90634 * C16226) * C90567) *
                C90485 * C13578) *
               C2567) *
              C90744 +
          (((C1611 + C1619) * C90485 * C13576 +
            (C3300 + C3308) * C90485 * C13577 +
            (C16233 + C16242) * C90485 * C13578) *
               C2566 -
           (C16240 * C13578 + (C1619 + C1611) * C90485 * C13577 +
            (C742 + C726) * C90485 * C13576) *
               C2565 -
           (((C554 * C15719 + C90634 * C16227) * C90567 +
             (C554 * C15526 + C90634 * C16039) * C244) *
                C90485 * C13578 +
            (C16242 + C16233) * C90485 * C13577 + C16240 * C13576) *
               C2567) *
              C90503)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C26732 * C107 + C26429 * C555 + C26733 * C1700 + C26430 * C2264 +
            C26734 * C4656 + C26431 * C5191) *
               C244 +
           (C26732 * C245 + C26429 * C719 + C26733 * C1879 + C26430 * C2460 +
            C26734 * C4831 + C26431 * C5373) *
               C90567) *
              C90485 * C90623 * C90541 * C92 -
          ((C26734 * C4832 + C26431 * C5374 + C26733 * C1878 + C26430 * C2461 +
            C26732 * C246 + C26429 * C720) *
               C90567 +
           (C26734 * C4657 + C26431 * C5192 + C26733 * C1697 + C26430 * C2263 +
            C26732 * C108 + C26429 * C556) *
               C244) *
              C90485 * C90623 * C90541 * C93 +
          ((C26732 * C109 + C26429 * C557 + C26733 * C1698 + C26430 * C2265 +
            C26734 * C4658 + C26431 * C5193) *
               C244 +
           (C26732 * C247 + C26429 * C721 + C26733 * C1877 + C26430 * C2462 +
            C26734 * C4833 + C26431 * C5375) *
               C90567) *
              C90485 * C90623 * C90541 * C94 -
          ((C26734 * C4834 + C26431 * C5376 + C26733 * C1880 + C26430 * C2463 +
            C26732 * C248 + C26429 * C722) *
               C90567 +
           (C26734 * C4659 + C26431 * C5194 + C26733 * C1699 + C26430 * C2266 +
            C26732 * C110 + C26429 * C558) *
               C244) *
              C90485 * C90623 * C90541 * C95)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26732 * C107 + C26429 * C555 + C26733 * C1700 + C26430 * C2264 +
             C26734 * C4656 + C26431 * C5191) *
                C244 +
            (C26732 * C245 + C26429 * C719 + C26733 * C1879 + C26430 * C2460 +
             C26734 * C4831 + C26431 * C5373) *
                C90567) *
               C90485 * C90623 * C2565 -
           ((C26734 * C5637 + C26431 * C6106 + C26733 * C4075 + C26430 * C4573 +
             C26732 * C1011 + C26429 * C1602) *
                C90567 +
            (C26734 * C5471 + C26431 * C5951 + C26733 * C3891 + C26430 * C4407 +
             C26732 * C832 + C26429 * C1396) *
                C244) *
               C90485 * C90623 * C2566 +
           ((C26732 * C2570 + C26429 * C3105 + C26733 * C3896 + C26430 * C4412 +
             C26734 * C17651 + C26431 * C18119) *
                C244 +
            (C26732 * C2745 + C26429 * C3295 + C26733 * C4080 + C26430 * C4576 +
             C26734 * C17811 + C26431 * C18273) *
                C90567) *
               C90485 * C90623 * C2567) *
              C90744 +
          (((C26732 * C829 + C26429 * C1395 + C26733 * C3892 + C26430 * C4408 +
             C26734 * C5470 + C26431 * C5950) *
                C244 +
            (C26732 * C1010 + C26429 * C1601 + C26733 * C4076 + C26430 * C4574 +
             C26734 * C5636 + C26431 * C6107) *
                C90567) *
               C90485 * C90623 * C2566 -
           ((C26734 * C4832 + C26431 * C5374 + C26733 * C1878 + C26430 * C2461 +
             C26732 * C246 + C26429 * C720) *
                C90567 +
            (C26734 * C4657 + C26431 * C5192 + C26733 * C1697 + C26430 * C2263 +
             C26732 * C108 + C26429 * C556) *
                C244) *
               C90485 * C90623 * C2565 -
           ((C26734 * C17812 + C26431 * C18274 + C26733 * C4079 +
             C26430 * C4577 + C26732 * C2746 + C26429 * C3296) *
                C90567 +
            (C26734 * C17652 + C26431 * C18120 + C26733 * C3895 +
             C26430 * C4411 + C26732 * C2571 + C26429 * C3106) *
                C244) *
               C90485 * C90623 * C2567) *
              C90503)) /
            (p * q * std::sqrt(p + q));
    d2eexx[43] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C3364 +
           (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 + C102 * C118 +
            C91 * C127) *
               C90498) *
              C90623 * C90634 * C90567 * C3360 -
          ((C102 * C837 + C91 * C844 + C101 * C838 + C90 * C845 + C100 * C839 +
            C89 * C846) *
               C90498 +
           (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 + C100 * C832 +
            C89 * C840) *
               C3364) *
              C90623 * C90634 * C90567 * C3361 +
          ((C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
            C102 * C2572 + C91 * C2576) *
               C3364 +
           (C100 * C2577 + C89 * C2582 + C101 * C2578 + C90 * C2583 +
            C102 * C2579 + C91 * C2584) *
               C90498) *
              C90623 * C90634 * C90567 * C3362 -
          ((C102 * C3368 + C91 * C3374 + C101 * C3369 + C90 * C3375 +
            C100 * C3370 + C89 * C3376) *
               C90498 +
           (C102 * C3365 + C91 * C3371 + C101 * C3366 + C90 * C3372 +
            C100 * C3367 + C89 * C3373) *
               C3364) *
              C90623 * C90634 * C90567 * C3363)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C826 +
           (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 + C102 * C118 +
            C91 * C127) *
               C821 -
           (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 + C100 * C108 +
            C89 * C114) *
               C827 -
           (C102 * C120 + C91 * C128 + C101 * C118 + C90 * C127 + C100 * C117 +
            C89 * C126) *
               C822 +
           (C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 + C102 * C111 +
            C91 * C121) *
               C828 +
           (C100 * C118 + C89 * C127 + C101 * C120 + C90 * C128 + C102 * C122 +
            C91 * C129) *
               C823) *
              C90623 * C90634 * C90567 * C90752 +
          ((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 + C102 * C831 +
            C91 * C836) *
               C827 -
           ((C102 * C837 + C91 * C844 + C101 * C838 + C90 * C845 + C100 * C839 +
             C89 * C846) *
                C821 +
            (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 + C100 * C832 +
             C89 * C840) *
                C826) +
           (C100 * C838 + C89 * C845 + C101 * C837 + C90 * C844 + C102 * C841 +
            C91 * C847) *
               C822 -
           (C102 * C833 + C91 * C842 + C101 * C831 + C90 * C836 + C100 * C830 +
            C89 * C835) *
               C828 -
           (C102 * C843 + C91 * C848 + C101 * C841 + C90 * C847 + C100 * C837 +
            C89 * C844) *
               C823) *
              C90623 * C90634 * C90567 * C90555)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C826 +
            (C13579 * C116 + C90485 * C125) * C821 -
            (C13579 * C108 + C90485 * C114) * C827 -
            (C13579 * C117 + C90485 * C126) * C822 +
            (C13579 * C109 + C90485 * C115) * C828 +
            (C13579 * C118 + C90485 * C127) * C823) *
               C13576 +
           (C14094 + C14095 - C14096 - C14097 + C14098 + C14099) * C13577 +
           (C14100 + C14101 - C14102 - C14103 + C14104 + C14105) * C13578) *
              C90634 * C90567 * C90752 +
          ((C14096 - (C14095 + C14094) + C14097 - C14098 - C14099) * C13576 +
           (C14102 - (C14101 + C14100) + C14103 - C14104 - C14105) * C13577 +
           ((C13579 * C3366 + C90485 * C3372) * C827 -
            ((C13579 * C3370 + C90485 * C3376) * C821 +
             (C13579 * C3367 + C90485 * C3373) * C826) +
            (C13579 * C3369 + C90485 * C3375) * C822 -
            (C13579 * C3365 + C90485 * C3371) * C828 -
            (C13579 * C3368 + C90485 * C3374) * C823) *
               C13578) *
              C90634 * C90567 * C90555)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C3364 +
            (C13579 * C116 + C90485 * C125) * C90498) *
               C13576 +
           (C16297 + C16298) * C13577 + C16307 * C13578) *
              C90634 * C90567 * C3360 -
          (C16308 * C13578 + (C16300 + C16299) * C13577 +
           (C16298 + C16297) * C13576) *
              C90634 * C90567 * C3361 +
          (C16307 * C13576 + (C16302 + C16301) * C13577 +
           (C16311 + C16312) * C13578) *
              C90634 * C90567 * C3362 -
          (((C13579 * C16293 + C90485 * C16295) * C90498 +
            (C13579 * C16292 + C90485 * C16294) * C3364) *
               C13578 +
           (C16312 + C16311) * C13577 + C16308 * C13576) *
              C90634 * C90567 * C3363)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C826 +
            (C13579 * C116 + C90485 * C125) * C821 -
            (C13579 * C108 + C90485 * C114) * C827 -
            (C13579 * C117 + C90485 * C126) * C822 +
            (C13579 * C109 + C90485 * C115) * C828 +
            (C13579 * C118 + C90485 * C127) * C823) *
               C90623 * C26429 +
           ((C13579 * C1700 + C90485 * C1708) * C826 +
            (C13579 * C1707 + C90485 * C1714) * C821 -
            (C13579 * C1697 + C90485 * C1702) * C827 -
            (C13579 * C1706 + C90485 * C1713) * C822 +
            (C13579 * C1698 + C90485 * C1703) * C828 +
            (C13579 * C1705 + C90485 * C1712) * C823) *
               C90623 * C26430 +
           ((C13579 * C4656 + C90485 * C4660) * C826 +
            (C13579 * C4663 + C90485 * C4668) * C821 -
            (C13579 * C4657 + C90485 * C4661) * C827 -
            (C13579 * C4664 + C90485 * C4669) * C822 +
            (C13579 * C4658 + C90485 * C4662) * C828 +
            (C13579 * C4665 + C90485 * C4670) * C823) *
               C90623 * C26431) *
              C90567 * C90752 +
          ((C14096 - (C14095 + C14094) + C14097 - C14098 - C14099) * C90623 *
               C26429 +
           (C21021 * C827 - (C16858 * C821 + C16859 * C826) + C21022 * C822 -
            (C13579 * C3893 + C90485 * C3899) * C828 -
            (C13579 * C3902 + C90485 * C3911) * C823) *
               C90623 * C26430 +
           ((C13579 * C5470 + C90485 * C5476) * C827 -
            (C18363 * C821 + C18362 * C826) +
            (C13579 * C5473 + C90485 * C5479) * C822 -
            (C13579 * C5469 + C90485 * C5475) * C828 -
            (C13579 * C5472 + C90485 * C5478) * C823) *
               C90623 * C26431) *
              C90567 * C90555)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C3364 +
            (C13579 * C116 + C90485 * C125) * C90498) *
               C90623 * C26429 +
           (C27600 * C3364 + C27601 * C90498) * C90623 * C26430 +
           (C27606 * C3364 + C27607 * C90498) * C90623 * C26431) *
              C90567 * C3360 -
          ((C18367 + C18366) * C90623 * C26431 +
           (C16864 + C16865) * C90623 * C26430 +
           (C16298 + C16297) * C90623 * C26429) *
              C90567 * C3361 +
          (C16307 * C90623 * C26429 + (C16863 + C16862) * C90623 * C26430 +
           (C18368 + C18369) * C90623 * C26431) *
              C90567 * C3362 -
          (((C13579 * C18350 + C90485 * C18352) * C90498 +
            (C13579 * C18349 + C90485 * C18351) * C3364) *
               C90623 * C26431 +
           (C16867 + C16866) * C90623 * C26430 + C16308 * C90623 * C26429) *
              C90567 * C3363)) /
            (p * q * std::sqrt(p + q));
    d2eexy[43] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
           C91 * C115) *
              C3427 +
          (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 + C102 * C184 +
           C91 * C190) *
              C3360 -
          (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 + C100 * C832 +
           C89 * C840) *
              C3428 -
          (C102 * C925 + C91 * C930 + C101 * C926 + C90 * C931 + C100 * C927 +
           C89 * C932) *
              C3361 +
          (C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
           C102 * C2572 + C91 * C2576) *
              C3429 +
          (C100 * C2663 + C89 * C2667 + C101 * C2664 + C90 * C2668 +
           C102 * C2665 + C91 * C2669) *
              C3362 -
          (C102 * C3365 + C91 * C3371 + C101 * C3366 + C90 * C3372 +
           C100 * C3367 + C89 * C3373) *
              C3430 -
          (C102 * C3431 + C91 * C3434 + C101 * C3432 + C90 * C3435 +
           C100 * C3433 + C89 * C3436) *
              C3363) *
         C90623 * C90634 * C90498 * C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C923 +
           (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 + C102 * C184 +
            C91 * C190) *
               C90752 -
           (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 + C100 * C832 +
            C89 * C840) *
               C924 -
           (C102 * C925 + C91 * C930 + C101 * C926 + C90 * C931 + C100 * C927 +
            C89 * C932) *
               C90555) *
              C90623 * C90634 * C821 +
          ((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 + C102 * C831 +
            C91 * C836) *
               C924 -
           ((C102 * C185 + C91 * C191 + C101 * C184 + C90 * C190 + C100 * C183 +
             C89 * C189) *
                C90752 +
            (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 + C100 * C108 +
             C89 * C114) *
                C923) +
           (C100 * C926 + C89 * C931 + C101 * C925 + C90 * C930 + C102 * C928 +
            C91 * C933) *
               C90555) *
              C90623 * C90634 * C822 +
          ((C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 + C102 * C111 +
            C91 * C121) *
               C923 +
           (C100 * C184 + C89 * C190 + C101 * C185 + C90 * C191 + C102 * C186 +
            C91 * C192) *
               C90752 -
           (C102 * C833 + C91 * C842 + C101 * C831 + C90 * C836 + C100 * C830 +
            C89 * C835) *
               C924 -
           (C102 * C929 + C91 * C934 + C101 * C928 + C90 * C933 + C100 * C925 +
            C89 * C930) *
               C90555) *
              C90623 * C90634 * C823) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C923 +
            (C13579 * C182 + C90485 * C188) * C90752 - C14082 * C924 -
            C14192 * C90555) *
               C13576 +
           (C14082 * C923 + C14192 * C90752 - C14088 * C924 - C14193 * C90555) *
               C13577 +
           (C14088 * C923 + C14193 * C90752 -
            (C13579 * C3367 + C90485 * C3373) * C924 -
            (C13579 * C3433 + C90485 * C3436) * C90555) *
               C13578) *
              C90634 * C821 +
          ((C14084 * C924 -
            ((C13579 * C183 + C90485 * C189) * C90752 +
             (C13579 * C108 + C90485 * C114) * C923) +
            C14194 * C90555) *
               C13576 +
           (C14090 * C924 - (C14194 * C90752 + C14084 * C923) +
            C14195 * C90555) *
               C13577 +
           ((C13579 * C3366 + C90485 * C3372) * C924 -
            (C14195 * C90752 + C14090 * C923) +
            (C13579 * C3432 + C90485 * C3435) * C90555) *
               C13578) *
              C90634 * C822 +
          (((C13579 * C109 + C90485 * C115) * C923 +
            (C13579 * C184 + C90485 * C190) * C90752 - C14086 * C924 -
            C14196 * C90555) *
               C13576 +
           (C14086 * C923 + C14196 * C90752 - C14092 * C924 - C14197 * C90555) *
               C13577 +
           (C14092 * C923 + C14197 * C90752 -
            (C13579 * C3365 + C90485 * C3371) * C924 -
            (C13579 * C3431 + C90485 * C3434) * C90555) *
               C13578) *
              C90634 * C823) *
         C90567) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13579 * C107 + C90485 * C113) * C3427 +
           (C13579 * C182 + C90485 * C188) * C3360 - C14082 * C3428 -
           C14192 * C3361 + C14088 * C3429 + C14193 * C3362 - C15553 * C3430 -
           C15643 * C3363) *
              C13576 +
          (C14082 * C3427 + C14192 * C3360 - C14088 * C3428 - C14193 * C3361 +
           C15553 * C3429 + C15643 * C3362 - C16309 * C3430 - C16367 * C3363) *
              C13577 +
          (C14088 * C3427 + C14193 * C3360 - C15553 * C3428 - C15643 * C3361 +
           C16309 * C3429 + C16367 * C3362 -
           (C13579 * C16292 + C90485 * C16294) * C3430 -
           (C13579 * C16362 + C90485 * C16363) * C3363) *
              C13578) *
         C90634 * C90498 * C90567) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C923 +
            (C13579 * C182 + C90485 * C188) * C90752 - C14082 * C924 -
            C14192 * C90555) *
               C90623 * C26429 +
           ((C13579 * C1700 + C90485 * C1708) * C923 +
            (C13579 * C1794 + C90485 * C1799) * C90752 - C16859 * C924 -
            C16953 * C90555) *
               C90623 * C26430 +
           ((C13579 * C4656 + C90485 * C4660) * C923 +
            (C13579 * C4746 + C90485 * C4750) * C90752 - C18362 * C924 -
            C18450 * C90555) *
               C90623 * C26431) *
              C821 +
          ((C14084 * C924 -
            ((C13579 * C183 + C90485 * C189) * C90752 +
             (C13579 * C108 + C90485 * C114) * C923) +
            C14194 * C90555) *
               C90623 * C26429 +
           (C21021 * C924 -
            ((C13579 * C1791 + C90485 * C1796) * C90752 +
             (C13579 * C1697 + C90485 * C1702) * C923) +
            C21133 * C90555) *
               C90623 * C26430 +
           ((C13579 * C5470 + C90485 * C5476) * C924 -
            ((C13579 * C4747 + C90485 * C4751) * C90752 +
             (C13579 * C4657 + C90485 * C4661) * C923) +
            (C13579 * C5556 + C90485 * C5559) * C90555) *
               C90623 * C26431) *
              C822 +
          (((C13579 * C109 + C90485 * C115) * C923 +
            (C13579 * C184 + C90485 * C190) * C90752 - C14086 * C924 -
            C14196 * C90555) *
               C90623 * C26429 +
           ((C13579 * C1698 + C90485 * C1703) * C923 +
            (C13579 * C1792 + C90485 * C1797) * C90752 -
            (C13579 * C3893 + C90485 * C3899) * C924 -
            (C13579 * C3991 + C90485 * C3997) * C90555) *
               C90623 * C26430 +
           ((C13579 * C4658 + C90485 * C4662) * C923 +
            (C13579 * C4748 + C90485 * C4752) * C90752 -
            (C13579 * C5469 + C90485 * C5475) * C924 -
            (C13579 * C5555 + C90485 * C5558) * C90555) *
               C90623 * C26431) *
              C823) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13579 * C107 + C90485 * C113) * C3427 +
           (C13579 * C182 + C90485 * C188) * C3360 - C14082 * C3428 -
           C14192 * C3361 + C14088 * C3429 + C14193 * C3362 - C15553 * C3430 -
           C15643 * C3363) *
              C90623 * C26429 +
          (C27600 * C3427 + C27716 * C3360 - C16859 * C3428 - C16953 * C3361 +
           C16857 * C3429 + C16954 * C3362 - C16860 * C3430 - C16955 * C3363) *
              C90623 * C26430 +
          (C27606 * C3427 + C27717 * C3360 - C18362 * C3428 - C18450 * C3361 +
           C18364 * C3429 + C18451 * C3362 -
           (C13579 * C18349 + C90485 * C18351) * C3430 -
           (C13579 * C18443 + C90485 * C18444) * C3363) *
              C90623 * C26431) *
         C90498 * C90567) /
            (p * q * std::sqrt(p + q));
    d2eexz[43] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                      C102 * C109 + C91 * C115) *
                         C244 +
                     (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 +
                      C102 * C247 + C91 * C253) *
                         C90567) *
                        C90623 * C90634 * C3360 -
                    ((C102 * C1009 + C91 * C1014 + C101 * C1010 + C90 * C1015 +
                      C100 * C1011 + C89 * C1016) *
                         C90567 +
                     (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                      C100 * C832 + C89 * C840) *
                         C244) *
                        C90623 * C90634 * C3361 +
                    ((C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
                      C102 * C2572 + C91 * C2576) *
                         C244 +
                     (C100 * C2745 + C89 * C2749 + C101 * C2746 + C90 * C2750 +
                      C102 * C2747 + C91 * C2751) *
                         C90567) *
                        C90623 * C90634 * C3362 -
                    ((C102 * C3487 + C91 * C3490 + C101 * C3488 + C90 * C3491 +
                      C100 * C3489 + C89 * C3492) *
                         C90567 +
                     (C102 * C3365 + C91 * C3371 + C101 * C3366 + C90 * C3372 +
                      C100 * C3367 + C89 * C3373) *
                         C244) *
                        C90623 * C90634 * C3363) *
                   C90498) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                       C102 * C109 + C91 * C115) *
                          C244 +
                      (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 +
                       C102 * C247 + C91 * C253) *
                          C90567) *
                         C90623 * C90634 * C90752 -
                     ((C102 * C1009 + C91 * C1014 + C101 * C1010 + C90 * C1015 +
                       C100 * C1011 + C89 * C1016) *
                          C90567 +
                      (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                       C100 * C832 + C89 * C840) *
                          C244) *
                         C90623 * C90634 * C90555) *
                        C821 +
                    (((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 +
                       C102 * C831 + C91 * C836) *
                          C244 +
                      (C100 * C1010 + C89 * C1015 + C101 * C1009 + C90 * C1014 +
                       C102 * C1012 + C91 * C1017) *
                          C90567) *
                         C90623 * C90634 * C90555 -
                     ((C102 * C248 + C91 * C254 + C101 * C247 + C90 * C253 +
                       C100 * C246 + C89 * C252) *
                          C90567 +
                      (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                       C100 * C108 + C89 * C114) *
                          C244) *
                         C90623 * C90634 * C90752) *
                        C822 +
                    (((C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 +
                       C102 * C111 + C91 * C121) *
                          C244 +
                      (C100 * C247 + C89 * C253 + C101 * C248 + C90 * C254 +
                       C102 * C249 + C91 * C255) *
                          C90567) *
                         C90623 * C90634 * C90752 -
                     ((C102 * C1013 + C91 * C1018 + C101 * C1012 + C90 * C1017 +
                       C100 * C1009 + C89 * C1014) *
                          C90567 +
                      (C102 * C833 + C91 * C842 + C101 * C831 + C90 * C836 +
                       C100 * C830 + C89 * C835) *
                          C244) *
                         C90623 * C90634 * C90555) *
                        C823)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   (((((C13579 * C107 + C90485 * C113) * C244 +
                       (C13579 * C245 + C90485 * C251) * C90567) *
                          C13576 +
                      (C14272 + C14296) * C13577 + (C14275 + C14297) * C13578) *
                         C90634 * C90752 -
                     (((C13579 * C3489 + C90485 * C3492) * C90567 +
                       (C13579 * C3367 + C90485 * C3373) * C244) *
                          C13578 +
                      (C14297 + C14275) * C13577 + (C14296 + C14272) * C13576) *
                         C90634 * C90555) *
                        C821 +
                    (((C14278 + C14298) * C13576 + (C14281 + C14299) * C13577 +
                      ((C13579 * C3366 + C90485 * C3372) * C244 +
                       (C13579 * C3488 + C90485 * C3491) * C90567) *
                          C13578) *
                         C90634 * C90555 -
                     ((C14299 + C14281) * C13578 + (C14298 + C14278) * C13577 +
                      ((C13579 * C246 + C90485 * C252) * C90567 +
                       (C13579 * C108 + C90485 * C114) * C244) *
                          C13576) *
                         C90634 * C90752) *
                        C822 +
                    ((((C13579 * C109 + C90485 * C115) * C244 +
                       (C13579 * C247 + C90485 * C253) * C90567) *
                          C13576 +
                      (C14284 + C14300) * C13577 + (C14287 + C14301) * C13578) *
                         C90634 * C90752 -
                     (((C13579 * C3487 + C90485 * C3490) * C90567 +
                       (C13579 * C3365 + C90485 * C3371) * C244) *
                          C13578 +
                      (C14301 + C14287) * C13577 + (C14300 + C14284) * C13576) *
                         C90634 * C90555) *
                        C823)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C13579 * C107 + C90485 * C113) * C244 +
                      (C13579 * C245 + C90485 * C251) * C90567) *
                         C13576 +
                     (C14272 + C14296) * C13577 + C15723 * C13578) *
                        C90634 * C3360 -
                    (C16420 * C13578 + (C14297 + C14275) * C13577 +
                     (C14296 + C14272) * C13576) *
                        C90634 * C3361 +
                    (C15723 * C13576 + (C15726 + C15733) * C13577 +
                     (C16421 + C16425) * C13578) *
                        C90634 * C3362 -
                    (((C13579 * C16417 + C90485 * C16418) * C90567 +
                      (C13579 * C16292 + C90485 * C16294) * C244) *
                         C13578 +
                     (C16425 + C16421) * C13577 + C16420 * C13576) *
                        C90634 * C3363) *
                   C90498) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C13579 * C107 + C90485 * C113) * C244 +
                       (C13579 * C245 + C90485 * C251) * C90567) *
                          C90623 * C26429 +
                      ((C13579 * C1700 + C90485 * C1708) * C244 +
                       (C13579 * C1879 + C90485 * C1884) * C90567) *
                          C90623 * C26430 +
                      ((C13579 * C4656 + C90485 * C4660) * C244 +
                       (C13579 * C4831 + C90485 * C4835) * C90567) *
                          C90623 * C26431) *
                         C90752 -
                     ((C18542 * C90567 + C18362 * C244) * C90623 * C26431 +
                      (C17049 * C90567 + C16859 * C244) * C90623 * C26430 +
                      (C14296 + C14272) * C90623 * C26429) *
                         C90555) *
                        C821 +
                    (((C14278 + C14298) * C90623 * C26429 +
                      (C21021 * C244 + C21245 * C90567) * C90623 * C26430 +
                      ((C13579 * C5470 + C90485 * C5476) * C244 +
                       (C13579 * C5636 + C90485 * C5639) * C90567) *
                          C90623 * C26431) *
                         C90555 -
                     (((C13579 * C4832 + C90485 * C4836) * C90567 +
                       (C13579 * C4657 + C90485 * C4661) * C244) *
                          C90623 * C26431 +
                      ((C13579 * C1878 + C90485 * C1883) * C90567 +
                       (C13579 * C1697 + C90485 * C1702) * C244) *
                          C90623 * C26430 +
                      ((C13579 * C246 + C90485 * C252) * C90567 +
                       (C13579 * C108 + C90485 * C114) * C244) *
                          C90623 * C26429) *
                         C90752) *
                        C822 +
                    ((((C13579 * C109 + C90485 * C115) * C244 +
                       (C13579 * C247 + C90485 * C253) * C90567) *
                          C90623 * C26429 +
                      ((C13579 * C1698 + C90485 * C1703) * C244 +
                       (C13579 * C1877 + C90485 * C1882) * C90567) *
                          C90623 * C26430 +
                      ((C13579 * C4658 + C90485 * C4662) * C244 +
                       (C13579 * C4833 + C90485 * C4837) * C90567) *
                          C90623 * C26431) *
                         C90752 -
                     (((C13579 * C5635 + C90485 * C5638) * C90567 +
                       (C13579 * C5469 + C90485 * C5475) * C244) *
                          C90623 * C26431 +
                      ((C13579 * C4077 + C90485 * C4083) * C90567 +
                       (C13579 * C3893 + C90485 * C3899) * C244) *
                          C90623 * C26430 +
                      (C14300 + C14284) * C90623 * C26429) *
                         C90555) *
                        C823)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C13579 * C107 + C90485 * C113) * C244 +
                      (C13579 * C245 + C90485 * C251) * C90567) *
                         C90623 * C26429 +
                     (C27600 * C244 + C27814 * C90567) * C90623 * C26430 +
                     (C27606 * C244 + C27815 * C90567) * C90623 * C26431) *
                        C3360 -
                    ((C18542 * C90567 + C18362 * C244) * C90623 * C26431 +
                     (C17049 * C90567 + C16859 * C244) * C90623 * C26430 +
                     (C14296 + C14272) * C90623 * C26429) *
                        C3361 +
                    (C15723 * C90623 * C26429 +
                     (C16857 * C244 + C17051 * C90567) * C90623 * C26430 +
                     (C18364 * C244 + C18543 * C90567) * C90623 * C26431) *
                        C3362 -
                    (((C13579 * C18525 + C90485 * C18526) * C90567 +
                      (C13579 * C18349 + C90485 * C18351) * C244) *
                         C90623 * C26431 +
                     (C17052 * C90567 + C16860 * C244) * C90623 * C26430 +
                     C16420 * C90623 * C26429) *
                        C3363) *
                   C90498) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[43] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C307 * C107 + C90623 * C308) * C3364 +
                      (C307 * C116 + C90623 * C314) * C90498) *
                         C90634 * C89 +
                     (C337 * C3364 + C338 * C90498) * C90634 * C90 +
                     (C339 * C3364 + C340 * C90498) * C90634 * C91) *
                        C90567 * C3360 -
                    ((C1119 * C90498 + C1118 * C3364) * C90634 * C91 +
                     (C1117 * C90498 + C1116 * C3364) * C90634 * C90 +
                     ((C307 * C839 + C90623 * C1098) * C90498 +
                      (C307 * C832 + C90623 * C1094) * C3364) *
                         C90634 * C89) *
                        C90567 * C3361 +
                    (((C307 * C2570 + C90623 * C2827) * C3364 +
                      (C307 * C2577 + C90623 * C2831) * C90498) *
                         C90634 * C89 +
                     (C2844 * C3364 + C2845 * C90498) * C90634 * C90 +
                     (C2846 * C3364 + C2847 * C90498) * C90634 * C91) *
                        C90567 * C3362 -
                    (((C307 * C3368 + C90623 * C3546) * C90498 +
                      (C307 * C3365 + C90623 * C3543) * C3364) *
                         C90634 * C91 +
                     ((C307 * C3369 + C90623 * C3547) * C90498 +
                      (C307 * C3366 + C90623 * C3544) * C3364) *
                         C90634 * C90 +
                     ((C307 * C3370 + C90623 * C3548) * C90498 +
                      (C307 * C3367 + C90623 * C3545) * C3364) *
                         C90634 * C89) *
                        C90567 * C3363)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C307 * C107 + C90623 * C308) * C826 +
                      (C307 * C116 + C90623 * C314) * C821 - C337 * C827 -
                      C338 * C822 + C339 * C828 + C340 * C823) *
                         C90634 * C89 +
                     (C337 * C826 + C338 * C821 - C339 * C827 - C340 * C822 +
                      C341 * C828 + C342 * C823) *
                         C90634 * C90 +
                     (C339 * C826 + C340 * C821 - C341 * C827 - C342 * C822 +
                      C343 * C828 + C344 * C823) *
                         C90634 * C91) *
                        C90567 * C90752 +
                    ((C1116 * C827 -
                      ((C307 * C839 + C90623 * C1098) * C821 +
                       (C307 * C832 + C90623 * C1094) * C826) +
                      C1117 * C822 - C1118 * C828 - C1119 * C823) *
                         C90634 * C89 +
                     (C1118 * C827 - (C1117 * C821 + C1116 * C826) +
                      C1119 * C822 - C1120 * C828 - C1121 * C823) *
                         C90634 * C90 +
                     (C1120 * C827 - (C1119 * C821 + C1118 * C826) +
                      C1121 * C822 - (C307 * C833 + C90623 * C1097) * C828 -
                      (C307 * C843 + C90623 * C1102) * C823) *
                         C90634 * C91) *
                        C90567 * C90555)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   (((C13730 * C107 + C13576 * C308 + C13731 * C832 +
                      C13577 * C1094 + C13732 * C2570 + C13578 * C2827) *
                         C826 +
                     (C13730 * C116 + C13576 * C314 + C13731 * C839 +
                      C13577 * C1098 + C13732 * C2577 + C13578 * C2831) *
                         C821 -
                     (C13732 * C2571 + C13578 * C2828 + C13731 * C829 +
                      C13577 * C1093 + C13730 * C108 + C13576 * C309) *
                         C827 -
                     (C13732 * C2578 + C13578 * C2832 + C13731 * C838 +
                      C13577 * C1099 + C13730 * C117 + C13576 * C315) *
                         C822 +
                     (C13730 * C109 + C13576 * C310 + C13731 * C830 +
                      C13577 * C1095 + C13732 * C2572 + C13578 * C2829) *
                         C828 +
                     (C13730 * C118 + C13576 * C316 + C13731 * C837 +
                      C13577 * C1100 + C13732 * C2579 + C13578 * C2833) *
                         C823) *
                        C90634 * C90485 * C90567 * C90752 +
                    ((C13730 * C829 + C13576 * C1093 + C13731 * C2571 +
                      C13577 * C2828 + C13732 * C3366 + C13578 * C3544) *
                         C827 -
                     ((C13732 * C3370 + C13578 * C3548 + C13731 * C2577 +
                       C13577 * C2831 + C13730 * C839 + C13576 * C1098) *
                          C821 +
                      (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 +
                       C13577 * C2827 + C13730 * C832 + C13576 * C1094) *
                          C826) +
                     (C13730 * C838 + C13576 * C1099 + C13731 * C2578 +
                      C13577 * C2832 + C13732 * C3369 + C13578 * C3547) *
                         C822 -
                     (C13732 * C3365 + C13578 * C3543 + C13731 * C2572 +
                      C13577 * C2829 + C13730 * C830 + C13576 * C1095) *
                         C828 -
                     (C13732 * C3368 + C13578 * C3546 + C13731 * C2579 +
                      C13577 * C2833 + C13730 * C837 + C13576 * C1100) *
                         C823) *
                        C90634 * C90485 * C90567 * C90555)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   (((C13730 * C107 + C13576 * C308 + C13731 * C832 +
                      C13577 * C1094 + C13732 * C2570 + C13578 * C2827) *
                         C3364 +
                     (C13730 * C116 + C13576 * C314 + C13731 * C839 +
                      C13577 * C1098 + C13732 * C2577 + C13578 * C2831) *
                         C90498) *
                        C90634 * C90485 * C90567 * C3360 -
                    ((C13732 * C3370 + C13578 * C3548 + C13731 * C2577 +
                      C13577 * C2831 + C13730 * C839 + C13576 * C1098) *
                         C90498 +
                     (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 +
                      C13577 * C2827 + C13730 * C832 + C13576 * C1094) *
                         C3364) *
                        C90634 * C90485 * C90567 * C3361 +
                    ((C13730 * C2570 + C13576 * C2827 + C13731 * C3367 +
                      C13577 * C3545 + C13732 * C15525 + C13578 * C15808) *
                         C3364 +
                     (C13730 * C2577 + C13576 * C2831 + C13731 * C3370 +
                      C13577 * C3548 + C13732 * C15528 + C13578 * C15810) *
                         C90498) *
                        C90634 * C90485 * C90567 * C3362 -
                    ((C13732 * C16293 + C13578 * C16476 + C13731 * C15528 +
                      C13577 * C15810 + C13730 * C3370 + C13576 * C3548) *
                         C90498 +
                     (C13732 * C16292 + C13578 * C16475 + C13731 * C15525 +
                      C13577 * C15808 + C13730 * C3367 + C13576 * C3545) *
                         C3364) *
                        C90634 * C90485 * C90567 * C3363)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C307 * C107 + C90623 * C308) * C826 +
                      (C307 * C116 + C90623 * C314) * C821 - C337 * C827 -
                      C338 * C822 + C339 * C828 + C340 * C823) *
                         C26429 +
                     ((C307 * C1700 + C90623 * C1962) * C826 +
                      (C307 * C1707 + C90623 * C1966) * C821 - C1984 * C827 -
                      C1985 * C822 + C1986 * C828 + C1987 * C823) *
                         C26430 +
                     ((C307 * C4656 + C90623 * C4913) * C826 +
                      (C307 * C4663 + C90623 * C4917) * C821 - C4930 * C827 -
                      C4931 * C822 + C4932 * C828 + C4933 * C823) *
                         C26431) *
                        C90485 * C90567 * C90752 +
                    ((C1116 * C827 -
                      ((C307 * C839 + C90623 * C1098) * C821 +
                       (C307 * C832 + C90623 * C1094) * C826) +
                      C1117 * C822 - C1118 * C828 - C1119 * C823) *
                         C26429 +
                     (C8433 * C827 -
                      ((C307 * C3900 + C90623 * C4167) * C821 +
                       (C307 * C3891 + C90623 * C4161) * C826) +
                      C8434 * C822 - C8435 * C828 - C8436 * C823) *
                         C26430 +
                     ((C307 * C5470 + C90623 * C5716) * C827 -
                      ((C307 * C5474 + C90623 * C5720) * C821 +
                       (C307 * C5471 + C90623 * C5717) * C826) +
                      (C307 * C5473 + C90623 * C5719) * C822 -
                      (C307 * C5469 + C90623 * C5715) * C828 -
                      (C307 * C5472 + C90623 * C5718) * C823) *
                         C26431) *
                        C90485 * C90567 * C90555)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C307 * C107 + C90623 * C308) * C3364 +
                      (C307 * C116 + C90623 * C314) * C90498) *
                         C26429 +
                     (C27910 * C3364 + C27911 * C90498) * C26430 +
                     (C27912 * C3364 + C27913 * C90498) * C26431) *
                        C90485 * C90567 * C3360 -
                    (((C307 * C5474 + C90623 * C5720) * C90498 +
                      (C307 * C5471 + C90623 * C5717) * C3364) *
                         C26431 +
                     ((C307 * C3900 + C90623 * C4167) * C90498 +
                      (C307 * C3891 + C90623 * C4161) * C3364) *
                         C26430 +
                     ((C307 * C839 + C90623 * C1098) * C90498 +
                      (C307 * C832 + C90623 * C1094) * C3364) *
                         C26429) *
                        C90485 * C90567 * C3361 +
                    (((C307 * C2570 + C90623 * C2827) * C3364 +
                      (C307 * C2577 + C90623 * C2831) * C90498) *
                         C26429 +
                     ((C307 * C3896 + C90623 * C4166) * C3364 +
                      (C307 * C3905 + C90623 * C4172) * C90498) *
                         C26430 +
                     ((C307 * C17651 + C90623 * C17889) * C3364 +
                      (C307 * C17654 + C90623 * C17891) * C90498) *
                         C26431) *
                        C90485 * C90567 * C3362 -
                    (((C307 * C18350 + C90623 * C18620) * C90498 +
                      (C307 * C18349 + C90623 * C18619) * C3364) *
                         C26431 +
                     ((C307 * C16838 + C90623 * C17133) * C90498 +
                      (C307 * C16835 + C90623 * C17131) * C3364) *
                         C26430 +
                     ((C307 * C3370 + C90623 * C3548) * C90498 +
                      (C307 * C3367 + C90623 * C3545) * C3364) *
                         C26429) *
                        C90485 * C90567 * C3363)) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[43] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C307 * C107 + C90623 * C308) * C3427 +
           (C307 * C182 + C90623 * C394) * C3360 -
           (C307 * C832 + C90623 * C1094) * C3428 -
           (C307 * C927 + C90623 * C1195) * C3361 +
           (C307 * C2570 + C90623 * C2827) * C3429 +
           (C307 * C2663 + C90623 * C2921) * C3362 -
           (C307 * C3367 + C90623 * C3545) * C3430 -
           (C307 * C3433 + C90623 * C3599) * C3363) *
              C90634 * C89 +
          (C337 * C3427 + C413 * C3360 - C1116 * C3428 - C1216 * C3361 +
           C2844 * C3429 + C2940 * C3362 -
           (C307 * C3366 + C90623 * C3544) * C3430 -
           (C307 * C3432 + C90623 * C3600) * C3363) *
              C90634 * C90 +
          (C339 * C3427 + C414 * C3360 - C1118 * C3428 - C1218 * C3361 +
           C2846 * C3429 + C2941 * C3362 -
           (C307 * C3365 + C90623 * C3543) * C3430 -
           (C307 * C3431 + C90623 * C3601) * C3363) *
              C90634 * C91) *
         C90498 * C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C923 +
            (C307 * C182 + C90623 * C394) * C90752 -
            (C307 * C832 + C90623 * C1094) * C924 -
            (C307 * C927 + C90623 * C1195) * C90555) *
               C90634 * C89 +
           (C1201 + C1202 - C1203 - C1220) * C90634 * C90 + C1225 * C91) *
              C821 +
          ((C1203 - (C1202 + C1201) + C1220) * C90634 * C89 +
           (C1208 - (C1207 + C1206) + C1222) * C90634 * C90 +
           (C1211 - (C1212 + C1213) + C1223) * C90634 * C91) *
              C822 +
          (C1225 * C89 + (C1213 + C1212 - C1211 - C1223) * C90634 * C90 +
           (C343 * C923 + C416 * C90752 -
            (C307 * C833 + C90623 * C1097) * C924 -
            (C307 * C929 + C90623 * C1199) * C90555) *
               C90634 * C91) *
              C823) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C923 +
           (C13730 * C182 + C13576 * C394 + C13731 * C927 + C13577 * C1195 +
            C13732 * C2663 + C13578 * C2921) *
               C90752 -
           (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
            C13730 * C832 + C13576 * C1094) *
               C924 -
           (C13732 * C3433 + C13578 * C3599 + C13731 * C2663 + C13577 * C2921 +
            C13730 * C927 + C13576 * C1195) *
               C90555) *
              C90634 * C90485 * C821 +
          ((C13730 * C829 + C13576 * C1093 + C13731 * C2571 + C13577 * C2828 +
            C13732 * C3366 + C13578 * C3544) *
               C924 -
           ((C13732 * C2664 + C13578 * C2922 + C13731 * C926 + C13577 * C1196 +
             C13730 * C183 + C13576 * C395) *
                C90752 +
            (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
             C13730 * C108 + C13576 * C309) *
                C923) +
           (C13730 * C926 + C13576 * C1196 + C13731 * C2664 + C13577 * C2922 +
            C13732 * C3432 + C13578 * C3600) *
               C90555) *
              C90634 * C90485 * C822 +
          ((C13730 * C109 + C13576 * C310 + C13731 * C830 + C13577 * C1095 +
            C13732 * C2572 + C13578 * C2829) *
               C923 +
           (C13730 * C184 + C13576 * C396 + C13731 * C925 + C13577 * C1197 +
            C13732 * C2665 + C13578 * C2923) *
               C90752 -
           (C13732 * C3365 + C13578 * C3543 + C13731 * C2572 + C13577 * C2829 +
            C13730 * C830 + C13576 * C1095) *
               C924 -
           (C13732 * C3431 + C13578 * C3601 + C13731 * C2665 + C13577 * C2923 +
            C13730 * C925 + C13576 * C1197) *
               C90555) *
              C90634 * C90485 * C823) *
         C90567) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
           C13732 * C2570 + C13578 * C2827) *
              C3427 +
          (C13730 * C182 + C13576 * C394 + C13731 * C927 + C13577 * C1195 +
           C13732 * C2663 + C13578 * C2921) *
              C3360 -
          (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
           C13730 * C832 + C13576 * C1094) *
              C3428 -
          (C13732 * C3433 + C13578 * C3599 + C13731 * C2663 + C13577 * C2921 +
           C13730 * C927 + C13576 * C1195) *
              C3361 +
          (C13730 * C2570 + C13576 * C2827 + C13731 * C3367 + C13577 * C3545 +
           C13732 * C15525 + C13578 * C15808) *
              C3429 +
          (C13730 * C2663 + C13576 * C2921 + C13731 * C3433 + C13577 * C3599 +
           C13732 * C15634 + C13578 * C15886) *
              C3362 -
          (C13732 * C16292 + C13578 * C16475 + C13731 * C15525 +
           C13577 * C15808 + C13730 * C3367 + C13576 * C3545) *
              C3430 -
          (C13732 * C16362 + C13578 * C16527 + C13731 * C15634 +
           C13577 * C15886 + C13730 * C3433 + C13576 * C3599) *
              C3363) *
         C90634 * C90485 * C90498 * C90567) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C923 +
            (C307 * C182 + C90623 * C394) * C90752 -
            (C307 * C832 + C90623 * C1094) * C924 -
            (C307 * C927 + C90623 * C1195) * C90555) *
               C26429 +
           ((C307 * C1700 + C90623 * C1962) * C923 +
            (C307 * C1794 + C90623 * C2066) * C90752 -
            (C307 * C3891 + C90623 * C4161) * C924 -
            (C307 * C3989 + C90623 * C4247) * C90555) *
               C26430 +
           ((C307 * C4656 + C90623 * C4913) * C923 +
            (C307 * C4746 + C90623 * C5007) * C90752 -
            (C307 * C5471 + C90623 * C5717) * C924 -
            (C307 * C5557 + C90623 * C5795) * C90555) *
               C26431) *
              C90485 * C821 +
          ((C1203 - (C1202 + C1201) + C1220) * C26429 +
           (C10192 - (C10193 + C10194) + C10195) * C26430 +
           ((C307 * C5470 + C90623 * C5716) * C924 -
            (C5018 * C90752 + C4930 * C923) +
            (C307 * C5556 + C90623 * C5796) * C90555) *
               C26431) *
              C90485 * C822 +
          (C1224 * C26429 + (C10198 + C10197 - C10196 - C10199) * C26430 +
           (C4932 * C923 + C5019 * C90752 -
            (C307 * C5469 + C90623 * C5715) * C924 -
            (C307 * C5555 + C90623 * C5797) * C90555) *
               C26431) *
              C90485 * C823) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C307 * C107 + C90623 * C308) * C3427 +
           (C307 * C182 + C90623 * C394) * C3360 -
           (C307 * C832 + C90623 * C1094) * C3428 -
           (C307 * C927 + C90623 * C1195) * C3361 +
           (C307 * C2570 + C90623 * C2827) * C3429 +
           (C307 * C2663 + C90623 * C2921) * C3362 -
           (C307 * C3367 + C90623 * C3545) * C3430 -
           (C307 * C3433 + C90623 * C3599) * C3363) *
              C26429 +
          (C27910 * C3427 + C27998 * C3360 -
           (C307 * C3891 + C90623 * C4161) * C3428 -
           (C307 * C3989 + C90623 * C4247) * C3361 +
           (C307 * C3896 + C90623 * C4166) * C3429 +
           (C307 * C3994 + C90623 * C4248) * C3362 -
           (C307 * C16835 + C90623 * C17131) * C3430 -
           (C307 * C16942 + C90623 * C17209) * C3363) *
              C26430 +
          (C27912 * C3427 + C27999 * C3360 -
           (C307 * C5471 + C90623 * C5717) * C3428 -
           (C307 * C5557 + C90623 * C5795) * C3361 +
           (C307 * C17651 + C90623 * C17889) * C3429 +
           (C307 * C17733 + C90623 * C17967) * C3362 -
           (C307 * C18349 + C90623 * C18619) * C3430 -
           (C307 * C18443 + C90623 * C18695) * C3363) *
              C26431) *
         C90485 * C90498 * C90567) /
            (p * q * std::sqrt(p + q));
    d2eeyz[43] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C244 +
            (C307 * C245 + C90623 * C474) * C90567) *
               C90634 * C89 +
           (C481 + C497) * C90634 * C90 + C503 * C91) *
              C3360 -
          (C1321 * C91 + (C1318 + C1310) * C90634 * C90 +
           ((C307 * C1011 + C90623 * C1301) * C90567 +
            (C307 * C832 + C90623 * C1094) * C244) *
               C90634 * C89) *
              C3361 +
          (((C307 * C2570 + C90623 * C2827) * C244 +
            (C307 * C2745 + C90623 * C3017) * C90567) *
               C90634 * C89 +
           (C3022 + C3030) * C90634 * C90 + (C3025 + C3031) * C90634 * C91) *
              C3362 -
          (((C307 * C3487 + C90623 * C3652) * C90567 +
            (C307 * C3365 + C90623 * C3543) * C244) *
               C90634 * C91 +
           ((C307 * C3488 + C90623 * C3653) * C90567 +
            (C307 * C3366 + C90623 * C3544) * C244) *
               C90634 * C90 +
           ((C307 * C3489 + C90623 * C3654) * C90567 +
            (C307 * C3367 + C90623 * C3545) * C244) *
               C90634 * C89) *
              C3363) *
         C90498) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C244 +
             (C307 * C245 + C90623 * C474) * C90567) *
                C90634 * C89 +
            (C481 + C497) * C90634 * C90 + C503 * C91) *
               C90752 -
           (C1321 * C91 + (C1318 + C1310) * C90634 * C90 +
            ((C307 * C1011 + C90623 * C1301) * C90567 +
             (C307 * C832 + C90623 * C1094) * C244) *
                C90634 * C89) *
               C90555) *
              C821 +
          (((C1310 + C1318) * C90634 * C89 + (C1307 + C1317) * C90634 * C90 +
            (C1311 + C1319) * C90634 * C91) *
               C90555 -
           (C504 * C91 + (C498 + C484) * C90634 * C90 +
            (C497 + C481) * C90634 * C89) *
               C90752) *
              C822 +
          ((C503 * C89 + (C489 + C499) * C90634 * C90 +
            (C490 + C500) * C90634 * C91) *
               C90752 -
           (((C307 * C1013 + C90623 * C1303) * C90567 +
             (C307 * C833 + C90623 * C1097) * C244) *
                C90634 * C91 +
            (C1319 + C1311) * C90634 * C90 + C1321 * C89) *
               C90555) *
              C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
             C13732 * C2570 + C13578 * C2827) *
                C244 +
            (C13730 * C245 + C13576 * C474 + C13731 * C1011 + C13577 * C1301 +
             C13732 * C2745 + C13578 * C3017) *
                C90567) *
               C90634 * C90485 * C90752 -
           ((C13732 * C3489 + C13578 * C3654 + C13731 * C2745 + C13577 * C3017 +
             C13730 * C1011 + C13576 * C1301) *
                C90567 +
            (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
             C13730 * C832 + C13576 * C1094) *
                C244) *
               C90634 * C90485 * C90555) *
              C821 +
          (((C13730 * C829 + C13576 * C1093 + C13731 * C2571 + C13577 * C2828 +
             C13732 * C3366 + C13578 * C3544) *
                C244 +
            (C13730 * C1010 + C13576 * C1300 + C13731 * C2746 + C13577 * C3018 +
             C13732 * C3488 + C13578 * C3653) *
                C90567) *
               C90634 * C90485 * C90555 -
           ((C13732 * C2746 + C13578 * C3018 + C13731 * C1010 + C13577 * C1300 +
             C13730 * C246 + C13576 * C475) *
                C90567 +
            (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
             C13730 * C108 + C13576 * C309) *
                C244) *
               C90634 * C90485 * C90752) *
              C822 +
          (((C13730 * C109 + C13576 * C310 + C13731 * C830 + C13577 * C1095 +
             C13732 * C2572 + C13578 * C2829) *
                C244 +
            (C13730 * C247 + C13576 * C476 + C13731 * C1009 + C13577 * C1299 +
             C13732 * C2747 + C13578 * C3019) *
                C90567) *
               C90634 * C90485 * C90752 -
           ((C13732 * C3487 + C13578 * C3652 + C13731 * C2747 + C13577 * C3019 +
             C13730 * C1009 + C13576 * C1299) *
                C90567 +
            (C13732 * C3365 + C13578 * C3543 + C13731 * C2572 + C13577 * C2829 +
             C13730 * C830 + C13576 * C1095) *
                C244) *
               C90634 * C90485 * C90555) *
              C823)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C244 +
           (C13730 * C245 + C13576 * C474 + C13731 * C1011 + C13577 * C1301 +
            C13732 * C2745 + C13578 * C3017) *
               C90567) *
              C90634 * C90485 * C3360 -
          ((C13732 * C3489 + C13578 * C3654 + C13731 * C2745 + C13577 * C3017 +
            C13730 * C1011 + C13576 * C1301) *
               C90567 +
           (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
            C13730 * C832 + C13576 * C1094) *
               C244) *
              C90634 * C90485 * C3361 +
          ((C13730 * C2570 + C13576 * C2827 + C13731 * C3367 + C13577 * C3545 +
            C13732 * C15525 + C13578 * C15808) *
               C244 +
           (C13730 * C2745 + C13576 * C3017 + C13731 * C3489 + C13577 * C3654 +
            C13732 * C15718 + C13578 * C15962) *
               C90567) *
              C90634 * C90485 * C3362 -
          ((C13732 * C16417 + C13578 * C16578 + C13731 * C15718 +
            C13577 * C15962 + C13730 * C3489 + C13576 * C3654) *
               C90567 +
           (C13732 * C16292 + C13578 * C16475 + C13731 * C15525 +
            C13577 * C15808 + C13730 * C3367 + C13576 * C3545) *
               C244) *
              C90634 * C90485 * C3363) *
         C90498) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C244 +
             (C307 * C245 + C90623 * C474) * C90567) *
                C26429 +
            ((C307 * C1700 + C90623 * C1962) * C244 +
             (C307 * C1879 + C90623 * C2159) * C90567) *
                C26430 +
            ((C307 * C4656 + C90623 * C4913) * C244 +
             (C307 * C4831 + C90623 * C5095) * C90567) *
                C26431) *
               C90485 * C90752 -
           (((C307 * C5637 + C90623 * C5872) * C90567 +
             (C307 * C5471 + C90623 * C5717) * C244) *
                C26431 +
            ((C307 * C4075 + C90623 * C4327) * C90567 +
             (C307 * C3891 + C90623 * C4161) * C244) *
                C26430 +
            ((C307 * C1011 + C90623 * C1301) * C90567 +
             (C307 * C832 + C90623 * C1094) * C244) *
                C26429) *
               C90485 * C90555) *
              C821 +
          (((C1310 + C1318) * C26429 +
            (C8433 * C244 + C8659 * C90567) * C26430 +
            ((C307 * C5470 + C90623 * C5716) * C244 +
             (C307 * C5636 + C90623 * C5873) * C90567) *
                C26431) *
               C90485 * C90555 -
           ((C5114 * C90567 + C4930 * C244) * C26431 +
            (C2180 * C90567 + C1984 * C244) * C26430 + (C497 + C481) * C26429) *
               C90485 * C90752) *
              C822 +
          ((C501 * C26429 + (C1986 * C244 + C2182 * C90567) * C26430 +
            (C4932 * C244 + C5115 * C90567) * C26431) *
               C90485 * C90752 -
           (((C307 * C5635 + C90623 * C5874) * C90567 +
             (C307 * C5469 + C90623 * C5715) * C244) *
                C26431 +
            (C8660 * C90567 + C8435 * C244) * C26430 + C1320 * C26429) *
               C90485 * C90555) *
              C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C244 +
            (C307 * C245 + C90623 * C474) * C90567) *
               C26429 +
           (C27910 * C244 + C28080 * C90567) * C26430 +
           (C27912 * C244 + C28081 * C90567) * C26431) *
              C90485 * C3360 -
          (((C307 * C5637 + C90623 * C5872) * C90567 +
            (C307 * C5471 + C90623 * C5717) * C244) *
               C26431 +
           ((C307 * C4075 + C90623 * C4327) * C90567 +
            (C307 * C3891 + C90623 * C4161) * C244) *
               C26430 +
           ((C307 * C1011 + C90623 * C1301) * C90567 +
            (C307 * C832 + C90623 * C1094) * C244) *
               C26429) *
              C90485 * C3361 +
          (((C307 * C2570 + C90623 * C2827) * C244 +
            (C307 * C2745 + C90623 * C3017) * C90567) *
               C26429 +
           ((C307 * C3896 + C90623 * C4166) * C244 +
            (C307 * C4080 + C90623 * C4330) * C90567) *
               C26430 +
           ((C307 * C17651 + C90623 * C17889) * C244 +
            (C307 * C17811 + C90623 * C18043) * C90567) *
               C26431) *
              C90485 * C3362 -
          (((C307 * C18525 + C90623 * C18770) * C90567 +
            (C307 * C18349 + C90623 * C18619) * C244) *
               C26431 +
           ((C307 * C17029 + C90623 * C17285) * C90567 +
            (C307 * C16835 + C90623 * C17131) * C244) *
               C26430 +
           ((C307 * C3489 + C90623 * C3654) * C90567 +
            (C307 * C3367 + C90623 * C3545) * C244) *
               C26429) *
              C90485 * C3363) *
         C90498) /
            (p * q * std::sqrt(p + q));
    d2eezx[43] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C90634 * C555) * C3364 +
                      (C554 * C116 + C90634 * C561) * C90498) *
                         C89 +
                     (C584 * C3364 + C585 * C90498) * C90 +
                     (C586 * C3364 + C587 * C90498) * C91) *
                        C90623 * C90567 * C3360 -
                    ((C1421 * C90498 + C1420 * C3364) * C91 +
                     (C1419 * C90498 + C1418 * C3364) * C90 +
                     ((C554 * C839 + C90634 * C1400) * C90498 +
                      (C554 * C832 + C90634 * C1396) * C3364) *
                         C89) *
                        C90623 * C90567 * C3361 +
                    (((C554 * C2570 + C90634 * C3105) * C3364 +
                      (C554 * C2577 + C90634 * C3109) * C90498) *
                         C89 +
                     (C3122 * C3364 + C3123 * C90498) * C90 +
                     (C3124 * C3364 + C3125 * C90498) * C91) *
                        C90623 * C90567 * C3362 -
                    (((C554 * C3368 + C90634 * C3708) * C90498 +
                      (C554 * C3365 + C90634 * C3705) * C3364) *
                         C91 +
                     ((C554 * C3369 + C90634 * C3709) * C90498 +
                      (C554 * C3366 + C90634 * C3706) * C3364) *
                         C90 +
                     ((C554 * C3370 + C90634 * C3710) * C90498 +
                      (C554 * C3367 + C90634 * C3707) * C3364) *
                         C89) *
                        C90623 * C90567 * C3363)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C90634 * C555) * C826 +
                      (C554 * C116 + C90634 * C561) * C821 - C584 * C827 -
                      C585 * C822 + C586 * C828 + C587 * C823) *
                         C89 +
                     (C584 * C826 + C585 * C821 - C586 * C827 - C587 * C822 +
                      C588 * C828 + C589 * C823) *
                         C90 +
                     (C586 * C826 + C587 * C821 - C588 * C827 - C589 * C822 +
                      C590 * C828 + C591 * C823) *
                         C91) *
                        C90623 * C90567 * C90752 +
                    ((C1418 * C827 -
                      ((C554 * C839 + C90634 * C1400) * C821 +
                       (C554 * C832 + C90634 * C1396) * C826) +
                      C1419 * C822 - C1420 * C828 - C1421 * C823) *
                         C89 +
                     (C1420 * C827 - (C1419 * C821 + C1418 * C826) +
                      C1421 * C822 - C1422 * C828 - C1423 * C823) *
                         C90 +
                     (C1422 * C827 - (C1421 * C821 + C1420 * C826) +
                      C1423 * C822 - (C554 * C833 + C90634 * C1399) * C828 -
                      (C554 * C843 + C90634 * C1404) * C823) *
                         C91) *
                        C90623 * C90567 * C90555)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C90634 * C555) * C826 +
                      (C554 * C116 + C90634 * C561) * C821 - C584 * C827 -
                      C585 * C822 + C586 * C828 + C587 * C823) *
                         C90485 * C13576 +
                     (C14618 + C14619 - C14602 - C14603 + C14604 + C14605) *
                         C90485 * C13577 +
                     (C14620 + C14621 - C14610 - C14611 + C14612 + C14613) *
                         C90485 * C13578) *
                        C90567 * C90752 +
                    ((C14602 - (C14619 + C14618) + C14603 - C14604 - C14605) *
                         C90485 * C13576 +
                     (C14610 - (C14621 + C14620) + C14611 - C14612 - C14613) *
                         C90485 * C13577 +
                     ((C554 * C3366 + C90634 * C3706) * C827 -
                      ((C554 * C3370 + C90634 * C3710) * C821 +
                       (C554 * C3367 + C90634 * C3707) * C826) +
                      (C554 * C3369 + C90634 * C3709) * C822 -
                      (C554 * C3365 + C90634 * C3705) * C828 -
                      (C554 * C3368 + C90634 * C3708) * C823) *
                         C90485 * C13578) *
                        C90567 * C90555)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C90634 * C555) * C3364 +
                      (C554 * C116 + C90634 * C561) * C90498) *
                         C90485 * C13576 +
                     (C16632 + C16633) * C90485 * C13577 + C16646 * C13578) *
                        C90567 * C3360 -
                    (C16647 * C13578 + (C16635 + C16634) * C90485 * C13577 +
                     (C16633 + C16632) * C90485 * C13576) *
                        C90567 * C3361 +
                    (C16646 * C13576 + (C16637 + C16636) * C90485 * C13577 +
                     (C16648 + C16649) * C90485 * C13578) *
                        C90567 * C3362 -
                    (((C554 * C16293 + C90634 * C16630) * C90498 +
                      (C554 * C16292 + C90634 * C16629) * C3364) *
                         C90485 * C13578 +
                     (C16649 + C16648) * C90485 * C13577 + C16647 * C13576) *
                        C90567 * C3363)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C26732 * C107 + C26429 * C555 + C26733 * C1700 +
                      C26430 * C2264 + C26734 * C4656 + C26431 * C5191) *
                         C826 +
                     (C26732 * C116 + C26429 * C561 + C26733 * C1707 +
                      C26430 * C2268 + C26734 * C4663 + C26431 * C5195) *
                         C821 -
                     (C26734 * C4657 + C26431 * C5192 + C26733 * C1697 +
                      C26430 * C2263 + C26732 * C108 + C26429 * C556) *
                         C827 -
                     (C26734 * C4664 + C26431 * C5196 + C26733 * C1706 +
                      C26430 * C2269 + C26732 * C117 + C26429 * C562) *
                         C822 +
                     (C26732 * C109 + C26429 * C557 + C26733 * C1698 +
                      C26430 * C2265 + C26734 * C4658 + C26431 * C5193) *
                         C828 +
                     (C26732 * C118 + C26429 * C563 + C26733 * C1705 +
                      C26430 * C2270 + C26734 * C4665 + C26431 * C5197) *
                         C823) *
                        C90485 * C90623 * C90567 * C90752 +
                    ((C26732 * C829 + C26429 * C1395 + C26733 * C3892 +
                      C26430 * C4408 + C26734 * C5470 + C26431 * C5950) *
                         C827 -
                     ((C26734 * C5474 + C26431 * C5954 + C26733 * C3900 +
                       C26430 * C4413 + C26732 * C839 + C26429 * C1400) *
                          C821 +
                      (C26734 * C5471 + C26431 * C5951 + C26733 * C3891 +
                       C26430 * C4407 + C26732 * C832 + C26429 * C1396) *
                          C826) +
                     (C26732 * C838 + C26429 * C1401 + C26733 * C3901 +
                      C26430 * C4414 + C26734 * C5473 + C26431 * C5953) *
                         C822 -
                     (C26734 * C5469 + C26431 * C5949 + C26733 * C3893 +
                      C26430 * C4409 + C26732 * C830 + C26429 * C1397) *
                         C828 -
                     (C26734 * C5472 + C26431 * C5952 + C26733 * C3902 +
                      C26430 * C4415 + C26732 * C837 + C26429 * C1402) *
                         C823) *
                        C90485 * C90623 * C90567 * C90555)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C26732 * C107 + C26429 * C555 + C26733 * C1700 +
                      C26430 * C2264 + C26734 * C4656 + C26431 * C5191) *
                         C3364 +
                     (C26732 * C116 + C26429 * C561 + C26733 * C1707 +
                      C26430 * C2268 + C26734 * C4663 + C26431 * C5195) *
                         C90498) *
                        C90485 * C90623 * C90567 * C3360 -
                    ((C26734 * C5474 + C26431 * C5954 + C26733 * C3900 +
                      C26430 * C4413 + C26732 * C839 + C26429 * C1400) *
                         C90498 +
                     (C26734 * C5471 + C26431 * C5951 + C26733 * C3891 +
                      C26430 * C4407 + C26732 * C832 + C26429 * C1396) *
                         C3364) *
                        C90485 * C90623 * C90567 * C3361 +
                    ((C26732 * C2570 + C26429 * C3105 + C26733 * C3896 +
                      C26430 * C4412 + C26734 * C17651 + C26431 * C18119) *
                         C3364 +
                     (C26732 * C2577 + C26429 * C3109 + C26733 * C3905 +
                      C26430 * C4418 + C26734 * C17654 + C26431 * C18121) *
                         C90498) *
                        C90485 * C90623 * C90567 * C3362 -
                    ((C26734 * C18350 + C26431 * C18846 + C26733 * C16838 +
                      C26430 * C17363 + C26732 * C3370 + C26429 * C3710) *
                         C90498 +
                     (C26734 * C18349 + C26431 * C18845 + C26733 * C16835 +
                      C26430 * C17361 + C26732 * C3367 + C26429 * C3707) *
                         C3364) *
                        C90485 * C90623 * C90567 * C3363)) /
                      (p * q * std::sqrt(p + q));
    d2eezy[43] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C554 * C107 + C90634 * C555) * C3427 +
           (C554 * C182 + C90634 * C641) * C3360 -
           (C554 * C832 + C90634 * C1396) * C3428 -
           (C554 * C927 + C90634 * C1497) * C3361 +
           (C554 * C2570 + C90634 * C3105) * C3429 +
           (C554 * C2663 + C90634 * C3199) * C3362 -
           (C554 * C3367 + C90634 * C3707) * C3430 -
           (C554 * C3433 + C90634 * C3761) * C3363) *
              C89 +
          (C584 * C3427 + C660 * C3360 - C1418 * C3428 - C1518 * C3361 +
           C3122 * C3429 + C3218 * C3362 -
           (C554 * C3366 + C90634 * C3706) * C3430 -
           (C554 * C3432 + C90634 * C3762) * C3363) *
              C90 +
          (C586 * C3427 + C661 * C3360 - C1420 * C3428 - C1520 * C3361 +
           C3124 * C3429 + C3219 * C3362 -
           (C554 * C3365 + C90634 * C3705) * C3430 -
           (C554 * C3431 + C90634 * C3763) * C3363) *
              C91) *
         C90623 * C90498 * C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C923 +
            (C554 * C182 + C90634 * C641) * C90752 -
            (C554 * C832 + C90634 * C1396) * C924 -
            (C554 * C927 + C90634 * C1497) * C90555) *
               C89 +
           (C1503 + C1504 - C1505 - C1522) * C90 + C1526 * C91) *
              C90623 * C821 +
          ((C1505 - (C1504 + C1503) + C1522) * C89 +
           (C1510 - (C1509 + C1508) + C1524) * C90 +
           (C1513 - (C1514 + C1515) + C1525) * C91) *
              C90623 * C822 +
          (C1526 * C89 + (C1515 + C1514 - C1513 - C1525) * C90 +
           (C590 * C923 + C663 * C90752 -
            (C554 * C833 + C90634 * C1399) * C924 -
            (C554 * C929 + C90634 * C1501) * C90555) *
               C91) *
              C90623 * C823) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C923 +
            (C554 * C182 + C90634 * C641) * C90752 - C14614 * C924 -
            C14700 * C90555) *
               C90485 * C13576 +
           (C14614 * C923 + C14700 * C90752 - C14616 * C924 - C14701 * C90555) *
               C90485 * C13577 +
           (C14616 * C923 + C14701 * C90752 -
            (C554 * C3367 + C90634 * C3707) * C924 -
            (C554 * C3433 + C90634 * C3761) * C90555) *
               C90485 * C13578) *
              C821 +
          ((C1505 - (C1504 + C1503) + C1522) * C90485 * C13576 +
           (C3122 * C924 - (C1518 * C90752 + C1418 * C923) + C3218 * C90555) *
               C90485 * C13577 +
           ((C554 * C3366 + C90634 * C3706) * C924 -
            (C3218 * C90752 + C3122 * C923) +
            (C554 * C3432 + C90634 * C3762) * C90555) *
               C90485 * C13578) *
              C822 +
          (C1526 * C90485 * C13576 +
           (C1420 * C923 + C1520 * C90752 - C3124 * C924 - C3219 * C90555) *
               C90485 * C13577 +
           (C3124 * C923 + C3219 * C90752 -
            (C554 * C3365 + C90634 * C3705) * C924 -
            (C554 * C3431 + C90634 * C3763) * C90555) *
               C90485 * C13578) *
              C823) *
         C90567) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C554 * C107 + C90634 * C555) * C3427 +
           (C554 * C182 + C90634 * C641) * C3360 - C14614 * C3428 -
           C14700 * C3361 + C14616 * C3429 + C14701 * C3362 - C16062 * C3430 -
           C16151 * C3363) *
              C90485 * C13576 +
          (C14614 * C3427 + C14700 * C3360 - C14616 * C3428 - C14701 * C3361 +
           C16062 * C3429 + C16151 * C3362 - C16644 * C3430 - C16703 * C3363) *
              C90485 * C13577 +
          (C14616 * C3427 + C14701 * C3360 - C16062 * C3428 - C16151 * C3361 +
           C16644 * C3429 + C16703 * C3362 -
           (C554 * C16292 + C90634 * C16629) * C3430 -
           (C554 * C16362 + C90634 * C16699) * C3363) *
              C90485 * C13578) *
         C90498 * C90567) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C26732 * C107 + C26429 * C555 + C26733 * C1700 + C26430 * C2264 +
            C26734 * C4656 + C26431 * C5191) *
               C923 +
           (C26732 * C182 + C26429 * C641 + C26733 * C1794 + C26430 * C2368 +
            C26734 * C4746 + C26431 * C5285) *
               C90752 -
           (C26734 * C5471 + C26431 * C5951 + C26733 * C3891 + C26430 * C4407 +
            C26732 * C832 + C26429 * C1396) *
               C924 -
           (C26734 * C5557 + C26431 * C6029 + C26733 * C3989 + C26430 * C4493 +
            C26732 * C927 + C26429 * C1497) *
               C90555) *
              C90485 * C90623 * C821 +
          ((C26732 * C829 + C26429 * C1395 + C26733 * C3892 + C26430 * C4408 +
            C26734 * C5470 + C26431 * C5950) *
               C924 -
           ((C26734 * C4747 + C26431 * C5286 + C26733 * C1791 + C26430 * C2365 +
             C26732 * C183 + C26429 * C642) *
                C90752 +
            (C26734 * C4657 + C26431 * C5192 + C26733 * C1697 + C26430 * C2263 +
             C26732 * C108 + C26429 * C556) *
                C923) +
           (C26732 * C926 + C26429 * C1498 + C26733 * C3990 + C26430 * C4495 +
            C26734 * C5556 + C26431 * C6030) *
               C90555) *
              C90485 * C90623 * C822 +
          ((C26732 * C109 + C26429 * C557 + C26733 * C1698 + C26430 * C2265 +
            C26734 * C4658 + C26431 * C5193) *
               C923 +
           (C26732 * C184 + C26429 * C643 + C26733 * C1792 + C26430 * C2366 +
            C26734 * C4748 + C26431 * C5287) *
               C90752 -
           (C26734 * C5469 + C26431 * C5949 + C26733 * C3893 + C26430 * C4409 +
            C26732 * C830 + C26429 * C1397) *
               C924 -
           (C26734 * C5555 + C26431 * C6031 + C26733 * C3991 + C26430 * C4497 +
            C26732 * C925 + C26429 * C1499) *
               C90555) *
              C90485 * C90623 * C823) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((C26732 * C107 + C26429 * C555 + C26733 * C1700 + C26430 * C2264 +
           C26734 * C4656 + C26431 * C5191) *
              C3427 +
          (C26732 * C182 + C26429 * C641 + C26733 * C1794 + C26430 * C2368 +
           C26734 * C4746 + C26431 * C5285) *
              C3360 -
          (C26734 * C5471 + C26431 * C5951 + C26733 * C3891 + C26430 * C4407 +
           C26732 * C832 + C26429 * C1396) *
              C3428 -
          (C26734 * C5557 + C26431 * C6029 + C26733 * C3989 + C26430 * C4493 +
           C26732 * C927 + C26429 * C1497) *
              C3361 +
          (C26732 * C2570 + C26429 * C3105 + C26733 * C3896 + C26430 * C4412 +
           C26734 * C17651 + C26431 * C18119) *
              C3429 +
          (C26732 * C2663 + C26429 * C3199 + C26733 * C3994 + C26430 * C4494 +
           C26734 * C17733 + C26431 * C18197) *
              C3362 -
          (C26734 * C18349 + C26431 * C18845 + C26733 * C16835 +
           C26430 * C17361 + C26732 * C3367 + C26429 * C3707) *
              C3430 -
          (C26734 * C18443 + C26431 * C18937 + C26733 * C16942 +
           C26430 * C17465 + C26732 * C3433 + C26429 * C3761) *
              C3363) *
         C90485 * C90623 * C90498 * C90567) /
            (p * q * std::sqrt(p + q));
    d2eezz[43] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C244 +
            (C554 * C245 + C90634 * C719) * C90567) *
               C89 +
           (C726 + C742) * C90 + C746 * C91) *
              C90623 * C3360 -
          (C1621 * C91 + (C1619 + C1611) * C90 +
           ((C554 * C1011 + C90634 * C1602) * C90567 +
            (C554 * C832 + C90634 * C1396) * C244) *
               C89) *
              C90623 * C3361 +
          (((C554 * C2570 + C90634 * C3105) * C244 +
            (C554 * C2745 + C90634 * C3295) * C90567) *
               C89 +
           (C3300 + C3308) * C90 + (C3303 + C3309) * C91) *
              C90623 * C3362 -
          (((C554 * C3487 + C90634 * C3814) * C90567 +
            (C554 * C3365 + C90634 * C3705) * C244) *
               C91 +
           ((C554 * C3488 + C90634 * C3815) * C90567 +
            (C554 * C3366 + C90634 * C3706) * C244) *
               C90 +
           ((C554 * C3489 + C90634 * C3816) * C90567 +
            (C554 * C3367 + C90634 * C3707) * C244) *
               C89) *
              C90623 * C3363) *
         C90498) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C244 +
             (C554 * C245 + C90634 * C719) * C90567) *
                C89 +
            (C726 + C742) * C90 + C746 * C91) *
               C90623 * C90752 -
           (C1621 * C91 + (C1619 + C1611) * C90 +
            ((C554 * C1011 + C90634 * C1602) * C90567 +
             (C554 * C832 + C90634 * C1396) * C244) *
                C89) *
               C90623 * C90555) *
              C821 +
          (((C1611 + C1619) * C89 + (C1608 + C1618) * C90 +
            (C1612 + C1620) * C91) *
               C90623 * C90555 -
           (C747 * C91 + (C743 + C729) * C90 + (C742 + C726) * C89) * C90623 *
               C90752) *
              C822 +
          ((C746 * C89 + (C734 + C744) * C90 + (C735 + C745) * C91) * C90623 *
               C90752 -
           (((C554 * C1013 + C90634 * C1604) * C90567 +
             (C554 * C833 + C90634 * C1399) * C244) *
                C91 +
            (C1620 + C1612) * C90 + C1621 * C89) *
               C90623 * C90555) *
              C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C244 +
             (C554 * C245 + C90634 * C719) * C90567) *
                C90485 * C13576 +
            (C14776 + C14784) * C90485 * C13577 +
            (C14779 + C14785) * C90485 * C13578) *
               C90752 -
           (((C554 * C3489 + C90634 * C3816) * C90567 +
             (C554 * C3367 + C90634 * C3707) * C244) *
                C90485 * C13578 +
            (C14785 + C14779) * C90485 * C13577 +
            (C14784 + C14776) * C90485 * C13576) *
               C90555) *
              C821 +
          (((C1611 + C1619) * C90485 * C13576 +
            (C3300 + C3308) * C90485 * C13577 +
            ((C554 * C3366 + C90634 * C3706) * C244 +
             (C554 * C3488 + C90634 * C3815) * C90567) *
                C90485 * C13578) *
               C90555 -
           ((C3308 + C3300) * C90485 * C13578 +
            (C1619 + C1611) * C90485 * C13577 +
            (C742 + C726) * C90485 * C13576) *
               C90752) *
              C822 +
          ((C746 * C90485 * C13576 + (C1608 + C1618) * C90485 * C13577 +
            (C3303 + C3309) * C90485 * C13578) *
               C90752 -
           (((C554 * C3487 + C90634 * C3814) * C90567 +
             (C554 * C3365 + C90634 * C3705) * C244) *
                C90485 * C13578 +
            (C3309 + C3303) * C90485 * C13577 + C1621 * C90485 * C13576) *
               C90555) *
              C823)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C244 +
            (C554 * C245 + C90634 * C719) * C90567) *
               C90485 * C13576 +
           (C14776 + C14784) * C90485 * C13577 + C16237 * C13578) *
              C3360 -
          (C16759 * C13578 + (C14785 + C14779) * C90485 * C13577 +
           (C14784 + C14776) * C90485 * C13576) *
              C3361 +
          (C16237 * C13576 + (C16232 + C16241) * C90485 * C13577 +
           (C16756 + C16761) * C90485 * C13578) *
              C3362 -
          (((C554 * C16417 + C90634 * C16753) * C90567 +
            (C554 * C16292 + C90634 * C16629) * C244) *
               C90485 * C13578 +
           (C16761 + C16756) * C90485 * C13577 + C16759 * C13576) *
              C3363) *
         C90498) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26732 * C107 + C26429 * C555 + C26733 * C1700 + C26430 * C2264 +
             C26734 * C4656 + C26431 * C5191) *
                C244 +
            (C26732 * C245 + C26429 * C719 + C26733 * C1879 + C26430 * C2460 +
             C26734 * C4831 + C26431 * C5373) *
                C90567) *
               C90485 * C90623 * C90752 -
           ((C26734 * C5637 + C26431 * C6106 + C26733 * C4075 + C26430 * C4573 +
             C26732 * C1011 + C26429 * C1602) *
                C90567 +
            (C26734 * C5471 + C26431 * C5951 + C26733 * C3891 + C26430 * C4407 +
             C26732 * C832 + C26429 * C1396) *
                C244) *
               C90485 * C90623 * C90555) *
              C821 +
          (((C26732 * C829 + C26429 * C1395 + C26733 * C3892 + C26430 * C4408 +
             C26734 * C5470 + C26431 * C5950) *
                C244 +
            (C26732 * C1010 + C26429 * C1601 + C26733 * C4076 + C26430 * C4574 +
             C26734 * C5636 + C26431 * C6107) *
                C90567) *
               C90485 * C90623 * C90555 -
           ((C26734 * C4832 + C26431 * C5374 + C26733 * C1878 + C26430 * C2461 +
             C26732 * C246 + C26429 * C720) *
                C90567 +
            (C26734 * C4657 + C26431 * C5192 + C26733 * C1697 + C26430 * C2263 +
             C26732 * C108 + C26429 * C556) *
                C244) *
               C90485 * C90623 * C90752) *
              C822 +
          (((C26732 * C109 + C26429 * C557 + C26733 * C1698 + C26430 * C2265 +
             C26734 * C4658 + C26431 * C5193) *
                C244 +
            (C26732 * C247 + C26429 * C721 + C26733 * C1877 + C26430 * C2462 +
             C26734 * C4833 + C26431 * C5375) *
                C90567) *
               C90485 * C90623 * C90752 -
           ((C26734 * C5635 + C26431 * C6108 + C26733 * C4077 + C26430 * C4575 +
             C26732 * C1009 + C26429 * C1600) *
                C90567 +
            (C26734 * C5469 + C26431 * C5949 + C26733 * C3893 + C26430 * C4409 +
             C26732 * C830 + C26429 * C1397) *
                C244) *
               C90485 * C90623 * C90555) *
              C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C26732 * C107 + C26429 * C555 + C26733 * C1700 + C26430 * C2264 +
            C26734 * C4656 + C26431 * C5191) *
               C244 +
           (C26732 * C245 + C26429 * C719 + C26733 * C1879 + C26430 * C2460 +
            C26734 * C4831 + C26431 * C5373) *
               C90567) *
              C90485 * C90623 * C3360 -
          ((C26734 * C5637 + C26431 * C6106 + C26733 * C4075 + C26430 * C4573 +
            C26732 * C1011 + C26429 * C1602) *
               C90567 +
           (C26734 * C5471 + C26431 * C5951 + C26733 * C3891 + C26430 * C4407 +
            C26732 * C832 + C26429 * C1396) *
               C244) *
              C90485 * C90623 * C3361 +
          ((C26732 * C2570 + C26429 * C3105 + C26733 * C3896 + C26430 * C4412 +
            C26734 * C17651 + C26431 * C18119) *
               C244 +
           (C26732 * C2745 + C26429 * C3295 + C26733 * C4080 + C26430 * C4576 +
            C26734 * C17811 + C26431 * C18273) *
               C90567) *
              C90485 * C90623 * C3362 -
          ((C26734 * C18525 + C26431 * C19018 + C26733 * C17029 +
            C26430 * C17550 + C26732 * C3489 + C26429 * C3816) *
               C90567 +
           (C26734 * C18349 + C26431 * C18845 + C26733 * C16835 +
            C26430 * C17361 + C26732 * C3367 + C26429 * C3707) *
               C244) *
              C90485 * C90623 * C3363) *
         C90498) /
            (p * q * std::sqrt(p + q));
    d2eexx[44] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
             C91 * C115) *
                C3364 +
            (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 + C102 * C118 +
             C91 * C127) *
                C90498) *
               C90623 * C90634 * C90753 -
           ((C102 * C1705 + C91 * C1712 + C101 * C1706 + C90 * C1713 +
             C100 * C1707 + C89 * C1714) *
                C90498 +
            (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
             C100 * C1700 + C89 * C1708) *
                C3364) *
               C90623 * C90634 * C90579) *
              C2565 +
          (((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
             C102 * C3893 + C91 * C3899) *
                C3364 +
            (C100 * C3900 + C89 * C3909 + C101 * C3901 + C90 * C3910 +
             C102 * C3902 + C91 * C3911) *
                C90498) *
               C90623 * C90634 * C90579 -
           ((C102 * C837 + C91 * C844 + C101 * C838 + C90 * C845 + C100 * C839 +
             C89 * C846) *
                C90498 +
            (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 + C100 * C832 +
             C89 * C840) *
                C3364) *
               C90623 * C90634 * C90753) *
              C2566 +
          (((C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
             C102 * C2572 + C91 * C2576) *
                C3364 +
            (C100 * C2577 + C89 * C2582 + C101 * C2578 + C90 * C2583 +
             C102 * C2579 + C91 * C2584) *
                C90498) *
               C90623 * C90634 * C90753 -
           ((C102 * C3903 + C91 * C3912 + C101 * C3904 + C90 * C3913 +
             C100 * C3905 + C89 * C3914) *
                C90498 +
            (C102 * C3894 + C91 * C3906 + C101 * C3895 + C90 * C3907 +
             C100 * C3896 + C89 * C3908) *
                C3364) *
               C90623 * C90634 * C90579) *
              C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C826 +
           (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 + C102 * C118 +
            C91 * C127) *
               C821 -
           (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 + C100 * C108 +
            C89 * C114) *
               C827 -
           (C102 * C120 + C91 * C128 + C101 * C118 + C90 * C127 + C100 * C117 +
            C89 * C126) *
               C822 +
           (C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 + C102 * C111 +
            C91 * C121) *
               C828 +
           (C100 * C118 + C89 * C127 + C101 * C120 + C90 * C128 + C102 * C122 +
            C91 * C129) *
               C823) *
              C90623 * C90634 * C90753 +
          ((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
            C102 * C1699 + C91 * C1704) *
               C827 -
           ((C102 * C1705 + C91 * C1712 + C101 * C1706 + C90 * C1713 +
             C100 * C1707 + C89 * C1714) *
                C821 +
            (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
             C100 * C1700 + C89 * C1708) *
                C826) +
           (C100 * C1706 + C89 * C1713 + C101 * C1705 + C90 * C1712 +
            C102 * C1709 + C91 * C1715) *
               C822 -
           (C102 * C1701 + C91 * C1710 + C101 * C1699 + C90 * C1704 +
            C100 * C1698 + C89 * C1703) *
               C828 -
           (C102 * C1711 + C91 * C1716 + C101 * C1709 + C90 * C1715 +
            C100 * C1705 + C89 * C1712) *
               C823) *
              C90623 * C90634 * C90579) *
         C90541) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C826 +
            (C13579 * C116 + C90485 * C125) * C821 -
            (C13579 * C108 + C90485 * C114) * C827 -
            (C13579 * C117 + C90485 * C126) * C822 +
            (C13579 * C109 + C90485 * C115) * C828 +
            (C13579 * C118 + C90485 * C127) * C823) *
               C13576 +
           (C14094 + C14095 - C14096 - C14097 + C14098 + C14099) * C13577 +
           (C14100 + C14101 - C14102 - C14103 + C14104 + C14105) * C13578) *
              C90634 * C90753 +
          (((C13579 * C1697 + C90485 * C1702) * C827 -
            ((C13579 * C1707 + C90485 * C1714) * C821 +
             (C13579 * C1700 + C90485 * C1708) * C826) +
            (C13579 * C1706 + C90485 * C1713) * C822 -
            (C13579 * C1698 + C90485 * C1703) * C828 -
            (C13579 * C1705 + C90485 * C1712) * C823) *
               C13576 +
           ((C13579 * C3892 + C90485 * C3898) * C827 -
            ((C13579 * C3900 + C90485 * C3909) * C821 +
             (C13579 * C3891 + C90485 * C3897) * C826) +
            (C13579 * C3901 + C90485 * C3910) * C822 -
            (C13579 * C3893 + C90485 * C3899) * C828 -
            (C13579 * C3902 + C90485 * C3911) * C823) *
               C13577 +
           ((C13579 * C3895 + C90485 * C3907) * C827 -
            ((C13579 * C3905 + C90485 * C3914) * C821 +
             (C13579 * C3896 + C90485 * C3908) * C826) +
            (C13579 * C3904 + C90485 * C3913) * C822 -
            (C13579 * C3894 + C90485 * C3906) * C828 -
            (C13579 * C3903 + C90485 * C3912) * C823) *
               C13578) *
              C90634 * C90579) *
         C90541) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C3364 +
             (C13579 * C116 + C90485 * C125) * C90498) *
                C13576 +
            (C16297 + C16298) * C13577 + C16307 * C13578) *
               C90634 * C90753 -
           (C16868 * C13578 + (C16864 + C16865) * C13577 +
            ((C13579 * C1707 + C90485 * C1714) * C90498 +
             (C13579 * C1700 + C90485 * C1708) * C3364) *
                C13576) *
               C90634 * C90579) *
              C2565 +
          (((C16865 + C16864) * C13576 + (C16863 + C16862) * C13577 +
            (C16866 + C16867) * C13578) *
               C90634 * C90579 -
           (C16308 * C13578 + (C16300 + C16299) * C13577 +
            (C16298 + C16297) * C13576) *
               C90634 * C90753) *
              C2566 +
          ((C16307 * C13576 + (C16302 + C16301) * C13577 +
            (C16311 + C16312) * C13578) *
               C90634 * C90753 -
           (((C13579 * C16839 + C90485 * C16842) * C90498 +
             (C13579 * C16836 + C90485 * C16840) * C3364) *
                C13578 +
            (C16867 + C16866) * C13577 + C16868 * C13576) *
               C90634 * C90579) *
              C2567)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C826 +
            (C13579 * C116 + C90485 * C125) * C821 -
            (C13579 * C108 + C90485 * C114) * C827 -
            (C13579 * C117 + C90485 * C126) * C822 +
            (C13579 * C109 + C90485 * C115) * C828 +
            (C13579 * C118 + C90485 * C127) * C823) *
               C90623 * C26429 +
           (C27612 + C27613 - C27614 - C27615 + C27616 + C27617) * C90623 *
               C26430 +
           (C27618 + C27619 - C27620 - C27621 + C27622 + C27623) * C90623 *
               C26431) *
              C90753 +
          ((C27614 - (C27613 + C27612) + C27615 - C27616 - C27617) * C90623 *
               C26429 +
           (C27620 - (C27619 + C27618) + C27621 - C27622 - C27623) * C90623 *
               C26430 +
           ((C13579 * C6164 + C90485 * C6170) * C827 -
            ((C13579 * C6168 + C90485 * C6174) * C821 +
             (C13579 * C6165 + C90485 * C6171) * C826) +
            (C13579 * C6167 + C90485 * C6173) * C822 -
            (C13579 * C6163 + C90485 * C6169) * C828 -
            (C13579 * C6166 + C90485 * C6172) * C823) *
               C90623 * C26431) *
              C90579) *
         C90541) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C3364 +
             (C13579 * C116 + C90485 * C125) * C90498) *
                C90623 * C26429 +
            (C29494 + C29495) * C90623 * C26430 +
            (C29496 + C29497) * C90623 * C26431) *
               C90753 -
           (((C13579 * C6168 + C90485 * C6174) * C90498 +
             (C13579 * C6165 + C90485 * C6171) * C3364) *
                C90623 * C26431 +
            (C29497 + C29496) * C90623 * C26430 +
            (C29495 + C29494) * C90623 * C26429) *
               C90579) *
              C2565 +
          (((C16865 + C16864) * C90623 * C26429 +
            (C18366 + C18367) * C90623 * C26430 +
            ((C13579 * C19088 + C90485 * C19092) * C3364 +
             (C13579 * C19091 + C90485 * C19094) * C90498) *
                C90623 * C26431) *
               C90579 -
           ((C18367 + C18366) * C90623 * C26431 +
            (C16864 + C16865) * C90623 * C26430 +
            (C16298 + C16297) * C90623 * C26429) *
               C90753) *
              C2566 +
          ((C16307 * C90623 * C26429 + (C16863 + C16862) * C90623 * C26430 +
            (C18368 + C18369) * C90623 * C26431) *
               C90753 -
           (((C13579 * C19089 + C90485 * C19093) * C90498 +
             (C13579 * C19087 + C90485 * C19090) * C3364) *
                C90623 * C26431 +
            (C18369 + C18368) * C90623 * C26430 + C16868 * C90623 * C26429) *
               C90579) *
              C2567)) /
            (p * q * std::sqrt(p + q));
    d2eexy[44] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C2660 +
           (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 + C102 * C184 +
            C91 * C190) *
               C2565 -
           (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 + C100 * C832 +
            C89 * C840) *
               C2661 -
           (C102 * C925 + C91 * C930 + C101 * C926 + C90 * C931 + C100 * C927 +
            C89 * C932) *
               C2566 +
           (C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
            C102 * C2572 + C91 * C2576) *
               C2662 +
           (C100 * C2663 + C89 * C2667 + C101 * C2664 + C90 * C2668 +
            C102 * C2665 + C91 * C2669) *
               C2567) *
              C90623 * C90634 * C90498 * C90753 +
          ((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
            C102 * C3893 + C91 * C3899) *
               C2661 -
           ((C102 * C1792 + C91 * C1797 + C101 * C1791 + C90 * C1796 +
             C100 * C1794 + C89 * C1799) *
                C2565 +
            (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
             C100 * C1700 + C89 * C1708) *
                C2660) +
           (C100 * C3989 + C89 * C3995 + C101 * C3990 + C90 * C3996 +
            C102 * C3991 + C91 * C3997) *
               C2566 -
           (C102 * C3894 + C91 * C3906 + C101 * C3895 + C90 * C3907 +
            C100 * C3896 + C89 * C3908) *
               C2662 -
           (C102 * C3992 + C91 * C3998 + C101 * C3993 + C90 * C3999 +
            C100 * C3994 + C89 * C4000) *
               C2567) *
              C90623 * C90634 * C90498 * C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
             C91 * C115) *
                C181 +
            (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 + C102 * C184 +
             C91 * C190) *
                C90541) *
               C90623 * C90634 * C821 -
           ((C102 * C185 + C91 * C191 + C101 * C184 + C90 * C190 + C100 * C183 +
             C89 * C189) *
                C90541 +
            (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 + C100 * C108 +
             C89 * C114) *
                C181) *
               C90623 * C90634 * C822 +
           ((C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 + C102 * C111 +
             C91 * C121) *
                C181 +
            (C100 * C184 + C89 * C190 + C101 * C185 + C90 * C191 + C102 * C186 +
             C91 * C192) *
                C90541) *
               C90623 * C90634 * C823) *
              C90753 +
          (((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
             C102 * C1699 + C91 * C1704) *
                C181 +
            (C100 * C1791 + C89 * C1796 + C101 * C1792 + C90 * C1797 +
             C102 * C1793 + C91 * C1798) *
                C90541) *
               C90623 * C90634 * C822 -
           ((C102 * C1792 + C91 * C1797 + C101 * C1791 + C90 * C1796 +
             C100 * C1794 + C89 * C1799) *
                C90541 +
            (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
             C100 * C1700 + C89 * C1708) *
                C181) *
               C90623 * C90634 * C821 -
           ((C102 * C1795 + C91 * C1800 + C101 * C1793 + C90 * C1798 +
             C100 * C1792 + C89 * C1797) *
                C90541 +
            (C102 * C1701 + C91 * C1710 + C101 * C1699 + C90 * C1704 +
             C100 * C1698 + C89 * C1703) *
                C181) *
               C90623 * C90634 * C823) *
              C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C181 +
             (C13579 * C182 + C90485 * C188) * C90541) *
                C13576 +
            (C14082 * C181 + C14192 * C90541) * C13577 +
            (C14088 * C181 + C14193 * C90541) * C13578) *
               C90634 * C821 -
           ((C14195 * C90541 + C14090 * C181) * C13578 +
            (C14194 * C90541 + C14084 * C181) * C13577 +
            ((C13579 * C183 + C90485 * C189) * C90541 +
             (C13579 * C108 + C90485 * C114) * C181) *
                C13576) *
               C90634 * C822 +
           (((C13579 * C109 + C90485 * C115) * C181 +
             (C13579 * C184 + C90485 * C190) * C90541) *
                C13576 +
            (C14086 * C181 + C14196 * C90541) * C13577 +
            (C14092 * C181 + C14197 * C90541) * C13578) *
               C90634 * C823) *
              C90753 +
          ((((C13579 * C1697 + C90485 * C1702) * C181 +
             (C13579 * C1791 + C90485 * C1796) * C90541) *
                C13576 +
            ((C13579 * C3892 + C90485 * C3898) * C181 +
             (C13579 * C3990 + C90485 * C3996) * C90541) *
                C13577 +
            ((C13579 * C3895 + C90485 * C3907) * C181 +
             (C13579 * C3993 + C90485 * C3999) * C90541) *
                C13578) *
               C90634 * C822 -
           (((C13579 * C3994 + C90485 * C4000) * C90541 +
             (C13579 * C3896 + C90485 * C3908) * C181) *
                C13578 +
            ((C13579 * C3989 + C90485 * C3995) * C90541 +
             (C13579 * C3891 + C90485 * C3897) * C181) *
                C13577 +
            ((C13579 * C1794 + C90485 * C1799) * C90541 +
             (C13579 * C1700 + C90485 * C1708) * C181) *
                C13576) *
               C90634 * C821 -
           (((C13579 * C3992 + C90485 * C3998) * C90541 +
             (C13579 * C3894 + C90485 * C3906) * C181) *
                C13578 +
            ((C13579 * C3991 + C90485 * C3997) * C90541 +
             (C13579 * C3893 + C90485 * C3899) * C181) *
                C13577 +
            ((C13579 * C1792 + C90485 * C1797) * C90541 +
             (C13579 * C1698 + C90485 * C1703) * C181) *
                C13576) *
               C90634 * C823) *
              C90579)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C2660 +
            (C13579 * C182 + C90485 * C188) * C2565 - C14082 * C2661 -
            C14192 * C2566 + C14088 * C2662 + C14193 * C2567) *
               C13576 +
           (C14082 * C2660 + C14192 * C2565 - C14088 * C2661 - C14193 * C2566 +
            C15553 * C2662 + C15643 * C2567) *
               C13577 +
           (C14088 * C2660 + C14193 * C2565 - C15553 * C2661 - C15643 * C2566 +
            C16309 * C2662 + C16367 * C2567) *
               C13578) *
              C90634 * C90498 * C90753 +
          ((C16859 * C2661 -
            ((C13579 * C1794 + C90485 * C1799) * C2565 +
             (C13579 * C1700 + C90485 * C1708) * C2660) +
            C16953 * C2566 - C16857 * C2662 - C16954 * C2567) *
               C13576 +
           (C16857 * C2661 - (C16953 * C2565 + C16859 * C2660) +
            C16954 * C2566 - C16860 * C2662 - C16955 * C2567) *
               C13577 +
           (C16860 * C2661 - (C16954 * C2565 + C16857 * C2660) +
            C16955 * C2566 - (C13579 * C16836 + C90485 * C16840) * C2662 -
            (C13579 * C16943 + C90485 * C16945) * C2567) *
               C13578) *
              C90634 * C90498 * C90579)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C181 +
             (C13579 * C182 + C90485 * C188) * C90541) *
                C90623 * C26429 +
            (C27698 + C27722) * C90623 * C26430 +
            (C27701 + C27723) * C90623 * C26431) *
               C821 -
           ((C27724 + C27706) * C90623 * C26431 +
            (C27725 + C27709) * C90623 * C26430 +
            ((C13579 * C183 + C90485 * C189) * C90541 +
             (C13579 * C108 + C90485 * C114) * C181) *
                C90623 * C26429) *
               C822 +
           (((C13579 * C109 + C90485 * C115) * C181 +
             (C13579 * C184 + C90485 * C190) * C90541) *
                C90623 * C26429 +
            (C27710 + C27726) * C90623 * C26430 +
            (C27713 + C27727) * C90623 * C26431) *
               C823) *
              C90753 +
          (((C27709 + C27725) * C90623 * C26429 +
            (C27706 + C27724) * C90623 * C26430 +
            ((C13579 * C6164 + C90485 * C6170) * C181 +
             (C13579 * C6226 + C90485 * C6229) * C90541) *
                C90623 * C26431) *
               C822 -
           (((C13579 * C6227 + C90485 * C6230) * C90541 +
             (C13579 * C6165 + C90485 * C6171) * C181) *
                C90623 * C26431 +
            (C27723 + C27701) * C90623 * C26430 +
            (C27722 + C27698) * C90623 * C26429) *
               C821 -
           (((C13579 * C6225 + C90485 * C6228) * C90541 +
             (C13579 * C6163 + C90485 * C6169) * C181) *
                C90623 * C26431 +
            (C27727 + C27713) * C90623 * C26430 +
            (C27726 + C27710) * C90623 * C26429) *
               C823) *
              C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C2660 +
            (C13579 * C182 + C90485 * C188) * C2565 - C14082 * C2661 -
            C14192 * C2566 + C14088 * C2662 + C14193 * C2567) *
               C90623 * C26429 +
           (C29572 + C29573 - C29574 - C29575 + C29576 + C29577) * C90623 *
               C26430 +
           (C29578 + C29579 - C29580 - C29581 + C29582 + C29583) * C90623 *
               C26431) *
              C90498 * C90753 +
          ((C29574 - (C29573 + C29572) + C29575 - C29576 - C29577) * C90623 *
               C26429 +
           (C29580 - (C29579 + C29578) + C29581 - C29582 - C29583) * C90623 *
               C26430 +
           ((C13579 * C19088 + C90485 * C19092) * C2661 -
            ((C13579 * C6227 + C90485 * C6230) * C2565 +
             (C13579 * C6165 + C90485 * C6171) * C2660) +
            (C13579 * C19146 + C90485 * C19148) * C2566 -
            (C13579 * C19087 + C90485 * C19090) * C2662 -
            (C13579 * C19145 + C90485 * C19147) * C2567) *
               C90623 * C26431) *
              C90498 * C90579)) /
            (p * q * std::sqrt(p + q));
    d2eexz[44] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C1875 +
           (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 + C102 * C247 +
            C91 * C253) *
               C90753 -
           (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
            C100 * C1700 + C89 * C1708) *
               C1876 -
           (C102 * C1877 + C91 * C1882 + C101 * C1878 + C90 * C1883 +
            C100 * C1879 + C89 * C1884) *
               C90579) *
              C90623 * C90634 * C2565 +
          ((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
            C102 * C3893 + C91 * C3899) *
               C1876 -
           ((C102 * C1009 + C91 * C1014 + C101 * C1010 + C90 * C1015 +
             C100 * C1011 + C89 * C1016) *
                C90753 +
            (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 + C100 * C832 +
             C89 * C840) *
                C1875) +
           (C100 * C4075 + C89 * C4081 + C101 * C4076 + C90 * C4082 +
            C102 * C4077 + C91 * C4083) *
               C90579) *
              C90623 * C90634 * C2566 +
          ((C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
            C102 * C2572 + C91 * C2576) *
               C1875 +
           (C100 * C2745 + C89 * C2749 + C101 * C2746 + C90 * C2750 +
            C102 * C2747 + C91 * C2751) *
               C90753 -
           (C102 * C3894 + C91 * C3906 + C101 * C3895 + C90 * C3907 +
            C100 * C3896 + C89 * C3908) *
               C1876 -
           (C102 * C4078 + C91 * C4084 + C101 * C4079 + C90 * C4085 +
            C100 * C4080 + C89 * C4086) *
               C90579) *
              C90623 * C90634 * C2567) *
         C90498) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C1875 +
           (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 + C102 * C247 +
            C91 * C253) *
               C90753 -
           (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
            C100 * C1700 + C89 * C1708) *
               C1876 -
           (C102 * C1877 + C91 * C1882 + C101 * C1878 + C90 * C1883 +
            C100 * C1879 + C89 * C1884) *
               C90579) *
              C90623 * C90634 * C90541 * C821 +
          ((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
            C102 * C1699 + C91 * C1704) *
               C1876 -
           ((C102 * C248 + C91 * C254 + C101 * C247 + C90 * C253 + C100 * C246 +
             C89 * C252) *
                C90753 +
            (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 + C100 * C108 +
             C89 * C114) *
                C1875) +
           (C100 * C1878 + C89 * C1883 + C101 * C1877 + C90 * C1882 +
            C102 * C1880 + C91 * C1885) *
               C90579) *
              C90623 * C90634 * C90541 * C822 +
          ((C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 + C102 * C111 +
            C91 * C121) *
               C1875 +
           (C100 * C247 + C89 * C253 + C101 * C248 + C90 * C254 + C102 * C249 +
            C91 * C255) *
               C90753 -
           (C102 * C1701 + C91 * C1710 + C101 * C1699 + C90 * C1704 +
            C100 * C1698 + C89 * C1703) *
               C1876 -
           (C102 * C1881 + C91 * C1886 + C101 * C1880 + C90 * C1885 +
            C100 * C1877 + C89 * C1882) *
               C90579) *
              C90623 * C90634 * C90541 * C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C1875 +
            (C13579 * C245 + C90485 * C251) * C90753 -
            (C13579 * C1700 + C90485 * C1708) * C1876 -
            (C13579 * C1879 + C90485 * C1884) * C90579) *
               C13576 +
           (C14082 * C1875 + C14290 * C90753 -
            (C13579 * C3891 + C90485 * C3897) * C1876 -
            (C13579 * C4075 + C90485 * C4081) * C90579) *
               C13577 +
           (C14088 * C1875 + C14291 * C90753 -
            (C13579 * C3896 + C90485 * C3908) * C1876 -
            (C13579 * C4080 + C90485 * C4086) * C90579) *
               C13578) *
              C90634 * C90541 * C821 +
          (((C13579 * C1697 + C90485 * C1702) * C1876 -
            ((C13579 * C246 + C90485 * C252) * C90753 +
             (C13579 * C108 + C90485 * C114) * C1875) +
            (C13579 * C1878 + C90485 * C1883) * C90579) *
               C13576 +
           ((C13579 * C3892 + C90485 * C3898) * C1876 -
            (C14292 * C90753 + C14084 * C1875) +
            (C13579 * C4076 + C90485 * C4082) * C90579) *
               C13577 +
           ((C13579 * C3895 + C90485 * C3907) * C1876 -
            (C14293 * C90753 + C14090 * C1875) +
            (C13579 * C4079 + C90485 * C4085) * C90579) *
               C13578) *
              C90634 * C90541 * C822 +
          (((C13579 * C109 + C90485 * C115) * C1875 +
            (C13579 * C247 + C90485 * C253) * C90753 -
            (C13579 * C1698 + C90485 * C1703) * C1876 -
            (C13579 * C1877 + C90485 * C1882) * C90579) *
               C13576 +
           (C14086 * C1875 + C14294 * C90753 -
            (C13579 * C3893 + C90485 * C3899) * C1876 -
            (C13579 * C4077 + C90485 * C4083) * C90579) *
               C13577 +
           (C14092 * C1875 + C14295 * C90753 -
            (C13579 * C3894 + C90485 * C3906) * C1876 -
            (C13579 * C4078 + C90485 * C4084) * C90579) *
               C13578) *
              C90634 * C90541 * C823)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C1875 +
            (C13579 * C245 + C90485 * C251) * C90753 -
            (C13579 * C1700 + C90485 * C1708) * C1876 -
            (C13579 * C1879 + C90485 * C1884) * C90579) *
               C13576 +
           (C17034 + C17035 - C17036 - C17053) * C13577 + C17057 * C13578) *
              C90634 * C2565 +
          ((C17036 - (C17035 + C17034) + C17053) * C13576 +
           (C17041 - (C17040 + C17039) + C17055) * C13577 +
           (C17044 - (C17045 + C17046) + C17056) * C13578) *
              C90634 * C2566 +
          (C17057 * C13576 + (C17046 + C17045 - C17044 - C17056) * C13577 +
           (C16309 * C1875 + C16424 * C90753 -
            (C13579 * C16836 + C90485 * C16840) * C1876 -
            (C13579 * C17030 + C90485 * C17032) * C90579) *
               C13578) *
              C90634 * C2567) *
         C90498) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C1875 +
            (C13579 * C245 + C90485 * C251) * C90753 - C27600 * C1876 -
            C27814 * C90579) *
               C90623 * C26429 +
           (C27600 * C1875 + C27814 * C90753 - C27606 * C1876 -
            C27815 * C90579) *
               C90623 * C26430 +
           (C27606 * C1875 + C27815 * C90753 -
            (C13579 * C6165 + C90485 * C6171) * C1876 -
            (C13579 * C6287 + C90485 * C6290) * C90579) *
               C90623 * C26431) *
              C90541 * C821 +
          ((C27602 * C1876 -
            ((C13579 * C246 + C90485 * C252) * C90753 +
             (C13579 * C108 + C90485 * C114) * C1875) +
            C27816 * C90579) *
               C90623 * C26429 +
           (C27608 * C1876 - (C27816 * C90753 + C27602 * C1875) +
            C27817 * C90579) *
               C90623 * C26430 +
           ((C13579 * C6164 + C90485 * C6170) * C1876 -
            (C27817 * C90753 + C27608 * C1875) +
            (C13579 * C6286 + C90485 * C6289) * C90579) *
               C90623 * C26431) *
              C90541 * C822 +
          (((C13579 * C109 + C90485 * C115) * C1875 +
            (C13579 * C247 + C90485 * C253) * C90753 - C27604 * C1876 -
            C27818 * C90579) *
               C90623 * C26429 +
           (C27604 * C1875 + C27818 * C90753 - C27610 * C1876 -
            C27819 * C90579) *
               C90623 * C26430 +
           (C27610 * C1875 + C27819 * C90753 -
            (C13579 * C6163 + C90485 * C6169) * C1876 -
            (C13579 * C6285 + C90485 * C6288) * C90579) *
               C90623 * C26431) *
              C90541 * C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C1875 +
            (C13579 * C245 + C90485 * C251) * C90753 - C27600 * C1876 -
            C27814 * C90579) *
               C90623 * C26429 +
           (C27600 * C1875 + C27814 * C90753 - C27606 * C1876 -
            C27815 * C90579) *
               C90623 * C26430 +
           (C27606 * C1875 + C27815 * C90753 -
            (C13579 * C6165 + C90485 * C6171) * C1876 -
            (C13579 * C6287 + C90485 * C6290) * C90579) *
               C90623 * C26431) *
              C2565 +
          ((C17036 - (C17035 + C17034) + C17053) * C90623 * C26429 +
           (C18362 * C1876 - (C17049 * C90753 + C16859 * C1875) +
            C18542 * C90579) *
               C90623 * C26430 +
           ((C13579 * C19088 + C90485 * C19092) * C1876 -
            (C18542 * C90753 + C18362 * C1875) +
            (C13579 * C19199 + C90485 * C19201) * C90579) *
               C90623 * C26431) *
              C2566 +
          (C17057 * C90623 * C26429 +
           (C16857 * C1875 + C17051 * C90753 - C18364 * C1876 -
            C18543 * C90579) *
               C90623 * C26430 +
           (C18364 * C1875 + C18543 * C90753 -
            (C13579 * C19087 + C90485 * C19090) * C1876 -
            (C13579 * C19200 + C90485 * C19202) * C90579) *
               C90623 * C26431) *
              C2567) *
         C90498) /
            (p * q * std::sqrt(p + q));
    d2eeyx[44] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C3364 +
             (C307 * C116 + C90623 * C314) * C90498) *
                C90634 * C89 +
            (C337 * C3364 + C338 * C90498) * C90634 * C90 +
            (C339 * C3364 + C340 * C90498) * C90634 * C91) *
               C90753 -
           ((C1987 * C90498 + C1986 * C3364) * C90634 * C91 +
            (C1985 * C90498 + C1984 * C3364) * C90634 * C90 +
            ((C307 * C1707 + C90623 * C1966) * C90498 +
             (C307 * C1700 + C90623 * C1962) * C3364) *
                C90634 * C89) *
               C90579) *
              C2565 +
          ((((C307 * C3891 + C90623 * C4161) * C3364 +
             (C307 * C3900 + C90623 * C4167) * C90498) *
                C90634 * C89 +
            ((C307 * C3892 + C90623 * C4162) * C3364 +
             (C307 * C3901 + C90623 * C4168) * C90498) *
                C90634 * C90 +
            ((C307 * C3893 + C90623 * C4163) * C3364 +
             (C307 * C3902 + C90623 * C4169) * C90498) *
                C90634 * C91) *
               C90579 -
           ((C1119 * C90498 + C1118 * C3364) * C90634 * C91 +
            (C1117 * C90498 + C1116 * C3364) * C90634 * C90 +
            ((C307 * C839 + C90623 * C1098) * C90498 +
             (C307 * C832 + C90623 * C1094) * C3364) *
                C90634 * C89) *
               C90753) *
              C2566 +
          ((((C307 * C2570 + C90623 * C2827) * C3364 +
             (C307 * C2577 + C90623 * C2831) * C90498) *
                C90634 * C89 +
            (C2844 * C3364 + C2845 * C90498) * C90634 * C90 +
            (C2846 * C3364 + C2847 * C90498) * C90634 * C91) *
               C90753 -
           (((C307 * C3903 + C90623 * C4170) * C90498 +
             (C307 * C3894 + C90623 * C4164) * C3364) *
                C90634 * C91 +
            ((C307 * C3904 + C90623 * C4171) * C90498 +
             (C307 * C3895 + C90623 * C4165) * C3364) *
                C90634 * C90 +
            ((C307 * C3905 + C90623 * C4172) * C90498 +
             (C307 * C3896 + C90623 * C4166) * C3364) *
                C90634 * C89) *
               C90579) *
              C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C826 +
            (C307 * C116 + C90623 * C314) * C821 - C337 * C827 - C338 * C822 +
            C339 * C828 + C340 * C823) *
               C90634 * C89 +
           (C337 * C826 + C338 * C821 - C339 * C827 - C340 * C822 +
            C341 * C828 + C342 * C823) *
               C90634 * C90 +
           (C339 * C826 + C340 * C821 - C341 * C827 - C342 * C822 +
            C343 * C828 + C344 * C823) *
               C90634 * C91) *
              C90753 +
          ((C1984 * C827 -
            ((C307 * C1707 + C90623 * C1966) * C821 +
             (C307 * C1700 + C90623 * C1962) * C826) +
            C1985 * C822 - C1986 * C828 - C1987 * C823) *
               C90634 * C89 +
           (C1986 * C827 - (C1985 * C821 + C1984 * C826) + C1987 * C822 -
            C1988 * C828 - C1989 * C823) *
               C90634 * C90 +
           (C1988 * C827 - (C1987 * C821 + C1986 * C826) + C1989 * C822 -
            (C307 * C1701 + C90623 * C1965) * C828 -
            (C307 * C1711 + C90623 * C1970) * C823) *
               C90634 * C91) *
              C90579) *
         C90541) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C826 +
           (C13730 * C116 + C13576 * C314 + C13731 * C839 + C13577 * C1098 +
            C13732 * C2577 + C13578 * C2831) *
               C821 -
           (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
            C13730 * C108 + C13576 * C309) *
               C827 -
           (C13732 * C2578 + C13578 * C2832 + C13731 * C838 + C13577 * C1099 +
            C13730 * C117 + C13576 * C315) *
               C822 +
           (C13730 * C109 + C13576 * C310 + C13731 * C830 + C13577 * C1095 +
            C13732 * C2572 + C13578 * C2829) *
               C828 +
           (C13730 * C118 + C13576 * C316 + C13731 * C837 + C13577 * C1100 +
            C13732 * C2579 + C13578 * C2833) *
               C823) *
              C90634 * C90485 * C90753 +
          ((C13730 * C1697 + C13576 * C1961 + C13731 * C3892 + C13577 * C4162 +
            C13732 * C3895 + C13578 * C4165) *
               C827 -
           ((C13732 * C3905 + C13578 * C4172 + C13731 * C3900 + C13577 * C4167 +
             C13730 * C1707 + C13576 * C1966) *
                C821 +
            (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 + C13577 * C4161 +
             C13730 * C1700 + C13576 * C1962) *
                C826) +
           (C13730 * C1706 + C13576 * C1967 + C13731 * C3901 + C13577 * C4168 +
            C13732 * C3904 + C13578 * C4171) *
               C822 -
           (C13732 * C3894 + C13578 * C4164 + C13731 * C3893 + C13577 * C4163 +
            C13730 * C1698 + C13576 * C1963) *
               C828 -
           (C13732 * C3903 + C13578 * C4170 + C13731 * C3902 + C13577 * C4169 +
            C13730 * C1705 + C13576 * C1968) *
               C823) *
              C90634 * C90485 * C90579) *
         C90541) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
             C13732 * C2570 + C13578 * C2827) *
                C3364 +
            (C13730 * C116 + C13576 * C314 + C13731 * C839 + C13577 * C1098 +
             C13732 * C2577 + C13578 * C2831) *
                C90498) *
               C90634 * C90485 * C90753 -
           ((C13732 * C3905 + C13578 * C4172 + C13731 * C3900 + C13577 * C4167 +
             C13730 * C1707 + C13576 * C1966) *
                C90498 +
            (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 + C13577 * C4161 +
             C13730 * C1700 + C13576 * C1962) *
                C3364) *
               C90634 * C90485 * C90579) *
              C2565 +
          (((C13730 * C3891 + C13576 * C4161 + C13731 * C3896 + C13577 * C4166 +
             C13732 * C16835 + C13578 * C17131) *
                C3364 +
            (C13730 * C3900 + C13576 * C4167 + C13731 * C3905 + C13577 * C4172 +
             C13732 * C16838 + C13578 * C17133) *
                C90498) *
               C90634 * C90485 * C90579 -
           ((C13732 * C3370 + C13578 * C3548 + C13731 * C2577 + C13577 * C2831 +
             C13730 * C839 + C13576 * C1098) *
                C90498 +
            (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
             C13730 * C832 + C13576 * C1094) *
                C3364) *
               C90634 * C90485 * C90753) *
              C2566 +
          (((C13730 * C2570 + C13576 * C2827 + C13731 * C3367 + C13577 * C3545 +
             C13732 * C15525 + C13578 * C15808) *
                C3364 +
            (C13730 * C2577 + C13576 * C2831 + C13731 * C3370 + C13577 * C3548 +
             C13732 * C15528 + C13578 * C15810) *
                C90498) *
               C90634 * C90485 * C90753 -
           ((C13732 * C16839 + C13578 * C17134 + C13731 * C16838 +
             C13577 * C17133 + C13730 * C3905 + C13576 * C4172) *
                C90498 +
            (C13732 * C16836 + C13578 * C17132 + C13731 * C16835 +
             C13577 * C17131 + C13730 * C3896 + C13576 * C4166) *
                C3364) *
               C90634 * C90485 * C90579) *
              C2567)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C826 +
            (C307 * C116 + C90623 * C314) * C821 - C337 * C827 - C338 * C822 +
            C339 * C828 + C340 * C823) *
               C26429 +
           (C27914 + C27915 - C27898 - C27899 + C27900 + C27901) * C26430 +
           (C27916 + C27917 - C27906 - C27907 + C27908 + C27909) * C26431) *
              C90485 * C90753 +
          ((C27898 - (C27915 + C27914) + C27899 - C27900 - C27901) * C26429 +
           (C27906 - (C27917 + C27916) + C27907 - C27908 - C27909) * C26430 +
           ((C307 * C6164 + C90623 * C6342) * C827 -
            ((C307 * C6168 + C90623 * C6346) * C821 +
             (C307 * C6165 + C90623 * C6343) * C826) +
            (C307 * C6167 + C90623 * C6345) * C822 -
            (C307 * C6163 + C90623 * C6341) * C828 -
            (C307 * C6166 + C90623 * C6344) * C823) *
               C26431) *
              C90485 * C90579) *
         C90541) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C3364 +
             (C307 * C116 + C90623 * C314) * C90498) *
                C26429 +
            (C29732 + C29733) * C26430 + (C29734 + C29735) * C26431) *
               C90485 * C90753 -
           (((C307 * C6168 + C90623 * C6346) * C90498 +
             (C307 * C6165 + C90623 * C6343) * C3364) *
                C26431 +
            (C29735 + C29734) * C26430 + (C29733 + C29732) * C26429) *
               C90485 * C90579) *
              C2565 +
          (((C29760 + C29761) * C26429 + (C29762 + C29763) * C26430 +
            ((C307 * C19088 + C90623 * C19254) * C3364 +
             (C307 * C19091 + C90623 * C19256) * C90498) *
                C26431) *
               C90485 * C90579 -
           ((C29763 + C29762) * C26431 + (C29761 + C29760) * C26430 +
            ((C307 * C839 + C90623 * C1098) * C90498 +
             (C307 * C832 + C90623 * C1094) * C3364) *
                C26429) *
               C90485 * C90753) *
              C2566 +
          ((((C307 * C2570 + C90623 * C2827) * C3364 +
             (C307 * C2577 + C90623 * C2831) * C90498) *
                C26429 +
            (C29764 + C29765) * C26430 + (C29766 + C29767) * C26431) *
               C90485 * C90753 -
           (((C307 * C19089 + C90623 * C19255) * C90498 +
             (C307 * C19087 + C90623 * C19253) * C3364) *
                C26431 +
            (C29767 + C29766) * C26430 + (C29765 + C29764) * C26429) *
               C90485 * C90579) *
              C2567)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[44] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C2660 +
            (C307 * C182 + C90623 * C394) * C2565 -
            (C307 * C832 + C90623 * C1094) * C2661 -
            (C307 * C927 + C90623 * C1195) * C2566 +
            (C307 * C2570 + C90623 * C2827) * C2662 +
            (C307 * C2663 + C90623 * C2921) * C2567) *
               C90634 * C89 +
           (C2926 + C2927 - C2928 - C2929 + C2930 + C2942) * C90634 * C90 +
           (C2933 + C2934 - C2935 - C2936 + C2937 + C2943) * C90634 * C91) *
              C90498 * C90753 +
          (((C307 * C3891 + C90623 * C4161) * C2661 -
            ((C307 * C1794 + C90623 * C2066) * C2565 +
             (C307 * C1700 + C90623 * C1962) * C2660) +
            (C307 * C3989 + C90623 * C4247) * C2566 -
            (C307 * C3896 + C90623 * C4166) * C2662 -
            (C307 * C3994 + C90623 * C4248) * C2567) *
               C90634 * C89 +
           ((C307 * C3892 + C90623 * C4162) * C2661 -
            (C2078 * C2565 + C1984 * C2660) +
            (C307 * C3990 + C90623 * C4249) * C2566 -
            (C307 * C3895 + C90623 * C4165) * C2662 -
            (C307 * C3993 + C90623 * C4250) * C2567) *
               C90634 * C90 +
           ((C307 * C3893 + C90623 * C4163) * C2661 -
            (C2079 * C2565 + C1986 * C2660) +
            (C307 * C3991 + C90623 * C4251) * C2566 -
            (C307 * C3894 + C90623 * C4164) * C2662 -
            (C307 * C3992 + C90623 * C4252) * C2567) *
               C90634 * C91) *
              C90498 * C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C181 +
             (C307 * C182 + C90623 * C394) * C90541) *
                C90634 * C89 +
            (C401 + C417) * C90634 * C90 + C423 * C91) *
               C821 -
           (C424 * C91 + (C418 + C404) * C90634 * C90 +
            (C417 + C401) * C90634 * C89) *
               C822 +
           (C423 * C89 + (C409 + C419) * C90634 * C90 +
            (C410 + C420) * C90634 * C91) *
               C823) *
              C90753 +
          (((C2069 + C2081) * C90634 * C89 + (C2072 + C2082) * C90634 * C90 +
            (C2075 + C2083) * C90634 * C91) *
               C822 -
           (C2085 * C91 + (C2081 + C2069) * C90634 * C90 +
            ((C307 * C1794 + C90623 * C2066) * C90541 +
             (C307 * C1700 + C90623 * C1962) * C181) *
                C90634 * C89) *
               C821 -
           (((C307 * C1795 + C90623 * C2067) * C90541 +
             (C307 * C1701 + C90623 * C1965) * C181) *
                C90634 * C91 +
            (C2083 + C2075) * C90634 * C90 + C2085 * C89) *
               C823) *
              C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
             C13732 * C2570 + C13578 * C2827) *
                C181 +
            (C13730 * C182 + C13576 * C394 + C13731 * C927 + C13577 * C1195 +
             C13732 * C2663 + C13578 * C2921) *
                C90541) *
               C90634 * C90485 * C821 -
           ((C13732 * C2664 + C13578 * C2922 + C13731 * C926 + C13577 * C1196 +
             C13730 * C183 + C13576 * C395) *
                C90541 +
            (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
             C13730 * C108 + C13576 * C309) *
                C181) *
               C90634 * C90485 * C822 +
           ((C13730 * C109 + C13576 * C310 + C13731 * C830 + C13577 * C1095 +
             C13732 * C2572 + C13578 * C2829) *
                C181 +
            (C13730 * C184 + C13576 * C396 + C13731 * C925 + C13577 * C1197 +
             C13732 * C2665 + C13578 * C2923) *
                C90541) *
               C90634 * C90485 * C823) *
              C90753 +
          (((C13730 * C1697 + C13576 * C1961 + C13731 * C3892 + C13577 * C4162 +
             C13732 * C3895 + C13578 * C4165) *
                C181 +
            (C13730 * C1791 + C13576 * C2063 + C13731 * C3990 + C13577 * C4249 +
             C13732 * C3993 + C13578 * C4250) *
                C90541) *
               C90634 * C90485 * C822 -
           ((C13732 * C3994 + C13578 * C4248 + C13731 * C3989 + C13577 * C4247 +
             C13730 * C1794 + C13576 * C2066) *
                C90541 +
            (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 + C13577 * C4161 +
             C13730 * C1700 + C13576 * C1962) *
                C181) *
               C90634 * C90485 * C821 -
           ((C13732 * C3992 + C13578 * C4252 + C13731 * C3991 + C13577 * C4251 +
             C13730 * C1792 + C13576 * C2064) *
                C90541 +
            (C13732 * C3894 + C13578 * C4164 + C13731 * C3893 + C13577 * C4163 +
             C13730 * C1698 + C13576 * C1963) *
                C181) *
               C90634 * C90485 * C823) *
              C90579)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C2660 +
           (C13730 * C182 + C13576 * C394 + C13731 * C927 + C13577 * C1195 +
            C13732 * C2663 + C13578 * C2921) *
               C2565 -
           (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
            C13730 * C832 + C13576 * C1094) *
               C2661 -
           (C13732 * C3433 + C13578 * C3599 + C13731 * C2663 + C13577 * C2921 +
            C13730 * C927 + C13576 * C1195) *
               C2566 +
           (C13730 * C2570 + C13576 * C2827 + C13731 * C3367 + C13577 * C3545 +
            C13732 * C15525 + C13578 * C15808) *
               C2662 +
           (C13730 * C2663 + C13576 * C2921 + C13731 * C3433 + C13577 * C3599 +
            C13732 * C15634 + C13578 * C15886) *
               C2567) *
              C90634 * C90485 * C90498 * C90753 +
          ((C13730 * C3891 + C13576 * C4161 + C13731 * C3896 + C13577 * C4166 +
            C13732 * C16835 + C13578 * C17131) *
               C2661 -
           ((C13732 * C3994 + C13578 * C4248 + C13731 * C3989 + C13577 * C4247 +
             C13730 * C1794 + C13576 * C2066) *
                C2565 +
            (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 + C13577 * C4161 +
             C13730 * C1700 + C13576 * C1962) *
                C2660) +
           (C13730 * C3989 + C13576 * C4247 + C13731 * C3994 + C13577 * C4248 +
            C13732 * C16942 + C13578 * C17209) *
               C2566 -
           (C13732 * C16836 + C13578 * C17132 + C13731 * C16835 +
            C13577 * C17131 + C13730 * C3896 + C13576 * C4166) *
               C2662 -
           (C13732 * C16943 + C13578 * C17210 + C13731 * C16942 +
            C13577 * C17209 + C13730 * C3994 + C13576 * C4248) *
               C2567) *
              C90634 * C90485 * C90498 * C90579)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C181 +
             (C307 * C182 + C90623 * C394) * C90541) *
                C26429 +
            (C27992 + C28000) * C26430 + (C27995 + C28001) * C26431) *
               C90485 * C821 -
           ((C5020 + C5012) * C26431 + (C2081 + C2069) * C26430 +
            (C417 + C401) * C26429) *
               C90485 * C822 +
           (C421 * C26429 + (C2072 + C2082) * C26430 +
            (C5015 + C5021) * C26431) *
               C90485 * C823) *
              C90753 +
          (((C2069 + C2081) * C26429 + (C5012 + C5020) * C26430 +
            ((C307 * C6164 + C90623 * C6342) * C181 +
             (C307 * C6226 + C90623 * C6398) * C90541) *
                C26431) *
               C90485 * C822 -
           (((C307 * C6227 + C90623 * C6399) * C90541 +
             (C307 * C6165 + C90623 * C6343) * C181) *
                C26431 +
            (C28001 + C27995) * C26430 + (C28000 + C27992) * C26429) *
               C90485 * C821 -
           (((C307 * C6225 + C90623 * C6397) * C90541 +
             (C307 * C6163 + C90623 * C6341) * C181) *
                C26431 +
            (C5021 + C5015) * C26430 + C2084 * C26429) *
               C90485 * C823) *
              C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C2660 +
            (C307 * C182 + C90623 * C394) * C2565 -
            (C307 * C832 + C90623 * C1094) * C2661 -
            (C307 * C927 + C90623 * C1195) * C2566 +
            (C307 * C2570 + C90623 * C2827) * C2662 +
            (C307 * C2663 + C90623 * C2921) * C2567) *
               C26429 +
           (C29842 + C29843 - C29844 - C29862 + C29847 + C29863) * C26430 +
           (C29850 + C29851 - C29852 - C29864 + C29855 + C29865) * C26431) *
              C90485 * C90498 * C90753 +
          ((C29844 - (C29843 + C29842) + C29862 - C29847 - C29863) * C26429 +
           (C29852 - (C29851 + C29850) + C29864 - C29855 - C29865) * C26430 +
           ((C307 * C19088 + C90623 * C19254) * C2661 -
            ((C307 * C6227 + C90623 * C6399) * C2565 +
             (C307 * C6165 + C90623 * C6343) * C2660) +
            (C307 * C19146 + C90623 * C19308) * C2566 -
            (C307 * C19087 + C90623 * C19253) * C2662 -
            (C307 * C19145 + C90623 * C19307) * C2567) *
               C26431) *
              C90485 * C90498 * C90579)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[44] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C1875 +
            (C307 * C245 + C90623 * C474) * C90753 -
            (C307 * C1700 + C90623 * C1962) * C1876 -
            (C307 * C1879 + C90623 * C2159) * C90579) *
               C90634 * C89 +
           (C2165 + C2166 - C2167 - C2184) * C90634 * C90 + C2189 * C91) *
              C2565 +
          (((C307 * C3891 + C90623 * C4161) * C1876 -
            ((C307 * C1011 + C90623 * C1301) * C90753 +
             (C307 * C832 + C90623 * C1094) * C1875) +
            (C307 * C4075 + C90623 * C4327) * C90579) *
               C90634 * C89 +
           ((C307 * C3892 + C90623 * C4162) * C1876 -
            (C1315 * C90753 + C1116 * C1875) +
            (C307 * C4076 + C90623 * C4328) * C90579) *
               C90634 * C90 +
           ((C307 * C3893 + C90623 * C4163) * C1876 -
            (C1314 * C90753 + C1118 * C1875) +
            (C307 * C4077 + C90623 * C4329) * C90579) *
               C90634 * C91) *
              C2566 +
          (((C307 * C2570 + C90623 * C2827) * C1875 +
            (C307 * C2745 + C90623 * C3017) * C90753 -
            (C307 * C3896 + C90623 * C4166) * C1876 -
            (C307 * C4080 + C90623 * C4330) * C90579) *
               C90634 * C89 +
           (C2844 * C1875 + C3028 * C90753 -
            (C307 * C3895 + C90623 * C4165) * C1876 -
            (C307 * C4079 + C90623 * C4331) * C90579) *
               C90634 * C90 +
           (C2846 * C1875 + C3029 * C90753 -
            (C307 * C3894 + C90623 * C4164) * C1876 -
            (C307 * C4078 + C90623 * C4332) * C90579) *
               C90634 * C91) *
              C2567) *
         C90498) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C1875 +
            (C307 * C245 + C90623 * C474) * C90753 -
            (C307 * C1700 + C90623 * C1962) * C1876 -
            (C307 * C1879 + C90623 * C2159) * C90579) *
               C90634 * C89 +
           (C2165 + C2166 - C2167 - C2184) * C90634 * C90 + C2189 * C91) *
              C90541 * C821 +
          ((C2167 - (C2166 + C2165) + C2184) * C90634 * C89 +
           (C2172 - (C2171 + C2170) + C2186) * C90634 * C90 +
           (C2175 - (C2176 + C2177) + C2187) * C90634 * C91) *
              C90541 * C822 +
          (C2189 * C89 + (C2177 + C2176 - C2175 - C2187) * C90634 * C90 +
           (C343 * C1875 + C496 * C90753 -
            (C307 * C1701 + C90623 * C1965) * C1876 -
            (C307 * C1881 + C90623 * C2163) * C90579) *
               C90634 * C91) *
              C90541 * C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C1875 +
           (C13730 * C245 + C13576 * C474 + C13731 * C1011 + C13577 * C1301 +
            C13732 * C2745 + C13578 * C3017) *
               C90753 -
           (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 + C13577 * C4161 +
            C13730 * C1700 + C13576 * C1962) *
               C1876 -
           (C13732 * C4080 + C13578 * C4330 + C13731 * C4075 + C13577 * C4327 +
            C13730 * C1879 + C13576 * C2159) *
               C90579) *
              C90634 * C90485 * C90541 * C821 +
          ((C13730 * C1697 + C13576 * C1961 + C13731 * C3892 + C13577 * C4162 +
            C13732 * C3895 + C13578 * C4165) *
               C1876 -
           ((C13732 * C2746 + C13578 * C3018 + C13731 * C1010 + C13577 * C1300 +
             C13730 * C246 + C13576 * C475) *
                C90753 +
            (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
             C13730 * C108 + C13576 * C309) *
                C1875) +
           (C13730 * C1878 + C13576 * C2160 + C13731 * C4076 + C13577 * C4328 +
            C13732 * C4079 + C13578 * C4331) *
               C90579) *
              C90634 * C90485 * C90541 * C822 +
          ((C13730 * C109 + C13576 * C310 + C13731 * C830 + C13577 * C1095 +
            C13732 * C2572 + C13578 * C2829) *
               C1875 +
           (C13730 * C247 + C13576 * C476 + C13731 * C1009 + C13577 * C1299 +
            C13732 * C2747 + C13578 * C3019) *
               C90753 -
           (C13732 * C3894 + C13578 * C4164 + C13731 * C3893 + C13577 * C4163 +
            C13730 * C1698 + C13576 * C1963) *
               C1876 -
           (C13732 * C4078 + C13578 * C4332 + C13731 * C4077 + C13577 * C4329 +
            C13730 * C1877 + C13576 * C2161) *
               C90579) *
              C90634 * C90485 * C90541 * C823)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C1875 +
           (C13730 * C245 + C13576 * C474 + C13731 * C1011 + C13577 * C1301 +
            C13732 * C2745 + C13578 * C3017) *
               C90753 -
           (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 + C13577 * C4161 +
            C13730 * C1700 + C13576 * C1962) *
               C1876 -
           (C13732 * C4080 + C13578 * C4330 + C13731 * C4075 + C13577 * C4327 +
            C13730 * C1879 + C13576 * C2159) *
               C90579) *
              C90634 * C90485 * C2565 +
          ((C13730 * C3891 + C13576 * C4161 + C13731 * C3896 + C13577 * C4166 +
            C13732 * C16835 + C13578 * C17131) *
               C1876 -
           ((C13732 * C3489 + C13578 * C3654 + C13731 * C2745 + C13577 * C3017 +
             C13730 * C1011 + C13576 * C1301) *
                C90753 +
            (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
             C13730 * C832 + C13576 * C1094) *
                C1875) +
           (C13730 * C4075 + C13576 * C4327 + C13731 * C4080 + C13577 * C4330 +
            C13732 * C17029 + C13578 * C17285) *
               C90579) *
              C90634 * C90485 * C2566 +
          ((C13730 * C2570 + C13576 * C2827 + C13731 * C3367 + C13577 * C3545 +
            C13732 * C15525 + C13578 * C15808) *
               C1875 +
           (C13730 * C2745 + C13576 * C3017 + C13731 * C3489 + C13577 * C3654 +
            C13732 * C15718 + C13578 * C15962) *
               C90753 -
           (C13732 * C16836 + C13578 * C17132 + C13731 * C16835 +
            C13577 * C17131 + C13730 * C3896 + C13576 * C4166) *
               C1876 -
           (C13732 * C17030 + C13578 * C17286 + C13731 * C17029 +
            C13577 * C17285 + C13730 * C4080 + C13576 * C4330) *
               C90579) *
              C90634 * C90485 * C2567) *
         C90498) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C1875 +
            (C307 * C245 + C90623 * C474) * C90753 - C27910 * C1876 -
            C28080 * C90579) *
               C26429 +
           (C27910 * C1875 + C28080 * C90753 - C27912 * C1876 -
            C28081 * C90579) *
               C26430 +
           (C27912 * C1875 + C28081 * C90753 -
            (C307 * C6165 + C90623 * C6343) * C1876 -
            (C307 * C6287 + C90623 * C6450) * C90579) *
               C26431) *
              C90485 * C90541 * C821 +
          ((C2167 - (C2166 + C2165) + C2184) * C26429 +
           (C4930 * C1876 - (C2180 * C90753 + C1984 * C1875) + C5114 * C90579) *
               C26430 +
           ((C307 * C6164 + C90623 * C6342) * C1876 -
            (C5114 * C90753 + C4930 * C1875) +
            (C307 * C6286 + C90623 * C6451) * C90579) *
               C26431) *
              C90485 * C90541 * C822 +
          (C2188 * C26429 +
           (C1986 * C1875 + C2182 * C90753 - C4932 * C1876 - C5115 * C90579) *
               C26430 +
           (C4932 * C1875 + C5115 * C90753 -
            (C307 * C6163 + C90623 * C6341) * C1876 -
            (C307 * C6285 + C90623 * C6452) * C90579) *
               C26431) *
              C90485 * C90541 * C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C1875 +
            (C307 * C245 + C90623 * C474) * C90753 - C27910 * C1876 -
            C28080 * C90579) *
               C26429 +
           (C27910 * C1875 + C28080 * C90753 - C27912 * C1876 -
            C28081 * C90579) *
               C26430 +
           (C27912 * C1875 + C28081 * C90753 -
            (C307 * C6165 + C90623 * C6343) * C1876 -
            (C307 * C6287 + C90623 * C6450) * C90579) *
               C26431) *
              C90485 * C2565 +
          ((C29752 * C1876 -
            ((C307 * C1011 + C90623 * C1301) * C90753 +
             (C307 * C832 + C90623 * C1094) * C1875) +
            C29948 * C90579) *
               C26429 +
           (C29754 * C1876 - (C29948 * C90753 + C29752 * C1875) +
            C29949 * C90579) *
               C26430 +
           ((C307 * C19088 + C90623 * C19254) * C1876 -
            (C29949 * C90753 + C29754 * C1875) +
            (C307 * C19199 + C90623 * C19360) * C90579) *
               C26431) *
              C90485 * C2566 +
          (((C307 * C2570 + C90623 * C2827) * C1875 +
            (C307 * C2745 + C90623 * C3017) * C90753 - C29756 * C1876 -
            C29950 * C90579) *
               C26429 +
           (C29756 * C1875 + C29950 * C90753 - C29758 * C1876 -
            C29951 * C90579) *
               C26430 +
           (C29758 * C1875 + C29951 * C90753 -
            (C307 * C19087 + C90623 * C19253) * C1876 -
            (C307 * C19200 + C90623 * C19359) * C90579) *
               C26431) *
              C90485 * C2567) *
         C90498) /
            (p * q * std::sqrt(p + q));
    d2eezx[44] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C90634 * C555) * C3364 +
                       (C554 * C116 + C90634 * C561) * C90498) *
                          C89 +
                      (C584 * C3364 + C585 * C90498) * C90 +
                      (C586 * C3364 + C587 * C90498) * C91) *
                         C90623 * C90753 -
                     ((C2289 * C90498 + C2288 * C3364) * C91 +
                      (C2287 * C90498 + C2286 * C3364) * C90 +
                      ((C554 * C1707 + C90634 * C2268) * C90498 +
                       (C554 * C1700 + C90634 * C2264) * C3364) *
                          C89) *
                         C90623 * C90579) *
                        C2565 +
                    ((((C554 * C3891 + C90634 * C4407) * C3364 +
                       (C554 * C3900 + C90634 * C4413) * C90498) *
                          C89 +
                      ((C554 * C3892 + C90634 * C4408) * C3364 +
                       (C554 * C3901 + C90634 * C4414) * C90498) *
                          C90 +
                      ((C554 * C3893 + C90634 * C4409) * C3364 +
                       (C554 * C3902 + C90634 * C4415) * C90498) *
                          C91) *
                         C90623 * C90579 -
                     ((C1421 * C90498 + C1420 * C3364) * C91 +
                      (C1419 * C90498 + C1418 * C3364) * C90 +
                      ((C554 * C839 + C90634 * C1400) * C90498 +
                       (C554 * C832 + C90634 * C1396) * C3364) *
                          C89) *
                         C90623 * C90753) *
                        C2566 +
                    ((((C554 * C2570 + C90634 * C3105) * C3364 +
                       (C554 * C2577 + C90634 * C3109) * C90498) *
                          C89 +
                      (C3122 * C3364 + C3123 * C90498) * C90 +
                      (C3124 * C3364 + C3125 * C90498) * C91) *
                         C90623 * C90753 -
                     (((C554 * C3903 + C90634 * C4416) * C90498 +
                       (C554 * C3894 + C90634 * C4410) * C3364) *
                          C91 +
                      ((C554 * C3904 + C90634 * C4417) * C90498 +
                       (C554 * C3895 + C90634 * C4411) * C3364) *
                          C90 +
                      ((C554 * C3905 + C90634 * C4418) * C90498 +
                       (C554 * C3896 + C90634 * C4412) * C3364) *
                          C89) *
                         C90623 * C90579) *
                        C2567)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C90634 * C555) * C826 +
                      (C554 * C116 + C90634 * C561) * C821 - C584 * C827 -
                      C585 * C822 + C586 * C828 + C587 * C823) *
                         C89 +
                     (C584 * C826 + C585 * C821 - C586 * C827 - C587 * C822 +
                      C588 * C828 + C589 * C823) *
                         C90 +
                     (C586 * C826 + C587 * C821 - C588 * C827 - C589 * C822 +
                      C590 * C828 + C591 * C823) *
                         C91) *
                        C90623 * C90753 +
                    ((C2286 * C827 -
                      ((C554 * C1707 + C90634 * C2268) * C821 +
                       (C554 * C1700 + C90634 * C2264) * C826) +
                      C2287 * C822 - C2288 * C828 - C2289 * C823) *
                         C89 +
                     (C2288 * C827 - (C2287 * C821 + C2286 * C826) +
                      C2289 * C822 - C2290 * C828 - C2291 * C823) *
                         C90 +
                     (C2290 * C827 - (C2289 * C821 + C2288 * C826) +
                      C2291 * C822 - (C554 * C1701 + C90634 * C2267) * C828 -
                      (C554 * C1711 + C90634 * C2272) * C823) *
                         C91) *
                        C90623 * C90579) *
                   C90541) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C90634 * C555) * C826 +
                      (C554 * C116 + C90634 * C561) * C821 - C584 * C827 -
                      C585 * C822 + C586 * C828 + C587 * C823) *
                         C90485 * C13576 +
                     (C14618 + C14619 - C14602 - C14603 + C14604 + C14605) *
                         C90485 * C13577 +
                     (C14620 + C14621 - C14610 - C14611 + C14612 + C14613) *
                         C90485 * C13578) *
                        C90753 +
                    ((C2286 * C827 -
                      ((C554 * C1707 + C90634 * C2268) * C821 +
                       (C554 * C1700 + C90634 * C2264) * C826) +
                      C2287 * C822 - C2288 * C828 - C2289 * C823) *
                         C90485 * C13576 +
                     (C8771 * C827 -
                      ((C554 * C3900 + C90634 * C4413) * C821 +
                       (C554 * C3891 + C90634 * C4407) * C826) +
                      C8772 * C822 - C8773 * C828 - C8774 * C823) *
                         C90485 * C13577 +
                     ((C554 * C3895 + C90634 * C4411) * C827 -
                      ((C554 * C3905 + C90634 * C4418) * C821 +
                       (C554 * C3896 + C90634 * C4412) * C826) +
                      (C554 * C3904 + C90634 * C4417) * C822 -
                      (C554 * C3894 + C90634 * C4410) * C828 -
                      (C554 * C3903 + C90634 * C4416) * C823) *
                         C90485 * C13578) *
                        C90579) *
                   C90541) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C90634 * C555) * C3364 +
                       (C554 * C116 + C90634 * C561) * C90498) *
                          C90485 * C13576 +
                      (C16632 + C16633) * C90485 * C13577 + C16646 * C13578) *
                         C90753 -
                     (C17391 * C13578 + (C17386 + C17387) * C90485 * C13577 +
                      ((C554 * C1707 + C90634 * C2268) * C90498 +
                       (C554 * C1700 + C90634 * C2264) * C3364) *
                          C90485 * C13576) *
                         C90579) *
                        C2565 +
                    (((C17387 + C17386) * C90485 * C13576 +
                      (C17385 + C17384) * C90485 * C13577 +
                      (C17388 + C17389) * C90485 * C13578) *
                         C90579 -
                     (C16647 * C13578 + (C16635 + C16634) * C90485 * C13577 +
                      (C16633 + C16632) * C90485 * C13576) *
                         C90753) *
                        C2566 +
                    ((C16646 * C13576 + (C16637 + C16636) * C90485 * C13577 +
                      (C16648 + C16649) * C90485 * C13578) *
                         C90753 -
                     (((C554 * C16839 + C90634 * C17364) * C90498 +
                       (C554 * C16836 + C90634 * C17362) * C3364) *
                          C90485 * C13578 +
                      (C17389 + C17388) * C90485 * C13577 + C17391 * C13576) *
                         C90579) *
                        C2567)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C26732 * C107 + C26429 * C555 + C26733 * C1700 +
                      C26430 * C2264 + C26734 * C4656 + C26431 * C5191) *
                         C826 +
                     (C26732 * C116 + C26429 * C561 + C26733 * C1707 +
                      C26430 * C2268 + C26734 * C4663 + C26431 * C5195) *
                         C821 -
                     (C26734 * C4657 + C26431 * C5192 + C26733 * C1697 +
                      C26430 * C2263 + C26732 * C108 + C26429 * C556) *
                         C827 -
                     (C26734 * C4664 + C26431 * C5196 + C26733 * C1706 +
                      C26430 * C2269 + C26732 * C117 + C26429 * C562) *
                         C822 +
                     (C26732 * C109 + C26429 * C557 + C26733 * C1698 +
                      C26430 * C2265 + C26734 * C4658 + C26431 * C5193) *
                         C828 +
                     (C26732 * C118 + C26429 * C563 + C26733 * C1705 +
                      C26430 * C2270 + C26734 * C4665 + C26431 * C5197) *
                         C823) *
                        C90485 * C90623 * C90753 +
                    ((C26732 * C1697 + C26429 * C2263 + C26733 * C4657 +
                      C26430 * C5192 + C26734 * C6164 + C26431 * C6504) *
                         C827 -
                     ((C26734 * C6168 + C26431 * C6508 + C26733 * C4663 +
                       C26430 * C5195 + C26732 * C1707 + C26429 * C2268) *
                          C821 +
                      (C26734 * C6165 + C26431 * C6505 + C26733 * C4656 +
                       C26430 * C5191 + C26732 * C1700 + C26429 * C2264) *
                          C826) +
                     (C26732 * C1706 + C26429 * C2269 + C26733 * C4664 +
                      C26430 * C5196 + C26734 * C6167 + C26431 * C6507) *
                         C822 -
                     (C26734 * C6163 + C26431 * C6503 + C26733 * C4658 +
                      C26430 * C5193 + C26732 * C1698 + C26429 * C2265) *
                         C828 -
                     (C26734 * C6166 + C26431 * C6506 + C26733 * C4665 +
                      C26430 * C5197 + C26732 * C1705 + C26429 * C2270) *
                         C823) *
                        C90485 * C90623 * C90579) *
                   C90541) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C26732 * C107 + C26429 * C555 + C26733 * C1700 +
                       C26430 * C2264 + C26734 * C4656 + C26431 * C5191) *
                          C3364 +
                      (C26732 * C116 + C26429 * C561 + C26733 * C1707 +
                       C26430 * C2268 + C26734 * C4663 + C26431 * C5195) *
                          C90498) *
                         C90485 * C90623 * C90753 -
                     ((C26734 * C6168 + C26431 * C6508 + C26733 * C4663 +
                       C26430 * C5195 + C26732 * C1707 + C26429 * C2268) *
                          C90498 +
                      (C26734 * C6165 + C26431 * C6505 + C26733 * C4656 +
                       C26430 * C5191 + C26732 * C1700 + C26429 * C2264) *
                          C3364) *
                         C90485 * C90623 * C90579) *
                        C2565 +
                    (((C26732 * C3891 + C26429 * C4407 + C26733 * C5471 +
                       C26430 * C5951 + C26734 * C19088 + C26431 * C19412) *
                          C3364 +
                      (C26732 * C3900 + C26429 * C4413 + C26733 * C5474 +
                       C26430 * C5954 + C26734 * C19091 + C26431 * C19414) *
                          C90498) *
                         C90485 * C90623 * C90579 -
                     ((C26734 * C5474 + C26431 * C5954 + C26733 * C3900 +
                       C26430 * C4413 + C26732 * C839 + C26429 * C1400) *
                          C90498 +
                      (C26734 * C5471 + C26431 * C5951 + C26733 * C3891 +
                       C26430 * C4407 + C26732 * C832 + C26429 * C1396) *
                          C3364) *
                         C90485 * C90623 * C90753) *
                        C2566 +
                    (((C26732 * C2570 + C26429 * C3105 + C26733 * C3896 +
                       C26430 * C4412 + C26734 * C17651 + C26431 * C18119) *
                          C3364 +
                      (C26732 * C2577 + C26429 * C3109 + C26733 * C3905 +
                       C26430 * C4418 + C26734 * C17654 + C26431 * C18121) *
                          C90498) *
                         C90485 * C90623 * C90753 -
                     ((C26734 * C19089 + C26431 * C19413 + C26733 * C17654 +
                       C26430 * C18121 + C26732 * C3905 + C26429 * C4418) *
                          C90498 +
                      (C26734 * C19087 + C26431 * C19411 + C26733 * C17651 +
                       C26430 * C18119 + C26732 * C3896 + C26429 * C4412) *
                          C3364) *
                         C90485 * C90623 * C90579) *
                        C2567)) /
                      (p * q * std::sqrt(p + q));
    d2eezy[44] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C2660 +
            (C554 * C182 + C90634 * C641) * C2565 -
            (C554 * C832 + C90634 * C1396) * C2661 -
            (C554 * C927 + C90634 * C1497) * C2566 +
            (C554 * C2570 + C90634 * C3105) * C2662 +
            (C554 * C2663 + C90634 * C3199) * C2567) *
               C89 +
           (C3204 + C3205 - C3206 - C3207 + C3208 + C3220) * C90 +
           (C3211 + C3212 - C3213 - C3214 + C3215 + C3221) * C91) *
              C90623 * C90498 * C90753 +
          (((C554 * C3891 + C90634 * C4407) * C2661 -
            ((C554 * C1794 + C90634 * C2368) * C2565 +
             (C554 * C1700 + C90634 * C2264) * C2660) +
            (C554 * C3989 + C90634 * C4493) * C2566 -
            (C554 * C3896 + C90634 * C4412) * C2662 -
            (C554 * C3994 + C90634 * C4494) * C2567) *
               C89 +
           ((C554 * C3892 + C90634 * C4408) * C2661 -
            (C2380 * C2565 + C2286 * C2660) +
            (C554 * C3990 + C90634 * C4495) * C2566 -
            (C554 * C3895 + C90634 * C4411) * C2662 -
            (C554 * C3993 + C90634 * C4496) * C2567) *
               C90 +
           ((C554 * C3893 + C90634 * C4409) * C2661 -
            (C2381 * C2565 + C2288 * C2660) +
            (C554 * C3991 + C90634 * C4497) * C2566 -
            (C554 * C3894 + C90634 * C4410) * C2662 -
            (C554 * C3992 + C90634 * C4498) * C2567) *
               C91) *
              C90623 * C90498 * C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C181 +
             (C554 * C182 + C90634 * C641) * C90541) *
                C89 +
            (C648 + C664) * C90 + C668 * C91) *
               C90623 * C821 -
           (C669 * C91 + (C665 + C651) * C90 + (C664 + C648) * C89) * C90623 *
               C822 +
           (C668 * C89 + (C656 + C666) * C90 + (C657 + C667) * C91) * C90623 *
               C823) *
              C90753 +
          (((C2371 + C2383) * C89 + (C2374 + C2384) * C90 +
            (C2377 + C2385) * C91) *
               C90623 * C822 -
           (C2386 * C91 + (C2383 + C2371) * C90 +
            ((C554 * C1794 + C90634 * C2368) * C90541 +
             (C554 * C1700 + C90634 * C2264) * C181) *
                C89) *
               C90623 * C821 -
           (((C554 * C1795 + C90634 * C2369) * C90541 +
             (C554 * C1701 + C90634 * C2267) * C181) *
                C91 +
            (C2385 + C2377) * C90 + C2386 * C89) *
               C90623 * C823) *
              C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C181 +
             (C554 * C182 + C90634 * C641) * C90541) *
                C90485 * C13576 +
            (C14614 * C181 + C14700 * C90541) * C90485 * C13577 +
            (C14616 * C181 + C14701 * C90541) * C90485 * C13578) *
               C821 -
           ((C3218 * C90541 + C3122 * C181) * C90485 * C13578 +
            (C1518 * C90541 + C1418 * C181) * C90485 * C13577 +
            (C664 + C648) * C90485 * C13576) *
               C822 +
           (C668 * C90485 * C13576 +
            (C1420 * C181 + C1520 * C90541) * C90485 * C13577 +
            (C3124 * C181 + C3219 * C90541) * C90485 * C13578) *
               C823) *
              C90753 +
          (((C2371 + C2383) * C90485 * C13576 +
            (C8771 * C181 + C8884 * C90541) * C90485 * C13577 +
            ((C554 * C3895 + C90634 * C4411) * C181 +
             (C554 * C3993 + C90634 * C4496) * C90541) *
                C90485 * C13578) *
               C822 -
           (((C554 * C3994 + C90634 * C4494) * C90541 +
             (C554 * C3896 + C90634 * C4412) * C181) *
                C90485 * C13578 +
            ((C554 * C3989 + C90634 * C4493) * C90541 +
             (C554 * C3891 + C90634 * C4407) * C181) *
                C90485 * C13577 +
            ((C554 * C1794 + C90634 * C2368) * C90541 +
             (C554 * C1700 + C90634 * C2264) * C181) *
                C90485 * C13576) *
               C821 -
           (((C554 * C3992 + C90634 * C4498) * C90541 +
             (C554 * C3894 + C90634 * C4410) * C181) *
                C90485 * C13578 +
            (C8885 * C90541 + C8773 * C181) * C90485 * C13577 +
            C2386 * C90485 * C13576) *
               C823) *
              C90579)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C2660 +
            (C554 * C182 + C90634 * C641) * C2565 - C14614 * C2661 -
            C14700 * C2566 + C14616 * C2662 + C14701 * C2567) *
               C90485 * C13576 +
           (C14614 * C2660 + C14700 * C2565 - C14616 * C2661 - C14701 * C2566 +
            C16062 * C2662 + C16151 * C2567) *
               C90485 * C13577 +
           (C14616 * C2660 + C14701 * C2565 - C16062 * C2661 - C16151 * C2566 +
            C16644 * C2662 + C16703 * C2567) *
               C90485 * C13578) *
              C90498 * C90753 +
          ((C17381 * C2661 -
            ((C554 * C1794 + C90634 * C2368) * C2565 +
             (C554 * C1700 + C90634 * C2264) * C2660) +
            C17474 * C2566 - C17379 * C2662 - C17475 * C2567) *
               C90485 * C13576 +
           (C17379 * C2661 - (C17474 * C2565 + C17381 * C2660) +
            C17475 * C2566 - C17382 * C2662 - C17476 * C2567) *
               C90485 * C13577 +
           (C17382 * C2661 - (C17475 * C2565 + C17379 * C2660) +
            C17476 * C2566 - (C554 * C16836 + C90634 * C17362) * C2662 -
            (C554 * C16943 + C90634 * C17466) * C2567) *
               C90485 * C13578) *
              C90498 * C90579)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26732 * C107 + C26429 * C555 + C26733 * C1700 + C26430 * C2264 +
             C26734 * C4656 + C26431 * C5191) *
                C181 +
            (C26732 * C182 + C26429 * C641 + C26733 * C1794 + C26430 * C2368 +
             C26734 * C4746 + C26431 * C5285) *
                C90541) *
               C90485 * C90623 * C821 -
           ((C26734 * C4747 + C26431 * C5286 + C26733 * C1791 + C26430 * C2365 +
             C26732 * C183 + C26429 * C642) *
                C90541 +
            (C26734 * C4657 + C26431 * C5192 + C26733 * C1697 + C26430 * C2263 +
             C26732 * C108 + C26429 * C556) *
                C181) *
               C90485 * C90623 * C822 +
           ((C26732 * C109 + C26429 * C557 + C26733 * C1698 + C26430 * C2265 +
             C26734 * C4658 + C26431 * C5193) *
                C181 +
            (C26732 * C184 + C26429 * C643 + C26733 * C1792 + C26430 * C2366 +
             C26734 * C4748 + C26431 * C5287) *
                C90541) *
               C90485 * C90623 * C823) *
              C90753 +
          (((C26732 * C1697 + C26429 * C2263 + C26733 * C4657 + C26430 * C5192 +
             C26734 * C6164 + C26431 * C6504) *
                C181 +
            (C26732 * C1791 + C26429 * C2365 + C26733 * C4747 + C26430 * C5286 +
             C26734 * C6226 + C26431 * C6560) *
                C90541) *
               C90485 * C90623 * C822 -
           ((C26734 * C6227 + C26431 * C6561 + C26733 * C4746 + C26430 * C5285 +
             C26732 * C1794 + C26429 * C2368) *
                C90541 +
            (C26734 * C6165 + C26431 * C6505 + C26733 * C4656 + C26430 * C5191 +
             C26732 * C1700 + C26429 * C2264) *
                C181) *
               C90485 * C90623 * C821 -
           ((C26734 * C6225 + C26431 * C6559 + C26733 * C4748 + C26430 * C5287 +
             C26732 * C1792 + C26429 * C2366) *
                C90541 +
            (C26734 * C6163 + C26431 * C6503 + C26733 * C4658 + C26430 * C5193 +
             C26732 * C1698 + C26429 * C2265) *
                C181) *
               C90485 * C90623 * C823) *
              C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C26732 * C107 + C26429 * C555 + C26733 * C1700 + C26430 * C2264 +
            C26734 * C4656 + C26431 * C5191) *
               C2660 +
           (C26732 * C182 + C26429 * C641 + C26733 * C1794 + C26430 * C2368 +
            C26734 * C4746 + C26431 * C5285) *
               C2565 -
           (C26734 * C5471 + C26431 * C5951 + C26733 * C3891 + C26430 * C4407 +
            C26732 * C832 + C26429 * C1396) *
               C2661 -
           (C26734 * C5557 + C26431 * C6029 + C26733 * C3989 + C26430 * C4493 +
            C26732 * C927 + C26429 * C1497) *
               C2566 +
           (C26732 * C2570 + C26429 * C3105 + C26733 * C3896 + C26430 * C4412 +
            C26734 * C17651 + C26431 * C18119) *
               C2662 +
           (C26732 * C2663 + C26429 * C3199 + C26733 * C3994 + C26430 * C4494 +
            C26734 * C17733 + C26431 * C18197) *
               C2567) *
              C90485 * C90623 * C90498 * C90753 +
          ((C26732 * C3891 + C26429 * C4407 + C26733 * C5471 + C26430 * C5951 +
            C26734 * C19088 + C26431 * C19412) *
               C2661 -
           ((C26734 * C6227 + C26431 * C6561 + C26733 * C4746 + C26430 * C5285 +
             C26732 * C1794 + C26429 * C2368) *
                C2565 +
            (C26734 * C6165 + C26431 * C6505 + C26733 * C4656 + C26430 * C5191 +
             C26732 * C1700 + C26429 * C2264) *
                C2660) +
           (C26732 * C3989 + C26429 * C4493 + C26733 * C5557 + C26430 * C6029 +
            C26734 * C19146 + C26431 * C19466) *
               C2566 -
           (C26734 * C19087 + C26431 * C19411 + C26733 * C17651 +
            C26430 * C18119 + C26732 * C3896 + C26429 * C4412) *
               C2662 -
           (C26734 * C19145 + C26431 * C19465 + C26733 * C17733 +
            C26430 * C18197 + C26732 * C3994 + C26429 * C4494) *
               C2567) *
              C90485 * C90623 * C90498 * C90579)) /
            (p * q * std::sqrt(p + q));
    d2eezz[44] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C90634 * C555) * C1875 +
                      (C554 * C245 + C90634 * C719) * C90753 -
                      (C554 * C1700 + C90634 * C2264) * C1876 -
                      (C554 * C1879 + C90634 * C2460) * C90579) *
                         C89 +
                     (C2466 + C2467 - C2468 - C2485) * C90 + C2489 * C91) *
                        C90623 * C2565 +
                    (((C554 * C3891 + C90634 * C4407) * C1876 -
                      ((C554 * C1011 + C90634 * C1602) * C90753 +
                       (C554 * C832 + C90634 * C1396) * C1875) +
                      (C554 * C4075 + C90634 * C4573) * C90579) *
                         C89 +
                     ((C554 * C3892 + C90634 * C4408) * C1876 -
                      (C1616 * C90753 + C1418 * C1875) +
                      (C554 * C4076 + C90634 * C4574) * C90579) *
                         C90 +
                     ((C554 * C3893 + C90634 * C4409) * C1876 -
                      (C1615 * C90753 + C1420 * C1875) +
                      (C554 * C4077 + C90634 * C4575) * C90579) *
                         C91) *
                        C90623 * C2566 +
                    (((C554 * C2570 + C90634 * C3105) * C1875 +
                      (C554 * C2745 + C90634 * C3295) * C90753 -
                      (C554 * C3896 + C90634 * C4412) * C1876 -
                      (C554 * C4080 + C90634 * C4576) * C90579) *
                         C89 +
                     (C3122 * C1875 + C3306 * C90753 -
                      (C554 * C3895 + C90634 * C4411) * C1876 -
                      (C554 * C4079 + C90634 * C4577) * C90579) *
                         C90 +
                     (C3124 * C1875 + C3307 * C90753 -
                      (C554 * C3894 + C90634 * C4410) * C1876 -
                      (C554 * C4078 + C90634 * C4578) * C90579) *
                         C91) *
                        C90623 * C2567) *
                   C90498) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C90634 * C555) * C1875 +
                      (C554 * C245 + C90634 * C719) * C90753 -
                      (C554 * C1700 + C90634 * C2264) * C1876 -
                      (C554 * C1879 + C90634 * C2460) * C90579) *
                         C89 +
                     (C2466 + C2467 - C2468 - C2485) * C90 + C2489 * C91) *
                        C90623 * C90541 * C821 +
                    ((C2468 - (C2467 + C2466) + C2485) * C89 +
                     (C2473 - (C2472 + C2471) + C2487) * C90 +
                     (C2476 - (C2477 + C2478) + C2488) * C91) *
                        C90623 * C90541 * C822 +
                    (C2489 * C89 + (C2478 + C2477 - C2476 - C2488) * C90 +
                     (C590 * C1875 + C741 * C90753 -
                      (C554 * C1701 + C90634 * C2267) * C1876 -
                      (C554 * C1881 + C90634 * C2464) * C90579) *
                         C91) *
                        C90623 * C90541 * C823)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C90634 * C555) * C1875 +
                      (C554 * C245 + C90634 * C719) * C90753 -
                      (C554 * C1700 + C90634 * C2264) * C1876 -
                      (C554 * C1879 + C90634 * C2460) * C90579) *
                         C90485 * C13576 +
                     (C14614 * C1875 + C14782 * C90753 -
                      (C554 * C3891 + C90634 * C4407) * C1876 -
                      (C554 * C4075 + C90634 * C4573) * C90579) *
                         C90485 * C13577 +
                     (C14616 * C1875 + C14783 * C90753 -
                      (C554 * C3896 + C90634 * C4412) * C1876 -
                      (C554 * C4080 + C90634 * C4576) * C90579) *
                         C90485 * C13578) *
                        C90541 * C821 +
                    ((C2468 - (C2467 + C2466) + C2485) * C90485 * C13576 +
                     (C8987 - (C8988 + C8989) + C8999) * C90485 * C13577 +
                     ((C554 * C3895 + C90634 * C4411) * C1876 -
                      (C3306 * C90753 + C3122 * C1875) +
                      (C554 * C4079 + C90634 * C4577) * C90579) *
                         C90485 * C13578) *
                        C90541 * C822 +
                    (C2489 * C90485 * C13576 +
                     (C8994 + C8993 - C8992 - C9000) * C90485 * C13577 +
                     (C3124 * C1875 + C3307 * C90753 -
                      (C554 * C3894 + C90634 * C4410) * C1876 -
                      (C554 * C4078 + C90634 * C4578) * C90579) *
                         C90485 * C13578) *
                        C90541 * C823)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C90634 * C555) * C1875 +
                      (C554 * C245 + C90634 * C719) * C90753 -
                      (C554 * C1700 + C90634 * C2264) * C1876 -
                      (C554 * C1879 + C90634 * C2460) * C90579) *
                         C90485 * C13576 +
                     (C17553 + C17554 - C17555 - C17572) * C90485 * C13577 +
                     C17577 * C13578) *
                        C2565 +
                    ((C17555 - (C17554 + C17553) + C17572) * C90485 * C13576 +
                     (C17560 - (C17559 + C17558) + C17574) * C90485 * C13577 +
                     (C17563 - (C17564 + C17565) + C17575) * C90485 * C13578) *
                        C2566 +
                    (C17577 * C13576 +
                     (C17565 + C17564 - C17563 - C17575) * C90485 * C13577 +
                     (C16644 * C1875 + C16760 * C90753 -
                      (C554 * C16836 + C90634 * C17362) * C1876 -
                      (C554 * C17030 + C90634 * C17551) * C90579) *
                         C90485 * C13578) *
                        C2567) *
                   C90498) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C26732 * C107 + C26429 * C555 + C26733 * C1700 +
                      C26430 * C2264 + C26734 * C4656 + C26431 * C5191) *
                         C1875 +
                     (C26732 * C245 + C26429 * C719 + C26733 * C1879 +
                      C26430 * C2460 + C26734 * C4831 + C26431 * C5373) *
                         C90753 -
                     (C26734 * C6165 + C26431 * C6505 + C26733 * C4656 +
                      C26430 * C5191 + C26732 * C1700 + C26429 * C2264) *
                         C1876 -
                     (C26734 * C6287 + C26431 * C6612 + C26733 * C4831 +
                      C26430 * C5373 + C26732 * C1879 + C26429 * C2460) *
                         C90579) *
                        C90485 * C90623 * C90541 * C821 +
                    ((C26732 * C1697 + C26429 * C2263 + C26733 * C4657 +
                      C26430 * C5192 + C26734 * C6164 + C26431 * C6504) *
                         C1876 -
                     ((C26734 * C4832 + C26431 * C5374 + C26733 * C1878 +
                       C26430 * C2461 + C26732 * C246 + C26429 * C720) *
                          C90753 +
                      (C26734 * C4657 + C26431 * C5192 + C26733 * C1697 +
                       C26430 * C2263 + C26732 * C108 + C26429 * C556) *
                          C1875) +
                     (C26732 * C1878 + C26429 * C2461 + C26733 * C4832 +
                      C26430 * C5374 + C26734 * C6286 + C26431 * C6613) *
                         C90579) *
                        C90485 * C90623 * C90541 * C822 +
                    ((C26732 * C109 + C26429 * C557 + C26733 * C1698 +
                      C26430 * C2265 + C26734 * C4658 + C26431 * C5193) *
                         C1875 +
                     (C26732 * C247 + C26429 * C721 + C26733 * C1877 +
                      C26430 * C2462 + C26734 * C4833 + C26431 * C5375) *
                         C90753 -
                     (C26734 * C6163 + C26431 * C6503 + C26733 * C4658 +
                      C26430 * C5193 + C26732 * C1698 + C26429 * C2265) *
                         C1876 -
                     (C26734 * C6285 + C26431 * C6614 + C26733 * C4833 +
                      C26430 * C5375 + C26732 * C1877 + C26429 * C2462) *
                         C90579) *
                        C90485 * C90623 * C90541 * C823)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C26732 * C107 + C26429 * C555 + C26733 * C1700 +
                      C26430 * C2264 + C26734 * C4656 + C26431 * C5191) *
                         C1875 +
                     (C26732 * C245 + C26429 * C719 + C26733 * C1879 +
                      C26430 * C2460 + C26734 * C4831 + C26431 * C5373) *
                         C90753 -
                     (C26734 * C6165 + C26431 * C6505 + C26733 * C4656 +
                      C26430 * C5191 + C26732 * C1700 + C26429 * C2264) *
                         C1876 -
                     (C26734 * C6287 + C26431 * C6612 + C26733 * C4831 +
                      C26430 * C5373 + C26732 * C1879 + C26429 * C2460) *
                         C90579) *
                        C90485 * C90623 * C2565 +
                    ((C26732 * C3891 + C26429 * C4407 + C26733 * C5471 +
                      C26430 * C5951 + C26734 * C19088 + C26431 * C19412) *
                         C1876 -
                     ((C26734 * C5637 + C26431 * C6106 + C26733 * C4075 +
                       C26430 * C4573 + C26732 * C1011 + C26429 * C1602) *
                          C90753 +
                      (C26734 * C5471 + C26431 * C5951 + C26733 * C3891 +
                       C26430 * C4407 + C26732 * C832 + C26429 * C1396) *
                          C1875) +
                     (C26732 * C4075 + C26429 * C4573 + C26733 * C5637 +
                      C26430 * C6106 + C26734 * C19199 + C26431 * C19517) *
                         C90579) *
                        C90485 * C90623 * C2566 +
                    ((C26732 * C2570 + C26429 * C3105 + C26733 * C3896 +
                      C26430 * C4412 + C26734 * C17651 + C26431 * C18119) *
                         C1875 +
                     (C26732 * C2745 + C26429 * C3295 + C26733 * C4080 +
                      C26430 * C4576 + C26734 * C17811 + C26431 * C18273) *
                         C90753 -
                     (C26734 * C19087 + C26431 * C19411 + C26733 * C17651 +
                      C26430 * C18119 + C26732 * C3896 + C26429 * C4412) *
                         C1876 -
                     (C26734 * C19200 + C26431 * C19518 + C26733 * C17811 +
                      C26430 * C18273 + C26732 * C4080 + C26429 * C4576) *
                         C90579) *
                        C90485 * C90623 * C2567) *
                   C90498) /
                      (p * q * std::sqrt(p + q));
    d2eexx[45] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C6694 +
            (C39129 * C116 + C39125 * C125 + C39130 * C117 + C39126 * C126) *
                C90780 -
            (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                C6695 -
            (C39130 * C118 + C39126 * C127 + C39129 * C117 + C39125 * C126) *
                C90771 +
            (C39129 * C109 + C39125 * C115 + C39130 * C110 + C39126 * C119) *
                C6696 +
            (C39129 * C118 + C39125 * C127 + C39130 * C120 + C39126 * C128) *
                C6691) *
               C90623 * C55625 +
           ((C57292 + C57293) * C6694 + (C57294 + C57295) * C90780 -
            (C57296 + C57297) * C6695 - (C57298 + C57299) * C90771 +
            (C57300 + C57301) * C6696 + (C57302 + C57303) * C6691) *
               C90623 * C55626) *
              C90567 * C6692 +
          (((C39867 + C39866) * C6695 -
            ((C39865 + C39864) * C90780 + (C39863 + C39862) * C6694) +
            (C39869 + C39868) * C90771 - (C39871 + C39870) * C6696 -
            (C39873 + C39872) * C6691) *
               C90623 * C55625 +
           ((C48578 + C48579) * C6695 -
            ((C43400 + C43401) * C90780 + (C43402 + C43403) * C6694) +
            (C48580 + C48581) * C90771 -
            (C39130 * C8120 + C39126 * C8121 + C39129 * C3893 +
             C39125 * C3899) *
                C6696 -
            (C39130 * C8122 + C39126 * C8123 + C39129 * C3902 +
             C39125 * C3911) *
                C6691) *
               C90623 * C55626) *
              C90567 * C90555)) /
        (p * q * std::sqrt(p + q));
    d2eexy[45] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C6771 +
            (C39129 * C182 + C39125 * C188 + C39130 * C183 + C39126 * C189) *
                C6692 -
            (C39863 + C39862) * C6772 - (C39984 + C39985) * C90555) *
               C90623 * C55625 +
           ((C57292 + C57293) * C6771 + (C57414 + C57415) * C6692 -
            (C43402 + C43403) * C6772 - (C43515 + C43514) * C90555) *
               C90623 * C55626) *
              C90780 +
          (((C39867 + C39866) * C6772 -
            ((C39130 * C184 + C39126 * C190 + C39129 * C183 + C39125 * C189) *
                 C6692 +
             (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                 C6771) +
            (C39986 + C39987) * C90555) *
               C90623 * C55625 +
           ((C48578 + C48579) * C6772 -
            ((C57416 + C57417) * C6692 + (C57296 + C57297) * C6771) +
            (C48717 + C48716) * C90555) *
               C90623 * C55626) *
              C90771 +
          (((C39129 * C109 + C39125 * C115 + C39130 * C110 + C39126 * C119) *
                C6771 +
            (C39129 * C184 + C39125 * C190 + C39130 * C185 + C39126 * C191) *
                C6692 -
            (C39871 + C39870) * C6772 - (C39988 + C39989) * C90555) *
               C90623 * C55625 +
           ((C57300 + C57301) * C6771 + (C57418 + C57419) * C6692 -
            (C39130 * C8120 + C39126 * C8121 + C39129 * C3893 +
             C39125 * C3899) *
                C6772 -
            (C39130 * C8222 + C39126 * C8223 + C39129 * C3991 +
             C39125 * C3997) *
                C90555) *
               C90623 * C55626) *
              C6691) *
         C90567) /
        (p * q * std::sqrt(p + q));
    d2eexz[45] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                 C244 +
             (C39129 * C245 + C39125 * C251 + C39130 * C246 + C39126 * C252) *
                 C90567) *
                C90623 * C55625 +
            ((C57292 + C57293) * C244 + (C57531 + C57530) * C90567) * C90623 *
                C55626) *
               C6692 -
           (((C43624 + C43625) * C90567 + (C43402 + C43403) * C244) * C90623 *
                C55626 +
            ((C40101 + C40100) * C90567 + (C39863 + C39862) * C244) * C90623 *
                C55625) *
               C90555) *
              C90780 +
          ((((C39867 + C39866) * C244 + (C40102 + C40103) * C90567) * C90623 *
                C55625 +
            ((C48578 + C48579) * C244 + (C48852 + C48853) * C90567) * C90623 *
                C55626) *
               C90555 -
           (((C57533 + C57532) * C90567 + (C57296 + C57297) * C244) * C90623 *
                C55626 +
            ((C39130 * C247 + C39126 * C253 + C39129 * C246 + C39125 * C252) *
                 C90567 +
             (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                 C244) *
                C90623 * C55625) *
               C6692) *
              C90771 +
          ((((C39129 * C109 + C39125 * C115 + C39130 * C110 + C39126 * C119) *
                 C244 +
             (C39129 * C247 + C39125 * C253 + C39130 * C248 + C39126 * C254) *
                 C90567) *
                C90623 * C55625 +
            ((C57300 + C57301) * C244 + (C57535 + C57534) * C90567) * C90623 *
                C55626) *
               C6692 -
           (((C39130 * C8322 + C39126 * C8323 + C39129 * C4077 +
              C39125 * C4083) *
                 C90567 +
             (C39130 * C8120 + C39126 * C8121 + C39129 * C3893 +
              C39125 * C3899) *
                 C244) *
                C90623 * C55626 +
            ((C40105 + C40104) * C90567 + (C39871 + C39870) * C244) * C90623 *
                C55625) *
               C90555) *
              C6691)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[45] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C6694 +
             (C307 * C116 + C90623 * C314) * C90780 - C337 * C6695 -
             C338 * C90771 + C339 * C6696 + C340 * C6691) *
                C55625 +
            (C34838 + C34839 - C34840 - C34841 + C34842 + C34843) * C55626) *
               C39125 +
           ((C337 * C6694 + C338 * C90780 - C339 * C6695 - C340 * C90771 +
             C341 * C6696 + C342 * C6691) *
                C55625 +
            (C1984 * C6694 + C1985 * C90780 - C1986 * C6695 - C1987 * C90771 +
             C1988 * C6696 + C1989 * C6691) *
                C55626) *
               C39126) *
              C90567 * C6692 +
          (((C1116 * C6695 -
             ((C307 * C839 + C90623 * C1098) * C90780 +
              (C307 * C832 + C90623 * C1094) * C6694) +
             C1117 * C90771 - C1118 * C6696 - C1119 * C6691) *
                C55625 +
            (C8433 * C6695 - (C29753 * C90780 + C29752 * C6694) +
             C8434 * C90771 - C8435 * C6696 - C8436 * C6691) *
                C55626) *
               C39125 +
           ((C1118 * C6695 - (C1117 * C90780 + C1116 * C6694) + C1119 * C90771 -
             C1120 * C6696 - C1121 * C6691) *
                C55625 +
            (C8435 * C6695 - (C8434 * C90780 + C8433 * C6694) + C8436 * C90771 -
             (C307 * C8120 + C90623 * C8422) * C6696 -
             (C307 * C8122 + C90623 * C8423) * C6691) *
                C55626) *
               C39126) *
              C90567 * C90555)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[45] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C6771 +
             (C307 * C182 + C90623 * C394) * C6692 -
             (C307 * C832 + C90623 * C1094) * C6772 -
             (C307 * C927 + C90623 * C1195) * C90555) *
                C55625 +
            (C34115 + C34116 - C34117 - C34118) * C55626) *
               C39125 +
           ((C6996 + C6997 - C6998 - C6999) * C55625 +
            (C8538 + C8537 - C8536 - C8548) * C55626) *
               C39126) *
              C90780 +
          (((C6998 - (C6997 + C6996) + C6999) * C55625 +
            (C8536 - (C8537 + C8538) + C8548) * C55626) *
               C39125 +
           ((C7002 - (C7001 + C7000) + C7003) * C55625 +
            (C8541 - (C8542 + C8543) + C8549) * C55626) *
               C39126) *
              C90771 +
          ((C7010 * C55625 + (C8543 + C8542 - C8541 - C8549) * C55626) *
               C39125 +
           ((C7006 + C7005 - C7004 - C7007) * C55625 +
            (C1988 * C6771 + C2080 * C6692 -
             (C307 * C8120 + C90623 * C8422) * C6772 -
             (C307 * C8222 + C90623 * C8534) * C90555) *
                C55626) *
               C39126) *
              C6691) *
         C90567) /
        (p * q * std::sqrt(p + q));
    d2eeyz[45] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C90623 * C308) * C244 +
              (C307 * C245 + C90623 * C474) * C90567) *
                 C55625 +
             (C27910 * C244 + C28080 * C90567) * C55626) *
                C39125 +
            ((C481 + C497) * C55625 + (C55958 + C55959) * C55626) * C39126) *
               C6692 -
           (((C56824 + C56825) * C55626 + (C1318 + C1310) * C55625) * C39126 +
            ((C29948 * C90567 + C29752 * C244) * C55626 +
             ((C307 * C1011 + C90623 * C1301) * C90567 +
              (C307 * C832 + C90623 * C1094) * C244) *
                 C55625) *
                C39125) *
               C90555) *
              C90780 +
          ((((C1310 + C1318) * C55625 + (C56825 + C56824) * C55626) * C39125 +
            ((C1307 + C1317) * C55625 + (C56826 + C56827) * C55626) * C39126) *
               C90555 -
           (((C55960 + C55961) * C55626 + (C498 + C484) * C55625) * C39126 +
            ((C55959 + C55958) * C55626 + (C497 + C481) * C55625) * C39125) *
               C6692) *
              C90771 +
          (((C501 * C55625 + (C55961 + C55960) * C55626) * C39125 +
            ((C489 + C499) * C55625 + (C55962 + C55963) * C55626) * C39126) *
               C6692 -
           ((((C307 * C8322 + C90623 * C8647) * C90567 +
              (C307 * C8120 + C90623 * C8422) * C244) *
                 C55626 +
             (C1319 + C1311) * C55625) *
                C39126 +
            ((C56827 + C56826) * C55626 + C1320 * C55625) * C39125) *
               C90555) *
              C6691)) /
        (p * q * std::sqrt(p + q));
    d2eezx[45] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C6694 +
            (C56029 * C116 + C55625 * C561 + C56030 * C1707 + C55626 * C2268) *
                C90780 -
            (C56056 + C56057) * C6695 - (C56058 + C56059) * C90771 +
            (C56060 + C56061) * C6696 + (C56062 + C56063) * C6691) *
               C39125 +
           ((C56057 + C56056) * C6694 + (C56059 + C56058) * C90780 -
            (C56061 + C56060) * C6695 - (C56063 + C56062) * C90771 +
            (C56065 + C56064) * C6696 + (C56067 + C56066) * C6691) *
               C39126) *
              C90623 * C90567 * C6692 +
          (((C56942 + C56943) * C6695 -
            ((C56030 * C3900 + C55626 * C4413 + C56029 * C839 +
              C55625 * C1400) *
                 C90780 +
             (C56030 * C3891 + C55626 * C4407 + C56029 * C832 +
              C55625 * C1396) *
                 C6694) +
            (C56944 + C56945) * C90771 - (C56946 + C56947) * C6696 -
            (C56948 + C56949) * C6691) *
               C39125 +
           ((C56947 + C56946) * C6695 -
            ((C56945 + C56944) * C90780 + (C56943 + C56942) * C6694) +
            (C56949 + C56948) * C90771 -
            (C56030 * C8120 + C55626 * C8760 + C56029 * C831 + C55625 * C1398) *
                C6696 -
            (C56030 * C8122 + C55626 * C8761 + C56029 * C841 + C55625 * C1403) *
                C6691) *
               C39126) *
              C90623 * C90567 * C90555)) /
        (p * q * std::sqrt(p + q));
    d2eezy[45] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C6771 +
            (C56029 * C182 + C55625 * C641 + C56030 * C1794 + C55626 * C2368) *
                C6692 -
            (C56030 * C3891 + C55626 * C4407 + C56029 * C832 + C55625 * C1396) *
                C6772 -
            (C56030 * C3989 + C55626 * C4493 + C56029 * C927 + C55625 * C1497) *
                C90555) *
               C39125 +
           ((C56057 + C56056) * C6771 + (C56146 + C56147) * C6692 -
            (C56943 + C56942) * C6772 - (C57056 + C57057) * C90555) *
               C39126) *
              C90623 * C90780 +
          (((C56942 + C56943) * C6772 -
            ((C56147 + C56146) * C6692 + (C56056 + C56057) * C6771) +
            (C57057 + C57056) * C90555) *
               C39125 +
           ((C56947 + C56946) * C6772 -
            ((C56148 + C56149) * C6692 + (C56061 + C56060) * C6771) +
            (C57058 + C57059) * C90555) *
               C39126) *
              C90623 * C90771 +
          (((C56060 + C56061) * C6771 + (C56149 + C56148) * C6692 -
            (C56946 + C56947) * C6772 - (C57059 + C57058) * C90555) *
               C39125 +
           ((C56065 + C56064) * C6771 + (C56150 + C56151) * C6692 -
            (C56030 * C8120 + C55626 * C8760 + C56029 * C831 + C55625 * C1398) *
                C6772 -
            (C56030 * C8222 + C55626 * C8872 + C56029 * C928 + C55625 * C1500) *
                C90555) *
               C39126) *
              C90623 * C6691) *
         C90567) /
        (p * q * std::sqrt(p + q));
    d2eezz[45] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                 C244 +
             (C56029 * C245 + C55625 * C719 + C56030 * C1879 + C55626 * C2460) *
                 C90567) *
                C39125 +
            ((C56057 + C56056) * C244 + (C56230 + C56231) * C90567) * C39126) *
               C90623 * C6692 -
           (((C57166 + C57167) * C90567 + (C56943 + C56942) * C244) * C39126 +
            ((C56030 * C4075 + C55626 * C4573 + C56029 * C1011 +
              C55625 * C1602) *
                 C90567 +
             (C56030 * C3891 + C55626 * C4407 + C56029 * C832 +
              C55625 * C1396) *
                 C244) *
                C39125) *
               C90623 * C90555) *
              C90780 +
          ((((C56942 + C56943) * C244 + (C57167 + C57166) * C90567) * C39125 +
            ((C56947 + C56946) * C244 + (C57168 + C57169) * C90567) * C39126) *
               C90623 * C90555 -
           (((C56232 + C56233) * C90567 + (C56061 + C56060) * C244) * C39126 +
            ((C56231 + C56230) * C90567 + (C56056 + C56057) * C244) * C39125) *
               C90623 * C6692) *
              C90771 +
          ((((C56060 + C56061) * C244 + (C56233 + C56232) * C90567) * C39125 +
            ((C56065 + C56064) * C244 + (C56234 + C56235) * C90567) * C39126) *
               C90623 * C6692 -
           (((C56030 * C8322 + C55626 * C8985 + C56029 * C1012 +
              C55625 * C1603) *
                 C90567 +
             (C56030 * C8120 + C55626 * C8760 + C56029 * C831 +
              C55625 * C1398) *
                 C244) *
                C39126 +
            ((C57169 + C57168) * C90567 + (C56946 + C56947) * C244) * C39125) *
               C90623 * C90555) *
              C6691)) /
        (p * q * std::sqrt(p + q));
    d2eexx[46] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C7401 +
            (C39129 * C116 + C39125 * C125 + C39130 * C117 + C39126 * C126) *
                C7396 -
            (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                C7402 -
            (C39130 * C118 + C39126 * C127 + C39129 * C117 + C39125 * C126) *
                C90503) *
               C90623 * C55625 +
           ((C57292 + C57293) * C7401 + (C57294 + C57295) * C7396 -
            (C57296 + C57297) * C7402 - (C57298 + C57299) * C90503) *
               C90623 * C55626) *
              C90567 * C90781 +
          (((C39867 + C39866) * C7402 -
            ((C39865 + C39864) * C7396 + (C39863 + C39862) * C7401) +
            (C39869 + C39868) * C90503) *
               C90623 * C55625 +
           ((C48578 + C48579) * C7402 -
            ((C43400 + C43401) * C7396 + (C43402 + C43403) * C7401) +
            (C48580 + C48581) * C90503) *
               C90623 * C55626) *
              C90567 * C90774 +
          (((C41812 + C41811) * C7401 + (C41810 + C41809) * C7396 -
            (C41808 + C41807) * C7402 - (C41814 + C41813) * C90503) *
               C90623 * C55625 +
           ((C43404 + C43405) * C7401 + (C43406 + C43407) * C7396 -
            (C39130 * C3894 + C39126 * C3906 + C39129 * C3895 +
             C39125 * C3907) *
                C7402 -
            (C39130 * C3903 + C39126 * C3912 + C39129 * C3904 +
             C39125 * C3913) *
                C90503) *
               C90623 * C55626) *
              C90567 * C7400)) /
        (p * q * std::sqrt(p + q));
    d2eexy[46] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C7477 +
            (C39129 * C182 + C39125 * C188 + C39130 * C183 + C39126 * C189) *
                C90781 -
            (C39863 + C39862) * C7478 - (C39984 + C39985) * C90774 +
            (C41812 + C41811) * C7479 + (C41921 + C41922) * C7400) *
               C90623 * C55625 +
           ((C57292 + C57293) * C7477 + (C57414 + C57415) * C90781 -
            (C43402 + C43403) * C7478 - (C43515 + C43514) * C90774 +
            (C43404 + C43405) * C7479 + (C43517 + C43516) * C7400) *
               C90623 * C55626) *
              C7396 +
          (((C39867 + C39866) * C7478 -
            ((C39130 * C184 + C39126 * C190 + C39129 * C183 + C39125 * C189) *
                 C90781 +
             (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                 C7477) +
            (C39986 + C39987) * C90774 - (C41808 + C41807) * C7479 -
            (C41923 + C41924) * C7400) *
               C90623 * C55625 +
           ((C48578 + C48579) * C7478 -
            ((C57416 + C57417) * C90781 + (C57296 + C57297) * C7477) +
            (C48717 + C48716) * C90774 -
            (C39130 * C3894 + C39126 * C3906 + C39129 * C3895 +
             C39125 * C3907) *
                C7479 -
            (C39130 * C3992 + C39126 * C3998 + C39129 * C3993 +
             C39125 * C3999) *
                C7400) *
               C90623 * C55626) *
              C90503) *
         C90567) /
        (p * q * std::sqrt(p + q));
    d2eexz[46] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                 C244 +
             (C39129 * C245 + C39125 * C251 + C39130 * C246 + C39126 * C252) *
                 C90567) *
                C90623 * C55625 +
            ((C57292 + C57293) * C244 + (C57531 + C57530) * C90567) * C90623 *
                C55626) *
               C90781 -
           (((C43624 + C43625) * C90567 + (C43402 + C43403) * C244) * C90623 *
                C55626 +
            ((C40101 + C40100) * C90567 + (C39863 + C39862) * C244) * C90623 *
                C55625) *
               C90774 +
           (((C41812 + C41811) * C244 + (C42032 + C42031) * C90567) * C90623 *
                C55625 +
            ((C43404 + C43405) * C244 + (C43626 + C43627) * C90567) * C90623 *
                C55626) *
               C7400) *
              C7396 +
          ((((C39867 + C39866) * C244 + (C40102 + C40103) * C90567) * C90623 *
                C55625 +
            ((C48578 + C48579) * C244 + (C48852 + C48853) * C90567) * C90623 *
                C55626) *
               C90774 -
           (((C57533 + C57532) * C90567 + (C57296 + C57297) * C244) * C90623 *
                C55626 +
            ((C39130 * C247 + C39126 * C253 + C39129 * C246 + C39125 * C252) *
                 C90567 +
             (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                 C244) *
                C90623 * C55625) *
               C90781 -
           (((C39130 * C4078 + C39126 * C4084 + C39129 * C4079 +
              C39125 * C4085) *
                 C90567 +
             (C39130 * C3894 + C39126 * C3906 + C39129 * C3895 +
              C39125 * C3907) *
                 C244) *
                C90623 * C55626 +
            ((C42034 + C42033) * C90567 + (C41808 + C41807) * C244) * C90623 *
                C55625) *
               C7400) *
              C90503)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[46] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C7401 +
             (C307 * C116 + C90623 * C314) * C7396 - C337 * C7402 -
             C338 * C90503) *
                C55625 +
            (C33994 + C33995 - C33996 - C33997) * C55626) *
               C39125 +
           ((C337 * C7401 + C338 * C7396 - C339 * C7402 - C340 * C90503) *
                C55625 +
            (C1984 * C7401 + C1985 * C7396 - C1986 * C7402 - C1987 * C90503) *
                C55626) *
               C39126) *
              C90567 * C90781 +
          (((C1116 * C7402 -
             ((C307 * C839 + C90623 * C1098) * C7396 +
              (C307 * C832 + C90623 * C1094) * C7401) +
             C1117 * C90503) *
                C55625 +
            (C34002 - (C34003 + C34004) + C34005) * C55626) *
               C39125 +
           ((C1118 * C7402 - (C1117 * C7396 + C1116 * C7401) + C1119 * C90503) *
                C55625 +
            (C8435 * C7402 - (C8434 * C7396 + C8433 * C7401) + C8436 * C90503) *
                C55626) *
               C39126) *
              C90567 * C90774 +
          ((((C307 * C2570 + C90623 * C2827) * C7401 +
             (C307 * C2577 + C90623 * C2831) * C7396 - C2844 * C7402 -
             C2845 * C90503) *
                C55625 +
            (C29756 * C7401 + C29757 * C7396 - C58585 * C7402 -
             C58586 * C90503) *
                C55626) *
               C39125 +
           ((C2844 * C7401 + C2845 * C7396 - C2846 * C7402 - C2847 * C90503) *
                C55625 +
            (C58585 * C7401 + C58586 * C7396 -
             (C307 * C3894 + C90623 * C4164) * C7402 -
             (C307 * C3903 + C90623 * C4170) * C90503) *
                C55626) *
               C39126) *
              C90567 * C7400)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[46] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C7477 +
             (C307 * C182 + C90623 * C394) * C90781 -
             (C307 * C832 + C90623 * C1094) * C7478 -
             (C307 * C927 + C90623 * C1195) * C90774 +
             (C307 * C2570 + C90623 * C2827) * C7479 +
             (C307 * C2663 + C90623 * C2921) * C7400) *
                C55625 +
            (C38071 + C38072 - C38073 - C38074 + C38075 + C38076) * C55626) *
               C39125 +
           ((C7703 + C7704 - C7705 - C7706 + C7707 + C7708) * C55625 +
            (C64444 + C64445 - C64446 - C64447 + C64448 + C64449) * C55626) *
               C39126) *
              C7396 +
          (((C7705 - (C7704 + C7703) + C7706 - C7707 - C7708) * C55625 +
            (C64446 - (C64445 + C64444) + C64447 - C64448 - C64449) * C55626) *
               C39125 +
           ((C7711 - (C7710 + C7709) + C7712 - C7713 - C7714) * C55625 +
            (C8435 * C7478 - (C2079 * C90781 + C1986 * C7477) + C8547 * C90774 -
             (C307 * C3894 + C90623 * C4164) * C7479 -
             (C307 * C3992 + C90623 * C4252) * C7400) *
                C55626) *
               C39126) *
              C90503) *
         C90567) /
        (p * q * std::sqrt(p + q));
    d2eeyz[46] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C90623 * C308) * C244 +
              (C307 * C245 + C90623 * C474) * C90567) *
                 C55625 +
             (C27910 * C244 + C28080 * C90567) * C55626) *
                C39125 +
            ((C481 + C497) * C55625 + (C55958 + C55959) * C55626) * C39126) *
               C90781 -
           (((C56824 + C56825) * C55626 + (C1318 + C1310) * C55625) * C39126 +
            ((C29948 * C90567 + C29752 * C244) * C55626 +
             ((C307 * C1011 + C90623 * C1301) * C90567 +
              (C307 * C832 + C90623 * C1094) * C244) *
                 C55625) *
                C39125) *
               C90774 +
           ((((C307 * C2570 + C90623 * C2827) * C244 +
              (C307 * C2745 + C90623 * C3017) * C90567) *
                 C55625 +
             (C29756 * C244 + C29950 * C90567) * C55626) *
                C39125 +
            ((C3022 + C3030) * C55625 + (C58792 + C58796) * C55626) * C39126) *
               C7400) *
              C7396 +
          ((((C1310 + C1318) * C55625 + (C56825 + C56824) * C55626) * C39125 +
            ((C1307 + C1317) * C55625 + (C56826 + C56827) * C55626) * C39126) *
               C90774 -
           (((C55960 + C55961) * C55626 + (C498 + C484) * C55625) * C39126 +
            ((C55959 + C55958) * C55626 + (C497 + C481) * C55625) * C39125) *
               C90781 -
           ((((C307 * C4078 + C90623 * C4332) * C90567 +
              (C307 * C3894 + C90623 * C4164) * C244) *
                 C55626 +
             (C3031 + C3025) * C55625) *
                C39126 +
            ((C58796 + C58792) * C55626 + (C3030 + C3022) * C55625) * C39125) *
               C7400) *
              C90503)) /
        (p * q * std::sqrt(p + q));
    d2eezx[46] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C7401 +
            (C56029 * C116 + C55625 * C561 + C56030 * C1707 + C55626 * C2268) *
                C7396 -
            (C56056 + C56057) * C7402 - (C56058 + C56059) * C90503) *
               C39125 +
           ((C56057 + C56056) * C7401 + (C56059 + C56058) * C7396 -
            (C56061 + C56060) * C7402 - (C56063 + C56062) * C90503) *
               C39126) *
              C90623 * C90567 * C90781 +
          (((C56942 + C56943) * C7402 -
            ((C56030 * C3900 + C55626 * C4413 + C56029 * C839 +
              C55625 * C1400) *
                 C7396 +
             (C56030 * C3891 + C55626 * C4407 + C56029 * C832 +
              C55625 * C1396) *
                 C7401) +
            (C56944 + C56945) * C90503) *
               C39125 +
           ((C56947 + C56946) * C7402 -
            ((C56945 + C56944) * C7396 + (C56943 + C56942) * C7401) +
            (C56949 + C56948) * C90503) *
               C39126) *
              C90623 * C90567 * C90774 +
          (((C56029 * C2570 + C55625 * C3105 + C56030 * C3896 +
             C55626 * C4412) *
                C7401 +
            (C56029 * C2577 + C55625 * C3109 + C56030 * C3905 +
             C55626 * C4418) *
                C7396 -
            (C58903 + C58904) * C7402 - (C58905 + C58906) * C90503) *
               C39125 +
           ((C58904 + C58903) * C7401 + (C58906 + C58905) * C7396 -
            (C56030 * C3894 + C55626 * C4410 + C56029 * C2572 +
             C55625 * C3107) *
                C7402 -
            (C56030 * C3903 + C55626 * C4416 + C56029 * C2579 +
             C55625 * C3111) *
                C90503) *
               C39126) *
              C90623 * C90567 * C7400)) /
        (p * q * std::sqrt(p + q));
    d2eezy[46] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C7477 +
            (C56029 * C182 + C55625 * C641 + C56030 * C1794 + C55626 * C2368) *
                C90781 -
            (C56030 * C3891 + C55626 * C4407 + C56029 * C832 + C55625 * C1396) *
                C7478 -
            (C56030 * C3989 + C55626 * C4493 + C56029 * C927 + C55625 * C1497) *
                C90774 +
            (C56029 * C2570 + C55625 * C3105 + C56030 * C3896 +
             C55626 * C4412) *
                C7479 +
            (C56029 * C2663 + C55625 * C3199 + C56030 * C3994 +
             C55626 * C4494) *
                C7400) *
               C39125 +
           ((C56057 + C56056) * C7477 + (C56146 + C56147) * C90781 -
            (C56943 + C56942) * C7478 - (C57056 + C57057) * C90774 +
            (C58904 + C58903) * C7479 + (C59009 + C59010) * C7400) *
               C39126) *
              C90623 * C7396 +
          (((C56942 + C56943) * C7478 -
            ((C56147 + C56146) * C90781 + (C56056 + C56057) * C7477) +
            (C57057 + C57056) * C90774 - (C58903 + C58904) * C7479 -
            (C59010 + C59009) * C7400) *
               C39125 +
           ((C56947 + C56946) * C7478 -
            ((C56148 + C56149) * C90781 + (C56061 + C56060) * C7477) +
            (C57058 + C57059) * C90774 -
            (C56030 * C3894 + C55626 * C4410 + C56029 * C2572 +
             C55625 * C3107) *
                C7479 -
            (C56030 * C3992 + C55626 * C4498 + C56029 * C2665 +
             C55625 * C3201) *
                C7400) *
               C39126) *
              C90623 * C90503) *
         C90567) /
        (p * q * std::sqrt(p + q));
    d2eezz[46] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                 C244 +
             (C56029 * C245 + C55625 * C719 + C56030 * C1879 + C55626 * C2460) *
                 C90567) *
                C39125 +
            ((C56057 + C56056) * C244 + (C56230 + C56231) * C90567) * C39126) *
               C90623 * C90781 -
           (((C57166 + C57167) * C90567 + (C56943 + C56942) * C244) * C39126 +
            ((C56030 * C4075 + C55626 * C4573 + C56029 * C1011 +
              C55625 * C1602) *
                 C90567 +
             (C56030 * C3891 + C55626 * C4407 + C56029 * C832 +
              C55625 * C1396) *
                 C244) *
                C39125) *
               C90623 * C90774 +
           (((C56029 * C2570 + C55625 * C3105 + C56030 * C3896 +
              C55626 * C4412) *
                 C244 +
             (C56029 * C2745 + C55625 * C3295 + C56030 * C4080 +
              C55626 * C4576) *
                 C90567) *
                C39125 +
            ((C58904 + C58903) * C244 + (C59113 + C59114) * C90567) * C39126) *
               C90623 * C7400) *
              C7396 +
          ((((C56942 + C56943) * C244 + (C57167 + C57166) * C90567) * C39125 +
            ((C56947 + C56946) * C244 + (C57168 + C57169) * C90567) * C39126) *
               C90623 * C90774 -
           (((C56232 + C56233) * C90567 + (C56061 + C56060) * C244) * C39126 +
            ((C56231 + C56230) * C90567 + (C56056 + C56057) * C244) * C39125) *
               C90623 * C90781 -
           (((C56030 * C4078 + C55626 * C4578 + C56029 * C2747 +
              C55625 * C3297) *
                 C90567 +
             (C56030 * C3894 + C55626 * C4410 + C56029 * C2572 +
              C55625 * C3107) *
                 C244) *
                C39126 +
            ((C59114 + C59113) * C90567 + (C58903 + C58904) * C244) * C39125) *
               C90623 * C7400) *
              C90503)) /
        (p * q * std::sqrt(p + q));
    d2eexx[47] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                 C7401 +
             (C39129 * C116 + C39125 * C125 + C39130 * C117 + C39126 * C126) *
                 C7396 -
             (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                 C7402 -
             (C39130 * C118 + C39126 * C127 + C39129 * C117 + C39125 * C126) *
                 C90503) *
                C90623 * C55625 +
            ((C57292 + C57293) * C7401 + (C57294 + C57295) * C7396 -
             (C57296 + C57297) * C7402 - (C57298 + C57299) * C90503) *
                C90623 * C55626) *
               C90753 +
           (((C57297 + C57296) * C7402 -
             ((C57295 + C57294) * C7396 + (C57293 + C57292) * C7401) +
             (C57299 + C57298) * C90503) *
                C90623 * C55625 +
            ((C60711 + C60712) * C7402 -
             ((C60713 + C60714) * C7396 + (C60715 + C60716) * C7401) +
             (C60717 + C60718) * C90503) *
                C90623 * C55626) *
               C90579) *
              C6692 +
          ((((C39867 + C39866) * C7402 -
             ((C39865 + C39864) * C7396 + (C39863 + C39862) * C7401) +
             (C39869 + C39868) * C90503) *
                C90623 * C55625 +
            ((C48578 + C48579) * C7402 -
             ((C43400 + C43401) * C7396 + (C43402 + C43403) * C7401) +
             (C48580 + C48581) * C90503) *
                C90623 * C55626) *
               C90753 +
           (((C43403 + C43402) * C7401 + (C43401 + C43400) * C7396 -
             (C48579 + C48578) * C7402 - (C48581 + C48580) * C90503) *
                C90623 * C55625 +
            ((C45252 + C45253) * C7401 + (C45254 + C45255) * C7396 -
             (C39130 * C5469 + C39126 * C5475 + C39129 * C5470 +
              C39125 * C5476) *
                 C7402 -
             (C39130 * C5472 + C39126 * C5478 + C39129 * C5473 +
              C39125 * C5479) *
                 C90503) *
                C90623 * C55626) *
               C90579) *
              C90555)) /
        (p * q * std::sqrt(p + q));
    d2eexy[47] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                 C6771 +
             (C39129 * C182 + C39125 * C188 + C39130 * C183 + C39126 * C189) *
                 C6692 -
             (C39863 + C39862) * C6772 - (C39984 + C39985) * C90555) *
                C90623 * C55625 +
            ((C57292 + C57293) * C6771 + (C57414 + C57415) * C6692 -
             (C43402 + C43403) * C6772 - (C43515 + C43514) * C90555) *
                C90623 * C55626) *
               C7396 +
           (((C39867 + C39866) * C6772 -
             ((C39130 * C184 + C39126 * C190 + C39129 * C183 + C39125 * C189) *
                  C6692 +
              (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                  C6771) +
             (C39986 + C39987) * C90555) *
                C90623 * C55625 +
            ((C48578 + C48579) * C6772 -
             ((C57416 + C57417) * C6692 + (C57296 + C57297) * C6771) +
             (C48717 + C48716) * C90555) *
                C90623 * C55626) *
               C90503) *
              C90753 +
          ((((C43403 + C43402) * C6772 -
             ((C57415 + C57414) * C6692 + (C57293 + C57292) * C6771) +
             (C43514 + C43515) * C90555) *
                C90623 * C55625 +
            ((C45252 + C45253) * C6772 -
             ((C60827 + C60828) * C6692 + (C60715 + C60716) * C6771) +
             (C45359 + C45358) * C90555) *
                C90623 * C55626) *
               C7396 +
           (((C57297 + C57296) * C6771 + (C57417 + C57416) * C6692 -
             (C48579 + C48578) * C6772 - (C48716 + C48717) * C90555) *
                C90623 * C55625 +
            ((C60711 + C60712) * C6771 + (C60825 + C60826) * C6692 -
             (C39130 * C5469 + C39126 * C5475 + C39129 * C5470 +
              C39125 * C5476) *
                 C6772 -
             (C39130 * C5555 + C39126 * C5558 + C39129 * C5556 +
              C39125 * C5559) *
                 C90555) *
                C90623 * C55626) *
               C90503) *
              C90579)) /
        (p * q * std::sqrt(p + q));
    d2eexz[47] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                 C1875 +
             (C39129 * C245 + C39125 * C251 + C39130 * C246 + C39126 * C252) *
                 C90753 -
             (C57293 + C57292) * C1876 - (C57530 + C57531) * C90579) *
                C90623 * C55625 +
            ((C57292 + C57293) * C1875 + (C57531 + C57530) * C90753 -
             (C60715 + C60716) * C1876 - (C60936 + C60935) * C90579) *
                C90623 * C55626) *
               C6692 +
           (((C43403 + C43402) * C1876 -
             ((C40101 + C40100) * C90753 + (C39863 + C39862) * C1875) +
             (C43625 + C43624) * C90579) *
                C90623 * C55625 +
            ((C45252 + C45253) * C1876 -
             ((C43624 + C43625) * C90753 + (C43402 + C43403) * C1875) +
             (C45462 + C45463) * C90579) *
                C90623 * C55626) *
               C90555) *
              C7396 +
          ((((C57297 + C57296) * C1876 -
             ((C39130 * C247 + C39126 * C253 + C39129 * C246 + C39125 * C252) *
                  C90753 +
              (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                  C1875) +
             (C57532 + C57533) * C90579) *
                C90623 * C55625 +
            ((C60711 + C60712) * C1876 -
             ((C57533 + C57532) * C90753 + (C57296 + C57297) * C1875) +
             (C60938 + C60937) * C90579) *
                C90623 * C55626) *
               C6692 +
           (((C39867 + C39866) * C1875 + (C40102 + C40103) * C90753 -
             (C48579 + C48578) * C1876 - (C48853 + C48852) * C90579) *
                C90623 * C55625 +
            ((C48578 + C48579) * C1875 + (C48852 + C48853) * C90753 -
             (C39130 * C5469 + C39126 * C5475 + C39129 * C5470 +
              C39125 * C5476) *
                 C1876 -
             (C39130 * C5635 + C39126 * C5638 + C39129 * C5636 +
              C39125 * C5639) *
                 C90579) *
                C90623 * C55626) *
               C90555) *
              C90503)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[47] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C90623 * C308) * C7401 +
              (C307 * C116 + C90623 * C314) * C7396 - C337 * C7402 -
              C338 * C90503) *
                 C55625 +
             (C33994 + C33995 - C33996 - C33997) * C55626) *
                C39125 +
            ((C337 * C7401 + C338 * C7396 - C339 * C7402 - C340 * C90503) *
                 C55625 +
             (C65362 + C65363 - C65364 - C65365) * C55626) *
                C39126) *
               C90753 +
           (((C33996 - (C33995 + C33994) + C33997) * C55625 +
             (C34000 - (C33999 + C33998) + C34001) * C55626) *
                C39125 +
            ((C65364 - (C65363 + C65362) + C65365) * C55625 +
             (C4932 * C7402 - (C4931 * C7396 + C4930 * C7401) +
              C4933 * C90503) *
                 C55626) *
                C39126) *
               C90579) *
              C6692 +
          ((((C1116 * C7402 -
              ((C307 * C839 + C90623 * C1098) * C7396 +
               (C307 * C832 + C90623 * C1094) * C7401) +
              C1117 * C90503) *
                 C55625 +
             (C34002 - (C34003 + C34004) + C34005) * C55626) *
                C39125 +
            ((C1118 * C7402 - (C1117 * C7396 + C1116 * C7401) +
              C1119 * C90503) *
                 C55625 +
             (C65366 - (C65367 + C65368) + C65369) * C55626) *
                C39126) *
               C90753 +
           (((C34004 + C34003 - C34002 - C34005) * C55625 +
             (C34009 + C34008 - C34014 - C34015) * C55626) *
                C39125 +
            ((C65368 + C65367 - C65366 - C65369) * C55625 +
             (C34012 * C7401 + C34013 * C7396 -
              (C307 * C5469 + C90623 * C5715) * C7402 -
              (C307 * C5472 + C90623 * C5718) * C90503) *
                 C55626) *
                C39126) *
               C90579) *
              C90555)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[47] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C90623 * C308) * C6771 +
              (C307 * C182 + C90623 * C394) * C6692 -
              (C307 * C832 + C90623 * C1094) * C6772 -
              (C307 * C927 + C90623 * C1195) * C90555) *
                 C55625 +
             (C34115 + C34116 - C34117 - C34118) * C55626) *
                C39125 +
            ((C6996 + C6997 - C6998 - C6999) * C55625 + C65504 * C55626) *
                C39126) *
               C7396 +
           (((C6998 - (C6997 + C6996) + C6999) * C55625 + C65505 * C55626) *
                C39125 +
            ((C7002 - (C7001 + C7000) + C7003) * C55625 +
             (C8541 - (C8542 + C8543) + C8549) * C55626) *
                C39126) *
               C90503) *
              C90753 +
          ((((C34117 - (C34116 + C34115) + C34118) * C55625 +
             (C34121 - (C34120 + C34119) + C34122) * C55626) *
                C39125 +
            (C65505 * C55625 + (C34123 - (C34124 + C34125) + C34129) * C55626) *
                C39126) *
               C7396 +
           ((C65504 * C55625 + (C34125 + C34124 - C34123 - C34129) * C55626) *
                C39125 +
            ((C8543 + C8542 - C8541 - C8549) * C55625 +
             (C4932 * C6771 + C5019 * C6692 -
              (C307 * C5469 + C90623 * C5715) * C6772 -
              (C307 * C5555 + C90623 * C5797) * C90555) *
                 C55626) *
                C39126) *
               C90503) *
              C90579)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[47] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((((C307 * C107 + C90623 * C308) * C1875 +
                        (C307 * C245 + C90623 * C474) * C90753 -
                        C27910 * C1876 - C28080 * C90579) *
                           C55625 +
                       (C27910 * C1875 + C28080 * C90753 - C27912 * C1876 -
                        C28081 * C90579) *
                           C55626) *
                          C39125 +
                      ((C2165 + C2166 - C2167 - C2184) * C55625 +
                       (C57839 + C57840 - C57841 - C57842) * C55626) *
                          C39126) *
                         C6692 +
                     (((C29752 * C1876 -
                        ((C307 * C1011 + C90623 * C1301) * C90753 +
                         (C307 * C832 + C90623 * C1094) * C1875) +
                        C29948 * C90579) *
                           C55625 +
                       (C29754 * C1876 - (C29948 * C90753 + C29752 * C1875) +
                        C29949 * C90579) *
                           C55626) *
                          C39125 +
                      ((C8649 - (C8650 + C8651) + C8661) * C55625 +
                       (C65636 - (C65637 + C65638) + C65639) * C55626) *
                          C39126) *
                         C90555) *
                        C7396 +
                    ((((C2167 - (C2166 + C2165) + C2184) * C55625 +
                       (C57841 - (C57840 + C57839) + C57842) * C55626) *
                          C39125 +
                      ((C2172 - (C2171 + C2170) + C2186) * C55625 +
                       (C57843 - (C57844 + C57845) + C57846) * C55626) *
                          C39126) *
                         C6692 +
                     (((C8651 + C8650 - C8649 - C8661) * C55625 +
                       (C65638 + C65637 - C65636 - C65639) * C55626) *
                          C39125 +
                      ((C8656 + C8655 - C8654 - C8662) * C55625 +
                       (C8435 * C1875 + C8660 * C90753 -
                        (C307 * C5469 + C90623 * C5715) * C1876 -
                        (C307 * C5635 + C90623 * C5874) * C90579) *
                           C55626) *
                          C39126) *
                         C90555) *
                        C90503)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[47] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                 C7401 +
             (C56029 * C116 + C55625 * C561 + C56030 * C1707 + C55626 * C2268) *
                 C7396 -
             (C56056 + C56057) * C7402 - (C56058 + C56059) * C90503) *
                C39125 +
            ((C56057 + C56056) * C7401 + (C56059 + C56058) * C7396 -
             (C56061 + C56060) * C7402 - (C56063 + C56062) * C90503) *
                C39126) *
               C90623 * C90753 +
           (((C57961 + C57962) * C7402 -
             ((C56030 * C4663 + C55626 * C5195 + C56029 * C1707 +
               C55625 * C2268) *
                  C7396 +
              (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
               C55625 * C2264) *
                  C7401) +
             (C57963 + C57964) * C90503) *
                C39125 +
            ((C57966 + C57965) * C7402 -
             ((C57964 + C57963) * C7396 + (C57962 + C57961) * C7401) +
             (C57968 + C57967) * C90503) *
                C39126) *
               C90623 * C90579) *
              C6692 +
          ((((C56942 + C56943) * C7402 -
             ((C56030 * C3900 + C55626 * C4413 + C56029 * C839 +
               C55625 * C1400) *
                  C7396 +
              (C56030 * C3891 + C55626 * C4407 + C56029 * C832 +
               C55625 * C1396) *
                  C7401) +
             (C56944 + C56945) * C90503) *
                C39125 +
            ((C56947 + C56946) * C7402 -
             ((C56945 + C56944) * C7396 + (C56943 + C56942) * C7401) +
             (C56949 + C56948) * C90503) *
                C39126) *
               C90623 * C90753 +
           (((C56029 * C3891 + C55625 * C4407 + C56030 * C5471 +
              C55626 * C5951) *
                 C7401 +
             (C56029 * C3900 + C55625 * C4413 + C56030 * C5474 +
              C55626 * C5954) *
                 C7396 -
             (C65778 + C65779) * C7402 - (C65780 + C65781) * C90503) *
                C39125 +
            ((C65779 + C65778) * C7401 + (C65781 + C65780) * C7396 -
             (C56030 * C5469 + C55626 * C5949 + C56029 * C3893 +
              C55625 * C4409) *
                 C7402 -
             (C56030 * C5472 + C55626 * C5952 + C56029 * C3902 +
              C55625 * C4415) *
                 C90503) *
                C39126) *
               C90623 * C90579) *
              C90555)) /
        (p * q * std::sqrt(p + q));
    d2eezy[47] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                 C6771 +
             (C56029 * C182 + C55625 * C641 + C56030 * C1794 + C55626 * C2368) *
                 C6692 -
             (C56030 * C3891 + C55626 * C4407 + C56029 * C832 +
              C55625 * C1396) *
                 C6772 -
             (C56030 * C3989 + C55626 * C4493 + C56029 * C927 +
              C55625 * C1497) *
                 C90555) *
                C39125 +
            ((C56057 + C56056) * C6771 + (C56146 + C56147) * C6692 -
             (C56943 + C56942) * C6772 - (C57056 + C57057) * C90555) *
                C39126) *
               C90623 * C7396 +
           (((C56942 + C56943) * C6772 -
             ((C56147 + C56146) * C6692 + (C56056 + C56057) * C6771) +
             (C57057 + C57056) * C90555) *
                C39125 +
            ((C56947 + C56946) * C6772 -
             ((C56148 + C56149) * C6692 + (C56061 + C56060) * C6771) +
             (C57058 + C57059) * C90555) *
                C39126) *
               C90623 * C90503) *
              C90753 +
          ((((C56029 * C3891 + C55625 * C4407 + C56030 * C5471 +
              C55626 * C5951) *
                 C6772 -
             ((C56030 * C4746 + C55626 * C5285 + C56029 * C1794 +
               C55625 * C2368) *
                  C6692 +
              (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
               C55625 * C2264) *
                  C6771) +
             (C56029 * C3989 + C55625 * C4493 + C56030 * C5557 +
              C55626 * C6029) *
                 C90555) *
                C39125 +
            ((C65779 + C65778) * C6772 -
             ((C58076 + C58075) * C6692 + (C57962 + C57961) * C6771) +
             (C65916 + C65917) * C90555) *
                C39126) *
               C90623 * C7396 +
           (((C57961 + C57962) * C6771 + (C58075 + C58076) * C6692 -
             (C65778 + C65779) * C6772 - (C65917 + C65916) * C90555) *
                C39125 +
            ((C57966 + C57965) * C6771 + (C58077 + C58078) * C6692 -
             (C56030 * C5469 + C55626 * C5949 + C56029 * C3893 +
              C55625 * C4409) *
                 C6772 -
             (C56030 * C5555 + C55626 * C6031 + C56029 * C3991 +
              C55625 * C4497) *
                 C90555) *
                C39126) *
               C90623 * C90503) *
              C90579)) /
        (p * q * std::sqrt(p + q));
    d2eezz[47] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                 C1875 +
             (C56029 * C245 + C55625 * C719 + C56030 * C1879 + C55626 * C2460) *
                 C90753 -
             (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
              C55625 * C2264) *
                 C1876 -
             (C56030 * C4831 + C55626 * C5373 + C56029 * C1879 +
              C55625 * C2460) *
                 C90579) *
                C39125 +
            ((C56057 + C56056) * C1875 + (C56230 + C56231) * C90753 -
             (C57962 + C57961) * C1876 - (C58185 + C58186) * C90579) *
                C39126) *
               C90623 * C6692 +
           (((C56029 * C3891 + C55625 * C4407 + C56030 * C5471 +
              C55626 * C5951) *
                 C1876 -
             ((C56030 * C4075 + C55626 * C4573 + C56029 * C1011 +
               C55625 * C1602) *
                  C90753 +
              (C56030 * C3891 + C55626 * C4407 + C56029 * C832 +
               C55625 * C1396) *
                  C1875) +
             (C56029 * C4075 + C55625 * C4573 + C56030 * C5637 +
              C55626 * C6106) *
                 C90579) *
                C39125 +
            ((C65779 + C65778) * C1876 -
             ((C57166 + C57167) * C90753 + (C56943 + C56942) * C1875) +
             (C66052 + C66053) * C90579) *
                C39126) *
               C90623 * C90555) *
              C7396 +
          ((((C57961 + C57962) * C1876 -
             ((C56231 + C56230) * C90753 + (C56056 + C56057) * C1875) +
             (C58186 + C58185) * C90579) *
                C39125 +
            ((C57966 + C57965) * C1876 -
             ((C56232 + C56233) * C90753 + (C56061 + C56060) * C1875) +
             (C58187 + C58188) * C90579) *
                C39126) *
               C90623 * C6692 +
           (((C56942 + C56943) * C1875 + (C57167 + C57166) * C90753 -
             (C65778 + C65779) * C1876 - (C66053 + C66052) * C90579) *
                C39125 +
            ((C56947 + C56946) * C1875 + (C57168 + C57169) * C90753 -
             (C56030 * C5469 + C55626 * C5949 + C56029 * C3893 +
              C55625 * C4409) *
                 C1876 -
             (C56030 * C5635 + C55626 * C6108 + C56029 * C4077 +
              C55625 * C4575) *
                 C90579) *
                C39126) *
               C90623 * C90555) *
              C90503)) /
        (p * q * std::sqrt(p + q));
    d2eexx[48] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                 C88316 +
             (C39129 * C116 + C39125 * C125 + C39130 * C117 + C39126 * C126) *
                 C90744 -
             (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                 C88309 -
             (C39130 * C118 + C39126 * C127 + C39129 * C117 + C39125 * C126) *
                 C90503) *
                C90623 * C55625 +
            ((C57292 + C57293) * C88316 + (C57294 + C57295) * C90744 -
             (C57296 + C57297) * C88309 - (C57298 + C57299) * C90503) *
                C90623 * C55626) *
               C9074 +
           (((C57297 + C57296) * C88309 -
             ((C57295 + C57294) * C90744 + (C57293 + C57292) * C88316) +
             (C57299 + C57298) * C90503) *
                C90623 * C55625 +
            ((C60711 + C60712) * C88309 -
             ((C60713 + C60714) * C90744 + (C60715 + C60716) * C88316) +
             (C60717 + C60718) * C90503) *
                C90623 * C55626) *
               C90579) *
              C6692 +
          ((((C39867 + C39866) * C88309 -
             ((C39865 + C39864) * C90744 + (C39863 + C39862) * C88316) +
             (C39869 + C39868) * C90503) *
                C90623 * C55625 +
            ((C48578 + C48579) * C88309 -
             ((C43400 + C43401) * C90744 + (C43402 + C43403) * C88316) +
             (C48580 + C48581) * C90503) *
                C90623 * C55626) *
               C9074 +
           (((C43403 + C43402) * C88316 + (C43401 + C43400) * C90744 -
             (C48579 + C48578) * C88309 - (C48581 + C48580) * C90503) *
                C90623 * C55625 +
            ((C45252 + C45253) * C88316 + (C45254 + C45255) * C90744 -
             (C39130 * C5469 + C39126 * C5475 + C39129 * C5470 +
              C39125 * C5476) *
                 C88309 -
             (C39130 * C5472 + C39126 * C5478 + C39129 * C5473 +
              C39125 * C5479) *
                 C90503) *
                C90623 * C55626) *
               C90579) *
              C90555)) /
        (p * q * std::sqrt(p + q));
    d2eexy[48] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                 C6771 +
             (C39129 * C182 + C39125 * C188 + C39130 * C183 + C39126 * C189) *
                 C6692 -
             (C39863 + C39862) * C6772 - (C39984 + C39985) * C90555) *
                C90623 * C55625 +
            ((C57292 + C57293) * C6771 + (C57414 + C57415) * C6692 -
             (C43402 + C43403) * C6772 - (C43515 + C43514) * C90555) *
                C90623 * C55626) *
               C90744 +
           (((C39867 + C39866) * C6772 -
             ((C39130 * C184 + C39126 * C190 + C39129 * C183 + C39125 * C189) *
                  C6692 +
              (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                  C6771) +
             (C39986 + C39987) * C90555) *
                C90623 * C55625 +
            ((C48578 + C48579) * C6772 -
             ((C57416 + C57417) * C6692 + (C57296 + C57297) * C6771) +
             (C48717 + C48716) * C90555) *
                C90623 * C55626) *
               C90503) *
              C9074 +
          ((((C43403 + C43402) * C6772 -
             ((C57415 + C57414) * C6692 + (C57293 + C57292) * C6771) +
             (C43514 + C43515) * C90555) *
                C90623 * C55625 +
            ((C45252 + C45253) * C6772 -
             ((C60827 + C60828) * C6692 + (C60715 + C60716) * C6771) +
             (C45359 + C45358) * C90555) *
                C90623 * C55626) *
               C90744 +
           (((C57297 + C57296) * C6771 + (C57417 + C57416) * C6692 -
             (C48579 + C48578) * C6772 - (C48716 + C48717) * C90555) *
                C90623 * C55625 +
            ((C60711 + C60712) * C6771 + (C60825 + C60826) * C6692 -
             (C39130 * C5469 + C39126 * C5475 + C39129 * C5470 +
              C39125 * C5476) *
                 C6772 -
             (C39130 * C5555 + C39126 * C5558 + C39129 * C5556 +
              C39125 * C5559) *
                 C90555) *
                C90623 * C55626) *
               C90503) *
              C90579)) /
        (p * q * std::sqrt(p + q));
    d2eexz[48] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                 C9224 +
             (C39129 * C245 + C39125 * C251 + C39130 * C246 + C39126 * C252) *
                 C9074 -
             (C57293 + C57292) * C9225 - (C57530 + C57531) * C90579) *
                C90623 * C55625 +
            ((C57292 + C57293) * C9224 + (C57531 + C57530) * C9074 -
             (C60715 + C60716) * C9225 - (C60936 + C60935) * C90579) *
                C90623 * C55626) *
               C6692 +
           (((C43403 + C43402) * C9225 -
             ((C40101 + C40100) * C9074 + (C39863 + C39862) * C9224) +
             (C43625 + C43624) * C90579) *
                C90623 * C55625 +
            ((C45252 + C45253) * C9225 -
             ((C43624 + C43625) * C9074 + (C43402 + C43403) * C9224) +
             (C45462 + C45463) * C90579) *
                C90623 * C55626) *
               C90555) *
              C90744 +
          ((((C57297 + C57296) * C9225 -
             ((C39130 * C247 + C39126 * C253 + C39129 * C246 + C39125 * C252) *
                  C9074 +
              (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                  C9224) +
             (C57532 + C57533) * C90579) *
                C90623 * C55625 +
            ((C60711 + C60712) * C9225 -
             ((C57533 + C57532) * C9074 + (C57296 + C57297) * C9224) +
             (C60938 + C60937) * C90579) *
                C90623 * C55626) *
               C6692 +
           (((C39867 + C39866) * C9224 + (C40102 + C40103) * C9074 -
             (C48579 + C48578) * C9225 - (C48853 + C48852) * C90579) *
                C90623 * C55625 +
            ((C48578 + C48579) * C9224 + (C48852 + C48853) * C9074 -
             (C39130 * C5469 + C39126 * C5475 + C39129 * C5470 +
              C39125 * C5476) *
                 C9225 -
             (C39130 * C5635 + C39126 * C5638 + C39129 * C5636 +
              C39125 * C5639) *
                 C90579) *
                C90623 * C55626) *
               C90555) *
              C90503)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[48] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C90623 * C308) * C88316 +
              (C307 * C116 + C90623 * C314) * C90744 - C337 * C88309 -
              C338 * C90503) *
                 C55625 +
             (C30538 + C30539 - C30540 - C30541) * C55626) *
                C39125 +
            ((C337 * C88316 + C338 * C90744 - C339 * C88309 - C340 * C90503) *
                 C55625 +
             (C61037 + C61038 - C61039 - C61040) * C55626) *
                C39126) *
               C9074 +
           (((C30540 - (C30539 + C30538) + C30541) * C55625 +
             (C30544 - (C30543 + C30542) + C30545) * C55626) *
                C39125 +
            ((C61039 - (C61038 + C61037) + C61040) * C55625 +
             (C61041 - (C61042 + C61043) + C61044) * C55626) *
                C39126) *
               C90579) *
              C6692 +
          ((((C1116 * C88309 -
              ((C307 * C839 + C90623 * C1098) * C90744 +
               (C307 * C832 + C90623 * C1094) * C88316) +
              C1117 * C90503) *
                 C55625 +
             (C37191 - (C37192 + C37193) + C37194) * C55626) *
                C39125 +
            ((C1118 * C88309 - (C1117 * C90744 + C1116 * C88316) +
              C1119 * C90503) *
                 C55625 +
             (C69542 - (C69543 + C69544) + C69545) * C55626) *
                C39126) *
               C9074 +
           (((C37193 + C37192 - C37191 - C37194) * C55625 +
             (C37197 + C37196 - C37195 - C37198) * C55626) *
                C39125 +
            ((C69544 + C69543 - C69542 - C69545) * C55625 +
             (C34012 * C88316 + C34013 * C90744 -
              (C307 * C5469 + C90623 * C5715) * C88309 -
              (C307 * C5472 + C90623 * C5718) * C90503) *
                 C55626) *
                C39126) *
               C90579) *
              C90555)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[48] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C90623 * C308) * C6771 +
              (C307 * C182 + C90623 * C394) * C6692 -
              (C307 * C832 + C90623 * C1094) * C6772 -
              (C307 * C927 + C90623 * C1195) * C90555) *
                 C55625 +
             (C34115 + C34116 - C34117 - C34118) * C55626) *
                C39125 +
            ((C6996 + C6997 - C6998 - C6999) * C55625 + C65504 * C55626) *
                C39126) *
               C90744 +
           (((C6998 - (C6997 + C6996) + C6999) * C55625 + C65505 * C55626) *
                C39125 +
            ((C7002 - (C7001 + C7000) + C7003) * C55625 +
             (C8541 - (C8542 + C8543) + C8549) * C55626) *
                C39126) *
               C90503) *
              C9074 +
          ((((C34117 - (C34116 + C34115) + C34118) * C55625 +
             (C34121 - (C34120 + C34119) + C34122) * C55626) *
                C39125 +
            (C65505 * C55625 + (C34123 - (C34124 + C34125) + C34129) * C55626) *
                C39126) *
               C90744 +
           ((C65504 * C55625 + (C34125 + C34124 - C34123 - C34129) * C55626) *
                C39125 +
            ((C8543 + C8542 - C8541 - C8549) * C55625 +
             (C4932 * C6771 + C5019 * C6692 -
              (C307 * C5469 + C90623 * C5715) * C6772 -
              (C307 * C5555 + C90623 * C5797) * C90555) *
                 C55626) *
                C39126) *
               C90503) *
              C90579)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[48] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((((C307 * C107 + C90623 * C308) * C9224 +
                        (C307 * C245 + C90623 * C474) * C9074 - C27910 * C9225 -
                        C28080 * C90579) *
                           C55625 +
                       (C27910 * C9224 + C28080 * C9074 - C27912 * C9225 -
                        C28081 * C90579) *
                           C55626) *
                          C39125 +
                      ((C9449 + C9450 - C9451 - C9452) * C55625 +
                       (C66648 + C66649 - C66650 - C66651) * C55626) *
                          C39126) *
                         C6692 +
                     (((C29752 * C9225 -
                        ((C307 * C1011 + C90623 * C1301) * C9074 +
                         (C307 * C832 + C90623 * C1094) * C9224) +
                        C29948 * C90579) *
                           C55625 +
                       (C29754 * C9225 - (C29948 * C9074 + C29752 * C9224) +
                        C29949 * C90579) *
                           C55626) *
                          C39125 +
                      ((C10298 - (C10299 + C10300) + C10301) * C55625 +
                       (C67736 - (C67737 + C67738) + C67739) * C55626) *
                          C39126) *
                         C90555) *
                        C90744 +
                    ((((C9451 - (C9450 + C9449) + C9452) * C55625 +
                       (C66650 - (C66649 + C66648) + C66651) * C55626) *
                          C39125 +
                      ((C9455 - (C9454 + C9453) + C9456) * C55625 +
                       (C66652 - (C66653 + C66654) + C66655) * C55626) *
                          C39126) *
                         C6692 +
                     (((C10300 + C10299 - C10298 - C10301) * C55625 +
                       (C67738 + C67737 - C67736 - C67739) * C55626) *
                          C39125 +
                      ((C10304 + C10303 - C10302 - C10305) * C55625 +
                       (C8435 * C9224 + C8660 * C9074 -
                        (C307 * C5469 + C90623 * C5715) * C9225 -
                        (C307 * C5635 + C90623 * C5874) * C90579) *
                           C55626) *
                          C39126) *
                         C90555) *
                        C90503)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[48] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                 C88316 +
             (C56029 * C116 + C55625 * C561 + C56030 * C1707 + C55626 * C2268) *
                 C90744 -
             (C56056 + C56057) * C88309 - (C56058 + C56059) * C90503) *
                C39125 +
            ((C56057 + C56056) * C88316 + (C56059 + C56058) * C90744 -
             (C56061 + C56060) * C88309 - (C56063 + C56062) * C90503) *
                C39126) *
               C90623 * C9074 +
           (((C57961 + C57962) * C88309 -
             ((C56030 * C4663 + C55626 * C5195 + C56029 * C1707 +
               C55625 * C2268) *
                  C90744 +
              (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
               C55625 * C2264) *
                  C88316) +
             (C57963 + C57964) * C90503) *
                C39125 +
            ((C57966 + C57965) * C88309 -
             ((C57964 + C57963) * C90744 + (C57962 + C57961) * C88316) +
             (C57968 + C57967) * C90503) *
                C39126) *
               C90623 * C90579) *
              C6692 +
          ((((C56942 + C56943) * C88309 -
             ((C56030 * C3900 + C55626 * C4413 + C56029 * C839 +
               C55625 * C1400) *
                  C90744 +
              (C56030 * C3891 + C55626 * C4407 + C56029 * C832 +
               C55625 * C1396) *
                  C88316) +
             (C56944 + C56945) * C90503) *
                C39125 +
            ((C56947 + C56946) * C88309 -
             ((C56945 + C56944) * C90744 + (C56943 + C56942) * C88316) +
             (C56949 + C56948) * C90503) *
                C39126) *
               C90623 * C9074 +
           (((C56029 * C3891 + C55625 * C4407 + C56030 * C5471 +
              C55626 * C5951) *
                 C88316 +
             (C56029 * C3900 + C55625 * C4413 + C56030 * C5474 +
              C55626 * C5954) *
                 C90744 -
             (C65778 + C65779) * C88309 - (C65780 + C65781) * C90503) *
                C39125 +
            ((C65779 + C65778) * C88316 + (C65781 + C65780) * C90744 -
             (C56030 * C5469 + C55626 * C5949 + C56029 * C3893 +
              C55625 * C4409) *
                 C88309 -
             (C56030 * C5472 + C55626 * C5952 + C56029 * C3902 +
              C55625 * C4415) *
                 C90503) *
                C39126) *
               C90623 * C90579) *
              C90555)) /
        (p * q * std::sqrt(p + q));
    d2eezy[48] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                 C6771 +
             (C56029 * C182 + C55625 * C641 + C56030 * C1794 + C55626 * C2368) *
                 C6692 -
             (C56030 * C3891 + C55626 * C4407 + C56029 * C832 +
              C55625 * C1396) *
                 C6772 -
             (C56030 * C3989 + C55626 * C4493 + C56029 * C927 +
              C55625 * C1497) *
                 C90555) *
                C39125 +
            ((C56057 + C56056) * C6771 + (C56146 + C56147) * C6692 -
             (C56943 + C56942) * C6772 - (C57056 + C57057) * C90555) *
                C39126) *
               C90623 * C90744 +
           (((C56942 + C56943) * C6772 -
             ((C56147 + C56146) * C6692 + (C56056 + C56057) * C6771) +
             (C57057 + C57056) * C90555) *
                C39125 +
            ((C56947 + C56946) * C6772 -
             ((C56148 + C56149) * C6692 + (C56061 + C56060) * C6771) +
             (C57058 + C57059) * C90555) *
                C39126) *
               C90623 * C90503) *
              C9074 +
          ((((C56029 * C3891 + C55625 * C4407 + C56030 * C5471 +
              C55626 * C5951) *
                 C6772 -
             ((C56030 * C4746 + C55626 * C5285 + C56029 * C1794 +
               C55625 * C2368) *
                  C6692 +
              (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
               C55625 * C2264) *
                  C6771) +
             (C56029 * C3989 + C55625 * C4493 + C56030 * C5557 +
              C55626 * C6029) *
                 C90555) *
                C39125 +
            ((C65779 + C65778) * C6772 -
             ((C58076 + C58075) * C6692 + (C57962 + C57961) * C6771) +
             (C65916 + C65917) * C90555) *
                C39126) *
               C90623 * C90744 +
           (((C57961 + C57962) * C6771 + (C58075 + C58076) * C6692 -
             (C65778 + C65779) * C6772 - (C65917 + C65916) * C90555) *
                C39125 +
            ((C57966 + C57965) * C6771 + (C58077 + C58078) * C6692 -
             (C56030 * C5469 + C55626 * C5949 + C56029 * C3893 +
              C55625 * C4409) *
                 C6772 -
             (C56030 * C5555 + C55626 * C6031 + C56029 * C3991 +
              C55625 * C4497) *
                 C90555) *
                C39126) *
               C90623 * C90503) *
              C90579)) /
        (p * q * std::sqrt(p + q));
    d2eezz[48] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                 C9224 +
             (C56029 * C245 + C55625 * C719 + C56030 * C1879 + C55626 * C2460) *
                 C9074 -
             (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
              C55625 * C2264) *
                 C9225 -
             (C56030 * C4831 + C55626 * C5373 + C56029 * C1879 +
              C55625 * C2460) *
                 C90579) *
                C39125 +
            ((C56057 + C56056) * C9224 + (C56230 + C56231) * C9074 -
             (C57962 + C57961) * C9225 - (C58185 + C58186) * C90579) *
                C39126) *
               C90623 * C6692 +
           (((C56029 * C3891 + C55625 * C4407 + C56030 * C5471 +
              C55626 * C5951) *
                 C9225 -
             ((C56030 * C4075 + C55626 * C4573 + C56029 * C1011 +
               C55625 * C1602) *
                  C9074 +
              (C56030 * C3891 + C55626 * C4407 + C56029 * C832 +
               C55625 * C1396) *
                  C9224) +
             (C56029 * C4075 + C55625 * C4573 + C56030 * C5637 +
              C55626 * C6106) *
                 C90579) *
                C39125 +
            ((C65779 + C65778) * C9225 -
             ((C57166 + C57167) * C9074 + (C56943 + C56942) * C9224) +
             (C66052 + C66053) * C90579) *
                C39126) *
               C90623 * C90555) *
              C90744 +
          ((((C57961 + C57962) * C9225 -
             ((C56231 + C56230) * C9074 + (C56056 + C56057) * C9224) +
             (C58186 + C58185) * C90579) *
                C39125 +
            ((C57966 + C57965) * C9225 -
             ((C56232 + C56233) * C9074 + (C56061 + C56060) * C9224) +
             (C58187 + C58188) * C90579) *
                C39126) *
               C90623 * C6692 +
           (((C56942 + C56943) * C9224 + (C57167 + C57166) * C9074 -
             (C65778 + C65779) * C9225 - (C66053 + C66052) * C90579) *
                C39125 +
            ((C56947 + C56946) * C9224 + (C57168 + C57169) * C9074 -
             (C56030 * C5469 + C55626 * C5949 + C56029 * C3893 +
              C55625 * C4409) *
                 C9225 -
             (C56030 * C5635 + C55626 * C6108 + C56029 * C4077 +
              C55625 * C4575) *
                 C90579) *
                C39126) *
               C90623 * C90555) *
              C90503)) /
        (p * q * std::sqrt(p + q));
    d2eexx[49] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                 C3364 +
             (C39129 * C116 + C39125 * C125 + C39130 * C117 + C39126 * C126) *
                 C90498) *
                C90623 * C55625 +
            ((C57292 + C57293) * C3364 + (C57294 + C57295) * C90498) * C90623 *
                C55626) *
               C9074 -
           (((C60713 + C60714) * C90498 + (C60715 + C60716) * C3364) * C90623 *
                C55626 +
            ((C57295 + C57294) * C90498 + (C57293 + C57292) * C3364) * C90623 *
                C55625) *
               C90579) *
              C90781 +
          ((((C43403 + C43402) * C3364 + (C43401 + C43400) * C90498) * C90623 *
                C55625 +
            ((C45252 + C45253) * C3364 + (C45254 + C45255) * C90498) * C90623 *
                C55626) *
               C90579 -
           (((C43400 + C43401) * C90498 + (C43402 + C43403) * C3364) * C90623 *
                C55626 +
            ((C39865 + C39864) * C90498 + (C39863 + C39862) * C3364) * C90623 *
                C55625) *
               C9074) *
              C90774 +
          ((((C41812 + C41811) * C3364 + (C41810 + C41809) * C90498) * C90623 *
                C55625 +
            ((C43404 + C43405) * C3364 + (C43406 + C43407) * C90498) * C90623 *
                C55626) *
               C9074 -
           (((C39130 * C17656 + C39126 * C17658 + C39129 * C17654 +
              C39125 * C17657) *
                 C90498 +
             (C39130 * C17652 + C39126 * C17655 + C39129 * C17651 +
              C39125 * C17653) *
                 C3364) *
                C90623 * C55626 +
            ((C43407 + C43406) * C90498 + (C43405 + C43404) * C3364) * C90623 *
                C55625) *
               C90579) *
              C7400)) /
        (p * q * std::sqrt(p + q));
    d2eexy[49] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C7477 +
            (C39129 * C182 + C39125 * C188 + C39130 * C183 + C39126 * C189) *
                C90781 -
            (C39863 + C39862) * C7478 - (C39984 + C39985) * C90774 +
            (C41812 + C41811) * C7479 + (C41921 + C41922) * C7400) *
               C90623 * C55625 +
           ((C57292 + C57293) * C7477 + (C57414 + C57415) * C90781 -
            (C43402 + C43403) * C7478 - (C43515 + C43514) * C90774 +
            (C43404 + C43405) * C7479 + (C43517 + C43516) * C7400) *
               C90623 * C55626) *
              C90498 * C9074 +
          (((C43403 + C43402) * C7478 -
            ((C57415 + C57414) * C90781 + (C57293 + C57292) * C7477) +
            (C43514 + C43515) * C90774 - (C43405 + C43404) * C7479 -
            (C43516 + C43517) * C7400) *
               C90623 * C55625 +
           ((C45252 + C45253) * C7478 -
            ((C60827 + C60828) * C90781 + (C60715 + C60716) * C7477) +
            (C45359 + C45358) * C90774 -
            (C39130 * C17652 + C39126 * C17655 + C39129 * C17651 +
             C39125 * C17653) *
                C7479 -
            (C39130 * C17734 + C39126 * C17736 + C39129 * C17733 +
             C39125 * C17735) *
                C7400) *
               C90623 * C55626) *
              C90498 * C90579)) /
        (p * q * std::sqrt(p + q));
    d2eexz[49] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C9224 +
            (C39129 * C245 + C39125 * C251 + C39130 * C246 + C39126 * C252) *
                C9074 -
            (C57293 + C57292) * C9225 - (C57530 + C57531) * C90579) *
               C90623 * C55625 +
           ((C57292 + C57293) * C9224 + (C57531 + C57530) * C9074 -
            (C60715 + C60716) * C9225 - (C60936 + C60935) * C90579) *
               C90623 * C55626) *
              C90781 +
          (((C43403 + C43402) * C9225 -
            ((C40101 + C40100) * C9074 + (C39863 + C39862) * C9224) +
            (C43625 + C43624) * C90579) *
               C90623 * C55625 +
           ((C45252 + C45253) * C9225 -
            ((C43624 + C43625) * C9074 + (C43402 + C43403) * C9224) +
            (C45462 + C45463) * C90579) *
               C90623 * C55626) *
              C90774 +
          (((C41812 + C41811) * C9224 + (C42032 + C42031) * C9074 -
            (C43405 + C43404) * C9225 - (C43627 + C43626) * C90579) *
               C90623 * C55625 +
           ((C43404 + C43405) * C9224 + (C43626 + C43627) * C9074 -
            (C39130 * C17652 + C39126 * C17655 + C39129 * C17651 +
             C39125 * C17653) *
                C9225 -
            (C39130 * C17812 + C39126 * C17814 + C39129 * C17811 +
             C39125 * C17813) *
                C90579) *
               C90623 * C55626) *
              C7400) *
         C90498) /
        (p * q * std::sqrt(p + q));
    d2eeyx[49] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C90623 * C308) * C3364 +
              (C307 * C116 + C90623 * C314) * C90498) *
                 C55625 +
             (C29732 + C29733) * C55626) *
                C39125 +
            ((C337 * C3364 + C338 * C90498) * C55625 +
             (C60101 + C60102) * C55626) *
                C39126) *
               C9074 -
           (((C61958 + C61959) * C55626 + (C60102 + C60101) * C55625) * C39126 +
            ((C29735 + C29734) * C55626 + (C29733 + C29732) * C55625) *
                C39125) *
               C90579) *
              C90781 +
          ((((C29760 + C29761) * C55625 + (C29762 + C29763) * C55626) * C39125 +
            ((C60103 + C60104) * C55625 + (C61960 + C61961) * C55626) *
                C39126) *
               C90579 -
           (((C60104 + C60103) * C55626 +
             (C1117 * C90498 + C1116 * C3364) * C55625) *
                C39126 +
            ((C29761 + C29760) * C55626 +
             ((C307 * C839 + C90623 * C1098) * C90498 +
              (C307 * C832 + C90623 * C1094) * C3364) *
                 C55625) *
                C39125) *
               C9074) *
              C90774 +
          (((((C307 * C2570 + C90623 * C2827) * C3364 +
              (C307 * C2577 + C90623 * C2831) * C90498) *
                 C55625 +
             (C29764 + C29765) * C55626) *
                C39125 +
            ((C2844 * C3364 + C2845 * C90498) * C55625 +
             (C60105 + C60106) * C55626) *
                C39126) *
               C9074 -
           ((((C307 * C17656 + C90623 * C17892) * C90498 +
              (C307 * C17652 + C90623 * C17890) * C3364) *
                 C55626 +
             (C60106 + C60105) * C55625) *
                C39126 +
            ((C29767 + C29766) * C55626 + (C29765 + C29764) * C55625) *
                C39125) *
               C90579) *
              C7400)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[49] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C7477 +
             (C307 * C182 + C90623 * C394) * C90781 -
             (C307 * C832 + C90623 * C1094) * C7478 -
             (C307 * C927 + C90623 * C1195) * C90774 +
             (C307 * C2570 + C90623 * C2827) * C7479 +
             (C307 * C2663 + C90623 * C2921) * C7400) *
                C55625 +
            (C38071 + C38072 - C38073 - C38074 + C38075 + C38076) * C55626) *
               C39125 +
           ((C7703 + C7704 - C7705 - C7706 + C7707 + C7708) * C55625 +
            (C64444 + C64445 - C64446 - C64447 + C64448 + C64449) * C55626) *
               C39126) *
              C90498 * C9074 +
          (((C38073 - (C38072 + C38071) + C38074 - C38075 - C38076) * C55625 +
            (C38079 - (C38078 + C38077) + C38080 - C38081 - C38082) * C55626) *
               C39125 +
           ((C64446 - (C64445 + C64444) + C64447 - C64448 - C64449) * C55625 +
            (C34012 * C7478 - (C5018 * C90781 + C4930 * C7477) +
             C34128 * C90774 - (C307 * C17652 + C90623 * C17890) * C7479 -
             (C307 * C17734 + C90623 * C17968) * C7400) *
                C55626) *
               C39126) *
              C90498 * C90579)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[49] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C9224 +
             (C307 * C245 + C90623 * C474) * C9074 - C27910 * C9225 -
             C28080 * C90579) *
                C55625 +
            (C27910 * C9224 + C28080 * C9074 - C27912 * C9225 -
             C28081 * C90579) *
                C55626) *
               C39125 +
           ((C9449 + C9450 - C9451 - C9452) * C55625 +
            (C66648 + C66649 - C66650 - C66651) * C55626) *
               C39126) *
              C90781 +
          (((C29752 * C9225 -
             ((C307 * C1011 + C90623 * C1301) * C9074 +
              (C307 * C832 + C90623 * C1094) * C9224) +
             C29948 * C90579) *
                C55625 +
            (C29754 * C9225 - (C29948 * C9074 + C29752 * C9224) +
             C29949 * C90579) *
                C55626) *
               C39125 +
           ((C10298 - (C10299 + C10300) + C10301) * C55625 +
            (C67736 - (C67737 + C67738) + C67739) * C55626) *
               C39126) *
              C90774 +
          ((((C307 * C2570 + C90623 * C2827) * C9224 +
             (C307 * C2745 + C90623 * C3017) * C9074 - C29756 * C9225 -
             C29950 * C90579) *
                C55625 +
            (C29756 * C9224 + C29950 * C9074 - C29758 * C9225 -
             C29951 * C90579) *
                C55626) *
               C39125 +
           ((C2844 * C9224 + C3028 * C9074 - C58585 * C9225 - C58795 * C90579) *
                C55625 +
            (C58585 * C9224 + C58795 * C9074 -
             (C307 * C17652 + C90623 * C17890) * C9225 -
             (C307 * C17812 + C90623 * C18044) * C90579) *
                C55626) *
               C39126) *
              C7400) *
         C90498) /
        (p * q * std::sqrt(p + q));
    d2eezx[49] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                 C3364 +
             (C56029 * C116 + C55625 * C561 + C56030 * C1707 + C55626 * C2268) *
                 C90498) *
                C39125 +
            ((C56057 + C56056) * C3364 + (C56059 + C56058) * C90498) * C39126) *
               C90623 * C9074 -
           (((C57964 + C57963) * C90498 + (C57962 + C57961) * C3364) * C39126 +
            ((C56030 * C4663 + C55626 * C5195 + C56029 * C1707 +
              C55625 * C2268) *
                 C90498 +
             (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
              C55625 * C2264) *
                 C3364) *
                C39125) *
               C90623 * C90579) *
              C90781 +
          ((((C56029 * C3891 + C55625 * C4407 + C56030 * C5471 +
              C55626 * C5951) *
                 C3364 +
             (C56029 * C3900 + C55625 * C4413 + C56030 * C5474 +
              C55626 * C5954) *
                 C90498) *
                C39125 +
            ((C65779 + C65778) * C3364 + (C65781 + C65780) * C90498) * C39126) *
               C90623 * C90579 -
           (((C56945 + C56944) * C90498 + (C56943 + C56942) * C3364) * C39126 +
            ((C56030 * C3900 + C55626 * C4413 + C56029 * C839 +
              C55625 * C1400) *
                 C90498 +
             (C56030 * C3891 + C55626 * C4407 + C56029 * C832 +
              C55625 * C1396) *
                 C3364) *
                C39125) *
               C90623 * C9074) *
              C90774 +
          ((((C56029 * C2570 + C55625 * C3105 + C56030 * C3896 +
              C55626 * C4412) *
                 C3364 +
             (C56029 * C2577 + C55625 * C3109 + C56030 * C3905 +
              C55626 * C4418) *
                 C90498) *
                C39125 +
            ((C58904 + C58903) * C3364 + (C58906 + C58905) * C90498) * C39126) *
               C90623 * C9074 -
           (((C56030 * C17656 + C55626 * C18122 + C56029 * C3904 +
              C55625 * C4417) *
                 C90498 +
             (C56030 * C17652 + C55626 * C18120 + C56029 * C3895 +
              C55625 * C4411) *
                 C3364) *
                C39126 +
            ((C56030 * C17654 + C55626 * C18121 + C56029 * C3905 +
              C55625 * C4418) *
                 C90498 +
             (C56030 * C17651 + C55626 * C18119 + C56029 * C3896 +
              C55625 * C4412) *
                 C3364) *
                C39125) *
               C90623 * C90579) *
              C7400)) /
        (p * q * std::sqrt(p + q));
    d2eezy[49] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C7477 +
            (C56029 * C182 + C55625 * C641 + C56030 * C1794 + C55626 * C2368) *
                C90781 -
            (C56030 * C3891 + C55626 * C4407 + C56029 * C832 + C55625 * C1396) *
                C7478 -
            (C56030 * C3989 + C55626 * C4493 + C56029 * C927 + C55625 * C1497) *
                C90774 +
            (C56029 * C2570 + C55625 * C3105 + C56030 * C3896 +
             C55626 * C4412) *
                C7479 +
            (C56029 * C2663 + C55625 * C3199 + C56030 * C3994 +
             C55626 * C4494) *
                C7400) *
               C39125 +
           ((C56057 + C56056) * C7477 + (C56146 + C56147) * C90781 -
            (C56943 + C56942) * C7478 - (C57056 + C57057) * C90774 +
            (C58904 + C58903) * C7479 + (C59009 + C59010) * C7400) *
               C39126) *
              C90623 * C90498 * C9074 +
          (((C56029 * C3891 + C55625 * C4407 + C56030 * C5471 +
             C55626 * C5951) *
                C7478 -
            ((C56030 * C4746 + C55626 * C5285 + C56029 * C1794 +
              C55625 * C2368) *
                 C90781 +
             (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
              C55625 * C2264) *
                 C7477) +
            (C56029 * C3989 + C55625 * C4493 + C56030 * C5557 +
             C55626 * C6029) *
                C90774 -
            (C56030 * C17651 + C55626 * C18119 + C56029 * C3896 +
             C55625 * C4412) *
                C7479 -
            (C56030 * C17733 + C55626 * C18197 + C56029 * C3994 +
             C55625 * C4494) *
                C7400) *
               C39125 +
           ((C65779 + C65778) * C7478 -
            ((C58076 + C58075) * C90781 + (C57962 + C57961) * C7477) +
            (C65916 + C65917) * C90774 -
            (C56030 * C17652 + C55626 * C18120 + C56029 * C3895 +
             C55625 * C4411) *
                C7479 -
            (C56030 * C17734 + C55626 * C18198 + C56029 * C3993 +
             C55625 * C4496) *
                C7400) *
               C39126) *
              C90623 * C90498 * C90579)) /
        (p * q * std::sqrt(p + q));
    d2eezz[49] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C9224 +
            (C56029 * C245 + C55625 * C719 + C56030 * C1879 + C55626 * C2460) *
                C9074 -
            (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
             C55625 * C2264) *
                C9225 -
            (C56030 * C4831 + C55626 * C5373 + C56029 * C1879 +
             C55625 * C2460) *
                C90579) *
               C39125 +
           ((C56057 + C56056) * C9224 + (C56230 + C56231) * C9074 -
            (C57962 + C57961) * C9225 - (C58185 + C58186) * C90579) *
               C39126) *
              C90623 * C90781 +
          (((C56029 * C3891 + C55625 * C4407 + C56030 * C5471 +
             C55626 * C5951) *
                C9225 -
            ((C56030 * C4075 + C55626 * C4573 + C56029 * C1011 +
              C55625 * C1602) *
                 C9074 +
             (C56030 * C3891 + C55626 * C4407 + C56029 * C832 +
              C55625 * C1396) *
                 C9224) +
            (C56029 * C4075 + C55625 * C4573 + C56030 * C5637 +
             C55626 * C6106) *
                C90579) *
               C39125 +
           ((C65779 + C65778) * C9225 -
            ((C57166 + C57167) * C9074 + (C56943 + C56942) * C9224) +
            (C66052 + C66053) * C90579) *
               C39126) *
              C90623 * C90774 +
          (((C56029 * C2570 + C55625 * C3105 + C56030 * C3896 +
             C55626 * C4412) *
                C9224 +
            (C56029 * C2745 + C55625 * C3295 + C56030 * C4080 +
             C55626 * C4576) *
                C9074 -
            (C56030 * C17651 + C55626 * C18119 + C56029 * C3896 +
             C55625 * C4412) *
                C9225 -
            (C56030 * C17811 + C55626 * C18273 + C56029 * C4080 +
             C55625 * C4576) *
                C90579) *
               C39125 +
           ((C58904 + C58903) * C9224 + (C59113 + C59114) * C9074 -
            (C56030 * C17652 + C55626 * C18120 + C56029 * C3895 +
             C55625 * C4411) *
                C9225 -
            (C56030 * C17812 + C55626 * C18274 + C56029 * C4079 +
             C55625 * C4577) *
                C90579) *
               C39126) *
              C90623 * C7400) *
         C90498) /
        (p * q * std::sqrt(p + q));
    d2eexx[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                 C3364 +
             (C39129 * C116 + C39125 * C125 + C39130 * C117 + C39126 * C126) *
                 C90498) *
                C90623 * C55625 +
            ((C57292 + C57293) * C3364 + (C57294 + C57295) * C90498) * C90623 *
                C55626) *
               C90782 -
           (((C60713 + C60714) * C90498 + (C60715 + C60716) * C3364) * C90623 *
                C55626 +
            ((C57295 + C57294) * C90498 + (C57293 + C57292) * C3364) * C90623 *
                C55625) *
               C90777 +
           (((C60716 + C60715) * C3364 + (C60714 + C60713) * C90498) * C90623 *
                C55625 +
            ((C62526 + C62527) * C3364 + (C62528 + C62529) * C90498) * C90623 *
                C55626) *
               C10691) *
              C6692 +
          ((((C43403 + C43402) * C3364 + (C43401 + C43400) * C90498) * C90623 *
                C55625 +
            ((C45252 + C45253) * C3364 + (C45254 + C45255) * C90498) * C90623 *
                C55626) *
               C90777 -
           (((C43400 + C43401) * C90498 + (C43402 + C43403) * C3364) * C90623 *
                C55626 +
            ((C39865 + C39864) * C90498 + (C39863 + C39862) * C3364) * C90623 *
                C55625) *
               C90782 -
           (((C39130 * C33651 + C39126 * C33652 + C39129 * C19091 +
              C39125 * C19094) *
                 C90498 +
             (C39130 * C33649 + C39126 * C33650 + C39129 * C19088 +
              C39125 * C19092) *
                 C3364) *
                C90623 * C55626 +
            ((C45255 + C45254) * C90498 + (C45253 + C45252) * C3364) * C90623 *
                C55625) *
               C10691) *
              C90555)) /
        (p * q * std::sqrt(p + q));
    d2eexy[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C6771 +
            (C39129 * C182 + C39125 * C188 + C39130 * C183 + C39126 * C189) *
                C6692 -
            (C39863 + C39862) * C6772 - (C39984 + C39985) * C90555) *
               C90623 * C55625 +
           ((C57292 + C57293) * C6771 + (C57414 + C57415) * C6692 -
            (C43402 + C43403) * C6772 - (C43515 + C43514) * C90555) *
               C90623 * C55626) *
              C90498 * C90782 +
          (((C43403 + C43402) * C6772 -
            ((C57415 + C57414) * C6692 + (C57293 + C57292) * C6771) +
            (C43514 + C43515) * C90555) *
               C90623 * C55625 +
           ((C45252 + C45253) * C6772 -
            ((C60827 + C60828) * C6692 + (C60715 + C60716) * C6771) +
            (C45359 + C45358) * C90555) *
               C90623 * C55626) *
              C90498 * C90777 +
          (((C60716 + C60715) * C6771 + (C60828 + C60827) * C6692 -
            (C45253 + C45252) * C6772 - (C45358 + C45359) * C90555) *
               C90623 * C55625 +
           ((C62526 + C62527) * C6771 + (C62600 + C62601) * C6692 -
            (C39130 * C33649 + C39126 * C33650 + C39129 * C19088 +
             C39125 * C19092) *
                C6772 -
            (C39130 * C33769 + C39126 * C33770 + C39129 * C19146 +
             C39125 * C19148) *
                C90555) *
               C90623 * C55626) *
              C90498 * C10691)) /
        (p * q * std::sqrt(p + q));
    d2eexz[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C10840 +
            (C39129 * C245 + C39125 * C251 + C39130 * C246 + C39126 * C252) *
                C90782 -
            (C57293 + C57292) * C10841 - (C57530 + C57531) * C90777 +
            (C60716 + C60715) * C10842 + (C60935 + C60936) * C10691) *
               C90623 * C55625 +
           ((C57292 + C57293) * C10840 + (C57531 + C57530) * C90782 -
            (C60715 + C60716) * C10841 - (C60936 + C60935) * C90777 +
            (C62526 + C62527) * C10842 + (C62673 + C62672) * C10691) *
               C90623 * C55626) *
              C6692 +
          (((C43403 + C43402) * C10841 -
            ((C40101 + C40100) * C90782 + (C39863 + C39862) * C10840) +
            (C43625 + C43624) * C90777 - (C45253 + C45252) * C10842 -
            (C45463 + C45462) * C10691) *
               C90623 * C55625 +
           ((C45252 + C45253) * C10841 -
            ((C43624 + C43625) * C90782 + (C43402 + C43403) * C10840) +
            (C45462 + C45463) * C90777 -
            (C39130 * C33649 + C39126 * C33650 + C39129 * C19088 +
             C39125 * C19092) *
                C10842 -
            (C39130 * C33888 + C39126 * C33889 + C39129 * C19199 +
             C39125 * C19201) *
                C10691) *
               C90623 * C55626) *
              C90555) *
         C90498) /
        (p * q * std::sqrt(p + q));
    d2eeyx[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C90623 * C308) * C3364 +
              (C307 * C116 + C90623 * C314) * C90498) *
                 C55625 +
             (C29732 + C29733) * C55626) *
                C39125 +
            ((C337 * C3364 + C338 * C90498) * C55625 +
             (C60101 + C60102) * C55626) *
                C39126) *
               C90782 -
           (((C61958 + C61959) * C55626 + (C60102 + C60101) * C55625) * C39126 +
            ((C29735 + C29734) * C55626 + (C29733 + C29732) * C55625) *
                C39125) *
               C90777 +
           ((C31307 * C55625 + (C31309 + C31308) * C55626) * C39125 +
            ((C61959 + C61958) * C55625 + (C62740 + C62741) * C55626) *
                C39126) *
               C10691) *
              C6692 +
          ((((C29760 + C29761) * C55625 + (C29762 + C29763) * C55626) * C39125 +
            ((C60103 + C60104) * C55625 + (C61960 + C61961) * C55626) *
                C39126) *
               C90777 -
           (((C60104 + C60103) * C55626 +
             (C1117 * C90498 + C1116 * C3364) * C55625) *
                C39126 +
            ((C29761 + C29760) * C55626 +
             ((C307 * C839 + C90623 * C1098) * C90498 +
              (C307 * C832 + C90623 * C1094) * C3364) *
                 C55625) *
                C39125) *
               C90782 -
           ((((C307 * C33651 + C90623 * C33992) * C90498 +
              (C307 * C33649 + C90623 * C33991) * C3364) *
                 C55626 +
             (C61961 + C61960) * C55625) *
                C39126 +
            ((C31318 + C31317) * C55626 + C31314 * C55625) * C39125) *
               C10691) *
              C90555)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C6771 +
             (C307 * C182 + C90623 * C394) * C6692 -
             (C307 * C832 + C90623 * C1094) * C6772 -
             (C307 * C927 + C90623 * C1195) * C90555) *
                C55625 +
            (C34115 + C34116 - C34117 - C34118) * C55626) *
               C39125 +
           ((C6996 + C6997 - C6998 - C6999) * C55625 + C65504 * C55626) *
               C39126) *
              C90498 * C90782 +
          (((C34117 - (C34116 + C34115) + C34118) * C55625 +
            (C34121 - (C34120 + C34119) + C34122) * C55626) *
               C39125 +
           (C65505 * C55625 + (C34123 - (C34124 + C34125) + C34129) * C55626) *
               C39126) *
              C90498 * C90777 +
          ((C38763 * C55625 + (C38760 + C38759 - C38758 - C38761) * C55626) *
               C39125 +
           ((C34125 + C34124 - C34123 - C34129) * C55625 +
            (C30555 * C6771 + C30649 * C6692 -
             (C307 * C33649 + C90623 * C33991) * C6772 -
             (C307 * C33769 + C90623 * C34113) * C90555) *
                C55626) *
               C39126) *
              C90498 * C10691)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C10840 +
             (C307 * C245 + C90623 * C474) * C90782 - C27910 * C10841 -
             C28080 * C90777 + C27912 * C10842 + C28081 * C10691) *
                C55625 +
            (C27910 * C10840 + C28080 * C90782 - C27912 * C10841 -
             C28081 * C90777 + C30557 * C10842 + C30733 * C10691) *
                C55626) *
               C39125 +
           ((C11066 + C11067 - C11068 - C11069 + C11070 + C11071) * C55625 +
            (C68722 + C68723 - C68724 - C68725 + C68726 + C68727) * C55626) *
               C39126) *
              C6692 +
          (((C29752 * C10841 -
             ((C307 * C1011 + C90623 * C1301) * C90782 +
              (C307 * C832 + C90623 * C1094) * C10840) +
             C29948 * C90777 - C29754 * C10842 - C29949 * C10691) *
                C55625 +
            (C29754 * C10841 - (C29948 * C90782 + C29752 * C10840) +
             C29949 * C90777 - C31315 * C10842 - C31489 * C10691) *
                C55626) *
               C39125 +
           ((C8433 * C10841 - (C1315 * C90782 + C1116 * C10840) +
             C8659 * C90777 - C34012 * C10842 - C34231 * C10691) *
                C55625 +
            (C34012 * C10841 - (C8659 * C90782 + C8433 * C10840) +
             C34231 * C90777 - (C307 * C33649 + C90623 * C33991) * C10842 -
             (C307 * C33888 + C90623 * C34227) * C10691) *
                C55626) *
               C39126) *
              C90555) *
         C90498) /
        (p * q * std::sqrt(p + q));
    d2eezx[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                 C3364 +
             (C56029 * C116 + C55625 * C561 + C56030 * C1707 + C55626 * C2268) *
                 C90498) *
                C39125 +
            ((C56057 + C56056) * C3364 + (C56059 + C56058) * C90498) * C39126) *
               C90623 * C90782 -
           (((C57964 + C57963) * C90498 + (C57962 + C57961) * C3364) * C39126 +
            ((C56030 * C4663 + C55626 * C5195 + C56029 * C1707 +
              C55625 * C2268) *
                 C90498 +
             (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
              C55625 * C2264) *
                 C3364) *
                C39125) *
               C90623 * C90777 +
           (((C56029 * C4656 + C55625 * C5191 + C56030 * C6165 +
              C55626 * C6505) *
                 C3364 +
             (C56029 * C4663 + C55625 * C5195 + C56030 * C6168 +
              C55626 * C6508) *
                 C90498) *
                C39125 +
            ((C61355 + C61354) * C3364 + (C61357 + C61356) * C90498) * C39126) *
               C90623 * C10691) *
              C6692 +
          ((((C56029 * C3891 + C55625 * C4407 + C56030 * C5471 +
              C55626 * C5951) *
                 C3364 +
             (C56029 * C3900 + C55625 * C4413 + C56030 * C5474 +
              C55626 * C5954) *
                 C90498) *
                C39125 +
            ((C65779 + C65778) * C3364 + (C65781 + C65780) * C90498) * C39126) *
               C90623 * C90777 -
           (((C56945 + C56944) * C90498 + (C56943 + C56942) * C3364) * C39126 +
            ((C56030 * C3900 + C55626 * C4413 + C56029 * C839 +
              C55625 * C1400) *
                 C90498 +
             (C56030 * C3891 + C55626 * C4407 + C56029 * C832 +
              C55625 * C1396) *
                 C3364) *
                C39125) *
               C90623 * C90782 -
           (((C56030 * C33651 + C55626 * C34330 + C56029 * C5473 +
              C55625 * C5953) *
                 C90498 +
             (C56030 * C33649 + C55626 * C34329 + C56029 * C5470 +
              C55625 * C5950) *
                 C3364) *
                C39126 +
            ((C56030 * C19091 + C55626 * C19414 + C56029 * C5474 +
              C55625 * C5954) *
                 C90498 +
             (C56030 * C19088 + C55626 * C19412 + C56029 * C5471 +
              C55625 * C5951) *
                 C3364) *
                C39125) *
               C90623 * C10691) *
              C90555)) /
        (p * q * std::sqrt(p + q));
    d2eezy[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C6771 +
            (C56029 * C182 + C55625 * C641 + C56030 * C1794 + C55626 * C2368) *
                C6692 -
            (C56030 * C3891 + C55626 * C4407 + C56029 * C832 + C55625 * C1396) *
                C6772 -
            (C56030 * C3989 + C55626 * C4493 + C56029 * C927 + C55625 * C1497) *
                C90555) *
               C39125 +
           ((C56057 + C56056) * C6771 + (C56146 + C56147) * C6692 -
            (C56943 + C56942) * C6772 - (C57056 + C57057) * C90555) *
               C39126) *
              C90623 * C90498 * C90782 +
          (((C56029 * C3891 + C55625 * C4407 + C56030 * C5471 +
             C55626 * C5951) *
                C6772 -
            ((C56030 * C4746 + C55626 * C5285 + C56029 * C1794 +
              C55625 * C2368) *
                 C6692 +
             (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
              C55625 * C2264) *
                 C6771) +
            (C56029 * C3989 + C55625 * C4493 + C56030 * C5557 +
             C55626 * C6029) *
                C90555) *
               C39125 +
           ((C65779 + C65778) * C6772 -
            ((C58076 + C58075) * C6692 + (C57962 + C57961) * C6771) +
            (C65916 + C65917) * C90555) *
               C39126) *
              C90623 * C90498 * C90777 +
          (((C56029 * C4656 + C55625 * C5191 + C56030 * C6165 +
             C55626 * C6505) *
                C6771 +
            (C56029 * C4746 + C55625 * C5285 + C56030 * C6227 +
             C55626 * C6561) *
                C6692 -
            (C56030 * C19088 + C55626 * C19412 + C56029 * C5471 +
             C55625 * C5951) *
                C6772 -
            (C56030 * C19146 + C55626 * C19466 + C56029 * C5557 +
             C55625 * C6029) *
                C90555) *
               C39125 +
           ((C61355 + C61354) * C6771 + (C61460 + C61461) * C6692 -
            (C56030 * C33649 + C55626 * C34329 + C56029 * C5470 +
             C55625 * C5950) *
                C6772 -
            (C56030 * C33769 + C55626 * C34429 + C56029 * C5556 +
             C55625 * C6030) *
                C90555) *
               C39126) *
              C90623 * C90498 * C10691)) /
        (p * q * std::sqrt(p + q));
    d2eezz[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C10840 +
            (C56029 * C245 + C55625 * C719 + C56030 * C1879 + C55626 * C2460) *
                C90782 -
            (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
             C55625 * C2264) *
                C10841 -
            (C56030 * C4831 + C55626 * C5373 + C56029 * C1879 +
             C55625 * C2460) *
                C90777 +
            (C56029 * C4656 + C55625 * C5191 + C56030 * C6165 +
             C55626 * C6505) *
                C10842 +
            (C56029 * C4831 + C55625 * C5373 + C56030 * C6287 +
             C55626 * C6612) *
                C10691) *
               C39125 +
           ((C56057 + C56056) * C10840 + (C56230 + C56231) * C90782 -
            (C57962 + C57961) * C10841 - (C58185 + C58186) * C90777 +
            (C61355 + C61354) * C10842 + (C61564 + C61565) * C10691) *
               C39126) *
              C90623 * C6692 +
          (((C56029 * C3891 + C55625 * C4407 + C56030 * C5471 +
             C55626 * C5951) *
                C10841 -
            ((C56030 * C4075 + C55626 * C4573 + C56029 * C1011 +
              C55625 * C1602) *
                 C90782 +
             (C56030 * C3891 + C55626 * C4407 + C56029 * C832 +
              C55625 * C1396) *
                 C10840) +
            (C56029 * C4075 + C55625 * C4573 + C56030 * C5637 +
             C55626 * C6106) *
                C90777 -
            (C56030 * C19088 + C55626 * C19412 + C56029 * C5471 +
             C55625 * C5951) *
                C10842 -
            (C56030 * C19199 + C55626 * C19517 + C56029 * C5637 +
             C55625 * C6106) *
                C10691) *
               C39125 +
           ((C65779 + C65778) * C10841 -
            ((C57166 + C57167) * C90782 + (C56943 + C56942) * C10840) +
            (C66052 + C66053) * C90777 -
            (C56030 * C33649 + C55626 * C34329 + C56029 * C5470 +
             C55625 * C5950) *
                C10842 -
            (C56030 * C33888 + C55626 * C34528 + C56029 * C5636 +
             C55625 * C6107) *
                C10691) *
               C39126) *
              C90623 * C90555) *
         C90498) /
        (p * q * std::sqrt(p + q));
    d2eexx[51] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C88316 +
            (C39129 * C116 + C39125 * C125 + C39130 * C117 + C39126 * C126) *
                C90744 -
            (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                C88309 -
            (C39130 * C118 + C39126 * C127 + C39129 * C117 + C39125 * C126) *
                C90503) *
               C90623 * C55625 +
           ((C57292 + C57293) * C88316 + (C57294 + C57295) * C90744 -
            (C57296 + C57297) * C88309 - (C57298 + C57299) * C90503) *
               C90623 * C55626) *
              C90567 * C2565 +
          (((C39867 + C39866) * C88309 -
            ((C39865 + C39864) * C90744 + (C39863 + C39862) * C88316) +
            (C39869 + C39868) * C90503) *
               C90623 * C55625 +
           ((C48578 + C48579) * C88309 -
            ((C43400 + C43401) * C90744 + (C43402 + C43403) * C88316) +
            (C48580 + C48581) * C90503) *
               C90623 * C55626) *
              C90567 * C2566 +
          (((C41812 + C41811) * C88316 + (C41810 + C41809) * C90744 -
            (C41808 + C41807) * C88309 - (C41814 + C41813) * C90503) *
               C90623 * C55625 +
           ((C43404 + C43405) * C88316 + (C43406 + C43407) * C90744 -
            (C39130 * C3894 + C39126 * C3906 + C39129 * C3895 +
             C39125 * C3907) *
                C88309 -
            (C39130 * C3903 + C39126 * C3912 + C39129 * C3904 +
             C39125 * C3913) *
                C90503) *
               C90623 * C55626) *
              C90567 * C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
               C103 +
           (C39129 * C116 + C39125 * C125 + C39130 * C117 + C39126 * C126) *
               C92 -
           (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
               C104 -
           (C39130 * C118 + C39126 * C127 + C39129 * C117 + C39125 * C126) *
               C93 +
           (C39129 * C109 + C39125 * C115 + C39130 * C110 + C39126 * C119) *
               C105 +
           (C39129 * C118 + C39125 * C127 + C39130 * C120 + C39126 * C128) *
               C94 -
           (C39130 * C111 + C39126 * C121 + C39129 * C110 + C39125 * C119) *
               C106 -
           (C39130 * C122 + C39126 * C129 + C39129 * C120 + C39125 * C128) *
               C95) *
              C90623 * C55625 +
          ((C39129 * C1700 + C39125 * C1708 + C39130 * C1697 + C39126 * C1702) *
               C103 +
           (C39129 * C1707 + C39125 * C1714 + C39130 * C1706 + C39126 * C1713) *
               C92 -
           (C39130 * C1698 + C39126 * C1703 + C39129 * C1697 + C39125 * C1702) *
               C104 -
           (C39130 * C1705 + C39126 * C1712 + C39129 * C1706 + C39125 * C1713) *
               C93 +
           (C39129 * C1698 + C39125 * C1703 + C39130 * C1699 + C39126 * C1704) *
               C105 +
           (C39129 * C1705 + C39125 * C1712 + C39130 * C1709 + C39126 * C1715) *
               C94 -
           (C39130 * C1701 + C39126 * C1710 + C39129 * C1699 + C39125 * C1704) *
               C106 -
           (C39130 * C1711 + C39126 * C1716 + C39129 * C1709 + C39125 * C1715) *
               C95) *
              C90623 * C55626) *
         C90567 * C90541) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C88316 +
            (C39129 * C116 + C39125 * C125 + C39130 * C117 + C39126 * C126) *
                C90744 -
            (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                C88309 -
            (C39130 * C118 + C39126 * C127 + C39129 * C117 + C39125 * C126) *
                C90503) *
               C90623 * C55625 +
           ((C57292 + C57293) * C88316 + (C57294 + C57295) * C90744 -
            (C57296 + C57297) * C88309 - (C57298 + C57299) * C90503) *
               C90623 * C55626) *
              C4653 +
          (((C57297 + C57296) * C88309 -
            ((C57295 + C57294) * C90744 + (C57293 + C57292) * C88316) +
            (C57299 + C57298) * C90503) *
               C90623 * C55625 +
           ((C60711 + C60712) * C88309 -
            ((C60713 + C60714) * C90744 + (C60715 + C60716) * C88316) +
            (C60717 + C60718) * C90503) *
               C90623 * C55626) *
              C4654 +
          (((C60716 + C60715) * C88316 + (C60714 + C60713) * C90744 -
            (C60712 + C60711) * C88309 - (C60718 + C60717) * C90503) *
               C90623 * C55625 +
           ((C39129 * C6165 + C39125 * C6171 + C39130 * C6164 +
             C39126 * C6170) *
                C88316 +
            (C39129 * C6168 + C39125 * C6174 + C39130 * C6167 +
             C39126 * C6173) *
                C90744 -
            (C39130 * C6163 + C39126 * C6169 + C39129 * C6164 +
             C39125 * C6170) *
                C88309 -
            (C39130 * C6166 + C39126 * C6172 + C39129 * C6167 +
             C39125 * C6173) *
                C90503) *
               C90623 * C55626) *
              C4655) *
         C90541) /
            (p * q * std::sqrt(p + q));
    d2eexy[51] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C2660 +
            (C39129 * C182 + C39125 * C188 + C39130 * C183 + C39126 * C189) *
                C2565 -
            (C39863 + C39862) * C2661 - (C39984 + C39985) * C2566 +
            (C41812 + C41811) * C2662 + (C41921 + C41922) * C2567) *
               C90623 * C55625 +
           ((C57292 + C57293) * C2660 + (C57414 + C57415) * C2565 -
            (C43402 + C43403) * C2661 - (C43515 + C43514) * C2566 +
            (C43404 + C43405) * C2662 + (C43517 + C43516) * C2567) *
               C90623 * C55626) *
              C90744 +
          (((C39867 + C39866) * C2661 -
            ((C39130 * C184 + C39126 * C190 + C39129 * C183 + C39125 * C189) *
                 C2565 +
             (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                 C2660) +
            (C39986 + C39987) * C2566 - (C41808 + C41807) * C2662 -
            (C41923 + C41924) * C2567) *
               C90623 * C55625 +
           ((C48578 + C48579) * C2661 -
            ((C57416 + C57417) * C2565 + (C57296 + C57297) * C2660) +
            (C48717 + C48716) * C2566 -
            (C39130 * C3894 + C39126 * C3906 + C39129 * C3895 +
             C39125 * C3907) *
                C2662 -
            (C39130 * C3992 + C39126 * C3998 + C39129 * C3993 +
             C39125 * C3999) *
                C2567) *
               C90623 * C55626) *
              C90503) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C181 +
            (C39129 * C182 + C39125 * C188 + C39130 * C183 + C39126 * C189) *
                C90541) *
               C90623 * C55625 +
           ((C39129 * C1700 + C39125 * C1708 + C39130 * C1697 +
             C39126 * C1702) *
                C181 +
            (C39129 * C1794 + C39125 * C1799 + C39130 * C1791 +
             C39126 * C1796) *
                C90541) *
               C90623 * C55626) *
              C92 -
          (((C39130 * C1792 + C39126 * C1797 + C39129 * C1791 +
             C39125 * C1796) *
                C90541 +
            (C39130 * C1698 + C39126 * C1703 + C39129 * C1697 +
             C39125 * C1702) *
                C181) *
               C90623 * C55626 +
           ((C39130 * C184 + C39126 * C190 + C39129 * C183 + C39125 * C189) *
                C90541 +
            (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                C181) *
               C90623 * C55625) *
              C93 +
          (((C39129 * C109 + C39125 * C115 + C39130 * C110 + C39126 * C119) *
                C181 +
            (C39129 * C184 + C39125 * C190 + C39130 * C185 + C39126 * C191) *
                C90541) *
               C90623 * C55625 +
           ((C39129 * C1698 + C39125 * C1703 + C39130 * C1699 +
             C39126 * C1704) *
                C181 +
            (C39129 * C1792 + C39125 * C1797 + C39130 * C1793 +
             C39126 * C1798) *
                C90541) *
               C90623 * C55626) *
              C94 -
          (((C39130 * C1795 + C39126 * C1800 + C39129 * C1793 +
             C39125 * C1798) *
                C90541 +
            (C39130 * C1701 + C39126 * C1710 + C39129 * C1699 +
             C39125 * C1704) *
                C181) *
               C90623 * C55626 +
           ((C39130 * C186 + C39126 * C192 + C39129 * C185 + C39125 * C191) *
                C90541 +
            (C39130 * C111 + C39126 * C121 + C39129 * C110 + C39125 * C119) *
                C181) *
               C90623 * C55625) *
              C95) *
         C90567) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                 C181 +
             (C39129 * C182 + C39125 * C188 + C39130 * C183 + C39126 * C189) *
                 C90541) *
                C90623 * C55625 +
            ((C57292 + C57293) * C181 + (C57414 + C57415) * C90541) * C90623 *
                C55626) *
               C90744 -
           (((C57416 + C57417) * C90541 + (C57296 + C57297) * C181) * C90623 *
                C55626 +
            ((C39130 * C184 + C39126 * C190 + C39129 * C183 + C39125 * C189) *
                 C90541 +
             (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                 C181) *
                C90623 * C55625) *
               C90503) *
              C4653 +
          ((((C57297 + C57296) * C181 + (C57417 + C57416) * C90541) * C90623 *
                C55625 +
            ((C60711 + C60712) * C181 + (C60825 + C60826) * C90541) * C90623 *
                C55626) *
               C90503 -
           (((C60827 + C60828) * C90541 + (C60715 + C60716) * C181) * C90623 *
                C55626 +
            ((C57415 + C57414) * C90541 + (C57293 + C57292) * C181) * C90623 *
                C55625) *
               C90744) *
              C4654 +
          ((((C60716 + C60715) * C181 + (C60828 + C60827) * C90541) * C90623 *
                C55625 +
            ((C39129 * C6165 + C39125 * C6171 + C39130 * C6164 +
              C39126 * C6170) *
                 C181 +
             (C39129 * C6227 + C39125 * C6230 + C39130 * C6226 +
              C39126 * C6229) *
                 C90541) *
                C90623 * C55626) *
               C90744 -
           (((C39130 * C6225 + C39126 * C6228 + C39129 * C6226 +
              C39125 * C6229) *
                 C90541 +
             (C39130 * C6163 + C39126 * C6169 + C39129 * C6164 +
              C39125 * C6170) *
                 C181) *
                C90623 * C55626 +
            ((C60826 + C60825) * C90541 + (C60712 + C60711) * C181) * C90623 *
                C55625) *
               C90503) *
              C4655)) /
            (p * q * std::sqrt(p + q));
    d2eexz[51] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                 C244 +
             (C39129 * C245 + C39125 * C251 + C39130 * C246 + C39126 * C252) *
                 C90567) *
                C90623 * C55625 +
            ((C57292 + C57293) * C244 + (C57531 + C57530) * C90567) * C90623 *
                C55626) *
               C2565 -
           (((C43624 + C43625) * C90567 + (C43402 + C43403) * C244) * C90623 *
                C55626 +
            ((C40101 + C40100) * C90567 + (C39863 + C39862) * C244) * C90623 *
                C55625) *
               C2566 +
           (((C41812 + C41811) * C244 + (C42032 + C42031) * C90567) * C90623 *
                C55625 +
            ((C43404 + C43405) * C244 + (C43626 + C43627) * C90567) * C90623 *
                C55626) *
               C2567) *
              C90744 +
          ((((C39867 + C39866) * C244 + (C40102 + C40103) * C90567) * C90623 *
                C55625 +
            ((C48578 + C48579) * C244 + (C48852 + C48853) * C90567) * C90623 *
                C55626) *
               C2566 -
           (((C57533 + C57532) * C90567 + (C57296 + C57297) * C244) * C90623 *
                C55626 +
            ((C39130 * C247 + C39126 * C253 + C39129 * C246 + C39125 * C252) *
                 C90567 +
             (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                 C244) *
                C90623 * C55625) *
               C2565 -
           (((C39130 * C4078 + C39126 * C4084 + C39129 * C4079 +
              C39125 * C4085) *
                 C90567 +
             (C39130 * C3894 + C39126 * C3906 + C39129 * C3895 +
              C39125 * C3907) *
                 C244) *
                C90623 * C55626 +
            ((C42034 + C42033) * C90567 + (C41808 + C41807) * C244) * C90623 *
                C55625) *
               C2567) *
              C90503)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C244 +
            (C39129 * C245 + C39125 * C251 + C39130 * C246 + C39126 * C252) *
                C90567) *
               C90623 * C55625 +
           ((C39129 * C1700 + C39125 * C1708 + C39130 * C1697 +
             C39126 * C1702) *
                C244 +
            (C39129 * C1879 + C39125 * C1884 + C39130 * C1878 +
             C39126 * C1883) *
                C90567) *
               C90623 * C55626) *
              C90541 * C92 -
          (((C39130 * C1877 + C39126 * C1882 + C39129 * C1878 +
             C39125 * C1883) *
                C90567 +
            (C39130 * C1698 + C39126 * C1703 + C39129 * C1697 +
             C39125 * C1702) *
                C244) *
               C90623 * C55626 +
           ((C39130 * C247 + C39126 * C253 + C39129 * C246 + C39125 * C252) *
                C90567 +
            (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                C244) *
               C90623 * C55625) *
              C90541 * C93 +
          (((C39129 * C109 + C39125 * C115 + C39130 * C110 + C39126 * C119) *
                C244 +
            (C39129 * C247 + C39125 * C253 + C39130 * C248 + C39126 * C254) *
                C90567) *
               C90623 * C55625 +
           ((C39129 * C1698 + C39125 * C1703 + C39130 * C1699 +
             C39126 * C1704) *
                C244 +
            (C39129 * C1877 + C39125 * C1882 + C39130 * C1880 +
             C39126 * C1885) *
                C90567) *
               C90623 * C55626) *
              C90541 * C94 -
          (((C39130 * C1881 + C39126 * C1886 + C39129 * C1880 +
             C39125 * C1885) *
                C90567 +
            (C39130 * C1701 + C39126 * C1710 + C39129 * C1699 +
             C39125 * C1704) *
                C244) *
               C90623 * C55626 +
           ((C39130 * C249 + C39126 * C255 + C39129 * C248 + C39125 * C254) *
                C90567 +
            (C39130 * C111 + C39126 * C121 + C39129 * C110 + C39125 * C119) *
                C244) *
               C90623 * C55625) *
              C90541 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C4828 +
            (C39129 * C245 + C39125 * C251 + C39130 * C246 + C39126 * C252) *
                C4653 -
            (C57293 + C57292) * C4829 - (C57530 + C57531) * C4654 +
            (C60716 + C60715) * C4830 + (C60935 + C60936) * C4655) *
               C90623 * C55625 +
           ((C57292 + C57293) * C4828 + (C57531 + C57530) * C4653 -
            (C60715 + C60716) * C4829 - (C60936 + C60935) * C4654 +
            (C39129 * C6165 + C39125 * C6171 + C39130 * C6164 +
             C39126 * C6170) *
                C4830 +
            (C39129 * C6287 + C39125 * C6290 + C39130 * C6286 +
             C39126 * C6289) *
                C4655) *
               C90623 * C55626) *
              C90541 * C90744 +
          (((C57297 + C57296) * C4829 -
            ((C39130 * C247 + C39126 * C253 + C39129 * C246 + C39125 * C252) *
                 C4653 +
             (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                 C4828) +
            (C57532 + C57533) * C4654 - (C60712 + C60711) * C4830 -
            (C60937 + C60938) * C4655) *
               C90623 * C55625 +
           ((C60711 + C60712) * C4829 -
            ((C57533 + C57532) * C4653 + (C57296 + C57297) * C4828) +
            (C60938 + C60937) * C4654 -
            (C39130 * C6163 + C39126 * C6169 + C39129 * C6164 +
             C39125 * C6170) *
                C4830 -
            (C39130 * C6285 + C39126 * C6288 + C39129 * C6286 +
             C39125 * C6289) *
                C4655) *
               C90623 * C55626) *
              C90541 * C90503)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[51] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C88316 +
             (C307 * C116 + C90623 * C314) * C90744 - C337 * C88309 -
             C338 * C90503) *
                C55625 +
            (C30538 + C30539 - C30540 - C30541) * C55626) *
               C39125 +
           ((C337 * C88316 + C338 * C90744 - C339 * C88309 - C340 * C90503) *
                C55625 +
            (C1984 * C88316 + C1985 * C90744 - C1986 * C88309 -
             C1987 * C90503) *
                C55626) *
               C39126) *
              C90567 * C2565 +
          (((C1116 * C88309 -
             ((C307 * C839 + C90623 * C1098) * C90744 +
              (C307 * C832 + C90623 * C1094) * C88316) +
             C1117 * C90503) *
                C55625 +
            (C37191 - (C37192 + C37193) + C37194) * C55626) *
               C39125 +
           ((C1118 * C88309 - (C1117 * C90744 + C1116 * C88316) +
             C1119 * C90503) *
                C55625 +
            (C8435 * C88309 - (C8434 * C90744 + C8433 * C88316) +
             C8436 * C90503) *
                C55626) *
               C39126) *
              C90567 * C2566 +
          ((((C307 * C2570 + C90623 * C2827) * C88316 +
             (C307 * C2577 + C90623 * C2831) * C90744 - C2844 * C88309 -
             C2845 * C90503) *
                C55625 +
            (C29756 * C88316 + C29757 * C90744 - C58585 * C88309 -
             C58586 * C90503) *
                C55626) *
               C39125 +
           ((C2844 * C88316 + C2845 * C90744 - C2846 * C88309 -
             C2847 * C90503) *
                C55625 +
            (C58585 * C88316 + C58586 * C90744 -
             (C307 * C3894 + C90623 * C4164) * C88309 -
             (C307 * C3903 + C90623 * C4170) * C90503) *
                C55626) *
               C39126) *
              C90567 * C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C103 +
            (C307 * C116 + C90623 * C314) * C92 - C337 * C104 - C338 * C93 +
            C339 * C105 + C340 * C94 - C341 * C106 - C342 * C95) *
               C55625 +
           (C27910 * C103 + C27911 * C92 - C1984 * C104 - C1985 * C93 +
            C1986 * C105 + C1987 * C94 - C1988 * C106 - C1989 * C95) *
               C55626) *
              C39125 +
          ((C337 * C103 + C338 * C92 - C339 * C104 - C340 * C93 + C341 * C105 +
            C342 * C94 - C343 * C106 - C344 * C95) *
               C55625 +
           (C1984 * C103 + C1985 * C92 - C1986 * C104 - C1987 * C93 +
            C1988 * C105 + C1989 * C94 -
            (C307 * C1701 + C90623 * C1965) * C106 -
            (C307 * C1711 + C90623 * C1970) * C95) *
               C55626) *
              C39126) *
         C90567 * C90541) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C88316 +
             (C307 * C116 + C90623 * C314) * C90744 - C337 * C88309 -
             C338 * C90503) *
                C55625 +
            (C30538 + C30539 - C30540 - C30541) * C55626) *
               C39125 +
           ((C337 * C88316 + C338 * C90744 - C339 * C88309 - C340 * C90503) *
                C55625 +
            (C61037 + C61038 - C61039 - C61040) * C55626) *
               C39126) *
              C4653 +
          (((C30540 - (C30539 + C30538) + C30541) * C55625 +
            (C30544 - (C30543 + C30542) + C30545) * C55626) *
               C39125 +
           ((C61039 - (C61038 + C61037) + C61040) * C55625 +
            (C61041 - (C61042 + C61043) + C61044) * C55626) *
               C39126) *
              C4654 +
          ((C30564 * C55625 + (C30562 + C30561 - C30560 - C30563) * C55626) *
               C39125 +
           ((C61043 + C61042 - C61041 - C61044) * C55625 +
            (C30555 * C88316 + C30558 * C90744 -
             (C307 * C6163 + C90623 * C6341) * C88309 -
             (C307 * C6166 + C90623 * C6344) * C90503) *
                C55626) *
               C39126) *
              C4655) *
         C90541) /
            (p * q * std::sqrt(p + q));
    d2eeyy[51] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C2660 +
             (C307 * C182 + C90623 * C394) * C2565 -
             (C307 * C832 + C90623 * C1094) * C2661 -
             (C307 * C927 + C90623 * C1195) * C2566 +
             (C307 * C2570 + C90623 * C2827) * C2662 +
             (C307 * C2663 + C90623 * C2921) * C2567) *
                C55625 +
            (C29842 + C29843 - C29844 - C29862 + C29847 + C29863) * C55626) *
               C39125 +
           ((C2926 + C2927 - C2928 - C2929 + C2930 + C2942) * C55625 +
            (C58685 + C58686 - C58687 - C58688 + C58689 + C58693) * C55626) *
               C39126) *
              C90744 +
          (((C2928 - (C2927 + C2926) + C2929 - C2930 - C2942) * C55625 +
            (C58687 - (C58686 + C58685) + C58688 - C58689 - C58693) * C55626) *
               C39125 +
           ((C2935 - (C2934 + C2933) + C2936 - C2937 - C2943) * C55625 +
            (C8435 * C2661 - (C2079 * C2565 + C1986 * C2660) + C8547 * C2566 -
             (C307 * C3894 + C90623 * C4164) * C2662 -
             (C307 * C3992 + C90623 * C4252) * C2567) *
                C55626) *
               C39126) *
              C90503) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C181 +
             (C307 * C182 + C90623 * C394) * C90541) *
                C55625 +
            (C27992 + C28000) * C55626) *
               C39125 +
           ((C401 + C417) * C55625 + (C2069 + C2081) * C55626) * C39126) *
              C92 -
          ((C2084 * C55626 + (C418 + C404) * C55625) * C39126 +
           ((C2081 + C2069) * C55626 + (C417 + C401) * C55625) * C39125) *
              C93 +
          ((C421 * C55625 + (C2072 + C2082) * C55626) * C39125 +
           ((C409 + C419) * C55625 + (C2075 + C2083) * C55626) * C39126) *
              C94 -
          ((((C307 * C1795 + C90623 * C2067) * C90541 +
             (C307 * C1701 + C90623 * C1965) * C181) *
                C55626 +
            (C420 + C410) * C55625) *
               C39126 +
           ((C2083 + C2075) * C55626 + C422 * C55625) * C39125) *
              C95) *
         C90567) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C90623 * C308) * C181 +
              (C307 * C182 + C90623 * C394) * C90541) *
                 C55625 +
             (C27992 + C28000) * C55626) *
                C39125 +
            ((C401 + C417) * C55625 + C57738 * C55626) * C39126) *
               C90744 -
           ((C2084 * C55626 + (C418 + C404) * C55625) * C39126 +
            (C57739 * C55626 + (C417 + C401) * C55625) * C39125) *
               C90503) *
              C4653 +
          (((C57738 * C55625 + C61143 * C55626) * C39125 +
            (C57740 * C55625 + (C5015 + C5021) * C55626) * C39126) *
               C90503 -
           ((C30642 * C55626 + C57739 * C55625) * C39126 +
            ((C28001 + C27995) * C55626 + (C28000 + C27992) * C55625) *
                C39125) *
               C90744) *
              C4654 +
          (((C30641 * C55625 + (C30648 + C30652) * C55626) * C39125 +
            (C61143 * C55625 + (C30643 + C30651) * C55626) * C39126) *
               C90744 -
           ((((C307 * C6225 + C90623 * C6397) * C90541 +
              (C307 * C6163 + C90623 * C6341) * C181) *
                 C55626 +
             (C5021 + C5015) * C55625) *
                C39126 +
            ((C30651 + C30643) * C55626 + C30642 * C55625) * C39125) *
               C90503) *
              C4655)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[51] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C90623 * C308) * C244 +
              (C307 * C245 + C90623 * C474) * C90567) *
                 C55625 +
             (C27910 * C244 + C28080 * C90567) * C55626) *
                C39125 +
            ((C481 + C497) * C55625 + (C55958 + C55959) * C55626) * C39126) *
               C2565 -
           (((C56824 + C56825) * C55626 + (C1318 + C1310) * C55625) * C39126 +
            ((C29948 * C90567 + C29752 * C244) * C55626 +
             ((C307 * C1011 + C90623 * C1301) * C90567 +
              (C307 * C832 + C90623 * C1094) * C244) *
                 C55625) *
                C39125) *
               C2566 +
           ((((C307 * C2570 + C90623 * C2827) * C244 +
              (C307 * C2745 + C90623 * C3017) * C90567) *
                 C55625 +
             (C29756 * C244 + C29950 * C90567) * C55626) *
                C39125 +
            ((C3022 + C3030) * C55625 + (C58792 + C58796) * C55626) * C39126) *
               C2567) *
              C90744 +
          ((((C1310 + C1318) * C55625 + (C56825 + C56824) * C55626) * C39125 +
            ((C1307 + C1317) * C55625 + (C56826 + C56827) * C55626) * C39126) *
               C2566 -
           (((C55960 + C55961) * C55626 + (C498 + C484) * C55625) * C39126 +
            ((C55959 + C55958) * C55626 + (C497 + C481) * C55625) * C39125) *
               C2565 -
           ((((C307 * C4078 + C90623 * C4332) * C90567 +
              (C307 * C3894 + C90623 * C4164) * C244) *
                 C55626 +
             (C3031 + C3025) * C55625) *
                C39126 +
            ((C58796 + C58792) * C55626 + (C3030 + C3022) * C55625) * C39125) *
               C2567) *
              C90503)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C244 +
             (C307 * C245 + C90623 * C474) * C90567) *
                C55625 +
            (C27910 * C244 + C28080 * C90567) * C55626) *
               C39125 +
           ((C481 + C497) * C55625 + (C55958 + C55959) * C55626) * C39126) *
              C90541 * C92 -
          (((C55960 + C55961) * C55626 + (C498 + C484) * C55625) * C39126 +
           ((C55959 + C55958) * C55626 + (C497 + C481) * C55625) * C39125) *
              C90541 * C93 +
          ((C501 * C55625 + (C55961 + C55960) * C55626) * C39125 +
           ((C489 + C499) * C55625 + (C55962 + C55963) * C55626) * C39126) *
              C90541 * C94 -
          ((((C307 * C1881 + C90623 * C2163) * C90567 +
             (C307 * C1701 + C90623 * C1965) * C244) *
                C55626 +
            (C500 + C490) * C55625) *
               C39126 +
           ((C55963 + C55962) * C55626 + C502 * C55625) * C39125) *
              C90541 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C4828 +
             (C307 * C245 + C90623 * C474) * C4653 - C27910 * C4829 -
             C28080 * C4654 + C27912 * C4830 + C28081 * C4655) *
                C55625 +
            (C27910 * C4828 + C28080 * C4653 - C27912 * C4829 - C28081 * C4654 +
             C30557 * C4830 + C30733 * C4655) *
                C55626) *
               C39125 +
           ((C5100 + C5101 - C5102 - C5103 + C5104 + C5116) * C55625 +
            (C61242 + C61243 - C61244 - C61245 + C61246 + C61247) * C55626) *
               C39126) *
              C90541 * C90744 +
          (((C5102 - (C5101 + C5100) + C5103 - C5104 - C5116) * C55625 +
            (C61244 - (C61243 + C61242) + C61245 - C61246 - C61247) * C55626) *
               C39125 +
           ((C5109 - (C5108 + C5107) + C5110 - C5111 - C5117) * C55625 +
            (C4932 * C4829 - (C2182 * C4653 + C1986 * C4828) + C5115 * C4654 -
             (C307 * C6163 + C90623 * C6341) * C4830 -
             (C307 * C6285 + C90623 * C6452) * C4655) *
                C55626) *
               C39126) *
              C90541 * C90503)) /
            (p * q * std::sqrt(p + q));
    d2eezx[51] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C88316 +
            (C56029 * C116 + C55625 * C561 + C56030 * C1707 + C55626 * C2268) *
                C90744 -
            (C56056 + C56057) * C88309 - (C56058 + C56059) * C90503) *
               C39125 +
           ((C56057 + C56056) * C88316 + (C56059 + C56058) * C90744 -
            (C56061 + C56060) * C88309 - (C56063 + C56062) * C90503) *
               C39126) *
              C90623 * C90567 * C2565 +
          (((C56942 + C56943) * C88309 -
            ((C56030 * C3900 + C55626 * C4413 + C56029 * C839 +
              C55625 * C1400) *
                 C90744 +
             (C56030 * C3891 + C55626 * C4407 + C56029 * C832 +
              C55625 * C1396) *
                 C88316) +
            (C56944 + C56945) * C90503) *
               C39125 +
           ((C56947 + C56946) * C88309 -
            ((C56945 + C56944) * C90744 + (C56943 + C56942) * C88316) +
            (C56949 + C56948) * C90503) *
               C39126) *
              C90623 * C90567 * C2566 +
          (((C56029 * C2570 + C55625 * C3105 + C56030 * C3896 +
             C55626 * C4412) *
                C88316 +
            (C56029 * C2577 + C55625 * C3109 + C56030 * C3905 +
             C55626 * C4418) *
                C90744 -
            (C58903 + C58904) * C88309 - (C58905 + C58906) * C90503) *
               C39125 +
           ((C58904 + C58903) * C88316 + (C58906 + C58905) * C90744 -
            (C56030 * C3894 + C55626 * C4410 + C56029 * C2572 +
             C55625 * C3107) *
                C88309 -
            (C56030 * C3903 + C55626 * C4416 + C56029 * C2579 +
             C55625 * C3111) *
                C90503) *
               C39126) *
              C90623 * C90567 * C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
               C103 +
           (C56029 * C116 + C55625 * C561 + C56030 * C1707 + C55626 * C2268) *
               C92 -
           (C56056 + C56057) * C104 - (C56058 + C56059) * C93 +
           (C56060 + C56061) * C105 + (C56062 + C56063) * C94 -
           (C56064 + C56065) * C106 - (C56066 + C56067) * C95) *
              C39125 +
          ((C56057 + C56056) * C103 + (C56059 + C56058) * C92 -
           (C56061 + C56060) * C104 - (C56063 + C56062) * C93 +
           (C56065 + C56064) * C105 + (C56067 + C56066) * C94 -
           (C56030 * C1701 + C55626 * C2267 + C56029 * C111 + C55625 * C559) *
               C106 -
           (C56030 * C1711 + C55626 * C2272 + C56029 * C122 + C55625 * C565) *
               C95) *
              C39126) *
         C90623 * C90567 * C90541) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C88316 +
            (C56029 * C116 + C55625 * C561 + C56030 * C1707 + C55626 * C2268) *
                C90744 -
            (C56056 + C56057) * C88309 - (C56058 + C56059) * C90503) *
               C39125 +
           ((C56057 + C56056) * C88316 + (C56059 + C56058) * C90744 -
            (C56061 + C56060) * C88309 - (C56063 + C56062) * C90503) *
               C39126) *
              C90623 * C4653 +
          (((C57961 + C57962) * C88309 -
            ((C56030 * C4663 + C55626 * C5195 + C56029 * C1707 +
              C55625 * C2268) *
                 C90744 +
             (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
              C55625 * C2264) *
                 C88316) +
            (C57963 + C57964) * C90503) *
               C39125 +
           ((C57966 + C57965) * C88309 -
            ((C57964 + C57963) * C90744 + (C57962 + C57961) * C88316) +
            (C57968 + C57967) * C90503) *
               C39126) *
              C90623 * C4654 +
          (((C56029 * C4656 + C55625 * C5191 + C56030 * C6165 +
             C55626 * C6505) *
                C88316 +
            (C56029 * C4663 + C55625 * C5195 + C56030 * C6168 +
             C55626 * C6508) *
                C90744 -
            (C61354 + C61355) * C88309 - (C61356 + C61357) * C90503) *
               C39125 +
           ((C61355 + C61354) * C88316 + (C61357 + C61356) * C90744 -
            (C56030 * C6163 + C55626 * C6503 + C56029 * C4658 +
             C55625 * C5193) *
                C88309 -
            (C56030 * C6166 + C55626 * C6506 + C56029 * C4665 +
             C55625 * C5197) *
                C90503) *
               C39126) *
              C90623 * C4655) *
         C90541) /
            (p * q * std::sqrt(p + q));
    d2eezy[51] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C2660 +
            (C56029 * C182 + C55625 * C641 + C56030 * C1794 + C55626 * C2368) *
                C2565 -
            (C56030 * C3891 + C55626 * C4407 + C56029 * C832 + C55625 * C1396) *
                C2661 -
            (C56030 * C3989 + C55626 * C4493 + C56029 * C927 + C55625 * C1497) *
                C2566 +
            (C56029 * C2570 + C55625 * C3105 + C56030 * C3896 +
             C55626 * C4412) *
                C2662 +
            (C56029 * C2663 + C55625 * C3199 + C56030 * C3994 +
             C55626 * C4494) *
                C2567) *
               C39125 +
           ((C56057 + C56056) * C2660 + (C56146 + C56147) * C2565 -
            (C56943 + C56942) * C2661 - (C57056 + C57057) * C2566 +
            (C58904 + C58903) * C2662 + (C59009 + C59010) * C2567) *
               C39126) *
              C90623 * C90744 +
          (((C56942 + C56943) * C2661 -
            ((C56147 + C56146) * C2565 + (C56056 + C56057) * C2660) +
            (C57057 + C57056) * C2566 - (C58903 + C58904) * C2662 -
            (C59010 + C59009) * C2567) *
               C39125 +
           ((C56947 + C56946) * C2661 -
            ((C56148 + C56149) * C2565 + (C56061 + C56060) * C2660) +
            (C57058 + C57059) * C2566 -
            (C56030 * C3894 + C55626 * C4410 + C56029 * C2572 +
             C55625 * C3107) *
                C2662 -
            (C56030 * C3992 + C55626 * C4498 + C56029 * C2665 +
             C55625 * C3201) *
                C2567) *
               C39126) *
              C90623 * C90503) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C181 +
            (C56029 * C182 + C55625 * C641 + C56030 * C1794 + C55626 * C2368) *
                C90541) *
               C39125 +
           ((C56057 + C56056) * C181 + (C56146 + C56147) * C90541) * C39126) *
              C90623 * C92 -
          (((C56148 + C56149) * C90541 + (C56061 + C56060) * C181) * C39126 +
           ((C56147 + C56146) * C90541 + (C56056 + C56057) * C181) * C39125) *
              C90623 * C93 +
          (((C56060 + C56061) * C181 + (C56149 + C56148) * C90541) * C39125 +
           ((C56065 + C56064) * C181 + (C56150 + C56151) * C90541) * C39126) *
              C90623 * C94 -
          (((C56030 * C1795 + C55626 * C2369 + C56029 * C186 + C55625 * C645) *
                C90541 +
            (C56030 * C1701 + C55626 * C2267 + C56029 * C111 + C55625 * C559) *
                C181) *
               C39126 +
           ((C56151 + C56150) * C90541 + (C56064 + C56065) * C181) * C39125) *
              C90623 * C95) *
         C90567) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                 C181 +
             (C56029 * C182 + C55625 * C641 + C56030 * C1794 + C55626 * C2368) *
                 C90541) *
                C39125 +
            ((C56057 + C56056) * C181 + (C56146 + C56147) * C90541) * C39126) *
               C90623 * C90744 -
           (((C56148 + C56149) * C90541 + (C56061 + C56060) * C181) * C39126 +
            ((C56147 + C56146) * C90541 + (C56056 + C56057) * C181) * C39125) *
               C90623 * C90503) *
              C4653 +
          ((((C57961 + C57962) * C181 + (C58075 + C58076) * C90541) * C39125 +
            ((C57966 + C57965) * C181 + (C58077 + C58078) * C90541) * C39126) *
               C90623 * C90503 -
           (((C58076 + C58075) * C90541 + (C57962 + C57961) * C181) * C39126 +
            ((C56030 * C4746 + C55626 * C5285 + C56029 * C1794 +
              C55625 * C2368) *
                 C90541 +
             (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
              C55625 * C2264) *
                 C181) *
                C39125) *
               C90623 * C90744) *
              C4654 +
          ((((C56029 * C4656 + C55625 * C5191 + C56030 * C6165 +
              C55626 * C6505) *
                 C181 +
             (C56029 * C4746 + C55625 * C5285 + C56030 * C6227 +
              C55626 * C6561) *
                 C90541) *
                C39125 +
            ((C61355 + C61354) * C181 + (C61460 + C61461) * C90541) * C39126) *
               C90623 * C90744 -
           (((C56030 * C6225 + C55626 * C6559 + C56029 * C4748 +
              C55625 * C5287) *
                 C90541 +
             (C56030 * C6163 + C55626 * C6503 + C56029 * C4658 +
              C55625 * C5193) *
                 C181) *
                C39126 +
            ((C61461 + C61460) * C90541 + (C61354 + C61355) * C181) * C39125) *
               C90623 * C90503) *
              C4655)) /
            (p * q * std::sqrt(p + q));
    d2eezz[51] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                 C244 +
             (C56029 * C245 + C55625 * C719 + C56030 * C1879 + C55626 * C2460) *
                 C90567) *
                C39125 +
            ((C56057 + C56056) * C244 + (C56230 + C56231) * C90567) * C39126) *
               C90623 * C2565 -
           (((C57166 + C57167) * C90567 + (C56943 + C56942) * C244) * C39126 +
            ((C56030 * C4075 + C55626 * C4573 + C56029 * C1011 +
              C55625 * C1602) *
                 C90567 +
             (C56030 * C3891 + C55626 * C4407 + C56029 * C832 +
              C55625 * C1396) *
                 C244) *
                C39125) *
               C90623 * C2566 +
           (((C56029 * C2570 + C55625 * C3105 + C56030 * C3896 +
              C55626 * C4412) *
                 C244 +
             (C56029 * C2745 + C55625 * C3295 + C56030 * C4080 +
              C55626 * C4576) *
                 C90567) *
                C39125 +
            ((C58904 + C58903) * C244 + (C59113 + C59114) * C90567) * C39126) *
               C90623 * C2567) *
              C90744 +
          ((((C56942 + C56943) * C244 + (C57167 + C57166) * C90567) * C39125 +
            ((C56947 + C56946) * C244 + (C57168 + C57169) * C90567) * C39126) *
               C90623 * C2566 -
           (((C56232 + C56233) * C90567 + (C56061 + C56060) * C244) * C39126 +
            ((C56231 + C56230) * C90567 + (C56056 + C56057) * C244) * C39125) *
               C90623 * C2565 -
           (((C56030 * C4078 + C55626 * C4578 + C56029 * C2747 +
              C55625 * C3297) *
                 C90567 +
             (C56030 * C3894 + C55626 * C4410 + C56029 * C2572 +
              C55625 * C3107) *
                 C244) *
                C39126 +
            ((C59114 + C59113) * C90567 + (C58903 + C58904) * C244) * C39125) *
               C90623 * C2567) *
              C90503)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C244 +
            (C56029 * C245 + C55625 * C719 + C56030 * C1879 + C55626 * C2460) *
                C90567) *
               C39125 +
           ((C56057 + C56056) * C244 + (C56230 + C56231) * C90567) * C39126) *
              C90623 * C90541 * C92 -
          (((C56232 + C56233) * C90567 + (C56061 + C56060) * C244) * C39126 +
           ((C56231 + C56230) * C90567 + (C56056 + C56057) * C244) * C39125) *
              C90623 * C90541 * C93 +
          (((C56060 + C56061) * C244 + (C56233 + C56232) * C90567) * C39125 +
           ((C56065 + C56064) * C244 + (C56234 + C56235) * C90567) * C39126) *
              C90623 * C90541 * C94 -
          (((C56030 * C1881 + C55626 * C2464 + C56029 * C249 + C55625 * C723) *
                C90567 +
            (C56030 * C1701 + C55626 * C2267 + C56029 * C111 + C55625 * C559) *
                C244) *
               C39126 +
           ((C56235 + C56234) * C90567 + (C56064 + C56065) * C244) * C39125) *
              C90623 * C90541 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C4828 +
            (C56029 * C245 + C55625 * C719 + C56030 * C1879 + C55626 * C2460) *
                C4653 -
            (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
             C55625 * C2264) *
                C4829 -
            (C56030 * C4831 + C55626 * C5373 + C56029 * C1879 +
             C55625 * C2460) *
                C4654 +
            (C56029 * C4656 + C55625 * C5191 + C56030 * C6165 +
             C55626 * C6505) *
                C4830 +
            (C56029 * C4831 + C55625 * C5373 + C56030 * C6287 +
             C55626 * C6612) *
                C4655) *
               C39125 +
           ((C56057 + C56056) * C4828 + (C56230 + C56231) * C4653 -
            (C57962 + C57961) * C4829 - (C58185 + C58186) * C4654 +
            (C61355 + C61354) * C4830 + (C61564 + C61565) * C4655) *
               C39126) *
              C90623 * C90541 * C90744 +
          (((C57961 + C57962) * C4829 -
            ((C56231 + C56230) * C4653 + (C56056 + C56057) * C4828) +
            (C58186 + C58185) * C4654 - (C61354 + C61355) * C4830 -
            (C61565 + C61564) * C4655) *
               C39125 +
           ((C57966 + C57965) * C4829 -
            ((C56232 + C56233) * C4653 + (C56061 + C56060) * C4828) +
            (C58187 + C58188) * C4654 -
            (C56030 * C6163 + C55626 * C6503 + C56029 * C4658 +
             C55625 * C5193) *
                C4830 -
            (C56030 * C6285 + C55626 * C6614 + C56029 * C4833 +
             C55625 * C5375) *
                C4655) *
               C39126) *
              C90623 * C90541 * C90503)) /
            (p * q * std::sqrt(p + q));
    d2eexx[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C3364 +
            (C39129 * C116 + C39125 * C125 + C39130 * C117 + C39126 * C126) *
                C90498) *
               C90623 * C55625 +
           ((C57292 + C57293) * C3364 + (C57294 + C57295) * C90498) * C90623 *
               C55626) *
              C90567 * C3360 -
          (((C43400 + C43401) * C90498 + (C43402 + C43403) * C3364) * C90623 *
               C55626 +
           ((C39865 + C39864) * C90498 + (C39863 + C39862) * C3364) * C90623 *
               C55625) *
              C90567 * C3361 +
          (((C41812 + C41811) * C3364 + (C41810 + C41809) * C90498) * C90623 *
               C55625 +
           ((C43404 + C43405) * C3364 + (C43406 + C43407) * C90498) * C90623 *
               C55626) *
              C90567 * C3362 -
          (((C39130 * C21006 + C39126 * C21007 + C39129 * C16838 +
             C39125 * C16841) *
                C90498 +
            (C39130 * C21004 + C39126 * C21005 + C39129 * C16835 +
             C39125 * C16837) *
                C3364) *
               C90623 * C55626 +
           ((C42739 + C42738) * C90498 + (C42737 + C42736) * C3364) * C90623 *
               C55625) *
              C90567 * C3363)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C826 +
            (C39129 * C116 + C39125 * C125 + C39130 * C117 + C39126 * C126) *
                C821 -
            (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                C827 -
            (C39130 * C118 + C39126 * C127 + C39129 * C117 + C39125 * C126) *
                C822 +
            (C39129 * C109 + C39125 * C115 + C39130 * C110 + C39126 * C119) *
                C828 +
            (C39129 * C118 + C39125 * C127 + C39130 * C120 + C39126 * C128) *
                C823) *
               C90623 * C55625 +
           ((C39129 * C1700 + C39125 * C1708 + C39130 * C1697 +
             C39126 * C1702) *
                C826 +
            (C39129 * C1707 + C39125 * C1714 + C39130 * C1706 +
             C39126 * C1713) *
                C821 -
            (C39130 * C1698 + C39126 * C1703 + C39129 * C1697 +
             C39125 * C1702) *
                C827 -
            (C39130 * C1705 + C39126 * C1712 + C39129 * C1706 +
             C39125 * C1713) *
                C822 +
            (C39129 * C1698 + C39125 * C1703 + C39130 * C1699 +
             C39126 * C1704) *
                C828 +
            (C39129 * C1705 + C39125 * C1712 + C39130 * C1709 +
             C39126 * C1715) *
                C823) *
               C90623 * C55626) *
              C90567 * C90752 +
          (((C39867 + C39866) * C827 -
            ((C39865 + C39864) * C821 + (C39863 + C39862) * C826) +
            (C39869 + C39868) * C822 - (C39871 + C39870) * C828 -
            (C39873 + C39872) * C823) *
               C90623 * C55625 +
           ((C48578 + C48579) * C827 -
            ((C43400 + C43401) * C821 + (C43402 + C43403) * C826) +
            (C48580 + C48581) * C822 -
            (C39130 * C8120 + C39126 * C8121 + C39129 * C3893 +
             C39125 * C3899) *
                C828 -
            (C39130 * C8122 + C39126 * C8123 + C39129 * C3902 +
             C39125 * C3911) *
                C823) *
               C90623 * C55626) *
              C90567 * C90555)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                 C3364 +
             (C39129 * C116 + C39125 * C125 + C39130 * C117 + C39126 * C126) *
                 C90498) *
                C90623 * C55625 +
            ((C57292 + C57293) * C3364 + (C57294 + C57295) * C90498) * C90623 *
                C55626) *
               C4653 -
           (((C60713 + C60714) * C90498 + (C60715 + C60716) * C3364) * C90623 *
                C55626 +
            ((C57295 + C57294) * C90498 + (C57293 + C57292) * C3364) * C90623 *
                C55625) *
               C4654 +
           (((C60716 + C60715) * C3364 + (C60714 + C60713) * C90498) * C90623 *
                C55625 +
            ((C39129 * C6165 + C39125 * C6171 + C39130 * C6164 +
              C39126 * C6170) *
                 C3364 +
             (C39129 * C6168 + C39125 * C6174 + C39130 * C6167 +
              C39126 * C6173) *
                 C90498) *
                C90623 * C55626) *
               C4655) *
              C90752 +
          ((((C43403 + C43402) * C3364 + (C43401 + C43400) * C90498) * C90623 *
                C55625 +
            ((C45252 + C45253) * C3364 + (C45254 + C45255) * C90498) * C90623 *
                C55626) *
               C4654 -
           (((C43400 + C43401) * C90498 + (C43402 + C43403) * C3364) * C90623 *
                C55626 +
            ((C39865 + C39864) * C90498 + (C39863 + C39862) * C3364) * C90623 *
                C55625) *
               C4653 -
           (((C39130 * C33651 + C39126 * C33652 + C39129 * C19091 +
              C39125 * C19094) *
                 C90498 +
             (C39130 * C33649 + C39126 * C33650 + C39129 * C19088 +
              C39125 * C19092) *
                 C3364) *
                C90623 * C55626 +
            ((C45255 + C45254) * C90498 + (C45253 + C45252) * C3364) * C90623 *
                C55625) *
               C4655) *
              C90555)) /
            (p * q * std::sqrt(p + q));
    d2eexy[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
               C3427 +
           (C39129 * C182 + C39125 * C188 + C39130 * C183 + C39126 * C189) *
               C3360 -
           (C39863 + C39862) * C3428 - (C39984 + C39985) * C3361 +
           (C41812 + C41811) * C3429 + (C41921 + C41922) * C3362 -
           (C42737 + C42736) * C3430 - (C42810 + C42811) * C3363) *
              C90623 * C55625 +
          ((C57292 + C57293) * C3427 + (C57414 + C57415) * C3360 -
           (C43402 + C43403) * C3428 - (C43515 + C43514) * C3361 +
           (C43404 + C43405) * C3429 + (C43517 + C43516) * C3362 -
           (C39130 * C21004 + C39126 * C21005 + C39129 * C16835 +
            C39125 * C16837) *
               C3430 -
           (C39130 * C21126 + C39126 * C21127 + C39129 * C16942 +
            C39125 * C16944) *
               C3363) *
              C90623 * C55626) *
         C90498 * C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C923 +
            (C39129 * C182 + C39125 * C188 + C39130 * C183 + C39126 * C189) *
                C90752 -
            (C39863 + C39862) * C924 - (C39984 + C39985) * C90555) *
               C90623 * C55625 +
           ((C39129 * C1700 + C39125 * C1708 + C39130 * C1697 +
             C39126 * C1702) *
                C923 +
            (C39129 * C1794 + C39125 * C1799 + C39130 * C1791 +
             C39126 * C1796) *
                C90752 -
            (C43402 + C43403) * C924 - (C43515 + C43514) * C90555) *
               C90623 * C55626) *
              C821 +
          (((C39867 + C39866) * C924 -
            ((C39130 * C184 + C39126 * C190 + C39129 * C183 + C39125 * C189) *
                 C90752 +
             (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                 C923) +
            (C39986 + C39987) * C90555) *
               C90623 * C55625 +
           ((C48578 + C48579) * C924 -
            ((C39130 * C1792 + C39126 * C1797 + C39129 * C1791 +
              C39125 * C1796) *
                 C90752 +
             (C39130 * C1698 + C39126 * C1703 + C39129 * C1697 +
              C39125 * C1702) *
                 C923) +
            (C48717 + C48716) * C90555) *
               C90623 * C55626) *
              C822 +
          (((C39129 * C109 + C39125 * C115 + C39130 * C110 + C39126 * C119) *
                C923 +
            (C39129 * C184 + C39125 * C190 + C39130 * C185 + C39126 * C191) *
                C90752 -
            (C39871 + C39870) * C924 - (C39988 + C39989) * C90555) *
               C90623 * C55625 +
           ((C39129 * C1698 + C39125 * C1703 + C39130 * C1699 +
             C39126 * C1704) *
                C923 +
            (C39129 * C1792 + C39125 * C1797 + C39130 * C1793 +
             C39126 * C1798) *
                C90752 -
            (C39130 * C8120 + C39126 * C8121 + C39129 * C3893 +
             C39125 * C3899) *
                C924 -
            (C39130 * C8222 + C39126 * C8223 + C39129 * C3991 +
             C39125 * C3997) *
                C90555) *
               C90623 * C55626) *
              C823) *
         C90567) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C923 +
            (C39129 * C182 + C39125 * C188 + C39130 * C183 + C39126 * C189) *
                C90752 -
            (C39863 + C39862) * C924 - (C39984 + C39985) * C90555) *
               C90623 * C55625 +
           ((C57292 + C57293) * C923 + (C57414 + C57415) * C90752 -
            (C43402 + C43403) * C924 - (C43515 + C43514) * C90555) *
               C90623 * C55626) *
              C90498 * C4653 +
          (((C43403 + C43402) * C924 -
            ((C57415 + C57414) * C90752 + (C57293 + C57292) * C923) +
            (C43514 + C43515) * C90555) *
               C90623 * C55625 +
           ((C45252 + C45253) * C924 -
            ((C60827 + C60828) * C90752 + (C60715 + C60716) * C923) +
            (C45359 + C45358) * C90555) *
               C90623 * C55626) *
              C90498 * C4654 +
          (((C60716 + C60715) * C923 + (C60828 + C60827) * C90752 -
            (C45253 + C45252) * C924 - (C45358 + C45359) * C90555) *
               C90623 * C55625 +
           ((C39129 * C6165 + C39125 * C6171 + C39130 * C6164 +
             C39126 * C6170) *
                C923 +
            (C39129 * C6227 + C39125 * C6230 + C39130 * C6226 +
             C39126 * C6229) *
                C90752 -
            (C39130 * C33649 + C39126 * C33650 + C39129 * C19088 +
             C39125 * C19092) *
                C924 -
            (C39130 * C33769 + C39126 * C33770 + C39129 * C19146 +
             C39125 * C19148) *
                C90555) *
               C90623 * C55626) *
              C90498 * C4655)) /
            (p * q * std::sqrt(p + q));
    d2eexz[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C244 +
            (C39129 * C245 + C39125 * C251 + C39130 * C246 + C39126 * C252) *
                C90567) *
               C90623 * C55625 +
           ((C57292 + C57293) * C244 + (C57531 + C57530) * C90567) * C90623 *
               C55626) *
              C3360 -
          (((C43624 + C43625) * C90567 + (C43402 + C43403) * C244) * C90623 *
               C55626 +
           ((C40101 + C40100) * C90567 + (C39863 + C39862) * C244) * C90623 *
               C55625) *
              C3361 +
          (((C41812 + C41811) * C244 + (C42032 + C42031) * C90567) * C90623 *
               C55625 +
           ((C43404 + C43405) * C244 + (C43626 + C43627) * C90567) * C90623 *
               C55626) *
              C3362 -
          (((C39130 * C21232 + C39126 * C21233 + C39129 * C17029 +
             C39125 * C17031) *
                C90567 +
            (C39130 * C21004 + C39126 * C21005 + C39129 * C16835 +
             C39125 * C16837) *
                C244) *
               C90623 * C55626 +
           ((C42883 + C42882) * C90567 + (C42737 + C42736) * C244) * C90623 *
               C55625) *
              C3363) *
         C90498) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                 C244 +
             (C39129 * C245 + C39125 * C251 + C39130 * C246 + C39126 * C252) *
                 C90567) *
                C90623 * C55625 +
            ((C39129 * C1700 + C39125 * C1708 + C39130 * C1697 +
              C39126 * C1702) *
                 C244 +
             (C39129 * C1879 + C39125 * C1884 + C39130 * C1878 +
              C39126 * C1883) *
                 C90567) *
                C90623 * C55626) *
               C90752 -
           (((C43624 + C43625) * C90567 + (C43402 + C43403) * C244) * C90623 *
                C55626 +
            ((C40101 + C40100) * C90567 + (C39863 + C39862) * C244) * C90623 *
                C55625) *
               C90555) *
              C821 +
          ((((C39867 + C39866) * C244 + (C40102 + C40103) * C90567) * C90623 *
                C55625 +
            ((C48578 + C48579) * C244 + (C48852 + C48853) * C90567) * C90623 *
                C55626) *
               C90555 -
           (((C39130 * C1877 + C39126 * C1882 + C39129 * C1878 +
              C39125 * C1883) *
                 C90567 +
             (C39130 * C1698 + C39126 * C1703 + C39129 * C1697 +
              C39125 * C1702) *
                 C244) *
                C90623 * C55626 +
            ((C39130 * C247 + C39126 * C253 + C39129 * C246 + C39125 * C252) *
                 C90567 +
             (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                 C244) *
                C90623 * C55625) *
               C90752) *
              C822 +
          ((((C39129 * C109 + C39125 * C115 + C39130 * C110 + C39126 * C119) *
                 C244 +
             (C39129 * C247 + C39125 * C253 + C39130 * C248 + C39126 * C254) *
                 C90567) *
                C90623 * C55625 +
            ((C39129 * C1698 + C39125 * C1703 + C39130 * C1699 +
              C39126 * C1704) *
                 C244 +
             (C39129 * C1877 + C39125 * C1882 + C39130 * C1880 +
              C39126 * C1885) *
                 C90567) *
                C90623 * C55626) *
               C90752 -
           (((C39130 * C8322 + C39126 * C8323 + C39129 * C4077 +
              C39125 * C4083) *
                 C90567 +
             (C39130 * C8120 + C39126 * C8121 + C39129 * C3893 +
              C39125 * C3899) *
                 C244) *
                C90623 * C55626 +
            ((C40105 + C40104) * C90567 + (C39871 + C39870) * C244) * C90623 *
                C55625) *
               C90555) *
              C823)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C4828 +
            (C39129 * C245 + C39125 * C251 + C39130 * C246 + C39126 * C252) *
                C4653 -
            (C57293 + C57292) * C4829 - (C57530 + C57531) * C4654 +
            (C60716 + C60715) * C4830 + (C60935 + C60936) * C4655) *
               C90623 * C55625 +
           ((C57292 + C57293) * C4828 + (C57531 + C57530) * C4653 -
            (C60715 + C60716) * C4829 - (C60936 + C60935) * C4654 +
            (C39129 * C6165 + C39125 * C6171 + C39130 * C6164 +
             C39126 * C6170) *
                C4830 +
            (C39129 * C6287 + C39125 * C6290 + C39130 * C6286 +
             C39126 * C6289) *
                C4655) *
               C90623 * C55626) *
              C90752 +
          (((C43403 + C43402) * C4829 -
            ((C40101 + C40100) * C4653 + (C39863 + C39862) * C4828) +
            (C43625 + C43624) * C4654 - (C45253 + C45252) * C4830 -
            (C45463 + C45462) * C4655) *
               C90623 * C55625 +
           ((C45252 + C45253) * C4829 -
            ((C43624 + C43625) * C4653 + (C43402 + C43403) * C4828) +
            (C45462 + C45463) * C4654 -
            (C39130 * C33649 + C39126 * C33650 + C39129 * C19088 +
             C39125 * C19092) *
                C4830 -
            (C39130 * C33888 + C39126 * C33889 + C39129 * C19199 +
             C39125 * C19201) *
                C4655) *
               C90623 * C55626) *
              C90555) *
         C90498) /
            (p * q * std::sqrt(p + q));
    d2eeyx[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C3364 +
             (C307 * C116 + C90623 * C314) * C90498) *
                C55625 +
            (C29732 + C29733) * C55626) *
               C39125 +
           ((C337 * C3364 + C338 * C90498) * C55625 +
            (C1984 * C3364 + C1985 * C90498) * C55626) *
               C39126) *
              C90567 * C3360 -
          (((C8434 * C90498 + C8433 * C3364) * C55626 +
            (C1117 * C90498 + C1116 * C3364) * C55625) *
               C39126 +
           ((C29761 + C29760) * C55626 +
            ((C307 * C839 + C90623 * C1098) * C90498 +
             (C307 * C832 + C90623 * C1094) * C3364) *
                C55625) *
               C39125) *
              C90567 * C3361 +
          ((((C307 * C2570 + C90623 * C2827) * C3364 +
             (C307 * C2577 + C90623 * C2831) * C90498) *
                C55625 +
            (C29764 + C29765) * C55626) *
               C39125 +
           ((C2844 * C3364 + C2845 * C90498) * C55625 +
            (C58585 * C3364 + C58586 * C90498) * C55626) *
               C39126) *
              C90567 * C3362 -
          ((((C307 * C21006 + C90623 * C21347) * C90498 +
             (C307 * C21004 + C90623 * C21346) * C3364) *
                C55626 +
            ((C307 * C3369 + C90623 * C3547) * C90498 +
             (C307 * C3366 + C90623 * C3544) * C3364) *
                C55625) *
               C39126 +
           (((C307 * C16838 + C90623 * C17133) * C90498 +
             (C307 * C16835 + C90623 * C17131) * C3364) *
                C55626 +
            ((C307 * C3370 + C90623 * C3548) * C90498 +
             (C307 * C3367 + C90623 * C3545) * C3364) *
                C55625) *
               C39125) *
              C90567 * C3363)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C826 +
             (C307 * C116 + C90623 * C314) * C821 - C337 * C827 - C338 * C822 +
             C339 * C828 + C340 * C823) *
                C55625 +
            (C27914 + C27915 - C27898 - C27899 + C27900 + C27901) * C55626) *
               C39125 +
           ((C337 * C826 + C338 * C821 - C339 * C827 - C340 * C822 +
             C341 * C828 + C342 * C823) *
                C55625 +
            (C1984 * C826 + C1985 * C821 - C1986 * C827 - C1987 * C822 +
             C1988 * C828 + C1989 * C823) *
                C55626) *
               C39126) *
              C90567 * C90752 +
          (((C1116 * C827 -
             ((C307 * C839 + C90623 * C1098) * C821 +
              (C307 * C832 + C90623 * C1094) * C826) +
             C1117 * C822 - C1118 * C828 - C1119 * C823) *
                C55625 +
            (C8433 * C827 - (C29753 * C821 + C29752 * C826) + C8434 * C822 -
             C8435 * C828 - C8436 * C823) *
                C55626) *
               C39125 +
           ((C1118 * C827 - (C1117 * C821 + C1116 * C826) + C1119 * C822 -
             C1120 * C828 - C1121 * C823) *
                C55625 +
            (C8435 * C827 - (C8434 * C821 + C8433 * C826) + C8436 * C822 -
             (C307 * C8120 + C90623 * C8422) * C828 -
             (C307 * C8122 + C90623 * C8423) * C823) *
                C55626) *
               C39126) *
              C90567 * C90555)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C90623 * C308) * C3364 +
              (C307 * C116 + C90623 * C314) * C90498) *
                 C55625 +
             (C29732 + C29733) * C55626) *
                C39125 +
            ((C337 * C3364 + C338 * C90498) * C55625 +
             (C60101 + C60102) * C55626) *
                C39126) *
               C4653 -
           (((C61958 + C61959) * C55626 + (C60102 + C60101) * C55625) * C39126 +
            ((C29735 + C29734) * C55626 + (C29733 + C29732) * C55625) *
                C39125) *
               C4654 +
           ((C31307 * C55625 + (C31309 + C31308) * C55626) * C39125 +
            ((C61959 + C61958) * C55625 +
             (C30555 * C3364 + C30558 * C90498) * C55626) *
                C39126) *
               C4655) *
              C90752 +
          ((((C29760 + C29761) * C55625 + (C29762 + C29763) * C55626) * C39125 +
            ((C60103 + C60104) * C55625 + (C61960 + C61961) * C55626) *
                C39126) *
               C4654 -
           (((C60104 + C60103) * C55626 +
             (C1117 * C90498 + C1116 * C3364) * C55625) *
                C39126 +
            ((C29761 + C29760) * C55626 +
             ((C307 * C839 + C90623 * C1098) * C90498 +
              (C307 * C832 + C90623 * C1094) * C3364) *
                 C55625) *
                C39125) *
               C4653 -
           ((((C307 * C33651 + C90623 * C33992) * C90498 +
              (C307 * C33649 + C90623 * C33991) * C3364) *
                 C55626 +
             (C61961 + C61960) * C55625) *
                C39126 +
            ((C31318 + C31317) * C55626 + C31314 * C55625) * C39125) *
               C4655) *
              C90555)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C3427 +
            (C307 * C182 + C90623 * C394) * C3360 -
            (C307 * C832 + C90623 * C1094) * C3428 -
            (C307 * C927 + C90623 * C1195) * C3361 +
            (C307 * C2570 + C90623 * C2827) * C3429 +
            (C307 * C2663 + C90623 * C2921) * C3362 -
            (C307 * C3367 + C90623 * C3545) * C3430 -
            (C307 * C3433 + C90623 * C3599) * C3363) *
               C55625 +
           (C27910 * C3427 + C27998 * C3360 - C29752 * C3428 - C29858 * C3361 +
            C29756 * C3429 + C29859 * C3362 -
            (C307 * C16835 + C90623 * C17131) * C3430 -
            (C307 * C16942 + C90623 * C17209) * C3363) *
               C55626) *
              C39125 +
          ((C337 * C3427 + C413 * C3360 - C1116 * C3428 - C1216 * C3361 +
            C2844 * C3429 + C2940 * C3362 -
            (C307 * C3366 + C90623 * C3544) * C3430 -
            (C307 * C3432 + C90623 * C3600) * C3363) *
               C55625 +
           (C1984 * C3427 + C2078 * C3360 - C8433 * C3428 - C8546 * C3361 +
            C58585 * C3429 + C58692 * C3362 -
            (C307 * C21004 + C90623 * C21346) * C3430 -
            (C307 * C21126 + C90623 * C21446) * C3363) *
               C55626) *
              C39126) *
         C90498 * C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C923 +
             (C307 * C182 + C90623 * C394) * C90752 -
             (C307 * C832 + C90623 * C1094) * C924 -
             (C307 * C927 + C90623 * C1195) * C90555) *
                C55625 +
            (C31394 + C31395 - C31396 - C31397) * C55626) *
               C39125 +
           ((C1201 + C1202 - C1203 - C1220) * C55625 +
            (C10194 + C10193 - C10192 - C10195) * C55626) *
               C39126) *
              C821 +
          (((C1203 - (C1202 + C1201) + C1220) * C55625 +
            (C10192 - (C10193 + C10194) + C10195) * C55626) *
               C39125 +
           ((C1208 - (C1207 + C1206) + C1222) * C55625 +
            (C10196 - (C10197 + C10198) + C10199) * C55626) *
               C39126) *
              C822 +
          ((C1224 * C55625 + (C10198 + C10197 - C10196 - C10199) * C55626) *
               C39125 +
           ((C1213 + C1212 - C1211 - C1223) * C55625 +
            (C1988 * C923 + C2080 * C90752 -
             (C307 * C8120 + C90623 * C8422) * C924 -
             (C307 * C8222 + C90623 * C8534) * C90555) *
                C55626) *
               C39126) *
              C823) *
         C90567) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C923 +
             (C307 * C182 + C90623 * C394) * C90752 -
             (C307 * C832 + C90623 * C1094) * C924 -
             (C307 * C927 + C90623 * C1195) * C90555) *
                C55625 +
            (C31394 + C31395 - C31396 - C31397) * C55626) *
               C39125 +
           ((C1201 + C1202 - C1203 - C1220) * C55625 +
            (C10194 + C10193 - C10192 - C10195) * C55626) *
               C39126) *
              C90498 * C4653 +
          (((C31396 - (C31395 + C31394) + C31397) * C55625 +
            (C31400 - (C31399 + C31398) + C31401) * C55626) *
               C39125 +
           ((C10192 - (C10193 + C10194) + C10195) * C55625 +
            (C35718 - (C35719 + C35720) + C35721) * C55626) *
               C39126) *
              C90498 * C4654 +
          ((C31411 * C55625 + (C31404 + C31403 - C31402 - C31410) * C55626) *
               C39125 +
           ((C35720 + C35719 - C35718 - C35721) * C55625 +
            (C30555 * C923 + C30649 * C90752 -
             (C307 * C33649 + C90623 * C33991) * C924 -
             (C307 * C33769 + C90623 * C34113) * C90555) *
                C55626) *
               C39126) *
              C90498 * C4655)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C244 +
             (C307 * C245 + C90623 * C474) * C90567) *
                C55625 +
            (C27910 * C244 + C28080 * C90567) * C55626) *
               C39125 +
           ((C481 + C497) * C55625 + (C55958 + C55959) * C55626) * C39126) *
              C3360 -
          (((C56824 + C56825) * C55626 + (C1318 + C1310) * C55625) * C39126 +
           ((C29948 * C90567 + C29752 * C244) * C55626 +
            ((C307 * C1011 + C90623 * C1301) * C90567 +
             (C307 * C832 + C90623 * C1094) * C244) *
                C55625) *
               C39125) *
              C3361 +
          ((((C307 * C2570 + C90623 * C2827) * C244 +
             (C307 * C2745 + C90623 * C3017) * C90567) *
                C55625 +
            (C29756 * C244 + C29950 * C90567) * C55626) *
               C39125 +
           ((C3022 + C3030) * C55625 + (C58792 + C58796) * C55626) * C39126) *
              C3362 -
          ((((C307 * C21232 + C90623 * C21545) * C90567 +
             (C307 * C21004 + C90623 * C21346) * C244) *
                C55626 +
            ((C307 * C3488 + C90623 * C3653) * C90567 +
             (C307 * C3366 + C90623 * C3544) * C244) *
                C55625) *
               C39126 +
           (((C307 * C17029 + C90623 * C17285) * C90567 +
             (C307 * C16835 + C90623 * C17131) * C244) *
                C55626 +
            ((C307 * C3489 + C90623 * C3654) * C90567 +
             (C307 * C3367 + C90623 * C3545) * C244) *
                C55625) *
               C39125) *
              C3363) *
         C90498) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C90623 * C308) * C244 +
              (C307 * C245 + C90623 * C474) * C90567) *
                 C55625 +
             (C27910 * C244 + C28080 * C90567) * C55626) *
                C39125 +
            ((C481 + C497) * C55625 + (C55958 + C55959) * C55626) * C39126) *
               C90752 -
           (((C56824 + C56825) * C55626 + (C1318 + C1310) * C55625) * C39126 +
            ((C29948 * C90567 + C29752 * C244) * C55626 +
             ((C307 * C1011 + C90623 * C1301) * C90567 +
              (C307 * C832 + C90623 * C1094) * C244) *
                 C55625) *
                C39125) *
               C90555) *
              C821 +
          ((((C1310 + C1318) * C55625 + (C56825 + C56824) * C55626) * C39125 +
            ((C1307 + C1317) * C55625 + (C56826 + C56827) * C55626) * C39126) *
               C90555 -
           (((C55960 + C55961) * C55626 + (C498 + C484) * C55625) * C39126 +
            ((C55959 + C55958) * C55626 + (C497 + C481) * C55625) * C39125) *
               C90752) *
              C822 +
          (((C501 * C55625 + (C55961 + C55960) * C55626) * C39125 +
            ((C489 + C499) * C55625 + (C55962 + C55963) * C55626) * C39126) *
               C90752 -
           ((((C307 * C8322 + C90623 * C8647) * C90567 +
              (C307 * C8120 + C90623 * C8422) * C244) *
                 C55626 +
             (C1319 + C1311) * C55625) *
                C39126 +
            ((C56827 + C56826) * C55626 + C1320 * C55625) * C39125) *
               C90555) *
              C823)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C4828 +
             (C307 * C245 + C90623 * C474) * C4653 - C27910 * C4829 -
             C28080 * C4654 + C27912 * C4830 + C28081 * C4655) *
                C55625 +
            (C27910 * C4828 + C28080 * C4653 - C27912 * C4829 - C28081 * C4654 +
             C30557 * C4830 + C30733 * C4655) *
                C55626) *
               C39125 +
           ((C5100 + C5101 - C5102 - C5103 + C5104 + C5116) * C55625 +
            (C61242 + C61243 - C61244 - C61245 + C61246 + C61247) * C55626) *
               C39126) *
              C90752 +
          (((C29752 * C4829 -
             ((C307 * C1011 + C90623 * C1301) * C4653 +
              (C307 * C832 + C90623 * C1094) * C4828) +
             C29948 * C4654 - C29754 * C4830 - C29949 * C4655) *
                C55625 +
            (C29754 * C4829 - (C29948 * C4653 + C29752 * C4828) +
             C29949 * C4654 - C31315 * C4830 - C31489 * C4655) *
                C55626) *
               C39125 +
           ((C8433 * C4829 - (C1315 * C4653 + C1116 * C4828) + C8659 * C4654 -
             C34012 * C4830 - C34231 * C4655) *
                C55625 +
            (C34012 * C4829 - (C8659 * C4653 + C8433 * C4828) + C34231 * C4654 -
             (C307 * C33649 + C90623 * C33991) * C4830 -
             (C307 * C33888 + C90623 * C34227) * C4655) *
                C55626) *
               C39126) *
              C90555) *
         C90498) /
            (p * q * std::sqrt(p + q));
    d2eezx[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C3364 +
            (C56029 * C116 + C55625 * C561 + C56030 * C1707 + C55626 * C2268) *
                C90498) *
               C39125 +
           ((C56057 + C56056) * C3364 + (C56059 + C56058) * C90498) * C39126) *
              C90623 * C90567 * C3360 -
          (((C56945 + C56944) * C90498 + (C56943 + C56942) * C3364) * C39126 +
           ((C56030 * C3900 + C55626 * C4413 + C56029 * C839 + C55625 * C1400) *
                C90498 +
            (C56030 * C3891 + C55626 * C4407 + C56029 * C832 + C55625 * C1396) *
                C3364) *
               C39125) *
              C90623 * C90567 * C3361 +
          (((C56029 * C2570 + C55625 * C3105 + C56030 * C3896 +
             C55626 * C4412) *
                C3364 +
            (C56029 * C2577 + C55625 * C3109 + C56030 * C3905 +
             C55626 * C4418) *
                C90498) *
               C39125 +
           ((C58904 + C58903) * C3364 + (C58906 + C58905) * C90498) * C39126) *
              C90623 * C90567 * C3362 -
          (((C56030 * C21006 + C55626 * C21645 + C56029 * C3369 +
             C55625 * C3709) *
                C90498 +
            (C56030 * C21004 + C55626 * C21644 + C56029 * C3366 +
             C55625 * C3706) *
                C3364) *
               C39126 +
           ((C56030 * C16838 + C55626 * C17363 + C56029 * C3370 +
             C55625 * C3710) *
                C90498 +
            (C56030 * C16835 + C55626 * C17361 + C56029 * C3367 +
             C55625 * C3707) *
                C3364) *
               C39125) *
              C90623 * C90567 * C3363)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C826 +
            (C56029 * C116 + C55625 * C561 + C56030 * C1707 + C55626 * C2268) *
                C821 -
            (C56056 + C56057) * C827 - (C56058 + C56059) * C822 +
            (C56060 + C56061) * C828 + (C56062 + C56063) * C823) *
               C39125 +
           ((C56057 + C56056) * C826 + (C56059 + C56058) * C821 -
            (C56061 + C56060) * C827 - (C56063 + C56062) * C822 +
            (C56065 + C56064) * C828 + (C56067 + C56066) * C823) *
               C39126) *
              C90623 * C90567 * C90752 +
          (((C56942 + C56943) * C827 -
            ((C56030 * C3900 + C55626 * C4413 + C56029 * C839 +
              C55625 * C1400) *
                 C821 +
             (C56030 * C3891 + C55626 * C4407 + C56029 * C832 +
              C55625 * C1396) *
                 C826) +
            (C56944 + C56945) * C822 - (C56946 + C56947) * C828 -
            (C56948 + C56949) * C823) *
               C39125 +
           ((C56947 + C56946) * C827 -
            ((C56945 + C56944) * C821 + (C56943 + C56942) * C826) +
            (C56949 + C56948) * C822 -
            (C56030 * C8120 + C55626 * C8760 + C56029 * C831 + C55625 * C1398) *
                C828 -
            (C56030 * C8122 + C55626 * C8761 + C56029 * C841 + C55625 * C1403) *
                C823) *
               C39126) *
              C90623 * C90567 * C90555)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                 C3364 +
             (C56029 * C116 + C55625 * C561 + C56030 * C1707 + C55626 * C2268) *
                 C90498) *
                C39125 +
            ((C56057 + C56056) * C3364 + (C56059 + C56058) * C90498) * C39126) *
               C90623 * C4653 -
           (((C57964 + C57963) * C90498 + (C57962 + C57961) * C3364) * C39126 +
            ((C56030 * C4663 + C55626 * C5195 + C56029 * C1707 +
              C55625 * C2268) *
                 C90498 +
             (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
              C55625 * C2264) *
                 C3364) *
                C39125) *
               C90623 * C4654 +
           (((C56029 * C4656 + C55625 * C5191 + C56030 * C6165 +
              C55626 * C6505) *
                 C3364 +
             (C56029 * C4663 + C55625 * C5195 + C56030 * C6168 +
              C55626 * C6508) *
                 C90498) *
                C39125 +
            ((C61355 + C61354) * C3364 + (C61357 + C61356) * C90498) * C39126) *
               C90623 * C4655) *
              C90752 +
          ((((C56029 * C3891 + C55625 * C4407 + C56030 * C5471 +
              C55626 * C5951) *
                 C3364 +
             (C56029 * C3900 + C55625 * C4413 + C56030 * C5474 +
              C55626 * C5954) *
                 C90498) *
                C39125 +
            ((C56029 * C3892 + C55625 * C4408 + C56030 * C5470 +
              C55626 * C5950) *
                 C3364 +
             (C56029 * C3901 + C55625 * C4414 + C56030 * C5473 +
              C55626 * C5953) *
                 C90498) *
                C39126) *
               C90623 * C4654 -
           (((C56945 + C56944) * C90498 + (C56943 + C56942) * C3364) * C39126 +
            ((C56030 * C3900 + C55626 * C4413 + C56029 * C839 +
              C55625 * C1400) *
                 C90498 +
             (C56030 * C3891 + C55626 * C4407 + C56029 * C832 +
              C55625 * C1396) *
                 C3364) *
                C39125) *
               C90623 * C4653 -
           (((C56030 * C33651 + C55626 * C34330 + C56029 * C5473 +
              C55625 * C5953) *
                 C90498 +
             (C56030 * C33649 + C55626 * C34329 + C56029 * C5470 +
              C55625 * C5950) *
                 C3364) *
                C39126 +
            ((C56030 * C19091 + C55626 * C19414 + C56029 * C5474 +
              C55625 * C5954) *
                 C90498 +
             (C56030 * C19088 + C55626 * C19412 + C56029 * C5471 +
              C55625 * C5951) *
                 C3364) *
                C39125) *
               C90623 * C4655) *
              C90555)) /
            (p * q * std::sqrt(p + q));
    d2eezy[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
               C3427 +
           (C56029 * C182 + C55625 * C641 + C56030 * C1794 + C55626 * C2368) *
               C3360 -
           (C56030 * C3891 + C55626 * C4407 + C56029 * C832 + C55625 * C1396) *
               C3428 -
           (C56030 * C3989 + C55626 * C4493 + C56029 * C927 + C55625 * C1497) *
               C3361 +
           (C56029 * C2570 + C55625 * C3105 + C56030 * C3896 + C55626 * C4412) *
               C3429 +
           (C56029 * C2663 + C55625 * C3199 + C56030 * C3994 + C55626 * C4494) *
               C3362 -
           (C56030 * C16835 + C55626 * C17361 + C56029 * C3367 +
            C55625 * C3707) *
               C3430 -
           (C56030 * C16942 + C55626 * C17465 + C56029 * C3433 +
            C55625 * C3761) *
               C3363) *
              C39125 +
          ((C56057 + C56056) * C3427 + (C56146 + C56147) * C3360 -
           (C56943 + C56942) * C3428 - (C57056 + C57057) * C3361 +
           (C58904 + C58903) * C3429 + (C59009 + C59010) * C3362 -
           (C56030 * C21004 + C55626 * C21644 + C56029 * C3366 +
            C55625 * C3706) *
               C3430 -
           (C56030 * C21126 + C55626 * C21758 + C56029 * C3432 +
            C55625 * C3762) *
               C3363) *
              C39126) *
         C90623 * C90498 * C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C923 +
            (C56029 * C182 + C55625 * C641 + C56030 * C1794 + C55626 * C2368) *
                C90752 -
            (C56030 * C3891 + C55626 * C4407 + C56029 * C832 + C55625 * C1396) *
                C924 -
            (C56030 * C3989 + C55626 * C4493 + C56029 * C927 + C55625 * C1497) *
                C90555) *
               C39125 +
           ((C56057 + C56056) * C923 + (C56146 + C56147) * C90752 -
            (C56943 + C56942) * C924 - (C57056 + C57057) * C90555) *
               C39126) *
              C90623 * C821 +
          (((C56942 + C56943) * C924 -
            ((C56147 + C56146) * C90752 + (C56056 + C56057) * C923) +
            (C57057 + C57056) * C90555) *
               C39125 +
           ((C56947 + C56946) * C924 -
            ((C56148 + C56149) * C90752 + (C56061 + C56060) * C923) +
            (C57058 + C57059) * C90555) *
               C39126) *
              C90623 * C822 +
          (((C56060 + C56061) * C923 + (C56149 + C56148) * C90752 -
            (C56946 + C56947) * C924 - (C57059 + C57058) * C90555) *
               C39125 +
           ((C56065 + C56064) * C923 + (C56150 + C56151) * C90752 -
            (C56030 * C8120 + C55626 * C8760 + C56029 * C831 + C55625 * C1398) *
                C924 -
            (C56030 * C8222 + C55626 * C8872 + C56029 * C928 + C55625 * C1500) *
                C90555) *
               C39126) *
              C90623 * C823) *
         C90567) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C923 +
            (C56029 * C182 + C55625 * C641 + C56030 * C1794 + C55626 * C2368) *
                C90752 -
            (C56030 * C3891 + C55626 * C4407 + C56029 * C832 + C55625 * C1396) *
                C924 -
            (C56030 * C3989 + C55626 * C4493 + C56029 * C927 + C55625 * C1497) *
                C90555) *
               C39125 +
           ((C56057 + C56056) * C923 + (C56146 + C56147) * C90752 -
            (C56943 + C56942) * C924 - (C57056 + C57057) * C90555) *
               C39126) *
              C90623 * C90498 * C4653 +
          (((C56029 * C3891 + C55625 * C4407 + C56030 * C5471 +
             C55626 * C5951) *
                C924 -
            ((C56030 * C4746 + C55626 * C5285 + C56029 * C1794 +
              C55625 * C2368) *
                 C90752 +
             (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
              C55625 * C2264) *
                 C923) +
            (C56029 * C3989 + C55625 * C4493 + C56030 * C5557 +
             C55626 * C6029) *
                C90555) *
               C39125 +
           ((C56029 * C3892 + C55625 * C4408 + C56030 * C5470 +
             C55626 * C5950) *
                C924 -
            ((C58076 + C58075) * C90752 + (C57962 + C57961) * C923) +
            (C56029 * C3990 + C55625 * C4495 + C56030 * C5556 +
             C55626 * C6030) *
                C90555) *
               C39126) *
              C90623 * C90498 * C4654 +
          (((C56029 * C4656 + C55625 * C5191 + C56030 * C6165 +
             C55626 * C6505) *
                C923 +
            (C56029 * C4746 + C55625 * C5285 + C56030 * C6227 +
             C55626 * C6561) *
                C90752 -
            (C56030 * C19088 + C55626 * C19412 + C56029 * C5471 +
             C55625 * C5951) *
                C924 -
            (C56030 * C19146 + C55626 * C19466 + C56029 * C5557 +
             C55625 * C6029) *
                C90555) *
               C39125 +
           ((C61355 + C61354) * C923 + (C61460 + C61461) * C90752 -
            (C56030 * C33649 + C55626 * C34329 + C56029 * C5470 +
             C55625 * C5950) *
                C924 -
            (C56030 * C33769 + C55626 * C34429 + C56029 * C5556 +
             C55625 * C6030) *
                C90555) *
               C39126) *
              C90623 * C90498 * C4655)) /
            (p * q * std::sqrt(p + q));
    d2eezz[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C244 +
            (C56029 * C245 + C55625 * C719 + C56030 * C1879 + C55626 * C2460) *
                C90567) *
               C39125 +
           ((C56057 + C56056) * C244 + (C56230 + C56231) * C90567) * C39126) *
              C90623 * C3360 -
          (((C57166 + C57167) * C90567 + (C56943 + C56942) * C244) * C39126 +
           ((C56030 * C4075 + C55626 * C4573 + C56029 * C1011 +
             C55625 * C1602) *
                C90567 +
            (C56030 * C3891 + C55626 * C4407 + C56029 * C832 + C55625 * C1396) *
                C244) *
               C39125) *
              C90623 * C3361 +
          (((C56029 * C2570 + C55625 * C3105 + C56030 * C3896 +
             C55626 * C4412) *
                C244 +
            (C56029 * C2745 + C55625 * C3295 + C56030 * C4080 +
             C55626 * C4576) *
                C90567) *
               C39125 +
           ((C58904 + C58903) * C244 + (C59113 + C59114) * C90567) * C39126) *
              C90623 * C3362 -
          (((C56030 * C21232 + C55626 * C21860 + C56029 * C3488 +
             C55625 * C3815) *
                C90567 +
            (C56030 * C21004 + C55626 * C21644 + C56029 * C3366 +
             C55625 * C3706) *
                C244) *
               C39126 +
           ((C56030 * C17029 + C55626 * C17550 + C56029 * C3489 +
             C55625 * C3816) *
                C90567 +
            (C56030 * C16835 + C55626 * C17361 + C56029 * C3367 +
             C55625 * C3707) *
                C244) *
               C39125) *
              C90623 * C3363) *
         C90498) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                 C244 +
             (C56029 * C245 + C55625 * C719 + C56030 * C1879 + C55626 * C2460) *
                 C90567) *
                C39125 +
            ((C56057 + C56056) * C244 + (C56230 + C56231) * C90567) * C39126) *
               C90623 * C90752 -
           (((C57166 + C57167) * C90567 + (C56943 + C56942) * C244) * C39126 +
            ((C56030 * C4075 + C55626 * C4573 + C56029 * C1011 +
              C55625 * C1602) *
                 C90567 +
             (C56030 * C3891 + C55626 * C4407 + C56029 * C832 +
              C55625 * C1396) *
                 C244) *
                C39125) *
               C90623 * C90555) *
              C821 +
          ((((C56942 + C56943) * C244 + (C57167 + C57166) * C90567) * C39125 +
            ((C56947 + C56946) * C244 + (C57168 + C57169) * C90567) * C39126) *
               C90623 * C90555 -
           (((C56232 + C56233) * C90567 + (C56061 + C56060) * C244) * C39126 +
            ((C56231 + C56230) * C90567 + (C56056 + C56057) * C244) * C39125) *
               C90623 * C90752) *
              C822 +
          ((((C56060 + C56061) * C244 + (C56233 + C56232) * C90567) * C39125 +
            ((C56065 + C56064) * C244 + (C56234 + C56235) * C90567) * C39126) *
               C90623 * C90752 -
           (((C56030 * C8322 + C55626 * C8985 + C56029 * C1012 +
              C55625 * C1603) *
                 C90567 +
             (C56030 * C8120 + C55626 * C8760 + C56029 * C831 +
              C55625 * C1398) *
                 C244) *
                C39126 +
            ((C57169 + C57168) * C90567 + (C56946 + C56947) * C244) * C39125) *
               C90623 * C90555) *
              C823)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C4828 +
            (C56029 * C245 + C55625 * C719 + C56030 * C1879 + C55626 * C2460) *
                C4653 -
            (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
             C55625 * C2264) *
                C4829 -
            (C56030 * C4831 + C55626 * C5373 + C56029 * C1879 +
             C55625 * C2460) *
                C4654 +
            (C56029 * C4656 + C55625 * C5191 + C56030 * C6165 +
             C55626 * C6505) *
                C4830 +
            (C56029 * C4831 + C55625 * C5373 + C56030 * C6287 +
             C55626 * C6612) *
                C4655) *
               C39125 +
           ((C56057 + C56056) * C4828 + (C56230 + C56231) * C4653 -
            (C57962 + C57961) * C4829 - (C58185 + C58186) * C4654 +
            (C61355 + C61354) * C4830 + (C61564 + C61565) * C4655) *
               C39126) *
              C90623 * C90752 +
          (((C56029 * C3891 + C55625 * C4407 + C56030 * C5471 +
             C55626 * C5951) *
                C4829 -
            ((C56030 * C4075 + C55626 * C4573 + C56029 * C1011 +
              C55625 * C1602) *
                 C4653 +
             (C56030 * C3891 + C55626 * C4407 + C56029 * C832 +
              C55625 * C1396) *
                 C4828) +
            (C56029 * C4075 + C55625 * C4573 + C56030 * C5637 +
             C55626 * C6106) *
                C4654 -
            (C56030 * C19088 + C55626 * C19412 + C56029 * C5471 +
             C55625 * C5951) *
                C4830 -
            (C56030 * C19199 + C55626 * C19517 + C56029 * C5637 +
             C55625 * C6106) *
                C4655) *
               C39125 +
           ((C56029 * C3892 + C55625 * C4408 + C56030 * C5470 +
             C55626 * C5950) *
                C4829 -
            ((C57166 + C57167) * C4653 + (C56943 + C56942) * C4828) +
            (C56029 * C4076 + C55625 * C4574 + C56030 * C5636 +
             C55626 * C6107) *
                C4654 -
            (C56030 * C33649 + C55626 * C34329 + C56029 * C5470 +
             C55625 * C5950) *
                C4830 -
            (C56030 * C33888 + C55626 * C34528 + C56029 * C5636 +
             C55625 * C6107) *
                C4655) *
               C39126) *
              C90623 * C90555) *
         C90498) /
            (p * q * std::sqrt(p + q));
    d2eexx[53] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                 C3364 +
             (C39129 * C116 + C39125 * C125 + C39130 * C117 + C39126 * C126) *
                 C90498) *
                C90623 * C55625 +
            ((C57292 + C57293) * C3364 + (C57294 + C57295) * C90498) * C90623 *
                C55626) *
               C90753 -
           (((C39130 * C4664 + C39126 * C4669 + C39129 * C4663 +
              C39125 * C4668) *
                 C90498 +
             (C39130 * C4657 + C39126 * C4661 + C39129 * C4656 +
              C39125 * C4660) *
                 C3364) *
                C90623 * C55626 +
            ((C57295 + C57294) * C90498 + (C57293 + C57292) * C3364) * C90623 *
                C55625) *
               C90579) *
              C2565 +
          ((((C43403 + C43402) * C3364 + (C43401 + C43400) * C90498) * C90623 *
                C55625 +
            ((C45252 + C45253) * C3364 + (C45254 + C45255) * C90498) * C90623 *
                C55626) *
               C90579 -
           (((C43400 + C43401) * C90498 + (C43402 + C43403) * C3364) * C90623 *
                C55626 +
            ((C39865 + C39864) * C90498 + (C39863 + C39862) * C3364) * C90623 *
                C55625) *
               C90753) *
              C2566 +
          ((((C41812 + C41811) * C3364 + (C41810 + C41809) * C90498) * C90623 *
                C55625 +
            ((C43404 + C43405) * C3364 + (C43406 + C43407) * C90498) * C90623 *
                C55626) *
               C90753 -
           (((C39130 * C17656 + C39126 * C17658 + C39129 * C17654 +
              C39125 * C17657) *
                 C90498 +
             (C39130 * C17652 + C39126 * C17655 + C39129 * C17651 +
              C39125 * C17653) *
                 C3364) *
                C90623 * C55626 +
            ((C43407 + C43406) * C90498 + (C43405 + C43404) * C3364) * C90623 *
                C55625) *
               C90579) *
              C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C826 +
            (C39129 * C116 + C39125 * C125 + C39130 * C117 + C39126 * C126) *
                C821 -
            (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                C827 -
            (C39130 * C118 + C39126 * C127 + C39129 * C117 + C39125 * C126) *
                C822 +
            (C39129 * C109 + C39125 * C115 + C39130 * C110 + C39126 * C119) *
                C828 +
            (C39129 * C118 + C39125 * C127 + C39130 * C120 + C39126 * C128) *
                C823) *
               C90623 * C55625 +
           ((C57292 + C57293) * C826 + (C57294 + C57295) * C821 -
            (C57296 + C57297) * C827 - (C57298 + C57299) * C822 +
            (C57300 + C57301) * C828 + (C57302 + C57303) * C823) *
               C90623 * C55626) *
              C90753 +
          (((C57297 + C57296) * C827 -
            ((C57295 + C57294) * C821 + (C57293 + C57292) * C826) +
            (C57299 + C57298) * C822 - (C57301 + C57300) * C828 -
            (C57303 + C57302) * C823) *
               C90623 * C55625 +
           ((C39129 * C4657 + C39125 * C4661 + C39130 * C4658 +
             C39126 * C4662) *
                C827 -
            ((C39130 * C4664 + C39126 * C4669 + C39129 * C4663 +
              C39125 * C4668) *
                 C821 +
             (C39130 * C4657 + C39126 * C4661 + C39129 * C4656 +
              C39125 * C4660) *
                 C826) +
            (C39129 * C4664 + C39125 * C4669 + C39130 * C4665 +
             C39126 * C4670) *
                C822 -
            (C39130 * C4659 + C39126 * C4666 + C39129 * C4658 +
             C39125 * C4662) *
                C828 -
            (C39130 * C4667 + C39126 * C4671 + C39129 * C4665 +
             C39125 * C4670) *
                C823) *
               C90623 * C55626) *
              C90579) *
         C90541) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C3364 +
            (C39129 * C116 + C39125 * C125 + C39130 * C117 + C39126 * C126) *
                C90498) *
               C90623 * C55625 +
           ((C57292 + C57293) * C3364 + (C57294 + C57295) * C90498) * C90623 *
               C55626) *
              C6159 -
          (((C60713 + C60714) * C90498 + (C60715 + C60716) * C3364) * C90623 *
               C55626 +
           ((C57295 + C57294) * C90498 + (C57293 + C57292) * C3364) * C90623 *
               C55625) *
              C6160 +
          (((C60716 + C60715) * C3364 + (C60714 + C60713) * C90498) * C90623 *
               C55625 +
           ((C62526 + C62527) * C3364 + (C62528 + C62529) * C90498) * C90623 *
               C55626) *
              C6161 -
          (((C39130 * C30252 + C39126 * C30254 + C39129 * C30250 +
             C39125 * C30253) *
                C90498 +
            (C39130 * C30248 + C39126 * C30251 + C39129 * C30247 +
             C39125 * C30249) *
                C3364) *
               C90623 * C55626 +
           ((C62529 + C62528) * C90498 + (C62527 + C62526) * C3364) * C90623 *
               C55625) *
              C6162) *
         C90541) /
            (p * q * std::sqrt(p + q));
    d2eexy[53] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C2660 +
            (C39129 * C182 + C39125 * C188 + C39130 * C183 + C39126 * C189) *
                C2565 -
            (C39863 + C39862) * C2661 - (C39984 + C39985) * C2566 +
            (C41812 + C41811) * C2662 + (C41921 + C41922) * C2567) *
               C90623 * C55625 +
           ((C57292 + C57293) * C2660 + (C57414 + C57415) * C2565 -
            (C43402 + C43403) * C2661 - (C43515 + C43514) * C2566 +
            (C43404 + C43405) * C2662 + (C43517 + C43516) * C2567) *
               C90623 * C55626) *
              C90498 * C90753 +
          (((C43403 + C43402) * C2661 -
            ((C57415 + C57414) * C2565 + (C57293 + C57292) * C2660) +
            (C43514 + C43515) * C2566 - (C43405 + C43404) * C2662 -
            (C43516 + C43517) * C2567) *
               C90623 * C55625 +
           ((C45252 + C45253) * C2661 -
            ((C39130 * C4747 + C39126 * C4751 + C39129 * C4746 +
              C39125 * C4750) *
                 C2565 +
             (C39130 * C4657 + C39126 * C4661 + C39129 * C4656 +
              C39125 * C4660) *
                 C2660) +
            (C45359 + C45358) * C2566 -
            (C39130 * C17652 + C39126 * C17655 + C39129 * C17651 +
             C39125 * C17653) *
                C2662 -
            (C39130 * C17734 + C39126 * C17736 + C39129 * C17733 +
             C39125 * C17735) *
                C2567) *
               C90623 * C55626) *
              C90498 * C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                 C181 +
             (C39129 * C182 + C39125 * C188 + C39130 * C183 + C39126 * C189) *
                 C90541) *
                C90623 * C55625 +
            ((C57292 + C57293) * C181 + (C57414 + C57415) * C90541) * C90623 *
                C55626) *
               C821 -
           (((C57416 + C57417) * C90541 + (C57296 + C57297) * C181) * C90623 *
                C55626 +
            ((C39130 * C184 + C39126 * C190 + C39129 * C183 + C39125 * C189) *
                 C90541 +
             (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                 C181) *
                C90623 * C55625) *
               C822 +
           (((C39129 * C109 + C39125 * C115 + C39130 * C110 + C39126 * C119) *
                 C181 +
             (C39129 * C184 + C39125 * C190 + C39130 * C185 + C39126 * C191) *
                 C90541) *
                C90623 * C55625 +
            ((C57300 + C57301) * C181 + (C57418 + C57419) * C90541) * C90623 *
                C55626) *
               C823) *
              C90753 +
          ((((C57297 + C57296) * C181 + (C57417 + C57416) * C90541) * C90623 *
                C55625 +
            ((C39129 * C4657 + C39125 * C4661 + C39130 * C4658 +
              C39126 * C4662) *
                 C181 +
             (C39129 * C4747 + C39125 * C4751 + C39130 * C4748 +
              C39126 * C4752) *
                 C90541) *
                C90623 * C55626) *
               C822 -
           (((C39130 * C4747 + C39126 * C4751 + C39129 * C4746 +
              C39125 * C4750) *
                 C90541 +
             (C39130 * C4657 + C39126 * C4661 + C39129 * C4656 +
              C39125 * C4660) *
                 C181) *
                C90623 * C55626 +
            ((C57415 + C57414) * C90541 + (C57293 + C57292) * C181) * C90623 *
                C55625) *
               C821 -
           (((C39130 * C4749 + C39126 * C4753 + C39129 * C4748 +
              C39125 * C4752) *
                 C90541 +
             (C39130 * C4659 + C39126 * C4666 + C39129 * C4658 +
              C39125 * C4662) *
                 C181) *
                C90623 * C55626 +
            ((C57419 + C57418) * C90541 + (C57301 + C57300) * C181) * C90623 *
                C55625) *
               C823) *
              C90579)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C181 +
            (C39129 * C182 + C39125 * C188 + C39130 * C183 + C39126 * C189) *
                C90541) *
               C90623 * C55625 +
           ((C57292 + C57293) * C181 + (C57414 + C57415) * C90541) * C90623 *
               C55626) *
              C90498 * C6159 -
          (((C60827 + C60828) * C90541 + (C60715 + C60716) * C181) * C90623 *
               C55626 +
           ((C57415 + C57414) * C90541 + (C57293 + C57292) * C181) * C90623 *
               C55625) *
              C90498 * C6160 +
          (((C60716 + C60715) * C181 + (C60828 + C60827) * C90541) * C90623 *
               C55625 +
           ((C62526 + C62527) * C181 + (C62600 + C62601) * C90541) * C90623 *
               C55626) *
              C90498 * C6161 -
          (((C39130 * C30358 + C39126 * C30360 + C39129 * C30357 +
             C39125 * C30359) *
                C90541 +
            (C39130 * C30248 + C39126 * C30251 + C39129 * C30247 +
             C39125 * C30249) *
                C181) *
               C90623 * C55626 +
           ((C62601 + C62600) * C90541 + (C62527 + C62526) * C181) * C90623 *
               C55625) *
              C90498 * C6162)) /
            (p * q * std::sqrt(p + q));
    d2eexz[53] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C1875 +
            (C39129 * C245 + C39125 * C251 + C39130 * C246 + C39126 * C252) *
                C90753 -
            (C57293 + C57292) * C1876 - (C57530 + C57531) * C90579) *
               C90623 * C55625 +
           ((C57292 + C57293) * C1875 + (C57531 + C57530) * C90753 -
            (C39130 * C4657 + C39126 * C4661 + C39129 * C4656 +
             C39125 * C4660) *
                C1876 -
            (C39130 * C4832 + C39126 * C4836 + C39129 * C4831 +
             C39125 * C4835) *
                C90579) *
               C90623 * C55626) *
              C2565 +
          (((C43403 + C43402) * C1876 -
            ((C40101 + C40100) * C90753 + (C39863 + C39862) * C1875) +
            (C43625 + C43624) * C90579) *
               C90623 * C55625 +
           ((C45252 + C45253) * C1876 -
            ((C43624 + C43625) * C90753 + (C43402 + C43403) * C1875) +
            (C45462 + C45463) * C90579) *
               C90623 * C55626) *
              C2566 +
          (((C41812 + C41811) * C1875 + (C42032 + C42031) * C90753 -
            (C43405 + C43404) * C1876 - (C43627 + C43626) * C90579) *
               C90623 * C55625 +
           ((C43404 + C43405) * C1875 + (C43626 + C43627) * C90753 -
            (C39130 * C17652 + C39126 * C17655 + C39129 * C17651 +
             C39125 * C17653) *
                C1876 -
            (C39130 * C17812 + C39126 * C17814 + C39129 * C17811 +
             C39125 * C17813) *
                C90579) *
               C90623 * C55626) *
              C2567) *
         C90498) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C1875 +
            (C39129 * C245 + C39125 * C251 + C39130 * C246 + C39126 * C252) *
                C90753 -
            (C57293 + C57292) * C1876 - (C57530 + C57531) * C90579) *
               C90623 * C55625 +
           ((C57292 + C57293) * C1875 + (C57531 + C57530) * C90753 -
            (C39130 * C4657 + C39126 * C4661 + C39129 * C4656 +
             C39125 * C4660) *
                C1876 -
            (C39130 * C4832 + C39126 * C4836 + C39129 * C4831 +
             C39125 * C4835) *
                C90579) *
               C90623 * C55626) *
              C90541 * C821 +
          (((C57297 + C57296) * C1876 -
            ((C39130 * C247 + C39126 * C253 + C39129 * C246 + C39125 * C252) *
                 C90753 +
             (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                 C1875) +
            (C57532 + C57533) * C90579) *
               C90623 * C55625 +
           ((C39129 * C4657 + C39125 * C4661 + C39130 * C4658 +
             C39126 * C4662) *
                C1876 -
            ((C57533 + C57532) * C90753 + (C57296 + C57297) * C1875) +
            (C39129 * C4832 + C39125 * C4836 + C39130 * C4833 +
             C39126 * C4837) *
                C90579) *
               C90623 * C55626) *
              C90541 * C822 +
          (((C39129 * C109 + C39125 * C115 + C39130 * C110 + C39126 * C119) *
                C1875 +
            (C39129 * C247 + C39125 * C253 + C39130 * C248 + C39126 * C254) *
                C90753 -
            (C57301 + C57300) * C1876 - (C57534 + C57535) * C90579) *
               C90623 * C55625 +
           ((C57300 + C57301) * C1875 + (C57535 + C57534) * C90753 -
            (C39130 * C4659 + C39126 * C4666 + C39129 * C4658 +
             C39125 * C4662) *
                C1876 -
            (C39130 * C4834 + C39126 * C4838 + C39129 * C4833 +
             C39125 * C4837) *
                C90579) *
               C90623 * C55626) *
              C90541 * C823)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
               C6281 +
           (C39129 * C245 + C39125 * C251 + C39130 * C246 + C39126 * C252) *
               C6159 -
           (C57293 + C57292) * C6282 - (C57530 + C57531) * C6160 +
           (C60716 + C60715) * C6283 + (C60935 + C60936) * C6161 -
           (C62527 + C62526) * C6284 - (C62672 + C62673) * C6162) *
              C90623 * C55625 +
          ((C57292 + C57293) * C6281 + (C57531 + C57530) * C6159 -
           (C60715 + C60716) * C6282 - (C60936 + C60935) * C6160 +
           (C62526 + C62527) * C6283 + (C62673 + C62672) * C6161 -
           (C39130 * C30248 + C39126 * C30251 + C39129 * C30247 +
            C39125 * C30249) *
               C6284 -
           (C39130 * C30450 + C39126 * C30452 + C39129 * C30449 +
            C39125 * C30451) *
               C6162) *
              C90623 * C55626) *
         C90541 * C90498) /
            (p * q * std::sqrt(p + q));
    d2eeyx[53] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C90623 * C308) * C3364 +
              (C307 * C116 + C90623 * C314) * C90498) *
                 C55625 +
             (C29732 + C29733) * C55626) *
                C39125 +
            ((C337 * C3364 + C338 * C90498) * C55625 +
             (C60101 + C60102) * C55626) *
                C39126) *
               C90753 -
           (((C4931 * C90498 + C4930 * C3364) * C55626 +
             (C60102 + C60101) * C55625) *
                C39126 +
            ((C29735 + C29734) * C55626 + (C29733 + C29732) * C55625) *
                C39125) *
               C90579) *
              C2565 +
          ((((C29760 + C29761) * C55625 + (C29762 + C29763) * C55626) * C39125 +
            ((C60103 + C60104) * C55625 +
             (C34012 * C3364 + C34013 * C90498) * C55626) *
                C39126) *
               C90579 -
           (((C60104 + C60103) * C55626 +
             (C1117 * C90498 + C1116 * C3364) * C55625) *
                C39126 +
            ((C29761 + C29760) * C55626 +
             ((C307 * C839 + C90623 * C1098) * C90498 +
              (C307 * C832 + C90623 * C1094) * C3364) *
                 C55625) *
                C39125) *
               C90753) *
              C2566 +
          (((((C307 * C2570 + C90623 * C2827) * C3364 +
              (C307 * C2577 + C90623 * C2831) * C90498) *
                 C55625 +
             (C29764 + C29765) * C55626) *
                C39125 +
            ((C2844 * C3364 + C2845 * C90498) * C55625 +
             (C60105 + C60106) * C55626) *
                C39126) *
               C90753 -
           ((((C307 * C17656 + C90623 * C17892) * C90498 +
              (C307 * C17652 + C90623 * C17890) * C3364) *
                 C55626 +
             (C60106 + C60105) * C55625) *
                C39126 +
            ((C29767 + C29766) * C55626 + (C29765 + C29764) * C55625) *
                C39125) *
               C90579) *
              C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C826 +
             (C307 * C116 + C90623 * C314) * C821 - C337 * C827 - C338 * C822 +
             C339 * C828 + C340 * C823) *
                C55625 +
            (C27914 + C27915 - C27898 - C27899 + C27900 + C27901) * C55626) *
               C39125 +
           ((C337 * C826 + C338 * C821 - C339 * C827 - C340 * C822 +
             C341 * C828 + C342 * C823) *
                C55625 +
            (C57634 + C57635 - C57636 - C57637 + C57638 + C57639) * C55626) *
               C39126) *
              C90753 +
          (((C27898 - (C27915 + C27914) + C27899 - C27900 - C27901) * C55625 +
            (C27906 - (C27917 + C27916) + C27907 - C27908 - C27909) * C55626) *
               C39125 +
           ((C57636 - (C57635 + C57634) + C57637 - C57638 - C57639) * C55625 +
            (C4932 * C827 - (C4931 * C821 + C4930 * C826) + C4933 * C822 -
             (C307 * C4659 + C90623 * C4916) * C828 -
             (C307 * C4667 + C90623 * C4920) * C823) *
                C55626) *
               C39126) *
              C90579) *
         C90541) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C3364 +
             (C307 * C116 + C90623 * C314) * C90498) *
                C55625 +
            (C29732 + C29733) * C55626) *
               C39125 +
           ((C337 * C3364 + C338 * C90498) * C55625 +
            (C60101 + C60102) * C55626) *
               C39126) *
              C6159 -
          (((C61958 + C61959) * C55626 + (C60102 + C60101) * C55625) * C39126 +
           ((C29735 + C29734) * C55626 + (C29733 + C29732) * C55625) * C39125) *
              C6160 +
          ((C31307 * C55625 + (C31309 + C31308) * C55626) * C39125 +
           ((C61959 + C61958) * C55625 + (C62740 + C62741) * C55626) * C39126) *
              C6161 -
          ((((C307 * C30252 + C90623 * C30536) * C90498 +
             (C307 * C30248 + C90623 * C30534) * C3364) *
                C55626 +
            (C62741 + C62740) * C55625) *
               C39126 +
           ((C31954 + C31953) * C55626 + C31946 * C55625) * C39125) *
              C6162) *
         C90541) /
            (p * q * std::sqrt(p + q));
    d2eeyy[53] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C2660 +
             (C307 * C182 + C90623 * C394) * C2565 -
             (C307 * C832 + C90623 * C1094) * C2661 -
             (C307 * C927 + C90623 * C1195) * C2566 +
             (C307 * C2570 + C90623 * C2827) * C2662 +
             (C307 * C2663 + C90623 * C2921) * C2567) *
                C55625 +
            (C29842 + C29843 - C29844 - C29862 + C29847 + C29863) * C55626) *
               C39125 +
           ((C2926 + C2927 - C2928 - C2929 + C2930 + C2942) * C55625 +
            (C58685 + C58686 - C58687 - C58688 + C58689 + C58693) * C55626) *
               C39126) *
              C90498 * C90753 +
          (((C29844 - (C29843 + C29842) + C29862 - C29847 - C29863) * C55625 +
            (C29852 - (C29851 + C29850) + C29864 - C29855 - C29865) * C55626) *
               C39125 +
           ((C58687 - (C58686 + C58685) + C58688 - C58689 - C58693) * C55625 +
            (C34012 * C2661 - (C5018 * C2565 + C4930 * C2660) + C34128 * C2566 -
             (C307 * C17652 + C90623 * C17890) * C2662 -
             (C307 * C17734 + C90623 * C17968) * C2567) *
                C55626) *
               C39126) *
              C90498 * C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C90623 * C308) * C181 +
              (C307 * C182 + C90623 * C394) * C90541) *
                 C55625 +
             (C27992 + C28000) * C55626) *
                C39125 +
            ((C401 + C417) * C55625 + C57738 * C55626) * C39126) *
               C821 -
           ((C2084 * C55626 + (C418 + C404) * C55625) * C39126 +
            (C57739 * C55626 + (C417 + C401) * C55625) * C39125) *
               C822 +
           ((C421 * C55625 + C57740 * C55626) * C39125 +
            ((C409 + C419) * C55625 + (C2075 + C2083) * C55626) * C39126) *
               C823) *
              C90753 +
          (((C57738 * C55625 + (C5012 + C5020) * C55626) * C39125 +
            (C57740 * C55625 + (C5015 + C5021) * C55626) * C39126) *
               C822 -
           ((C30642 * C55626 + C57739 * C55625) * C39126 +
            ((C28001 + C27995) * C55626 + (C28000 + C27992) * C55625) *
                C39125) *
               C821 -
           ((((C307 * C4749 + C90623 * C5010) * C90541 +
              (C307 * C4659 + C90623 * C4916) * C181) *
                 C55626 +
             (C2083 + C2075) * C55625) *
                C39126 +
            ((C5021 + C5015) * C55626 + C2084 * C55625) * C39125) *
               C823) *
              C90579)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C181 +
             (C307 * C182 + C90623 * C394) * C90541) *
                C55625 +
            (C27992 + C28000) * C55626) *
               C39125 +
           ((C401 + C417) * C55625 + C57738 * C55626) * C39126) *
              C90498 * C6159 -
          ((C30642 * C55626 + C57739 * C55625) * C39126 +
           ((C28001 + C27995) * C55626 + (C28000 + C27992) * C55625) * C39125) *
              C90498 * C6160 +
          ((C30641 * C55625 + (C30648 + C30652) * C55626) * C39125 +
           (C61143 * C55625 + (C30643 + C30651) * C55626) * C39126) *
              C90498 * C6161 -
          ((((C307 * C30358 + C90623 * C30639) * C90541 +
             (C307 * C30248 + C90623 * C30534) * C181) *
                C55626 +
            (C30651 + C30643) * C55625) *
               C39126 +
           ((C32011 + C32007) * C55626 + C32006 * C55625) * C39125) *
              C90498 * C6162)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[53] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C1875 +
             (C307 * C245 + C90623 * C474) * C90753 - C27910 * C1876 -
             C28080 * C90579) *
                C55625 +
            (C27910 * C1875 + C28080 * C90753 - C27912 * C1876 -
             C28081 * C90579) *
                C55626) *
               C39125 +
           ((C2165 + C2166 - C2167 - C2184) * C55625 +
            (C57839 + C57840 - C57841 - C57842) * C55626) *
               C39126) *
              C2565 +
          (((C29752 * C1876 -
             ((C307 * C1011 + C90623 * C1301) * C90753 +
              (C307 * C832 + C90623 * C1094) * C1875) +
             C29948 * C90579) *
                C55625 +
            (C29754 * C1876 - (C29948 * C90753 + C29752 * C1875) +
             C29949 * C90579) *
                C55626) *
               C39125 +
           ((C8649 - (C8650 + C8651) + C8661) * C55625 +
            (C34012 * C1876 - (C8659 * C90753 + C8433 * C1875) +
             C34231 * C90579) *
                C55626) *
               C39126) *
              C2566 +
          ((((C307 * C2570 + C90623 * C2827) * C1875 +
             (C307 * C2745 + C90623 * C3017) * C90753 - C29756 * C1876 -
             C29950 * C90579) *
                C55625 +
            (C29756 * C1875 + C29950 * C90753 - C29758 * C1876 -
             C29951 * C90579) *
                C55626) *
               C39125 +
           ((C2844 * C1875 + C3028 * C90753 - C58585 * C1876 -
             C58795 * C90579) *
                C55625 +
            (C58585 * C1875 + C58795 * C90753 -
             (C307 * C17652 + C90623 * C17890) * C1876 -
             (C307 * C17812 + C90623 * C18044) * C90579) *
                C55626) *
               C39126) *
              C2567) *
         C90498) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C1875 +
             (C307 * C245 + C90623 * C474) * C90753 - C27910 * C1876 -
             C28080 * C90579) *
                C55625 +
            (C27910 * C1875 + C28080 * C90753 - C27912 * C1876 -
             C28081 * C90579) *
                C55626) *
               C39125 +
           ((C2165 + C2166 - C2167 - C2184) * C55625 +
            (C57839 + C57840 - C57841 - C57842) * C55626) *
               C39126) *
              C90541 * C821 +
          (((C2167 - (C2166 + C2165) + C2184) * C55625 +
            (C57841 - (C57840 + C57839) + C57842) * C55626) *
               C39125 +
           ((C2172 - (C2171 + C2170) + C2186) * C55625 +
            (C57843 - (C57844 + C57845) + C57846) * C55626) *
               C39126) *
              C90541 * C822 +
          ((C2188 * C55625 + (C57845 + C57844 - C57843 - C57846) * C55626) *
               C39125 +
           ((C2177 + C2176 - C2175 - C2187) * C55625 +
            (C1988 * C1875 + C2183 * C90753 -
             (C307 * C4659 + C90623 * C4916) * C1876 -
             (C307 * C4834 + C90623 * C5098) * C90579) *
                C55626) *
               C39126) *
              C90541 * C823)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C6281 +
            (C307 * C245 + C90623 * C474) * C6159 - C27910 * C6282 -
            C28080 * C6160 + C27912 * C6283 + C28081 * C6161 - C30557 * C6284 -
            C30733 * C6162) *
               C55625 +
           (C27910 * C6281 + C28080 * C6159 - C27912 * C6282 - C28081 * C6160 +
            C30557 * C6283 + C30733 * C6161 - C31951 * C6284 - C32065 * C6162) *
               C55626) *
              C39125 +
          ((C337 * C6281 + C493 * C6159 - C1984 * C6282 - C2180 * C6160 +
            C4930 * C6283 + C5114 * C6161 - C30555 * C6284 - C30734 * C6162) *
               C55625 +
           (C1984 * C6281 + C2180 * C6159 - C4930 * C6282 - C5114 * C6160 +
            C30555 * C6283 + C30734 * C6161 -
            (C307 * C30248 + C90623 * C30534) * C6284 -
            (C307 * C30450 + C90623 * C30727) * C6162) *
               C55626) *
              C39126) *
         C90541 * C90498) /
            (p * q * std::sqrt(p + q));
    d2eezx[53] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                 C3364 +
             (C56029 * C116 + C55625 * C561 + C56030 * C1707 + C55626 * C2268) *
                 C90498) *
                C39125 +
            ((C56057 + C56056) * C3364 + (C56059 + C56058) * C90498) * C39126) *
               C90623 * C90753 -
           (((C57964 + C57963) * C90498 + (C57962 + C57961) * C3364) * C39126 +
            ((C56030 * C4663 + C55626 * C5195 + C56029 * C1707 +
              C55625 * C2268) *
                 C90498 +
             (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
              C55625 * C2264) *
                 C3364) *
                C39125) *
               C90623 * C90579) *
              C2565 +
          ((((C56029 * C3891 + C55625 * C4407 + C56030 * C5471 +
              C55626 * C5951) *
                 C3364 +
             (C56029 * C3900 + C55625 * C4413 + C56030 * C5474 +
              C55626 * C5954) *
                 C90498) *
                C39125 +
            ((C56029 * C3892 + C55625 * C4408 + C56030 * C5470 +
              C55626 * C5950) *
                 C3364 +
             (C56029 * C3901 + C55625 * C4414 + C56030 * C5473 +
              C55626 * C5953) *
                 C90498) *
                C39126) *
               C90623 * C90579 -
           (((C56945 + C56944) * C90498 + (C56943 + C56942) * C3364) * C39126 +
            ((C56030 * C3900 + C55626 * C4413 + C56029 * C839 +
              C55625 * C1400) *
                 C90498 +
             (C56030 * C3891 + C55626 * C4407 + C56029 * C832 +
              C55625 * C1396) *
                 C3364) *
                C39125) *
               C90623 * C90753) *
              C2566 +
          ((((C56029 * C2570 + C55625 * C3105 + C56030 * C3896 +
              C55626 * C4412) *
                 C3364 +
             (C56029 * C2577 + C55625 * C3109 + C56030 * C3905 +
              C55626 * C4418) *
                 C90498) *
                C39125 +
            ((C58904 + C58903) * C3364 + (C58906 + C58905) * C90498) * C39126) *
               C90623 * C90753 -
           (((C56030 * C17656 + C55626 * C18122 + C56029 * C3904 +
              C55625 * C4417) *
                 C90498 +
             (C56030 * C17652 + C55626 * C18120 + C56029 * C3895 +
              C55625 * C4411) *
                 C3364) *
                C39126 +
            ((C56030 * C17654 + C55626 * C18121 + C56029 * C3905 +
              C55625 * C4418) *
                 C90498 +
             (C56030 * C17651 + C55626 * C18119 + C56029 * C3896 +
              C55625 * C4412) *
                 C3364) *
                C39125) *
               C90623 * C90579) *
              C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C826 +
            (C56029 * C116 + C55625 * C561 + C56030 * C1707 + C55626 * C2268) *
                C821 -
            (C56056 + C56057) * C827 - (C56058 + C56059) * C822 +
            (C56060 + C56061) * C828 + (C56062 + C56063) * C823) *
               C39125 +
           ((C56057 + C56056) * C826 + (C56059 + C56058) * C821 -
            (C56061 + C56060) * C827 - (C56063 + C56062) * C822 +
            (C56065 + C56064) * C828 + (C56067 + C56066) * C823) *
               C39126) *
              C90623 * C90753 +
          (((C57961 + C57962) * C827 -
            ((C56030 * C4663 + C55626 * C5195 + C56029 * C1707 +
              C55625 * C2268) *
                 C821 +
             (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
              C55625 * C2264) *
                 C826) +
            (C57963 + C57964) * C822 - (C57965 + C57966) * C828 -
            (C57967 + C57968) * C823) *
               C39125 +
           ((C57966 + C57965) * C827 -
            ((C57964 + C57963) * C821 + (C57962 + C57961) * C826) +
            (C57968 + C57967) * C822 -
            (C56030 * C4659 + C55626 * C5194 + C56029 * C1699 +
             C55625 * C2266) *
                C828 -
            (C56030 * C4667 + C55626 * C5198 + C56029 * C1709 +
             C55625 * C2271) *
                C823) *
               C39126) *
              C90623 * C90579) *
         C90541) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C3364 +
            (C56029 * C116 + C55625 * C561 + C56030 * C1707 + C55626 * C2268) *
                C90498) *
               C39125 +
           ((C56057 + C56056) * C3364 + (C56059 + C56058) * C90498) * C39126) *
              C90623 * C6159 -
          (((C57964 + C57963) * C90498 + (C57962 + C57961) * C3364) * C39126 +
           ((C56030 * C4663 + C55626 * C5195 + C56029 * C1707 +
             C55625 * C2268) *
                C90498 +
            (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
             C55625 * C2264) *
                C3364) *
               C39125) *
              C90623 * C6160 +
          (((C56029 * C4656 + C55625 * C5191 + C56030 * C6165 +
             C55626 * C6505) *
                C3364 +
            (C56029 * C4663 + C55625 * C5195 + C56030 * C6168 +
             C55626 * C6508) *
                C90498) *
               C39125 +
           ((C61355 + C61354) * C3364 + (C61357 + C61356) * C90498) * C39126) *
              C90623 * C6161 -
          (((C56030 * C30252 + C55626 * C30811 + C56029 * C6167 +
             C55625 * C6507) *
                C90498 +
            (C56030 * C30248 + C55626 * C30809 + C56029 * C6164 +
             C55625 * C6504) *
                C3364) *
               C39126 +
           ((C56030 * C30250 + C55626 * C30810 + C56029 * C6168 +
             C55625 * C6508) *
                C90498 +
            (C56030 * C30247 + C55626 * C30808 + C56029 * C6165 +
             C55625 * C6505) *
                C3364) *
               C39125) *
              C90623 * C6162) *
         C90541) /
            (p * q * std::sqrt(p + q));
    d2eezy[53] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C2660 +
            (C56029 * C182 + C55625 * C641 + C56030 * C1794 + C55626 * C2368) *
                C2565 -
            (C56030 * C3891 + C55626 * C4407 + C56029 * C832 + C55625 * C1396) *
                C2661 -
            (C56030 * C3989 + C55626 * C4493 + C56029 * C927 + C55625 * C1497) *
                C2566 +
            (C56029 * C2570 + C55625 * C3105 + C56030 * C3896 +
             C55626 * C4412) *
                C2662 +
            (C56029 * C2663 + C55625 * C3199 + C56030 * C3994 +
             C55626 * C4494) *
                C2567) *
               C39125 +
           ((C56057 + C56056) * C2660 + (C56146 + C56147) * C2565 -
            (C56943 + C56942) * C2661 - (C57056 + C57057) * C2566 +
            (C58904 + C58903) * C2662 + (C59009 + C59010) * C2567) *
               C39126) *
              C90623 * C90498 * C90753 +
          (((C56029 * C3891 + C55625 * C4407 + C56030 * C5471 +
             C55626 * C5951) *
                C2661 -
            ((C56030 * C4746 + C55626 * C5285 + C56029 * C1794 +
              C55625 * C2368) *
                 C2565 +
             (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
              C55625 * C2264) *
                 C2660) +
            (C56029 * C3989 + C55625 * C4493 + C56030 * C5557 +
             C55626 * C6029) *
                C2566 -
            (C56030 * C17651 + C55626 * C18119 + C56029 * C3896 +
             C55625 * C4412) *
                C2662 -
            (C56030 * C17733 + C55626 * C18197 + C56029 * C3994 +
             C55625 * C4494) *
                C2567) *
               C39125 +
           ((C56029 * C3892 + C55625 * C4408 + C56030 * C5470 +
             C55626 * C5950) *
                C2661 -
            ((C58076 + C58075) * C2565 + (C57962 + C57961) * C2660) +
            (C56029 * C3990 + C55625 * C4495 + C56030 * C5556 +
             C55626 * C6030) *
                C2566 -
            (C56030 * C17652 + C55626 * C18120 + C56029 * C3895 +
             C55625 * C4411) *
                C2662 -
            (C56030 * C17734 + C55626 * C18198 + C56029 * C3993 +
             C55625 * C4496) *
                C2567) *
               C39126) *
              C90623 * C90498 * C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                 C181 +
             (C56029 * C182 + C55625 * C641 + C56030 * C1794 + C55626 * C2368) *
                 C90541) *
                C39125 +
            ((C56057 + C56056) * C181 + (C56146 + C56147) * C90541) * C39126) *
               C90623 * C821 -
           (((C56148 + C56149) * C90541 + (C56061 + C56060) * C181) * C39126 +
            ((C56147 + C56146) * C90541 + (C56056 + C56057) * C181) * C39125) *
               C90623 * C822 +
           (((C56060 + C56061) * C181 + (C56149 + C56148) * C90541) * C39125 +
            ((C56065 + C56064) * C181 + (C56150 + C56151) * C90541) * C39126) *
               C90623 * C823) *
              C90753 +
          ((((C57961 + C57962) * C181 + (C58075 + C58076) * C90541) * C39125 +
            ((C57966 + C57965) * C181 + (C58077 + C58078) * C90541) * C39126) *
               C90623 * C822 -
           (((C58076 + C58075) * C90541 + (C57962 + C57961) * C181) * C39126 +
            ((C56030 * C4746 + C55626 * C5285 + C56029 * C1794 +
              C55625 * C2368) *
                 C90541 +
             (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
              C55625 * C2264) *
                 C181) *
                C39125) *
               C90623 * C821 -
           (((C56030 * C4749 + C55626 * C5288 + C56029 * C1793 +
              C55625 * C2367) *
                 C90541 +
             (C56030 * C4659 + C55626 * C5194 + C56029 * C1699 +
              C55625 * C2266) *
                 C181) *
                C39126 +
            ((C58078 + C58077) * C90541 + (C57965 + C57966) * C181) * C39125) *
               C90623 * C823) *
              C90579)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C181 +
            (C56029 * C182 + C55625 * C641 + C56030 * C1794 + C55626 * C2368) *
                C90541) *
               C39125 +
           ((C56057 + C56056) * C181 + (C56146 + C56147) * C90541) * C39126) *
              C90623 * C90498 * C6159 -
          (((C58076 + C58075) * C90541 + (C57962 + C57961) * C181) * C39126 +
           ((C56030 * C4746 + C55626 * C5285 + C56029 * C1794 +
             C55625 * C2368) *
                C90541 +
            (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
             C55625 * C2264) *
                C181) *
               C39125) *
              C90623 * C90498 * C6160 +
          (((C56029 * C4656 + C55625 * C5191 + C56030 * C6165 +
             C55626 * C6505) *
                C181 +
            (C56029 * C4746 + C55625 * C5285 + C56030 * C6227 +
             C55626 * C6561) *
                C90541) *
               C39125 +
           ((C61355 + C61354) * C181 + (C61460 + C61461) * C90541) * C39126) *
              C90623 * C90498 * C6161 -
          (((C56030 * C30358 + C55626 * C30887 + C56029 * C6226 +
             C55625 * C6560) *
                C90541 +
            (C56030 * C30248 + C55626 * C30809 + C56029 * C6164 +
             C55625 * C6504) *
                C181) *
               C39126 +
           ((C56030 * C30357 + C55626 * C30886 + C56029 * C6227 +
             C55625 * C6561) *
                C90541 +
            (C56030 * C30247 + C55626 * C30808 + C56029 * C6165 +
             C55625 * C6505) *
                C181) *
               C39125) *
              C90623 * C90498 * C6162)) /
            (p * q * std::sqrt(p + q));
    d2eezz[53] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C1875 +
            (C56029 * C245 + C55625 * C719 + C56030 * C1879 + C55626 * C2460) *
                C90753 -
            (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
             C55625 * C2264) *
                C1876 -
            (C56030 * C4831 + C55626 * C5373 + C56029 * C1879 +
             C55625 * C2460) *
                C90579) *
               C39125 +
           ((C56057 + C56056) * C1875 + (C56230 + C56231) * C90753 -
            (C57962 + C57961) * C1876 - (C58185 + C58186) * C90579) *
               C39126) *
              C90623 * C2565 +
          (((C56029 * C3891 + C55625 * C4407 + C56030 * C5471 +
             C55626 * C5951) *
                C1876 -
            ((C56030 * C4075 + C55626 * C4573 + C56029 * C1011 +
              C55625 * C1602) *
                 C90753 +
             (C56030 * C3891 + C55626 * C4407 + C56029 * C832 +
              C55625 * C1396) *
                 C1875) +
            (C56029 * C4075 + C55625 * C4573 + C56030 * C5637 +
             C55626 * C6106) *
                C90579) *
               C39125 +
           ((C56029 * C3892 + C55625 * C4408 + C56030 * C5470 +
             C55626 * C5950) *
                C1876 -
            ((C57166 + C57167) * C90753 + (C56943 + C56942) * C1875) +
            (C56029 * C4076 + C55625 * C4574 + C56030 * C5636 +
             C55626 * C6107) *
                C90579) *
               C39126) *
              C90623 * C2566 +
          (((C56029 * C2570 + C55625 * C3105 + C56030 * C3896 +
             C55626 * C4412) *
                C1875 +
            (C56029 * C2745 + C55625 * C3295 + C56030 * C4080 +
             C55626 * C4576) *
                C90753 -
            (C56030 * C17651 + C55626 * C18119 + C56029 * C3896 +
             C55625 * C4412) *
                C1876 -
            (C56030 * C17811 + C55626 * C18273 + C56029 * C4080 +
             C55625 * C4576) *
                C90579) *
               C39125 +
           ((C58904 + C58903) * C1875 + (C59113 + C59114) * C90753 -
            (C56030 * C17652 + C55626 * C18120 + C56029 * C3895 +
             C55625 * C4411) *
                C1876 -
            (C56030 * C17812 + C55626 * C18274 + C56029 * C4079 +
             C55625 * C4577) *
                C90579) *
               C39126) *
              C90623 * C2567) *
         C90498) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C1875 +
            (C56029 * C245 + C55625 * C719 + C56030 * C1879 + C55626 * C2460) *
                C90753 -
            (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
             C55625 * C2264) *
                C1876 -
            (C56030 * C4831 + C55626 * C5373 + C56029 * C1879 +
             C55625 * C2460) *
                C90579) *
               C39125 +
           ((C56057 + C56056) * C1875 + (C56230 + C56231) * C90753 -
            (C57962 + C57961) * C1876 - (C58185 + C58186) * C90579) *
               C39126) *
              C90623 * C90541 * C821 +
          (((C57961 + C57962) * C1876 -
            ((C56231 + C56230) * C90753 + (C56056 + C56057) * C1875) +
            (C58186 + C58185) * C90579) *
               C39125 +
           ((C57966 + C57965) * C1876 -
            ((C56232 + C56233) * C90753 + (C56061 + C56060) * C1875) +
            (C58187 + C58188) * C90579) *
               C39126) *
              C90623 * C90541 * C822 +
          (((C56060 + C56061) * C1875 + (C56233 + C56232) * C90753 -
            (C57965 + C57966) * C1876 - (C58188 + C58187) * C90579) *
               C39125 +
           ((C56065 + C56064) * C1875 + (C56234 + C56235) * C90753 -
            (C56030 * C4659 + C55626 * C5194 + C56029 * C1699 +
             C55625 * C2266) *
                C1876 -
            (C56030 * C4834 + C55626 * C5376 + C56029 * C1880 +
             C55625 * C2463) *
                C90579) *
               C39126) *
              C90623 * C90541 * C823)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
               C6281 +
           (C56029 * C245 + C55625 * C719 + C56030 * C1879 + C55626 * C2460) *
               C6159 -
           (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 + C55625 * C2264) *
               C6282 -
           (C56030 * C4831 + C55626 * C5373 + C56029 * C1879 + C55625 * C2460) *
               C6160 +
           (C56029 * C4656 + C55625 * C5191 + C56030 * C6165 + C55626 * C6505) *
               C6283 +
           (C56029 * C4831 + C55625 * C5373 + C56030 * C6287 + C55626 * C6612) *
               C6161 -
           (C56030 * C30247 + C55626 * C30808 + C56029 * C6165 +
            C55625 * C6505) *
               C6284 -
           (C56030 * C30449 + C55626 * C30962 + C56029 * C6287 +
            C55625 * C6612) *
               C6162) *
              C39125 +
          ((C56057 + C56056) * C6281 + (C56230 + C56231) * C6159 -
           (C57962 + C57961) * C6282 - (C58185 + C58186) * C6160 +
           (C61355 + C61354) * C6283 + (C61564 + C61565) * C6161 -
           (C56030 * C30248 + C55626 * C30809 + C56029 * C6164 +
            C55625 * C6504) *
               C6284 -
           (C56030 * C30450 + C55626 * C30963 + C56029 * C6286 +
            C55625 * C6613) *
               C6162) *
              C39126) *
         C90623 * C90541 * C90498) /
            (p * q * std::sqrt(p + q));
    d2eexx[54] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C6694 +
            (C39129 * C116 + C39125 * C125 + C39130 * C117 + C39126 * C126) *
                C90780 -
            (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                C6695 -
            (C39130 * C118 + C39126 * C127 + C39129 * C117 + C39125 * C126) *
                C90771 +
            (C39129 * C109 + C39125 * C115 + C39130 * C110 + C39126 * C119) *
                C6696 +
            (C39129 * C118 + C39125 * C127 + C39130 * C120 + C39126 * C128) *
                C6691) *
               C90623 * C55625 +
           ((C57292 + C57293) * C6694 + (C57294 + C57295) * C90780 -
            (C57296 + C57297) * C6695 - (C57298 + C57299) * C90771 +
            (C57300 + C57301) * C6696 + (C57302 + C57303) * C6691) *
               C90623 * C55626) *
              C9074 +
          (((C57297 + C57296) * C6695 -
            ((C57295 + C57294) * C90780 + (C57293 + C57292) * C6694) +
            (C57299 + C57298) * C90771 - (C57301 + C57300) * C6696 -
            (C57303 + C57302) * C6691) *
               C90623 * C55625 +
           ((C60711 + C60712) * C6695 -
            ((C60713 + C60714) * C90780 + (C60715 + C60716) * C6694) +
            (C60717 + C60718) * C90771 -
            (C39130 * C4659 + C39126 * C4666 + C39129 * C4658 +
             C39125 * C4662) *
                C6696 -
            (C39130 * C4667 + C39126 * C4671 + C39129 * C4665 +
             C39125 * C4670) *
                C6691) *
               C90623 * C55626) *
              C90579) *
         C90541) /
        (p * q * std::sqrt(p + q));
    d2eexy[54] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                 C181 +
             (C39129 * C182 + C39125 * C188 + C39130 * C183 + C39126 * C189) *
                 C90541) *
                C90623 * C55625 +
            ((C57292 + C57293) * C181 + (C57414 + C57415) * C90541) * C90623 *
                C55626) *
               C90780 -
           (((C57416 + C57417) * C90541 + (C57296 + C57297) * C181) * C90623 *
                C55626 +
            ((C39130 * C184 + C39126 * C190 + C39129 * C183 + C39125 * C189) *
                 C90541 +
             (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                 C181) *
                C90623 * C55625) *
               C90771 +
           (((C39129 * C109 + C39125 * C115 + C39130 * C110 + C39126 * C119) *
                 C181 +
             (C39129 * C184 + C39125 * C190 + C39130 * C185 + C39126 * C191) *
                 C90541) *
                C90623 * C55625 +
            ((C57300 + C57301) * C181 + (C57418 + C57419) * C90541) * C90623 *
                C55626) *
               C6691) *
              C9074 +
          ((((C57297 + C57296) * C181 + (C57417 + C57416) * C90541) * C90623 *
                C55625 +
            ((C60711 + C60712) * C181 + (C60825 + C60826) * C90541) * C90623 *
                C55626) *
               C90771 -
           (((C60827 + C60828) * C90541 + (C60715 + C60716) * C181) * C90623 *
                C55626 +
            ((C57415 + C57414) * C90541 + (C57293 + C57292) * C181) * C90623 *
                C55625) *
               C90780 -
           (((C39130 * C4749 + C39126 * C4753 + C39129 * C4748 +
              C39125 * C4752) *
                 C90541 +
             (C39130 * C4659 + C39126 * C4666 + C39129 * C4658 +
              C39125 * C4662) *
                 C181) *
                C90623 * C55626 +
            ((C57419 + C57418) * C90541 + (C57301 + C57300) * C181) * C90623 *
                C55625) *
               C6691) *
              C90579)) /
        (p * q * std::sqrt(p + q));
    d2eexz[54] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C9224 +
            (C39129 * C245 + C39125 * C251 + C39130 * C246 + C39126 * C252) *
                C9074 -
            (C57293 + C57292) * C9225 - (C57530 + C57531) * C90579) *
               C90623 * C55625 +
           ((C57292 + C57293) * C9224 + (C57531 + C57530) * C9074 -
            (C60715 + C60716) * C9225 - (C60936 + C60935) * C90579) *
               C90623 * C55626) *
              C90541 * C90780 +
          (((C57297 + C57296) * C9225 -
            ((C39130 * C247 + C39126 * C253 + C39129 * C246 + C39125 * C252) *
                 C9074 +
             (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                 C9224) +
            (C57532 + C57533) * C90579) *
               C90623 * C55625 +
           ((C60711 + C60712) * C9225 -
            ((C57533 + C57532) * C9074 + (C57296 + C57297) * C9224) +
            (C60938 + C60937) * C90579) *
               C90623 * C55626) *
              C90541 * C90771 +
          (((C39129 * C109 + C39125 * C115 + C39130 * C110 + C39126 * C119) *
                C9224 +
            (C39129 * C247 + C39125 * C253 + C39130 * C248 + C39126 * C254) *
                C9074 -
            (C57301 + C57300) * C9225 - (C57534 + C57535) * C90579) *
               C90623 * C55625 +
           ((C57300 + C57301) * C9224 + (C57535 + C57534) * C9074 -
            (C39130 * C4659 + C39126 * C4666 + C39129 * C4658 +
             C39125 * C4662) *
                C9225 -
            (C39130 * C4834 + C39126 * C4838 + C39129 * C4833 +
             C39125 * C4837) *
                C90579) *
               C90623 * C55626) *
              C90541 * C6691)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[54] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C6694 +
             (C307 * C116 + C90623 * C314) * C90780 - C337 * C6695 -
             C338 * C90771 + C339 * C6696 + C340 * C6691) *
                C55625 +
            (C34838 + C34839 - C34840 - C34841 + C34842 + C34843) * C55626) *
               C39125 +
           ((C337 * C6694 + C338 * C90780 - C339 * C6695 - C340 * C90771 +
             C341 * C6696 + C342 * C6691) *
                C55625 +
            (C66446 + C66447 - C66448 - C66449 + C66450 + C66451) * C55626) *
               C39126) *
              C9074 +
          (((C34840 - (C34839 + C34838) + C34841 - C34842 - C34843) * C55625 +
            (C34846 - (C34845 + C34844) + C34847 - C34848 - C34849) * C55626) *
               C39125 +
           ((C66448 - (C66447 + C66446) + C66449 - C66450 - C66451) * C55625 +
            (C4932 * C6695 - (C4931 * C90780 + C4930 * C6694) + C4933 * C90771 -
             (C307 * C4659 + C90623 * C4916) * C6696 -
             (C307 * C4667 + C90623 * C4920) * C6691) *
                C55626) *
               C39126) *
              C90579) *
         C90541) /
        (p * q * std::sqrt(p + q));
    d2eeyy[54] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C90623 * C308) * C181 +
              (C307 * C182 + C90623 * C394) * C90541) *
                 C55625 +
             (C27992 + C28000) * C55626) *
                C39125 +
            ((C401 + C417) * C55625 + C57738 * C55626) * C39126) *
               C90780 -
           ((C2084 * C55626 + (C418 + C404) * C55625) * C39126 +
            (C57739 * C55626 + (C417 + C401) * C55625) * C39125) *
               C90771 +
           ((C421 * C55625 + C57740 * C55626) * C39125 +
            ((C409 + C419) * C55625 + (C2075 + C2083) * C55626) * C39126) *
               C6691) *
              C9074 +
          (((C57738 * C55625 + C61143 * C55626) * C39125 +
            (C57740 * C55625 + (C5015 + C5021) * C55626) * C39126) *
               C90771 -
           ((C30642 * C55626 + C57739 * C55625) * C39126 +
            ((C28001 + C27995) * C55626 + (C28000 + C27992) * C55625) *
                C39125) *
               C90780 -
           ((((C307 * C4749 + C90623 * C5010) * C90541 +
              (C307 * C4659 + C90623 * C4916) * C181) *
                 C55626 +
             (C2083 + C2075) * C55625) *
                C39126 +
            ((C5021 + C5015) * C55626 + C2084 * C55625) * C39125) *
               C6691) *
              C90579)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[54] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C9224 +
             (C307 * C245 + C90623 * C474) * C9074 - C27910 * C9225 -
             C28080 * C90579) *
                C55625 +
            (C27910 * C9224 + C28080 * C9074 - C27912 * C9225 -
             C28081 * C90579) *
                C55626) *
               C39125 +
           ((C9449 + C9450 - C9451 - C9452) * C55625 +
            (C66648 + C66649 - C66650 - C66651) * C55626) *
               C39126) *
              C90541 * C90780 +
          (((C9451 - (C9450 + C9449) + C9452) * C55625 +
            (C66650 - (C66649 + C66648) + C66651) * C55626) *
               C39125 +
           ((C9455 - (C9454 + C9453) + C9456) * C55625 +
            (C66652 - (C66653 + C66654) + C66655) * C55626) *
               C39126) *
              C90541 * C90771 +
          ((C9463 * C55625 + (C66654 + C66653 - C66652 - C66655) * C55626) *
               C39125 +
           ((C9459 + C9458 - C9457 - C9460) * C55625 +
            (C1988 * C9224 + C2183 * C9074 -
             (C307 * C4659 + C90623 * C4916) * C9225 -
             (C307 * C4834 + C90623 * C5098) * C90579) *
                C55626) *
               C39126) *
              C90541 * C6691)) /
        (p * q * std::sqrt(p + q));
    d2eezx[54] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C6694 +
            (C56029 * C116 + C55625 * C561 + C56030 * C1707 + C55626 * C2268) *
                C90780 -
            (C56056 + C56057) * C6695 - (C56058 + C56059) * C90771 +
            (C56060 + C56061) * C6696 + (C56062 + C56063) * C6691) *
               C39125 +
           ((C56057 + C56056) * C6694 + (C56059 + C56058) * C90780 -
            (C56061 + C56060) * C6695 - (C56063 + C56062) * C90771 +
            (C56065 + C56064) * C6696 + (C56067 + C56066) * C6691) *
               C39126) *
              C90623 * C9074 +
          (((C57961 + C57962) * C6695 -
            ((C56030 * C4663 + C55626 * C5195 + C56029 * C1707 +
              C55625 * C2268) *
                 C90780 +
             (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
              C55625 * C2264) *
                 C6694) +
            (C57963 + C57964) * C90771 - (C57965 + C57966) * C6696 -
            (C57967 + C57968) * C6691) *
               C39125 +
           ((C57966 + C57965) * C6695 -
            ((C57964 + C57963) * C90780 + (C57962 + C57961) * C6694) +
            (C57968 + C57967) * C90771 -
            (C56030 * C4659 + C55626 * C5194 + C56029 * C1699 +
             C55625 * C2266) *
                C6696 -
            (C56030 * C4667 + C55626 * C5198 + C56029 * C1709 +
             C55625 * C2271) *
                C6691) *
               C39126) *
              C90623 * C90579) *
         C90541) /
        (p * q * std::sqrt(p + q));
    d2eezy[54] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                 C181 +
             (C56029 * C182 + C55625 * C641 + C56030 * C1794 + C55626 * C2368) *
                 C90541) *
                C39125 +
            ((C56057 + C56056) * C181 + (C56146 + C56147) * C90541) * C39126) *
               C90623 * C90780 -
           (((C56148 + C56149) * C90541 + (C56061 + C56060) * C181) * C39126 +
            ((C56147 + C56146) * C90541 + (C56056 + C56057) * C181) * C39125) *
               C90623 * C90771 +
           (((C56060 + C56061) * C181 + (C56149 + C56148) * C90541) * C39125 +
            ((C56065 + C56064) * C181 + (C56150 + C56151) * C90541) * C39126) *
               C90623 * C6691) *
              C9074 +
          ((((C57961 + C57962) * C181 + (C58075 + C58076) * C90541) * C39125 +
            ((C57966 + C57965) * C181 + (C58077 + C58078) * C90541) * C39126) *
               C90623 * C90771 -
           (((C58076 + C58075) * C90541 + (C57962 + C57961) * C181) * C39126 +
            ((C56030 * C4746 + C55626 * C5285 + C56029 * C1794 +
              C55625 * C2368) *
                 C90541 +
             (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
              C55625 * C2264) *
                 C181) *
                C39125) *
               C90623 * C90780 -
           (((C56030 * C4749 + C55626 * C5288 + C56029 * C1793 +
              C55625 * C2367) *
                 C90541 +
             (C56030 * C4659 + C55626 * C5194 + C56029 * C1699 +
              C55625 * C2266) *
                 C181) *
                C39126 +
            ((C58078 + C58077) * C90541 + (C57965 + C57966) * C181) * C39125) *
               C90623 * C6691) *
              C90579)) /
        (p * q * std::sqrt(p + q));
    d2eezz[54] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C9224 +
            (C56029 * C245 + C55625 * C719 + C56030 * C1879 + C55626 * C2460) *
                C9074 -
            (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
             C55625 * C2264) *
                C9225 -
            (C56030 * C4831 + C55626 * C5373 + C56029 * C1879 +
             C55625 * C2460) *
                C90579) *
               C39125 +
           ((C56057 + C56056) * C9224 + (C56230 + C56231) * C9074 -
            (C57962 + C57961) * C9225 - (C58185 + C58186) * C90579) *
               C39126) *
              C90623 * C90541 * C90780 +
          (((C57961 + C57962) * C9225 -
            ((C56231 + C56230) * C9074 + (C56056 + C56057) * C9224) +
            (C58186 + C58185) * C90579) *
               C39125 +
           ((C57966 + C57965) * C9225 -
            ((C56232 + C56233) * C9074 + (C56061 + C56060) * C9224) +
            (C58187 + C58188) * C90579) *
               C39126) *
              C90623 * C90541 * C90771 +
          (((C56060 + C56061) * C9224 + (C56233 + C56232) * C9074 -
            (C57965 + C57966) * C9225 - (C58188 + C58187) * C90579) *
               C39125 +
           ((C56065 + C56064) * C9224 + (C56234 + C56235) * C9074 -
            (C56030 * C4659 + C55626 * C5194 + C56029 * C1699 +
             C55625 * C2266) *
                C9225 -
            (C56030 * C4834 + C55626 * C5376 + C56029 * C1880 +
             C55625 * C2463) *
                C90579) *
               C39126) *
              C90623 * C90541 * C6691)) /
        (p * q * std::sqrt(p + q));
    d2eexx[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                 C7401 +
             (C39129 * C116 + C39125 * C125 + C39130 * C117 + C39126 * C126) *
                 C7396 -
             (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                 C7402 -
             (C39130 * C118 + C39126 * C127 + C39129 * C117 + C39125 * C126) *
                 C90503) *
                C90623 * C55625 +
            ((C57292 + C57293) * C7401 + (C57294 + C57295) * C7396 -
             (C57296 + C57297) * C7402 - (C57298 + C57299) * C90503) *
                C90623 * C55626) *
               C9074 +
           (((C57297 + C57296) * C7402 -
             ((C57295 + C57294) * C7396 + (C57293 + C57292) * C7401) +
             (C57299 + C57298) * C90503) *
                C90623 * C55625 +
            ((C60711 + C60712) * C7402 -
             ((C60713 + C60714) * C7396 + (C60715 + C60716) * C7401) +
             (C60717 + C60718) * C90503) *
                C90623 * C55626) *
               C90579) *
              C90752 +
          ((((C39867 + C39866) * C7402 -
             ((C39865 + C39864) * C7396 + (C39863 + C39862) * C7401) +
             (C39869 + C39868) * C90503) *
                C90623 * C55625 +
            ((C48578 + C48579) * C7402 -
             ((C43400 + C43401) * C7396 + (C43402 + C43403) * C7401) +
             (C48580 + C48581) * C90503) *
                C90623 * C55626) *
               C9074 +
           (((C43403 + C43402) * C7401 + (C43401 + C43400) * C7396 -
             (C48579 + C48578) * C7402 - (C48581 + C48580) * C90503) *
                C90623 * C55625 +
            ((C45252 + C45253) * C7401 + (C45254 + C45255) * C7396 -
             (C39130 * C5469 + C39126 * C5475 + C39129 * C5470 +
              C39125 * C5476) *
                 C7402 -
             (C39130 * C5472 + C39126 * C5478 + C39129 * C5473 +
              C39125 * C5479) *
                 C90503) *
                C90623 * C55626) *
               C90579) *
              C90555)) /
        (p * q * std::sqrt(p + q));
    d2eexy[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                 C923 +
             (C39129 * C182 + C39125 * C188 + C39130 * C183 + C39126 * C189) *
                 C90752 -
             (C39863 + C39862) * C924 - (C39984 + C39985) * C90555) *
                C90623 * C55625 +
            ((C57292 + C57293) * C923 + (C57414 + C57415) * C90752 -
             (C43402 + C43403) * C924 - (C43515 + C43514) * C90555) *
                C90623 * C55626) *
               C7396 +
           (((C39867 + C39866) * C924 -
             ((C39130 * C184 + C39126 * C190 + C39129 * C183 + C39125 * C189) *
                  C90752 +
              (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                  C923) +
             (C39986 + C39987) * C90555) *
                C90623 * C55625 +
            ((C48578 + C48579) * C924 -
             ((C57416 + C57417) * C90752 + (C57296 + C57297) * C923) +
             (C48717 + C48716) * C90555) *
                C90623 * C55626) *
               C90503) *
              C9074 +
          ((((C43403 + C43402) * C924 -
             ((C57415 + C57414) * C90752 + (C57293 + C57292) * C923) +
             (C43514 + C43515) * C90555) *
                C90623 * C55625 +
            ((C45252 + C45253) * C924 -
             ((C60827 + C60828) * C90752 + (C60715 + C60716) * C923) +
             (C45359 + C45358) * C90555) *
                C90623 * C55626) *
               C7396 +
           (((C57297 + C57296) * C923 + (C57417 + C57416) * C90752 -
             (C48579 + C48578) * C924 - (C48716 + C48717) * C90555) *
                C90623 * C55625 +
            ((C60711 + C60712) * C923 + (C60825 + C60826) * C90752 -
             (C39130 * C5469 + C39126 * C5475 + C39129 * C5470 +
              C39125 * C5476) *
                 C924 -
             (C39130 * C5555 + C39126 * C5558 + C39129 * C5556 +
              C39125 * C5559) *
                 C90555) *
                C90623 * C55626) *
               C90503) *
              C90579)) /
        (p * q * std::sqrt(p + q));
    d2eexz[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                 C9224 +
             (C39129 * C245 + C39125 * C251 + C39130 * C246 + C39126 * C252) *
                 C9074 -
             (C57293 + C57292) * C9225 - (C57530 + C57531) * C90579) *
                C90623 * C55625 +
            ((C57292 + C57293) * C9224 + (C57531 + C57530) * C9074 -
             (C60715 + C60716) * C9225 - (C60936 + C60935) * C90579) *
                C90623 * C55626) *
               C90752 +
           (((C43403 + C43402) * C9225 -
             ((C40101 + C40100) * C9074 + (C39863 + C39862) * C9224) +
             (C43625 + C43624) * C90579) *
                C90623 * C55625 +
            ((C45252 + C45253) * C9225 -
             ((C43624 + C43625) * C9074 + (C43402 + C43403) * C9224) +
             (C45462 + C45463) * C90579) *
                C90623 * C55626) *
               C90555) *
              C7396 +
          ((((C57297 + C57296) * C9225 -
             ((C39130 * C247 + C39126 * C253 + C39129 * C246 + C39125 * C252) *
                  C9074 +
              (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                  C9224) +
             (C57532 + C57533) * C90579) *
                C90623 * C55625 +
            ((C60711 + C60712) * C9225 -
             ((C57533 + C57532) * C9074 + (C57296 + C57297) * C9224) +
             (C60938 + C60937) * C90579) *
                C90623 * C55626) *
               C90752 +
           (((C39867 + C39866) * C9224 + (C40102 + C40103) * C9074 -
             (C48579 + C48578) * C9225 - (C48853 + C48852) * C90579) *
                C90623 * C55625 +
            ((C48578 + C48579) * C9224 + (C48852 + C48853) * C9074 -
             (C39130 * C5469 + C39126 * C5475 + C39129 * C5470 +
              C39125 * C5476) *
                 C9225 -
             (C39130 * C5635 + C39126 * C5638 + C39129 * C5636 +
              C39125 * C5639) *
                 C90579) *
                C90623 * C55626) *
               C90555) *
              C90503)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C90623 * C308) * C7401 +
              (C307 * C116 + C90623 * C314) * C7396 - C337 * C7402 -
              C338 * C90503) *
                 C55625 +
             (C33994 + C33995 - C33996 - C33997) * C55626) *
                C39125 +
            ((C337 * C7401 + C338 * C7396 - C339 * C7402 - C340 * C90503) *
                 C55625 +
             (C65362 + C65363 - C65364 - C65365) * C55626) *
                C39126) *
               C9074 +
           (((C33996 - (C33995 + C33994) + C33997) * C55625 +
             (C34000 - (C33999 + C33998) + C34001) * C55626) *
                C39125 +
            ((C65364 - (C65363 + C65362) + C65365) * C55625 +
             (C4932 * C7402 - (C4931 * C7396 + C4930 * C7401) +
              C4933 * C90503) *
                 C55626) *
                C39126) *
               C90579) *
              C90752 +
          ((((C1116 * C7402 -
              ((C307 * C839 + C90623 * C1098) * C7396 +
               (C307 * C832 + C90623 * C1094) * C7401) +
              C1117 * C90503) *
                 C55625 +
             (C34002 - (C34003 + C34004) + C34005) * C55626) *
                C39125 +
            ((C1118 * C7402 - (C1117 * C7396 + C1116 * C7401) +
              C1119 * C90503) *
                 C55625 +
             (C65366 - (C65367 + C65368) + C65369) * C55626) *
                C39126) *
               C9074 +
           (((C34004 + C34003 - C34002 - C34005) * C55625 +
             (C34009 + C34008 - C34014 - C34015) * C55626) *
                C39125 +
            ((C65368 + C65367 - C65366 - C65369) * C55625 +
             (C34012 * C7401 + C34013 * C7396 -
              (C307 * C5469 + C90623 * C5715) * C7402 -
              (C307 * C5472 + C90623 * C5718) * C90503) *
                 C55626) *
                C39126) *
               C90579) *
              C90555)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C90623 * C308) * C923 +
              (C307 * C182 + C90623 * C394) * C90752 -
              (C307 * C832 + C90623 * C1094) * C924 -
              (C307 * C927 + C90623 * C1195) * C90555) *
                 C55625 +
             (C31394 + C31395 - C31396 - C31397) * C55626) *
                C39125 +
            ((C1201 + C1202 - C1203 - C1220) * C55625 + C67604 * C55626) *
                C39126) *
               C7396 +
           (((C1203 - (C1202 + C1201) + C1220) * C55625 + C67605 * C55626) *
                C39125 +
            ((C1208 - (C1207 + C1206) + C1222) * C55625 +
             (C10196 - (C10197 + C10198) + C10199) * C55626) *
                C39126) *
               C90503) *
              C9074 +
          ((((C31396 - (C31395 + C31394) + C31397) * C55625 +
             (C31400 - (C31399 + C31398) + C31401) * C55626) *
                C39125 +
            (C67605 * C55625 + (C35718 - (C35719 + C35720) + C35721) * C55626) *
                C39126) *
               C7396 +
           ((C67604 * C55625 + (C35720 + C35719 - C35718 - C35721) * C55626) *
                C39125 +
            ((C10198 + C10197 - C10196 - C10199) * C55625 +
             (C4932 * C923 + C5019 * C90752 -
              (C307 * C5469 + C90623 * C5715) * C924 -
              (C307 * C5555 + C90623 * C5797) * C90555) *
                 C55626) *
                C39126) *
               C90503) *
              C90579)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[55] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((((C307 * C107 + C90623 * C308) * C9224 +
                        (C307 * C245 + C90623 * C474) * C9074 - C27910 * C9225 -
                        C28080 * C90579) *
                           C55625 +
                       (C27910 * C9224 + C28080 * C9074 - C27912 * C9225 -
                        C28081 * C90579) *
                           C55626) *
                          C39125 +
                      ((C9449 + C9450 - C9451 - C9452) * C55625 +
                       (C66648 + C66649 - C66650 - C66651) * C55626) *
                          C39126) *
                         C90752 +
                     (((C29752 * C9225 -
                        ((C307 * C1011 + C90623 * C1301) * C9074 +
                         (C307 * C832 + C90623 * C1094) * C9224) +
                        C29948 * C90579) *
                           C55625 +
                       (C29754 * C9225 - (C29948 * C9074 + C29752 * C9224) +
                        C29949 * C90579) *
                           C55626) *
                          C39125 +
                      ((C10298 - (C10299 + C10300) + C10301) * C55625 +
                       (C67736 - (C67737 + C67738) + C67739) * C55626) *
                          C39126) *
                         C90555) *
                        C7396 +
                    ((((C9451 - (C9450 + C9449) + C9452) * C55625 +
                       (C66650 - (C66649 + C66648) + C66651) * C55626) *
                          C39125 +
                      ((C9455 - (C9454 + C9453) + C9456) * C55625 +
                       (C66652 - (C66653 + C66654) + C66655) * C55626) *
                          C39126) *
                         C90752 +
                     (((C10300 + C10299 - C10298 - C10301) * C55625 +
                       (C67738 + C67737 - C67736 - C67739) * C55626) *
                          C39125 +
                      ((C10304 + C10303 - C10302 - C10305) * C55625 +
                       (C8435 * C9224 + C8660 * C9074 -
                        (C307 * C5469 + C90623 * C5715) * C9225 -
                        (C307 * C5635 + C90623 * C5874) * C90579) *
                           C55626) *
                          C39126) *
                         C90555) *
                        C90503)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                 C7401 +
             (C56029 * C116 + C55625 * C561 + C56030 * C1707 + C55626 * C2268) *
                 C7396 -
             (C56056 + C56057) * C7402 - (C56058 + C56059) * C90503) *
                C39125 +
            ((C56057 + C56056) * C7401 + (C56059 + C56058) * C7396 -
             (C56061 + C56060) * C7402 - (C56063 + C56062) * C90503) *
                C39126) *
               C90623 * C9074 +
           (((C57961 + C57962) * C7402 -
             ((C56030 * C4663 + C55626 * C5195 + C56029 * C1707 +
               C55625 * C2268) *
                  C7396 +
              (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
               C55625 * C2264) *
                  C7401) +
             (C57963 + C57964) * C90503) *
                C39125 +
            ((C57966 + C57965) * C7402 -
             ((C57964 + C57963) * C7396 + (C57962 + C57961) * C7401) +
             (C57968 + C57967) * C90503) *
                C39126) *
               C90623 * C90579) *
              C90752 +
          ((((C56942 + C56943) * C7402 -
             ((C56030 * C3900 + C55626 * C4413 + C56029 * C839 +
               C55625 * C1400) *
                  C7396 +
              (C56030 * C3891 + C55626 * C4407 + C56029 * C832 +
               C55625 * C1396) *
                  C7401) +
             (C56944 + C56945) * C90503) *
                C39125 +
            ((C56947 + C56946) * C7402 -
             ((C56945 + C56944) * C7396 + (C56943 + C56942) * C7401) +
             (C56949 + C56948) * C90503) *
                C39126) *
               C90623 * C9074 +
           (((C56029 * C3891 + C55625 * C4407 + C56030 * C5471 +
              C55626 * C5951) *
                 C7401 +
             (C56029 * C3900 + C55625 * C4413 + C56030 * C5474 +
              C55626 * C5954) *
                 C7396 -
             (C65778 + C65779) * C7402 - (C65780 + C65781) * C90503) *
                C39125 +
            ((C65779 + C65778) * C7401 + (C65781 + C65780) * C7396 -
             (C56030 * C5469 + C55626 * C5949 + C56029 * C3893 +
              C55625 * C4409) *
                 C7402 -
             (C56030 * C5472 + C55626 * C5952 + C56029 * C3902 +
              C55625 * C4415) *
                 C90503) *
                C39126) *
               C90623 * C90579) *
              C90555)) /
        (p * q * std::sqrt(p + q));
    d2eezy[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                 C923 +
             (C56029 * C182 + C55625 * C641 + C56030 * C1794 + C55626 * C2368) *
                 C90752 -
             (C56030 * C3891 + C55626 * C4407 + C56029 * C832 +
              C55625 * C1396) *
                 C924 -
             (C56030 * C3989 + C55626 * C4493 + C56029 * C927 +
              C55625 * C1497) *
                 C90555) *
                C39125 +
            ((C56057 + C56056) * C923 + (C56146 + C56147) * C90752 -
             (C56943 + C56942) * C924 - (C57056 + C57057) * C90555) *
                C39126) *
               C90623 * C7396 +
           (((C56942 + C56943) * C924 -
             ((C56147 + C56146) * C90752 + (C56056 + C56057) * C923) +
             (C57057 + C57056) * C90555) *
                C39125 +
            ((C56947 + C56946) * C924 -
             ((C56148 + C56149) * C90752 + (C56061 + C56060) * C923) +
             (C57058 + C57059) * C90555) *
                C39126) *
               C90623 * C90503) *
              C9074 +
          ((((C56029 * C3891 + C55625 * C4407 + C56030 * C5471 +
              C55626 * C5951) *
                 C924 -
             ((C56030 * C4746 + C55626 * C5285 + C56029 * C1794 +
               C55625 * C2368) *
                  C90752 +
              (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
               C55625 * C2264) *
                  C923) +
             (C56029 * C3989 + C55625 * C4493 + C56030 * C5557 +
              C55626 * C6029) *
                 C90555) *
                C39125 +
            ((C65779 + C65778) * C924 -
             ((C58076 + C58075) * C90752 + (C57962 + C57961) * C923) +
             (C65916 + C65917) * C90555) *
                C39126) *
               C90623 * C7396 +
           (((C57961 + C57962) * C923 + (C58075 + C58076) * C90752 -
             (C65778 + C65779) * C924 - (C65917 + C65916) * C90555) *
                C39125 +
            ((C57966 + C57965) * C923 + (C58077 + C58078) * C90752 -
             (C56030 * C5469 + C55626 * C5949 + C56029 * C3893 +
              C55625 * C4409) *
                 C924 -
             (C56030 * C5555 + C55626 * C6031 + C56029 * C3991 +
              C55625 * C4497) *
                 C90555) *
                C39126) *
               C90623 * C90503) *
              C90579)) /
        (p * q * std::sqrt(p + q));
    d2eezz[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                 C9224 +
             (C56029 * C245 + C55625 * C719 + C56030 * C1879 + C55626 * C2460) *
                 C9074 -
             (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
              C55625 * C2264) *
                 C9225 -
             (C56030 * C4831 + C55626 * C5373 + C56029 * C1879 +
              C55625 * C2460) *
                 C90579) *
                C39125 +
            ((C56057 + C56056) * C9224 + (C56230 + C56231) * C9074 -
             (C57962 + C57961) * C9225 - (C58185 + C58186) * C90579) *
                C39126) *
               C90623 * C90752 +
           (((C56029 * C3891 + C55625 * C4407 + C56030 * C5471 +
              C55626 * C5951) *
                 C9225 -
             ((C56030 * C4075 + C55626 * C4573 + C56029 * C1011 +
               C55625 * C1602) *
                  C9074 +
              (C56030 * C3891 + C55626 * C4407 + C56029 * C832 +
               C55625 * C1396) *
                  C9224) +
             (C56029 * C4075 + C55625 * C4573 + C56030 * C5637 +
              C55626 * C6106) *
                 C90579) *
                C39125 +
            ((C65779 + C65778) * C9225 -
             ((C57166 + C57167) * C9074 + (C56943 + C56942) * C9224) +
             (C66052 + C66053) * C90579) *
                C39126) *
               C90623 * C90555) *
              C7396 +
          ((((C57961 + C57962) * C9225 -
             ((C56231 + C56230) * C9074 + (C56056 + C56057) * C9224) +
             (C58186 + C58185) * C90579) *
                C39125 +
            ((C57966 + C57965) * C9225 -
             ((C56232 + C56233) * C9074 + (C56061 + C56060) * C9224) +
             (C58187 + C58188) * C90579) *
                C39126) *
               C90623 * C90752 +
           (((C56942 + C56943) * C9224 + (C57167 + C57166) * C9074 -
             (C65778 + C65779) * C9225 - (C66053 + C66052) * C90579) *
                C39125 +
            ((C56947 + C56946) * C9224 + (C57168 + C57169) * C9074 -
             (C56030 * C5469 + C55626 * C5949 + C56029 * C3893 +
              C55625 * C4409) *
                 C9225 -
             (C56030 * C5635 + C55626 * C6108 + C56029 * C4077 +
              C55625 * C4575) *
                 C90579) *
                C39126) *
               C90623 * C90555) *
              C90503)) /
        (p * q * std::sqrt(p + q));
    d2eexx[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C7401 +
            (C39129 * C116 + C39125 * C125 + C39130 * C117 + C39126 * C126) *
                C7396 -
            (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                C7402 -
            (C39130 * C118 + C39126 * C127 + C39129 * C117 + C39125 * C126) *
                C90503) *
               C90623 * C55625 +
           ((C57292 + C57293) * C7401 + (C57294 + C57295) * C7396 -
            (C57296 + C57297) * C7402 - (C57298 + C57299) * C90503) *
               C90623 * C55626) *
              C90782 +
          (((C57297 + C57296) * C7402 -
            ((C57295 + C57294) * C7396 + (C57293 + C57292) * C7401) +
            (C57299 + C57298) * C90503) *
               C90623 * C55625 +
           ((C60711 + C60712) * C7402 -
            ((C60713 + C60714) * C7396 + (C60715 + C60716) * C7401) +
            (C60717 + C60718) * C90503) *
               C90623 * C55626) *
              C90777 +
          (((C60716 + C60715) * C7401 + (C60714 + C60713) * C7396 -
            (C60712 + C60711) * C7402 - (C60718 + C60717) * C90503) *
               C90623 * C55625 +
           ((C62526 + C62527) * C7401 + (C62528 + C62529) * C7396 -
            (C39130 * C6163 + C39126 * C6169 + C39129 * C6164 +
             C39125 * C6170) *
                C7402 -
            (C39130 * C6166 + C39126 * C6172 + C39129 * C6167 +
             C39125 * C6173) *
                C90503) *
               C90623 * C55626) *
              C10691) *
         C90541) /
        (p * q * std::sqrt(p + q));
    d2eexy[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                 C181 +
             (C39129 * C182 + C39125 * C188 + C39130 * C183 + C39126 * C189) *
                 C90541) *
                C90623 * C55625 +
            ((C57292 + C57293) * C181 + (C57414 + C57415) * C90541) * C90623 *
                C55626) *
               C7396 -
           (((C57416 + C57417) * C90541 + (C57296 + C57297) * C181) * C90623 *
                C55626 +
            ((C39130 * C184 + C39126 * C190 + C39129 * C183 + C39125 * C189) *
                 C90541 +
             (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                 C181) *
                C90623 * C55625) *
               C90503) *
              C90782 +
          ((((C57297 + C57296) * C181 + (C57417 + C57416) * C90541) * C90623 *
                C55625 +
            ((C60711 + C60712) * C181 + (C60825 + C60826) * C90541) * C90623 *
                C55626) *
               C90503 -
           (((C60827 + C60828) * C90541 + (C60715 + C60716) * C181) * C90623 *
                C55626 +
            ((C57415 + C57414) * C90541 + (C57293 + C57292) * C181) * C90623 *
                C55625) *
               C7396) *
              C90777 +
          ((((C60716 + C60715) * C181 + (C60828 + C60827) * C90541) * C90623 *
                C55625 +
            ((C62526 + C62527) * C181 + (C62600 + C62601) * C90541) * C90623 *
                C55626) *
               C7396 -
           (((C39130 * C6225 + C39126 * C6228 + C39129 * C6226 +
              C39125 * C6229) *
                 C90541 +
             (C39130 * C6163 + C39126 * C6169 + C39129 * C6164 +
              C39125 * C6170) *
                 C181) *
                C90623 * C55626 +
            ((C60826 + C60825) * C90541 + (C60712 + C60711) * C181) * C90623 *
                C55625) *
               C90503) *
              C10691)) /
        (p * q * std::sqrt(p + q));
    d2eexz[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C10840 +
            (C39129 * C245 + C39125 * C251 + C39130 * C246 + C39126 * C252) *
                C90782 -
            (C57293 + C57292) * C10841 - (C57530 + C57531) * C90777 +
            (C60716 + C60715) * C10842 + (C60935 + C60936) * C10691) *
               C90623 * C55625 +
           ((C57292 + C57293) * C10840 + (C57531 + C57530) * C90782 -
            (C60715 + C60716) * C10841 - (C60936 + C60935) * C90777 +
            (C62526 + C62527) * C10842 + (C62673 + C62672) * C10691) *
               C90623 * C55626) *
              C90541 * C7396 +
          (((C57297 + C57296) * C10841 -
            ((C39130 * C247 + C39126 * C253 + C39129 * C246 + C39125 * C252) *
                 C90782 +
             (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                 C10840) +
            (C57532 + C57533) * C90777 - (C60712 + C60711) * C10842 -
            (C60937 + C60938) * C10691) *
               C90623 * C55625 +
           ((C60711 + C60712) * C10841 -
            ((C57533 + C57532) * C90782 + (C57296 + C57297) * C10840) +
            (C60938 + C60937) * C90777 -
            (C39130 * C6163 + C39126 * C6169 + C39129 * C6164 +
             C39125 * C6170) *
                C10842 -
            (C39130 * C6285 + C39126 * C6288 + C39129 * C6286 +
             C39125 * C6289) *
                C10691) *
               C90623 * C55626) *
              C90541 * C90503)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C7401 +
             (C307 * C116 + C90623 * C314) * C7396 - C337 * C7402 -
             C338 * C90503) *
                C55625 +
            (C33994 + C33995 - C33996 - C33997) * C55626) *
               C39125 +
           ((C337 * C7401 + C338 * C7396 - C339 * C7402 - C340 * C90503) *
                C55625 +
            (C65362 + C65363 - C65364 - C65365) * C55626) *
               C39126) *
              C90782 +
          (((C33996 - (C33995 + C33994) + C33997) * C55625 +
            (C34000 - (C33999 + C33998) + C34001) * C55626) *
               C39125 +
           ((C65364 - (C65363 + C65362) + C65365) * C55625 +
            (C68522 - (C68523 + C68524) + C68525) * C55626) *
               C39126) *
              C90777 +
          ((C36424 * C55625 + (C36421 + C36420 - C36419 - C36422) * C55626) *
               C39125 +
           ((C68524 + C68523 - C68522 - C68525) * C55625 +
            (C30555 * C7401 + C30558 * C7396 -
             (C307 * C6163 + C90623 * C6341) * C7402 -
             (C307 * C6166 + C90623 * C6344) * C90503) *
                C55626) *
               C39126) *
              C10691) *
         C90541) /
        (p * q * std::sqrt(p + q));
    d2eeyy[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C90623 * C308) * C181 +
              (C307 * C182 + C90623 * C394) * C90541) *
                 C55625 +
             (C27992 + C28000) * C55626) *
                C39125 +
            ((C401 + C417) * C55625 + C57738 * C55626) * C39126) *
               C7396 -
           ((C2084 * C55626 + (C418 + C404) * C55625) * C39126 +
            (C57739 * C55626 + (C417 + C401) * C55625) * C39125) *
               C90503) *
              C90782 +
          (((C57738 * C55625 + C61143 * C55626) * C39125 +
            (C57740 * C55625 + (C5015 + C5021) * C55626) * C39126) *
               C90503 -
           ((C30642 * C55626 + C57739 * C55625) * C39126 +
            ((C28001 + C27995) * C55626 + (C28000 + C27992) * C55625) *
                C39125) *
               C7396) *
              C90777 +
          (((C30641 * C55625 + (C30648 + C30652) * C55626) * C39125 +
            (C61143 * C55625 + (C30643 + C30651) * C55626) * C39126) *
               C7396 -
           ((((C307 * C6225 + C90623 * C6397) * C90541 +
              (C307 * C6163 + C90623 * C6341) * C181) *
                 C55626 +
             (C5021 + C5015) * C55625) *
                C39126 +
            ((C30651 + C30643) * C55626 + C30642 * C55625) * C39125) *
               C90503) *
              C10691)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C10840 +
             (C307 * C245 + C90623 * C474) * C90782 - C27910 * C10841 -
             C28080 * C90777 + C27912 * C10842 + C28081 * C10691) *
                C55625 +
            (C27910 * C10840 + C28080 * C90782 - C27912 * C10841 -
             C28081 * C90777 + C30557 * C10842 + C30733 * C10691) *
                C55626) *
               C39125 +
           ((C11066 + C11067 - C11068 - C11069 + C11070 + C11071) * C55625 +
            (C68722 + C68723 - C68724 - C68725 + C68726 + C68727) * C55626) *
               C39126) *
              C90541 * C7396 +
          (((C11068 - (C11067 + C11066) + C11069 - C11070 - C11071) * C55625 +
            (C68724 - (C68723 + C68722) + C68725 - C68726 - C68727) * C55626) *
               C39125 +
           ((C11074 - (C11073 + C11072) + C11075 - C11076 - C11077) * C55625 +
            (C4932 * C10841 - (C2182 * C90782 + C1986 * C10840) +
             C5115 * C90777 - (C307 * C6163 + C90623 * C6341) * C10842 -
             (C307 * C6285 + C90623 * C6452) * C10691) *
                C55626) *
               C39126) *
              C90541 * C90503)) /
        (p * q * std::sqrt(p + q));
    d2eezx[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C7401 +
            (C56029 * C116 + C55625 * C561 + C56030 * C1707 + C55626 * C2268) *
                C7396 -
            (C56056 + C56057) * C7402 - (C56058 + C56059) * C90503) *
               C39125 +
           ((C56057 + C56056) * C7401 + (C56059 + C56058) * C7396 -
            (C56061 + C56060) * C7402 - (C56063 + C56062) * C90503) *
               C39126) *
              C90623 * C90782 +
          (((C57961 + C57962) * C7402 -
            ((C56030 * C4663 + C55626 * C5195 + C56029 * C1707 +
              C55625 * C2268) *
                 C7396 +
             (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
              C55625 * C2264) *
                 C7401) +
            (C57963 + C57964) * C90503) *
               C39125 +
           ((C57966 + C57965) * C7402 -
            ((C57964 + C57963) * C7396 + (C57962 + C57961) * C7401) +
            (C57968 + C57967) * C90503) *
               C39126) *
              C90623 * C90777 +
          (((C56029 * C4656 + C55625 * C5191 + C56030 * C6165 +
             C55626 * C6505) *
                C7401 +
            (C56029 * C4663 + C55625 * C5195 + C56030 * C6168 +
             C55626 * C6508) *
                C7396 -
            (C61354 + C61355) * C7402 - (C61356 + C61357) * C90503) *
               C39125 +
           ((C61355 + C61354) * C7401 + (C61357 + C61356) * C7396 -
            (C56030 * C6163 + C55626 * C6503 + C56029 * C4658 +
             C55625 * C5193) *
                C7402 -
            (C56030 * C6166 + C55626 * C6506 + C56029 * C4665 +
             C55625 * C5197) *
                C90503) *
               C39126) *
              C90623 * C10691) *
         C90541) /
        (p * q * std::sqrt(p + q));
    d2eezy[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                 C181 +
             (C56029 * C182 + C55625 * C641 + C56030 * C1794 + C55626 * C2368) *
                 C90541) *
                C39125 +
            ((C56057 + C56056) * C181 + (C56146 + C56147) * C90541) * C39126) *
               C90623 * C7396 -
           (((C56148 + C56149) * C90541 + (C56061 + C56060) * C181) * C39126 +
            ((C56147 + C56146) * C90541 + (C56056 + C56057) * C181) * C39125) *
               C90623 * C90503) *
              C90782 +
          ((((C57961 + C57962) * C181 + (C58075 + C58076) * C90541) * C39125 +
            ((C57966 + C57965) * C181 + (C58077 + C58078) * C90541) * C39126) *
               C90623 * C90503 -
           (((C58076 + C58075) * C90541 + (C57962 + C57961) * C181) * C39126 +
            ((C56030 * C4746 + C55626 * C5285 + C56029 * C1794 +
              C55625 * C2368) *
                 C90541 +
             (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
              C55625 * C2264) *
                 C181) *
                C39125) *
               C90623 * C7396) *
              C90777 +
          ((((C56029 * C4656 + C55625 * C5191 + C56030 * C6165 +
              C55626 * C6505) *
                 C181 +
             (C56029 * C4746 + C55625 * C5285 + C56030 * C6227 +
              C55626 * C6561) *
                 C90541) *
                C39125 +
            ((C61355 + C61354) * C181 + (C61460 + C61461) * C90541) * C39126) *
               C90623 * C7396 -
           (((C56030 * C6225 + C55626 * C6559 + C56029 * C4748 +
              C55625 * C5287) *
                 C90541 +
             (C56030 * C6163 + C55626 * C6503 + C56029 * C4658 +
              C55625 * C5193) *
                 C181) *
                C39126 +
            ((C61461 + C61460) * C90541 + (C61354 + C61355) * C181) * C39125) *
               C90623 * C90503) *
              C10691)) /
        (p * q * std::sqrt(p + q));
    d2eezz[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C10840 +
            (C56029 * C245 + C55625 * C719 + C56030 * C1879 + C55626 * C2460) *
                C90782 -
            (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
             C55625 * C2264) *
                C10841 -
            (C56030 * C4831 + C55626 * C5373 + C56029 * C1879 +
             C55625 * C2460) *
                C90777 +
            (C56029 * C4656 + C55625 * C5191 + C56030 * C6165 +
             C55626 * C6505) *
                C10842 +
            (C56029 * C4831 + C55625 * C5373 + C56030 * C6287 +
             C55626 * C6612) *
                C10691) *
               C39125 +
           ((C56057 + C56056) * C10840 + (C56230 + C56231) * C90782 -
            (C57962 + C57961) * C10841 - (C58185 + C58186) * C90777 +
            (C61355 + C61354) * C10842 + (C61564 + C61565) * C10691) *
               C39126) *
              C90623 * C90541 * C7396 +
          (((C57961 + C57962) * C10841 -
            ((C56231 + C56230) * C90782 + (C56056 + C56057) * C10840) +
            (C58186 + C58185) * C90777 - (C61354 + C61355) * C10842 -
            (C61565 + C61564) * C10691) *
               C39125 +
           ((C57966 + C57965) * C10841 -
            ((C56232 + C56233) * C90782 + (C56061 + C56060) * C10840) +
            (C58187 + C58188) * C90777 -
            (C56030 * C6163 + C55626 * C6503 + C56029 * C4658 +
             C55625 * C5193) *
                C10842 -
            (C56030 * C6285 + C55626 * C6614 + C56029 * C4833 +
             C55625 * C5375) *
                C10691) *
               C39126) *
              C90623 * C90541 * C90503)) /
        (p * q * std::sqrt(p + q));
    d2eexx[57] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
               C103 +
           (C39129 * C116 + C39125 * C125 + C39130 * C117 + C39126 * C126) *
               C92 -
           (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
               C104 -
           (C39130 * C118 + C39126 * C127 + C39129 * C117 + C39125 * C126) *
               C93 +
           (C39129 * C109 + C39125 * C115 + C39130 * C110 + C39126 * C119) *
               C105 +
           (C39129 * C118 + C39125 * C127 + C39130 * C120 + C39126 * C128) *
               C94 -
           (C39130 * C111 + C39126 * C121 + C39129 * C110 + C39125 * C119) *
               C106 -
           (C39130 * C122 + C39126 * C129 + C39129 * C120 + C39125 * C128) *
               C95) *
              C90623 * C55625 +
          ((C39129 * C1700 + C39125 * C1708 + C39130 * C1697 + C39126 * C1702) *
               C103 +
           (C39129 * C1707 + C39125 * C1714 + C39130 * C1706 + C39126 * C1713) *
               C92 -
           (C39130 * C1698 + C39126 * C1703 + C39129 * C1697 + C39125 * C1702) *
               C104 -
           (C39130 * C1705 + C39126 * C1712 + C39129 * C1706 + C39125 * C1713) *
               C93 +
           (C39129 * C1698 + C39125 * C1703 + C39130 * C1699 + C39126 * C1704) *
               C105 +
           (C39129 * C1705 + C39125 * C1712 + C39130 * C1709 + C39126 * C1715) *
               C94 -
           (C39130 * C1701 + C39126 * C1710 + C39129 * C1699 + C39125 * C1704) *
               C106 -
           (C39130 * C1711 + C39126 * C1716 + C39129 * C1709 + C39125 * C1715) *
               C95) *
              C90623 * C55626) *
         C90567 * C90541) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C88316 +
            (C39129 * C116 + C39125 * C125 + C39130 * C117 + C39126 * C126) *
                C90744 -
            (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                C88309 -
            (C39130 * C118 + C39126 * C127 + C39129 * C117 + C39125 * C126) *
                C90503) *
               C90623 * C55625 +
           ((C57292 + C57293) * C88316 + (C57294 + C57295) * C90744 -
            (C57296 + C57297) * C88309 - (C57298 + C57299) * C90503) *
               C90623 * C55626) *
              C90567 * C2565 +
          (((C39867 + C39866) * C88309 -
            ((C39865 + C39864) * C90744 + (C39863 + C39862) * C88316) +
            (C39869 + C39868) * C90503) *
               C90623 * C55625 +
           ((C48578 + C48579) * C88309 -
            ((C43400 + C43401) * C90744 + (C43402 + C43403) * C88316) +
            (C48580 + C48581) * C90503) *
               C90623 * C55626) *
              C90567 * C2566 +
          (((C41812 + C41811) * C88316 + (C41810 + C41809) * C90744 -
            (C41808 + C41807) * C88309 - (C41814 + C41813) * C90503) *
               C90623 * C55625 +
           ((C43404 + C43405) * C88316 + (C43406 + C43407) * C90744 -
            (C39130 * C3894 + C39126 * C3906 + C39129 * C3895 +
             C39125 * C3907) *
                C88309 -
            (C39130 * C3903 + C39126 * C3912 + C39129 * C3904 +
             C39125 * C3913) *
                C90503) *
               C90623 * C55626) *
              C90567 * C2567)) /
            (p * q * std::sqrt(p + q));
    d2eexy[57] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C181 +
            (C39129 * C182 + C39125 * C188 + C39130 * C183 + C39126 * C189) *
                C90541) *
               C90623 * C55625 +
           ((C39129 * C1700 + C39125 * C1708 + C39130 * C1697 +
             C39126 * C1702) *
                C181 +
            (C39129 * C1794 + C39125 * C1799 + C39130 * C1791 +
             C39126 * C1796) *
                C90541) *
               C90623 * C55626) *
              C92 -
          (((C39130 * C1792 + C39126 * C1797 + C39129 * C1791 +
             C39125 * C1796) *
                C90541 +
            (C39130 * C1698 + C39126 * C1703 + C39129 * C1697 +
             C39125 * C1702) *
                C181) *
               C90623 * C55626 +
           ((C39130 * C184 + C39126 * C190 + C39129 * C183 + C39125 * C189) *
                C90541 +
            (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                C181) *
               C90623 * C55625) *
              C93 +
          (((C39129 * C109 + C39125 * C115 + C39130 * C110 + C39126 * C119) *
                C181 +
            (C39129 * C184 + C39125 * C190 + C39130 * C185 + C39126 * C191) *
                C90541) *
               C90623 * C55625 +
           ((C39129 * C1698 + C39125 * C1703 + C39130 * C1699 +
             C39126 * C1704) *
                C181 +
            (C39129 * C1792 + C39125 * C1797 + C39130 * C1793 +
             C39126 * C1798) *
                C90541) *
               C90623 * C55626) *
              C94 -
          (((C39130 * C1795 + C39126 * C1800 + C39129 * C1793 +
             C39125 * C1798) *
                C90541 +
            (C39130 * C1701 + C39126 * C1710 + C39129 * C1699 +
             C39125 * C1704) *
                C181) *
               C90623 * C55626 +
           ((C39130 * C186 + C39126 * C192 + C39129 * C185 + C39125 * C191) *
                C90541 +
            (C39130 * C111 + C39126 * C121 + C39129 * C110 + C39125 * C119) *
                C181) *
               C90623 * C55625) *
              C95) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C2660 +
            (C39129 * C182 + C39125 * C188 + C39130 * C183 + C39126 * C189) *
                C2565 -
            (C39863 + C39862) * C2661 - (C39984 + C39985) * C2566 +
            (C41812 + C41811) * C2662 + (C41921 + C41922) * C2567) *
               C90623 * C55625 +
           ((C57292 + C57293) * C2660 + (C57414 + C57415) * C2565 -
            (C43402 + C43403) * C2661 - (C43515 + C43514) * C2566 +
            (C43404 + C43405) * C2662 + (C43517 + C43516) * C2567) *
               C90623 * C55626) *
              C90744 +
          (((C39867 + C39866) * C2661 -
            ((C39130 * C184 + C39126 * C190 + C39129 * C183 + C39125 * C189) *
                 C2565 +
             (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                 C2660) +
            (C39986 + C39987) * C2566 - (C41808 + C41807) * C2662 -
            (C41923 + C41924) * C2567) *
               C90623 * C55625 +
           ((C48578 + C48579) * C2661 -
            ((C57416 + C57417) * C2565 + (C57296 + C57297) * C2660) +
            (C48717 + C48716) * C2566 -
            (C39130 * C3894 + C39126 * C3906 + C39129 * C3895 +
             C39125 * C3907) *
                C2662 -
            (C39130 * C3992 + C39126 * C3998 + C39129 * C3993 +
             C39125 * C3999) *
                C2567) *
               C90623 * C55626) *
              C90503) *
         C90567) /
            (p * q * std::sqrt(p + q));
    d2eexz[57] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C244 +
            (C39129 * C245 + C39125 * C251 + C39130 * C246 + C39126 * C252) *
                C90567) *
               C90623 * C55625 +
           ((C39129 * C1700 + C39125 * C1708 + C39130 * C1697 +
             C39126 * C1702) *
                C244 +
            (C39129 * C1879 + C39125 * C1884 + C39130 * C1878 +
             C39126 * C1883) *
                C90567) *
               C90623 * C55626) *
              C90541 * C92 -
          (((C39130 * C1877 + C39126 * C1882 + C39129 * C1878 +
             C39125 * C1883) *
                C90567 +
            (C39130 * C1698 + C39126 * C1703 + C39129 * C1697 +
             C39125 * C1702) *
                C244) *
               C90623 * C55626 +
           ((C39130 * C247 + C39126 * C253 + C39129 * C246 + C39125 * C252) *
                C90567 +
            (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                C244) *
               C90623 * C55625) *
              C90541 * C93 +
          (((C39129 * C109 + C39125 * C115 + C39130 * C110 + C39126 * C119) *
                C244 +
            (C39129 * C247 + C39125 * C253 + C39130 * C248 + C39126 * C254) *
                C90567) *
               C90623 * C55625 +
           ((C39129 * C1698 + C39125 * C1703 + C39130 * C1699 +
             C39126 * C1704) *
                C244 +
            (C39129 * C1877 + C39125 * C1882 + C39130 * C1880 +
             C39126 * C1885) *
                C90567) *
               C90623 * C55626) *
              C90541 * C94 -
          (((C39130 * C1881 + C39126 * C1886 + C39129 * C1880 +
             C39125 * C1885) *
                C90567 +
            (C39130 * C1701 + C39126 * C1710 + C39129 * C1699 +
             C39125 * C1704) *
                C244) *
               C90623 * C55626 +
           ((C39130 * C249 + C39126 * C255 + C39129 * C248 + C39125 * C254) *
                C90567 +
            (C39130 * C111 + C39126 * C121 + C39129 * C110 + C39125 * C119) *
                C244) *
               C90623 * C55625) *
              C90541 * C95)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                 C244 +
             (C39129 * C245 + C39125 * C251 + C39130 * C246 + C39126 * C252) *
                 C90567) *
                C90623 * C55625 +
            ((C57292 + C57293) * C244 + (C57531 + C57530) * C90567) * C90623 *
                C55626) *
               C2565 -
           (((C43624 + C43625) * C90567 + (C43402 + C43403) * C244) * C90623 *
                C55626 +
            ((C40101 + C40100) * C90567 + (C39863 + C39862) * C244) * C90623 *
                C55625) *
               C2566 +
           (((C41812 + C41811) * C244 + (C42032 + C42031) * C90567) * C90623 *
                C55625 +
            ((C43404 + C43405) * C244 + (C43626 + C43627) * C90567) * C90623 *
                C55626) *
               C2567) *
              C90744 +
          ((((C39867 + C39866) * C244 + (C40102 + C40103) * C90567) * C90623 *
                C55625 +
            ((C48578 + C48579) * C244 + (C48852 + C48853) * C90567) * C90623 *
                C55626) *
               C2566 -
           (((C57533 + C57532) * C90567 + (C57296 + C57297) * C244) * C90623 *
                C55626 +
            ((C39130 * C247 + C39126 * C253 + C39129 * C246 + C39125 * C252) *
                 C90567 +
             (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                 C244) *
                C90623 * C55625) *
               C2565 -
           (((C39130 * C4078 + C39126 * C4084 + C39129 * C4079 +
              C39125 * C4085) *
                 C90567 +
             (C39130 * C3894 + C39126 * C3906 + C39129 * C3895 +
              C39125 * C3907) *
                 C244) *
                C90623 * C55626 +
            ((C42034 + C42033) * C90567 + (C41808 + C41807) * C244) * C90623 *
                C55625) *
               C2567) *
              C90503)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[57] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C103 +
            (C307 * C116 + C90623 * C314) * C92 - C337 * C104 - C338 * C93 +
            C339 * C105 + C340 * C94 - C341 * C106 - C342 * C95) *
               C55625 +
           (C27910 * C103 + C27911 * C92 - C1984 * C104 - C1985 * C93 +
            C1986 * C105 + C1987 * C94 - C1988 * C106 - C1989 * C95) *
               C55626) *
              C39125 +
          ((C337 * C103 + C338 * C92 - C339 * C104 - C340 * C93 + C341 * C105 +
            C342 * C94 - C343 * C106 - C344 * C95) *
               C55625 +
           (C1984 * C103 + C1985 * C92 - C1986 * C104 - C1987 * C93 +
            C1988 * C105 + C1989 * C94 -
            (C307 * C1701 + C90623 * C1965) * C106 -
            (C307 * C1711 + C90623 * C1970) * C95) *
               C55626) *
              C39126) *
         C90567 * C90541) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C88316 +
             (C307 * C116 + C90623 * C314) * C90744 - C337 * C88309 -
             C338 * C90503) *
                C55625 +
            (C30538 + C30539 - C30540 - C30541) * C55626) *
               C39125 +
           ((C337 * C88316 + C338 * C90744 - C339 * C88309 - C340 * C90503) *
                C55625 +
            (C1984 * C88316 + C1985 * C90744 - C1986 * C88309 -
             C1987 * C90503) *
                C55626) *
               C39126) *
              C90567 * C2565 +
          (((C1116 * C88309 -
             ((C307 * C839 + C90623 * C1098) * C90744 +
              (C307 * C832 + C90623 * C1094) * C88316) +
             C1117 * C90503) *
                C55625 +
            (C37191 - (C37192 + C37193) + C37194) * C55626) *
               C39125 +
           ((C1118 * C88309 - (C1117 * C90744 + C1116 * C88316) +
             C1119 * C90503) *
                C55625 +
            (C8435 * C88309 - (C8434 * C90744 + C8433 * C88316) +
             C8436 * C90503) *
                C55626) *
               C39126) *
              C90567 * C2566 +
          ((((C307 * C2570 + C90623 * C2827) * C88316 +
             (C307 * C2577 + C90623 * C2831) * C90744 - C2844 * C88309 -
             C2845 * C90503) *
                C55625 +
            (C29756 * C88316 + C29757 * C90744 - C58585 * C88309 -
             C58586 * C90503) *
                C55626) *
               C39125 +
           ((C2844 * C88316 + C2845 * C90744 - C2846 * C88309 -
             C2847 * C90503) *
                C55625 +
            (C58585 * C88316 + C58586 * C90744 -
             (C307 * C3894 + C90623 * C4164) * C88309 -
             (C307 * C3903 + C90623 * C4170) * C90503) *
                C55626) *
               C39126) *
              C90567 * C2567)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[57] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C181 +
             (C307 * C182 + C90623 * C394) * C90541) *
                C55625 +
            (C27992 + C28000) * C55626) *
               C39125 +
           ((C401 + C417) * C55625 + (C2069 + C2081) * C55626) * C39126) *
              C92 -
          ((C2084 * C55626 + (C418 + C404) * C55625) * C39126 +
           ((C2081 + C2069) * C55626 + (C417 + C401) * C55625) * C39125) *
              C93 +
          ((C421 * C55625 + (C2072 + C2082) * C55626) * C39125 +
           ((C409 + C419) * C55625 + (C2075 + C2083) * C55626) * C39126) *
              C94 -
          ((((C307 * C1795 + C90623 * C2067) * C90541 +
             (C307 * C1701 + C90623 * C1965) * C181) *
                C55626 +
            (C420 + C410) * C55625) *
               C39126 +
           ((C2083 + C2075) * C55626 + C422 * C55625) * C39125) *
              C95) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C2660 +
             (C307 * C182 + C90623 * C394) * C2565 -
             (C307 * C832 + C90623 * C1094) * C2661 -
             (C307 * C927 + C90623 * C1195) * C2566 +
             (C307 * C2570 + C90623 * C2827) * C2662 +
             (C307 * C2663 + C90623 * C2921) * C2567) *
                C55625 +
            (C29842 + C29843 - C29844 - C29862 + C29847 + C29863) * C55626) *
               C39125 +
           ((C2926 + C2927 - C2928 - C2929 + C2930 + C2942) * C55625 +
            (C58685 + C58686 - C58687 - C58688 + C58689 + C58693) * C55626) *
               C39126) *
              C90744 +
          (((C2928 - (C2927 + C2926) + C2929 - C2930 - C2942) * C55625 +
            (C58687 - (C58686 + C58685) + C58688 - C58689 - C58693) * C55626) *
               C39125 +
           ((C2935 - (C2934 + C2933) + C2936 - C2937 - C2943) * C55625 +
            (C8435 * C2661 - (C2079 * C2565 + C1986 * C2660) + C8547 * C2566 -
             (C307 * C3894 + C90623 * C4164) * C2662 -
             (C307 * C3992 + C90623 * C4252) * C2567) *
                C55626) *
               C39126) *
              C90503) *
         C90567) /
            (p * q * std::sqrt(p + q));
    d2eeyz[57] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C244 +
             (C307 * C245 + C90623 * C474) * C90567) *
                C55625 +
            (C27910 * C244 + C28080 * C90567) * C55626) *
               C39125 +
           ((C481 + C497) * C55625 + (C55958 + C55959) * C55626) * C39126) *
              C90541 * C92 -
          (((C55960 + C55961) * C55626 + (C498 + C484) * C55625) * C39126 +
           ((C55959 + C55958) * C55626 + (C497 + C481) * C55625) * C39125) *
              C90541 * C93 +
          ((C501 * C55625 + (C55961 + C55960) * C55626) * C39125 +
           ((C489 + C499) * C55625 + (C55962 + C55963) * C55626) * C39126) *
              C90541 * C94 -
          ((((C307 * C1881 + C90623 * C2163) * C90567 +
             (C307 * C1701 + C90623 * C1965) * C244) *
                C55626 +
            (C500 + C490) * C55625) *
               C39126 +
           ((C55963 + C55962) * C55626 + C502 * C55625) * C39125) *
              C90541 * C95)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C90623 * C308) * C244 +
              (C307 * C245 + C90623 * C474) * C90567) *
                 C55625 +
             (C27910 * C244 + C28080 * C90567) * C55626) *
                C39125 +
            ((C481 + C497) * C55625 + (C55958 + C55959) * C55626) * C39126) *
               C2565 -
           (((C56824 + C56825) * C55626 + (C1318 + C1310) * C55625) * C39126 +
            ((C29948 * C90567 + C29752 * C244) * C55626 +
             ((C307 * C1011 + C90623 * C1301) * C90567 +
              (C307 * C832 + C90623 * C1094) * C244) *
                 C55625) *
                C39125) *
               C2566 +
           ((((C307 * C2570 + C90623 * C2827) * C244 +
              (C307 * C2745 + C90623 * C3017) * C90567) *
                 C55625 +
             (C29756 * C244 + C29950 * C90567) * C55626) *
                C39125 +
            ((C3022 + C3030) * C55625 + (C58792 + C58796) * C55626) * C39126) *
               C2567) *
              C90744 +
          ((((C1310 + C1318) * C55625 + (C56825 + C56824) * C55626) * C39125 +
            ((C1307 + C1317) * C55625 + (C56826 + C56827) * C55626) * C39126) *
               C2566 -
           (((C55960 + C55961) * C55626 + (C498 + C484) * C55625) * C39126 +
            ((C55959 + C55958) * C55626 + (C497 + C481) * C55625) * C39125) *
               C2565 -
           ((((C307 * C4078 + C90623 * C4332) * C90567 +
              (C307 * C3894 + C90623 * C4164) * C244) *
                 C55626 +
             (C3031 + C3025) * C55625) *
                C39126 +
            ((C58796 + C58792) * C55626 + (C3030 + C3022) * C55625) * C39125) *
               C2567) *
              C90503)) /
            (p * q * std::sqrt(p + q));
    d2eezx[57] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
               C103 +
           (C56029 * C116 + C55625 * C561 + C56030 * C1707 + C55626 * C2268) *
               C92 -
           (C56056 + C56057) * C104 - (C56058 + C56059) * C93 +
           (C56060 + C56061) * C105 + (C56062 + C56063) * C94 -
           (C56064 + C56065) * C106 - (C56066 + C56067) * C95) *
              C39125 +
          ((C56057 + C56056) * C103 + (C56059 + C56058) * C92 -
           (C56061 + C56060) * C104 - (C56063 + C56062) * C93 +
           (C56065 + C56064) * C105 + (C56067 + C56066) * C94 -
           (C56030 * C1701 + C55626 * C2267 + C56029 * C111 + C55625 * C559) *
               C106 -
           (C56030 * C1711 + C55626 * C2272 + C56029 * C122 + C55625 * C565) *
               C95) *
              C39126) *
         C90623 * C90567 * C90541) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C88316 +
            (C56029 * C116 + C55625 * C561 + C56030 * C1707 + C55626 * C2268) *
                C90744 -
            (C56056 + C56057) * C88309 - (C56058 + C56059) * C90503) *
               C39125 +
           ((C56057 + C56056) * C88316 + (C56059 + C56058) * C90744 -
            (C56061 + C56060) * C88309 - (C56063 + C56062) * C90503) *
               C39126) *
              C90623 * C90567 * C2565 +
          (((C56942 + C56943) * C88309 -
            ((C56030 * C3900 + C55626 * C4413 + C56029 * C839 +
              C55625 * C1400) *
                 C90744 +
             (C56030 * C3891 + C55626 * C4407 + C56029 * C832 +
              C55625 * C1396) *
                 C88316) +
            (C56944 + C56945) * C90503) *
               C39125 +
           ((C56947 + C56946) * C88309 -
            ((C56945 + C56944) * C90744 + (C56943 + C56942) * C88316) +
            (C56949 + C56948) * C90503) *
               C39126) *
              C90623 * C90567 * C2566 +
          (((C56029 * C2570 + C55625 * C3105 + C56030 * C3896 +
             C55626 * C4412) *
                C88316 +
            (C56029 * C2577 + C55625 * C3109 + C56030 * C3905 +
             C55626 * C4418) *
                C90744 -
            (C58903 + C58904) * C88309 - (C58905 + C58906) * C90503) *
               C39125 +
           ((C58904 + C58903) * C88316 + (C58906 + C58905) * C90744 -
            (C56030 * C3894 + C55626 * C4410 + C56029 * C2572 +
             C55625 * C3107) *
                C88309 -
            (C56030 * C3903 + C55626 * C4416 + C56029 * C2579 +
             C55625 * C3111) *
                C90503) *
               C39126) *
              C90623 * C90567 * C2567)) /
            (p * q * std::sqrt(p + q));
    d2eezy[57] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C181 +
            (C56029 * C182 + C55625 * C641 + C56030 * C1794 + C55626 * C2368) *
                C90541) *
               C39125 +
           ((C56057 + C56056) * C181 + (C56146 + C56147) * C90541) * C39126) *
              C90623 * C92 -
          (((C56148 + C56149) * C90541 + (C56061 + C56060) * C181) * C39126 +
           ((C56147 + C56146) * C90541 + (C56056 + C56057) * C181) * C39125) *
              C90623 * C93 +
          (((C56060 + C56061) * C181 + (C56149 + C56148) * C90541) * C39125 +
           ((C56065 + C56064) * C181 + (C56150 + C56151) * C90541) * C39126) *
              C90623 * C94 -
          (((C56030 * C1795 + C55626 * C2369 + C56029 * C186 + C55625 * C645) *
                C90541 +
            (C56030 * C1701 + C55626 * C2267 + C56029 * C111 + C55625 * C559) *
                C181) *
               C39126 +
           ((C56151 + C56150) * C90541 + (C56064 + C56065) * C181) * C39125) *
              C90623 * C95) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C2660 +
            (C56029 * C182 + C55625 * C641 + C56030 * C1794 + C55626 * C2368) *
                C2565 -
            (C56030 * C3891 + C55626 * C4407 + C56029 * C832 + C55625 * C1396) *
                C2661 -
            (C56030 * C3989 + C55626 * C4493 + C56029 * C927 + C55625 * C1497) *
                C2566 +
            (C56029 * C2570 + C55625 * C3105 + C56030 * C3896 +
             C55626 * C4412) *
                C2662 +
            (C56029 * C2663 + C55625 * C3199 + C56030 * C3994 +
             C55626 * C4494) *
                C2567) *
               C39125 +
           ((C56057 + C56056) * C2660 + (C56146 + C56147) * C2565 -
            (C56943 + C56942) * C2661 - (C57056 + C57057) * C2566 +
            (C58904 + C58903) * C2662 + (C59009 + C59010) * C2567) *
               C39126) *
              C90623 * C90744 +
          (((C56942 + C56943) * C2661 -
            ((C56147 + C56146) * C2565 + (C56056 + C56057) * C2660) +
            (C57057 + C57056) * C2566 - (C58903 + C58904) * C2662 -
            (C59010 + C59009) * C2567) *
               C39125 +
           ((C56947 + C56946) * C2661 -
            ((C56148 + C56149) * C2565 + (C56061 + C56060) * C2660) +
            (C57058 + C57059) * C2566 -
            (C56030 * C3894 + C55626 * C4410 + C56029 * C2572 +
             C55625 * C3107) *
                C2662 -
            (C56030 * C3992 + C55626 * C4498 + C56029 * C2665 +
             C55625 * C3201) *
                C2567) *
               C39126) *
              C90623 * C90503) *
         C90567) /
            (p * q * std::sqrt(p + q));
    d2eezz[57] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C244 +
            (C56029 * C245 + C55625 * C719 + C56030 * C1879 + C55626 * C2460) *
                C90567) *
               C39125 +
           ((C56057 + C56056) * C244 + (C56230 + C56231) * C90567) * C39126) *
              C90623 * C90541 * C92 -
          (((C56232 + C56233) * C90567 + (C56061 + C56060) * C244) * C39126 +
           ((C56231 + C56230) * C90567 + (C56056 + C56057) * C244) * C39125) *
              C90623 * C90541 * C93 +
          (((C56060 + C56061) * C244 + (C56233 + C56232) * C90567) * C39125 +
           ((C56065 + C56064) * C244 + (C56234 + C56235) * C90567) * C39126) *
              C90623 * C90541 * C94 -
          (((C56030 * C1881 + C55626 * C2464 + C56029 * C249 + C55625 * C723) *
                C90567 +
            (C56030 * C1701 + C55626 * C2267 + C56029 * C111 + C55625 * C559) *
                C244) *
               C39126 +
           ((C56235 + C56234) * C90567 + (C56064 + C56065) * C244) * C39125) *
              C90623 * C90541 * C95)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                 C244 +
             (C56029 * C245 + C55625 * C719 + C56030 * C1879 + C55626 * C2460) *
                 C90567) *
                C39125 +
            ((C56057 + C56056) * C244 + (C56230 + C56231) * C90567) * C39126) *
               C90623 * C2565 -
           (((C57166 + C57167) * C90567 + (C56943 + C56942) * C244) * C39126 +
            ((C56030 * C4075 + C55626 * C4573 + C56029 * C1011 +
              C55625 * C1602) *
                 C90567 +
             (C56030 * C3891 + C55626 * C4407 + C56029 * C832 +
              C55625 * C1396) *
                 C244) *
                C39125) *
               C90623 * C2566 +
           (((C56029 * C2570 + C55625 * C3105 + C56030 * C3896 +
              C55626 * C4412) *
                 C244 +
             (C56029 * C2745 + C55625 * C3295 + C56030 * C4080 +
              C55626 * C4576) *
                 C90567) *
                C39125 +
            ((C58904 + C58903) * C244 + (C59113 + C59114) * C90567) * C39126) *
               C90623 * C2567) *
              C90744 +
          ((((C56942 + C56943) * C244 + (C57167 + C57166) * C90567) * C39125 +
            ((C56947 + C56946) * C244 + (C57168 + C57169) * C90567) * C39126) *
               C90623 * C2566 -
           (((C56232 + C56233) * C90567 + (C56061 + C56060) * C244) * C39126 +
            ((C56231 + C56230) * C90567 + (C56056 + C56057) * C244) * C39125) *
               C90623 * C2565 -
           (((C56030 * C4078 + C55626 * C4578 + C56029 * C2747 +
              C55625 * C3297) *
                 C90567 +
             (C56030 * C3894 + C55626 * C4410 + C56029 * C2572 +
              C55625 * C3107) *
                 C244) *
                C39126 +
            ((C59114 + C59113) * C90567 + (C58903 + C58904) * C244) * C39125) *
               C90623 * C2567) *
              C90503)) /
            (p * q * std::sqrt(p + q));
    d2eexx[58] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C826 +
            (C39129 * C116 + C39125 * C125 + C39130 * C117 + C39126 * C126) *
                C821 -
            (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                C827 -
            (C39130 * C118 + C39126 * C127 + C39129 * C117 + C39125 * C126) *
                C822 +
            (C39129 * C109 + C39125 * C115 + C39130 * C110 + C39126 * C119) *
                C828 +
            (C39129 * C118 + C39125 * C127 + C39130 * C120 + C39126 * C128) *
                C823) *
               C90623 * C55625 +
           ((C39129 * C1700 + C39125 * C1708 + C39130 * C1697 +
             C39126 * C1702) *
                C826 +
            (C39129 * C1707 + C39125 * C1714 + C39130 * C1706 +
             C39126 * C1713) *
                C821 -
            (C39130 * C1698 + C39126 * C1703 + C39129 * C1697 +
             C39125 * C1702) *
                C827 -
            (C39130 * C1705 + C39126 * C1712 + C39129 * C1706 +
             C39125 * C1713) *
                C822 +
            (C39129 * C1698 + C39125 * C1703 + C39130 * C1699 +
             C39126 * C1704) *
                C828 +
            (C39129 * C1705 + C39125 * C1712 + C39130 * C1709 +
             C39126 * C1715) *
                C823) *
               C90623 * C55626) *
              C90567 * C90752 +
          (((C39867 + C39866) * C827 -
            ((C39865 + C39864) * C821 + (C39863 + C39862) * C826) +
            (C39869 + C39868) * C822 - (C39871 + C39870) * C828 -
            (C39873 + C39872) * C823) *
               C90623 * C55625 +
           ((C48578 + C48579) * C827 -
            ((C43400 + C43401) * C821 + (C43402 + C43403) * C826) +
            (C48580 + C48581) * C822 -
            (C39130 * C8120 + C39126 * C8121 + C39129 * C3893 +
             C39125 * C3899) *
                C828 -
            (C39130 * C8122 + C39126 * C8123 + C39129 * C3902 +
             C39125 * C3911) *
                C823) *
               C90623 * C55626) *
              C90567 * C90555)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C3364 +
            (C39129 * C116 + C39125 * C125 + C39130 * C117 + C39126 * C126) *
                C90498) *
               C90623 * C55625 +
           ((C57292 + C57293) * C3364 + (C57294 + C57295) * C90498) * C90623 *
               C55626) *
              C90567 * C3360 -
          (((C43400 + C43401) * C90498 + (C43402 + C43403) * C3364) * C90623 *
               C55626 +
           ((C39865 + C39864) * C90498 + (C39863 + C39862) * C3364) * C90623 *
               C55625) *
              C90567 * C3361 +
          (((C41812 + C41811) * C3364 + (C41810 + C41809) * C90498) * C90623 *
               C55625 +
           ((C43404 + C43405) * C3364 + (C43406 + C43407) * C90498) * C90623 *
               C55626) *
              C90567 * C3362 -
          (((C39130 * C21006 + C39126 * C21007 + C39129 * C16838 +
             C39125 * C16841) *
                C90498 +
            (C39130 * C21004 + C39126 * C21005 + C39129 * C16835 +
             C39125 * C16837) *
                C3364) *
               C90623 * C55626 +
           ((C42739 + C42738) * C90498 + (C42737 + C42736) * C3364) * C90623 *
               C55625) *
              C90567 * C3363)) /
            (p * q * std::sqrt(p + q));
    d2eexy[58] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C923 +
            (C39129 * C182 + C39125 * C188 + C39130 * C183 + C39126 * C189) *
                C90752 -
            (C39863 + C39862) * C924 - (C39984 + C39985) * C90555) *
               C90623 * C55625 +
           ((C39129 * C1700 + C39125 * C1708 + C39130 * C1697 +
             C39126 * C1702) *
                C923 +
            (C39129 * C1794 + C39125 * C1799 + C39130 * C1791 +
             C39126 * C1796) *
                C90752 -
            (C43402 + C43403) * C924 - (C43515 + C43514) * C90555) *
               C90623 * C55626) *
              C821 +
          (((C39867 + C39866) * C924 -
            ((C39130 * C184 + C39126 * C190 + C39129 * C183 + C39125 * C189) *
                 C90752 +
             (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                 C923) +
            (C39986 + C39987) * C90555) *
               C90623 * C55625 +
           ((C48578 + C48579) * C924 -
            ((C39130 * C1792 + C39126 * C1797 + C39129 * C1791 +
              C39125 * C1796) *
                 C90752 +
             (C39130 * C1698 + C39126 * C1703 + C39129 * C1697 +
              C39125 * C1702) *
                 C923) +
            (C48717 + C48716) * C90555) *
               C90623 * C55626) *
              C822 +
          (((C39129 * C109 + C39125 * C115 + C39130 * C110 + C39126 * C119) *
                C923 +
            (C39129 * C184 + C39125 * C190 + C39130 * C185 + C39126 * C191) *
                C90752 -
            (C39871 + C39870) * C924 - (C39988 + C39989) * C90555) *
               C90623 * C55625 +
           ((C39129 * C1698 + C39125 * C1703 + C39130 * C1699 +
             C39126 * C1704) *
                C923 +
            (C39129 * C1792 + C39125 * C1797 + C39130 * C1793 +
             C39126 * C1798) *
                C90752 -
            (C39130 * C8120 + C39126 * C8121 + C39129 * C3893 +
             C39125 * C3899) *
                C924 -
            (C39130 * C8222 + C39126 * C8223 + C39129 * C3991 +
             C39125 * C3997) *
                C90555) *
               C90623 * C55626) *
              C823) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
               C3427 +
           (C39129 * C182 + C39125 * C188 + C39130 * C183 + C39126 * C189) *
               C3360 -
           (C39863 + C39862) * C3428 - (C39984 + C39985) * C3361 +
           (C41812 + C41811) * C3429 + (C41921 + C41922) * C3362 -
           (C42737 + C42736) * C3430 - (C42810 + C42811) * C3363) *
              C90623 * C55625 +
          ((C57292 + C57293) * C3427 + (C57414 + C57415) * C3360 -
           (C43402 + C43403) * C3428 - (C43515 + C43514) * C3361 +
           (C43404 + C43405) * C3429 + (C43517 + C43516) * C3362 -
           (C39130 * C21004 + C39126 * C21005 + C39129 * C16835 +
            C39125 * C16837) *
               C3430 -
           (C39130 * C21126 + C39126 * C21127 + C39129 * C16942 +
            C39125 * C16944) *
               C3363) *
              C90623 * C55626) *
         C90498 * C90567) /
            (p * q * std::sqrt(p + q));
    d2eexz[58] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                 C244 +
             (C39129 * C245 + C39125 * C251 + C39130 * C246 + C39126 * C252) *
                 C90567) *
                C90623 * C55625 +
            ((C39129 * C1700 + C39125 * C1708 + C39130 * C1697 +
              C39126 * C1702) *
                 C244 +
             (C39129 * C1879 + C39125 * C1884 + C39130 * C1878 +
              C39126 * C1883) *
                 C90567) *
                C90623 * C55626) *
               C90752 -
           (((C43624 + C43625) * C90567 + (C43402 + C43403) * C244) * C90623 *
                C55626 +
            ((C40101 + C40100) * C90567 + (C39863 + C39862) * C244) * C90623 *
                C55625) *
               C90555) *
              C821 +
          ((((C39867 + C39866) * C244 + (C40102 + C40103) * C90567) * C90623 *
                C55625 +
            ((C48578 + C48579) * C244 + (C48852 + C48853) * C90567) * C90623 *
                C55626) *
               C90555 -
           (((C39130 * C1877 + C39126 * C1882 + C39129 * C1878 +
              C39125 * C1883) *
                 C90567 +
             (C39130 * C1698 + C39126 * C1703 + C39129 * C1697 +
              C39125 * C1702) *
                 C244) *
                C90623 * C55626 +
            ((C39130 * C247 + C39126 * C253 + C39129 * C246 + C39125 * C252) *
                 C90567 +
             (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                 C244) *
                C90623 * C55625) *
               C90752) *
              C822 +
          ((((C39129 * C109 + C39125 * C115 + C39130 * C110 + C39126 * C119) *
                 C244 +
             (C39129 * C247 + C39125 * C253 + C39130 * C248 + C39126 * C254) *
                 C90567) *
                C90623 * C55625 +
            ((C39129 * C1698 + C39125 * C1703 + C39130 * C1699 +
              C39126 * C1704) *
                 C244 +
             (C39129 * C1877 + C39125 * C1882 + C39130 * C1880 +
              C39126 * C1885) *
                 C90567) *
                C90623 * C55626) *
               C90752 -
           (((C39130 * C8322 + C39126 * C8323 + C39129 * C4077 +
              C39125 * C4083) *
                 C90567 +
             (C39130 * C8120 + C39126 * C8121 + C39129 * C3893 +
              C39125 * C3899) *
                 C244) *
                C90623 * C55626 +
            ((C40105 + C40104) * C90567 + (C39871 + C39870) * C244) * C90623 *
                C55625) *
               C90555) *
              C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C244 +
            (C39129 * C245 + C39125 * C251 + C39130 * C246 + C39126 * C252) *
                C90567) *
               C90623 * C55625 +
           ((C57292 + C57293) * C244 + (C57531 + C57530) * C90567) * C90623 *
               C55626) *
              C3360 -
          (((C43624 + C43625) * C90567 + (C43402 + C43403) * C244) * C90623 *
               C55626 +
           ((C40101 + C40100) * C90567 + (C39863 + C39862) * C244) * C90623 *
               C55625) *
              C3361 +
          (((C41812 + C41811) * C244 + (C42032 + C42031) * C90567) * C90623 *
               C55625 +
           ((C43404 + C43405) * C244 + (C43626 + C43627) * C90567) * C90623 *
               C55626) *
              C3362 -
          (((C39130 * C21232 + C39126 * C21233 + C39129 * C17029 +
             C39125 * C17031) *
                C90567 +
            (C39130 * C21004 + C39126 * C21005 + C39129 * C16835 +
             C39125 * C16837) *
                C244) *
               C90623 * C55626 +
           ((C42883 + C42882) * C90567 + (C42737 + C42736) * C244) * C90623 *
               C55625) *
              C3363) *
         C90498) /
            (p * q * std::sqrt(p + q));
    d2eeyx[58] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C826 +
             (C307 * C116 + C90623 * C314) * C821 - C337 * C827 - C338 * C822 +
             C339 * C828 + C340 * C823) *
                C55625 +
            (C27914 + C27915 - C27898 - C27899 + C27900 + C27901) * C55626) *
               C39125 +
           ((C337 * C826 + C338 * C821 - C339 * C827 - C340 * C822 +
             C341 * C828 + C342 * C823) *
                C55625 +
            (C1984 * C826 + C1985 * C821 - C1986 * C827 - C1987 * C822 +
             C1988 * C828 + C1989 * C823) *
                C55626) *
               C39126) *
              C90567 * C90752 +
          (((C1116 * C827 -
             ((C307 * C839 + C90623 * C1098) * C821 +
              (C307 * C832 + C90623 * C1094) * C826) +
             C1117 * C822 - C1118 * C828 - C1119 * C823) *
                C55625 +
            (C8433 * C827 - (C29753 * C821 + C29752 * C826) + C8434 * C822 -
             C8435 * C828 - C8436 * C823) *
                C55626) *
               C39125 +
           ((C1118 * C827 - (C1117 * C821 + C1116 * C826) + C1119 * C822 -
             C1120 * C828 - C1121 * C823) *
                C55625 +
            (C8435 * C827 - (C8434 * C821 + C8433 * C826) + C8436 * C822 -
             (C307 * C8120 + C90623 * C8422) * C828 -
             (C307 * C8122 + C90623 * C8423) * C823) *
                C55626) *
               C39126) *
              C90567 * C90555)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C3364 +
             (C307 * C116 + C90623 * C314) * C90498) *
                C55625 +
            (C29732 + C29733) * C55626) *
               C39125 +
           ((C337 * C3364 + C338 * C90498) * C55625 +
            (C1984 * C3364 + C1985 * C90498) * C55626) *
               C39126) *
              C90567 * C3360 -
          (((C8434 * C90498 + C8433 * C3364) * C55626 +
            (C1117 * C90498 + C1116 * C3364) * C55625) *
               C39126 +
           ((C29761 + C29760) * C55626 +
            ((C307 * C839 + C90623 * C1098) * C90498 +
             (C307 * C832 + C90623 * C1094) * C3364) *
                C55625) *
               C39125) *
              C90567 * C3361 +
          ((((C307 * C2570 + C90623 * C2827) * C3364 +
             (C307 * C2577 + C90623 * C2831) * C90498) *
                C55625 +
            (C29764 + C29765) * C55626) *
               C39125 +
           ((C2844 * C3364 + C2845 * C90498) * C55625 +
            (C58585 * C3364 + C58586 * C90498) * C55626) *
               C39126) *
              C90567 * C3362 -
          ((((C307 * C21006 + C90623 * C21347) * C90498 +
             (C307 * C21004 + C90623 * C21346) * C3364) *
                C55626 +
            ((C307 * C3369 + C90623 * C3547) * C90498 +
             (C307 * C3366 + C90623 * C3544) * C3364) *
                C55625) *
               C39126 +
           (((C307 * C16838 + C90623 * C17133) * C90498 +
             (C307 * C16835 + C90623 * C17131) * C3364) *
                C55626 +
            ((C307 * C3370 + C90623 * C3548) * C90498 +
             (C307 * C3367 + C90623 * C3545) * C3364) *
                C55625) *
               C39125) *
              C90567 * C3363)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[58] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C923 +
             (C307 * C182 + C90623 * C394) * C90752 -
             (C307 * C832 + C90623 * C1094) * C924 -
             (C307 * C927 + C90623 * C1195) * C90555) *
                C55625 +
            (C31394 + C31395 - C31396 - C31397) * C55626) *
               C39125 +
           ((C1201 + C1202 - C1203 - C1220) * C55625 +
            (C10194 + C10193 - C10192 - C10195) * C55626) *
               C39126) *
              C821 +
          (((C1203 - (C1202 + C1201) + C1220) * C55625 +
            (C10192 - (C10193 + C10194) + C10195) * C55626) *
               C39125 +
           ((C1208 - (C1207 + C1206) + C1222) * C55625 +
            (C10196 - (C10197 + C10198) + C10199) * C55626) *
               C39126) *
              C822 +
          ((C1224 * C55625 + (C10198 + C10197 - C10196 - C10199) * C55626) *
               C39125 +
           ((C1213 + C1212 - C1211 - C1223) * C55625 +
            (C1988 * C923 + C2080 * C90752 -
             (C307 * C8120 + C90623 * C8422) * C924 -
             (C307 * C8222 + C90623 * C8534) * C90555) *
                C55626) *
               C39126) *
              C823) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C3427 +
            (C307 * C182 + C90623 * C394) * C3360 -
            (C307 * C832 + C90623 * C1094) * C3428 -
            (C307 * C927 + C90623 * C1195) * C3361 +
            (C307 * C2570 + C90623 * C2827) * C3429 +
            (C307 * C2663 + C90623 * C2921) * C3362 -
            (C307 * C3367 + C90623 * C3545) * C3430 -
            (C307 * C3433 + C90623 * C3599) * C3363) *
               C55625 +
           (C27910 * C3427 + C27998 * C3360 - C29752 * C3428 - C29858 * C3361 +
            C29756 * C3429 + C29859 * C3362 -
            (C307 * C16835 + C90623 * C17131) * C3430 -
            (C307 * C16942 + C90623 * C17209) * C3363) *
               C55626) *
              C39125 +
          ((C337 * C3427 + C413 * C3360 - C1116 * C3428 - C1216 * C3361 +
            C2844 * C3429 + C2940 * C3362 -
            (C307 * C3366 + C90623 * C3544) * C3430 -
            (C307 * C3432 + C90623 * C3600) * C3363) *
               C55625 +
           (C1984 * C3427 + C2078 * C3360 - C8433 * C3428 - C8546 * C3361 +
            C58585 * C3429 + C58692 * C3362 -
            (C307 * C21004 + C90623 * C21346) * C3430 -
            (C307 * C21126 + C90623 * C21446) * C3363) *
               C55626) *
              C39126) *
         C90498 * C90567) /
            (p * q * std::sqrt(p + q));
    d2eeyz[58] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C90623 * C308) * C244 +
              (C307 * C245 + C90623 * C474) * C90567) *
                 C55625 +
             (C27910 * C244 + C28080 * C90567) * C55626) *
                C39125 +
            ((C481 + C497) * C55625 + (C55958 + C55959) * C55626) * C39126) *
               C90752 -
           (((C56824 + C56825) * C55626 + (C1318 + C1310) * C55625) * C39126 +
            ((C29948 * C90567 + C29752 * C244) * C55626 +
             ((C307 * C1011 + C90623 * C1301) * C90567 +
              (C307 * C832 + C90623 * C1094) * C244) *
                 C55625) *
                C39125) *
               C90555) *
              C821 +
          ((((C1310 + C1318) * C55625 + (C56825 + C56824) * C55626) * C39125 +
            ((C1307 + C1317) * C55625 + (C56826 + C56827) * C55626) * C39126) *
               C90555 -
           (((C55960 + C55961) * C55626 + (C498 + C484) * C55625) * C39126 +
            ((C55959 + C55958) * C55626 + (C497 + C481) * C55625) * C39125) *
               C90752) *
              C822 +
          (((C501 * C55625 + (C55961 + C55960) * C55626) * C39125 +
            ((C489 + C499) * C55625 + (C55962 + C55963) * C55626) * C39126) *
               C90752 -
           ((((C307 * C8322 + C90623 * C8647) * C90567 +
              (C307 * C8120 + C90623 * C8422) * C244) *
                 C55626 +
             (C1319 + C1311) * C55625) *
                C39126 +
            ((C56827 + C56826) * C55626 + C1320 * C55625) * C39125) *
               C90555) *
              C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C244 +
             (C307 * C245 + C90623 * C474) * C90567) *
                C55625 +
            (C27910 * C244 + C28080 * C90567) * C55626) *
               C39125 +
           ((C481 + C497) * C55625 + (C55958 + C55959) * C55626) * C39126) *
              C3360 -
          (((C56824 + C56825) * C55626 + (C1318 + C1310) * C55625) * C39126 +
           ((C29948 * C90567 + C29752 * C244) * C55626 +
            ((C307 * C1011 + C90623 * C1301) * C90567 +
             (C307 * C832 + C90623 * C1094) * C244) *
                C55625) *
               C39125) *
              C3361 +
          ((((C307 * C2570 + C90623 * C2827) * C244 +
             (C307 * C2745 + C90623 * C3017) * C90567) *
                C55625 +
            (C29756 * C244 + C29950 * C90567) * C55626) *
               C39125 +
           ((C3022 + C3030) * C55625 + (C58792 + C58796) * C55626) * C39126) *
              C3362 -
          ((((C307 * C21232 + C90623 * C21545) * C90567 +
             (C307 * C21004 + C90623 * C21346) * C244) *
                C55626 +
            ((C307 * C3488 + C90623 * C3653) * C90567 +
             (C307 * C3366 + C90623 * C3544) * C244) *
                C55625) *
               C39126 +
           (((C307 * C17029 + C90623 * C17285) * C90567 +
             (C307 * C16835 + C90623 * C17131) * C244) *
                C55626 +
            ((C307 * C3489 + C90623 * C3654) * C90567 +
             (C307 * C3367 + C90623 * C3545) * C244) *
                C55625) *
               C39125) *
              C3363) *
         C90498) /
            (p * q * std::sqrt(p + q));
    d2eezx[58] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C826 +
            (C56029 * C116 + C55625 * C561 + C56030 * C1707 + C55626 * C2268) *
                C821 -
            (C56056 + C56057) * C827 - (C56058 + C56059) * C822 +
            (C56060 + C56061) * C828 + (C56062 + C56063) * C823) *
               C39125 +
           ((C56057 + C56056) * C826 + (C56059 + C56058) * C821 -
            (C56061 + C56060) * C827 - (C56063 + C56062) * C822 +
            (C56065 + C56064) * C828 + (C56067 + C56066) * C823) *
               C39126) *
              C90623 * C90567 * C90752 +
          (((C56942 + C56943) * C827 -
            ((C56030 * C3900 + C55626 * C4413 + C56029 * C839 +
              C55625 * C1400) *
                 C821 +
             (C56030 * C3891 + C55626 * C4407 + C56029 * C832 +
              C55625 * C1396) *
                 C826) +
            (C56944 + C56945) * C822 - (C56946 + C56947) * C828 -
            (C56948 + C56949) * C823) *
               C39125 +
           ((C56947 + C56946) * C827 -
            ((C56945 + C56944) * C821 + (C56943 + C56942) * C826) +
            (C56949 + C56948) * C822 -
            (C56030 * C8120 + C55626 * C8760 + C56029 * C831 + C55625 * C1398) *
                C828 -
            (C56030 * C8122 + C55626 * C8761 + C56029 * C841 + C55625 * C1403) *
                C823) *
               C39126) *
              C90623 * C90567 * C90555)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C3364 +
            (C56029 * C116 + C55625 * C561 + C56030 * C1707 + C55626 * C2268) *
                C90498) *
               C39125 +
           ((C56057 + C56056) * C3364 + (C56059 + C56058) * C90498) * C39126) *
              C90623 * C90567 * C3360 -
          (((C56945 + C56944) * C90498 + (C56943 + C56942) * C3364) * C39126 +
           ((C56030 * C3900 + C55626 * C4413 + C56029 * C839 + C55625 * C1400) *
                C90498 +
            (C56030 * C3891 + C55626 * C4407 + C56029 * C832 + C55625 * C1396) *
                C3364) *
               C39125) *
              C90623 * C90567 * C3361 +
          (((C56029 * C2570 + C55625 * C3105 + C56030 * C3896 +
             C55626 * C4412) *
                C3364 +
            (C56029 * C2577 + C55625 * C3109 + C56030 * C3905 +
             C55626 * C4418) *
                C90498) *
               C39125 +
           ((C58904 + C58903) * C3364 + (C58906 + C58905) * C90498) * C39126) *
              C90623 * C90567 * C3362 -
          (((C56030 * C21006 + C55626 * C21645 + C56029 * C3369 +
             C55625 * C3709) *
                C90498 +
            (C56030 * C21004 + C55626 * C21644 + C56029 * C3366 +
             C55625 * C3706) *
                C3364) *
               C39126 +
           ((C56030 * C16838 + C55626 * C17363 + C56029 * C3370 +
             C55625 * C3710) *
                C90498 +
            (C56030 * C16835 + C55626 * C17361 + C56029 * C3367 +
             C55625 * C3707) *
                C3364) *
               C39125) *
              C90623 * C90567 * C3363)) /
            (p * q * std::sqrt(p + q));
    d2eezy[58] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C923 +
            (C56029 * C182 + C55625 * C641 + C56030 * C1794 + C55626 * C2368) *
                C90752 -
            (C56030 * C3891 + C55626 * C4407 + C56029 * C832 + C55625 * C1396) *
                C924 -
            (C56030 * C3989 + C55626 * C4493 + C56029 * C927 + C55625 * C1497) *
                C90555) *
               C39125 +
           ((C56057 + C56056) * C923 + (C56146 + C56147) * C90752 -
            (C56943 + C56942) * C924 - (C57056 + C57057) * C90555) *
               C39126) *
              C90623 * C821 +
          (((C56942 + C56943) * C924 -
            ((C56147 + C56146) * C90752 + (C56056 + C56057) * C923) +
            (C57057 + C57056) * C90555) *
               C39125 +
           ((C56947 + C56946) * C924 -
            ((C56148 + C56149) * C90752 + (C56061 + C56060) * C923) +
            (C57058 + C57059) * C90555) *
               C39126) *
              C90623 * C822 +
          (((C56060 + C56061) * C923 + (C56149 + C56148) * C90752 -
            (C56946 + C56947) * C924 - (C57059 + C57058) * C90555) *
               C39125 +
           ((C56065 + C56064) * C923 + (C56150 + C56151) * C90752 -
            (C56030 * C8120 + C55626 * C8760 + C56029 * C831 + C55625 * C1398) *
                C924 -
            (C56030 * C8222 + C55626 * C8872 + C56029 * C928 + C55625 * C1500) *
                C90555) *
               C39126) *
              C90623 * C823) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
               C3427 +
           (C56029 * C182 + C55625 * C641 + C56030 * C1794 + C55626 * C2368) *
               C3360 -
           (C56030 * C3891 + C55626 * C4407 + C56029 * C832 + C55625 * C1396) *
               C3428 -
           (C56030 * C3989 + C55626 * C4493 + C56029 * C927 + C55625 * C1497) *
               C3361 +
           (C56029 * C2570 + C55625 * C3105 + C56030 * C3896 + C55626 * C4412) *
               C3429 +
           (C56029 * C2663 + C55625 * C3199 + C56030 * C3994 + C55626 * C4494) *
               C3362 -
           (C56030 * C16835 + C55626 * C17361 + C56029 * C3367 +
            C55625 * C3707) *
               C3430 -
           (C56030 * C16942 + C55626 * C17465 + C56029 * C3433 +
            C55625 * C3761) *
               C3363) *
              C39125 +
          ((C56057 + C56056) * C3427 + (C56146 + C56147) * C3360 -
           (C56943 + C56942) * C3428 - (C57056 + C57057) * C3361 +
           (C58904 + C58903) * C3429 + (C59009 + C59010) * C3362 -
           (C56030 * C21004 + C55626 * C21644 + C56029 * C3366 +
            C55625 * C3706) *
               C3430 -
           (C56030 * C21126 + C55626 * C21758 + C56029 * C3432 +
            C55625 * C3762) *
               C3363) *
              C39126) *
         C90623 * C90498 * C90567) /
            (p * q * std::sqrt(p + q));
    d2eezz[58] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                 C244 +
             (C56029 * C245 + C55625 * C719 + C56030 * C1879 + C55626 * C2460) *
                 C90567) *
                C39125 +
            ((C56057 + C56056) * C244 + (C56230 + C56231) * C90567) * C39126) *
               C90623 * C90752 -
           (((C57166 + C57167) * C90567 + (C56943 + C56942) * C244) * C39126 +
            ((C56030 * C4075 + C55626 * C4573 + C56029 * C1011 +
              C55625 * C1602) *
                 C90567 +
             (C56030 * C3891 + C55626 * C4407 + C56029 * C832 +
              C55625 * C1396) *
                 C244) *
                C39125) *
               C90623 * C90555) *
              C821 +
          ((((C56942 + C56943) * C244 + (C57167 + C57166) * C90567) * C39125 +
            ((C56947 + C56946) * C244 + (C57168 + C57169) * C90567) * C39126) *
               C90623 * C90555 -
           (((C56232 + C56233) * C90567 + (C56061 + C56060) * C244) * C39126 +
            ((C56231 + C56230) * C90567 + (C56056 + C56057) * C244) * C39125) *
               C90623 * C90752) *
              C822 +
          ((((C56060 + C56061) * C244 + (C56233 + C56232) * C90567) * C39125 +
            ((C56065 + C56064) * C244 + (C56234 + C56235) * C90567) * C39126) *
               C90623 * C90752 -
           (((C56030 * C8322 + C55626 * C8985 + C56029 * C1012 +
              C55625 * C1603) *
                 C90567 +
             (C56030 * C8120 + C55626 * C8760 + C56029 * C831 +
              C55625 * C1398) *
                 C244) *
                C39126 +
            ((C57169 + C57168) * C90567 + (C56946 + C56947) * C244) * C39125) *
               C90623 * C90555) *
              C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C244 +
            (C56029 * C245 + C55625 * C719 + C56030 * C1879 + C55626 * C2460) *
                C90567) *
               C39125 +
           ((C56057 + C56056) * C244 + (C56230 + C56231) * C90567) * C39126) *
              C90623 * C3360 -
          (((C57166 + C57167) * C90567 + (C56943 + C56942) * C244) * C39126 +
           ((C56030 * C4075 + C55626 * C4573 + C56029 * C1011 +
             C55625 * C1602) *
                C90567 +
            (C56030 * C3891 + C55626 * C4407 + C56029 * C832 + C55625 * C1396) *
                C244) *
               C39125) *
              C90623 * C3361 +
          (((C56029 * C2570 + C55625 * C3105 + C56030 * C3896 +
             C55626 * C4412) *
                C244 +
            (C56029 * C2745 + C55625 * C3295 + C56030 * C4080 +
             C55626 * C4576) *
                C90567) *
               C39125 +
           ((C58904 + C58903) * C244 + (C59113 + C59114) * C90567) * C39126) *
              C90623 * C3362 -
          (((C56030 * C21232 + C55626 * C21860 + C56029 * C3488 +
             C55625 * C3815) *
                C90567 +
            (C56030 * C21004 + C55626 * C21644 + C56029 * C3366 +
             C55625 * C3706) *
                C244) *
               C39126 +
           ((C56030 * C17029 + C55626 * C17550 + C56029 * C3489 +
             C55625 * C3816) *
                C90567 +
            (C56030 * C16835 + C55626 * C17361 + C56029 * C3367 +
             C55625 * C3707) *
                C244) *
               C39125) *
              C90623 * C3363) *
         C90498) /
            (p * q * std::sqrt(p + q));
    d2eexx[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C826 +
            (C39129 * C116 + C39125 * C125 + C39130 * C117 + C39126 * C126) *
                C821 -
            (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                C827 -
            (C39130 * C118 + C39126 * C127 + C39129 * C117 + C39125 * C126) *
                C822 +
            (C39129 * C109 + C39125 * C115 + C39130 * C110 + C39126 * C119) *
                C828 +
            (C39129 * C118 + C39125 * C127 + C39130 * C120 + C39126 * C128) *
                C823) *
               C90623 * C55625 +
           ((C57292 + C57293) * C826 + (C57294 + C57295) * C821 -
            (C57296 + C57297) * C827 - (C57298 + C57299) * C822 +
            (C57300 + C57301) * C828 + (C57302 + C57303) * C823) *
               C90623 * C55626) *
              C90753 +
          (((C57297 + C57296) * C827 -
            ((C57295 + C57294) * C821 + (C57293 + C57292) * C826) +
            (C57299 + C57298) * C822 - (C57301 + C57300) * C828 -
            (C57303 + C57302) * C823) *
               C90623 * C55625 +
           ((C39129 * C4657 + C39125 * C4661 + C39130 * C4658 +
             C39126 * C4662) *
                C827 -
            ((C39130 * C4664 + C39126 * C4669 + C39129 * C4663 +
              C39125 * C4668) *
                 C821 +
             (C39130 * C4657 + C39126 * C4661 + C39129 * C4656 +
              C39125 * C4660) *
                 C826) +
            (C39129 * C4664 + C39125 * C4669 + C39130 * C4665 +
             C39126 * C4670) *
                C822 -
            (C39130 * C4659 + C39126 * C4666 + C39129 * C4658 +
             C39125 * C4662) *
                C828 -
            (C39130 * C4667 + C39126 * C4671 + C39129 * C4665 +
             C39125 * C4670) *
                C823) *
               C90623 * C55626) *
              C90579) *
         C90541) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                 C3364 +
             (C39129 * C116 + C39125 * C125 + C39130 * C117 + C39126 * C126) *
                 C90498) *
                C90623 * C55625 +
            ((C57292 + C57293) * C3364 + (C57294 + C57295) * C90498) * C90623 *
                C55626) *
               C90753 -
           (((C39130 * C4664 + C39126 * C4669 + C39129 * C4663 +
              C39125 * C4668) *
                 C90498 +
             (C39130 * C4657 + C39126 * C4661 + C39129 * C4656 +
              C39125 * C4660) *
                 C3364) *
                C90623 * C55626 +
            ((C57295 + C57294) * C90498 + (C57293 + C57292) * C3364) * C90623 *
                C55625) *
               C90579) *
              C2565 +
          ((((C43403 + C43402) * C3364 + (C43401 + C43400) * C90498) * C90623 *
                C55625 +
            ((C45252 + C45253) * C3364 + (C45254 + C45255) * C90498) * C90623 *
                C55626) *
               C90579 -
           (((C43400 + C43401) * C90498 + (C43402 + C43403) * C3364) * C90623 *
                C55626 +
            ((C39865 + C39864) * C90498 + (C39863 + C39862) * C3364) * C90623 *
                C55625) *
               C90753) *
              C2566 +
          ((((C41812 + C41811) * C3364 + (C41810 + C41809) * C90498) * C90623 *
                C55625 +
            ((C43404 + C43405) * C3364 + (C43406 + C43407) * C90498) * C90623 *
                C55626) *
               C90753 -
           (((C39130 * C17656 + C39126 * C17658 + C39129 * C17654 +
              C39125 * C17657) *
                 C90498 +
             (C39130 * C17652 + C39126 * C17655 + C39129 * C17651 +
              C39125 * C17653) *
                 C3364) *
                C90623 * C55626 +
            ((C43407 + C43406) * C90498 + (C43405 + C43404) * C3364) * C90623 *
                C55625) *
               C90579) *
              C2567)) /
            (p * q * std::sqrt(p + q));
    d2eexy[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                 C181 +
             (C39129 * C182 + C39125 * C188 + C39130 * C183 + C39126 * C189) *
                 C90541) *
                C90623 * C55625 +
            ((C57292 + C57293) * C181 + (C57414 + C57415) * C90541) * C90623 *
                C55626) *
               C821 -
           (((C57416 + C57417) * C90541 + (C57296 + C57297) * C181) * C90623 *
                C55626 +
            ((C39130 * C184 + C39126 * C190 + C39129 * C183 + C39125 * C189) *
                 C90541 +
             (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                 C181) *
                C90623 * C55625) *
               C822 +
           (((C39129 * C109 + C39125 * C115 + C39130 * C110 + C39126 * C119) *
                 C181 +
             (C39129 * C184 + C39125 * C190 + C39130 * C185 + C39126 * C191) *
                 C90541) *
                C90623 * C55625 +
            ((C57300 + C57301) * C181 + (C57418 + C57419) * C90541) * C90623 *
                C55626) *
               C823) *
              C90753 +
          ((((C57297 + C57296) * C181 + (C57417 + C57416) * C90541) * C90623 *
                C55625 +
            ((C39129 * C4657 + C39125 * C4661 + C39130 * C4658 +
              C39126 * C4662) *
                 C181 +
             (C39129 * C4747 + C39125 * C4751 + C39130 * C4748 +
              C39126 * C4752) *
                 C90541) *
                C90623 * C55626) *
               C822 -
           (((C39130 * C4747 + C39126 * C4751 + C39129 * C4746 +
              C39125 * C4750) *
                 C90541 +
             (C39130 * C4657 + C39126 * C4661 + C39129 * C4656 +
              C39125 * C4660) *
                 C181) *
                C90623 * C55626 +
            ((C57415 + C57414) * C90541 + (C57293 + C57292) * C181) * C90623 *
                C55625) *
               C821 -
           (((C39130 * C4749 + C39126 * C4753 + C39129 * C4748 +
              C39125 * C4752) *
                 C90541 +
             (C39130 * C4659 + C39126 * C4666 + C39129 * C4658 +
              C39125 * C4662) *
                 C181) *
                C90623 * C55626 +
            ((C57419 + C57418) * C90541 + (C57301 + C57300) * C181) * C90623 *
                C55625) *
               C823) *
              C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C2660 +
            (C39129 * C182 + C39125 * C188 + C39130 * C183 + C39126 * C189) *
                C2565 -
            (C39863 + C39862) * C2661 - (C39984 + C39985) * C2566 +
            (C41812 + C41811) * C2662 + (C41921 + C41922) * C2567) *
               C90623 * C55625 +
           ((C57292 + C57293) * C2660 + (C57414 + C57415) * C2565 -
            (C43402 + C43403) * C2661 - (C43515 + C43514) * C2566 +
            (C43404 + C43405) * C2662 + (C43517 + C43516) * C2567) *
               C90623 * C55626) *
              C90498 * C90753 +
          (((C43403 + C43402) * C2661 -
            ((C57415 + C57414) * C2565 + (C57293 + C57292) * C2660) +
            (C43514 + C43515) * C2566 - (C43405 + C43404) * C2662 -
            (C43516 + C43517) * C2567) *
               C90623 * C55625 +
           ((C45252 + C45253) * C2661 -
            ((C39130 * C4747 + C39126 * C4751 + C39129 * C4746 +
              C39125 * C4750) *
                 C2565 +
             (C39130 * C4657 + C39126 * C4661 + C39129 * C4656 +
              C39125 * C4660) *
                 C2660) +
            (C45359 + C45358) * C2566 -
            (C39130 * C17652 + C39126 * C17655 + C39129 * C17651 +
             C39125 * C17653) *
                C2662 -
            (C39130 * C17734 + C39126 * C17736 + C39129 * C17733 +
             C39125 * C17735) *
                C2567) *
               C90623 * C55626) *
              C90498 * C90579)) /
            (p * q * std::sqrt(p + q));
    d2eexz[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C1875 +
            (C39129 * C245 + C39125 * C251 + C39130 * C246 + C39126 * C252) *
                C90753 -
            (C57293 + C57292) * C1876 - (C57530 + C57531) * C90579) *
               C90623 * C55625 +
           ((C57292 + C57293) * C1875 + (C57531 + C57530) * C90753 -
            (C39130 * C4657 + C39126 * C4661 + C39129 * C4656 +
             C39125 * C4660) *
                C1876 -
            (C39130 * C4832 + C39126 * C4836 + C39129 * C4831 +
             C39125 * C4835) *
                C90579) *
               C90623 * C55626) *
              C90541 * C821 +
          (((C57297 + C57296) * C1876 -
            ((C39130 * C247 + C39126 * C253 + C39129 * C246 + C39125 * C252) *
                 C90753 +
             (C39130 * C109 + C39126 * C115 + C39129 * C108 + C39125 * C114) *
                 C1875) +
            (C57532 + C57533) * C90579) *
               C90623 * C55625 +
           ((C39129 * C4657 + C39125 * C4661 + C39130 * C4658 +
             C39126 * C4662) *
                C1876 -
            ((C57533 + C57532) * C90753 + (C57296 + C57297) * C1875) +
            (C39129 * C4832 + C39125 * C4836 + C39130 * C4833 +
             C39126 * C4837) *
                C90579) *
               C90623 * C55626) *
              C90541 * C822 +
          (((C39129 * C109 + C39125 * C115 + C39130 * C110 + C39126 * C119) *
                C1875 +
            (C39129 * C247 + C39125 * C253 + C39130 * C248 + C39126 * C254) *
                C90753 -
            (C57301 + C57300) * C1876 - (C57534 + C57535) * C90579) *
               C90623 * C55625 +
           ((C57300 + C57301) * C1875 + (C57535 + C57534) * C90753 -
            (C39130 * C4659 + C39126 * C4666 + C39129 * C4658 +
             C39125 * C4662) *
                C1876 -
            (C39130 * C4834 + C39126 * C4838 + C39129 * C4833 +
             C39125 * C4837) *
                C90579) *
               C90623 * C55626) *
              C90541 * C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39129 * C107 + C39125 * C113 + C39130 * C108 + C39126 * C114) *
                C1875 +
            (C39129 * C245 + C39125 * C251 + C39130 * C246 + C39126 * C252) *
                C90753 -
            (C57293 + C57292) * C1876 - (C57530 + C57531) * C90579) *
               C90623 * C55625 +
           ((C57292 + C57293) * C1875 + (C57531 + C57530) * C90753 -
            (C39130 * C4657 + C39126 * C4661 + C39129 * C4656 +
             C39125 * C4660) *
                C1876 -
            (C39130 * C4832 + C39126 * C4836 + C39129 * C4831 +
             C39125 * C4835) *
                C90579) *
               C90623 * C55626) *
              C2565 +
          (((C43403 + C43402) * C1876 -
            ((C40101 + C40100) * C90753 + (C39863 + C39862) * C1875) +
            (C43625 + C43624) * C90579) *
               C90623 * C55625 +
           ((C45252 + C45253) * C1876 -
            ((C43624 + C43625) * C90753 + (C43402 + C43403) * C1875) +
            (C45462 + C45463) * C90579) *
               C90623 * C55626) *
              C2566 +
          (((C41812 + C41811) * C1875 + (C42032 + C42031) * C90753 -
            (C43405 + C43404) * C1876 - (C43627 + C43626) * C90579) *
               C90623 * C55625 +
           ((C43404 + C43405) * C1875 + (C43626 + C43627) * C90753 -
            (C39130 * C17652 + C39126 * C17655 + C39129 * C17651 +
             C39125 * C17653) *
                C1876 -
            (C39130 * C17812 + C39126 * C17814 + C39129 * C17811 +
             C39125 * C17813) *
                C90579) *
               C90623 * C55626) *
              C2567) *
         C90498) /
            (p * q * std::sqrt(p + q));
    d2eeyx[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C826 +
             (C307 * C116 + C90623 * C314) * C821 - C337 * C827 - C338 * C822 +
             C339 * C828 + C340 * C823) *
                C55625 +
            (C27914 + C27915 - C27898 - C27899 + C27900 + C27901) * C55626) *
               C39125 +
           ((C337 * C826 + C338 * C821 - C339 * C827 - C340 * C822 +
             C341 * C828 + C342 * C823) *
                C55625 +
            (C57634 + C57635 - C57636 - C57637 + C57638 + C57639) * C55626) *
               C39126) *
              C90753 +
          (((C27898 - (C27915 + C27914) + C27899 - C27900 - C27901) * C55625 +
            (C27906 - (C27917 + C27916) + C27907 - C27908 - C27909) * C55626) *
               C39125 +
           ((C57636 - (C57635 + C57634) + C57637 - C57638 - C57639) * C55625 +
            (C4932 * C827 - (C4931 * C821 + C4930 * C826) + C4933 * C822 -
             (C307 * C4659 + C90623 * C4916) * C828 -
             (C307 * C4667 + C90623 * C4920) * C823) *
                C55626) *
               C39126) *
              C90579) *
         C90541) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C90623 * C308) * C3364 +
              (C307 * C116 + C90623 * C314) * C90498) *
                 C55625 +
             (C29732 + C29733) * C55626) *
                C39125 +
            ((C337 * C3364 + C338 * C90498) * C55625 +
             (C60101 + C60102) * C55626) *
                C39126) *
               C90753 -
           (((C4931 * C90498 + C4930 * C3364) * C55626 +
             (C60102 + C60101) * C55625) *
                C39126 +
            ((C29735 + C29734) * C55626 + (C29733 + C29732) * C55625) *
                C39125) *
               C90579) *
              C2565 +
          ((((C29760 + C29761) * C55625 + (C29762 + C29763) * C55626) * C39125 +
            ((C60103 + C60104) * C55625 +
             (C34012 * C3364 + C34013 * C90498) * C55626) *
                C39126) *
               C90579 -
           (((C60104 + C60103) * C55626 +
             (C1117 * C90498 + C1116 * C3364) * C55625) *
                C39126 +
            ((C29761 + C29760) * C55626 +
             ((C307 * C839 + C90623 * C1098) * C90498 +
              (C307 * C832 + C90623 * C1094) * C3364) *
                 C55625) *
                C39125) *
               C90753) *
              C2566 +
          (((((C307 * C2570 + C90623 * C2827) * C3364 +
              (C307 * C2577 + C90623 * C2831) * C90498) *
                 C55625 +
             (C29764 + C29765) * C55626) *
                C39125 +
            ((C2844 * C3364 + C2845 * C90498) * C55625 +
             (C60105 + C60106) * C55626) *
                C39126) *
               C90753 -
           ((((C307 * C17656 + C90623 * C17892) * C90498 +
              (C307 * C17652 + C90623 * C17890) * C3364) *
                 C55626 +
             (C60106 + C60105) * C55625) *
                C39126 +
            ((C29767 + C29766) * C55626 + (C29765 + C29764) * C55625) *
                C39125) *
               C90579) *
              C2567)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C307 * C107 + C90623 * C308) * C181 +
              (C307 * C182 + C90623 * C394) * C90541) *
                 C55625 +
             (C27992 + C28000) * C55626) *
                C39125 +
            ((C401 + C417) * C55625 + C57738 * C55626) * C39126) *
               C821 -
           ((C2084 * C55626 + (C418 + C404) * C55625) * C39126 +
            (C57739 * C55626 + (C417 + C401) * C55625) * C39125) *
               C822 +
           ((C421 * C55625 + C57740 * C55626) * C39125 +
            ((C409 + C419) * C55625 + (C2075 + C2083) * C55626) * C39126) *
               C823) *
              C90753 +
          (((C57738 * C55625 + (C5012 + C5020) * C55626) * C39125 +
            (C57740 * C55625 + (C5015 + C5021) * C55626) * C39126) *
               C822 -
           ((C30642 * C55626 + C57739 * C55625) * C39126 +
            ((C28001 + C27995) * C55626 + (C28000 + C27992) * C55625) *
                C39125) *
               C821 -
           ((((C307 * C4749 + C90623 * C5010) * C90541 +
              (C307 * C4659 + C90623 * C4916) * C181) *
                 C55626 +
             (C2083 + C2075) * C55625) *
                C39126 +
            ((C5021 + C5015) * C55626 + C2084 * C55625) * C39125) *
               C823) *
              C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C2660 +
             (C307 * C182 + C90623 * C394) * C2565 -
             (C307 * C832 + C90623 * C1094) * C2661 -
             (C307 * C927 + C90623 * C1195) * C2566 +
             (C307 * C2570 + C90623 * C2827) * C2662 +
             (C307 * C2663 + C90623 * C2921) * C2567) *
                C55625 +
            (C29842 + C29843 - C29844 - C29862 + C29847 + C29863) * C55626) *
               C39125 +
           ((C2926 + C2927 - C2928 - C2929 + C2930 + C2942) * C55625 +
            (C58685 + C58686 - C58687 - C58688 + C58689 + C58693) * C55626) *
               C39126) *
              C90498 * C90753 +
          (((C29844 - (C29843 + C29842) + C29862 - C29847 - C29863) * C55625 +
            (C29852 - (C29851 + C29850) + C29864 - C29855 - C29865) * C55626) *
               C39125 +
           ((C58687 - (C58686 + C58685) + C58688 - C58689 - C58693) * C55625 +
            (C34012 * C2661 - (C5018 * C2565 + C4930 * C2660) + C34128 * C2566 -
             (C307 * C17652 + C90623 * C17890) * C2662 -
             (C307 * C17734 + C90623 * C17968) * C2567) *
                C55626) *
               C39126) *
              C90498 * C90579)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C1875 +
             (C307 * C245 + C90623 * C474) * C90753 - C27910 * C1876 -
             C28080 * C90579) *
                C55625 +
            (C27910 * C1875 + C28080 * C90753 - C27912 * C1876 -
             C28081 * C90579) *
                C55626) *
               C39125 +
           ((C2165 + C2166 - C2167 - C2184) * C55625 +
            (C57839 + C57840 - C57841 - C57842) * C55626) *
               C39126) *
              C90541 * C821 +
          (((C2167 - (C2166 + C2165) + C2184) * C55625 +
            (C57841 - (C57840 + C57839) + C57842) * C55626) *
               C39125 +
           ((C2172 - (C2171 + C2170) + C2186) * C55625 +
            (C57843 - (C57844 + C57845) + C57846) * C55626) *
               C39126) *
              C90541 * C822 +
          ((C2188 * C55625 + (C57845 + C57844 - C57843 - C57846) * C55626) *
               C39125 +
           ((C2177 + C2176 - C2175 - C2187) * C55625 +
            (C1988 * C1875 + C2183 * C90753 -
             (C307 * C4659 + C90623 * C4916) * C1876 -
             (C307 * C4834 + C90623 * C5098) * C90579) *
                C55626) *
               C39126) *
              C90541 * C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C1875 +
             (C307 * C245 + C90623 * C474) * C90753 - C27910 * C1876 -
             C28080 * C90579) *
                C55625 +
            (C27910 * C1875 + C28080 * C90753 - C27912 * C1876 -
             C28081 * C90579) *
                C55626) *
               C39125 +
           ((C2165 + C2166 - C2167 - C2184) * C55625 +
            (C57839 + C57840 - C57841 - C57842) * C55626) *
               C39126) *
              C2565 +
          (((C29752 * C1876 -
             ((C307 * C1011 + C90623 * C1301) * C90753 +
              (C307 * C832 + C90623 * C1094) * C1875) +
             C29948 * C90579) *
                C55625 +
            (C29754 * C1876 - (C29948 * C90753 + C29752 * C1875) +
             C29949 * C90579) *
                C55626) *
               C39125 +
           ((C8649 - (C8650 + C8651) + C8661) * C55625 +
            (C34012 * C1876 - (C8659 * C90753 + C8433 * C1875) +
             C34231 * C90579) *
                C55626) *
               C39126) *
              C2566 +
          ((((C307 * C2570 + C90623 * C2827) * C1875 +
             (C307 * C2745 + C90623 * C3017) * C90753 - C29756 * C1876 -
             C29950 * C90579) *
                C55625 +
            (C29756 * C1875 + C29950 * C90753 - C29758 * C1876 -
             C29951 * C90579) *
                C55626) *
               C39125 +
           ((C2844 * C1875 + C3028 * C90753 - C58585 * C1876 -
             C58795 * C90579) *
                C55625 +
            (C58585 * C1875 + C58795 * C90753 -
             (C307 * C17652 + C90623 * C17890) * C1876 -
             (C307 * C17812 + C90623 * C18044) * C90579) *
                C55626) *
               C39126) *
              C2567) *
         C90498) /
            (p * q * std::sqrt(p + q));
    d2eezx[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C826 +
            (C56029 * C116 + C55625 * C561 + C56030 * C1707 + C55626 * C2268) *
                C821 -
            (C56056 + C56057) * C827 - (C56058 + C56059) * C822 +
            (C56060 + C56061) * C828 + (C56062 + C56063) * C823) *
               C39125 +
           ((C56057 + C56056) * C826 + (C56059 + C56058) * C821 -
            (C56061 + C56060) * C827 - (C56063 + C56062) * C822 +
            (C56065 + C56064) * C828 + (C56067 + C56066) * C823) *
               C39126) *
              C90623 * C90753 +
          (((C57961 + C57962) * C827 -
            ((C56030 * C4663 + C55626 * C5195 + C56029 * C1707 +
              C55625 * C2268) *
                 C821 +
             (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
              C55625 * C2264) *
                 C826) +
            (C57963 + C57964) * C822 - (C57965 + C57966) * C828 -
            (C57967 + C57968) * C823) *
               C39125 +
           ((C57966 + C57965) * C827 -
            ((C57964 + C57963) * C821 + (C57962 + C57961) * C826) +
            (C57968 + C57967) * C822 -
            (C56030 * C4659 + C55626 * C5194 + C56029 * C1699 +
             C55625 * C2266) *
                C828 -
            (C56030 * C4667 + C55626 * C5198 + C56029 * C1709 +
             C55625 * C2271) *
                C823) *
               C39126) *
              C90623 * C90579) *
         C90541) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                 C3364 +
             (C56029 * C116 + C55625 * C561 + C56030 * C1707 + C55626 * C2268) *
                 C90498) *
                C39125 +
            ((C56057 + C56056) * C3364 + (C56059 + C56058) * C90498) * C39126) *
               C90623 * C90753 -
           (((C57964 + C57963) * C90498 + (C57962 + C57961) * C3364) * C39126 +
            ((C56030 * C4663 + C55626 * C5195 + C56029 * C1707 +
              C55625 * C2268) *
                 C90498 +
             (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
              C55625 * C2264) *
                 C3364) *
                C39125) *
               C90623 * C90579) *
              C2565 +
          ((((C56029 * C3891 + C55625 * C4407 + C56030 * C5471 +
              C55626 * C5951) *
                 C3364 +
             (C56029 * C3900 + C55625 * C4413 + C56030 * C5474 +
              C55626 * C5954) *
                 C90498) *
                C39125 +
            ((C56029 * C3892 + C55625 * C4408 + C56030 * C5470 +
              C55626 * C5950) *
                 C3364 +
             (C56029 * C3901 + C55625 * C4414 + C56030 * C5473 +
              C55626 * C5953) *
                 C90498) *
                C39126) *
               C90623 * C90579 -
           (((C56945 + C56944) * C90498 + (C56943 + C56942) * C3364) * C39126 +
            ((C56030 * C3900 + C55626 * C4413 + C56029 * C839 +
              C55625 * C1400) *
                 C90498 +
             (C56030 * C3891 + C55626 * C4407 + C56029 * C832 +
              C55625 * C1396) *
                 C3364) *
                C39125) *
               C90623 * C90753) *
              C2566 +
          ((((C56029 * C2570 + C55625 * C3105 + C56030 * C3896 +
              C55626 * C4412) *
                 C3364 +
             (C56029 * C2577 + C55625 * C3109 + C56030 * C3905 +
              C55626 * C4418) *
                 C90498) *
                C39125 +
            ((C58904 + C58903) * C3364 + (C58906 + C58905) * C90498) * C39126) *
               C90623 * C90753 -
           (((C56030 * C17656 + C55626 * C18122 + C56029 * C3904 +
              C55625 * C4417) *
                 C90498 +
             (C56030 * C17652 + C55626 * C18120 + C56029 * C3895 +
              C55625 * C4411) *
                 C3364) *
                C39126 +
            ((C56030 * C17654 + C55626 * C18121 + C56029 * C3905 +
              C55625 * C4418) *
                 C90498 +
             (C56030 * C17651 + C55626 * C18119 + C56029 * C3896 +
              C55625 * C4412) *
                 C3364) *
                C39125) *
               C90623 * C90579) *
              C2567)) /
            (p * q * std::sqrt(p + q));
    d2eezy[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                 C181 +
             (C56029 * C182 + C55625 * C641 + C56030 * C1794 + C55626 * C2368) *
                 C90541) *
                C39125 +
            ((C56057 + C56056) * C181 + (C56146 + C56147) * C90541) * C39126) *
               C90623 * C821 -
           (((C56148 + C56149) * C90541 + (C56061 + C56060) * C181) * C39126 +
            ((C56147 + C56146) * C90541 + (C56056 + C56057) * C181) * C39125) *
               C90623 * C822 +
           (((C56060 + C56061) * C181 + (C56149 + C56148) * C90541) * C39125 +
            ((C56065 + C56064) * C181 + (C56150 + C56151) * C90541) * C39126) *
               C90623 * C823) *
              C90753 +
          ((((C57961 + C57962) * C181 + (C58075 + C58076) * C90541) * C39125 +
            ((C57966 + C57965) * C181 + (C58077 + C58078) * C90541) * C39126) *
               C90623 * C822 -
           (((C58076 + C58075) * C90541 + (C57962 + C57961) * C181) * C39126 +
            ((C56030 * C4746 + C55626 * C5285 + C56029 * C1794 +
              C55625 * C2368) *
                 C90541 +
             (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
              C55625 * C2264) *
                 C181) *
                C39125) *
               C90623 * C821 -
           (((C56030 * C4749 + C55626 * C5288 + C56029 * C1793 +
              C55625 * C2367) *
                 C90541 +
             (C56030 * C4659 + C55626 * C5194 + C56029 * C1699 +
              C55625 * C2266) *
                 C181) *
                C39126 +
            ((C58078 + C58077) * C90541 + (C57965 + C57966) * C181) * C39125) *
               C90623 * C823) *
              C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C2660 +
            (C56029 * C182 + C55625 * C641 + C56030 * C1794 + C55626 * C2368) *
                C2565 -
            (C56030 * C3891 + C55626 * C4407 + C56029 * C832 + C55625 * C1396) *
                C2661 -
            (C56030 * C3989 + C55626 * C4493 + C56029 * C927 + C55625 * C1497) *
                C2566 +
            (C56029 * C2570 + C55625 * C3105 + C56030 * C3896 +
             C55626 * C4412) *
                C2662 +
            (C56029 * C2663 + C55625 * C3199 + C56030 * C3994 +
             C55626 * C4494) *
                C2567) *
               C39125 +
           ((C56057 + C56056) * C2660 + (C56146 + C56147) * C2565 -
            (C56943 + C56942) * C2661 - (C57056 + C57057) * C2566 +
            (C58904 + C58903) * C2662 + (C59009 + C59010) * C2567) *
               C39126) *
              C90623 * C90498 * C90753 +
          (((C56029 * C3891 + C55625 * C4407 + C56030 * C5471 +
             C55626 * C5951) *
                C2661 -
            ((C56030 * C4746 + C55626 * C5285 + C56029 * C1794 +
              C55625 * C2368) *
                 C2565 +
             (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
              C55625 * C2264) *
                 C2660) +
            (C56029 * C3989 + C55625 * C4493 + C56030 * C5557 +
             C55626 * C6029) *
                C2566 -
            (C56030 * C17651 + C55626 * C18119 + C56029 * C3896 +
             C55625 * C4412) *
                C2662 -
            (C56030 * C17733 + C55626 * C18197 + C56029 * C3994 +
             C55625 * C4494) *
                C2567) *
               C39125 +
           ((C56029 * C3892 + C55625 * C4408 + C56030 * C5470 +
             C55626 * C5950) *
                C2661 -
            ((C58076 + C58075) * C2565 + (C57962 + C57961) * C2660) +
            (C56029 * C3990 + C55625 * C4495 + C56030 * C5556 +
             C55626 * C6030) *
                C2566 -
            (C56030 * C17652 + C55626 * C18120 + C56029 * C3895 +
             C55625 * C4411) *
                C2662 -
            (C56030 * C17734 + C55626 * C18198 + C56029 * C3993 +
             C55625 * C4496) *
                C2567) *
               C39126) *
              C90623 * C90498 * C90579)) /
            (p * q * std::sqrt(p + q));
    d2eezz[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C1875 +
            (C56029 * C245 + C55625 * C719 + C56030 * C1879 + C55626 * C2460) *
                C90753 -
            (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
             C55625 * C2264) *
                C1876 -
            (C56030 * C4831 + C55626 * C5373 + C56029 * C1879 +
             C55625 * C2460) *
                C90579) *
               C39125 +
           ((C56057 + C56056) * C1875 + (C56230 + C56231) * C90753 -
            (C57962 + C57961) * C1876 - (C58185 + C58186) * C90579) *
               C39126) *
              C90623 * C90541 * C821 +
          (((C57961 + C57962) * C1876 -
            ((C56231 + C56230) * C90753 + (C56056 + C56057) * C1875) +
            (C58186 + C58185) * C90579) *
               C39125 +
           ((C57966 + C57965) * C1876 -
            ((C56232 + C56233) * C90753 + (C56061 + C56060) * C1875) +
            (C58187 + C58188) * C90579) *
               C39126) *
              C90623 * C90541 * C822 +
          (((C56060 + C56061) * C1875 + (C56233 + C56232) * C90753 -
            (C57965 + C57966) * C1876 - (C58188 + C58187) * C90579) *
               C39125 +
           ((C56065 + C56064) * C1875 + (C56234 + C56235) * C90753 -
            (C56030 * C4659 + C55626 * C5194 + C56029 * C1699 +
             C55625 * C2266) *
                C1876 -
            (C56030 * C4834 + C55626 * C5376 + C56029 * C1880 +
             C55625 * C2463) *
                C90579) *
               C39126) *
              C90623 * C90541 * C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C56029 * C107 + C55625 * C555 + C56030 * C1700 + C55626 * C2264) *
                C1875 +
            (C56029 * C245 + C55625 * C719 + C56030 * C1879 + C55626 * C2460) *
                C90753 -
            (C56030 * C4656 + C55626 * C5191 + C56029 * C1700 +
             C55625 * C2264) *
                C1876 -
            (C56030 * C4831 + C55626 * C5373 + C56029 * C1879 +
             C55625 * C2460) *
                C90579) *
               C39125 +
           ((C56057 + C56056) * C1875 + (C56230 + C56231) * C90753 -
            (C57962 + C57961) * C1876 - (C58185 + C58186) * C90579) *
               C39126) *
              C90623 * C2565 +
          (((C56029 * C3891 + C55625 * C4407 + C56030 * C5471 +
             C55626 * C5951) *
                C1876 -
            ((C56030 * C4075 + C55626 * C4573 + C56029 * C1011 +
              C55625 * C1602) *
                 C90753 +
             (C56030 * C3891 + C55626 * C4407 + C56029 * C832 +
              C55625 * C1396) *
                 C1875) +
            (C56029 * C4075 + C55625 * C4573 + C56030 * C5637 +
             C55626 * C6106) *
                C90579) *
               C39125 +
           ((C56029 * C3892 + C55625 * C4408 + C56030 * C5470 +
             C55626 * C5950) *
                C1876 -
            ((C57166 + C57167) * C90753 + (C56943 + C56942) * C1875) +
            (C56029 * C4076 + C55625 * C4574 + C56030 * C5636 +
             C55626 * C6107) *
                C90579) *
               C39126) *
              C90623 * C2566 +
          (((C56029 * C2570 + C55625 * C3105 + C56030 * C3896 +
             C55626 * C4412) *
                C1875 +
            (C56029 * C2745 + C55625 * C3295 + C56030 * C4080 +
             C55626 * C4576) *
                C90753 -
            (C56030 * C17651 + C55626 * C18119 + C56029 * C3896 +
             C55625 * C4412) *
                C1876 -
            (C56030 * C17811 + C55626 * C18273 + C56029 * C4080 +
             C55625 * C4576) *
                C90579) *
               C39125 +
           ((C58904 + C58903) * C1875 + (C59113 + C59114) * C90753 -
            (C56030 * C17652 + C55626 * C18120 + C56029 * C3895 +
             C55625 * C4411) *
                C1876 -
            (C56030 * C17812 + C55626 * C18274 + C56029 * C4079 +
             C55625 * C4577) *
                C90579) *
               C39126) *
              C90623 * C2567) *
         C90498) /
            (p * q * std::sqrt(p + q));
    d2eexx[60] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C6694 +
           (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 + C102 * C118 +
            C91 * C127) *
               C90780 -
           (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 + C100 * C108 +
            C89 * C114) *
               C6695 -
           (C102 * C120 + C91 * C128 + C101 * C118 + C90 * C127 + C100 * C117 +
            C89 * C126) *
               C90771 +
           (C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 + C102 * C111 +
            C91 * C121) *
               C6696 +
           (C100 * C118 + C89 * C127 + C101 * C120 + C90 * C128 + C102 * C122 +
            C91 * C129) *
               C6691) *
              C90623 * C90634 * C90567 * C6692 +
          ((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 + C102 * C831 +
            C91 * C836) *
               C6695 -
           ((C102 * C837 + C91 * C844 + C101 * C838 + C90 * C845 + C100 * C839 +
             C89 * C846) *
                C90780 +
            (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 + C100 * C832 +
             C89 * C840) *
                C6694) +
           (C100 * C838 + C89 * C845 + C101 * C837 + C90 * C844 + C102 * C841 +
            C91 * C847) *
               C90771 -
           (C102 * C833 + C91 * C842 + C101 * C831 + C90 * C836 + C100 * C830 +
            C89 * C835) *
               C6696 -
           (C102 * C843 + C91 * C848 + C101 * C841 + C90 * C847 + C100 * C837 +
            C89 * C844) *
               C6691) *
              C90623 * C90634 * C90567 * C90555)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C6694 +
            (C13579 * C116 + C90485 * C125) * C90780 -
            (C13579 * C108 + C90485 * C114) * C6695 -
            (C13579 * C117 + C90485 * C126) * C90771 +
            (C13579 * C109 + C90485 * C115) * C6696 +
            (C13579 * C118 + C90485 * C127) * C6691) *
               C13576 +
           (C19594 + C19595 - C19596 - C19597 + C19598 + C19599) * C13577 +
           (C19600 + C19601 - C19602 - C19603 + C19604 + C19605) * C13578) *
              C90634 * C90567 * C6692 +
          ((C19596 - (C19595 + C19594) + C19597 - C19598 - C19599) * C13576 +
           (C19602 - (C19601 + C19600) + C19603 - C19604 - C19605) * C13577 +
           (C15551 * C6695 - (C15552 * C90780 + C15553 * C6694) +
            C15554 * C90771 - (C13579 * C3365 + C90485 * C3371) * C6696 -
            (C13579 * C3368 + C90485 * C3374) * C6691) *
               C13578) *
              C90634 * C90567 * C90555)) /
            (p * q * std::sqrt(p + q));
    d2eexy[60] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                      C102 * C109 + C91 * C115) *
                         C6771 +
                     (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 +
                      C102 * C184 + C91 * C190) *
                         C6692 -
                     (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                      C100 * C832 + C89 * C840) *
                         C6772 -
                     (C102 * C925 + C91 * C930 + C101 * C926 + C90 * C931 +
                      C100 * C927 + C89 * C932) *
                         C90555) *
                        C90623 * C90634 * C90780 +
                    ((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 +
                      C102 * C831 + C91 * C836) *
                         C6772 -
                     ((C102 * C185 + C91 * C191 + C101 * C184 + C90 * C190 +
                       C100 * C183 + C89 * C189) *
                          C6692 +
                      (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                       C100 * C108 + C89 * C114) *
                          C6771) +
                     (C100 * C926 + C89 * C931 + C101 * C925 + C90 * C930 +
                      C102 * C928 + C91 * C933) *
                         C90555) *
                        C90623 * C90634 * C90771 +
                    ((C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 +
                      C102 * C111 + C91 * C121) *
                         C6771 +
                     (C100 * C184 + C89 * C190 + C101 * C185 + C90 * C191 +
                      C102 * C186 + C91 * C192) *
                         C6692 -
                     (C102 * C833 + C91 * C842 + C101 * C831 + C90 * C836 +
                      C100 * C830 + C89 * C835) *
                         C6772 -
                     (C102 * C929 + C91 * C934 + C101 * C928 + C90 * C933 +
                      C100 * C925 + C89 * C930) *
                         C90555) *
                        C90623 * C90634 * C6691) *
                   C90567) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C13579 * C107 + C90485 * C113) * C6771 +
                      (C13579 * C182 + C90485 * C188) * C6692 - C14082 * C6772 -
                      C14192 * C90555) *
                         C13576 +
                     (C14082 * C6771 + C14192 * C6692 - C14088 * C6772 -
                      C14193 * C90555) *
                         C13577 +
                     (C14088 * C6771 + C14193 * C6692 - C15553 * C6772 -
                      C15643 * C90555) *
                         C13578) *
                        C90634 * C90780 +
                    ((C14084 * C6772 -
                      ((C13579 * C183 + C90485 * C189) * C6692 +
                       (C13579 * C108 + C90485 * C114) * C6771) +
                      C14194 * C90555) *
                         C13576 +
                     (C14090 * C6772 - (C14194 * C6692 + C14084 * C6771) +
                      C14195 * C90555) *
                         C13577 +
                     (C15551 * C6772 - (C14195 * C6692 + C14090 * C6771) +
                      C15644 * C90555) *
                         C13578) *
                        C90634 * C90771 +
                    (((C13579 * C109 + C90485 * C115) * C6771 +
                      (C13579 * C184 + C90485 * C190) * C6692 - C14086 * C6772 -
                      C14196 * C90555) *
                         C13576 +
                     (C14086 * C6771 + C14196 * C6692 - C14092 * C6772 -
                      C14197 * C90555) *
                         C13577 +
                     (C14092 * C6771 + C14197 * C6692 -
                      (C13579 * C3365 + C90485 * C3371) * C6772 -
                      (C13579 * C3431 + C90485 * C3434) * C90555) *
                         C13578) *
                        C90634 * C6691) *
                   C90567) /
                      (p * q * std::sqrt(p + q));
    d2eexz[60] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                       C102 * C109 + C91 * C115) *
                          C244 +
                      (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 +
                       C102 * C247 + C91 * C253) *
                          C90567) *
                         C90623 * C90634 * C6692 -
                     ((C102 * C1009 + C91 * C1014 + C101 * C1010 + C90 * C1015 +
                       C100 * C1011 + C89 * C1016) *
                          C90567 +
                      (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                       C100 * C832 + C89 * C840) *
                          C244) *
                         C90623 * C90634 * C90555) *
                        C90780 +
                    (((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 +
                       C102 * C831 + C91 * C836) *
                          C244 +
                      (C100 * C1010 + C89 * C1015 + C101 * C1009 + C90 * C1014 +
                       C102 * C1012 + C91 * C1017) *
                          C90567) *
                         C90623 * C90634 * C90555 -
                     ((C102 * C248 + C91 * C254 + C101 * C247 + C90 * C253 +
                       C100 * C246 + C89 * C252) *
                          C90567 +
                      (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                       C100 * C108 + C89 * C114) *
                          C244) *
                         C90623 * C90634 * C6692) *
                        C90771 +
                    (((C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 +
                       C102 * C111 + C91 * C121) *
                          C244 +
                      (C100 * C247 + C89 * C253 + C101 * C248 + C90 * C254 +
                       C102 * C249 + C91 * C255) *
                          C90567) *
                         C90623 * C90634 * C6692 -
                     ((C102 * C1013 + C91 * C1018 + C101 * C1012 + C90 * C1017 +
                       C100 * C1009 + C89 * C1014) *
                          C90567 +
                      (C102 * C833 + C91 * C842 + C101 * C831 + C90 * C836 +
                       C100 * C830 + C89 * C835) *
                          C244) *
                         C90623 * C90634 * C90555) *
                        C6691)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C13579 * C107 + C90485 * C113) * C244 +
                       (C13579 * C245 + C90485 * C251) * C90567) *
                          C13576 +
                      (C14272 + C14296) * C13577 + C15723 * C13578) *
                         C90634 * C6692 -
                     (C16420 * C13578 + (C14297 + C14275) * C13577 +
                      (C14296 + C14272) * C13576) *
                         C90634 * C90555) *
                        C90780 +
                    (((C14278 + C14298) * C13576 + (C14281 + C14299) * C13577 +
                      (C15727 + C15734) * C13578) *
                         C90634 * C90555 -
                     (C15730 * C13578 + (C14298 + C14278) * C13577 +
                      ((C13579 * C246 + C90485 * C252) * C90567 +
                       (C13579 * C108 + C90485 * C114) * C244) *
                          C13576) *
                         C90634 * C6692) *
                        C90771 +
                    ((((C13579 * C109 + C90485 * C115) * C244 +
                       (C13579 * C247 + C90485 * C253) * C90567) *
                          C13576 +
                      (C14284 + C14300) * C13577 + (C14287 + C14301) * C13578) *
                         C90634 * C6692 -
                     (((C13579 * C3487 + C90485 * C3490) * C90567 +
                       (C13579 * C3365 + C90485 * C3371) * C244) *
                          C13578 +
                      (C14301 + C14287) * C13577 + (C14300 + C14284) * C13576) *
                         C90634 * C90555) *
                        C6691)) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[60] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C307 * C107 + C90623 * C308) * C6694 +
                      (C307 * C116 + C90623 * C314) * C90780 - C337 * C6695 -
                      C338 * C90771 + C339 * C6696 + C340 * C6691) *
                         C90634 * C89 +
                     (C337 * C6694 + C338 * C90780 - C339 * C6695 -
                      C340 * C90771 + C341 * C6696 + C342 * C6691) *
                         C90634 * C90 +
                     (C339 * C6694 + C340 * C90780 - C341 * C6695 -
                      C342 * C90771 + C343 * C6696 + C344 * C6691) *
                         C90634 * C91) *
                        C90567 * C6692 +
                    ((C1116 * C6695 -
                      ((C307 * C839 + C90623 * C1098) * C90780 +
                       (C307 * C832 + C90623 * C1094) * C6694) +
                      C1117 * C90771 - C1118 * C6696 - C1119 * C6691) *
                         C90634 * C89 +
                     (C1118 * C6695 - (C1117 * C90780 + C1116 * C6694) +
                      C1119 * C90771 - C1120 * C6696 - C1121 * C6691) *
                         C90634 * C90 +
                     (C1120 * C6695 - (C1119 * C90780 + C1118 * C6694) +
                      C1121 * C90771 - (C307 * C833 + C90623 * C1097) * C6696 -
                      (C307 * C843 + C90623 * C1102) * C6691) *
                         C90634 * C91) *
                        C90567 * C90555)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((C13730 * C107 + C13576 * C308 + C13731 * C832 +
                      C13577 * C1094 + C13732 * C2570 + C13578 * C2827) *
                         C6694 +
                     (C13730 * C116 + C13576 * C314 + C13731 * C839 +
                      C13577 * C1098 + C13732 * C2577 + C13578 * C2831) *
                         C90780 -
                     (C13732 * C2571 + C13578 * C2828 + C13731 * C829 +
                      C13577 * C1093 + C13730 * C108 + C13576 * C309) *
                         C6695 -
                     (C13732 * C2578 + C13578 * C2832 + C13731 * C838 +
                      C13577 * C1099 + C13730 * C117 + C13576 * C315) *
                         C90771 +
                     (C13730 * C109 + C13576 * C310 + C13731 * C830 +
                      C13577 * C1095 + C13732 * C2572 + C13578 * C2829) *
                         C6696 +
                     (C13730 * C118 + C13576 * C316 + C13731 * C837 +
                      C13577 * C1100 + C13732 * C2579 + C13578 * C2833) *
                         C6691) *
                        C90634 * C90485 * C90567 * C6692 +
                    ((C13730 * C829 + C13576 * C1093 + C13731 * C2571 +
                      C13577 * C2828 + C13732 * C3366 + C13578 * C3544) *
                         C6695 -
                     ((C13732 * C3370 + C13578 * C3548 + C13731 * C2577 +
                       C13577 * C2831 + C13730 * C839 + C13576 * C1098) *
                          C90780 +
                      (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 +
                       C13577 * C2827 + C13730 * C832 + C13576 * C1094) *
                          C6694) +
                     (C13730 * C838 + C13576 * C1099 + C13731 * C2578 +
                      C13577 * C2832 + C13732 * C3369 + C13578 * C3547) *
                         C90771 -
                     (C13732 * C3365 + C13578 * C3543 + C13731 * C2572 +
                      C13577 * C2829 + C13730 * C830 + C13576 * C1095) *
                         C6696 -
                     (C13732 * C3368 + C13578 * C3546 + C13731 * C2579 +
                      C13577 * C2833 + C13730 * C837 + C13576 * C1100) *
                         C6691) *
                        C90634 * C90485 * C90567 * C90555)) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[60] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C6771 +
            (C307 * C182 + C90623 * C394) * C6692 -
            (C307 * C832 + C90623 * C1094) * C6772 -
            (C307 * C927 + C90623 * C1195) * C90555) *
               C90634 * C89 +
           (C6996 + C6997 - C6998 - C6999) * C90634 * C90 + C7011 * C91) *
              C90780 +
          ((C6998 - (C6997 + C6996) + C6999) * C90634 * C89 +
           (C7002 - (C7001 + C7000) + C7003) * C90634 * C90 +
           (C7004 - (C7005 + C7006) + C7007) * C90634 * C91) *
              C90771 +
          (C7011 * C89 + (C7006 + C7005 - C7004 - C7007) * C90634 * C90 +
           (C343 * C6771 + C416 * C6692 -
            (C307 * C833 + C90623 * C1097) * C6772 -
            (C307 * C929 + C90623 * C1199) * C90555) *
               C90634 * C91) *
              C6691) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C6771 +
           (C13730 * C182 + C13576 * C394 + C13731 * C927 + C13577 * C1195 +
            C13732 * C2663 + C13578 * C2921) *
               C6692 -
           (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
            C13730 * C832 + C13576 * C1094) *
               C6772 -
           (C13732 * C3433 + C13578 * C3599 + C13731 * C2663 + C13577 * C2921 +
            C13730 * C927 + C13576 * C1195) *
               C90555) *
              C90634 * C90485 * C90780 +
          ((C13730 * C829 + C13576 * C1093 + C13731 * C2571 + C13577 * C2828 +
            C13732 * C3366 + C13578 * C3544) *
               C6772 -
           ((C13732 * C2664 + C13578 * C2922 + C13731 * C926 + C13577 * C1196 +
             C13730 * C183 + C13576 * C395) *
                C6692 +
            (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
             C13730 * C108 + C13576 * C309) *
                C6771) +
           (C13730 * C926 + C13576 * C1196 + C13731 * C2664 + C13577 * C2922 +
            C13732 * C3432 + C13578 * C3600) *
               C90555) *
              C90634 * C90485 * C90771 +
          ((C13730 * C109 + C13576 * C310 + C13731 * C830 + C13577 * C1095 +
            C13732 * C2572 + C13578 * C2829) *
               C6771 +
           (C13730 * C184 + C13576 * C396 + C13731 * C925 + C13577 * C1197 +
            C13732 * C2665 + C13578 * C2923) *
               C6692 -
           (C13732 * C3365 + C13578 * C3543 + C13731 * C2572 + C13577 * C2829 +
            C13730 * C830 + C13576 * C1095) *
               C6772 -
           (C13732 * C3431 + C13578 * C3601 + C13731 * C2665 + C13577 * C2923 +
            C13730 * C925 + C13576 * C1197) *
               C90555) *
              C90634 * C90485 * C6691) *
         C90567) /
            (p * q * std::sqrt(p + q));
    d2eeyz[60] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C244 +
             (C307 * C245 + C90623 * C474) * C90567) *
                C90634 * C89 +
            (C481 + C497) * C90634 * C90 + C503 * C91) *
               C6692 -
           (C1321 * C91 + (C1318 + C1310) * C90634 * C90 +
            ((C307 * C1011 + C90623 * C1301) * C90567 +
             (C307 * C832 + C90623 * C1094) * C244) *
                C90634 * C89) *
               C90555) *
              C90780 +
          (((C1310 + C1318) * C90634 * C89 + (C1307 + C1317) * C90634 * C90 +
            (C1311 + C1319) * C90634 * C91) *
               C90555 -
           (C504 * C91 + (C498 + C484) * C90634 * C90 +
            (C497 + C481) * C90634 * C89) *
               C6692) *
              C90771 +
          ((C503 * C89 + (C489 + C499) * C90634 * C90 +
            (C490 + C500) * C90634 * C91) *
               C6692 -
           (((C307 * C1013 + C90623 * C1303) * C90567 +
             (C307 * C833 + C90623 * C1097) * C244) *
                C90634 * C91 +
            (C1319 + C1311) * C90634 * C90 + C1321 * C89) *
               C90555) *
              C6691)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
             C13732 * C2570 + C13578 * C2827) *
                C244 +
            (C13730 * C245 + C13576 * C474 + C13731 * C1011 + C13577 * C1301 +
             C13732 * C2745 + C13578 * C3017) *
                C90567) *
               C90634 * C90485 * C6692 -
           ((C13732 * C3489 + C13578 * C3654 + C13731 * C2745 + C13577 * C3017 +
             C13730 * C1011 + C13576 * C1301) *
                C90567 +
            (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
             C13730 * C832 + C13576 * C1094) *
                C244) *
               C90634 * C90485 * C90555) *
              C90780 +
          (((C13730 * C829 + C13576 * C1093 + C13731 * C2571 + C13577 * C2828 +
             C13732 * C3366 + C13578 * C3544) *
                C244 +
            (C13730 * C1010 + C13576 * C1300 + C13731 * C2746 + C13577 * C3018 +
             C13732 * C3488 + C13578 * C3653) *
                C90567) *
               C90634 * C90485 * C90555 -
           ((C13732 * C2746 + C13578 * C3018 + C13731 * C1010 + C13577 * C1300 +
             C13730 * C246 + C13576 * C475) *
                C90567 +
            (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
             C13730 * C108 + C13576 * C309) *
                C244) *
               C90634 * C90485 * C6692) *
              C90771 +
          (((C13730 * C109 + C13576 * C310 + C13731 * C830 + C13577 * C1095 +
             C13732 * C2572 + C13578 * C2829) *
                C244 +
            (C13730 * C247 + C13576 * C476 + C13731 * C1009 + C13577 * C1299 +
             C13732 * C2747 + C13578 * C3019) *
                C90567) *
               C90634 * C90485 * C6692 -
           ((C13732 * C3487 + C13578 * C3652 + C13731 * C2747 + C13577 * C3019 +
             C13730 * C1009 + C13576 * C1299) *
                C90567 +
            (C13732 * C3365 + C13578 * C3543 + C13731 * C2572 + C13577 * C2829 +
             C13730 * C830 + C13576 * C1095) *
                C244) *
               C90634 * C90485 * C90555) *
              C6691)) /
            (p * q * std::sqrt(p + q));
    d2eezx[60] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C6694 +
            (C554 * C116 + C90634 * C561) * C90780 - C584 * C6695 -
            C585 * C90771 + C586 * C6696 + C587 * C6691) *
               C89 +
           (C584 * C6694 + C585 * C90780 - C586 * C6695 - C587 * C90771 +
            C588 * C6696 + C589 * C6691) *
               C90 +
           (C586 * C6694 + C587 * C90780 - C588 * C6695 - C589 * C90771 +
            C590 * C6696 + C591 * C6691) *
               C91) *
              C90623 * C90567 * C6692 +
          ((C1418 * C6695 -
            ((C554 * C839 + C90634 * C1400) * C90780 +
             (C554 * C832 + C90634 * C1396) * C6694) +
            C1419 * C90771 - C1420 * C6696 - C1421 * C6691) *
               C89 +
           (C1420 * C6695 - (C1419 * C90780 + C1418 * C6694) + C1421 * C90771 -
            C1422 * C6696 - C1423 * C6691) *
               C90 +
           (C1422 * C6695 - (C1421 * C90780 + C1420 * C6694) + C1423 * C90771 -
            (C554 * C833 + C90634 * C1399) * C6696 -
            (C554 * C843 + C90634 * C1404) * C6691) *
               C91) *
              C90623 * C90567 * C90555)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C6694 +
            (C554 * C116 + C90634 * C561) * C90780 - C584 * C6695 -
            C585 * C90771 + C586 * C6696 + C587 * C6691) *
               C90485 * C13576 +
           (C20050 + C20051 - C20052 - C20053 + C20054 + C20055) * C90485 *
               C13577 +
           (C20056 + C20057 - C20058 - C20059 + C20060 + C20061) * C90485 *
               C13578) *
              C90567 * C6692 +
          ((C20052 - (C20051 + C20050) + C20053 - C20054 - C20055) * C90485 *
               C13576 +
           (C20058 - (C20057 + C20056) + C20059 - C20060 - C20061) * C90485 *
               C13577 +
           (C16060 * C6695 - (C16061 * C90780 + C16062 * C6694) +
            C16063 * C90771 - (C554 * C3365 + C90634 * C3705) * C6696 -
            (C554 * C3368 + C90634 * C3708) * C6691) *
               C90485 * C13578) *
              C90567 * C90555)) /
            (p * q * std::sqrt(p + q));
    d2eezy[60] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C6771 +
            (C554 * C182 + C90634 * C641) * C6692 -
            (C554 * C832 + C90634 * C1396) * C6772 -
            (C554 * C927 + C90634 * C1497) * C90555) *
               C89 +
           (C7234 + C7235 - C7236 - C7237) * C90 + C7248 * C91) *
              C90623 * C90780 +
          ((C7236 - (C7235 + C7234) + C7237) * C89 +
           (C7240 - (C7239 + C7238) + C7241) * C90 +
           (C7242 - (C7243 + C7244) + C7245) * C91) *
              C90623 * C90771 +
          (C7248 * C89 + (C7244 + C7243 - C7242 - C7245) * C90 +
           (C590 * C6771 + C663 * C6692 -
            (C554 * C833 + C90634 * C1399) * C6772 -
            (C554 * C929 + C90634 * C1501) * C90555) *
               C91) *
              C90623 * C6691) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C6771 +
            (C554 * C182 + C90634 * C641) * C6692 - C14614 * C6772 -
            C14700 * C90555) *
               C90485 * C13576 +
           (C14614 * C6771 + C14700 * C6692 - C14616 * C6772 -
            C14701 * C90555) *
               C90485 * C13577 +
           (C14616 * C6771 + C14701 * C6692 - C16062 * C6772 -
            C16151 * C90555) *
               C90485 * C13578) *
              C90780 +
          ((C7236 - (C7235 + C7234) + C7237) * C90485 * C13576 +
           (C3122 * C6772 - (C1518 * C6692 + C1418 * C6771) + C3218 * C90555) *
               C90485 * C13577 +
           (C16060 * C6772 - (C3218 * C6692 + C3122 * C6771) +
            C16152 * C90555) *
               C90485 * C13578) *
              C90771 +
          (C7248 * C90485 * C13576 +
           (C1420 * C6771 + C1520 * C6692 - C3124 * C6772 - C3219 * C90555) *
               C90485 * C13577 +
           (C3124 * C6771 + C3219 * C6692 -
            (C554 * C3365 + C90634 * C3705) * C6772 -
            (C554 * C3431 + C90634 * C3763) * C90555) *
               C90485 * C13578) *
              C6691) *
         C90567) /
            (p * q * std::sqrt(p + q));
    d2eezz[60] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C244 +
             (C554 * C245 + C90634 * C719) * C90567) *
                C89 +
            (C726 + C742) * C90 + C746 * C91) *
               C90623 * C6692 -
           (C1621 * C91 + (C1619 + C1611) * C90 +
            ((C554 * C1011 + C90634 * C1602) * C90567 +
             (C554 * C832 + C90634 * C1396) * C244) *
                C89) *
               C90623 * C90555) *
              C90780 +
          (((C1611 + C1619) * C89 + (C1608 + C1618) * C90 +
            (C1612 + C1620) * C91) *
               C90623 * C90555 -
           (C747 * C91 + (C743 + C729) * C90 + (C742 + C726) * C89) * C90623 *
               C6692) *
              C90771 +
          ((C746 * C89 + (C734 + C744) * C90 + (C735 + C745) * C91) * C90623 *
               C6692 -
           (((C554 * C1013 + C90634 * C1604) * C90567 +
             (C554 * C833 + C90634 * C1399) * C244) *
                C91 +
            (C1620 + C1612) * C90 + C1621 * C89) *
               C90623 * C90555) *
              C6691)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C244 +
             (C554 * C245 + C90634 * C719) * C90567) *
                C90485 * C13576 +
            (C14776 + C14784) * C90485 * C13577 + C16237 * C13578) *
               C6692 -
           (C16759 * C13578 + (C14785 + C14779) * C90485 * C13577 +
            (C14784 + C14776) * C90485 * C13576) *
               C90555) *
              C90780 +
          (((C1611 + C1619) * C90485 * C13576 +
            (C3300 + C3308) * C90485 * C13577 +
            (C16233 + C16242) * C90485 * C13578) *
               C90555 -
           (C16240 * C13578 + (C1619 + C1611) * C90485 * C13577 +
            (C742 + C726) * C90485 * C13576) *
               C6692) *
              C90771 +
          ((C746 * C90485 * C13576 + (C1608 + C1618) * C90485 * C13577 +
            (C3303 + C3309) * C90485 * C13578) *
               C6692 -
           (((C554 * C3487 + C90634 * C3814) * C90567 +
             (C554 * C3365 + C90634 * C3705) * C244) *
                C90485 * C13578 +
            (C3309 + C3303) * C90485 * C13577 + C1621 * C90485 * C13576) *
               C90555) *
              C6691)) /
            (p * q * std::sqrt(p + q));
    d2eexx[61] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C7401 +
           (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 + C102 * C118 +
            C91 * C127) *
               C7396 -
           (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 + C100 * C108 +
            C89 * C114) *
               C7402 -
           (C102 * C120 + C91 * C128 + C101 * C118 + C90 * C127 + C100 * C117 +
            C89 * C126) *
               C90503) *
              C90623 * C90634 * C90567 * C90781 +
          ((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 + C102 * C831 +
            C91 * C836) *
               C7402 -
           ((C102 * C837 + C91 * C844 + C101 * C838 + C90 * C845 + C100 * C839 +
             C89 * C846) *
                C7396 +
            (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 + C100 * C832 +
             C89 * C840) *
                C7401) +
           (C100 * C838 + C89 * C845 + C101 * C837 + C90 * C844 + C102 * C841 +
            C91 * C847) *
               C90503) *
              C90623 * C90634 * C90567 * C90774 +
          ((C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
            C102 * C2572 + C91 * C2576) *
               C7401 +
           (C100 * C2577 + C89 * C2582 + C101 * C2578 + C90 * C2583 +
            C102 * C2579 + C91 * C2584) *
               C7396 -
           (C102 * C2573 + C91 * C2580 + C101 * C2572 + C90 * C2576 +
            C100 * C2571 + C89 * C2575) *
               C7402 -
           (C102 * C2581 + C91 * C2585 + C101 * C2579 + C90 * C2584 +
            C100 * C2578 + C89 * C2583) *
               C90503) *
              C90623 * C90634 * C90567 * C7400)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C7401 +
            (C13579 * C116 + C90485 * C125) * C7396 -
            (C13579 * C108 + C90485 * C114) * C7402 -
            (C13579 * C117 + C90485 * C126) * C90503) *
               C13576 +
           (C20284 + C20285 - C20286 - C20287) * C13577 + C20298 * C13578) *
              C90634 * C90567 * C90781 +
          ((C20286 - (C20285 + C20284) + C20287) * C13576 +
           (C20290 - (C20289 + C20288) + C20291) * C13577 +
           (C20292 - (C20293 + C20294) + C20295) * C13578) *
              C90634 * C90567 * C90774 +
          (C20298 * C13576 + (C20294 + C20293 - C20292 - C20295) * C13577 +
           (C16309 * C7401 + C16310 * C7396 -
            (C13579 * C15526 + C90485 * C15529) * C7402 -
            (C13579 * C15530 + C90485 * C15532) * C90503) *
               C13578) *
              C90634 * C90567 * C7400)) /
            (p * q * std::sqrt(p + q));
    d2eexy[61] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C7477 +
           (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 + C102 * C184 +
            C91 * C190) *
               C90781 -
           (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 + C100 * C832 +
            C89 * C840) *
               C7478 -
           (C102 * C925 + C91 * C930 + C101 * C926 + C90 * C931 + C100 * C927 +
            C89 * C932) *
               C90774 +
           (C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
            C102 * C2572 + C91 * C2576) *
               C7479 +
           (C100 * C2663 + C89 * C2667 + C101 * C2664 + C90 * C2668 +
            C102 * C2665 + C91 * C2669) *
               C7400) *
              C90623 * C90634 * C7396 +
          ((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 + C102 * C831 +
            C91 * C836) *
               C7478 -
           ((C102 * C185 + C91 * C191 + C101 * C184 + C90 * C190 + C100 * C183 +
             C89 * C189) *
                C90781 +
            (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 + C100 * C108 +
             C89 * C114) *
                C7477) +
           (C100 * C926 + C89 * C931 + C101 * C925 + C90 * C930 + C102 * C928 +
            C91 * C933) *
               C90774 -
           (C102 * C2573 + C91 * C2580 + C101 * C2572 + C90 * C2576 +
            C100 * C2571 + C89 * C2575) *
               C7479 -
           (C102 * C2666 + C91 * C2670 + C101 * C2665 + C90 * C2669 +
            C100 * C2664 + C89 * C2668) *
               C7400) *
              C90623 * C90634 * C90503) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C7477 +
            (C13579 * C182 + C90485 * C188) * C90781 - C14082 * C7478 -
            C14192 * C90774 + C14088 * C7479 + C14193 * C7400) *
               C13576 +
           (C14082 * C7477 + C14192 * C90781 - C14088 * C7478 -
            C14193 * C90774 + C15553 * C7479 + C15643 * C7400) *
               C13577 +
           (C14088 * C7477 + C14193 * C90781 - C15553 * C7478 -
            C15643 * C90774 + C16309 * C7479 + C16367 * C7400) *
               C13578) *
              C90634 * C7396 +
          ((C14084 * C7478 -
            ((C13579 * C183 + C90485 * C189) * C90781 +
             (C13579 * C108 + C90485 * C114) * C7477) +
            C14194 * C90774 - C14090 * C7479 - C14195 * C7400) *
               C13576 +
           (C14090 * C7478 - (C14194 * C90781 + C14084 * C7477) +
            C14195 * C90774 - C15551 * C7479 - C15644 * C7400) *
               C13577 +
           (C15551 * C7478 - (C14195 * C90781 + C14090 * C7477) +
            C15644 * C90774 - (C13579 * C15526 + C90485 * C15529) * C7479 -
            (C13579 * C15635 + C90485 * C15637) * C7400) *
               C13578) *
              C90634 * C90503) *
         C90567) /
            (p * q * std::sqrt(p + q));
    d2eexz[61] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                       C102 * C109 + C91 * C115) *
                          C244 +
                      (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 +
                       C102 * C247 + C91 * C253) *
                          C90567) *
                         C90623 * C90634 * C90781 -
                     ((C102 * C1009 + C91 * C1014 + C101 * C1010 + C90 * C1015 +
                       C100 * C1011 + C89 * C1016) *
                          C90567 +
                      (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                       C100 * C832 + C89 * C840) *
                          C244) *
                         C90623 * C90634 * C90774 +
                     ((C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
                       C102 * C2572 + C91 * C2576) *
                          C244 +
                      (C100 * C2745 + C89 * C2749 + C101 * C2746 + C90 * C2750 +
                       C102 * C2747 + C91 * C2751) *
                          C90567) *
                         C90623 * C90634 * C7400) *
                        C7396 +
                    (((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 +
                       C102 * C831 + C91 * C836) *
                          C244 +
                      (C100 * C1010 + C89 * C1015 + C101 * C1009 + C90 * C1014 +
                       C102 * C1012 + C91 * C1017) *
                          C90567) *
                         C90623 * C90634 * C90774 -
                     ((C102 * C248 + C91 * C254 + C101 * C247 + C90 * C253 +
                       C100 * C246 + C89 * C252) *
                          C90567 +
                      (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                       C100 * C108 + C89 * C114) *
                          C244) *
                         C90623 * C90634 * C90781 -
                     ((C102 * C2748 + C91 * C2752 + C101 * C2747 + C90 * C2751 +
                       C100 * C2746 + C89 * C2750) *
                          C90567 +
                      (C102 * C2573 + C91 * C2580 + C101 * C2572 + C90 * C2576 +
                       C100 * C2571 + C89 * C2575) *
                          C244) *
                         C90623 * C90634 * C7400) *
                        C90503)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C13579 * C107 + C90485 * C113) * C244 +
                       (C13579 * C245 + C90485 * C251) * C90567) *
                          C13576 +
                      (C14272 + C14296) * C13577 + C15723 * C13578) *
                         C90634 * C90781 -
                     (C16420 * C13578 + (C14297 + C14275) * C13577 +
                      (C14296 + C14272) * C13576) *
                         C90634 * C90774 +
                     (C15723 * C13576 + (C15726 + C15733) * C13577 +
                      (C16421 + C16425) * C13578) *
                         C90634 * C7400) *
                        C7396 +
                    (((C14278 + C14298) * C13576 + (C14281 + C14299) * C13577 +
                      (C15727 + C15734) * C13578) *
                         C90634 * C90774 -
                     (C15730 * C13578 + (C14298 + C14278) * C13577 +
                      ((C13579 * C246 + C90485 * C252) * C90567 +
                       (C13579 * C108 + C90485 * C114) * C244) *
                          C13576) *
                         C90634 * C90781 -
                     (((C13579 * C15719 + C90485 * C15721) * C90567 +
                       (C13579 * C15526 + C90485 * C15529) * C244) *
                          C13578 +
                      (C15734 + C15727) * C13577 + C15730 * C13576) *
                         C90634 * C7400) *
                        C90503)) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[61] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C7401 +
            (C307 * C116 + C90623 * C314) * C7396 - C337 * C7402 -
            C338 * C90503) *
               C90634 * C89 +
           (C337 * C7401 + C338 * C7396 - C339 * C7402 - C340 * C90503) *
               C90634 * C90 +
           (C339 * C7401 + C340 * C7396 - C341 * C7402 - C342 * C90503) *
               C90634 * C91) *
              C90567 * C90781 +
          ((C1116 * C7402 -
            ((C307 * C839 + C90623 * C1098) * C7396 +
             (C307 * C832 + C90623 * C1094) * C7401) +
            C1117 * C90503) *
               C90634 * C89 +
           (C1118 * C7402 - (C1117 * C7396 + C1116 * C7401) + C1119 * C90503) *
               C90634 * C90 +
           (C1120 * C7402 - (C1119 * C7396 + C1118 * C7401) + C1121 * C90503) *
               C90634 * C91) *
              C90567 * C90774 +
          (((C307 * C2570 + C90623 * C2827) * C7401 +
            (C307 * C2577 + C90623 * C2831) * C7396 - C2844 * C7402 -
            C2845 * C90503) *
               C90634 * C89 +
           (C2844 * C7401 + C2845 * C7396 - C2846 * C7402 - C2847 * C90503) *
               C90634 * C90 +
           (C2846 * C7401 + C2847 * C7396 -
            (C307 * C2573 + C90623 * C2830) * C7402 -
            (C307 * C2581 + C90623 * C2834) * C90503) *
               C90634 * C91) *
              C90567 * C7400)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C7401 +
           (C13730 * C116 + C13576 * C314 + C13731 * C839 + C13577 * C1098 +
            C13732 * C2577 + C13578 * C2831) *
               C7396 -
           (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
            C13730 * C108 + C13576 * C309) *
               C7402 -
           (C13732 * C2578 + C13578 * C2832 + C13731 * C838 + C13577 * C1099 +
            C13730 * C117 + C13576 * C315) *
               C90503) *
              C90634 * C90485 * C90567 * C90781 +
          ((C13730 * C829 + C13576 * C1093 + C13731 * C2571 + C13577 * C2828 +
            C13732 * C3366 + C13578 * C3544) *
               C7402 -
           ((C13732 * C3370 + C13578 * C3548 + C13731 * C2577 + C13577 * C2831 +
             C13730 * C839 + C13576 * C1098) *
                C7396 +
            (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
             C13730 * C832 + C13576 * C1094) *
                C7401) +
           (C13730 * C838 + C13576 * C1099 + C13731 * C2578 + C13577 * C2832 +
            C13732 * C3369 + C13578 * C3547) *
               C90503) *
              C90634 * C90485 * C90567 * C90774 +
          ((C13730 * C2570 + C13576 * C2827 + C13731 * C3367 + C13577 * C3545 +
            C13732 * C15525 + C13578 * C15808) *
               C7401 +
           (C13730 * C2577 + C13576 * C2831 + C13731 * C3370 + C13577 * C3548 +
            C13732 * C15528 + C13578 * C15810) *
               C7396 -
           (C13732 * C15526 + C13578 * C15809 + C13731 * C3366 +
            C13577 * C3544 + C13730 * C2571 + C13576 * C2828) *
               C7402 -
           (C13732 * C15530 + C13578 * C15811 + C13731 * C3369 +
            C13577 * C3547 + C13730 * C2578 + C13576 * C2832) *
               C90503) *
              C90634 * C90485 * C90567 * C7400)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[61] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C7477 +
            (C307 * C182 + C90623 * C394) * C90781 -
            (C307 * C832 + C90623 * C1094) * C7478 -
            (C307 * C927 + C90623 * C1195) * C90774 +
            (C307 * C2570 + C90623 * C2827) * C7479 +
            (C307 * C2663 + C90623 * C2921) * C7400) *
               C90634 * C89 +
           (C7703 + C7704 - C7705 - C7706 + C7707 + C7708) * C90634 * C90 +
           (C7709 + C7710 - C7711 - C7712 + C7713 + C7714) * C90634 * C91) *
              C7396 +
          ((C7705 - (C7704 + C7703) + C7706 - C7707 - C7708) * C90634 * C89 +
           (C7711 - (C7710 + C7709) + C7712 - C7713 - C7714) * C90634 * C90 +
           (C1120 * C7478 - (C415 * C90781 + C341 * C7477) + C1219 * C90774 -
            (C307 * C2573 + C90623 * C2830) * C7479 -
            (C307 * C2666 + C90623 * C2924) * C7400) *
               C90634 * C91) *
              C90503) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C7477 +
           (C13730 * C182 + C13576 * C394 + C13731 * C927 + C13577 * C1195 +
            C13732 * C2663 + C13578 * C2921) *
               C90781 -
           (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
            C13730 * C832 + C13576 * C1094) *
               C7478 -
           (C13732 * C3433 + C13578 * C3599 + C13731 * C2663 + C13577 * C2921 +
            C13730 * C927 + C13576 * C1195) *
               C90774 +
           (C13730 * C2570 + C13576 * C2827 + C13731 * C3367 + C13577 * C3545 +
            C13732 * C15525 + C13578 * C15808) *
               C7479 +
           (C13730 * C2663 + C13576 * C2921 + C13731 * C3433 + C13577 * C3599 +
            C13732 * C15634 + C13578 * C15886) *
               C7400) *
              C90634 * C90485 * C7396 +
          ((C13730 * C829 + C13576 * C1093 + C13731 * C2571 + C13577 * C2828 +
            C13732 * C3366 + C13578 * C3544) *
               C7478 -
           ((C13732 * C2664 + C13578 * C2922 + C13731 * C926 + C13577 * C1196 +
             C13730 * C183 + C13576 * C395) *
                C90781 +
            (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
             C13730 * C108 + C13576 * C309) *
                C7477) +
           (C13730 * C926 + C13576 * C1196 + C13731 * C2664 + C13577 * C2922 +
            C13732 * C3432 + C13578 * C3600) *
               C90774 -
           (C13732 * C15526 + C13578 * C15809 + C13731 * C3366 +
            C13577 * C3544 + C13730 * C2571 + C13576 * C2828) *
               C7479 -
           (C13732 * C15635 + C13578 * C15887 + C13731 * C3432 +
            C13577 * C3600 + C13730 * C2664 + C13576 * C2922) *
               C7400) *
              C90634 * C90485 * C90503) *
         C90567) /
            (p * q * std::sqrt(p + q));
    d2eeyz[61] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C244 +
             (C307 * C245 + C90623 * C474) * C90567) *
                C90634 * C89 +
            (C481 + C497) * C90634 * C90 + C503 * C91) *
               C90781 -
           (C1321 * C91 + (C1318 + C1310) * C90634 * C90 +
            ((C307 * C1011 + C90623 * C1301) * C90567 +
             (C307 * C832 + C90623 * C1094) * C244) *
                C90634 * C89) *
               C90774 +
           (((C307 * C2570 + C90623 * C2827) * C244 +
             (C307 * C2745 + C90623 * C3017) * C90567) *
                C90634 * C89 +
            (C3022 + C3030) * C90634 * C90 + (C3025 + C3031) * C90634 * C91) *
               C7400) *
              C7396 +
          (((C1310 + C1318) * C90634 * C89 + (C1307 + C1317) * C90634 * C90 +
            (C1311 + C1319) * C90634 * C91) *
               C90774 -
           (C504 * C91 + (C498 + C484) * C90634 * C90 +
            (C497 + C481) * C90634 * C89) *
               C90781 -
           (((C307 * C2748 + C90623 * C3020) * C90567 +
             (C307 * C2573 + C90623 * C2830) * C244) *
                C90634 * C91 +
            (C3031 + C3025) * C90634 * C90 + (C3030 + C3022) * C90634 * C89) *
               C7400) *
              C90503)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
             C13732 * C2570 + C13578 * C2827) *
                C244 +
            (C13730 * C245 + C13576 * C474 + C13731 * C1011 + C13577 * C1301 +
             C13732 * C2745 + C13578 * C3017) *
                C90567) *
               C90634 * C90485 * C90781 -
           ((C13732 * C3489 + C13578 * C3654 + C13731 * C2745 + C13577 * C3017 +
             C13730 * C1011 + C13576 * C1301) *
                C90567 +
            (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
             C13730 * C832 + C13576 * C1094) *
                C244) *
               C90634 * C90485 * C90774 +
           ((C13730 * C2570 + C13576 * C2827 + C13731 * C3367 + C13577 * C3545 +
             C13732 * C15525 + C13578 * C15808) *
                C244 +
            (C13730 * C2745 + C13576 * C3017 + C13731 * C3489 + C13577 * C3654 +
             C13732 * C15718 + C13578 * C15962) *
                C90567) *
               C90634 * C90485 * C7400) *
              C7396 +
          (((C13730 * C829 + C13576 * C1093 + C13731 * C2571 + C13577 * C2828 +
             C13732 * C3366 + C13578 * C3544) *
                C244 +
            (C13730 * C1010 + C13576 * C1300 + C13731 * C2746 + C13577 * C3018 +
             C13732 * C3488 + C13578 * C3653) *
                C90567) *
               C90634 * C90485 * C90774 -
           ((C13732 * C2746 + C13578 * C3018 + C13731 * C1010 + C13577 * C1300 +
             C13730 * C246 + C13576 * C475) *
                C90567 +
            (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
             C13730 * C108 + C13576 * C309) *
                C244) *
               C90634 * C90485 * C90781 -
           ((C13732 * C15719 + C13578 * C15963 + C13731 * C3488 +
             C13577 * C3653 + C13730 * C2746 + C13576 * C3018) *
                C90567 +
            (C13732 * C15526 + C13578 * C15809 + C13731 * C3366 +
             C13577 * C3544 + C13730 * C2571 + C13576 * C2828) *
                C244) *
               C90634 * C90485 * C7400) *
              C90503)) /
            (p * q * std::sqrt(p + q));
    d2eezx[61] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C7401 +
            (C554 * C116 + C90634 * C561) * C7396 - C584 * C7402 -
            C585 * C90503) *
               C89 +
           (C584 * C7401 + C585 * C7396 - C586 * C7402 - C587 * C90503) * C90 +
           (C586 * C7401 + C587 * C7396 - C588 * C7402 - C589 * C90503) * C91) *
              C90623 * C90567 * C90781 +
          ((C1418 * C7402 -
            ((C554 * C839 + C90634 * C1400) * C7396 +
             (C554 * C832 + C90634 * C1396) * C7401) +
            C1419 * C90503) *
               C89 +
           (C1420 * C7402 - (C1419 * C7396 + C1418 * C7401) + C1421 * C90503) *
               C90 +
           (C1422 * C7402 - (C1421 * C7396 + C1420 * C7401) + C1423 * C90503) *
               C91) *
              C90623 * C90567 * C90774 +
          (((C554 * C2570 + C90634 * C3105) * C7401 +
            (C554 * C2577 + C90634 * C3109) * C7396 - C3122 * C7402 -
            C3123 * C90503) *
               C89 +
           (C3122 * C7401 + C3123 * C7396 - C3124 * C7402 - C3125 * C90503) *
               C90 +
           (C3124 * C7401 + C3125 * C7396 -
            (C554 * C2573 + C90634 * C3108) * C7402 -
            (C554 * C2581 + C90634 * C3112) * C90503) *
               C91) *
              C90623 * C90567 * C7400)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C7401 +
            (C554 * C116 + C90634 * C561) * C7396 - C584 * C7402 -
            C585 * C90503) *
               C90485 * C13576 +
           (C20743 + C20744 - C20745 - C20746) * C90485 * C13577 +
           C20758 * C13578) *
              C90567 * C90781 +
          ((C20745 - (C20744 + C20743) + C20746) * C90485 * C13576 +
           (C20749 - (C20748 + C20747) + C20750) * C90485 * C13577 +
           (C20751 - (C20752 + C20753) + C20754) * C90485 * C13578) *
              C90567 * C90774 +
          (C20758 * C13576 +
           (C20753 + C20752 - C20751 - C20754) * C90485 * C13577 +
           (C16644 * C7401 + C16645 * C7396 -
            (C554 * C15526 + C90634 * C16039) * C7402 -
            (C554 * C15530 + C90634 * C16041) * C90503) *
               C90485 * C13578) *
              C90567 * C7400)) /
            (p * q * std::sqrt(p + q));
    d2eezy[61] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C7477 +
            (C554 * C182 + C90634 * C641) * C90781 -
            (C554 * C832 + C90634 * C1396) * C7478 -
            (C554 * C927 + C90634 * C1497) * C90774 +
            (C554 * C2570 + C90634 * C3105) * C7479 +
            (C554 * C2663 + C90634 * C3199) * C7400) *
               C89 +
           (C7937 + C7938 - C7939 - C7940 + C7941 + C7942) * C90 +
           (C7943 + C7944 - C7945 - C7946 + C7947 + C7948) * C91) *
              C90623 * C7396 +
          ((C7939 - (C7938 + C7937) + C7940 - C7941 - C7942) * C89 +
           (C7945 - (C7944 + C7943) + C7946 - C7947 - C7948) * C90 +
           (C1422 * C7478 - (C662 * C90781 + C588 * C7477) + C1521 * C90774 -
            (C554 * C2573 + C90634 * C3108) * C7479 -
            (C554 * C2666 + C90634 * C3202) * C7400) *
               C91) *
              C90623 * C90503) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C7477 +
            (C554 * C182 + C90634 * C641) * C90781 - C14614 * C7478 -
            C14700 * C90774 + C14616 * C7479 + C14701 * C7400) *
               C90485 * C13576 +
           (C14614 * C7477 + C14700 * C90781 - C14616 * C7478 -
            C14701 * C90774 + C16062 * C7479 + C16151 * C7400) *
               C90485 * C13577 +
           (C14616 * C7477 + C14701 * C90781 - C16062 * C7478 -
            C16151 * C90774 + C16644 * C7479 + C16703 * C7400) *
               C90485 * C13578) *
              C7396 +
          ((C7939 - (C7938 + C7937) + C7940 - C7941 - C7942) * C90485 * C13576 +
           (C3122 * C7478 - (C1518 * C90781 + C1418 * C7477) + C3218 * C90774 -
            C16060 * C7479 - C16152 * C7400) *
               C90485 * C13577 +
           (C16060 * C7478 - (C3218 * C90781 + C3122 * C7477) +
            C16152 * C90774 - (C554 * C15526 + C90634 * C16039) * C7479 -
            (C554 * C15635 + C90634 * C16145) * C7400) *
               C90485 * C13578) *
              C90503) *
         C90567) /
            (p * q * std::sqrt(p + q));
    d2eezz[61] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C90634 * C555) * C244 +
                       (C554 * C245 + C90634 * C719) * C90567) *
                          C89 +
                      (C726 + C742) * C90 + C746 * C91) *
                         C90623 * C90781 -
                     (C1621 * C91 + (C1619 + C1611) * C90 +
                      ((C554 * C1011 + C90634 * C1602) * C90567 +
                       (C554 * C832 + C90634 * C1396) * C244) *
                          C89) *
                         C90623 * C90774 +
                     (((C554 * C2570 + C90634 * C3105) * C244 +
                       (C554 * C2745 + C90634 * C3295) * C90567) *
                          C89 +
                      (C3300 + C3308) * C90 + (C3303 + C3309) * C91) *
                         C90623 * C7400) *
                        C7396 +
                    (((C1611 + C1619) * C89 + (C1608 + C1618) * C90 +
                      (C1612 + C1620) * C91) *
                         C90623 * C90774 -
                     (C747 * C91 + (C743 + C729) * C90 + (C742 + C726) * C89) *
                         C90623 * C90781 -
                     (((C554 * C2748 + C90634 * C3298) * C90567 +
                       (C554 * C2573 + C90634 * C3108) * C244) *
                          C91 +
                      (C3309 + C3303) * C90 + (C3308 + C3300) * C89) *
                         C90623 * C7400) *
                        C90503)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C90634 * C555) * C244 +
                       (C554 * C245 + C90634 * C719) * C90567) *
                          C90485 * C13576 +
                      (C14776 + C14784) * C90485 * C13577 + C16237 * C13578) *
                         C90781 -
                     (C16759 * C13578 + (C14785 + C14779) * C90485 * C13577 +
                      (C14784 + C14776) * C90485 * C13576) *
                         C90774 +
                     (C16237 * C13576 + (C16232 + C16241) * C90485 * C13577 +
                      (C16756 + C16761) * C90485 * C13578) *
                         C7400) *
                        C7396 +
                    (((C1611 + C1619) * C90485 * C13576 +
                      (C3300 + C3308) * C90485 * C13577 +
                      (C16233 + C16242) * C90485 * C13578) *
                         C90774 -
                     (C16240 * C13578 + (C1619 + C1611) * C90485 * C13577 +
                      (C742 + C726) * C90485 * C13576) *
                         C90781 -
                     (((C554 * C15719 + C90634 * C16227) * C90567 +
                       (C554 * C15526 + C90634 * C16039) * C244) *
                          C90485 * C13578 +
                      (C16242 + C16233) * C90485 * C13577 + C16240 * C13576) *
                         C7400) *
                        C90503)) /
                      (p * q * std::sqrt(p + q));
    d2eexx[62] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
             C91 * C115) *
                C7401 +
            (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 + C102 * C118 +
             C91 * C127) *
                C7396 -
            (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 + C100 * C108 +
             C89 * C114) *
                C7402 -
            (C102 * C120 + C91 * C128 + C101 * C118 + C90 * C127 + C100 * C117 +
             C89 * C126) *
                C90503) *
               C90623 * C90634 * C90753 +
           ((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
             C102 * C1699 + C91 * C1704) *
                C7402 -
            ((C102 * C1705 + C91 * C1712 + C101 * C1706 + C90 * C1713 +
              C100 * C1707 + C89 * C1714) *
                 C7396 +
             (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
              C100 * C1700 + C89 * C1708) *
                 C7401) +
            (C100 * C1706 + C89 * C1713 + C101 * C1705 + C90 * C1712 +
             C102 * C1709 + C91 * C1715) *
                C90503) *
               C90623 * C90634 * C90579) *
              C6692 +
          (((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 + C102 * C831 +
             C91 * C836) *
                C7402 -
            ((C102 * C837 + C91 * C844 + C101 * C838 + C90 * C845 +
              C100 * C839 + C89 * C846) *
                 C7396 +
             (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
              C100 * C832 + C89 * C840) *
                 C7401) +
            (C100 * C838 + C89 * C845 + C101 * C837 + C90 * C844 + C102 * C841 +
             C91 * C847) *
                C90503) *
               C90623 * C90634 * C90753 +
           ((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
             C102 * C3893 + C91 * C3899) *
                C7401 +
            (C100 * C3900 + C89 * C3909 + C101 * C3901 + C90 * C3910 +
             C102 * C3902 + C91 * C3911) *
                C7396 -
            (C102 * C8120 + C91 * C8121 + C101 * C3893 + C90 * C3899 +
             C100 * C3892 + C89 * C3898) *
                C7402 -
            (C102 * C8122 + C91 * C8123 + C101 * C3902 + C90 * C3911 +
             C100 * C3901 + C89 * C3910) *
                C90503) *
               C90623 * C90634 * C90579) *
              C90555)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C7401 +
             (C13579 * C116 + C90485 * C125) * C7396 -
             (C13579 * C108 + C90485 * C114) * C7402 -
             (C13579 * C117 + C90485 * C126) * C90503) *
                C13576 +
            (C20284 + C20285 - C20286 - C20287) * C13577 + C20298 * C13578) *
               C90634 * C90753 +
           (((C13579 * C1697 + C90485 * C1702) * C7402 -
             ((C13579 * C1707 + C90485 * C1714) * C7396 +
              (C13579 * C1700 + C90485 * C1708) * C7401) +
             (C13579 * C1706 + C90485 * C1713) * C90503) *
                C13576 +
            (C21025 - (C21011 + C21012) + C21026) * C13577 +
            (C21027 - (C21017 + C21018) + C21028) * C13578) *
               C90634 * C90579) *
              C6692 +
          (((C20286 - (C20285 + C20284) + C20287) * C13576 +
            (C20290 - (C20289 + C20288) + C20291) * C13577 +
            (C20292 - (C20293 + C20294) + C20295) * C13578) *
               C90634 * C90753 +
           ((C21012 + C21011 - C21025 - C21026) * C13576 +
            (C21018 + C21017 - C21027 - C21028) * C13577 +
            (C16860 * C7401 + C16861 * C7396 -
             (C13579 * C21004 + C90485 * C21005) * C7402 -
             (C13579 * C21006 + C90485 * C21007) * C90503) *
                C13578) *
               C90634 * C90579) *
              C90555)) /
            (p * q * std::sqrt(p + q));
    d2eexy[62] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                       C102 * C109 + C91 * C115) *
                          C6771 +
                      (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 +
                       C102 * C184 + C91 * C190) *
                          C6692 -
                      (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                       C100 * C832 + C89 * C840) *
                          C6772 -
                      (C102 * C925 + C91 * C930 + C101 * C926 + C90 * C931 +
                       C100 * C927 + C89 * C932) *
                          C90555) *
                         C90623 * C90634 * C7396 +
                     ((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 +
                       C102 * C831 + C91 * C836) *
                          C6772 -
                      ((C102 * C185 + C91 * C191 + C101 * C184 + C90 * C190 +
                        C100 * C183 + C89 * C189) *
                           C6692 +
                       (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                        C100 * C108 + C89 * C114) *
                           C6771) +
                      (C100 * C926 + C89 * C931 + C101 * C925 + C90 * C930 +
                       C102 * C928 + C91 * C933) *
                          C90555) *
                         C90623 * C90634 * C90503) *
                        C90753 +
                    (((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
                       C102 * C3893 + C91 * C3899) *
                          C6772 -
                      ((C102 * C1792 + C91 * C1797 + C101 * C1791 +
                        C90 * C1796 + C100 * C1794 + C89 * C1799) *
                           C6692 +
                       (C102 * C1698 + C91 * C1703 + C101 * C1697 +
                        C90 * C1702 + C100 * C1700 + C89 * C1708) *
                           C6771) +
                      (C100 * C3989 + C89 * C3995 + C101 * C3990 + C90 * C3996 +
                       C102 * C3991 + C91 * C3997) *
                          C90555) *
                         C90623 * C90634 * C7396 +
                     ((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
                       C102 * C1699 + C91 * C1704) *
                          C6771 +
                      (C100 * C1791 + C89 * C1796 + C101 * C1792 + C90 * C1797 +
                       C102 * C1793 + C91 * C1798) *
                          C6692 -
                      (C102 * C8120 + C91 * C8121 + C101 * C3893 + C90 * C3899 +
                       C100 * C3892 + C89 * C3898) *
                          C6772 -
                      (C102 * C8222 + C91 * C8223 + C101 * C3991 + C90 * C3997 +
                       C100 * C3990 + C89 * C3996) *
                          C90555) *
                         C90623 * C90634 * C90503) *
                        C90579)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C13579 * C107 + C90485 * C113) * C6771 +
                       (C13579 * C182 + C90485 * C188) * C6692 -
                       C14082 * C6772 - C14192 * C90555) *
                          C13576 +
                      (C14082 * C6771 + C14192 * C6692 - C14088 * C6772 -
                       C14193 * C90555) *
                          C13577 +
                      (C14088 * C6771 + C14193 * C6692 - C15553 * C6772 -
                       C15643 * C90555) *
                          C13578) *
                         C90634 * C7396 +
                     ((C14084 * C6772 -
                       ((C13579 * C183 + C90485 * C189) * C6692 +
                        (C13579 * C108 + C90485 * C114) * C6771) +
                       C14194 * C90555) *
                          C13576 +
                      (C14090 * C6772 - (C14194 * C6692 + C14084 * C6771) +
                       C14195 * C90555) *
                          C13577 +
                      (C15551 * C6772 - (C14195 * C6692 + C14090 * C6771) +
                       C15644 * C90555) *
                          C13578) *
                         C90634 * C90503) *
                        C90753 +
                    (((C16859 * C6772 -
                       ((C13579 * C1794 + C90485 * C1799) * C6692 +
                        (C13579 * C1700 + C90485 * C1708) * C6771) +
                       C16953 * C90555) *
                          C13576 +
                      (C16857 * C6772 - (C16953 * C6692 + C16859 * C6771) +
                       C16954 * C90555) *
                          C13577 +
                      (C16860 * C6772 - (C16954 * C6692 + C16857 * C6771) +
                       C16955 * C90555) *
                          C13578) *
                         C90634 * C7396 +
                     (((C13579 * C1697 + C90485 * C1702) * C6771 +
                       (C13579 * C1791 + C90485 * C1796) * C6692 -
                       C21021 * C6772 - C21133 * C90555) *
                          C13576 +
                      (C21021 * C6771 + C21133 * C6692 - C21023 * C6772 -
                       C21134 * C90555) *
                          C13577 +
                      (C21023 * C6771 + C21134 * C6692 -
                       (C13579 * C21004 + C90485 * C21005) * C6772 -
                       (C13579 * C21126 + C90485 * C21127) * C90555) *
                          C13578) *
                         C90634 * C90503) *
                        C90579)) /
                      (p * q * std::sqrt(p + q));
    d2eexz[62] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
             C91 * C115) *
                C1875 +
            (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 + C102 * C247 +
             C91 * C253) *
                C90753 -
            (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
             C100 * C1700 + C89 * C1708) *
                C1876 -
            (C102 * C1877 + C91 * C1882 + C101 * C1878 + C90 * C1883 +
             C100 * C1879 + C89 * C1884) *
                C90579) *
               C90623 * C90634 * C6692 +
           ((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
             C102 * C3893 + C91 * C3899) *
                C1876 -
            ((C102 * C1009 + C91 * C1014 + C101 * C1010 + C90 * C1015 +
              C100 * C1011 + C89 * C1016) *
                 C90753 +
             (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
              C100 * C832 + C89 * C840) *
                 C1875) +
            (C100 * C4075 + C89 * C4081 + C101 * C4076 + C90 * C4082 +
             C102 * C4077 + C91 * C4083) *
                C90579) *
               C90623 * C90634 * C90555) *
              C7396 +
          (((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
             C102 * C1699 + C91 * C1704) *
                C1876 -
            ((C102 * C248 + C91 * C254 + C101 * C247 + C90 * C253 +
              C100 * C246 + C89 * C252) *
                 C90753 +
             (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
              C100 * C108 + C89 * C114) *
                 C1875) +
            (C100 * C1878 + C89 * C1883 + C101 * C1877 + C90 * C1882 +
             C102 * C1880 + C91 * C1885) *
                C90579) *
               C90623 * C90634 * C6692 +
           ((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 + C102 * C831 +
             C91 * C836) *
                C1875 +
            (C100 * C1010 + C89 * C1015 + C101 * C1009 + C90 * C1014 +
             C102 * C1012 + C91 * C1017) *
                C90753 -
            (C102 * C8120 + C91 * C8121 + C101 * C3893 + C90 * C3899 +
             C100 * C3892 + C89 * C3898) *
                C1876 -
            (C102 * C8322 + C91 * C8323 + C101 * C4077 + C90 * C4083 +
             C100 * C4076 + C89 * C4082) *
                C90579) *
               C90623 * C90634 * C90555) *
              C90503)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C1875 +
             (C13579 * C245 + C90485 * C251) * C90753 -
             (C13579 * C1700 + C90485 * C1708) * C1876 -
             (C13579 * C1879 + C90485 * C1884) * C90579) *
                C13576 +
            (C17034 + C17035 - C17036 - C17053) * C13577 + C17057 * C13578) *
               C90634 * C6692 +
           ((C17036 - (C17035 + C17034) + C17053) * C13576 +
            (C17041 - (C17040 + C17039) + C17055) * C13577 +
            (C17044 - (C17045 + C17046) + C17056) * C13578) *
               C90634 * C90555) *
              C7396 +
          ((((C13579 * C1697 + C90485 * C1702) * C1876 -
             ((C13579 * C246 + C90485 * C252) * C90753 +
              (C13579 * C108 + C90485 * C114) * C1875) +
             (C13579 * C1878 + C90485 * C1883) * C90579) *
                C13576 +
            (C21235 - (C21236 + C21237) + C21247) * C13577 +
            (C21240 - (C21241 + C21242) + C21248) * C13578) *
               C90634 * C6692 +
           ((C21237 + C21236 - C21235 - C21247) * C13576 +
            (C21242 + C21241 - C21240 - C21248) * C13577 +
            (C15551 * C1875 + C15732 * C90753 -
             (C13579 * C21004 + C90485 * C21005) * C1876 -
             (C13579 * C21232 + C90485 * C21233) * C90579) *
                C13578) *
               C90634 * C90555) *
              C90503)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[62] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C7401 +
             (C307 * C116 + C90623 * C314) * C7396 - C337 * C7402 -
             C338 * C90503) *
                C90634 * C89 +
            (C337 * C7401 + C338 * C7396 - C339 * C7402 - C340 * C90503) *
                C90634 * C90 +
            (C339 * C7401 + C340 * C7396 - C341 * C7402 - C342 * C90503) *
                C90634 * C91) *
               C90753 +
           ((C1984 * C7402 -
             ((C307 * C1707 + C90623 * C1966) * C7396 +
              (C307 * C1700 + C90623 * C1962) * C7401) +
             C1985 * C90503) *
                C90634 * C89 +
            (C1986 * C7402 - (C1985 * C7396 + C1984 * C7401) + C1987 * C90503) *
                C90634 * C90 +
            (C1988 * C7402 - (C1987 * C7396 + C1986 * C7401) + C1989 * C90503) *
                C90634 * C91) *
               C90579) *
              C6692 +
          (((C1116 * C7402 -
             ((C307 * C839 + C90623 * C1098) * C7396 +
              (C307 * C832 + C90623 * C1094) * C7401) +
             C1117 * C90503) *
                C90634 * C89 +
            (C1118 * C7402 - (C1117 * C7396 + C1116 * C7401) + C1119 * C90503) *
                C90634 * C90 +
            (C1120 * C7402 - (C1119 * C7396 + C1118 * C7401) + C1121 * C90503) *
                C90634 * C91) *
               C90753 +
           (((C307 * C3891 + C90623 * C4161) * C7401 +
             (C307 * C3900 + C90623 * C4167) * C7396 - C8433 * C7402 -
             C8434 * C90503) *
                C90634 * C89 +
            (C8433 * C7401 + C8434 * C7396 - C8435 * C7402 - C8436 * C90503) *
                C90634 * C90 +
            (C8435 * C7401 + C8436 * C7396 -
             (C307 * C8120 + C90623 * C8422) * C7402 -
             (C307 * C8122 + C90623 * C8423) * C90503) *
                C90634 * C91) *
               C90579) *
              C90555)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
             C13732 * C2570 + C13578 * C2827) *
                C7401 +
            (C13730 * C116 + C13576 * C314 + C13731 * C839 + C13577 * C1098 +
             C13732 * C2577 + C13578 * C2831) *
                C7396 -
            (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
             C13730 * C108 + C13576 * C309) *
                C7402 -
            (C13732 * C2578 + C13578 * C2832 + C13731 * C838 + C13577 * C1099 +
             C13730 * C117 + C13576 * C315) *
                C90503) *
               C90634 * C90485 * C90753 +
           ((C13730 * C1697 + C13576 * C1961 + C13731 * C3892 + C13577 * C4162 +
             C13732 * C3895 + C13578 * C4165) *
                C7402 -
            ((C13732 * C3905 + C13578 * C4172 + C13731 * C3900 +
              C13577 * C4167 + C13730 * C1707 + C13576 * C1966) *
                 C7396 +
             (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 +
              C13577 * C4161 + C13730 * C1700 + C13576 * C1962) *
                 C7401) +
            (C13730 * C1706 + C13576 * C1967 + C13731 * C3901 + C13577 * C4168 +
             C13732 * C3904 + C13578 * C4171) *
                C90503) *
               C90634 * C90485 * C90579) *
              C6692 +
          (((C13730 * C829 + C13576 * C1093 + C13731 * C2571 + C13577 * C2828 +
             C13732 * C3366 + C13578 * C3544) *
                C7402 -
            ((C13732 * C3370 + C13578 * C3548 + C13731 * C2577 +
              C13577 * C2831 + C13730 * C839 + C13576 * C1098) *
                 C7396 +
             (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 +
              C13577 * C2827 + C13730 * C832 + C13576 * C1094) *
                 C7401) +
            (C13730 * C838 + C13576 * C1099 + C13731 * C2578 + C13577 * C2832 +
             C13732 * C3369 + C13578 * C3547) *
                C90503) *
               C90634 * C90485 * C90753 +
           ((C13730 * C3891 + C13576 * C4161 + C13731 * C3896 + C13577 * C4166 +
             C13732 * C16835 + C13578 * C17131) *
                C7401 +
            (C13730 * C3900 + C13576 * C4167 + C13731 * C3905 + C13577 * C4172 +
             C13732 * C16838 + C13578 * C17133) *
                C7396 -
            (C13732 * C21004 + C13578 * C21346 + C13731 * C3895 +
             C13577 * C4165 + C13730 * C3892 + C13576 * C4162) *
                C7402 -
            (C13732 * C21006 + C13578 * C21347 + C13731 * C3904 +
             C13577 * C4171 + C13730 * C3901 + C13576 * C4168) *
                C90503) *
               C90634 * C90485 * C90579) *
              C90555)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[62] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C6771 +
             (C307 * C182 + C90623 * C394) * C6692 -
             (C307 * C832 + C90623 * C1094) * C6772 -
             (C307 * C927 + C90623 * C1195) * C90555) *
                C90634 * C89 +
            (C6996 + C6997 - C6998 - C6999) * C90634 * C90 + C7011 * C91) *
               C7396 +
           ((C6998 - (C6997 + C6996) + C6999) * C90634 * C89 +
            (C7002 - (C7001 + C7000) + C7003) * C90634 * C90 +
            (C7004 - (C7005 + C7006) + C7007) * C90634 * C91) *
               C90503) *
              C90753 +
          ((((C307 * C3891 + C90623 * C4161) * C6772 -
             ((C307 * C1794 + C90623 * C2066) * C6692 +
              (C307 * C1700 + C90623 * C1962) * C6771) +
             (C307 * C3989 + C90623 * C4247) * C90555) *
                C90634 * C89 +
            (C8536 - (C8537 + C8538) + C8548) * C90634 * C90 +
            (C8541 - (C8542 + C8543) + C8549) * C90634 * C91) *
               C7396 +
           ((C8538 + C8537 - C8536 - C8548) * C90634 * C89 +
            (C8543 + C8542 - C8541 - C8549) * C90634 * C90 +
            (C1988 * C6771 + C2080 * C6692 -
             (C307 * C8120 + C90623 * C8422) * C6772 -
             (C307 * C8222 + C90623 * C8534) * C90555) *
                C90634 * C91) *
               C90503) *
              C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
             C13732 * C2570 + C13578 * C2827) *
                C6771 +
            (C13730 * C182 + C13576 * C394 + C13731 * C927 + C13577 * C1195 +
             C13732 * C2663 + C13578 * C2921) *
                C6692 -
            (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
             C13730 * C832 + C13576 * C1094) *
                C6772 -
            (C13732 * C3433 + C13578 * C3599 + C13731 * C2663 + C13577 * C2921 +
             C13730 * C927 + C13576 * C1195) *
                C90555) *
               C90634 * C90485 * C7396 +
           ((C13730 * C829 + C13576 * C1093 + C13731 * C2571 + C13577 * C2828 +
             C13732 * C3366 + C13578 * C3544) *
                C6772 -
            ((C13732 * C2664 + C13578 * C2922 + C13731 * C926 + C13577 * C1196 +
              C13730 * C183 + C13576 * C395) *
                 C6692 +
             (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
              C13730 * C108 + C13576 * C309) *
                 C6771) +
            (C13730 * C926 + C13576 * C1196 + C13731 * C2664 + C13577 * C2922 +
             C13732 * C3432 + C13578 * C3600) *
                C90555) *
               C90634 * C90485 * C90503) *
              C90753 +
          (((C13730 * C3891 + C13576 * C4161 + C13731 * C3896 + C13577 * C4166 +
             C13732 * C16835 + C13578 * C17131) *
                C6772 -
            ((C13732 * C3994 + C13578 * C4248 + C13731 * C3989 +
              C13577 * C4247 + C13730 * C1794 + C13576 * C2066) *
                 C6692 +
             (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 +
              C13577 * C4161 + C13730 * C1700 + C13576 * C1962) *
                 C6771) +
            (C13730 * C3989 + C13576 * C4247 + C13731 * C3994 + C13577 * C4248 +
             C13732 * C16942 + C13578 * C17209) *
                C90555) *
               C90634 * C90485 * C7396 +
           ((C13730 * C1697 + C13576 * C1961 + C13731 * C3892 + C13577 * C4162 +
             C13732 * C3895 + C13578 * C4165) *
                C6771 +
            (C13730 * C1791 + C13576 * C2063 + C13731 * C3990 + C13577 * C4249 +
             C13732 * C3993 + C13578 * C4250) *
                C6692 -
            (C13732 * C21004 + C13578 * C21346 + C13731 * C3895 +
             C13577 * C4165 + C13730 * C3892 + C13576 * C4162) *
                C6772 -
            (C13732 * C21126 + C13578 * C21446 + C13731 * C3993 +
             C13577 * C4250 + C13730 * C3990 + C13576 * C4249) *
                C90555) *
               C90634 * C90485 * C90503) *
              C90579)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[62] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C1875 +
             (C307 * C245 + C90623 * C474) * C90753 -
             (C307 * C1700 + C90623 * C1962) * C1876 -
             (C307 * C1879 + C90623 * C2159) * C90579) *
                C90634 * C89 +
            (C2165 + C2166 - C2167 - C2184) * C90634 * C90 + C2189 * C91) *
               C6692 +
           (((C307 * C3891 + C90623 * C4161) * C1876 -
             ((C307 * C1011 + C90623 * C1301) * C90753 +
              (C307 * C832 + C90623 * C1094) * C1875) +
             (C307 * C4075 + C90623 * C4327) * C90579) *
                C90634 * C89 +
            (C8649 - (C8650 + C8651) + C8661) * C90634 * C90 +
            (C8654 - (C8655 + C8656) + C8662) * C90634 * C91) *
               C90555) *
              C7396 +
          (((C2167 - (C2166 + C2165) + C2184) * C90634 * C89 +
            (C2172 - (C2171 + C2170) + C2186) * C90634 * C90 +
            (C2175 - (C2176 + C2177) + C2187) * C90634 * C91) *
               C6692 +
           ((C8651 + C8650 - C8649 - C8661) * C90634 * C89 +
            (C8656 + C8655 - C8654 - C8662) * C90634 * C90 +
            (C1120 * C1875 + C1316 * C90753 -
             (C307 * C8120 + C90623 * C8422) * C1876 -
             (C307 * C8322 + C90623 * C8647) * C90579) *
                C90634 * C91) *
               C90555) *
              C90503)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
             C13732 * C2570 + C13578 * C2827) *
                C1875 +
            (C13730 * C245 + C13576 * C474 + C13731 * C1011 + C13577 * C1301 +
             C13732 * C2745 + C13578 * C3017) *
                C90753 -
            (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 + C13577 * C4161 +
             C13730 * C1700 + C13576 * C1962) *
                C1876 -
            (C13732 * C4080 + C13578 * C4330 + C13731 * C4075 + C13577 * C4327 +
             C13730 * C1879 + C13576 * C2159) *
                C90579) *
               C90634 * C90485 * C6692 +
           ((C13730 * C3891 + C13576 * C4161 + C13731 * C3896 + C13577 * C4166 +
             C13732 * C16835 + C13578 * C17131) *
                C1876 -
            ((C13732 * C3489 + C13578 * C3654 + C13731 * C2745 +
              C13577 * C3017 + C13730 * C1011 + C13576 * C1301) *
                 C90753 +
             (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 +
              C13577 * C2827 + C13730 * C832 + C13576 * C1094) *
                 C1875) +
            (C13730 * C4075 + C13576 * C4327 + C13731 * C4080 + C13577 * C4330 +
             C13732 * C17029 + C13578 * C17285) *
                C90579) *
               C90634 * C90485 * C90555) *
              C7396 +
          (((C13730 * C1697 + C13576 * C1961 + C13731 * C3892 + C13577 * C4162 +
             C13732 * C3895 + C13578 * C4165) *
                C1876 -
            ((C13732 * C2746 + C13578 * C3018 + C13731 * C1010 +
              C13577 * C1300 + C13730 * C246 + C13576 * C475) *
                 C90753 +
             (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
              C13730 * C108 + C13576 * C309) *
                 C1875) +
            (C13730 * C1878 + C13576 * C2160 + C13731 * C4076 + C13577 * C4328 +
             C13732 * C4079 + C13578 * C4331) *
                C90579) *
               C90634 * C90485 * C6692 +
           ((C13730 * C829 + C13576 * C1093 + C13731 * C2571 + C13577 * C2828 +
             C13732 * C3366 + C13578 * C3544) *
                C1875 +
            (C13730 * C1010 + C13576 * C1300 + C13731 * C2746 + C13577 * C3018 +
             C13732 * C3488 + C13578 * C3653) *
                C90753 -
            (C13732 * C21004 + C13578 * C21346 + C13731 * C3895 +
             C13577 * C4165 + C13730 * C3892 + C13576 * C4162) *
                C1876 -
            (C13732 * C21232 + C13578 * C21545 + C13731 * C4079 +
             C13577 * C4331 + C13730 * C4076 + C13576 * C4328) *
                C90579) *
               C90634 * C90485 * C90555) *
              C90503)) /
            (p * q * std::sqrt(p + q));
    d2eezx[62] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C7401 +
             (C554 * C116 + C90634 * C561) * C7396 - C584 * C7402 -
             C585 * C90503) *
                C89 +
            (C584 * C7401 + C585 * C7396 - C586 * C7402 - C587 * C90503) * C90 +
            (C586 * C7401 + C587 * C7396 - C588 * C7402 - C589 * C90503) *
                C91) *
               C90623 * C90753 +
           ((C2286 * C7402 -
             ((C554 * C1707 + C90634 * C2268) * C7396 +
              (C554 * C1700 + C90634 * C2264) * C7401) +
             C2287 * C90503) *
                C89 +
            (C2288 * C7402 - (C2287 * C7396 + C2286 * C7401) + C2289 * C90503) *
                C90 +
            (C2290 * C7402 - (C2289 * C7396 + C2288 * C7401) + C2291 * C90503) *
                C91) *
               C90623 * C90579) *
              C6692 +
          (((C1418 * C7402 -
             ((C554 * C839 + C90634 * C1400) * C7396 +
              (C554 * C832 + C90634 * C1396) * C7401) +
             C1419 * C90503) *
                C89 +
            (C1420 * C7402 - (C1419 * C7396 + C1418 * C7401) + C1421 * C90503) *
                C90 +
            (C1422 * C7402 - (C1421 * C7396 + C1420 * C7401) + C1423 * C90503) *
                C91) *
               C90623 * C90753 +
           (((C554 * C3891 + C90634 * C4407) * C7401 +
             (C554 * C3900 + C90634 * C4413) * C7396 - C8771 * C7402 -
             C8772 * C90503) *
                C89 +
            (C8771 * C7401 + C8772 * C7396 - C8773 * C7402 - C8774 * C90503) *
                C90 +
            (C8773 * C7401 + C8774 * C7396 -
             (C554 * C8120 + C90634 * C8760) * C7402 -
             (C554 * C8122 + C90634 * C8761) * C90503) *
                C91) *
               C90623 * C90579) *
              C90555)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C7401 +
             (C554 * C116 + C90634 * C561) * C7396 - C584 * C7402 -
             C585 * C90503) *
                C90485 * C13576 +
            (C20743 + C20744 - C20745 - C20746) * C90485 * C13577 +
            C20758 * C13578) *
               C90753 +
           ((C2286 * C7402 -
             ((C554 * C1707 + C90634 * C2268) * C7396 +
              (C554 * C1700 + C90634 * C2264) * C7401) +
             C2287 * C90503) *
                C90485 * C13576 +
            (C21647 - (C21648 + C21649) + C21650) * C90485 * C13577 +
            (C21659 - (C21653 + C21654) + C21660) * C90485 * C13578) *
               C90579) *
              C6692 +
          (((C20745 - (C20744 + C20743) + C20746) * C90485 * C13576 +
            (C20749 - (C20748 + C20747) + C20750) * C90485 * C13577 +
            (C20751 - (C20752 + C20753) + C20754) * C90485 * C13578) *
               C90753 +
           ((C21649 + C21648 - C21647 - C21650) * C90485 * C13576 +
            (C21654 + C21653 - C21659 - C21660) * C90485 * C13577 +
            (C17382 * C7401 + C17383 * C7396 -
             (C554 * C21004 + C90634 * C21644) * C7402 -
             (C554 * C21006 + C90634 * C21645) * C90503) *
                C90485 * C13578) *
               C90579) *
              C90555)) /
            (p * q * std::sqrt(p + q));
    d2eezy[62] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C6771 +
             (C554 * C182 + C90634 * C641) * C6692 -
             (C554 * C832 + C90634 * C1396) * C6772 -
             (C554 * C927 + C90634 * C1497) * C90555) *
                C89 +
            (C7234 + C7235 - C7236 - C7237) * C90 + C7248 * C91) *
               C90623 * C7396 +
           ((C7236 - (C7235 + C7234) + C7237) * C89 +
            (C7240 - (C7239 + C7238) + C7241) * C90 +
            (C7242 - (C7243 + C7244) + C7245) * C91) *
               C90623 * C90503) *
              C90753 +
          ((((C554 * C3891 + C90634 * C4407) * C6772 -
             ((C554 * C1794 + C90634 * C2368) * C6692 +
              (C554 * C1700 + C90634 * C2264) * C6771) +
             (C554 * C3989 + C90634 * C4493) * C90555) *
                C89 +
            (C8874 - (C8875 + C8876) + C8886) * C90 +
            (C8879 - (C8880 + C8881) + C8887) * C91) *
               C90623 * C7396 +
           ((C8876 + C8875 - C8874 - C8886) * C89 +
            (C8881 + C8880 - C8879 - C8887) * C90 +
            (C2290 * C6771 + C2382 * C6692 -
             (C554 * C8120 + C90634 * C8760) * C6772 -
             (C554 * C8222 + C90634 * C8872) * C90555) *
                C91) *
               C90623 * C90503) *
              C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C6771 +
             (C554 * C182 + C90634 * C641) * C6692 - C14614 * C6772 -
             C14700 * C90555) *
                C90485 * C13576 +
            (C14614 * C6771 + C14700 * C6692 - C14616 * C6772 -
             C14701 * C90555) *
                C90485 * C13577 +
            (C14616 * C6771 + C14701 * C6692 - C16062 * C6772 -
             C16151 * C90555) *
                C90485 * C13578) *
               C7396 +
           ((C7236 - (C7235 + C7234) + C7237) * C90485 * C13576 +
            (C3122 * C6772 - (C1518 * C6692 + C1418 * C6771) + C3218 * C90555) *
                C90485 * C13577 +
            (C16060 * C6772 - (C3218 * C6692 + C3122 * C6771) +
             C16152 * C90555) *
                C90485 * C13578) *
               C90503) *
              C90753 +
          (((C17381 * C6772 -
             ((C554 * C1794 + C90634 * C2368) * C6692 +
              (C554 * C1700 + C90634 * C2264) * C6771) +
             C17474 * C90555) *
                C90485 * C13576 +
            (C17379 * C6772 - (C17474 * C6692 + C17381 * C6771) +
             C17475 * C90555) *
                C90485 * C13577 +
            (C17382 * C6772 - (C17475 * C6692 + C17379 * C6771) +
             C17476 * C90555) *
                C90485 * C13578) *
               C7396 +
           ((C8876 + C8875 - C8874 - C8886) * C90485 * C13576 +
            (C8771 * C6771 + C8884 * C6692 - C21657 * C6772 - C21762 * C90555) *
                C90485 * C13577 +
            (C21657 * C6771 + C21762 * C6692 -
             (C554 * C21004 + C90634 * C21644) * C6772 -
             (C554 * C21126 + C90634 * C21758) * C90555) *
                C90485 * C13578) *
               C90503) *
              C90579)) /
            (p * q * std::sqrt(p + q));
    d2eezz[62] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C90634 * C555) * C1875 +
                       (C554 * C245 + C90634 * C719) * C90753 -
                       (C554 * C1700 + C90634 * C2264) * C1876 -
                       (C554 * C1879 + C90634 * C2460) * C90579) *
                          C89 +
                      (C2466 + C2467 - C2468 - C2485) * C90 + C2489 * C91) *
                         C90623 * C6692 +
                     (((C554 * C3891 + C90634 * C4407) * C1876 -
                       ((C554 * C1011 + C90634 * C1602) * C90753 +
                        (C554 * C832 + C90634 * C1396) * C1875) +
                       (C554 * C4075 + C90634 * C4573) * C90579) *
                          C89 +
                      (C8987 - (C8988 + C8989) + C8999) * C90 +
                      (C8992 - (C8993 + C8994) + C9000) * C91) *
                         C90623 * C90555) *
                        C7396 +
                    (((C2468 - (C2467 + C2466) + C2485) * C89 +
                      (C2473 - (C2472 + C2471) + C2487) * C90 +
                      (C2476 - (C2477 + C2478) + C2488) * C91) *
                         C90623 * C6692 +
                     ((C8989 + C8988 - C8987 - C8999) * C89 +
                      (C8994 + C8993 - C8992 - C9000) * C90 +
                      (C1422 * C1875 + C1617 * C90753 -
                       (C554 * C8120 + C90634 * C8760) * C1876 -
                       (C554 * C8322 + C90634 * C8985) * C90579) *
                          C91) *
                         C90623 * C90555) *
                        C90503)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C90634 * C555) * C1875 +
                       (C554 * C245 + C90634 * C719) * C90753 -
                       (C554 * C1700 + C90634 * C2264) * C1876 -
                       (C554 * C1879 + C90634 * C2460) * C90579) *
                          C90485 * C13576 +
                      (C17553 + C17554 - C17555 - C17572) * C90485 * C13577 +
                      C17577 * C13578) *
                         C6692 +
                     ((C17555 - (C17554 + C17553) + C17572) * C90485 * C13576 +
                      (C17560 - (C17559 + C17558) + C17574) * C90485 * C13577 +
                      (C17563 - (C17564 + C17565) + C17575) * C90485 * C13578) *
                         C90555) *
                        C7396 +
                    (((C2468 - (C2467 + C2466) + C2485) * C90485 * C13576 +
                      (C8987 - (C8988 + C8989) + C8999) * C90485 * C13577 +
                      (C21862 - (C21863 + C21864) + C21868) * C90485 * C13578) *
                         C6692 +
                     ((C8989 + C8988 - C8987 - C8999) * C90485 * C13576 +
                      (C21864 + C21863 - C21862 - C21868) * C90485 * C13577 +
                      (C16060 * C1875 + C16239 * C90753 -
                       (C554 * C21004 + C90634 * C21644) * C1876 -
                       (C554 * C21232 + C90634 * C21860) * C90579) *
                          C90485 * C13578) *
                         C90555) *
                        C90503)) /
                      (p * q * std::sqrt(p + q));
    d2eexx[63] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
             C91 * C115) *
                C88316 +
            (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 + C102 * C118 +
             C91 * C127) *
                C90744 -
            (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 + C100 * C108 +
             C89 * C114) *
                C88309 -
            (C102 * C120 + C91 * C128 + C101 * C118 + C90 * C127 + C100 * C117 +
             C89 * C126) *
                C90503) *
               C90623 * C90634 * C9074 +
           ((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
             C102 * C1699 + C91 * C1704) *
                C88309 -
            ((C102 * C1705 + C91 * C1712 + C101 * C1706 + C90 * C1713 +
              C100 * C1707 + C89 * C1714) *
                 C90744 +
             (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
              C100 * C1700 + C89 * C1708) *
                 C88316) +
            (C100 * C1706 + C89 * C1713 + C101 * C1705 + C90 * C1712 +
             C102 * C1709 + C91 * C1715) *
                C90503) *
               C90623 * C90634 * C90579) *
              C6692 +
          (((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 + C102 * C831 +
             C91 * C836) *
                C88309 -
            ((C102 * C837 + C91 * C844 + C101 * C838 + C90 * C845 +
              C100 * C839 + C89 * C846) *
                 C90744 +
             (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
              C100 * C832 + C89 * C840) *
                 C88316) +
            (C100 * C838 + C89 * C845 + C101 * C837 + C90 * C844 + C102 * C841 +
             C91 * C847) *
                C90503) *
               C90623 * C90634 * C9074 +
           ((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
             C102 * C3893 + C91 * C3899) *
                C88316 +
            (C100 * C3900 + C89 * C3909 + C101 * C3901 + C90 * C3910 +
             C102 * C3902 + C91 * C3911) *
                C90744 -
            (C102 * C8120 + C91 * C8121 + C101 * C3893 + C90 * C3899 +
             C100 * C3892 + C89 * C3898) *
                C88309 -
            (C102 * C8122 + C91 * C8123 + C101 * C3902 + C90 * C3911 +
             C100 * C3901 + C89 * C3910) *
                C90503) *
               C90623 * C90634 * C90579) *
              C90555)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C88316 +
             (C13579 * C116 + C90485 * C125) * C90744 -
             (C13579 * C108 + C90485 * C114) * C88309 -
             (C13579 * C117 + C90485 * C126) * C90503) *
                C13576 +
            (C15534 + C15535 - C15536 - C15537) * C13577 + C15560 * C13578) *
               C90634 * C9074 +
           (((C13579 * C1697 + C90485 * C1702) * C88309 -
             ((C13579 * C1707 + C90485 * C1714) * C90744 +
              (C13579 * C1700 + C90485 * C1708) * C88316) +
             (C13579 * C1706 + C90485 * C1713) * C90503) *
                C13576 +
            (C24209 - (C24210 + C24211) + C24212) * C13577 +
            (C24213 - (C24214 + C24215) + C24216) * C13578) *
               C90634 * C90579) *
              C6692 +
          (((C15536 - (C15535 + C15534) + C15537) * C13576 +
            (C15540 - (C15539 + C15538) + C15541) * C13577 +
            (C15556 - (C15557 + C15558) + C15559) * C13578) *
               C90634 * C9074 +
           ((C24211 + C24210 - C24209 - C24212) * C13576 +
            (C24215 + C24214 - C24213 - C24216) * C13577 +
            (C16860 * C88316 + C16861 * C90744 -
             (C13579 * C21004 + C90485 * C21005) * C88309 -
             (C13579 * C21006 + C90485 * C21007) * C90503) *
                C13578) *
               C90634 * C90579) *
              C90555)) /
            (p * q * std::sqrt(p + q));
    d2eexy[63] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                       C102 * C109 + C91 * C115) *
                          C6771 +
                      (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 +
                       C102 * C184 + C91 * C190) *
                          C6692 -
                      (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                       C100 * C832 + C89 * C840) *
                          C6772 -
                      (C102 * C925 + C91 * C930 + C101 * C926 + C90 * C931 +
                       C100 * C927 + C89 * C932) *
                          C90555) *
                         C90623 * C90634 * C90744 +
                     ((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 +
                       C102 * C831 + C91 * C836) *
                          C6772 -
                      ((C102 * C185 + C91 * C191 + C101 * C184 + C90 * C190 +
                        C100 * C183 + C89 * C189) *
                           C6692 +
                       (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                        C100 * C108 + C89 * C114) *
                           C6771) +
                      (C100 * C926 + C89 * C931 + C101 * C925 + C90 * C930 +
                       C102 * C928 + C91 * C933) *
                          C90555) *
                         C90623 * C90634 * C90503) *
                        C9074 +
                    (((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
                       C102 * C3893 + C91 * C3899) *
                          C6772 -
                      ((C102 * C1792 + C91 * C1797 + C101 * C1791 +
                        C90 * C1796 + C100 * C1794 + C89 * C1799) *
                           C6692 +
                       (C102 * C1698 + C91 * C1703 + C101 * C1697 +
                        C90 * C1702 + C100 * C1700 + C89 * C1708) *
                           C6771) +
                      (C100 * C3989 + C89 * C3995 + C101 * C3990 + C90 * C3996 +
                       C102 * C3991 + C91 * C3997) *
                          C90555) *
                         C90623 * C90634 * C90744 +
                     ((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
                       C102 * C1699 + C91 * C1704) *
                          C6771 +
                      (C100 * C1791 + C89 * C1796 + C101 * C1792 + C90 * C1797 +
                       C102 * C1793 + C91 * C1798) *
                          C6692 -
                      (C102 * C8120 + C91 * C8121 + C101 * C3893 + C90 * C3899 +
                       C100 * C3892 + C89 * C3898) *
                          C6772 -
                      (C102 * C8222 + C91 * C8223 + C101 * C3991 + C90 * C3997 +
                       C100 * C3990 + C89 * C3996) *
                          C90555) *
                         C90623 * C90634 * C90503) *
                        C90579)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C13579 * C107 + C90485 * C113) * C6771 +
                       (C13579 * C182 + C90485 * C188) * C6692 -
                       C14082 * C6772 - C14192 * C90555) *
                          C13576 +
                      (C14082 * C6771 + C14192 * C6692 - C14088 * C6772 -
                       C14193 * C90555) *
                          C13577 +
                      (C14088 * C6771 + C14193 * C6692 - C15553 * C6772 -
                       C15643 * C90555) *
                          C13578) *
                         C90634 * C90744 +
                     ((C14084 * C6772 -
                       ((C13579 * C183 + C90485 * C189) * C6692 +
                        (C13579 * C108 + C90485 * C114) * C6771) +
                       C14194 * C90555) *
                          C13576 +
                      (C14090 * C6772 - (C14194 * C6692 + C14084 * C6771) +
                       C14195 * C90555) *
                          C13577 +
                      (C15551 * C6772 - (C14195 * C6692 + C14090 * C6771) +
                       C15644 * C90555) *
                          C13578) *
                         C90634 * C90503) *
                        C9074 +
                    (((C16859 * C6772 -
                       ((C13579 * C1794 + C90485 * C1799) * C6692 +
                        (C13579 * C1700 + C90485 * C1708) * C6771) +
                       C16953 * C90555) *
                          C13576 +
                      (C16857 * C6772 - (C16953 * C6692 + C16859 * C6771) +
                       C16954 * C90555) *
                          C13577 +
                      (C16860 * C6772 - (C16954 * C6692 + C16857 * C6771) +
                       C16955 * C90555) *
                          C13578) *
                         C90634 * C90744 +
                     (((C13579 * C1697 + C90485 * C1702) * C6771 +
                       (C13579 * C1791 + C90485 * C1796) * C6692 -
                       C21021 * C6772 - C21133 * C90555) *
                          C13576 +
                      (C21021 * C6771 + C21133 * C6692 - C21023 * C6772 -
                       C21134 * C90555) *
                          C13577 +
                      (C21023 * C6771 + C21134 * C6692 -
                       (C13579 * C21004 + C90485 * C21005) * C6772 -
                       (C13579 * C21126 + C90485 * C21127) * C90555) *
                          C13578) *
                         C90634 * C90503) *
                        C90579)) /
                      (p * q * std::sqrt(p + q));
    d2eexz[63] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                       C102 * C109 + C91 * C115) *
                          C9224 +
                      (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 +
                       C102 * C247 + C91 * C253) *
                          C9074 -
                      (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
                       C100 * C1700 + C89 * C1708) *
                          C9225 -
                      (C102 * C1877 + C91 * C1882 + C101 * C1878 + C90 * C1883 +
                       C100 * C1879 + C89 * C1884) *
                          C90579) *
                         C90623 * C90634 * C6692 +
                     ((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
                       C102 * C3893 + C91 * C3899) *
                          C9225 -
                      ((C102 * C1009 + C91 * C1014 + C101 * C1010 +
                        C90 * C1015 + C100 * C1011 + C89 * C1016) *
                           C9074 +
                       (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                        C100 * C832 + C89 * C840) *
                           C9224) +
                      (C100 * C4075 + C89 * C4081 + C101 * C4076 + C90 * C4082 +
                       C102 * C4077 + C91 * C4083) *
                          C90579) *
                         C90623 * C90634 * C90555) *
                        C90744 +
                    (((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
                       C102 * C1699 + C91 * C1704) *
                          C9225 -
                      ((C102 * C248 + C91 * C254 + C101 * C247 + C90 * C253 +
                        C100 * C246 + C89 * C252) *
                           C9074 +
                       (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                        C100 * C108 + C89 * C114) *
                           C9224) +
                      (C100 * C1878 + C89 * C1883 + C101 * C1877 + C90 * C1882 +
                       C102 * C1880 + C91 * C1885) *
                          C90579) *
                         C90623 * C90634 * C6692 +
                     ((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 +
                       C102 * C831 + C91 * C836) *
                          C9224 +
                      (C100 * C1010 + C89 * C1015 + C101 * C1009 + C90 * C1014 +
                       C102 * C1012 + C91 * C1017) *
                          C9074 -
                      (C102 * C8120 + C91 * C8121 + C101 * C3893 + C90 * C3899 +
                       C100 * C3892 + C89 * C3898) *
                          C9225 -
                      (C102 * C8322 + C91 * C8323 + C101 * C4077 + C90 * C4083 +
                       C100 * C4076 + C89 * C4082) *
                          C90579) *
                         C90623 * C90634 * C90555) *
                        C90503)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C13579 * C107 + C90485 * C113) * C9224 +
                       (C13579 * C245 + C90485 * C251) * C9074 -
                       (C13579 * C1700 + C90485 * C1708) * C9225 -
                       (C13579 * C1879 + C90485 * C1884) * C90579) *
                          C13576 +
                      (C22829 + C22830 - C22831 - C22832) * C13577 +
                      (C22833 + C22834 - C22835 - C22836) * C13578) *
                         C90634 * C6692 +
                     ((C22831 - (C22830 + C22829) + C22832) * C13576 +
                      (C22835 - (C22834 + C22833) + C22836) * C13577 +
                      (C16860 * C9225 - (C15731 * C9074 + C15553 * C9224) +
                       C17052 * C90579) *
                          C13578) *
                         C90634 * C90555) *
                        C90744 +
                    ((((C13579 * C1697 + C90485 * C1702) * C9225 -
                       ((C13579 * C246 + C90485 * C252) * C9074 +
                        (C13579 * C108 + C90485 * C114) * C9224) +
                       (C13579 * C1878 + C90485 * C1883) * C90579) *
                          C13576 +
                      (C22837 - (C22838 + C22839) + C22840) * C13577 +
                      (C22841 - (C22842 + C22843) + C22844) * C13578) *
                         C90634 * C6692 +
                     ((C22839 + C22838 - C22837 - C22840) * C13576 +
                      (C22843 + C22842 - C22841 - C22844) * C13577 +
                      (C15551 * C9224 + C15732 * C9074 -
                       (C13579 * C21004 + C90485 * C21005) * C9225 -
                       (C13579 * C21232 + C90485 * C21233) * C90579) *
                          C13578) *
                         C90634 * C90555) *
                        C90503)) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[63] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C88316 +
             (C307 * C116 + C90623 * C314) * C90744 - C337 * C88309 -
             C338 * C90503) *
                C90634 * C89 +
            (C337 * C88316 + C338 * C90744 - C339 * C88309 - C340 * C90503) *
                C90634 * C90 +
            (C339 * C88316 + C340 * C90744 - C341 * C88309 - C342 * C90503) *
                C90634 * C91) *
               C9074 +
           ((C1984 * C88309 -
             ((C307 * C1707 + C90623 * C1966) * C90744 +
              (C307 * C1700 + C90623 * C1962) * C88316) +
             C1985 * C90503) *
                C90634 * C89 +
            (C1986 * C88309 - (C1985 * C90744 + C1984 * C88316) +
             C1987 * C90503) *
                C90634 * C90 +
            (C1988 * C88309 - (C1987 * C90744 + C1986 * C88316) +
             C1989 * C90503) *
                C90634 * C91) *
               C90579) *
              C6692 +
          (((C1116 * C88309 -
             ((C307 * C839 + C90623 * C1098) * C90744 +
              (C307 * C832 + C90623 * C1094) * C88316) +
             C1117 * C90503) *
                C90634 * C89 +
            (C1118 * C88309 - (C1117 * C90744 + C1116 * C88316) +
             C1119 * C90503) *
                C90634 * C90 +
            (C1120 * C88309 - (C1119 * C90744 + C1118 * C88316) +
             C1121 * C90503) *
                C90634 * C91) *
               C9074 +
           (((C307 * C3891 + C90623 * C4161) * C88316 +
             (C307 * C3900 + C90623 * C4167) * C90744 - C8433 * C88309 -
             C8434 * C90503) *
                C90634 * C89 +
            (C8433 * C88316 + C8434 * C90744 - C8435 * C88309 -
             C8436 * C90503) *
                C90634 * C90 +
            (C8435 * C88316 + C8436 * C90744 -
             (C307 * C8120 + C90623 * C8422) * C88309 -
             (C307 * C8122 + C90623 * C8423) * C90503) *
                C90634 * C91) *
               C90579) *
              C90555)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
             C13732 * C2570 + C13578 * C2827) *
                C88316 +
            (C13730 * C116 + C13576 * C314 + C13731 * C839 + C13577 * C1098 +
             C13732 * C2577 + C13578 * C2831) *
                C90744 -
            (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
             C13730 * C108 + C13576 * C309) *
                C88309 -
            (C13732 * C2578 + C13578 * C2832 + C13731 * C838 + C13577 * C1099 +
             C13730 * C117 + C13576 * C315) *
                C90503) *
               C90634 * C90485 * C9074 +
           ((C13730 * C1697 + C13576 * C1961 + C13731 * C3892 + C13577 * C4162 +
             C13732 * C3895 + C13578 * C4165) *
                C88309 -
            ((C13732 * C3905 + C13578 * C4172 + C13731 * C3900 +
              C13577 * C4167 + C13730 * C1707 + C13576 * C1966) *
                 C90744 +
             (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 +
              C13577 * C4161 + C13730 * C1700 + C13576 * C1962) *
                 C88316) +
            (C13730 * C1706 + C13576 * C1967 + C13731 * C3901 + C13577 * C4168 +
             C13732 * C3904 + C13578 * C4171) *
                C90503) *
               C90634 * C90485 * C90579) *
              C6692 +
          (((C13730 * C829 + C13576 * C1093 + C13731 * C2571 + C13577 * C2828 +
             C13732 * C3366 + C13578 * C3544) *
                C88309 -
            ((C13732 * C3370 + C13578 * C3548 + C13731 * C2577 +
              C13577 * C2831 + C13730 * C839 + C13576 * C1098) *
                 C90744 +
             (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 +
              C13577 * C2827 + C13730 * C832 + C13576 * C1094) *
                 C88316) +
            (C13730 * C838 + C13576 * C1099 + C13731 * C2578 + C13577 * C2832 +
             C13732 * C3369 + C13578 * C3547) *
                C90503) *
               C90634 * C90485 * C9074 +
           ((C13730 * C3891 + C13576 * C4161 + C13731 * C3896 + C13577 * C4166 +
             C13732 * C16835 + C13578 * C17131) *
                C88316 +
            (C13730 * C3900 + C13576 * C4167 + C13731 * C3905 + C13577 * C4172 +
             C13732 * C16838 + C13578 * C17133) *
                C90744 -
            (C13732 * C21004 + C13578 * C21346 + C13731 * C3895 +
             C13577 * C4165 + C13730 * C3892 + C13576 * C4162) *
                C88309 -
            (C13732 * C21006 + C13578 * C21347 + C13731 * C3904 +
             C13577 * C4171 + C13730 * C3901 + C13576 * C4168) *
                C90503) *
               C90634 * C90485 * C90579) *
              C90555)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[63] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C6771 +
             (C307 * C182 + C90623 * C394) * C6692 -
             (C307 * C832 + C90623 * C1094) * C6772 -
             (C307 * C927 + C90623 * C1195) * C90555) *
                C90634 * C89 +
            (C6996 + C6997 - C6998 - C6999) * C90634 * C90 + C7011 * C91) *
               C90744 +
           ((C6998 - (C6997 + C6996) + C6999) * C90634 * C89 +
            (C7002 - (C7001 + C7000) + C7003) * C90634 * C90 +
            (C7004 - (C7005 + C7006) + C7007) * C90634 * C91) *
               C90503) *
              C9074 +
          ((((C307 * C3891 + C90623 * C4161) * C6772 -
             ((C307 * C1794 + C90623 * C2066) * C6692 +
              (C307 * C1700 + C90623 * C1962) * C6771) +
             (C307 * C3989 + C90623 * C4247) * C90555) *
                C90634 * C89 +
            (C8536 - (C8537 + C8538) + C8548) * C90634 * C90 +
            (C8541 - (C8542 + C8543) + C8549) * C90634 * C91) *
               C90744 +
           ((C8538 + C8537 - C8536 - C8548) * C90634 * C89 +
            (C8543 + C8542 - C8541 - C8549) * C90634 * C90 +
            (C1988 * C6771 + C2080 * C6692 -
             (C307 * C8120 + C90623 * C8422) * C6772 -
             (C307 * C8222 + C90623 * C8534) * C90555) *
                C90634 * C91) *
               C90503) *
              C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
             C13732 * C2570 + C13578 * C2827) *
                C6771 +
            (C13730 * C182 + C13576 * C394 + C13731 * C927 + C13577 * C1195 +
             C13732 * C2663 + C13578 * C2921) *
                C6692 -
            (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
             C13730 * C832 + C13576 * C1094) *
                C6772 -
            (C13732 * C3433 + C13578 * C3599 + C13731 * C2663 + C13577 * C2921 +
             C13730 * C927 + C13576 * C1195) *
                C90555) *
               C90634 * C90485 * C90744 +
           ((C13730 * C829 + C13576 * C1093 + C13731 * C2571 + C13577 * C2828 +
             C13732 * C3366 + C13578 * C3544) *
                C6772 -
            ((C13732 * C2664 + C13578 * C2922 + C13731 * C926 + C13577 * C1196 +
              C13730 * C183 + C13576 * C395) *
                 C6692 +
             (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
              C13730 * C108 + C13576 * C309) *
                 C6771) +
            (C13730 * C926 + C13576 * C1196 + C13731 * C2664 + C13577 * C2922 +
             C13732 * C3432 + C13578 * C3600) *
                C90555) *
               C90634 * C90485 * C90503) *
              C9074 +
          (((C13730 * C3891 + C13576 * C4161 + C13731 * C3896 + C13577 * C4166 +
             C13732 * C16835 + C13578 * C17131) *
                C6772 -
            ((C13732 * C3994 + C13578 * C4248 + C13731 * C3989 +
              C13577 * C4247 + C13730 * C1794 + C13576 * C2066) *
                 C6692 +
             (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 +
              C13577 * C4161 + C13730 * C1700 + C13576 * C1962) *
                 C6771) +
            (C13730 * C3989 + C13576 * C4247 + C13731 * C3994 + C13577 * C4248 +
             C13732 * C16942 + C13578 * C17209) *
                C90555) *
               C90634 * C90485 * C90744 +
           ((C13730 * C1697 + C13576 * C1961 + C13731 * C3892 + C13577 * C4162 +
             C13732 * C3895 + C13578 * C4165) *
                C6771 +
            (C13730 * C1791 + C13576 * C2063 + C13731 * C3990 + C13577 * C4249 +
             C13732 * C3993 + C13578 * C4250) *
                C6692 -
            (C13732 * C21004 + C13578 * C21346 + C13731 * C3895 +
             C13577 * C4165 + C13730 * C3892 + C13576 * C4162) *
                C6772 -
            (C13732 * C21126 + C13578 * C21446 + C13731 * C3993 +
             C13577 * C4250 + C13730 * C3990 + C13576 * C4249) *
                C90555) *
               C90634 * C90485 * C90503) *
              C90579)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[63] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C9224 +
             (C307 * C245 + C90623 * C474) * C9074 -
             (C307 * C1700 + C90623 * C1962) * C9225 -
             (C307 * C1879 + C90623 * C2159) * C90579) *
                C90634 * C89 +
            (C9449 + C9450 - C9451 - C9452) * C90634 * C90 + C9464 * C91) *
               C6692 +
           (((C307 * C3891 + C90623 * C4161) * C9225 -
             ((C307 * C1011 + C90623 * C1301) * C9074 +
              (C307 * C832 + C90623 * C1094) * C9224) +
             (C307 * C4075 + C90623 * C4327) * C90579) *
                C90634 * C89 +
            (C10298 - (C10299 + C10300) + C10301) * C90634 * C90 +
            (C10302 - (C10303 + C10304) + C10305) * C90634 * C91) *
               C90555) *
              C90744 +
          (((C9451 - (C9450 + C9449) + C9452) * C90634 * C89 +
            (C9455 - (C9454 + C9453) + C9456) * C90634 * C90 +
            (C9457 - (C9458 + C9459) + C9460) * C90634 * C91) *
               C6692 +
           ((C10300 + C10299 - C10298 - C10301) * C90634 * C89 +
            (C10304 + C10303 - C10302 - C10305) * C90634 * C90 +
            (C1120 * C9224 + C1316 * C9074 -
             (C307 * C8120 + C90623 * C8422) * C9225 -
             (C307 * C8322 + C90623 * C8647) * C90579) *
                C90634 * C91) *
               C90555) *
              C90503)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
             C13732 * C2570 + C13578 * C2827) *
                C9224 +
            (C13730 * C245 + C13576 * C474 + C13731 * C1011 + C13577 * C1301 +
             C13732 * C2745 + C13578 * C3017) *
                C9074 -
            (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 + C13577 * C4161 +
             C13730 * C1700 + C13576 * C1962) *
                C9225 -
            (C13732 * C4080 + C13578 * C4330 + C13731 * C4075 + C13577 * C4327 +
             C13730 * C1879 + C13576 * C2159) *
                C90579) *
               C90634 * C90485 * C6692 +
           ((C13730 * C3891 + C13576 * C4161 + C13731 * C3896 + C13577 * C4166 +
             C13732 * C16835 + C13578 * C17131) *
                C9225 -
            ((C13732 * C3489 + C13578 * C3654 + C13731 * C2745 +
              C13577 * C3017 + C13730 * C1011 + C13576 * C1301) *
                 C9074 +
             (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 +
              C13577 * C2827 + C13730 * C832 + C13576 * C1094) *
                 C9224) +
            (C13730 * C4075 + C13576 * C4327 + C13731 * C4080 + C13577 * C4330 +
             C13732 * C17029 + C13578 * C17285) *
                C90579) *
               C90634 * C90485 * C90555) *
              C90744 +
          (((C13730 * C1697 + C13576 * C1961 + C13731 * C3892 + C13577 * C4162 +
             C13732 * C3895 + C13578 * C4165) *
                C9225 -
            ((C13732 * C2746 + C13578 * C3018 + C13731 * C1010 +
              C13577 * C1300 + C13730 * C246 + C13576 * C475) *
                 C9074 +
             (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
              C13730 * C108 + C13576 * C309) *
                 C9224) +
            (C13730 * C1878 + C13576 * C2160 + C13731 * C4076 + C13577 * C4328 +
             C13732 * C4079 + C13578 * C4331) *
                C90579) *
               C90634 * C90485 * C6692 +
           ((C13730 * C829 + C13576 * C1093 + C13731 * C2571 + C13577 * C2828 +
             C13732 * C3366 + C13578 * C3544) *
                C9224 +
            (C13730 * C1010 + C13576 * C1300 + C13731 * C2746 + C13577 * C3018 +
             C13732 * C3488 + C13578 * C3653) *
                C9074 -
            (C13732 * C21004 + C13578 * C21346 + C13731 * C3895 +
             C13577 * C4165 + C13730 * C3892 + C13576 * C4162) *
                C9225 -
            (C13732 * C21232 + C13578 * C21545 + C13731 * C4079 +
             C13577 * C4331 + C13730 * C4076 + C13576 * C4328) *
                C90579) *
               C90634 * C90485 * C90555) *
              C90503)) /
            (p * q * std::sqrt(p + q));
    d2eezx[63] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C88316 +
             (C554 * C116 + C90634 * C561) * C90744 - C584 * C88309 -
             C585 * C90503) *
                C89 +
            (C584 * C88316 + C585 * C90744 - C586 * C88309 - C587 * C90503) *
                C90 +
            (C586 * C88316 + C587 * C90744 - C588 * C88309 - C589 * C90503) *
                C91) *
               C90623 * C9074 +
           ((C2286 * C88309 -
             ((C554 * C1707 + C90634 * C2268) * C90744 +
              (C554 * C1700 + C90634 * C2264) * C88316) +
             C2287 * C90503) *
                C89 +
            (C2288 * C88309 - (C2287 * C90744 + C2286 * C88316) +
             C2289 * C90503) *
                C90 +
            (C2290 * C88309 - (C2289 * C90744 + C2288 * C88316) +
             C2291 * C90503) *
                C91) *
               C90623 * C90579) *
              C6692 +
          (((C1418 * C88309 -
             ((C554 * C839 + C90634 * C1400) * C90744 +
              (C554 * C832 + C90634 * C1396) * C88316) +
             C1419 * C90503) *
                C89 +
            (C1420 * C88309 - (C1419 * C90744 + C1418 * C88316) +
             C1421 * C90503) *
                C90 +
            (C1422 * C88309 - (C1421 * C90744 + C1420 * C88316) +
             C1423 * C90503) *
                C91) *
               C90623 * C9074 +
           (((C554 * C3891 + C90634 * C4407) * C88316 +
             (C554 * C3900 + C90634 * C4413) * C90744 - C8771 * C88309 -
             C8772 * C90503) *
                C89 +
            (C8771 * C88316 + C8772 * C90744 - C8773 * C88309 -
             C8774 * C90503) *
                C90 +
            (C8773 * C88316 + C8774 * C90744 -
             (C554 * C8120 + C90634 * C8760) * C88309 -
             (C554 * C8122 + C90634 * C8761) * C90503) *
                C91) *
               C90623 * C90579) *
              C90555)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C88316 +
             (C554 * C116 + C90634 * C561) * C90744 - C584 * C88309 -
             C585 * C90503) *
                C90485 * C13576 +
            (C16043 + C16044 - C16045 - C16046) * C90485 * C13577 +
            C16070 * C13578) *
               C9074 +
           ((C2286 * C88309 -
             ((C554 * C1707 + C90634 * C2268) * C90744 +
              (C554 * C1700 + C90634 * C2264) * C88316) +
             C2287 * C90503) *
                C90485 * C13576 +
            (C24805 - (C24806 + C24807) + C24808) * C90485 * C13577 +
            (C24809 - (C24810 + C24811) + C24812) * C90485 * C13578) *
               C90579) *
              C6692 +
          (((C16045 - (C16044 + C16043) + C16046) * C90485 * C13576 +
            (C16049 - (C16048 + C16047) + C16050) * C90485 * C13577 +
            (C16065 - (C16066 + C16067) + C16068) * C90485 * C13578) *
               C9074 +
           ((C24807 + C24806 - C24805 - C24808) * C90485 * C13576 +
            (C24811 + C24810 - C24809 - C24812) * C90485 * C13577 +
            (C17382 * C88316 + C17383 * C90744 -
             (C554 * C21004 + C90634 * C21644) * C88309 -
             (C554 * C21006 + C90634 * C21645) * C90503) *
                C90485 * C13578) *
               C90579) *
              C90555)) /
            (p * q * std::sqrt(p + q));
    d2eezy[63] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C6771 +
             (C554 * C182 + C90634 * C641) * C6692 -
             (C554 * C832 + C90634 * C1396) * C6772 -
             (C554 * C927 + C90634 * C1497) * C90555) *
                C89 +
            (C7234 + C7235 - C7236 - C7237) * C90 + C7248 * C91) *
               C90623 * C90744 +
           ((C7236 - (C7235 + C7234) + C7237) * C89 +
            (C7240 - (C7239 + C7238) + C7241) * C90 +
            (C7242 - (C7243 + C7244) + C7245) * C91) *
               C90623 * C90503) *
              C9074 +
          ((((C554 * C3891 + C90634 * C4407) * C6772 -
             ((C554 * C1794 + C90634 * C2368) * C6692 +
              (C554 * C1700 + C90634 * C2264) * C6771) +
             (C554 * C3989 + C90634 * C4493) * C90555) *
                C89 +
            (C8874 - (C8875 + C8876) + C8886) * C90 +
            (C8879 - (C8880 + C8881) + C8887) * C91) *
               C90623 * C90744 +
           ((C8876 + C8875 - C8874 - C8886) * C89 +
            (C8881 + C8880 - C8879 - C8887) * C90 +
            (C2290 * C6771 + C2382 * C6692 -
             (C554 * C8120 + C90634 * C8760) * C6772 -
             (C554 * C8222 + C90634 * C8872) * C90555) *
                C91) *
               C90623 * C90503) *
              C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C6771 +
             (C554 * C182 + C90634 * C641) * C6692 - C14614 * C6772 -
             C14700 * C90555) *
                C90485 * C13576 +
            (C14614 * C6771 + C14700 * C6692 - C14616 * C6772 -
             C14701 * C90555) *
                C90485 * C13577 +
            (C14616 * C6771 + C14701 * C6692 - C16062 * C6772 -
             C16151 * C90555) *
                C90485 * C13578) *
               C90744 +
           ((C7236 - (C7235 + C7234) + C7237) * C90485 * C13576 +
            (C3122 * C6772 - (C1518 * C6692 + C1418 * C6771) + C3218 * C90555) *
                C90485 * C13577 +
            (C16060 * C6772 - (C3218 * C6692 + C3122 * C6771) +
             C16152 * C90555) *
                C90485 * C13578) *
               C90503) *
              C9074 +
          (((C17381 * C6772 -
             ((C554 * C1794 + C90634 * C2368) * C6692 +
              (C554 * C1700 + C90634 * C2264) * C6771) +
             C17474 * C90555) *
                C90485 * C13576 +
            (C17379 * C6772 - (C17474 * C6692 + C17381 * C6771) +
             C17475 * C90555) *
                C90485 * C13577 +
            (C17382 * C6772 - (C17475 * C6692 + C17379 * C6771) +
             C17476 * C90555) *
                C90485 * C13578) *
               C90744 +
           ((C8876 + C8875 - C8874 - C8886) * C90485 * C13576 +
            (C8771 * C6771 + C8884 * C6692 - C21657 * C6772 - C21762 * C90555) *
                C90485 * C13577 +
            (C21657 * C6771 + C21762 * C6692 -
             (C554 * C21004 + C90634 * C21644) * C6772 -
             (C554 * C21126 + C90634 * C21758) * C90555) *
                C90485 * C13578) *
               C90503) *
              C90579)) /
            (p * q * std::sqrt(p + q));
    d2eezz[63] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C90634 * C555) * C9224 +
                       (C554 * C245 + C90634 * C719) * C9074 -
                       (C554 * C1700 + C90634 * C2264) * C9225 -
                       (C554 * C1879 + C90634 * C2460) * C90579) *
                          C89 +
                      (C9687 + C9688 - C9689 - C9690) * C90 + C9701 * C91) *
                         C90623 * C6692 +
                     (((C554 * C3891 + C90634 * C4407) * C9225 -
                       ((C554 * C1011 + C90634 * C1602) * C9074 +
                        (C554 * C832 + C90634 * C1396) * C9224) +
                       (C554 * C4075 + C90634 * C4573) * C90579) *
                          C89 +
                      (C10608 - (C10609 + C10610) + C10611) * C90 +
                      (C10612 - (C10613 + C10614) + C10615) * C91) *
                         C90623 * C90555) *
                        C90744 +
                    (((C9689 - (C9688 + C9687) + C9690) * C89 +
                      (C9693 - (C9692 + C9691) + C9694) * C90 +
                      (C9695 - (C9696 + C9697) + C9698) * C91) *
                         C90623 * C6692 +
                     ((C10610 + C10609 - C10608 - C10611) * C89 +
                      (C10614 + C10613 - C10612 - C10615) * C90 +
                      (C1422 * C9224 + C1617 * C9074 -
                       (C554 * C8120 + C90634 * C8760) * C9225 -
                       (C554 * C8322 + C90634 * C8985) * C90579) *
                          C91) *
                         C90623 * C90555) *
                        C90503)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C90634 * C555) * C9224 +
                       (C554 * C245 + C90634 * C719) * C9074 -
                       (C554 * C1700 + C90634 * C2264) * C9225 -
                       (C554 * C1879 + C90634 * C2460) * C90579) *
                          C90485 * C13576 +
                      (C23433 + C23434 - C23435 - C23436) * C90485 * C13577 +
                      (C23437 + C23438 - C23439 - C23440) * C90485 * C13578) *
                         C6692 +
                     ((C23435 - (C23434 + C23433) + C23436) * C90485 * C13576 +
                      (C23439 - (C23438 + C23437) + C23440) * C90485 * C13577 +
                      (C17382 * C9225 - (C16238 * C9074 + C16062 * C9224) +
                       C17571 * C90579) *
                          C90485 * C13578) *
                         C90555) *
                        C90744 +
                    (((C9689 - (C9688 + C9687) + C9690) * C90485 * C13576 +
                      (C10608 - (C10609 + C10610) + C10611) * C90485 * C13577 +
                      (C23441 - (C23442 + C23443) + C23444) * C90485 * C13578) *
                         C6692 +
                     ((C10610 + C10609 - C10608 - C10611) * C90485 * C13576 +
                      (C23443 + C23442 - C23441 - C23444) * C90485 * C13577 +
                      (C16060 * C9224 + C16239 * C9074 -
                       (C554 * C21004 + C90634 * C21644) * C9225 -
                       (C554 * C21232 + C90634 * C21860) * C90579) *
                          C90485 * C13578) *
                         C90555) *
                        C90503)) /
                      (p * q * std::sqrt(p + q));
    d2eexx[64] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                       C102 * C109 + C91 * C115) *
                          C3364 +
                      (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 +
                       C102 * C118 + C91 * C127) *
                          C90498) *
                         C90623 * C90634 * C9074 -
                     ((C102 * C1705 + C91 * C1712 + C101 * C1706 + C90 * C1713 +
                       C100 * C1707 + C89 * C1714) *
                          C90498 +
                      (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
                       C100 * C1700 + C89 * C1708) *
                          C3364) *
                         C90623 * C90634 * C90579) *
                        C90781 +
                    (((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
                       C102 * C3893 + C91 * C3899) *
                          C3364 +
                      (C100 * C3900 + C89 * C3909 + C101 * C3901 + C90 * C3910 +
                       C102 * C3902 + C91 * C3911) *
                          C90498) *
                         C90623 * C90634 * C90579 -
                     ((C102 * C837 + C91 * C844 + C101 * C838 + C90 * C845 +
                       C100 * C839 + C89 * C846) *
                          C90498 +
                      (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                       C100 * C832 + C89 * C840) *
                          C3364) *
                         C90623 * C90634 * C9074) *
                        C90774 +
                    (((C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
                       C102 * C2572 + C91 * C2576) *
                          C3364 +
                      (C100 * C2577 + C89 * C2582 + C101 * C2578 + C90 * C2583 +
                       C102 * C2579 + C91 * C2584) *
                          C90498) *
                         C90623 * C90634 * C9074 -
                     ((C102 * C3903 + C91 * C3912 + C101 * C3904 + C90 * C3913 +
                       C100 * C3905 + C89 * C3914) *
                          C90498 +
                      (C102 * C3894 + C91 * C3906 + C101 * C3895 + C90 * C3907 +
                       C100 * C3896 + C89 * C3908) *
                          C3364) *
                         C90623 * C90634 * C90579) *
                        C7400)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C13579 * C107 + C90485 * C113) * C3364 +
                       (C13579 * C116 + C90485 * C125) * C90498) *
                          C13576 +
                      (C16297 + C16298) * C13577 + C16307 * C13578) *
                         C90634 * C9074 -
                     (C16868 * C13578 + (C16864 + C16865) * C13577 +
                      ((C13579 * C1707 + C90485 * C1714) * C90498 +
                       (C13579 * C1700 + C90485 * C1708) * C3364) *
                          C13576) *
                         C90634 * C90579) *
                        C90781 +
                    (((C16865 + C16864) * C13576 + (C16863 + C16862) * C13577 +
                      (C16866 + C16867) * C13578) *
                         C90634 * C90579 -
                     (C16308 * C13578 + (C16300 + C16299) * C13577 +
                      (C16298 + C16297) * C13576) *
                         C90634 * C9074) *
                        C90774 +
                    ((C16307 * C13576 + (C16302 + C16301) * C13577 +
                      (C16311 + C16312) * C13578) *
                         C90634 * C9074 -
                     (((C13579 * C16839 + C90485 * C16842) * C90498 +
                       (C13579 * C16836 + C90485 * C16840) * C3364) *
                          C13578 +
                      (C16867 + C16866) * C13577 + C16868 * C13576) *
                         C90634 * C90579) *
                        C7400)) /
                      (p * q * std::sqrt(p + q));
    d2eexy[64] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C7477 +
           (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 + C102 * C184 +
            C91 * C190) *
               C90781 -
           (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 + C100 * C832 +
            C89 * C840) *
               C7478 -
           (C102 * C925 + C91 * C930 + C101 * C926 + C90 * C931 + C100 * C927 +
            C89 * C932) *
               C90774 +
           (C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
            C102 * C2572 + C91 * C2576) *
               C7479 +
           (C100 * C2663 + C89 * C2667 + C101 * C2664 + C90 * C2668 +
            C102 * C2665 + C91 * C2669) *
               C7400) *
              C90623 * C90634 * C90498 * C9074 +
          ((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
            C102 * C3893 + C91 * C3899) *
               C7478 -
           ((C102 * C1792 + C91 * C1797 + C101 * C1791 + C90 * C1796 +
             C100 * C1794 + C89 * C1799) *
                C90781 +
            (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
             C100 * C1700 + C89 * C1708) *
                C7477) +
           (C100 * C3989 + C89 * C3995 + C101 * C3990 + C90 * C3996 +
            C102 * C3991 + C91 * C3997) *
               C90774 -
           (C102 * C3894 + C91 * C3906 + C101 * C3895 + C90 * C3907 +
            C100 * C3896 + C89 * C3908) *
               C7479 -
           (C102 * C3992 + C91 * C3998 + C101 * C3993 + C90 * C3999 +
            C100 * C3994 + C89 * C4000) *
               C7400) *
              C90623 * C90634 * C90498 * C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C7477 +
            (C13579 * C182 + C90485 * C188) * C90781 - C14082 * C7478 -
            C14192 * C90774 + C14088 * C7479 + C14193 * C7400) *
               C13576 +
           (C14082 * C7477 + C14192 * C90781 - C14088 * C7478 -
            C14193 * C90774 + C15553 * C7479 + C15643 * C7400) *
               C13577 +
           (C14088 * C7477 + C14193 * C90781 - C15553 * C7478 -
            C15643 * C90774 + C16309 * C7479 + C16367 * C7400) *
               C13578) *
              C90634 * C90498 * C9074 +
          ((C16859 * C7478 -
            ((C13579 * C1794 + C90485 * C1799) * C90781 +
             (C13579 * C1700 + C90485 * C1708) * C7477) +
            C16953 * C90774 - C16857 * C7479 - C16954 * C7400) *
               C13576 +
           (C16857 * C7478 - (C16953 * C90781 + C16859 * C7477) +
            C16954 * C90774 - C16860 * C7479 - C16955 * C7400) *
               C13577 +
           (C16860 * C7478 - (C16954 * C90781 + C16857 * C7477) +
            C16955 * C90774 - (C13579 * C16836 + C90485 * C16840) * C7479 -
            (C13579 * C16943 + C90485 * C16945) * C7400) *
               C13578) *
              C90634 * C90498 * C90579)) /
            (p * q * std::sqrt(p + q));
    d2eexz[64] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C9224 +
           (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 + C102 * C247 +
            C91 * C253) *
               C9074 -
           (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
            C100 * C1700 + C89 * C1708) *
               C9225 -
           (C102 * C1877 + C91 * C1882 + C101 * C1878 + C90 * C1883 +
            C100 * C1879 + C89 * C1884) *
               C90579) *
              C90623 * C90634 * C90781 +
          ((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
            C102 * C3893 + C91 * C3899) *
               C9225 -
           ((C102 * C1009 + C91 * C1014 + C101 * C1010 + C90 * C1015 +
             C100 * C1011 + C89 * C1016) *
                C9074 +
            (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 + C100 * C832 +
             C89 * C840) *
                C9224) +
           (C100 * C4075 + C89 * C4081 + C101 * C4076 + C90 * C4082 +
            C102 * C4077 + C91 * C4083) *
               C90579) *
              C90623 * C90634 * C90774 +
          ((C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
            C102 * C2572 + C91 * C2576) *
               C9224 +
           (C100 * C2745 + C89 * C2749 + C101 * C2746 + C90 * C2750 +
            C102 * C2747 + C91 * C2751) *
               C9074 -
           (C102 * C3894 + C91 * C3906 + C101 * C3895 + C90 * C3907 +
            C100 * C3896 + C89 * C3908) *
               C9225 -
           (C102 * C4078 + C91 * C4084 + C101 * C4079 + C90 * C4085 +
            C100 * C4080 + C89 * C4086) *
               C90579) *
              C90623 * C90634 * C7400) *
         C90498) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C9224 +
            (C13579 * C245 + C90485 * C251) * C9074 -
            (C13579 * C1700 + C90485 * C1708) * C9225 -
            (C13579 * C1879 + C90485 * C1884) * C90579) *
               C13576 +
           (C22829 + C22830 - C22831 - C22832) * C13577 + C25237 * C13578) *
              C90634 * C90781 +
          ((C22831 - (C22830 + C22829) + C22832) * C13576 +
           (C22835 - (C22834 + C22833) + C22836) * C13577 +
           (C25232 - (C25233 + C25234) + C25235) * C13578) *
              C90634 * C90774 +
          (C25237 * C13576 + (C25234 + C25233 - C25232 - C25235) * C13577 +
           (C16309 * C9224 + C16424 * C9074 -
            (C13579 * C16836 + C90485 * C16840) * C9225 -
            (C13579 * C17030 + C90485 * C17032) * C90579) *
               C13578) *
              C90634 * C7400) *
         C90498) /
            (p * q * std::sqrt(p + q));
    d2eeyx[64] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C307 * C107 + C90623 * C308) * C3364 +
                       (C307 * C116 + C90623 * C314) * C90498) *
                          C90634 * C89 +
                      (C337 * C3364 + C338 * C90498) * C90634 * C90 +
                      (C339 * C3364 + C340 * C90498) * C90634 * C91) *
                         C9074 -
                     ((C1987 * C90498 + C1986 * C3364) * C90634 * C91 +
                      (C1985 * C90498 + C1984 * C3364) * C90634 * C90 +
                      ((C307 * C1707 + C90623 * C1966) * C90498 +
                       (C307 * C1700 + C90623 * C1962) * C3364) *
                          C90634 * C89) *
                         C90579) *
                        C90781 +
                    ((((C307 * C3891 + C90623 * C4161) * C3364 +
                       (C307 * C3900 + C90623 * C4167) * C90498) *
                          C90634 * C89 +
                      (C8433 * C3364 + C8434 * C90498) * C90634 * C90 +
                      (C8435 * C3364 + C8436 * C90498) * C90634 * C91) *
                         C90579 -
                     ((C1119 * C90498 + C1118 * C3364) * C90634 * C91 +
                      (C1117 * C90498 + C1116 * C3364) * C90634 * C90 +
                      ((C307 * C839 + C90623 * C1098) * C90498 +
                       (C307 * C832 + C90623 * C1094) * C3364) *
                          C90634 * C89) *
                         C9074) *
                        C90774 +
                    ((((C307 * C2570 + C90623 * C2827) * C3364 +
                       (C307 * C2577 + C90623 * C2831) * C90498) *
                          C90634 * C89 +
                      (C2844 * C3364 + C2845 * C90498) * C90634 * C90 +
                      (C2846 * C3364 + C2847 * C90498) * C90634 * C91) *
                         C9074 -
                     (((C307 * C3903 + C90623 * C4170) * C90498 +
                       (C307 * C3894 + C90623 * C4164) * C3364) *
                          C90634 * C91 +
                      ((C307 * C3904 + C90623 * C4171) * C90498 +
                       (C307 * C3895 + C90623 * C4165) * C3364) *
                          C90634 * C90 +
                      ((C307 * C3905 + C90623 * C4172) * C90498 +
                       (C307 * C3896 + C90623 * C4166) * C3364) *
                          C90634 * C89) *
                         C90579) *
                        C7400)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C13730 * C107 + C13576 * C308 + C13731 * C832 +
                       C13577 * C1094 + C13732 * C2570 + C13578 * C2827) *
                          C3364 +
                      (C13730 * C116 + C13576 * C314 + C13731 * C839 +
                       C13577 * C1098 + C13732 * C2577 + C13578 * C2831) *
                          C90498) *
                         C90634 * C90485 * C9074 -
                     ((C13732 * C3905 + C13578 * C4172 + C13731 * C3900 +
                       C13577 * C4167 + C13730 * C1707 + C13576 * C1966) *
                          C90498 +
                      (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 +
                       C13577 * C4161 + C13730 * C1700 + C13576 * C1962) *
                          C3364) *
                         C90634 * C90485 * C90579) *
                        C90781 +
                    (((C13730 * C3891 + C13576 * C4161 + C13731 * C3896 +
                       C13577 * C4166 + C13732 * C16835 + C13578 * C17131) *
                          C3364 +
                      (C13730 * C3900 + C13576 * C4167 + C13731 * C3905 +
                       C13577 * C4172 + C13732 * C16838 + C13578 * C17133) *
                          C90498) *
                         C90634 * C90485 * C90579 -
                     ((C13732 * C3370 + C13578 * C3548 + C13731 * C2577 +
                       C13577 * C2831 + C13730 * C839 + C13576 * C1098) *
                          C90498 +
                      (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 +
                       C13577 * C2827 + C13730 * C832 + C13576 * C1094) *
                          C3364) *
                         C90634 * C90485 * C9074) *
                        C90774 +
                    (((C13730 * C2570 + C13576 * C2827 + C13731 * C3367 +
                       C13577 * C3545 + C13732 * C15525 + C13578 * C15808) *
                          C3364 +
                      (C13730 * C2577 + C13576 * C2831 + C13731 * C3370 +
                       C13577 * C3548 + C13732 * C15528 + C13578 * C15810) *
                          C90498) *
                         C90634 * C90485 * C9074 -
                     ((C13732 * C16839 + C13578 * C17134 + C13731 * C16838 +
                       C13577 * C17133 + C13730 * C3905 + C13576 * C4172) *
                          C90498 +
                      (C13732 * C16836 + C13578 * C17132 + C13731 * C16835 +
                       C13577 * C17131 + C13730 * C3896 + C13576 * C4166) *
                          C3364) *
                         C90634 * C90485 * C90579) *
                        C7400)) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[64] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C7477 +
            (C307 * C182 + C90623 * C394) * C90781 -
            (C307 * C832 + C90623 * C1094) * C7478 -
            (C307 * C927 + C90623 * C1195) * C90774 +
            (C307 * C2570 + C90623 * C2827) * C7479 +
            (C307 * C2663 + C90623 * C2921) * C7400) *
               C90634 * C89 +
           (C7703 + C7704 - C7705 - C7706 + C7707 + C7708) * C90634 * C90 +
           (C7709 + C7710 - C7711 - C7712 + C7713 + C7714) * C90634 * C91) *
              C90498 * C9074 +
          (((C307 * C3891 + C90623 * C4161) * C7478 -
            ((C307 * C1794 + C90623 * C2066) * C90781 +
             (C307 * C1700 + C90623 * C1962) * C7477) +
            (C307 * C3989 + C90623 * C4247) * C90774 -
            (C307 * C3896 + C90623 * C4166) * C7479 -
            (C307 * C3994 + C90623 * C4248) * C7400) *
               C90634 * C89 +
           (C8433 * C7478 - (C2078 * C90781 + C1984 * C7477) + C8546 * C90774 -
            (C307 * C3895 + C90623 * C4165) * C7479 -
            (C307 * C3993 + C90623 * C4250) * C7400) *
               C90634 * C90 +
           (C8435 * C7478 - (C2079 * C90781 + C1986 * C7477) + C8547 * C90774 -
            (C307 * C3894 + C90623 * C4164) * C7479 -
            (C307 * C3992 + C90623 * C4252) * C7400) *
               C90634 * C91) *
              C90498 * C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C7477 +
           (C13730 * C182 + C13576 * C394 + C13731 * C927 + C13577 * C1195 +
            C13732 * C2663 + C13578 * C2921) *
               C90781 -
           (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
            C13730 * C832 + C13576 * C1094) *
               C7478 -
           (C13732 * C3433 + C13578 * C3599 + C13731 * C2663 + C13577 * C2921 +
            C13730 * C927 + C13576 * C1195) *
               C90774 +
           (C13730 * C2570 + C13576 * C2827 + C13731 * C3367 + C13577 * C3545 +
            C13732 * C15525 + C13578 * C15808) *
               C7479 +
           (C13730 * C2663 + C13576 * C2921 + C13731 * C3433 + C13577 * C3599 +
            C13732 * C15634 + C13578 * C15886) *
               C7400) *
              C90634 * C90485 * C90498 * C9074 +
          ((C13730 * C3891 + C13576 * C4161 + C13731 * C3896 + C13577 * C4166 +
            C13732 * C16835 + C13578 * C17131) *
               C7478 -
           ((C13732 * C3994 + C13578 * C4248 + C13731 * C3989 + C13577 * C4247 +
             C13730 * C1794 + C13576 * C2066) *
                C90781 +
            (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 + C13577 * C4161 +
             C13730 * C1700 + C13576 * C1962) *
                C7477) +
           (C13730 * C3989 + C13576 * C4247 + C13731 * C3994 + C13577 * C4248 +
            C13732 * C16942 + C13578 * C17209) *
               C90774 -
           (C13732 * C16836 + C13578 * C17132 + C13731 * C16835 +
            C13577 * C17131 + C13730 * C3896 + C13576 * C4166) *
               C7479 -
           (C13732 * C16943 + C13578 * C17210 + C13731 * C16942 +
            C13577 * C17209 + C13730 * C3994 + C13576 * C4248) *
               C7400) *
              C90634 * C90485 * C90498 * C90579)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[64] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C9224 +
            (C307 * C245 + C90623 * C474) * C9074 -
            (C307 * C1700 + C90623 * C1962) * C9225 -
            (C307 * C1879 + C90623 * C2159) * C90579) *
               C90634 * C89 +
           (C9449 + C9450 - C9451 - C9452) * C90634 * C90 + C9464 * C91) *
              C90781 +
          (((C307 * C3891 + C90623 * C4161) * C9225 -
            ((C307 * C1011 + C90623 * C1301) * C9074 +
             (C307 * C832 + C90623 * C1094) * C9224) +
            (C307 * C4075 + C90623 * C4327) * C90579) *
               C90634 * C89 +
           (C10298 - (C10299 + C10300) + C10301) * C90634 * C90 +
           (C10302 - (C10303 + C10304) + C10305) * C90634 * C91) *
              C90774 +
          (((C307 * C2570 + C90623 * C2827) * C9224 +
            (C307 * C2745 + C90623 * C3017) * C9074 -
            (C307 * C3896 + C90623 * C4166) * C9225 -
            (C307 * C4080 + C90623 * C4330) * C90579) *
               C90634 * C89 +
           (C2844 * C9224 + C3028 * C9074 -
            (C307 * C3895 + C90623 * C4165) * C9225 -
            (C307 * C4079 + C90623 * C4331) * C90579) *
               C90634 * C90 +
           (C2846 * C9224 + C3029 * C9074 -
            (C307 * C3894 + C90623 * C4164) * C9225 -
            (C307 * C4078 + C90623 * C4332) * C90579) *
               C90634 * C91) *
              C7400) *
         C90498) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C9224 +
           (C13730 * C245 + C13576 * C474 + C13731 * C1011 + C13577 * C1301 +
            C13732 * C2745 + C13578 * C3017) *
               C9074 -
           (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 + C13577 * C4161 +
            C13730 * C1700 + C13576 * C1962) *
               C9225 -
           (C13732 * C4080 + C13578 * C4330 + C13731 * C4075 + C13577 * C4327 +
            C13730 * C1879 + C13576 * C2159) *
               C90579) *
              C90634 * C90485 * C90781 +
          ((C13730 * C3891 + C13576 * C4161 + C13731 * C3896 + C13577 * C4166 +
            C13732 * C16835 + C13578 * C17131) *
               C9225 -
           ((C13732 * C3489 + C13578 * C3654 + C13731 * C2745 + C13577 * C3017 +
             C13730 * C1011 + C13576 * C1301) *
                C9074 +
            (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
             C13730 * C832 + C13576 * C1094) *
                C9224) +
           (C13730 * C4075 + C13576 * C4327 + C13731 * C4080 + C13577 * C4330 +
            C13732 * C17029 + C13578 * C17285) *
               C90579) *
              C90634 * C90485 * C90774 +
          ((C13730 * C2570 + C13576 * C2827 + C13731 * C3367 + C13577 * C3545 +
            C13732 * C15525 + C13578 * C15808) *
               C9224 +
           (C13730 * C2745 + C13576 * C3017 + C13731 * C3489 + C13577 * C3654 +
            C13732 * C15718 + C13578 * C15962) *
               C9074 -
           (C13732 * C16836 + C13578 * C17132 + C13731 * C16835 +
            C13577 * C17131 + C13730 * C3896 + C13576 * C4166) *
               C9225 -
           (C13732 * C17030 + C13578 * C17286 + C13731 * C17029 +
            C13577 * C17285 + C13730 * C4080 + C13576 * C4330) *
               C90579) *
              C90634 * C90485 * C7400) *
         C90498) /
            (p * q * std::sqrt(p + q));
    d2eezx[64] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C90634 * C555) * C3364 +
                       (C554 * C116 + C90634 * C561) * C90498) *
                          C89 +
                      (C584 * C3364 + C585 * C90498) * C90 +
                      (C586 * C3364 + C587 * C90498) * C91) *
                         C90623 * C9074 -
                     ((C2289 * C90498 + C2288 * C3364) * C91 +
                      (C2287 * C90498 + C2286 * C3364) * C90 +
                      ((C554 * C1707 + C90634 * C2268) * C90498 +
                       (C554 * C1700 + C90634 * C2264) * C3364) *
                          C89) *
                         C90623 * C90579) *
                        C90781 +
                    ((((C554 * C3891 + C90634 * C4407) * C3364 +
                       (C554 * C3900 + C90634 * C4413) * C90498) *
                          C89 +
                      (C8771 * C3364 + C8772 * C90498) * C90 +
                      (C8773 * C3364 + C8774 * C90498) * C91) *
                         C90623 * C90579 -
                     ((C1421 * C90498 + C1420 * C3364) * C91 +
                      (C1419 * C90498 + C1418 * C3364) * C90 +
                      ((C554 * C839 + C90634 * C1400) * C90498 +
                       (C554 * C832 + C90634 * C1396) * C3364) *
                          C89) *
                         C90623 * C9074) *
                        C90774 +
                    ((((C554 * C2570 + C90634 * C3105) * C3364 +
                       (C554 * C2577 + C90634 * C3109) * C90498) *
                          C89 +
                      (C3122 * C3364 + C3123 * C90498) * C90 +
                      (C3124 * C3364 + C3125 * C90498) * C91) *
                         C90623 * C9074 -
                     (((C554 * C3903 + C90634 * C4416) * C90498 +
                       (C554 * C3894 + C90634 * C4410) * C3364) *
                          C91 +
                      ((C554 * C3904 + C90634 * C4417) * C90498 +
                       (C554 * C3895 + C90634 * C4411) * C3364) *
                          C90 +
                      ((C554 * C3905 + C90634 * C4418) * C90498 +
                       (C554 * C3896 + C90634 * C4412) * C3364) *
                          C89) *
                         C90623 * C90579) *
                        C7400)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C90634 * C555) * C3364 +
                       (C554 * C116 + C90634 * C561) * C90498) *
                          C90485 * C13576 +
                      (C16632 + C16633) * C90485 * C13577 + C16646 * C13578) *
                         C9074 -
                     (C17391 * C13578 + (C17386 + C17387) * C90485 * C13577 +
                      ((C554 * C1707 + C90634 * C2268) * C90498 +
                       (C554 * C1700 + C90634 * C2264) * C3364) *
                          C90485 * C13576) *
                         C90579) *
                        C90781 +
                    (((C17387 + C17386) * C90485 * C13576 +
                      (C17385 + C17384) * C90485 * C13577 +
                      (C17388 + C17389) * C90485 * C13578) *
                         C90579 -
                     (C16647 * C13578 + (C16635 + C16634) * C90485 * C13577 +
                      (C16633 + C16632) * C90485 * C13576) *
                         C9074) *
                        C90774 +
                    ((C16646 * C13576 + (C16637 + C16636) * C90485 * C13577 +
                      (C16648 + C16649) * C90485 * C13578) *
                         C9074 -
                     (((C554 * C16839 + C90634 * C17364) * C90498 +
                       (C554 * C16836 + C90634 * C17362) * C3364) *
                          C90485 * C13578 +
                      (C17389 + C17388) * C90485 * C13577 + C17391 * C13576) *
                         C90579) *
                        C7400)) /
                      (p * q * std::sqrt(p + q));
    d2eezy[64] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C7477 +
            (C554 * C182 + C90634 * C641) * C90781 -
            (C554 * C832 + C90634 * C1396) * C7478 -
            (C554 * C927 + C90634 * C1497) * C90774 +
            (C554 * C2570 + C90634 * C3105) * C7479 +
            (C554 * C2663 + C90634 * C3199) * C7400) *
               C89 +
           (C7937 + C7938 - C7939 - C7940 + C7941 + C7942) * C90 +
           (C7943 + C7944 - C7945 - C7946 + C7947 + C7948) * C91) *
              C90623 * C90498 * C9074 +
          (((C554 * C3891 + C90634 * C4407) * C7478 -
            ((C554 * C1794 + C90634 * C2368) * C90781 +
             (C554 * C1700 + C90634 * C2264) * C7477) +
            (C554 * C3989 + C90634 * C4493) * C90774 -
            (C554 * C3896 + C90634 * C4412) * C7479 -
            (C554 * C3994 + C90634 * C4494) * C7400) *
               C89 +
           (C8771 * C7478 - (C2380 * C90781 + C2286 * C7477) + C8884 * C90774 -
            (C554 * C3895 + C90634 * C4411) * C7479 -
            (C554 * C3993 + C90634 * C4496) * C7400) *
               C90 +
           (C8773 * C7478 - (C2381 * C90781 + C2288 * C7477) + C8885 * C90774 -
            (C554 * C3894 + C90634 * C4410) * C7479 -
            (C554 * C3992 + C90634 * C4498) * C7400) *
               C91) *
              C90623 * C90498 * C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C7477 +
            (C554 * C182 + C90634 * C641) * C90781 - C14614 * C7478 -
            C14700 * C90774 + C14616 * C7479 + C14701 * C7400) *
               C90485 * C13576 +
           (C14614 * C7477 + C14700 * C90781 - C14616 * C7478 -
            C14701 * C90774 + C16062 * C7479 + C16151 * C7400) *
               C90485 * C13577 +
           (C14616 * C7477 + C14701 * C90781 - C16062 * C7478 -
            C16151 * C90774 + C16644 * C7479 + C16703 * C7400) *
               C90485 * C13578) *
              C90498 * C9074 +
          ((C17381 * C7478 -
            ((C554 * C1794 + C90634 * C2368) * C90781 +
             (C554 * C1700 + C90634 * C2264) * C7477) +
            C17474 * C90774 - C17379 * C7479 - C17475 * C7400) *
               C90485 * C13576 +
           (C17379 * C7478 - (C17474 * C90781 + C17381 * C7477) +
            C17475 * C90774 - C17382 * C7479 - C17476 * C7400) *
               C90485 * C13577 +
           (C17382 * C7478 - (C17475 * C90781 + C17379 * C7477) +
            C17476 * C90774 - (C554 * C16836 + C90634 * C17362) * C7479 -
            (C554 * C16943 + C90634 * C17466) * C7400) *
               C90485 * C13578) *
              C90498 * C90579)) /
            (p * q * std::sqrt(p + q));
    d2eezz[64] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C90634 * C555) * C9224 +
                      (C554 * C245 + C90634 * C719) * C9074 -
                      (C554 * C1700 + C90634 * C2264) * C9225 -
                      (C554 * C1879 + C90634 * C2460) * C90579) *
                         C89 +
                     (C9687 + C9688 - C9689 - C9690) * C90 + C9701 * C91) *
                        C90623 * C90781 +
                    (((C554 * C3891 + C90634 * C4407) * C9225 -
                      ((C554 * C1011 + C90634 * C1602) * C9074 +
                       (C554 * C832 + C90634 * C1396) * C9224) +
                      (C554 * C4075 + C90634 * C4573) * C90579) *
                         C89 +
                     (C10608 - (C10609 + C10610) + C10611) * C90 +
                     (C10612 - (C10613 + C10614) + C10615) * C91) *
                        C90623 * C90774 +
                    (((C554 * C2570 + C90634 * C3105) * C9224 +
                      (C554 * C2745 + C90634 * C3295) * C9074 -
                      (C554 * C3896 + C90634 * C4412) * C9225 -
                      (C554 * C4080 + C90634 * C4576) * C90579) *
                         C89 +
                     (C3122 * C9224 + C3306 * C9074 -
                      (C554 * C3895 + C90634 * C4411) * C9225 -
                      (C554 * C4079 + C90634 * C4577) * C90579) *
                         C90 +
                     (C3124 * C9224 + C3307 * C9074 -
                      (C554 * C3894 + C90634 * C4410) * C9225 -
                      (C554 * C4078 + C90634 * C4578) * C90579) *
                         C91) *
                        C90623 * C7400) *
                   C90498) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C90634 * C555) * C9224 +
                      (C554 * C245 + C90634 * C719) * C9074 -
                      (C554 * C1700 + C90634 * C2264) * C9225 -
                      (C554 * C1879 + C90634 * C2460) * C90579) *
                         C90485 * C13576 +
                     (C23433 + C23434 - C23435 - C23436) * C90485 * C13577 +
                     C25689 * C13578) *
                        C90781 +
                    ((C23435 - (C23434 + C23433) + C23436) * C90485 * C13576 +
                     (C23439 - (C23438 + C23437) + C23440) * C90485 * C13577 +
                     (C25683 - (C25684 + C25685) + C25686) * C90485 * C13578) *
                        C90774 +
                    (C25689 * C13576 +
                     (C25685 + C25684 - C25683 - C25686) * C90485 * C13577 +
                     (C16644 * C9224 + C16760 * C9074 -
                      (C554 * C16836 + C90634 * C17362) * C9225 -
                      (C554 * C17030 + C90634 * C17551) * C90579) *
                         C90485 * C13578) *
                        C7400) *
                   C90498) /
                      (p * q * std::sqrt(p + q));
    d2eexx[65] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                       C102 * C109 + C91 * C115) *
                          C3364 +
                      (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 +
                       C102 * C118 + C91 * C127) *
                          C90498) *
                         C90623 * C90634 * C90782 -
                     ((C102 * C1705 + C91 * C1712 + C101 * C1706 + C90 * C1713 +
                       C100 * C1707 + C89 * C1714) *
                          C90498 +
                      (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
                       C100 * C1700 + C89 * C1708) *
                          C3364) *
                         C90623 * C90634 * C90777 +
                     ((C100 * C4656 + C89 * C4660 + C101 * C4657 + C90 * C4661 +
                       C102 * C4658 + C91 * C4662) *
                          C3364 +
                      (C100 * C4663 + C89 * C4668 + C101 * C4664 + C90 * C4669 +
                       C102 * C4665 + C91 * C4670) *
                          C90498) *
                         C90623 * C90634 * C10691) *
                        C6692 +
                    (((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
                       C102 * C3893 + C91 * C3899) *
                          C3364 +
                      (C100 * C3900 + C89 * C3909 + C101 * C3901 + C90 * C3910 +
                       C102 * C3902 + C91 * C3911) *
                          C90498) *
                         C90623 * C90634 * C90777 -
                     ((C102 * C837 + C91 * C844 + C101 * C838 + C90 * C845 +
                       C100 * C839 + C89 * C846) *
                          C90498 +
                      (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                       C100 * C832 + C89 * C840) *
                          C3364) *
                         C90623 * C90634 * C90782 -
                     ((C102 * C5472 + C91 * C5478 + C101 * C5473 + C90 * C5479 +
                       C100 * C5474 + C89 * C5480) *
                          C90498 +
                      (C102 * C5469 + C91 * C5475 + C101 * C5470 + C90 * C5476 +
                       C100 * C5471 + C89 * C5477) *
                          C3364) *
                         C90623 * C90634 * C10691) *
                        C90555)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C13579 * C107 + C90485 * C113) * C3364 +
                       (C13579 * C116 + C90485 * C125) * C90498) *
                          C13576 +
                      (C16297 + C16298) * C13577 + C16307 * C13578) *
                         C90634 * C90782 -
                     (C16868 * C13578 + (C16864 + C16865) * C13577 +
                      ((C13579 * C1707 + C90485 * C1714) * C90498 +
                       (C13579 * C1700 + C90485 * C1708) * C3364) *
                          C13576) *
                         C90634 * C90777 +
                     (((C13579 * C4656 + C90485 * C4660) * C3364 +
                       (C13579 * C4663 + C90485 * C4668) * C90498) *
                          C13576 +
                      (C18366 + C18367) * C13577 + (C18368 + C18369) * C13578) *
                         C90634 * C10691) *
                        C6692 +
                    (((C16865 + C16864) * C13576 + (C16863 + C16862) * C13577 +
                      (C16866 + C16867) * C13578) *
                         C90634 * C90777 -
                     (C16308 * C13578 + (C16300 + C16299) * C13577 +
                      (C16298 + C16297) * C13576) *
                         C90634 * C90782 -
                     (((C13579 * C18350 + C90485 * C18352) * C90498 +
                       (C13579 * C18349 + C90485 * C18351) * C3364) *
                          C13578 +
                      (C18369 + C18368) * C13577 + (C18367 + C18366) * C13576) *
                         C90634 * C10691) *
                        C90555)) /
                      (p * q * std::sqrt(p + q));
    d2eexy[65] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                      C102 * C109 + C91 * C115) *
                         C6771 +
                     (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 +
                      C102 * C184 + C91 * C190) *
                         C6692 -
                     (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                      C100 * C832 + C89 * C840) *
                         C6772 -
                     (C102 * C925 + C91 * C930 + C101 * C926 + C90 * C931 +
                      C100 * C927 + C89 * C932) *
                         C90555) *
                        C90623 * C90634 * C90498 * C90782 +
                    ((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
                      C102 * C3893 + C91 * C3899) *
                         C6772 -
                     ((C102 * C1792 + C91 * C1797 + C101 * C1791 + C90 * C1796 +
                       C100 * C1794 + C89 * C1799) *
                          C6692 +
                      (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
                       C100 * C1700 + C89 * C1708) *
                          C6771) +
                     (C100 * C3989 + C89 * C3995 + C101 * C3990 + C90 * C3996 +
                      C102 * C3991 + C91 * C3997) *
                         C90555) *
                        C90623 * C90634 * C90498 * C90777 +
                    ((C100 * C4656 + C89 * C4660 + C101 * C4657 + C90 * C4661 +
                      C102 * C4658 + C91 * C4662) *
                         C6771 +
                     (C100 * C4746 + C89 * C4750 + C101 * C4747 + C90 * C4751 +
                      C102 * C4748 + C91 * C4752) *
                         C6692 -
                     (C102 * C5469 + C91 * C5475 + C101 * C5470 + C90 * C5476 +
                      C100 * C5471 + C89 * C5477) *
                         C6772 -
                     (C102 * C5555 + C91 * C5558 + C101 * C5556 + C90 * C5559 +
                      C100 * C5557 + C89 * C5560) *
                         C90555) *
                        C90623 * C90634 * C90498 * C10691)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C13579 * C107 + C90485 * C113) * C6771 +
                      (C13579 * C182 + C90485 * C188) * C6692 - C14082 * C6772 -
                      C14192 * C90555) *
                         C13576 +
                     (C14082 * C6771 + C14192 * C6692 - C14088 * C6772 -
                      C14193 * C90555) *
                         C13577 +
                     (C14088 * C6771 + C14193 * C6692 - C15553 * C6772 -
                      C15643 * C90555) *
                         C13578) *
                        C90634 * C90498 * C90782 +
                    ((C16859 * C6772 -
                      ((C13579 * C1794 + C90485 * C1799) * C6692 +
                       (C13579 * C1700 + C90485 * C1708) * C6771) +
                      C16953 * C90555) *
                         C13576 +
                     (C16857 * C6772 - (C16953 * C6692 + C16859 * C6771) +
                      C16954 * C90555) *
                         C13577 +
                     (C16860 * C6772 - (C16954 * C6692 + C16857 * C6771) +
                      C16955 * C90555) *
                         C13578) *
                        C90634 * C90498 * C90777 +
                    (((C13579 * C4656 + C90485 * C4660) * C6771 +
                      (C13579 * C4746 + C90485 * C4750) * C6692 -
                      C18362 * C6772 - C18450 * C90555) *
                         C13576 +
                     (C18362 * C6771 + C18450 * C6692 - C18364 * C6772 -
                      C18451 * C90555) *
                         C13577 +
                     (C18364 * C6771 + C18451 * C6692 -
                      (C13579 * C18349 + C90485 * C18351) * C6772 -
                      (C13579 * C18443 + C90485 * C18444) * C90555) *
                         C13578) *
                        C90634 * C90498 * C10691)) /
                      (p * q * std::sqrt(p + q));
    d2eexz[65] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C10840 +
           (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 + C102 * C247 +
            C91 * C253) *
               C90782 -
           (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
            C100 * C1700 + C89 * C1708) *
               C10841 -
           (C102 * C1877 + C91 * C1882 + C101 * C1878 + C90 * C1883 +
            C100 * C1879 + C89 * C1884) *
               C90777 +
           (C100 * C4656 + C89 * C4660 + C101 * C4657 + C90 * C4661 +
            C102 * C4658 + C91 * C4662) *
               C10842 +
           (C100 * C4831 + C89 * C4835 + C101 * C4832 + C90 * C4836 +
            C102 * C4833 + C91 * C4837) *
               C10691) *
              C90623 * C90634 * C6692 +
          ((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
            C102 * C3893 + C91 * C3899) *
               C10841 -
           ((C102 * C1009 + C91 * C1014 + C101 * C1010 + C90 * C1015 +
             C100 * C1011 + C89 * C1016) *
                C90782 +
            (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 + C100 * C832 +
             C89 * C840) *
                C10840) +
           (C100 * C4075 + C89 * C4081 + C101 * C4076 + C90 * C4082 +
            C102 * C4077 + C91 * C4083) *
               C90777 -
           (C102 * C5469 + C91 * C5475 + C101 * C5470 + C90 * C5476 +
            C100 * C5471 + C89 * C5477) *
               C10842 -
           (C102 * C5635 + C91 * C5638 + C101 * C5636 + C90 * C5639 +
            C100 * C5637 + C89 * C5640) *
               C10691) *
              C90623 * C90634 * C90555) *
         C90498) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C10840 +
            (C13579 * C245 + C90485 * C251) * C90782 -
            (C13579 * C1700 + C90485 * C1708) * C10841 -
            (C13579 * C1879 + C90485 * C1884) * C90777 +
            (C13579 * C4656 + C90485 * C4660) * C10842 +
            (C13579 * C4831 + C90485 * C4835) * C10691) *
               C13576 +
           (C25912 + C25913 - C25914 - C25915 + C25916 + C25917) * C13577 +
           (C25918 + C25919 - C25920 - C25921 + C25922 + C25923) * C13578) *
              C90634 * C6692 +
          ((C25914 - (C25913 + C25912) + C25915 - C25916 - C25917) * C13576 +
           (C25920 - (C25919 + C25918) + C25921 - C25922 - C25923) * C13577 +
           (C16860 * C10841 - (C15731 * C90782 + C15553 * C10840) +
            C17052 * C90777 - (C13579 * C18349 + C90485 * C18351) * C10842 -
            (C13579 * C18525 + C90485 * C18526) * C10691) *
               C13578) *
              C90634 * C90555) *
         C90498) /
            (p * q * std::sqrt(p + q));
    d2eeyx[65] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C307 * C107 + C90623 * C308) * C3364 +
                       (C307 * C116 + C90623 * C314) * C90498) *
                          C90634 * C89 +
                      (C337 * C3364 + C338 * C90498) * C90634 * C90 +
                      (C339 * C3364 + C340 * C90498) * C90634 * C91) *
                         C90782 -
                     ((C1987 * C90498 + C1986 * C3364) * C90634 * C91 +
                      (C1985 * C90498 + C1984 * C3364) * C90634 * C90 +
                      ((C307 * C1707 + C90623 * C1966) * C90498 +
                       (C307 * C1700 + C90623 * C1962) * C3364) *
                          C90634 * C89) *
                         C90777 +
                     (((C307 * C4656 + C90623 * C4913) * C3364 +
                       (C307 * C4663 + C90623 * C4917) * C90498) *
                          C90634 * C89 +
                      (C4930 * C3364 + C4931 * C90498) * C90634 * C90 +
                      (C4932 * C3364 + C4933 * C90498) * C90634 * C91) *
                         C10691) *
                        C6692 +
                    ((((C307 * C3891 + C90623 * C4161) * C3364 +
                       (C307 * C3900 + C90623 * C4167) * C90498) *
                          C90634 * C89 +
                      (C8433 * C3364 + C8434 * C90498) * C90634 * C90 +
                      (C8435 * C3364 + C8436 * C90498) * C90634 * C91) *
                         C90777 -
                     ((C1119 * C90498 + C1118 * C3364) * C90634 * C91 +
                      (C1117 * C90498 + C1116 * C3364) * C90634 * C90 +
                      ((C307 * C839 + C90623 * C1098) * C90498 +
                       (C307 * C832 + C90623 * C1094) * C3364) *
                          C90634 * C89) *
                         C90782 -
                     (((C307 * C5472 + C90623 * C5718) * C90498 +
                       (C307 * C5469 + C90623 * C5715) * C3364) *
                          C90634 * C91 +
                      ((C307 * C5473 + C90623 * C5719) * C90498 +
                       (C307 * C5470 + C90623 * C5716) * C3364) *
                          C90634 * C90 +
                      ((C307 * C5474 + C90623 * C5720) * C90498 +
                       (C307 * C5471 + C90623 * C5717) * C3364) *
                          C90634 * C89) *
                         C10691) *
                        C90555)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C13730 * C107 + C13576 * C308 + C13731 * C832 +
                       C13577 * C1094 + C13732 * C2570 + C13578 * C2827) *
                          C3364 +
                      (C13730 * C116 + C13576 * C314 + C13731 * C839 +
                       C13577 * C1098 + C13732 * C2577 + C13578 * C2831) *
                          C90498) *
                         C90634 * C90485 * C90782 -
                     ((C13732 * C3905 + C13578 * C4172 + C13731 * C3900 +
                       C13577 * C4167 + C13730 * C1707 + C13576 * C1966) *
                          C90498 +
                      (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 +
                       C13577 * C4161 + C13730 * C1700 + C13576 * C1962) *
                          C3364) *
                         C90634 * C90485 * C90777 +
                     ((C13730 * C4656 + C13576 * C4913 + C13731 * C5471 +
                       C13577 * C5717 + C13732 * C17651 + C13578 * C17889) *
                          C3364 +
                      (C13730 * C4663 + C13576 * C4917 + C13731 * C5474 +
                       C13577 * C5720 + C13732 * C17654 + C13578 * C17891) *
                          C90498) *
                         C90634 * C90485 * C10691) *
                        C6692 +
                    (((C13730 * C3891 + C13576 * C4161 + C13731 * C3896 +
                       C13577 * C4166 + C13732 * C16835 + C13578 * C17131) *
                          C3364 +
                      (C13730 * C3900 + C13576 * C4167 + C13731 * C3905 +
                       C13577 * C4172 + C13732 * C16838 + C13578 * C17133) *
                          C90498) *
                         C90634 * C90485 * C90777 -
                     ((C13732 * C3370 + C13578 * C3548 + C13731 * C2577 +
                       C13577 * C2831 + C13730 * C839 + C13576 * C1098) *
                          C90498 +
                      (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 +
                       C13577 * C2827 + C13730 * C832 + C13576 * C1094) *
                          C3364) *
                         C90634 * C90485 * C90782 -
                     ((C13732 * C18350 + C13578 * C18620 + C13731 * C17654 +
                       C13577 * C17891 + C13730 * C5474 + C13576 * C5720) *
                          C90498 +
                      (C13732 * C18349 + C13578 * C18619 + C13731 * C17651 +
                       C13577 * C17889 + C13730 * C5471 + C13576 * C5717) *
                          C3364) *
                         C90634 * C90485 * C10691) *
                        C90555)) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[65] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C6771 +
            (C307 * C182 + C90623 * C394) * C6692 -
            (C307 * C832 + C90623 * C1094) * C6772 -
            (C307 * C927 + C90623 * C1195) * C90555) *
               C90634 * C89 +
           (C6996 + C6997 - C6998 - C6999) * C90634 * C90 + C7011 * C91) *
              C90498 * C90782 +
          (((C307 * C3891 + C90623 * C4161) * C6772 -
            ((C307 * C1794 + C90623 * C2066) * C6692 +
             (C307 * C1700 + C90623 * C1962) * C6771) +
            (C307 * C3989 + C90623 * C4247) * C90555) *
               C90634 * C89 +
           (C8536 - (C8537 + C8538) + C8548) * C90634 * C90 +
           (C8541 - (C8542 + C8543) + C8549) * C90634 * C91) *
              C90498 * C90777 +
          (((C307 * C4656 + C90623 * C4913) * C6771 +
            (C307 * C4746 + C90623 * C5007) * C6692 -
            (C307 * C5471 + C90623 * C5717) * C6772 -
            (C307 * C5557 + C90623 * C5795) * C90555) *
               C90634 * C89 +
           (C4930 * C6771 + C5018 * C6692 -
            (C307 * C5470 + C90623 * C5716) * C6772 -
            (C307 * C5556 + C90623 * C5796) * C90555) *
               C90634 * C90 +
           (C4932 * C6771 + C5019 * C6692 -
            (C307 * C5469 + C90623 * C5715) * C6772 -
            (C307 * C5555 + C90623 * C5797) * C90555) *
               C90634 * C91) *
              C90498 * C10691)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C6771 +
           (C13730 * C182 + C13576 * C394 + C13731 * C927 + C13577 * C1195 +
            C13732 * C2663 + C13578 * C2921) *
               C6692 -
           (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
            C13730 * C832 + C13576 * C1094) *
               C6772 -
           (C13732 * C3433 + C13578 * C3599 + C13731 * C2663 + C13577 * C2921 +
            C13730 * C927 + C13576 * C1195) *
               C90555) *
              C90634 * C90485 * C90498 * C90782 +
          ((C13730 * C3891 + C13576 * C4161 + C13731 * C3896 + C13577 * C4166 +
            C13732 * C16835 + C13578 * C17131) *
               C6772 -
           ((C13732 * C3994 + C13578 * C4248 + C13731 * C3989 + C13577 * C4247 +
             C13730 * C1794 + C13576 * C2066) *
                C6692 +
            (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 + C13577 * C4161 +
             C13730 * C1700 + C13576 * C1962) *
                C6771) +
           (C13730 * C3989 + C13576 * C4247 + C13731 * C3994 + C13577 * C4248 +
            C13732 * C16942 + C13578 * C17209) *
               C90555) *
              C90634 * C90485 * C90498 * C90777 +
          ((C13730 * C4656 + C13576 * C4913 + C13731 * C5471 + C13577 * C5717 +
            C13732 * C17651 + C13578 * C17889) *
               C6771 +
           (C13730 * C4746 + C13576 * C5007 + C13731 * C5557 + C13577 * C5795 +
            C13732 * C17733 + C13578 * C17967) *
               C6692 -
           (C13732 * C18349 + C13578 * C18619 + C13731 * C17651 +
            C13577 * C17889 + C13730 * C5471 + C13576 * C5717) *
               C6772 -
           (C13732 * C18443 + C13578 * C18695 + C13731 * C17733 +
            C13577 * C17967 + C13730 * C5557 + C13576 * C5795) *
               C90555) *
              C90634 * C90485 * C90498 * C10691)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[65] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C10840 +
            (C307 * C245 + C90623 * C474) * C90782 -
            (C307 * C1700 + C90623 * C1962) * C10841 -
            (C307 * C1879 + C90623 * C2159) * C90777 +
            (C307 * C4656 + C90623 * C4913) * C10842 +
            (C307 * C4831 + C90623 * C5095) * C10691) *
               C90634 * C89 +
           (C11066 + C11067 - C11068 - C11069 + C11070 + C11071) * C90634 *
               C90 +
           (C11072 + C11073 - C11074 - C11075 + C11076 + C11077) * C90634 *
               C91) *
              C6692 +
          (((C307 * C3891 + C90623 * C4161) * C10841 -
            ((C307 * C1011 + C90623 * C1301) * C90782 +
             (C307 * C832 + C90623 * C1094) * C10840) +
            (C307 * C4075 + C90623 * C4327) * C90777 -
            (C307 * C5471 + C90623 * C5717) * C10842 -
            (C307 * C5637 + C90623 * C5872) * C10691) *
               C90634 * C89 +
           (C8433 * C10841 - (C1315 * C90782 + C1116 * C10840) +
            C8659 * C90777 - (C307 * C5470 + C90623 * C5716) * C10842 -
            (C307 * C5636 + C90623 * C5873) * C10691) *
               C90634 * C90 +
           (C8435 * C10841 - (C1314 * C90782 + C1118 * C10840) +
            C8660 * C90777 - (C307 * C5469 + C90623 * C5715) * C10842 -
            (C307 * C5635 + C90623 * C5874) * C10691) *
               C90634 * C91) *
              C90555) *
         C90498) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C10840 +
           (C13730 * C245 + C13576 * C474 + C13731 * C1011 + C13577 * C1301 +
            C13732 * C2745 + C13578 * C3017) *
               C90782 -
           (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 + C13577 * C4161 +
            C13730 * C1700 + C13576 * C1962) *
               C10841 -
           (C13732 * C4080 + C13578 * C4330 + C13731 * C4075 + C13577 * C4327 +
            C13730 * C1879 + C13576 * C2159) *
               C90777 +
           (C13730 * C4656 + C13576 * C4913 + C13731 * C5471 + C13577 * C5717 +
            C13732 * C17651 + C13578 * C17889) *
               C10842 +
           (C13730 * C4831 + C13576 * C5095 + C13731 * C5637 + C13577 * C5872 +
            C13732 * C17811 + C13578 * C18043) *
               C10691) *
              C90634 * C90485 * C6692 +
          ((C13730 * C3891 + C13576 * C4161 + C13731 * C3896 + C13577 * C4166 +
            C13732 * C16835 + C13578 * C17131) *
               C10841 -
           ((C13732 * C3489 + C13578 * C3654 + C13731 * C2745 + C13577 * C3017 +
             C13730 * C1011 + C13576 * C1301) *
                C90782 +
            (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
             C13730 * C832 + C13576 * C1094) *
                C10840) +
           (C13730 * C4075 + C13576 * C4327 + C13731 * C4080 + C13577 * C4330 +
            C13732 * C17029 + C13578 * C17285) *
               C90777 -
           (C13732 * C18349 + C13578 * C18619 + C13731 * C17651 +
            C13577 * C17889 + C13730 * C5471 + C13576 * C5717) *
               C10842 -
           (C13732 * C18525 + C13578 * C18770 + C13731 * C17811 +
            C13577 * C18043 + C13730 * C5637 + C13576 * C5872) *
               C10691) *
              C90634 * C90485 * C90555) *
         C90498) /
            (p * q * std::sqrt(p + q));
    d2eezx[65] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C90634 * C555) * C3364 +
                       (C554 * C116 + C90634 * C561) * C90498) *
                          C89 +
                      (C584 * C3364 + C585 * C90498) * C90 +
                      (C586 * C3364 + C587 * C90498) * C91) *
                         C90623 * C90782 -
                     ((C2289 * C90498 + C2288 * C3364) * C91 +
                      (C2287 * C90498 + C2286 * C3364) * C90 +
                      ((C554 * C1707 + C90634 * C2268) * C90498 +
                       (C554 * C1700 + C90634 * C2264) * C3364) *
                          C89) *
                         C90623 * C90777 +
                     (((C554 * C4656 + C90634 * C5191) * C3364 +
                       (C554 * C4663 + C90634 * C5195) * C90498) *
                          C89 +
                      (C5208 * C3364 + C5209 * C90498) * C90 +
                      (C5210 * C3364 + C5211 * C90498) * C91) *
                         C90623 * C10691) *
                        C6692 +
                    ((((C554 * C3891 + C90634 * C4407) * C3364 +
                       (C554 * C3900 + C90634 * C4413) * C90498) *
                          C89 +
                      (C8771 * C3364 + C8772 * C90498) * C90 +
                      (C8773 * C3364 + C8774 * C90498) * C91) *
                         C90623 * C90777 -
                     ((C1421 * C90498 + C1420 * C3364) * C91 +
                      (C1419 * C90498 + C1418 * C3364) * C90 +
                      ((C554 * C839 + C90634 * C1400) * C90498 +
                       (C554 * C832 + C90634 * C1396) * C3364) *
                          C89) *
                         C90623 * C90782 -
                     (((C554 * C5472 + C90634 * C5952) * C90498 +
                       (C554 * C5469 + C90634 * C5949) * C3364) *
                          C91 +
                      ((C554 * C5473 + C90634 * C5953) * C90498 +
                       (C554 * C5470 + C90634 * C5950) * C3364) *
                          C90 +
                      ((C554 * C5474 + C90634 * C5954) * C90498 +
                       (C554 * C5471 + C90634 * C5951) * C3364) *
                          C89) *
                         C90623 * C10691) *
                        C90555)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C90634 * C555) * C3364 +
                       (C554 * C116 + C90634 * C561) * C90498) *
                          C90485 * C13576 +
                      (C16632 + C16633) * C90485 * C13577 + C16646 * C13578) *
                         C90782 -
                     (C17391 * C13578 + (C17386 + C17387) * C90485 * C13577 +
                      ((C554 * C1707 + C90634 * C2268) * C90498 +
                       (C554 * C1700 + C90634 * C2264) * C3364) *
                          C90485 * C13576) *
                         C90777 +
                     (((C554 * C4656 + C90634 * C5191) * C3364 +
                       (C554 * C4663 + C90634 * C5195) * C90498) *
                          C90485 * C13576 +
                      (C18860 + C18861) * C90485 * C13577 +
                      (C18862 + C18863) * C90485 * C13578) *
                         C10691) *
                        C6692 +
                    (((C17387 + C17386) * C90485 * C13576 +
                      (C17385 + C17384) * C90485 * C13577 +
                      (C17388 + C17389) * C90485 * C13578) *
                         C90777 -
                     (C16647 * C13578 + (C16635 + C16634) * C90485 * C13577 +
                      (C16633 + C16632) * C90485 * C13576) *
                         C90782 -
                     (((C554 * C18350 + C90634 * C18846) * C90498 +
                       (C554 * C18349 + C90634 * C18845) * C3364) *
                          C90485 * C13578 +
                      (C18863 + C18862) * C90485 * C13577 +
                      (C18861 + C18860) * C90485 * C13576) *
                         C10691) *
                        C90555)) /
                      (p * q * std::sqrt(p + q));
    d2eezy[65] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C90634 * C555) * C6771 +
                      (C554 * C182 + C90634 * C641) * C6692 -
                      (C554 * C832 + C90634 * C1396) * C6772 -
                      (C554 * C927 + C90634 * C1497) * C90555) *
                         C89 +
                     (C7234 + C7235 - C7236 - C7237) * C90 + C7248 * C91) *
                        C90623 * C90498 * C90782 +
                    (((C554 * C3891 + C90634 * C4407) * C6772 -
                      ((C554 * C1794 + C90634 * C2368) * C6692 +
                       (C554 * C1700 + C90634 * C2264) * C6771) +
                      (C554 * C3989 + C90634 * C4493) * C90555) *
                         C89 +
                     (C8874 - (C8875 + C8876) + C8886) * C90 +
                     (C8879 - (C8880 + C8881) + C8887) * C91) *
                        C90623 * C90498 * C90777 +
                    (((C554 * C4656 + C90634 * C5191) * C6771 +
                      (C554 * C4746 + C90634 * C5285) * C6692 -
                      (C554 * C5471 + C90634 * C5951) * C6772 -
                      (C554 * C5557 + C90634 * C6029) * C90555) *
                         C89 +
                     (C5208 * C6771 + C5296 * C6692 -
                      (C554 * C5470 + C90634 * C5950) * C6772 -
                      (C554 * C5556 + C90634 * C6030) * C90555) *
                         C90 +
                     (C5210 * C6771 + C5297 * C6692 -
                      (C554 * C5469 + C90634 * C5949) * C6772 -
                      (C554 * C5555 + C90634 * C6031) * C90555) *
                         C91) *
                        C90623 * C90498 * C10691)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C90634 * C555) * C6771 +
                      (C554 * C182 + C90634 * C641) * C6692 - C14614 * C6772 -
                      C14700 * C90555) *
                         C90485 * C13576 +
                     (C14614 * C6771 + C14700 * C6692 - C14616 * C6772 -
                      C14701 * C90555) *
                         C90485 * C13577 +
                     (C14616 * C6771 + C14701 * C6692 - C16062 * C6772 -
                      C16151 * C90555) *
                         C90485 * C13578) *
                        C90498 * C90782 +
                    ((C17381 * C6772 -
                      ((C554 * C1794 + C90634 * C2368) * C6692 +
                       (C554 * C1700 + C90634 * C2264) * C6771) +
                      C17474 * C90555) *
                         C90485 * C13576 +
                     (C17379 * C6772 - (C17474 * C6692 + C17381 * C6771) +
                      C17475 * C90555) *
                         C90485 * C13577 +
                     (C17382 * C6772 - (C17475 * C6692 + C17379 * C6771) +
                      C17476 * C90555) *
                         C90485 * C13578) *
                        C90498 * C90777 +
                    (((C554 * C4656 + C90634 * C5191) * C6771 +
                      (C554 * C4746 + C90634 * C5285) * C6692 - C18856 * C6772 -
                      C18943 * C90555) *
                         C90485 * C13576 +
                     (C18856 * C6771 + C18943 * C6692 - C18858 * C6772 -
                      C18944 * C90555) *
                         C90485 * C13577 +
                     (C18858 * C6771 + C18944 * C6692 -
                      (C554 * C18349 + C90634 * C18845) * C6772 -
                      (C554 * C18443 + C90634 * C18937) * C90555) *
                         C90485 * C13578) *
                        C90498 * C10691)) /
                      (p * q * std::sqrt(p + q));
    d2eezz[65] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C10840 +
            (C554 * C245 + C90634 * C719) * C90782 -
            (C554 * C1700 + C90634 * C2264) * C10841 -
            (C554 * C1879 + C90634 * C2460) * C90777 +
            (C554 * C4656 + C90634 * C5191) * C10842 +
            (C554 * C4831 + C90634 * C5373) * C10691) *
               C89 +
           (C11300 + C11301 - C11302 - C11303 + C11304 + C11305) * C90 +
           (C11306 + C11307 - C11308 - C11309 + C11310 + C11311) * C91) *
              C90623 * C6692 +
          (((C554 * C3891 + C90634 * C4407) * C10841 -
            ((C554 * C1011 + C90634 * C1602) * C90782 +
             (C554 * C832 + C90634 * C1396) * C10840) +
            (C554 * C4075 + C90634 * C4573) * C90777 -
            (C554 * C5471 + C90634 * C5951) * C10842 -
            (C554 * C5637 + C90634 * C6106) * C10691) *
               C89 +
           (C8771 * C10841 - (C1616 * C90782 + C1418 * C10840) +
            C8997 * C90777 - (C554 * C5470 + C90634 * C5950) * C10842 -
            (C554 * C5636 + C90634 * C6107) * C10691) *
               C90 +
           (C8773 * C10841 - (C1615 * C90782 + C1420 * C10840) +
            C8998 * C90777 - (C554 * C5469 + C90634 * C5949) * C10842 -
            (C554 * C5635 + C90634 * C6108) * C10691) *
               C91) *
              C90623 * C90555) *
         C90498) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C10840 +
            (C554 * C245 + C90634 * C719) * C90782 -
            (C554 * C1700 + C90634 * C2264) * C10841 -
            (C554 * C1879 + C90634 * C2460) * C90777 +
            (C554 * C4656 + C90634 * C5191) * C10842 +
            (C554 * C4831 + C90634 * C5373) * C10691) *
               C90485 * C13576 +
           (C26368 + C26369 - C26370 - C26371 + C26372 + C26373) * C90485 *
               C13577 +
           (C26374 + C26375 - C26376 - C26377 + C26378 + C26379) * C90485 *
               C13578) *
              C6692 +
          ((C26370 - (C26369 + C26368) + C26371 - C26372 - C26373) * C90485 *
               C13576 +
           (C26376 - (C26375 + C26374) + C26377 - C26378 - C26379) * C90485 *
               C13577 +
           (C17382 * C10841 - (C16238 * C90782 + C16062 * C10840) +
            C17571 * C90777 - (C554 * C18349 + C90634 * C18845) * C10842 -
            (C554 * C18525 + C90634 * C19018) * C10691) *
               C90485 * C13578) *
              C90555) *
         C90498) /
            (p * q * std::sqrt(p + q));
    d2eexx[66] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C88316 +
           (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 + C102 * C118 +
            C91 * C127) *
               C90744 -
           (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 + C100 * C108 +
            C89 * C114) *
               C88309 -
           (C102 * C120 + C91 * C128 + C101 * C118 + C90 * C127 + C100 * C117 +
            C89 * C126) *
               C90503) *
              C90623 * C90634 * C90567 * C2565 +
          ((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 + C102 * C831 +
            C91 * C836) *
               C88309 -
           ((C102 * C837 + C91 * C844 + C101 * C838 + C90 * C845 + C100 * C839 +
             C89 * C846) *
                C90744 +
            (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 + C100 * C832 +
             C89 * C840) *
                C88316) +
           (C100 * C838 + C89 * C845 + C101 * C837 + C90 * C844 + C102 * C841 +
            C91 * C847) *
               C90503) *
              C90623 * C90634 * C90567 * C2566 +
          ((C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
            C102 * C2572 + C91 * C2576) *
               C88316 +
           (C100 * C2577 + C89 * C2582 + C101 * C2578 + C90 * C2583 +
            C102 * C2579 + C91 * C2584) *
               C90744 -
           (C102 * C2573 + C91 * C2580 + C101 * C2572 + C90 * C2576 +
            C100 * C2571 + C89 * C2575) *
               C88309 -
           (C102 * C2581 + C91 * C2585 + C101 * C2579 + C90 * C2584 +
            C100 * C2578 + C89 * C2583) *
               C90503) *
              C90623 * C90634 * C90567 * C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
           C91 * C115) *
              C103 +
          (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 + C102 * C118 +
           C91 * C127) *
              C92 -
          (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 + C100 * C108 +
           C89 * C114) *
              C104 -
          (C102 * C120 + C91 * C128 + C101 * C118 + C90 * C127 + C100 * C117 +
           C89 * C126) *
              C93 +
          (C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 + C102 * C111 +
           C91 * C121) *
              C105 +
          (C100 * C118 + C89 * C127 + C101 * C120 + C90 * C128 + C102 * C122 +
           C91 * C129) *
              C94 -
          (C102 * C112 + C91 * C123 + C101 * C111 + C90 * C121 + C100 * C110 +
           C89 * C119) *
              C106 -
          (C102 * C124 + C91 * C130 + C101 * C122 + C90 * C129 + C100 * C120 +
           C89 * C128) *
              C95) *
         C90623 * C90634 * C90567 * C90541) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C88316 +
           (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 + C102 * C118 +
            C91 * C127) *
               C90744 -
           (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 + C100 * C108 +
            C89 * C114) *
               C88309 -
           (C102 * C120 + C91 * C128 + C101 * C118 + C90 * C127 + C100 * C117 +
            C89 * C126) *
               C90503) *
              C90623 * C90634 * C4653 +
          ((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
            C102 * C1699 + C91 * C1704) *
               C88309 -
           ((C102 * C1705 + C91 * C1712 + C101 * C1706 + C90 * C1713 +
             C100 * C1707 + C89 * C1714) *
                C90744 +
            (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
             C100 * C1700 + C89 * C1708) *
                C88316) +
           (C100 * C1706 + C89 * C1713 + C101 * C1705 + C90 * C1712 +
            C102 * C1709 + C91 * C1715) *
               C90503) *
              C90623 * C90634 * C4654 +
          ((C100 * C4656 + C89 * C4660 + C101 * C4657 + C90 * C4661 +
            C102 * C4658 + C91 * C4662) *
               C88316 +
           (C100 * C4663 + C89 * C4668 + C101 * C4664 + C90 * C4669 +
            C102 * C4665 + C91 * C4670) *
               C90744 -
           (C102 * C4659 + C91 * C4666 + C101 * C4658 + C90 * C4662 +
            C100 * C4657 + C89 * C4661) *
               C88309 -
           (C102 * C4667 + C91 * C4671 + C101 * C4665 + C90 * C4670 +
            C100 * C4664 + C89 * C4669) *
               C90503) *
              C90623 * C90634 * C4655) *
         C90541) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13579 * C107 + C90485 * C113) * C103 +
           (C13579 * C116 + C90485 * C125) * C92 -
           (C13579 * C108 + C90485 * C114) * C104 -
           (C13579 * C117 + C90485 * C126) * C93 +
           (C13579 * C109 + C90485 * C115) * C105 +
           (C13579 * C118 + C90485 * C127) * C94 -
           (C13579 * C110 + C90485 * C119) * C106 -
           (C13579 * C120 + C90485 * C128) * C95) *
              C13576 +
          ((C13579 * C832 + C90485 * C840) * C103 +
           (C13579 * C839 + C90485 * C846) * C92 -
           (C13579 * C829 + C90485 * C834) * C104 -
           (C13579 * C838 + C90485 * C845) * C93 +
           (C13579 * C830 + C90485 * C835) * C105 +
           (C13579 * C837 + C90485 * C844) * C94 -
           (C13579 * C831 + C90485 * C836) * C106 -
           (C13579 * C841 + C90485 * C847) * C95) *
              C13577 +
          ((C13579 * C2570 + C90485 * C2574) * C103 +
           (C13579 * C2577 + C90485 * C2582) * C92 -
           (C13579 * C2571 + C90485 * C2575) * C104 -
           (C13579 * C2578 + C90485 * C2583) * C93 +
           (C13579 * C2572 + C90485 * C2576) * C105 +
           (C13579 * C2579 + C90485 * C2584) * C94 -
           (C13579 * C2573 + C90485 * C2580) * C106 -
           (C13579 * C2581 + C90485 * C2585) * C95) *
              C13578) *
         C90634 * C90567 * C90541) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C88316 +
            (C13579 * C116 + C90485 * C125) * C90744 -
            (C13579 * C108 + C90485 * C114) * C88309 -
            (C13579 * C117 + C90485 * C126) * C90503) *
               C13576 +
           (C15534 + C15535 - C15536 - C15537) * C13577 + C15560 * C13578) *
              C90634 * C90567 * C2565 +
          ((C15536 - (C15535 + C15534) + C15537) * C13576 +
           (C15540 - (C15539 + C15538) + C15541) * C13577 +
           (C15556 - (C15557 + C15558) + C15559) * C13578) *
              C90634 * C90567 * C2566 +
          (C15560 * C13576 + (C15558 + C15557 - C15556 - C15559) * C13577 +
           ((C13579 * C15525 + C90485 * C15527) * C88316 +
            (C13579 * C15528 + C90485 * C15531) * C90744 -
            (C13579 * C15526 + C90485 * C15529) * C88309 -
            (C13579 * C15530 + C90485 * C15532) * C90503) *
               C13578) *
              C90634 * C90567 * C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C88316 +
            (C13579 * C116 + C90485 * C125) * C90744 -
            (C13579 * C108 + C90485 * C114) * C88309 -
            (C13579 * C117 + C90485 * C126) * C90503) *
               C13576 +
           (C15534 + C15535 - C15536 - C15537) * C13577 + C15560 * C13578) *
              C90634 * C4653 +
          (((C13579 * C1697 + C90485 * C1702) * C88309 -
            ((C13579 * C1707 + C90485 * C1714) * C90744 +
             (C13579 * C1700 + C90485 * C1708) * C88316) +
            (C13579 * C1706 + C90485 * C1713) * C90503) *
               C13576 +
           ((C13579 * C3892 + C90485 * C3898) * C88309 -
            (C16858 * C90744 + C16859 * C88316) +
            (C13579 * C3901 + C90485 * C3910) * C90503) *
               C13577 +
           ((C13579 * C3895 + C90485 * C3907) * C88309 -
            (C16856 * C90744 + C16857 * C88316) +
            (C13579 * C3904 + C90485 * C3913) * C90503) *
               C13578) *
              C90634 * C4654 +
          (((C13579 * C4656 + C90485 * C4660) * C88316 +
            (C13579 * C4663 + C90485 * C4668) * C90744 -
            (C13579 * C4657 + C90485 * C4661) * C88309 -
            (C13579 * C4664 + C90485 * C4669) * C90503) *
               C13576 +
           ((C13579 * C5471 + C90485 * C5477) * C88316 +
            (C13579 * C5474 + C90485 * C5480) * C90744 -
            (C13579 * C5470 + C90485 * C5476) * C88309 -
            (C13579 * C5473 + C90485 * C5479) * C90503) *
               C13577 +
           ((C13579 * C17651 + C90485 * C17653) * C88316 +
            (C13579 * C17654 + C90485 * C17657) * C90744 -
            (C13579 * C17652 + C90485 * C17655) * C88309 -
            (C13579 * C17656 + C90485 * C17658) * C90503) *
               C13578) *
              C90634 * C4655) *
         C90541) /
            (p * q * std::sqrt(p + q));
    d2eexy[66] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C2660 +
           (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 + C102 * C184 +
            C91 * C190) *
               C2565 -
           (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 + C100 * C832 +
            C89 * C840) *
               C2661 -
           (C102 * C925 + C91 * C930 + C101 * C926 + C90 * C931 + C100 * C927 +
            C89 * C932) *
               C2566 +
           (C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
            C102 * C2572 + C91 * C2576) *
               C2662 +
           (C100 * C2663 + C89 * C2667 + C101 * C2664 + C90 * C2668 +
            C102 * C2665 + C91 * C2669) *
               C2567) *
              C90623 * C90634 * C90744 +
          ((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 + C102 * C831 +
            C91 * C836) *
               C2661 -
           ((C102 * C185 + C91 * C191 + C101 * C184 + C90 * C190 + C100 * C183 +
             C89 * C189) *
                C2565 +
            (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 + C100 * C108 +
             C89 * C114) *
                C2660) +
           (C100 * C926 + C89 * C931 + C101 * C925 + C90 * C930 + C102 * C928 +
            C91 * C933) *
               C2566 -
           (C102 * C2573 + C91 * C2580 + C101 * C2572 + C90 * C2576 +
            C100 * C2571 + C89 * C2575) *
               C2662 -
           (C102 * C2666 + C91 * C2670 + C101 * C2665 + C90 * C2669 +
            C100 * C2664 + C89 * C2668) *
               C2567) *
              C90623 * C90634 * C90503) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C181 +
           (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 + C102 * C184 +
            C91 * C190) *
               C90541) *
              C90623 * C90634 * C92 -
          ((C102 * C185 + C91 * C191 + C101 * C184 + C90 * C190 + C100 * C183 +
            C89 * C189) *
               C90541 +
           (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 + C100 * C108 +
            C89 * C114) *
               C181) *
              C90623 * C90634 * C93 +
          ((C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 + C102 * C111 +
            C91 * C121) *
               C181 +
           (C100 * C184 + C89 * C190 + C101 * C185 + C90 * C191 + C102 * C186 +
            C91 * C192) *
               C90541) *
              C90623 * C90634 * C94 -
          ((C102 * C187 + C91 * C193 + C101 * C186 + C90 * C192 + C100 * C185 +
            C89 * C191) *
               C90541 +
           (C102 * C112 + C91 * C123 + C101 * C111 + C90 * C121 + C100 * C110 +
            C89 * C119) *
               C181) *
              C90623 * C90634 * C95) *
         C90567) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
             C91 * C115) *
                C181 +
            (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 + C102 * C184 +
             C91 * C190) *
                C90541) *
               C90623 * C90634 * C90744 -
           ((C102 * C185 + C91 * C191 + C101 * C184 + C90 * C190 + C100 * C183 +
             C89 * C189) *
                C90541 +
            (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 + C100 * C108 +
             C89 * C114) *
                C181) *
               C90623 * C90634 * C90503) *
              C4653 +
          (((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
             C102 * C1699 + C91 * C1704) *
                C181 +
            (C100 * C1791 + C89 * C1796 + C101 * C1792 + C90 * C1797 +
             C102 * C1793 + C91 * C1798) *
                C90541) *
               C90623 * C90634 * C90503 -
           ((C102 * C1792 + C91 * C1797 + C101 * C1791 + C90 * C1796 +
             C100 * C1794 + C89 * C1799) *
                C90541 +
            (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
             C100 * C1700 + C89 * C1708) *
                C181) *
               C90623 * C90634 * C90744) *
              C4654 +
          (((C100 * C4656 + C89 * C4660 + C101 * C4657 + C90 * C4661 +
             C102 * C4658 + C91 * C4662) *
                C181 +
            (C100 * C4746 + C89 * C4750 + C101 * C4747 + C90 * C4751 +
             C102 * C4748 + C91 * C4752) *
                C90541) *
               C90623 * C90634 * C90744 -
           ((C102 * C4749 + C91 * C4753 + C101 * C4748 + C90 * C4752 +
             C100 * C4747 + C89 * C4751) *
                C90541 +
            (C102 * C4659 + C91 * C4666 + C101 * C4658 + C90 * C4662 +
             C100 * C4657 + C89 * C4661) *
                C181) *
               C90623 * C90634 * C90503) *
              C4655)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C181 +
            (C13579 * C182 + C90485 * C188) * C90541) *
               C13576 +
           ((C13579 * C832 + C90485 * C840) * C181 +
            (C13579 * C927 + C90485 * C932) * C90541) *
               C13577 +
           ((C13579 * C2570 + C90485 * C2574) * C181 +
            (C13579 * C2663 + C90485 * C2667) * C90541) *
               C13578) *
              C90634 * C92 -
          (((C13579 * C2664 + C90485 * C2668) * C90541 +
            (C13579 * C2571 + C90485 * C2575) * C181) *
               C13578 +
           ((C13579 * C926 + C90485 * C931) * C90541 +
            (C13579 * C829 + C90485 * C834) * C181) *
               C13577 +
           ((C13579 * C183 + C90485 * C189) * C90541 +
            (C13579 * C108 + C90485 * C114) * C181) *
               C13576) *
              C90634 * C93 +
          (((C13579 * C109 + C90485 * C115) * C181 +
            (C13579 * C184 + C90485 * C190) * C90541) *
               C13576 +
           ((C13579 * C830 + C90485 * C835) * C181 +
            (C13579 * C925 + C90485 * C930) * C90541) *
               C13577 +
           ((C13579 * C2572 + C90485 * C2576) * C181 +
            (C13579 * C2665 + C90485 * C2669) * C90541) *
               C13578) *
              C90634 * C94 -
          (((C13579 * C2666 + C90485 * C2670) * C90541 +
            (C13579 * C2573 + C90485 * C2580) * C181) *
               C13578 +
           ((C13579 * C928 + C90485 * C933) * C90541 +
            (C13579 * C831 + C90485 * C836) * C181) *
               C13577 +
           ((C13579 * C185 + C90485 * C191) * C90541 +
            (C13579 * C110 + C90485 * C119) * C181) *
               C13576) *
              C90634 * C95) *
         C90567) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C2660 +
            (C13579 * C182 + C90485 * C188) * C2565 - C14082 * C2661 -
            C14192 * C2566 + C14088 * C2662 + C14193 * C2567) *
               C13576 +
           (C14082 * C2660 + C14192 * C2565 - C14088 * C2661 - C14193 * C2566 +
            C15553 * C2662 + C15643 * C2567) *
               C13577 +
           (C14088 * C2660 + C14193 * C2565 - C15553 * C2661 - C15643 * C2566 +
            (C13579 * C15525 + C90485 * C15527) * C2662 +
            (C13579 * C15634 + C90485 * C15636) * C2567) *
               C13578) *
              C90634 * C90744 +
          ((C14084 * C2661 -
            ((C13579 * C183 + C90485 * C189) * C2565 +
             (C13579 * C108 + C90485 * C114) * C2660) +
            C14194 * C2566 - C14090 * C2662 - C14195 * C2567) *
               C13576 +
           (C14090 * C2661 - (C14194 * C2565 + C14084 * C2660) +
            C14195 * C2566 - C15551 * C2662 - C15644 * C2567) *
               C13577 +
           (C15551 * C2661 - (C14195 * C2565 + C14090 * C2660) +
            C15644 * C2566 - (C13579 * C15526 + C90485 * C15529) * C2662 -
            (C13579 * C15635 + C90485 * C15637) * C2567) *
               C13578) *
              C90634 * C90503) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C181 +
             (C13579 * C182 + C90485 * C188) * C90541) *
                C13576 +
            (C14082 * C181 + C14192 * C90541) * C13577 +
            (C14088 * C181 + C14193 * C90541) * C13578) *
               C90634 * C90744 -
           ((C14195 * C90541 + C14090 * C181) * C13578 +
            (C14194 * C90541 + C14084 * C181) * C13577 +
            ((C13579 * C183 + C90485 * C189) * C90541 +
             (C13579 * C108 + C90485 * C114) * C181) *
                C13576) *
               C90634 * C90503) *
              C4653 +
          ((((C13579 * C1697 + C90485 * C1702) * C181 +
             (C13579 * C1791 + C90485 * C1796) * C90541) *
                C13576 +
            ((C13579 * C3892 + C90485 * C3898) * C181 +
             (C13579 * C3990 + C90485 * C3996) * C90541) *
                C13577 +
            ((C13579 * C3895 + C90485 * C3907) * C181 +
             (C13579 * C3993 + C90485 * C3999) * C90541) *
                C13578) *
               C90634 * C90503 -
           ((C16954 * C90541 + C16857 * C181) * C13578 +
            (C16953 * C90541 + C16859 * C181) * C13577 +
            ((C13579 * C1794 + C90485 * C1799) * C90541 +
             (C13579 * C1700 + C90485 * C1708) * C181) *
                C13576) *
               C90634 * C90744) *
              C4654 +
          ((((C13579 * C4656 + C90485 * C4660) * C181 +
             (C13579 * C4746 + C90485 * C4750) * C90541) *
                C13576 +
            ((C13579 * C5471 + C90485 * C5477) * C181 +
             (C13579 * C5557 + C90485 * C5560) * C90541) *
                C13577 +
            ((C13579 * C17651 + C90485 * C17653) * C181 +
             (C13579 * C17733 + C90485 * C17735) * C90541) *
                C13578) *
               C90634 * C90744 -
           (((C13579 * C17734 + C90485 * C17736) * C90541 +
             (C13579 * C17652 + C90485 * C17655) * C181) *
                C13578 +
            ((C13579 * C5556 + C90485 * C5559) * C90541 +
             (C13579 * C5470 + C90485 * C5476) * C181) *
                C13577 +
            ((C13579 * C4747 + C90485 * C4751) * C90541 +
             (C13579 * C4657 + C90485 * C4661) * C181) *
                C13576) *
               C90634 * C90503) *
              C4655)) /
            (p * q * std::sqrt(p + q));
    d2eexz[66] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
             C91 * C115) *
                C244 +
            (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 + C102 * C247 +
             C91 * C253) *
                C90567) *
               C90623 * C90634 * C2565 -
           ((C102 * C1009 + C91 * C1014 + C101 * C1010 + C90 * C1015 +
             C100 * C1011 + C89 * C1016) *
                C90567 +
            (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 + C100 * C832 +
             C89 * C840) *
                C244) *
               C90623 * C90634 * C2566 +
           ((C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
             C102 * C2572 + C91 * C2576) *
                C244 +
            (C100 * C2745 + C89 * C2749 + C101 * C2746 + C90 * C2750 +
             C102 * C2747 + C91 * C2751) *
                C90567) *
               C90623 * C90634 * C2567) *
              C90744 +
          (((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 + C102 * C831 +
             C91 * C836) *
                C244 +
            (C100 * C1010 + C89 * C1015 + C101 * C1009 + C90 * C1014 +
             C102 * C1012 + C91 * C1017) *
                C90567) *
               C90623 * C90634 * C2566 -
           ((C102 * C248 + C91 * C254 + C101 * C247 + C90 * C253 + C100 * C246 +
             C89 * C252) *
                C90567 +
            (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 + C100 * C108 +
             C89 * C114) *
                C244) *
               C90623 * C90634 * C2565 -
           ((C102 * C2748 + C91 * C2752 + C101 * C2747 + C90 * C2751 +
             C100 * C2746 + C89 * C2750) *
                C90567 +
            (C102 * C2573 + C91 * C2580 + C101 * C2572 + C90 * C2576 +
             C100 * C2571 + C89 * C2575) *
                C244) *
               C90623 * C90634 * C2567) *
              C90503)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C244 +
           (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 + C102 * C247 +
            C91 * C253) *
               C90567) *
              C90623 * C90634 * C90541 * C92 -
          ((C102 * C248 + C91 * C254 + C101 * C247 + C90 * C253 + C100 * C246 +
            C89 * C252) *
               C90567 +
           (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 + C100 * C108 +
            C89 * C114) *
               C244) *
              C90623 * C90634 * C90541 * C93 +
          ((C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 + C102 * C111 +
            C91 * C121) *
               C244 +
           (C100 * C247 + C89 * C253 + C101 * C248 + C90 * C254 + C102 * C249 +
            C91 * C255) *
               C90567) *
              C90623 * C90634 * C90541 * C94 -
          ((C102 * C250 + C91 * C256 + C101 * C249 + C90 * C255 + C100 * C248 +
            C89 * C254) *
               C90567 +
           (C102 * C112 + C91 * C123 + C101 * C111 + C90 * C121 + C100 * C110 +
            C89 * C119) *
               C244) *
              C90623 * C90634 * C90541 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C4828 +
           (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 + C102 * C247 +
            C91 * C253) *
               C4653 -
           (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
            C100 * C1700 + C89 * C1708) *
               C4829 -
           (C102 * C1877 + C91 * C1882 + C101 * C1878 + C90 * C1883 +
            C100 * C1879 + C89 * C1884) *
               C4654 +
           (C100 * C4656 + C89 * C4660 + C101 * C4657 + C90 * C4661 +
            C102 * C4658 + C91 * C4662) *
               C4830 +
           (C100 * C4831 + C89 * C4835 + C101 * C4832 + C90 * C4836 +
            C102 * C4833 + C91 * C4837) *
               C4655) *
              C90623 * C90634 * C90541 * C90744 +
          ((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
            C102 * C1699 + C91 * C1704) *
               C4829 -
           ((C102 * C248 + C91 * C254 + C101 * C247 + C90 * C253 + C100 * C246 +
             C89 * C252) *
                C4653 +
            (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 + C100 * C108 +
             C89 * C114) *
                C4828) +
           (C100 * C1878 + C89 * C1883 + C101 * C1877 + C90 * C1882 +
            C102 * C1880 + C91 * C1885) *
               C4654 -
           (C102 * C4659 + C91 * C4666 + C101 * C4658 + C90 * C4662 +
            C100 * C4657 + C89 * C4661) *
               C4830 -
           (C102 * C4834 + C91 * C4838 + C101 * C4833 + C90 * C4837 +
            C100 * C4832 + C89 * C4836) *
               C4655) *
              C90623 * C90634 * C90541 * C90503)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C244 +
            (C13579 * C245 + C90485 * C251) * C90567) *
               C13576 +
           ((C13579 * C832 + C90485 * C840) * C244 +
            (C13579 * C1011 + C90485 * C1016) * C90567) *
               C13577 +
           ((C13579 * C2570 + C90485 * C2574) * C244 +
            (C13579 * C2745 + C90485 * C2749) * C90567) *
               C13578) *
              C90634 * C90541 * C92 -
          (((C13579 * C2746 + C90485 * C2750) * C90567 +
            (C13579 * C2571 + C90485 * C2575) * C244) *
               C13578 +
           ((C13579 * C1010 + C90485 * C1015) * C90567 +
            (C13579 * C829 + C90485 * C834) * C244) *
               C13577 +
           ((C13579 * C246 + C90485 * C252) * C90567 +
            (C13579 * C108 + C90485 * C114) * C244) *
               C13576) *
              C90634 * C90541 * C93 +
          (((C13579 * C109 + C90485 * C115) * C244 +
            (C13579 * C247 + C90485 * C253) * C90567) *
               C13576 +
           ((C13579 * C830 + C90485 * C835) * C244 +
            (C13579 * C1009 + C90485 * C1014) * C90567) *
               C13577 +
           ((C13579 * C2572 + C90485 * C2576) * C244 +
            (C13579 * C2747 + C90485 * C2751) * C90567) *
               C13578) *
              C90634 * C90541 * C94 -
          (((C13579 * C2748 + C90485 * C2752) * C90567 +
            (C13579 * C2573 + C90485 * C2580) * C244) *
               C13578 +
           ((C13579 * C1012 + C90485 * C1017) * C90567 +
            (C13579 * C831 + C90485 * C836) * C244) *
               C13577 +
           ((C13579 * C248 + C90485 * C254) * C90567 +
            (C13579 * C110 + C90485 * C119) * C244) *
               C13576) *
              C90634 * C90541 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C244 +
             (C13579 * C245 + C90485 * C251) * C90567) *
                C13576 +
            (C14272 + C14296) * C13577 + C15723 * C13578) *
               C90634 * C2565 -
           ((C15733 + C15726) * C13578 + (C14297 + C14275) * C13577 +
            (C14296 + C14272) * C13576) *
               C90634 * C2566 +
           (C15723 * C13576 + (C15726 + C15733) * C13577 +
            ((C13579 * C15525 + C90485 * C15527) * C244 +
             (C13579 * C15718 + C90485 * C15720) * C90567) *
                C13578) *
               C90634 * C2567) *
              C90744 +
          (((C14278 + C14298) * C13576 + (C14281 + C14299) * C13577 +
            (C15727 + C15734) * C13578) *
               C90634 * C2566 -
           (C15730 * C13578 + (C14298 + C14278) * C13577 +
            ((C13579 * C246 + C90485 * C252) * C90567 +
             (C13579 * C108 + C90485 * C114) * C244) *
                C13576) *
               C90634 * C2565 -
           (((C13579 * C15719 + C90485 * C15721) * C90567 +
             (C13579 * C15526 + C90485 * C15529) * C244) *
                C13578 +
            (C15734 + C15727) * C13577 + C15730 * C13576) *
               C90634 * C2567) *
              C90503)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C4828 +
            (C13579 * C245 + C90485 * C251) * C4653 -
            (C13579 * C1700 + C90485 * C1708) * C4829 -
            (C13579 * C1879 + C90485 * C1884) * C4654 +
            (C13579 * C4656 + C90485 * C4660) * C4830 +
            (C13579 * C4831 + C90485 * C4835) * C4655) *
               C13576 +
           (C14082 * C4828 + C14290 * C4653 - C16859 * C4829 - C17049 * C4654 +
            (C13579 * C5471 + C90485 * C5477) * C4830 +
            (C13579 * C5637 + C90485 * C5640) * C4655) *
               C13577 +
           (C14088 * C4828 + C14291 * C4653 - C16857 * C4829 - C17051 * C4654 +
            (C13579 * C17651 + C90485 * C17653) * C4830 +
            (C13579 * C17811 + C90485 * C17813) * C4655) *
               C13578) *
              C90634 * C90541 * C90744 +
          (((C13579 * C1697 + C90485 * C1702) * C4829 -
            ((C13579 * C246 + C90485 * C252) * C4653 +
             (C13579 * C108 + C90485 * C114) * C4828) +
            (C13579 * C1878 + C90485 * C1883) * C4654 -
            (C13579 * C4657 + C90485 * C4661) * C4830 -
            (C13579 * C4832 + C90485 * C4836) * C4655) *
               C13576 +
           ((C13579 * C3892 + C90485 * C3898) * C4829 -
            (C14292 * C4653 + C14084 * C4828) +
            (C13579 * C4076 + C90485 * C4082) * C4654 -
            (C13579 * C5470 + C90485 * C5476) * C4830 -
            (C13579 * C5636 + C90485 * C5639) * C4655) *
               C13577 +
           ((C13579 * C3895 + C90485 * C3907) * C4829 -
            (C14293 * C4653 + C14090 * C4828) +
            (C13579 * C4079 + C90485 * C4085) * C4654 -
            (C13579 * C17652 + C90485 * C17655) * C4830 -
            (C13579 * C17812 + C90485 * C17814) * C4655) *
               C13578) *
              C90634 * C90541 * C90503)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[66] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C88316 +
            (C307 * C116 + C90623 * C314) * C90744 - C337 * C88309 -
            C338 * C90503) *
               C90634 * C89 +
           (C337 * C88316 + C338 * C90744 - C339 * C88309 - C340 * C90503) *
               C90634 * C90 +
           (C339 * C88316 + C340 * C90744 - C341 * C88309 - C342 * C90503) *
               C90634 * C91) *
              C90567 * C2565 +
          ((C1116 * C88309 -
            ((C307 * C839 + C90623 * C1098) * C90744 +
             (C307 * C832 + C90623 * C1094) * C88316) +
            C1117 * C90503) *
               C90634 * C89 +
           (C1118 * C88309 - (C1117 * C90744 + C1116 * C88316) +
            C1119 * C90503) *
               C90634 * C90 +
           (C1120 * C88309 - (C1119 * C90744 + C1118 * C88316) +
            C1121 * C90503) *
               C90634 * C91) *
              C90567 * C2566 +
          (((C307 * C2570 + C90623 * C2827) * C88316 +
            (C307 * C2577 + C90623 * C2831) * C90744 - C2844 * C88309 -
            C2845 * C90503) *
               C90634 * C89 +
           (C2844 * C88316 + C2845 * C90744 - C2846 * C88309 - C2847 * C90503) *
               C90634 * C90 +
           (C2846 * C88316 + C2847 * C90744 -
            (C307 * C2573 + C90623 * C2830) * C88309 -
            (C307 * C2581 + C90623 * C2834) * C90503) *
               C90634 * C91) *
              C90567 * C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C307 * C107 + C90623 * C308) * C103 +
           (C307 * C116 + C90623 * C314) * C92 - C337 * C104 - C338 * C93 +
           C339 * C105 + C340 * C94 - C341 * C106 - C342 * C95) *
              C90634 * C89 +
          (C337 * C103 + C338 * C92 - C339 * C104 - C340 * C93 + C341 * C105 +
           C342 * C94 - C343 * C106 - C344 * C95) *
              C90634 * C90 +
          (C339 * C103 + C340 * C92 - C341 * C104 - C342 * C93 + C343 * C105 +
           C344 * C94 - (C307 * C112 + C90623 * C313) * C106 -
           (C307 * C124 + C90623 * C319) * C95) *
              C90634 * C91) *
         C90567 * C90541) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C88316 +
            (C307 * C116 + C90623 * C314) * C90744 - C337 * C88309 -
            C338 * C90503) *
               C90634 * C89 +
           (C337 * C88316 + C338 * C90744 - C339 * C88309 - C340 * C90503) *
               C90634 * C90 +
           (C339 * C88316 + C340 * C90744 - C341 * C88309 - C342 * C90503) *
               C90634 * C91) *
              C4653 +
          ((C1984 * C88309 -
            ((C307 * C1707 + C90623 * C1966) * C90744 +
             (C307 * C1700 + C90623 * C1962) * C88316) +
            C1985 * C90503) *
               C90634 * C89 +
           (C1986 * C88309 - (C1985 * C90744 + C1984 * C88316) +
            C1987 * C90503) *
               C90634 * C90 +
           (C1988 * C88309 - (C1987 * C90744 + C1986 * C88316) +
            C1989 * C90503) *
               C90634 * C91) *
              C4654 +
          (((C307 * C4656 + C90623 * C4913) * C88316 +
            (C307 * C4663 + C90623 * C4917) * C90744 - C4930 * C88309 -
            C4931 * C90503) *
               C90634 * C89 +
           (C4930 * C88316 + C4931 * C90744 - C4932 * C88309 - C4933 * C90503) *
               C90634 * C90 +
           (C4932 * C88316 + C4933 * C90744 -
            (C307 * C4659 + C90623 * C4916) * C88309 -
            (C307 * C4667 + C90623 * C4920) * C90503) *
               C90634 * C91) *
              C4655) *
         C90541) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
           C13732 * C2570 + C13578 * C2827) *
              C103 +
          (C13730 * C116 + C13576 * C314 + C13731 * C839 + C13577 * C1098 +
           C13732 * C2577 + C13578 * C2831) *
              C92 -
          (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
           C13730 * C108 + C13576 * C309) *
              C104 -
          (C13732 * C2578 + C13578 * C2832 + C13731 * C838 + C13577 * C1099 +
           C13730 * C117 + C13576 * C315) *
              C93 +
          (C13730 * C109 + C13576 * C310 + C13731 * C830 + C13577 * C1095 +
           C13732 * C2572 + C13578 * C2829) *
              C105 +
          (C13730 * C118 + C13576 * C316 + C13731 * C837 + C13577 * C1100 +
           C13732 * C2579 + C13578 * C2833) *
              C94 -
          (C13732 * C2573 + C13578 * C2830 + C13731 * C831 + C13577 * C1096 +
           C13730 * C110 + C13576 * C311) *
              C106 -
          (C13732 * C2581 + C13578 * C2834 + C13731 * C841 + C13577 * C1101 +
           C13730 * C120 + C13576 * C317) *
              C95) *
         C90634 * C90485 * C90567 * C90541) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C88316 +
           (C13730 * C116 + C13576 * C314 + C13731 * C839 + C13577 * C1098 +
            C13732 * C2577 + C13578 * C2831) *
               C90744 -
           (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
            C13730 * C108 + C13576 * C309) *
               C88309 -
           (C13732 * C2578 + C13578 * C2832 + C13731 * C838 + C13577 * C1099 +
            C13730 * C117 + C13576 * C315) *
               C90503) *
              C90634 * C90485 * C90567 * C2565 +
          ((C13730 * C829 + C13576 * C1093 + C13731 * C2571 + C13577 * C2828 +
            C13732 * C3366 + C13578 * C3544) *
               C88309 -
           ((C13732 * C3370 + C13578 * C3548 + C13731 * C2577 + C13577 * C2831 +
             C13730 * C839 + C13576 * C1098) *
                C90744 +
            (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
             C13730 * C832 + C13576 * C1094) *
                C88316) +
           (C13730 * C838 + C13576 * C1099 + C13731 * C2578 + C13577 * C2832 +
            C13732 * C3369 + C13578 * C3547) *
               C90503) *
              C90634 * C90485 * C90567 * C2566 +
          ((C13730 * C2570 + C13576 * C2827 + C13731 * C3367 + C13577 * C3545 +
            C13732 * C15525 + C13578 * C15808) *
               C88316 +
           (C13730 * C2577 + C13576 * C2831 + C13731 * C3370 + C13577 * C3548 +
            C13732 * C15528 + C13578 * C15810) *
               C90744 -
           (C13732 * C15526 + C13578 * C15809 + C13731 * C3366 +
            C13577 * C3544 + C13730 * C2571 + C13576 * C2828) *
               C88309 -
           (C13732 * C15530 + C13578 * C15811 + C13731 * C3369 +
            C13577 * C3547 + C13730 * C2578 + C13576 * C2832) *
               C90503) *
              C90634 * C90485 * C90567 * C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C88316 +
           (C13730 * C116 + C13576 * C314 + C13731 * C839 + C13577 * C1098 +
            C13732 * C2577 + C13578 * C2831) *
               C90744 -
           (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
            C13730 * C108 + C13576 * C309) *
               C88309 -
           (C13732 * C2578 + C13578 * C2832 + C13731 * C838 + C13577 * C1099 +
            C13730 * C117 + C13576 * C315) *
               C90503) *
              C90634 * C90485 * C4653 +
          ((C13730 * C1697 + C13576 * C1961 + C13731 * C3892 + C13577 * C4162 +
            C13732 * C3895 + C13578 * C4165) *
               C88309 -
           ((C13732 * C3905 + C13578 * C4172 + C13731 * C3900 + C13577 * C4167 +
             C13730 * C1707 + C13576 * C1966) *
                C90744 +
            (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 + C13577 * C4161 +
             C13730 * C1700 + C13576 * C1962) *
                C88316) +
           (C13730 * C1706 + C13576 * C1967 + C13731 * C3901 + C13577 * C4168 +
            C13732 * C3904 + C13578 * C4171) *
               C90503) *
              C90634 * C90485 * C4654 +
          ((C13730 * C4656 + C13576 * C4913 + C13731 * C5471 + C13577 * C5717 +
            C13732 * C17651 + C13578 * C17889) *
               C88316 +
           (C13730 * C4663 + C13576 * C4917 + C13731 * C5474 + C13577 * C5720 +
            C13732 * C17654 + C13578 * C17891) *
               C90744 -
           (C13732 * C17652 + C13578 * C17890 + C13731 * C5470 +
            C13577 * C5716 + C13730 * C4657 + C13576 * C4914) *
               C88309 -
           (C13732 * C17656 + C13578 * C17892 + C13731 * C5473 +
            C13577 * C5719 + C13730 * C4664 + C13576 * C4918) *
               C90503) *
              C90634 * C90485 * C4655) *
         C90541) /
            (p * q * std::sqrt(p + q));
    d2eeyy[66] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C2660 +
            (C307 * C182 + C90623 * C394) * C2565 -
            (C307 * C832 + C90623 * C1094) * C2661 -
            (C307 * C927 + C90623 * C1195) * C2566 +
            (C307 * C2570 + C90623 * C2827) * C2662 +
            (C307 * C2663 + C90623 * C2921) * C2567) *
               C90634 * C89 +
           (C2926 + C2927 - C2928 - C2929 + C2930 + C2942) * C90634 * C90 +
           (C2933 + C2934 - C2935 - C2936 + C2937 + C2943) * C90634 * C91) *
              C90744 +
          ((C2928 - (C2927 + C2926) + C2929 - C2930 - C2942) * C90634 * C89 +
           (C2935 - (C2934 + C2933) + C2936 - C2937 - C2943) * C90634 * C90 +
           (C1120 * C2661 - (C415 * C2565 + C341 * C2660) + C1219 * C2566 -
            (C307 * C2573 + C90623 * C2830) * C2662 -
            (C307 * C2666 + C90623 * C2924) * C2567) *
               C90634 * C91) *
              C90503) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C181 +
            (C307 * C182 + C90623 * C394) * C90541) *
               C90634 * C89 +
           (C401 + C417) * C90634 * C90 + C423 * C91) *
              C92 -
          (C424 * C91 + (C418 + C404) * C90634 * C90 +
           (C417 + C401) * C90634 * C89) *
              C93 +
          (C423 * C89 + (C409 + C419) * C90634 * C90 +
           (C410 + C420) * C90634 * C91) *
              C94 -
          (((C307 * C187 + C90623 * C399) * C90541 +
            (C307 * C112 + C90623 * C313) * C181) *
               C90634 * C91 +
           (C420 + C410) * C90634 * C90 + C424 * C89) *
              C95) *
         C90567) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C181 +
             (C307 * C182 + C90623 * C394) * C90541) *
                C90634 * C89 +
            (C401 + C417) * C90634 * C90 + C423 * C91) *
               C90744 -
           (C424 * C91 + (C418 + C404) * C90634 * C90 +
            (C417 + C401) * C90634 * C89) *
               C90503) *
              C4653 +
          (((C2069 + C2081) * C90634 * C89 + (C2072 + C2082) * C90634 * C90 +
            (C2075 + C2083) * C90634 * C91) *
               C90503 -
           (C2085 * C91 + (C2081 + C2069) * C90634 * C90 +
            ((C307 * C1794 + C90623 * C2066) * C90541 +
             (C307 * C1700 + C90623 * C1962) * C181) *
                C90634 * C89) *
               C90744) *
              C4654 +
          ((((C307 * C4656 + C90623 * C4913) * C181 +
             (C307 * C4746 + C90623 * C5007) * C90541) *
                C90634 * C89 +
            (C5012 + C5020) * C90634 * C90 + (C5015 + C5021) * C90634 * C91) *
               C90744 -
           (((C307 * C4749 + C90623 * C5010) * C90541 +
             (C307 * C4659 + C90623 * C4916) * C181) *
                C90634 * C91 +
            (C5021 + C5015) * C90634 * C90 + (C5020 + C5012) * C90634 * C89) *
               C90503) *
              C4655)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C181 +
           (C13730 * C182 + C13576 * C394 + C13731 * C927 + C13577 * C1195 +
            C13732 * C2663 + C13578 * C2921) *
               C90541) *
              C90634 * C90485 * C92 -
          ((C13732 * C2664 + C13578 * C2922 + C13731 * C926 + C13577 * C1196 +
            C13730 * C183 + C13576 * C395) *
               C90541 +
           (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
            C13730 * C108 + C13576 * C309) *
               C181) *
              C90634 * C90485 * C93 +
          ((C13730 * C109 + C13576 * C310 + C13731 * C830 + C13577 * C1095 +
            C13732 * C2572 + C13578 * C2829) *
               C181 +
           (C13730 * C184 + C13576 * C396 + C13731 * C925 + C13577 * C1197 +
            C13732 * C2665 + C13578 * C2923) *
               C90541) *
              C90634 * C90485 * C94 -
          ((C13732 * C2666 + C13578 * C2924 + C13731 * C928 + C13577 * C1198 +
            C13730 * C185 + C13576 * C397) *
               C90541 +
           (C13732 * C2573 + C13578 * C2830 + C13731 * C831 + C13577 * C1096 +
            C13730 * C110 + C13576 * C311) *
               C181) *
              C90634 * C90485 * C95) *
         C90567) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C2660 +
           (C13730 * C182 + C13576 * C394 + C13731 * C927 + C13577 * C1195 +
            C13732 * C2663 + C13578 * C2921) *
               C2565 -
           (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
            C13730 * C832 + C13576 * C1094) *
               C2661 -
           (C13732 * C3433 + C13578 * C3599 + C13731 * C2663 + C13577 * C2921 +
            C13730 * C927 + C13576 * C1195) *
               C2566 +
           (C13730 * C2570 + C13576 * C2827 + C13731 * C3367 + C13577 * C3545 +
            C13732 * C15525 + C13578 * C15808) *
               C2662 +
           (C13730 * C2663 + C13576 * C2921 + C13731 * C3433 + C13577 * C3599 +
            C13732 * C15634 + C13578 * C15886) *
               C2567) *
              C90634 * C90485 * C90744 +
          ((C13730 * C829 + C13576 * C1093 + C13731 * C2571 + C13577 * C2828 +
            C13732 * C3366 + C13578 * C3544) *
               C2661 -
           ((C13732 * C2664 + C13578 * C2922 + C13731 * C926 + C13577 * C1196 +
             C13730 * C183 + C13576 * C395) *
                C2565 +
            (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
             C13730 * C108 + C13576 * C309) *
                C2660) +
           (C13730 * C926 + C13576 * C1196 + C13731 * C2664 + C13577 * C2922 +
            C13732 * C3432 + C13578 * C3600) *
               C2566 -
           (C13732 * C15526 + C13578 * C15809 + C13731 * C3366 +
            C13577 * C3544 + C13730 * C2571 + C13576 * C2828) *
               C2662 -
           (C13732 * C15635 + C13578 * C15887 + C13731 * C3432 +
            C13577 * C3600 + C13730 * C2664 + C13576 * C2922) *
               C2567) *
              C90634 * C90485 * C90503) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
             C13732 * C2570 + C13578 * C2827) *
                C181 +
            (C13730 * C182 + C13576 * C394 + C13731 * C927 + C13577 * C1195 +
             C13732 * C2663 + C13578 * C2921) *
                C90541) *
               C90634 * C90485 * C90744 -
           ((C13732 * C2664 + C13578 * C2922 + C13731 * C926 + C13577 * C1196 +
             C13730 * C183 + C13576 * C395) *
                C90541 +
            (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
             C13730 * C108 + C13576 * C309) *
                C181) *
               C90634 * C90485 * C90503) *
              C4653 +
          (((C13730 * C1697 + C13576 * C1961 + C13731 * C3892 + C13577 * C4162 +
             C13732 * C3895 + C13578 * C4165) *
                C181 +
            (C13730 * C1791 + C13576 * C2063 + C13731 * C3990 + C13577 * C4249 +
             C13732 * C3993 + C13578 * C4250) *
                C90541) *
               C90634 * C90485 * C90503 -
           ((C13732 * C3994 + C13578 * C4248 + C13731 * C3989 + C13577 * C4247 +
             C13730 * C1794 + C13576 * C2066) *
                C90541 +
            (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 + C13577 * C4161 +
             C13730 * C1700 + C13576 * C1962) *
                C181) *
               C90634 * C90485 * C90744) *
              C4654 +
          (((C13730 * C4656 + C13576 * C4913 + C13731 * C5471 + C13577 * C5717 +
             C13732 * C17651 + C13578 * C17889) *
                C181 +
            (C13730 * C4746 + C13576 * C5007 + C13731 * C5557 + C13577 * C5795 +
             C13732 * C17733 + C13578 * C17967) *
                C90541) *
               C90634 * C90485 * C90744 -
           ((C13732 * C17734 + C13578 * C17968 + C13731 * C5556 +
             C13577 * C5796 + C13730 * C4747 + C13576 * C5008) *
                C90541 +
            (C13732 * C17652 + C13578 * C17890 + C13731 * C5470 +
             C13577 * C5716 + C13730 * C4657 + C13576 * C4914) *
                C181) *
               C90634 * C90485 * C90503) *
              C4655)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[66] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C244 +
             (C307 * C245 + C90623 * C474) * C90567) *
                C90634 * C89 +
            (C481 + C497) * C90634 * C90 + C503 * C91) *
               C2565 -
           (C1321 * C91 + (C1318 + C1310) * C90634 * C90 +
            ((C307 * C1011 + C90623 * C1301) * C90567 +
             (C307 * C832 + C90623 * C1094) * C244) *
                C90634 * C89) *
               C2566 +
           (((C307 * C2570 + C90623 * C2827) * C244 +
             (C307 * C2745 + C90623 * C3017) * C90567) *
                C90634 * C89 +
            (C3022 + C3030) * C90634 * C90 + (C3025 + C3031) * C90634 * C91) *
               C2567) *
              C90744 +
          (((C1310 + C1318) * C90634 * C89 + (C1307 + C1317) * C90634 * C90 +
            (C1311 + C1319) * C90634 * C91) *
               C2566 -
           (C504 * C91 + (C498 + C484) * C90634 * C90 +
            (C497 + C481) * C90634 * C89) *
               C2565 -
           (((C307 * C2748 + C90623 * C3020) * C90567 +
             (C307 * C2573 + C90623 * C2830) * C244) *
                C90634 * C91 +
            (C3031 + C3025) * C90634 * C90 + (C3030 + C3022) * C90634 * C89) *
               C2567) *
              C90503)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C244 +
            (C307 * C245 + C90623 * C474) * C90567) *
               C90634 * C89 +
           (C481 + C497) * C90634 * C90 + C503 * C91) *
              C90541 * C92 -
          (C504 * C91 + (C498 + C484) * C90634 * C90 +
           (C497 + C481) * C90634 * C89) *
              C90541 * C93 +
          (C503 * C89 + (C489 + C499) * C90634 * C90 +
           (C490 + C500) * C90634 * C91) *
              C90541 * C94 -
          (((C307 * C250 + C90623 * C479) * C90567 +
            (C307 * C112 + C90623 * C313) * C244) *
               C90634 * C91 +
           (C500 + C490) * C90634 * C90 + C504 * C89) *
              C90541 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C4828 +
            (C307 * C245 + C90623 * C474) * C4653 -
            (C307 * C1700 + C90623 * C1962) * C4829 -
            (C307 * C1879 + C90623 * C2159) * C4654 +
            (C307 * C4656 + C90623 * C4913) * C4830 +
            (C307 * C4831 + C90623 * C5095) * C4655) *
               C90634 * C89 +
           (C5100 + C5101 - C5102 - C5103 + C5104 + C5116) * C90634 * C90 +
           (C5107 + C5108 - C5109 - C5110 + C5111 + C5117) * C90634 * C91) *
              C90541 * C90744 +
          ((C5102 - (C5101 + C5100) + C5103 - C5104 - C5116) * C90634 * C89 +
           (C5109 - (C5108 + C5107) + C5110 - C5111 - C5117) * C90634 * C90 +
           (C1988 * C4829 - (C495 * C4653 + C341 * C4828) + C2183 * C4654 -
            (C307 * C4659 + C90623 * C4916) * C4830 -
            (C307 * C4834 + C90623 * C5098) * C4655) *
               C90634 * C91) *
              C90541 * C90503)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C244 +
           (C13730 * C245 + C13576 * C474 + C13731 * C1011 + C13577 * C1301 +
            C13732 * C2745 + C13578 * C3017) *
               C90567) *
              C90634 * C90485 * C90541 * C92 -
          ((C13732 * C2746 + C13578 * C3018 + C13731 * C1010 + C13577 * C1300 +
            C13730 * C246 + C13576 * C475) *
               C90567 +
           (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
            C13730 * C108 + C13576 * C309) *
               C244) *
              C90634 * C90485 * C90541 * C93 +
          ((C13730 * C109 + C13576 * C310 + C13731 * C830 + C13577 * C1095 +
            C13732 * C2572 + C13578 * C2829) *
               C244 +
           (C13730 * C247 + C13576 * C476 + C13731 * C1009 + C13577 * C1299 +
            C13732 * C2747 + C13578 * C3019) *
               C90567) *
              C90634 * C90485 * C90541 * C94 -
          ((C13732 * C2748 + C13578 * C3020 + C13731 * C1012 + C13577 * C1302 +
            C13730 * C248 + C13576 * C477) *
               C90567 +
           (C13732 * C2573 + C13578 * C2830 + C13731 * C831 + C13577 * C1096 +
            C13730 * C110 + C13576 * C311) *
               C244) *
              C90634 * C90485 * C90541 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
             C13732 * C2570 + C13578 * C2827) *
                C244 +
            (C13730 * C245 + C13576 * C474 + C13731 * C1011 + C13577 * C1301 +
             C13732 * C2745 + C13578 * C3017) *
                C90567) *
               C90634 * C90485 * C2565 -
           ((C13732 * C3489 + C13578 * C3654 + C13731 * C2745 + C13577 * C3017 +
             C13730 * C1011 + C13576 * C1301) *
                C90567 +
            (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
             C13730 * C832 + C13576 * C1094) *
                C244) *
               C90634 * C90485 * C2566 +
           ((C13730 * C2570 + C13576 * C2827 + C13731 * C3367 + C13577 * C3545 +
             C13732 * C15525 + C13578 * C15808) *
                C244 +
            (C13730 * C2745 + C13576 * C3017 + C13731 * C3489 + C13577 * C3654 +
             C13732 * C15718 + C13578 * C15962) *
                C90567) *
               C90634 * C90485 * C2567) *
              C90744 +
          (((C13730 * C829 + C13576 * C1093 + C13731 * C2571 + C13577 * C2828 +
             C13732 * C3366 + C13578 * C3544) *
                C244 +
            (C13730 * C1010 + C13576 * C1300 + C13731 * C2746 + C13577 * C3018 +
             C13732 * C3488 + C13578 * C3653) *
                C90567) *
               C90634 * C90485 * C2566 -
           ((C13732 * C2746 + C13578 * C3018 + C13731 * C1010 + C13577 * C1300 +
             C13730 * C246 + C13576 * C475) *
                C90567 +
            (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
             C13730 * C108 + C13576 * C309) *
                C244) *
               C90634 * C90485 * C2565 -
           ((C13732 * C15719 + C13578 * C15963 + C13731 * C3488 +
             C13577 * C3653 + C13730 * C2746 + C13576 * C3018) *
                C90567 +
            (C13732 * C15526 + C13578 * C15809 + C13731 * C3366 +
             C13577 * C3544 + C13730 * C2571 + C13576 * C2828) *
                C244) *
               C90634 * C90485 * C2567) *
              C90503)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C4828 +
           (C13730 * C245 + C13576 * C474 + C13731 * C1011 + C13577 * C1301 +
            C13732 * C2745 + C13578 * C3017) *
               C4653 -
           (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 + C13577 * C4161 +
            C13730 * C1700 + C13576 * C1962) *
               C4829 -
           (C13732 * C4080 + C13578 * C4330 + C13731 * C4075 + C13577 * C4327 +
            C13730 * C1879 + C13576 * C2159) *
               C4654 +
           (C13730 * C4656 + C13576 * C4913 + C13731 * C5471 + C13577 * C5717 +
            C13732 * C17651 + C13578 * C17889) *
               C4830 +
           (C13730 * C4831 + C13576 * C5095 + C13731 * C5637 + C13577 * C5872 +
            C13732 * C17811 + C13578 * C18043) *
               C4655) *
              C90634 * C90485 * C90541 * C90744 +
          ((C13730 * C1697 + C13576 * C1961 + C13731 * C3892 + C13577 * C4162 +
            C13732 * C3895 + C13578 * C4165) *
               C4829 -
           ((C13732 * C2746 + C13578 * C3018 + C13731 * C1010 + C13577 * C1300 +
             C13730 * C246 + C13576 * C475) *
                C4653 +
            (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
             C13730 * C108 + C13576 * C309) *
                C4828) +
           (C13730 * C1878 + C13576 * C2160 + C13731 * C4076 + C13577 * C4328 +
            C13732 * C4079 + C13578 * C4331) *
               C4654 -
           (C13732 * C17652 + C13578 * C17890 + C13731 * C5470 +
            C13577 * C5716 + C13730 * C4657 + C13576 * C4914) *
               C4830 -
           (C13732 * C17812 + C13578 * C18044 + C13731 * C5636 +
            C13577 * C5873 + C13730 * C4832 + C13576 * C5096) *
               C4655) *
              C90634 * C90485 * C90541 * C90503)) /
            (p * q * std::sqrt(p + q));
    d2eezx[66] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C88316 +
            (C554 * C116 + C90634 * C561) * C90744 - C584 * C88309 -
            C585 * C90503) *
               C89 +
           (C584 * C88316 + C585 * C90744 - C586 * C88309 - C587 * C90503) *
               C90 +
           (C586 * C88316 + C587 * C90744 - C588 * C88309 - C589 * C90503) *
               C91) *
              C90623 * C90567 * C2565 +
          ((C1418 * C88309 -
            ((C554 * C839 + C90634 * C1400) * C90744 +
             (C554 * C832 + C90634 * C1396) * C88316) +
            C1419 * C90503) *
               C89 +
           (C1420 * C88309 - (C1419 * C90744 + C1418 * C88316) +
            C1421 * C90503) *
               C90 +
           (C1422 * C88309 - (C1421 * C90744 + C1420 * C88316) +
            C1423 * C90503) *
               C91) *
              C90623 * C90567 * C2566 +
          (((C554 * C2570 + C90634 * C3105) * C88316 +
            (C554 * C2577 + C90634 * C3109) * C90744 - C3122 * C88309 -
            C3123 * C90503) *
               C89 +
           (C3122 * C88316 + C3123 * C90744 - C3124 * C88309 - C3125 * C90503) *
               C90 +
           (C3124 * C88316 + C3125 * C90744 -
            (C554 * C2573 + C90634 * C3108) * C88309 -
            (C554 * C2581 + C90634 * C3112) * C90503) *
               C91) *
              C90623 * C90567 * C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C554 * C107 + C90634 * C555) * C103 +
           (C554 * C116 + C90634 * C561) * C92 - C584 * C104 - C585 * C93 +
           C586 * C105 + C587 * C94 - C588 * C106 - C589 * C95) *
              C89 +
          (C584 * C103 + C585 * C92 - C586 * C104 - C587 * C93 + C588 * C105 +
           C589 * C94 - C590 * C106 - C591 * C95) *
              C90 +
          (C586 * C103 + C587 * C92 - C588 * C104 - C589 * C93 + C590 * C105 +
           C591 * C94 - (C554 * C112 + C90634 * C560) * C106 -
           (C554 * C124 + C90634 * C566) * C95) *
              C91) *
         C90623 * C90567 * C90541) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C88316 +
            (C554 * C116 + C90634 * C561) * C90744 - C584 * C88309 -
            C585 * C90503) *
               C89 +
           (C584 * C88316 + C585 * C90744 - C586 * C88309 - C587 * C90503) *
               C90 +
           (C586 * C88316 + C587 * C90744 - C588 * C88309 - C589 * C90503) *
               C91) *
              C90623 * C4653 +
          ((C2286 * C88309 -
            ((C554 * C1707 + C90634 * C2268) * C90744 +
             (C554 * C1700 + C90634 * C2264) * C88316) +
            C2287 * C90503) *
               C89 +
           (C2288 * C88309 - (C2287 * C90744 + C2286 * C88316) +
            C2289 * C90503) *
               C90 +
           (C2290 * C88309 - (C2289 * C90744 + C2288 * C88316) +
            C2291 * C90503) *
               C91) *
              C90623 * C4654 +
          (((C554 * C4656 + C90634 * C5191) * C88316 +
            (C554 * C4663 + C90634 * C5195) * C90744 - C5208 * C88309 -
            C5209 * C90503) *
               C89 +
           (C5208 * C88316 + C5209 * C90744 - C5210 * C88309 - C5211 * C90503) *
               C90 +
           (C5210 * C88316 + C5211 * C90744 -
            (C554 * C4659 + C90634 * C5194) * C88309 -
            (C554 * C4667 + C90634 * C5198) * C90503) *
               C91) *
              C90623 * C4655) *
         C90541) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C554 * C107 + C90634 * C555) * C103 +
           (C554 * C116 + C90634 * C561) * C92 - C584 * C104 - C585 * C93 +
           C586 * C105 + C587 * C94 - C588 * C106 - C589 * C95) *
              C90485 * C13576 +
          ((C554 * C832 + C90634 * C1396) * C103 +
           (C554 * C839 + C90634 * C1400) * C92 - C1418 * C104 - C1419 * C93 +
           C1420 * C105 + C1421 * C94 - C1422 * C106 - C1423 * C95) *
              C90485 * C13577 +
          ((C554 * C2570 + C90634 * C3105) * C103 +
           (C554 * C2577 + C90634 * C3109) * C92 - C3122 * C104 - C3123 * C93 +
           C3124 * C105 + C3125 * C94 - (C554 * C2573 + C90634 * C3108) * C106 -
           (C554 * C2581 + C90634 * C3112) * C95) *
              C90485 * C13578) *
         C90567 * C90541) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C88316 +
            (C554 * C116 + C90634 * C561) * C90744 - C584 * C88309 -
            C585 * C90503) *
               C90485 * C13576 +
           (C16043 + C16044 - C16045 - C16046) * C90485 * C13577 +
           C16070 * C13578) *
              C90567 * C2565 +
          ((C16045 - (C16044 + C16043) + C16046) * C90485 * C13576 +
           (C16049 - (C16048 + C16047) + C16050) * C90485 * C13577 +
           (C16065 - (C16066 + C16067) + C16068) * C90485 * C13578) *
              C90567 * C2566 +
          (C16070 * C13576 +
           (C16067 + C16066 - C16065 - C16068) * C90485 * C13577 +
           ((C554 * C15525 + C90634 * C16038) * C88316 +
            (C554 * C15528 + C90634 * C16040) * C90744 -
            (C554 * C15526 + C90634 * C16039) * C88309 -
            (C554 * C15530 + C90634 * C16041) * C90503) *
               C90485 * C13578) *
              C90567 * C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C88316 +
            (C554 * C116 + C90634 * C561) * C90744 - C584 * C88309 -
            C585 * C90503) *
               C90485 * C13576 +
           (C16043 + C16044 - C16045 - C16046) * C90485 * C13577 +
           C16070 * C13578) *
              C4653 +
          ((C2286 * C88309 -
            ((C554 * C1707 + C90634 * C2268) * C90744 +
             (C554 * C1700 + C90634 * C2264) * C88316) +
            C2287 * C90503) *
               C90485 * C13576 +
           (C8771 * C88309 - (C17380 * C90744 + C17381 * C88316) +
            C8772 * C90503) *
               C90485 * C13577 +
           ((C554 * C3895 + C90634 * C4411) * C88309 -
            (C17378 * C90744 + C17379 * C88316) +
            (C554 * C3904 + C90634 * C4417) * C90503) *
               C90485 * C13578) *
              C4654 +
          (((C554 * C4656 + C90634 * C5191) * C88316 +
            (C554 * C4663 + C90634 * C5195) * C90744 - C5208 * C88309 -
            C5209 * C90503) *
               C90485 * C13576 +
           ((C554 * C5471 + C90634 * C5951) * C88316 +
            (C554 * C5474 + C90634 * C5954) * C90744 -
            (C554 * C5470 + C90634 * C5950) * C88309 -
            (C554 * C5473 + C90634 * C5953) * C90503) *
               C90485 * C13577 +
           ((C554 * C17651 + C90634 * C18119) * C88316 +
            (C554 * C17654 + C90634 * C18121) * C90744 -
            (C554 * C17652 + C90634 * C18120) * C88309 -
            (C554 * C17656 + C90634 * C18122) * C90503) *
               C90485 * C13578) *
              C4655) *
         C90541) /
            (p * q * std::sqrt(p + q));
    d2eezy[66] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C2660 +
            (C554 * C182 + C90634 * C641) * C2565 -
            (C554 * C832 + C90634 * C1396) * C2661 -
            (C554 * C927 + C90634 * C1497) * C2566 +
            (C554 * C2570 + C90634 * C3105) * C2662 +
            (C554 * C2663 + C90634 * C3199) * C2567) *
               C89 +
           (C3204 + C3205 - C3206 - C3207 + C3208 + C3220) * C90 +
           (C3211 + C3212 - C3213 - C3214 + C3215 + C3221) * C91) *
              C90623 * C90744 +
          ((C3206 - (C3205 + C3204) + C3207 - C3208 - C3220) * C89 +
           (C3213 - (C3212 + C3211) + C3214 - C3215 - C3221) * C90 +
           (C1422 * C2661 - (C662 * C2565 + C588 * C2660) + C1521 * C2566 -
            (C554 * C2573 + C90634 * C3108) * C2662 -
            (C554 * C2666 + C90634 * C3202) * C2567) *
               C91) *
              C90623 * C90503) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C181 +
            (C554 * C182 + C90634 * C641) * C90541) *
               C89 +
           (C648 + C664) * C90 + C668 * C91) *
              C90623 * C92 -
          (C669 * C91 + (C665 + C651) * C90 + (C664 + C648) * C89) * C90623 *
              C93 +
          (C668 * C89 + (C656 + C666) * C90 + (C657 + C667) * C91) * C90623 *
              C94 -
          (((C554 * C187 + C90634 * C646) * C90541 +
            (C554 * C112 + C90634 * C560) * C181) *
               C91 +
           (C667 + C657) * C90 + C669 * C89) *
              C90623 * C95) *
         C90567) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C181 +
             (C554 * C182 + C90634 * C641) * C90541) *
                C89 +
            (C648 + C664) * C90 + C668 * C91) *
               C90623 * C90744 -
           (C669 * C91 + (C665 + C651) * C90 + (C664 + C648) * C89) * C90623 *
               C90503) *
              C4653 +
          (((C2371 + C2383) * C89 + (C2374 + C2384) * C90 +
            (C2377 + C2385) * C91) *
               C90623 * C90503 -
           (C2386 * C91 + (C2383 + C2371) * C90 +
            ((C554 * C1794 + C90634 * C2368) * C90541 +
             (C554 * C1700 + C90634 * C2264) * C181) *
                C89) *
               C90623 * C90744) *
              C4654 +
          ((((C554 * C4656 + C90634 * C5191) * C181 +
             (C554 * C4746 + C90634 * C5285) * C90541) *
                C89 +
            (C5290 + C5298) * C90 + (C5293 + C5299) * C91) *
               C90623 * C90744 -
           (((C554 * C4749 + C90634 * C5288) * C90541 +
             (C554 * C4659 + C90634 * C5194) * C181) *
                C91 +
            (C5299 + C5293) * C90 + (C5298 + C5290) * C89) *
               C90623 * C90503) *
              C4655)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C181 +
            (C554 * C182 + C90634 * C641) * C90541) *
               C90485 * C13576 +
           ((C554 * C832 + C90634 * C1396) * C181 +
            (C554 * C927 + C90634 * C1497) * C90541) *
               C90485 * C13577 +
           ((C554 * C2570 + C90634 * C3105) * C181 +
            (C554 * C2663 + C90634 * C3199) * C90541) *
               C90485 * C13578) *
              C92 -
          ((C3218 * C90541 + C3122 * C181) * C90485 * C13578 +
           (C1518 * C90541 + C1418 * C181) * C90485 * C13577 +
           (C664 + C648) * C90485 * C13576) *
              C93 +
          (C668 * C90485 * C13576 +
           (C1420 * C181 + C1520 * C90541) * C90485 * C13577 +
           (C3124 * C181 + C3219 * C90541) * C90485 * C13578) *
              C94 -
          (((C554 * C2666 + C90634 * C3202) * C90541 +
            (C554 * C2573 + C90634 * C3108) * C181) *
               C90485 * C13578 +
           (C1521 * C90541 + C1422 * C181) * C90485 * C13577 +
           C669 * C90485 * C13576) *
              C95) *
         C90567) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C2660 +
            (C554 * C182 + C90634 * C641) * C2565 - C14614 * C2661 -
            C14700 * C2566 + C14616 * C2662 + C14701 * C2567) *
               C90485 * C13576 +
           (C14614 * C2660 + C14700 * C2565 - C14616 * C2661 - C14701 * C2566 +
            C16062 * C2662 + C16151 * C2567) *
               C90485 * C13577 +
           (C14616 * C2660 + C14701 * C2565 - C16062 * C2661 - C16151 * C2566 +
            (C554 * C15525 + C90634 * C16038) * C2662 +
            (C554 * C15634 + C90634 * C16144) * C2567) *
               C90485 * C13578) *
              C90744 +
          ((C3206 - (C3205 + C3204) + C3207 - C3208 - C3220) * C90485 * C13576 +
           (C3122 * C2661 - (C1518 * C2565 + C1418 * C2660) + C3218 * C2566 -
            C16060 * C2662 - C16152 * C2567) *
               C90485 * C13577 +
           (C16060 * C2661 - (C3218 * C2565 + C3122 * C2660) + C16152 * C2566 -
            (C554 * C15526 + C90634 * C16039) * C2662 -
            (C554 * C15635 + C90634 * C16145) * C2567) *
               C90485 * C13578) *
              C90503) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C181 +
             (C554 * C182 + C90634 * C641) * C90541) *
                C90485 * C13576 +
            (C14614 * C181 + C14700 * C90541) * C90485 * C13577 +
            (C14616 * C181 + C14701 * C90541) * C90485 * C13578) *
               C90744 -
           ((C3218 * C90541 + C3122 * C181) * C90485 * C13578 +
            (C1518 * C90541 + C1418 * C181) * C90485 * C13577 +
            (C664 + C648) * C90485 * C13576) *
               C90503) *
              C4653 +
          (((C2371 + C2383) * C90485 * C13576 +
            (C8771 * C181 + C8884 * C90541) * C90485 * C13577 +
            ((C554 * C3895 + C90634 * C4411) * C181 +
             (C554 * C3993 + C90634 * C4496) * C90541) *
                C90485 * C13578) *
               C90503 -
           ((C17475 * C90541 + C17379 * C181) * C90485 * C13578 +
            (C17474 * C90541 + C17381 * C181) * C90485 * C13577 +
            ((C554 * C1794 + C90634 * C2368) * C90541 +
             (C554 * C1700 + C90634 * C2264) * C181) *
                C90485 * C13576) *
               C90744) *
              C4654 +
          ((((C554 * C4656 + C90634 * C5191) * C181 +
             (C554 * C4746 + C90634 * C5285) * C90541) *
                C90485 * C13576 +
            ((C554 * C5471 + C90634 * C5951) * C181 +
             (C554 * C5557 + C90634 * C6029) * C90541) *
                C90485 * C13577 +
            ((C554 * C17651 + C90634 * C18119) * C181 +
             (C554 * C17733 + C90634 * C18197) * C90541) *
                C90485 * C13578) *
               C90744 -
           (((C554 * C17734 + C90634 * C18198) * C90541 +
             (C554 * C17652 + C90634 * C18120) * C181) *
                C90485 * C13578 +
            ((C554 * C5556 + C90634 * C6030) * C90541 +
             (C554 * C5470 + C90634 * C5950) * C181) *
                C90485 * C13577 +
            (C5298 + C5290) * C90485 * C13576) *
               C90503) *
              C4655)) /
            (p * q * std::sqrt(p + q));
    d2eezz[66] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C244 +
             (C554 * C245 + C90634 * C719) * C90567) *
                C89 +
            (C726 + C742) * C90 + C746 * C91) *
               C90623 * C2565 -
           (C1621 * C91 + (C1619 + C1611) * C90 +
            ((C554 * C1011 + C90634 * C1602) * C90567 +
             (C554 * C832 + C90634 * C1396) * C244) *
                C89) *
               C90623 * C2566 +
           (((C554 * C2570 + C90634 * C3105) * C244 +
             (C554 * C2745 + C90634 * C3295) * C90567) *
                C89 +
            (C3300 + C3308) * C90 + (C3303 + C3309) * C91) *
               C90623 * C2567) *
              C90744 +
          (((C1611 + C1619) * C89 + (C1608 + C1618) * C90 +
            (C1612 + C1620) * C91) *
               C90623 * C2566 -
           (C747 * C91 + (C743 + C729) * C90 + (C742 + C726) * C89) * C90623 *
               C2565 -
           (((C554 * C2748 + C90634 * C3298) * C90567 +
             (C554 * C2573 + C90634 * C3108) * C244) *
                C91 +
            (C3309 + C3303) * C90 + (C3308 + C3300) * C89) *
               C90623 * C2567) *
              C90503)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C244 +
            (C554 * C245 + C90634 * C719) * C90567) *
               C89 +
           (C726 + C742) * C90 + C746 * C91) *
              C90623 * C90541 * C92 -
          (C747 * C91 + (C743 + C729) * C90 + (C742 + C726) * C89) * C90623 *
              C90541 * C93 +
          (C746 * C89 + (C734 + C744) * C90 + (C735 + C745) * C91) * C90623 *
              C90541 * C94 -
          (((C554 * C250 + C90634 * C724) * C90567 +
            (C554 * C112 + C90634 * C560) * C244) *
               C91 +
           (C745 + C735) * C90 + C747 * C89) *
              C90623 * C90541 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C4828 +
            (C554 * C245 + C90634 * C719) * C4653 -
            (C554 * C1700 + C90634 * C2264) * C4829 -
            (C554 * C1879 + C90634 * C2460) * C4654 +
            (C554 * C4656 + C90634 * C5191) * C4830 +
            (C554 * C4831 + C90634 * C5373) * C4655) *
               C89 +
           (C5378 + C5379 - C5380 - C5381 + C5382 + C5394) * C90 +
           (C5385 + C5386 - C5387 - C5388 + C5389 + C5395) * C91) *
              C90623 * C90541 * C90744 +
          ((C5380 - (C5379 + C5378) + C5381 - C5382 - C5394) * C89 +
           (C5387 - (C5386 + C5385) + C5388 - C5389 - C5395) * C90 +
           (C2290 * C4829 - (C740 * C4653 + C588 * C4828) + C2484 * C4654 -
            (C554 * C4659 + C90634 * C5194) * C4830 -
            (C554 * C4834 + C90634 * C5376) * C4655) *
               C91) *
              C90623 * C90541 * C90503)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C244 +
            (C554 * C245 + C90634 * C719) * C90567) *
               C90485 * C13576 +
           ((C554 * C832 + C90634 * C1396) * C244 +
            (C554 * C1011 + C90634 * C1602) * C90567) *
               C90485 * C13577 +
           ((C554 * C2570 + C90634 * C3105) * C244 +
            (C554 * C2745 + C90634 * C3295) * C90567) *
               C90485 * C13578) *
              C90541 * C92 -
          ((C3308 + C3300) * C90485 * C13578 +
           (C1619 + C1611) * C90485 * C13577 +
           (C742 + C726) * C90485 * C13576) *
              C90541 * C93 +
          (C746 * C90485 * C13576 + (C1608 + C1618) * C90485 * C13577 +
           (C3303 + C3309) * C90485 * C13578) *
              C90541 * C94 -
          (((C554 * C2748 + C90634 * C3298) * C90567 +
            (C554 * C2573 + C90634 * C3108) * C244) *
               C90485 * C13578 +
           (C1620 + C1612) * C90485 * C13577 + C747 * C90485 * C13576) *
              C90541 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C244 +
             (C554 * C245 + C90634 * C719) * C90567) *
                C90485 * C13576 +
            (C14776 + C14784) * C90485 * C13577 + C16237 * C13578) *
               C2565 -
           ((C16241 + C16232) * C90485 * C13578 +
            (C14785 + C14779) * C90485 * C13577 +
            (C14784 + C14776) * C90485 * C13576) *
               C2566 +
           (C16237 * C13576 + (C16232 + C16241) * C90485 * C13577 +
            ((C554 * C15525 + C90634 * C16038) * C244 +
             (C554 * C15718 + C90634 * C16226) * C90567) *
                C90485 * C13578) *
               C2567) *
              C90744 +
          (((C1611 + C1619) * C90485 * C13576 +
            (C3300 + C3308) * C90485 * C13577 +
            (C16233 + C16242) * C90485 * C13578) *
               C2566 -
           (C16240 * C13578 + (C1619 + C1611) * C90485 * C13577 +
            (C742 + C726) * C90485 * C13576) *
               C2565 -
           (((C554 * C15719 + C90634 * C16227) * C90567 +
             (C554 * C15526 + C90634 * C16039) * C244) *
                C90485 * C13578 +
            (C16242 + C16233) * C90485 * C13577 + C16240 * C13576) *
               C2567) *
              C90503)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C4828 +
            (C554 * C245 + C90634 * C719) * C4653 -
            (C554 * C1700 + C90634 * C2264) * C4829 -
            (C554 * C1879 + C90634 * C2460) * C4654 +
            (C554 * C4656 + C90634 * C5191) * C4830 +
            (C554 * C4831 + C90634 * C5373) * C4655) *
               C90485 * C13576 +
           (C14614 * C4828 + C14782 * C4653 - C17381 * C4829 - C17568 * C4654 +
            (C554 * C5471 + C90634 * C5951) * C4830 +
            (C554 * C5637 + C90634 * C6106) * C4655) *
               C90485 * C13577 +
           (C14616 * C4828 + C14783 * C4653 - C17379 * C4829 - C17570 * C4654 +
            (C554 * C17651 + C90634 * C18119) * C4830 +
            (C554 * C17811 + C90634 * C18273) * C4655) *
               C90485 * C13578) *
              C90541 * C90744 +
          ((C5380 - (C5379 + C5378) + C5381 - C5382 - C5394) * C90485 * C13576 +
           (C8771 * C4829 - (C1616 * C4653 + C1418 * C4828) + C8997 * C4654 -
            (C554 * C5470 + C90634 * C5950) * C4830 -
            (C554 * C5636 + C90634 * C6107) * C4655) *
               C90485 * C13577 +
           ((C554 * C3895 + C90634 * C4411) * C4829 -
            (C3306 * C4653 + C3122 * C4828) +
            (C554 * C4079 + C90634 * C4577) * C4654 -
            (C554 * C17652 + C90634 * C18120) * C4830 -
            (C554 * C17812 + C90634 * C18274) * C4655) *
               C90485 * C13578) *
              C90541 * C90503)) /
            (p * q * std::sqrt(p + q));
    d2eexx[67] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C3364 +
           (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 + C102 * C118 +
            C91 * C127) *
               C90498) *
              C90623 * C90634 * C90567 * C3360 -
          ((C102 * C837 + C91 * C844 + C101 * C838 + C90 * C845 + C100 * C839 +
            C89 * C846) *
               C90498 +
           (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 + C100 * C832 +
            C89 * C840) *
               C3364) *
              C90623 * C90634 * C90567 * C3361 +
          ((C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
            C102 * C2572 + C91 * C2576) *
               C3364 +
           (C100 * C2577 + C89 * C2582 + C101 * C2578 + C90 * C2583 +
            C102 * C2579 + C91 * C2584) *
               C90498) *
              C90623 * C90634 * C90567 * C3362 -
          ((C102 * C3368 + C91 * C3374 + C101 * C3369 + C90 * C3375 +
            C100 * C3370 + C89 * C3376) *
               C90498 +
           (C102 * C3365 + C91 * C3371 + C101 * C3366 + C90 * C3372 +
            C100 * C3367 + C89 * C3373) *
               C3364) *
              C90623 * C90634 * C90567 * C3363)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C826 +
           (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 + C102 * C118 +
            C91 * C127) *
               C821 -
           (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 + C100 * C108 +
            C89 * C114) *
               C827 -
           (C102 * C120 + C91 * C128 + C101 * C118 + C90 * C127 + C100 * C117 +
            C89 * C126) *
               C822 +
           (C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 + C102 * C111 +
            C91 * C121) *
               C828 +
           (C100 * C118 + C89 * C127 + C101 * C120 + C90 * C128 + C102 * C122 +
            C91 * C129) *
               C823) *
              C90623 * C90634 * C90567 * C90752 +
          ((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 + C102 * C831 +
            C91 * C836) *
               C827 -
           ((C102 * C837 + C91 * C844 + C101 * C838 + C90 * C845 + C100 * C839 +
             C89 * C846) *
                C821 +
            (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 + C100 * C832 +
             C89 * C840) *
                C826) +
           (C100 * C838 + C89 * C845 + C101 * C837 + C90 * C844 + C102 * C841 +
            C91 * C847) *
               C822 -
           (C102 * C833 + C91 * C842 + C101 * C831 + C90 * C836 + C100 * C830 +
            C89 * C835) *
               C828 -
           (C102 * C843 + C91 * C848 + C101 * C841 + C90 * C847 + C100 * C837 +
            C89 * C844) *
               C823) *
              C90623 * C90634 * C90567 * C90555)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
             C91 * C115) *
                C3364 +
            (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 + C102 * C118 +
             C91 * C127) *
                C90498) *
               C90623 * C90634 * C4653 -
           ((C102 * C1705 + C91 * C1712 + C101 * C1706 + C90 * C1713 +
             C100 * C1707 + C89 * C1714) *
                C90498 +
            (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
             C100 * C1700 + C89 * C1708) *
                C3364) *
               C90623 * C90634 * C4654 +
           ((C100 * C4656 + C89 * C4660 + C101 * C4657 + C90 * C4661 +
             C102 * C4658 + C91 * C4662) *
                C3364 +
            (C100 * C4663 + C89 * C4668 + C101 * C4664 + C90 * C4669 +
             C102 * C4665 + C91 * C4670) *
                C90498) *
               C90623 * C90634 * C4655) *
              C90752 +
          (((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
             C102 * C3893 + C91 * C3899) *
                C3364 +
            (C100 * C3900 + C89 * C3909 + C101 * C3901 + C90 * C3910 +
             C102 * C3902 + C91 * C3911) *
                C90498) *
               C90623 * C90634 * C4654 -
           ((C102 * C837 + C91 * C844 + C101 * C838 + C90 * C845 + C100 * C839 +
             C89 * C846) *
                C90498 +
            (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 + C100 * C832 +
             C89 * C840) *
                C3364) *
               C90623 * C90634 * C4653 -
           ((C102 * C5472 + C91 * C5478 + C101 * C5473 + C90 * C5479 +
             C100 * C5474 + C89 * C5480) *
                C90498 +
            (C102 * C5469 + C91 * C5475 + C101 * C5470 + C90 * C5476 +
             C100 * C5471 + C89 * C5477) *
                C3364) *
               C90623 * C90634 * C4655) *
              C90555)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C826 +
            (C13579 * C116 + C90485 * C125) * C821 -
            (C13579 * C108 + C90485 * C114) * C827 -
            (C13579 * C117 + C90485 * C126) * C822 +
            (C13579 * C109 + C90485 * C115) * C828 +
            (C13579 * C118 + C90485 * C127) * C823) *
               C13576 +
           (C14094 + C14095 - C14096 - C14097 + C14098 + C14099) * C13577 +
           (C14100 + C14101 - C14102 - C14103 + C14104 + C14105) * C13578) *
              C90634 * C90567 * C90752 +
          ((C14096 - (C14095 + C14094) + C14097 - C14098 - C14099) * C13576 +
           (C14102 - (C14101 + C14100) + C14103 - C14104 - C14105) * C13577 +
           ((C13579 * C3366 + C90485 * C3372) * C827 -
            ((C13579 * C3370 + C90485 * C3376) * C821 +
             (C13579 * C3367 + C90485 * C3373) * C826) +
            (C13579 * C3369 + C90485 * C3375) * C822 -
            (C13579 * C3365 + C90485 * C3371) * C828 -
            (C13579 * C3368 + C90485 * C3374) * C823) *
               C13578) *
              C90634 * C90567 * C90555)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C3364 +
            (C13579 * C116 + C90485 * C125) * C90498) *
               C13576 +
           (C16297 + C16298) * C13577 + C16307 * C13578) *
              C90634 * C90567 * C3360 -
          (C16308 * C13578 + (C16300 + C16299) * C13577 +
           (C16298 + C16297) * C13576) *
              C90634 * C90567 * C3361 +
          (C16307 * C13576 + (C16302 + C16301) * C13577 +
           (C16311 + C16312) * C13578) *
              C90634 * C90567 * C3362 -
          (((C13579 * C16293 + C90485 * C16295) * C90498 +
            (C13579 * C16292 + C90485 * C16294) * C3364) *
               C13578 +
           (C16312 + C16311) * C13577 + C16308 * C13576) *
              C90634 * C90567 * C3363)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C3364 +
             (C13579 * C116 + C90485 * C125) * C90498) *
                C13576 +
            (C16297 + C16298) * C13577 + C16307 * C13578) *
               C90634 * C4653 -
           (C16868 * C13578 + (C16864 + C16865) * C13577 +
            ((C13579 * C1707 + C90485 * C1714) * C90498 +
             (C13579 * C1700 + C90485 * C1708) * C3364) *
                C13576) *
               C90634 * C4654 +
           (((C13579 * C4656 + C90485 * C4660) * C3364 +
             (C13579 * C4663 + C90485 * C4668) * C90498) *
                C13576 +
            (C18366 + C18367) * C13577 + (C18368 + C18369) * C13578) *
               C90634 * C4655) *
              C90752 +
          (((C16865 + C16864) * C13576 + (C16863 + C16862) * C13577 +
            (C16866 + C16867) * C13578) *
               C90634 * C4654 -
           (C16308 * C13578 + (C16300 + C16299) * C13577 +
            (C16298 + C16297) * C13576) *
               C90634 * C4653 -
           (((C13579 * C18350 + C90485 * C18352) * C90498 +
             (C13579 * C18349 + C90485 * C18351) * C3364) *
                C13578 +
            (C18369 + C18368) * C13577 + (C18367 + C18366) * C13576) *
               C90634 * C4655) *
              C90555)) /
            (p * q * std::sqrt(p + q));
    d2eexy[67] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
           C91 * C115) *
              C3427 +
          (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 + C102 * C184 +
           C91 * C190) *
              C3360 -
          (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 + C100 * C832 +
           C89 * C840) *
              C3428 -
          (C102 * C925 + C91 * C930 + C101 * C926 + C90 * C931 + C100 * C927 +
           C89 * C932) *
              C3361 +
          (C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
           C102 * C2572 + C91 * C2576) *
              C3429 +
          (C100 * C2663 + C89 * C2667 + C101 * C2664 + C90 * C2668 +
           C102 * C2665 + C91 * C2669) *
              C3362 -
          (C102 * C3365 + C91 * C3371 + C101 * C3366 + C90 * C3372 +
           C100 * C3367 + C89 * C3373) *
              C3430 -
          (C102 * C3431 + C91 * C3434 + C101 * C3432 + C90 * C3435 +
           C100 * C3433 + C89 * C3436) *
              C3363) *
         C90623 * C90634 * C90498 * C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C923 +
           (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 + C102 * C184 +
            C91 * C190) *
               C90752 -
           (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 + C100 * C832 +
            C89 * C840) *
               C924 -
           (C102 * C925 + C91 * C930 + C101 * C926 + C90 * C931 + C100 * C927 +
            C89 * C932) *
               C90555) *
              C90623 * C90634 * C821 +
          ((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 + C102 * C831 +
            C91 * C836) *
               C924 -
           ((C102 * C185 + C91 * C191 + C101 * C184 + C90 * C190 + C100 * C183 +
             C89 * C189) *
                C90752 +
            (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 + C100 * C108 +
             C89 * C114) *
                C923) +
           (C100 * C926 + C89 * C931 + C101 * C925 + C90 * C930 + C102 * C928 +
            C91 * C933) *
               C90555) *
              C90623 * C90634 * C822 +
          ((C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 + C102 * C111 +
            C91 * C121) *
               C923 +
           (C100 * C184 + C89 * C190 + C101 * C185 + C90 * C191 + C102 * C186 +
            C91 * C192) *
               C90752 -
           (C102 * C833 + C91 * C842 + C101 * C831 + C90 * C836 + C100 * C830 +
            C89 * C835) *
               C924 -
           (C102 * C929 + C91 * C934 + C101 * C928 + C90 * C933 + C100 * C925 +
            C89 * C930) *
               C90555) *
              C90623 * C90634 * C823) *
         C90567) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C923 +
           (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 + C102 * C184 +
            C91 * C190) *
               C90752 -
           (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 + C100 * C832 +
            C89 * C840) *
               C924 -
           (C102 * C925 + C91 * C930 + C101 * C926 + C90 * C931 + C100 * C927 +
            C89 * C932) *
               C90555) *
              C90623 * C90634 * C90498 * C4653 +
          ((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
            C102 * C3893 + C91 * C3899) *
               C924 -
           ((C102 * C1792 + C91 * C1797 + C101 * C1791 + C90 * C1796 +
             C100 * C1794 + C89 * C1799) *
                C90752 +
            (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
             C100 * C1700 + C89 * C1708) *
                C923) +
           (C100 * C3989 + C89 * C3995 + C101 * C3990 + C90 * C3996 +
            C102 * C3991 + C91 * C3997) *
               C90555) *
              C90623 * C90634 * C90498 * C4654 +
          ((C100 * C4656 + C89 * C4660 + C101 * C4657 + C90 * C4661 +
            C102 * C4658 + C91 * C4662) *
               C923 +
           (C100 * C4746 + C89 * C4750 + C101 * C4747 + C90 * C4751 +
            C102 * C4748 + C91 * C4752) *
               C90752 -
           (C102 * C5469 + C91 * C5475 + C101 * C5470 + C90 * C5476 +
            C100 * C5471 + C89 * C5477) *
               C924 -
           (C102 * C5555 + C91 * C5558 + C101 * C5556 + C90 * C5559 +
            C100 * C5557 + C89 * C5560) *
               C90555) *
              C90623 * C90634 * C90498 * C4655)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C923 +
            (C13579 * C182 + C90485 * C188) * C90752 - C14082 * C924 -
            C14192 * C90555) *
               C13576 +
           (C14082 * C923 + C14192 * C90752 - C14088 * C924 - C14193 * C90555) *
               C13577 +
           (C14088 * C923 + C14193 * C90752 -
            (C13579 * C3367 + C90485 * C3373) * C924 -
            (C13579 * C3433 + C90485 * C3436) * C90555) *
               C13578) *
              C90634 * C821 +
          ((C14084 * C924 -
            ((C13579 * C183 + C90485 * C189) * C90752 +
             (C13579 * C108 + C90485 * C114) * C923) +
            C14194 * C90555) *
               C13576 +
           (C14090 * C924 - (C14194 * C90752 + C14084 * C923) +
            C14195 * C90555) *
               C13577 +
           ((C13579 * C3366 + C90485 * C3372) * C924 -
            (C14195 * C90752 + C14090 * C923) +
            (C13579 * C3432 + C90485 * C3435) * C90555) *
               C13578) *
              C90634 * C822 +
          (((C13579 * C109 + C90485 * C115) * C923 +
            (C13579 * C184 + C90485 * C190) * C90752 - C14086 * C924 -
            C14196 * C90555) *
               C13576 +
           (C14086 * C923 + C14196 * C90752 - C14092 * C924 - C14197 * C90555) *
               C13577 +
           (C14092 * C923 + C14197 * C90752 -
            (C13579 * C3365 + C90485 * C3371) * C924 -
            (C13579 * C3431 + C90485 * C3434) * C90555) *
               C13578) *
              C90634 * C823) *
         C90567) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13579 * C107 + C90485 * C113) * C3427 +
           (C13579 * C182 + C90485 * C188) * C3360 - C14082 * C3428 -
           C14192 * C3361 + C14088 * C3429 + C14193 * C3362 - C15553 * C3430 -
           C15643 * C3363) *
              C13576 +
          (C14082 * C3427 + C14192 * C3360 - C14088 * C3428 - C14193 * C3361 +
           C15553 * C3429 + C15643 * C3362 - C16309 * C3430 - C16367 * C3363) *
              C13577 +
          (C14088 * C3427 + C14193 * C3360 - C15553 * C3428 - C15643 * C3361 +
           C16309 * C3429 + C16367 * C3362 -
           (C13579 * C16292 + C90485 * C16294) * C3430 -
           (C13579 * C16362 + C90485 * C16363) * C3363) *
              C13578) *
         C90634 * C90498 * C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C923 +
            (C13579 * C182 + C90485 * C188) * C90752 - C14082 * C924 -
            C14192 * C90555) *
               C13576 +
           (C14082 * C923 + C14192 * C90752 - C14088 * C924 - C14193 * C90555) *
               C13577 +
           (C14088 * C923 + C14193 * C90752 - C15553 * C924 - C15643 * C90555) *
               C13578) *
              C90634 * C90498 * C4653 +
          ((C16859 * C924 -
            ((C13579 * C1794 + C90485 * C1799) * C90752 +
             (C13579 * C1700 + C90485 * C1708) * C923) +
            C16953 * C90555) *
               C13576 +
           (C16857 * C924 - (C16953 * C90752 + C16859 * C923) +
            C16954 * C90555) *
               C13577 +
           (C16860 * C924 - (C16954 * C90752 + C16857 * C923) +
            C16955 * C90555) *
               C13578) *
              C90634 * C90498 * C4654 +
          (((C13579 * C4656 + C90485 * C4660) * C923 +
            (C13579 * C4746 + C90485 * C4750) * C90752 - C18362 * C924 -
            C18450 * C90555) *
               C13576 +
           (C18362 * C923 + C18450 * C90752 - C18364 * C924 - C18451 * C90555) *
               C13577 +
           (C18364 * C923 + C18451 * C90752 -
            (C13579 * C18349 + C90485 * C18351) * C924 -
            (C13579 * C18443 + C90485 * C18444) * C90555) *
               C13578) *
              C90634 * C90498 * C4655)) /
            (p * q * std::sqrt(p + q));
    d2eexz[67] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C244 +
           (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 + C102 * C247 +
            C91 * C253) *
               C90567) *
              C90623 * C90634 * C3360 -
          ((C102 * C1009 + C91 * C1014 + C101 * C1010 + C90 * C1015 +
            C100 * C1011 + C89 * C1016) *
               C90567 +
           (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 + C100 * C832 +
            C89 * C840) *
               C244) *
              C90623 * C90634 * C3361 +
          ((C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
            C102 * C2572 + C91 * C2576) *
               C244 +
           (C100 * C2745 + C89 * C2749 + C101 * C2746 + C90 * C2750 +
            C102 * C2747 + C91 * C2751) *
               C90567) *
              C90623 * C90634 * C3362 -
          ((C102 * C3487 + C91 * C3490 + C101 * C3488 + C90 * C3491 +
            C100 * C3489 + C89 * C3492) *
               C90567 +
           (C102 * C3365 + C91 * C3371 + C101 * C3366 + C90 * C3372 +
            C100 * C3367 + C89 * C3373) *
               C244) *
              C90623 * C90634 * C3363) *
         C90498) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
             C91 * C115) *
                C244 +
            (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 + C102 * C247 +
             C91 * C253) *
                C90567) *
               C90623 * C90634 * C90752 -
           ((C102 * C1009 + C91 * C1014 + C101 * C1010 + C90 * C1015 +
             C100 * C1011 + C89 * C1016) *
                C90567 +
            (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 + C100 * C832 +
             C89 * C840) *
                C244) *
               C90623 * C90634 * C90555) *
              C821 +
          (((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 + C102 * C831 +
             C91 * C836) *
                C244 +
            (C100 * C1010 + C89 * C1015 + C101 * C1009 + C90 * C1014 +
             C102 * C1012 + C91 * C1017) *
                C90567) *
               C90623 * C90634 * C90555 -
           ((C102 * C248 + C91 * C254 + C101 * C247 + C90 * C253 + C100 * C246 +
             C89 * C252) *
                C90567 +
            (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 + C100 * C108 +
             C89 * C114) *
                C244) *
               C90623 * C90634 * C90752) *
              C822 +
          (((C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 + C102 * C111 +
             C91 * C121) *
                C244 +
            (C100 * C247 + C89 * C253 + C101 * C248 + C90 * C254 + C102 * C249 +
             C91 * C255) *
                C90567) *
               C90623 * C90634 * C90752 -
           ((C102 * C1013 + C91 * C1018 + C101 * C1012 + C90 * C1017 +
             C100 * C1009 + C89 * C1014) *
                C90567 +
            (C102 * C833 + C91 * C842 + C101 * C831 + C90 * C836 + C100 * C830 +
             C89 * C835) *
                C244) *
               C90623 * C90634 * C90555) *
              C823)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C4828 +
           (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 + C102 * C247 +
            C91 * C253) *
               C4653 -
           (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
            C100 * C1700 + C89 * C1708) *
               C4829 -
           (C102 * C1877 + C91 * C1882 + C101 * C1878 + C90 * C1883 +
            C100 * C1879 + C89 * C1884) *
               C4654 +
           (C100 * C4656 + C89 * C4660 + C101 * C4657 + C90 * C4661 +
            C102 * C4658 + C91 * C4662) *
               C4830 +
           (C100 * C4831 + C89 * C4835 + C101 * C4832 + C90 * C4836 +
            C102 * C4833 + C91 * C4837) *
               C4655) *
              C90623 * C90634 * C90752 +
          ((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
            C102 * C3893 + C91 * C3899) *
               C4829 -
           ((C102 * C1009 + C91 * C1014 + C101 * C1010 + C90 * C1015 +
             C100 * C1011 + C89 * C1016) *
                C4653 +
            (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 + C100 * C832 +
             C89 * C840) *
                C4828) +
           (C100 * C4075 + C89 * C4081 + C101 * C4076 + C90 * C4082 +
            C102 * C4077 + C91 * C4083) *
               C4654 -
           (C102 * C5469 + C91 * C5475 + C101 * C5470 + C90 * C5476 +
            C100 * C5471 + C89 * C5477) *
               C4830 -
           (C102 * C5635 + C91 * C5638 + C101 * C5636 + C90 * C5639 +
            C100 * C5637 + C89 * C5640) *
               C4655) *
              C90623 * C90634 * C90555) *
         C90498) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C244 +
             (C13579 * C245 + C90485 * C251) * C90567) *
                C13576 +
            (C14272 + C14296) * C13577 + (C14275 + C14297) * C13578) *
               C90634 * C90752 -
           (((C13579 * C3489 + C90485 * C3492) * C90567 +
             (C13579 * C3367 + C90485 * C3373) * C244) *
                C13578 +
            (C14297 + C14275) * C13577 + (C14296 + C14272) * C13576) *
               C90634 * C90555) *
              C821 +
          (((C14278 + C14298) * C13576 + (C14281 + C14299) * C13577 +
            ((C13579 * C3366 + C90485 * C3372) * C244 +
             (C13579 * C3488 + C90485 * C3491) * C90567) *
                C13578) *
               C90634 * C90555 -
           ((C14299 + C14281) * C13578 + (C14298 + C14278) * C13577 +
            ((C13579 * C246 + C90485 * C252) * C90567 +
             (C13579 * C108 + C90485 * C114) * C244) *
                C13576) *
               C90634 * C90752) *
              C822 +
          ((((C13579 * C109 + C90485 * C115) * C244 +
             (C13579 * C247 + C90485 * C253) * C90567) *
                C13576 +
            (C14284 + C14300) * C13577 + (C14287 + C14301) * C13578) *
               C90634 * C90752 -
           (((C13579 * C3487 + C90485 * C3490) * C90567 +
             (C13579 * C3365 + C90485 * C3371) * C244) *
                C13578 +
            (C14301 + C14287) * C13577 + (C14300 + C14284) * C13576) *
               C90634 * C90555) *
              C823)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C244 +
            (C13579 * C245 + C90485 * C251) * C90567) *
               C13576 +
           (C14272 + C14296) * C13577 + C15723 * C13578) *
              C90634 * C3360 -
          (C16420 * C13578 + (C14297 + C14275) * C13577 +
           (C14296 + C14272) * C13576) *
              C90634 * C3361 +
          (C15723 * C13576 + (C15726 + C15733) * C13577 +
           (C16421 + C16425) * C13578) *
              C90634 * C3362 -
          (((C13579 * C16417 + C90485 * C16418) * C90567 +
            (C13579 * C16292 + C90485 * C16294) * C244) *
               C13578 +
           (C16425 + C16421) * C13577 + C16420 * C13576) *
              C90634 * C3363) *
         C90498) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C4828 +
            (C13579 * C245 + C90485 * C251) * C4653 -
            (C13579 * C1700 + C90485 * C1708) * C4829 -
            (C13579 * C1879 + C90485 * C1884) * C4654 +
            (C13579 * C4656 + C90485 * C4660) * C4830 +
            (C13579 * C4831 + C90485 * C4835) * C4655) *
               C13576 +
           (C18528 + C18529 - C18530 - C18531 + C18532 + C18544) * C13577 +
           (C18535 + C18536 - C18537 - C18538 + C18539 + C18545) * C13578) *
              C90634 * C90752 +
          ((C18530 - (C18529 + C18528) + C18531 - C18532 - C18544) * C13576 +
           (C18537 - (C18536 + C18535) + C18538 - C18539 - C18545) * C13577 +
           (C16860 * C4829 - (C15731 * C4653 + C15553 * C4828) +
            C17052 * C4654 - (C13579 * C18349 + C90485 * C18351) * C4830 -
            (C13579 * C18525 + C90485 * C18526) * C4655) *
               C13578) *
              C90634 * C90555) *
         C90498) /
            (p * q * std::sqrt(p + q));
    d2eeyx[67] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C307 * C107 + C90623 * C308) * C3364 +
                      (C307 * C116 + C90623 * C314) * C90498) *
                         C90634 * C89 +
                     (C337 * C3364 + C338 * C90498) * C90634 * C90 +
                     (C339 * C3364 + C340 * C90498) * C90634 * C91) *
                        C90567 * C3360 -
                    ((C1119 * C90498 + C1118 * C3364) * C90634 * C91 +
                     (C1117 * C90498 + C1116 * C3364) * C90634 * C90 +
                     ((C307 * C839 + C90623 * C1098) * C90498 +
                      (C307 * C832 + C90623 * C1094) * C3364) *
                         C90634 * C89) *
                        C90567 * C3361 +
                    (((C307 * C2570 + C90623 * C2827) * C3364 +
                      (C307 * C2577 + C90623 * C2831) * C90498) *
                         C90634 * C89 +
                     (C2844 * C3364 + C2845 * C90498) * C90634 * C90 +
                     (C2846 * C3364 + C2847 * C90498) * C90634 * C91) *
                        C90567 * C3362 -
                    (((C307 * C3368 + C90623 * C3546) * C90498 +
                      (C307 * C3365 + C90623 * C3543) * C3364) *
                         C90634 * C91 +
                     ((C307 * C3369 + C90623 * C3547) * C90498 +
                      (C307 * C3366 + C90623 * C3544) * C3364) *
                         C90634 * C90 +
                     ((C307 * C3370 + C90623 * C3548) * C90498 +
                      (C307 * C3367 + C90623 * C3545) * C3364) *
                         C90634 * C89) *
                        C90567 * C3363)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C307 * C107 + C90623 * C308) * C826 +
                      (C307 * C116 + C90623 * C314) * C821 - C337 * C827 -
                      C338 * C822 + C339 * C828 + C340 * C823) *
                         C90634 * C89 +
                     (C337 * C826 + C338 * C821 - C339 * C827 - C340 * C822 +
                      C341 * C828 + C342 * C823) *
                         C90634 * C90 +
                     (C339 * C826 + C340 * C821 - C341 * C827 - C342 * C822 +
                      C343 * C828 + C344 * C823) *
                         C90634 * C91) *
                        C90567 * C90752 +
                    ((C1116 * C827 -
                      ((C307 * C839 + C90623 * C1098) * C821 +
                       (C307 * C832 + C90623 * C1094) * C826) +
                      C1117 * C822 - C1118 * C828 - C1119 * C823) *
                         C90634 * C89 +
                     (C1118 * C827 - (C1117 * C821 + C1116 * C826) +
                      C1119 * C822 - C1120 * C828 - C1121 * C823) *
                         C90634 * C90 +
                     (C1120 * C827 - (C1119 * C821 + C1118 * C826) +
                      C1121 * C822 - (C307 * C833 + C90623 * C1097) * C828 -
                      (C307 * C843 + C90623 * C1102) * C823) *
                         C90634 * C91) *
                        C90567 * C90555)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C307 * C107 + C90623 * C308) * C3364 +
                       (C307 * C116 + C90623 * C314) * C90498) *
                          C90634 * C89 +
                      (C337 * C3364 + C338 * C90498) * C90634 * C90 +
                      (C339 * C3364 + C340 * C90498) * C90634 * C91) *
                         C4653 -
                     ((C1987 * C90498 + C1986 * C3364) * C90634 * C91 +
                      (C1985 * C90498 + C1984 * C3364) * C90634 * C90 +
                      ((C307 * C1707 + C90623 * C1966) * C90498 +
                       (C307 * C1700 + C90623 * C1962) * C3364) *
                          C90634 * C89) *
                         C4654 +
                     (((C307 * C4656 + C90623 * C4913) * C3364 +
                       (C307 * C4663 + C90623 * C4917) * C90498) *
                          C90634 * C89 +
                      (C4930 * C3364 + C4931 * C90498) * C90634 * C90 +
                      (C4932 * C3364 + C4933 * C90498) * C90634 * C91) *
                         C4655) *
                        C90752 +
                    ((((C307 * C3891 + C90623 * C4161) * C3364 +
                       (C307 * C3900 + C90623 * C4167) * C90498) *
                          C90634 * C89 +
                      ((C307 * C3892 + C90623 * C4162) * C3364 +
                       (C307 * C3901 + C90623 * C4168) * C90498) *
                          C90634 * C90 +
                      ((C307 * C3893 + C90623 * C4163) * C3364 +
                       (C307 * C3902 + C90623 * C4169) * C90498) *
                          C90634 * C91) *
                         C4654 -
                     ((C1119 * C90498 + C1118 * C3364) * C90634 * C91 +
                      (C1117 * C90498 + C1116 * C3364) * C90634 * C90 +
                      ((C307 * C839 + C90623 * C1098) * C90498 +
                       (C307 * C832 + C90623 * C1094) * C3364) *
                          C90634 * C89) *
                         C4653 -
                     (((C307 * C5472 + C90623 * C5718) * C90498 +
                       (C307 * C5469 + C90623 * C5715) * C3364) *
                          C90634 * C91 +
                      ((C307 * C5473 + C90623 * C5719) * C90498 +
                       (C307 * C5470 + C90623 * C5716) * C3364) *
                          C90634 * C90 +
                      ((C307 * C5474 + C90623 * C5720) * C90498 +
                       (C307 * C5471 + C90623 * C5717) * C3364) *
                          C90634 * C89) *
                         C4655) *
                        C90555)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   (((C13730 * C107 + C13576 * C308 + C13731 * C832 +
                      C13577 * C1094 + C13732 * C2570 + C13578 * C2827) *
                         C826 +
                     (C13730 * C116 + C13576 * C314 + C13731 * C839 +
                      C13577 * C1098 + C13732 * C2577 + C13578 * C2831) *
                         C821 -
                     (C13732 * C2571 + C13578 * C2828 + C13731 * C829 +
                      C13577 * C1093 + C13730 * C108 + C13576 * C309) *
                         C827 -
                     (C13732 * C2578 + C13578 * C2832 + C13731 * C838 +
                      C13577 * C1099 + C13730 * C117 + C13576 * C315) *
                         C822 +
                     (C13730 * C109 + C13576 * C310 + C13731 * C830 +
                      C13577 * C1095 + C13732 * C2572 + C13578 * C2829) *
                         C828 +
                     (C13730 * C118 + C13576 * C316 + C13731 * C837 +
                      C13577 * C1100 + C13732 * C2579 + C13578 * C2833) *
                         C823) *
                        C90634 * C90485 * C90567 * C90752 +
                    ((C13730 * C829 + C13576 * C1093 + C13731 * C2571 +
                      C13577 * C2828 + C13732 * C3366 + C13578 * C3544) *
                         C827 -
                     ((C13732 * C3370 + C13578 * C3548 + C13731 * C2577 +
                       C13577 * C2831 + C13730 * C839 + C13576 * C1098) *
                          C821 +
                      (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 +
                       C13577 * C2827 + C13730 * C832 + C13576 * C1094) *
                          C826) +
                     (C13730 * C838 + C13576 * C1099 + C13731 * C2578 +
                      C13577 * C2832 + C13732 * C3369 + C13578 * C3547) *
                         C822 -
                     (C13732 * C3365 + C13578 * C3543 + C13731 * C2572 +
                      C13577 * C2829 + C13730 * C830 + C13576 * C1095) *
                         C828 -
                     (C13732 * C3368 + C13578 * C3546 + C13731 * C2579 +
                      C13577 * C2833 + C13730 * C837 + C13576 * C1100) *
                         C823) *
                        C90634 * C90485 * C90567 * C90555)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   (((C13730 * C107 + C13576 * C308 + C13731 * C832 +
                      C13577 * C1094 + C13732 * C2570 + C13578 * C2827) *
                         C3364 +
                     (C13730 * C116 + C13576 * C314 + C13731 * C839 +
                      C13577 * C1098 + C13732 * C2577 + C13578 * C2831) *
                         C90498) *
                        C90634 * C90485 * C90567 * C3360 -
                    ((C13732 * C3370 + C13578 * C3548 + C13731 * C2577 +
                      C13577 * C2831 + C13730 * C839 + C13576 * C1098) *
                         C90498 +
                     (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 +
                      C13577 * C2827 + C13730 * C832 + C13576 * C1094) *
                         C3364) *
                        C90634 * C90485 * C90567 * C3361 +
                    ((C13730 * C2570 + C13576 * C2827 + C13731 * C3367 +
                      C13577 * C3545 + C13732 * C15525 + C13578 * C15808) *
                         C3364 +
                     (C13730 * C2577 + C13576 * C2831 + C13731 * C3370 +
                      C13577 * C3548 + C13732 * C15528 + C13578 * C15810) *
                         C90498) *
                        C90634 * C90485 * C90567 * C3362 -
                    ((C13732 * C16293 + C13578 * C16476 + C13731 * C15528 +
                      C13577 * C15810 + C13730 * C3370 + C13576 * C3548) *
                         C90498 +
                     (C13732 * C16292 + C13578 * C16475 + C13731 * C15525 +
                      C13577 * C15808 + C13730 * C3367 + C13576 * C3545) *
                         C3364) *
                        C90634 * C90485 * C90567 * C3363)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C13730 * C107 + C13576 * C308 + C13731 * C832 +
                       C13577 * C1094 + C13732 * C2570 + C13578 * C2827) *
                          C3364 +
                      (C13730 * C116 + C13576 * C314 + C13731 * C839 +
                       C13577 * C1098 + C13732 * C2577 + C13578 * C2831) *
                          C90498) *
                         C90634 * C90485 * C4653 -
                     ((C13732 * C3905 + C13578 * C4172 + C13731 * C3900 +
                       C13577 * C4167 + C13730 * C1707 + C13576 * C1966) *
                          C90498 +
                      (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 +
                       C13577 * C4161 + C13730 * C1700 + C13576 * C1962) *
                          C3364) *
                         C90634 * C90485 * C4654 +
                     ((C13730 * C4656 + C13576 * C4913 + C13731 * C5471 +
                       C13577 * C5717 + C13732 * C17651 + C13578 * C17889) *
                          C3364 +
                      (C13730 * C4663 + C13576 * C4917 + C13731 * C5474 +
                       C13577 * C5720 + C13732 * C17654 + C13578 * C17891) *
                          C90498) *
                         C90634 * C90485 * C4655) *
                        C90752 +
                    (((C13730 * C3891 + C13576 * C4161 + C13731 * C3896 +
                       C13577 * C4166 + C13732 * C16835 + C13578 * C17131) *
                          C3364 +
                      (C13730 * C3900 + C13576 * C4167 + C13731 * C3905 +
                       C13577 * C4172 + C13732 * C16838 + C13578 * C17133) *
                          C90498) *
                         C90634 * C90485 * C4654 -
                     ((C13732 * C3370 + C13578 * C3548 + C13731 * C2577 +
                       C13577 * C2831 + C13730 * C839 + C13576 * C1098) *
                          C90498 +
                      (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 +
                       C13577 * C2827 + C13730 * C832 + C13576 * C1094) *
                          C3364) *
                         C90634 * C90485 * C4653 -
                     ((C13732 * C18350 + C13578 * C18620 + C13731 * C17654 +
                       C13577 * C17891 + C13730 * C5474 + C13576 * C5720) *
                          C90498 +
                      (C13732 * C18349 + C13578 * C18619 + C13731 * C17651 +
                       C13577 * C17889 + C13730 * C5471 + C13576 * C5717) *
                          C3364) *
                         C90634 * C90485 * C4655) *
                        C90555)) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[67] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C307 * C107 + C90623 * C308) * C3427 +
           (C307 * C182 + C90623 * C394) * C3360 -
           (C307 * C832 + C90623 * C1094) * C3428 -
           (C307 * C927 + C90623 * C1195) * C3361 +
           (C307 * C2570 + C90623 * C2827) * C3429 +
           (C307 * C2663 + C90623 * C2921) * C3362 -
           (C307 * C3367 + C90623 * C3545) * C3430 -
           (C307 * C3433 + C90623 * C3599) * C3363) *
              C90634 * C89 +
          (C337 * C3427 + C413 * C3360 - C1116 * C3428 - C1216 * C3361 +
           C2844 * C3429 + C2940 * C3362 -
           (C307 * C3366 + C90623 * C3544) * C3430 -
           (C307 * C3432 + C90623 * C3600) * C3363) *
              C90634 * C90 +
          (C339 * C3427 + C414 * C3360 - C1118 * C3428 - C1218 * C3361 +
           C2846 * C3429 + C2941 * C3362 -
           (C307 * C3365 + C90623 * C3543) * C3430 -
           (C307 * C3431 + C90623 * C3601) * C3363) *
              C90634 * C91) *
         C90498 * C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C923 +
            (C307 * C182 + C90623 * C394) * C90752 -
            (C307 * C832 + C90623 * C1094) * C924 -
            (C307 * C927 + C90623 * C1195) * C90555) *
               C90634 * C89 +
           (C1201 + C1202 - C1203 - C1220) * C90634 * C90 + C1225 * C91) *
              C821 +
          ((C1203 - (C1202 + C1201) + C1220) * C90634 * C89 +
           (C1208 - (C1207 + C1206) + C1222) * C90634 * C90 +
           (C1211 - (C1212 + C1213) + C1223) * C90634 * C91) *
              C822 +
          (C1225 * C89 + (C1213 + C1212 - C1211 - C1223) * C90634 * C90 +
           (C343 * C923 + C416 * C90752 -
            (C307 * C833 + C90623 * C1097) * C924 -
            (C307 * C929 + C90623 * C1199) * C90555) *
               C90634 * C91) *
              C823) *
         C90567) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C923 +
            (C307 * C182 + C90623 * C394) * C90752 -
            (C307 * C832 + C90623 * C1094) * C924 -
            (C307 * C927 + C90623 * C1195) * C90555) *
               C90634 * C89 +
           (C1201 + C1202 - C1203 - C1220) * C90634 * C90 + C1225 * C91) *
              C90498 * C4653 +
          (((C307 * C3891 + C90623 * C4161) * C924 -
            ((C307 * C1794 + C90623 * C2066) * C90752 +
             (C307 * C1700 + C90623 * C1962) * C923) +
            (C307 * C3989 + C90623 * C4247) * C90555) *
               C90634 * C89 +
           ((C307 * C3892 + C90623 * C4162) * C924 -
            (C2078 * C90752 + C1984 * C923) +
            (C307 * C3990 + C90623 * C4249) * C90555) *
               C90634 * C90 +
           ((C307 * C3893 + C90623 * C4163) * C924 -
            (C2079 * C90752 + C1986 * C923) +
            (C307 * C3991 + C90623 * C4251) * C90555) *
               C90634 * C91) *
              C90498 * C4654 +
          (((C307 * C4656 + C90623 * C4913) * C923 +
            (C307 * C4746 + C90623 * C5007) * C90752 -
            (C307 * C5471 + C90623 * C5717) * C924 -
            (C307 * C5557 + C90623 * C5795) * C90555) *
               C90634 * C89 +
           (C4930 * C923 + C5018 * C90752 -
            (C307 * C5470 + C90623 * C5716) * C924 -
            (C307 * C5556 + C90623 * C5796) * C90555) *
               C90634 * C90 +
           (C4932 * C923 + C5019 * C90752 -
            (C307 * C5469 + C90623 * C5715) * C924 -
            (C307 * C5555 + C90623 * C5797) * C90555) *
               C90634 * C91) *
              C90498 * C4655)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C923 +
           (C13730 * C182 + C13576 * C394 + C13731 * C927 + C13577 * C1195 +
            C13732 * C2663 + C13578 * C2921) *
               C90752 -
           (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
            C13730 * C832 + C13576 * C1094) *
               C924 -
           (C13732 * C3433 + C13578 * C3599 + C13731 * C2663 + C13577 * C2921 +
            C13730 * C927 + C13576 * C1195) *
               C90555) *
              C90634 * C90485 * C821 +
          ((C13730 * C829 + C13576 * C1093 + C13731 * C2571 + C13577 * C2828 +
            C13732 * C3366 + C13578 * C3544) *
               C924 -
           ((C13732 * C2664 + C13578 * C2922 + C13731 * C926 + C13577 * C1196 +
             C13730 * C183 + C13576 * C395) *
                C90752 +
            (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
             C13730 * C108 + C13576 * C309) *
                C923) +
           (C13730 * C926 + C13576 * C1196 + C13731 * C2664 + C13577 * C2922 +
            C13732 * C3432 + C13578 * C3600) *
               C90555) *
              C90634 * C90485 * C822 +
          ((C13730 * C109 + C13576 * C310 + C13731 * C830 + C13577 * C1095 +
            C13732 * C2572 + C13578 * C2829) *
               C923 +
           (C13730 * C184 + C13576 * C396 + C13731 * C925 + C13577 * C1197 +
            C13732 * C2665 + C13578 * C2923) *
               C90752 -
           (C13732 * C3365 + C13578 * C3543 + C13731 * C2572 + C13577 * C2829 +
            C13730 * C830 + C13576 * C1095) *
               C924 -
           (C13732 * C3431 + C13578 * C3601 + C13731 * C2665 + C13577 * C2923 +
            C13730 * C925 + C13576 * C1197) *
               C90555) *
              C90634 * C90485 * C823) *
         C90567) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
           C13732 * C2570 + C13578 * C2827) *
              C3427 +
          (C13730 * C182 + C13576 * C394 + C13731 * C927 + C13577 * C1195 +
           C13732 * C2663 + C13578 * C2921) *
              C3360 -
          (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
           C13730 * C832 + C13576 * C1094) *
              C3428 -
          (C13732 * C3433 + C13578 * C3599 + C13731 * C2663 + C13577 * C2921 +
           C13730 * C927 + C13576 * C1195) *
              C3361 +
          (C13730 * C2570 + C13576 * C2827 + C13731 * C3367 + C13577 * C3545 +
           C13732 * C15525 + C13578 * C15808) *
              C3429 +
          (C13730 * C2663 + C13576 * C2921 + C13731 * C3433 + C13577 * C3599 +
           C13732 * C15634 + C13578 * C15886) *
              C3362 -
          (C13732 * C16292 + C13578 * C16475 + C13731 * C15525 +
           C13577 * C15808 + C13730 * C3367 + C13576 * C3545) *
              C3430 -
          (C13732 * C16362 + C13578 * C16527 + C13731 * C15634 +
           C13577 * C15886 + C13730 * C3433 + C13576 * C3599) *
              C3363) *
         C90634 * C90485 * C90498 * C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C923 +
           (C13730 * C182 + C13576 * C394 + C13731 * C927 + C13577 * C1195 +
            C13732 * C2663 + C13578 * C2921) *
               C90752 -
           (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
            C13730 * C832 + C13576 * C1094) *
               C924 -
           (C13732 * C3433 + C13578 * C3599 + C13731 * C2663 + C13577 * C2921 +
            C13730 * C927 + C13576 * C1195) *
               C90555) *
              C90634 * C90485 * C90498 * C4653 +
          ((C13730 * C3891 + C13576 * C4161 + C13731 * C3896 + C13577 * C4166 +
            C13732 * C16835 + C13578 * C17131) *
               C924 -
           ((C13732 * C3994 + C13578 * C4248 + C13731 * C3989 + C13577 * C4247 +
             C13730 * C1794 + C13576 * C2066) *
                C90752 +
            (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 + C13577 * C4161 +
             C13730 * C1700 + C13576 * C1962) *
                C923) +
           (C13730 * C3989 + C13576 * C4247 + C13731 * C3994 + C13577 * C4248 +
            C13732 * C16942 + C13578 * C17209) *
               C90555) *
              C90634 * C90485 * C90498 * C4654 +
          ((C13730 * C4656 + C13576 * C4913 + C13731 * C5471 + C13577 * C5717 +
            C13732 * C17651 + C13578 * C17889) *
               C923 +
           (C13730 * C4746 + C13576 * C5007 + C13731 * C5557 + C13577 * C5795 +
            C13732 * C17733 + C13578 * C17967) *
               C90752 -
           (C13732 * C18349 + C13578 * C18619 + C13731 * C17651 +
            C13577 * C17889 + C13730 * C5471 + C13576 * C5717) *
               C924 -
           (C13732 * C18443 + C13578 * C18695 + C13731 * C17733 +
            C13577 * C17967 + C13730 * C5557 + C13576 * C5795) *
               C90555) *
              C90634 * C90485 * C90498 * C4655)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[67] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C244 +
            (C307 * C245 + C90623 * C474) * C90567) *
               C90634 * C89 +
           (C481 + C497) * C90634 * C90 + C503 * C91) *
              C3360 -
          (C1321 * C91 + (C1318 + C1310) * C90634 * C90 +
           ((C307 * C1011 + C90623 * C1301) * C90567 +
            (C307 * C832 + C90623 * C1094) * C244) *
               C90634 * C89) *
              C3361 +
          (((C307 * C2570 + C90623 * C2827) * C244 +
            (C307 * C2745 + C90623 * C3017) * C90567) *
               C90634 * C89 +
           (C3022 + C3030) * C90634 * C90 + (C3025 + C3031) * C90634 * C91) *
              C3362 -
          (((C307 * C3487 + C90623 * C3652) * C90567 +
            (C307 * C3365 + C90623 * C3543) * C244) *
               C90634 * C91 +
           ((C307 * C3488 + C90623 * C3653) * C90567 +
            (C307 * C3366 + C90623 * C3544) * C244) *
               C90634 * C90 +
           ((C307 * C3489 + C90623 * C3654) * C90567 +
            (C307 * C3367 + C90623 * C3545) * C244) *
               C90634 * C89) *
              C3363) *
         C90498) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C244 +
             (C307 * C245 + C90623 * C474) * C90567) *
                C90634 * C89 +
            (C481 + C497) * C90634 * C90 + C503 * C91) *
               C90752 -
           (C1321 * C91 + (C1318 + C1310) * C90634 * C90 +
            ((C307 * C1011 + C90623 * C1301) * C90567 +
             (C307 * C832 + C90623 * C1094) * C244) *
                C90634 * C89) *
               C90555) *
              C821 +
          (((C1310 + C1318) * C90634 * C89 + (C1307 + C1317) * C90634 * C90 +
            (C1311 + C1319) * C90634 * C91) *
               C90555 -
           (C504 * C91 + (C498 + C484) * C90634 * C90 +
            (C497 + C481) * C90634 * C89) *
               C90752) *
              C822 +
          ((C503 * C89 + (C489 + C499) * C90634 * C90 +
            (C490 + C500) * C90634 * C91) *
               C90752 -
           (((C307 * C1013 + C90623 * C1303) * C90567 +
             (C307 * C833 + C90623 * C1097) * C244) *
                C90634 * C91 +
            (C1319 + C1311) * C90634 * C90 + C1321 * C89) *
               C90555) *
              C823)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C4828 +
            (C307 * C245 + C90623 * C474) * C4653 -
            (C307 * C1700 + C90623 * C1962) * C4829 -
            (C307 * C1879 + C90623 * C2159) * C4654 +
            (C307 * C4656 + C90623 * C4913) * C4830 +
            (C307 * C4831 + C90623 * C5095) * C4655) *
               C90634 * C89 +
           (C5100 + C5101 - C5102 - C5103 + C5104 + C5116) * C90634 * C90 +
           (C5107 + C5108 - C5109 - C5110 + C5111 + C5117) * C90634 * C91) *
              C90752 +
          (((C307 * C3891 + C90623 * C4161) * C4829 -
            ((C307 * C1011 + C90623 * C1301) * C4653 +
             (C307 * C832 + C90623 * C1094) * C4828) +
            (C307 * C4075 + C90623 * C4327) * C4654 -
            (C307 * C5471 + C90623 * C5717) * C4830 -
            (C307 * C5637 + C90623 * C5872) * C4655) *
               C90634 * C89 +
           ((C307 * C3892 + C90623 * C4162) * C4829 -
            (C1315 * C4653 + C1116 * C4828) +
            (C307 * C4076 + C90623 * C4328) * C4654 -
            (C307 * C5470 + C90623 * C5716) * C4830 -
            (C307 * C5636 + C90623 * C5873) * C4655) *
               C90634 * C90 +
           ((C307 * C3893 + C90623 * C4163) * C4829 -
            (C1314 * C4653 + C1118 * C4828) +
            (C307 * C4077 + C90623 * C4329) * C4654 -
            (C307 * C5469 + C90623 * C5715) * C4830 -
            (C307 * C5635 + C90623 * C5874) * C4655) *
               C90634 * C91) *
              C90555) *
         C90498) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
             C13732 * C2570 + C13578 * C2827) *
                C244 +
            (C13730 * C245 + C13576 * C474 + C13731 * C1011 + C13577 * C1301 +
             C13732 * C2745 + C13578 * C3017) *
                C90567) *
               C90634 * C90485 * C90752 -
           ((C13732 * C3489 + C13578 * C3654 + C13731 * C2745 + C13577 * C3017 +
             C13730 * C1011 + C13576 * C1301) *
                C90567 +
            (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
             C13730 * C832 + C13576 * C1094) *
                C244) *
               C90634 * C90485 * C90555) *
              C821 +
          (((C13730 * C829 + C13576 * C1093 + C13731 * C2571 + C13577 * C2828 +
             C13732 * C3366 + C13578 * C3544) *
                C244 +
            (C13730 * C1010 + C13576 * C1300 + C13731 * C2746 + C13577 * C3018 +
             C13732 * C3488 + C13578 * C3653) *
                C90567) *
               C90634 * C90485 * C90555 -
           ((C13732 * C2746 + C13578 * C3018 + C13731 * C1010 + C13577 * C1300 +
             C13730 * C246 + C13576 * C475) *
                C90567 +
            (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
             C13730 * C108 + C13576 * C309) *
                C244) *
               C90634 * C90485 * C90752) *
              C822 +
          (((C13730 * C109 + C13576 * C310 + C13731 * C830 + C13577 * C1095 +
             C13732 * C2572 + C13578 * C2829) *
                C244 +
            (C13730 * C247 + C13576 * C476 + C13731 * C1009 + C13577 * C1299 +
             C13732 * C2747 + C13578 * C3019) *
                C90567) *
               C90634 * C90485 * C90752 -
           ((C13732 * C3487 + C13578 * C3652 + C13731 * C2747 + C13577 * C3019 +
             C13730 * C1009 + C13576 * C1299) *
                C90567 +
            (C13732 * C3365 + C13578 * C3543 + C13731 * C2572 + C13577 * C2829 +
             C13730 * C830 + C13576 * C1095) *
                C244) *
               C90634 * C90485 * C90555) *
              C823)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C244 +
           (C13730 * C245 + C13576 * C474 + C13731 * C1011 + C13577 * C1301 +
            C13732 * C2745 + C13578 * C3017) *
               C90567) *
              C90634 * C90485 * C3360 -
          ((C13732 * C3489 + C13578 * C3654 + C13731 * C2745 + C13577 * C3017 +
            C13730 * C1011 + C13576 * C1301) *
               C90567 +
           (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
            C13730 * C832 + C13576 * C1094) *
               C244) *
              C90634 * C90485 * C3361 +
          ((C13730 * C2570 + C13576 * C2827 + C13731 * C3367 + C13577 * C3545 +
            C13732 * C15525 + C13578 * C15808) *
               C244 +
           (C13730 * C2745 + C13576 * C3017 + C13731 * C3489 + C13577 * C3654 +
            C13732 * C15718 + C13578 * C15962) *
               C90567) *
              C90634 * C90485 * C3362 -
          ((C13732 * C16417 + C13578 * C16578 + C13731 * C15718 +
            C13577 * C15962 + C13730 * C3489 + C13576 * C3654) *
               C90567 +
           (C13732 * C16292 + C13578 * C16475 + C13731 * C15525 +
            C13577 * C15808 + C13730 * C3367 + C13576 * C3545) *
               C244) *
              C90634 * C90485 * C3363) *
         C90498) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C4828 +
           (C13730 * C245 + C13576 * C474 + C13731 * C1011 + C13577 * C1301 +
            C13732 * C2745 + C13578 * C3017) *
               C4653 -
           (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 + C13577 * C4161 +
            C13730 * C1700 + C13576 * C1962) *
               C4829 -
           (C13732 * C4080 + C13578 * C4330 + C13731 * C4075 + C13577 * C4327 +
            C13730 * C1879 + C13576 * C2159) *
               C4654 +
           (C13730 * C4656 + C13576 * C4913 + C13731 * C5471 + C13577 * C5717 +
            C13732 * C17651 + C13578 * C17889) *
               C4830 +
           (C13730 * C4831 + C13576 * C5095 + C13731 * C5637 + C13577 * C5872 +
            C13732 * C17811 + C13578 * C18043) *
               C4655) *
              C90634 * C90485 * C90752 +
          ((C13730 * C3891 + C13576 * C4161 + C13731 * C3896 + C13577 * C4166 +
            C13732 * C16835 + C13578 * C17131) *
               C4829 -
           ((C13732 * C3489 + C13578 * C3654 + C13731 * C2745 + C13577 * C3017 +
             C13730 * C1011 + C13576 * C1301) *
                C4653 +
            (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
             C13730 * C832 + C13576 * C1094) *
                C4828) +
           (C13730 * C4075 + C13576 * C4327 + C13731 * C4080 + C13577 * C4330 +
            C13732 * C17029 + C13578 * C17285) *
               C4654 -
           (C13732 * C18349 + C13578 * C18619 + C13731 * C17651 +
            C13577 * C17889 + C13730 * C5471 + C13576 * C5717) *
               C4830 -
           (C13732 * C18525 + C13578 * C18770 + C13731 * C17811 +
            C13577 * C18043 + C13730 * C5637 + C13576 * C5872) *
               C4655) *
              C90634 * C90485 * C90555) *
         C90498) /
            (p * q * std::sqrt(p + q));
    d2eezx[67] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C90634 * C555) * C3364 +
                      (C554 * C116 + C90634 * C561) * C90498) *
                         C89 +
                     (C584 * C3364 + C585 * C90498) * C90 +
                     (C586 * C3364 + C587 * C90498) * C91) *
                        C90623 * C90567 * C3360 -
                    ((C1421 * C90498 + C1420 * C3364) * C91 +
                     (C1419 * C90498 + C1418 * C3364) * C90 +
                     ((C554 * C839 + C90634 * C1400) * C90498 +
                      (C554 * C832 + C90634 * C1396) * C3364) *
                         C89) *
                        C90623 * C90567 * C3361 +
                    (((C554 * C2570 + C90634 * C3105) * C3364 +
                      (C554 * C2577 + C90634 * C3109) * C90498) *
                         C89 +
                     (C3122 * C3364 + C3123 * C90498) * C90 +
                     (C3124 * C3364 + C3125 * C90498) * C91) *
                        C90623 * C90567 * C3362 -
                    (((C554 * C3368 + C90634 * C3708) * C90498 +
                      (C554 * C3365 + C90634 * C3705) * C3364) *
                         C91 +
                     ((C554 * C3369 + C90634 * C3709) * C90498 +
                      (C554 * C3366 + C90634 * C3706) * C3364) *
                         C90 +
                     ((C554 * C3370 + C90634 * C3710) * C90498 +
                      (C554 * C3367 + C90634 * C3707) * C3364) *
                         C89) *
                        C90623 * C90567 * C3363)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C90634 * C555) * C826 +
                      (C554 * C116 + C90634 * C561) * C821 - C584 * C827 -
                      C585 * C822 + C586 * C828 + C587 * C823) *
                         C89 +
                     (C584 * C826 + C585 * C821 - C586 * C827 - C587 * C822 +
                      C588 * C828 + C589 * C823) *
                         C90 +
                     (C586 * C826 + C587 * C821 - C588 * C827 - C589 * C822 +
                      C590 * C828 + C591 * C823) *
                         C91) *
                        C90623 * C90567 * C90752 +
                    ((C1418 * C827 -
                      ((C554 * C839 + C90634 * C1400) * C821 +
                       (C554 * C832 + C90634 * C1396) * C826) +
                      C1419 * C822 - C1420 * C828 - C1421 * C823) *
                         C89 +
                     (C1420 * C827 - (C1419 * C821 + C1418 * C826) +
                      C1421 * C822 - C1422 * C828 - C1423 * C823) *
                         C90 +
                     (C1422 * C827 - (C1421 * C821 + C1420 * C826) +
                      C1423 * C822 - (C554 * C833 + C90634 * C1399) * C828 -
                      (C554 * C843 + C90634 * C1404) * C823) *
                         C91) *
                        C90623 * C90567 * C90555)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C90634 * C555) * C3364 +
                       (C554 * C116 + C90634 * C561) * C90498) *
                          C89 +
                      (C584 * C3364 + C585 * C90498) * C90 +
                      (C586 * C3364 + C587 * C90498) * C91) *
                         C90623 * C4653 -
                     ((C2289 * C90498 + C2288 * C3364) * C91 +
                      (C2287 * C90498 + C2286 * C3364) * C90 +
                      ((C554 * C1707 + C90634 * C2268) * C90498 +
                       (C554 * C1700 + C90634 * C2264) * C3364) *
                          C89) *
                         C90623 * C4654 +
                     (((C554 * C4656 + C90634 * C5191) * C3364 +
                       (C554 * C4663 + C90634 * C5195) * C90498) *
                          C89 +
                      (C5208 * C3364 + C5209 * C90498) * C90 +
                      (C5210 * C3364 + C5211 * C90498) * C91) *
                         C90623 * C4655) *
                        C90752 +
                    ((((C554 * C3891 + C90634 * C4407) * C3364 +
                       (C554 * C3900 + C90634 * C4413) * C90498) *
                          C89 +
                      ((C554 * C3892 + C90634 * C4408) * C3364 +
                       (C554 * C3901 + C90634 * C4414) * C90498) *
                          C90 +
                      ((C554 * C3893 + C90634 * C4409) * C3364 +
                       (C554 * C3902 + C90634 * C4415) * C90498) *
                          C91) *
                         C90623 * C4654 -
                     ((C1421 * C90498 + C1420 * C3364) * C91 +
                      (C1419 * C90498 + C1418 * C3364) * C90 +
                      ((C554 * C839 + C90634 * C1400) * C90498 +
                       (C554 * C832 + C90634 * C1396) * C3364) *
                          C89) *
                         C90623 * C4653 -
                     (((C554 * C5472 + C90634 * C5952) * C90498 +
                       (C554 * C5469 + C90634 * C5949) * C3364) *
                          C91 +
                      ((C554 * C5473 + C90634 * C5953) * C90498 +
                       (C554 * C5470 + C90634 * C5950) * C3364) *
                          C90 +
                      ((C554 * C5474 + C90634 * C5954) * C90498 +
                       (C554 * C5471 + C90634 * C5951) * C3364) *
                          C89) *
                         C90623 * C4655) *
                        C90555)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C90634 * C555) * C826 +
                      (C554 * C116 + C90634 * C561) * C821 - C584 * C827 -
                      C585 * C822 + C586 * C828 + C587 * C823) *
                         C90485 * C13576 +
                     (C14618 + C14619 - C14602 - C14603 + C14604 + C14605) *
                         C90485 * C13577 +
                     (C14620 + C14621 - C14610 - C14611 + C14612 + C14613) *
                         C90485 * C13578) *
                        C90567 * C90752 +
                    ((C14602 - (C14619 + C14618) + C14603 - C14604 - C14605) *
                         C90485 * C13576 +
                     (C14610 - (C14621 + C14620) + C14611 - C14612 - C14613) *
                         C90485 * C13577 +
                     ((C554 * C3366 + C90634 * C3706) * C827 -
                      ((C554 * C3370 + C90634 * C3710) * C821 +
                       (C554 * C3367 + C90634 * C3707) * C826) +
                      (C554 * C3369 + C90634 * C3709) * C822 -
                      (C554 * C3365 + C90634 * C3705) * C828 -
                      (C554 * C3368 + C90634 * C3708) * C823) *
                         C90485 * C13578) *
                        C90567 * C90555)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C90634 * C555) * C3364 +
                      (C554 * C116 + C90634 * C561) * C90498) *
                         C90485 * C13576 +
                     (C16632 + C16633) * C90485 * C13577 + C16646 * C13578) *
                        C90567 * C3360 -
                    (C16647 * C13578 + (C16635 + C16634) * C90485 * C13577 +
                     (C16633 + C16632) * C90485 * C13576) *
                        C90567 * C3361 +
                    (C16646 * C13576 + (C16637 + C16636) * C90485 * C13577 +
                     (C16648 + C16649) * C90485 * C13578) *
                        C90567 * C3362 -
                    (((C554 * C16293 + C90634 * C16630) * C90498 +
                      (C554 * C16292 + C90634 * C16629) * C3364) *
                         C90485 * C13578 +
                     (C16649 + C16648) * C90485 * C13577 + C16647 * C13576) *
                        C90567 * C3363)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C90634 * C555) * C3364 +
                       (C554 * C116 + C90634 * C561) * C90498) *
                          C90485 * C13576 +
                      (C16632 + C16633) * C90485 * C13577 + C16646 * C13578) *
                         C4653 -
                     (C17391 * C13578 + (C17386 + C17387) * C90485 * C13577 +
                      ((C554 * C1707 + C90634 * C2268) * C90498 +
                       (C554 * C1700 + C90634 * C2264) * C3364) *
                          C90485 * C13576) *
                         C4654 +
                     (((C554 * C4656 + C90634 * C5191) * C3364 +
                       (C554 * C4663 + C90634 * C5195) * C90498) *
                          C90485 * C13576 +
                      (C18860 + C18861) * C90485 * C13577 +
                      (C18862 + C18863) * C90485 * C13578) *
                         C4655) *
                        C90752 +
                    (((C17387 + C17386) * C90485 * C13576 +
                      (C17385 + C17384) * C90485 * C13577 +
                      (C17388 + C17389) * C90485 * C13578) *
                         C4654 -
                     (C16647 * C13578 + (C16635 + C16634) * C90485 * C13577 +
                      (C16633 + C16632) * C90485 * C13576) *
                         C4653 -
                     (((C554 * C18350 + C90634 * C18846) * C90498 +
                       (C554 * C18349 + C90634 * C18845) * C3364) *
                          C90485 * C13578 +
                      (C18863 + C18862) * C90485 * C13577 +
                      (C18861 + C18860) * C90485 * C13576) *
                         C4655) *
                        C90555)) /
                      (p * q * std::sqrt(p + q));
    d2eezy[67] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C554 * C107 + C90634 * C555) * C3427 +
           (C554 * C182 + C90634 * C641) * C3360 -
           (C554 * C832 + C90634 * C1396) * C3428 -
           (C554 * C927 + C90634 * C1497) * C3361 +
           (C554 * C2570 + C90634 * C3105) * C3429 +
           (C554 * C2663 + C90634 * C3199) * C3362 -
           (C554 * C3367 + C90634 * C3707) * C3430 -
           (C554 * C3433 + C90634 * C3761) * C3363) *
              C89 +
          (C584 * C3427 + C660 * C3360 - C1418 * C3428 - C1518 * C3361 +
           C3122 * C3429 + C3218 * C3362 -
           (C554 * C3366 + C90634 * C3706) * C3430 -
           (C554 * C3432 + C90634 * C3762) * C3363) *
              C90 +
          (C586 * C3427 + C661 * C3360 - C1420 * C3428 - C1520 * C3361 +
           C3124 * C3429 + C3219 * C3362 -
           (C554 * C3365 + C90634 * C3705) * C3430 -
           (C554 * C3431 + C90634 * C3763) * C3363) *
              C91) *
         C90623 * C90498 * C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C923 +
            (C554 * C182 + C90634 * C641) * C90752 -
            (C554 * C832 + C90634 * C1396) * C924 -
            (C554 * C927 + C90634 * C1497) * C90555) *
               C89 +
           (C1503 + C1504 - C1505 - C1522) * C90 + C1526 * C91) *
              C90623 * C821 +
          ((C1505 - (C1504 + C1503) + C1522) * C89 +
           (C1510 - (C1509 + C1508) + C1524) * C90 +
           (C1513 - (C1514 + C1515) + C1525) * C91) *
              C90623 * C822 +
          (C1526 * C89 + (C1515 + C1514 - C1513 - C1525) * C90 +
           (C590 * C923 + C663 * C90752 -
            (C554 * C833 + C90634 * C1399) * C924 -
            (C554 * C929 + C90634 * C1501) * C90555) *
               C91) *
              C90623 * C823) *
         C90567) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C923 +
            (C554 * C182 + C90634 * C641) * C90752 -
            (C554 * C832 + C90634 * C1396) * C924 -
            (C554 * C927 + C90634 * C1497) * C90555) *
               C89 +
           (C1503 + C1504 - C1505 - C1522) * C90 + C1526 * C91) *
              C90623 * C90498 * C4653 +
          (((C554 * C3891 + C90634 * C4407) * C924 -
            ((C554 * C1794 + C90634 * C2368) * C90752 +
             (C554 * C1700 + C90634 * C2264) * C923) +
            (C554 * C3989 + C90634 * C4493) * C90555) *
               C89 +
           ((C554 * C3892 + C90634 * C4408) * C924 -
            (C2380 * C90752 + C2286 * C923) +
            (C554 * C3990 + C90634 * C4495) * C90555) *
               C90 +
           ((C554 * C3893 + C90634 * C4409) * C924 -
            (C2381 * C90752 + C2288 * C923) +
            (C554 * C3991 + C90634 * C4497) * C90555) *
               C91) *
              C90623 * C90498 * C4654 +
          (((C554 * C4656 + C90634 * C5191) * C923 +
            (C554 * C4746 + C90634 * C5285) * C90752 -
            (C554 * C5471 + C90634 * C5951) * C924 -
            (C554 * C5557 + C90634 * C6029) * C90555) *
               C89 +
           (C5208 * C923 + C5296 * C90752 -
            (C554 * C5470 + C90634 * C5950) * C924 -
            (C554 * C5556 + C90634 * C6030) * C90555) *
               C90 +
           (C5210 * C923 + C5297 * C90752 -
            (C554 * C5469 + C90634 * C5949) * C924 -
            (C554 * C5555 + C90634 * C6031) * C90555) *
               C91) *
              C90623 * C90498 * C4655)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C923 +
            (C554 * C182 + C90634 * C641) * C90752 - C14614 * C924 -
            C14700 * C90555) *
               C90485 * C13576 +
           (C14614 * C923 + C14700 * C90752 - C14616 * C924 - C14701 * C90555) *
               C90485 * C13577 +
           (C14616 * C923 + C14701 * C90752 -
            (C554 * C3367 + C90634 * C3707) * C924 -
            (C554 * C3433 + C90634 * C3761) * C90555) *
               C90485 * C13578) *
              C821 +
          ((C1505 - (C1504 + C1503) + C1522) * C90485 * C13576 +
           (C3122 * C924 - (C1518 * C90752 + C1418 * C923) + C3218 * C90555) *
               C90485 * C13577 +
           ((C554 * C3366 + C90634 * C3706) * C924 -
            (C3218 * C90752 + C3122 * C923) +
            (C554 * C3432 + C90634 * C3762) * C90555) *
               C90485 * C13578) *
              C822 +
          (C1526 * C90485 * C13576 +
           (C1420 * C923 + C1520 * C90752 - C3124 * C924 - C3219 * C90555) *
               C90485 * C13577 +
           (C3124 * C923 + C3219 * C90752 -
            (C554 * C3365 + C90634 * C3705) * C924 -
            (C554 * C3431 + C90634 * C3763) * C90555) *
               C90485 * C13578) *
              C823) *
         C90567) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C554 * C107 + C90634 * C555) * C3427 +
           (C554 * C182 + C90634 * C641) * C3360 - C14614 * C3428 -
           C14700 * C3361 + C14616 * C3429 + C14701 * C3362 - C16062 * C3430 -
           C16151 * C3363) *
              C90485 * C13576 +
          (C14614 * C3427 + C14700 * C3360 - C14616 * C3428 - C14701 * C3361 +
           C16062 * C3429 + C16151 * C3362 - C16644 * C3430 - C16703 * C3363) *
              C90485 * C13577 +
          (C14616 * C3427 + C14701 * C3360 - C16062 * C3428 - C16151 * C3361 +
           C16644 * C3429 + C16703 * C3362 -
           (C554 * C16292 + C90634 * C16629) * C3430 -
           (C554 * C16362 + C90634 * C16699) * C3363) *
              C90485 * C13578) *
         C90498 * C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C923 +
            (C554 * C182 + C90634 * C641) * C90752 - C14614 * C924 -
            C14700 * C90555) *
               C90485 * C13576 +
           (C14614 * C923 + C14700 * C90752 - C14616 * C924 - C14701 * C90555) *
               C90485 * C13577 +
           (C14616 * C923 + C14701 * C90752 - C16062 * C924 - C16151 * C90555) *
               C90485 * C13578) *
              C90498 * C4653 +
          ((C17381 * C924 -
            ((C554 * C1794 + C90634 * C2368) * C90752 +
             (C554 * C1700 + C90634 * C2264) * C923) +
            C17474 * C90555) *
               C90485 * C13576 +
           (C17379 * C924 - (C17474 * C90752 + C17381 * C923) +
            C17475 * C90555) *
               C90485 * C13577 +
           (C17382 * C924 - (C17475 * C90752 + C17379 * C923) +
            C17476 * C90555) *
               C90485 * C13578) *
              C90498 * C4654 +
          (((C554 * C4656 + C90634 * C5191) * C923 +
            (C554 * C4746 + C90634 * C5285) * C90752 - C18856 * C924 -
            C18943 * C90555) *
               C90485 * C13576 +
           (C18856 * C923 + C18943 * C90752 - C18858 * C924 - C18944 * C90555) *
               C90485 * C13577 +
           (C18858 * C923 + C18944 * C90752 -
            (C554 * C18349 + C90634 * C18845) * C924 -
            (C554 * C18443 + C90634 * C18937) * C90555) *
               C90485 * C13578) *
              C90498 * C4655)) /
            (p * q * std::sqrt(p + q));
    d2eezz[67] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C244 +
            (C554 * C245 + C90634 * C719) * C90567) *
               C89 +
           (C726 + C742) * C90 + C746 * C91) *
              C90623 * C3360 -
          (C1621 * C91 + (C1619 + C1611) * C90 +
           ((C554 * C1011 + C90634 * C1602) * C90567 +
            (C554 * C832 + C90634 * C1396) * C244) *
               C89) *
              C90623 * C3361 +
          (((C554 * C2570 + C90634 * C3105) * C244 +
            (C554 * C2745 + C90634 * C3295) * C90567) *
               C89 +
           (C3300 + C3308) * C90 + (C3303 + C3309) * C91) *
              C90623 * C3362 -
          (((C554 * C3487 + C90634 * C3814) * C90567 +
            (C554 * C3365 + C90634 * C3705) * C244) *
               C91 +
           ((C554 * C3488 + C90634 * C3815) * C90567 +
            (C554 * C3366 + C90634 * C3706) * C244) *
               C90 +
           ((C554 * C3489 + C90634 * C3816) * C90567 +
            (C554 * C3367 + C90634 * C3707) * C244) *
               C89) *
              C90623 * C3363) *
         C90498) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C244 +
             (C554 * C245 + C90634 * C719) * C90567) *
                C89 +
            (C726 + C742) * C90 + C746 * C91) *
               C90623 * C90752 -
           (C1621 * C91 + (C1619 + C1611) * C90 +
            ((C554 * C1011 + C90634 * C1602) * C90567 +
             (C554 * C832 + C90634 * C1396) * C244) *
                C89) *
               C90623 * C90555) *
              C821 +
          (((C1611 + C1619) * C89 + (C1608 + C1618) * C90 +
            (C1612 + C1620) * C91) *
               C90623 * C90555 -
           (C747 * C91 + (C743 + C729) * C90 + (C742 + C726) * C89) * C90623 *
               C90752) *
              C822 +
          ((C746 * C89 + (C734 + C744) * C90 + (C735 + C745) * C91) * C90623 *
               C90752 -
           (((C554 * C1013 + C90634 * C1604) * C90567 +
             (C554 * C833 + C90634 * C1399) * C244) *
                C91 +
            (C1620 + C1612) * C90 + C1621 * C89) *
               C90623 * C90555) *
              C823)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C4828 +
            (C554 * C245 + C90634 * C719) * C4653 -
            (C554 * C1700 + C90634 * C2264) * C4829 -
            (C554 * C1879 + C90634 * C2460) * C4654 +
            (C554 * C4656 + C90634 * C5191) * C4830 +
            (C554 * C4831 + C90634 * C5373) * C4655) *
               C89 +
           (C5378 + C5379 - C5380 - C5381 + C5382 + C5394) * C90 +
           (C5385 + C5386 - C5387 - C5388 + C5389 + C5395) * C91) *
              C90623 * C90752 +
          (((C554 * C3891 + C90634 * C4407) * C4829 -
            ((C554 * C1011 + C90634 * C1602) * C4653 +
             (C554 * C832 + C90634 * C1396) * C4828) +
            (C554 * C4075 + C90634 * C4573) * C4654 -
            (C554 * C5471 + C90634 * C5951) * C4830 -
            (C554 * C5637 + C90634 * C6106) * C4655) *
               C89 +
           ((C554 * C3892 + C90634 * C4408) * C4829 -
            (C1616 * C4653 + C1418 * C4828) +
            (C554 * C4076 + C90634 * C4574) * C4654 -
            (C554 * C5470 + C90634 * C5950) * C4830 -
            (C554 * C5636 + C90634 * C6107) * C4655) *
               C90 +
           ((C554 * C3893 + C90634 * C4409) * C4829 -
            (C1615 * C4653 + C1420 * C4828) +
            (C554 * C4077 + C90634 * C4575) * C4654 -
            (C554 * C5469 + C90634 * C5949) * C4830 -
            (C554 * C5635 + C90634 * C6108) * C4655) *
               C91) *
              C90623 * C90555) *
         C90498) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C244 +
             (C554 * C245 + C90634 * C719) * C90567) *
                C90485 * C13576 +
            (C14776 + C14784) * C90485 * C13577 +
            (C14779 + C14785) * C90485 * C13578) *
               C90752 -
           (((C554 * C3489 + C90634 * C3816) * C90567 +
             (C554 * C3367 + C90634 * C3707) * C244) *
                C90485 * C13578 +
            (C14785 + C14779) * C90485 * C13577 +
            (C14784 + C14776) * C90485 * C13576) *
               C90555) *
              C821 +
          (((C1611 + C1619) * C90485 * C13576 +
            (C3300 + C3308) * C90485 * C13577 +
            ((C554 * C3366 + C90634 * C3706) * C244 +
             (C554 * C3488 + C90634 * C3815) * C90567) *
                C90485 * C13578) *
               C90555 -
           ((C3308 + C3300) * C90485 * C13578 +
            (C1619 + C1611) * C90485 * C13577 +
            (C742 + C726) * C90485 * C13576) *
               C90752) *
              C822 +
          ((C746 * C90485 * C13576 + (C1608 + C1618) * C90485 * C13577 +
            (C3303 + C3309) * C90485 * C13578) *
               C90752 -
           (((C554 * C3487 + C90634 * C3814) * C90567 +
             (C554 * C3365 + C90634 * C3705) * C244) *
                C90485 * C13578 +
            (C3309 + C3303) * C90485 * C13577 + C1621 * C90485 * C13576) *
               C90555) *
              C823)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C244 +
            (C554 * C245 + C90634 * C719) * C90567) *
               C90485 * C13576 +
           (C14776 + C14784) * C90485 * C13577 + C16237 * C13578) *
              C3360 -
          (C16759 * C13578 + (C14785 + C14779) * C90485 * C13577 +
           (C14784 + C14776) * C90485 * C13576) *
              C3361 +
          (C16237 * C13576 + (C16232 + C16241) * C90485 * C13577 +
           (C16756 + C16761) * C90485 * C13578) *
              C3362 -
          (((C554 * C16417 + C90634 * C16753) * C90567 +
            (C554 * C16292 + C90634 * C16629) * C244) *
               C90485 * C13578 +
           (C16761 + C16756) * C90485 * C13577 + C16759 * C13576) *
              C3363) *
         C90498) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C4828 +
            (C554 * C245 + C90634 * C719) * C4653 -
            (C554 * C1700 + C90634 * C2264) * C4829 -
            (C554 * C1879 + C90634 * C2460) * C4654 +
            (C554 * C4656 + C90634 * C5191) * C4830 +
            (C554 * C4831 + C90634 * C5373) * C4655) *
               C90485 * C13576 +
           (C19020 + C19021 - C19022 - C19023 + C19024 + C19036) * C90485 *
               C13577 +
           (C19027 + C19028 - C19029 - C19030 + C19031 + C19037) * C90485 *
               C13578) *
              C90752 +
          ((C19022 - (C19021 + C19020) + C19023 - C19024 - C19036) * C90485 *
               C13576 +
           (C19029 - (C19028 + C19027) + C19030 - C19031 - C19037) * C90485 *
               C13577 +
           (C17382 * C4829 - (C16238 * C4653 + C16062 * C4828) +
            C17571 * C4654 - (C554 * C18349 + C90634 * C18845) * C4830 -
            (C554 * C18525 + C90634 * C19018) * C4655) *
               C90485 * C13578) *
              C90555) *
         C90498) /
            (p * q * std::sqrt(p + q));
    d2eexx[68] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
             C91 * C115) *
                C3364 +
            (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 + C102 * C118 +
             C91 * C127) *
                C90498) *
               C90623 * C90634 * C90753 -
           ((C102 * C1705 + C91 * C1712 + C101 * C1706 + C90 * C1713 +
             C100 * C1707 + C89 * C1714) *
                C90498 +
            (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
             C100 * C1700 + C89 * C1708) *
                C3364) *
               C90623 * C90634 * C90579) *
              C2565 +
          (((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
             C102 * C3893 + C91 * C3899) *
                C3364 +
            (C100 * C3900 + C89 * C3909 + C101 * C3901 + C90 * C3910 +
             C102 * C3902 + C91 * C3911) *
                C90498) *
               C90623 * C90634 * C90579 -
           ((C102 * C837 + C91 * C844 + C101 * C838 + C90 * C845 + C100 * C839 +
             C89 * C846) *
                C90498 +
            (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 + C100 * C832 +
             C89 * C840) *
                C3364) *
               C90623 * C90634 * C90753) *
              C2566 +
          (((C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
             C102 * C2572 + C91 * C2576) *
                C3364 +
            (C100 * C2577 + C89 * C2582 + C101 * C2578 + C90 * C2583 +
             C102 * C2579 + C91 * C2584) *
                C90498) *
               C90623 * C90634 * C90753 -
           ((C102 * C3903 + C91 * C3912 + C101 * C3904 + C90 * C3913 +
             C100 * C3905 + C89 * C3914) *
                C90498 +
            (C102 * C3894 + C91 * C3906 + C101 * C3895 + C90 * C3907 +
             C100 * C3896 + C89 * C3908) *
                C3364) *
               C90623 * C90634 * C90579) *
              C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C826 +
           (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 + C102 * C118 +
            C91 * C127) *
               C821 -
           (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 + C100 * C108 +
            C89 * C114) *
               C827 -
           (C102 * C120 + C91 * C128 + C101 * C118 + C90 * C127 + C100 * C117 +
            C89 * C126) *
               C822 +
           (C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 + C102 * C111 +
            C91 * C121) *
               C828 +
           (C100 * C118 + C89 * C127 + C101 * C120 + C90 * C128 + C102 * C122 +
            C91 * C129) *
               C823) *
              C90623 * C90634 * C90753 +
          ((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
            C102 * C1699 + C91 * C1704) *
               C827 -
           ((C102 * C1705 + C91 * C1712 + C101 * C1706 + C90 * C1713 +
             C100 * C1707 + C89 * C1714) *
                C821 +
            (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
             C100 * C1700 + C89 * C1708) *
                C826) +
           (C100 * C1706 + C89 * C1713 + C101 * C1705 + C90 * C1712 +
            C102 * C1709 + C91 * C1715) *
               C822 -
           (C102 * C1701 + C91 * C1710 + C101 * C1699 + C90 * C1704 +
            C100 * C1698 + C89 * C1703) *
               C828 -
           (C102 * C1711 + C91 * C1716 + C101 * C1709 + C90 * C1715 +
            C100 * C1705 + C89 * C1712) *
               C823) *
              C90623 * C90634 * C90579) *
         C90541) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C3364 +
           (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 + C102 * C118 +
            C91 * C127) *
               C90498) *
              C90623 * C90634 * C6159 -
          ((C102 * C1705 + C91 * C1712 + C101 * C1706 + C90 * C1713 +
            C100 * C1707 + C89 * C1714) *
               C90498 +
           (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
            C100 * C1700 + C89 * C1708) *
               C3364) *
              C90623 * C90634 * C6160 +
          ((C100 * C4656 + C89 * C4660 + C101 * C4657 + C90 * C4661 +
            C102 * C4658 + C91 * C4662) *
               C3364 +
           (C100 * C4663 + C89 * C4668 + C101 * C4664 + C90 * C4669 +
            C102 * C4665 + C91 * C4670) *
               C90498) *
              C90623 * C90634 * C6161 -
          ((C102 * C6166 + C91 * C6172 + C101 * C6167 + C90 * C6173 +
            C100 * C6168 + C89 * C6174) *
               C90498 +
           (C102 * C6163 + C91 * C6169 + C101 * C6164 + C90 * C6170 +
            C100 * C6165 + C89 * C6171) *
               C3364) *
              C90623 * C90634 * C6162) *
         C90541) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C826 +
            (C13579 * C116 + C90485 * C125) * C821 -
            (C13579 * C108 + C90485 * C114) * C827 -
            (C13579 * C117 + C90485 * C126) * C822 +
            (C13579 * C109 + C90485 * C115) * C828 +
            (C13579 * C118 + C90485 * C127) * C823) *
               C13576 +
           (C14094 + C14095 - C14096 - C14097 + C14098 + C14099) * C13577 +
           (C14100 + C14101 - C14102 - C14103 + C14104 + C14105) * C13578) *
              C90634 * C90753 +
          (((C13579 * C1697 + C90485 * C1702) * C827 -
            ((C13579 * C1707 + C90485 * C1714) * C821 +
             (C13579 * C1700 + C90485 * C1708) * C826) +
            (C13579 * C1706 + C90485 * C1713) * C822 -
            (C13579 * C1698 + C90485 * C1703) * C828 -
            (C13579 * C1705 + C90485 * C1712) * C823) *
               C13576 +
           ((C13579 * C3892 + C90485 * C3898) * C827 -
            ((C13579 * C3900 + C90485 * C3909) * C821 +
             (C13579 * C3891 + C90485 * C3897) * C826) +
            (C13579 * C3901 + C90485 * C3910) * C822 -
            (C13579 * C3893 + C90485 * C3899) * C828 -
            (C13579 * C3902 + C90485 * C3911) * C823) *
               C13577 +
           ((C13579 * C3895 + C90485 * C3907) * C827 -
            ((C13579 * C3905 + C90485 * C3914) * C821 +
             (C13579 * C3896 + C90485 * C3908) * C826) +
            (C13579 * C3904 + C90485 * C3913) * C822 -
            (C13579 * C3894 + C90485 * C3906) * C828 -
            (C13579 * C3903 + C90485 * C3912) * C823) *
               C13578) *
              C90634 * C90579) *
         C90541) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C3364 +
             (C13579 * C116 + C90485 * C125) * C90498) *
                C13576 +
            (C16297 + C16298) * C13577 + C16307 * C13578) *
               C90634 * C90753 -
           (C16868 * C13578 + (C16864 + C16865) * C13577 +
            ((C13579 * C1707 + C90485 * C1714) * C90498 +
             (C13579 * C1700 + C90485 * C1708) * C3364) *
                C13576) *
               C90634 * C90579) *
              C2565 +
          (((C16865 + C16864) * C13576 + (C16863 + C16862) * C13577 +
            (C16866 + C16867) * C13578) *
               C90634 * C90579 -
           (C16308 * C13578 + (C16300 + C16299) * C13577 +
            (C16298 + C16297) * C13576) *
               C90634 * C90753) *
              C2566 +
          ((C16307 * C13576 + (C16302 + C16301) * C13577 +
            (C16311 + C16312) * C13578) *
               C90634 * C90753 -
           (((C13579 * C16839 + C90485 * C16842) * C90498 +
             (C13579 * C16836 + C90485 * C16840) * C3364) *
                C13578 +
            (C16867 + C16866) * C13577 + C16868 * C13576) *
               C90634 * C90579) *
              C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C3364 +
            (C13579 * C116 + C90485 * C125) * C90498) *
               C13576 +
           (C16297 + C16298) * C13577 + C16307 * C13578) *
              C90634 * C6159 -
          (C16868 * C13578 + (C16864 + C16865) * C13577 +
           ((C13579 * C1707 + C90485 * C1714) * C90498 +
            (C13579 * C1700 + C90485 * C1708) * C3364) *
               C13576) *
              C90634 * C6160 +
          (((C13579 * C4656 + C90485 * C4660) * C3364 +
            (C13579 * C4663 + C90485 * C4668) * C90498) *
               C13576 +
           (C18366 + C18367) * C13577 + (C18368 + C18369) * C13578) *
              C90634 * C6161 -
          (((C13579 * C19089 + C90485 * C19093) * C90498 +
            (C13579 * C19087 + C90485 * C19090) * C3364) *
               C13578 +
           ((C13579 * C19091 + C90485 * C19094) * C90498 +
            (C13579 * C19088 + C90485 * C19092) * C3364) *
               C13577 +
           ((C13579 * C6168 + C90485 * C6174) * C90498 +
            (C13579 * C6165 + C90485 * C6171) * C3364) *
               C13576) *
              C90634 * C6162) *
         C90541) /
            (p * q * std::sqrt(p + q));
    d2eexy[68] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C2660 +
           (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 + C102 * C184 +
            C91 * C190) *
               C2565 -
           (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 + C100 * C832 +
            C89 * C840) *
               C2661 -
           (C102 * C925 + C91 * C930 + C101 * C926 + C90 * C931 + C100 * C927 +
            C89 * C932) *
               C2566 +
           (C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
            C102 * C2572 + C91 * C2576) *
               C2662 +
           (C100 * C2663 + C89 * C2667 + C101 * C2664 + C90 * C2668 +
            C102 * C2665 + C91 * C2669) *
               C2567) *
              C90623 * C90634 * C90498 * C90753 +
          ((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
            C102 * C3893 + C91 * C3899) *
               C2661 -
           ((C102 * C1792 + C91 * C1797 + C101 * C1791 + C90 * C1796 +
             C100 * C1794 + C89 * C1799) *
                C2565 +
            (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
             C100 * C1700 + C89 * C1708) *
                C2660) +
           (C100 * C3989 + C89 * C3995 + C101 * C3990 + C90 * C3996 +
            C102 * C3991 + C91 * C3997) *
               C2566 -
           (C102 * C3894 + C91 * C3906 + C101 * C3895 + C90 * C3907 +
            C100 * C3896 + C89 * C3908) *
               C2662 -
           (C102 * C3992 + C91 * C3998 + C101 * C3993 + C90 * C3999 +
            C100 * C3994 + C89 * C4000) *
               C2567) *
              C90623 * C90634 * C90498 * C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
             C91 * C115) *
                C181 +
            (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 + C102 * C184 +
             C91 * C190) *
                C90541) *
               C90623 * C90634 * C821 -
           ((C102 * C185 + C91 * C191 + C101 * C184 + C90 * C190 + C100 * C183 +
             C89 * C189) *
                C90541 +
            (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 + C100 * C108 +
             C89 * C114) *
                C181) *
               C90623 * C90634 * C822 +
           ((C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 + C102 * C111 +
             C91 * C121) *
                C181 +
            (C100 * C184 + C89 * C190 + C101 * C185 + C90 * C191 + C102 * C186 +
             C91 * C192) *
                C90541) *
               C90623 * C90634 * C823) *
              C90753 +
          (((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
             C102 * C1699 + C91 * C1704) *
                C181 +
            (C100 * C1791 + C89 * C1796 + C101 * C1792 + C90 * C1797 +
             C102 * C1793 + C91 * C1798) *
                C90541) *
               C90623 * C90634 * C822 -
           ((C102 * C1792 + C91 * C1797 + C101 * C1791 + C90 * C1796 +
             C100 * C1794 + C89 * C1799) *
                C90541 +
            (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
             C100 * C1700 + C89 * C1708) *
                C181) *
               C90623 * C90634 * C821 -
           ((C102 * C1795 + C91 * C1800 + C101 * C1793 + C90 * C1798 +
             C100 * C1792 + C89 * C1797) *
                C90541 +
            (C102 * C1701 + C91 * C1710 + C101 * C1699 + C90 * C1704 +
             C100 * C1698 + C89 * C1703) *
                C181) *
               C90623 * C90634 * C823) *
              C90579)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C181 +
           (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 + C102 * C184 +
            C91 * C190) *
               C90541) *
              C90623 * C90634 * C90498 * C6159 -
          ((C102 * C1792 + C91 * C1797 + C101 * C1791 + C90 * C1796 +
            C100 * C1794 + C89 * C1799) *
               C90541 +
           (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
            C100 * C1700 + C89 * C1708) *
               C181) *
              C90623 * C90634 * C90498 * C6160 +
          ((C100 * C4656 + C89 * C4660 + C101 * C4657 + C90 * C4661 +
            C102 * C4658 + C91 * C4662) *
               C181 +
           (C100 * C4746 + C89 * C4750 + C101 * C4747 + C90 * C4751 +
            C102 * C4748 + C91 * C4752) *
               C90541) *
              C90623 * C90634 * C90498 * C6161 -
          ((C102 * C6225 + C91 * C6228 + C101 * C6226 + C90 * C6229 +
            C100 * C6227 + C89 * C6230) *
               C90541 +
           (C102 * C6163 + C91 * C6169 + C101 * C6164 + C90 * C6170 +
            C100 * C6165 + C89 * C6171) *
               C181) *
              C90623 * C90634 * C90498 * C6162)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C181 +
             (C13579 * C182 + C90485 * C188) * C90541) *
                C13576 +
            (C14082 * C181 + C14192 * C90541) * C13577 +
            (C14088 * C181 + C14193 * C90541) * C13578) *
               C90634 * C821 -
           ((C14195 * C90541 + C14090 * C181) * C13578 +
            (C14194 * C90541 + C14084 * C181) * C13577 +
            ((C13579 * C183 + C90485 * C189) * C90541 +
             (C13579 * C108 + C90485 * C114) * C181) *
                C13576) *
               C90634 * C822 +
           (((C13579 * C109 + C90485 * C115) * C181 +
             (C13579 * C184 + C90485 * C190) * C90541) *
                C13576 +
            (C14086 * C181 + C14196 * C90541) * C13577 +
            (C14092 * C181 + C14197 * C90541) * C13578) *
               C90634 * C823) *
              C90753 +
          ((((C13579 * C1697 + C90485 * C1702) * C181 +
             (C13579 * C1791 + C90485 * C1796) * C90541) *
                C13576 +
            ((C13579 * C3892 + C90485 * C3898) * C181 +
             (C13579 * C3990 + C90485 * C3996) * C90541) *
                C13577 +
            ((C13579 * C3895 + C90485 * C3907) * C181 +
             (C13579 * C3993 + C90485 * C3999) * C90541) *
                C13578) *
               C90634 * C822 -
           (((C13579 * C3994 + C90485 * C4000) * C90541 +
             (C13579 * C3896 + C90485 * C3908) * C181) *
                C13578 +
            ((C13579 * C3989 + C90485 * C3995) * C90541 +
             (C13579 * C3891 + C90485 * C3897) * C181) *
                C13577 +
            ((C13579 * C1794 + C90485 * C1799) * C90541 +
             (C13579 * C1700 + C90485 * C1708) * C181) *
                C13576) *
               C90634 * C821 -
           (((C13579 * C3992 + C90485 * C3998) * C90541 +
             (C13579 * C3894 + C90485 * C3906) * C181) *
                C13578 +
            ((C13579 * C3991 + C90485 * C3997) * C90541 +
             (C13579 * C3893 + C90485 * C3899) * C181) *
                C13577 +
            ((C13579 * C1792 + C90485 * C1797) * C90541 +
             (C13579 * C1698 + C90485 * C1703) * C181) *
                C13576) *
               C90634 * C823) *
              C90579)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C2660 +
            (C13579 * C182 + C90485 * C188) * C2565 - C14082 * C2661 -
            C14192 * C2566 + C14088 * C2662 + C14193 * C2567) *
               C13576 +
           (C14082 * C2660 + C14192 * C2565 - C14088 * C2661 - C14193 * C2566 +
            C15553 * C2662 + C15643 * C2567) *
               C13577 +
           (C14088 * C2660 + C14193 * C2565 - C15553 * C2661 - C15643 * C2566 +
            C16309 * C2662 + C16367 * C2567) *
               C13578) *
              C90634 * C90498 * C90753 +
          ((C16859 * C2661 -
            ((C13579 * C1794 + C90485 * C1799) * C2565 +
             (C13579 * C1700 + C90485 * C1708) * C2660) +
            C16953 * C2566 - C16857 * C2662 - C16954 * C2567) *
               C13576 +
           (C16857 * C2661 - (C16953 * C2565 + C16859 * C2660) +
            C16954 * C2566 - C16860 * C2662 - C16955 * C2567) *
               C13577 +
           (C16860 * C2661 - (C16954 * C2565 + C16857 * C2660) +
            C16955 * C2566 - (C13579 * C16836 + C90485 * C16840) * C2662 -
            (C13579 * C16943 + C90485 * C16945) * C2567) *
               C13578) *
              C90634 * C90498 * C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C181 +
            (C13579 * C182 + C90485 * C188) * C90541) *
               C13576 +
           (C14082 * C181 + C14192 * C90541) * C13577 +
           (C14088 * C181 + C14193 * C90541) * C13578) *
              C90634 * C90498 * C6159 -
          ((C16954 * C90541 + C16857 * C181) * C13578 +
           (C16953 * C90541 + C16859 * C181) * C13577 +
           ((C13579 * C1794 + C90485 * C1799) * C90541 +
            (C13579 * C1700 + C90485 * C1708) * C181) *
               C13576) *
              C90634 * C90498 * C6160 +
          (((C13579 * C4656 + C90485 * C4660) * C181 +
            (C13579 * C4746 + C90485 * C4750) * C90541) *
               C13576 +
           (C18362 * C181 + C18450 * C90541) * C13577 +
           (C18364 * C181 + C18451 * C90541) * C13578) *
              C90634 * C90498 * C6161 -
          (((C13579 * C19145 + C90485 * C19147) * C90541 +
            (C13579 * C19087 + C90485 * C19090) * C181) *
               C13578 +
           ((C13579 * C19146 + C90485 * C19148) * C90541 +
            (C13579 * C19088 + C90485 * C19092) * C181) *
               C13577 +
           ((C13579 * C6227 + C90485 * C6230) * C90541 +
            (C13579 * C6165 + C90485 * C6171) * C181) *
               C13576) *
              C90634 * C90498 * C6162)) /
            (p * q * std::sqrt(p + q));
    d2eexz[68] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C1875 +
           (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 + C102 * C247 +
            C91 * C253) *
               C90753 -
           (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
            C100 * C1700 + C89 * C1708) *
               C1876 -
           (C102 * C1877 + C91 * C1882 + C101 * C1878 + C90 * C1883 +
            C100 * C1879 + C89 * C1884) *
               C90579) *
              C90623 * C90634 * C2565 +
          ((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
            C102 * C3893 + C91 * C3899) *
               C1876 -
           ((C102 * C1009 + C91 * C1014 + C101 * C1010 + C90 * C1015 +
             C100 * C1011 + C89 * C1016) *
                C90753 +
            (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 + C100 * C832 +
             C89 * C840) *
                C1875) +
           (C100 * C4075 + C89 * C4081 + C101 * C4076 + C90 * C4082 +
            C102 * C4077 + C91 * C4083) *
               C90579) *
              C90623 * C90634 * C2566 +
          ((C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
            C102 * C2572 + C91 * C2576) *
               C1875 +
           (C100 * C2745 + C89 * C2749 + C101 * C2746 + C90 * C2750 +
            C102 * C2747 + C91 * C2751) *
               C90753 -
           (C102 * C3894 + C91 * C3906 + C101 * C3895 + C90 * C3907 +
            C100 * C3896 + C89 * C3908) *
               C1876 -
           (C102 * C4078 + C91 * C4084 + C101 * C4079 + C90 * C4085 +
            C100 * C4080 + C89 * C4086) *
               C90579) *
              C90623 * C90634 * C2567) *
         C90498) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C1875 +
           (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 + C102 * C247 +
            C91 * C253) *
               C90753 -
           (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
            C100 * C1700 + C89 * C1708) *
               C1876 -
           (C102 * C1877 + C91 * C1882 + C101 * C1878 + C90 * C1883 +
            C100 * C1879 + C89 * C1884) *
               C90579) *
              C90623 * C90634 * C90541 * C821 +
          ((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
            C102 * C1699 + C91 * C1704) *
               C1876 -
           ((C102 * C248 + C91 * C254 + C101 * C247 + C90 * C253 + C100 * C246 +
             C89 * C252) *
                C90753 +
            (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 + C100 * C108 +
             C89 * C114) *
                C1875) +
           (C100 * C1878 + C89 * C1883 + C101 * C1877 + C90 * C1882 +
            C102 * C1880 + C91 * C1885) *
               C90579) *
              C90623 * C90634 * C90541 * C822 +
          ((C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 + C102 * C111 +
            C91 * C121) *
               C1875 +
           (C100 * C247 + C89 * C253 + C101 * C248 + C90 * C254 + C102 * C249 +
            C91 * C255) *
               C90753 -
           (C102 * C1701 + C91 * C1710 + C101 * C1699 + C90 * C1704 +
            C100 * C1698 + C89 * C1703) *
               C1876 -
           (C102 * C1881 + C91 * C1886 + C101 * C1880 + C90 * C1885 +
            C100 * C1877 + C89 * C1882) *
               C90579) *
              C90623 * C90634 * C90541 * C823)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
           C91 * C115) *
              C6281 +
          (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 + C102 * C247 +
           C91 * C253) *
              C6159 -
          (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
           C100 * C1700 + C89 * C1708) *
              C6282 -
          (C102 * C1877 + C91 * C1882 + C101 * C1878 + C90 * C1883 +
           C100 * C1879 + C89 * C1884) *
              C6160 +
          (C100 * C4656 + C89 * C4660 + C101 * C4657 + C90 * C4661 +
           C102 * C4658 + C91 * C4662) *
              C6283 +
          (C100 * C4831 + C89 * C4835 + C101 * C4832 + C90 * C4836 +
           C102 * C4833 + C91 * C4837) *
              C6161 -
          (C102 * C6163 + C91 * C6169 + C101 * C6164 + C90 * C6170 +
           C100 * C6165 + C89 * C6171) *
              C6284 -
          (C102 * C6285 + C91 * C6288 + C101 * C6286 + C90 * C6289 +
           C100 * C6287 + C89 * C6290) *
              C6162) *
         C90623 * C90634 * C90541 * C90498) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C1875 +
            (C13579 * C245 + C90485 * C251) * C90753 -
            (C13579 * C1700 + C90485 * C1708) * C1876 -
            (C13579 * C1879 + C90485 * C1884) * C90579) *
               C13576 +
           (C14082 * C1875 + C14290 * C90753 -
            (C13579 * C3891 + C90485 * C3897) * C1876 -
            (C13579 * C4075 + C90485 * C4081) * C90579) *
               C13577 +
           (C14088 * C1875 + C14291 * C90753 -
            (C13579 * C3896 + C90485 * C3908) * C1876 -
            (C13579 * C4080 + C90485 * C4086) * C90579) *
               C13578) *
              C90634 * C90541 * C821 +
          (((C13579 * C1697 + C90485 * C1702) * C1876 -
            ((C13579 * C246 + C90485 * C252) * C90753 +
             (C13579 * C108 + C90485 * C114) * C1875) +
            (C13579 * C1878 + C90485 * C1883) * C90579) *
               C13576 +
           ((C13579 * C3892 + C90485 * C3898) * C1876 -
            (C14292 * C90753 + C14084 * C1875) +
            (C13579 * C4076 + C90485 * C4082) * C90579) *
               C13577 +
           ((C13579 * C3895 + C90485 * C3907) * C1876 -
            (C14293 * C90753 + C14090 * C1875) +
            (C13579 * C4079 + C90485 * C4085) * C90579) *
               C13578) *
              C90634 * C90541 * C822 +
          (((C13579 * C109 + C90485 * C115) * C1875 +
            (C13579 * C247 + C90485 * C253) * C90753 -
            (C13579 * C1698 + C90485 * C1703) * C1876 -
            (C13579 * C1877 + C90485 * C1882) * C90579) *
               C13576 +
           (C14086 * C1875 + C14294 * C90753 -
            (C13579 * C3893 + C90485 * C3899) * C1876 -
            (C13579 * C4077 + C90485 * C4083) * C90579) *
               C13577 +
           (C14092 * C1875 + C14295 * C90753 -
            (C13579 * C3894 + C90485 * C3906) * C1876 -
            (C13579 * C4078 + C90485 * C4084) * C90579) *
               C13578) *
              C90634 * C90541 * C823)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C1875 +
            (C13579 * C245 + C90485 * C251) * C90753 -
            (C13579 * C1700 + C90485 * C1708) * C1876 -
            (C13579 * C1879 + C90485 * C1884) * C90579) *
               C13576 +
           (C17034 + C17035 - C17036 - C17053) * C13577 + C17057 * C13578) *
              C90634 * C2565 +
          ((C17036 - (C17035 + C17034) + C17053) * C13576 +
           (C17041 - (C17040 + C17039) + C17055) * C13577 +
           (C17044 - (C17045 + C17046) + C17056) * C13578) *
              C90634 * C2566 +
          (C17057 * C13576 + (C17046 + C17045 - C17044 - C17056) * C13577 +
           (C16309 * C1875 + C16424 * C90753 -
            (C13579 * C16836 + C90485 * C16840) * C1876 -
            (C13579 * C17030 + C90485 * C17032) * C90579) *
               C13578) *
              C90634 * C2567) *
         C90498) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13579 * C107 + C90485 * C113) * C6281 +
           (C13579 * C245 + C90485 * C251) * C6159 -
           (C13579 * C1700 + C90485 * C1708) * C6282 -
           (C13579 * C1879 + C90485 * C1884) * C6160 +
           (C13579 * C4656 + C90485 * C4660) * C6283 +
           (C13579 * C4831 + C90485 * C4835) * C6161 -
           (C13579 * C6165 + C90485 * C6171) * C6284 -
           (C13579 * C6287 + C90485 * C6290) * C6162) *
              C13576 +
          (C14082 * C6281 + C14290 * C6159 - C16859 * C6282 - C17049 * C6160 +
           C18362 * C6283 + C18542 * C6161 -
           (C13579 * C19088 + C90485 * C19092) * C6284 -
           (C13579 * C19199 + C90485 * C19201) * C6162) *
              C13577 +
          (C14088 * C6281 + C14291 * C6159 - C16857 * C6282 - C17051 * C6160 +
           C18364 * C6283 + C18543 * C6161 -
           (C13579 * C19087 + C90485 * C19090) * C6284 -
           (C13579 * C19200 + C90485 * C19202) * C6162) *
              C13578) *
         C90634 * C90541 * C90498) /
            (p * q * std::sqrt(p + q));
    d2eeyx[68] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   (((((C307 * C107 + C90623 * C308) * C3364 +
                       (C307 * C116 + C90623 * C314) * C90498) *
                          C90634 * C89 +
                      (C337 * C3364 + C338 * C90498) * C90634 * C90 +
                      (C339 * C3364 + C340 * C90498) * C90634 * C91) *
                         C90753 -
                     ((C1987 * C90498 + C1986 * C3364) * C90634 * C91 +
                      (C1985 * C90498 + C1984 * C3364) * C90634 * C90 +
                      ((C307 * C1707 + C90623 * C1966) * C90498 +
                       (C307 * C1700 + C90623 * C1962) * C3364) *
                          C90634 * C89) *
                         C90579) *
                        C2565 +
                    ((((C307 * C3891 + C90623 * C4161) * C3364 +
                       (C307 * C3900 + C90623 * C4167) * C90498) *
                          C90634 * C89 +
                      ((C307 * C3892 + C90623 * C4162) * C3364 +
                       (C307 * C3901 + C90623 * C4168) * C90498) *
                          C90634 * C90 +
                      ((C307 * C3893 + C90623 * C4163) * C3364 +
                       (C307 * C3902 + C90623 * C4169) * C90498) *
                          C90634 * C91) *
                         C90579 -
                     ((C1119 * C90498 + C1118 * C3364) * C90634 * C91 +
                      (C1117 * C90498 + C1116 * C3364) * C90634 * C90 +
                      ((C307 * C839 + C90623 * C1098) * C90498 +
                       (C307 * C832 + C90623 * C1094) * C3364) *
                          C90634 * C89) *
                         C90753) *
                        C2566 +
                    ((((C307 * C2570 + C90623 * C2827) * C3364 +
                       (C307 * C2577 + C90623 * C2831) * C90498) *
                          C90634 * C89 +
                      (C2844 * C3364 + C2845 * C90498) * C90634 * C90 +
                      (C2846 * C3364 + C2847 * C90498) * C90634 * C91) *
                         C90753 -
                     (((C307 * C3903 + C90623 * C4170) * C90498 +
                       (C307 * C3894 + C90623 * C4164) * C3364) *
                          C90634 * C91 +
                      ((C307 * C3904 + C90623 * C4171) * C90498 +
                       (C307 * C3895 + C90623 * C4165) * C3364) *
                          C90634 * C90 +
                      ((C307 * C3905 + C90623 * C4172) * C90498 +
                       (C307 * C3896 + C90623 * C4166) * C3364) *
                          C90634 * C89) *
                         C90579) *
                        C2567)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C307 * C107 + C90623 * C308) * C826 +
                      (C307 * C116 + C90623 * C314) * C821 - C337 * C827 -
                      C338 * C822 + C339 * C828 + C340 * C823) *
                         C90634 * C89 +
                     (C337 * C826 + C338 * C821 - C339 * C827 - C340 * C822 +
                      C341 * C828 + C342 * C823) *
                         C90634 * C90 +
                     (C339 * C826 + C340 * C821 - C341 * C827 - C342 * C822 +
                      C343 * C828 + C344 * C823) *
                         C90634 * C91) *
                        C90753 +
                    ((C1984 * C827 -
                      ((C307 * C1707 + C90623 * C1966) * C821 +
                       (C307 * C1700 + C90623 * C1962) * C826) +
                      C1985 * C822 - C1986 * C828 - C1987 * C823) *
                         C90634 * C89 +
                     (C1986 * C827 - (C1985 * C821 + C1984 * C826) +
                      C1987 * C822 - C1988 * C828 - C1989 * C823) *
                         C90634 * C90 +
                     (C1988 * C827 - (C1987 * C821 + C1986 * C826) +
                      C1989 * C822 - (C307 * C1701 + C90623 * C1965) * C828 -
                      (C307 * C1711 + C90623 * C1970) * C823) *
                         C90634 * C91) *
                        C90579) *
                   C90541) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C307 * C107 + C90623 * C308) * C3364 +
                      (C307 * C116 + C90623 * C314) * C90498) *
                         C90634 * C89 +
                     (C337 * C3364 + C338 * C90498) * C90634 * C90 +
                     (C339 * C3364 + C340 * C90498) * C90634 * C91) *
                        C6159 -
                    ((C1987 * C90498 + C1986 * C3364) * C90634 * C91 +
                     (C1985 * C90498 + C1984 * C3364) * C90634 * C90 +
                     ((C307 * C1707 + C90623 * C1966) * C90498 +
                      (C307 * C1700 + C90623 * C1962) * C3364) *
                         C90634 * C89) *
                        C6160 +
                    (((C307 * C4656 + C90623 * C4913) * C3364 +
                      (C307 * C4663 + C90623 * C4917) * C90498) *
                         C90634 * C89 +
                     (C4930 * C3364 + C4931 * C90498) * C90634 * C90 +
                     (C4932 * C3364 + C4933 * C90498) * C90634 * C91) *
                        C6161 -
                    (((C307 * C6166 + C90623 * C6344) * C90498 +
                      (C307 * C6163 + C90623 * C6341) * C3364) *
                         C90634 * C91 +
                     ((C307 * C6167 + C90623 * C6345) * C90498 +
                      (C307 * C6164 + C90623 * C6342) * C3364) *
                         C90634 * C90 +
                     ((C307 * C6168 + C90623 * C6346) * C90498 +
                      (C307 * C6165 + C90623 * C6343) * C3364) *
                         C90634 * C89) *
                        C6162) *
                   C90541) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   (((C13730 * C107 + C13576 * C308 + C13731 * C832 +
                      C13577 * C1094 + C13732 * C2570 + C13578 * C2827) *
                         C826 +
                     (C13730 * C116 + C13576 * C314 + C13731 * C839 +
                      C13577 * C1098 + C13732 * C2577 + C13578 * C2831) *
                         C821 -
                     (C13732 * C2571 + C13578 * C2828 + C13731 * C829 +
                      C13577 * C1093 + C13730 * C108 + C13576 * C309) *
                         C827 -
                     (C13732 * C2578 + C13578 * C2832 + C13731 * C838 +
                      C13577 * C1099 + C13730 * C117 + C13576 * C315) *
                         C822 +
                     (C13730 * C109 + C13576 * C310 + C13731 * C830 +
                      C13577 * C1095 + C13732 * C2572 + C13578 * C2829) *
                         C828 +
                     (C13730 * C118 + C13576 * C316 + C13731 * C837 +
                      C13577 * C1100 + C13732 * C2579 + C13578 * C2833) *
                         C823) *
                        C90634 * C90485 * C90753 +
                    ((C13730 * C1697 + C13576 * C1961 + C13731 * C3892 +
                      C13577 * C4162 + C13732 * C3895 + C13578 * C4165) *
                         C827 -
                     ((C13732 * C3905 + C13578 * C4172 + C13731 * C3900 +
                       C13577 * C4167 + C13730 * C1707 + C13576 * C1966) *
                          C821 +
                      (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 +
                       C13577 * C4161 + C13730 * C1700 + C13576 * C1962) *
                          C826) +
                     (C13730 * C1706 + C13576 * C1967 + C13731 * C3901 +
                      C13577 * C4168 + C13732 * C3904 + C13578 * C4171) *
                         C822 -
                     (C13732 * C3894 + C13578 * C4164 + C13731 * C3893 +
                      C13577 * C4163 + C13730 * C1698 + C13576 * C1963) *
                         C828 -
                     (C13732 * C3903 + C13578 * C4170 + C13731 * C3902 +
                      C13577 * C4169 + C13730 * C1705 + C13576 * C1968) *
                         C823) *
                        C90634 * C90485 * C90579) *
                   C90541) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C13730 * C107 + C13576 * C308 + C13731 * C832 +
                       C13577 * C1094 + C13732 * C2570 + C13578 * C2827) *
                          C3364 +
                      (C13730 * C116 + C13576 * C314 + C13731 * C839 +
                       C13577 * C1098 + C13732 * C2577 + C13578 * C2831) *
                          C90498) *
                         C90634 * C90485 * C90753 -
                     ((C13732 * C3905 + C13578 * C4172 + C13731 * C3900 +
                       C13577 * C4167 + C13730 * C1707 + C13576 * C1966) *
                          C90498 +
                      (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 +
                       C13577 * C4161 + C13730 * C1700 + C13576 * C1962) *
                          C3364) *
                         C90634 * C90485 * C90579) *
                        C2565 +
                    (((C13730 * C3891 + C13576 * C4161 + C13731 * C3896 +
                       C13577 * C4166 + C13732 * C16835 + C13578 * C17131) *
                          C3364 +
                      (C13730 * C3900 + C13576 * C4167 + C13731 * C3905 +
                       C13577 * C4172 + C13732 * C16838 + C13578 * C17133) *
                          C90498) *
                         C90634 * C90485 * C90579 -
                     ((C13732 * C3370 + C13578 * C3548 + C13731 * C2577 +
                       C13577 * C2831 + C13730 * C839 + C13576 * C1098) *
                          C90498 +
                      (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 +
                       C13577 * C2827 + C13730 * C832 + C13576 * C1094) *
                          C3364) *
                         C90634 * C90485 * C90753) *
                        C2566 +
                    (((C13730 * C2570 + C13576 * C2827 + C13731 * C3367 +
                       C13577 * C3545 + C13732 * C15525 + C13578 * C15808) *
                          C3364 +
                      (C13730 * C2577 + C13576 * C2831 + C13731 * C3370 +
                       C13577 * C3548 + C13732 * C15528 + C13578 * C15810) *
                          C90498) *
                         C90634 * C90485 * C90753 -
                     ((C13732 * C16839 + C13578 * C17134 + C13731 * C16838 +
                       C13577 * C17133 + C13730 * C3905 + C13576 * C4172) *
                          C90498 +
                      (C13732 * C16836 + C13578 * C17132 + C13731 * C16835 +
                       C13577 * C17131 + C13730 * C3896 + C13576 * C4166) *
                          C3364) *
                         C90634 * C90485 * C90579) *
                        C2567)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C13730 * C107 + C13576 * C308 + C13731 * C832 +
                      C13577 * C1094 + C13732 * C2570 + C13578 * C2827) *
                         C3364 +
                     (C13730 * C116 + C13576 * C314 + C13731 * C839 +
                      C13577 * C1098 + C13732 * C2577 + C13578 * C2831) *
                         C90498) *
                        C90634 * C90485 * C6159 -
                    ((C13732 * C3905 + C13578 * C4172 + C13731 * C3900 +
                      C13577 * C4167 + C13730 * C1707 + C13576 * C1966) *
                         C90498 +
                     (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 +
                      C13577 * C4161 + C13730 * C1700 + C13576 * C1962) *
                         C3364) *
                        C90634 * C90485 * C6160 +
                    ((C13730 * C4656 + C13576 * C4913 + C13731 * C5471 +
                      C13577 * C5717 + C13732 * C17651 + C13578 * C17889) *
                         C3364 +
                     (C13730 * C4663 + C13576 * C4917 + C13731 * C5474 +
                      C13577 * C5720 + C13732 * C17654 + C13578 * C17891) *
                         C90498) *
                        C90634 * C90485 * C6161 -
                    ((C13732 * C19089 + C13578 * C19255 + C13731 * C19091 +
                      C13577 * C19256 + C13730 * C6168 + C13576 * C6346) *
                         C90498 +
                     (C13732 * C19087 + C13578 * C19253 + C13731 * C19088 +
                      C13577 * C19254 + C13730 * C6165 + C13576 * C6343) *
                         C3364) *
                        C90634 * C90485 * C6162) *
                   C90541) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[68] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C2660 +
            (C307 * C182 + C90623 * C394) * C2565 -
            (C307 * C832 + C90623 * C1094) * C2661 -
            (C307 * C927 + C90623 * C1195) * C2566 +
            (C307 * C2570 + C90623 * C2827) * C2662 +
            (C307 * C2663 + C90623 * C2921) * C2567) *
               C90634 * C89 +
           (C2926 + C2927 - C2928 - C2929 + C2930 + C2942) * C90634 * C90 +
           (C2933 + C2934 - C2935 - C2936 + C2937 + C2943) * C90634 * C91) *
              C90498 * C90753 +
          (((C307 * C3891 + C90623 * C4161) * C2661 -
            ((C307 * C1794 + C90623 * C2066) * C2565 +
             (C307 * C1700 + C90623 * C1962) * C2660) +
            (C307 * C3989 + C90623 * C4247) * C2566 -
            (C307 * C3896 + C90623 * C4166) * C2662 -
            (C307 * C3994 + C90623 * C4248) * C2567) *
               C90634 * C89 +
           ((C307 * C3892 + C90623 * C4162) * C2661 -
            (C2078 * C2565 + C1984 * C2660) +
            (C307 * C3990 + C90623 * C4249) * C2566 -
            (C307 * C3895 + C90623 * C4165) * C2662 -
            (C307 * C3993 + C90623 * C4250) * C2567) *
               C90634 * C90 +
           ((C307 * C3893 + C90623 * C4163) * C2661 -
            (C2079 * C2565 + C1986 * C2660) +
            (C307 * C3991 + C90623 * C4251) * C2566 -
            (C307 * C3894 + C90623 * C4164) * C2662 -
            (C307 * C3992 + C90623 * C4252) * C2567) *
               C90634 * C91) *
              C90498 * C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C181 +
             (C307 * C182 + C90623 * C394) * C90541) *
                C90634 * C89 +
            (C401 + C417) * C90634 * C90 + C423 * C91) *
               C821 -
           (C424 * C91 + (C418 + C404) * C90634 * C90 +
            (C417 + C401) * C90634 * C89) *
               C822 +
           (C423 * C89 + (C409 + C419) * C90634 * C90 +
            (C410 + C420) * C90634 * C91) *
               C823) *
              C90753 +
          (((C2069 + C2081) * C90634 * C89 + (C2072 + C2082) * C90634 * C90 +
            (C2075 + C2083) * C90634 * C91) *
               C822 -
           (C2085 * C91 + (C2081 + C2069) * C90634 * C90 +
            ((C307 * C1794 + C90623 * C2066) * C90541 +
             (C307 * C1700 + C90623 * C1962) * C181) *
                C90634 * C89) *
               C821 -
           (((C307 * C1795 + C90623 * C2067) * C90541 +
             (C307 * C1701 + C90623 * C1965) * C181) *
                C90634 * C91 +
            (C2083 + C2075) * C90634 * C90 + C2085 * C89) *
               C823) *
              C90579)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C181 +
            (C307 * C182 + C90623 * C394) * C90541) *
               C90634 * C89 +
           (C401 + C417) * C90634 * C90 + C423 * C91) *
              C90498 * C6159 -
          (C2085 * C91 + (C2081 + C2069) * C90634 * C90 +
           ((C307 * C1794 + C90623 * C2066) * C90541 +
            (C307 * C1700 + C90623 * C1962) * C181) *
               C90634 * C89) *
              C90498 * C6160 +
          (((C307 * C4656 + C90623 * C4913) * C181 +
            (C307 * C4746 + C90623 * C5007) * C90541) *
               C90634 * C89 +
           (C5012 + C5020) * C90634 * C90 + (C5015 + C5021) * C90634 * C91) *
              C90498 * C6161 -
          (((C307 * C6225 + C90623 * C6397) * C90541 +
            (C307 * C6163 + C90623 * C6341) * C181) *
               C90634 * C91 +
           ((C307 * C6226 + C90623 * C6398) * C90541 +
            (C307 * C6164 + C90623 * C6342) * C181) *
               C90634 * C90 +
           ((C307 * C6227 + C90623 * C6399) * C90541 +
            (C307 * C6165 + C90623 * C6343) * C181) *
               C90634 * C89) *
              C90498 * C6162)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
             C13732 * C2570 + C13578 * C2827) *
                C181 +
            (C13730 * C182 + C13576 * C394 + C13731 * C927 + C13577 * C1195 +
             C13732 * C2663 + C13578 * C2921) *
                C90541) *
               C90634 * C90485 * C821 -
           ((C13732 * C2664 + C13578 * C2922 + C13731 * C926 + C13577 * C1196 +
             C13730 * C183 + C13576 * C395) *
                C90541 +
            (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
             C13730 * C108 + C13576 * C309) *
                C181) *
               C90634 * C90485 * C822 +
           ((C13730 * C109 + C13576 * C310 + C13731 * C830 + C13577 * C1095 +
             C13732 * C2572 + C13578 * C2829) *
                C181 +
            (C13730 * C184 + C13576 * C396 + C13731 * C925 + C13577 * C1197 +
             C13732 * C2665 + C13578 * C2923) *
                C90541) *
               C90634 * C90485 * C823) *
              C90753 +
          (((C13730 * C1697 + C13576 * C1961 + C13731 * C3892 + C13577 * C4162 +
             C13732 * C3895 + C13578 * C4165) *
                C181 +
            (C13730 * C1791 + C13576 * C2063 + C13731 * C3990 + C13577 * C4249 +
             C13732 * C3993 + C13578 * C4250) *
                C90541) *
               C90634 * C90485 * C822 -
           ((C13732 * C3994 + C13578 * C4248 + C13731 * C3989 + C13577 * C4247 +
             C13730 * C1794 + C13576 * C2066) *
                C90541 +
            (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 + C13577 * C4161 +
             C13730 * C1700 + C13576 * C1962) *
                C181) *
               C90634 * C90485 * C821 -
           ((C13732 * C3992 + C13578 * C4252 + C13731 * C3991 + C13577 * C4251 +
             C13730 * C1792 + C13576 * C2064) *
                C90541 +
            (C13732 * C3894 + C13578 * C4164 + C13731 * C3893 + C13577 * C4163 +
             C13730 * C1698 + C13576 * C1963) *
                C181) *
               C90634 * C90485 * C823) *
              C90579)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C2660 +
           (C13730 * C182 + C13576 * C394 + C13731 * C927 + C13577 * C1195 +
            C13732 * C2663 + C13578 * C2921) *
               C2565 -
           (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
            C13730 * C832 + C13576 * C1094) *
               C2661 -
           (C13732 * C3433 + C13578 * C3599 + C13731 * C2663 + C13577 * C2921 +
            C13730 * C927 + C13576 * C1195) *
               C2566 +
           (C13730 * C2570 + C13576 * C2827 + C13731 * C3367 + C13577 * C3545 +
            C13732 * C15525 + C13578 * C15808) *
               C2662 +
           (C13730 * C2663 + C13576 * C2921 + C13731 * C3433 + C13577 * C3599 +
            C13732 * C15634 + C13578 * C15886) *
               C2567) *
              C90634 * C90485 * C90498 * C90753 +
          ((C13730 * C3891 + C13576 * C4161 + C13731 * C3896 + C13577 * C4166 +
            C13732 * C16835 + C13578 * C17131) *
               C2661 -
           ((C13732 * C3994 + C13578 * C4248 + C13731 * C3989 + C13577 * C4247 +
             C13730 * C1794 + C13576 * C2066) *
                C2565 +
            (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 + C13577 * C4161 +
             C13730 * C1700 + C13576 * C1962) *
                C2660) +
           (C13730 * C3989 + C13576 * C4247 + C13731 * C3994 + C13577 * C4248 +
            C13732 * C16942 + C13578 * C17209) *
               C2566 -
           (C13732 * C16836 + C13578 * C17132 + C13731 * C16835 +
            C13577 * C17131 + C13730 * C3896 + C13576 * C4166) *
               C2662 -
           (C13732 * C16943 + C13578 * C17210 + C13731 * C16942 +
            C13577 * C17209 + C13730 * C3994 + C13576 * C4248) *
               C2567) *
              C90634 * C90485 * C90498 * C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C181 +
           (C13730 * C182 + C13576 * C394 + C13731 * C927 + C13577 * C1195 +
            C13732 * C2663 + C13578 * C2921) *
               C90541) *
              C90634 * C90485 * C90498 * C6159 -
          ((C13732 * C3994 + C13578 * C4248 + C13731 * C3989 + C13577 * C4247 +
            C13730 * C1794 + C13576 * C2066) *
               C90541 +
           (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 + C13577 * C4161 +
            C13730 * C1700 + C13576 * C1962) *
               C181) *
              C90634 * C90485 * C90498 * C6160 +
          ((C13730 * C4656 + C13576 * C4913 + C13731 * C5471 + C13577 * C5717 +
            C13732 * C17651 + C13578 * C17889) *
               C181 +
           (C13730 * C4746 + C13576 * C5007 + C13731 * C5557 + C13577 * C5795 +
            C13732 * C17733 + C13578 * C17967) *
               C90541) *
              C90634 * C90485 * C90498 * C6161 -
          ((C13732 * C19145 + C13578 * C19307 + C13731 * C19146 +
            C13577 * C19308 + C13730 * C6227 + C13576 * C6399) *
               C90541 +
           (C13732 * C19087 + C13578 * C19253 + C13731 * C19088 +
            C13577 * C19254 + C13730 * C6165 + C13576 * C6343) *
               C181) *
              C90634 * C90485 * C90498 * C6162)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[68] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C1875 +
            (C307 * C245 + C90623 * C474) * C90753 -
            (C307 * C1700 + C90623 * C1962) * C1876 -
            (C307 * C1879 + C90623 * C2159) * C90579) *
               C90634 * C89 +
           (C2165 + C2166 - C2167 - C2184) * C90634 * C90 + C2189 * C91) *
              C2565 +
          (((C307 * C3891 + C90623 * C4161) * C1876 -
            ((C307 * C1011 + C90623 * C1301) * C90753 +
             (C307 * C832 + C90623 * C1094) * C1875) +
            (C307 * C4075 + C90623 * C4327) * C90579) *
               C90634 * C89 +
           ((C307 * C3892 + C90623 * C4162) * C1876 -
            (C1315 * C90753 + C1116 * C1875) +
            (C307 * C4076 + C90623 * C4328) * C90579) *
               C90634 * C90 +
           ((C307 * C3893 + C90623 * C4163) * C1876 -
            (C1314 * C90753 + C1118 * C1875) +
            (C307 * C4077 + C90623 * C4329) * C90579) *
               C90634 * C91) *
              C2566 +
          (((C307 * C2570 + C90623 * C2827) * C1875 +
            (C307 * C2745 + C90623 * C3017) * C90753 -
            (C307 * C3896 + C90623 * C4166) * C1876 -
            (C307 * C4080 + C90623 * C4330) * C90579) *
               C90634 * C89 +
           (C2844 * C1875 + C3028 * C90753 -
            (C307 * C3895 + C90623 * C4165) * C1876 -
            (C307 * C4079 + C90623 * C4331) * C90579) *
               C90634 * C90 +
           (C2846 * C1875 + C3029 * C90753 -
            (C307 * C3894 + C90623 * C4164) * C1876 -
            (C307 * C4078 + C90623 * C4332) * C90579) *
               C90634 * C91) *
              C2567) *
         C90498) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C1875 +
            (C307 * C245 + C90623 * C474) * C90753 -
            (C307 * C1700 + C90623 * C1962) * C1876 -
            (C307 * C1879 + C90623 * C2159) * C90579) *
               C90634 * C89 +
           (C2165 + C2166 - C2167 - C2184) * C90634 * C90 + C2189 * C91) *
              C90541 * C821 +
          ((C2167 - (C2166 + C2165) + C2184) * C90634 * C89 +
           (C2172 - (C2171 + C2170) + C2186) * C90634 * C90 +
           (C2175 - (C2176 + C2177) + C2187) * C90634 * C91) *
              C90541 * C822 +
          (C2189 * C89 + (C2177 + C2176 - C2175 - C2187) * C90634 * C90 +
           (C343 * C1875 + C496 * C90753 -
            (C307 * C1701 + C90623 * C1965) * C1876 -
            (C307 * C1881 + C90623 * C2163) * C90579) *
               C90634 * C91) *
              C90541 * C823)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C307 * C107 + C90623 * C308) * C6281 +
           (C307 * C245 + C90623 * C474) * C6159 -
           (C307 * C1700 + C90623 * C1962) * C6282 -
           (C307 * C1879 + C90623 * C2159) * C6160 +
           (C307 * C4656 + C90623 * C4913) * C6283 +
           (C307 * C4831 + C90623 * C5095) * C6161 -
           (C307 * C6165 + C90623 * C6343) * C6284 -
           (C307 * C6287 + C90623 * C6450) * C6162) *
              C90634 * C89 +
          (C337 * C6281 + C493 * C6159 - C1984 * C6282 - C2180 * C6160 +
           C4930 * C6283 + C5114 * C6161 -
           (C307 * C6164 + C90623 * C6342) * C6284 -
           (C307 * C6286 + C90623 * C6451) * C6162) *
              C90634 * C90 +
          (C339 * C6281 + C494 * C6159 - C1986 * C6282 - C2182 * C6160 +
           C4932 * C6283 + C5115 * C6161 -
           (C307 * C6163 + C90623 * C6341) * C6284 -
           (C307 * C6285 + C90623 * C6452) * C6162) *
              C90634 * C91) *
         C90541 * C90498) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C1875 +
           (C13730 * C245 + C13576 * C474 + C13731 * C1011 + C13577 * C1301 +
            C13732 * C2745 + C13578 * C3017) *
               C90753 -
           (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 + C13577 * C4161 +
            C13730 * C1700 + C13576 * C1962) *
               C1876 -
           (C13732 * C4080 + C13578 * C4330 + C13731 * C4075 + C13577 * C4327 +
            C13730 * C1879 + C13576 * C2159) *
               C90579) *
              C90634 * C90485 * C90541 * C821 +
          ((C13730 * C1697 + C13576 * C1961 + C13731 * C3892 + C13577 * C4162 +
            C13732 * C3895 + C13578 * C4165) *
               C1876 -
           ((C13732 * C2746 + C13578 * C3018 + C13731 * C1010 + C13577 * C1300 +
             C13730 * C246 + C13576 * C475) *
                C90753 +
            (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
             C13730 * C108 + C13576 * C309) *
                C1875) +
           (C13730 * C1878 + C13576 * C2160 + C13731 * C4076 + C13577 * C4328 +
            C13732 * C4079 + C13578 * C4331) *
               C90579) *
              C90634 * C90485 * C90541 * C822 +
          ((C13730 * C109 + C13576 * C310 + C13731 * C830 + C13577 * C1095 +
            C13732 * C2572 + C13578 * C2829) *
               C1875 +
           (C13730 * C247 + C13576 * C476 + C13731 * C1009 + C13577 * C1299 +
            C13732 * C2747 + C13578 * C3019) *
               C90753 -
           (C13732 * C3894 + C13578 * C4164 + C13731 * C3893 + C13577 * C4163 +
            C13730 * C1698 + C13576 * C1963) *
               C1876 -
           (C13732 * C4078 + C13578 * C4332 + C13731 * C4077 + C13577 * C4329 +
            C13730 * C1877 + C13576 * C2161) *
               C90579) *
              C90634 * C90485 * C90541 * C823)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C1875 +
           (C13730 * C245 + C13576 * C474 + C13731 * C1011 + C13577 * C1301 +
            C13732 * C2745 + C13578 * C3017) *
               C90753 -
           (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 + C13577 * C4161 +
            C13730 * C1700 + C13576 * C1962) *
               C1876 -
           (C13732 * C4080 + C13578 * C4330 + C13731 * C4075 + C13577 * C4327 +
            C13730 * C1879 + C13576 * C2159) *
               C90579) *
              C90634 * C90485 * C2565 +
          ((C13730 * C3891 + C13576 * C4161 + C13731 * C3896 + C13577 * C4166 +
            C13732 * C16835 + C13578 * C17131) *
               C1876 -
           ((C13732 * C3489 + C13578 * C3654 + C13731 * C2745 + C13577 * C3017 +
             C13730 * C1011 + C13576 * C1301) *
                C90753 +
            (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
             C13730 * C832 + C13576 * C1094) *
                C1875) +
           (C13730 * C4075 + C13576 * C4327 + C13731 * C4080 + C13577 * C4330 +
            C13732 * C17029 + C13578 * C17285) *
               C90579) *
              C90634 * C90485 * C2566 +
          ((C13730 * C2570 + C13576 * C2827 + C13731 * C3367 + C13577 * C3545 +
            C13732 * C15525 + C13578 * C15808) *
               C1875 +
           (C13730 * C2745 + C13576 * C3017 + C13731 * C3489 + C13577 * C3654 +
            C13732 * C15718 + C13578 * C15962) *
               C90753 -
           (C13732 * C16836 + C13578 * C17132 + C13731 * C16835 +
            C13577 * C17131 + C13730 * C3896 + C13576 * C4166) *
               C1876 -
           (C13732 * C17030 + C13578 * C17286 + C13731 * C17029 +
            C13577 * C17285 + C13730 * C4080 + C13576 * C4330) *
               C90579) *
              C90634 * C90485 * C2567) *
         C90498) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
           C13732 * C2570 + C13578 * C2827) *
              C6281 +
          (C13730 * C245 + C13576 * C474 + C13731 * C1011 + C13577 * C1301 +
           C13732 * C2745 + C13578 * C3017) *
              C6159 -
          (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 + C13577 * C4161 +
           C13730 * C1700 + C13576 * C1962) *
              C6282 -
          (C13732 * C4080 + C13578 * C4330 + C13731 * C4075 + C13577 * C4327 +
           C13730 * C1879 + C13576 * C2159) *
              C6160 +
          (C13730 * C4656 + C13576 * C4913 + C13731 * C5471 + C13577 * C5717 +
           C13732 * C17651 + C13578 * C17889) *
              C6283 +
          (C13730 * C4831 + C13576 * C5095 + C13731 * C5637 + C13577 * C5872 +
           C13732 * C17811 + C13578 * C18043) *
              C6161 -
          (C13732 * C19087 + C13578 * C19253 + C13731 * C19088 +
           C13577 * C19254 + C13730 * C6165 + C13576 * C6343) *
              C6284 -
          (C13732 * C19200 + C13578 * C19359 + C13731 * C19199 +
           C13577 * C19360 + C13730 * C6287 + C13576 * C6450) *
              C6162) *
         C90634 * C90485 * C90541 * C90498) /
            (p * q * std::sqrt(p + q));
    d2eezx[68] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C90634 * C555) * C3364 +
                       (C554 * C116 + C90634 * C561) * C90498) *
                          C89 +
                      (C584 * C3364 + C585 * C90498) * C90 +
                      (C586 * C3364 + C587 * C90498) * C91) *
                         C90623 * C90753 -
                     ((C2289 * C90498 + C2288 * C3364) * C91 +
                      (C2287 * C90498 + C2286 * C3364) * C90 +
                      ((C554 * C1707 + C90634 * C2268) * C90498 +
                       (C554 * C1700 + C90634 * C2264) * C3364) *
                          C89) *
                         C90623 * C90579) *
                        C2565 +
                    ((((C554 * C3891 + C90634 * C4407) * C3364 +
                       (C554 * C3900 + C90634 * C4413) * C90498) *
                          C89 +
                      ((C554 * C3892 + C90634 * C4408) * C3364 +
                       (C554 * C3901 + C90634 * C4414) * C90498) *
                          C90 +
                      ((C554 * C3893 + C90634 * C4409) * C3364 +
                       (C554 * C3902 + C90634 * C4415) * C90498) *
                          C91) *
                         C90623 * C90579 -
                     ((C1421 * C90498 + C1420 * C3364) * C91 +
                      (C1419 * C90498 + C1418 * C3364) * C90 +
                      ((C554 * C839 + C90634 * C1400) * C90498 +
                       (C554 * C832 + C90634 * C1396) * C3364) *
                          C89) *
                         C90623 * C90753) *
                        C2566 +
                    ((((C554 * C2570 + C90634 * C3105) * C3364 +
                       (C554 * C2577 + C90634 * C3109) * C90498) *
                          C89 +
                      (C3122 * C3364 + C3123 * C90498) * C90 +
                      (C3124 * C3364 + C3125 * C90498) * C91) *
                         C90623 * C90753 -
                     (((C554 * C3903 + C90634 * C4416) * C90498 +
                       (C554 * C3894 + C90634 * C4410) * C3364) *
                          C91 +
                      ((C554 * C3904 + C90634 * C4417) * C90498 +
                       (C554 * C3895 + C90634 * C4411) * C3364) *
                          C90 +
                      ((C554 * C3905 + C90634 * C4418) * C90498 +
                       (C554 * C3896 + C90634 * C4412) * C3364) *
                          C89) *
                         C90623 * C90579) *
                        C2567)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C90634 * C555) * C826 +
                      (C554 * C116 + C90634 * C561) * C821 - C584 * C827 -
                      C585 * C822 + C586 * C828 + C587 * C823) *
                         C89 +
                     (C584 * C826 + C585 * C821 - C586 * C827 - C587 * C822 +
                      C588 * C828 + C589 * C823) *
                         C90 +
                     (C586 * C826 + C587 * C821 - C588 * C827 - C589 * C822 +
                      C590 * C828 + C591 * C823) *
                         C91) *
                        C90623 * C90753 +
                    ((C2286 * C827 -
                      ((C554 * C1707 + C90634 * C2268) * C821 +
                       (C554 * C1700 + C90634 * C2264) * C826) +
                      C2287 * C822 - C2288 * C828 - C2289 * C823) *
                         C89 +
                     (C2288 * C827 - (C2287 * C821 + C2286 * C826) +
                      C2289 * C822 - C2290 * C828 - C2291 * C823) *
                         C90 +
                     (C2290 * C827 - (C2289 * C821 + C2288 * C826) +
                      C2291 * C822 - (C554 * C1701 + C90634 * C2267) * C828 -
                      (C554 * C1711 + C90634 * C2272) * C823) *
                         C91) *
                        C90623 * C90579) *
                   C90541) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C90634 * C555) * C3364 +
                      (C554 * C116 + C90634 * C561) * C90498) *
                         C89 +
                     (C584 * C3364 + C585 * C90498) * C90 +
                     (C586 * C3364 + C587 * C90498) * C91) *
                        C90623 * C6159 -
                    ((C2289 * C90498 + C2288 * C3364) * C91 +
                     (C2287 * C90498 + C2286 * C3364) * C90 +
                     ((C554 * C1707 + C90634 * C2268) * C90498 +
                      (C554 * C1700 + C90634 * C2264) * C3364) *
                         C89) *
                        C90623 * C6160 +
                    (((C554 * C4656 + C90634 * C5191) * C3364 +
                      (C554 * C4663 + C90634 * C5195) * C90498) *
                         C89 +
                     (C5208 * C3364 + C5209 * C90498) * C90 +
                     (C5210 * C3364 + C5211 * C90498) * C91) *
                        C90623 * C6161 -
                    (((C554 * C6166 + C90634 * C6506) * C90498 +
                      (C554 * C6163 + C90634 * C6503) * C3364) *
                         C91 +
                     ((C554 * C6167 + C90634 * C6507) * C90498 +
                      (C554 * C6164 + C90634 * C6504) * C3364) *
                         C90 +
                     ((C554 * C6168 + C90634 * C6508) * C90498 +
                      (C554 * C6165 + C90634 * C6505) * C3364) *
                         C89) *
                        C90623 * C6162) *
                   C90541) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C90634 * C555) * C826 +
                      (C554 * C116 + C90634 * C561) * C821 - C584 * C827 -
                      C585 * C822 + C586 * C828 + C587 * C823) *
                         C90485 * C13576 +
                     (C14618 + C14619 - C14602 - C14603 + C14604 + C14605) *
                         C90485 * C13577 +
                     (C14620 + C14621 - C14610 - C14611 + C14612 + C14613) *
                         C90485 * C13578) *
                        C90753 +
                    ((C2286 * C827 -
                      ((C554 * C1707 + C90634 * C2268) * C821 +
                       (C554 * C1700 + C90634 * C2264) * C826) +
                      C2287 * C822 - C2288 * C828 - C2289 * C823) *
                         C90485 * C13576 +
                     (C8771 * C827 -
                      ((C554 * C3900 + C90634 * C4413) * C821 +
                       (C554 * C3891 + C90634 * C4407) * C826) +
                      C8772 * C822 - C8773 * C828 - C8774 * C823) *
                         C90485 * C13577 +
                     ((C554 * C3895 + C90634 * C4411) * C827 -
                      ((C554 * C3905 + C90634 * C4418) * C821 +
                       (C554 * C3896 + C90634 * C4412) * C826) +
                      (C554 * C3904 + C90634 * C4417) * C822 -
                      (C554 * C3894 + C90634 * C4410) * C828 -
                      (C554 * C3903 + C90634 * C4416) * C823) *
                         C90485 * C13578) *
                        C90579) *
                   C90541) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C90634 * C555) * C3364 +
                       (C554 * C116 + C90634 * C561) * C90498) *
                          C90485 * C13576 +
                      (C16632 + C16633) * C90485 * C13577 + C16646 * C13578) *
                         C90753 -
                     (C17391 * C13578 + (C17386 + C17387) * C90485 * C13577 +
                      ((C554 * C1707 + C90634 * C2268) * C90498 +
                       (C554 * C1700 + C90634 * C2264) * C3364) *
                          C90485 * C13576) *
                         C90579) *
                        C2565 +
                    (((C17387 + C17386) * C90485 * C13576 +
                      (C17385 + C17384) * C90485 * C13577 +
                      (C17388 + C17389) * C90485 * C13578) *
                         C90579 -
                     (C16647 * C13578 + (C16635 + C16634) * C90485 * C13577 +
                      (C16633 + C16632) * C90485 * C13576) *
                         C90753) *
                        C2566 +
                    ((C16646 * C13576 + (C16637 + C16636) * C90485 * C13577 +
                      (C16648 + C16649) * C90485 * C13578) *
                         C90753 -
                     (((C554 * C16839 + C90634 * C17364) * C90498 +
                       (C554 * C16836 + C90634 * C17362) * C3364) *
                          C90485 * C13578 +
                      (C17389 + C17388) * C90485 * C13577 + C17391 * C13576) *
                         C90579) *
                        C2567)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C90634 * C555) * C3364 +
                      (C554 * C116 + C90634 * C561) * C90498) *
                         C90485 * C13576 +
                     (C16632 + C16633) * C90485 * C13577 + C16646 * C13578) *
                        C6159 -
                    (C17391 * C13578 + (C17386 + C17387) * C90485 * C13577 +
                     ((C554 * C1707 + C90634 * C2268) * C90498 +
                      (C554 * C1700 + C90634 * C2264) * C3364) *
                         C90485 * C13576) *
                        C6160 +
                    (((C554 * C4656 + C90634 * C5191) * C3364 +
                      (C554 * C4663 + C90634 * C5195) * C90498) *
                         C90485 * C13576 +
                     (C18860 + C18861) * C90485 * C13577 +
                     (C18862 + C18863) * C90485 * C13578) *
                        C6161 -
                    (((C554 * C19089 + C90634 * C19413) * C90498 +
                      (C554 * C19087 + C90634 * C19411) * C3364) *
                         C90485 * C13578 +
                     ((C554 * C19091 + C90634 * C19414) * C90498 +
                      (C554 * C19088 + C90634 * C19412) * C3364) *
                         C90485 * C13577 +
                     ((C554 * C6168 + C90634 * C6508) * C90498 +
                      (C554 * C6165 + C90634 * C6505) * C3364) *
                         C90485 * C13576) *
                        C6162) *
                   C90541) /
                      (p * q * std::sqrt(p + q));
    d2eezy[68] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C2660 +
            (C554 * C182 + C90634 * C641) * C2565 -
            (C554 * C832 + C90634 * C1396) * C2661 -
            (C554 * C927 + C90634 * C1497) * C2566 +
            (C554 * C2570 + C90634 * C3105) * C2662 +
            (C554 * C2663 + C90634 * C3199) * C2567) *
               C89 +
           (C3204 + C3205 - C3206 - C3207 + C3208 + C3220) * C90 +
           (C3211 + C3212 - C3213 - C3214 + C3215 + C3221) * C91) *
              C90623 * C90498 * C90753 +
          (((C554 * C3891 + C90634 * C4407) * C2661 -
            ((C554 * C1794 + C90634 * C2368) * C2565 +
             (C554 * C1700 + C90634 * C2264) * C2660) +
            (C554 * C3989 + C90634 * C4493) * C2566 -
            (C554 * C3896 + C90634 * C4412) * C2662 -
            (C554 * C3994 + C90634 * C4494) * C2567) *
               C89 +
           ((C554 * C3892 + C90634 * C4408) * C2661 -
            (C2380 * C2565 + C2286 * C2660) +
            (C554 * C3990 + C90634 * C4495) * C2566 -
            (C554 * C3895 + C90634 * C4411) * C2662 -
            (C554 * C3993 + C90634 * C4496) * C2567) *
               C90 +
           ((C554 * C3893 + C90634 * C4409) * C2661 -
            (C2381 * C2565 + C2288 * C2660) +
            (C554 * C3991 + C90634 * C4497) * C2566 -
            (C554 * C3894 + C90634 * C4410) * C2662 -
            (C554 * C3992 + C90634 * C4498) * C2567) *
               C91) *
              C90623 * C90498 * C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C181 +
             (C554 * C182 + C90634 * C641) * C90541) *
                C89 +
            (C648 + C664) * C90 + C668 * C91) *
               C90623 * C821 -
           (C669 * C91 + (C665 + C651) * C90 + (C664 + C648) * C89) * C90623 *
               C822 +
           (C668 * C89 + (C656 + C666) * C90 + (C657 + C667) * C91) * C90623 *
               C823) *
              C90753 +
          (((C2371 + C2383) * C89 + (C2374 + C2384) * C90 +
            (C2377 + C2385) * C91) *
               C90623 * C822 -
           (C2386 * C91 + (C2383 + C2371) * C90 +
            ((C554 * C1794 + C90634 * C2368) * C90541 +
             (C554 * C1700 + C90634 * C2264) * C181) *
                C89) *
               C90623 * C821 -
           (((C554 * C1795 + C90634 * C2369) * C90541 +
             (C554 * C1701 + C90634 * C2267) * C181) *
                C91 +
            (C2385 + C2377) * C90 + C2386 * C89) *
               C90623 * C823) *
              C90579)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C181 +
            (C554 * C182 + C90634 * C641) * C90541) *
               C89 +
           (C648 + C664) * C90 + C668 * C91) *
              C90623 * C90498 * C6159 -
          (C2386 * C91 + (C2383 + C2371) * C90 +
           ((C554 * C1794 + C90634 * C2368) * C90541 +
            (C554 * C1700 + C90634 * C2264) * C181) *
               C89) *
              C90623 * C90498 * C6160 +
          (((C554 * C4656 + C90634 * C5191) * C181 +
            (C554 * C4746 + C90634 * C5285) * C90541) *
               C89 +
           (C5290 + C5298) * C90 + (C5293 + C5299) * C91) *
              C90623 * C90498 * C6161 -
          (((C554 * C6225 + C90634 * C6559) * C90541 +
            (C554 * C6163 + C90634 * C6503) * C181) *
               C91 +
           ((C554 * C6226 + C90634 * C6560) * C90541 +
            (C554 * C6164 + C90634 * C6504) * C181) *
               C90 +
           ((C554 * C6227 + C90634 * C6561) * C90541 +
            (C554 * C6165 + C90634 * C6505) * C181) *
               C89) *
              C90623 * C90498 * C6162)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C181 +
             (C554 * C182 + C90634 * C641) * C90541) *
                C90485 * C13576 +
            (C14614 * C181 + C14700 * C90541) * C90485 * C13577 +
            (C14616 * C181 + C14701 * C90541) * C90485 * C13578) *
               C821 -
           ((C3218 * C90541 + C3122 * C181) * C90485 * C13578 +
            (C1518 * C90541 + C1418 * C181) * C90485 * C13577 +
            (C664 + C648) * C90485 * C13576) *
               C822 +
           (C668 * C90485 * C13576 +
            (C1420 * C181 + C1520 * C90541) * C90485 * C13577 +
            (C3124 * C181 + C3219 * C90541) * C90485 * C13578) *
               C823) *
              C90753 +
          (((C2371 + C2383) * C90485 * C13576 +
            (C8771 * C181 + C8884 * C90541) * C90485 * C13577 +
            ((C554 * C3895 + C90634 * C4411) * C181 +
             (C554 * C3993 + C90634 * C4496) * C90541) *
                C90485 * C13578) *
               C822 -
           (((C554 * C3994 + C90634 * C4494) * C90541 +
             (C554 * C3896 + C90634 * C4412) * C181) *
                C90485 * C13578 +
            ((C554 * C3989 + C90634 * C4493) * C90541 +
             (C554 * C3891 + C90634 * C4407) * C181) *
                C90485 * C13577 +
            ((C554 * C1794 + C90634 * C2368) * C90541 +
             (C554 * C1700 + C90634 * C2264) * C181) *
                C90485 * C13576) *
               C821 -
           (((C554 * C3992 + C90634 * C4498) * C90541 +
             (C554 * C3894 + C90634 * C4410) * C181) *
                C90485 * C13578 +
            (C8885 * C90541 + C8773 * C181) * C90485 * C13577 +
            C2386 * C90485 * C13576) *
               C823) *
              C90579)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C2660 +
            (C554 * C182 + C90634 * C641) * C2565 - C14614 * C2661 -
            C14700 * C2566 + C14616 * C2662 + C14701 * C2567) *
               C90485 * C13576 +
           (C14614 * C2660 + C14700 * C2565 - C14616 * C2661 - C14701 * C2566 +
            C16062 * C2662 + C16151 * C2567) *
               C90485 * C13577 +
           (C14616 * C2660 + C14701 * C2565 - C16062 * C2661 - C16151 * C2566 +
            C16644 * C2662 + C16703 * C2567) *
               C90485 * C13578) *
              C90498 * C90753 +
          ((C17381 * C2661 -
            ((C554 * C1794 + C90634 * C2368) * C2565 +
             (C554 * C1700 + C90634 * C2264) * C2660) +
            C17474 * C2566 - C17379 * C2662 - C17475 * C2567) *
               C90485 * C13576 +
           (C17379 * C2661 - (C17474 * C2565 + C17381 * C2660) +
            C17475 * C2566 - C17382 * C2662 - C17476 * C2567) *
               C90485 * C13577 +
           (C17382 * C2661 - (C17475 * C2565 + C17379 * C2660) +
            C17476 * C2566 - (C554 * C16836 + C90634 * C17362) * C2662 -
            (C554 * C16943 + C90634 * C17466) * C2567) *
               C90485 * C13578) *
              C90498 * C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C181 +
            (C554 * C182 + C90634 * C641) * C90541) *
               C90485 * C13576 +
           (C14614 * C181 + C14700 * C90541) * C90485 * C13577 +
           (C14616 * C181 + C14701 * C90541) * C90485 * C13578) *
              C90498 * C6159 -
          ((C17475 * C90541 + C17379 * C181) * C90485 * C13578 +
           (C17474 * C90541 + C17381 * C181) * C90485 * C13577 +
           ((C554 * C1794 + C90634 * C2368) * C90541 +
            (C554 * C1700 + C90634 * C2264) * C181) *
               C90485 * C13576) *
              C90498 * C6160 +
          (((C554 * C4656 + C90634 * C5191) * C181 +
            (C554 * C4746 + C90634 * C5285) * C90541) *
               C90485 * C13576 +
           (C18856 * C181 + C18943 * C90541) * C90485 * C13577 +
           (C18858 * C181 + C18944 * C90541) * C90485 * C13578) *
              C90498 * C6161 -
          (((C554 * C19145 + C90634 * C19465) * C90541 +
            (C554 * C19087 + C90634 * C19411) * C181) *
               C90485 * C13578 +
           ((C554 * C19146 + C90634 * C19466) * C90541 +
            (C554 * C19088 + C90634 * C19412) * C181) *
               C90485 * C13577 +
           ((C554 * C6227 + C90634 * C6561) * C90541 +
            (C554 * C6165 + C90634 * C6505) * C181) *
               C90485 * C13576) *
              C90498 * C6162)) /
            (p * q * std::sqrt(p + q));
    d2eezz[68] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C90634 * C555) * C1875 +
                      (C554 * C245 + C90634 * C719) * C90753 -
                      (C554 * C1700 + C90634 * C2264) * C1876 -
                      (C554 * C1879 + C90634 * C2460) * C90579) *
                         C89 +
                     (C2466 + C2467 - C2468 - C2485) * C90 + C2489 * C91) *
                        C90623 * C2565 +
                    (((C554 * C3891 + C90634 * C4407) * C1876 -
                      ((C554 * C1011 + C90634 * C1602) * C90753 +
                       (C554 * C832 + C90634 * C1396) * C1875) +
                      (C554 * C4075 + C90634 * C4573) * C90579) *
                         C89 +
                     ((C554 * C3892 + C90634 * C4408) * C1876 -
                      (C1616 * C90753 + C1418 * C1875) +
                      (C554 * C4076 + C90634 * C4574) * C90579) *
                         C90 +
                     ((C554 * C3893 + C90634 * C4409) * C1876 -
                      (C1615 * C90753 + C1420 * C1875) +
                      (C554 * C4077 + C90634 * C4575) * C90579) *
                         C91) *
                        C90623 * C2566 +
                    (((C554 * C2570 + C90634 * C3105) * C1875 +
                      (C554 * C2745 + C90634 * C3295) * C90753 -
                      (C554 * C3896 + C90634 * C4412) * C1876 -
                      (C554 * C4080 + C90634 * C4576) * C90579) *
                         C89 +
                     (C3122 * C1875 + C3306 * C90753 -
                      (C554 * C3895 + C90634 * C4411) * C1876 -
                      (C554 * C4079 + C90634 * C4577) * C90579) *
                         C90 +
                     (C3124 * C1875 + C3307 * C90753 -
                      (C554 * C3894 + C90634 * C4410) * C1876 -
                      (C554 * C4078 + C90634 * C4578) * C90579) *
                         C91) *
                        C90623 * C2567) *
                   C90498) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C90634 * C555) * C1875 +
                      (C554 * C245 + C90634 * C719) * C90753 -
                      (C554 * C1700 + C90634 * C2264) * C1876 -
                      (C554 * C1879 + C90634 * C2460) * C90579) *
                         C89 +
                     (C2466 + C2467 - C2468 - C2485) * C90 + C2489 * C91) *
                        C90623 * C90541 * C821 +
                    ((C2468 - (C2467 + C2466) + C2485) * C89 +
                     (C2473 - (C2472 + C2471) + C2487) * C90 +
                     (C2476 - (C2477 + C2478) + C2488) * C91) *
                        C90623 * C90541 * C822 +
                    (C2489 * C89 + (C2478 + C2477 - C2476 - C2488) * C90 +
                     (C590 * C1875 + C741 * C90753 -
                      (C554 * C1701 + C90634 * C2267) * C1876 -
                      (C554 * C1881 + C90634 * C2464) * C90579) *
                         C91) *
                        C90623 * C90541 * C823)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C554 * C107 + C90634 * C555) * C6281 +
                     (C554 * C245 + C90634 * C719) * C6159 -
                     (C554 * C1700 + C90634 * C2264) * C6282 -
                     (C554 * C1879 + C90634 * C2460) * C6160 +
                     (C554 * C4656 + C90634 * C5191) * C6283 +
                     (C554 * C4831 + C90634 * C5373) * C6161 -
                     (C554 * C6165 + C90634 * C6505) * C6284 -
                     (C554 * C6287 + C90634 * C6612) * C6162) *
                        C89 +
                    (C584 * C6281 + C738 * C6159 - C2286 * C6282 -
                     C2481 * C6160 + C5208 * C6283 + C5392 * C6161 -
                     (C554 * C6164 + C90634 * C6504) * C6284 -
                     (C554 * C6286 + C90634 * C6613) * C6162) *
                        C90 +
                    (C586 * C6281 + C739 * C6159 - C2288 * C6282 -
                     C2483 * C6160 + C5210 * C6283 + C5393 * C6161 -
                     (C554 * C6163 + C90634 * C6503) * C6284 -
                     (C554 * C6285 + C90634 * C6614) * C6162) *
                        C91) *
                   C90623 * C90541 * C90498) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C90634 * C555) * C1875 +
                      (C554 * C245 + C90634 * C719) * C90753 -
                      (C554 * C1700 + C90634 * C2264) * C1876 -
                      (C554 * C1879 + C90634 * C2460) * C90579) *
                         C90485 * C13576 +
                     (C14614 * C1875 + C14782 * C90753 -
                      (C554 * C3891 + C90634 * C4407) * C1876 -
                      (C554 * C4075 + C90634 * C4573) * C90579) *
                         C90485 * C13577 +
                     (C14616 * C1875 + C14783 * C90753 -
                      (C554 * C3896 + C90634 * C4412) * C1876 -
                      (C554 * C4080 + C90634 * C4576) * C90579) *
                         C90485 * C13578) *
                        C90541 * C821 +
                    ((C2468 - (C2467 + C2466) + C2485) * C90485 * C13576 +
                     (C8987 - (C8988 + C8989) + C8999) * C90485 * C13577 +
                     ((C554 * C3895 + C90634 * C4411) * C1876 -
                      (C3306 * C90753 + C3122 * C1875) +
                      (C554 * C4079 + C90634 * C4577) * C90579) *
                         C90485 * C13578) *
                        C90541 * C822 +
                    (C2489 * C90485 * C13576 +
                     (C8994 + C8993 - C8992 - C9000) * C90485 * C13577 +
                     (C3124 * C1875 + C3307 * C90753 -
                      (C554 * C3894 + C90634 * C4410) * C1876 -
                      (C554 * C4078 + C90634 * C4578) * C90579) *
                         C90485 * C13578) *
                        C90541 * C823)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C90634 * C555) * C1875 +
                      (C554 * C245 + C90634 * C719) * C90753 -
                      (C554 * C1700 + C90634 * C2264) * C1876 -
                      (C554 * C1879 + C90634 * C2460) * C90579) *
                         C90485 * C13576 +
                     (C17553 + C17554 - C17555 - C17572) * C90485 * C13577 +
                     C17577 * C13578) *
                        C2565 +
                    ((C17555 - (C17554 + C17553) + C17572) * C90485 * C13576 +
                     (C17560 - (C17559 + C17558) + C17574) * C90485 * C13577 +
                     (C17563 - (C17564 + C17565) + C17575) * C90485 * C13578) *
                        C2566 +
                    (C17577 * C13576 +
                     (C17565 + C17564 - C17563 - C17575) * C90485 * C13577 +
                     (C16644 * C1875 + C16760 * C90753 -
                      (C554 * C16836 + C90634 * C17362) * C1876 -
                      (C554 * C17030 + C90634 * C17551) * C90579) *
                         C90485 * C13578) *
                        C2567) *
                   C90498) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C554 * C107 + C90634 * C555) * C6281 +
                     (C554 * C245 + C90634 * C719) * C6159 -
                     (C554 * C1700 + C90634 * C2264) * C6282 -
                     (C554 * C1879 + C90634 * C2460) * C6160 +
                     (C554 * C4656 + C90634 * C5191) * C6283 +
                     (C554 * C4831 + C90634 * C5373) * C6161 -
                     (C554 * C6165 + C90634 * C6505) * C6284 -
                     (C554 * C6287 + C90634 * C6612) * C6162) *
                        C90485 * C13576 +
                    (C14614 * C6281 + C14782 * C6159 - C17381 * C6282 -
                     C17568 * C6160 + C18856 * C6283 + C19034 * C6161 -
                     (C554 * C19088 + C90634 * C19412) * C6284 -
                     (C554 * C19199 + C90634 * C19517) * C6162) *
                        C90485 * C13577 +
                    (C14616 * C6281 + C14783 * C6159 - C17379 * C6282 -
                     C17570 * C6160 + C18858 * C6283 + C19035 * C6161 -
                     (C554 * C19087 + C90634 * C19411) * C6284 -
                     (C554 * C19200 + C90634 * C19518) * C6162) *
                        C90485 * C13578) *
                   C90541 * C90498) /
                      (p * q * std::sqrt(p + q));
    d2eexx[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C6694 +
           (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 + C102 * C118 +
            C91 * C127) *
               C90780 -
           (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 + C100 * C108 +
            C89 * C114) *
               C6695 -
           (C102 * C120 + C91 * C128 + C101 * C118 + C90 * C127 + C100 * C117 +
            C89 * C126) *
               C90771 +
           (C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 + C102 * C111 +
            C91 * C121) *
               C6696 +
           (C100 * C118 + C89 * C127 + C101 * C120 + C90 * C128 + C102 * C122 +
            C91 * C129) *
               C6691) *
              C90623 * C90634 * C9074 +
          ((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
            C102 * C1699 + C91 * C1704) *
               C6695 -
           ((C102 * C1705 + C91 * C1712 + C101 * C1706 + C90 * C1713 +
             C100 * C1707 + C89 * C1714) *
                C90780 +
            (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
             C100 * C1700 + C89 * C1708) *
                C6694) +
           (C100 * C1706 + C89 * C1713 + C101 * C1705 + C90 * C1712 +
            C102 * C1709 + C91 * C1715) *
               C90771 -
           (C102 * C1701 + C91 * C1710 + C101 * C1699 + C90 * C1704 +
            C100 * C1698 + C89 * C1703) *
               C6696 -
           (C102 * C1711 + C91 * C1716 + C101 * C1709 + C90 * C1715 +
            C100 * C1705 + C89 * C1712) *
               C6691) *
              C90623 * C90634 * C90579) *
         C90541) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C6694 +
            (C13579 * C116 + C90485 * C125) * C90780 -
            (C13579 * C108 + C90485 * C114) * C6695 -
            (C13579 * C117 + C90485 * C126) * C90771 +
            (C13579 * C109 + C90485 * C115) * C6696 +
            (C13579 * C118 + C90485 * C127) * C6691) *
               C13576 +
           (C19594 + C19595 - C19596 - C19597 + C19598 + C19599) * C13577 +
           (C19600 + C19601 - C19602 - C19603 + C19604 + C19605) * C13578) *
              C90634 * C9074 +
          (((C13579 * C1697 + C90485 * C1702) * C6695 -
            ((C13579 * C1707 + C90485 * C1714) * C90780 +
             (C13579 * C1700 + C90485 * C1708) * C6694) +
            (C13579 * C1706 + C90485 * C1713) * C90771 -
            (C13579 * C1698 + C90485 * C1703) * C6696 -
            (C13579 * C1705 + C90485 * C1712) * C6691) *
               C13576 +
           (C21021 * C6695 - (C16858 * C90780 + C16859 * C6694) +
            C21022 * C90771 - (C13579 * C3893 + C90485 * C3899) * C6696 -
            (C13579 * C3902 + C90485 * C3911) * C6691) *
               C13577 +
           (C21023 * C6695 - (C16856 * C90780 + C16857 * C6694) +
            C21024 * C90771 - (C13579 * C3894 + C90485 * C3906) * C6696 -
            (C13579 * C3903 + C90485 * C3912) * C6691) *
               C13578) *
              C90634 * C90579) *
         C90541) /
            (p * q * std::sqrt(p + q));
    d2eexy[69] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                       C102 * C109 + C91 * C115) *
                          C181 +
                      (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 +
                       C102 * C184 + C91 * C190) *
                          C90541) *
                         C90623 * C90634 * C90780 -
                     ((C102 * C185 + C91 * C191 + C101 * C184 + C90 * C190 +
                       C100 * C183 + C89 * C189) *
                          C90541 +
                      (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                       C100 * C108 + C89 * C114) *
                          C181) *
                         C90623 * C90634 * C90771 +
                     ((C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 +
                       C102 * C111 + C91 * C121) *
                          C181 +
                      (C100 * C184 + C89 * C190 + C101 * C185 + C90 * C191 +
                       C102 * C186 + C91 * C192) *
                          C90541) *
                         C90623 * C90634 * C6691) *
                        C9074 +
                    (((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
                       C102 * C1699 + C91 * C1704) *
                          C181 +
                      (C100 * C1791 + C89 * C1796 + C101 * C1792 + C90 * C1797 +
                       C102 * C1793 + C91 * C1798) *
                          C90541) *
                         C90623 * C90634 * C90771 -
                     ((C102 * C1792 + C91 * C1797 + C101 * C1791 + C90 * C1796 +
                       C100 * C1794 + C89 * C1799) *
                          C90541 +
                      (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
                       C100 * C1700 + C89 * C1708) *
                          C181) *
                         C90623 * C90634 * C90780 -
                     ((C102 * C1795 + C91 * C1800 + C101 * C1793 + C90 * C1798 +
                       C100 * C1792 + C89 * C1797) *
                          C90541 +
                      (C102 * C1701 + C91 * C1710 + C101 * C1699 + C90 * C1704 +
                       C100 * C1698 + C89 * C1703) *
                          C181) *
                         C90623 * C90634 * C6691) *
                        C90579)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C13579 * C107 + C90485 * C113) * C181 +
                       (C13579 * C182 + C90485 * C188) * C90541) *
                          C13576 +
                      (C14082 * C181 + C14192 * C90541) * C13577 +
                      (C14088 * C181 + C14193 * C90541) * C13578) *
                         C90634 * C90780 -
                     ((C14195 * C90541 + C14090 * C181) * C13578 +
                      (C14194 * C90541 + C14084 * C181) * C13577 +
                      ((C13579 * C183 + C90485 * C189) * C90541 +
                       (C13579 * C108 + C90485 * C114) * C181) *
                          C13576) *
                         C90634 * C90771 +
                     (((C13579 * C109 + C90485 * C115) * C181 +
                       (C13579 * C184 + C90485 * C190) * C90541) *
                          C13576 +
                      (C14086 * C181 + C14196 * C90541) * C13577 +
                      (C14092 * C181 + C14197 * C90541) * C13578) *
                         C90634 * C6691) *
                        C9074 +
                    ((((C13579 * C1697 + C90485 * C1702) * C181 +
                       (C13579 * C1791 + C90485 * C1796) * C90541) *
                          C13576 +
                      (C21021 * C181 + C21133 * C90541) * C13577 +
                      (C21023 * C181 + C21134 * C90541) * C13578) *
                         C90634 * C90771 -
                     ((C16954 * C90541 + C16857 * C181) * C13578 +
                      (C16953 * C90541 + C16859 * C181) * C13577 +
                      ((C13579 * C1794 + C90485 * C1799) * C90541 +
                       (C13579 * C1700 + C90485 * C1708) * C181) *
                          C13576) *
                         C90634 * C90780 -
                     (((C13579 * C3992 + C90485 * C3998) * C90541 +
                       (C13579 * C3894 + C90485 * C3906) * C181) *
                          C13578 +
                      ((C13579 * C3991 + C90485 * C3997) * C90541 +
                       (C13579 * C3893 + C90485 * C3899) * C181) *
                          C13577 +
                      ((C13579 * C1792 + C90485 * C1797) * C90541 +
                       (C13579 * C1698 + C90485 * C1703) * C181) *
                          C13576) *
                         C90634 * C6691) *
                        C90579)) /
                      (p * q * std::sqrt(p + q));
    d2eexz[69] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                      C102 * C109 + C91 * C115) *
                         C9224 +
                     (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 +
                      C102 * C247 + C91 * C253) *
                         C9074 -
                     (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
                      C100 * C1700 + C89 * C1708) *
                         C9225 -
                     (C102 * C1877 + C91 * C1882 + C101 * C1878 + C90 * C1883 +
                      C100 * C1879 + C89 * C1884) *
                         C90579) *
                        C90623 * C90634 * C90541 * C90780 +
                    ((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
                      C102 * C1699 + C91 * C1704) *
                         C9225 -
                     ((C102 * C248 + C91 * C254 + C101 * C247 + C90 * C253 +
                       C100 * C246 + C89 * C252) *
                          C9074 +
                      (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                       C100 * C108 + C89 * C114) *
                          C9224) +
                     (C100 * C1878 + C89 * C1883 + C101 * C1877 + C90 * C1882 +
                      C102 * C1880 + C91 * C1885) *
                         C90579) *
                        C90623 * C90634 * C90541 * C90771 +
                    ((C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 +
                      C102 * C111 + C91 * C121) *
                         C9224 +
                     (C100 * C247 + C89 * C253 + C101 * C248 + C90 * C254 +
                      C102 * C249 + C91 * C255) *
                         C9074 -
                     (C102 * C1701 + C91 * C1710 + C101 * C1699 + C90 * C1704 +
                      C100 * C1698 + C89 * C1703) *
                         C9225 -
                     (C102 * C1881 + C91 * C1886 + C101 * C1880 + C90 * C1885 +
                      C100 * C1877 + C89 * C1882) *
                         C90579) *
                        C90623 * C90634 * C90541 * C6691)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C13579 * C107 + C90485 * C113) * C9224 +
                      (C13579 * C245 + C90485 * C251) * C9074 -
                      (C13579 * C1700 + C90485 * C1708) * C9225 -
                      (C13579 * C1879 + C90485 * C1884) * C90579) *
                         C13576 +
                     (C14082 * C9224 + C14290 * C9074 - C16859 * C9225 -
                      C17049 * C90579) *
                         C13577 +
                     (C14088 * C9224 + C14291 * C9074 - C16857 * C9225 -
                      C17051 * C90579) *
                         C13578) *
                        C90634 * C90541 * C90780 +
                    (((C13579 * C1697 + C90485 * C1702) * C9225 -
                      ((C13579 * C246 + C90485 * C252) * C9074 +
                       (C13579 * C108 + C90485 * C114) * C9224) +
                      (C13579 * C1878 + C90485 * C1883) * C90579) *
                         C13576 +
                     (C21021 * C9225 - (C14292 * C9074 + C14084 * C9224) +
                      C21245 * C90579) *
                         C13577 +
                     (C21023 * C9225 - (C14293 * C9074 + C14090 * C9224) +
                      C21246 * C90579) *
                         C13578) *
                        C90634 * C90541 * C90771 +
                    (((C13579 * C109 + C90485 * C115) * C9224 +
                      (C13579 * C247 + C90485 * C253) * C9074 -
                      (C13579 * C1698 + C90485 * C1703) * C9225 -
                      (C13579 * C1877 + C90485 * C1882) * C90579) *
                         C13576 +
                     (C14086 * C9224 + C14294 * C9074 -
                      (C13579 * C3893 + C90485 * C3899) * C9225 -
                      (C13579 * C4077 + C90485 * C4083) * C90579) *
                         C13577 +
                     (C14092 * C9224 + C14295 * C9074 -
                      (C13579 * C3894 + C90485 * C3906) * C9225 -
                      (C13579 * C4078 + C90485 * C4084) * C90579) *
                         C13578) *
                        C90634 * C90541 * C6691)) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[69] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C307 * C107 + C90623 * C308) * C6694 +
                      (C307 * C116 + C90623 * C314) * C90780 - C337 * C6695 -
                      C338 * C90771 + C339 * C6696 + C340 * C6691) *
                         C90634 * C89 +
                     (C337 * C6694 + C338 * C90780 - C339 * C6695 -
                      C340 * C90771 + C341 * C6696 + C342 * C6691) *
                         C90634 * C90 +
                     (C339 * C6694 + C340 * C90780 - C341 * C6695 -
                      C342 * C90771 + C343 * C6696 + C344 * C6691) *
                         C90634 * C91) *
                        C9074 +
                    ((C1984 * C6695 -
                      ((C307 * C1707 + C90623 * C1966) * C90780 +
                       (C307 * C1700 + C90623 * C1962) * C6694) +
                      C1985 * C90771 - C1986 * C6696 - C1987 * C6691) *
                         C90634 * C89 +
                     (C1986 * C6695 - (C1985 * C90780 + C1984 * C6694) +
                      C1987 * C90771 - C1988 * C6696 - C1989 * C6691) *
                         C90634 * C90 +
                     (C1988 * C6695 - (C1987 * C90780 + C1986 * C6694) +
                      C1989 * C90771 - (C307 * C1701 + C90623 * C1965) * C6696 -
                      (C307 * C1711 + C90623 * C1970) * C6691) *
                         C90634 * C91) *
                        C90579) *
                   C90541) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((C13730 * C107 + C13576 * C308 + C13731 * C832 +
                      C13577 * C1094 + C13732 * C2570 + C13578 * C2827) *
                         C6694 +
                     (C13730 * C116 + C13576 * C314 + C13731 * C839 +
                      C13577 * C1098 + C13732 * C2577 + C13578 * C2831) *
                         C90780 -
                     (C13732 * C2571 + C13578 * C2828 + C13731 * C829 +
                      C13577 * C1093 + C13730 * C108 + C13576 * C309) *
                         C6695 -
                     (C13732 * C2578 + C13578 * C2832 + C13731 * C838 +
                      C13577 * C1099 + C13730 * C117 + C13576 * C315) *
                         C90771 +
                     (C13730 * C109 + C13576 * C310 + C13731 * C830 +
                      C13577 * C1095 + C13732 * C2572 + C13578 * C2829) *
                         C6696 +
                     (C13730 * C118 + C13576 * C316 + C13731 * C837 +
                      C13577 * C1100 + C13732 * C2579 + C13578 * C2833) *
                         C6691) *
                        C90634 * C90485 * C9074 +
                    ((C13730 * C1697 + C13576 * C1961 + C13731 * C3892 +
                      C13577 * C4162 + C13732 * C3895 + C13578 * C4165) *
                         C6695 -
                     ((C13732 * C3905 + C13578 * C4172 + C13731 * C3900 +
                       C13577 * C4167 + C13730 * C1707 + C13576 * C1966) *
                          C90780 +
                      (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 +
                       C13577 * C4161 + C13730 * C1700 + C13576 * C1962) *
                          C6694) +
                     (C13730 * C1706 + C13576 * C1967 + C13731 * C3901 +
                      C13577 * C4168 + C13732 * C3904 + C13578 * C4171) *
                         C90771 -
                     (C13732 * C3894 + C13578 * C4164 + C13731 * C3893 +
                      C13577 * C4163 + C13730 * C1698 + C13576 * C1963) *
                         C6696 -
                     (C13732 * C3903 + C13578 * C4170 + C13731 * C3902 +
                      C13577 * C4169 + C13730 * C1705 + C13576 * C1968) *
                         C6691) *
                        C90634 * C90485 * C90579) *
                   C90541) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C181 +
             (C307 * C182 + C90623 * C394) * C90541) *
                C90634 * C89 +
            (C401 + C417) * C90634 * C90 + C423 * C91) *
               C90780 -
           (C424 * C91 + (C418 + C404) * C90634 * C90 +
            (C417 + C401) * C90634 * C89) *
               C90771 +
           (C423 * C89 + (C409 + C419) * C90634 * C90 +
            (C410 + C420) * C90634 * C91) *
               C6691) *
              C9074 +
          (((C2069 + C2081) * C90634 * C89 + (C2072 + C2082) * C90634 * C90 +
            (C2075 + C2083) * C90634 * C91) *
               C90771 -
           (C2085 * C91 + (C2081 + C2069) * C90634 * C90 +
            ((C307 * C1794 + C90623 * C2066) * C90541 +
             (C307 * C1700 + C90623 * C1962) * C181) *
                C90634 * C89) *
               C90780 -
           (((C307 * C1795 + C90623 * C2067) * C90541 +
             (C307 * C1701 + C90623 * C1965) * C181) *
                C90634 * C91 +
            (C2083 + C2075) * C90634 * C90 + C2085 * C89) *
               C6691) *
              C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
             C13732 * C2570 + C13578 * C2827) *
                C181 +
            (C13730 * C182 + C13576 * C394 + C13731 * C927 + C13577 * C1195 +
             C13732 * C2663 + C13578 * C2921) *
                C90541) *
               C90634 * C90485 * C90780 -
           ((C13732 * C2664 + C13578 * C2922 + C13731 * C926 + C13577 * C1196 +
             C13730 * C183 + C13576 * C395) *
                C90541 +
            (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
             C13730 * C108 + C13576 * C309) *
                C181) *
               C90634 * C90485 * C90771 +
           ((C13730 * C109 + C13576 * C310 + C13731 * C830 + C13577 * C1095 +
             C13732 * C2572 + C13578 * C2829) *
                C181 +
            (C13730 * C184 + C13576 * C396 + C13731 * C925 + C13577 * C1197 +
             C13732 * C2665 + C13578 * C2923) *
                C90541) *
               C90634 * C90485 * C6691) *
              C9074 +
          (((C13730 * C1697 + C13576 * C1961 + C13731 * C3892 + C13577 * C4162 +
             C13732 * C3895 + C13578 * C4165) *
                C181 +
            (C13730 * C1791 + C13576 * C2063 + C13731 * C3990 + C13577 * C4249 +
             C13732 * C3993 + C13578 * C4250) *
                C90541) *
               C90634 * C90485 * C90771 -
           ((C13732 * C3994 + C13578 * C4248 + C13731 * C3989 + C13577 * C4247 +
             C13730 * C1794 + C13576 * C2066) *
                C90541 +
            (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 + C13577 * C4161 +
             C13730 * C1700 + C13576 * C1962) *
                C181) *
               C90634 * C90485 * C90780 -
           ((C13732 * C3992 + C13578 * C4252 + C13731 * C3991 + C13577 * C4251 +
             C13730 * C1792 + C13576 * C2064) *
                C90541 +
            (C13732 * C3894 + C13578 * C4164 + C13731 * C3893 + C13577 * C4163 +
             C13730 * C1698 + C13576 * C1963) *
                C181) *
               C90634 * C90485 * C6691) *
              C90579)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C9224 +
            (C307 * C245 + C90623 * C474) * C9074 -
            (C307 * C1700 + C90623 * C1962) * C9225 -
            (C307 * C1879 + C90623 * C2159) * C90579) *
               C90634 * C89 +
           (C9449 + C9450 - C9451 - C9452) * C90634 * C90 + C9464 * C91) *
              C90541 * C90780 +
          ((C9451 - (C9450 + C9449) + C9452) * C90634 * C89 +
           (C9455 - (C9454 + C9453) + C9456) * C90634 * C90 +
           (C9457 - (C9458 + C9459) + C9460) * C90634 * C91) *
              C90541 * C90771 +
          (C9464 * C89 + (C9459 + C9458 - C9457 - C9460) * C90634 * C90 +
           (C343 * C9224 + C496 * C9074 -
            (C307 * C1701 + C90623 * C1965) * C9225 -
            (C307 * C1881 + C90623 * C2163) * C90579) *
               C90634 * C91) *
              C90541 * C6691)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C9224 +
           (C13730 * C245 + C13576 * C474 + C13731 * C1011 + C13577 * C1301 +
            C13732 * C2745 + C13578 * C3017) *
               C9074 -
           (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 + C13577 * C4161 +
            C13730 * C1700 + C13576 * C1962) *
               C9225 -
           (C13732 * C4080 + C13578 * C4330 + C13731 * C4075 + C13577 * C4327 +
            C13730 * C1879 + C13576 * C2159) *
               C90579) *
              C90634 * C90485 * C90541 * C90780 +
          ((C13730 * C1697 + C13576 * C1961 + C13731 * C3892 + C13577 * C4162 +
            C13732 * C3895 + C13578 * C4165) *
               C9225 -
           ((C13732 * C2746 + C13578 * C3018 + C13731 * C1010 + C13577 * C1300 +
             C13730 * C246 + C13576 * C475) *
                C9074 +
            (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
             C13730 * C108 + C13576 * C309) *
                C9224) +
           (C13730 * C1878 + C13576 * C2160 + C13731 * C4076 + C13577 * C4328 +
            C13732 * C4079 + C13578 * C4331) *
               C90579) *
              C90634 * C90485 * C90541 * C90771 +
          ((C13730 * C109 + C13576 * C310 + C13731 * C830 + C13577 * C1095 +
            C13732 * C2572 + C13578 * C2829) *
               C9224 +
           (C13730 * C247 + C13576 * C476 + C13731 * C1009 + C13577 * C1299 +
            C13732 * C2747 + C13578 * C3019) *
               C9074 -
           (C13732 * C3894 + C13578 * C4164 + C13731 * C3893 + C13577 * C4163 +
            C13730 * C1698 + C13576 * C1963) *
               C9225 -
           (C13732 * C4078 + C13578 * C4332 + C13731 * C4077 + C13577 * C4329 +
            C13730 * C1877 + C13576 * C2161) *
               C90579) *
              C90634 * C90485 * C90541 * C6691)) /
            (p * q * std::sqrt(p + q));
    d2eezx[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C6694 +
            (C554 * C116 + C90634 * C561) * C90780 - C584 * C6695 -
            C585 * C90771 + C586 * C6696 + C587 * C6691) *
               C89 +
           (C584 * C6694 + C585 * C90780 - C586 * C6695 - C587 * C90771 +
            C588 * C6696 + C589 * C6691) *
               C90 +
           (C586 * C6694 + C587 * C90780 - C588 * C6695 - C589 * C90771 +
            C590 * C6696 + C591 * C6691) *
               C91) *
              C90623 * C9074 +
          ((C2286 * C6695 -
            ((C554 * C1707 + C90634 * C2268) * C90780 +
             (C554 * C1700 + C90634 * C2264) * C6694) +
            C2287 * C90771 - C2288 * C6696 - C2289 * C6691) *
               C89 +
           (C2288 * C6695 - (C2287 * C90780 + C2286 * C6694) + C2289 * C90771 -
            C2290 * C6696 - C2291 * C6691) *
               C90 +
           (C2290 * C6695 - (C2289 * C90780 + C2288 * C6694) + C2291 * C90771 -
            (C554 * C1701 + C90634 * C2267) * C6696 -
            (C554 * C1711 + C90634 * C2272) * C6691) *
               C91) *
              C90623 * C90579) *
         C90541) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C6694 +
            (C554 * C116 + C90634 * C561) * C90780 - C584 * C6695 -
            C585 * C90771 + C586 * C6696 + C587 * C6691) *
               C90485 * C13576 +
           (C20050 + C20051 - C20052 - C20053 + C20054 + C20055) * C90485 *
               C13577 +
           (C20056 + C20057 - C20058 - C20059 + C20060 + C20061) * C90485 *
               C13578) *
              C9074 +
          ((C2286 * C6695 -
            ((C554 * C1707 + C90634 * C2268) * C90780 +
             (C554 * C1700 + C90634 * C2264) * C6694) +
            C2287 * C90771 - C2288 * C6696 - C2289 * C6691) *
               C90485 * C13576 +
           (C8771 * C6695 - (C17380 * C90780 + C17381 * C6694) +
            C8772 * C90771 - C8773 * C6696 - C8774 * C6691) *
               C90485 * C13577 +
           (C21657 * C6695 - (C17378 * C90780 + C17379 * C6694) +
            C21658 * C90771 - (C554 * C3894 + C90634 * C4410) * C6696 -
            (C554 * C3903 + C90634 * C4416) * C6691) *
               C90485 * C13578) *
              C90579) *
         C90541) /
            (p * q * std::sqrt(p + q));
    d2eezy[69] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C90634 * C555) * C181 +
                       (C554 * C182 + C90634 * C641) * C90541) *
                          C89 +
                      (C648 + C664) * C90 + C668 * C91) *
                         C90623 * C90780 -
                     (C669 * C91 + (C665 + C651) * C90 + (C664 + C648) * C89) *
                         C90623 * C90771 +
                     (C668 * C89 + (C656 + C666) * C90 + (C657 + C667) * C91) *
                         C90623 * C6691) *
                        C9074 +
                    (((C2371 + C2383) * C89 + (C2374 + C2384) * C90 +
                      (C2377 + C2385) * C91) *
                         C90623 * C90771 -
                     (C2386 * C91 + (C2383 + C2371) * C90 +
                      ((C554 * C1794 + C90634 * C2368) * C90541 +
                       (C554 * C1700 + C90634 * C2264) * C181) *
                          C89) *
                         C90623 * C90780 -
                     (((C554 * C1795 + C90634 * C2369) * C90541 +
                       (C554 * C1701 + C90634 * C2267) * C181) *
                          C91 +
                      (C2385 + C2377) * C90 + C2386 * C89) *
                         C90623 * C6691) *
                        C90579)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C90634 * C555) * C181 +
                       (C554 * C182 + C90634 * C641) * C90541) *
                          C90485 * C13576 +
                      (C14614 * C181 + C14700 * C90541) * C90485 * C13577 +
                      (C14616 * C181 + C14701 * C90541) * C90485 * C13578) *
                         C90780 -
                     ((C3218 * C90541 + C3122 * C181) * C90485 * C13578 +
                      (C1518 * C90541 + C1418 * C181) * C90485 * C13577 +
                      (C664 + C648) * C90485 * C13576) *
                         C90771 +
                     (C668 * C90485 * C13576 +
                      (C1420 * C181 + C1520 * C90541) * C90485 * C13577 +
                      (C3124 * C181 + C3219 * C90541) * C90485 * C13578) *
                         C6691) *
                        C9074 +
                    (((C2371 + C2383) * C90485 * C13576 +
                      (C8771 * C181 + C8884 * C90541) * C90485 * C13577 +
                      (C21657 * C181 + C21762 * C90541) * C90485 * C13578) *
                         C90771 -
                     ((C17475 * C90541 + C17379 * C181) * C90485 * C13578 +
                      (C17474 * C90541 + C17381 * C181) * C90485 * C13577 +
                      ((C554 * C1794 + C90634 * C2368) * C90541 +
                       (C554 * C1700 + C90634 * C2264) * C181) *
                          C90485 * C13576) *
                         C90780 -
                     (((C554 * C3992 + C90634 * C4498) * C90541 +
                       (C554 * C3894 + C90634 * C4410) * C181) *
                          C90485 * C13578 +
                      (C8885 * C90541 + C8773 * C181) * C90485 * C13577 +
                      C2386 * C90485 * C13576) *
                         C6691) *
                        C90579)) /
                      (p * q * std::sqrt(p + q));
    d2eezz[69] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C90634 * C555) * C9224 +
                      (C554 * C245 + C90634 * C719) * C9074 -
                      (C554 * C1700 + C90634 * C2264) * C9225 -
                      (C554 * C1879 + C90634 * C2460) * C90579) *
                         C89 +
                     (C9687 + C9688 - C9689 - C9690) * C90 + C9701 * C91) *
                        C90623 * C90541 * C90780 +
                    ((C9689 - (C9688 + C9687) + C9690) * C89 +
                     (C9693 - (C9692 + C9691) + C9694) * C90 +
                     (C9695 - (C9696 + C9697) + C9698) * C91) *
                        C90623 * C90541 * C90771 +
                    (C9701 * C89 + (C9697 + C9696 - C9695 - C9698) * C90 +
                     (C590 * C9224 + C741 * C9074 -
                      (C554 * C1701 + C90634 * C2267) * C9225 -
                      (C554 * C1881 + C90634 * C2464) * C90579) *
                         C91) *
                        C90623 * C90541 * C6691)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C90634 * C555) * C9224 +
                      (C554 * C245 + C90634 * C719) * C9074 -
                      (C554 * C1700 + C90634 * C2264) * C9225 -
                      (C554 * C1879 + C90634 * C2460) * C90579) *
                         C90485 * C13576 +
                     (C14614 * C9224 + C14782 * C9074 - C17381 * C9225 -
                      C17568 * C90579) *
                         C90485 * C13577 +
                     (C14616 * C9224 + C14783 * C9074 - C17379 * C9225 -
                      C17570 * C90579) *
                         C90485 * C13578) *
                        C90541 * C90780 +
                    ((C9689 - (C9688 + C9687) + C9690) * C90485 * C13576 +
                     (C10608 - (C10609 + C10610) + C10611) * C90485 * C13577 +
                     (C21657 * C9225 - (C3306 * C9074 + C3122 * C9224) +
                      C21867 * C90579) *
                         C90485 * C13578) *
                        C90541 * C90771 +
                    (C9701 * C90485 * C13576 +
                     (C10614 + C10613 - C10612 - C10615) * C90485 * C13577 +
                     (C3124 * C9224 + C3307 * C9074 -
                      (C554 * C3894 + C90634 * C4410) * C9225 -
                      (C554 * C4078 + C90634 * C4578) * C90579) *
                         C90485 * C13578) *
                        C90541 * C6691)) /
                      (p * q * std::sqrt(p + q));
    d2eexx[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
             C91 * C115) *
                C7401 +
            (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 + C102 * C118 +
             C91 * C127) *
                C7396 -
            (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 + C100 * C108 +
             C89 * C114) *
                C7402 -
            (C102 * C120 + C91 * C128 + C101 * C118 + C90 * C127 + C100 * C117 +
             C89 * C126) *
                C90503) *
               C90623 * C90634 * C9074 +
           ((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
             C102 * C1699 + C91 * C1704) *
                C7402 -
            ((C102 * C1705 + C91 * C1712 + C101 * C1706 + C90 * C1713 +
              C100 * C1707 + C89 * C1714) *
                 C7396 +
             (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
              C100 * C1700 + C89 * C1708) *
                 C7401) +
            (C100 * C1706 + C89 * C1713 + C101 * C1705 + C90 * C1712 +
             C102 * C1709 + C91 * C1715) *
                C90503) *
               C90623 * C90634 * C90579) *
              C90752 +
          (((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 + C102 * C831 +
             C91 * C836) *
                C7402 -
            ((C102 * C837 + C91 * C844 + C101 * C838 + C90 * C845 +
              C100 * C839 + C89 * C846) *
                 C7396 +
             (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
              C100 * C832 + C89 * C840) *
                 C7401) +
            (C100 * C838 + C89 * C845 + C101 * C837 + C90 * C844 + C102 * C841 +
             C91 * C847) *
                C90503) *
               C90623 * C90634 * C9074 +
           ((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
             C102 * C3893 + C91 * C3899) *
                C7401 +
            (C100 * C3900 + C89 * C3909 + C101 * C3901 + C90 * C3910 +
             C102 * C3902 + C91 * C3911) *
                C7396 -
            (C102 * C8120 + C91 * C8121 + C101 * C3893 + C90 * C3899 +
             C100 * C3892 + C89 * C3898) *
                C7402 -
            (C102 * C8122 + C91 * C8123 + C101 * C3902 + C90 * C3911 +
             C100 * C3901 + C89 * C3910) *
                C90503) *
               C90623 * C90634 * C90579) *
              C90555)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C7401 +
             (C13579 * C116 + C90485 * C125) * C7396 -
             (C13579 * C108 + C90485 * C114) * C7402 -
             (C13579 * C117 + C90485 * C126) * C90503) *
                C13576 +
            (C20284 + C20285 - C20286 - C20287) * C13577 + C20298 * C13578) *
               C90634 * C9074 +
           (((C13579 * C1697 + C90485 * C1702) * C7402 -
             ((C13579 * C1707 + C90485 * C1714) * C7396 +
              (C13579 * C1700 + C90485 * C1708) * C7401) +
             (C13579 * C1706 + C90485 * C1713) * C90503) *
                C13576 +
            (C21025 - (C21011 + C21012) + C21026) * C13577 +
            (C21027 - (C21017 + C21018) + C21028) * C13578) *
               C90634 * C90579) *
              C90752 +
          (((C20286 - (C20285 + C20284) + C20287) * C13576 +
            (C20290 - (C20289 + C20288) + C20291) * C13577 +
            (C20292 - (C20293 + C20294) + C20295) * C13578) *
               C90634 * C9074 +
           ((C21012 + C21011 - C21025 - C21026) * C13576 +
            (C21018 + C21017 - C21027 - C21028) * C13577 +
            (C16860 * C7401 + C16861 * C7396 -
             (C13579 * C21004 + C90485 * C21005) * C7402 -
             (C13579 * C21006 + C90485 * C21007) * C90503) *
                C13578) *
               C90634 * C90579) *
              C90555)) /
            (p * q * std::sqrt(p + q));
    d2eexy[70] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                       C102 * C109 + C91 * C115) *
                          C923 +
                      (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 +
                       C102 * C184 + C91 * C190) *
                          C90752 -
                      (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                       C100 * C832 + C89 * C840) *
                          C924 -
                      (C102 * C925 + C91 * C930 + C101 * C926 + C90 * C931 +
                       C100 * C927 + C89 * C932) *
                          C90555) *
                         C90623 * C90634 * C7396 +
                     ((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 +
                       C102 * C831 + C91 * C836) *
                          C924 -
                      ((C102 * C185 + C91 * C191 + C101 * C184 + C90 * C190 +
                        C100 * C183 + C89 * C189) *
                           C90752 +
                       (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                        C100 * C108 + C89 * C114) *
                           C923) +
                      (C100 * C926 + C89 * C931 + C101 * C925 + C90 * C930 +
                       C102 * C928 + C91 * C933) *
                          C90555) *
                         C90623 * C90634 * C90503) *
                        C9074 +
                    (((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
                       C102 * C3893 + C91 * C3899) *
                          C924 -
                      ((C102 * C1792 + C91 * C1797 + C101 * C1791 +
                        C90 * C1796 + C100 * C1794 + C89 * C1799) *
                           C90752 +
                       (C102 * C1698 + C91 * C1703 + C101 * C1697 +
                        C90 * C1702 + C100 * C1700 + C89 * C1708) *
                           C923) +
                      (C100 * C3989 + C89 * C3995 + C101 * C3990 + C90 * C3996 +
                       C102 * C3991 + C91 * C3997) *
                          C90555) *
                         C90623 * C90634 * C7396 +
                     ((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
                       C102 * C1699 + C91 * C1704) *
                          C923 +
                      (C100 * C1791 + C89 * C1796 + C101 * C1792 + C90 * C1797 +
                       C102 * C1793 + C91 * C1798) *
                          C90752 -
                      (C102 * C8120 + C91 * C8121 + C101 * C3893 + C90 * C3899 +
                       C100 * C3892 + C89 * C3898) *
                          C924 -
                      (C102 * C8222 + C91 * C8223 + C101 * C3991 + C90 * C3997 +
                       C100 * C3990 + C89 * C3996) *
                          C90555) *
                         C90623 * C90634 * C90503) *
                        C90579)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C13579 * C107 + C90485 * C113) * C923 +
                       (C13579 * C182 + C90485 * C188) * C90752 -
                       C14082 * C924 - C14192 * C90555) *
                          C13576 +
                      (C14082 * C923 + C14192 * C90752 - C14088 * C924 -
                       C14193 * C90555) *
                          C13577 +
                      (C14088 * C923 + C14193 * C90752 - C15553 * C924 -
                       C15643 * C90555) *
                          C13578) *
                         C90634 * C7396 +
                     ((C14084 * C924 -
                       ((C13579 * C183 + C90485 * C189) * C90752 +
                        (C13579 * C108 + C90485 * C114) * C923) +
                       C14194 * C90555) *
                          C13576 +
                      (C14090 * C924 - (C14194 * C90752 + C14084 * C923) +
                       C14195 * C90555) *
                          C13577 +
                      (C15551 * C924 - (C14195 * C90752 + C14090 * C923) +
                       C15644 * C90555) *
                          C13578) *
                         C90634 * C90503) *
                        C9074 +
                    (((C16859 * C924 -
                       ((C13579 * C1794 + C90485 * C1799) * C90752 +
                        (C13579 * C1700 + C90485 * C1708) * C923) +
                       C16953 * C90555) *
                          C13576 +
                      (C16857 * C924 - (C16953 * C90752 + C16859 * C923) +
                       C16954 * C90555) *
                          C13577 +
                      (C16860 * C924 - (C16954 * C90752 + C16857 * C923) +
                       C16955 * C90555) *
                          C13578) *
                         C90634 * C7396 +
                     (((C13579 * C1697 + C90485 * C1702) * C923 +
                       (C13579 * C1791 + C90485 * C1796) * C90752 -
                       C21021 * C924 - C21133 * C90555) *
                          C13576 +
                      (C21021 * C923 + C21133 * C90752 - C21023 * C924 -
                       C21134 * C90555) *
                          C13577 +
                      (C21023 * C923 + C21134 * C90752 -
                       (C13579 * C21004 + C90485 * C21005) * C924 -
                       (C13579 * C21126 + C90485 * C21127) * C90555) *
                          C13578) *
                         C90634 * C90503) *
                        C90579)) /
                      (p * q * std::sqrt(p + q));
    d2eexz[70] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                       C102 * C109 + C91 * C115) *
                          C9224 +
                      (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 +
                       C102 * C247 + C91 * C253) *
                          C9074 -
                      (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
                       C100 * C1700 + C89 * C1708) *
                          C9225 -
                      (C102 * C1877 + C91 * C1882 + C101 * C1878 + C90 * C1883 +
                       C100 * C1879 + C89 * C1884) *
                          C90579) *
                         C90623 * C90634 * C90752 +
                     ((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
                       C102 * C3893 + C91 * C3899) *
                          C9225 -
                      ((C102 * C1009 + C91 * C1014 + C101 * C1010 +
                        C90 * C1015 + C100 * C1011 + C89 * C1016) *
                           C9074 +
                       (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                        C100 * C832 + C89 * C840) *
                           C9224) +
                      (C100 * C4075 + C89 * C4081 + C101 * C4076 + C90 * C4082 +
                       C102 * C4077 + C91 * C4083) *
                          C90579) *
                         C90623 * C90634 * C90555) *
                        C7396 +
                    (((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
                       C102 * C1699 + C91 * C1704) *
                          C9225 -
                      ((C102 * C248 + C91 * C254 + C101 * C247 + C90 * C253 +
                        C100 * C246 + C89 * C252) *
                           C9074 +
                       (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                        C100 * C108 + C89 * C114) *
                           C9224) +
                      (C100 * C1878 + C89 * C1883 + C101 * C1877 + C90 * C1882 +
                       C102 * C1880 + C91 * C1885) *
                          C90579) *
                         C90623 * C90634 * C90752 +
                     ((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 +
                       C102 * C831 + C91 * C836) *
                          C9224 +
                      (C100 * C1010 + C89 * C1015 + C101 * C1009 + C90 * C1014 +
                       C102 * C1012 + C91 * C1017) *
                          C9074 -
                      (C102 * C8120 + C91 * C8121 + C101 * C3893 + C90 * C3899 +
                       C100 * C3892 + C89 * C3898) *
                          C9225 -
                      (C102 * C8322 + C91 * C8323 + C101 * C4077 + C90 * C4083 +
                       C100 * C4076 + C89 * C4082) *
                          C90579) *
                         C90623 * C90634 * C90555) *
                        C90503)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C13579 * C107 + C90485 * C113) * C9224 +
                       (C13579 * C245 + C90485 * C251) * C9074 -
                       (C13579 * C1700 + C90485 * C1708) * C9225 -
                       (C13579 * C1879 + C90485 * C1884) * C90579) *
                          C13576 +
                      (C22829 + C22830 - C22831 - C22832) * C13577 +
                      (C22833 + C22834 - C22835 - C22836) * C13578) *
                         C90634 * C90752 +
                     ((C22831 - (C22830 + C22829) + C22832) * C13576 +
                      (C22835 - (C22834 + C22833) + C22836) * C13577 +
                      (C16860 * C9225 - (C15731 * C9074 + C15553 * C9224) +
                       C17052 * C90579) *
                          C13578) *
                         C90634 * C90555) *
                        C7396 +
                    ((((C13579 * C1697 + C90485 * C1702) * C9225 -
                       ((C13579 * C246 + C90485 * C252) * C9074 +
                        (C13579 * C108 + C90485 * C114) * C9224) +
                       (C13579 * C1878 + C90485 * C1883) * C90579) *
                          C13576 +
                      (C22837 - (C22838 + C22839) + C22840) * C13577 +
                      (C22841 - (C22842 + C22843) + C22844) * C13578) *
                         C90634 * C90752 +
                     ((C22839 + C22838 - C22837 - C22840) * C13576 +
                      (C22843 + C22842 - C22841 - C22844) * C13577 +
                      (C15551 * C9224 + C15732 * C9074 -
                       (C13579 * C21004 + C90485 * C21005) * C9225 -
                       (C13579 * C21232 + C90485 * C21233) * C90579) *
                          C13578) *
                         C90634 * C90555) *
                        C90503)) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C7401 +
             (C307 * C116 + C90623 * C314) * C7396 - C337 * C7402 -
             C338 * C90503) *
                C90634 * C89 +
            (C337 * C7401 + C338 * C7396 - C339 * C7402 - C340 * C90503) *
                C90634 * C90 +
            (C339 * C7401 + C340 * C7396 - C341 * C7402 - C342 * C90503) *
                C90634 * C91) *
               C9074 +
           ((C1984 * C7402 -
             ((C307 * C1707 + C90623 * C1966) * C7396 +
              (C307 * C1700 + C90623 * C1962) * C7401) +
             C1985 * C90503) *
                C90634 * C89 +
            (C1986 * C7402 - (C1985 * C7396 + C1984 * C7401) + C1987 * C90503) *
                C90634 * C90 +
            (C1988 * C7402 - (C1987 * C7396 + C1986 * C7401) + C1989 * C90503) *
                C90634 * C91) *
               C90579) *
              C90752 +
          (((C1116 * C7402 -
             ((C307 * C839 + C90623 * C1098) * C7396 +
              (C307 * C832 + C90623 * C1094) * C7401) +
             C1117 * C90503) *
                C90634 * C89 +
            (C1118 * C7402 - (C1117 * C7396 + C1116 * C7401) + C1119 * C90503) *
                C90634 * C90 +
            (C1120 * C7402 - (C1119 * C7396 + C1118 * C7401) + C1121 * C90503) *
                C90634 * C91) *
               C9074 +
           (((C307 * C3891 + C90623 * C4161) * C7401 +
             (C307 * C3900 + C90623 * C4167) * C7396 - C8433 * C7402 -
             C8434 * C90503) *
                C90634 * C89 +
            (C8433 * C7401 + C8434 * C7396 - C8435 * C7402 - C8436 * C90503) *
                C90634 * C90 +
            (C8435 * C7401 + C8436 * C7396 -
             (C307 * C8120 + C90623 * C8422) * C7402 -
             (C307 * C8122 + C90623 * C8423) * C90503) *
                C90634 * C91) *
               C90579) *
              C90555)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
             C13732 * C2570 + C13578 * C2827) *
                C7401 +
            (C13730 * C116 + C13576 * C314 + C13731 * C839 + C13577 * C1098 +
             C13732 * C2577 + C13578 * C2831) *
                C7396 -
            (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
             C13730 * C108 + C13576 * C309) *
                C7402 -
            (C13732 * C2578 + C13578 * C2832 + C13731 * C838 + C13577 * C1099 +
             C13730 * C117 + C13576 * C315) *
                C90503) *
               C90634 * C90485 * C9074 +
           ((C13730 * C1697 + C13576 * C1961 + C13731 * C3892 + C13577 * C4162 +
             C13732 * C3895 + C13578 * C4165) *
                C7402 -
            ((C13732 * C3905 + C13578 * C4172 + C13731 * C3900 +
              C13577 * C4167 + C13730 * C1707 + C13576 * C1966) *
                 C7396 +
             (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 +
              C13577 * C4161 + C13730 * C1700 + C13576 * C1962) *
                 C7401) +
            (C13730 * C1706 + C13576 * C1967 + C13731 * C3901 + C13577 * C4168 +
             C13732 * C3904 + C13578 * C4171) *
                C90503) *
               C90634 * C90485 * C90579) *
              C90752 +
          (((C13730 * C829 + C13576 * C1093 + C13731 * C2571 + C13577 * C2828 +
             C13732 * C3366 + C13578 * C3544) *
                C7402 -
            ((C13732 * C3370 + C13578 * C3548 + C13731 * C2577 +
              C13577 * C2831 + C13730 * C839 + C13576 * C1098) *
                 C7396 +
             (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 +
              C13577 * C2827 + C13730 * C832 + C13576 * C1094) *
                 C7401) +
            (C13730 * C838 + C13576 * C1099 + C13731 * C2578 + C13577 * C2832 +
             C13732 * C3369 + C13578 * C3547) *
                C90503) *
               C90634 * C90485 * C9074 +
           ((C13730 * C3891 + C13576 * C4161 + C13731 * C3896 + C13577 * C4166 +
             C13732 * C16835 + C13578 * C17131) *
                C7401 +
            (C13730 * C3900 + C13576 * C4167 + C13731 * C3905 + C13577 * C4172 +
             C13732 * C16838 + C13578 * C17133) *
                C7396 -
            (C13732 * C21004 + C13578 * C21346 + C13731 * C3895 +
             C13577 * C4165 + C13730 * C3892 + C13576 * C4162) *
                C7402 -
            (C13732 * C21006 + C13578 * C21347 + C13731 * C3904 +
             C13577 * C4171 + C13730 * C3901 + C13576 * C4168) *
                C90503) *
               C90634 * C90485 * C90579) *
              C90555)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C923 +
             (C307 * C182 + C90623 * C394) * C90752 -
             (C307 * C832 + C90623 * C1094) * C924 -
             (C307 * C927 + C90623 * C1195) * C90555) *
                C90634 * C89 +
            (C1201 + C1202 - C1203 - C1220) * C90634 * C90 + C1225 * C91) *
               C7396 +
           ((C1203 - (C1202 + C1201) + C1220) * C90634 * C89 +
            (C1208 - (C1207 + C1206) + C1222) * C90634 * C90 +
            (C1211 - (C1212 + C1213) + C1223) * C90634 * C91) *
               C90503) *
              C9074 +
          ((((C307 * C3891 + C90623 * C4161) * C924 -
             ((C307 * C1794 + C90623 * C2066) * C90752 +
              (C307 * C1700 + C90623 * C1962) * C923) +
             (C307 * C3989 + C90623 * C4247) * C90555) *
                C90634 * C89 +
            (C10192 - (C10193 + C10194) + C10195) * C90634 * C90 +
            (C10196 - (C10197 + C10198) + C10199) * C90634 * C91) *
               C7396 +
           ((C10194 + C10193 - C10192 - C10195) * C90634 * C89 +
            (C10198 + C10197 - C10196 - C10199) * C90634 * C90 +
            (C1988 * C923 + C2080 * C90752 -
             (C307 * C8120 + C90623 * C8422) * C924 -
             (C307 * C8222 + C90623 * C8534) * C90555) *
                C90634 * C91) *
               C90503) *
              C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
             C13732 * C2570 + C13578 * C2827) *
                C923 +
            (C13730 * C182 + C13576 * C394 + C13731 * C927 + C13577 * C1195 +
             C13732 * C2663 + C13578 * C2921) *
                C90752 -
            (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
             C13730 * C832 + C13576 * C1094) *
                C924 -
            (C13732 * C3433 + C13578 * C3599 + C13731 * C2663 + C13577 * C2921 +
             C13730 * C927 + C13576 * C1195) *
                C90555) *
               C90634 * C90485 * C7396 +
           ((C13730 * C829 + C13576 * C1093 + C13731 * C2571 + C13577 * C2828 +
             C13732 * C3366 + C13578 * C3544) *
                C924 -
            ((C13732 * C2664 + C13578 * C2922 + C13731 * C926 + C13577 * C1196 +
              C13730 * C183 + C13576 * C395) *
                 C90752 +
             (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
              C13730 * C108 + C13576 * C309) *
                 C923) +
            (C13730 * C926 + C13576 * C1196 + C13731 * C2664 + C13577 * C2922 +
             C13732 * C3432 + C13578 * C3600) *
                C90555) *
               C90634 * C90485 * C90503) *
              C9074 +
          (((C13730 * C3891 + C13576 * C4161 + C13731 * C3896 + C13577 * C4166 +
             C13732 * C16835 + C13578 * C17131) *
                C924 -
            ((C13732 * C3994 + C13578 * C4248 + C13731 * C3989 +
              C13577 * C4247 + C13730 * C1794 + C13576 * C2066) *
                 C90752 +
             (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 +
              C13577 * C4161 + C13730 * C1700 + C13576 * C1962) *
                 C923) +
            (C13730 * C3989 + C13576 * C4247 + C13731 * C3994 + C13577 * C4248 +
             C13732 * C16942 + C13578 * C17209) *
                C90555) *
               C90634 * C90485 * C7396 +
           ((C13730 * C1697 + C13576 * C1961 + C13731 * C3892 + C13577 * C4162 +
             C13732 * C3895 + C13578 * C4165) *
                C923 +
            (C13730 * C1791 + C13576 * C2063 + C13731 * C3990 + C13577 * C4249 +
             C13732 * C3993 + C13578 * C4250) *
                C90752 -
            (C13732 * C21004 + C13578 * C21346 + C13731 * C3895 +
             C13577 * C4165 + C13730 * C3892 + C13576 * C4162) *
                C924 -
            (C13732 * C21126 + C13578 * C21446 + C13731 * C3993 +
             C13577 * C4250 + C13730 * C3990 + C13576 * C4249) *
                C90555) *
               C90634 * C90485 * C90503) *
              C90579)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C9224 +
             (C307 * C245 + C90623 * C474) * C9074 -
             (C307 * C1700 + C90623 * C1962) * C9225 -
             (C307 * C1879 + C90623 * C2159) * C90579) *
                C90634 * C89 +
            (C9449 + C9450 - C9451 - C9452) * C90634 * C90 + C9464 * C91) *
               C90752 +
           (((C307 * C3891 + C90623 * C4161) * C9225 -
             ((C307 * C1011 + C90623 * C1301) * C9074 +
              (C307 * C832 + C90623 * C1094) * C9224) +
             (C307 * C4075 + C90623 * C4327) * C90579) *
                C90634 * C89 +
            (C10298 - (C10299 + C10300) + C10301) * C90634 * C90 +
            (C10302 - (C10303 + C10304) + C10305) * C90634 * C91) *
               C90555) *
              C7396 +
          (((C9451 - (C9450 + C9449) + C9452) * C90634 * C89 +
            (C9455 - (C9454 + C9453) + C9456) * C90634 * C90 +
            (C9457 - (C9458 + C9459) + C9460) * C90634 * C91) *
               C90752 +
           ((C10300 + C10299 - C10298 - C10301) * C90634 * C89 +
            (C10304 + C10303 - C10302 - C10305) * C90634 * C90 +
            (C1120 * C9224 + C1316 * C9074 -
             (C307 * C8120 + C90623 * C8422) * C9225 -
             (C307 * C8322 + C90623 * C8647) * C90579) *
                C90634 * C91) *
               C90555) *
              C90503)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
             C13732 * C2570 + C13578 * C2827) *
                C9224 +
            (C13730 * C245 + C13576 * C474 + C13731 * C1011 + C13577 * C1301 +
             C13732 * C2745 + C13578 * C3017) *
                C9074 -
            (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 + C13577 * C4161 +
             C13730 * C1700 + C13576 * C1962) *
                C9225 -
            (C13732 * C4080 + C13578 * C4330 + C13731 * C4075 + C13577 * C4327 +
             C13730 * C1879 + C13576 * C2159) *
                C90579) *
               C90634 * C90485 * C90752 +
           ((C13730 * C3891 + C13576 * C4161 + C13731 * C3896 + C13577 * C4166 +
             C13732 * C16835 + C13578 * C17131) *
                C9225 -
            ((C13732 * C3489 + C13578 * C3654 + C13731 * C2745 +
              C13577 * C3017 + C13730 * C1011 + C13576 * C1301) *
                 C9074 +
             (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 +
              C13577 * C2827 + C13730 * C832 + C13576 * C1094) *
                 C9224) +
            (C13730 * C4075 + C13576 * C4327 + C13731 * C4080 + C13577 * C4330 +
             C13732 * C17029 + C13578 * C17285) *
                C90579) *
               C90634 * C90485 * C90555) *
              C7396 +
          (((C13730 * C1697 + C13576 * C1961 + C13731 * C3892 + C13577 * C4162 +
             C13732 * C3895 + C13578 * C4165) *
                C9225 -
            ((C13732 * C2746 + C13578 * C3018 + C13731 * C1010 +
              C13577 * C1300 + C13730 * C246 + C13576 * C475) *
                 C9074 +
             (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
              C13730 * C108 + C13576 * C309) *
                 C9224) +
            (C13730 * C1878 + C13576 * C2160 + C13731 * C4076 + C13577 * C4328 +
             C13732 * C4079 + C13578 * C4331) *
                C90579) *
               C90634 * C90485 * C90752 +
           ((C13730 * C829 + C13576 * C1093 + C13731 * C2571 + C13577 * C2828 +
             C13732 * C3366 + C13578 * C3544) *
                C9224 +
            (C13730 * C1010 + C13576 * C1300 + C13731 * C2746 + C13577 * C3018 +
             C13732 * C3488 + C13578 * C3653) *
                C9074 -
            (C13732 * C21004 + C13578 * C21346 + C13731 * C3895 +
             C13577 * C4165 + C13730 * C3892 + C13576 * C4162) *
                C9225 -
            (C13732 * C21232 + C13578 * C21545 + C13731 * C4079 +
             C13577 * C4331 + C13730 * C4076 + C13576 * C4328) *
                C90579) *
               C90634 * C90485 * C90555) *
              C90503)) /
            (p * q * std::sqrt(p + q));
    d2eezx[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C7401 +
             (C554 * C116 + C90634 * C561) * C7396 - C584 * C7402 -
             C585 * C90503) *
                C89 +
            (C584 * C7401 + C585 * C7396 - C586 * C7402 - C587 * C90503) * C90 +
            (C586 * C7401 + C587 * C7396 - C588 * C7402 - C589 * C90503) *
                C91) *
               C90623 * C9074 +
           ((C2286 * C7402 -
             ((C554 * C1707 + C90634 * C2268) * C7396 +
              (C554 * C1700 + C90634 * C2264) * C7401) +
             C2287 * C90503) *
                C89 +
            (C2288 * C7402 - (C2287 * C7396 + C2286 * C7401) + C2289 * C90503) *
                C90 +
            (C2290 * C7402 - (C2289 * C7396 + C2288 * C7401) + C2291 * C90503) *
                C91) *
               C90623 * C90579) *
              C90752 +
          (((C1418 * C7402 -
             ((C554 * C839 + C90634 * C1400) * C7396 +
              (C554 * C832 + C90634 * C1396) * C7401) +
             C1419 * C90503) *
                C89 +
            (C1420 * C7402 - (C1419 * C7396 + C1418 * C7401) + C1421 * C90503) *
                C90 +
            (C1422 * C7402 - (C1421 * C7396 + C1420 * C7401) + C1423 * C90503) *
                C91) *
               C90623 * C9074 +
           (((C554 * C3891 + C90634 * C4407) * C7401 +
             (C554 * C3900 + C90634 * C4413) * C7396 - C8771 * C7402 -
             C8772 * C90503) *
                C89 +
            (C8771 * C7401 + C8772 * C7396 - C8773 * C7402 - C8774 * C90503) *
                C90 +
            (C8773 * C7401 + C8774 * C7396 -
             (C554 * C8120 + C90634 * C8760) * C7402 -
             (C554 * C8122 + C90634 * C8761) * C90503) *
                C91) *
               C90623 * C90579) *
              C90555)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C7401 +
             (C554 * C116 + C90634 * C561) * C7396 - C584 * C7402 -
             C585 * C90503) *
                C90485 * C13576 +
            (C20743 + C20744 - C20745 - C20746) * C90485 * C13577 +
            C20758 * C13578) *
               C9074 +
           ((C2286 * C7402 -
             ((C554 * C1707 + C90634 * C2268) * C7396 +
              (C554 * C1700 + C90634 * C2264) * C7401) +
             C2287 * C90503) *
                C90485 * C13576 +
            (C21647 - (C21648 + C21649) + C21650) * C90485 * C13577 +
            (C21659 - (C21653 + C21654) + C21660) * C90485 * C13578) *
               C90579) *
              C90752 +
          (((C20745 - (C20744 + C20743) + C20746) * C90485 * C13576 +
            (C20749 - (C20748 + C20747) + C20750) * C90485 * C13577 +
            (C20751 - (C20752 + C20753) + C20754) * C90485 * C13578) *
               C9074 +
           ((C21649 + C21648 - C21647 - C21650) * C90485 * C13576 +
            (C21654 + C21653 - C21659 - C21660) * C90485 * C13577 +
            (C17382 * C7401 + C17383 * C7396 -
             (C554 * C21004 + C90634 * C21644) * C7402 -
             (C554 * C21006 + C90634 * C21645) * C90503) *
                C90485 * C13578) *
               C90579) *
              C90555)) /
            (p * q * std::sqrt(p + q));
    d2eezy[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C923 +
             (C554 * C182 + C90634 * C641) * C90752 -
             (C554 * C832 + C90634 * C1396) * C924 -
             (C554 * C927 + C90634 * C1497) * C90555) *
                C89 +
            (C1503 + C1504 - C1505 - C1522) * C90 + C1526 * C91) *
               C90623 * C7396 +
           ((C1505 - (C1504 + C1503) + C1522) * C89 +
            (C1510 - (C1509 + C1508) + C1524) * C90 +
            (C1513 - (C1514 + C1515) + C1525) * C91) *
               C90623 * C90503) *
              C9074 +
          ((((C554 * C3891 + C90634 * C4407) * C924 -
             ((C554 * C1794 + C90634 * C2368) * C90752 +
              (C554 * C1700 + C90634 * C2264) * C923) +
             (C554 * C3989 + C90634 * C4493) * C90555) *
                C89 +
            (C10502 - (C10503 + C10504) + C10505) * C90 +
            (C10506 - (C10507 + C10508) + C10509) * C91) *
               C90623 * C7396 +
           ((C10504 + C10503 - C10502 - C10505) * C89 +
            (C10508 + C10507 - C10506 - C10509) * C90 +
            (C2290 * C923 + C2382 * C90752 -
             (C554 * C8120 + C90634 * C8760) * C924 -
             (C554 * C8222 + C90634 * C8872) * C90555) *
                C91) *
               C90623 * C90503) *
              C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C923 +
             (C554 * C182 + C90634 * C641) * C90752 - C14614 * C924 -
             C14700 * C90555) *
                C90485 * C13576 +
            (C14614 * C923 + C14700 * C90752 - C14616 * C924 -
             C14701 * C90555) *
                C90485 * C13577 +
            (C14616 * C923 + C14701 * C90752 - C16062 * C924 -
             C16151 * C90555) *
                C90485 * C13578) *
               C7396 +
           ((C1505 - (C1504 + C1503) + C1522) * C90485 * C13576 +
            (C3122 * C924 - (C1518 * C90752 + C1418 * C923) + C3218 * C90555) *
                C90485 * C13577 +
            (C16060 * C924 - (C3218 * C90752 + C3122 * C923) +
             C16152 * C90555) *
                C90485 * C13578) *
               C90503) *
              C9074 +
          (((C17381 * C924 -
             ((C554 * C1794 + C90634 * C2368) * C90752 +
              (C554 * C1700 + C90634 * C2264) * C923) +
             C17474 * C90555) *
                C90485 * C13576 +
            (C17379 * C924 - (C17474 * C90752 + C17381 * C923) +
             C17475 * C90555) *
                C90485 * C13577 +
            (C17382 * C924 - (C17475 * C90752 + C17379 * C923) +
             C17476 * C90555) *
                C90485 * C13578) *
               C7396 +
           ((C10504 + C10503 - C10502 - C10505) * C90485 * C13576 +
            (C8771 * C923 + C8884 * C90752 - C21657 * C924 - C21762 * C90555) *
                C90485 * C13577 +
            (C21657 * C923 + C21762 * C90752 -
             (C554 * C21004 + C90634 * C21644) * C924 -
             (C554 * C21126 + C90634 * C21758) * C90555) *
                C90485 * C13578) *
               C90503) *
              C90579)) /
            (p * q * std::sqrt(p + q));
    d2eezz[70] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C90634 * C555) * C9224 +
                       (C554 * C245 + C90634 * C719) * C9074 -
                       (C554 * C1700 + C90634 * C2264) * C9225 -
                       (C554 * C1879 + C90634 * C2460) * C90579) *
                          C89 +
                      (C9687 + C9688 - C9689 - C9690) * C90 + C9701 * C91) *
                         C90623 * C90752 +
                     (((C554 * C3891 + C90634 * C4407) * C9225 -
                       ((C554 * C1011 + C90634 * C1602) * C9074 +
                        (C554 * C832 + C90634 * C1396) * C9224) +
                       (C554 * C4075 + C90634 * C4573) * C90579) *
                          C89 +
                      (C10608 - (C10609 + C10610) + C10611) * C90 +
                      (C10612 - (C10613 + C10614) + C10615) * C91) *
                         C90623 * C90555) *
                        C7396 +
                    (((C9689 - (C9688 + C9687) + C9690) * C89 +
                      (C9693 - (C9692 + C9691) + C9694) * C90 +
                      (C9695 - (C9696 + C9697) + C9698) * C91) *
                         C90623 * C90752 +
                     ((C10610 + C10609 - C10608 - C10611) * C89 +
                      (C10614 + C10613 - C10612 - C10615) * C90 +
                      (C1422 * C9224 + C1617 * C9074 -
                       (C554 * C8120 + C90634 * C8760) * C9225 -
                       (C554 * C8322 + C90634 * C8985) * C90579) *
                          C91) *
                         C90623 * C90555) *
                        C90503)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C90634 * C555) * C9224 +
                       (C554 * C245 + C90634 * C719) * C9074 -
                       (C554 * C1700 + C90634 * C2264) * C9225 -
                       (C554 * C1879 + C90634 * C2460) * C90579) *
                          C90485 * C13576 +
                      (C23433 + C23434 - C23435 - C23436) * C90485 * C13577 +
                      (C23437 + C23438 - C23439 - C23440) * C90485 * C13578) *
                         C90752 +
                     ((C23435 - (C23434 + C23433) + C23436) * C90485 * C13576 +
                      (C23439 - (C23438 + C23437) + C23440) * C90485 * C13577 +
                      (C17382 * C9225 - (C16238 * C9074 + C16062 * C9224) +
                       C17571 * C90579) *
                          C90485 * C13578) *
                         C90555) *
                        C7396 +
                    (((C9689 - (C9688 + C9687) + C9690) * C90485 * C13576 +
                      (C10608 - (C10609 + C10610) + C10611) * C90485 * C13577 +
                      (C23441 - (C23442 + C23443) + C23444) * C90485 * C13578) *
                         C90752 +
                     ((C10610 + C10609 - C10608 - C10611) * C90485 * C13576 +
                      (C23443 + C23442 - C23441 - C23444) * C90485 * C13577 +
                      (C16060 * C9224 + C16239 * C9074 -
                       (C554 * C21004 + C90634 * C21644) * C9225 -
                       (C554 * C21232 + C90634 * C21860) * C90579) *
                          C90485 * C13578) *
                         C90555) *
                        C90503)) /
                      (p * q * std::sqrt(p + q));
    d2eexx[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C7401 +
           (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 + C102 * C118 +
            C91 * C127) *
               C7396 -
           (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 + C100 * C108 +
            C89 * C114) *
               C7402 -
           (C102 * C120 + C91 * C128 + C101 * C118 + C90 * C127 + C100 * C117 +
            C89 * C126) *
               C90503) *
              C90623 * C90634 * C90782 +
          ((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
            C102 * C1699 + C91 * C1704) *
               C7402 -
           ((C102 * C1705 + C91 * C1712 + C101 * C1706 + C90 * C1713 +
             C100 * C1707 + C89 * C1714) *
                C7396 +
            (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
             C100 * C1700 + C89 * C1708) *
                C7401) +
           (C100 * C1706 + C89 * C1713 + C101 * C1705 + C90 * C1712 +
            C102 * C1709 + C91 * C1715) *
               C90503) *
              C90623 * C90634 * C90777 +
          ((C100 * C4656 + C89 * C4660 + C101 * C4657 + C90 * C4661 +
            C102 * C4658 + C91 * C4662) *
               C7401 +
           (C100 * C4663 + C89 * C4668 + C101 * C4664 + C90 * C4669 +
            C102 * C4665 + C91 * C4670) *
               C7396 -
           (C102 * C4659 + C91 * C4666 + C101 * C4658 + C90 * C4662 +
            C100 * C4657 + C89 * C4661) *
               C7402 -
           (C102 * C4667 + C91 * C4671 + C101 * C4665 + C90 * C4670 +
            C100 * C4664 + C89 * C4669) *
               C90503) *
              C90623 * C90634 * C10691) *
         C90541) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C7401 +
            (C13579 * C116 + C90485 * C125) * C7396 -
            (C13579 * C108 + C90485 * C114) * C7402 -
            (C13579 * C117 + C90485 * C126) * C90503) *
               C13576 +
           (C20284 + C20285 - C20286 - C20287) * C13577 + C20298 * C13578) *
              C90634 * C90782 +
          (((C13579 * C1697 + C90485 * C1702) * C7402 -
            ((C13579 * C1707 + C90485 * C1714) * C7396 +
             (C13579 * C1700 + C90485 * C1708) * C7401) +
            (C13579 * C1706 + C90485 * C1713) * C90503) *
               C13576 +
           (C21025 - (C21011 + C21012) + C21026) * C13577 +
           (C21027 - (C21017 + C21018) + C21028) * C13578) *
              C90634 * C90777 +
          (((C13579 * C4656 + C90485 * C4660) * C7401 +
            (C13579 * C4663 + C90485 * C4668) * C7396 -
            (C13579 * C4657 + C90485 * C4661) * C7402 -
            (C13579 * C4664 + C90485 * C4669) * C90503) *
               C13576 +
           (C18362 * C7401 + C18363 * C7396 -
            (C13579 * C5470 + C90485 * C5476) * C7402 -
            (C13579 * C5473 + C90485 * C5479) * C90503) *
               C13577 +
           (C18364 * C7401 + C18365 * C7396 -
            (C13579 * C17652 + C90485 * C17655) * C7402 -
            (C13579 * C17656 + C90485 * C17658) * C90503) *
               C13578) *
              C90634 * C10691) *
         C90541) /
            (p * q * std::sqrt(p + q));
    d2eexy[71] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                       C102 * C109 + C91 * C115) *
                          C181 +
                      (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 +
                       C102 * C184 + C91 * C190) *
                          C90541) *
                         C90623 * C90634 * C7396 -
                     ((C102 * C185 + C91 * C191 + C101 * C184 + C90 * C190 +
                       C100 * C183 + C89 * C189) *
                          C90541 +
                      (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                       C100 * C108 + C89 * C114) *
                          C181) *
                         C90623 * C90634 * C90503) *
                        C90782 +
                    (((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
                       C102 * C1699 + C91 * C1704) *
                          C181 +
                      (C100 * C1791 + C89 * C1796 + C101 * C1792 + C90 * C1797 +
                       C102 * C1793 + C91 * C1798) *
                          C90541) *
                         C90623 * C90634 * C90503 -
                     ((C102 * C1792 + C91 * C1797 + C101 * C1791 + C90 * C1796 +
                       C100 * C1794 + C89 * C1799) *
                          C90541 +
                      (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
                       C100 * C1700 + C89 * C1708) *
                          C181) *
                         C90623 * C90634 * C7396) *
                        C90777 +
                    (((C100 * C4656 + C89 * C4660 + C101 * C4657 + C90 * C4661 +
                       C102 * C4658 + C91 * C4662) *
                          C181 +
                      (C100 * C4746 + C89 * C4750 + C101 * C4747 + C90 * C4751 +
                       C102 * C4748 + C91 * C4752) *
                          C90541) *
                         C90623 * C90634 * C7396 -
                     ((C102 * C4749 + C91 * C4753 + C101 * C4748 + C90 * C4752 +
                       C100 * C4747 + C89 * C4751) *
                          C90541 +
                      (C102 * C4659 + C91 * C4666 + C101 * C4658 + C90 * C4662 +
                       C100 * C4657 + C89 * C4661) *
                          C181) *
                         C90623 * C90634 * C90503) *
                        C10691)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C13579 * C107 + C90485 * C113) * C181 +
                       (C13579 * C182 + C90485 * C188) * C90541) *
                          C13576 +
                      (C14082 * C181 + C14192 * C90541) * C13577 +
                      (C14088 * C181 + C14193 * C90541) * C13578) *
                         C90634 * C7396 -
                     ((C14195 * C90541 + C14090 * C181) * C13578 +
                      (C14194 * C90541 + C14084 * C181) * C13577 +
                      ((C13579 * C183 + C90485 * C189) * C90541 +
                       (C13579 * C108 + C90485 * C114) * C181) *
                          C13576) *
                         C90634 * C90503) *
                        C90782 +
                    ((((C13579 * C1697 + C90485 * C1702) * C181 +
                       (C13579 * C1791 + C90485 * C1796) * C90541) *
                          C13576 +
                      (C21021 * C181 + C21133 * C90541) * C13577 +
                      (C21023 * C181 + C21134 * C90541) * C13578) *
                         C90634 * C90503 -
                     ((C16954 * C90541 + C16857 * C181) * C13578 +
                      (C16953 * C90541 + C16859 * C181) * C13577 +
                      ((C13579 * C1794 + C90485 * C1799) * C90541 +
                       (C13579 * C1700 + C90485 * C1708) * C181) *
                          C13576) *
                         C90634 * C7396) *
                        C90777 +
                    ((((C13579 * C4656 + C90485 * C4660) * C181 +
                       (C13579 * C4746 + C90485 * C4750) * C90541) *
                          C13576 +
                      (C18362 * C181 + C18450 * C90541) * C13577 +
                      (C18364 * C181 + C18451 * C90541) * C13578) *
                         C90634 * C7396 -
                     (((C13579 * C17734 + C90485 * C17736) * C90541 +
                       (C13579 * C17652 + C90485 * C17655) * C181) *
                          C13578 +
                      ((C13579 * C5556 + C90485 * C5559) * C90541 +
                       (C13579 * C5470 + C90485 * C5476) * C181) *
                          C13577 +
                      ((C13579 * C4747 + C90485 * C4751) * C90541 +
                       (C13579 * C4657 + C90485 * C4661) * C181) *
                          C13576) *
                         C90634 * C90503) *
                        C10691)) /
                      (p * q * std::sqrt(p + q));
    d2eexz[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C10840 +
           (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 + C102 * C247 +
            C91 * C253) *
               C90782 -
           (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
            C100 * C1700 + C89 * C1708) *
               C10841 -
           (C102 * C1877 + C91 * C1882 + C101 * C1878 + C90 * C1883 +
            C100 * C1879 + C89 * C1884) *
               C90777 +
           (C100 * C4656 + C89 * C4660 + C101 * C4657 + C90 * C4661 +
            C102 * C4658 + C91 * C4662) *
               C10842 +
           (C100 * C4831 + C89 * C4835 + C101 * C4832 + C90 * C4836 +
            C102 * C4833 + C91 * C4837) *
               C10691) *
              C90623 * C90634 * C90541 * C7396 +
          ((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
            C102 * C1699 + C91 * C1704) *
               C10841 -
           ((C102 * C248 + C91 * C254 + C101 * C247 + C90 * C253 + C100 * C246 +
             C89 * C252) *
                C90782 +
            (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 + C100 * C108 +
             C89 * C114) *
                C10840) +
           (C100 * C1878 + C89 * C1883 + C101 * C1877 + C90 * C1882 +
            C102 * C1880 + C91 * C1885) *
               C90777 -
           (C102 * C4659 + C91 * C4666 + C101 * C4658 + C90 * C4662 +
            C100 * C4657 + C89 * C4661) *
               C10842 -
           (C102 * C4834 + C91 * C4838 + C101 * C4833 + C90 * C4837 +
            C100 * C4832 + C89 * C4836) *
               C10691) *
              C90623 * C90634 * C90541 * C90503)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C10840 +
            (C13579 * C245 + C90485 * C251) * C90782 -
            (C13579 * C1700 + C90485 * C1708) * C10841 -
            (C13579 * C1879 + C90485 * C1884) * C90777 +
            (C13579 * C4656 + C90485 * C4660) * C10842 +
            (C13579 * C4831 + C90485 * C4835) * C10691) *
               C13576 +
           (C14082 * C10840 + C14290 * C90782 - C16859 * C10841 -
            C17049 * C90777 + C18362 * C10842 + C18542 * C10691) *
               C13577 +
           (C14088 * C10840 + C14291 * C90782 - C16857 * C10841 -
            C17051 * C90777 + C18364 * C10842 + C18543 * C10691) *
               C13578) *
              C90634 * C90541 * C7396 +
          (((C13579 * C1697 + C90485 * C1702) * C10841 -
            ((C13579 * C246 + C90485 * C252) * C90782 +
             (C13579 * C108 + C90485 * C114) * C10840) +
            (C13579 * C1878 + C90485 * C1883) * C90777 -
            (C13579 * C4657 + C90485 * C4661) * C10842 -
            (C13579 * C4832 + C90485 * C4836) * C10691) *
               C13576 +
           (C21021 * C10841 - (C14292 * C90782 + C14084 * C10840) +
            C21245 * C90777 - (C13579 * C5470 + C90485 * C5476) * C10842 -
            (C13579 * C5636 + C90485 * C5639) * C10691) *
               C13577 +
           (C21023 * C10841 - (C14293 * C90782 + C14090 * C10840) +
            C21246 * C90777 - (C13579 * C17652 + C90485 * C17655) * C10842 -
            (C13579 * C17812 + C90485 * C17814) * C10691) *
               C13578) *
              C90634 * C90541 * C90503)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C7401 +
            (C307 * C116 + C90623 * C314) * C7396 - C337 * C7402 -
            C338 * C90503) *
               C90634 * C89 +
           (C337 * C7401 + C338 * C7396 - C339 * C7402 - C340 * C90503) *
               C90634 * C90 +
           (C339 * C7401 + C340 * C7396 - C341 * C7402 - C342 * C90503) *
               C90634 * C91) *
              C90782 +
          ((C1984 * C7402 -
            ((C307 * C1707 + C90623 * C1966) * C7396 +
             (C307 * C1700 + C90623 * C1962) * C7401) +
            C1985 * C90503) *
               C90634 * C89 +
           (C1986 * C7402 - (C1985 * C7396 + C1984 * C7401) + C1987 * C90503) *
               C90634 * C90 +
           (C1988 * C7402 - (C1987 * C7396 + C1986 * C7401) + C1989 * C90503) *
               C90634 * C91) *
              C90777 +
          (((C307 * C4656 + C90623 * C4913) * C7401 +
            (C307 * C4663 + C90623 * C4917) * C7396 - C4930 * C7402 -
            C4931 * C90503) *
               C90634 * C89 +
           (C4930 * C7401 + C4931 * C7396 - C4932 * C7402 - C4933 * C90503) *
               C90634 * C90 +
           (C4932 * C7401 + C4933 * C7396 -
            (C307 * C4659 + C90623 * C4916) * C7402 -
            (C307 * C4667 + C90623 * C4920) * C90503) *
               C90634 * C91) *
              C10691) *
         C90541) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C7401 +
           (C13730 * C116 + C13576 * C314 + C13731 * C839 + C13577 * C1098 +
            C13732 * C2577 + C13578 * C2831) *
               C7396 -
           (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
            C13730 * C108 + C13576 * C309) *
               C7402 -
           (C13732 * C2578 + C13578 * C2832 + C13731 * C838 + C13577 * C1099 +
            C13730 * C117 + C13576 * C315) *
               C90503) *
              C90634 * C90485 * C90782 +
          ((C13730 * C1697 + C13576 * C1961 + C13731 * C3892 + C13577 * C4162 +
            C13732 * C3895 + C13578 * C4165) *
               C7402 -
           ((C13732 * C3905 + C13578 * C4172 + C13731 * C3900 + C13577 * C4167 +
             C13730 * C1707 + C13576 * C1966) *
                C7396 +
            (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 + C13577 * C4161 +
             C13730 * C1700 + C13576 * C1962) *
                C7401) +
           (C13730 * C1706 + C13576 * C1967 + C13731 * C3901 + C13577 * C4168 +
            C13732 * C3904 + C13578 * C4171) *
               C90503) *
              C90634 * C90485 * C90777 +
          ((C13730 * C4656 + C13576 * C4913 + C13731 * C5471 + C13577 * C5717 +
            C13732 * C17651 + C13578 * C17889) *
               C7401 +
           (C13730 * C4663 + C13576 * C4917 + C13731 * C5474 + C13577 * C5720 +
            C13732 * C17654 + C13578 * C17891) *
               C7396 -
           (C13732 * C17652 + C13578 * C17890 + C13731 * C5470 +
            C13577 * C5716 + C13730 * C4657 + C13576 * C4914) *
               C7402 -
           (C13732 * C17656 + C13578 * C17892 + C13731 * C5473 +
            C13577 * C5719 + C13730 * C4664 + C13576 * C4918) *
               C90503) *
              C90634 * C90485 * C10691) *
         C90541) /
            (p * q * std::sqrt(p + q));
    d2eeyy[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C181 +
             (C307 * C182 + C90623 * C394) * C90541) *
                C90634 * C89 +
            (C401 + C417) * C90634 * C90 + C423 * C91) *
               C7396 -
           (C424 * C91 + (C418 + C404) * C90634 * C90 +
            (C417 + C401) * C90634 * C89) *
               C90503) *
              C90782 +
          (((C2069 + C2081) * C90634 * C89 + (C2072 + C2082) * C90634 * C90 +
            (C2075 + C2083) * C90634 * C91) *
               C90503 -
           (C2085 * C91 + (C2081 + C2069) * C90634 * C90 +
            ((C307 * C1794 + C90623 * C2066) * C90541 +
             (C307 * C1700 + C90623 * C1962) * C181) *
                C90634 * C89) *
               C7396) *
              C90777 +
          ((((C307 * C4656 + C90623 * C4913) * C181 +
             (C307 * C4746 + C90623 * C5007) * C90541) *
                C90634 * C89 +
            (C5012 + C5020) * C90634 * C90 + (C5015 + C5021) * C90634 * C91) *
               C7396 -
           (((C307 * C4749 + C90623 * C5010) * C90541 +
             (C307 * C4659 + C90623 * C4916) * C181) *
                C90634 * C91 +
            (C5021 + C5015) * C90634 * C90 + (C5020 + C5012) * C90634 * C89) *
               C90503) *
              C10691)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
             C13732 * C2570 + C13578 * C2827) *
                C181 +
            (C13730 * C182 + C13576 * C394 + C13731 * C927 + C13577 * C1195 +
             C13732 * C2663 + C13578 * C2921) *
                C90541) *
               C90634 * C90485 * C7396 -
           ((C13732 * C2664 + C13578 * C2922 + C13731 * C926 + C13577 * C1196 +
             C13730 * C183 + C13576 * C395) *
                C90541 +
            (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
             C13730 * C108 + C13576 * C309) *
                C181) *
               C90634 * C90485 * C90503) *
              C90782 +
          (((C13730 * C1697 + C13576 * C1961 + C13731 * C3892 + C13577 * C4162 +
             C13732 * C3895 + C13578 * C4165) *
                C181 +
            (C13730 * C1791 + C13576 * C2063 + C13731 * C3990 + C13577 * C4249 +
             C13732 * C3993 + C13578 * C4250) *
                C90541) *
               C90634 * C90485 * C90503 -
           ((C13732 * C3994 + C13578 * C4248 + C13731 * C3989 + C13577 * C4247 +
             C13730 * C1794 + C13576 * C2066) *
                C90541 +
            (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 + C13577 * C4161 +
             C13730 * C1700 + C13576 * C1962) *
                C181) *
               C90634 * C90485 * C7396) *
              C90777 +
          (((C13730 * C4656 + C13576 * C4913 + C13731 * C5471 + C13577 * C5717 +
             C13732 * C17651 + C13578 * C17889) *
                C181 +
            (C13730 * C4746 + C13576 * C5007 + C13731 * C5557 + C13577 * C5795 +
             C13732 * C17733 + C13578 * C17967) *
                C90541) *
               C90634 * C90485 * C7396 -
           ((C13732 * C17734 + C13578 * C17968 + C13731 * C5556 +
             C13577 * C5796 + C13730 * C4747 + C13576 * C5008) *
                C90541 +
            (C13732 * C17652 + C13578 * C17890 + C13731 * C5470 +
             C13577 * C5716 + C13730 * C4657 + C13576 * C4914) *
                C181) *
               C90634 * C90485 * C90503) *
              C10691)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C10840 +
            (C307 * C245 + C90623 * C474) * C90782 -
            (C307 * C1700 + C90623 * C1962) * C10841 -
            (C307 * C1879 + C90623 * C2159) * C90777 +
            (C307 * C4656 + C90623 * C4913) * C10842 +
            (C307 * C4831 + C90623 * C5095) * C10691) *
               C90634 * C89 +
           (C11066 + C11067 - C11068 - C11069 + C11070 + C11071) * C90634 *
               C90 +
           (C11072 + C11073 - C11074 - C11075 + C11076 + C11077) * C90634 *
               C91) *
              C90541 * C7396 +
          ((C11068 - (C11067 + C11066) + C11069 - C11070 - C11071) * C90634 *
               C89 +
           (C11074 - (C11073 + C11072) + C11075 - C11076 - C11077) * C90634 *
               C90 +
           (C1988 * C10841 - (C495 * C90782 + C341 * C10840) + C2183 * C90777 -
            (C307 * C4659 + C90623 * C4916) * C10842 -
            (C307 * C4834 + C90623 * C5098) * C10691) *
               C90634 * C91) *
              C90541 * C90503)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C10840 +
           (C13730 * C245 + C13576 * C474 + C13731 * C1011 + C13577 * C1301 +
            C13732 * C2745 + C13578 * C3017) *
               C90782 -
           (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 + C13577 * C4161 +
            C13730 * C1700 + C13576 * C1962) *
               C10841 -
           (C13732 * C4080 + C13578 * C4330 + C13731 * C4075 + C13577 * C4327 +
            C13730 * C1879 + C13576 * C2159) *
               C90777 +
           (C13730 * C4656 + C13576 * C4913 + C13731 * C5471 + C13577 * C5717 +
            C13732 * C17651 + C13578 * C17889) *
               C10842 +
           (C13730 * C4831 + C13576 * C5095 + C13731 * C5637 + C13577 * C5872 +
            C13732 * C17811 + C13578 * C18043) *
               C10691) *
              C90634 * C90485 * C90541 * C7396 +
          ((C13730 * C1697 + C13576 * C1961 + C13731 * C3892 + C13577 * C4162 +
            C13732 * C3895 + C13578 * C4165) *
               C10841 -
           ((C13732 * C2746 + C13578 * C3018 + C13731 * C1010 + C13577 * C1300 +
             C13730 * C246 + C13576 * C475) *
                C90782 +
            (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
             C13730 * C108 + C13576 * C309) *
                C10840) +
           (C13730 * C1878 + C13576 * C2160 + C13731 * C4076 + C13577 * C4328 +
            C13732 * C4079 + C13578 * C4331) *
               C90777 -
           (C13732 * C17652 + C13578 * C17890 + C13731 * C5470 +
            C13577 * C5716 + C13730 * C4657 + C13576 * C4914) *
               C10842 -
           (C13732 * C17812 + C13578 * C18044 + C13731 * C5636 +
            C13577 * C5873 + C13730 * C4832 + C13576 * C5096) *
               C10691) *
              C90634 * C90485 * C90541 * C90503)) /
            (p * q * std::sqrt(p + q));
    d2eezx[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C7401 +
            (C554 * C116 + C90634 * C561) * C7396 - C584 * C7402 -
            C585 * C90503) *
               C89 +
           (C584 * C7401 + C585 * C7396 - C586 * C7402 - C587 * C90503) * C90 +
           (C586 * C7401 + C587 * C7396 - C588 * C7402 - C589 * C90503) * C91) *
              C90623 * C90782 +
          ((C2286 * C7402 -
            ((C554 * C1707 + C90634 * C2268) * C7396 +
             (C554 * C1700 + C90634 * C2264) * C7401) +
            C2287 * C90503) *
               C89 +
           (C2288 * C7402 - (C2287 * C7396 + C2286 * C7401) + C2289 * C90503) *
               C90 +
           (C2290 * C7402 - (C2289 * C7396 + C2288 * C7401) + C2291 * C90503) *
               C91) *
              C90623 * C90777 +
          (((C554 * C4656 + C90634 * C5191) * C7401 +
            (C554 * C4663 + C90634 * C5195) * C7396 - C5208 * C7402 -
            C5209 * C90503) *
               C89 +
           (C5208 * C7401 + C5209 * C7396 - C5210 * C7402 - C5211 * C90503) *
               C90 +
           (C5210 * C7401 + C5211 * C7396 -
            (C554 * C4659 + C90634 * C5194) * C7402 -
            (C554 * C4667 + C90634 * C5198) * C90503) *
               C91) *
              C90623 * C10691) *
         C90541) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C7401 +
            (C554 * C116 + C90634 * C561) * C7396 - C584 * C7402 -
            C585 * C90503) *
               C90485 * C13576 +
           (C20743 + C20744 - C20745 - C20746) * C90485 * C13577 +
           C20758 * C13578) *
              C90782 +
          ((C2286 * C7402 -
            ((C554 * C1707 + C90634 * C2268) * C7396 +
             (C554 * C1700 + C90634 * C2264) * C7401) +
            C2287 * C90503) *
               C90485 * C13576 +
           (C21647 - (C21648 + C21649) + C21650) * C90485 * C13577 +
           (C21659 - (C21653 + C21654) + C21660) * C90485 * C13578) *
              C90777 +
          (((C554 * C4656 + C90634 * C5191) * C7401 +
            (C554 * C4663 + C90634 * C5195) * C7396 - C5208 * C7402 -
            C5209 * C90503) *
               C90485 * C13576 +
           (C18856 * C7401 + C18857 * C7396 -
            (C554 * C5470 + C90634 * C5950) * C7402 -
            (C554 * C5473 + C90634 * C5953) * C90503) *
               C90485 * C13577 +
           (C18858 * C7401 + C18859 * C7396 -
            (C554 * C17652 + C90634 * C18120) * C7402 -
            (C554 * C17656 + C90634 * C18122) * C90503) *
               C90485 * C13578) *
              C10691) *
         C90541) /
            (p * q * std::sqrt(p + q));
    d2eezy[71] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C90634 * C555) * C181 +
                       (C554 * C182 + C90634 * C641) * C90541) *
                          C89 +
                      (C648 + C664) * C90 + C668 * C91) *
                         C90623 * C7396 -
                     (C669 * C91 + (C665 + C651) * C90 + (C664 + C648) * C89) *
                         C90623 * C90503) *
                        C90782 +
                    (((C2371 + C2383) * C89 + (C2374 + C2384) * C90 +
                      (C2377 + C2385) * C91) *
                         C90623 * C90503 -
                     (C2386 * C91 + (C2383 + C2371) * C90 +
                      ((C554 * C1794 + C90634 * C2368) * C90541 +
                       (C554 * C1700 + C90634 * C2264) * C181) *
                          C89) *
                         C90623 * C7396) *
                        C90777 +
                    ((((C554 * C4656 + C90634 * C5191) * C181 +
                       (C554 * C4746 + C90634 * C5285) * C90541) *
                          C89 +
                      (C5290 + C5298) * C90 + (C5293 + C5299) * C91) *
                         C90623 * C7396 -
                     (((C554 * C4749 + C90634 * C5288) * C90541 +
                       (C554 * C4659 + C90634 * C5194) * C181) *
                          C91 +
                      (C5299 + C5293) * C90 + (C5298 + C5290) * C89) *
                         C90623 * C90503) *
                        C10691)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C90634 * C555) * C181 +
                       (C554 * C182 + C90634 * C641) * C90541) *
                          C90485 * C13576 +
                      (C14614 * C181 + C14700 * C90541) * C90485 * C13577 +
                      (C14616 * C181 + C14701 * C90541) * C90485 * C13578) *
                         C7396 -
                     ((C3218 * C90541 + C3122 * C181) * C90485 * C13578 +
                      (C1518 * C90541 + C1418 * C181) * C90485 * C13577 +
                      (C664 + C648) * C90485 * C13576) *
                         C90503) *
                        C90782 +
                    (((C2371 + C2383) * C90485 * C13576 +
                      (C8771 * C181 + C8884 * C90541) * C90485 * C13577 +
                      (C21657 * C181 + C21762 * C90541) * C90485 * C13578) *
                         C90503 -
                     ((C17475 * C90541 + C17379 * C181) * C90485 * C13578 +
                      (C17474 * C90541 + C17381 * C181) * C90485 * C13577 +
                      ((C554 * C1794 + C90634 * C2368) * C90541 +
                       (C554 * C1700 + C90634 * C2264) * C181) *
                          C90485 * C13576) *
                         C7396) *
                        C90777 +
                    ((((C554 * C4656 + C90634 * C5191) * C181 +
                       (C554 * C4746 + C90634 * C5285) * C90541) *
                          C90485 * C13576 +
                      (C18856 * C181 + C18943 * C90541) * C90485 * C13577 +
                      (C18858 * C181 + C18944 * C90541) * C90485 * C13578) *
                         C7396 -
                     (((C554 * C17734 + C90634 * C18198) * C90541 +
                       (C554 * C17652 + C90634 * C18120) * C181) *
                          C90485 * C13578 +
                      ((C554 * C5556 + C90634 * C6030) * C90541 +
                       (C554 * C5470 + C90634 * C5950) * C181) *
                          C90485 * C13577 +
                      (C5298 + C5290) * C90485 * C13576) *
                         C90503) *
                        C10691)) /
                      (p * q * std::sqrt(p + q));
    d2eezz[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C10840 +
            (C554 * C245 + C90634 * C719) * C90782 -
            (C554 * C1700 + C90634 * C2264) * C10841 -
            (C554 * C1879 + C90634 * C2460) * C90777 +
            (C554 * C4656 + C90634 * C5191) * C10842 +
            (C554 * C4831 + C90634 * C5373) * C10691) *
               C89 +
           (C11300 + C11301 - C11302 - C11303 + C11304 + C11305) * C90 +
           (C11306 + C11307 - C11308 - C11309 + C11310 + C11311) * C91) *
              C90623 * C90541 * C7396 +
          ((C11302 - (C11301 + C11300) + C11303 - C11304 - C11305) * C89 +
           (C11308 - (C11307 + C11306) + C11309 - C11310 - C11311) * C90 +
           (C2290 * C10841 - (C740 * C90782 + C588 * C10840) + C2484 * C90777 -
            (C554 * C4659 + C90634 * C5194) * C10842 -
            (C554 * C4834 + C90634 * C5376) * C10691) *
               C91) *
              C90623 * C90541 * C90503)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C10840 +
            (C554 * C245 + C90634 * C719) * C90782 -
            (C554 * C1700 + C90634 * C2264) * C10841 -
            (C554 * C1879 + C90634 * C2460) * C90777 +
            (C554 * C4656 + C90634 * C5191) * C10842 +
            (C554 * C4831 + C90634 * C5373) * C10691) *
               C90485 * C13576 +
           (C14614 * C10840 + C14782 * C90782 - C17381 * C10841 -
            C17568 * C90777 + C18856 * C10842 + C19034 * C10691) *
               C90485 * C13577 +
           (C14616 * C10840 + C14783 * C90782 - C17379 * C10841 -
            C17570 * C90777 + C18858 * C10842 + C19035 * C10691) *
               C90485 * C13578) *
              C90541 * C7396 +
          ((C11302 - (C11301 + C11300) + C11303 - C11304 - C11305) * C90485 *
               C13576 +
           (C8771 * C10841 - (C1616 * C90782 + C1418 * C10840) +
            C8997 * C90777 - (C554 * C5470 + C90634 * C5950) * C10842 -
            (C554 * C5636 + C90634 * C6107) * C10691) *
               C90485 * C13577 +
           (C21657 * C10841 - (C3306 * C90782 + C3122 * C10840) +
            C21867 * C90777 - (C554 * C17652 + C90634 * C18120) * C10842 -
            (C554 * C17812 + C90634 * C18274) * C10691) *
               C90485 * C13578) *
              C90541 * C90503)) /
            (p * q * std::sqrt(p + q));
    d2eexx[72] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
           C91 * C115) *
              C103 +
          (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 + C102 * C118 +
           C91 * C127) *
              C92 -
          (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 + C100 * C108 +
           C89 * C114) *
              C104 -
          (C102 * C120 + C91 * C128 + C101 * C118 + C90 * C127 + C100 * C117 +
           C89 * C126) *
              C93 +
          (C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 + C102 * C111 +
           C91 * C121) *
              C105 +
          (C100 * C118 + C89 * C127 + C101 * C120 + C90 * C128 + C102 * C122 +
           C91 * C129) *
              C94 -
          (C102 * C112 + C91 * C123 + C101 * C111 + C90 * C121 + C100 * C110 +
           C89 * C119) *
              C106 -
          (C102 * C124 + C91 * C130 + C101 * C122 + C90 * C129 + C100 * C120 +
           C89 * C128) *
              C95) *
         C90623 * C90634 * C90567 * C90541) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C88316 +
           (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 + C102 * C118 +
            C91 * C127) *
               C90744 -
           (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 + C100 * C108 +
            C89 * C114) *
               C88309 -
           (C102 * C120 + C91 * C128 + C101 * C118 + C90 * C127 + C100 * C117 +
            C89 * C126) *
               C90503) *
              C90623 * C90634 * C90567 * C2565 +
          ((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 + C102 * C831 +
            C91 * C836) *
               C88309 -
           ((C102 * C837 + C91 * C844 + C101 * C838 + C90 * C845 + C100 * C839 +
             C89 * C846) *
                C90744 +
            (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 + C100 * C832 +
             C89 * C840) *
                C88316) +
           (C100 * C838 + C89 * C845 + C101 * C837 + C90 * C844 + C102 * C841 +
            C91 * C847) *
               C90503) *
              C90623 * C90634 * C90567 * C2566 +
          ((C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
            C102 * C2572 + C91 * C2576) *
               C88316 +
           (C100 * C2577 + C89 * C2582 + C101 * C2578 + C90 * C2583 +
            C102 * C2579 + C91 * C2584) *
               C90744 -
           (C102 * C2573 + C91 * C2580 + C101 * C2572 + C90 * C2576 +
            C100 * C2571 + C89 * C2575) *
               C88309 -
           (C102 * C2581 + C91 * C2585 + C101 * C2579 + C90 * C2584 +
            C100 * C2578 + C89 * C2583) *
               C90503) *
              C90623 * C90634 * C90567 * C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13579 * C107 + C90485 * C113) * C103 +
           (C13579 * C116 + C90485 * C125) * C92 -
           (C13579 * C108 + C90485 * C114) * C104 -
           (C13579 * C117 + C90485 * C126) * C93 +
           (C13579 * C109 + C90485 * C115) * C105 +
           (C13579 * C118 + C90485 * C127) * C94 -
           (C13579 * C110 + C90485 * C119) * C106 -
           (C13579 * C120 + C90485 * C128) * C95) *
              C13576 +
          ((C13579 * C832 + C90485 * C840) * C103 +
           (C13579 * C839 + C90485 * C846) * C92 -
           (C13579 * C829 + C90485 * C834) * C104 -
           (C13579 * C838 + C90485 * C845) * C93 +
           (C13579 * C830 + C90485 * C835) * C105 +
           (C13579 * C837 + C90485 * C844) * C94 -
           (C13579 * C831 + C90485 * C836) * C106 -
           (C13579 * C841 + C90485 * C847) * C95) *
              C13577 +
          ((C13579 * C2570 + C90485 * C2574) * C103 +
           (C13579 * C2577 + C90485 * C2582) * C92 -
           (C13579 * C2571 + C90485 * C2575) * C104 -
           (C13579 * C2578 + C90485 * C2583) * C93 +
           (C13579 * C2572 + C90485 * C2576) * C105 +
           (C13579 * C2579 + C90485 * C2584) * C94 -
           (C13579 * C2573 + C90485 * C2580) * C106 -
           (C13579 * C2581 + C90485 * C2585) * C95) *
              C13578) *
         C90634 * C90567 * C90541) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C88316 +
            (C13579 * C116 + C90485 * C125) * C90744 -
            (C13579 * C108 + C90485 * C114) * C88309 -
            (C13579 * C117 + C90485 * C126) * C90503) *
               C13576 +
           (C15534 + C15535 - C15536 - C15537) * C13577 + C15560 * C13578) *
              C90634 * C90567 * C2565 +
          ((C15536 - (C15535 + C15534) + C15537) * C13576 +
           (C15540 - (C15539 + C15538) + C15541) * C13577 +
           (C15556 - (C15557 + C15558) + C15559) * C13578) *
              C90634 * C90567 * C2566 +
          (C15560 * C13576 + (C15558 + C15557 - C15556 - C15559) * C13577 +
           ((C13579 * C15525 + C90485 * C15527) * C88316 +
            (C13579 * C15528 + C90485 * C15531) * C90744 -
            (C13579 * C15526 + C90485 * C15529) * C88309 -
            (C13579 * C15530 + C90485 * C15532) * C90503) *
               C13578) *
              C90634 * C90567 * C2567)) /
            (p * q * std::sqrt(p + q));
    d2eexy[72] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C181 +
           (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 + C102 * C184 +
            C91 * C190) *
               C90541) *
              C90623 * C90634 * C92 -
          ((C102 * C185 + C91 * C191 + C101 * C184 + C90 * C190 + C100 * C183 +
            C89 * C189) *
               C90541 +
           (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 + C100 * C108 +
            C89 * C114) *
               C181) *
              C90623 * C90634 * C93 +
          ((C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 + C102 * C111 +
            C91 * C121) *
               C181 +
           (C100 * C184 + C89 * C190 + C101 * C185 + C90 * C191 + C102 * C186 +
            C91 * C192) *
               C90541) *
              C90623 * C90634 * C94 -
          ((C102 * C187 + C91 * C193 + C101 * C186 + C90 * C192 + C100 * C185 +
            C89 * C191) *
               C90541 +
           (C102 * C112 + C91 * C123 + C101 * C111 + C90 * C121 + C100 * C110 +
            C89 * C119) *
               C181) *
              C90623 * C90634 * C95) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C2660 +
           (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 + C102 * C184 +
            C91 * C190) *
               C2565 -
           (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 + C100 * C832 +
            C89 * C840) *
               C2661 -
           (C102 * C925 + C91 * C930 + C101 * C926 + C90 * C931 + C100 * C927 +
            C89 * C932) *
               C2566 +
           (C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
            C102 * C2572 + C91 * C2576) *
               C2662 +
           (C100 * C2663 + C89 * C2667 + C101 * C2664 + C90 * C2668 +
            C102 * C2665 + C91 * C2669) *
               C2567) *
              C90623 * C90634 * C90744 +
          ((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 + C102 * C831 +
            C91 * C836) *
               C2661 -
           ((C102 * C185 + C91 * C191 + C101 * C184 + C90 * C190 + C100 * C183 +
             C89 * C189) *
                C2565 +
            (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 + C100 * C108 +
             C89 * C114) *
                C2660) +
           (C100 * C926 + C89 * C931 + C101 * C925 + C90 * C930 + C102 * C928 +
            C91 * C933) *
               C2566 -
           (C102 * C2573 + C91 * C2580 + C101 * C2572 + C90 * C2576 +
            C100 * C2571 + C89 * C2575) *
               C2662 -
           (C102 * C2666 + C91 * C2670 + C101 * C2665 + C90 * C2669 +
            C100 * C2664 + C89 * C2668) *
               C2567) *
              C90623 * C90634 * C90503) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C181 +
            (C13579 * C182 + C90485 * C188) * C90541) *
               C13576 +
           ((C13579 * C832 + C90485 * C840) * C181 +
            (C13579 * C927 + C90485 * C932) * C90541) *
               C13577 +
           ((C13579 * C2570 + C90485 * C2574) * C181 +
            (C13579 * C2663 + C90485 * C2667) * C90541) *
               C13578) *
              C90634 * C92 -
          (((C13579 * C2664 + C90485 * C2668) * C90541 +
            (C13579 * C2571 + C90485 * C2575) * C181) *
               C13578 +
           ((C13579 * C926 + C90485 * C931) * C90541 +
            (C13579 * C829 + C90485 * C834) * C181) *
               C13577 +
           ((C13579 * C183 + C90485 * C189) * C90541 +
            (C13579 * C108 + C90485 * C114) * C181) *
               C13576) *
              C90634 * C93 +
          (((C13579 * C109 + C90485 * C115) * C181 +
            (C13579 * C184 + C90485 * C190) * C90541) *
               C13576 +
           ((C13579 * C830 + C90485 * C835) * C181 +
            (C13579 * C925 + C90485 * C930) * C90541) *
               C13577 +
           ((C13579 * C2572 + C90485 * C2576) * C181 +
            (C13579 * C2665 + C90485 * C2669) * C90541) *
               C13578) *
              C90634 * C94 -
          (((C13579 * C2666 + C90485 * C2670) * C90541 +
            (C13579 * C2573 + C90485 * C2580) * C181) *
               C13578 +
           ((C13579 * C928 + C90485 * C933) * C90541 +
            (C13579 * C831 + C90485 * C836) * C181) *
               C13577 +
           ((C13579 * C185 + C90485 * C191) * C90541 +
            (C13579 * C110 + C90485 * C119) * C181) *
               C13576) *
              C90634 * C95) *
         C90567) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C2660 +
            (C13579 * C182 + C90485 * C188) * C2565 - C14082 * C2661 -
            C14192 * C2566 + C14088 * C2662 + C14193 * C2567) *
               C13576 +
           (C14082 * C2660 + C14192 * C2565 - C14088 * C2661 - C14193 * C2566 +
            C15553 * C2662 + C15643 * C2567) *
               C13577 +
           (C14088 * C2660 + C14193 * C2565 - C15553 * C2661 - C15643 * C2566 +
            (C13579 * C15525 + C90485 * C15527) * C2662 +
            (C13579 * C15634 + C90485 * C15636) * C2567) *
               C13578) *
              C90634 * C90744 +
          ((C14084 * C2661 -
            ((C13579 * C183 + C90485 * C189) * C2565 +
             (C13579 * C108 + C90485 * C114) * C2660) +
            C14194 * C2566 - C14090 * C2662 - C14195 * C2567) *
               C13576 +
           (C14090 * C2661 - (C14194 * C2565 + C14084 * C2660) +
            C14195 * C2566 - C15551 * C2662 - C15644 * C2567) *
               C13577 +
           (C15551 * C2661 - (C14195 * C2565 + C14090 * C2660) +
            C15644 * C2566 - (C13579 * C15526 + C90485 * C15529) * C2662 -
            (C13579 * C15635 + C90485 * C15637) * C2567) *
               C13578) *
              C90634 * C90503) *
         C90567) /
            (p * q * std::sqrt(p + q));
    d2eexz[72] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                      C102 * C109 + C91 * C115) *
                         C244 +
                     (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 +
                      C102 * C247 + C91 * C253) *
                         C90567) *
                        C90623 * C90634 * C90541 * C92 -
                    ((C102 * C248 + C91 * C254 + C101 * C247 + C90 * C253 +
                      C100 * C246 + C89 * C252) *
                         C90567 +
                     (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                      C100 * C108 + C89 * C114) *
                         C244) *
                        C90623 * C90634 * C90541 * C93 +
                    ((C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 +
                      C102 * C111 + C91 * C121) *
                         C244 +
                     (C100 * C247 + C89 * C253 + C101 * C248 + C90 * C254 +
                      C102 * C249 + C91 * C255) *
                         C90567) *
                        C90623 * C90634 * C90541 * C94 -
                    ((C102 * C250 + C91 * C256 + C101 * C249 + C90 * C255 +
                      C100 * C248 + C89 * C254) *
                         C90567 +
                     (C102 * C112 + C91 * C123 + C101 * C111 + C90 * C121 +
                      C100 * C110 + C89 * C119) *
                         C244) *
                        C90623 * C90634 * C90541 * C95)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                       C102 * C109 + C91 * C115) *
                          C244 +
                      (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 +
                       C102 * C247 + C91 * C253) *
                          C90567) *
                         C90623 * C90634 * C2565 -
                     ((C102 * C1009 + C91 * C1014 + C101 * C1010 + C90 * C1015 +
                       C100 * C1011 + C89 * C1016) *
                          C90567 +
                      (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                       C100 * C832 + C89 * C840) *
                          C244) *
                         C90623 * C90634 * C2566 +
                     ((C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
                       C102 * C2572 + C91 * C2576) *
                          C244 +
                      (C100 * C2745 + C89 * C2749 + C101 * C2746 + C90 * C2750 +
                       C102 * C2747 + C91 * C2751) *
                          C90567) *
                         C90623 * C90634 * C2567) *
                        C90744 +
                    (((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 +
                       C102 * C831 + C91 * C836) *
                          C244 +
                      (C100 * C1010 + C89 * C1015 + C101 * C1009 + C90 * C1014 +
                       C102 * C1012 + C91 * C1017) *
                          C90567) *
                         C90623 * C90634 * C2566 -
                     ((C102 * C248 + C91 * C254 + C101 * C247 + C90 * C253 +
                       C100 * C246 + C89 * C252) *
                          C90567 +
                      (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                       C100 * C108 + C89 * C114) *
                          C244) *
                         C90623 * C90634 * C2565 -
                     ((C102 * C2748 + C91 * C2752 + C101 * C2747 + C90 * C2751 +
                       C100 * C2746 + C89 * C2750) *
                          C90567 +
                      (C102 * C2573 + C91 * C2580 + C101 * C2572 + C90 * C2576 +
                       C100 * C2571 + C89 * C2575) *
                          C244) *
                         C90623 * C90634 * C2567) *
                        C90503)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C13579 * C107 + C90485 * C113) * C244 +
                      (C13579 * C245 + C90485 * C251) * C90567) *
                         C13576 +
                     ((C13579 * C832 + C90485 * C840) * C244 +
                      (C13579 * C1011 + C90485 * C1016) * C90567) *
                         C13577 +
                     ((C13579 * C2570 + C90485 * C2574) * C244 +
                      (C13579 * C2745 + C90485 * C2749) * C90567) *
                         C13578) *
                        C90634 * C90541 * C92 -
                    (((C13579 * C2746 + C90485 * C2750) * C90567 +
                      (C13579 * C2571 + C90485 * C2575) * C244) *
                         C13578 +
                     ((C13579 * C1010 + C90485 * C1015) * C90567 +
                      (C13579 * C829 + C90485 * C834) * C244) *
                         C13577 +
                     ((C13579 * C246 + C90485 * C252) * C90567 +
                      (C13579 * C108 + C90485 * C114) * C244) *
                         C13576) *
                        C90634 * C90541 * C93 +
                    (((C13579 * C109 + C90485 * C115) * C244 +
                      (C13579 * C247 + C90485 * C253) * C90567) *
                         C13576 +
                     ((C13579 * C830 + C90485 * C835) * C244 +
                      (C13579 * C1009 + C90485 * C1014) * C90567) *
                         C13577 +
                     ((C13579 * C2572 + C90485 * C2576) * C244 +
                      (C13579 * C2747 + C90485 * C2751) * C90567) *
                         C13578) *
                        C90634 * C90541 * C94 -
                    (((C13579 * C2748 + C90485 * C2752) * C90567 +
                      (C13579 * C2573 + C90485 * C2580) * C244) *
                         C13578 +
                     ((C13579 * C1012 + C90485 * C1017) * C90567 +
                      (C13579 * C831 + C90485 * C836) * C244) *
                         C13577 +
                     ((C13579 * C248 + C90485 * C254) * C90567 +
                      (C13579 * C110 + C90485 * C119) * C244) *
                         C13576) *
                        C90634 * C90541 * C95)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   (((((C13579 * C107 + C90485 * C113) * C244 +
                       (C13579 * C245 + C90485 * C251) * C90567) *
                          C13576 +
                      (C14272 + C14296) * C13577 + C15723 * C13578) *
                         C90634 * C2565 -
                     ((C15733 + C15726) * C13578 + (C14297 + C14275) * C13577 +
                      (C14296 + C14272) * C13576) *
                         C90634 * C2566 +
                     (C15723 * C13576 + (C15726 + C15733) * C13577 +
                      ((C13579 * C15525 + C90485 * C15527) * C244 +
                       (C13579 * C15718 + C90485 * C15720) * C90567) *
                          C13578) *
                         C90634 * C2567) *
                        C90744 +
                    (((C14278 + C14298) * C13576 + (C14281 + C14299) * C13577 +
                      (C15727 + C15734) * C13578) *
                         C90634 * C2566 -
                     (C15730 * C13578 + (C14298 + C14278) * C13577 +
                      ((C13579 * C246 + C90485 * C252) * C90567 +
                       (C13579 * C108 + C90485 * C114) * C244) *
                          C13576) *
                         C90634 * C2565 -
                     (((C13579 * C15719 + C90485 * C15721) * C90567 +
                       (C13579 * C15526 + C90485 * C15529) * C244) *
                          C13578 +
                      (C15734 + C15727) * C13577 + C15730 * C13576) *
                         C90634 * C2567) *
                        C90503)) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[72] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C307 * C107 + C90623 * C308) * C103 +
           (C307 * C116 + C90623 * C314) * C92 - C337 * C104 - C338 * C93 +
           C339 * C105 + C340 * C94 - C341 * C106 - C342 * C95) *
              C90634 * C89 +
          (C337 * C103 + C338 * C92 - C339 * C104 - C340 * C93 + C341 * C105 +
           C342 * C94 - C343 * C106 - C344 * C95) *
              C90634 * C90 +
          (C339 * C103 + C340 * C92 - C341 * C104 - C342 * C93 + C343 * C105 +
           C344 * C94 - (C307 * C112 + C90623 * C313) * C106 -
           (C307 * C124 + C90623 * C319) * C95) *
              C90634 * C91) *
         C90567 * C90541) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C88316 +
            (C307 * C116 + C90623 * C314) * C90744 - C337 * C88309 -
            C338 * C90503) *
               C90634 * C89 +
           (C337 * C88316 + C338 * C90744 - C339 * C88309 - C340 * C90503) *
               C90634 * C90 +
           (C339 * C88316 + C340 * C90744 - C341 * C88309 - C342 * C90503) *
               C90634 * C91) *
              C90567 * C2565 +
          ((C1116 * C88309 -
            ((C307 * C839 + C90623 * C1098) * C90744 +
             (C307 * C832 + C90623 * C1094) * C88316) +
            C1117 * C90503) *
               C90634 * C89 +
           (C1118 * C88309 - (C1117 * C90744 + C1116 * C88316) +
            C1119 * C90503) *
               C90634 * C90 +
           (C1120 * C88309 - (C1119 * C90744 + C1118 * C88316) +
            C1121 * C90503) *
               C90634 * C91) *
              C90567 * C2566 +
          (((C307 * C2570 + C90623 * C2827) * C88316 +
            (C307 * C2577 + C90623 * C2831) * C90744 - C2844 * C88309 -
            C2845 * C90503) *
               C90634 * C89 +
           (C2844 * C88316 + C2845 * C90744 - C2846 * C88309 - C2847 * C90503) *
               C90634 * C90 +
           (C2846 * C88316 + C2847 * C90744 -
            (C307 * C2573 + C90623 * C2830) * C88309 -
            (C307 * C2581 + C90623 * C2834) * C90503) *
               C90634 * C91) *
              C90567 * C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
           C13732 * C2570 + C13578 * C2827) *
              C103 +
          (C13730 * C116 + C13576 * C314 + C13731 * C839 + C13577 * C1098 +
           C13732 * C2577 + C13578 * C2831) *
              C92 -
          (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
           C13730 * C108 + C13576 * C309) *
              C104 -
          (C13732 * C2578 + C13578 * C2832 + C13731 * C838 + C13577 * C1099 +
           C13730 * C117 + C13576 * C315) *
              C93 +
          (C13730 * C109 + C13576 * C310 + C13731 * C830 + C13577 * C1095 +
           C13732 * C2572 + C13578 * C2829) *
              C105 +
          (C13730 * C118 + C13576 * C316 + C13731 * C837 + C13577 * C1100 +
           C13732 * C2579 + C13578 * C2833) *
              C94 -
          (C13732 * C2573 + C13578 * C2830 + C13731 * C831 + C13577 * C1096 +
           C13730 * C110 + C13576 * C311) *
              C106 -
          (C13732 * C2581 + C13578 * C2834 + C13731 * C841 + C13577 * C1101 +
           C13730 * C120 + C13576 * C317) *
              C95) *
         C90634 * C90485 * C90567 * C90541) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C88316 +
           (C13730 * C116 + C13576 * C314 + C13731 * C839 + C13577 * C1098 +
            C13732 * C2577 + C13578 * C2831) *
               C90744 -
           (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
            C13730 * C108 + C13576 * C309) *
               C88309 -
           (C13732 * C2578 + C13578 * C2832 + C13731 * C838 + C13577 * C1099 +
            C13730 * C117 + C13576 * C315) *
               C90503) *
              C90634 * C90485 * C90567 * C2565 +
          ((C13730 * C829 + C13576 * C1093 + C13731 * C2571 + C13577 * C2828 +
            C13732 * C3366 + C13578 * C3544) *
               C88309 -
           ((C13732 * C3370 + C13578 * C3548 + C13731 * C2577 + C13577 * C2831 +
             C13730 * C839 + C13576 * C1098) *
                C90744 +
            (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
             C13730 * C832 + C13576 * C1094) *
                C88316) +
           (C13730 * C838 + C13576 * C1099 + C13731 * C2578 + C13577 * C2832 +
            C13732 * C3369 + C13578 * C3547) *
               C90503) *
              C90634 * C90485 * C90567 * C2566 +
          ((C13730 * C2570 + C13576 * C2827 + C13731 * C3367 + C13577 * C3545 +
            C13732 * C15525 + C13578 * C15808) *
               C88316 +
           (C13730 * C2577 + C13576 * C2831 + C13731 * C3370 + C13577 * C3548 +
            C13732 * C15528 + C13578 * C15810) *
               C90744 -
           (C13732 * C15526 + C13578 * C15809 + C13731 * C3366 +
            C13577 * C3544 + C13730 * C2571 + C13576 * C2828) *
               C88309 -
           (C13732 * C15530 + C13578 * C15811 + C13731 * C3369 +
            C13577 * C3547 + C13730 * C2578 + C13576 * C2832) *
               C90503) *
              C90634 * C90485 * C90567 * C2567)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[72] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C181 +
            (C307 * C182 + C90623 * C394) * C90541) *
               C90634 * C89 +
           (C401 + C417) * C90634 * C90 + C423 * C91) *
              C92 -
          (C424 * C91 + (C418 + C404) * C90634 * C90 +
           (C417 + C401) * C90634 * C89) *
              C93 +
          (C423 * C89 + (C409 + C419) * C90634 * C90 +
           (C410 + C420) * C90634 * C91) *
              C94 -
          (((C307 * C187 + C90623 * C399) * C90541 +
            (C307 * C112 + C90623 * C313) * C181) *
               C90634 * C91 +
           (C420 + C410) * C90634 * C90 + C424 * C89) *
              C95) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C2660 +
            (C307 * C182 + C90623 * C394) * C2565 -
            (C307 * C832 + C90623 * C1094) * C2661 -
            (C307 * C927 + C90623 * C1195) * C2566 +
            (C307 * C2570 + C90623 * C2827) * C2662 +
            (C307 * C2663 + C90623 * C2921) * C2567) *
               C90634 * C89 +
           (C2926 + C2927 - C2928 - C2929 + C2930 + C2942) * C90634 * C90 +
           (C2933 + C2934 - C2935 - C2936 + C2937 + C2943) * C90634 * C91) *
              C90744 +
          ((C2928 - (C2927 + C2926) + C2929 - C2930 - C2942) * C90634 * C89 +
           (C2935 - (C2934 + C2933) + C2936 - C2937 - C2943) * C90634 * C90 +
           (C1120 * C2661 - (C415 * C2565 + C341 * C2660) + C1219 * C2566 -
            (C307 * C2573 + C90623 * C2830) * C2662 -
            (C307 * C2666 + C90623 * C2924) * C2567) *
               C90634 * C91) *
              C90503) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C181 +
           (C13730 * C182 + C13576 * C394 + C13731 * C927 + C13577 * C1195 +
            C13732 * C2663 + C13578 * C2921) *
               C90541) *
              C90634 * C90485 * C92 -
          ((C13732 * C2664 + C13578 * C2922 + C13731 * C926 + C13577 * C1196 +
            C13730 * C183 + C13576 * C395) *
               C90541 +
           (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
            C13730 * C108 + C13576 * C309) *
               C181) *
              C90634 * C90485 * C93 +
          ((C13730 * C109 + C13576 * C310 + C13731 * C830 + C13577 * C1095 +
            C13732 * C2572 + C13578 * C2829) *
               C181 +
           (C13730 * C184 + C13576 * C396 + C13731 * C925 + C13577 * C1197 +
            C13732 * C2665 + C13578 * C2923) *
               C90541) *
              C90634 * C90485 * C94 -
          ((C13732 * C2666 + C13578 * C2924 + C13731 * C928 + C13577 * C1198 +
            C13730 * C185 + C13576 * C397) *
               C90541 +
           (C13732 * C2573 + C13578 * C2830 + C13731 * C831 + C13577 * C1096 +
            C13730 * C110 + C13576 * C311) *
               C181) *
              C90634 * C90485 * C95) *
         C90567) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C2660 +
           (C13730 * C182 + C13576 * C394 + C13731 * C927 + C13577 * C1195 +
            C13732 * C2663 + C13578 * C2921) *
               C2565 -
           (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
            C13730 * C832 + C13576 * C1094) *
               C2661 -
           (C13732 * C3433 + C13578 * C3599 + C13731 * C2663 + C13577 * C2921 +
            C13730 * C927 + C13576 * C1195) *
               C2566 +
           (C13730 * C2570 + C13576 * C2827 + C13731 * C3367 + C13577 * C3545 +
            C13732 * C15525 + C13578 * C15808) *
               C2662 +
           (C13730 * C2663 + C13576 * C2921 + C13731 * C3433 + C13577 * C3599 +
            C13732 * C15634 + C13578 * C15886) *
               C2567) *
              C90634 * C90485 * C90744 +
          ((C13730 * C829 + C13576 * C1093 + C13731 * C2571 + C13577 * C2828 +
            C13732 * C3366 + C13578 * C3544) *
               C2661 -
           ((C13732 * C2664 + C13578 * C2922 + C13731 * C926 + C13577 * C1196 +
             C13730 * C183 + C13576 * C395) *
                C2565 +
            (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
             C13730 * C108 + C13576 * C309) *
                C2660) +
           (C13730 * C926 + C13576 * C1196 + C13731 * C2664 + C13577 * C2922 +
            C13732 * C3432 + C13578 * C3600) *
               C2566 -
           (C13732 * C15526 + C13578 * C15809 + C13731 * C3366 +
            C13577 * C3544 + C13730 * C2571 + C13576 * C2828) *
               C2662 -
           (C13732 * C15635 + C13578 * C15887 + C13731 * C3432 +
            C13577 * C3600 + C13730 * C2664 + C13576 * C2922) *
               C2567) *
              C90634 * C90485 * C90503) *
         C90567) /
            (p * q * std::sqrt(p + q));
    d2eeyz[72] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C244 +
            (C307 * C245 + C90623 * C474) * C90567) *
               C90634 * C89 +
           (C481 + C497) * C90634 * C90 + C503 * C91) *
              C90541 * C92 -
          (C504 * C91 + (C498 + C484) * C90634 * C90 +
           (C497 + C481) * C90634 * C89) *
              C90541 * C93 +
          (C503 * C89 + (C489 + C499) * C90634 * C90 +
           (C490 + C500) * C90634 * C91) *
              C90541 * C94 -
          (((C307 * C250 + C90623 * C479) * C90567 +
            (C307 * C112 + C90623 * C313) * C244) *
               C90634 * C91 +
           (C500 + C490) * C90634 * C90 + C504 * C89) *
              C90541 * C95)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C244 +
             (C307 * C245 + C90623 * C474) * C90567) *
                C90634 * C89 +
            (C481 + C497) * C90634 * C90 + C503 * C91) *
               C2565 -
           (C1321 * C91 + (C1318 + C1310) * C90634 * C90 +
            ((C307 * C1011 + C90623 * C1301) * C90567 +
             (C307 * C832 + C90623 * C1094) * C244) *
                C90634 * C89) *
               C2566 +
           (((C307 * C2570 + C90623 * C2827) * C244 +
             (C307 * C2745 + C90623 * C3017) * C90567) *
                C90634 * C89 +
            (C3022 + C3030) * C90634 * C90 + (C3025 + C3031) * C90634 * C91) *
               C2567) *
              C90744 +
          (((C1310 + C1318) * C90634 * C89 + (C1307 + C1317) * C90634 * C90 +
            (C1311 + C1319) * C90634 * C91) *
               C2566 -
           (C504 * C91 + (C498 + C484) * C90634 * C90 +
            (C497 + C481) * C90634 * C89) *
               C2565 -
           (((C307 * C2748 + C90623 * C3020) * C90567 +
             (C307 * C2573 + C90623 * C2830) * C244) *
                C90634 * C91 +
            (C3031 + C3025) * C90634 * C90 + (C3030 + C3022) * C90634 * C89) *
               C2567) *
              C90503)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C244 +
           (C13730 * C245 + C13576 * C474 + C13731 * C1011 + C13577 * C1301 +
            C13732 * C2745 + C13578 * C3017) *
               C90567) *
              C90634 * C90485 * C90541 * C92 -
          ((C13732 * C2746 + C13578 * C3018 + C13731 * C1010 + C13577 * C1300 +
            C13730 * C246 + C13576 * C475) *
               C90567 +
           (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
            C13730 * C108 + C13576 * C309) *
               C244) *
              C90634 * C90485 * C90541 * C93 +
          ((C13730 * C109 + C13576 * C310 + C13731 * C830 + C13577 * C1095 +
            C13732 * C2572 + C13578 * C2829) *
               C244 +
           (C13730 * C247 + C13576 * C476 + C13731 * C1009 + C13577 * C1299 +
            C13732 * C2747 + C13578 * C3019) *
               C90567) *
              C90634 * C90485 * C90541 * C94 -
          ((C13732 * C2748 + C13578 * C3020 + C13731 * C1012 + C13577 * C1302 +
            C13730 * C248 + C13576 * C477) *
               C90567 +
           (C13732 * C2573 + C13578 * C2830 + C13731 * C831 + C13577 * C1096 +
            C13730 * C110 + C13576 * C311) *
               C244) *
              C90634 * C90485 * C90541 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
             C13732 * C2570 + C13578 * C2827) *
                C244 +
            (C13730 * C245 + C13576 * C474 + C13731 * C1011 + C13577 * C1301 +
             C13732 * C2745 + C13578 * C3017) *
                C90567) *
               C90634 * C90485 * C2565 -
           ((C13732 * C3489 + C13578 * C3654 + C13731 * C2745 + C13577 * C3017 +
             C13730 * C1011 + C13576 * C1301) *
                C90567 +
            (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
             C13730 * C832 + C13576 * C1094) *
                C244) *
               C90634 * C90485 * C2566 +
           ((C13730 * C2570 + C13576 * C2827 + C13731 * C3367 + C13577 * C3545 +
             C13732 * C15525 + C13578 * C15808) *
                C244 +
            (C13730 * C2745 + C13576 * C3017 + C13731 * C3489 + C13577 * C3654 +
             C13732 * C15718 + C13578 * C15962) *
                C90567) *
               C90634 * C90485 * C2567) *
              C90744 +
          (((C13730 * C829 + C13576 * C1093 + C13731 * C2571 + C13577 * C2828 +
             C13732 * C3366 + C13578 * C3544) *
                C244 +
            (C13730 * C1010 + C13576 * C1300 + C13731 * C2746 + C13577 * C3018 +
             C13732 * C3488 + C13578 * C3653) *
                C90567) *
               C90634 * C90485 * C2566 -
           ((C13732 * C2746 + C13578 * C3018 + C13731 * C1010 + C13577 * C1300 +
             C13730 * C246 + C13576 * C475) *
                C90567 +
            (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
             C13730 * C108 + C13576 * C309) *
                C244) *
               C90634 * C90485 * C2565 -
           ((C13732 * C15719 + C13578 * C15963 + C13731 * C3488 +
             C13577 * C3653 + C13730 * C2746 + C13576 * C3018) *
                C90567 +
            (C13732 * C15526 + C13578 * C15809 + C13731 * C3366 +
             C13577 * C3544 + C13730 * C2571 + C13576 * C2828) *
                C244) *
               C90634 * C90485 * C2567) *
              C90503)) /
            (p * q * std::sqrt(p + q));
    d2eezx[72] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C554 * C107 + C90634 * C555) * C103 +
           (C554 * C116 + C90634 * C561) * C92 - C584 * C104 - C585 * C93 +
           C586 * C105 + C587 * C94 - C588 * C106 - C589 * C95) *
              C89 +
          (C584 * C103 + C585 * C92 - C586 * C104 - C587 * C93 + C588 * C105 +
           C589 * C94 - C590 * C106 - C591 * C95) *
              C90 +
          (C586 * C103 + C587 * C92 - C588 * C104 - C589 * C93 + C590 * C105 +
           C591 * C94 - (C554 * C112 + C90634 * C560) * C106 -
           (C554 * C124 + C90634 * C566) * C95) *
              C91) *
         C90623 * C90567 * C90541) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C88316 +
            (C554 * C116 + C90634 * C561) * C90744 - C584 * C88309 -
            C585 * C90503) *
               C89 +
           (C584 * C88316 + C585 * C90744 - C586 * C88309 - C587 * C90503) *
               C90 +
           (C586 * C88316 + C587 * C90744 - C588 * C88309 - C589 * C90503) *
               C91) *
              C90623 * C90567 * C2565 +
          ((C1418 * C88309 -
            ((C554 * C839 + C90634 * C1400) * C90744 +
             (C554 * C832 + C90634 * C1396) * C88316) +
            C1419 * C90503) *
               C89 +
           (C1420 * C88309 - (C1419 * C90744 + C1418 * C88316) +
            C1421 * C90503) *
               C90 +
           (C1422 * C88309 - (C1421 * C90744 + C1420 * C88316) +
            C1423 * C90503) *
               C91) *
              C90623 * C90567 * C2566 +
          (((C554 * C2570 + C90634 * C3105) * C88316 +
            (C554 * C2577 + C90634 * C3109) * C90744 - C3122 * C88309 -
            C3123 * C90503) *
               C89 +
           (C3122 * C88316 + C3123 * C90744 - C3124 * C88309 - C3125 * C90503) *
               C90 +
           (C3124 * C88316 + C3125 * C90744 -
            (C554 * C2573 + C90634 * C3108) * C88309 -
            (C554 * C2581 + C90634 * C3112) * C90503) *
               C91) *
              C90623 * C90567 * C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C554 * C107 + C90634 * C555) * C103 +
           (C554 * C116 + C90634 * C561) * C92 - C584 * C104 - C585 * C93 +
           C586 * C105 + C587 * C94 - C588 * C106 - C589 * C95) *
              C90485 * C13576 +
          ((C554 * C832 + C90634 * C1396) * C103 +
           (C554 * C839 + C90634 * C1400) * C92 - C1418 * C104 - C1419 * C93 +
           C1420 * C105 + C1421 * C94 - C1422 * C106 - C1423 * C95) *
              C90485 * C13577 +
          ((C554 * C2570 + C90634 * C3105) * C103 +
           (C554 * C2577 + C90634 * C3109) * C92 - C3122 * C104 - C3123 * C93 +
           C3124 * C105 + C3125 * C94 - (C554 * C2573 + C90634 * C3108) * C106 -
           (C554 * C2581 + C90634 * C3112) * C95) *
              C90485 * C13578) *
         C90567 * C90541) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C88316 +
            (C554 * C116 + C90634 * C561) * C90744 - C584 * C88309 -
            C585 * C90503) *
               C90485 * C13576 +
           (C16043 + C16044 - C16045 - C16046) * C90485 * C13577 +
           C16070 * C13578) *
              C90567 * C2565 +
          ((C16045 - (C16044 + C16043) + C16046) * C90485 * C13576 +
           (C16049 - (C16048 + C16047) + C16050) * C90485 * C13577 +
           (C16065 - (C16066 + C16067) + C16068) * C90485 * C13578) *
              C90567 * C2566 +
          (C16070 * C13576 +
           (C16067 + C16066 - C16065 - C16068) * C90485 * C13577 +
           ((C554 * C15525 + C90634 * C16038) * C88316 +
            (C554 * C15528 + C90634 * C16040) * C90744 -
            (C554 * C15526 + C90634 * C16039) * C88309 -
            (C554 * C15530 + C90634 * C16041) * C90503) *
               C90485 * C13578) *
              C90567 * C2567)) /
            (p * q * std::sqrt(p + q));
    d2eezy[72] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C181 +
            (C554 * C182 + C90634 * C641) * C90541) *
               C89 +
           (C648 + C664) * C90 + C668 * C91) *
              C90623 * C92 -
          (C669 * C91 + (C665 + C651) * C90 + (C664 + C648) * C89) * C90623 *
              C93 +
          (C668 * C89 + (C656 + C666) * C90 + (C657 + C667) * C91) * C90623 *
              C94 -
          (((C554 * C187 + C90634 * C646) * C90541 +
            (C554 * C112 + C90634 * C560) * C181) *
               C91 +
           (C667 + C657) * C90 + C669 * C89) *
              C90623 * C95) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C2660 +
            (C554 * C182 + C90634 * C641) * C2565 -
            (C554 * C832 + C90634 * C1396) * C2661 -
            (C554 * C927 + C90634 * C1497) * C2566 +
            (C554 * C2570 + C90634 * C3105) * C2662 +
            (C554 * C2663 + C90634 * C3199) * C2567) *
               C89 +
           (C3204 + C3205 - C3206 - C3207 + C3208 + C3220) * C90 +
           (C3211 + C3212 - C3213 - C3214 + C3215 + C3221) * C91) *
              C90623 * C90744 +
          ((C3206 - (C3205 + C3204) + C3207 - C3208 - C3220) * C89 +
           (C3213 - (C3212 + C3211) + C3214 - C3215 - C3221) * C90 +
           (C1422 * C2661 - (C662 * C2565 + C588 * C2660) + C1521 * C2566 -
            (C554 * C2573 + C90634 * C3108) * C2662 -
            (C554 * C2666 + C90634 * C3202) * C2567) *
               C91) *
              C90623 * C90503) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C181 +
            (C554 * C182 + C90634 * C641) * C90541) *
               C90485 * C13576 +
           ((C554 * C832 + C90634 * C1396) * C181 +
            (C554 * C927 + C90634 * C1497) * C90541) *
               C90485 * C13577 +
           ((C554 * C2570 + C90634 * C3105) * C181 +
            (C554 * C2663 + C90634 * C3199) * C90541) *
               C90485 * C13578) *
              C92 -
          ((C3218 * C90541 + C3122 * C181) * C90485 * C13578 +
           (C1518 * C90541 + C1418 * C181) * C90485 * C13577 +
           (C664 + C648) * C90485 * C13576) *
              C93 +
          (C668 * C90485 * C13576 +
           (C1420 * C181 + C1520 * C90541) * C90485 * C13577 +
           (C3124 * C181 + C3219 * C90541) * C90485 * C13578) *
              C94 -
          (((C554 * C2666 + C90634 * C3202) * C90541 +
            (C554 * C2573 + C90634 * C3108) * C181) *
               C90485 * C13578 +
           (C1521 * C90541 + C1422 * C181) * C90485 * C13577 +
           C669 * C90485 * C13576) *
              C95) *
         C90567) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C2660 +
            (C554 * C182 + C90634 * C641) * C2565 - C14614 * C2661 -
            C14700 * C2566 + C14616 * C2662 + C14701 * C2567) *
               C90485 * C13576 +
           (C14614 * C2660 + C14700 * C2565 - C14616 * C2661 - C14701 * C2566 +
            C16062 * C2662 + C16151 * C2567) *
               C90485 * C13577 +
           (C14616 * C2660 + C14701 * C2565 - C16062 * C2661 - C16151 * C2566 +
            (C554 * C15525 + C90634 * C16038) * C2662 +
            (C554 * C15634 + C90634 * C16144) * C2567) *
               C90485 * C13578) *
              C90744 +
          ((C3206 - (C3205 + C3204) + C3207 - C3208 - C3220) * C90485 * C13576 +
           (C3122 * C2661 - (C1518 * C2565 + C1418 * C2660) + C3218 * C2566 -
            C16060 * C2662 - C16152 * C2567) *
               C90485 * C13577 +
           (C16060 * C2661 - (C3218 * C2565 + C3122 * C2660) + C16152 * C2566 -
            (C554 * C15526 + C90634 * C16039) * C2662 -
            (C554 * C15635 + C90634 * C16145) * C2567) *
               C90485 * C13578) *
              C90503) *
         C90567) /
            (p * q * std::sqrt(p + q));
    d2eezz[72] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C244 +
            (C554 * C245 + C90634 * C719) * C90567) *
               C89 +
           (C726 + C742) * C90 + C746 * C91) *
              C90623 * C90541 * C92 -
          (C747 * C91 + (C743 + C729) * C90 + (C742 + C726) * C89) * C90623 *
              C90541 * C93 +
          (C746 * C89 + (C734 + C744) * C90 + (C735 + C745) * C91) * C90623 *
              C90541 * C94 -
          (((C554 * C250 + C90634 * C724) * C90567 +
            (C554 * C112 + C90634 * C560) * C244) *
               C91 +
           (C745 + C735) * C90 + C747 * C89) *
              C90623 * C90541 * C95)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C244 +
             (C554 * C245 + C90634 * C719) * C90567) *
                C89 +
            (C726 + C742) * C90 + C746 * C91) *
               C90623 * C2565 -
           (C1621 * C91 + (C1619 + C1611) * C90 +
            ((C554 * C1011 + C90634 * C1602) * C90567 +
             (C554 * C832 + C90634 * C1396) * C244) *
                C89) *
               C90623 * C2566 +
           (((C554 * C2570 + C90634 * C3105) * C244 +
             (C554 * C2745 + C90634 * C3295) * C90567) *
                C89 +
            (C3300 + C3308) * C90 + (C3303 + C3309) * C91) *
               C90623 * C2567) *
              C90744 +
          (((C1611 + C1619) * C89 + (C1608 + C1618) * C90 +
            (C1612 + C1620) * C91) *
               C90623 * C2566 -
           (C747 * C91 + (C743 + C729) * C90 + (C742 + C726) * C89) * C90623 *
               C2565 -
           (((C554 * C2748 + C90634 * C3298) * C90567 +
             (C554 * C2573 + C90634 * C3108) * C244) *
                C91 +
            (C3309 + C3303) * C90 + (C3308 + C3300) * C89) *
               C90623 * C2567) *
              C90503)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C244 +
            (C554 * C245 + C90634 * C719) * C90567) *
               C90485 * C13576 +
           ((C554 * C832 + C90634 * C1396) * C244 +
            (C554 * C1011 + C90634 * C1602) * C90567) *
               C90485 * C13577 +
           ((C554 * C2570 + C90634 * C3105) * C244 +
            (C554 * C2745 + C90634 * C3295) * C90567) *
               C90485 * C13578) *
              C90541 * C92 -
          ((C3308 + C3300) * C90485 * C13578 +
           (C1619 + C1611) * C90485 * C13577 +
           (C742 + C726) * C90485 * C13576) *
              C90541 * C93 +
          (C746 * C90485 * C13576 + (C1608 + C1618) * C90485 * C13577 +
           (C3303 + C3309) * C90485 * C13578) *
              C90541 * C94 -
          (((C554 * C2748 + C90634 * C3298) * C90567 +
            (C554 * C2573 + C90634 * C3108) * C244) *
               C90485 * C13578 +
           (C1620 + C1612) * C90485 * C13577 + C747 * C90485 * C13576) *
              C90541 * C95)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C244 +
             (C554 * C245 + C90634 * C719) * C90567) *
                C90485 * C13576 +
            (C14776 + C14784) * C90485 * C13577 + C16237 * C13578) *
               C2565 -
           ((C16241 + C16232) * C90485 * C13578 +
            (C14785 + C14779) * C90485 * C13577 +
            (C14784 + C14776) * C90485 * C13576) *
               C2566 +
           (C16237 * C13576 + (C16232 + C16241) * C90485 * C13577 +
            ((C554 * C15525 + C90634 * C16038) * C244 +
             (C554 * C15718 + C90634 * C16226) * C90567) *
                C90485 * C13578) *
               C2567) *
              C90744 +
          (((C1611 + C1619) * C90485 * C13576 +
            (C3300 + C3308) * C90485 * C13577 +
            (C16233 + C16242) * C90485 * C13578) *
               C2566 -
           (C16240 * C13578 + (C1619 + C1611) * C90485 * C13577 +
            (C742 + C726) * C90485 * C13576) *
               C2565 -
           (((C554 * C15719 + C90634 * C16227) * C90567 +
             (C554 * C15526 + C90634 * C16039) * C244) *
                C90485 * C13578 +
            (C16242 + C16233) * C90485 * C13577 + C16240 * C13576) *
               C2567) *
              C90503)) /
            (p * q * std::sqrt(p + q));
    d2eexx[73] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C826 +
           (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 + C102 * C118 +
            C91 * C127) *
               C821 -
           (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 + C100 * C108 +
            C89 * C114) *
               C827 -
           (C102 * C120 + C91 * C128 + C101 * C118 + C90 * C127 + C100 * C117 +
            C89 * C126) *
               C822 +
           (C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 + C102 * C111 +
            C91 * C121) *
               C828 +
           (C100 * C118 + C89 * C127 + C101 * C120 + C90 * C128 + C102 * C122 +
            C91 * C129) *
               C823) *
              C90623 * C90634 * C90567 * C90752 +
          ((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 + C102 * C831 +
            C91 * C836) *
               C827 -
           ((C102 * C837 + C91 * C844 + C101 * C838 + C90 * C845 + C100 * C839 +
             C89 * C846) *
                C821 +
            (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 + C100 * C832 +
             C89 * C840) *
                C826) +
           (C100 * C838 + C89 * C845 + C101 * C837 + C90 * C844 + C102 * C841 +
            C91 * C847) *
               C822 -
           (C102 * C833 + C91 * C842 + C101 * C831 + C90 * C836 + C100 * C830 +
            C89 * C835) *
               C828 -
           (C102 * C843 + C91 * C848 + C101 * C841 + C90 * C847 + C100 * C837 +
            C89 * C844) *
               C823) *
              C90623 * C90634 * C90567 * C90555)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C3364 +
           (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 + C102 * C118 +
            C91 * C127) *
               C90498) *
              C90623 * C90634 * C90567 * C3360 -
          ((C102 * C837 + C91 * C844 + C101 * C838 + C90 * C845 + C100 * C839 +
            C89 * C846) *
               C90498 +
           (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 + C100 * C832 +
            C89 * C840) *
               C3364) *
              C90623 * C90634 * C90567 * C3361 +
          ((C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
            C102 * C2572 + C91 * C2576) *
               C3364 +
           (C100 * C2577 + C89 * C2582 + C101 * C2578 + C90 * C2583 +
            C102 * C2579 + C91 * C2584) *
               C90498) *
              C90623 * C90634 * C90567 * C3362 -
          ((C102 * C3368 + C91 * C3374 + C101 * C3369 + C90 * C3375 +
            C100 * C3370 + C89 * C3376) *
               C90498 +
           (C102 * C3365 + C91 * C3371 + C101 * C3366 + C90 * C3372 +
            C100 * C3367 + C89 * C3373) *
               C3364) *
              C90623 * C90634 * C90567 * C3363)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C826 +
            (C13579 * C116 + C90485 * C125) * C821 -
            (C13579 * C108 + C90485 * C114) * C827 -
            (C13579 * C117 + C90485 * C126) * C822 +
            (C13579 * C109 + C90485 * C115) * C828 +
            (C13579 * C118 + C90485 * C127) * C823) *
               C13576 +
           (C14094 + C14095 - C14096 - C14097 + C14098 + C14099) * C13577 +
           (C14100 + C14101 - C14102 - C14103 + C14104 + C14105) * C13578) *
              C90634 * C90567 * C90752 +
          ((C14096 - (C14095 + C14094) + C14097 - C14098 - C14099) * C13576 +
           (C14102 - (C14101 + C14100) + C14103 - C14104 - C14105) * C13577 +
           ((C13579 * C3366 + C90485 * C3372) * C827 -
            ((C13579 * C3370 + C90485 * C3376) * C821 +
             (C13579 * C3367 + C90485 * C3373) * C826) +
            (C13579 * C3369 + C90485 * C3375) * C822 -
            (C13579 * C3365 + C90485 * C3371) * C828 -
            (C13579 * C3368 + C90485 * C3374) * C823) *
               C13578) *
              C90634 * C90567 * C90555)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C3364 +
            (C13579 * C116 + C90485 * C125) * C90498) *
               C13576 +
           (C16297 + C16298) * C13577 + C16307 * C13578) *
              C90634 * C90567 * C3360 -
          (C16308 * C13578 + (C16300 + C16299) * C13577 +
           (C16298 + C16297) * C13576) *
              C90634 * C90567 * C3361 +
          (C16307 * C13576 + (C16302 + C16301) * C13577 +
           (C16311 + C16312) * C13578) *
              C90634 * C90567 * C3362 -
          (((C13579 * C16293 + C90485 * C16295) * C90498 +
            (C13579 * C16292 + C90485 * C16294) * C3364) *
               C13578 +
           (C16312 + C16311) * C13577 + C16308 * C13576) *
              C90634 * C90567 * C3363)) /
            (p * q * std::sqrt(p + q));
    d2eexy[73] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C923 +
           (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 + C102 * C184 +
            C91 * C190) *
               C90752 -
           (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 + C100 * C832 +
            C89 * C840) *
               C924 -
           (C102 * C925 + C91 * C930 + C101 * C926 + C90 * C931 + C100 * C927 +
            C89 * C932) *
               C90555) *
              C90623 * C90634 * C821 +
          ((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 + C102 * C831 +
            C91 * C836) *
               C924 -
           ((C102 * C185 + C91 * C191 + C101 * C184 + C90 * C190 + C100 * C183 +
             C89 * C189) *
                C90752 +
            (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 + C100 * C108 +
             C89 * C114) *
                C923) +
           (C100 * C926 + C89 * C931 + C101 * C925 + C90 * C930 + C102 * C928 +
            C91 * C933) *
               C90555) *
              C90623 * C90634 * C822 +
          ((C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 + C102 * C111 +
            C91 * C121) *
               C923 +
           (C100 * C184 + C89 * C190 + C101 * C185 + C90 * C191 + C102 * C186 +
            C91 * C192) *
               C90752 -
           (C102 * C833 + C91 * C842 + C101 * C831 + C90 * C836 + C100 * C830 +
            C89 * C835) *
               C924 -
           (C102 * C929 + C91 * C934 + C101 * C928 + C90 * C933 + C100 * C925 +
            C89 * C930) *
               C90555) *
              C90623 * C90634 * C823) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
           C91 * C115) *
              C3427 +
          (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 + C102 * C184 +
           C91 * C190) *
              C3360 -
          (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 + C100 * C832 +
           C89 * C840) *
              C3428 -
          (C102 * C925 + C91 * C930 + C101 * C926 + C90 * C931 + C100 * C927 +
           C89 * C932) *
              C3361 +
          (C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
           C102 * C2572 + C91 * C2576) *
              C3429 +
          (C100 * C2663 + C89 * C2667 + C101 * C2664 + C90 * C2668 +
           C102 * C2665 + C91 * C2669) *
              C3362 -
          (C102 * C3365 + C91 * C3371 + C101 * C3366 + C90 * C3372 +
           C100 * C3367 + C89 * C3373) *
              C3430 -
          (C102 * C3431 + C91 * C3434 + C101 * C3432 + C90 * C3435 +
           C100 * C3433 + C89 * C3436) *
              C3363) *
         C90623 * C90634 * C90498 * C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C923 +
            (C13579 * C182 + C90485 * C188) * C90752 - C14082 * C924 -
            C14192 * C90555) *
               C13576 +
           (C14082 * C923 + C14192 * C90752 - C14088 * C924 - C14193 * C90555) *
               C13577 +
           (C14088 * C923 + C14193 * C90752 -
            (C13579 * C3367 + C90485 * C3373) * C924 -
            (C13579 * C3433 + C90485 * C3436) * C90555) *
               C13578) *
              C90634 * C821 +
          ((C14084 * C924 -
            ((C13579 * C183 + C90485 * C189) * C90752 +
             (C13579 * C108 + C90485 * C114) * C923) +
            C14194 * C90555) *
               C13576 +
           (C14090 * C924 - (C14194 * C90752 + C14084 * C923) +
            C14195 * C90555) *
               C13577 +
           ((C13579 * C3366 + C90485 * C3372) * C924 -
            (C14195 * C90752 + C14090 * C923) +
            (C13579 * C3432 + C90485 * C3435) * C90555) *
               C13578) *
              C90634 * C822 +
          (((C13579 * C109 + C90485 * C115) * C923 +
            (C13579 * C184 + C90485 * C190) * C90752 - C14086 * C924 -
            C14196 * C90555) *
               C13576 +
           (C14086 * C923 + C14196 * C90752 - C14092 * C924 - C14197 * C90555) *
               C13577 +
           (C14092 * C923 + C14197 * C90752 -
            (C13579 * C3365 + C90485 * C3371) * C924 -
            (C13579 * C3431 + C90485 * C3434) * C90555) *
               C13578) *
              C90634 * C823) *
         C90567) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13579 * C107 + C90485 * C113) * C3427 +
           (C13579 * C182 + C90485 * C188) * C3360 - C14082 * C3428 -
           C14192 * C3361 + C14088 * C3429 + C14193 * C3362 - C15553 * C3430 -
           C15643 * C3363) *
              C13576 +
          (C14082 * C3427 + C14192 * C3360 - C14088 * C3428 - C14193 * C3361 +
           C15553 * C3429 + C15643 * C3362 - C16309 * C3430 - C16367 * C3363) *
              C13577 +
          (C14088 * C3427 + C14193 * C3360 - C15553 * C3428 - C15643 * C3361 +
           C16309 * C3429 + C16367 * C3362 -
           (C13579 * C16292 + C90485 * C16294) * C3430 -
           (C13579 * C16362 + C90485 * C16363) * C3363) *
              C13578) *
         C90634 * C90498 * C90567) /
            (p * q * std::sqrt(p + q));
    d2eexz[73] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                       C102 * C109 + C91 * C115) *
                          C244 +
                      (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 +
                       C102 * C247 + C91 * C253) *
                          C90567) *
                         C90623 * C90634 * C90752 -
                     ((C102 * C1009 + C91 * C1014 + C101 * C1010 + C90 * C1015 +
                       C100 * C1011 + C89 * C1016) *
                          C90567 +
                      (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                       C100 * C832 + C89 * C840) *
                          C244) *
                         C90623 * C90634 * C90555) *
                        C821 +
                    (((C100 * C829 + C89 * C834 + C101 * C830 + C90 * C835 +
                       C102 * C831 + C91 * C836) *
                          C244 +
                      (C100 * C1010 + C89 * C1015 + C101 * C1009 + C90 * C1014 +
                       C102 * C1012 + C91 * C1017) *
                          C90567) *
                         C90623 * C90634 * C90555 -
                     ((C102 * C248 + C91 * C254 + C101 * C247 + C90 * C253 +
                       C100 * C246 + C89 * C252) *
                          C90567 +
                      (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 +
                       C100 * C108 + C89 * C114) *
                          C244) *
                         C90623 * C90634 * C90752) *
                        C822 +
                    (((C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 +
                       C102 * C111 + C91 * C121) *
                          C244 +
                      (C100 * C247 + C89 * C253 + C101 * C248 + C90 * C254 +
                       C102 * C249 + C91 * C255) *
                          C90567) *
                         C90623 * C90634 * C90752 -
                     ((C102 * C1013 + C91 * C1018 + C101 * C1012 + C90 * C1017 +
                       C100 * C1009 + C89 * C1014) *
                          C90567 +
                      (C102 * C833 + C91 * C842 + C101 * C831 + C90 * C836 +
                       C100 * C830 + C89 * C835) *
                          C244) *
                         C90623 * C90634 * C90555) *
                        C823)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 +
                      C102 * C109 + C91 * C115) *
                         C244 +
                     (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 +
                      C102 * C247 + C91 * C253) *
                         C90567) *
                        C90623 * C90634 * C3360 -
                    ((C102 * C1009 + C91 * C1014 + C101 * C1010 + C90 * C1015 +
                      C100 * C1011 + C89 * C1016) *
                         C90567 +
                     (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 +
                      C100 * C832 + C89 * C840) *
                         C244) *
                        C90623 * C90634 * C3361 +
                    ((C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
                      C102 * C2572 + C91 * C2576) *
                         C244 +
                     (C100 * C2745 + C89 * C2749 + C101 * C2746 + C90 * C2750 +
                      C102 * C2747 + C91 * C2751) *
                         C90567) *
                        C90623 * C90634 * C3362 -
                    ((C102 * C3487 + C91 * C3490 + C101 * C3488 + C90 * C3491 +
                      C100 * C3489 + C89 * C3492) *
                         C90567 +
                     (C102 * C3365 + C91 * C3371 + C101 * C3366 + C90 * C3372 +
                      C100 * C3367 + C89 * C3373) *
                         C244) *
                        C90623 * C90634 * C3363) *
                   C90498) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   (((((C13579 * C107 + C90485 * C113) * C244 +
                       (C13579 * C245 + C90485 * C251) * C90567) *
                          C13576 +
                      (C14272 + C14296) * C13577 + (C14275 + C14297) * C13578) *
                         C90634 * C90752 -
                     (((C13579 * C3489 + C90485 * C3492) * C90567 +
                       (C13579 * C3367 + C90485 * C3373) * C244) *
                          C13578 +
                      (C14297 + C14275) * C13577 + (C14296 + C14272) * C13576) *
                         C90634 * C90555) *
                        C821 +
                    (((C14278 + C14298) * C13576 + (C14281 + C14299) * C13577 +
                      ((C13579 * C3366 + C90485 * C3372) * C244 +
                       (C13579 * C3488 + C90485 * C3491) * C90567) *
                          C13578) *
                         C90634 * C90555 -
                     ((C14299 + C14281) * C13578 + (C14298 + C14278) * C13577 +
                      ((C13579 * C246 + C90485 * C252) * C90567 +
                       (C13579 * C108 + C90485 * C114) * C244) *
                          C13576) *
                         C90634 * C90752) *
                        C822 +
                    ((((C13579 * C109 + C90485 * C115) * C244 +
                       (C13579 * C247 + C90485 * C253) * C90567) *
                          C13576 +
                      (C14284 + C14300) * C13577 + (C14287 + C14301) * C13578) *
                         C90634 * C90752 -
                     (((C13579 * C3487 + C90485 * C3490) * C90567 +
                       (C13579 * C3365 + C90485 * C3371) * C244) *
                          C13578 +
                      (C14301 + C14287) * C13577 + (C14300 + C14284) * C13576) *
                         C90634 * C90555) *
                        C823)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C13579 * C107 + C90485 * C113) * C244 +
                      (C13579 * C245 + C90485 * C251) * C90567) *
                         C13576 +
                     (C14272 + C14296) * C13577 + C15723 * C13578) *
                        C90634 * C3360 -
                    (C16420 * C13578 + (C14297 + C14275) * C13577 +
                     (C14296 + C14272) * C13576) *
                        C90634 * C3361 +
                    (C15723 * C13576 + (C15726 + C15733) * C13577 +
                     (C16421 + C16425) * C13578) *
                        C90634 * C3362 -
                    (((C13579 * C16417 + C90485 * C16418) * C90567 +
                      (C13579 * C16292 + C90485 * C16294) * C244) *
                         C13578 +
                     (C16425 + C16421) * C13577 + C16420 * C13576) *
                        C90634 * C3363) *
                   C90498) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[73] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C307 * C107 + C90623 * C308) * C826 +
                      (C307 * C116 + C90623 * C314) * C821 - C337 * C827 -
                      C338 * C822 + C339 * C828 + C340 * C823) *
                         C90634 * C89 +
                     (C337 * C826 + C338 * C821 - C339 * C827 - C340 * C822 +
                      C341 * C828 + C342 * C823) *
                         C90634 * C90 +
                     (C339 * C826 + C340 * C821 - C341 * C827 - C342 * C822 +
                      C343 * C828 + C344 * C823) *
                         C90634 * C91) *
                        C90567 * C90752 +
                    ((C1116 * C827 -
                      ((C307 * C839 + C90623 * C1098) * C821 +
                       (C307 * C832 + C90623 * C1094) * C826) +
                      C1117 * C822 - C1118 * C828 - C1119 * C823) *
                         C90634 * C89 +
                     (C1118 * C827 - (C1117 * C821 + C1116 * C826) +
                      C1119 * C822 - C1120 * C828 - C1121 * C823) *
                         C90634 * C90 +
                     (C1120 * C827 - (C1119 * C821 + C1118 * C826) +
                      C1121 * C822 - (C307 * C833 + C90623 * C1097) * C828 -
                      (C307 * C843 + C90623 * C1102) * C823) *
                         C90634 * C91) *
                        C90567 * C90555)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C307 * C107 + C90623 * C308) * C3364 +
                      (C307 * C116 + C90623 * C314) * C90498) *
                         C90634 * C89 +
                     (C337 * C3364 + C338 * C90498) * C90634 * C90 +
                     (C339 * C3364 + C340 * C90498) * C90634 * C91) *
                        C90567 * C3360 -
                    ((C1119 * C90498 + C1118 * C3364) * C90634 * C91 +
                     (C1117 * C90498 + C1116 * C3364) * C90634 * C90 +
                     ((C307 * C839 + C90623 * C1098) * C90498 +
                      (C307 * C832 + C90623 * C1094) * C3364) *
                         C90634 * C89) *
                        C90567 * C3361 +
                    (((C307 * C2570 + C90623 * C2827) * C3364 +
                      (C307 * C2577 + C90623 * C2831) * C90498) *
                         C90634 * C89 +
                     (C2844 * C3364 + C2845 * C90498) * C90634 * C90 +
                     (C2846 * C3364 + C2847 * C90498) * C90634 * C91) *
                        C90567 * C3362 -
                    (((C307 * C3368 + C90623 * C3546) * C90498 +
                      (C307 * C3365 + C90623 * C3543) * C3364) *
                         C90634 * C91 +
                     ((C307 * C3369 + C90623 * C3547) * C90498 +
                      (C307 * C3366 + C90623 * C3544) * C3364) *
                         C90634 * C90 +
                     ((C307 * C3370 + C90623 * C3548) * C90498 +
                      (C307 * C3367 + C90623 * C3545) * C3364) *
                         C90634 * C89) *
                        C90567 * C3363)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   (((C13730 * C107 + C13576 * C308 + C13731 * C832 +
                      C13577 * C1094 + C13732 * C2570 + C13578 * C2827) *
                         C826 +
                     (C13730 * C116 + C13576 * C314 + C13731 * C839 +
                      C13577 * C1098 + C13732 * C2577 + C13578 * C2831) *
                         C821 -
                     (C13732 * C2571 + C13578 * C2828 + C13731 * C829 +
                      C13577 * C1093 + C13730 * C108 + C13576 * C309) *
                         C827 -
                     (C13732 * C2578 + C13578 * C2832 + C13731 * C838 +
                      C13577 * C1099 + C13730 * C117 + C13576 * C315) *
                         C822 +
                     (C13730 * C109 + C13576 * C310 + C13731 * C830 +
                      C13577 * C1095 + C13732 * C2572 + C13578 * C2829) *
                         C828 +
                     (C13730 * C118 + C13576 * C316 + C13731 * C837 +
                      C13577 * C1100 + C13732 * C2579 + C13578 * C2833) *
                         C823) *
                        C90634 * C90485 * C90567 * C90752 +
                    ((C13730 * C829 + C13576 * C1093 + C13731 * C2571 +
                      C13577 * C2828 + C13732 * C3366 + C13578 * C3544) *
                         C827 -
                     ((C13732 * C3370 + C13578 * C3548 + C13731 * C2577 +
                       C13577 * C2831 + C13730 * C839 + C13576 * C1098) *
                          C821 +
                      (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 +
                       C13577 * C2827 + C13730 * C832 + C13576 * C1094) *
                          C826) +
                     (C13730 * C838 + C13576 * C1099 + C13731 * C2578 +
                      C13577 * C2832 + C13732 * C3369 + C13578 * C3547) *
                         C822 -
                     (C13732 * C3365 + C13578 * C3543 + C13731 * C2572 +
                      C13577 * C2829 + C13730 * C830 + C13576 * C1095) *
                         C828 -
                     (C13732 * C3368 + C13578 * C3546 + C13731 * C2579 +
                      C13577 * C2833 + C13730 * C837 + C13576 * C1100) *
                         C823) *
                        C90634 * C90485 * C90567 * C90555)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   (((C13730 * C107 + C13576 * C308 + C13731 * C832 +
                      C13577 * C1094 + C13732 * C2570 + C13578 * C2827) *
                         C3364 +
                     (C13730 * C116 + C13576 * C314 + C13731 * C839 +
                      C13577 * C1098 + C13732 * C2577 + C13578 * C2831) *
                         C90498) *
                        C90634 * C90485 * C90567 * C3360 -
                    ((C13732 * C3370 + C13578 * C3548 + C13731 * C2577 +
                      C13577 * C2831 + C13730 * C839 + C13576 * C1098) *
                         C90498 +
                     (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 +
                      C13577 * C2827 + C13730 * C832 + C13576 * C1094) *
                         C3364) *
                        C90634 * C90485 * C90567 * C3361 +
                    ((C13730 * C2570 + C13576 * C2827 + C13731 * C3367 +
                      C13577 * C3545 + C13732 * C15525 + C13578 * C15808) *
                         C3364 +
                     (C13730 * C2577 + C13576 * C2831 + C13731 * C3370 +
                      C13577 * C3548 + C13732 * C15528 + C13578 * C15810) *
                         C90498) *
                        C90634 * C90485 * C90567 * C3362 -
                    ((C13732 * C16293 + C13578 * C16476 + C13731 * C15528 +
                      C13577 * C15810 + C13730 * C3370 + C13576 * C3548) *
                         C90498 +
                     (C13732 * C16292 + C13578 * C16475 + C13731 * C15525 +
                      C13577 * C15808 + C13730 * C3367 + C13576 * C3545) *
                         C3364) *
                        C90634 * C90485 * C90567 * C3363)) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[73] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C923 +
            (C307 * C182 + C90623 * C394) * C90752 -
            (C307 * C832 + C90623 * C1094) * C924 -
            (C307 * C927 + C90623 * C1195) * C90555) *
               C90634 * C89 +
           (C1201 + C1202 - C1203 - C1220) * C90634 * C90 + C1225 * C91) *
              C821 +
          ((C1203 - (C1202 + C1201) + C1220) * C90634 * C89 +
           (C1208 - (C1207 + C1206) + C1222) * C90634 * C90 +
           (C1211 - (C1212 + C1213) + C1223) * C90634 * C91) *
              C822 +
          (C1225 * C89 + (C1213 + C1212 - C1211 - C1223) * C90634 * C90 +
           (C343 * C923 + C416 * C90752 -
            (C307 * C833 + C90623 * C1097) * C924 -
            (C307 * C929 + C90623 * C1199) * C90555) *
               C90634 * C91) *
              C823) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C307 * C107 + C90623 * C308) * C3427 +
           (C307 * C182 + C90623 * C394) * C3360 -
           (C307 * C832 + C90623 * C1094) * C3428 -
           (C307 * C927 + C90623 * C1195) * C3361 +
           (C307 * C2570 + C90623 * C2827) * C3429 +
           (C307 * C2663 + C90623 * C2921) * C3362 -
           (C307 * C3367 + C90623 * C3545) * C3430 -
           (C307 * C3433 + C90623 * C3599) * C3363) *
              C90634 * C89 +
          (C337 * C3427 + C413 * C3360 - C1116 * C3428 - C1216 * C3361 +
           C2844 * C3429 + C2940 * C3362 -
           (C307 * C3366 + C90623 * C3544) * C3430 -
           (C307 * C3432 + C90623 * C3600) * C3363) *
              C90634 * C90 +
          (C339 * C3427 + C414 * C3360 - C1118 * C3428 - C1218 * C3361 +
           C2846 * C3429 + C2941 * C3362 -
           (C307 * C3365 + C90623 * C3543) * C3430 -
           (C307 * C3431 + C90623 * C3601) * C3363) *
              C90634 * C91) *
         C90498 * C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C923 +
           (C13730 * C182 + C13576 * C394 + C13731 * C927 + C13577 * C1195 +
            C13732 * C2663 + C13578 * C2921) *
               C90752 -
           (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
            C13730 * C832 + C13576 * C1094) *
               C924 -
           (C13732 * C3433 + C13578 * C3599 + C13731 * C2663 + C13577 * C2921 +
            C13730 * C927 + C13576 * C1195) *
               C90555) *
              C90634 * C90485 * C821 +
          ((C13730 * C829 + C13576 * C1093 + C13731 * C2571 + C13577 * C2828 +
            C13732 * C3366 + C13578 * C3544) *
               C924 -
           ((C13732 * C2664 + C13578 * C2922 + C13731 * C926 + C13577 * C1196 +
             C13730 * C183 + C13576 * C395) *
                C90752 +
            (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
             C13730 * C108 + C13576 * C309) *
                C923) +
           (C13730 * C926 + C13576 * C1196 + C13731 * C2664 + C13577 * C2922 +
            C13732 * C3432 + C13578 * C3600) *
               C90555) *
              C90634 * C90485 * C822 +
          ((C13730 * C109 + C13576 * C310 + C13731 * C830 + C13577 * C1095 +
            C13732 * C2572 + C13578 * C2829) *
               C923 +
           (C13730 * C184 + C13576 * C396 + C13731 * C925 + C13577 * C1197 +
            C13732 * C2665 + C13578 * C2923) *
               C90752 -
           (C13732 * C3365 + C13578 * C3543 + C13731 * C2572 + C13577 * C2829 +
            C13730 * C830 + C13576 * C1095) *
               C924 -
           (C13732 * C3431 + C13578 * C3601 + C13731 * C2665 + C13577 * C2923 +
            C13730 * C925 + C13576 * C1197) *
               C90555) *
              C90634 * C90485 * C823) *
         C90567) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
           C13732 * C2570 + C13578 * C2827) *
              C3427 +
          (C13730 * C182 + C13576 * C394 + C13731 * C927 + C13577 * C1195 +
           C13732 * C2663 + C13578 * C2921) *
              C3360 -
          (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
           C13730 * C832 + C13576 * C1094) *
              C3428 -
          (C13732 * C3433 + C13578 * C3599 + C13731 * C2663 + C13577 * C2921 +
           C13730 * C927 + C13576 * C1195) *
              C3361 +
          (C13730 * C2570 + C13576 * C2827 + C13731 * C3367 + C13577 * C3545 +
           C13732 * C15525 + C13578 * C15808) *
              C3429 +
          (C13730 * C2663 + C13576 * C2921 + C13731 * C3433 + C13577 * C3599 +
           C13732 * C15634 + C13578 * C15886) *
              C3362 -
          (C13732 * C16292 + C13578 * C16475 + C13731 * C15525 +
           C13577 * C15808 + C13730 * C3367 + C13576 * C3545) *
              C3430 -
          (C13732 * C16362 + C13578 * C16527 + C13731 * C15634 +
           C13577 * C15886 + C13730 * C3433 + C13576 * C3599) *
              C3363) *
         C90634 * C90485 * C90498 * C90567) /
            (p * q * std::sqrt(p + q));
    d2eeyz[73] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C244 +
             (C307 * C245 + C90623 * C474) * C90567) *
                C90634 * C89 +
            (C481 + C497) * C90634 * C90 + C503 * C91) *
               C90752 -
           (C1321 * C91 + (C1318 + C1310) * C90634 * C90 +
            ((C307 * C1011 + C90623 * C1301) * C90567 +
             (C307 * C832 + C90623 * C1094) * C244) *
                C90634 * C89) *
               C90555) *
              C821 +
          (((C1310 + C1318) * C90634 * C89 + (C1307 + C1317) * C90634 * C90 +
            (C1311 + C1319) * C90634 * C91) *
               C90555 -
           (C504 * C91 + (C498 + C484) * C90634 * C90 +
            (C497 + C481) * C90634 * C89) *
               C90752) *
              C822 +
          ((C503 * C89 + (C489 + C499) * C90634 * C90 +
            (C490 + C500) * C90634 * C91) *
               C90752 -
           (((C307 * C1013 + C90623 * C1303) * C90567 +
             (C307 * C833 + C90623 * C1097) * C244) *
                C90634 * C91 +
            (C1319 + C1311) * C90634 * C90 + C1321 * C89) *
               C90555) *
              C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C244 +
            (C307 * C245 + C90623 * C474) * C90567) *
               C90634 * C89 +
           (C481 + C497) * C90634 * C90 + C503 * C91) *
              C3360 -
          (C1321 * C91 + (C1318 + C1310) * C90634 * C90 +
           ((C307 * C1011 + C90623 * C1301) * C90567 +
            (C307 * C832 + C90623 * C1094) * C244) *
               C90634 * C89) *
              C3361 +
          (((C307 * C2570 + C90623 * C2827) * C244 +
            (C307 * C2745 + C90623 * C3017) * C90567) *
               C90634 * C89 +
           (C3022 + C3030) * C90634 * C90 + (C3025 + C3031) * C90634 * C91) *
              C3362 -
          (((C307 * C3487 + C90623 * C3652) * C90567 +
            (C307 * C3365 + C90623 * C3543) * C244) *
               C90634 * C91 +
           ((C307 * C3488 + C90623 * C3653) * C90567 +
            (C307 * C3366 + C90623 * C3544) * C244) *
               C90634 * C90 +
           ((C307 * C3489 + C90623 * C3654) * C90567 +
            (C307 * C3367 + C90623 * C3545) * C244) *
               C90634 * C89) *
              C3363) *
         C90498) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
             C13732 * C2570 + C13578 * C2827) *
                C244 +
            (C13730 * C245 + C13576 * C474 + C13731 * C1011 + C13577 * C1301 +
             C13732 * C2745 + C13578 * C3017) *
                C90567) *
               C90634 * C90485 * C90752 -
           ((C13732 * C3489 + C13578 * C3654 + C13731 * C2745 + C13577 * C3017 +
             C13730 * C1011 + C13576 * C1301) *
                C90567 +
            (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
             C13730 * C832 + C13576 * C1094) *
                C244) *
               C90634 * C90485 * C90555) *
              C821 +
          (((C13730 * C829 + C13576 * C1093 + C13731 * C2571 + C13577 * C2828 +
             C13732 * C3366 + C13578 * C3544) *
                C244 +
            (C13730 * C1010 + C13576 * C1300 + C13731 * C2746 + C13577 * C3018 +
             C13732 * C3488 + C13578 * C3653) *
                C90567) *
               C90634 * C90485 * C90555 -
           ((C13732 * C2746 + C13578 * C3018 + C13731 * C1010 + C13577 * C1300 +
             C13730 * C246 + C13576 * C475) *
                C90567 +
            (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
             C13730 * C108 + C13576 * C309) *
                C244) *
               C90634 * C90485 * C90752) *
              C822 +
          (((C13730 * C109 + C13576 * C310 + C13731 * C830 + C13577 * C1095 +
             C13732 * C2572 + C13578 * C2829) *
                C244 +
            (C13730 * C247 + C13576 * C476 + C13731 * C1009 + C13577 * C1299 +
             C13732 * C2747 + C13578 * C3019) *
                C90567) *
               C90634 * C90485 * C90752 -
           ((C13732 * C3487 + C13578 * C3652 + C13731 * C2747 + C13577 * C3019 +
             C13730 * C1009 + C13576 * C1299) *
                C90567 +
            (C13732 * C3365 + C13578 * C3543 + C13731 * C2572 + C13577 * C2829 +
             C13730 * C830 + C13576 * C1095) *
                C244) *
               C90634 * C90485 * C90555) *
              C823)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C244 +
           (C13730 * C245 + C13576 * C474 + C13731 * C1011 + C13577 * C1301 +
            C13732 * C2745 + C13578 * C3017) *
               C90567) *
              C90634 * C90485 * C3360 -
          ((C13732 * C3489 + C13578 * C3654 + C13731 * C2745 + C13577 * C3017 +
            C13730 * C1011 + C13576 * C1301) *
               C90567 +
           (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
            C13730 * C832 + C13576 * C1094) *
               C244) *
              C90634 * C90485 * C3361 +
          ((C13730 * C2570 + C13576 * C2827 + C13731 * C3367 + C13577 * C3545 +
            C13732 * C15525 + C13578 * C15808) *
               C244 +
           (C13730 * C2745 + C13576 * C3017 + C13731 * C3489 + C13577 * C3654 +
            C13732 * C15718 + C13578 * C15962) *
               C90567) *
              C90634 * C90485 * C3362 -
          ((C13732 * C16417 + C13578 * C16578 + C13731 * C15718 +
            C13577 * C15962 + C13730 * C3489 + C13576 * C3654) *
               C90567 +
           (C13732 * C16292 + C13578 * C16475 + C13731 * C15525 +
            C13577 * C15808 + C13730 * C3367 + C13576 * C3545) *
               C244) *
              C90634 * C90485 * C3363) *
         C90498) /
            (p * q * std::sqrt(p + q));
    d2eezx[73] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C90634 * C555) * C826 +
                      (C554 * C116 + C90634 * C561) * C821 - C584 * C827 -
                      C585 * C822 + C586 * C828 + C587 * C823) *
                         C89 +
                     (C584 * C826 + C585 * C821 - C586 * C827 - C587 * C822 +
                      C588 * C828 + C589 * C823) *
                         C90 +
                     (C586 * C826 + C587 * C821 - C588 * C827 - C589 * C822 +
                      C590 * C828 + C591 * C823) *
                         C91) *
                        C90623 * C90567 * C90752 +
                    ((C1418 * C827 -
                      ((C554 * C839 + C90634 * C1400) * C821 +
                       (C554 * C832 + C90634 * C1396) * C826) +
                      C1419 * C822 - C1420 * C828 - C1421 * C823) *
                         C89 +
                     (C1420 * C827 - (C1419 * C821 + C1418 * C826) +
                      C1421 * C822 - C1422 * C828 - C1423 * C823) *
                         C90 +
                     (C1422 * C827 - (C1421 * C821 + C1420 * C826) +
                      C1423 * C822 - (C554 * C833 + C90634 * C1399) * C828 -
                      (C554 * C843 + C90634 * C1404) * C823) *
                         C91) *
                        C90623 * C90567 * C90555)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C90634 * C555) * C3364 +
                      (C554 * C116 + C90634 * C561) * C90498) *
                         C89 +
                     (C584 * C3364 + C585 * C90498) * C90 +
                     (C586 * C3364 + C587 * C90498) * C91) *
                        C90623 * C90567 * C3360 -
                    ((C1421 * C90498 + C1420 * C3364) * C91 +
                     (C1419 * C90498 + C1418 * C3364) * C90 +
                     ((C554 * C839 + C90634 * C1400) * C90498 +
                      (C554 * C832 + C90634 * C1396) * C3364) *
                         C89) *
                        C90623 * C90567 * C3361 +
                    (((C554 * C2570 + C90634 * C3105) * C3364 +
                      (C554 * C2577 + C90634 * C3109) * C90498) *
                         C89 +
                     (C3122 * C3364 + C3123 * C90498) * C90 +
                     (C3124 * C3364 + C3125 * C90498) * C91) *
                        C90623 * C90567 * C3362 -
                    (((C554 * C3368 + C90634 * C3708) * C90498 +
                      (C554 * C3365 + C90634 * C3705) * C3364) *
                         C91 +
                     ((C554 * C3369 + C90634 * C3709) * C90498 +
                      (C554 * C3366 + C90634 * C3706) * C3364) *
                         C90 +
                     ((C554 * C3370 + C90634 * C3710) * C90498 +
                      (C554 * C3367 + C90634 * C3707) * C3364) *
                         C89) *
                        C90623 * C90567 * C3363)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C90634 * C555) * C826 +
                      (C554 * C116 + C90634 * C561) * C821 - C584 * C827 -
                      C585 * C822 + C586 * C828 + C587 * C823) *
                         C90485 * C13576 +
                     (C14618 + C14619 - C14602 - C14603 + C14604 + C14605) *
                         C90485 * C13577 +
                     (C14620 + C14621 - C14610 - C14611 + C14612 + C14613) *
                         C90485 * C13578) *
                        C90567 * C90752 +
                    ((C14602 - (C14619 + C14618) + C14603 - C14604 - C14605) *
                         C90485 * C13576 +
                     (C14610 - (C14621 + C14620) + C14611 - C14612 - C14613) *
                         C90485 * C13577 +
                     ((C554 * C3366 + C90634 * C3706) * C827 -
                      ((C554 * C3370 + C90634 * C3710) * C821 +
                       (C554 * C3367 + C90634 * C3707) * C826) +
                      (C554 * C3369 + C90634 * C3709) * C822 -
                      (C554 * C3365 + C90634 * C3705) * C828 -
                      (C554 * C3368 + C90634 * C3708) * C823) *
                         C90485 * C13578) *
                        C90567 * C90555)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C90634 * C555) * C3364 +
                      (C554 * C116 + C90634 * C561) * C90498) *
                         C90485 * C13576 +
                     (C16632 + C16633) * C90485 * C13577 + C16646 * C13578) *
                        C90567 * C3360 -
                    (C16647 * C13578 + (C16635 + C16634) * C90485 * C13577 +
                     (C16633 + C16632) * C90485 * C13576) *
                        C90567 * C3361 +
                    (C16646 * C13576 + (C16637 + C16636) * C90485 * C13577 +
                     (C16648 + C16649) * C90485 * C13578) *
                        C90567 * C3362 -
                    (((C554 * C16293 + C90634 * C16630) * C90498 +
                      (C554 * C16292 + C90634 * C16629) * C3364) *
                         C90485 * C13578 +
                     (C16649 + C16648) * C90485 * C13577 + C16647 * C13576) *
                        C90567 * C3363)) /
                      (p * q * std::sqrt(p + q));
    d2eezy[73] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C923 +
            (C554 * C182 + C90634 * C641) * C90752 -
            (C554 * C832 + C90634 * C1396) * C924 -
            (C554 * C927 + C90634 * C1497) * C90555) *
               C89 +
           (C1503 + C1504 - C1505 - C1522) * C90 + C1526 * C91) *
              C90623 * C821 +
          ((C1505 - (C1504 + C1503) + C1522) * C89 +
           (C1510 - (C1509 + C1508) + C1524) * C90 +
           (C1513 - (C1514 + C1515) + C1525) * C91) *
              C90623 * C822 +
          (C1526 * C89 + (C1515 + C1514 - C1513 - C1525) * C90 +
           (C590 * C923 + C663 * C90752 -
            (C554 * C833 + C90634 * C1399) * C924 -
            (C554 * C929 + C90634 * C1501) * C90555) *
               C91) *
              C90623 * C823) *
         C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C554 * C107 + C90634 * C555) * C3427 +
           (C554 * C182 + C90634 * C641) * C3360 -
           (C554 * C832 + C90634 * C1396) * C3428 -
           (C554 * C927 + C90634 * C1497) * C3361 +
           (C554 * C2570 + C90634 * C3105) * C3429 +
           (C554 * C2663 + C90634 * C3199) * C3362 -
           (C554 * C3367 + C90634 * C3707) * C3430 -
           (C554 * C3433 + C90634 * C3761) * C3363) *
              C89 +
          (C584 * C3427 + C660 * C3360 - C1418 * C3428 - C1518 * C3361 +
           C3122 * C3429 + C3218 * C3362 -
           (C554 * C3366 + C90634 * C3706) * C3430 -
           (C554 * C3432 + C90634 * C3762) * C3363) *
              C90 +
          (C586 * C3427 + C661 * C3360 - C1420 * C3428 - C1520 * C3361 +
           C3124 * C3429 + C3219 * C3362 -
           (C554 * C3365 + C90634 * C3705) * C3430 -
           (C554 * C3431 + C90634 * C3763) * C3363) *
              C91) *
         C90623 * C90498 * C90567) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C923 +
            (C554 * C182 + C90634 * C641) * C90752 - C14614 * C924 -
            C14700 * C90555) *
               C90485 * C13576 +
           (C14614 * C923 + C14700 * C90752 - C14616 * C924 - C14701 * C90555) *
               C90485 * C13577 +
           (C14616 * C923 + C14701 * C90752 -
            (C554 * C3367 + C90634 * C3707) * C924 -
            (C554 * C3433 + C90634 * C3761) * C90555) *
               C90485 * C13578) *
              C821 +
          ((C1505 - (C1504 + C1503) + C1522) * C90485 * C13576 +
           (C3122 * C924 - (C1518 * C90752 + C1418 * C923) + C3218 * C90555) *
               C90485 * C13577 +
           ((C554 * C3366 + C90634 * C3706) * C924 -
            (C3218 * C90752 + C3122 * C923) +
            (C554 * C3432 + C90634 * C3762) * C90555) *
               C90485 * C13578) *
              C822 +
          (C1526 * C90485 * C13576 +
           (C1420 * C923 + C1520 * C90752 - C3124 * C924 - C3219 * C90555) *
               C90485 * C13577 +
           (C3124 * C923 + C3219 * C90752 -
            (C554 * C3365 + C90634 * C3705) * C924 -
            (C554 * C3431 + C90634 * C3763) * C90555) *
               C90485 * C13578) *
              C823) *
         C90567) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C554 * C107 + C90634 * C555) * C3427 +
           (C554 * C182 + C90634 * C641) * C3360 - C14614 * C3428 -
           C14700 * C3361 + C14616 * C3429 + C14701 * C3362 - C16062 * C3430 -
           C16151 * C3363) *
              C90485 * C13576 +
          (C14614 * C3427 + C14700 * C3360 - C14616 * C3428 - C14701 * C3361 +
           C16062 * C3429 + C16151 * C3362 - C16644 * C3430 - C16703 * C3363) *
              C90485 * C13577 +
          (C14616 * C3427 + C14701 * C3360 - C16062 * C3428 - C16151 * C3361 +
           C16644 * C3429 + C16703 * C3362 -
           (C554 * C16292 + C90634 * C16629) * C3430 -
           (C554 * C16362 + C90634 * C16699) * C3363) *
              C90485 * C13578) *
         C90498 * C90567) /
            (p * q * std::sqrt(p + q));
    d2eezz[73] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C244 +
             (C554 * C245 + C90634 * C719) * C90567) *
                C89 +
            (C726 + C742) * C90 + C746 * C91) *
               C90623 * C90752 -
           (C1621 * C91 + (C1619 + C1611) * C90 +
            ((C554 * C1011 + C90634 * C1602) * C90567 +
             (C554 * C832 + C90634 * C1396) * C244) *
                C89) *
               C90623 * C90555) *
              C821 +
          (((C1611 + C1619) * C89 + (C1608 + C1618) * C90 +
            (C1612 + C1620) * C91) *
               C90623 * C90555 -
           (C747 * C91 + (C743 + C729) * C90 + (C742 + C726) * C89) * C90623 *
               C90752) *
              C822 +
          ((C746 * C89 + (C734 + C744) * C90 + (C735 + C745) * C91) * C90623 *
               C90752 -
           (((C554 * C1013 + C90634 * C1604) * C90567 +
             (C554 * C833 + C90634 * C1399) * C244) *
                C91 +
            (C1620 + C1612) * C90 + C1621 * C89) *
               C90623 * C90555) *
              C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C244 +
            (C554 * C245 + C90634 * C719) * C90567) *
               C89 +
           (C726 + C742) * C90 + C746 * C91) *
              C90623 * C3360 -
          (C1621 * C91 + (C1619 + C1611) * C90 +
           ((C554 * C1011 + C90634 * C1602) * C90567 +
            (C554 * C832 + C90634 * C1396) * C244) *
               C89) *
              C90623 * C3361 +
          (((C554 * C2570 + C90634 * C3105) * C244 +
            (C554 * C2745 + C90634 * C3295) * C90567) *
               C89 +
           (C3300 + C3308) * C90 + (C3303 + C3309) * C91) *
              C90623 * C3362 -
          (((C554 * C3487 + C90634 * C3814) * C90567 +
            (C554 * C3365 + C90634 * C3705) * C244) *
               C91 +
           ((C554 * C3488 + C90634 * C3815) * C90567 +
            (C554 * C3366 + C90634 * C3706) * C244) *
               C90 +
           ((C554 * C3489 + C90634 * C3816) * C90567 +
            (C554 * C3367 + C90634 * C3707) * C244) *
               C89) *
              C90623 * C3363) *
         C90498) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C244 +
             (C554 * C245 + C90634 * C719) * C90567) *
                C90485 * C13576 +
            (C14776 + C14784) * C90485 * C13577 +
            (C14779 + C14785) * C90485 * C13578) *
               C90752 -
           (((C554 * C3489 + C90634 * C3816) * C90567 +
             (C554 * C3367 + C90634 * C3707) * C244) *
                C90485 * C13578 +
            (C14785 + C14779) * C90485 * C13577 +
            (C14784 + C14776) * C90485 * C13576) *
               C90555) *
              C821 +
          (((C1611 + C1619) * C90485 * C13576 +
            (C3300 + C3308) * C90485 * C13577 +
            ((C554 * C3366 + C90634 * C3706) * C244 +
             (C554 * C3488 + C90634 * C3815) * C90567) *
                C90485 * C13578) *
               C90555 -
           ((C3308 + C3300) * C90485 * C13578 +
            (C1619 + C1611) * C90485 * C13577 +
            (C742 + C726) * C90485 * C13576) *
               C90752) *
              C822 +
          ((C746 * C90485 * C13576 + (C1608 + C1618) * C90485 * C13577 +
            (C3303 + C3309) * C90485 * C13578) *
               C90752 -
           (((C554 * C3487 + C90634 * C3814) * C90567 +
             (C554 * C3365 + C90634 * C3705) * C244) *
                C90485 * C13578 +
            (C3309 + C3303) * C90485 * C13577 + C1621 * C90485 * C13576) *
               C90555) *
              C823)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C244 +
            (C554 * C245 + C90634 * C719) * C90567) *
               C90485 * C13576 +
           (C14776 + C14784) * C90485 * C13577 + C16237 * C13578) *
              C3360 -
          (C16759 * C13578 + (C14785 + C14779) * C90485 * C13577 +
           (C14784 + C14776) * C90485 * C13576) *
              C3361 +
          (C16237 * C13576 + (C16232 + C16241) * C90485 * C13577 +
           (C16756 + C16761) * C90485 * C13578) *
              C3362 -
          (((C554 * C16417 + C90634 * C16753) * C90567 +
            (C554 * C16292 + C90634 * C16629) * C244) *
               C90485 * C13578 +
           (C16761 + C16756) * C90485 * C13577 + C16759 * C13576) *
              C3363) *
         C90498) /
            (p * q * std::sqrt(p + q));
    d2eexx[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C826 +
           (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 + C102 * C118 +
            C91 * C127) *
               C821 -
           (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 + C100 * C108 +
            C89 * C114) *
               C827 -
           (C102 * C120 + C91 * C128 + C101 * C118 + C90 * C127 + C100 * C117 +
            C89 * C126) *
               C822 +
           (C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 + C102 * C111 +
            C91 * C121) *
               C828 +
           (C100 * C118 + C89 * C127 + C101 * C120 + C90 * C128 + C102 * C122 +
            C91 * C129) *
               C823) *
              C90623 * C90634 * C90753 +
          ((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
            C102 * C1699 + C91 * C1704) *
               C827 -
           ((C102 * C1705 + C91 * C1712 + C101 * C1706 + C90 * C1713 +
             C100 * C1707 + C89 * C1714) *
                C821 +
            (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
             C100 * C1700 + C89 * C1708) *
                C826) +
           (C100 * C1706 + C89 * C1713 + C101 * C1705 + C90 * C1712 +
            C102 * C1709 + C91 * C1715) *
               C822 -
           (C102 * C1701 + C91 * C1710 + C101 * C1699 + C90 * C1704 +
            C100 * C1698 + C89 * C1703) *
               C828 -
           (C102 * C1711 + C91 * C1716 + C101 * C1709 + C90 * C1715 +
            C100 * C1705 + C89 * C1712) *
               C823) *
              C90623 * C90634 * C90579) *
         C90541) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
             C91 * C115) *
                C3364 +
            (C100 * C116 + C89 * C125 + C101 * C117 + C90 * C126 + C102 * C118 +
             C91 * C127) *
                C90498) *
               C90623 * C90634 * C90753 -
           ((C102 * C1705 + C91 * C1712 + C101 * C1706 + C90 * C1713 +
             C100 * C1707 + C89 * C1714) *
                C90498 +
            (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
             C100 * C1700 + C89 * C1708) *
                C3364) *
               C90623 * C90634 * C90579) *
              C2565 +
          (((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
             C102 * C3893 + C91 * C3899) *
                C3364 +
            (C100 * C3900 + C89 * C3909 + C101 * C3901 + C90 * C3910 +
             C102 * C3902 + C91 * C3911) *
                C90498) *
               C90623 * C90634 * C90579 -
           ((C102 * C837 + C91 * C844 + C101 * C838 + C90 * C845 + C100 * C839 +
             C89 * C846) *
                C90498 +
            (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 + C100 * C832 +
             C89 * C840) *
                C3364) *
               C90623 * C90634 * C90753) *
              C2566 +
          (((C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
             C102 * C2572 + C91 * C2576) *
                C3364 +
            (C100 * C2577 + C89 * C2582 + C101 * C2578 + C90 * C2583 +
             C102 * C2579 + C91 * C2584) *
                C90498) *
               C90623 * C90634 * C90753 -
           ((C102 * C3903 + C91 * C3912 + C101 * C3904 + C90 * C3913 +
             C100 * C3905 + C89 * C3914) *
                C90498 +
            (C102 * C3894 + C91 * C3906 + C101 * C3895 + C90 * C3907 +
             C100 * C3896 + C89 * C3908) *
                C3364) *
               C90623 * C90634 * C90579) *
              C2567)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C826 +
            (C13579 * C116 + C90485 * C125) * C821 -
            (C13579 * C108 + C90485 * C114) * C827 -
            (C13579 * C117 + C90485 * C126) * C822 +
            (C13579 * C109 + C90485 * C115) * C828 +
            (C13579 * C118 + C90485 * C127) * C823) *
               C13576 +
           (C14094 + C14095 - C14096 - C14097 + C14098 + C14099) * C13577 +
           (C14100 + C14101 - C14102 - C14103 + C14104 + C14105) * C13578) *
              C90634 * C90753 +
          (((C13579 * C1697 + C90485 * C1702) * C827 -
            ((C13579 * C1707 + C90485 * C1714) * C821 +
             (C13579 * C1700 + C90485 * C1708) * C826) +
            (C13579 * C1706 + C90485 * C1713) * C822 -
            (C13579 * C1698 + C90485 * C1703) * C828 -
            (C13579 * C1705 + C90485 * C1712) * C823) *
               C13576 +
           ((C13579 * C3892 + C90485 * C3898) * C827 -
            ((C13579 * C3900 + C90485 * C3909) * C821 +
             (C13579 * C3891 + C90485 * C3897) * C826) +
            (C13579 * C3901 + C90485 * C3910) * C822 -
            (C13579 * C3893 + C90485 * C3899) * C828 -
            (C13579 * C3902 + C90485 * C3911) * C823) *
               C13577 +
           ((C13579 * C3895 + C90485 * C3907) * C827 -
            ((C13579 * C3905 + C90485 * C3914) * C821 +
             (C13579 * C3896 + C90485 * C3908) * C826) +
            (C13579 * C3904 + C90485 * C3913) * C822 -
            (C13579 * C3894 + C90485 * C3906) * C828 -
            (C13579 * C3903 + C90485 * C3912) * C823) *
               C13578) *
              C90634 * C90579) *
         C90541) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C3364 +
             (C13579 * C116 + C90485 * C125) * C90498) *
                C13576 +
            (C16297 + C16298) * C13577 + C16307 * C13578) *
               C90634 * C90753 -
           (C16868 * C13578 + (C16864 + C16865) * C13577 +
            ((C13579 * C1707 + C90485 * C1714) * C90498 +
             (C13579 * C1700 + C90485 * C1708) * C3364) *
                C13576) *
               C90634 * C90579) *
              C2565 +
          (((C16865 + C16864) * C13576 + (C16863 + C16862) * C13577 +
            (C16866 + C16867) * C13578) *
               C90634 * C90579 -
           (C16308 * C13578 + (C16300 + C16299) * C13577 +
            (C16298 + C16297) * C13576) *
               C90634 * C90753) *
              C2566 +
          ((C16307 * C13576 + (C16302 + C16301) * C13577 +
            (C16311 + C16312) * C13578) *
               C90634 * C90753 -
           (((C13579 * C16839 + C90485 * C16842) * C90498 +
             (C13579 * C16836 + C90485 * C16840) * C3364) *
                C13578 +
            (C16867 + C16866) * C13577 + C16868 * C13576) *
               C90634 * C90579) *
              C2567)) /
            (p * q * std::sqrt(p + q));
    d2eexy[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
             C91 * C115) *
                C181 +
            (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 + C102 * C184 +
             C91 * C190) *
                C90541) *
               C90623 * C90634 * C821 -
           ((C102 * C185 + C91 * C191 + C101 * C184 + C90 * C190 + C100 * C183 +
             C89 * C189) *
                C90541 +
            (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 + C100 * C108 +
             C89 * C114) *
                C181) *
               C90623 * C90634 * C822 +
           ((C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 + C102 * C111 +
             C91 * C121) *
                C181 +
            (C100 * C184 + C89 * C190 + C101 * C185 + C90 * C191 + C102 * C186 +
             C91 * C192) *
                C90541) *
               C90623 * C90634 * C823) *
              C90753 +
          (((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
             C102 * C1699 + C91 * C1704) *
                C181 +
            (C100 * C1791 + C89 * C1796 + C101 * C1792 + C90 * C1797 +
             C102 * C1793 + C91 * C1798) *
                C90541) *
               C90623 * C90634 * C822 -
           ((C102 * C1792 + C91 * C1797 + C101 * C1791 + C90 * C1796 +
             C100 * C1794 + C89 * C1799) *
                C90541 +
            (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
             C100 * C1700 + C89 * C1708) *
                C181) *
               C90623 * C90634 * C821 -
           ((C102 * C1795 + C91 * C1800 + C101 * C1793 + C90 * C1798 +
             C100 * C1792 + C89 * C1797) *
                C90541 +
            (C102 * C1701 + C91 * C1710 + C101 * C1699 + C90 * C1704 +
             C100 * C1698 + C89 * C1703) *
                C181) *
               C90623 * C90634 * C823) *
              C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C2660 +
           (C100 * C182 + C89 * C188 + C101 * C183 + C90 * C189 + C102 * C184 +
            C91 * C190) *
               C2565 -
           (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 + C100 * C832 +
            C89 * C840) *
               C2661 -
           (C102 * C925 + C91 * C930 + C101 * C926 + C90 * C931 + C100 * C927 +
            C89 * C932) *
               C2566 +
           (C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
            C102 * C2572 + C91 * C2576) *
               C2662 +
           (C100 * C2663 + C89 * C2667 + C101 * C2664 + C90 * C2668 +
            C102 * C2665 + C91 * C2669) *
               C2567) *
              C90623 * C90634 * C90498 * C90753 +
          ((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
            C102 * C3893 + C91 * C3899) *
               C2661 -
           ((C102 * C1792 + C91 * C1797 + C101 * C1791 + C90 * C1796 +
             C100 * C1794 + C89 * C1799) *
                C2565 +
            (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
             C100 * C1700 + C89 * C1708) *
                C2660) +
           (C100 * C3989 + C89 * C3995 + C101 * C3990 + C90 * C3996 +
            C102 * C3991 + C91 * C3997) *
               C2566 -
           (C102 * C3894 + C91 * C3906 + C101 * C3895 + C90 * C3907 +
            C100 * C3896 + C89 * C3908) *
               C2662 -
           (C102 * C3992 + C91 * C3998 + C101 * C3993 + C90 * C3999 +
            C100 * C3994 + C89 * C4000) *
               C2567) *
              C90623 * C90634 * C90498 * C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C13579 * C107 + C90485 * C113) * C181 +
             (C13579 * C182 + C90485 * C188) * C90541) *
                C13576 +
            (C14082 * C181 + C14192 * C90541) * C13577 +
            (C14088 * C181 + C14193 * C90541) * C13578) *
               C90634 * C821 -
           ((C14195 * C90541 + C14090 * C181) * C13578 +
            (C14194 * C90541 + C14084 * C181) * C13577 +
            ((C13579 * C183 + C90485 * C189) * C90541 +
             (C13579 * C108 + C90485 * C114) * C181) *
                C13576) *
               C90634 * C822 +
           (((C13579 * C109 + C90485 * C115) * C181 +
             (C13579 * C184 + C90485 * C190) * C90541) *
                C13576 +
            (C14086 * C181 + C14196 * C90541) * C13577 +
            (C14092 * C181 + C14197 * C90541) * C13578) *
               C90634 * C823) *
              C90753 +
          ((((C13579 * C1697 + C90485 * C1702) * C181 +
             (C13579 * C1791 + C90485 * C1796) * C90541) *
                C13576 +
            ((C13579 * C3892 + C90485 * C3898) * C181 +
             (C13579 * C3990 + C90485 * C3996) * C90541) *
                C13577 +
            ((C13579 * C3895 + C90485 * C3907) * C181 +
             (C13579 * C3993 + C90485 * C3999) * C90541) *
                C13578) *
               C90634 * C822 -
           (((C13579 * C3994 + C90485 * C4000) * C90541 +
             (C13579 * C3896 + C90485 * C3908) * C181) *
                C13578 +
            ((C13579 * C3989 + C90485 * C3995) * C90541 +
             (C13579 * C3891 + C90485 * C3897) * C181) *
                C13577 +
            ((C13579 * C1794 + C90485 * C1799) * C90541 +
             (C13579 * C1700 + C90485 * C1708) * C181) *
                C13576) *
               C90634 * C821 -
           (((C13579 * C3992 + C90485 * C3998) * C90541 +
             (C13579 * C3894 + C90485 * C3906) * C181) *
                C13578 +
            ((C13579 * C3991 + C90485 * C3997) * C90541 +
             (C13579 * C3893 + C90485 * C3899) * C181) *
                C13577 +
            ((C13579 * C1792 + C90485 * C1797) * C90541 +
             (C13579 * C1698 + C90485 * C1703) * C181) *
                C13576) *
               C90634 * C823) *
              C90579)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C2660 +
            (C13579 * C182 + C90485 * C188) * C2565 - C14082 * C2661 -
            C14192 * C2566 + C14088 * C2662 + C14193 * C2567) *
               C13576 +
           (C14082 * C2660 + C14192 * C2565 - C14088 * C2661 - C14193 * C2566 +
            C15553 * C2662 + C15643 * C2567) *
               C13577 +
           (C14088 * C2660 + C14193 * C2565 - C15553 * C2661 - C15643 * C2566 +
            C16309 * C2662 + C16367 * C2567) *
               C13578) *
              C90634 * C90498 * C90753 +
          ((C16859 * C2661 -
            ((C13579 * C1794 + C90485 * C1799) * C2565 +
             (C13579 * C1700 + C90485 * C1708) * C2660) +
            C16953 * C2566 - C16857 * C2662 - C16954 * C2567) *
               C13576 +
           (C16857 * C2661 - (C16953 * C2565 + C16859 * C2660) +
            C16954 * C2566 - C16860 * C2662 - C16955 * C2567) *
               C13577 +
           (C16860 * C2661 - (C16954 * C2565 + C16857 * C2660) +
            C16955 * C2566 - (C13579 * C16836 + C90485 * C16840) * C2662 -
            (C13579 * C16943 + C90485 * C16945) * C2567) *
               C13578) *
              C90634 * C90498 * C90579)) /
            (p * q * std::sqrt(p + q));
    d2eexz[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C1875 +
           (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 + C102 * C247 +
            C91 * C253) *
               C90753 -
           (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
            C100 * C1700 + C89 * C1708) *
               C1876 -
           (C102 * C1877 + C91 * C1882 + C101 * C1878 + C90 * C1883 +
            C100 * C1879 + C89 * C1884) *
               C90579) *
              C90623 * C90634 * C90541 * C821 +
          ((C100 * C1697 + C89 * C1702 + C101 * C1698 + C90 * C1703 +
            C102 * C1699 + C91 * C1704) *
               C1876 -
           ((C102 * C248 + C91 * C254 + C101 * C247 + C90 * C253 + C100 * C246 +
             C89 * C252) *
                C90753 +
            (C102 * C110 + C91 * C119 + C101 * C109 + C90 * C115 + C100 * C108 +
             C89 * C114) *
                C1875) +
           (C100 * C1878 + C89 * C1883 + C101 * C1877 + C90 * C1882 +
            C102 * C1880 + C91 * C1885) *
               C90579) *
              C90623 * C90634 * C90541 * C822 +
          ((C100 * C109 + C89 * C115 + C101 * C110 + C90 * C119 + C102 * C111 +
            C91 * C121) *
               C1875 +
           (C100 * C247 + C89 * C253 + C101 * C248 + C90 * C254 + C102 * C249 +
            C91 * C255) *
               C90753 -
           (C102 * C1701 + C91 * C1710 + C101 * C1699 + C90 * C1704 +
            C100 * C1698 + C89 * C1703) *
               C1876 -
           (C102 * C1881 + C91 * C1886 + C101 * C1880 + C90 * C1885 +
            C100 * C1877 + C89 * C1882) *
               C90579) *
              C90623 * C90634 * C90541 * C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C107 + C89 * C113 + C101 * C108 + C90 * C114 + C102 * C109 +
            C91 * C115) *
               C1875 +
           (C100 * C245 + C89 * C251 + C101 * C246 + C90 * C252 + C102 * C247 +
            C91 * C253) *
               C90753 -
           (C102 * C1698 + C91 * C1703 + C101 * C1697 + C90 * C1702 +
            C100 * C1700 + C89 * C1708) *
               C1876 -
           (C102 * C1877 + C91 * C1882 + C101 * C1878 + C90 * C1883 +
            C100 * C1879 + C89 * C1884) *
               C90579) *
              C90623 * C90634 * C2565 +
          ((C100 * C3891 + C89 * C3897 + C101 * C3892 + C90 * C3898 +
            C102 * C3893 + C91 * C3899) *
               C1876 -
           ((C102 * C1009 + C91 * C1014 + C101 * C1010 + C90 * C1015 +
             C100 * C1011 + C89 * C1016) *
                C90753 +
            (C102 * C830 + C91 * C835 + C101 * C829 + C90 * C834 + C100 * C832 +
             C89 * C840) *
                C1875) +
           (C100 * C4075 + C89 * C4081 + C101 * C4076 + C90 * C4082 +
            C102 * C4077 + C91 * C4083) *
               C90579) *
              C90623 * C90634 * C2566 +
          ((C100 * C2570 + C89 * C2574 + C101 * C2571 + C90 * C2575 +
            C102 * C2572 + C91 * C2576) *
               C1875 +
           (C100 * C2745 + C89 * C2749 + C101 * C2746 + C90 * C2750 +
            C102 * C2747 + C91 * C2751) *
               C90753 -
           (C102 * C3894 + C91 * C3906 + C101 * C3895 + C90 * C3907 +
            C100 * C3896 + C89 * C3908) *
               C1876 -
           (C102 * C4078 + C91 * C4084 + C101 * C4079 + C90 * C4085 +
            C100 * C4080 + C89 * C4086) *
               C90579) *
              C90623 * C90634 * C2567) *
         C90498) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C1875 +
            (C13579 * C245 + C90485 * C251) * C90753 -
            (C13579 * C1700 + C90485 * C1708) * C1876 -
            (C13579 * C1879 + C90485 * C1884) * C90579) *
               C13576 +
           (C14082 * C1875 + C14290 * C90753 -
            (C13579 * C3891 + C90485 * C3897) * C1876 -
            (C13579 * C4075 + C90485 * C4081) * C90579) *
               C13577 +
           (C14088 * C1875 + C14291 * C90753 -
            (C13579 * C3896 + C90485 * C3908) * C1876 -
            (C13579 * C4080 + C90485 * C4086) * C90579) *
               C13578) *
              C90634 * C90541 * C821 +
          (((C13579 * C1697 + C90485 * C1702) * C1876 -
            ((C13579 * C246 + C90485 * C252) * C90753 +
             (C13579 * C108 + C90485 * C114) * C1875) +
            (C13579 * C1878 + C90485 * C1883) * C90579) *
               C13576 +
           ((C13579 * C3892 + C90485 * C3898) * C1876 -
            (C14292 * C90753 + C14084 * C1875) +
            (C13579 * C4076 + C90485 * C4082) * C90579) *
               C13577 +
           ((C13579 * C3895 + C90485 * C3907) * C1876 -
            (C14293 * C90753 + C14090 * C1875) +
            (C13579 * C4079 + C90485 * C4085) * C90579) *
               C13578) *
              C90634 * C90541 * C822 +
          (((C13579 * C109 + C90485 * C115) * C1875 +
            (C13579 * C247 + C90485 * C253) * C90753 -
            (C13579 * C1698 + C90485 * C1703) * C1876 -
            (C13579 * C1877 + C90485 * C1882) * C90579) *
               C13576 +
           (C14086 * C1875 + C14294 * C90753 -
            (C13579 * C3893 + C90485 * C3899) * C1876 -
            (C13579 * C4077 + C90485 * C4083) * C90579) *
               C13577 +
           (C14092 * C1875 + C14295 * C90753 -
            (C13579 * C3894 + C90485 * C3906) * C1876 -
            (C13579 * C4078 + C90485 * C4084) * C90579) *
               C13578) *
              C90634 * C90541 * C823)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13579 * C107 + C90485 * C113) * C1875 +
            (C13579 * C245 + C90485 * C251) * C90753 -
            (C13579 * C1700 + C90485 * C1708) * C1876 -
            (C13579 * C1879 + C90485 * C1884) * C90579) *
               C13576 +
           (C17034 + C17035 - C17036 - C17053) * C13577 + C17057 * C13578) *
              C90634 * C2565 +
          ((C17036 - (C17035 + C17034) + C17053) * C13576 +
           (C17041 - (C17040 + C17039) + C17055) * C13577 +
           (C17044 - (C17045 + C17046) + C17056) * C13578) *
              C90634 * C2566 +
          (C17057 * C13576 + (C17046 + C17045 - C17044 - C17056) * C13577 +
           (C16309 * C1875 + C16424 * C90753 -
            (C13579 * C16836 + C90485 * C16840) * C1876 -
            (C13579 * C17030 + C90485 * C17032) * C90579) *
               C13578) *
              C90634 * C2567) *
         C90498) /
            (p * q * std::sqrt(p + q));
    d2eeyx[74] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C307 * C107 + C90623 * C308) * C826 +
                      (C307 * C116 + C90623 * C314) * C821 - C337 * C827 -
                      C338 * C822 + C339 * C828 + C340 * C823) *
                         C90634 * C89 +
                     (C337 * C826 + C338 * C821 - C339 * C827 - C340 * C822 +
                      C341 * C828 + C342 * C823) *
                         C90634 * C90 +
                     (C339 * C826 + C340 * C821 - C341 * C827 - C342 * C822 +
                      C343 * C828 + C344 * C823) *
                         C90634 * C91) *
                        C90753 +
                    ((C1984 * C827 -
                      ((C307 * C1707 + C90623 * C1966) * C821 +
                       (C307 * C1700 + C90623 * C1962) * C826) +
                      C1985 * C822 - C1986 * C828 - C1987 * C823) *
                         C90634 * C89 +
                     (C1986 * C827 - (C1985 * C821 + C1984 * C826) +
                      C1987 * C822 - C1988 * C828 - C1989 * C823) *
                         C90634 * C90 +
                     (C1988 * C827 - (C1987 * C821 + C1986 * C826) +
                      C1989 * C822 - (C307 * C1701 + C90623 * C1965) * C828 -
                      (C307 * C1711 + C90623 * C1970) * C823) *
                         C90634 * C91) *
                        C90579) *
                   C90541) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   (((((C307 * C107 + C90623 * C308) * C3364 +
                       (C307 * C116 + C90623 * C314) * C90498) *
                          C90634 * C89 +
                      (C337 * C3364 + C338 * C90498) * C90634 * C90 +
                      (C339 * C3364 + C340 * C90498) * C90634 * C91) *
                         C90753 -
                     ((C1987 * C90498 + C1986 * C3364) * C90634 * C91 +
                      (C1985 * C90498 + C1984 * C3364) * C90634 * C90 +
                      ((C307 * C1707 + C90623 * C1966) * C90498 +
                       (C307 * C1700 + C90623 * C1962) * C3364) *
                          C90634 * C89) *
                         C90579) *
                        C2565 +
                    ((((C307 * C3891 + C90623 * C4161) * C3364 +
                       (C307 * C3900 + C90623 * C4167) * C90498) *
                          C90634 * C89 +
                      ((C307 * C3892 + C90623 * C4162) * C3364 +
                       (C307 * C3901 + C90623 * C4168) * C90498) *
                          C90634 * C90 +
                      ((C307 * C3893 + C90623 * C4163) * C3364 +
                       (C307 * C3902 + C90623 * C4169) * C90498) *
                          C90634 * C91) *
                         C90579 -
                     ((C1119 * C90498 + C1118 * C3364) * C90634 * C91 +
                      (C1117 * C90498 + C1116 * C3364) * C90634 * C90 +
                      ((C307 * C839 + C90623 * C1098) * C90498 +
                       (C307 * C832 + C90623 * C1094) * C3364) *
                          C90634 * C89) *
                         C90753) *
                        C2566 +
                    ((((C307 * C2570 + C90623 * C2827) * C3364 +
                       (C307 * C2577 + C90623 * C2831) * C90498) *
                          C90634 * C89 +
                      (C2844 * C3364 + C2845 * C90498) * C90634 * C90 +
                      (C2846 * C3364 + C2847 * C90498) * C90634 * C91) *
                         C90753 -
                     (((C307 * C3903 + C90623 * C4170) * C90498 +
                       (C307 * C3894 + C90623 * C4164) * C3364) *
                          C90634 * C91 +
                      ((C307 * C3904 + C90623 * C4171) * C90498 +
                       (C307 * C3895 + C90623 * C4165) * C3364) *
                          C90634 * C90 +
                      ((C307 * C3905 + C90623 * C4172) * C90498 +
                       (C307 * C3896 + C90623 * C4166) * C3364) *
                          C90634 * C89) *
                         C90579) *
                        C2567)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   (((C13730 * C107 + C13576 * C308 + C13731 * C832 +
                      C13577 * C1094 + C13732 * C2570 + C13578 * C2827) *
                         C826 +
                     (C13730 * C116 + C13576 * C314 + C13731 * C839 +
                      C13577 * C1098 + C13732 * C2577 + C13578 * C2831) *
                         C821 -
                     (C13732 * C2571 + C13578 * C2828 + C13731 * C829 +
                      C13577 * C1093 + C13730 * C108 + C13576 * C309) *
                         C827 -
                     (C13732 * C2578 + C13578 * C2832 + C13731 * C838 +
                      C13577 * C1099 + C13730 * C117 + C13576 * C315) *
                         C822 +
                     (C13730 * C109 + C13576 * C310 + C13731 * C830 +
                      C13577 * C1095 + C13732 * C2572 + C13578 * C2829) *
                         C828 +
                     (C13730 * C118 + C13576 * C316 + C13731 * C837 +
                      C13577 * C1100 + C13732 * C2579 + C13578 * C2833) *
                         C823) *
                        C90634 * C90485 * C90753 +
                    ((C13730 * C1697 + C13576 * C1961 + C13731 * C3892 +
                      C13577 * C4162 + C13732 * C3895 + C13578 * C4165) *
                         C827 -
                     ((C13732 * C3905 + C13578 * C4172 + C13731 * C3900 +
                       C13577 * C4167 + C13730 * C1707 + C13576 * C1966) *
                          C821 +
                      (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 +
                       C13577 * C4161 + C13730 * C1700 + C13576 * C1962) *
                          C826) +
                     (C13730 * C1706 + C13576 * C1967 + C13731 * C3901 +
                      C13577 * C4168 + C13732 * C3904 + C13578 * C4171) *
                         C822 -
                     (C13732 * C3894 + C13578 * C4164 + C13731 * C3893 +
                      C13577 * C4163 + C13730 * C1698 + C13576 * C1963) *
                         C828 -
                     (C13732 * C3903 + C13578 * C4170 + C13731 * C3902 +
                      C13577 * C4169 + C13730 * C1705 + C13576 * C1968) *
                         C823) *
                        C90634 * C90485 * C90579) *
                   C90541) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C13730 * C107 + C13576 * C308 + C13731 * C832 +
                       C13577 * C1094 + C13732 * C2570 + C13578 * C2827) *
                          C3364 +
                      (C13730 * C116 + C13576 * C314 + C13731 * C839 +
                       C13577 * C1098 + C13732 * C2577 + C13578 * C2831) *
                          C90498) *
                         C90634 * C90485 * C90753 -
                     ((C13732 * C3905 + C13578 * C4172 + C13731 * C3900 +
                       C13577 * C4167 + C13730 * C1707 + C13576 * C1966) *
                          C90498 +
                      (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 +
                       C13577 * C4161 + C13730 * C1700 + C13576 * C1962) *
                          C3364) *
                         C90634 * C90485 * C90579) *
                        C2565 +
                    (((C13730 * C3891 + C13576 * C4161 + C13731 * C3896 +
                       C13577 * C4166 + C13732 * C16835 + C13578 * C17131) *
                          C3364 +
                      (C13730 * C3900 + C13576 * C4167 + C13731 * C3905 +
                       C13577 * C4172 + C13732 * C16838 + C13578 * C17133) *
                          C90498) *
                         C90634 * C90485 * C90579 -
                     ((C13732 * C3370 + C13578 * C3548 + C13731 * C2577 +
                       C13577 * C2831 + C13730 * C839 + C13576 * C1098) *
                          C90498 +
                      (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 +
                       C13577 * C2827 + C13730 * C832 + C13576 * C1094) *
                          C3364) *
                         C90634 * C90485 * C90753) *
                        C2566 +
                    (((C13730 * C2570 + C13576 * C2827 + C13731 * C3367 +
                       C13577 * C3545 + C13732 * C15525 + C13578 * C15808) *
                          C3364 +
                      (C13730 * C2577 + C13576 * C2831 + C13731 * C3370 +
                       C13577 * C3548 + C13732 * C15528 + C13578 * C15810) *
                          C90498) *
                         C90634 * C90485 * C90753 -
                     ((C13732 * C16839 + C13578 * C17134 + C13731 * C16838 +
                       C13577 * C17133 + C13730 * C3905 + C13576 * C4172) *
                          C90498 +
                      (C13732 * C16836 + C13578 * C17132 + C13731 * C16835 +
                       C13577 * C17131 + C13730 * C3896 + C13576 * C4166) *
                          C3364) *
                         C90634 * C90485 * C90579) *
                        C2567)) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C307 * C107 + C90623 * C308) * C181 +
             (C307 * C182 + C90623 * C394) * C90541) *
                C90634 * C89 +
            (C401 + C417) * C90634 * C90 + C423 * C91) *
               C821 -
           (C424 * C91 + (C418 + C404) * C90634 * C90 +
            (C417 + C401) * C90634 * C89) *
               C822 +
           (C423 * C89 + (C409 + C419) * C90634 * C90 +
            (C410 + C420) * C90634 * C91) *
               C823) *
              C90753 +
          (((C2069 + C2081) * C90634 * C89 + (C2072 + C2082) * C90634 * C90 +
            (C2075 + C2083) * C90634 * C91) *
               C822 -
           (C2085 * C91 + (C2081 + C2069) * C90634 * C90 +
            ((C307 * C1794 + C90623 * C2066) * C90541 +
             (C307 * C1700 + C90623 * C1962) * C181) *
                C90634 * C89) *
               C821 -
           (((C307 * C1795 + C90623 * C2067) * C90541 +
             (C307 * C1701 + C90623 * C1965) * C181) *
                C90634 * C91 +
            (C2083 + C2075) * C90634 * C90 + C2085 * C89) *
               C823) *
              C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C2660 +
            (C307 * C182 + C90623 * C394) * C2565 -
            (C307 * C832 + C90623 * C1094) * C2661 -
            (C307 * C927 + C90623 * C1195) * C2566 +
            (C307 * C2570 + C90623 * C2827) * C2662 +
            (C307 * C2663 + C90623 * C2921) * C2567) *
               C90634 * C89 +
           (C2926 + C2927 - C2928 - C2929 + C2930 + C2942) * C90634 * C90 +
           (C2933 + C2934 - C2935 - C2936 + C2937 + C2943) * C90634 * C91) *
              C90498 * C90753 +
          (((C307 * C3891 + C90623 * C4161) * C2661 -
            ((C307 * C1794 + C90623 * C2066) * C2565 +
             (C307 * C1700 + C90623 * C1962) * C2660) +
            (C307 * C3989 + C90623 * C4247) * C2566 -
            (C307 * C3896 + C90623 * C4166) * C2662 -
            (C307 * C3994 + C90623 * C4248) * C2567) *
               C90634 * C89 +
           ((C307 * C3892 + C90623 * C4162) * C2661 -
            (C2078 * C2565 + C1984 * C2660) +
            (C307 * C3990 + C90623 * C4249) * C2566 -
            (C307 * C3895 + C90623 * C4165) * C2662 -
            (C307 * C3993 + C90623 * C4250) * C2567) *
               C90634 * C90 +
           ((C307 * C3893 + C90623 * C4163) * C2661 -
            (C2079 * C2565 + C1986 * C2660) +
            (C307 * C3991 + C90623 * C4251) * C2566 -
            (C307 * C3894 + C90623 * C4164) * C2662 -
            (C307 * C3992 + C90623 * C4252) * C2567) *
               C90634 * C91) *
              C90498 * C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
             C13732 * C2570 + C13578 * C2827) *
                C181 +
            (C13730 * C182 + C13576 * C394 + C13731 * C927 + C13577 * C1195 +
             C13732 * C2663 + C13578 * C2921) *
                C90541) *
               C90634 * C90485 * C821 -
           ((C13732 * C2664 + C13578 * C2922 + C13731 * C926 + C13577 * C1196 +
             C13730 * C183 + C13576 * C395) *
                C90541 +
            (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
             C13730 * C108 + C13576 * C309) *
                C181) *
               C90634 * C90485 * C822 +
           ((C13730 * C109 + C13576 * C310 + C13731 * C830 + C13577 * C1095 +
             C13732 * C2572 + C13578 * C2829) *
                C181 +
            (C13730 * C184 + C13576 * C396 + C13731 * C925 + C13577 * C1197 +
             C13732 * C2665 + C13578 * C2923) *
                C90541) *
               C90634 * C90485 * C823) *
              C90753 +
          (((C13730 * C1697 + C13576 * C1961 + C13731 * C3892 + C13577 * C4162 +
             C13732 * C3895 + C13578 * C4165) *
                C181 +
            (C13730 * C1791 + C13576 * C2063 + C13731 * C3990 + C13577 * C4249 +
             C13732 * C3993 + C13578 * C4250) *
                C90541) *
               C90634 * C90485 * C822 -
           ((C13732 * C3994 + C13578 * C4248 + C13731 * C3989 + C13577 * C4247 +
             C13730 * C1794 + C13576 * C2066) *
                C90541 +
            (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 + C13577 * C4161 +
             C13730 * C1700 + C13576 * C1962) *
                C181) *
               C90634 * C90485 * C821 -
           ((C13732 * C3992 + C13578 * C4252 + C13731 * C3991 + C13577 * C4251 +
             C13730 * C1792 + C13576 * C2064) *
                C90541 +
            (C13732 * C3894 + C13578 * C4164 + C13731 * C3893 + C13577 * C4163 +
             C13730 * C1698 + C13576 * C1963) *
                C181) *
               C90634 * C90485 * C823) *
              C90579)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C2660 +
           (C13730 * C182 + C13576 * C394 + C13731 * C927 + C13577 * C1195 +
            C13732 * C2663 + C13578 * C2921) *
               C2565 -
           (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
            C13730 * C832 + C13576 * C1094) *
               C2661 -
           (C13732 * C3433 + C13578 * C3599 + C13731 * C2663 + C13577 * C2921 +
            C13730 * C927 + C13576 * C1195) *
               C2566 +
           (C13730 * C2570 + C13576 * C2827 + C13731 * C3367 + C13577 * C3545 +
            C13732 * C15525 + C13578 * C15808) *
               C2662 +
           (C13730 * C2663 + C13576 * C2921 + C13731 * C3433 + C13577 * C3599 +
            C13732 * C15634 + C13578 * C15886) *
               C2567) *
              C90634 * C90485 * C90498 * C90753 +
          ((C13730 * C3891 + C13576 * C4161 + C13731 * C3896 + C13577 * C4166 +
            C13732 * C16835 + C13578 * C17131) *
               C2661 -
           ((C13732 * C3994 + C13578 * C4248 + C13731 * C3989 + C13577 * C4247 +
             C13730 * C1794 + C13576 * C2066) *
                C2565 +
            (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 + C13577 * C4161 +
             C13730 * C1700 + C13576 * C1962) *
                C2660) +
           (C13730 * C3989 + C13576 * C4247 + C13731 * C3994 + C13577 * C4248 +
            C13732 * C16942 + C13578 * C17209) *
               C2566 -
           (C13732 * C16836 + C13578 * C17132 + C13731 * C16835 +
            C13577 * C17131 + C13730 * C3896 + C13576 * C4166) *
               C2662 -
           (C13732 * C16943 + C13578 * C17210 + C13731 * C16942 +
            C13577 * C17209 + C13730 * C3994 + C13576 * C4248) *
               C2567) *
              C90634 * C90485 * C90498 * C90579)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C1875 +
            (C307 * C245 + C90623 * C474) * C90753 -
            (C307 * C1700 + C90623 * C1962) * C1876 -
            (C307 * C1879 + C90623 * C2159) * C90579) *
               C90634 * C89 +
           (C2165 + C2166 - C2167 - C2184) * C90634 * C90 + C2189 * C91) *
              C90541 * C821 +
          ((C2167 - (C2166 + C2165) + C2184) * C90634 * C89 +
           (C2172 - (C2171 + C2170) + C2186) * C90634 * C90 +
           (C2175 - (C2176 + C2177) + C2187) * C90634 * C91) *
              C90541 * C822 +
          (C2189 * C89 + (C2177 + C2176 - C2175 - C2187) * C90634 * C90 +
           (C343 * C1875 + C496 * C90753 -
            (C307 * C1701 + C90623 * C1965) * C1876 -
            (C307 * C1881 + C90623 * C2163) * C90579) *
               C90634 * C91) *
              C90541 * C823)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C307 * C107 + C90623 * C308) * C1875 +
            (C307 * C245 + C90623 * C474) * C90753 -
            (C307 * C1700 + C90623 * C1962) * C1876 -
            (C307 * C1879 + C90623 * C2159) * C90579) *
               C90634 * C89 +
           (C2165 + C2166 - C2167 - C2184) * C90634 * C90 + C2189 * C91) *
              C2565 +
          (((C307 * C3891 + C90623 * C4161) * C1876 -
            ((C307 * C1011 + C90623 * C1301) * C90753 +
             (C307 * C832 + C90623 * C1094) * C1875) +
            (C307 * C4075 + C90623 * C4327) * C90579) *
               C90634 * C89 +
           ((C307 * C3892 + C90623 * C4162) * C1876 -
            (C1315 * C90753 + C1116 * C1875) +
            (C307 * C4076 + C90623 * C4328) * C90579) *
               C90634 * C90 +
           ((C307 * C3893 + C90623 * C4163) * C1876 -
            (C1314 * C90753 + C1118 * C1875) +
            (C307 * C4077 + C90623 * C4329) * C90579) *
               C90634 * C91) *
              C2566 +
          (((C307 * C2570 + C90623 * C2827) * C1875 +
            (C307 * C2745 + C90623 * C3017) * C90753 -
            (C307 * C3896 + C90623 * C4166) * C1876 -
            (C307 * C4080 + C90623 * C4330) * C90579) *
               C90634 * C89 +
           (C2844 * C1875 + C3028 * C90753 -
            (C307 * C3895 + C90623 * C4165) * C1876 -
            (C307 * C4079 + C90623 * C4331) * C90579) *
               C90634 * C90 +
           (C2846 * C1875 + C3029 * C90753 -
            (C307 * C3894 + C90623 * C4164) * C1876 -
            (C307 * C4078 + C90623 * C4332) * C90579) *
               C90634 * C91) *
              C2567) *
         C90498) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C1875 +
           (C13730 * C245 + C13576 * C474 + C13731 * C1011 + C13577 * C1301 +
            C13732 * C2745 + C13578 * C3017) *
               C90753 -
           (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 + C13577 * C4161 +
            C13730 * C1700 + C13576 * C1962) *
               C1876 -
           (C13732 * C4080 + C13578 * C4330 + C13731 * C4075 + C13577 * C4327 +
            C13730 * C1879 + C13576 * C2159) *
               C90579) *
              C90634 * C90485 * C90541 * C821 +
          ((C13730 * C1697 + C13576 * C1961 + C13731 * C3892 + C13577 * C4162 +
            C13732 * C3895 + C13578 * C4165) *
               C1876 -
           ((C13732 * C2746 + C13578 * C3018 + C13731 * C1010 + C13577 * C1300 +
             C13730 * C246 + C13576 * C475) *
                C90753 +
            (C13732 * C2571 + C13578 * C2828 + C13731 * C829 + C13577 * C1093 +
             C13730 * C108 + C13576 * C309) *
                C1875) +
           (C13730 * C1878 + C13576 * C2160 + C13731 * C4076 + C13577 * C4328 +
            C13732 * C4079 + C13578 * C4331) *
               C90579) *
              C90634 * C90485 * C90541 * C822 +
          ((C13730 * C109 + C13576 * C310 + C13731 * C830 + C13577 * C1095 +
            C13732 * C2572 + C13578 * C2829) *
               C1875 +
           (C13730 * C247 + C13576 * C476 + C13731 * C1009 + C13577 * C1299 +
            C13732 * C2747 + C13578 * C3019) *
               C90753 -
           (C13732 * C3894 + C13578 * C4164 + C13731 * C3893 + C13577 * C4163 +
            C13730 * C1698 + C13576 * C1963) *
               C1876 -
           (C13732 * C4078 + C13578 * C4332 + C13731 * C4077 + C13577 * C4329 +
            C13730 * C1877 + C13576 * C2161) *
               C90579) *
              C90634 * C90485 * C90541 * C823)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13730 * C107 + C13576 * C308 + C13731 * C832 + C13577 * C1094 +
            C13732 * C2570 + C13578 * C2827) *
               C1875 +
           (C13730 * C245 + C13576 * C474 + C13731 * C1011 + C13577 * C1301 +
            C13732 * C2745 + C13578 * C3017) *
               C90753 -
           (C13732 * C3896 + C13578 * C4166 + C13731 * C3891 + C13577 * C4161 +
            C13730 * C1700 + C13576 * C1962) *
               C1876 -
           (C13732 * C4080 + C13578 * C4330 + C13731 * C4075 + C13577 * C4327 +
            C13730 * C1879 + C13576 * C2159) *
               C90579) *
              C90634 * C90485 * C2565 +
          ((C13730 * C3891 + C13576 * C4161 + C13731 * C3896 + C13577 * C4166 +
            C13732 * C16835 + C13578 * C17131) *
               C1876 -
           ((C13732 * C3489 + C13578 * C3654 + C13731 * C2745 + C13577 * C3017 +
             C13730 * C1011 + C13576 * C1301) *
                C90753 +
            (C13732 * C3367 + C13578 * C3545 + C13731 * C2570 + C13577 * C2827 +
             C13730 * C832 + C13576 * C1094) *
                C1875) +
           (C13730 * C4075 + C13576 * C4327 + C13731 * C4080 + C13577 * C4330 +
            C13732 * C17029 + C13578 * C17285) *
               C90579) *
              C90634 * C90485 * C2566 +
          ((C13730 * C2570 + C13576 * C2827 + C13731 * C3367 + C13577 * C3545 +
            C13732 * C15525 + C13578 * C15808) *
               C1875 +
           (C13730 * C2745 + C13576 * C3017 + C13731 * C3489 + C13577 * C3654 +
            C13732 * C15718 + C13578 * C15962) *
               C90753 -
           (C13732 * C16836 + C13578 * C17132 + C13731 * C16835 +
            C13577 * C17131 + C13730 * C3896 + C13576 * C4166) *
               C1876 -
           (C13732 * C17030 + C13578 * C17286 + C13731 * C17029 +
            C13577 * C17285 + C13730 * C4080 + C13576 * C4330) *
               C90579) *
              C90634 * C90485 * C2567) *
         C90498) /
            (p * q * std::sqrt(p + q));
    d2eezx[74] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C90634 * C555) * C826 +
                      (C554 * C116 + C90634 * C561) * C821 - C584 * C827 -
                      C585 * C822 + C586 * C828 + C587 * C823) *
                         C89 +
                     (C584 * C826 + C585 * C821 - C586 * C827 - C587 * C822 +
                      C588 * C828 + C589 * C823) *
                         C90 +
                     (C586 * C826 + C587 * C821 - C588 * C827 - C589 * C822 +
                      C590 * C828 + C591 * C823) *
                         C91) *
                        C90623 * C90753 +
                    ((C2286 * C827 -
                      ((C554 * C1707 + C90634 * C2268) * C821 +
                       (C554 * C1700 + C90634 * C2264) * C826) +
                      C2287 * C822 - C2288 * C828 - C2289 * C823) *
                         C89 +
                     (C2288 * C827 - (C2287 * C821 + C2286 * C826) +
                      C2289 * C822 - C2290 * C828 - C2291 * C823) *
                         C90 +
                     (C2290 * C827 - (C2289 * C821 + C2288 * C826) +
                      C2291 * C822 - (C554 * C1701 + C90634 * C2267) * C828 -
                      (C554 * C1711 + C90634 * C2272) * C823) *
                         C91) *
                        C90623 * C90579) *
                   C90541) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C90634 * C555) * C3364 +
                       (C554 * C116 + C90634 * C561) * C90498) *
                          C89 +
                      (C584 * C3364 + C585 * C90498) * C90 +
                      (C586 * C3364 + C587 * C90498) * C91) *
                         C90623 * C90753 -
                     ((C2289 * C90498 + C2288 * C3364) * C91 +
                      (C2287 * C90498 + C2286 * C3364) * C90 +
                      ((C554 * C1707 + C90634 * C2268) * C90498 +
                       (C554 * C1700 + C90634 * C2264) * C3364) *
                          C89) *
                         C90623 * C90579) *
                        C2565 +
                    ((((C554 * C3891 + C90634 * C4407) * C3364 +
                       (C554 * C3900 + C90634 * C4413) * C90498) *
                          C89 +
                      ((C554 * C3892 + C90634 * C4408) * C3364 +
                       (C554 * C3901 + C90634 * C4414) * C90498) *
                          C90 +
                      ((C554 * C3893 + C90634 * C4409) * C3364 +
                       (C554 * C3902 + C90634 * C4415) * C90498) *
                          C91) *
                         C90623 * C90579 -
                     ((C1421 * C90498 + C1420 * C3364) * C91 +
                      (C1419 * C90498 + C1418 * C3364) * C90 +
                      ((C554 * C839 + C90634 * C1400) * C90498 +
                       (C554 * C832 + C90634 * C1396) * C3364) *
                          C89) *
                         C90623 * C90753) *
                        C2566 +
                    ((((C554 * C2570 + C90634 * C3105) * C3364 +
                       (C554 * C2577 + C90634 * C3109) * C90498) *
                          C89 +
                      (C3122 * C3364 + C3123 * C90498) * C90 +
                      (C3124 * C3364 + C3125 * C90498) * C91) *
                         C90623 * C90753 -
                     (((C554 * C3903 + C90634 * C4416) * C90498 +
                       (C554 * C3894 + C90634 * C4410) * C3364) *
                          C91 +
                      ((C554 * C3904 + C90634 * C4417) * C90498 +
                       (C554 * C3895 + C90634 * C4411) * C3364) *
                          C90 +
                      ((C554 * C3905 + C90634 * C4418) * C90498 +
                       (C554 * C3896 + C90634 * C4412) * C3364) *
                          C89) *
                         C90623 * C90579) *
                        C2567)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C90634 * C555) * C826 +
                      (C554 * C116 + C90634 * C561) * C821 - C584 * C827 -
                      C585 * C822 + C586 * C828 + C587 * C823) *
                         C90485 * C13576 +
                     (C14618 + C14619 - C14602 - C14603 + C14604 + C14605) *
                         C90485 * C13577 +
                     (C14620 + C14621 - C14610 - C14611 + C14612 + C14613) *
                         C90485 * C13578) *
                        C90753 +
                    ((C2286 * C827 -
                      ((C554 * C1707 + C90634 * C2268) * C821 +
                       (C554 * C1700 + C90634 * C2264) * C826) +
                      C2287 * C822 - C2288 * C828 - C2289 * C823) *
                         C90485 * C13576 +
                     (C8771 * C827 -
                      ((C554 * C3900 + C90634 * C4413) * C821 +
                       (C554 * C3891 + C90634 * C4407) * C826) +
                      C8772 * C822 - C8773 * C828 - C8774 * C823) *
                         C90485 * C13577 +
                     ((C554 * C3895 + C90634 * C4411) * C827 -
                      ((C554 * C3905 + C90634 * C4418) * C821 +
                       (C554 * C3896 + C90634 * C4412) * C826) +
                      (C554 * C3904 + C90634 * C4417) * C822 -
                      (C554 * C3894 + C90634 * C4410) * C828 -
                      (C554 * C3903 + C90634 * C4416) * C823) *
                         C90485 * C13578) *
                        C90579) *
                   C90541) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   (((((C554 * C107 + C90634 * C555) * C3364 +
                       (C554 * C116 + C90634 * C561) * C90498) *
                          C90485 * C13576 +
                      (C16632 + C16633) * C90485 * C13577 + C16646 * C13578) *
                         C90753 -
                     (C17391 * C13578 + (C17386 + C17387) * C90485 * C13577 +
                      ((C554 * C1707 + C90634 * C2268) * C90498 +
                       (C554 * C1700 + C90634 * C2264) * C3364) *
                          C90485 * C13576) *
                         C90579) *
                        C2565 +
                    (((C17387 + C17386) * C90485 * C13576 +
                      (C17385 + C17384) * C90485 * C13577 +
                      (C17388 + C17389) * C90485 * C13578) *
                         C90579 -
                     (C16647 * C13578 + (C16635 + C16634) * C90485 * C13577 +
                      (C16633 + C16632) * C90485 * C13576) *
                         C90753) *
                        C2566 +
                    ((C16646 * C13576 + (C16637 + C16636) * C90485 * C13577 +
                      (C16648 + C16649) * C90485 * C13578) *
                         C90753 -
                     (((C554 * C16839 + C90634 * C17364) * C90498 +
                       (C554 * C16836 + C90634 * C17362) * C3364) *
                          C90485 * C13578 +
                      (C17389 + C17388) * C90485 * C13577 + C17391 * C13576) *
                         C90579) *
                        C2567)) /
                      (p * q * std::sqrt(p + q));
    d2eezy[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C181 +
             (C554 * C182 + C90634 * C641) * C90541) *
                C89 +
            (C648 + C664) * C90 + C668 * C91) *
               C90623 * C821 -
           (C669 * C91 + (C665 + C651) * C90 + (C664 + C648) * C89) * C90623 *
               C822 +
           (C668 * C89 + (C656 + C666) * C90 + (C657 + C667) * C91) * C90623 *
               C823) *
              C90753 +
          (((C2371 + C2383) * C89 + (C2374 + C2384) * C90 +
            (C2377 + C2385) * C91) *
               C90623 * C822 -
           (C2386 * C91 + (C2383 + C2371) * C90 +
            ((C554 * C1794 + C90634 * C2368) * C90541 +
             (C554 * C1700 + C90634 * C2264) * C181) *
                C89) *
               C90623 * C821 -
           (((C554 * C1795 + C90634 * C2369) * C90541 +
             (C554 * C1701 + C90634 * C2267) * C181) *
                C91 +
            (C2385 + C2377) * C90 + C2386 * C89) *
               C90623 * C823) *
              C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C2660 +
            (C554 * C182 + C90634 * C641) * C2565 -
            (C554 * C832 + C90634 * C1396) * C2661 -
            (C554 * C927 + C90634 * C1497) * C2566 +
            (C554 * C2570 + C90634 * C3105) * C2662 +
            (C554 * C2663 + C90634 * C3199) * C2567) *
               C89 +
           (C3204 + C3205 - C3206 - C3207 + C3208 + C3220) * C90 +
           (C3211 + C3212 - C3213 - C3214 + C3215 + C3221) * C91) *
              C90623 * C90498 * C90753 +
          (((C554 * C3891 + C90634 * C4407) * C2661 -
            ((C554 * C1794 + C90634 * C2368) * C2565 +
             (C554 * C1700 + C90634 * C2264) * C2660) +
            (C554 * C3989 + C90634 * C4493) * C2566 -
            (C554 * C3896 + C90634 * C4412) * C2662 -
            (C554 * C3994 + C90634 * C4494) * C2567) *
               C89 +
           ((C554 * C3892 + C90634 * C4408) * C2661 -
            (C2380 * C2565 + C2286 * C2660) +
            (C554 * C3990 + C90634 * C4495) * C2566 -
            (C554 * C3895 + C90634 * C4411) * C2662 -
            (C554 * C3993 + C90634 * C4496) * C2567) *
               C90 +
           ((C554 * C3893 + C90634 * C4409) * C2661 -
            (C2381 * C2565 + C2288 * C2660) +
            (C554 * C3991 + C90634 * C4497) * C2566 -
            (C554 * C3894 + C90634 * C4410) * C2662 -
            (C554 * C3992 + C90634 * C4498) * C2567) *
               C91) *
              C90623 * C90498 * C90579)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C554 * C107 + C90634 * C555) * C181 +
             (C554 * C182 + C90634 * C641) * C90541) *
                C90485 * C13576 +
            (C14614 * C181 + C14700 * C90541) * C90485 * C13577 +
            (C14616 * C181 + C14701 * C90541) * C90485 * C13578) *
               C821 -
           ((C3218 * C90541 + C3122 * C181) * C90485 * C13578 +
            (C1518 * C90541 + C1418 * C181) * C90485 * C13577 +
            (C664 + C648) * C90485 * C13576) *
               C822 +
           (C668 * C90485 * C13576 +
            (C1420 * C181 + C1520 * C90541) * C90485 * C13577 +
            (C3124 * C181 + C3219 * C90541) * C90485 * C13578) *
               C823) *
              C90753 +
          (((C2371 + C2383) * C90485 * C13576 +
            (C8771 * C181 + C8884 * C90541) * C90485 * C13577 +
            ((C554 * C3895 + C90634 * C4411) * C181 +
             (C554 * C3993 + C90634 * C4496) * C90541) *
                C90485 * C13578) *
               C822 -
           (((C554 * C3994 + C90634 * C4494) * C90541 +
             (C554 * C3896 + C90634 * C4412) * C181) *
                C90485 * C13578 +
            ((C554 * C3989 + C90634 * C4493) * C90541 +
             (C554 * C3891 + C90634 * C4407) * C181) *
                C90485 * C13577 +
            ((C554 * C1794 + C90634 * C2368) * C90541 +
             (C554 * C1700 + C90634 * C2264) * C181) *
                C90485 * C13576) *
               C821 -
           (((C554 * C3992 + C90634 * C4498) * C90541 +
             (C554 * C3894 + C90634 * C4410) * C181) *
                C90485 * C13578 +
            (C8885 * C90541 + C8773 * C181) * C90485 * C13577 +
            C2386 * C90485 * C13576) *
               C823) *
              C90579)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C554 * C107 + C90634 * C555) * C2660 +
            (C554 * C182 + C90634 * C641) * C2565 - C14614 * C2661 -
            C14700 * C2566 + C14616 * C2662 + C14701 * C2567) *
               C90485 * C13576 +
           (C14614 * C2660 + C14700 * C2565 - C14616 * C2661 - C14701 * C2566 +
            C16062 * C2662 + C16151 * C2567) *
               C90485 * C13577 +
           (C14616 * C2660 + C14701 * C2565 - C16062 * C2661 - C16151 * C2566 +
            C16644 * C2662 + C16703 * C2567) *
               C90485 * C13578) *
              C90498 * C90753 +
          ((C17381 * C2661 -
            ((C554 * C1794 + C90634 * C2368) * C2565 +
             (C554 * C1700 + C90634 * C2264) * C2660) +
            C17474 * C2566 - C17379 * C2662 - C17475 * C2567) *
               C90485 * C13576 +
           (C17379 * C2661 - (C17474 * C2565 + C17381 * C2660) +
            C17475 * C2566 - C17382 * C2662 - C17476 * C2567) *
               C90485 * C13577 +
           (C17382 * C2661 - (C17475 * C2565 + C17379 * C2660) +
            C17476 * C2566 - (C554 * C16836 + C90634 * C17362) * C2662 -
            (C554 * C16943 + C90634 * C17466) * C2567) *
               C90485 * C13578) *
              C90498 * C90579)) /
            (p * q * std::sqrt(p + q));
    d2eezz[74] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C90634 * C555) * C1875 +
                      (C554 * C245 + C90634 * C719) * C90753 -
                      (C554 * C1700 + C90634 * C2264) * C1876 -
                      (C554 * C1879 + C90634 * C2460) * C90579) *
                         C89 +
                     (C2466 + C2467 - C2468 - C2485) * C90 + C2489 * C91) *
                        C90623 * C90541 * C821 +
                    ((C2468 - (C2467 + C2466) + C2485) * C89 +
                     (C2473 - (C2472 + C2471) + C2487) * C90 +
                     (C2476 - (C2477 + C2478) + C2488) * C91) *
                        C90623 * C90541 * C822 +
                    (C2489 * C89 + (C2478 + C2477 - C2476 - C2488) * C90 +
                     (C590 * C1875 + C741 * C90753 -
                      (C554 * C1701 + C90634 * C2267) * C1876 -
                      (C554 * C1881 + C90634 * C2464) * C90579) *
                         C91) *
                        C90623 * C90541 * C823)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C90634 * C555) * C1875 +
                      (C554 * C245 + C90634 * C719) * C90753 -
                      (C554 * C1700 + C90634 * C2264) * C1876 -
                      (C554 * C1879 + C90634 * C2460) * C90579) *
                         C89 +
                     (C2466 + C2467 - C2468 - C2485) * C90 + C2489 * C91) *
                        C90623 * C2565 +
                    (((C554 * C3891 + C90634 * C4407) * C1876 -
                      ((C554 * C1011 + C90634 * C1602) * C90753 +
                       (C554 * C832 + C90634 * C1396) * C1875) +
                      (C554 * C4075 + C90634 * C4573) * C90579) *
                         C89 +
                     ((C554 * C3892 + C90634 * C4408) * C1876 -
                      (C1616 * C90753 + C1418 * C1875) +
                      (C554 * C4076 + C90634 * C4574) * C90579) *
                         C90 +
                     ((C554 * C3893 + C90634 * C4409) * C1876 -
                      (C1615 * C90753 + C1420 * C1875) +
                      (C554 * C4077 + C90634 * C4575) * C90579) *
                         C91) *
                        C90623 * C2566 +
                    (((C554 * C2570 + C90634 * C3105) * C1875 +
                      (C554 * C2745 + C90634 * C3295) * C90753 -
                      (C554 * C3896 + C90634 * C4412) * C1876 -
                      (C554 * C4080 + C90634 * C4576) * C90579) *
                         C89 +
                     (C3122 * C1875 + C3306 * C90753 -
                      (C554 * C3895 + C90634 * C4411) * C1876 -
                      (C554 * C4079 + C90634 * C4577) * C90579) *
                         C90 +
                     (C3124 * C1875 + C3307 * C90753 -
                      (C554 * C3894 + C90634 * C4410) * C1876 -
                      (C554 * C4078 + C90634 * C4578) * C90579) *
                         C91) *
                        C90623 * C2567) *
                   C90498) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C90634 * C555) * C1875 +
                      (C554 * C245 + C90634 * C719) * C90753 -
                      (C554 * C1700 + C90634 * C2264) * C1876 -
                      (C554 * C1879 + C90634 * C2460) * C90579) *
                         C90485 * C13576 +
                     (C14614 * C1875 + C14782 * C90753 -
                      (C554 * C3891 + C90634 * C4407) * C1876 -
                      (C554 * C4075 + C90634 * C4573) * C90579) *
                         C90485 * C13577 +
                     (C14616 * C1875 + C14783 * C90753 -
                      (C554 * C3896 + C90634 * C4412) * C1876 -
                      (C554 * C4080 + C90634 * C4576) * C90579) *
                         C90485 * C13578) *
                        C90541 * C821 +
                    ((C2468 - (C2467 + C2466) + C2485) * C90485 * C13576 +
                     (C8987 - (C8988 + C8989) + C8999) * C90485 * C13577 +
                     ((C554 * C3895 + C90634 * C4411) * C1876 -
                      (C3306 * C90753 + C3122 * C1875) +
                      (C554 * C4079 + C90634 * C4577) * C90579) *
                         C90485 * C13578) *
                        C90541 * C822 +
                    (C2489 * C90485 * C13576 +
                     (C8994 + C8993 - C8992 - C9000) * C90485 * C13577 +
                     (C3124 * C1875 + C3307 * C90753 -
                      (C554 * C3894 + C90634 * C4410) * C1876 -
                      (C554 * C4078 + C90634 * C4578) * C90579) *
                         C90485 * C13578) *
                        C90541 * C823)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C554 * C107 + C90634 * C555) * C1875 +
                      (C554 * C245 + C90634 * C719) * C90753 -
                      (C554 * C1700 + C90634 * C2264) * C1876 -
                      (C554 * C1879 + C90634 * C2460) * C90579) *
                         C90485 * C13576 +
                     (C17553 + C17554 - C17555 - C17572) * C90485 * C13577 +
                     C17577 * C13578) *
                        C2565 +
                    ((C17555 - (C17554 + C17553) + C17572) * C90485 * C13576 +
                     (C17560 - (C17559 + C17558) + C17574) * C90485 * C13577 +
                     (C17563 - (C17564 + C17565) + C17575) * C90485 * C13578) *
                        C2566 +
                    (C17577 * C13576 +
                     (C17565 + C17564 - C17563 - C17575) * C90485 * C13577 +
                     (C16644 * C1875 + C16760 * C90753 -
                      (C554 * C16836 + C90634 * C17362) * C1876 -
                      (C554 * C17030 + C90634 * C17551) * C90579) *
                         C90485 * C13578) *
                        C2567) *
                   C90498) /
                      (p * q * std::sqrt(p + q));
}
