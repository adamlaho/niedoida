/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_sdpd_AB.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
//
void second_derivative_ee_0212_12(const double ae,
                                  const double xA,
                                  const double yA,
                                  const double zA,
                                  const double be,
                                  const double xB,
                                  const double yB,
                                  const double zB,
                                  const double ce,
                                  const double xC,
                                  const double yC,
                                  const double zC,
                                  const double de,
                                  const double xD,
                                  const double yD,
                                  const double zD,
                                  const double* const bs,
                                  double* const d2eexx,
                                  double* const d2eexy,
                                  double* const d2eexz,
                                  double* const d2eeyx,
                                  double* const d2eeyy,
                                  double* const d2eeyz,
                                  double* const d2eezx,
                                  double* const d2eezy,
                                  double* const d2eezz)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C87282 = ae * be;
    const double C87281 = ae + be;
    const double C87280 = 0 * be;
    const double C87279 = xA - xB;
    const double C87311 = yA - yB;
    const double C87314 = zA - zB;
    const double C87325 = 0 * be;
    const double C87351 = 0 * be;
    const double C87397 = p + q;
    const double C87396 = p * q;
    const double C87402 = xP - xQ;
    const double C87401 = bs[2];
    const double C87407 = bs[3];
    const double C87418 = bs[4];
    const double C87439 = bs[5];
    const double C87475 = bs[6];
    const double C87524 = yP - yQ;
    const double C87568 = zP - zQ;
    const double C106 = bs[0];
    const double C89110 = ce + de;
    const double C89109 = ce * de;
    const double C89108 = xC - xD;
    const double C89132 = yC - yD;
    const double C89148 = zC - zD;
    const double C87290 = 2 * C87282;
    const double C87283 = std::pow(C87281, 2);
    const double C89296 = 2 * C87281;
    const double C87284 = C87282 * C87279;
    const double C89089 = std::pow(C87279, 2);
    const double C89295 = C87279 * ae;
    const double C87326 = C87282 * C87311;
    const double C89232 = std::pow(C87311, 2);
    const double C89317 = C87311 * ae;
    const double C87352 = C87282 * C87314;
    const double C89243 = std::pow(C87314, 2);
    const double C89318 = C87314 * ae;
    const double C87398 = 2 * C87396;
    const double C87410 = C87402 * ae;
    const double C87409 = C87402 * be;
    const double C87406 = std::pow(C87402, 2);
    const double C87527 = C87524 * be;
    const double C87526 = C87402 * C87524;
    const double C87614 = C87524 * ae;
    const double C87613 = C87524 * C87402;
    const double C87656 = std::pow(C87524, 2);
    const double C87571 = C87568 * be;
    const double C87570 = C87402 * C87568;
    const double C87677 = C87524 * C87568;
    const double C87695 = C87568 * ae;
    const double C87694 = C87568 * C87402;
    const double C87737 = C87568 * C87524;
    const double C87754 = std::pow(C87568, 2);
    const double C89112 = 2 * C89110;
    const double C89122 = std::pow(C89110, 2);
    const double C89114 = C89108 * de;
    const double C89113 = C89108 * ce;
    const double C89111 = std::pow(C89108, 2);
    const double C89133 = std::pow(C89132, 2);
    const double C89185 = C89132 * de;
    const double C89184 = C89132 * ce;
    const double C89149 = std::pow(C89148, 2);
    const double C89213 = C89148 * de;
    const double C89212 = C89148 * ce;
    const double C87285 = 2 * C87283;
    const double C89321 = std::pow(C89296, -2);
    const double C89319 = std::pow(C89296, -1);
    const double C89090 = C89089 * C87282;
    const double C89233 = C89232 * C87282;
    const double C89244 = C89243 * C87282;
    const double C87400 = C87398 / C87397;
    const double C124 =
        ((std::pow(xP - xQ, 2) * bs[2] * std::pow(C87398 / C87397, 2) -
          (bs[1] * C87398) / C87397) *
         C87282) /
        C87283;
    const double C107 = -(C87402 * bs[1] * C87398) / C87397;
    const double C819 = -(C87524 * bs[1] * C87398) / C87397;
    const double C1724 = -(C87568 * bs[1] * C87398) / C87397;
    const double C87413 = C87407 * C87410;
    const double C87424 = C87418 * C87410;
    const double C87447 = C87439 * C87410;
    const double C87487 = C87475 * C87410;
    const double C113 = (-(bs[1] * C87410 * C87398) / C87397) / C87281;
    const double C87412 = C87407 * C87409;
    const double C87421 = C87418 * C87409;
    const double C87443 = C87439 * C87409;
    const double C87483 = C87475 * C87409;
    const double C112 = (-(bs[1] * C87409 * C87398) / C87397) / C87281;
    const double C87420 = C87406 * C87418;
    const double C87442 = C87406 * C87439;
    const double C87482 = C87406 * C87475;
    const double C87529 = C87407 * C87527;
    const double C87534 = C87418 * C87527;
    const double C87541 = C87439 * C87527;
    const double C87552 = C87475 * C87527;
    const double C181 = (-(bs[1] * C87527 * C87398) / C87397) / C87281;
    const double C87528 = C87526 * ae;
    const double C87616 = C87407 * C87614;
    const double C87621 = C87418 * C87614;
    const double C87628 = C87439 * C87614;
    const double C87639 = C87475 * C87614;
    const double C346 = (-(bs[1] * C87614 * C87398) / C87397) / C87281;
    const double C87615 = C87613 * ae;
    const double C87658 = C87656 * C87418;
    const double C87663 = C87656 * C87439;
    const double C87668 = C87656 * C87475;
    const double C87573 = C87407 * C87571;
    const double C87578 = C87418 * C87571;
    const double C87585 = C87439 * C87571;
    const double C87596 = C87475 * C87571;
    const double C264 = (-(bs[1] * C87571 * C87398) / C87397) / C87281;
    const double C87572 = C87570 * ae;
    const double C87678 = C87677 * ae;
    const double C87697 = C87407 * C87695;
    const double C87702 = C87418 * C87695;
    const double C87709 = C87439 * C87695;
    const double C87720 = C87475 * C87695;
    const double C565 = (-(bs[1] * C87695 * C87398) / C87397) / C87281;
    const double C87696 = C87694 * ae;
    const double C87738 = C87737 * ae;
    const double C87756 = C87754 * C87418;
    const double C87761 = C87754 * C87439;
    const double C87766 = C87754 * C87475;
    const double C89123 = std::pow(C89112, -1);
    const double C89305 = std::pow(C89112, -2);
    const double C89127 = 2 * C89122;
    const double C89303 = 4 * C89122;
    const double C89115 = C89111 * C89109;
    const double C89134 = C89133 * C89109;
    const double C89150 = C89149 * C89109;
    const double C89091 = C89090 / C87281;
    const double C89234 = C89233 / C87281;
    const double C89245 = C89244 / C87281;
    const double C87403 = std::pow(C87400, 2);
    const double C87408 = -C87400;
    const double C87419 = std::pow(C87400, 4);
    const double C87476 = std::pow(C87400, 6);
    const double C87530 = C87528 * be;
    const double C87617 = C87615 * be;
    const double C87574 = C87572 * be;
    const double C87679 = C87678 * be;
    const double C87698 = C87696 * be;
    const double C87739 = C87738 * be;
    const double C89116 = C89115 / C89110;
    const double C89135 = C89134 / C89110;
    const double C89151 = C89150 / C89110;
    const double C89092 = -C89091;
    const double C89235 = -C89234;
    const double C89246 = -C89245;
    const double C87405 = C87401 * C87403;
    const double C125 = (ae * C87403 * C87401 * C87402 * be +
                         be * C87403 * C87401 * C87402 * ae +
                         C87402 *
                             (C87401 * C87403 + std::pow(C87402, 2) * bs[3] *
                                                    std::pow(-C87400, 3)) *
                             C87282) /
                        C87283;
    const double C187 =
        (C87403 * C87401 * C87402 * (yP - yQ) * ae * be) / C87283;
    const double C270 =
        (C87403 * C87401 * C87402 * (zP - zQ) * ae * be) / C87283;
    const double C352 = (C87403 * C87401 * C87524 * C87402 * ae * be) / C87283;
    const double C409 =
        ((std::pow(C87524, 2) * C87401 * C87403 - (bs[1] * C87398) / C87397) *
         C87282) /
        C87283;
    const double C493 = (C87403 * C87401 * C87524 * C87568 * ae * be) / C87283;
    const double C571 = (C87403 * C87401 * C87568 * C87402 * ae * be) / C87283;
    const double C627 = (C87403 * C87401 * C87568 * C87524 * ae * be) / C87283;
    const double C700 =
        ((std::pow(C87568, 2) * C87401 * C87403 - (bs[1] * C87398) / C87397) *
         C87282) /
        C87283;
    const double C114 = (C87402 * C87403 * C87401 * C87409) / C87281 -
                        (be * bs[1] * C87398) / (C87397 * C87281);
    const double C115 = (C87402 * C87403 * C87401 * C87410) / C87281 -
                        (ae * bs[1] * C87398) / (C87397 * C87281);
    const double C182 = (C87402 * C87403 * C87401 * C87527) / C87281;
    const double C265 = (C87402 * C87403 * C87401 * C87571) / C87281;
    const double C347 = (C87402 * C87403 * C87401 * C87614) / C87281;
    const double C566 = (C87402 * C87403 * C87401 * C87695) / C87281;
    const double C829 = (C87524 * C87403 * C87401 * C87409) / C87281;
    const double C830 = (C87524 * C87403 * C87401 * C87410) / C87281;
    const double C923 = (C87524 * C87403 * C87401 * C87527) / C87281 -
                        (be * bs[1] * C87398) / (C87397 * C87281);
    const double C1029 = (C87524 * C87403 * C87401 * C87571) / C87281;
    const double C1135 = (C87524 * C87403 * C87401 * C87614) / C87281 -
                         (ae * bs[1] * C87398) / (C87397 * C87281);
    const double C1425 = (C87524 * C87403 * C87401 * C87695) / C87281;
    const double C1734 = (C87568 * C87403 * C87401 * C87409) / C87281;
    const double C1735 = (C87568 * C87403 * C87401 * C87410) / C87281;
    const double C1828 = (C87568 * C87403 * C87401 * C87527) / C87281;
    const double C1934 = (C87568 * C87403 * C87401 * C87571) / C87281 -
                         (be * bs[1] * C87398) / (C87397 * C87281);
    const double C2040 = (C87568 * C87403 * C87401 * C87614) / C87281;
    const double C2330 = (C87568 * C87403 * C87401 * C87695) / C87281 -
                         (ae * bs[1] * C87398) / (C87397 * C87281);
    const double C87411 = std::pow(C87408, 3);
    const double C87440 = std::pow(C87408, 5);
    const double C87428 = C87419 * C87424;
    const double C87427 = C87419 * C87421;
    const double C87426 = C87420 * C87419;
    const double C87438 = C87418 * C87419;
    const double C87536 = C87419 * C87534;
    const double C87580 = C87419 * C87578;
    const double C87623 = C87419 * C87621;
    const double C87659 = C87658 * C87419;
    const double C87704 = C87419 * C87702;
    const double C87757 = C87756 * C87419;
    const double C87494 = C87476 * C87487;
    const double C87491 = C87476 * C87483;
    const double C87490 = C87482 * C87476;
    const double C87556 = C87476 * C87552;
    const double C87600 = C87476 * C87596;
    const double C87643 = C87476 * C87639;
    const double C87669 = C87668 * C87476;
    const double C87724 = C87476 * C87720;
    const double C87767 = C87766 * C87476;
    const double C87533 = C87418 * C87530;
    const double C87540 = C87439 * C87530;
    const double C87551 = C87475 * C87530;
    const double C87620 = C87418 * C87617;
    const double C87627 = C87439 * C87617;
    const double C87638 = C87475 * C87617;
    const double C87577 = C87418 * C87574;
    const double C87584 = C87439 * C87574;
    const double C87595 = C87475 * C87574;
    const double C87681 = C87418 * C87679;
    const double C87684 = C87439 * C87679;
    const double C87687 = C87475 * C87679;
    const double C87701 = C87418 * C87698;
    const double C87708 = C87439 * C87698;
    const double C87719 = C87475 * C87698;
    const double C87741 = C87418 * C87739;
    const double C87744 = C87439 * C87739;
    const double C87747 = C87475 * C87739;
    const double C89117 = -C89116;
    const double C89136 = -C89135;
    const double C89152 = -C89151;
    const double C89093 = std::exp(C89092);
    const double C89236 = std::exp(C89235);
    const double C89247 = std::exp(C89246);
    const double C108 = C87405 * C87406 - (bs[1] * C87398) / C87397;
    const double C818 = C87524 * C87402 * C87405;
    const double C820 = C87405 * C87656 - (bs[1] * C87398) / C87397;
    const double C1723 = C87568 * C87402 * C87405;
    const double C1725 = C87405 * C87754 - (bs[1] * C87398) / C87397;
    const double C4097 = C87568 * C87524 * C87405;
    const double C87415 = C87411 * C87413;
    const double C87414 = C87411 * C87412;
    const double C87417 = C87407 * C87411;
    const double C87531 = C87411 * C87529;
    const double C87575 = C87411 * C87573;
    const double C87618 = C87411 * C87616;
    const double C87699 = C87411 * C87697;
    const double C188 = (ae * C87403 * C87401 * C87524 * be +
                         C87402 * C87411 * C87407 * C87402 * C87524 * ae * be) /
                        C87283;
    const double C271 = (ae * C87403 * C87401 * C87568 * be +
                         C87402 * C87411 * C87407 * C87402 * C87568 * ae * be) /
                        C87283;
    const double C353 = (be * C87403 * C87401 * C87524 * ae +
                         C87402 * C87411 * C87407 * C87524 * C87402 * ae * be) /
                        C87283;
    const double C410 =
        (C87402 * (C87405 + std::pow(C87524, 2) * C87407 * C87411) * C87282) /
        C87283;
    const double C494 =
        (C87402 * C87411 * C87407 * C87524 * C87568 * ae * be) / C87283;
    const double C495 =
        (C87411 * C87407 * C87679 + C87419 * C87418 * C87679 * C87406) / C87283;
    const double C572 = (be * C87403 * C87401 * C87568 * ae +
                         C87402 * C87411 * C87407 * C87568 * C87402 * ae * be) /
                        C87283;
    const double C628 =
        (C87402 * C87411 * C87407 * C87568 * C87524 * ae * be) / C87283;
    const double C629 =
        (C87411 * C87407 * C87739 + C87419 * C87418 * C87739 * C87406) / C87283;
    const double C701 =
        (C87402 * (C87405 + std::pow(C87568, 2) * C87407 * C87411) * C87282) /
        C87283;
    const double C843 =
        (C87524 * (C87405 + C87406 * C87407 * C87411) * C87282) / C87283;
    const double C931 =
        (be * C87403 * C87401 * C87410 + C87524 * C87411 * C87407 * C87530) /
        C87283;
    const double C1037 = (C87524 * C87411 * C87407 * C87574) / C87283;
    const double C1143 =
        (ae * C87403 * C87401 * C87409 + C87524 * C87411 * C87407 * C87617) /
        C87283;
    const double C1227 =
        (ae * C87403 * C87401 * C87527 + be * C87403 * C87401 * C87614 +
         C87524 * (C87405 + C87656 * C87407 * C87411) * C87282) /
        C87283;
    const double C1335 =
        (ae * C87403 * C87401 * C87571 + C87524 * C87411 * C87407 * C87679) /
        C87283;
    const double C1433 = (C87524 * C87411 * C87407 * C87698) / C87283;
    const double C1515 =
        (be * C87403 * C87401 * C87695 + C87524 * C87411 * C87407 * C87739) /
        C87283;
    const double C1607 =
        (C87524 * (C87405 + C87754 * C87407 * C87411) * C87282) / C87283;
    const double C1748 =
        (C87568 * (C87405 + C87406 * C87407 * C87411) * C87282) / C87283;
    const double C1836 = (C87568 * C87411 * C87407 * C87530) / C87283;
    const double C1942 =
        (be * C87403 * C87401 * C87410 + C87568 * C87411 * C87407 * C87574) /
        C87283;
    const double C2048 = (C87568 * C87411 * C87407 * C87617) / C87283;
    const double C2132 =
        (C87568 * (C87405 + C87656 * C87407 * C87411) * C87282) / C87283;
    const double C2240 =
        (be * C87403 * C87401 * C87614 + C87568 * C87411 * C87407 * C87679) /
        C87283;
    const double C2338 =
        (ae * C87403 * C87401 * C87409 + C87568 * C87411 * C87407 * C87698) /
        C87283;
    const double C2420 =
        (ae * C87403 * C87401 * C87527 + C87568 * C87411 * C87407 * C87739) /
        C87283;
    const double C2512 =
        (ae * C87403 * C87401 * C87571 + be * C87403 * C87401 * C87695 +
         C87568 * (C87405 + C87754 * C87407 * C87411) * C87282) /
        C87283;
    const double C87453 = C87440 * C87447;
    const double C87450 = C87440 * C87443;
    const double C87449 = C87442 * C87440;
    const double C87474 = C87439 * C87440;
    const double C87543 = C87440 * C87541;
    const double C87587 = C87440 * C87585;
    const double C87630 = C87440 * C87628;
    const double C87664 = C87663 * C87440;
    const double C87711 = C87440 * C87709;
    const double C87762 = C87761 * C87440;
    const double C87431 = C87402 * C87428;
    const double C87437 = be * C87428;
    const double C88046 = C87524 * C87428;
    const double C88460 = C87568 * C87428;
    const double C87430 = C87402 * C87427;
    const double C87436 = ae * C87427;
    const double C88061 = C87524 * C87427;
    const double C88484 = C87568 * C87427;
    const double C87448 = C87438 * ae;
    const double C87446 = C87438 * C87406;
    const double C87445 = C87402 * C87438;
    const double C87444 = C87438 * be;
    const double C88176 = C87438 * C87656;
    const double C88175 = C87524 * C87438;
    const double C88512 = C87438 * C87754;
    const double C88511 = C87568 * C87438;
    const double C87539 = ae * C87536;
    const double C87538 = C87402 * C87536;
    const double C88019 = C87524 * C87536;
    const double C88496 = C87568 * C87536;
    const double C87583 = ae * C87580;
    const double C87582 = C87402 * C87580;
    const double C88076 = C87524 * C87580;
    const double C88142 = C87568 * C87580;
    const double C87626 = be * C87623;
    const double C87625 = C87402 * C87623;
    const double C88021 = C87524 * C87623;
    const double C88476 = C87568 * C87623;
    const double C87707 = be * C87704;
    const double C87706 = C87402 * C87704;
    const double C88077 = C87524 * C87704;
    const double C88144 = C87568 * C87704;
    const double C87500 = C87402 * C87494;
    const double C88290 = C87494 * C87656;
    const double C88569 = C87524 * C87494;
    const double C88625 = C87494 * C87754;
    const double C87497 = C87402 * C87491;
    const double C88304 = C87491 * C87656;
    const double C88584 = C87524 * C87491;
    const double C88642 = C87491 * C87754;
    const double C87559 = C87556 * C87406;
    const double C88193 = C87402 * C87556;
    const double C88317 = C87524 * C87556;
    const double C88653 = C87556 * C87754;
    const double C87603 = C87600 * C87406;
    const double C88219 = C87402 * C87600;
    const double C88352 = C87600 * C87656;
    const double C88598 = C87524 * C87600;
    const double C88666 = C87568 * C87600;
    const double C87646 = C87643 * C87406;
    const double C88196 = C87402 * C87643;
    const double C88322 = C87524 * C87643;
    const double C88578 = C87643 * C87754;
    const double C87727 = C87724 * C87406;
    const double C88233 = C87402 * C87724;
    const double C88368 = C87724 * C87656;
    const double C88601 = C87524 * C87724;
    const double C88672 = C87568 * C87724;
    const double C87535 = C87419 * C87533;
    const double C87542 = C87440 * C87540;
    const double C87554 = C87476 * C87551;
    const double C87622 = C87419 * C87620;
    const double C87629 = C87440 * C87627;
    const double C87641 = C87476 * C87638;
    const double C87579 = C87419 * C87577;
    const double C87586 = C87440 * C87584;
    const double C87598 = C87476 * C87595;
    const double C87682 = C87419 * C87681;
    const double C87685 = C87440 * C87684;
    const double C87688 = C87476 * C87687;
    const double C87703 = C87419 * C87701;
    const double C87710 = C87440 * C87708;
    const double C87722 = C87476 * C87719;
    const double C87742 = C87419 * C87741;
    const double C87745 = C87440 * C87744;
    const double C87748 = C87476 * C87747;
    const double C89118 = std::exp(C89117);
    const double C89137 = std::exp(C89136);
    const double C89153 = std::exp(C89152);
    const double C14060 = C89093 * C829;
    const double C27308 = C89093 * C1734;
    const double C87286 = C87284 * C89093;
    const double C89320 = C89093 * C89295;
    const double C89 =
        (C89093 * std::pow(C89295, 2)) / C87283 + C89093 / C89296;
    const double C91 = C89321 * C89093;
    const double C38292 = C89319 * C89093;
    const double C194 = C89236 * C182;
    const double C27126 = C89236 * C1828;
    const double C87327 = C87326 * C89236;
    const double C180 = -(2 * C87282 * (yA - yB) * C89236) / C87281;
    const double C408 =
        -((C89236 - (C87311 * 2 * C87282 * C87311 * C89236) / C87281) *
          C87290) /
        C87281;
    const double C89331 = C89236 * C89317;
    const double C13258 =
        (C89236 * std::pow(C89317, 2)) / C87283 + C89236 / C89296;
    const double C13260 = C89321 * C89236;
    const double C38294 = C89319 * C89236;
    const double C277 = C89247 * C265;
    const double C13956 = C89247 * C1029;
    const double C87353 = C87352 * C89247;
    const double C263 = -(2 * C87282 * (zA - zB) * C89247) / C87281;
    const double C699 =
        -((C89247 - (C87314 * 2 * C87282 * C87314 * C89247) / C87281) *
          C87290) /
        C87281;
    const double C89332 = C89247 * C89318;
    const double C25848 =
        (C89247 * std::pow(C89318, 2)) / C87283 + C89247 / C89296;
    const double C25850 = C89321 * C89247;
    const double C54751 = C89319 * C89247;
    const double C117 =
        (C87403 * C87401 * C87410 + C87402 * (C87402 * C87415 + C87405 * ae) +
         C87402 * C87405 * ae) /
        C87281;
    const double C828 = (C87524 * (C87402 * C87415 + C87405 * ae)) / C87281;
    const double C832 = (C87403 * C87401 * C87410 + C87415 * C87656) / C87281;
    const double C1733 = (C87568 * (C87402 * C87415 + C87405 * ae)) / C87281;
    const double C1737 = (C87403 * C87401 * C87410 + C87415 * C87754) / C87281;
    const double C4102 = (C87568 * C87524 * C87415) / C87281;
    const double C5733 =
        (2 * C87524 * C87415 + C87524 * (C87415 + C87428 * C87656)) / C87281;
    const double C8522 = (C87568 * (C87415 + C87428 * C87656)) / C87281;
    const double C10550 =
        (2 * C87568 * C87415 + C87568 * (C87415 + C87428 * C87754)) / C87281;
    const double C126 =
        ((C87405 + C87406 * C87407 * C87411) * C87282 +
         ae * (C87402 * C87414 + C87405 * be) +
         be * (C87402 * C87415 + C87405 * ae) +
         C87402 *
             (ae * C87414 + be * C87415 +
              C87402 *
                  (C87407 * C87411 + C87406 * bs[4] * std::pow(C87400, 4)) *
                  C87282)) /
        C87283;
    const double C116 =
        (C87403 * C87401 * C87409 + C87402 * (C87402 * C87414 + C87405 * be) +
         C87402 * C87405 * be) /
        C87281;
    const double C827 = (C87524 * (C87402 * C87414 + C87405 * be)) / C87281;
    const double C831 = (C87403 * C87401 * C87409 + C87414 * C87656) / C87281;
    const double C1732 = (C87568 * (C87402 * C87414 + C87405 * be)) / C87281;
    const double C1736 = (C87403 * C87401 * C87409 + C87414 * C87754) / C87281;
    const double C4101 = (C87568 * C87524 * C87414) / C87281;
    const double C5732 =
        (2 * C87524 * C87414 + C87524 * (C87414 + C87427 * C87656)) / C87281;
    const double C8521 = (C87568 * (C87414 + C87427 * C87656)) / C87281;
    const double C10549 =
        (2 * C87568 * C87414 + C87568 * (C87414 + C87427 * C87754)) / C87281;
    const double C87425 = C87417 * ae;
    const double C87423 = C87402 * C87417;
    const double C87422 = C87417 * be;
    const double C87429 = C87417 + C87426;
    const double C87660 = C87417 + C87659;
    const double C87758 = C87417 + C87757;
    const double C88020 = C87524 * C87417;
    const double C88143 = C87568 * C87417;
    const double C411 =
        ((C87405 + C87656 * C87407 * C87411) * C87282 +
         (C87417 + C87656 * C87418 * C87419) * C87282 * C87406) /
        C87283;
    const double C702 =
        ((C87405 + C87754 * C87407 * C87411) * C87282 +
         (C87417 + C87754 * C87418 * C87419) * C87282 * C87406) /
        C87283;
    const double C109 =
        2 * C87402 * C87405 + C87402 * (C87405 + C87417 * C87406);
    const double C817 = C87524 * (C87405 + C87417 * C87406);
    const double C1722 = C87568 * (C87405 + C87417 * C87406);
    const double C5727 =
        2 * C87524 * C87405 + C87524 * (C87405 + C87417 * C87656);
    const double C8516 = C87568 * (C87405 + C87417 * C87656);
    const double C10544 =
        2 * C87568 * C87405 + C87568 * (C87405 + C87417 * C87754);
    const double C189 =
        (C87411 * C87407 * C87530 + ae * C87402 * C87531 +
         C87402 * (ae * C87531 + C87402 * C87419 * C87418 * C87530)) /
        C87283;
    const double C183 = (C87403 * C87401 * C87527 + C87531 * C87406) / C87281;
    const double C184 =
        (2 * C87402 * C87531 + C87402 * (C87531 + C87536 * C87406)) / C87281;
    const double C924 =
        (C87524 * C87402 * C87531 + C87402 * C87405 * be) / C87281;
    const double C925 = (C87524 * (C87531 + C87536 * C87406) +
                         (C87405 + C87417 * C87406) * be) /
                        C87281;
    const double C926 =
        (C87403 * C87401 * C87527 + C87524 * (C87524 * C87531 + C87405 * be) +
         C87524 * C87405 * be) /
        C87281;
    const double C1829 = (C87568 * C87402 * C87531) / C87281;
    const double C1830 = (C87568 * (C87531 + C87536 * C87406)) / C87281;
    const double C1831 = (C87403 * C87401 * C87527 + C87531 * C87754) / C87281;
    const double C4211 = (C87568 * (C87524 * C87531 + C87405 * be)) / C87281;
    const double C10604 =
        (2 * C87568 * C87531 + C87568 * (C87531 + C87536 * C87754)) / C87281;
    const double C272 =
        (C87411 * C87407 * C87574 + ae * C87402 * C87575 +
         C87402 * (ae * C87575 + C87402 * C87419 * C87418 * C87574)) /
        C87283;
    const double C266 = (C87403 * C87401 * C87571 + C87575 * C87406) / C87281;
    const double C267 =
        (2 * C87402 * C87575 + C87402 * (C87575 + C87580 * C87406)) / C87281;
    const double C1030 = (C87524 * C87402 * C87575) / C87281;
    const double C1031 = (C87524 * (C87575 + C87580 * C87406)) / C87281;
    const double C1032 = (C87403 * C87401 * C87571 + C87575 * C87656) / C87281;
    const double C1935 =
        (C87568 * C87402 * C87575 + C87402 * C87405 * be) / C87281;
    const double C1936 = (C87568 * (C87575 + C87580 * C87406) +
                          (C87405 + C87417 * C87406) * be) /
                         C87281;
    const double C1937 =
        (C87403 * C87401 * C87571 + C87568 * (C87568 * C87575 + C87405 * be) +
         C87568 * C87405 * be) /
        C87281;
    const double C4325 =
        (C87568 * C87524 * C87575 + C87524 * C87405 * be) / C87281;
    const double C5843 =
        (2 * C87524 * C87575 + C87524 * (C87575 + C87580 * C87656)) / C87281;
    const double C8680 = (C87568 * (C87575 + C87580 * C87656) +
                          (C87405 + C87417 * C87656) * be) /
                         C87281;
    const double C354 =
        (C87411 * C87407 * C87617 + be * C87402 * C87618 +
         C87402 * (be * C87618 + C87402 * C87419 * C87418 * C87617)) /
        C87283;
    const double C348 = (C87403 * C87401 * C87614 + C87618 * C87406) / C87281;
    const double C349 =
        (2 * C87402 * C87618 + C87402 * (C87618 + C87623 * C87406)) / C87281;
    const double C1136 =
        (C87524 * C87402 * C87618 + C87402 * C87405 * ae) / C87281;
    const double C1137 = (C87524 * (C87618 + C87623 * C87406) +
                          (C87405 + C87417 * C87406) * ae) /
                         C87281;
    const double C1138 =
        (C87403 * C87401 * C87614 + C87524 * (C87524 * C87618 + C87405 * ae) +
         C87524 * C87405 * ae) /
        C87281;
    const double C2041 = (C87568 * C87402 * C87618) / C87281;
    const double C2042 = (C87568 * (C87618 + C87623 * C87406)) / C87281;
    const double C2043 = (C87403 * C87401 * C87614 + C87618 * C87754) / C87281;
    const double C4439 = (C87568 * (C87524 * C87618 + C87405 * ae)) / C87281;
    const double C10716 =
        (2 * C87568 * C87618 + C87568 * (C87618 + C87623 * C87754)) / C87281;
    const double C573 =
        (C87411 * C87407 * C87698 + be * C87402 * C87699 +
         C87402 * (be * C87699 + C87402 * C87419 * C87418 * C87698)) /
        C87283;
    const double C567 = (C87403 * C87401 * C87695 + C87699 * C87406) / C87281;
    const double C568 =
        (2 * C87402 * C87699 + C87402 * (C87699 + C87704 * C87406)) / C87281;
    const double C1426 = (C87524 * C87402 * C87699) / C87281;
    const double C1427 = (C87524 * (C87699 + C87704 * C87406)) / C87281;
    const double C1428 = (C87403 * C87401 * C87695 + C87699 * C87656) / C87281;
    const double C2331 =
        (C87568 * C87402 * C87699 + C87402 * C87405 * ae) / C87281;
    const double C2332 = (C87568 * (C87699 + C87704 * C87406) +
                          (C87405 + C87417 * C87406) * ae) /
                         C87281;
    const double C2333 =
        (C87403 * C87401 * C87695 + C87568 * (C87568 * C87699 + C87405 * ae) +
         C87568 * C87405 * ae) /
        C87281;
    const double C4767 =
        (C87568 * C87524 * C87699 + C87524 * C87405 * ae) / C87281;
    const double C6061 =
        (2 * C87524 * C87699 + C87524 * (C87699 + C87704 * C87656)) / C87281;
    const double C8994 = (C87568 * (C87699 + C87704 * C87656) +
                          (C87405 + C87417 * C87656) * ae) /
                         C87281;
    const double C196 = C89236 * C188;
    const double C279 = C89247 * C271;
    const double C419 = C89236 * C410;
    const double C500 = C89247 * C494;
    const double C503 = C89247 * C495;
    const double C634 = C89236 * C628;
    const double C637 = C89236 * C629;
    const double C710 = C89247 * C701;
    const double C13755 = C89093 * C843;
    const double C13958 = C89247 * C1037;
    const double C14062 = C89093 * C1143;
    const double C14240 = C89247 * C1335;
    const double C14328 = C89093 * C1433;
    const double C14503 = C89247 * C1607;
    const double C27009 = C89093 * C1748;
    const double C27128 = C89236 * C1836;
    const double C27310 = C89093 * C2048;
    const double C27421 = C89236 * C2132;
    const double C27606 = C89093 * C2338;
    const double C27696 = C89236 * C2420;
    const double C87457 = C87402 * C87453;
    const double C87473 = be * C87453;
    const double C87924 = C87524 * C87453;
    const double C87941 = C87568 * C87453;
    const double C88151 = C87453 * C87656;
    const double C88462 = C87453 * C87754;
    const double C87456 = C87402 * C87450;
    const double C87472 = ae * C87450;
    const double C87923 = C87524 * C87450;
    const double C87940 = C87568 * C87450;
    const double C88163 = C87450 * C87656;
    const double C88486 = C87450 * C87754;
    const double C87455 = C87438 + C87449;
    const double C87488 = C87474 * ae;
    const double C87486 = C87474 * C87406;
    const double C87485 = C87402 * C87474;
    const double C87484 = C87474 * be;
    const double C87496 = C87474 + C87490;
    const double C87670 = C87474 + C87669;
    const double C87768 = C87474 + C87767;
    const double C88319 = C87474 * C87656;
    const double C88318 = C87524 * C87474;
    const double C88577 = C87474 * C87754;
    const double C88667 = C87568 * C87474;
    const double C87545 = C87543 * C87406;
    const double C87550 = ae * C87543;
    const double C87549 = C87402 * C87543;
    const double C88174 = C87524 * C87543;
    const double C88409 = C87568 * C87543;
    const double C88498 = C87543 * C87754;
    const double C87589 = C87587 * C87406;
    const double C87594 = ae * C87587;
    const double C87593 = C87402 * C87587;
    const double C88214 = C87587 * C87656;
    const double C88350 = C87524 * C87587;
    const double C88416 = C87568 * C87587;
    const double C87632 = C87630 * C87406;
    const double C87637 = be * C87630;
    const double C87636 = C87402 * C87630;
    const double C88177 = C87524 * C87630;
    const double C88391 = C87568 * C87630;
    const double C88477 = C87630 * C87754;
    const double C87665 = C87438 + C87664;
    const double C87713 = C87711 * C87406;
    const double C87718 = be * C87711;
    const double C87717 = C87402 * C87711;
    const double C88228 = C87711 * C87656;
    const double C88366 = C87524 * C87711;
    const double C88513 = C87568 * C87711;
    const double C87763 = C87438 + C87762;
    const double C6255 = (C87524 * C87415 + C88046 * C87754) / C87281;
    const double C87441 = C87436 + C87437;
    const double C6254 = (C87524 * C87414 + C88061 * C87754) / C87281;
    const double C87452 = C87417 + C87446;
    const double C87454 = C87445 * ae;
    const double C87451 = C87445 * be;
    const double C87478 = 2 * C87445;
    const double C88014 = C87524 * C87445;
    const double C88137 = C87568 * C87445;
    const double C88181 = C87417 + C88176;
    const double C88183 = C88175 * ae;
    const double C88180 = C88175 * be;
    const double C88320 = 2 * C88175;
    const double C88451 = C87568 * C88175;
    const double C88517 = C87417 + C88512;
    const double C88519 = C88511 * ae;
    const double C88516 = C88511 * be;
    const double C88669 = 2 * C88511;
    const double C1832 = (C87402 * C87531 + C87538 * C87754) / C87281;
    const double C1033 = (C87402 * C87575 + C87582 * C87656) / C87281;
    const double C88172 = C87539 + C87626;
    const double C2044 = (C87402 * C87618 + C87625 * C87754) / C87281;
    const double C88508 = C87583 + C87707;
    const double C1429 = (C87402 * C87699 + C87706 * C87656) / C87281;
    const double C88292 = C87453 + C88290;
    const double C88571 = C88569 * C87754;
    const double C88627 = C87453 + C88625;
    const double C88306 = C87450 + C88304;
    const double C88586 = C88584 * C87754;
    const double C88644 = C87450 + C88642;
    const double C87561 = C87543 + C87559;
    const double C88198 = C87524 * C88193;
    const double C88504 = C88193 * C87754;
    const double C88655 = C87543 + C88653;
    const double C87605 = C87587 + C87603;
    const double C88221 = C88219 * C87656;
    const double C88527 = C87568 * C88219;
    const double C88557 = C87524 * C88219;
    const double C88356 = C87587 + C88352;
    const double C88603 = C87568 * C88598;
    const double C87648 = C87630 + C87646;
    const double C88201 = C87524 * C88196;
    const double C88481 = C88196 * C87754;
    const double C88580 = C87630 + C88578;
    const double C87729 = C87711 + C87727;
    const double C88235 = C88233 * C87656;
    const double C88530 = C87568 * C88233;
    const double C88559 = C87524 * C88233;
    const double C88372 = C87711 + C88368;
    const double C88606 = C87568 * C88601;
    const double C190 =
        (2 * (ae * C87531 + C87402 * C87535) + ae * (C87531 + C87536 * C87406) +
         C87402 *
             (C87535 + ae * C87402 * C87536 +
              C87402 * (ae * C87536 + C87402 * C87440 * C87439 * C87530))) /
        C87283;
    const double C932 = (be * (C87402 * C87415 + C87405 * ae) +
                         C87524 * (ae * C87531 + C87402 * C87535)) /
                        C87283;
    const double C934 = (C87411 * C87407 * C87530 + be * C87524 * C87415 +
                         C87524 * (be * C87415 + C87524 * C87535)) /
                        C87283;
    const double C1837 = (C87568 * (ae * C87531 + C87402 * C87535)) / C87283;
    const double C1839 = (C87411 * C87407 * C87530 + C87535 * C87754) / C87283;
    const double C4215 = (C87568 * (be * C87415 + C87524 * C87535)) / C87283;
    const double C87544 = C87402 * C87542;
    const double C88150 = C87524 * C87542;
    const double C5790 =
        (2 * (be * C87415 + C87524 * C87535) + be * (C87415 + C87428 * C87656) +
         C87524 * (C87535 + be * C87524 * C87428 +
                   C87524 * (C87437 + C87524 * C87542))) /
        C87283;
    const double C6336 =
        (be * C87415 + C87524 * C87535 + (C87437 + C87524 * C87542) * C87754) /
        C87283;
    const double C8603 = (C87568 * (C87535 + be * C88046 +
                                    C87524 * (C87437 + C87524 * C87542))) /
                         C87283;
    const double C10607 =
        (2 * C87568 * C87535 + C87568 * (C87535 + C87542 * C87754)) / C87283;
    const double C87558 = C87402 * C87554;
    const double C88288 = C87524 * C87554;
    const double C88619 = C87554 * C87754;
    const double C27123 =
        (3 * (C87535 + C87542 * C87754) +
         C87568 * (2 * C87568 * C87542 + C87568 * (C87542 + C87554 * C87754))) /
        C87283;
    const double C355 =
        (2 * (be * C87618 + C87402 * C87622) + be * (C87618 + C87623 * C87406) +
         C87402 *
             (C87622 + be * C87402 * C87623 +
              C87402 * (be * C87623 + C87402 * C87440 * C87439 * C87617))) /
        C87283;
    const double C1144 = (ae * (C87402 * C87414 + C87405 * be) +
                          C87524 * (be * C87618 + C87402 * C87622)) /
                         C87283;
    const double C1146 = (C87411 * C87407 * C87617 + ae * C87524 * C87414 +
                          C87524 * (ae * C87414 + C87524 * C87622)) /
                         C87283;
    const double C2049 = (C87568 * (be * C87618 + C87402 * C87622)) / C87283;
    const double C2051 = (C87411 * C87407 * C87617 + C87622 * C87754) / C87283;
    const double C4443 =
        (ae * C87568 * C87414 + C87524 * C87568 * C87622) / C87283;
    const double C87631 = C87402 * C87629;
    const double C88162 = C87524 * C87629;
    const double C88266 = C87568 * C87629;
    const double C5902 =
        (2 * (ae * C87414 + C87524 * C87622) + ae * (C87414 + C87427 * C87656) +
         C87524 * (C87622 + ae * C87524 * C87427 +
                   C87524 * (C87436 + C87524 * C87629))) /
        C87283;
    const double C6496 = (ae * (C87414 + C87427 * C87754) +
                          C87524 * (C87622 + C87629 * C87754)) /
                         C87283;
    const double C8763 =
        (C87568 * C87622 + ae * C87568 * C88061 +
         C87524 * (ae * C87568 * C87427 + C87524 * C87568 * C87629)) /
        C87283;
    const double C10719 =
        (2 * C87568 * C87622 + C87568 * (C87622 + C87629 * C87754)) / C87283;
    const double C87645 = C87402 * C87641;
    const double C88302 = C87524 * C87641;
    const double C88385 = C87641 * C87754;
    const double C88405 = C87568 * C87641;
    const double C273 =
        (2 * (ae * C87575 + C87402 * C87579) + ae * (C87575 + C87580 * C87406) +
         C87402 *
             (C87579 + ae * C87402 * C87580 +
              C87402 * (ae * C87580 + C87402 * C87440 * C87439 * C87574))) /
        C87283;
    const double C1038 = (C87524 * (ae * C87575 + C87402 * C87579)) / C87283;
    const double C1040 = (C87411 * C87407 * C87574 + C87579 * C87656) / C87283;
    const double C1943 = (be * (C87402 * C87415 + C87405 * ae) +
                          C87568 * (ae * C87575 + C87402 * C87579)) /
                         C87283;
    const double C1945 = (C87411 * C87407 * C87574 + be * C87568 * C87415 +
                          C87568 * (be * C87415 + C87568 * C87579)) /
                         C87283;
    const double C4329 =
        (be * C87524 * C87415 + C87568 * C87524 * C87579) / C87283;
    const double C87588 = C87402 * C87586;
    const double C88429 = C87524 * C87586;
    const double C88461 = C87568 * C87586;
    const double C5846 =
        (2 * C87524 * C87579 + C87524 * (C87579 + C87586 * C87656)) / C87283;
    const double C6416 = (C87524 * C87579 + be * C87568 * C88046 +
                          C87568 * (be * C88046 + C87568 * C87524 * C87586)) /
                         C87283;
    const double C8683 = (be * (C87415 + C87428 * C87656) +
                          C87568 * (C87579 + C87586 * C87656)) /
                         C87283;
    const double C10663 =
        (2 * (be * C87415 + C87568 * C87579) + be * (C87415 + C87428 * C87754) +
         C87568 * (C87579 + be * C87568 * C87428 +
                   C87568 * (C87437 + C87568 * C87586))) /
        C87283;
    const double C87602 = C87402 * C87598;
    const double C88298 = C87598 * C87656;
    const double C88568 = C87524 * C87598;
    const double C88623 = C87568 * C87598;
    const double C13953 =
        (3 * (C87579 + C87586 * C87656) +
         C87524 * (2 * C87524 * C87586 + C87524 * (C87586 + C87598 * C87656))) /
        C87283;
    const double C496 =
        (2 * C87402 * C87682 +
         C87402 * (C87682 + C87440 * C87439 * C87679 * C87406)) /
        C87283;
    const double C1336 =
        (ae * C87402 * C87575 + C87524 * C87402 * C87682) / C87283;
    const double C1338 = (C87411 * C87407 * C87679 + ae * C87524 * C87575 +
                          C87524 * (ae * C87575 + C87524 * C87682)) /
                         C87283;
    const double C2241 =
        (be * C87402 * C87618 + C87568 * C87402 * C87682) / C87283;
    const double C2243 = (C87411 * C87407 * C87679 + be * C87568 * C87618 +
                          C87568 * (be * C87618 + C87568 * C87682)) /
                         C87283;
    const double C4661 = (ae * (C87568 * C87575 + C87405 * be) +
                          C87524 * (be * C87618 + C87568 * C87682)) /
                         C87283;
    const double C88026 = C87402 * C87685;
    const double C88213 = C87524 * C87685;
    const double C88274 = C87568 * C87685;
    const double C497 =
        (3 * (C87682 + C87685 * C87406) +
         C87402 * (2 * C87402 * C87685 +
                   C87402 * (C87685 + C87476 * C87475 * C87679 * C87406))) /
        C87283;
    const double C1337 = (ae * (C87575 + C87580 * C87406) +
                          C87524 * (C87682 + C87685 * C87406)) /
                         C87283;
    const double C1339 = (C87402 * C87682 + ae * C87524 * C87582 +
                          C87524 * (ae * C87582 + C87524 * C87402 * C87685)) /
                         C87283;
    const double C2242 = (be * (C87618 + C87623 * C87406) +
                          C87568 * (C87682 + C87685 * C87406)) /
                         C87283;
    const double C2244 = (C87402 * C87682 + be * C87568 * C87625 +
                          C87568 * (be * C87625 + C87568 * C87402 * C87685)) /
                         C87283;
    const double C6008 =
        (2 * (ae * C87575 + C87524 * C87682) + ae * (C87575 + C87580 * C87656) +
         C87524 * (C87682 + ae * C87524 * C87580 +
                   C87524 * (C87583 + C87524 * C87685))) /
        C87283;
    const double C10825 =
        (2 * (be * C87618 + C87568 * C87682) + be * (C87618 + C87623 * C87754) +
         C87568 * (C87682 + be * C87568 * C87623 +
                   C87568 * (C87626 + C87568 * C87685))) /
        C87283;
    const double C87689 = C87688 * C87406;
    const double C88218 = C87402 * C87688;
    const double C88351 = C87524 * C87688;
    const double C88392 = C87568 * C87688;
    const double C574 =
        (2 * (be * C87699 + C87402 * C87703) + be * (C87699 + C87704 * C87406) +
         C87402 *
             (C87703 + be * C87402 * C87704 +
              C87402 * (be * C87704 + C87402 * C87440 * C87439 * C87698))) /
        C87283;
    const double C1434 = (C87524 * (be * C87699 + C87402 * C87703)) / C87283;
    const double C1436 = (C87411 * C87407 * C87698 + C87703 * C87656) / C87283;
    const double C2339 = (ae * (C87402 * C87414 + C87405 * be) +
                          C87568 * (be * C87699 + C87402 * C87703)) /
                         C87283;
    const double C2341 = (C87411 * C87407 * C87698 + ae * C87568 * C87414 +
                          C87568 * (ae * C87414 + C87568 * C87703)) /
                         C87283;
    const double C4771 =
        (ae * C87524 * C87414 + C87568 * C87524 * C87703) / C87283;
    const double C87712 = C87402 * C87710;
    const double C88438 = C87524 * C87710;
    const double C88485 = C87568 * C87710;
    const double C6064 =
        (2 * C87524 * C87703 + C87524 * (C87703 + C87710 * C87656)) / C87283;
    const double C6730 = (C87524 * C87703 + ae * C87568 * C88061 +
                          C87568 * (ae * C88061 + C87568 * C87524 * C87710)) /
                         C87283;
    const double C8997 = (ae * (C87414 + C87427 * C87656) +
                          C87568 * (C87703 + C87710 * C87656)) /
                         C87283;
    const double C10881 =
        (2 * (ae * C87414 + C87568 * C87703) + ae * (C87414 + C87427 * C87754) +
         C87568 * (C87703 + ae * C87568 * C87427 +
                   C87568 * (C87436 + C87568 * C87710))) /
        C87283;
    const double C87726 = C87402 * C87722;
    const double C88363 = C87722 * C87656;
    const double C88583 = C87524 * C87722;
    const double C88640 = C87568 * C87722;
    const double C14325 =
        (3 * (C87703 + C87710 * C87656) +
         C87524 * (2 * C87524 * C87710 + C87524 * (C87710 + C87722 * C87656))) /
        C87283;
    const double C630 =
        (2 * C87402 * C87742 +
         C87402 * (C87742 + C87440 * C87439 * C87739 * C87406)) /
        C87283;
    const double C1516 =
        (be * C87402 * C87699 + C87524 * C87402 * C87742) / C87283;
    const double C1518 = (C87411 * C87407 * C87739 + be * C87524 * C87699 +
                          C87524 * (be * C87699 + C87524 * C87742)) /
                         C87283;
    const double C2421 =
        (ae * C87402 * C87531 + C87568 * C87402 * C87742) / C87283;
    const double C2423 = (C87411 * C87407 * C87739 + ae * C87568 * C87531 +
                          C87568 * (ae * C87531 + C87568 * C87742)) /
                         C87283;
    const double C4873 = (ae * (C87524 * C87531 + C87405 * be) +
                          C87568 * (be * C87699 + C87524 * C87742)) /
                         C87283;
    const double C88033 = C87402 * C87745;
    const double C88227 = C87524 * C87745;
    const double C88497 = C87568 * C87745;
    const double C631 =
        (3 * (C87742 + C87745 * C87406) +
         C87402 * (2 * C87402 * C87745 +
                   C87402 * (C87745 + C87476 * C87475 * C87739 * C87406))) /
        C87283;
    const double C1517 = (be * (C87699 + C87704 * C87406) +
                          C87524 * (C87742 + C87745 * C87406)) /
                         C87283;
    const double C1519 = (C87402 * C87742 + be * C87524 * C87706 +
                          C87524 * (be * C87706 + C87524 * C87402 * C87745)) /
                         C87283;
    const double C2422 = (ae * (C87531 + C87536 * C87406) +
                          C87568 * (C87742 + C87745 * C87406)) /
                         C87283;
    const double C2424 = (C87402 * C87742 + ae * C87568 * C87538 +
                          C87568 * (ae * C87538 + C87568 * C87402 * C87745)) /
                         C87283;
    const double C6117 =
        (2 * (be * C87699 + C87524 * C87742) + be * (C87699 + C87704 * C87656) +
         C87524 * (C87742 + be * C87524 * C87704 +
                   C87524 * (C87707 + C87524 * C87745))) /
        C87283;
    const double C10934 =
        (2 * (ae * C87531 + C87568 * C87742) + ae * (C87531 + C87536 * C87754) +
         C87568 * (C87742 + ae * C87568 * C87536 +
                   C87568 * (C87539 + C87568 * C87745))) /
        C87283;
    const double C87749 = C87748 * C87406;
    const double C88232 = C87402 * C87748;
    const double C88367 = C87524 * C87748;
    const double C88651 = C87568 * C87748;
    const double C89119 = C89118 * C89113;
    const double C89124 = C89123 * C89118;
    const double C89300 = C89118 * C89114;
    const double C89297 = C89118 / C89112;
    const double C5077 = C89305 * C89118;
    const double C89186 = C89137 * C89184;
    const double C89189 = C89123 * C89137;
    const double C89309 = C89137 * C89185;
    const double C89304 = C89137 / C89112;
    const double C814 = C89305 * C89137;
    const double C89214 = C89153 * C89212;
    const double C89217 = C89123 * C89153;
    const double C89313 = C89153 * C89213;
    const double C89306 = C89153 / C89112;
    const double C1721 = C89305 * C89153;
    const double C87289 = 2 * C87286;
    const double C104 = ((0 * ae) / C87281 - C87286 / C87283) / (2 * C87281) +
                        (0 * ae) / C87281;
    const double C38297 = (0 * ae) / C87281 - C87286 / C87283;
    const double C90 = (2 * C89319 * C89320) / C87281;
    const double C38291 = C89320 / C87281;
    const double C87335 = 2 * C87327;
    const double C13315 = ((0 * ae) / C87281 - C87327 / C87283) / (2 * C87281) +
                          (0 * ae) / C87281;
    const double C38366 = (0 * ae) / C87281 - C87327 / C87283;
    const double C199 = C180 * C108;
    const double C197 = C180 * C115;
    const double C195 = C180 * C107;
    const double C418 = C180 * C347;
    const double C416 = C180 * C182;
    const double C635 = C180 * C566;
    const double C940 = C180 * C818;
    const double C1845 = C180 * C1723;
    const double C27131 = C180 * C1725;
    const double C27129 = C180 * C1735;
    const double C27127 = C180 * C1724;
    const double C27420 = C180 * C2040;
    const double C27418 = C180 * C1828;
    const double C27697 = C180 * C2330;
    const double C29351 = C180 * C4097;
    const double C421 = C408 * C108;
    const double C417 = C408 * C107;
    const double C1239 = C408 * C818;
    const double C2144 = C408 * C1723;
    const double C27423 = C408 * C1725;
    const double C27419 = C408 * C1724;
    const double C29667 = C408 * C4097;
    const double C13259 = (2 * C89319 * C89331) / C87281;
    const double C38293 = C89331 / C87281;
    const double C13314 =
        (((C89236 - (C87311 * 2 * C87327) / C87281) * ae) / C87281 -
         C87325 / C87285) /
            (2 * C87281) +
        ((C87311 * ((0 * ae) / C87281 - C87327 / C87283) + C38294) * ae) /
            C87281;
    const double C87361 = 2 * C87353;
    const double C25953 = ((0 * ae) / C87281 - C87353 / C87283) / (2 * C87281) +
                          (0 * ae) / C87281;
    const double C54885 = (0 * ae) / C87281 - C87353 / C87283;
    const double C282 = C263 * C108;
    const double C280 = C263 * C115;
    const double C278 = C263 * C107;
    const double C501 = C263 * C347;
    const double C709 = C263 * C566;
    const double C707 = C263 * C265;
    const double C1046 = C263 * C818;
    const double C1951 = C263 * C1723;
    const double C13961 = C263 * C820;
    const double C13959 = C263 * C830;
    const double C13957 = C263 * C819;
    const double C14241 = C263 * C1135;
    const double C14502 = C263 * C1425;
    const double C14500 = C263 * C1029;
    const double C16928 = C263 * C4097;
    const double C712 = C699 * C108;
    const double C708 = C699 * C107;
    const double C1619 = C699 * C818;
    const double C2524 = C699 * C1723;
    const double C14505 = C699 * C820;
    const double C14501 = C699 * C819;
    const double C17579 = C699 * C4097;
    const double C25849 = (2 * C89319 * C89332) / C87281;
    const double C54750 = C89332 / C87281;
    const double C25952 =
        (((C89247 - (C87314 * 2 * C87353) / C87281) * ae) / C87281 -
         C87351 / C87285) /
            (2 * C87281) +
        ((C87314 * ((0 * ae) / C87281 - C87353 / C87283) + C54751) * ae) /
            C87281;
    const double C201 = C180 * C117;
    const double C284 = C263 * C117;
    const double C942 = C180 * C828;
    const double C1048 = C263 * C828;
    const double C13963 = C263 * C832;
    const double C1847 = C180 * C1733;
    const double C1953 = C263 * C1733;
    const double C27133 = C180 * C1737;
    const double C16930 = C263 * C4102;
    const double C29353 = C180 * C4102;
    const double C13966 = C263 * C5733;
    const double C16934 = C263 * C8522;
    const double C33632 = C180 * C8522;
    const double C27136 = C180 * C10550;
    const double C14073 = C89093 * C827;
    const double C39388 = C38292 * C827;
    const double C14064 = C89093 * C831;
    const double C27321 = C89093 * C1732;
    const double C56782 = C38292 * C1732;
    const double C27312 = C89093 * C1736;
    const double C17043 = C89093 * C4101;
    const double C14069 = C89093 * C5732;
    const double C17047 = C89093 * C8521;
    const double C27317 = C89093 * C10549;
    const double C87434 = C87431 + C87425;
    const double C88023 = C88021 + C87425;
    const double C88146 = C88144 + C87425;
    const double C4662 = (ae * (C87568 * C87582 + C87423 * be) +
                          C87524 * (be * C87625 + C87568 * C87402 * C87685)) /
                         C87283;
    const double C4874 = (ae * (C87524 * C87538 + C87423 * be) +
                          C87568 * (be * C87706 + C87524 * C87402 * C87745)) /
                         C87283;
    const double C927 =
        (C87402 * C87531 + C87524 * (C87524 * C87538 + C87423 * be) +
         C87524 * C87423 * be) /
        C87281;
    const double C1139 =
        (C87402 * C87618 + C87524 * (C87524 * C87625 + C87423 * ae) +
         C87524 * C87423 * ae) /
        C87281;
    const double C1938 =
        (C87402 * C87575 + C87568 * (C87568 * C87582 + C87423 * be) +
         C87568 * C87423 * be) /
        C87281;
    const double C2334 =
        (C87402 * C87699 + C87568 * (C87568 * C87706 + C87423 * ae) +
         C87568 * C87423 * ae) /
        C87281;
    const double C4212 = (C87568 * (C87524 * C87538 + C87423 * be)) / C87281;
    const double C4326 =
        (C87568 * C87524 * C87582 + C87524 * C87423 * be) / C87281;
    const double C4440 = (C87568 * (C87524 * C87625 + C87423 * ae)) / C87281;
    const double C4768 =
        (C87568 * C87524 * C87706 + C87524 * C87423 * ae) / C87281;
    const double C821 = C87402 * C87405 + C87423 * C87656;
    const double C1726 = C87402 * C87405 + C87423 * C87754;
    const double C4098 = C87568 * C87524 * C87423;
    const double C5726 =
        2 * C87524 * C87423 + C87524 * (C87423 + C87445 * C87656);
    const double C8515 = C87568 * (C87423 + C87445 * C87656);
    const double C10543 =
        2 * C87568 * C87423 + C87568 * (C87423 + C87445 * C87754);
    const double C87433 = C87430 + C87422;
    const double C88022 = C88019 + C87422;
    const double C88145 = C88142 + C87422;
    const double C6650 = (ae * (C87575 + C87568 * (C87568 * C87580 + C87422) +
                                C87568 * C87417 * be) +
                          C87524 * (C87682 + be * C87568 * C87623 +
                                    C87568 * (C87626 + C87568 * C87685))) /
                         C87283;
    const double C87432 = C87429 * C87282;
    const double C87661 = C87660 * C87282;
    const double C87759 = C87758 * C87282;
    const double C8917 =
        (be * C87618 + C87568 * C87682 + ae * (C87568 * C88076 + C88020 * be) +
         C87524 * (ae * (C87568 * C87580 + C87422) +
                   C87524 * (C87626 + C87568 * C87685))) /
        C87283;
    const double C6413 =
        (C87524 * C87575 + C87568 * (C87568 * C88076 + C88020 * be) +
         C87568 * C88020 * be) /
        C87281;
    const double C6727 =
        (C87524 * C87699 + C87568 * (C87568 * C88077 + C88020 * ae) +
         C87568 * C88020 * ae) /
        C87281;
    const double C6249 = C87524 * C87405 + C88020 * C87754;
    const double C23153 =
        2 * C87568 * C88020 + C87568 * (C88020 + C88175 * C87754);
    const double C423 = C89236 * C411;
    const double C714 = C89247 * C702;
    const double C202 = C180 * C109;
    const double C285 = C263 * C109;
    const double C425 = C408 * C109;
    const double C716 = C699 * C109;
    const double C944 = C180 * C817;
    const double C1050 = C263 * C817;
    const double C1235 = C408 * C817;
    const double C1615 = C699 * C817;
    const double C1849 = C180 * C1722;
    const double C1955 = C263 * C1722;
    const double C2140 = C408 * C1722;
    const double C2520 = C699 * C1722;
    const double C13964 = C263 * C5727;
    const double C14509 = C699 * C5727;
    const double C16932 = C263 * C8516;
    const double C17575 = C699 * C8516;
    const double C33630 = C180 * C8516;
    const double C33860 = C408 * C8516;
    const double C27134 = C180 * C10544;
    const double C27427 = C408 * C10544;
    const double C200 = C89236 * C189;
    const double C198 = C89236 * C183;
    const double C420 = C180 * C183;
    const double C203 = C89236 * C184;
    const double C424 = C180 * C184;
    const double C941 = C89236 * C924;
    const double C1238 = C180 * C924;
    const double C38370 = C38294 * C924;
    const double C945 = C89236 * C925;
    const double C1234 = C180 * C925;
    const double C38379 = C38294 * C925;
    const double C1846 = C89236 * C1829;
    const double C2143 = C180 * C1829;
    const double C1850 = C89236 * C1830;
    const double C2139 = C180 * C1830;
    const double C27130 = C89236 * C1831;
    const double C27422 = C180 * C1831;
    const double C29352 = C89236 * C4211;
    const double C29666 = C180 * C4211;
    const double C72768 = C38294 * C4211;
    const double C27135 = C89236 * C10604;
    const double C27426 = C180 * C10604;
    const double C283 = C89247 * C272;
    const double C281 = C89247 * C266;
    const double C711 = C263 * C266;
    const double C286 = C89247 * C267;
    const double C715 = C263 * C267;
    const double C1047 = C89247 * C1030;
    const double C1618 = C263 * C1030;
    const double C1051 = C89247 * C1031;
    const double C1614 = C263 * C1031;
    const double C13960 = C89247 * C1032;
    const double C14504 = C263 * C1032;
    const double C1952 = C89247 * C1935;
    const double C2523 = C263 * C1935;
    const double C54889 = C54751 * C1935;
    const double C1956 = C89247 * C1936;
    const double C2519 = C263 * C1936;
    const double C54898 = C54751 * C1936;
    const double C16929 = C89247 * C4325;
    const double C17578 = C263 * C4325;
    const double C71932 = C54751 * C4325;
    const double C13965 = C89247 * C5843;
    const double C14508 = C263 * C5843;
    const double C16933 = C89247 * C8680;
    const double C17574 = C263 * C8680;
    const double C71941 = C54751 * C8680;
    const double C422 = C180 * C348;
    const double C504 = C263 * C348;
    const double C426 = C180 * C349;
    const double C506 = C263 * C349;
    const double C1240 = C180 * C1136;
    const double C1344 = C263 * C1136;
    const double C1236 = C180 * C1137;
    const double C1346 = C263 * C1137;
    const double C14243 = C263 * C1138;
    const double C2145 = C180 * C2041;
    const double C2249 = C263 * C2041;
    const double C2141 = C180 * C2042;
    const double C2251 = C263 * C2042;
    const double C27424 = C180 * C2043;
    const double C17258 = C263 * C4439;
    const double C29668 = C180 * C4439;
    const double C27428 = C180 * C10716;
    const double C638 = C180 * C567;
    const double C713 = C263 * C567;
    const double C640 = C180 * C568;
    const double C717 = C263 * C568;
    const double C1524 = C180 * C1426;
    const double C1620 = C263 * C1426;
    const double C1526 = C180 * C1427;
    const double C1616 = C263 * C1427;
    const double C14506 = C263 * C1428;
    const double C2429 = C180 * C2331;
    const double C2525 = C263 * C2331;
    const double C2431 = C180 * C2332;
    const double C2521 = C263 * C2332;
    const double C27699 = C180 * C2333;
    const double C17580 = C263 * C4767;
    const double C29991 = C180 * C4767;
    const double C14510 = C263 * C6061;
    const double C17576 = C263 * C8994;
    const double C34098 = C180 * C8994;
    const double C87460 = C87457 + C87448;
    const double C87927 = be * C87924;
    const double C88289 = 2 * C87924;
    const double C88567 = C87568 * C87924;
    const double C23157 =
        (2 * C87568 * C88046 + C87568 * (C88046 + C87924 * C87754)) / C87281;
    const double C87944 = be * C87941;
    const double C88624 = 2 * C87941;
    const double C88153 = C87428 + C88151;
    const double C88464 = C87428 + C88462;
    const double C87459 = C87456 + C87444;
    const double C87481 = C87472 + C87473;
    const double C87926 = ae * C87923;
    const double C88303 = 2 * C87923;
    const double C88582 = C87568 * C87923;
    const double C14841 =
        (C87622 + C87629 * C87754 + ae * (C88061 + C87923 * C87754) +
         C87524 * (ae * (C87427 + C87450 * C87754) +
                   C87524 * (C87629 + C87641 * C87754))) /
        C87283;
    const double C23156 =
        (2 * C87568 * C88061 + C87568 * (C88061 + C87923 * C87754)) / C87281;
    const double C87943 = ae * C87940;
    const double C88641 = 2 * C87940;
    const double C88165 = C87427 + C88163;
    const double C88488 = C87427 + C88486;
    const double C87458 = C87455 * C87282;
    const double C87505 = C87500 + C87488;
    const double C88328 = C88322 + C87488;
    const double C88679 = C88672 + C87488;
    const double C87493 = C87438 + C87486;
    const double C87495 = C87485 * ae;
    const double C87492 = C87485 * be;
    const double C88195 = C87485 * C87656;
    const double C88194 = C87524 * C87485;
    const double C88529 = C87485 * C87754;
    const double C88528 = C87568 * C87485;
    const double C87503 = C87497 + C87484;
    const double C88325 = C88317 + C87484;
    const double C88676 = C88666 + C87484;
    const double C87502 = C87496 * C87282;
    const double C87671 = C87670 * C87282;
    const double C87769 = C87768 * C87282;
    const double C88327 = C87438 + C88319;
    const double C88329 = C88318 * ae;
    const double C88326 = C88318 * be;
    const double C88600 = C88318 * C87754;
    const double C88599 = C87568 * C88318;
    const double C88579 = C87438 + C88577;
    const double C88680 = C88667 * ae;
    const double C88677 = C88667 * be;
    const double C87547 = C87536 + C87545;
    const double C87555 = 2 * C87549;
    const double C87553 = ae * C87549;
    const double C88013 = C87524 * C87549;
    const double C88502 = C87568 * C87549;
    const double C10605 =
        (2 * C87568 * C87538 + C87568 * (C87538 + C87549 * C87754)) / C87281;
    const double C88179 = C88174 + C87444;
    const double C88411 = ae * C88409;
    const double C88652 = 2 * C88409;
    const double C88500 = C87536 + C88498;
    const double C87591 = C87580 + C87589;
    const double C87599 = 2 * C87593;
    const double C87597 = ae * C87593;
    const double C88073 = C87524 * C87593;
    const double C88136 = C87568 * C87593;
    const double C5844 =
        (2 * C87524 * C87582 + C87524 * (C87582 + C87593 * C87656)) / C87281;
    const double C8681 = (C87568 * (C87582 + C87593 * C87656) +
                          (C87423 + C87445 * C87656) * be) /
                         C87281;
    const double C88216 = C87580 + C88214;
    const double C88355 = 2 * C88350;
    const double C88353 = ae * C88350;
    const double C88450 = C87568 * C88350;
    const double C88418 = C88416 + C87444;
    const double C87634 = C87623 + C87632;
    const double C88314 = C87550 + C87637;
    const double C87642 = 2 * C87636;
    const double C87640 = be * C87636;
    const double C88015 = C87524 * C87636;
    const double C88480 = C87568 * C87636;
    const double C10717 =
        (2 * C87568 * C87625 + C87568 * (C87625 + C87636 * C87754)) / C87281;
    const double C88182 = C88177 + C87448;
    const double C88393 = be * C88391;
    const double C88635 = 2 * C88391;
    const double C88478 = C87623 + C88477;
    const double C87666 = C87665 * C87282;
    const double C87715 = C87704 + C87713;
    const double C88663 = C87594 + C87718;
    const double C87723 = 2 * C87717;
    const double C87721 = be * C87717;
    const double C88074 = C87524 * C87717;
    const double C88138 = C87568 * C87717;
    const double C6062 =
        (2 * C87524 * C87706 + C87524 * (C87706 + C87717 * C87656)) / C87281;
    const double C8995 = (C87568 * (C87706 + C87717 * C87656) +
                          (C87423 + C87445 * C87656) * ae) /
                         C87281;
    const double C88230 = C87704 + C88228;
    const double C88371 = 2 * C88366;
    const double C88369 = be * C88366;
    const double C88452 = C87568 * C88366;
    const double C88518 = C88513 + C87448;
    const double C87764 = C87763 * C87282;
    const double C19015 = C263 * C6255;
    const double C29357 = C180 * C6255;
    const double C19096 = C89093 * C6254;
    const double C110 = 3 * (C87405 + C87417 * C87406) +
                        C87402 * (2 * C87423 + C87402 * C87452);
    const double C822 = C87405 + C87417 * C87406 + C87452 * C87656;
    const double C823 = C87524 * (2 * C87423 + C87402 * C87452);
    const double C1727 = C87405 + C87417 * C87406 + C87452 * C87754;
    const double C1728 = C87568 * (2 * C87423 + C87402 * C87452);
    const double C4099 = C87568 * C87524 * C87452;
    const double C6248 = C87524 * C87423 + C88014 * C87754;
    const double C13743 = 3 * (C87405 + C87417 * C87656) +
                          C87524 * (2 * C88020 + C87524 * C88181);
    const double C14601 = C87405 + C87417 * C87656 + C88181 * C87754;
    const double C16683 = C87568 * (2 * C88020 + C87524 * C88181);
    const double C14993 =
        (C87682 + be * C87568 * C87623 + C87568 * (C87626 + C87568 * C87685) +
         ae * (C88076 + C87568 * (C87568 * C87524 * C87587 + C88180) +
               C87568 * C88175 * be) +
         C87524 * (ae * (C87580 + C87568 * (C87568 * C87587 + C87444) +
                         C87568 * C87438 * be) +
                   C87524 * (C87685 + be * C87568 * C87630 +
                             C87568 * (C87637 + C87568 * C87688)))) /
        C87283;
    const double C26997 = 3 * (C87405 + C87417 * C87754) +
                          C87568 * (2 * C88143 + C87568 * C88517);
    const double C1853 = C89236 * C1832;
    const double C2147 = C180 * C1832;
    const double C1054 = C89247 * C1033;
    const double C1622 = C263 * C1033;
    const double C2149 = C180 * C2044;
    const double C2254 = C263 * C2044;
    const double C1529 = C180 * C1429;
    const double C1624 = C263 * C1429;
    const double C88294 = C87524 * C88292;
    const double C88573 = C87924 + C88571;
    const double C88629 = C87568 * C88627;
    const double C88308 = C87524 * C88306;
    const double C88588 = C87923 + C88586;
    const double C88646 = C87568 * C88644;
    const double C87563 = C87402 * C87561;
    const double C88006 = C87524 * C87561;
    const double C88506 = C87549 + C88504;
    const double C88657 = C87568 * C88655;
    const double C87607 = C87402 * C87605;
    const double C88070 = C87524 * C87605;
    const double C88130 = C87568 * C87605;
    const double C88223 = C87593 + C88221;
    const double C88560 = C87568 * C88557;
    const double C88359 = C87524 * C88356;
    const double C88443 = C87568 * C88356;
    const double C87650 = C87402 * C87648;
    const double C88008 = C87524 * C87648;
    const double C88482 = C87636 + C88481;
    const double C88636 = C87568 * C88580;
    const double C87731 = C87402 * C87729;
    const double C88071 = C87524 * C87729;
    const double C88132 = C87568 * C87729;
    const double C88237 = C87717 + C88235;
    const double C88561 = C87568 * C88559;
    const double C88375 = C87524 * C88372;
    const double C88445 = C87568 * C88372;
    const double C205 = C89236 * C190;
    const double C943 = C89236 * C932;
    const double C38374 = C38294 * C932;
    const double C1848 = C89236 * C1837;
    const double C27132 = C89236 * C1839;
    const double C29354 = C89236 * C4215;
    const double C72772 = C38294 * C4215;
    const double C87546 = C87539 + C87544;
    const double C88152 = C87437 + C88150;
    const double C29358 = C89236 * C6336;
    const double C72781 = C38294 * C6336;
    const double C33631 = C89236 * C8603;
    const double C75554 = C38294 * C8603;
    const double C27137 = C89236 * C10607;
    const double C87560 = C87550 + C87558;
    const double C88291 = C87473 + C88288;
    const double C88620 = C87542 + C88619;
    const double C35624 = C89236 * C27123;
    const double C14075 = C89093 * C1144;
    const double C39392 = C38292 * C1144;
    const double C14066 = C89093 * C1146;
    const double C27323 = C89093 * C2049;
    const double C56786 = C38292 * C2049;
    const double C27314 = C89093 * C2051;
    const double C17045 = C89093 * C4443;
    const double C87633 = C87626 + C87631;
    const double C88164 = C87436 + C88162;
    const double C14071 = C89093 * C5902;
    const double C19098 = C89093 * C6496;
    const double C17049 = C89093 * C8763;
    const double C27319 = C89093 * C10719;
    const double C87647 = C87637 + C87645;
    const double C88305 = C87472 + C88302;
    const double C88386 = C87629 + C88385;
    const double C88406 = C87524 * C88405;
    const double C288 = C89247 * C273;
    const double C1049 = C89247 * C1038;
    const double C13962 = C89247 * C1040;
    const double C1954 = C89247 * C1943;
    const double C54893 = C54751 * C1943;
    const double C16931 = C89247 * C4329;
    const double C71936 = C54751 * C4329;
    const double C87590 = C87583 + C87588;
    const double C88463 = C87437 + C88461;
    const double C13967 = C89247 * C5846;
    const double C19014 = C89247 * C6416;
    const double C75692 = C54751 * C6416;
    const double C16935 = C89247 * C8683;
    const double C71945 = C54751 * C8683;
    const double C87604 = C87594 + C87602;
    const double C88299 = C87586 + C88298;
    const double C88570 = C87568 * C88568;
    const double C88626 = C87473 + C88623;
    const double C18431 = C89247 * C13953;
    const double C507 = C89247 * C496;
    const double C1345 = C89247 * C1336;
    const double C14242 = C89247 * C1338;
    const double C2250 = C89247 * C2241;
    const double C55111 = C54751 * C2241;
    const double C17259 = C89247 * C4661;
    const double C72242 = C54751 * C4661;
    const double C88215 = C87583 + C88213;
    const double C88275 = C87626 + C88274;
    const double C508 = C89247 * C497;
    const double C1347 = C89247 * C1337;
    const double C1348 = C89247 * C1339;
    const double C2252 = C89247 * C2242;
    const double C55116 = C54751 * C2242;
    const double C2253 = C89247 * C2244;
    const double C57019 = C54751 * C2244;
    const double C14245 = C89247 * C6008;
    const double C87690 = C87685 + C87689;
    const double C88220 = C87524 * C88218;
    const double C88277 = C87568 * C88218;
    const double C88354 = C87594 + C88351;
    const double C88394 = C87637 + C88392;
    const double C14336 = C89093 * C1434;
    const double C39745 = C38292 * C1434;
    const double C14331 = C89093 * C1436;
    const double C27613 = C89093 * C2339;
    const double C57124 = C38292 * C2339;
    const double C27608 = C89093 * C2341;
    const double C17367 = C89093 * C4771;
    const double C87714 = C87707 + C87712;
    const double C88487 = C87436 + C88485;
    const double C14334 = C89093 * C6064;
    const double C19334 = C89093 * C6730;
    const double C17369 = C89093 * C8997;
    const double C27611 = C89093 * C10881;
    const double C87728 = C87718 + C87726;
    const double C88364 = C87710 + C88363;
    const double C88585 = C87568 * C88583;
    const double C88643 = C87472 + C88640;
    const double C18653 = C89093 * C14325;
    const double C641 = C89236 * C630;
    const double C1525 = C89236 * C1516;
    const double C38834 = C38294 * C1516;
    const double C2430 = C89236 * C2421;
    const double C27698 = C89236 * C2423;
    const double C29992 = C89236 * C4873;
    const double C73400 = C38294 * C4873;
    const double C88229 = C87707 + C88227;
    const double C88499 = C87539 + C88497;
    const double C642 = C89236 * C631;
    const double C1527 = C89236 * C1517;
    const double C38839 = C38294 * C1517;
    const double C1528 = C89236 * C1519;
    const double C39860 = C38294 * C1519;
    const double C2432 = C89236 * C2422;
    const double C2433 = C89236 * C2424;
    const double C27701 = C89236 * C10934;
    const double C87750 = C87745 + C87749;
    const double C88234 = C87524 * C88232;
    const double C88503 = C87568 * C88232;
    const double C88370 = C87718 + C88367;
    const double C88654 = C87550 + C88651;
    const double C89301 = C89119 / C89127;
    const double C89299 = C89119 / C89110;
    const double C89298 = C89119 * C89114;
    const double C5076 = (2 * C89123 * C89119) / C89110;
    const double C89302 = C89124 * C89114;
    const double C99 = C89124 / C89303;
    const double C2628 = C89124 / C89112;
    const double C89323 = C89300 / C89110;
    const double C5075 = (C89118 * std::pow(C89113, 2)) / C89122 + C89297;
    const double C89311 = C89186 / C89127;
    const double C89310 = C89186 * C89185;
    const double C89307 = C89186 / C89110;
    const double C813 = (2 * C89123 * C89186) / C89110;
    const double C89312 = C89189 * C89185;
    const double C5723 = C89189 / C89303;
    const double C6963 = C89189 / C89112;
    const double C89325 = C89309 / C89110;
    const double C812 = (C89137 * std::pow(C89184, 2)) / C89122 + C89304;
    const double C89315 = C89214 / C89127;
    const double C89314 = C89214 * C89213;
    const double C89308 = C89214 / C89110;
    const double C1720 = (2 * C89123 * C89214) / C89110;
    const double C89316 = C89217 * C89213;
    const double C10541 = C89217 / C89303;
    const double C11948 = C89217 / C89112;
    const double C89328 = C89313 / C89110;
    const double C1719 = (C89153 * std::pow(C89212, 2)) / C89122 + C89306;
    const double C87291 = C87279 * C87289;
    const double C13261 = -C87289 / C87281;
    const double C39020 = C38297 * C828;
    const double C39018 = C38297 * C827;
    const double C39408 = C38297 * C1137;
    const double C39404 = C38297 * C817;
    const double C39393 = C38297 * C1136;
    const double C39389 = C38297 * C818;
    const double C39753 = C38297 * C1427;
    const double C39749 = C38297 * C1429;
    const double C39746 = C38297 * C1426;
    const double C56414 = C38297 * C1733;
    const double C56412 = C38297 * C1732;
    const double C56802 = C38297 * C2042;
    const double C56798 = C38297 * C1722;
    const double C56794 = C38297 * C2044;
    const double C56787 = C38297 * C2041;
    const double C56783 = C38297 * C1723;
    const double C57132 = C38297 * C2332;
    const double C57125 = C38297 * C2331;
    const double C39017 = C38291 * C843;
    const double C39407 = C38291 * C1144;
    const double C39403 = C38291 * C827;
    const double C39399 = C38291 * C1146;
    const double C39395 = C38291 * C831;
    const double C39390 = C38291 * C1143;
    const double C39386 = C38291 * C829;
    const double C39752 = C38291 * C1434;
    const double C39748 = C38291 * C1436;
    const double C39743 = C38291 * C1433;
    const double C43332 = C38291 * C4443;
    const double C43328 = C38291 * C4101;
    const double C43750 = C38291 * C4771;
    const double C45187 = C38291 * C5902;
    const double C45183 = C38291 * C5732;
    const double C45389 = C38291 * C6064;
    const double C45935 = C38291 * C6496;
    const double C45931 = C38291 * C6254;
    const double C46233 = C38291 * C6730;
    const double C48895 = C38291 * C8763;
    const double C48891 = C38291 * C8521;
    const double C49193 = C38291 * C8997;
    const double C56411 = C38291 * C1748;
    const double C56801 = C38291 * C2049;
    const double C56797 = C38291 * C1732;
    const double C56793 = C38291 * C2051;
    const double C56789 = C38291 * C1736;
    const double C56784 = C38291 * C2048;
    const double C56780 = C38291 * C1734;
    const double C57131 = C38291 * C2339;
    const double C57127 = C38291 * C2341;
    const double C57122 = C38291 * C2338;
    const double C67760 = C38291 * C10719;
    const double C67756 = C38291 * C10549;
    const double C67964 = C38291 * C10881;
    const double C100 =
        (((0 - (C87279 * C87280) / C87281) * ae) / C87281 - (0 * be) / C87285) /
            (2 * C87281) +
        ((C87279 * (((C89093 - (C87279 * 2 * C87286) / C87281) * ae) / C87281 -
                    C87280 / C87285) +
          C38291) *
         ae) /
            C87281 +
        (0 * ae) / C87281 - C87286 / C87283;
    const double C87336 = C87311 * C87335;
    const double C38378 = C38366 * C817;
    const double C38375 = C38366 * C828;
    const double C38371 = C38366 * C818;
    const double C38602 = C38366 * C1137;
    const double C38600 = C38366 * C925;
    const double C38598 = C38366 * C1136;
    const double C38596 = C38366 * C924;
    const double C38838 = C38366 * C1427;
    const double C38835 = C38366 * C1426;
    const double C39859 = C38366 * C1429;
    const double C72780 = C38366 * C6255;
    const double C72773 = C38366 * C4102;
    const double C72769 = C38366 * C4097;
    const double C73082 = C38366 * C4439;
    const double C73080 = C38366 * C4211;
    const double C73401 = C38366 * C4767;
    const double C75553 = C38366 * C8522;
    const double C75549 = C38366 * C8516;
    const double C76375 = C38366 * C8994;
    const double C432 = C416 - C417;
    const double C27436 = C27418 - C27419;
    const double C38388 = C38293 * C190;
    const double C38384 = C38293 * C184;
    const double C38381 = C38293 * C189;
    const double C38377 = C38293 * C183;
    const double C38372 = C38293 * C188;
    const double C38368 = C38293 * C182;
    const double C38607 = C38293 * C411;
    const double C38595 = C38293 * C410;
    const double C38840 = C38293 * C630;
    const double C38837 = C38293 * C629;
    const double C38832 = C38293 * C628;
    const double C39173 = C38293 * C932;
    const double C39169 = C38293 * C924;
    const double C39861 = C38293 * C1519;
    const double C39858 = C38293 * C1516;
    const double C40171 = C38293 * C1832;
    const double C40168 = C38293 * C1837;
    const double C40164 = C38293 * C1829;
    const double C40805 = C38293 * C2424;
    const double C40802 = C38293 * C2421;
    const double C41128 = C38293 * C925;
    const double C41753 = C38293 * C1517;
    const double C42053 = C38293 * C1830;
    const double C42663 = C38293 * C2422;
    const double C72779 = C38293 * C1839;
    const double C72775 = C38293 * C1831;
    const double C72770 = C38293 * C1836;
    const double C72766 = C38293 * C1828;
    const double C73079 = C38293 * C2132;
    const double C73403 = C38293 * C2423;
    const double C73398 = C38293 * C2420;
    const double C75552 = C38293 * C4215;
    const double C75548 = C38293 * C4211;
    const double C76374 = C38293 * C4873;
    const double C78227 = C38293 * C6336;
    const double C81218 = C38293 * C8603;
    const double C83855 = C38293 * C10607;
    const double C83851 = C38293 * C10604;
    const double C84269 = C38293 * C10934;
    const double C13313 =
        (((0 - (C87311 * C87325) / C87281) * ae) / C87281 - (0 * be) / C87285) /
            (2 * C87281) +
        ((C87311 * (((C89236 - (C87311 * 2 * C87327) / C87281) * ae) / C87281 -
                    C87325 / C87285) +
          C38293) *
         ae) /
            C87281 +
        (0 * ae) / C87281 - C87327 / C87283;
    const double C87362 = C87314 * C87361;
    const double C54897 = C54885 * C1722;
    const double C54894 = C54885 * C1733;
    const double C54890 = C54885 * C1723;
    const double C55115 = C54885 * C2042;
    const double C55112 = C54885 * C2041;
    const double C55331 = C54885 * C2332;
    const double C55329 = C54885 * C1936;
    const double C55327 = C54885 * C2331;
    const double C55325 = C54885 * C1935;
    const double C57018 = C54885 * C2044;
    const double C71944 = C54885 * C8522;
    const double C71940 = C54885 * C8516;
    const double C71937 = C54885 * C4102;
    const double C71933 = C54885 * C4097;
    const double C72243 = C54885 * C4439;
    const double C72552 = C54885 * C8994;
    const double C72550 = C54885 * C8680;
    const double C72548 = C54885 * C4767;
    const double C72546 = C54885 * C4325;
    const double C75691 = C54885 * C6255;
    const double C723 = C707 - C708;
    const double C14516 = C14500 - C14501;
    const double C54907 = C54750 * C273;
    const double C54903 = C54750 * C267;
    const double C54900 = C54750 * C272;
    const double C54896 = C54750 * C266;
    const double C54891 = C54750 * C271;
    const double C54887 = C54750 * C265;
    const double C55117 = C54750 * C496;
    const double C55114 = C54750 * C495;
    const double C55109 = C54750 * C494;
    const double C55336 = C54750 * C702;
    const double C55324 = C54750 * C701;
    const double C55669 = C54750 * C1033;
    const double C55666 = C54750 * C1038;
    const double C55662 = C54750 * C1030;
    const double C55982 = C54750 * C1339;
    const double C55979 = C54750 * C1336;
    const double C56671 = C54750 * C1943;
    const double C56667 = C54750 * C1935;
    const double C57020 = C54750 * C2244;
    const double C57017 = C54750 * C2241;
    const double C57659 = C54750 * C1031;
    const double C57961 = C54750 * C1337;
    const double C58583 = C54750 * C1936;
    const double C58895 = C54750 * C2242;
    const double C71943 = C54750 * C1040;
    const double C71939 = C54750 * C1032;
    const double C71934 = C54750 * C1037;
    const double C71930 = C54750 * C1029;
    const double C72245 = C54750 * C1338;
    const double C72240 = C54750 * C1335;
    const double C72545 = C54750 * C1607;
    const double C75690 = C54750 * C4329;
    const double C75686 = C54750 * C4325;
    const double C76106 = C54750 * C4661;
    const double C77607 = C54750 * C5846;
    const double C77603 = C54750 * C5843;
    const double C77809 = C54750 * C6008;
    const double C78333 = C54750 * C6416;
    const double C81324 = C54750 * C8683;
    const double C81320 = C54750 * C8680;
    const double C25951 =
        (((0 - (C87314 * C87351) / C87281) * ae) / C87281 - (0 * be) / C87285) /
            (2 * C87281) +
        ((C87314 * (((C89247 - (C87314 * 2 * C87353) / C87281) * ae) / C87281 -
                    C87351 / C87285) +
          C54750) *
         ae) /
            C87281 +
        (0 * ae) / C87281 - C87353 / C87283;
    const double C119 = (2 * (C87402 * C87415 + C87405 * ae) +
                         C87402 * (C87415 + C87402 * C87434 + C87423 * ae) +
                         (C87405 + C87417 * C87406) * ae) /
                        C87281;
    const double C826 =
        (C87524 * (C87415 + C87402 * C87434 + C87423 * ae)) / C87281;
    const double C834 =
        (C87402 * C87415 + C87405 * ae + C87434 * C87656) / C87281;
    const double C1731 =
        (C87568 * (C87415 + C87402 * C87434 + C87423 * ae)) / C87281;
    const double C1739 =
        (C87402 * C87415 + C87405 * ae + C87434 * C87754) / C87281;
    const double C4104 = (C87568 * C87524 * C87434) / C87281;
    const double C5899 = (2 * (C87524 * C87618 + C87405 * ae) +
                          C87524 * (C87618 + C87524 * C88023 + C88020 * ae) +
                          (C87405 + C87417 * C87656) * ae) /
                         C87281;
    const double C6493 =
        (C87524 * C87618 + C87405 * ae + C88023 * C87754) / C87281;
    const double C8760 =
        (C87568 * (C87618 + C87524 * C88023 + C88020 * ae)) / C87281;
    const double C10878 = (2 * (C87568 * C87699 + C87405 * ae) +
                           C87568 * (C87699 + C87568 * C88146 + C88143 * ae) +
                           (C87405 + C87417 * C87754) * ae) /
                          C87281;
    const double C4666 = C89247 * C4662;
    const double C55981 = C54751 * C4662;
    const double C60008 = C54750 * C4662;
    const double C4878 = C89236 * C4874;
    const double C40804 = C38294 * C4874;
    const double C43887 = C38293 * C4874;
    const double C948 = C89236 * C927;
    const double C1242 = C180 * C927;
    const double C39176 = C38293 * C927;
    const double C39171 = C38294 * C927;
    const double C39516 = C38366 * C927;
    const double C1244 = C180 * C1139;
    const double C1349 = C263 * C1139;
    const double C39400 = C38297 * C1139;
    const double C39518 = C38366 * C1139;
    const double C1959 = C89247 * C1938;
    const double C2527 = C263 * C1938;
    const double C56674 = C54750 * C1938;
    const double C56669 = C54751 * C1938;
    const double C57337 = C54885 * C1938;
    const double C2434 = C180 * C2334;
    const double C2529 = C263 * C2334;
    const double C57128 = C38297 * C2334;
    const double C57339 = C54885 * C2334;
    const double C4220 = C89236 * C4212;
    const double C4550 = C180 * C4212;
    const double C40166 = C38294 * C4212;
    const double C40477 = C38366 * C4212;
    const double C43055 = C38293 * C4212;
    const double C4334 = C89247 * C4326;
    const double C4984 = C263 * C4326;
    const double C55664 = C54751 * C4326;
    const double C56282 = C54885 * C4326;
    const double C59606 = C54750 * C4326;
    const double C4552 = C180 * C4440;
    const double C4667 = C263 * C4440;
    const double C40479 = C38366 * C4440;
    const double C43333 = C38297 * C4440;
    const double C55980 = C54885 * C4440;
    const double C4879 = C180 * C4768;
    const double C4986 = C263 * C4768;
    const double C40803 = C38366 * C4768;
    const double C43751 = C38297 * C4768;
    const double C56284 = C54885 * C4768;
    const double C949 = C180 * C821;
    const double C1055 = C263 * C821;
    const double C1243 = C408 * C821;
    const double C1623 = C699 * C821;
    const double C39170 = C38366 * C821;
    const double C39396 = C38297 * C821;
    const double C1854 = C180 * C1726;
    const double C1960 = C263 * C1726;
    const double C2148 = C408 * C1726;
    const double C2528 = C699 * C1726;
    const double C56668 = C54885 * C1726;
    const double C56790 = C38297 * C1726;
    const double C4221 = C180 * C4098;
    const double C4335 = C263 * C4098;
    const double C4551 = C408 * C4098;
    const double C4985 = C699 * C4098;
    const double C40165 = C38366 * C4098;
    const double C43329 = C38297 * C4098;
    const double C55663 = C54885 * C4098;
    const double C13971 = C263 * C5726;
    const double C14513 = C699 * C5726;
    const double C39179 = C38366 * C5726;
    const double C45186 = C38297 * C5726;
    const double C16937 = C263 * C8515;
    const double C17583 = C699 * C8515;
    const double C43058 = C38366 * C8515;
    const double C48894 = C38297 * C8515;
    const double C55560 = C180 * C8515;
    const double C55672 = C54885 * C8515;
    const double C55874 = C408 * C8515;
    const double C27141 = C180 * C10543;
    const double C27433 = C408 * C10543;
    const double C56677 = C54885 * C10543;
    const double C67759 = C38297 * C10543;
    const double C118 = (2 * (C87402 * C87414 + C87405 * be) +
                         C87402 * (C87414 + C87402 * C87433 + C87423 * be) +
                         (C87405 + C87417 * C87406) * be) /
                        C87281;
    const double C825 =
        (C87524 * (C87414 + C87402 * C87433 + C87423 * be)) / C87281;
    const double C833 =
        (C87402 * C87414 + C87405 * be + C87433 * C87656) / C87281;
    const double C1730 =
        (C87568 * (C87414 + C87402 * C87433 + C87423 * be)) / C87281;
    const double C1738 =
        (C87402 * C87414 + C87405 * be + C87433 * C87754) / C87281;
    const double C4103 = (C87568 * C87524 * C87433) / C87281;
    const double C6807 =
        (be * C87699 + C87524 * C87742 + ae * C87568 * C88022 +
         C87568 * (ae * C88022 + C87568 * (C87707 + C87524 * C87745))) /
        C87283;
    const double C9074 = (ae * (C87531 + C87524 * C88022 + C88020 * be) +
                          C87568 * (C87742 + be * C88077 +
                                    C87524 * (C87707 + C87524 * C87745))) /
                         C87283;
    const double C5787 = (2 * (C87524 * C87531 + C87405 * be) +
                          C87524 * (C87531 + C87524 * C88022 + C88020 * be) +
                          (C87405 + C87417 * C87656) * be) /
                         C87281;
    const double C6333 =
        (C87524 * C87531 + C87405 * be + C88022 * C87754) / C87281;
    const double C8600 =
        (C87568 * (C87531 + C87524 * C88022 + C88020 * be)) / C87281;
    const double C10660 = (2 * (C87568 * C87575 + C87405 * be) +
                           C87568 * (C87575 + C87568 * C88145 + C88143 * be) +
                           (C87405 + C87417 * C87754) * be) /
                          C87281;
    const double C19254 = C89247 * C6650;
    const double C76108 = C54751 * C6650;
    const double C78647 = C54750 * C6650;
    const double C127 =
        (2 * (ae * C87414 + be * C87415 + C87402 * C87432) +
         ae * (C87414 + C87402 * C87433 + C87423 * be) +
         be * (C87415 + C87402 * C87434 + C87423 * ae) +
         C87402 * (C87432 + ae * C87433 + be * C87434 +
                   C87402 * (ae * C87427 + be * C87428 +
                             C87402 *
                                 (C87418 * C87419 +
                                  C87406 * bs[5] * std::pow(C87408, 5)) *
                                 C87282))) /
        C87283;
    const double C842 = (ae * C87524 * C87414 + be * C87524 * C87415 +
                         C87402 * C87524 * C87432) /
                        C87283;
    const double C844 =
        ((C87405 + C87406 * C87407 * C87411) * C87282 + C87432 * C87656) /
        C87283;
    const double C1747 = (ae * C87568 * C87414 + be * C87568 * C87415 +
                          C87402 * C87568 * C87432) /
                         C87283;
    const double C1749 =
        ((C87405 + C87406 * C87407 * C87411) * C87282 + C87432 * C87754) /
        C87283;
    const double C4109 = (C87568 * C87524 * C87432) / C87283;
    const double C412 =
        (2 * C87402 * C87661 +
         C87402 *
             (C87661 + (C87438 + C87656 * C87439 * C87440) * C87282 * C87406)) /
        C87283;
    const double C1226 = (ae * C87402 * C87531 + be * C87402 * C87618 +
                          C87524 * C87402 * C87661) /
                         C87283;
    const double C1228 =
        ((C87405 + C87656 * C87407 * C87411) * C87282 +
         ae * (C87524 * C87531 + C87405 * be) +
         be * (C87524 * C87618 + C87405 * ae) +
         C87524 * (ae * C87531 + be * C87618 + C87524 * C87661)) /
        C87283;
    const double C2131 = (C87568 * C87402 * C87661) / C87283;
    const double C2133 =
        ((C87405 + C87656 * C87407 * C87411) * C87282 + C87661 * C87754) /
        C87283;
    const double C4545 = (ae * C87568 * C87531 + be * C87568 * C87618 +
                          C87524 * C87568 * C87661) /
                         C87283;
    const double C703 =
        (2 * C87402 * C87759 +
         C87402 *
             (C87759 + (C87438 + C87754 * C87439 * C87440) * C87282 * C87406)) /
        C87283;
    const double C1606 = (C87524 * C87402 * C87759) / C87283;
    const double C1608 =
        ((C87405 + C87754 * C87407 * C87411) * C87282 + C87759 * C87656) /
        C87283;
    const double C2511 = (ae * C87402 * C87575 + be * C87402 * C87699 +
                          C87568 * C87402 * C87759) /
                         C87283;
    const double C2513 =
        ((C87405 + C87754 * C87407 * C87411) * C87282 +
         ae * (C87568 * C87575 + C87405 * be) +
         be * (C87568 * C87699 + C87405 * ae) +
         C87568 * (ae * C87575 + be * C87699 + C87568 * C87759)) /
        C87283;
    const double C4979 = (ae * C87524 * C87575 + be * C87524 * C87699 +
                          C87568 * C87524 * C87759) /
                         C87283;
    const double C17261 = C89247 * C8917;
    const double C72247 = C54751 * C8917;
    const double C81638 = C54750 * C8917;
    const double C19012 = C89247 * C6413;
    const double C19488 = C263 * C6413;
    const double C75688 = C54751 * C6413;
    const double C76507 = C54885 * C6413;
    const double C78329 = C54750 * C6413;
    const double C19490 = C263 * C6727;
    const double C29993 = C180 * C6727;
    const double C73404 = C38366 * C6727;
    const double C76509 = C54885 * C6727;
    const double C19013 = C263 * C6249;
    const double C19489 = C699 * C6249;
    const double C29355 = C180 * C6249;
    const double C29671 = C408 * C6249;
    const double C72776 = C38366 * C6249;
    const double C75687 = C54885 * C6249;
    const double C31376 = C180 * C23153;
    const double C31619 = C408 * C23153;
    const double C78332 = C54885 * C23153;
    const double C83854 = C38366 * C23153;
    const double C211 = C200 - C201;
    const double C210 = C198 - C199;
    const double C433 = C420 - C421;
    const double C212 = C202 - C203;
    const double C434 = C424 - C425;
    const double C1251 = C1238 - C1239;
    const double C2710 = C944 - C945;
    const double C1250 = C1234 - C1235;
    const double C56564 = C1845 - C1846;
    const double C56562 = C1846 - C1845;
    const double C2156 = C2143 - C2144;
    const double C3433 = C1849 - C1850;
    const double C58483 = C1850 - C1849;
    const double C2155 = C2139 - C2140;
    const double C27144 = C27130 - C27131;
    const double C27437 = C27422 - C27423;
    const double C29679 = C29666 - C29667;
    const double C35620 = C27134 - C27135;
    const double C27438 = C27426 - C27427;
    const double C294 = C283 - C284;
    const double C293 = C281 - C282;
    const double C724 = C711 - C712;
    const double C295 = C285 - C286;
    const double C725 = C715 - C716;
    const double C39284 = C1046 - C1047;
    const double C39282 = C1047 - C1046;
    const double C1631 = C1618 - C1619;
    const double C2792 = C1050 - C1051;
    const double C41234 = C1051 - C1050;
    const double C1630 = C1614 - C1615;
    const double C13974 = C13960 - C13961;
    const double C14517 = C14504 - C14505;
    const double C2536 = C2523 - C2524;
    const double C3515 = C1955 - C1956;
    const double C2535 = C2519 - C2520;
    const double C17587 = C17578 - C17579;
    const double C18427 = C13964 - C13965;
    const double C14518 = C14508 - C14509;
    const double C21288 = C16932 - C16933;
    const double C17586 = C17574 - C17575;
    const double C510 = C503 - C504;
    const double C644 = C637 - C638;
    const double C87463 = C87402 * C87460;
    const double C87479 = 2 * C87460;
    const double C87471 = be * C87460;
    const double C88048 = C87524 * C87460;
    const double C88466 = C87568 * C87460;
    const double C5731 =
        (2 * C87524 * C87434 + C87524 * (C87434 + C87460 * C87656)) / C87281;
    const double C8520 = (C87568 * (C87434 + C87460 * C87656)) / C87281;
    const double C10548 =
        (2 * C87568 * C87434 + C87568 * (C87434 + C87460 * C87754)) / C87281;
    const double C88287 = C87542 + C87927;
    const double C23266 =
        (2 * (be * C88046 + C87568 * C88429) + be * (C88046 + C87924 * C87754) +
         C87568 * (C88429 + be * C87568 * C87924 +
                   C87568 * (C87927 + C87568 * C87524 * C87598))) /
        C87283;
    const double C31378 = C180 * C23157;
    const double C78336 = C54885 * C23157;
    const double C83858 = C38366 * C23157;
    const double C88622 = C87586 + C87944;
    const double C14763 =
        (C87579 + C87586 * C87656 + be * C87568 * C88153 +
         C87568 * (be * C88153 + C87568 * (C87586 + C87598 * C87656))) /
        C87283;
    const double C16925 =
        (be * (2 * C88046 + C87524 * C88153) +
         C87568 * (2 * C87524 * C87586 + C87524 * (C87586 + C87598 * C87656))) /
        C87283;
    const double C13746 = (3 * (C87415 + C87428 * C87656) +
                           C87524 * (2 * C88046 + C87524 * C88153)) /
                          C87281;
    const double C14604 = (C87415 + C87428 * C87656 + C88153 * C87754) / C87281;
    const double C16686 = (C87568 * (2 * C88046 + C87524 * C88153)) / C87281;
    const double C23155 =
        (2 * C87568 * C88153 + C87568 * (C88153 + C88292 * C87754)) / C87281;
    const double C27000 = (3 * (C87415 + C87428 * C87754) +
                           C87568 * (2 * C88460 + C87568 * C88464)) /
                          C87281;
    const double C87462 = C87402 * C87459;
    const double C87477 = 2 * C87459;
    const double C87470 = ae * C87459;
    const double C88063 = C87524 * C87459;
    const double C88490 = C87568 * C87459;
    const double C5730 =
        (2 * C87524 * C87433 + C87524 * (C87433 + C87459 * C87656)) / C87281;
    const double C8519 = (C87568 * (C87433 + C87459 * C87656)) / C87281;
    const double C10547 =
        (2 * C87568 * C87433 + C87568 * (C87433 + C87459 * C87754)) / C87281;
    const double C87929 = C87926 + C87927;
    const double C88301 = C87629 + C87926;
    const double C23478 =
        (2 * (ae * C88061 + C87568 * C88438) + ae * (C88061 + C87923 * C87754) +
         C87568 * (C88438 + ae * C87568 * C87923 +
                   C87568 * (C87926 + C87568 * C87524 * C87722))) /
        C87283;
    const double C19102 = C89093 * C14841;
    const double C31536 = C89093 * C23156;
    const double C87946 = C87943 + C87944;
    const double C88639 = C87710 + C87943;
    const double C15071 =
        (C87703 + C87710 * C87656 + ae * C87568 * C88165 +
         C87568 * (ae * C88165 + C87568 * (C87710 + C87722 * C87656))) /
        C87283;
    const double C17039 =
        (2 * (ae * C87568 * C87427 + C87524 * C88266) + ae * C87568 * C88165 +
         C87524 * (C88266 + ae * C87568 * C87923 +
                   C87524 * (C87943 + C87524 * C87568 * C87641))) /
        C87283;
    const double C17363 =
        (ae * (2 * C88061 + C87524 * C88165) +
         C87568 * (2 * C87524 * C87710 + C87524 * (C87710 + C87722 * C87656))) /
        C87283;
    const double C13745 = (3 * (C87414 + C87427 * C87656) +
                           C87524 * (2 * C88061 + C87524 * C88165)) /
                          C87281;
    const double C14603 = (C87414 + C87427 * C87656 + C88165 * C87754) / C87281;
    const double C16685 = (C87568 * (2 * C88061 + C87524 * C88165)) / C87281;
    const double C23154 =
        (2 * C87568 * C88165 + C87568 * (C88165 + C88306 * C87754)) / C87281;
    const double C26999 = (3 * (C87414 + C87427 * C87754) +
                           C87568 * (2 * C88484 + C87568 * C88488)) /
                          C87281;
    const double C87461 = C87402 * C87458;
    const double C87779 = C87524 * C87458;
    const double C87854 = C87568 * C87458;
    const double C841 =
        (C87524 * C87432 + ae * C87524 * C87433 + be * C87524 * C87434 +
         C87402 * (ae * C87524 * C87427 + be * C87524 * C87428 +
                   C87402 * C87524 * C87458)) /
        C87283;
    const double C845 =
        (ae * (C87414 + C87427 * C87656) + be * (C87415 + C87428 * C87656) +
         C87402 * (C87432 + C87458 * C87656)) /
        C87283;
    const double C1746 =
        (C87568 * C87432 + ae * C87568 * C87433 + be * C87568 * C87434 +
         C87402 * (ae * C87568 * C87427 + be * C87568 * C87428 +
                   C87402 * C87568 * C87458)) /
        C87283;
    const double C1750 =
        (ae * (C87414 + C87427 * C87754) + be * (C87415 + C87428 * C87754) +
         C87402 * (C87432 + C87458 * C87754)) /
        C87283;
    const double C5736 =
        (2 * C87524 * C87432 + C87524 * (C87432 + C87458 * C87656)) / C87283;
    const double C8525 = (C87568 * (C87432 + C87458 * C87656)) / C87283;
    const double C10553 =
        (2 * C87568 * C87432 + C87568 * (C87432 + C87458 * C87754)) / C87283;
    const double C87508 = C87402 * C87505;
    const double C88156 = C87505 * C87656;
    const double C88468 = C87505 * C87754;
    const double C88547 = C87524 * C87505;
    const double C88335 = C87524 * C88328;
    const double C88683 = C87568 * C88679;
    const double C87501 = C87493 * ae;
    const double C87499 = C87402 * C87493;
    const double C87498 = C87493 * be;
    const double C88007 = C87524 * C87493;
    const double C88131 = C87568 * C87493;
    const double C5725 =
        2 * C87524 * C87452 + C87524 * (C87452 + C87493 * C87656);
    const double C8514 = C87568 * (C87452 + C87493 * C87656);
    const double C10542 =
        2 * C87568 * C87452 + C87568 * (C87452 + C87493 * C87754);
    const double C88205 = C88201 + C87495;
    const double C88535 = C88530 + C87495;
    const double C88204 = C88198 + C87492;
    const double C88532 = C88527 + C87492;
    const double C88200 = C87445 + C88195;
    const double C88202 = C88194 * ae;
    const double C88199 = C88194 * be;
    const double C88558 = C87568 * C88194;
    const double C29239 =
        2 * C87568 * C88014 + C87568 * (C88014 + C88194 * C87754);
    const double C88534 = C87445 + C88529;
    const double C88536 = C88528 * ae;
    const double C88533 = C88528 * be;
    const double C87507 = C87402 * C87503;
    const double C88168 = C87503 * C87656;
    const double C88492 = C87503 * C87754;
    const double C88553 = C87524 * C87503;
    const double C88332 = C87524 * C88325;
    const double C88592 = C88325 * C87754;
    const double C88682 = C87568 * C88676;
    const double C87506 = C87402 * C87502;
    const double C87781 = C87502 * C87656;
    const double C87856 = C87502 * C87754;
    const double C87925 = C87524 * C87502;
    const double C87942 = C87568 * C87502;
    const double C846 =
        (C87432 + C87458 * C87656 + ae * (C87433 + C87459 * C87656) +
         be * (C87434 + C87460 * C87656) +
         C87402 * (ae * (C87427 + C87450 * C87656) +
                   be * (C87428 + C87453 * C87656) +
                   C87402 * (C87458 + C87502 * C87656))) /
        C87283;
    const double C1751 =
        (C87432 + C87458 * C87754 + ae * (C87433 + C87459 * C87754) +
         be * (C87434 + C87460 * C87754) +
         C87402 * (ae * (C87427 + C87450 * C87754) +
                   be * (C87428 + C87453 * C87754) +
                   C87402 * (C87458 + C87502 * C87754))) /
        C87283;
    const double C87672 = C87671 * C87406;
    const double C88192 = C87402 * C87671;
    const double C88315 = C87524 * C87671;
    const double C88388 = C87671 * C87754;
    const double C88410 = C87568 * C87671;
    const double C87770 = C87769 * C87406;
    const double C88240 = C87402 * C87769;
    const double C88379 = C87769 * C87656;
    const double C88597 = C87524 * C87769;
    const double C88664 = C87568 * C87769;
    const double C88336 = C88327 * ae;
    const double C88334 = C87524 * C88327;
    const double C88333 = C88327 * be;
    const double C88444 = C87568 * C88327;
    const double C23152 =
        2 * C87568 * C88181 + C87568 * (C88181 + C88327 * C87754);
    const double C88610 = C88606 + C88329;
    const double C88609 = C88603 + C88326;
    const double C88605 = C88175 + C88600;
    const double C88607 = C88599 * ae;
    const double C88604 = C88599 * be;
    const double C88673 = C88579 * ae;
    const double C88670 = C87568 * C88579;
    const double C88668 = C88579 * be;
    const double C185 = (3 * (C87531 + C87536 * C87406) +
                         C87402 * (2 * C87538 + C87402 * C87547)) /
                        C87281;
    const double C928 =
        (C87531 + C87536 * C87406 + C87524 * (C87524 * C87547 + C87452 * be) +
         C87524 * C87452 * be) /
        C87281;
    const double C929 = (C87524 * (2 * C87538 + C87402 * C87547) +
                         (2 * C87423 + C87402 * C87452) * be) /
                        C87281;
    const double C1833 = (C87531 + C87536 * C87406 + C87547 * C87754) / C87281;
    const double C1834 = (C87568 * (2 * C87538 + C87402 * C87547)) / C87281;
    const double C4213 = (C87568 * (C87524 * C87547 + C87452 * be)) / C87281;
    const double C10606 =
        (2 * C87568 * C87547 + C87568 * (C87547 + C87561 * C87754)) / C87281;
    const double C87557 = C87542 + C87553;
    const double C10935 =
        (2 * (ae * C87538 + C87568 * C88033) + ae * (C87538 + C87549 * C87754) +
         C87568 * (C88033 + ae * C87568 * C87549 +
                   C87568 * (C87553 + C87568 * C87402 * C87748))) /
        C87283;
    const double C88016 = C88013 + C87451;
    const double C27140 = C89236 * C10605;
    const double C27432 = C180 * C10605;
    const double C88184 = C87524 * C88179;
    const double C88316 = 2 * C88179;
    const double C88312 = ae * C88179;
    const double C88590 = C87568 * C88179;
    const double C23210 =
        (2 * C87568 * C88022 + C87568 * (C88022 + C88179 * C87754)) / C87281;
    const double C88650 = C87745 + C88411;
    const double C27121 = (3 * (C87531 + C87536 * C87754) +
                           C87568 * (2 * C88496 + C87568 * C88500)) /
                          C87281;
    const double C268 = (3 * (C87575 + C87580 * C87406) +
                         C87402 * (2 * C87582 + C87402 * C87591)) /
                        C87281;
    const double C1034 = (C87575 + C87580 * C87406 + C87591 * C87656) / C87281;
    const double C1035 = (C87524 * (2 * C87582 + C87402 * C87591)) / C87281;
    const double C1939 =
        (C87575 + C87580 * C87406 + C87568 * (C87568 * C87591 + C87452 * be) +
         C87568 * C87452 * be) /
        C87281;
    const double C1940 = (C87568 * (2 * C87582 + C87402 * C87591) +
                          (2 * C87423 + C87402 * C87452) * be) /
                         C87281;
    const double C4327 =
        (C87568 * C87524 * C87591 + C87524 * C87452 * be) / C87281;
    const double C5845 =
        (2 * C87524 * C87591 + C87524 * (C87591 + C87605 * C87656)) / C87281;
    const double C8682 = (C87568 * (C87591 + C87605 * C87656) +
                          (C87452 + C87493 * C87656) * be) /
                         C87281;
    const double C87601 = C87586 + C87597;
    const double C6009 =
        (2 * (ae * C87582 + C87524 * C88026) + ae * (C87582 + C87593 * C87656) +
         C87524 * (C88026 + ae * C87524 * C87593 +
                   C87524 * (C87597 + C87524 * C87402 * C87688))) /
        C87283;
    const double C6414 =
        (C87524 * C87582 + C87568 * (C87568 * C88073 + C88014 * be) +
         C87568 * C88014 * be) /
        C87281;
    const double C88139 = C88136 + C87451;
    const double C13970 = C89247 * C5844;
    const double C14512 = C263 * C5844;
    const double C16936 = C89247 * C8681;
    const double C17582 = C263 * C8681;
    const double C55671 = C54751 * C8681;
    const double C56294 = C54885 * C8681;
    const double C13951 = (3 * (C87575 + C87580 * C87656) +
                           C87524 * (2 * C88076 + C87524 * C88216)) /
                          C87281;
    const double C14761 =
        (C87575 + C87580 * C87656 + C87568 * (C87568 * C88216 + C88181 * be) +
         C87568 * C88181 * be) /
        C87281;
    const double C16923 = (C87568 * (2 * C88076 + C87524 * C88216) +
                           (2 * C88020 + C87524 * C88181) * be) /
                          C87281;
    const double C88357 = C87685 + C88353;
    const double C88453 = C88450 + C88180;
    const double C88419 = ae * C88418;
    const double C88510 = C87568 * C88418;
    const double C88665 = 2 * C88418;
    const double C350 = (3 * (C87618 + C87623 * C87406) +
                         C87402 * (2 * C87625 + C87402 * C87634)) /
                        C87281;
    const double C1140 =
        (C87618 + C87623 * C87406 + C87524 * (C87524 * C87634 + C87452 * ae) +
         C87524 * C87452 * ae) /
        C87281;
    const double C1141 = (C87524 * (2 * C87625 + C87402 * C87634) +
                          (2 * C87423 + C87402 * C87452) * ae) /
                         C87281;
    const double C2045 = (C87618 + C87623 * C87406 + C87634 * C87754) / C87281;
    const double C2046 = (C87568 * (2 * C87625 + C87402 * C87634)) / C87281;
    const double C4441 = (C87568 * (C87524 * C87634 + C87452 * ae)) / C87281;
    const double C10718 =
        (2 * C87568 * C87634 + C87568 * (C87634 + C87648 * C87754)) / C87281;
    const double C87644 = C87629 + C87640;
    const double C88191 = C87553 + C87640;
    const double C6651 =
        (ae * (C87582 + C87568 * (C87568 * C87593 + C87451) +
               C87568 * C87445 * be) +
         C87524 * (C88026 + be * C87568 * C87636 +
                   C87568 * (C87640 + C87568 * C87402 * C87688))) /
        C87283;
    const double C8918 =
        (be * C87625 + C87568 * C88026 + ae * (C87568 * C88073 + C88014 * be) +
         C87524 * (ae * (C87568 * C87593 + C87451) +
                   C87524 * (C87640 + C87568 * C87402 * C87688))) /
        C87283;
    const double C10826 =
        (2 * (be * C87625 + C87568 * C88026) + be * (C87625 + C87636 * C87754) +
         C87568 * (C88026 + be * C87568 * C87636 +
                   C87568 * (C87640 + C87568 * C87402 * C87688))) /
        C87283;
    const double C88017 = C88015 + C87454;
    const double C27434 = C180 * C10717;
    const double C57023 = C54885 * C10717;
    const double C67763 = C38297 * C10717;
    const double C88185 = C87524 * C88182;
    const double C88321 = 2 * C88182;
    const double C88313 = be * C88182;
    const double C23318 =
        (2 * C87568 * C88023 + C87568 * (C88023 + C88182 * C87754)) / C87281;
    const double C31531 =
        (3 * (C88023 + C88182 * C87754) +
         C87568 * (2 * C87568 * C88182 + C87568 * (C88182 + C88328 * C87754))) /
        C87281;
    const double C88395 = C87685 + C88393;
    const double C88413 = C88411 + C88393;
    const double C27303 = (3 * (C87618 + C87623 * C87754) +
                           C87568 * (2 * C88476 + C87568 * C88478)) /
                          C87281;
    const double C88012 = C87402 * C87666;
    const double C88173 = C87524 * C87666;
    const double C88270 = C87568 * C87666;
    const double C413 =
        (3 * (C87661 + C87666 * C87406) +
         C87402 * (2 * C87402 * C87666 +
                   C87402 * (C87666 + (C87474 + C87656 * C87475 * C87476) *
                                          C87282 * C87406))) /
        C87283;
    const double C1225 =
        (ae * (C87531 + C87536 * C87406) + be * (C87618 + C87623 * C87406) +
         C87524 * (C87661 + C87666 * C87406)) /
        C87283;
    const double C1229 =
        (C87402 * C87661 + ae * (C87524 * C87538 + C87423 * be) +
         be * (C87524 * C87625 + C87423 * ae) +
         C87524 * (ae * C87538 + be * C87625 + C87524 * C87402 * C87666)) /
        C87283;
    const double C2130 = (C87568 * (C87661 + C87666 * C87406)) / C87283;
    const double C2134 = (C87402 * C87661 + C87402 * C87666 * C87754) / C87283;
    const double C4546 = (ae * C87568 * C87538 + be * C87568 * C87625 +
                          C87524 * C87568 * C87402 * C87666) /
                         C87283;
    const double C5957 =
        (2 * (ae * C87531 + be * C87618 + C87524 * C87661) +
         ae * (C87531 + C87524 * C88022 + C88020 * be) +
         be * (C87618 + C87524 * C88023 + C88020 * ae) +
         C87524 * (C87661 + ae * C88022 + be * C88023 +
                   C87524 * (C87539 + C87626 + C87524 * C87666))) /
        C87283;
    const double C6575 =
        (ae * (C87531 + C87536 * C87754) + be * (C87618 + C87623 * C87754) +
         C87524 * (C87661 + C87666 * C87754)) /
        C87283;
    const double C8842 =
        (C87568 * C87661 + ae * C87568 * C88022 + be * C87568 * C88023 +
         C87524 * (ae * C87568 * C87536 + be * C87568 * C87623 +
                   C87524 * C87568 * C87666)) /
        C87283;
    const double C10774 =
        (2 * C87568 * C87661 + C87568 * (C87661 + C87666 * C87754)) / C87283;
    const double C14917 =
        (C87661 + C87666 * C87754 + ae * (C88022 + C88179 * C87754) +
         be * (C88023 + C88182 * C87754) +
         C87524 * (ae * (C87536 + C87543 * C87754) +
                   be * (C87623 + C87630 * C87754) +
                   C87524 * (C87666 + C87671 * C87754))) /
        C87283;
    const double C569 = (3 * (C87699 + C87704 * C87406) +
                         C87402 * (2 * C87706 + C87402 * C87715)) /
                        C87281;
    const double C1430 = (C87699 + C87704 * C87406 + C87715 * C87656) / C87281;
    const double C1431 = (C87524 * (2 * C87706 + C87402 * C87715)) / C87281;
    const double C2335 =
        (C87699 + C87704 * C87406 + C87568 * (C87568 * C87715 + C87452 * ae) +
         C87568 * C87452 * ae) /
        C87281;
    const double C2336 = (C87568 * (2 * C87706 + C87402 * C87715) +
                          (2 * C87423 + C87402 * C87452) * ae) /
                         C87281;
    const double C4769 =
        (C87568 * C87524 * C87715 + C87524 * C87452 * ae) / C87281;
    const double C6063 =
        (2 * C87524 * C87715 + C87524 * (C87715 + C87729 * C87656)) / C87281;
    const double C8996 = (C87568 * (C87715 + C87729 * C87656) +
                          (C87452 + C87493 * C87656) * ae) /
                         C87281;
    const double C87725 = C87710 + C87721;
    const double C88525 = C87597 + C87721;
    const double C6118 =
        (2 * (be * C87706 + C87524 * C88033) + be * (C87706 + C87717 * C87656) +
         C87524 * (C88033 + be * C87524 * C87717 +
                   C87524 * (C87721 + C87524 * C87402 * C87748))) /
        C87283;
    const double C6728 =
        (C87524 * C87706 + C87568 * (C87568 * C88074 + C88014 * ae) +
         C87568 * C88014 * ae) /
        C87281;
    const double C88140 = C88138 + C87454;
    const double C14514 = C263 * C6062;
    const double C39864 = C38366 * C6062;
    const double C45392 = C38297 * C6062;
    const double C17584 = C263 * C8995;
    const double C43890 = C38366 * C8995;
    const double C49196 = C38297 * C8995;
    const double C56183 = C180 * C8995;
    const double C56296 = C54885 * C8995;
    const double C14323 = (3 * (C87699 + C87704 * C87656) +
                           C87524 * (2 * C88077 + C87524 * C88230)) /
                          C87281;
    const double C15069 =
        (C87699 + C87704 * C87656 + C87568 * (C87568 * C88230 + C88181 * ae) +
         C87568 * C88181 * ae) /
        C87281;
    const double C17361 = (C87568 * (2 * C88077 + C87524 * C88230) +
                           (2 * C88020 + C87524 * C88181) * ae) /
                          C87281;
    const double C88373 = C87745 + C88369;
    const double C88596 = C88353 + C88369;
    const double C88454 = C88452 + C88183;
    const double C88521 = C87568 * C88518;
    const double C88671 = 2 * C88518;
    const double C88662 = be * C88518;
    const double C88037 = C87402 * C87764;
    const double C88449 = C87524 * C87764;
    const double C88509 = C87568 * C87764;
    const double C704 =
        (3 * (C87759 + C87764 * C87406) +
         C87402 * (2 * C87402 * C87764 +
                   C87402 * (C87764 + (C87474 + C87754 * C87475 * C87476) *
                                          C87282 * C87406))) /
        C87283;
    const double C1605 = (C87524 * (C87759 + C87764 * C87406)) / C87283;
    const double C1609 = (C87402 * C87759 + C87402 * C87764 * C87656) / C87283;
    const double C2510 =
        (ae * (C87575 + C87580 * C87406) + be * (C87699 + C87704 * C87406) +
         C87568 * (C87759 + C87764 * C87406)) /
        C87283;
    const double C2514 =
        (C87402 * C87759 + ae * (C87568 * C87582 + C87423 * be) +
         be * (C87568 * C87706 + C87423 * ae) +
         C87568 * (ae * C87582 + be * C87706 + C87568 * C87402 * C87764)) /
        C87283;
    const double C4980 = (ae * C87524 * C87582 + be * C87524 * C87706 +
                          C87568 * C87524 * C87402 * C87764) /
                         C87283;
    const double C6172 =
        (2 * C87524 * C87759 + C87524 * (C87759 + C87764 * C87656)) / C87283;
    const double C6886 =
        (C87524 * C87759 + ae * (C87568 * C88076 + C88020 * be) +
         be * (C87568 * C88077 + C88020 * ae) +
         C87568 * (ae * C88076 + be * C88077 + C87568 * C87524 * C87764)) /
        C87283;
    const double C9153 =
        (ae * (C87575 + C87580 * C87656) + be * (C87699 + C87704 * C87656) +
         C87568 * (C87759 + C87764 * C87656)) /
        C87283;
    const double C10989 =
        (2 * (ae * C87575 + be * C87699 + C87568 * C87759) +
         ae * (C87575 + C87568 * C88145 + C88143 * be) +
         be * (C87699 + C87568 * C88146 + C88143 * ae) +
         C87568 * (C87759 + ae * C88145 + be * C88146 +
                   C87568 * (C87583 + C87707 + C87568 * C87764))) /
        C87283;
    const double C14497 =
        (3 * (C87759 + C87764 * C87656) +
         C87524 * (2 * C87524 * C87764 + C87524 * (C87764 + C87769 * C87656))) /
        C87283;
    const double C15223 =
        (C87759 + C87764 * C87656 + ae * (C87568 * C88216 + C88181 * be) +
         be * (C87568 * C88230 + C88181 * ae) +
         C87568 * (ae * C88216 + be * C88230 +
                   C87568 * (C87764 + C87769 * C87656))) /
        C87283;
    const double C17571 =
        (ae * (2 * C88076 + C87524 * C88216) +
         be * (2 * C88077 + C87524 * C88230) +
         C87568 * (2 * C87524 * C87764 + C87524 * (C87764 + C87769 * C87656))) /
        C87283;
    const double C207 = C180 * C110;
    const double C290 = C263 * C110;
    const double C429 = C408 * C110;
    const double C720 = C699 * C110;
    const double C953 = C180 * C822;
    const double C1059 = C263 * C822;
    const double C1247 = C408 * C822;
    const double C1627 = C699 * C822;
    const double C39413 = C38297 * C822;
    const double C41131 = C38366 * C822;
    const double C2713 = C180 * C823;
    const double C2795 = C263 * C823;
    const double C2950 = C408 * C823;
    const double C3270 = C699 * C823;
    const double C38387 = C38366 * C823;
    const double C41337 = C38297 * C823;
    const double C1858 = C180 * C1727;
    const double C1964 = C263 * C1727;
    const double C2152 = C408 * C1727;
    const double C2532 = C699 * C1727;
    const double C56807 = C38297 * C1727;
    const double C58586 = C54885 * C1727;
    const double C3436 = C180 * C1728;
    const double C3518 = C263 * C1728;
    const double C3673 = C408 * C1728;
    const double C3993 = C699 * C1728;
    const double C54906 = C54885 * C1728;
    const double C58692 = C38297 * C1728;
    const double C4225 = C180 * C4099;
    const double C4339 = C263 * C4099;
    const double C4555 = C408 * C4099;
    const double C4989 = C699 * C4099;
    const double C42056 = C38366 * C4099;
    const double C43338 = C38297 * C4099;
    const double C57662 = C54885 * C4099;
    const double C29360 = C180 * C6248;
    const double C29676 = C408 * C6248;
    const double C40174 = C38366 * C6248;
    const double C40278 = C263 * C6248;
    const double C40911 = C699 * C6248;
    const double C45934 = C38297 * C6248;
    const double C59609 = C54885 * C6248;
    const double C18430 = C263 * C13743;
    const double C18760 = C699 * C13743;
    const double C19017 = C263 * C14601;
    const double C19493 = C699 * C14601;
    const double C33634 = C180 * C14601;
    const double C33864 = C408 * C14601;
    const double C78226 = C38366 * C14601;
    const double C81323 = C54885 * C14601;
    const double C21291 = C263 * C16683;
    const double C21765 = C699 * C16683;
    const double C77606 = C54885 * C16683;
    const double C81217 = C38366 * C16683;
    const double C19256 = C89247 * C14993;
    const double C81640 = C54751 * C14993;
    const double C35623 = C180 * C26997;
    const double C35794 = C408 * C26997;
    const double C88296 = C88289 + C88294;
    const double C31287 = (3 * (C88046 + C87924 * C87754) +
                           C87568 * (2 * C88567 + C87568 * C88573)) /
                          C87281;
    const double C88631 = C88624 + C88629;
    const double C88310 = C88303 + C88308;
    const double C31286 = (3 * (C88061 + C87923 * C87754) +
                           C87568 * (2 * C88582 + C87568 * C88588)) /
                          C87281;
    const double C88648 = C88641 + C88646;
    const double C87565 = C87555 + C87563;
    const double C27122 = (3 * (C87538 + C87549 * C87754) +
                           C87568 * (2 * C88502 + C87568 * C88506)) /
                          C87281;
    const double C88659 = C88652 + C88657;
    const double C87609 = C87599 + C87607;
    const double C13952 = (3 * (C87582 + C87593 * C87656) +
                           C87524 * (2 * C88073 + C87524 * C88223)) /
                          C87281;
    const double C88361 = C88355 + C88359;
    const double C87652 = C87642 + C87650;
    const double C27304 = (3 * (C87625 + C87636 * C87754) +
                           C87568 * (2 * C88480 + C87568 * C88482)) /
                          C87281;
    const double C88637 = C88635 + C88636;
    const double C87733 = C87723 + C87731;
    const double C14324 = (3 * (C87706 + C87717 * C87656) +
                           C87524 * (2 * C88074 + C87524 * C88237)) /
                          C87281;
    const double C88377 = C88371 + C88375;
    const double C56565 = C1847 - C1848;
    const double C56563 = C1848 - C1847;
    const double C27145 = C27132 - C27133;
    const double C191 =
        (3 * (C87535 + ae * C87538 + C87402 * C87546) +
         ae * (2 * C87538 + C87402 * C87547) +
         C87402 * (2 * C87546 + ae * C87547 +
                   C87402 * (C87542 + ae * C87402 * C87543 +
                             C87402 * (ae * C87543 +
                                       C87402 * C87476 * C87475 * C87530)))) /
        C87283;
    const double C933 = (be * (C87415 + C87402 * C87434 + C87423 * ae) +
                         C87524 * (C87535 + ae * C87538 + C87402 * C87546)) /
                        C87283;
    const double C935 = (ae * C87531 + C87402 * C87535 + be * C87524 * C87434 +
                         C87524 * (be * C87434 + C87524 * C87546)) /
                        C87283;
    const double C1838 =
        (C87568 * (C87535 + ae * C87538 + C87402 * C87546)) / C87283;
    const double C1840 =
        (ae * C87531 + C87402 * C87535 + C87546 * C87754) / C87283;
    const double C4216 = (C87568 * (be * C87434 + C87524 * C87546)) / C87283;
    const double C13875 =
        (3 * (C87535 + be * C88046 + C87524 * C88152) +
         be * (2 * C88046 + C87524 * C88153) +
         C87524 * (2 * C88152 + be * C88153 +
                   C87524 * (C87542 + C87927 +
                             C87524 * (C87473 + C87524 * C87554)))) /
        C87283;
    const double C14685 =
        (C87535 + be * C88046 + C87524 * C88152 +
         (C87542 + C87927 + C87524 * (C87473 + C87524 * C87554)) * C87754) /
        C87283;
    const double C16823 =
        (C87568 *
         (2 * C88152 + be * C88153 +
          C87524 * (C87542 + C87927 + C87524 * (C87473 + C87524 * C87554)))) /
        C87283;
    const double C31374 = C29357 - C29358;
    const double C35621 = C27136 - C27137;
    const double C87562 = C87402 * C87560;
    const double C88155 = C87524 * C87560;
    const double C10608 =
        (2 * C87568 * C87546 + C87568 * (C87546 + C87560 * C87754)) / C87283;
    const double C27124 =
        (3 * (C87546 + C87560 * C87754) +
         C87568 *
             (2 * C87568 * C87560 +
              C87568 * (C87560 + (ae * C87556 + C87402 * std::pow(C87408, 7) *
                                                    bs[7] * C87530) *
                                     C87754))) /
        C87283;
    const double C88293 = C87524 * C88291;
    const double C23212 =
        (2 * C87568 * C88152 + C87568 * (C88152 + C88291 * C87754)) / C87283;
    const double C31371 =
        (3 * (C88152 + C88291 * C87754) +
         C87568 *
             (2 * C87568 * C88291 +
              C87568 * (C88291 + (be * C87494 + C87524 * std::pow(C87408, 7) *
                                                    bs[7] * C87530) *
                                     C87754))) /
        C87283;
    const double C35618 =
        (4 * (2 * C87568 * C87542 + C87568 * C88620) +
         C87568 * (3 * C88620 +
                   C87568 * (2 * C87568 * C87554 +
                             C87568 * (C87554 + std::pow(C87408, 7) * bs[7] *
                                                    C87530 * C87754)))) /
        C87283;
    const double C356 =
        (3 * (C87622 + be * C87625 + C87402 * C87633) +
         be * (2 * C87625 + C87402 * C87634) +
         C87402 * (2 * C87633 + be * C87634 +
                   C87402 * (C87629 + be * C87402 * C87630 +
                             C87402 * (be * C87630 +
                                       C87402 * C87476 * C87475 * C87617)))) /
        C87283;
    const double C1145 = (ae * (C87414 + C87402 * C87433 + C87423 * be) +
                          C87524 * (C87622 + be * C87625 + C87402 * C87633)) /
                         C87283;
    const double C1147 = (be * C87618 + C87402 * C87622 + ae * C87524 * C87433 +
                          C87524 * (ae * C87433 + C87524 * C87633)) /
                         C87283;
    const double C2050 =
        (C87568 * (C87622 + be * C87625 + C87402 * C87633)) / C87283;
    const double C2052 =
        (be * C87618 + C87402 * C87622 + C87633 * C87754) / C87283;
    const double C4444 =
        (ae * C87568 * C87433 + C87524 * C87568 * C87633) / C87283;
    const double C14057 =
        (3 * (C87622 + ae * C88061 + C87524 * C88164) +
         ae * (2 * C88061 + C87524 * C88165) +
         C87524 * (2 * C88164 + ae * C88165 +
                   C87524 * (C87629 + C87926 +
                             C87524 * (C87472 + C87524 * C87641)))) /
        C87283;
    const double C87649 = C87402 * C87647;
    const double C88167 = C87524 * C87647;
    const double C88268 = C87568 * C87647;
    const double C6497 = (ae * (C87433 + C87459 * C87754) +
                          C87524 * (C87633 + C87647 * C87754)) /
                         C87283;
    const double C10720 =
        (2 * C87568 * C87633 + C87568 * (C87633 + C87647 * C87754)) / C87283;
    const double C88307 = C87524 * C88305;
    const double C19094 =
        (2 * (ae * (C87427 + C87450 * C87754) + C87524 * C88386) +
         ae * (C88165 + C88306 * C87754) +
         C87524 * (C88386 + ae * (C87923 + C87524 * C87491 * C87754) +
                   C87524 * (ae * (C87450 + C87491 * C87754) +
                             C87524 * (C87641 + std::pow(C87408, 7) * bs[7] *
                                                    C87617 * C87754)))) /
        C87283;
    const double C23320 =
        (ae * (2 * C87568 * C87427 + C87568 * (C87427 + C87450 * C87754)) +
         C87524 * (2 * C88266 + C87568 * C88386)) /
        C87283;
    const double C23321 =
        (2 * C88266 + C87568 * C88386 +
         ae * (2 * C87568 * C87923 +
               C87568 * (C87923 + C87524 * C87491 * C87754)) +
         C87524 * (ae * (2 * C87940 + C87568 * (C87450 + C87491 * C87754)) +
                   C87524 * (2 * C88405 +
                             C87568 * (C87641 + std::pow(C87408, 7) * bs[7] *
                                                    C87617 * C87754)))) /
        C87283;
    const double C27305 = (3 * (C87622 + C87629 * C87754) +
                           C87568 * (2 * C88266 + C87568 * C88386)) /
                          C87283;
    const double C31532 =
        (ae * (3 * C88488 +
               C87568 * (2 * C87940 + C87568 * (C87450 + C87491 * C87754))) +
         C87524 * (3 * C88386 +
                   C87568 * (2 * C88405 +
                             C87568 * (C87641 + std::pow(C87408, 7) * bs[7] *
                                                    C87617 * C87754)))) /
        C87283;
    const double C35731 =
        (4 * (2 * C88266 + C87568 * C88386) +
         C87568 * (3 * C88386 +
                   C87568 * (2 * C88405 +
                             C87568 * (C87641 + std::pow(C87408, 7) * bs[7] *
                                                    C87617 * C87754)))) /
        C87283;
    const double C88407 = C87943 + C88406;
    const double C39285 = C1048 - C1049;
    const double C39283 = C1049 - C1048;
    const double C13975 = C13962 - C13963;
    const double C274 =
        (3 * (C87579 + ae * C87582 + C87402 * C87590) +
         ae * (2 * C87582 + C87402 * C87591) +
         C87402 * (2 * C87590 + ae * C87591 +
                   C87402 * (C87586 + ae * C87402 * C87587 +
                             C87402 * (ae * C87587 +
                                       C87402 * C87476 * C87475 * C87574)))) /
        C87283;
    const double C1039 =
        (C87524 * (C87579 + ae * C87582 + C87402 * C87590)) / C87283;
    const double C1041 =
        (ae * C87575 + C87402 * C87579 + C87590 * C87656) / C87283;
    const double C1944 = (be * (C87415 + C87402 * C87434 + C87423 * ae) +
                          C87568 * (C87579 + ae * C87582 + C87402 * C87590)) /
                         C87283;
    const double C1946 = (ae * C87575 + C87402 * C87579 + be * C87568 * C87434 +
                          C87568 * (be * C87434 + C87568 * C87590)) /
                         C87283;
    const double C4330 =
        (be * C87524 * C87434 + C87568 * C87524 * C87590) / C87283;
    const double C27227 =
        (3 * (C87579 + be * C88460 + C87568 * C88463) +
         be * (2 * C88460 + C87568 * C88464) +
         C87568 * (2 * C88463 + be * C88464 +
                   C87568 * (C87586 + C87944 +
                             C87568 * (C87473 + C87568 * C87598)))) /
        C87283;
    const double C18428 = C13966 - C13967;
    const double C21289 = C16934 - C16935;
    const double C87606 = C87402 * C87604;
    const double C88467 = C87568 * C87604;
    const double C88546 = C87524 * C87604;
    const double C5847 =
        (2 * C87524 * C87590 + C87524 * (C87590 + C87604 * C87656)) / C87283;
    const double C8684 = (be * (C87434 + C87460 * C87656) +
                          C87568 * (C87590 + C87604 * C87656)) /
                         C87283;
    const double C13954 =
        (3 * (C87590 + C87604 * C87656) +
         C87524 *
             (2 * C87524 * C87604 +
              C87524 * (C87604 + (ae * C87600 + C87402 * std::pow(C87408, 7) *
                                                    bs[7] * C87574) *
                                     C87656))) /
        C87283;
    const double C18425 =
        (4 * (2 * C87524 * C87586 + C87524 * C88299) +
         C87524 * (3 * C88299 +
                   C87524 * (2 * C87524 * C87598 +
                             C87524 * (C87598 + std::pow(C87408, 7) * bs[7] *
                                                    C87574 * C87656)))) /
        C87283;
    const double C23267 =
        (2 * (be * C88153 + C87568 * C88299) + be * (C88153 + C88292 * C87754) +
         C87568 * (C88299 + be * C87568 * C88292 +
                   C87568 * (be * C88292 +
                             C87568 * (C87598 + std::pow(C87408, 7) * bs[7] *
                                                    C87574 * C87656)))) /
        C87283;
    const double C88572 = C87927 + C88570;
    const double C88628 = C87568 * C88626;
    const double C511 = C506 - C507;
    const double C39643 = C1344 - C1345;
    const double C39642 = C1345 - C1344;
    const double C14249 = C14242 - C14243;
    const double C14237 =
        (3 * (C87682 + ae * C88076 + C87524 * C88215) +
         ae * (2 * C88076 + C87524 * C88216) +
         C87524 * (2 * C88215 + ae * C88216 +
                   C87524 * (C87685 + ae * C87524 * C87587 +
                             C87524 * (C87594 + C87524 * C87688)))) /
        C87283;
    const double C17255 =
        (2 * (ae * C88145 + C87524 * C88275) +
         ae * (C87568 * C88216 + C88181 * be) +
         C87524 * (C88275 + ae * (C87568 * C87524 * C87587 + C88180) +
                   C87524 * (ae * (C87568 * C87587 + C87444) +
                             C87524 * (C87637 + C87568 * C87688)))) /
        C87283;
    const double C3032 = C1346 - C1347;
    const double C41552 = C1347 - C1346;
    const double C3755 = C2251 - C2252;
    const double C498 =
        (4 * (2 * C87402 * C87685 + C87402 * C87690) +
         C87402 * (3 * C87690 +
                   C87402 * (2 * C87402 * C87688 +
                             C87402 * (C87688 + std::pow(C87408, 7) * bs[7] *
                                                    C87679 * C87406)))) /
        C87283;
    const double C1340 = (C87682 + C87685 * C87406 + ae * C87524 * C87591 +
                          C87524 * (ae * C87591 + C87524 * C87690)) /
                         C87283;
    const double C1341 = (ae * (2 * C87582 + C87402 * C87591) +
                          C87524 * (2 * C87402 * C87685 + C87402 * C87690)) /
                         C87283;
    const double C2245 = (C87682 + C87685 * C87406 + be * C87568 * C87634 +
                          C87568 * (be * C87634 + C87568 * C87690)) /
                         C87283;
    const double C2246 = (be * (2 * C87625 + C87402 * C87634) +
                          C87568 * (2 * C87402 * C87685 + C87402 * C87690)) /
                         C87283;
    const double C4663 = (ae * (C87568 * C87591 + C87452 * be) +
                          C87524 * (be * C87634 + C87568 * C87690)) /
                         C87283;
    const double C6010 =
        (2 * (ae * C87591 + C87524 * C87690) + ae * (C87591 + C87605 * C87656) +
         C87524 * (C87690 + ae * C87524 * C87605 +
                   C87524 * (ae * C87605 +
                             C87524 * (C87688 + std::pow(C87408, 7) * bs[7] *
                                                    C87679 * C87406)))) /
        C87283;
    const double C10827 =
        (2 * (be * C87634 + C87568 * C87690) + be * (C87634 + C87648 * C87754) +
         C87568 * (C87690 + be * C87568 * C87648 +
                   C87568 * (be * C87648 +
                             C87568 * (C87688 + std::pow(C87408, 7) * bs[7] *
                                                    C87679 * C87406)))) /
        C87283;
    const double C88222 = C87597 + C88220;
    const double C88278 = C87640 + C88277;
    const double C88358 = C87524 * C88354;
    const double C88396 = C87568 * C88394;
    const double C88417 = C87524 * C88394;
    const double C575 =
        (3 * (C87703 + be * C87706 + C87402 * C87714) +
         be * (2 * C87706 + C87402 * C87715) +
         C87402 * (2 * C87714 + be * C87715 +
                   C87402 * (C87710 + be * C87402 * C87711 +
                             C87402 * (be * C87711 +
                                       C87402 * C87476 * C87475 * C87698)))) /
        C87283;
    const double C1435 =
        (C87524 * (C87703 + be * C87706 + C87402 * C87714)) / C87283;
    const double C1437 =
        (be * C87699 + C87402 * C87703 + C87714 * C87656) / C87283;
    const double C2340 = (ae * (C87414 + C87402 * C87433 + C87423 * be) +
                          C87568 * (C87703 + be * C87706 + C87402 * C87714)) /
                         C87283;
    const double C2342 = (be * C87699 + C87402 * C87703 + ae * C87568 * C87433 +
                          C87568 * (ae * C87433 + C87568 * C87714)) /
                         C87283;
    const double C4772 =
        (ae * C87524 * C87433 + C87568 * C87524 * C87714) / C87283;
    const double C27603 =
        (3 * (C87703 + ae * C88484 + C87568 * C88487) +
         ae * (2 * C88484 + C87568 * C88488) +
         C87568 * (2 * C88487 + ae * C88488 +
                   C87568 * (C87710 + C87943 +
                             C87568 * (C87472 + C87568 * C87722)))) /
        C87283;
    const double C87730 = C87402 * C87728;
    const double C88491 = C87568 * C87728;
    const double C88552 = C87524 * C87728;
    const double C6065 =
        (2 * C87524 * C87714 + C87524 * (C87714 + C87728 * C87656)) / C87283;
    const double C8998 = (ae * (C87433 + C87459 * C87656) +
                          C87568 * (C87714 + C87728 * C87656)) /
                         C87283;
    const double C14326 =
        (3 * (C87714 + C87728 * C87656) +
         C87524 *
             (2 * C87524 * C87728 +
              C87524 * (C87728 + (be * C87724 + C87402 * std::pow(C87408, 7) *
                                                    bs[7] * C87698) *
                                     C87656))) /
        C87283;
    const double C18649 =
        (4 * (2 * C87524 * C87710 + C87524 * C88364) +
         C87524 * (3 * C88364 +
                   C87524 * (2 * C87524 * C87722 +
                             C87524 * (C87722 + std::pow(C87408, 7) * bs[7] *
                                                    C87698 * C87656)))) /
        C87283;
    const double C23479 =
        (2 * (ae * C88165 + C87568 * C88364) + ae * (C88165 + C88306 * C87754) +
         C87568 * (C88364 + ae * C87568 * C88306 +
                   C87568 * (ae * C88306 +
                             C87568 * (C87722 + std::pow(C87408, 7) * bs[7] *
                                                    C87698 * C87656)))) /
        C87283;
    const double C88587 = C87926 + C88585;
    const double C88645 = C87568 * C88643;
    const double C645 = C640 - C641;
    const double C57237 = C2429 - C2430;
    const double C57236 = C2430 - C2429;
    const double C27705 = C27698 - C27699;
    const double C14421 =
        (3 * (C87742 + be * C88077 + C87524 * C88229) +
         be * (2 * C88077 + C87524 * C88230) +
         C87524 * (2 * C88229 + be * C88230 +
                   C87524 * (C87745 + be * C87524 * C87711 +
                             C87524 * (C87718 + C87524 * C87748)))) /
        C87283;
    const double C27693 =
        (3 * (C87742 + ae * C88496 + C87568 * C88499) +
         ae * (2 * C88496 + C87568 * C88500) +
         C87568 * (2 * C88499 + ae * C88500 +
                   C87568 * (C87745 + C88411 +
                             C87568 * (C87550 + C87568 * C87748)))) /
        C87283;
    const double C3189 = C1526 - C1527;
    const double C3912 = C2431 - C2432;
    const double C59099 = C2432 - C2431;
    const double C632 =
        (4 * (2 * C87402 * C87745 + C87402 * C87750) +
         C87402 * (3 * C87750 +
                   C87402 * (2 * C87402 * C87748 +
                             C87402 * (C87748 + std::pow(C87408, 7) * bs[7] *
                                                    C87739 * C87406)))) /
        C87283;
    const double C1520 = (C87742 + C87745 * C87406 + be * C87524 * C87715 +
                          C87524 * (be * C87715 + C87524 * C87750)) /
                         C87283;
    const double C1521 = (be * (2 * C87706 + C87402 * C87715) +
                          C87524 * (2 * C87402 * C87745 + C87402 * C87750)) /
                         C87283;
    const double C2425 = (C87742 + C87745 * C87406 + ae * C87568 * C87547 +
                          C87568 * (ae * C87547 + C87568 * C87750)) /
                         C87283;
    const double C2426 = (ae * (2 * C87538 + C87402 * C87547) +
                          C87568 * (2 * C87402 * C87745 + C87402 * C87750)) /
                         C87283;
    const double C4875 = (ae * (C87524 * C87547 + C87452 * be) +
                          C87568 * (be * C87715 + C87524 * C87750)) /
                         C87283;
    const double C6119 =
        (2 * (be * C87715 + C87524 * C87750) + be * (C87715 + C87729 * C87656) +
         C87524 * (C87750 + be * C87524 * C87729 +
                   C87524 * (be * C87729 +
                             C87524 * (C87748 + std::pow(C87408, 7) * bs[7] *
                                                    C87739 * C87406)))) /
        C87283;
    const double C10936 =
        (2 * (ae * C87547 + C87568 * C87750) + ae * (C87547 + C87561 * C87754) +
         C87568 * (C87750 + ae * C87568 * C87561 +
                   C87568 * (ae * C87561 +
                             C87568 * (C87748 + std::pow(C87408, 7) * bs[7] *
                                                    C87739 * C87406)))) /
        C87283;
    const double C88236 = C87721 + C88234;
    const double C88505 = C87553 + C88503;
    const double C88374 = C87524 * C88370;
    const double C88591 = C87568 * C88370;
    const double C88656 = C87568 * C88654;
    const double C89322 = C89298 / C89122;
    const double C89324 = C89302 / C89110;
    const double C815 = -C89323;
    const double C89326 = C89310 / C89122;
    const double C89327 = C89312 / C89110;
    const double C5073 = -C89325;
    const double C89329 = C89314 / C89122;
    const double C89330 = C89316 / C89110;
    const double C9228 = -C89328;
    const double C87292 = C87291 / C87281;
    const double C13766 = C13261 * C828;
    const double C13764 = C13261 * C827;
    const double C13762 = C13261 * C5733;
    const double C13760 = C13261 * C5732;
    const double C13758 = C13261 * C832;
    const double C13756 = C13261 * C831;
    const double C13754 = C13261 * C830;
    const double C13752 = C13261 * C829;
    const double C14081 = C13261 * C5726;
    const double C14078 = C13261 * C1139;
    const double C14076 = C13261 * C821;
    const double C14074 = C13261 * C1136;
    const double C14072 = C13261 * C818;
    const double C14068 = C13261 * C5727;
    const double C14067 = C13261 * C1138;
    const double C14065 = C13261 * C820;
    const double C14063 = C13261 * C1135;
    const double C14061 = C13261 * C819;
    const double C14341 = C13261 * C6062;
    const double C14338 = C13261 * C1429;
    const double C14335 = C13261 * C1426;
    const double C14333 = C13261 * C6061;
    const double C14332 = C13261 * C1428;
    const double C14329 = C13261 * C1425;
    const double C15543 = C13261 * C822;
    const double C15541 = C13261 * C1137;
    const double C15539 = C13261 * C817;
    const double C15769 = C13261 * C1427;
    const double C16698 = C13261 * C4102;
    const double C16696 = C13261 * C4101;
    const double C16694 = C13261 * C8522;
    const double C16692 = C13261 * C8521;
    const double C17055 = C13261 * C8515;
    const double C17053 = C13261 * C4440;
    const double C17051 = C13261 * C4098;
    const double C17046 = C13261 * C8516;
    const double C17044 = C13261 * C4439;
    const double C17042 = C13261 * C4097;
    const double C17373 = C13261 * C8995;
    const double C17371 = C13261 * C4768;
    const double C17368 = C13261 * C8994;
    const double C17366 = C13261 * C4767;
    const double C18491 = C13261 * C13743;
    const double C18846 = C13261 * C6255;
    const double C18844 = C13261 * C6254;
    const double C19101 = C13261 * C14601;
    const double C19097 = C13261 * C6249;
    const double C19335 = C13261 * C6727;
    const double C21376 = C13261 * C16683;
    const double C27020 = C13261 * C1733;
    const double C27018 = C13261 * C1732;
    const double C27016 = C13261 * C10550;
    const double C27014 = C13261 * C10549;
    const double C27012 = C13261 * C1737;
    const double C27010 = C13261 * C1736;
    const double C27008 = C13261 * C1735;
    const double C27006 = C13261 * C1734;
    const double C27331 = C13261 * C10717;
    const double C27329 = C13261 * C10543;
    const double C27326 = C13261 * C2044;
    const double C27324 = C13261 * C1726;
    const double C27322 = C13261 * C2041;
    const double C27320 = C13261 * C1723;
    const double C27318 = C13261 * C10716;
    const double C27316 = C13261 * C10544;
    const double C27315 = C13261 * C2043;
    const double C27313 = C13261 * C1725;
    const double C27311 = C13261 * C2040;
    const double C27309 = C13261 * C1724;
    const double C27614 = C13261 * C2334;
    const double C27612 = C13261 * C2331;
    const double C27609 = C13261 * C2333;
    const double C27607 = C13261 * C2330;
    const double C28763 = C13261 * C1727;
    const double C28761 = C13261 * C2042;
    const double C28759 = C13261 * C1722;
    const double C28991 = C13261 * C2332;
    const double C29564 = C13261 * C6248;
    const double C31292 = C13261 * C23157;
    const double C31290 = C13261 * C23156;
    const double C31537 = C13261 * C23153;
    const double C35736 = C13261 * C26997;
    const double C73906 = C13261 * C4099;
    const double C87337 = C87336 / C87281;
    const double C436 = C432 - C418;
    const double C27440 = C27436 - C27420;
    const double C87363 = C87362 / C87281;
    const double C727 = C723 - C709;
    const double C14520 = C14516 - C14502;
    const double C204 = C180 * C119;
    const double C287 = C263 * C119;
    const double C946 = C180 * C826;
    const double C1052 = C263 * C826;
    const double C15302 = C13261 * C826;
    const double C38382 = C38366 * C826;
    const double C39036 = C38297 * C826;
    const double C951 = C180 * C834;
    const double C1057 = C263 * C834;
    const double C13770 = C13261 * C834;
    const double C39024 = C38297 * C834;
    const double C39174 = C38366 * C834;
    const double C1851 = C180 * C1731;
    const double C1957 = C263 * C1731;
    const double C28524 = C13261 * C1731;
    const double C54901 = C54885 * C1731;
    const double C56430 = C38297 * C1731;
    const double C1856 = C180 * C1739;
    const double C1962 = C263 * C1739;
    const double C27024 = C13261 * C1739;
    const double C56418 = C38297 * C1739;
    const double C56672 = C54885 * C1739;
    const double C4223 = C180 * C4104;
    const double C4337 = C263 * C4104;
    const double C16702 = C13261 * C4104;
    const double C40169 = C38366 * C4104;
    const double C42899 = C38297 * C4104;
    const double C55667 = C54885 * C4104;
    const double C14070 = C13261 * C5899;
    const double C14244 = C263 * C5899;
    const double C19099 = C13261 * C6493;
    const double C19255 = C263 * C6493;
    const double C29672 = C180 * C6493;
    const double C73086 = C38366 * C6493;
    const double C76107 = C54885 * C6493;
    const double C17048 = C13261 * C8760;
    const double C17260 = C263 * C8760;
    const double C33861 = C180 * C8760;
    const double C72246 = C54885 * C8760;
    const double C75967 = C38366 * C8760;
    const double C27610 = C13261 * C10878;
    const double C27700 = C180 * C10878;
    const double C14246 = C1349 - C1348;
    const double C39644 = C1348 - C1349;
    const double C27702 = C2434 - C2433;
    const double C57238 = C2433 - C2434;
    const double C43618 = C4666 - C4667;
    const double C43617 = C4667 - C4666;
    const double C60273 = C4878 - C4879;
    const double C60272 = C4879 - C4878;
    const double C13968 = C1055 - C1054;
    const double C39286 = C1054 - C1055;
    const double C1252 = C1242 - C1243;
    const double C1632 = C1622 - C1623;
    const double C27138 = C1854 - C1853;
    const double C56566 = C1853 - C1854;
    const double C2157 = C2147 - C2148;
    const double C2537 = C2527 - C2528;
    const double C59474 = C4220 - C4221;
    const double C59472 = C4221 - C4220;
    const double C43195 = C4334 - C4335;
    const double C43193 = C4335 - C4334;
    const double C4558 = C4550 - C4551;
    const double C4992 = C4984 - C4985;
    const double C15300 = C13261 * C825;
    const double C15538 = C89093 * C825;
    const double C39034 = C38297 * C825;
    const double C39405 = C38292 * C825;
    const double C41334 = C38291 * C825;
    const double C13768 = C13261 * C833;
    const double C14077 = C89093 * C833;
    const double C39022 = C38297 * C833;
    const double C39410 = C38291 * C833;
    const double C39397 = C38292 * C833;
    const double C28522 = C13261 * C1730;
    const double C28758 = C89093 * C1730;
    const double C56428 = C38297 * C1730;
    const double C56799 = C38292 * C1730;
    const double C58689 = C38291 * C1730;
    const double C27022 = C13261 * C1738;
    const double C27325 = C89093 * C1738;
    const double C56416 = C38297 * C1738;
    const double C56804 = C38291 * C1738;
    const double C56791 = C38292 * C1738;
    const double C16700 = C13261 * C4103;
    const double C17050 = C89093 * C4103;
    const double C42897 = C38297 * C4103;
    const double C43335 = C38291 * C4103;
    const double C43330 = C38292 * C4103;
    const double C29994 = C89236 * C6807;
    const double C73405 = C38294 * C6807;
    const double C78848 = C38293 * C6807;
    const double C34097 = C89236 * C9074;
    const double C76376 = C38294 * C9074;
    const double C81839 = C38293 * C9074;
    const double C29356 = C89236 * C6333;
    const double C29670 = C180 * C6333;
    const double C72777 = C38294 * C6333;
    const double C73084 = C38366 * C6333;
    const double C78223 = C38293 * C6333;
    const double C33629 = C89236 * C8600;
    const double C33859 = C180 * C8600;
    const double C75550 = C38294 * C8600;
    const double C75965 = C38366 * C8600;
    const double C81214 = C38293 * C8600;
    const double C13767 = C89093 * C842;
    const double C39033 = C38291 * C842;
    const double C39021 = C38292 * C842;
    const double C13759 = C89093 * C844;
    const double C39029 = C38291 * C844;
    const double C27021 = C89093 * C1747;
    const double C56427 = C38291 * C1747;
    const double C56415 = C38292 * C1747;
    const double C27013 = C89093 * C1749;
    const double C56423 = C38291 * C1749;
    const double C16699 = C89093 * C4109;
    const double C42904 = C38291 * C4109;
    const double C427 = C89236 * C412;
    const double C38611 = C38293 * C412;
    const double C1241 = C89236 * C1226;
    const double C38599 = C38294 * C1226;
    const double C39523 = C38293 * C1226;
    const double C2146 = C89236 * C2131;
    const double C40484 = C38293 * C2131;
    const double C27425 = C89236 * C2133;
    const double C73091 = C38293 * C2133;
    const double C29669 = C89236 * C4545;
    const double C73083 = C38294 * C4545;
    const double C75964 = C38293 * C4545;
    const double C718 = C89247 * C703;
    const double C55340 = C54750 * C703;
    const double C1621 = C89247 * C1606;
    const double C56289 = C54750 * C1606;
    const double C14507 = C89247 * C1608;
    const double C72557 = C54750 * C1608;
    const double C2526 = C89247 * C2511;
    const double C55328 = C54751 * C2511;
    const double C57344 = C54750 * C2511;
    const double C17581 = C89247 * C4979;
    const double C72549 = C54751 * C4979;
    const double C76514 = C54750 * C4979;
    const double C19496 = C19488 - C19489;
    const double C636 = C210 * C263;
    const double C437 = C433 - C422;
    const double C639 = C212 * C263;
    const double C438 = C434 - C426;
    const double C1255 = C1251 - C1240;
    const double C3188 = C2710 * C263;
    const double C1254 = C1250 - C1236;
    const double C2160 = C2156 - C2145;
    const double C3911 = C3433 * C263;
    const double C2159 = C2155 - C2141;
    const double C27148 = C27144 * C13261;
    const double C27441 = C27437 - C27424;
    const double C29682 = C29679 - C29668;
    const double C35626 = C35620 * C13261;
    const double C27442 = C27438 - C27428;
    const double C502 = C293 * C180;
    const double C728 = C724 - C713;
    const double C505 = C295 * C180;
    const double C729 = C725 - C717;
    const double C1635 = C1631 - C1620;
    const double C3031 = C2792 * C180;
    const double C1634 = C1630 - C1616;
    const double C13978 = C13974 * C13261;
    const double C14521 = C14517 - C14506;
    const double C2540 = C2536 - C2525;
    const double C3754 = C3515 * C180;
    const double C2539 = C2535 - C2521;
    const double C17590 = C17587 - C17580;
    const double C18433 = C18427 * C13261;
    const double C14522 = C14518 - C14510;
    const double C21294 = C21288 * C13261;
    const double C17589 = C17586 - C17576;
    const double C512 = C510 * C89236;
    const double C646 = C644 * C89247;
    const double C87466 = C87428 + C87463;
    const double C5791 =
        (2 * (be * C87434 + C87524 * C87546) + be * (C87434 + C87460 * C87656) +
         C87524 * (C87546 + be * C87524 * C87460 +
                   C87524 * (C87471 + C87524 * C87560))) /
        C87283;
    const double C6337 =
        (be * C87434 + C87524 * C87546 + (C87471 + C87524 * C87560) * C87754) /
        C87283;
    const double C10664 =
        (2 * (be * C87434 + C87568 * C87590) + be * (C87434 + C87460 * C87754) +
         C87568 * (C87590 + be * C87568 * C87460 +
                   C87568 * (C87471 + C87568 * C87604))) /
        C87283;
    const double C6417 = (C87524 * C87590 + be * C87568 * C88048 +
                          C87568 * (be * C88048 + C87568 * C87524 * C87604)) /
                         C87283;
    const double C8604 = (C87568 * (C87546 + be * C88048 +
                                    C87524 * (C87471 + C87524 * C87560))) /
                         C87283;
    const double C6253 = (C87524 * C87434 + C88048 * C87754) / C87281;
    const double C13774 = C13261 * C5731;
    const double C13973 = C263 * C5731;
    const double C39183 = C38366 * C5731;
    const double C44977 = C38297 * C5731;
    const double C16706 = C13261 * C8520;
    const double C16939 = C263 * C8520;
    const double C43062 = C38366 * C8520;
    const double C48589 = C38297 * C8520;
    const double C55562 = C180 * C8520;
    const double C55676 = C54885 * C8520;
    const double C27028 = C13261 * C10548;
    const double C27143 = C180 * C10548;
    const double C56681 = C54885 * C10548;
    const double C67550 = C38297 * C10548;
    const double C78335 = C54751 * C23266;
    const double C19018 = C89247 * C14763;
    const double C81326 = C54751 * C14763;
    const double C21292 = C89247 * C16925;
    const double C77609 = C54751 * C16925;
    const double C18317 = C13261 * C13746;
    const double C18432 = C263 * C13746;
    const double C18850 = C13261 * C14604;
    const double C19019 = C263 * C14604;
    const double C33636 = C180 * C14604;
    const double C78230 = C38366 * C14604;
    const double C81327 = C54885 * C14604;
    const double C21130 = C13261 * C16686;
    const double C21293 = C263 * C16686;
    const double C77610 = C54885 * C16686;
    const double C81221 = C38366 * C16686;
    const double C35563 = C13261 * C27000;
    const double C35625 = C180 * C27000;
    const double C87465 = C87427 + C87462;
    const double C87480 = C87458 + C87470;
    const double C5903 =
        (2 * (ae * C87433 + C87524 * C87633) + ae * (C87433 + C87459 * C87656) +
         C87524 * (C87633 + ae * C87524 * C87459 +
                   C87524 * (C87470 + C87524 * C87647))) /
        C87283;
    const double C10882 =
        (2 * (ae * C87433 + C87568 * C87714) + ae * (C87433 + C87459 * C87754) +
         C87568 * (C87714 + ae * C87568 * C87459 +
                   C87568 * (C87470 + C87568 * C87728))) /
        C87283;
    const double C6731 = (C87524 * C87714 + ae * C87568 * C88063 +
                          C87568 * (ae * C88063 + C87568 * C87524 * C87728)) /
                         C87283;
    const double C8764 =
        (C87568 * C87633 + ae * C87568 * C88063 +
         C87524 * (ae * C87568 * C87459 + C87524 * C87568 * C87647)) /
        C87283;
    const double C14842 =
        (C87633 + C87647 * C87754 + ae * (C88063 + C87524 * C87503 * C87754) +
         C87524 *
             (ae * (C87459 + C87503 * C87754) +
              C87524 * (C87647 + (be * C87643 + C87402 * std::pow(C87408, 7) *
                                                    bs[7] * C87617) *
                                     C87754))) /
        C87283;
    const double C6252 = (C87524 * C87433 + C88063 * C87754) / C87281;
    const double C13772 = C13261 * C5730;
    const double C14080 = C89093 * C5730;
    const double C44975 = C38297 * C5730;
    const double C45185 = C38292 * C5730;
    const double C16704 = C13261 * C8519;
    const double C17054 = C89093 * C8519;
    const double C48587 = C38297 * C8519;
    const double C48893 = C38292 * C8519;
    const double C27026 = C13261 * C10547;
    const double C27328 = C89093 * C10547;
    const double C67548 = C38297 * C10547;
    const double C67758 = C38292 * C10547;
    const double C31778 = C89093 * C23478;
    const double C19336 = C89093 * C15071;
    const double C21377 = C89093 * C17039;
    const double C21610 = C89093 * C17363;
    const double C18315 = C13261 * C13745;
    const double C18490 = C89093 * C13745;
    const double C18848 = C13261 * C14603;
    const double C19100 = C89093 * C14603;
    const double C21128 = C13261 * C16685;
    const double C21375 = C89093 * C16685;
    const double C35561 = C13261 * C26999;
    const double C35735 = C89093 * C26999;
    const double C87464 = C87441 + C87461;
    const double C4110 =
        (ae * C87568 * C87524 * C87427 + be * C87568 * C87524 * C87428 +
         C87402 * C87568 * C87779) /
        C87283;
    const double C6258 = (C87524 * C87432 + C87779 * C87754) / C87283;
    const double C15303 = C89093 * C841;
    const double C39037 = C38292 * C841;
    const double C41019 = C38291 * C841;
    const double C13771 = C89093 * C845;
    const double C39041 = C38291 * C845;
    const double C39025 = C38292 * C845;
    const double C28525 = C89093 * C1746;
    const double C56431 = C38292 * C1746;
    const double C58374 = C38291 * C1746;
    const double C27025 = C89093 * C1750;
    const double C56435 = C38291 * C1750;
    const double C56419 = C38292 * C1750;
    const double C13763 = C89093 * C5736;
    const double C44974 = C38291 * C5736;
    const double C16695 = C89093 * C8525;
    const double C48586 = C38291 * C8525;
    const double C27017 = C89093 * C10553;
    const double C67547 = C38291 * C10553;
    const double C87511 = C87453 + C87508;
    const double C88158 = C87460 + C88156;
    const double C88470 = C87460 + C88468;
    const double C29241 =
        (2 * C87568 * C88048 + C87568 * (C88048 + C88547 * C87754)) / C87281;
    const double C88340 = C87630 + C88335;
    const double C88686 = C87711 + C88683;
    const double C88010 = C88008 + C87501;
    const double C88134 = C88132 + C87501;
    const double C87504 = C87478 + C87499;
    const double C88009 = C88006 + C87498;
    const double C88133 = C88130 + C87498;
    const double C6652 =
        (ae * (C87591 + C87568 * (C87568 * C87605 + C87498) +
               C87568 * C87493 * be) +
         C87524 * (C87690 + be * C87568 * C87648 +
                   C87568 * (be * C87648 +
                             C87568 * (C87688 + std::pow(C87408, 7) * bs[7] *
                                                    C87679 * C87406)))) /
        C87283;
    const double C8919 =
        (be * C87634 + C87568 * C87690 + ae * (C87568 * C88070 + C88007 * be) +
         C87524 * (ae * (C87568 * C87605 + C87498) +
                   C87524 * (be * C87648 +
                             C87568 * (C87688 + std::pow(C87408, 7) * bs[7] *
                                                    C87679 * C87406)))) /
        C87283;
    const double C6415 =
        (C87524 * C87591 + C87568 * (C87568 * C88070 + C88007 * be) +
         C87568 * C88007 * be) /
        C87281;
    const double C6729 =
        (C87524 * C87715 + C87568 * (C87568 * C88071 + C88007 * ae) +
         C87568 * C88007 * ae) /
        C87281;
    const double C6247 = C87524 * C87452 + C88007 * C87754;
    const double C88207 = C87524 * C88205;
    const double C88538 = C87568 * C88535;
    const double C88206 = C87524 * C88204;
    const double C88537 = C87568 * C88532;
    const double C14762 =
        (C87582 + C87593 * C87656 + C87568 * (C87568 * C88223 + C88200 * be) +
         C87568 * C88200 * be) /
        C87281;
    const double C15070 =
        (C87706 + C87717 * C87656 + C87568 * (C87568 * C88237 + C88200 * ae) +
         C87568 * C88200 * ae) /
        C87281;
    const double C16924 = (C87568 * (2 * C88073 + C87524 * C88223) +
                           (2 * C88014 + C87524 * C88200) * be) /
                          C87281;
    const double C17362 = (C87568 * (2 * C88074 + C87524 * C88237) +
                           (2 * C88014 + C87524 * C88200) * ae) /
                          C87281;
    const double C13744 = 3 * (C87423 + C87445 * C87656) +
                          C87524 * (2 * C88014 + C87524 * C88200);
    const double C14602 = C87423 + C87445 * C87656 + C88200 * C87754;
    const double C16684 = C87568 * (2 * C88014 + C87524 * C88200);
    const double C88563 = C88561 + C88202;
    const double C88562 = C88560 + C88199;
    const double C14994 =
        (C88026 + be * C87568 * C87636 + C87568 * (C87640 + C87568 * C88218) +
         ae * (C88073 + C87568 * (C87568 * C87524 * C88219 + C88199) +
               C87568 * C88194 * be) +
         C87524 * (ae * (C87593 + C87568 * (C87568 * C88219 + C87492) +
                         C87568 * C87485 * be) +
                   C87524 * (C88218 + be * C87568 * C88196 +
                             C87568 * (be * C88196 + C87568 * C87402 *
                                                         std::pow(C87408, 7) *
                                                         bs[7] * C87679)))) /
        C87283;
    const double C26998 = 3 * (C87423 + C87445 * C87754) +
                          C87568 * (2 * C88137 + C87568 * C88534);
    const double C87510 = C87450 + C87507;
    const double C88170 = C87459 + C88168;
    const double C88494 = C87459 + C88492;
    const double C29240 =
        (2 * C87568 * C88063 + C87568 * (C88063 + C88553 * C87754)) / C87281;
    const double C88338 = C87543 + C88332;
    const double C88594 = C88179 + C88592;
    const double C88685 = C87587 + C88682;
    const double C87509 = C87481 + C87506;
    const double C87782 = C87458 + C87781;
    const double C87857 = C87458 + C87856;
    const double C87928 = C87402 * C87925;
    const double C87960 = C87568 * C87925;
    const double C4111 =
        (C87568 * C87779 + ae * C87568 * C87524 * C87459 +
         be * C87568 * C87524 * C87460 +
         C87402 * (ae * C87568 * C87923 + be * C87568 * C87924 +
                   C87402 * C87568 * C87925)) /
        C87283;
    const double C6256 =
        (C87779 + C87925 * C87754 +
         ae * (C87524 * C87459 + C87524 * C87503 * C87754) +
         be * (C87524 * C87460 + C87524 * C87505 * C87754) +
         C87402 *
             (ae * (C87923 + C87524 * C87491 * C87754) +
              be * (C87924 + C87524 * C87494 * C87754) +
              C87402 * (C87925 + C87524 *
                                     (C87475 * C87476 +
                                      C87406 * bs[7] * std::pow(C87408, 7)) *
                                     C87282 * C87754))) /
        C87283;
    const double C6257 = (ae * (C87524 * C87427 + C87923 * C87754) +
                          be * (C87524 * C87428 + C87924 * C87754) +
                          C87402 * (C87779 + C87925 * C87754)) /
                         C87283;
    const double C16690 =
        (ae * C87568 * (2 * C87923 + C87524 * (C87450 + C87491 * C87656)) +
         be * C87568 * (2 * C87924 + C87524 * (C87453 + C87494 * C87656)) +
         C87402 * C87568 *
             (2 * C87925 +
              C87524 * (C87502 + (C87475 * C87476 +
                                  C87406 * bs[7] * std::pow(C87408, 7)) *
                                     C87282 * C87656))) /
        C87283;
    const double C23159 =
        (2 * C87568 * C87779 + C87568 * (C87779 + C87925 * C87754)) / C87283;
    const double C87945 = C87402 * C87942;
    const double C15307 = C89093 * C846;
    const double C39045 = C38292 * C846;
    const double C28529 = C89093 * C1751;
    const double C56439 = C38292 * C1751;
    const double C87673 = C87666 + C87672;
    const double C88197 = C87524 * C88192;
    const double C88272 = C87568 * C88192;
    const double C88324 = C88314 + C88315;
    const double C88389 = C87666 + C88388;
    const double C88412 = C87524 * C88410;
    const double C87771 = C87764 + C87770;
    const double C88526 = C87568 * C88240;
    const double C88556 = C87524 * C88240;
    const double C17572 =
        (ae * (2 * C88073 + C87524 * C88223) +
         be * (2 * C88074 + C87524 * C88237) +
         C87568 *
             (2 * C87524 * C88240 +
              C87524 * (C88240 + C87402 *
                                     (C87475 * C87476 +
                                      C87754 * bs[7] * std::pow(C87408, 7)) *
                                     C87282 * C87656))) /
        C87283;
    const double C88380 = C87764 + C88379;
    const double C88602 = C87568 * C88597;
    const double C88675 = C88663 + C88664;
    const double C88447 = C88445 + C88336;
    const double C88339 = C88320 + C88334;
    const double C88446 = C88443 + C88333;
    const double C88612 = C87568 * C88610;
    const double C88611 = C87568 * C88609;
    const double C31285 = 3 * (C88020 + C88175 * C87754) +
                          C87568 * (2 * C88451 + C87568 * C88605);
    const double C88678 = C88669 + C88670;
    const double C206 = C89236 * C185;
    const double C428 = C180 * C185;
    const double C952 = C89236 * C928;
    const double C1246 = C180 * C928;
    const double C41130 = C38294 * C928;
    const double C41444 = C38366 * C928;
    const double C2712 = C89236 * C929;
    const double C2949 = C180 * C929;
    const double C38386 = C38294 * C929;
    const double C38612 = C38366 * C929;
    const double C1857 = C89236 * C1833;
    const double C2151 = C180 * C1833;
    const double C3435 = C89236 * C1834;
    const double C3672 = C180 * C1834;
    const double C4224 = C89236 * C4213;
    const double C4554 = C180 * C4213;
    const double C42055 = C38294 * C4213;
    const double C42359 = C38366 * C4213;
    const double C27703 = C89236 * C10935;
    const double C6808 =
        (be * C87706 + C87524 * C88033 + ae * C87568 * C88016 +
         C87568 *
             (ae * C88016 + C87568 * (C87721 + C87524 * C87402 * C87748))) /
        C87283;
    const double C9075 =
        (ae * (C87538 + C87524 * C88016 + C88014 * be) +
         C87568 * (C88033 + be * C88074 +
                   C87524 * (C87721 + C87524 * C87402 * C87748))) /
        C87283;
    const double C5788 = (2 * (C87524 * C87538 + C87423 * be) +
                          C87524 * (C87538 + C87524 * C88016 + C88014 * be) +
                          (C87423 + C87445 * C87656) * be) /
                         C87281;
    const double C6334 =
        (C87524 * C87538 + C87423 * be + C88016 * C87754) / C87281;
    const double C8601 =
        (C87568 * (C87538 + C87524 * C88016 + C88014 * be)) / C87281;
    const double C29348 =
        (2 * C87568 * C88016 + C87568 * (C88016 + C88204 * C87754)) / C87281;
    const double C27439 = C27432 - C27433;
    const double C88186 = C87536 + C88184;
    const double C88323 = C87666 + C88312;
    const double C23530 =
        (2 * (ae * C88022 + C87568 * C88229) + ae * (C88022 + C88179 * C87754) +
         C87568 * (C88229 + ae * C87568 * C88179 +
                   C87568 * (C88312 + C87568 * C88370))) /
        C87283;
    const double C31375 = C89236 * C23210;
    const double C31618 = C180 * C23210;
    const double C83853 = C38294 * C23210;
    const double C84061 = C38366 * C23210;
    const double C35622 = C89236 * C27121;
    const double C35793 = C180 * C27121;
    const double C289 = C89247 * C268;
    const double C719 = C263 * C268;
    const double C1058 = C89247 * C1034;
    const double C1626 = C263 * C1034;
    const double C2794 = C89247 * C1035;
    const double C3269 = C263 * C1035;
    const double C1963 = C89247 * C1939;
    const double C2531 = C263 * C1939;
    const double C58585 = C54751 * C1939;
    const double C59202 = C54885 * C1939;
    const double C3517 = C89247 * C1940;
    const double C3992 = C263 * C1940;
    const double C54905 = C54751 * C1940;
    const double C55341 = C54885 * C1940;
    const double C4338 = C89247 * C4327;
    const double C4988 = C263 * C4327;
    const double C57661 = C54751 * C4327;
    const double C58263 = C54885 * C4327;
    const double C14247 = C89247 * C6009;
    const double C40277 = C89247 * C6414;
    const double C40910 = C263 * C6414;
    const double C59608 = C54751 * C6414;
    const double C60408 = C54885 * C6414;
    const double C10661 = (2 * (C87568 * C87582 + C87423 * be) +
                           C87568 * (C87582 + C87568 * C88139 + C88137 * be) +
                           (C87423 + C87445 * C87754) * be) /
                          C87281;
    const double C14519 = C14512 - C14513;
    const double C17588 = C17582 - C17583;
    const double C18429 = C89247 * C13951;
    const double C18759 = C263 * C13951;
    const double C19016 = C89247 * C14761;
    const double C19492 = C263 * C14761;
    const double C81322 = C54751 * C14761;
    const double C81945 = C54885 * C14761;
    const double C21290 = C89247 * C16923;
    const double C21764 = C263 * C16923;
    const double C77605 = C54751 * C16923;
    const double C78015 = C54885 * C16923;
    const double C23264 = (2 * (C87568 * C88076 + C88020 * be) +
                           C87568 * (C88076 + C87568 * C88453 + C88451 * be) +
                           (C88020 + C88175 * C87754) * be) /
                          C87281;
    const double C88661 = C87764 + C88419;
    const double C88515 = C87580 + C88510;
    const double C430 = C180 * C350;
    const double C509 = C263 * C350;
    const double C1248 = C180 * C1140;
    const double C1351 = C263 * C1140;
    const double C15545 = C13261 * C1140;
    const double C39417 = C38297 * C1140;
    const double C41446 = C38366 * C1140;
    const double C2951 = C180 * C1141;
    const double C3034 = C263 * C1141;
    const double C38614 = C38366 * C1141;
    const double C41341 = C38297 * C1141;
    const double C2153 = C180 * C2045;
    const double C2256 = C263 * C2045;
    const double C28765 = C13261 * C2045;
    const double C56811 = C38297 * C2045;
    const double C58898 = C54885 * C2045;
    const double C3674 = C180 * C2046;
    const double C3757 = C263 * C2046;
    const double C55120 = C54885 * C2046;
    const double C58696 = C38297 * C2046;
    const double C4556 = C180 * C4441;
    const double C4669 = C263 * C4441;
    const double C42361 = C38366 * C4441;
    const double C43342 = C38297 * C4441;
    const double C57964 = C54885 * C4441;
    const double C73908 = C13261 * C4441;
    const double C40603 = C89247 * C6651;
    const double C60010 = C54751 * C6651;
    const double C17262 = C89247 * C8918;
    const double C55984 = C54751 * C8918;
    const double C57022 = C54751 * C10826;
    const double C5900 = (2 * (C87524 * C87625 + C87423 * ae) +
                          C87524 * (C87625 + C87524 * C88017 + C88014 * ae) +
                          (C87423 + C87445 * C87656) * ae) /
                         C87281;
    const double C6494 =
        (C87524 * C87625 + C87423 * ae + C88017 * C87754) / C87281;
    const double C8761 =
        (C87568 * (C87625 + C87524 * C88017 + C88014 * ae)) / C87281;
    const double C29560 =
        (2 * C87568 * C88017 + C87568 * (C88017 + C88205 * C87754)) / C87281;
    const double C88187 = C87623 + C88185;
    const double C31539 = C13261 * C23318;
    const double C31620 = C180 * C23318;
    const double C78650 = C54885 * C23318;
    const double C84063 = C38366 * C23318;
    const double C35738 = C13261 * C27303;
    const double C35795 = C180 * C27303;
    const double C5956 =
        (2 * (ae * C87538 + be * C87625 + C87524 * C88012) +
         ae * (C87538 + C87524 * C88016 + C88014 * be) +
         be * (C87625 + C87524 * C88017 + C88014 * ae) +
         C87524 * (C88012 + ae * C88016 + be * C88017 +
                   C87524 * (C87553 + C87640 + C87524 * C87402 * C87671))) /
        C87283;
    const double C6574 =
        (ae * (C87538 + C87549 * C87754) + be * (C87625 + C87636 * C87754) +
         C87524 * (C88012 + C87402 * C87671 * C87754)) /
        C87283;
    const double C8841 =
        (C87568 * C88012 + ae * C87568 * C88016 + be * C87568 * C88017 +
         C87524 * (ae * C87568 * C87549 + be * C87568 * C87636 +
                   C87524 * C87568 * C87402 * C87671)) /
        C87283;
    const double C10773 =
        (2 * C87568 * C88012 + C87568 * (C88012 + C87402 * C87671 * C87754)) /
        C87283;
    const double C14918 =
        (C88012 + C88192 * C87754 + ae * (C88016 + C88204 * C87754) +
         be * (C88017 + C88205 * C87754) +
         C87524 *
             (ae * (C87549 + C88193 * C87754) +
              be * (C87636 + C88196 * C87754) +
              C87524 * (C88192 + C87402 *
                                     (C87475 * C87476 +
                                      C87656 * bs[7] * std::pow(C87408, 7)) *
                                     C87282 * C87754))) /
        C87283;
    const double C88178 = C88172 + C88173;
    const double C431 = C89236 * C413;
    const double C1237 = C89236 * C1225;
    const double C38603 = C38294 * C1225;
    const double C41443 = C38293 * C1225;
    const double C1245 = C89236 * C1229;
    const double C39527 = C38293 * C1229;
    const double C39519 = C38294 * C1229;
    const double C2142 = C89236 * C2130;
    const double C42358 = C38293 * C2130;
    const double C2150 = C89236 * C2134;
    const double C40488 = C38293 * C2134;
    const double C4553 = C89236 * C4546;
    const double C40480 = C38294 * C4546;
    const double C43476 = C38293 * C4546;
    const double C29673 = C89236 * C6575;
    const double C73087 = C38294 * C6575;
    const double C78538 = C38293 * C6575;
    const double C33862 = C89236 * C8842;
    const double C75968 = C38294 * C8842;
    const double C81529 = C38293 * C8842;
    const double C27429 = C89236 * C10774;
    const double C84060 = C38293 * C10774;
    const double C33866 = C89236 * C14917;
    const double C78542 = C38294 * C14917;
    const double C643 = C180 * C569;
    const double C721 = C263 * C569;
    const double C1531 = C180 * C1430;
    const double C1628 = C263 * C1430;
    const double C15771 = C13261 * C1430;
    const double C39758 = C38297 * C1430;
    const double C41756 = C38366 * C1430;
    const double C3191 = C180 * C1431;
    const double C3271 = C263 * C1431;
    const double C38843 = C38366 * C1431;
    const double C41654 = C38297 * C1431;
    const double C2436 = C180 * C2335;
    const double C2533 = C263 * C2335;
    const double C28993 = C13261 * C2335;
    const double C57137 = C38297 * C2335;
    const double C59204 = C54885 * C2335;
    const double C3914 = C180 * C2336;
    const double C3994 = C263 * C2336;
    const double C55343 = C54885 * C2336;
    const double C59000 = C38297 * C2336;
    const double C4881 = C180 * C4769;
    const double C4990 = C263 * C4769;
    const double C42666 = C38366 * C4769;
    const double C43756 = C38297 * C4769;
    const double C58265 = C54885 * C4769;
    const double C74204 = C13261 * C4769;
    const double C39863 = C38294 * C6118;
    const double C29891 = C13261 * C6728;
    const double C29996 = C180 * C6728;
    const double C40808 = C38366 * C6728;
    const double C40912 = C263 * C6728;
    const double C46236 = C38297 * C6728;
    const double C60410 = C54885 * C6728;
    const double C10879 = (2 * (C87568 * C87706 + C87423 * ae) +
                           C87568 * (C87706 + C87568 * C88140 + C88137 * ae) +
                           (C87423 + C87445 * C87754) * ae) /
                          C87281;
    const double C18654 = C13261 * C14323;
    const double C18761 = C263 * C14323;
    const double C19337 = C13261 * C15069;
    const double C19494 = C263 * C15069;
    const double C34100 = C180 * C15069;
    const double C78851 = C38366 * C15069;
    const double C81947 = C54885 * C15069;
    const double C21611 = C13261 * C17361;
    const double C21766 = C263 * C17361;
    const double C78017 = C54885 * C17361;
    const double C81842 = C38366 * C17361;
    const double C23476 = (2 * (C87568 * C88077 + C88020 * ae) +
                           C87568 * (C88077 + C87568 * C88454 + C88451 * ae) +
                           (C88020 + C88175 * C87754) * ae) /
                          C87281;
    const double C88522 = C87704 + C88521;
    const double C6171 =
        (2 * C87524 * C88037 + C87524 * (C88037 + C87402 * C87769 * C87656)) /
        C87283;
    const double C6885 =
        (C87524 * C88037 + ae * (C87568 * C88073 + C88014 * be) +
         be * (C87568 * C88074 + C88014 * ae) +
         C87568 *
             (ae * C88073 + be * C88074 + C87568 * C87524 * C87402 * C87769)) /
        C87283;
    const double C9152 =
        (ae * (C87582 + C87593 * C87656) + be * (C87706 + C87717 * C87656) +
         C87568 * (C88037 + C87402 * C87769 * C87656)) /
        C87283;
    const double C10988 =
        (2 * (ae * C87582 + be * C87706 + C87568 * C88037) +
         ae * (C87582 + C87568 * C88139 + C88137 * be) +
         be * (C87706 + C87568 * C88140 + C88137 * ae) +
         C87568 * (C88037 + ae * C88139 + be * C88140 +
                   C87568 * (C87597 + C87721 + C87568 * C87402 * C87769))) /
        C87283;
    const double C14498 =
        (3 * (C88037 + C88240 * C87656) +
         C87524 *
             (2 * C87524 * C88240 +
              C87524 * (C88240 + C87402 *
                                     (C87475 * C87476 +
                                      C87754 * bs[7] * std::pow(C87408, 7)) *
                                     C87282 * C87656))) /
        C87283;
    const double C15224 =
        (C88037 + C88240 * C87656 + ae * (C87568 * C88223 + C88200 * be) +
         be * (C87568 * C88237 + C88200 * ae) +
         C87568 *
             (ae * C88223 + be * C88237 +
              C87568 * (C88240 + C87402 *
                                     (C87475 * C87476 +
                                      C87754 * bs[7] * std::pow(C87408, 7)) *
                                     C87282 * C87656))) /
        C87283;
    const double C23583 =
        (2 * (ae * C88076 + be * C88077 + C87568 * C88449) +
         ae * (C88076 + C87568 * C88453 + C88451 * be) +
         be * (C88077 + C87568 * C88454 + C88451 * ae) +
         C87568 * (C88449 + ae * C88453 + be * C88454 +
                   C87568 * (C88353 + C88369 + C87568 * C87524 * C87769))) /
        C87283;
    const double C88514 = C88508 + C88509;
    const double C722 = C89247 * C704;
    const double C1617 = C89247 * C1605;
    const double C58262 = C54750 * C1605;
    const double C1625 = C89247 * C1609;
    const double C56293 = C54750 * C1609;
    const double C2522 = C89247 * C2510;
    const double C55332 = C54751 * C2510;
    const double C59201 = C54750 * C2510;
    const double C2530 = C89247 * C2514;
    const double C57348 = C54750 * C2514;
    const double C57340 = C54751 * C2514;
    const double C4987 = C89247 * C4980;
    const double C56285 = C54751 * C4980;
    const double C60407 = C54750 * C4980;
    const double C14511 = C89247 * C6172;
    const double C78014 = C54750 * C6172;
    const double C19491 = C89247 * C6886;
    const double C76510 = C54751 * C6886;
    const double C78953 = C54750 * C6886;
    const double C17577 = C89247 * C9153;
    const double C72553 = C54751 * C9153;
    const double C81944 = C54750 * C9153;
    const double C18762 = C89247 * C14497;
    const double C19495 = C89247 * C15223;
    const double C81948 = C54751 * C15223;
    const double C21767 = C89247 * C17571;
    const double C78018 = C54751 * C17571;
    const double C19010 =
        (2 * C87524 * C87586 + C87524 * C88299 + be * C87568 * C88296 +
         C87568 * (be * C88296 +
                   C87568 * (2 * C87524 * C87598 +
                             C87524 * (C87598 + std::pow(C87408, 7) * bs[7] *
                                                    C87574 * C87656)))) /
        C87283;
    const double C21286 =
        (be * (3 * C88153 + C87524 * C88296) +
         C87568 * (3 * C88299 +
                   C87524 * (2 * C87524 * C87598 +
                             C87524 * (C87598 + std::pow(C87408, 7) * bs[7] *
                                                    C87574 * C87656)))) /
        C87283;
    const double C18312 = (4 * (2 * C88046 + C87524 * C88153) +
                           C87524 * (3 * C88153 + C87524 * C88296)) /
                          C87281;
    const double C18841 =
        (2 * C88046 + C87524 * C88153 + C88296 * C87754) / C87281;
    const double C21125 = (C87568 * (3 * C88153 + C87524 * C88296)) / C87281;
    const double C35558 = (4 * (2 * C88460 + C87568 * C88464) +
                           C87568 * (3 * C88464 + C87568 * C88631)) /
                          C87281;
    const double C19332 =
        (2 * C87524 * C87710 + C87524 * C88364 + ae * C87568 * C88310 +
         C87568 * (ae * C88310 +
                   C87568 * (2 * C87524 * C87722 +
                             C87524 * (C87722 + std::pow(C87408, 7) * bs[7] *
                                                    C87698 * C87656)))) /
        C87283;
    const double C21606 =
        (ae * (3 * C88165 + C87524 * C88310) +
         C87568 * (3 * C88364 +
                   C87524 * (2 * C87524 * C87722 +
                             C87524 * (C87722 + std::pow(C87408, 7) * bs[7] *
                                                    C87698 * C87656)))) /
        C87283;
    const double C18311 = (4 * (2 * C88061 + C87524 * C88165) +
                           C87524 * (3 * C88165 + C87524 * C88310)) /
                          C87281;
    const double C18840 =
        (2 * C88061 + C87524 * C88165 + C88310 * C87754) / C87281;
    const double C21124 = (C87568 * (3 * C88165 + C87524 * C88310)) / C87281;
    const double C35557 = (4 * (2 * C88484 + C87568 * C88488) +
                           C87568 * (3 * C88488 + C87568 * C88648)) /
                          C87281;
    const double C2427 =
        (2 * C87402 * C87745 + C87402 * C87750 + ae * C87568 * C87565 +
         C87568 * (ae * C87565 +
                   C87568 * (2 * C87402 * C87748 +
                             C87402 * (C87748 + std::pow(C87408, 7) * bs[7] *
                                                    C87739 * C87406)))) /
        C87283;
    const double C3909 =
        (ae * (3 * C87547 + C87402 * C87565) +
         C87568 * (3 * C87750 +
                   C87402 * (2 * C87402 * C87748 +
                             C87402 * (C87748 + std::pow(C87408, 7) * bs[7] *
                                                    C87739 * C87406)))) /
        C87283;
    const double C186 = (4 * (2 * C87538 + C87402 * C87547) +
                         C87402 * (3 * C87547 + C87402 * C87565)) /
                        C87281;
    const double C1835 =
        (2 * C87538 + C87402 * C87547 + C87565 * C87754) / C87281;
    const double C3430 = (C87568 * (3 * C87547 + C87402 * C87565)) / C87281;
    const double C35617 = (4 * (2 * C88496 + C87568 * C88500) +
                           C87568 * (3 * C88500 + C87568 * C88659)) /
                          C87281;
    const double C1342 =
        (2 * C87402 * C87685 + C87402 * C87690 + ae * C87524 * C87609 +
         C87524 * (ae * C87609 +
                   C87524 * (2 * C87402 * C87688 +
                             C87402 * (C87688 + std::pow(C87408, 7) * bs[7] *
                                                    C87679 * C87406)))) /
        C87283;
    const double C3029 =
        (ae * (3 * C87591 + C87402 * C87609) +
         C87524 * (3 * C87690 +
                   C87402 * (2 * C87402 * C87688 +
                             C87402 * (C87688 + std::pow(C87408, 7) * bs[7] *
                                                    C87679 * C87406)))) /
        C87283;
    const double C269 = (4 * (2 * C87582 + C87402 * C87591) +
                         C87402 * (3 * C87591 + C87402 * C87609)) /
                        C87281;
    const double C1036 =
        (2 * C87582 + C87402 * C87591 + C87609 * C87656) / C87281;
    const double C2789 = (C87524 * (3 * C87591 + C87402 * C87609)) / C87281;
    const double C18424 = (4 * (2 * C88076 + C87524 * C88216) +
                           C87524 * (3 * C88216 + C87524 * C88361)) /
                          C87281;
    const double C2247 =
        (2 * C87402 * C87685 + C87402 * C87690 + be * C87568 * C87652 +
         C87568 * (be * C87652 +
                   C87568 * (2 * C87402 * C87688 +
                             C87402 * (C87688 + std::pow(C87408, 7) * bs[7] *
                                                    C87679 * C87406)))) /
        C87283;
    const double C3752 =
        (be * (3 * C87634 + C87402 * C87652) +
         C87568 * (3 * C87690 +
                   C87402 * (2 * C87402 * C87688 +
                             C87402 * (C87688 + std::pow(C87408, 7) * bs[7] *
                                                    C87679 * C87406)))) /
        C87283;
    const double C4548 =
        (ae * C87568 * C87565 + be * C87568 * C87652 +
         C87524 * C87568 *
             (2 * C87402 * C87671 +
              C87402 * (C87671 + (C87475 * C87476 +
                                  C87656 * bs[7] * std::pow(C87408, 7)) *
                                     C87282 * C87406))) /
        C87283;
    const double C351 = (4 * (2 * C87625 + C87402 * C87634) +
                         C87402 * (3 * C87634 + C87402 * C87652)) /
                        C87281;
    const double C2047 =
        (2 * C87625 + C87402 * C87634 + C87652 * C87754) / C87281;
    const double C3594 = (C87568 * (3 * C87634 + C87402 * C87652)) / C87281;
    const double C35730 = (4 * (2 * C88476 + C87568 * C88478) +
                           C87568 * (3 * C88478 + C87568 * C88637)) /
                          C87281;
    const double C1522 =
        (2 * C87402 * C87745 + C87402 * C87750 + be * C87524 * C87733 +
         C87524 * (be * C87733 +
                   C87524 * (2 * C87402 * C87748 +
                             C87402 * (C87748 + std::pow(C87408, 7) * bs[7] *
                                                    C87739 * C87406)))) /
        C87283;
    const double C3186 =
        (be * (3 * C87715 + C87402 * C87733) +
         C87524 * (3 * C87750 +
                   C87402 * (2 * C87402 * C87748 +
                             C87402 * (C87748 + std::pow(C87408, 7) * bs[7] *
                                                    C87739 * C87406)))) /
        C87283;
    const double C4982 =
        (ae * C87524 * C87609 + be * C87524 * C87733 +
         C87568 * C87524 *
             (2 * C87402 * C87769 +
              C87402 * (C87769 + (C87475 * C87476 +
                                  C87754 * bs[7] * std::pow(C87408, 7)) *
                                     C87282 * C87406))) /
        C87283;
    const double C570 = (4 * (2 * C87706 + C87402 * C87715) +
                         C87402 * (3 * C87715 + C87402 * C87733)) /
                        C87281;
    const double C1432 =
        (2 * C87706 + C87402 * C87715 + C87733 * C87656) / C87281;
    const double C3110 = (C87524 * (3 * C87715 + C87402 * C87733)) / C87281;
    const double C18648 = (4 * (2 * C88077 + C87524 * C88230) +
                           C87524 * (3 * C88230 + C87524 * C88377)) /
                          C87281;
    const double C27149 = C27145 * C89093;
    const double C208 = C89236 * C191;
    const double C947 = C89236 * C933;
    const double C38383 = C38294 * C933;
    const double C41132 = C38293 * C933;
    const double C950 = C89236 * C935;
    const double C39180 = C38293 * C935;
    const double C39175 = C38294 * C935;
    const double C1852 = C89236 * C1838;
    const double C42057 = C38293 * C1838;
    const double C1855 = C89236 * C1840;
    const double C40175 = C38293 * C1840;
    const double C4222 = C89236 * C4216;
    const double C40170 = C38294 * C4216;
    const double C43059 = C38293 * C4216;
    const double C33635 = C89236 * C14685;
    const double C78229 = C38294 * C14685;
    const double C81220 = C38294 * C16823;
    const double C31380 = C31374 * C89093;
    const double C35627 = C35621 * C89093;
    const double C87564 = C87557 + C87562;
    const double C88157 = C87471 + C88155;
    const double C27142 = C89236 * C10608;
    const double C88295 = C88287 + C88293;
    const double C31377 = C89236 * C23212;
    const double C83857 = C38294 * C23212;
    const double C15540 = C89093 * C1145;
    const double C39409 = C38292 * C1145;
    const double C41338 = C38291 * C1145;
    const double C14079 = C89093 * C1147;
    const double C39414 = C38291 * C1147;
    const double C39401 = C38292 * C1147;
    const double C28760 = C89093 * C2050;
    const double C56803 = C38292 * C2050;
    const double C58693 = C38291 * C2050;
    const double C27327 = C89093 * C2052;
    const double C56808 = C38291 * C2052;
    const double C56795 = C38292 * C2052;
    const double C17052 = C89093 * C4444;
    const double C43339 = C38291 * C4444;
    const double C43334 = C38292 * C4444;
    const double C18492 = C89093 * C14057;
    const double C87651 = C87644 + C87649;
    const double C88169 = C87470 + C88167;
    const double C27306 =
        (3 * (C87633 + C87647 * C87754) +
         C87568 *
             (2 * C88268 +
              C87568 * (C87647 + (be * C87643 + C87402 * std::pow(C87408, 7) *
                                                    bs[7] * C87617) *
                                     C87754))) /
        C87283;
    const double C29565 = C89093 * C6497;
    const double C45937 = C38292 * C6497;
    const double C27330 = C89093 * C10720;
    const double C67762 = C38292 * C10720;
    const double C88309 = C88301 + C88307;
    const double C31538 = C89093 * C23320;
    const double C35737 = C89093 * C27305;
    const double C21371 =
        (3 * (C88266 + ae * C87568 * C87923 + C87524 * C88407) +
         ae * C87568 * C88310 +
         C87524 * (2 * C88407 + ae * C87568 * C88306 +
                   C87524 * (C88405 + ae * C87568 * C87524 * C87491 +
                             C87524 * (ae * C87568 * C87491 +
                                       C87524 * C87568 * std::pow(C87408, 7) *
                                           bs[7] * C87617)))) /
        C87283;
    const double C13979 = C13975 * C89093;
    const double C291 = C89247 * C274;
    const double C1053 = C89247 * C1039;
    const double C57663 = C54750 * C1039;
    const double C1056 = C89247 * C1041;
    const double C55673 = C54750 * C1041;
    const double C1958 = C89247 * C1944;
    const double C54902 = C54751 * C1944;
    const double C58587 = C54750 * C1944;
    const double C1961 = C89247 * C1946;
    const double C56678 = C54750 * C1946;
    const double C56673 = C54751 * C1946;
    const double C4336 = C89247 * C4330;
    const double C55668 = C54751 * C4330;
    const double C59610 = C54750 * C4330;
    const double C18434 = C18428 * C89093;
    const double C21295 = C21289 * C89093;
    const double C87608 = C87601 + C87606;
    const double C88469 = C87471 + C88467;
    const double C29461 =
        (2 * (be * C88048 + C87568 * C88546) + be * (C88048 + C88547 * C87754) +
         C87568 * (C88546 + be * C87568 * C88547 +
                   C87568 * (be * C88547 +
                             C87568 * C87524 *
                                 (ae * C87600 + C87402 * std::pow(C87408, 7) *
                                                    bs[7] * C87574)))) /
        C87283;
    const double C13972 = C89247 * C5847;
    const double C16938 = C89247 * C8684;
    const double C55675 = C54751 * C8684;
    const double C31456 =
        (3 * (C88429 + be * C88567 + C87568 * C88572) +
         be * (2 * C88567 + C87568 * C88573) +
         C87568 * (2 * C88572 + be * C88573 +
                   C87568 * (C88568 + be * C87568 * C88569 +
                             C87568 * (be * C88569 + C87568 * C87524 *
                                                         std::pow(C87408, 7) *
                                                         bs[7] * C87574)))) /
        C87283;
    const double C88630 = C88622 + C88628;
    const double C513 = C511 * C89236;
    const double C18597 = C89247 * C14237;
    const double C21530 = C89247 * C17255;
    const double C77811 = C54751 * C17255;
    const double C3035 = C3032 * C89236;
    const double C3758 = C3755 * C89236;
    const double C1350 = C89247 * C1340;
    const double C3033 = C89247 * C1341;
    const double C2255 = C89247 * C2245;
    const double C58897 = C54751 * C2245;
    const double C3756 = C89247 * C2246;
    const double C55119 = C54751 * C2246;
    const double C4668 = C89247 * C4663;
    const double C57963 = C54751 * C4663;
    const double C14238 =
        (3 * (C88026 + ae * C88073 + C87524 * C88222) +
         ae * (2 * C88073 + C87524 * C88223) +
         C87524 * (2 * C88222 + ae * C88223 +
                   C87524 * (C88218 + ae * C87524 * C88219 +
                             C87524 * (ae * C88219 + C87524 * C87402 *
                                                         std::pow(C87408, 7) *
                                                         bs[7] * C87679)))) /
        C87283;
    const double C17256 =
        (2 * (ae * C88139 + C87524 * C88278) +
         ae * (C87568 * C88223 + C88200 * be) +
         C87524 * (C88278 + ae * (C87568 * C87524 * C88219 + C88199) +
                   C87524 * (ae * (C87568 * C88219 + C87492) +
                             C87524 * (be * C88196 + C87568 * C87402 *
                                                         std::pow(C87408, 7) *
                                                         bs[7] * C87679)))) /
        C87283;
    const double C27526 =
        (3 * (C88026 + be * C88480 + C87568 * C88278) +
         be * (2 * C88480 + C87568 * C88482) +
         C87568 * (2 * C88278 + be * C88482 +
                   C87568 * (C88218 + be * C87568 * C88196 +
                             C87568 * (be * C88196 + C87568 * C87402 *
                                                         std::pow(C87408, 7) *
                                                         bs[7] * C87679)))) /
        C87283;
    const double C88360 = C88357 + C88358;
    const double C88397 = C88395 + C88396;
    const double C88420 = C88419 + C88417;
    const double C15768 = C89093 * C1435;
    const double C39754 = C38292 * C1435;
    const double C41651 = C38291 * C1435;
    const double C14339 = C89093 * C1437;
    const double C39755 = C38291 * C1437;
    const double C39750 = C38292 * C1437;
    const double C28990 = C89093 * C2340;
    const double C57133 = C38292 * C2340;
    const double C58997 = C38291 * C2340;
    const double C27615 = C89093 * C2342;
    const double C57134 = C38291 * C2342;
    const double C57129 = C38292 * C2342;
    const double C17370 = C89093 * C4772;
    const double C43753 = C38291 * C4772;
    const double C43752 = C38292 * C4772;
    const double C35905 = C89093 * C27603;
    const double C87732 = C87725 + C87730;
    const double C88493 = C87470 + C88491;
    const double C29888 =
        (2 * (ae * C88063 + C87568 * C88552) + ae * (C88063 + C88553 * C87754) +
         C87568 * (C88552 + ae * C87568 * C88553 +
                   C87568 * (ae * C88553 +
                             C87568 * C87524 *
                                 (be * C87724 + C87402 * std::pow(C87408, 7) *
                                                    bs[7] * C87698)))) /
        C87283;
    const double C14340 = C89093 * C6065;
    const double C45391 = C38292 * C6065;
    const double C17372 = C89093 * C8998;
    const double C49195 = C38292 * C8998;
    const double C31775 =
        (3 * (C88438 + ae * C88582 + C87568 * C88587) +
         ae * (2 * C88582 + C87568 * C88588) +
         C87568 * (2 * C88587 + ae * C88588 +
                   C87568 * (C88583 + ae * C87568 * C88584 +
                             C87568 * (ae * C88584 + C87568 * C87524 *
                                                         std::pow(C87408, 7) *
                                                         bs[7] * C87698)))) /
        C87283;
    const double C88647 = C88639 + C88645;
    const double C647 = C645 * C89247;
    const double C35959 = C89236 * C27693;
    const double C3192 = C3189 * C89247;
    const double C3915 = C3912 * C89247;
    const double C1530 = C89236 * C1520;
    const double C41755 = C38294 * C1520;
    const double C3190 = C89236 * C1521;
    const double C38842 = C38294 * C1521;
    const double C2435 = C89236 * C2425;
    const double C3913 = C89236 * C2426;
    const double C4880 = C89236 * C4875;
    const double C42665 = C38294 * C4875;
    const double C14422 =
        (3 * (C88033 + be * C88074 + C87524 * C88236) +
         be * (2 * C88074 + C87524 * C88237) +
         C87524 * (2 * C88236 + be * C88237 +
                   C87524 * (C88232 + be * C87524 * C88233 +
                             C87524 * (be * C88233 + C87524 * C87402 *
                                                         std::pow(C87408, 7) *
                                                         bs[7] * C87739)))) /
        C87283;
    const double C29989 =
        (2 * (ae * C88016 + C87568 * C88236) + ae * (C88016 + C88204 * C87754) +
         C87568 * (C88236 + ae * C87568 * C88204 +
                   C87568 * (ae * C88204 +
                             C87568 * (be * C88233 + C87524 * C87402 *
                                                         std::pow(C87408, 7) *
                                                         bs[7] * C87739)))) /
        C87283;
    const double C27694 =
        (3 * (C88033 + ae * C88502 + C87568 * C88505) +
         ae * (2 * C88502 + C87568 * C88506) +
         C87568 * (2 * C88505 + ae * C88506 +
                   C87568 * (C88232 + ae * C87568 * C88193 +
                             C87568 * (ae * C88193 + C87568 * C87402 *
                                                         std::pow(C87408, 7) *
                                                         bs[7] * C87739)))) /
        C87283;
    const double C88376 = C88373 + C88374;
    const double C88593 = C88312 + C88591;
    const double C88658 = C88650 + C88656;
    const double C89333 = C89297 - C89322;
    const double C89334 = C89301 - C89324;
    const double C89335 = C89304 - C89326;
    const double C89336 = C89311 - C89327;
    const double C89337 = C89306 - C89329;
    const double C89338 = C89315 - C89330;
    const double C87293 = C89093 - C87292;
    const double C18488 = C14068 - C14069;
    const double C14085 = C14066 - C14067;
    const double C14084 = C14064 - C14065;
    const double C18652 = C14333 - C14334;
    const double C14342 = C14331 - C14332;
    const double C21373 = C17046 - C17047;
    const double C81426 = C17047 - C17046;
    const double C75826 = C17044 - C17045;
    const double C75824 = C17045 - C17044;
    const double C75825 = C17042 - C17043;
    const double C75823 = C17043 - C17042;
    const double C21609 = C17368 - C17369;
    const double C81740 = C17369 - C17368;
    const double C76240 = C17366 - C17367;
    const double C76239 = C17367 - C17366;
    const double C31534 = C19097 - C19096;
    const double C78435 = C19096 - C19097;
    const double C31777 = C19335 - C19334;
    const double C78749 = C19334 - C19335;
    const double C35734 = C27318 - C27319;
    const double C35733 = C27316 - C27317;
    const double C27333 = C27314 - C27315;
    const double C27332 = C27312 - C27313;
    const double C27618 = C27608 - C27609;
    const double C87338 = C89236 - C87337;
    const double C440 = C436 + C419;
    const double C27444 = C27440 + C27421;
    const double C87364 = C89247 - C87363;
    const double C731 = C727 + C710;
    const double C14524 = C14520 + C14503;
    const double C213 = C204 - C205;
    const double C296 = C287 - C288;
    const double C18489 = C14070 - C14071;
    const double C18596 = C14244 - C14245;
    const double C31535 = C19099 - C19098;
    const double C78436 = C19098 - C19099;
    const double C21374 = C17048 - C17049;
    const double C81427 = C17049 - C17048;
    const double C21529 = C17260 - C17261;
    const double C35904 = C27610 - C27611;
    const double C35958 = C27700 - C27701;
    const double C13976 = C13968 * C13261;
    const double C1256 = C1252 - C1244;
    const double C1636 = C1632 - C1624;
    const double C27146 = C27138 * C13261;
    const double C2161 = C2157 - C2149;
    const double C2541 = C2537 - C2529;
    const double C4560 = C4558 - C4552;
    const double C4994 = C4992 - C4986;
    const double C14086 = C14076 - C14077;
    const double C27334 = C27324 - C27325;
    const double C75829 = C17050 - C17051;
    const double C75827 = C17051 - C17050;
    const double C31855 = C29993 - C29994;
    const double C31373 = C29355 - C29356;
    const double C29680 = C29670 - C29671;
    const double C33867 = C33859 - C33860;
    const double C19498 = C19496 - C19490;
    const double C441 = C437 + C423;
    const double C442 = C438 + C427;
    const double C1259 = C1255 + C1241;
    const double C2164 = C2160 + C2146;
    const double C27445 = C27441 + C27425;
    const double C29685 = C29682 + C29669;
    const double C732 = C728 + C714;
    const double C733 = C729 + C718;
    const double C1639 = C1635 + C1621;
    const double C14525 = C14521 + C14507;
    const double C2544 = C2540 + C2526;
    const double C17593 = C17590 + C17581;
    const double C514 = C502 + C512;
    const double C648 = C636 + C646;
    const double C87468 = C87466 + C87454;
    const double C39182 = C38294 * C5791;
    const double C29361 = C89236 * C6337;
    const double C40177 = C38294 * C6337;
    const double C56680 = C54751 * C10664;
    const double C40279 = C89247 * C6417;
    const double C59612 = C54751 * C6417;
    const double C43061 = C38294 * C8604;
    const double C55561 = C89236 * C8604;
    const double C29246 = C13261 * C6253;
    const double C29362 = C180 * C6253;
    const double C40178 = C38366 * C6253;
    const double C40280 = C263 * C6253;
    const double C45629 = C38297 * C6253;
    const double C59613 = C54885 * C6253;
    const double C87467 = C87465 + C87451;
    const double C87489 = C87480 + C87471;
    const double C14082 = C89093 * C5903;
    const double C45189 = C38292 * C5903;
    const double C27616 = C89093 * C10882;
    const double C67966 = C38292 * C10882;
    const double C29890 = C89093 * C6731;
    const double C46235 = C38292 * C6731;
    const double C17056 = C89093 * C8764;
    const double C48897 = C38292 * C8764;
    const double C29244 = C13261 * C6252;
    const double C29563 = C89093 * C6252;
    const double C45627 = C38297 * C6252;
    const double C45933 = C38292 * C6252;
    const double C16703 = C89093 * C4110;
    const double C42908 = C38291 * C4110;
    const double C42900 = C38292 * C4110;
    const double C18847 = C89093 * C6258;
    const double C45626 = C38291 * C6258;
    const double C87514 = C87511 + C87495;
    const double C14764 =
        (C87590 + C87604 * C87656 + be * C87568 * C88158 +
         C87568 *
             (be * C88158 +
              C87568 * (C87604 + (ae * C87600 + C87402 * std::pow(C87408, 7) *
                                                    bs[7] * C87574) *
                                     C87656))) /
        C87283;
    const double C16926 =
        (be * (2 * C88048 + C87524 * C88158) +
         C87568 *
             (2 * C87524 * C87604 +
              C87524 * (C87604 + (ae * C87600 + C87402 * std::pow(C87408, 7) *
                                                    bs[7] * C87574) *
                                     C87656))) /
        C87283;
    const double C13748 = (3 * (C87434 + C87460 * C87656) +
                           C87524 * (2 * C88048 + C87524 * C88158)) /
                          C87281;
    const double C14606 = (C87434 + C87460 * C87656 + C88158 * C87754) / C87281;
    const double C16688 = (C87568 * (2 * C88048 + C87524 * C88158)) / C87281;
    const double C27002 = (3 * (C87434 + C87460 * C87754) +
                           C87568 * (2 * C88466 + C87568 * C88470)) /
                          C87281;
    const double C88342 = C88340 + C88329;
    const double C88688 = C88686 + C88680;
    const double C5901 = (2 * (C87524 * C87634 + C87452 * ae) +
                          C87524 * (C87634 + C87524 * C88010 + C88007 * ae) +
                          (C87452 + C87493 * C87656) * ae) /
                         C87281;
    const double C6495 =
        (C87524 * C87634 + C87452 * ae + C88010 * C87754) / C87281;
    const double C8762 =
        (C87568 * (C87634 + C87524 * C88010 + C88007 * ae)) / C87281;
    const double C10880 = (2 * (C87568 * C87715 + C87452 * ae) +
                           C87568 * (C87715 + C87568 * C88134 + C88131 * ae) +
                           (C87452 + C87493 * C87754) * ae) /
                          C87281;
    const double C4664 =
        (ae * (C87568 * C87609 + C87504 * be) +
         C87524 * (be * C87652 +
                   C87568 * (2 * C87402 * C87688 +
                             C87402 * (C87688 + std::pow(C87408, 7) * bs[7] *
                                                    C87679 * C87406)))) /
        C87283;
    const double C4876 =
        (ae * (C87524 * C87565 + C87504 * be) +
         C87568 * (be * C87733 +
                   C87524 * (2 * C87402 * C87748 +
                             C87402 * (C87748 + std::pow(C87408, 7) * bs[7] *
                                                    C87739 * C87406)))) /
        C87283;
    const double C930 =
        (2 * C87538 + C87402 * C87547 +
         C87524 * (C87524 * C87565 + C87504 * be) + C87524 * C87504 * be) /
        C87281;
    const double C1142 =
        (2 * C87625 + C87402 * C87634 +
         C87524 * (C87524 * C87652 + C87504 * ae) + C87524 * C87504 * ae) /
        C87281;
    const double C1941 =
        (2 * C87582 + C87402 * C87591 +
         C87568 * (C87568 * C87609 + C87504 * be) + C87568 * C87504 * be) /
        C87281;
    const double C2337 =
        (2 * C87706 + C87402 * C87715 +
         C87568 * (C87568 * C87733 + C87504 * ae) + C87568 * C87504 * ae) /
        C87281;
    const double C2707 = (C87524 * (3 * C87547 + C87402 * C87565) +
                          (3 * C87452 + C87402 * C87504) * be) /
                         C87281;
    const double C2871 = (C87524 * (3 * C87634 + C87402 * C87652) +
                          (3 * C87452 + C87402 * C87504) * ae) /
                         C87281;
    const double C3512 = (C87568 * (3 * C87591 + C87402 * C87609) +
                          (3 * C87452 + C87402 * C87504) * be) /
                         C87281;
    const double C3833 = (C87568 * (3 * C87715 + C87402 * C87733) +
                          (3 * C87452 + C87402 * C87504) * ae) /
                         C87281;
    const double C4214 = (C87568 * (C87524 * C87565 + C87504 * be)) / C87281;
    const double C4328 =
        (C87568 * C87524 * C87609 + C87524 * C87504 * be) / C87281;
    const double C4442 = (C87568 * (C87524 * C87652 + C87504 * ae)) / C87281;
    const double C4770 =
        (C87568 * C87524 * C87733 + C87524 * C87504 * ae) / C87281;
    const double C111 = 4 * (2 * C87423 + C87402 * C87452) +
                        C87402 * (3 * C87452 + C87402 * C87504);
    const double C824 = 2 * C87423 + C87402 * C87452 + C87504 * C87656;
    const double C1729 = 2 * C87423 + C87402 * C87452 + C87504 * C87754;
    const double C2629 = C87524 * (3 * C87452 + C87402 * C87504);
    const double C3352 = C87568 * (3 * C87452 + C87402 * C87504);
    const double C4100 = C87568 * C87524 * C87504;
    const double C6809 =
        (be * C87715 + C87524 * C87750 + ae * C87568 * C88009 +
         C87568 * (ae * C88009 +
                   C87568 * (be * C87729 +
                             C87524 * (C87748 + std::pow(C87408, 7) * bs[7] *
                                                    C87739 * C87406)))) /
        C87283;
    const double C9076 =
        (ae * (C87547 + C87524 * C88009 + C88007 * be) +
         C87568 * (C87750 + be * C88071 +
                   C87524 * (be * C87729 +
                             C87524 * (C87748 + std::pow(C87408, 7) * bs[7] *
                                                    C87739 * C87406)))) /
        C87283;
    const double C5789 = (2 * (C87524 * C87547 + C87452 * be) +
                          C87524 * (C87547 + C87524 * C88009 + C88007 * be) +
                          (C87452 + C87493 * C87656) * be) /
                         C87281;
    const double C6335 =
        (C87524 * C87547 + C87452 * be + C88009 * C87754) / C87281;
    const double C8602 =
        (C87568 * (C87547 + C87524 * C88009 + C88007 * be)) / C87281;
    const double C10662 = (2 * (C87568 * C87591 + C87452 * be) +
                           C87568 * (C87591 + C87568 * C88133 + C88131 * be) +
                           (C87452 + C87493 * C87754) * be) /
                          C87281;
    const double C88209 = C87636 + C88207;
    const double C88540 = C87717 + C88538;
    const double C88208 = C87549 + C88206;
    const double C88539 = C87593 + C88537;
    const double C29887 = (2 * (C87568 * C88074 + C88014 * ae) +
                           C87568 * (C88074 + C87568 * C88563 + C88558 * ae) +
                           (C88014 + C88194 * C87754) * ae) /
                          C87281;
    const double C29460 = (2 * (C87568 * C88073 + C88014 * be) +
                           C87568 * (C88073 + C87568 * C88562 + C88558 * be) +
                           (C88014 + C88194 * C87754) * be) /
                          C87281;
    const double C87513 = C87510 + C87492;
    const double C15072 =
        (C87714 + C87728 * C87656 + ae * C87568 * C88170 +
         C87568 *
             (ae * C88170 +
              C87568 * (C87728 + (be * C87724 + C87402 * std::pow(C87408, 7) *
                                                    bs[7] * C87698) *
                                     C87656))) /
        C87283;
    const double C17040 =
        (2 * (ae * C87568 * C87459 + C87524 * C88268) + ae * C87568 * C88170 +
         C87524 * (C88268 + ae * C87568 * C87524 * C87503 +
                   C87524 * (ae * C87568 * C87503 +
                             C87524 * C87568 *
                                 (be * C87643 + C87402 * std::pow(C87408, 7) *
                                                    bs[7] * C87617)))) /
        C87283;
    const double C17364 =
        (ae * (2 * C88063 + C87524 * C88170) +
         C87568 *
             (2 * C87524 * C87728 +
              C87524 * (C87728 + (be * C87724 + C87402 * std::pow(C87408, 7) *
                                                    bs[7] * C87698) *
                                     C87656))) /
        C87283;
    const double C13747 = (3 * (C87433 + C87459 * C87656) +
                           C87524 * (2 * C88063 + C87524 * C88170)) /
                          C87281;
    const double C14605 = (C87433 + C87459 * C87656 + C88170 * C87754) / C87281;
    const double C16687 = (C87568 * (2 * C88063 + C87524 * C88170)) / C87281;
    const double C29561 =
        (ae * (2 * C88490 + C87568 * C88494) +
         C87524 *
             (2 * C88268 +
              C87568 * (C87647 + (be * C87643 + C87402 * std::pow(C87408, 7) *
                                                    bs[7] * C87617) *
                                     C87754))) /
        C87283;
    const double C27001 = (3 * (C87433 + C87459 * C87754) +
                           C87568 * (2 * C88490 + C87568 * C88494)) /
                          C87281;
    const double C88341 = C88338 + C88326;
    const double C31370 = (3 * (C88022 + C88179 * C87754) +
                           C87568 * (2 * C88590 + C87568 * C88594)) /
                          C87281;
    const double C88687 = C88685 + C88677;
    const double C87512 = C87402 * C87509;
    const double C5734 =
        (2 * C87779 + C87524 * C87782 +
         ae * (2 * C87524 * C87459 + C87524 * (C87459 + C87503 * C87656)) +
         be * (2 * C87524 * C87460 + C87524 * (C87460 + C87505 * C87656)) +
         C87402 * (ae * (2 * C87923 + C87524 * (C87450 + C87491 * C87656)) +
                   be * (2 * C87924 + C87524 * (C87453 + C87494 * C87656)) +
                   C87402 * (2 * C87925 +
                             C87524 * (C87502 +
                                       (C87475 * C87476 +
                                        C87406 * bs[7] * std::pow(C87408, 7)) *
                                           C87282 * C87656)))) /
        C87283;
    const double C5735 =
        (ae * (2 * C87524 * C87427 + C87524 * (C87427 + C87450 * C87656)) +
         be * (2 * C87524 * C87428 + C87524 * (C87428 + C87453 * C87656)) +
         C87402 * (2 * C87779 + C87524 * C87782)) /
        C87283;
    const double C8523 =
        (C87568 * C87782 + ae * C87568 * (C87459 + C87503 * C87656) +
         be * C87568 * (C87460 + C87505 * C87656) +
         C87402 * (ae * C87568 * (C87450 + C87491 * C87656) +
                   be * C87568 * (C87453 + C87494 * C87656) +
                   C87402 * C87568 *
                       (C87502 + (C87475 * C87476 +
                                  C87406 * bs[7] * std::pow(C87408, 7)) *
                                     C87282 * C87656))) /
        C87283;
    const double C8524 =
        (ae * C87568 * (C87427 + C87450 * C87656) +
         be * C87568 * (C87428 + C87453 * C87656) + C87402 * C87568 * C87782) /
        C87283;
    const double C13749 = (3 * (C87432 + C87458 * C87656) +
                           C87524 * (2 * C87779 + C87524 * C87782)) /
                          C87283;
    const double C13750 =
        (ae * (3 * (C87427 + C87450 * C87656) +
               C87524 * (2 * C87923 + C87524 * (C87450 + C87491 * C87656))) +
         be * (3 * (C87428 + C87453 * C87656) +
               C87524 * (2 * C87924 + C87524 * (C87453 + C87494 * C87656))) +
         C87402 * (3 * C87782 +
                   C87524 * (2 * C87925 +
                             C87524 * (C87502 +
                                       (C87475 * C87476 +
                                        C87406 * bs[7] * std::pow(C87408, 7)) *
                                           C87282 * C87656)))) /
        C87283;
    const double C14607 = (C87432 + C87458 * C87656 + C87782 * C87754) / C87283;
    const double C14608 =
        (ae * (C88165 + (C87450 + C87491 * C87656) * C87754) +
         be * (C88153 + (C87453 + C87494 * C87656) * C87754) +
         C87402 * (C87782 + (C87502 + (C87475 * C87476 +
                                       C87406 * bs[7] * std::pow(C87408, 7)) *
                                          C87282 * C87656) *
                                C87754)) /
        C87283;
    const double C16689 = (C87568 * (2 * C87779 + C87524 * C87782)) / C87283;
    const double C18313 =
        (4 * (2 * C87779 + C87524 * C87782) +
         C87524 * (3 * C87782 +
                   C87524 * (2 * C87925 +
                             C87524 * (C87502 +
                                       (C87475 * C87476 +
                                        C87406 * bs[7] * std::pow(C87408, 7)) *
                                           C87282 * C87656)))) /
        C87283;
    const double C18842 =
        (2 * C87779 + C87524 * C87782 +
         (2 * C87925 +
          C87524 * (C87502 +
                    (C87475 * C87476 + C87406 * bs[7] * std::pow(C87408, 7)) *
                        C87282 * C87656)) *
             C87754) /
        C87283;
    const double C21126 =
        (C87568 *
         (3 * C87782 +
          C87524 * (2 * C87925 +
                    C87524 * (C87502 + (C87475 * C87476 +
                                        C87406 * bs[7] * std::pow(C87408, 7)) *
                                           C87282 * C87656)))) /
        C87283;
    const double C23158 =
        (2 * C87568 * C87782 +
         C87568 * (C87782 + (C87502 + (C87475 * C87476 +
                                       C87406 * bs[7] * std::pow(C87408, 7)) *
                                          C87282 * C87656) *
                                C87754)) /
        C87283;
    const double C10551 =
        (2 * C87854 + C87568 * C87857 +
         ae * (2 * C87568 * C87459 + C87568 * (C87459 + C87503 * C87754)) +
         be * (2 * C87568 * C87460 + C87568 * (C87460 + C87505 * C87754)) +
         C87402 * (ae * (2 * C87940 + C87568 * (C87450 + C87491 * C87754)) +
                   be * (2 * C87941 + C87568 * (C87453 + C87494 * C87754)) +
                   C87402 * (2 * C87942 +
                             C87568 * (C87502 +
                                       (C87475 * C87476 +
                                        C87406 * bs[7] * std::pow(C87408, 7)) *
                                           C87282 * C87754)))) /
        C87283;
    const double C10552 =
        (ae * (2 * C87568 * C87427 + C87568 * (C87427 + C87450 * C87754)) +
         be * (2 * C87568 * C87428 + C87568 * (C87428 + C87453 * C87754)) +
         C87402 * (2 * C87854 + C87568 * C87857)) /
        C87283;
    const double C27003 = (3 * (C87432 + C87458 * C87754) +
                           C87568 * (2 * C87854 + C87568 * C87857)) /
                          C87283;
    const double C27004 =
        (ae * (3 * (C87427 + C87450 * C87754) +
               C87568 * (2 * C87940 + C87568 * (C87450 + C87491 * C87754))) +
         be * (3 * (C87428 + C87453 * C87754) +
               C87568 * (2 * C87941 + C87568 * (C87453 + C87494 * C87754))) +
         C87402 * (3 * C87857 +
                   C87568 * (2 * C87942 +
                             C87568 * (C87502 +
                                       (C87475 * C87476 +
                                        C87406 * bs[7] * std::pow(C87408, 7)) *
                                           C87282 * C87754)))) /
        C87283;
    const double C35559 =
        (4 * (2 * C87854 + C87568 * C87857) +
         C87568 * (3 * C87857 +
                   C87568 * (2 * C87942 +
                             C87568 * (C87502 +
                                       (C87475 * C87476 +
                                        C87406 * bs[7] * std::pow(C87408, 7)) *
                                           C87282 * C87754)))) /
        C87283;
    const double C87930 = C87929 + C87928;
    const double C29242 =
        (ae * (2 * C87568 * C87923 +
               C87568 * (C87923 + C87524 * C87491 * C87754)) +
         be * (2 * C87568 * C87924 +
               C87568 * (C87924 + C87524 * C87494 * C87754)) +
         C87402 *
             (2 * C87960 +
              C87568 * (C87925 + C87524 *
                                     (C87475 * C87476 +
                                      C87406 * bs[7] * std::pow(C87408, 7)) *
                                     C87282 * C87754))) /
        C87283;
    const double C31288 =
        (3 * (C87779 + C87925 * C87754) +
         C87568 *
             (2 * C87960 +
              C87568 * (C87925 + C87524 *
                                     (C87475 * C87476 +
                                      C87406 * bs[7] * std::pow(C87408, 7)) *
                                     C87282 * C87754))) /
        C87283;
    const double C42912 = C38292 * C4111;
    const double C73606 = C89093 * C4111;
    const double C29247 = C89093 * C6257;
    const double C45630 = C38292 * C6257;
    const double C31293 = C89093 * C23159;
    const double C87947 = C87946 + C87945;
    const double C414 =
        (4 * (2 * C87402 * C87666 + C87402 * C87673) +
         C87402 * (3 * C87673 +
                   C87402 * (2 * C87402 * C87671 +
                             C87402 * (C87671 +
                                       (C87475 * C87476 +
                                        C87656 * bs[7] * std::pow(C87408, 7)) *
                                           C87282 * C87406)))) /
        C87283;
    const double C1230 =
        (C87661 + C87666 * C87406 + ae * (C87524 * C87547 + C87452 * be) +
         be * (C87524 * C87634 + C87452 * ae) +
         C87524 * (ae * C87547 + be * C87634 + C87524 * C87673)) /
        C87283;
    const double C1231 = (ae * (2 * C87538 + C87402 * C87547) +
                          be * (2 * C87625 + C87402 * C87634) +
                          C87524 * (2 * C87402 * C87666 + C87402 * C87673)) /
                         C87283;
    const double C1232 =
        (2 * C87402 * C87666 + C87402 * C87673 +
         ae * (C87524 * C87565 + C87504 * be) +
         be * (C87524 * C87652 + C87504 * ae) +
         C87524 * (ae * C87565 + be * C87652 +
                   C87524 * (2 * C87402 * C87671 +
                             C87402 * (C87671 +
                                       (C87475 * C87476 +
                                        C87656 * bs[7] * std::pow(C87408, 7)) *
                                           C87282 * C87406)))) /
        C87283;
    const double C2135 = (C87661 + C87666 * C87406 + C87673 * C87754) / C87283;
    const double C2136 =
        (C87568 * (2 * C87402 * C87666 + C87402 * C87673)) / C87283;
    const double C2137 =
        (2 * C87402 * C87666 + C87402 * C87673 +
         (2 * C87402 * C87671 +
          C87402 * (C87671 +
                    (C87475 * C87476 + C87656 * bs[7] * std::pow(C87408, 7)) *
                        C87282 * C87406)) *
             C87754) /
        C87283;
    const double C2947 =
        (ae * (3 * C87547 + C87402 * C87565) +
         be * (3 * C87634 + C87402 * C87652) +
         C87524 * (3 * C87673 +
                   C87402 * (2 * C87402 * C87671 +
                             C87402 * (C87671 +
                                       (C87475 * C87476 +
                                        C87656 * bs[7] * std::pow(C87408, 7)) *
                                           C87282 * C87406)))) /
        C87283;
    const double C3670 =
        (C87568 *
         (3 * C87673 +
          C87402 * (2 * C87402 * C87671 +
                    C87402 * (C87671 + (C87475 * C87476 +
                                        C87656 * bs[7] * std::pow(C87408, 7)) *
                                           C87282 * C87406)))) /
        C87283;
    const double C4547 = (ae * C87568 * C87547 + be * C87568 * C87634 +
                          C87524 * C87568 * C87673) /
                         C87283;
    const double C5955 =
        (2 * (ae * C87547 + be * C87634 + C87524 * C87673) +
         ae * (C87547 + C87524 * C88009 + C88007 * be) +
         be * (C87634 + C87524 * C88010 + C88007 * ae) +
         C87524 * (C87673 + ae * C88009 + be * C88010 +
                   C87524 * (ae * C87561 + be * C87648 +
                             C87524 * (C87671 +
                                       (C87475 * C87476 +
                                        C87656 * bs[7] * std::pow(C87408, 7)) *
                                           C87282 * C87406)))) /
        C87283;
    const double C6573 =
        (ae * (C87547 + C87561 * C87754) + be * (C87634 + C87648 * C87754) +
         C87524 * (C87673 + (C87671 + (C87475 * C87476 +
                                       C87656 * bs[7] * std::pow(C87408, 7)) *
                                          C87282 * C87406) *
                                C87754)) /
        C87283;
    const double C8840 =
        (C87568 * C87673 + ae * C87568 * C88009 + be * C87568 * C88010 +
         C87524 * (ae * C87568 * C87561 + be * C87568 * C87648 +
                   C87524 * C87568 *
                       (C87671 + (C87475 * C87476 +
                                  C87656 * bs[7] * std::pow(C87408, 7)) *
                                     C87282 * C87406))) /
        C87283;
    const double C10772 =
        (2 * C87568 * C87673 +
         C87568 * (C87673 + (C87671 + (C87475 * C87476 +
                                       C87656 * bs[7] * std::pow(C87408, 7)) *
                                          C87282 * C87406) *
                                C87754)) /
        C87283;
    const double C88203 = C88191 + C88197;
    const double C27416 =
        (3 * (C88012 + C88192 * C87754) +
         C87568 *
             (2 * C88272 +
              C87568 * (C88192 + C87402 *
                                     (C87475 * C87476 +
                                      C87656 * bs[7] * std::pow(C87408, 7)) *
                                     C87282 * C87754))) /
        C87283;
    const double C29664 =
        (ae * (2 * C88502 + C87568 * C88506) +
         be * (2 * C88480 + C87568 * C88482) +
         C87524 *
             (2 * C88272 +
              C87568 * (C88192 + C87402 *
                                     (C87475 * C87476 +
                                      C87656 * bs[7] * std::pow(C87408, 7)) *
                                     C87282 * C87754))) /
        C87283;
    const double C88331 = C87524 * C88324;
    const double C23372 =
        (2 * C88270 + C87568 * C88389 +
         ae * (2 * C87568 * C88179 + C87568 * (C88179 + C88325 * C87754)) +
         be * (2 * C87568 * C88182 + C87568 * (C88182 + C88328 * C87754)) +
         C87524 * (ae * (2 * C88409 + C87568 * (C87543 + C87556 * C87754)) +
                   be * (2 * C88391 + C87568 * (C87630 + C87643 * C87754)) +
                   C87524 * (2 * C88410 +
                             C87568 * (C87671 +
                                       (C87475 * C87476 +
                                        C87656 * bs[7] * std::pow(C87408, 7)) *
                                           C87282 * C87754)))) /
        C87283;
    const double C23373 =
        (ae * (2 * C87568 * C87536 + C87568 * (C87536 + C87543 * C87754)) +
         be * (2 * C87568 * C87623 + C87568 * (C87623 + C87630 * C87754)) +
         C87524 * (2 * C88270 + C87568 * C88389)) /
        C87283;
    const double C27415 = (3 * (C87661 + C87666 * C87754) +
                           C87568 * (2 * C88270 + C87568 * C88389)) /
                          C87283;
    const double C31616 =
        (ae * (3 * C88500 +
               C87568 * (2 * C88409 + C87568 * (C87543 + C87556 * C87754))) +
         be * (3 * C88478 +
               C87568 * (2 * C88391 + C87568 * (C87630 + C87643 * C87754))) +
         C87524 * (3 * C88389 +
                   C87568 * (2 * C88410 +
                             C87568 * (C87671 +
                                       (C87475 * C87476 +
                                        C87656 * bs[7] * std::pow(C87408, 7)) *
                                           C87282 * C87754)))) /
        C87283;
    const double C35791 =
        (4 * (2 * C88270 + C87568 * C88389) +
         C87568 * (3 * C88389 +
                   C87568 * (2 * C88410 +
                             C87568 * (C87671 +
                                       (C87475 * C87476 +
                                        C87656 * bs[7] * std::pow(C87408, 7)) *
                                           C87282 * C87754)))) /
        C87283;
    const double C88414 = C88413 + C88412;
    const double C705 =
        (4 * (2 * C87402 * C87764 + C87402 * C87771) +
         C87402 * (3 * C87771 +
                   C87402 * (2 * C87402 * C87769 +
                             C87402 * (C87769 +
                                       (C87475 * C87476 +
                                        C87754 * bs[7] * std::pow(C87408, 7)) *
                                           C87282 * C87406)))) /
        C87283;
    const double C1610 = (C87759 + C87764 * C87406 + C87771 * C87656) / C87283;
    const double C1611 =
        (C87524 * (2 * C87402 * C87764 + C87402 * C87771)) / C87283;
    const double C1612 =
        (2 * C87402 * C87764 + C87402 * C87771 +
         (2 * C87402 * C87769 +
          C87402 * (C87769 +
                    (C87475 * C87476 + C87754 * bs[7] * std::pow(C87408, 7)) *
                        C87282 * C87406)) *
             C87656) /
        C87283;
    const double C2515 =
        (C87759 + C87764 * C87406 + ae * (C87568 * C87591 + C87452 * be) +
         be * (C87568 * C87715 + C87452 * ae) +
         C87568 * (ae * C87591 + be * C87715 + C87568 * C87771)) /
        C87283;
    const double C2516 = (ae * (2 * C87582 + C87402 * C87591) +
                          be * (2 * C87706 + C87402 * C87715) +
                          C87568 * (2 * C87402 * C87764 + C87402 * C87771)) /
                         C87283;
    const double C2517 =
        (2 * C87402 * C87764 + C87402 * C87771 +
         ae * (C87568 * C87609 + C87504 * be) +
         be * (C87568 * C87733 + C87504 * ae) +
         C87568 * (ae * C87609 + be * C87733 +
                   C87568 * (2 * C87402 * C87769 +
                             C87402 * (C87769 +
                                       (C87475 * C87476 +
                                        C87754 * bs[7] * std::pow(C87408, 7)) *
                                           C87282 * C87406)))) /
        C87283;
    const double C3267 =
        (C87524 *
         (3 * C87771 +
          C87402 * (2 * C87402 * C87769 +
                    C87402 * (C87769 + (C87475 * C87476 +
                                        C87754 * bs[7] * std::pow(C87408, 7)) *
                                           C87282 * C87406)))) /
        C87283;
    const double C3990 =
        (ae * (3 * C87591 + C87402 * C87609) +
         be * (3 * C87715 + C87402 * C87733) +
         C87568 * (3 * C87771 +
                   C87402 * (2 * C87402 * C87769 +
                             C87402 * (C87769 +
                                       (C87475 * C87476 +
                                        C87754 * bs[7] * std::pow(C87408, 7)) *
                                           C87282 * C87406)))) /
        C87283;
    const double C4981 = (ae * C87524 * C87591 + be * C87524 * C87715 +
                          C87568 * C87524 * C87771) /
                         C87283;
    const double C6170 =
        (2 * C87524 * C87771 +
         C87524 * (C87771 + (C87769 + (C87475 * C87476 +
                                       C87754 * bs[7] * std::pow(C87408, 7)) *
                                          C87282 * C87406) *
                                C87656)) /
        C87283;
    const double C6884 =
        (C87524 * C87771 + ae * (C87568 * C88070 + C88007 * be) +
         be * (C87568 * C88071 + C88007 * ae) +
         C87568 * (ae * C88070 + be * C88071 +
                   C87568 * C87524 *
                       (C87769 + (C87475 * C87476 +
                                  C87754 * bs[7] * std::pow(C87408, 7)) *
                                     C87282 * C87406))) /
        C87283;
    const double C9151 =
        (ae * (C87591 + C87605 * C87656) + be * (C87715 + C87729 * C87656) +
         C87568 * (C87771 + (C87769 + (C87475 * C87476 +
                                       C87754 * bs[7] * std::pow(C87408, 7)) *
                                          C87282 * C87406) *
                                C87656)) /
        C87283;
    const double C10987 =
        (2 * (ae * C87591 + be * C87715 + C87568 * C87771) +
         ae * (C87591 + C87568 * C88133 + C88131 * be) +
         be * (C87715 + C87568 * C88134 + C88131 * ae) +
         C87568 * (C87771 + ae * C88133 + be * C88134 +
                   C87568 * (ae * C87605 + be * C87729 +
                             C87568 * (C87769 +
                                       (C87475 * C87476 +
                                        C87754 * bs[7] * std::pow(C87408, 7)) *
                                           C87282 * C87406)))) /
        C87283;
    const double C88531 = C88525 + C88526;
    const double C30094 =
        (2 * (ae * C88073 + be * C88074 + C87568 * C88556) +
         ae * (C88073 + C87568 * C88562 + C88558 * be) +
         be * (C88074 + C87568 * C88563 + C88558 * ae) +
         C87568 * (C88556 + ae * C88562 + be * C88563 +
                   C87568 * (ae * C88557 + be * C88559 +
                             C87568 * C87524 * C87402 *
                                 (C87475 * C87476 +
                                  C87754 * bs[7] * std::pow(C87408, 7)) *
                                 C87282))) /
        C87283;
    const double C18757 =
        (4 * (2 * C87524 * C87764 + C87524 * C88380) +
         C87524 * (3 * C88380 +
                   C87524 * (2 * C87524 * C87769 +
                             C87524 * (C87769 +
                                       (C87475 * C87476 +
                                        C87754 * bs[7] * std::pow(C87408, 7)) *
                                           C87282 * C87656)))) /
        C87283;
    const double C21762 =
        (ae * (3 * C88216 + C87524 * C88361) +
         be * (3 * C88230 + C87524 * C88377) +
         C87568 * (3 * C88380 +
                   C87524 * (2 * C87524 * C87769 +
                             C87524 * (C87769 +
                                       (C87475 * C87476 +
                                        C87754 * bs[7] * std::pow(C87408, 7)) *
                                           C87282 * C87656)))) /
        C87283;
    const double C88608 = C88596 + C88602;
    const double C88681 = C87568 * C88675;
    const double C23477 = (2 * (C87568 * C88230 + C88181 * ae) +
                           C87568 * (C88230 + C87568 * C88447 + C88444 * ae) +
                           (C88181 + C88327 * C87754) * ae) /
                          C87281;
    const double C19486 =
        (2 * C87524 * C87764 + C87524 * C88380 +
         ae * (C87568 * C88361 + C88339 * be) +
         be * (C87568 * C88377 + C88339 * ae) +
         C87568 * (ae * C88361 + be * C88377 +
                   C87568 * (2 * C87524 * C87769 +
                             C87524 * (C87769 +
                                       (C87475 * C87476 +
                                        C87754 * bs[7] * std::pow(C87408, 7)) *
                                           C87282 * C87656)))) /
        C87283;
    const double C19009 =
        (2 * C88076 + C87524 * C88216 +
         C87568 * (C87568 * C88361 + C88339 * be) + C87568 * C88339 * be) /
        C87281;
    const double C19331 =
        (2 * C88077 + C87524 * C88230 +
         C87568 * (C87568 * C88377 + C88339 * ae) + C87568 * C88339 * ae) /
        C87281;
    const double C21285 = (C87568 * (3 * C88216 + C87524 * C88361) +
                           (3 * C88181 + C87524 * C88339) * be) /
                          C87281;
    const double C21605 = (C87568 * (3 * C88230 + C87524 * C88377) +
                           (3 * C88181 + C87524 * C88339) * ae) /
                          C87281;
    const double C18310 = 4 * (2 * C88020 + C87524 * C88181) +
                          C87524 * (3 * C88181 + C87524 * C88339);
    const double C18839 = 2 * C88020 + C87524 * C88181 + C88339 * C87754;
    const double C21123 = C87568 * (3 * C88181 + C87524 * C88339);
    const double C23582 =
        (2 * (ae * C88216 + be * C88230 + C87568 * C88380) +
         ae * (C88216 + C87568 * C88446 + C88444 * be) +
         be * (C88230 + C87568 * C88447 + C88444 * ae) +
         C87568 * (C88380 + ae * C88446 + be * C88447 +
                   C87568 * (ae * C88356 + be * C88372 +
                             C87568 * (C87769 +
                                       (C87475 * C87476 +
                                        C87754 * bs[7] * std::pow(C87408, 7)) *
                                           C87282 * C87656)))) /
        C87283;
    const double C23265 = (2 * (C87568 * C88216 + C88181 * be) +
                           C87568 * (C88216 + C87568 * C88446 + C88444 * be) +
                           (C88181 + C88327 * C87754) * be) /
                          C87281;
    const double C88614 = C88366 + C88612;
    const double C88613 = C88350 + C88611;
    const double C35556 = 4 * (2 * C88143 + C87568 * C88517) +
                          C87568 * (3 * C88517 + C87568 * C88678);
    const double C435 = C428 - C429;
    const double C1253 = C1246 - C1247;
    const double C2953 = C2949 - C2950;
    const double C2158 = C2151 - C2152;
    const double C3676 = C3672 - C3673;
    const double C4559 = C4554 - C4555;
    const double C29995 = C89236 * C6808;
    const double C40807 = C38294 * C6808;
    const double C43889 = C38294 * C9075;
    const double C56182 = C89236 * C9075;
    const double C39178 = C38294 * C5788;
    const double C39528 = C38366 * C5788;
    const double C29359 = C89236 * C6334;
    const double C29675 = C180 * C6334;
    const double C40173 = C38294 * C6334;
    const double C40489 = C38366 * C6334;
    const double C43057 = C38294 * C8601;
    const double C43477 = C38366 * C8601;
    const double C55559 = C89236 * C8601;
    const double C55873 = C180 * C8601;
    const double C27443 = C27439 - C27434;
    const double C88188 = C88186 + C88180;
    const double C88330 = C88323 + C88313;
    const double C31856 = C89236 * C23530;
    const double C84271 = C38294 * C23530;
    const double C31622 = C31618 - C31619;
    const double C35797 = C35793 - C35794;
    const double C726 = C719 - C720;
    const double C1633 = C1626 - C1627;
    const double C3273 = C3269 - C3270;
    const double C2538 = C2531 - C2532;
    const double C3996 = C3992 - C3993;
    const double C4993 = C4988 - C4989;
    const double C40914 = C40910 - C40911;
    const double C56676 = C54751 * C10661;
    const double C57349 = C54885 * C10661;
    const double C14523 = C14519 - C14514;
    const double C17591 = C17588 - C17584;
    const double C18763 = C18759 - C18760;
    const double C19497 = C19492 - C19493;
    const double C21768 = C21764 - C21765;
    const double C78331 = C54751 * C23264;
    const double C78954 = C54885 * C23264;
    const double C88674 = C88661 + C88662;
    const double C88520 = C88515 + C88516;
    const double C14083 = C13261 * C5900;
    const double C14248 = C263 * C5900;
    const double C39530 = C38366 * C5900;
    const double C45190 = C38297 * C5900;
    const double C29566 = C13261 * C6494;
    const double C29677 = C180 * C6494;
    const double C40491 = C38366 * C6494;
    const double C40604 = C263 * C6494;
    const double C45938 = C38297 * C6494;
    const double C60011 = C54885 * C6494;
    const double C17057 = C13261 * C8761;
    const double C17263 = C263 * C8761;
    const double C43479 = C38366 * C8761;
    const double C48898 = C38297 * C8761;
    const double C55875 = C180 * C8761;
    const double C55985 = C54885 * C8761;
    const double C88189 = C88187 + C88183;
    const double C39531 = C38294 * C5956;
    const double C29678 = C89236 * C6574;
    const double C40492 = C38294 * C6574;
    const double C43480 = C38294 * C8841;
    const double C55876 = C89236 * C8841;
    const double C27435 = C89236 * C10773;
    const double C1258 = C1254 + C1237;
    const double C2163 = C2159 + C2142;
    const double C27446 = C27442 + C27429;
    const double C27617 = C13261 * C10879;
    const double C27704 = C180 * C10879;
    const double C57351 = C54885 * C10879;
    const double C67967 = C38297 * C10879;
    const double C31779 = C13261 * C23476;
    const double C31857 = C180 * C23476;
    const double C78956 = C54885 * C23476;
    const double C84272 = C38366 * C23476;
    const double C88523 = C88522 + C88519;
    const double C14515 = C89247 * C6171;
    const double C40913 = C89247 * C6885;
    const double C60411 = C54751 * C6885;
    const double C17585 = C89247 * C9152;
    const double C56297 = C54751 * C9152;
    const double C57352 = C54751 * C10988;
    const double C78957 = C54751 * C23583;
    const double C1638 = C1634 + C1617;
    const double C2543 = C2539 + C2522;
    const double C14526 = C14522 + C14511;
    const double C17592 = C17589 + C17577;
    const double C27151 = C27148 + C27149;
    const double C2711 = C946 - C947;
    const double C3434 = C1851 - C1852;
    const double C58484 = C1852 - C1851;
    const double C27139 = C1856 - C1855;
    const double C56567 = C1855 - C1856;
    const double C59475 = C4222 - C4223;
    const double C59473 = C4223 - C4222;
    const double C35628 = C35626 + C35627;
    const double C192 =
        (4 * (2 * C87546 + ae * C87547 + C87402 * C87564) +
         ae * (3 * C87547 + C87402 * C87565) +
         C87402 * (3 * C87564 + ae * C87565 +
                   C87402 * (2 * C87560 + ae * C87561 +
                             C87402 * (C87554 + ae * C87402 * C87556 +
                                       C87402 * (ae * C87556 +
                                                 C87402 * std::pow(C87408, 7) *
                                                     bs[7] * C87530))))) /
        C87283;
    const double C1841 =
        (C87535 + ae * C87538 + C87402 * C87546 + C87564 * C87754) / C87283;
    const double C1842 =
        (C87568 * (2 * C87546 + ae * C87547 + C87402 * C87564)) / C87283;
    const double C1843 =
        (2 * C87546 + ae * C87547 + C87402 * C87564 +
         (2 * C87560 + ae * C87561 +
          C87402 * (C87554 + ae * C87402 * C87556 +
                    C87402 * (ae * C87556 +
                              C87402 * std::pow(C87408, 7) * bs[7] * C87530))) *
             C87754) /
        C87283;
    const double C3431 =
        (C87568 * (3 * C87564 + ae * C87565 +
                   C87402 * (2 * C87560 + ae * C87561 +
                             C87402 * (C87554 + ae * C87402 * C87556 +
                                       C87402 * (ae * C87556 +
                                                 C87402 * std::pow(C87408, 7) *
                                                     bs[7] * C87530))))) /
        C87283;
    const double C10609 =
        (2 * C87568 * C87564 +
         C87568 *
             (C87564 + (C87554 + ae * C87402 * C87556 +
                        C87402 * (ae * C87556 + C87402 * std::pow(C87408, 7) *
                                                    bs[7] * C87530)) *
                           C87754)) /
        C87283;
    const double C13876 =
        (3 * (C87546 + be * C88048 + C87524 * C88157) +
         be * (2 * C88048 + C87524 * C88158) +
         C87524 * (2 * C88157 + be * C88158 +
                   C87524 * (C87560 + be * C87524 * C87505 +
                             C87524 * (be * C87505 +
                                       C87524 * (ae * C87556 +
                                                 C87402 * std::pow(C87408, 7) *
                                                     bs[7] * C87530))))) /
        C87283;
    const double C14686 =
        (C87546 + be * C88048 + C87524 * C88157 +
         (C87560 + be * C87524 * C87505 +
          C87524 * (be * C87505 +
                    C87524 * (ae * C87556 +
                              C87402 * std::pow(C87408, 7) * bs[7] * C87530))) *
             C87754) /
        C87283;
    const double C16824 =
        (C87568 * (2 * C88157 + be * C88158 +
                   C87524 * (C87560 + be * C87524 * C87505 +
                             C87524 * (be * C87505 +
                                       C87524 * (ae * C87556 +
                                                 C87402 * std::pow(C87408, 7) *
                                                     bs[7] * C87530))))) /
        C87283;
    const double C29349 =
        (2 * C87568 * C88157 +
         C87568 *
             (C88157 + (be * C87505 +
                        C87524 * (ae * C87556 + C87402 * std::pow(C87408, 7) *
                                                    bs[7] * C87530)) *
                           C87754)) /
        C87283;
    const double C18373 =
        (4 * (2 * C88152 + be * C88153 + C87524 * C88295) +
         be * (3 * C88153 + C87524 * C88296) +
         C87524 * (3 * C88295 + be * C88296 +
                   C87524 * (2 * C88291 + be * C88292 +
                             C87524 * (C87554 + be * C87524 * C87494 +
                                       C87524 * (be * C87494 +
                                                 C87524 * std::pow(C87408, 7) *
                                                     bs[7] * C87530))))) /
        C87283;
    const double C18934 =
        (2 * C88152 + be * C88153 + C87524 * C88295 +
         (2 * C88291 + be * C88292 +
          C87524 * (C87554 + be * C87524 * C87494 +
                    C87524 * (be * C87494 +
                              C87524 * std::pow(C87408, 7) * bs[7] * C87530))) *
             C87754) /
        C87283;
    const double C21210 =
        (C87568 * (3 * C88295 + be * C88296 +
                   C87524 * (2 * C88291 + be * C88292 +
                             C87524 * (C87554 + be * C87524 * C87494 +
                                       C87524 * (be * C87494 +
                                                 C87524 * std::pow(C87408, 7) *
                                                     bs[7] * C87530))))) /
        C87283;
    const double C23213 =
        (2 * C87568 * C88295 +
         C87568 *
             (C88295 + (C87554 + be * C87524 * C87494 +
                        C87524 * (be * C87494 + C87524 * std::pow(C87408, 7) *
                                                    bs[7] * C87530)) *
                           C87754)) /
        C87283;
    const double C14087 = C14078 - C14079;
    const double C27335 = C27326 - C27327;
    const double C75830 = C17052 - C17053;
    const double C75828 = C17053 - C17052;
    const double C357 =
        (4 * (2 * C87633 + be * C87634 + C87402 * C87651) +
         be * (3 * C87634 + C87402 * C87652) +
         C87402 * (3 * C87651 + be * C87652 +
                   C87402 * (2 * C87647 + be * C87648 +
                             C87402 * (C87641 + be * C87402 * C87643 +
                                       C87402 * (be * C87643 +
                                                 C87402 * std::pow(C87408, 7) *
                                                     bs[7] * C87617))))) /
        C87283;
    const double C2053 =
        (C87622 + be * C87625 + C87402 * C87633 + C87651 * C87754) / C87283;
    const double C2054 =
        (C87568 * (2 * C87633 + be * C87634 + C87402 * C87651)) / C87283;
    const double C2055 =
        (2 * C87633 + be * C87634 + C87402 * C87651 +
         (2 * C87647 + be * C87648 +
          C87402 * (C87641 + be * C87402 * C87643 +
                    C87402 * (be * C87643 +
                              C87402 * std::pow(C87408, 7) * bs[7] * C87617))) *
             C87754) /
        C87283;
    const double C3595 =
        (C87568 * (3 * C87651 + be * C87652 +
                   C87402 * (2 * C87647 + be * C87648 +
                             C87402 * (C87641 + be * C87402 * C87643 +
                                       C87402 * (be * C87643 +
                                                 C87402 * std::pow(C87408, 7) *
                                                     bs[7] * C87617))))) /
        C87283;
    const double C10721 =
        (2 * C87568 * C87651 +
         C87568 *
             (C87651 + (C87641 + be * C87402 * C87643 +
                        C87402 * (be * C87643 + C87402 * std::pow(C87408, 7) *
                                                    bs[7] * C87617)) *
                           C87754)) /
        C87283;
    const double C14058 =
        (3 * (C87633 + ae * C88063 + C87524 * C88169) +
         ae * (2 * C88063 + C87524 * C88170) +
         C87524 * (2 * C88169 + ae * C88170 +
                   C87524 * (C87647 + ae * C87524 * C87503 +
                             C87524 * (ae * C87503 +
                                       C87524 * (be * C87643 +
                                                 C87402 * std::pow(C87408, 7) *
                                                     bs[7] * C87617))))) /
        C87283;
    const double C18486 =
        (4 * (2 * C88164 + ae * C88165 + C87524 * C88309) +
         ae * (3 * C88165 + C87524 * C88310) +
         C87524 * (3 * C88309 + ae * C88310 +
                   C87524 * (2 * C88305 + ae * C88306 +
                             C87524 * (C87641 + ae * C87524 * C87491 +
                                       C87524 * (ae * C87491 +
                                                 C87524 * std::pow(C87408, 7) *
                                                     bs[7] * C87617))))) /
        C87283;
    const double C13981 = C13978 + C13979;
    const double C2793 = C1052 - C1053;
    const double C41235 = C1053 - C1052;
    const double C13969 = C1057 - C1056;
    const double C39287 = C1056 - C1057;
    const double C3516 = C1957 - C1958;
    const double C43196 = C4336 - C4337;
    const double C43194 = C4337 - C4336;
    const double C18435 = C18433 + C18434;
    const double C21296 = C21294 + C21295;
    const double C275 =
        (4 * (2 * C87590 + ae * C87591 + C87402 * C87608) +
         ae * (3 * C87591 + C87402 * C87609) +
         C87402 * (3 * C87608 + ae * C87609 +
                   C87402 * (2 * C87604 + ae * C87605 +
                             C87402 * (C87598 + ae * C87402 * C87600 +
                                       C87402 * (ae * C87600 +
                                                 C87402 * std::pow(C87408, 7) *
                                                     bs[7] * C87574))))) /
        C87283;
    const double C1042 =
        (C87579 + ae * C87582 + C87402 * C87590 + C87608 * C87656) / C87283;
    const double C1043 =
        (C87524 * (2 * C87590 + ae * C87591 + C87402 * C87608)) / C87283;
    const double C1044 =
        (2 * C87590 + ae * C87591 + C87402 * C87608 +
         (2 * C87604 + ae * C87605 +
          C87402 * (C87598 + ae * C87402 * C87600 +
                    C87402 * (ae * C87600 +
                              C87402 * std::pow(C87408, 7) * bs[7] * C87574))) *
             C87656) /
        C87283;
    const double C2790 =
        (C87524 * (3 * C87608 + ae * C87609 +
                   C87402 * (2 * C87604 + ae * C87605 +
                             C87402 * (C87598 + ae * C87402 * C87600 +
                                       C87402 * (ae * C87600 +
                                                 C87402 * std::pow(C87408, 7) *
                                                     bs[7] * C87574))))) /
        C87283;
    const double C5848 =
        (2 * C87524 * C87608 +
         C87524 *
             (C87608 + (C87598 + ae * C87402 * C87600 +
                        C87402 * (ae * C87600 + C87402 * std::pow(C87408, 7) *
                                                    bs[7] * C87574)) *
                           C87656)) /
        C87283;
    const double C27228 =
        (3 * (C87590 + be * C88466 + C87568 * C88469) +
         be * (2 * C88466 + C87568 * C88470) +
         C87568 * (2 * C88469 + be * C88470 +
                   C87568 * (C87604 + be * C87568 * C87505 +
                             C87568 * (be * C87505 +
                                       C87568 * (ae * C87600 +
                                                 C87402 * std::pow(C87408, 7) *
                                                     bs[7] * C87574))))) /
        C87283;
    const double C35679 =
        (4 * (2 * C88463 + be * C88464 + C87568 * C88630) +
         be * (3 * C88464 + C87568 * C88631) +
         C87568 * (3 * C88630 + be * C88631 +
                   C87568 * (2 * C88626 + be * C88627 +
                             C87568 * (C87598 + be * C87568 * C87494 +
                                       C87568 * (be * C87494 +
                                                 C87568 * std::pow(C87408, 7) *
                                                     bs[7] * C87574))))) /
        C87283;
    const double C515 = C505 + C513;
    const double C3036 = C3031 + C3035;
    const double C3759 = C3754 + C3758;
    const double C18594 =
        (4 * (2 * C88215 + ae * C88216 + C87524 * C88360) +
         ae * (3 * C88216 + C87524 * C88361) +
         C87524 * (3 * C88360 + ae * C88361 +
                   C87524 * (2 * C88354 + ae * C88356 +
                             C87524 * (C87688 + ae * C87524 * C87600 +
                                       C87524 * (ae * C87600 +
                                                 C87524 * std::pow(C87408, 7) *
                                                     bs[7] * C87679))))) /
        C87283;
    const double C19252 =
        (2 * (ae * (C87580 + C87568 * (C87568 * C87587 + C87444) +
                    C87568 * C87438 * be) +
              C87524 * C88397) +
         ae * (C88216 + C87568 * (C87568 * C88356 + C88333) +
               C87568 * C88327 * be) +
         C87524 *
             (C88397 +
              ae * (C88350 + C87568 * (C87568 * C87524 * C87600 + C88326) +
                    C87568 * C88318 * be) +
              C87524 * (ae * (C87587 + C87568 * (C87568 * C87600 + C87484) +
                              C87568 * C87474 * be) +
                        C87524 * (C87688 + be * C87568 * C87643 +
                                  C87568 * (be * C87643 +
                                            C87568 * std::pow(C87408, 7) *
                                                bs[7] * C87679))))) /
        C87283;
    const double C23424 =
        (ae * (2 * C88145 +
               C87568 * (C87580 + C87568 * C88418 + C87568 * C87438 * be) +
               (C87417 + C87438 * C87754) * be) +
         C87524 *
             (2 * C88275 + be * (C87623 + C87630 * C87754) + C87568 * C88397)) /
        C87283;
    const double C23425 =
        (2 * C88275 + be * (C87623 + C87630 * C87754) + C87568 * C88397 +
         ae * (2 * (C87568 * C88350 + C88180) +
               C87568 * (C88350 + C87568 * (C87568 * C87524 * C87600 + C88326) +
                         C87568 * C88318 * be) +
               (C88175 + C88318 * C87754) * be) +
         C87524 *
             (ae * (2 * C88418 +
                    C87568 * (C87587 + C87568 * (C87568 * C87600 + C87484) +
                              C87568 * C87474 * be) +
                    (C87438 + C87474 * C87754) * be) +
              C87524 * (2 * C88394 + be * (C87630 + C87643 * C87754) +
                        C87568 * (C87688 + be * C87568 * C87643 +
                                  C87568 * (be * C87643 +
                                            C87568 * std::pow(C87408, 7) *
                                                bs[7] * C87679))))) /
        C87283;
    const double C27525 =
        (3 * (C87682 + be * C88476 + C87568 * C88275) +
         be * (2 * C88476 + C87568 * C88478) +
         C87568 * (2 * C88275 + be * C88478 + C87568 * C88397)) /
        C87283;
    const double C35850 =
        (4 * (2 * C88275 + be * C88478 + C87568 * C88397) +
         be * (3 * C88478 + C87568 * C88637) +
         C87568 * (3 * C88397 + be * C88637 +
                   C87568 * (2 * C88394 + be * C88580 +
                             C87568 * (C87688 + be * C87568 * C87643 +
                                       C87568 * (be * C87643 +
                                                 C87568 * std::pow(C87408, 7) *
                                                     bs[7] * C87679))))) /
        C87283;
    const double C21527 =
        (3 * (C88275 + ae * (C87568 * C88350 + C88180) + C87524 * C88420) +
         ae * (C87568 * C88361 + C88339 * be) +
         C87524 * (2 * C88420 + ae * (C87568 * C88356 + C88333) +
                   C87524 * (C88394 + ae * (C87568 * C87524 * C87600 + C88326) +
                             C87524 * (ae * (C87568 * C87600 + C87484) +
                                       C87524 * (be * C87643 +
                                                 C87568 * std::pow(C87408, 7) *
                                                     bs[7] * C87679))))) /
        C87283;
    const double C14343 = C14338 - C14339;
    const double C27619 = C27614 - C27615;
    const double C76242 = C17370 - C17371;
    const double C76241 = C17371 - C17370;
    const double C576 =
        (4 * (2 * C87714 + be * C87715 + C87402 * C87732) +
         be * (3 * C87715 + C87402 * C87733) +
         C87402 * (3 * C87732 + be * C87733 +
                   C87402 * (2 * C87728 + be * C87729 +
                             C87402 * (C87722 + be * C87402 * C87724 +
                                       C87402 * (be * C87724 +
                                                 C87402 * std::pow(C87408, 7) *
                                                     bs[7] * C87698))))) /
        C87283;
    const double C1438 =
        (C87703 + be * C87706 + C87402 * C87714 + C87732 * C87656) / C87283;
    const double C1439 =
        (C87524 * (2 * C87714 + be * C87715 + C87402 * C87732)) / C87283;
    const double C1440 =
        (2 * C87714 + be * C87715 + C87402 * C87732 +
         (2 * C87728 + be * C87729 +
          C87402 * (C87722 + be * C87402 * C87724 +
                    C87402 * (be * C87724 +
                              C87402 * std::pow(C87408, 7) * bs[7] * C87698))) *
             C87656) /
        C87283;
    const double C3111 =
        (C87524 * (3 * C87732 + be * C87733 +
                   C87402 * (2 * C87728 + be * C87729 +
                             C87402 * (C87722 + be * C87402 * C87724 +
                                       C87402 * (be * C87724 +
                                                 C87402 * std::pow(C87408, 7) *
                                                     bs[7] * C87698))))) /
        C87283;
    const double C6066 =
        (2 * C87524 * C87732 +
         C87524 *
             (C87732 + (C87722 + be * C87402 * C87724 +
                        C87402 * (be * C87724 + C87402 * std::pow(C87408, 7) *
                                                    bs[7] * C87698)) *
                           C87656)) /
        C87283;
    const double C27604 =
        (3 * (C87714 + ae * C88490 + C87568 * C88493) +
         ae * (2 * C88490 + C87568 * C88494) +
         C87568 * (2 * C88493 + ae * C88494 +
                   C87568 * (C87728 + ae * C87568 * C87503 +
                             C87568 * (ae * C87503 +
                                       C87568 * (be * C87724 +
                                                 C87402 * std::pow(C87408, 7) *
                                                     bs[7] * C87698))))) /
        C87283;
    const double C35902 =
        (4 * (2 * C88487 + ae * C88488 + C87568 * C88647) +
         ae * (3 * C88488 + C87568 * C88648) +
         C87568 * (3 * C88647 + ae * C88648 +
                   C87568 * (2 * C88643 + ae * C88644 +
                             C87568 * (C87722 + ae * C87568 * C87491 +
                                       C87568 * (ae * C87491 +
                                                 C87568 * std::pow(C87408, 7) *
                                                     bs[7] * C87698))))) /
        C87283;
    const double C649 = C639 + C647;
    const double C3193 = C3188 + C3192;
    const double C3916 = C3911 + C3915;
    const double C18706 =
        (4 * (2 * C88229 + be * C88230 + C87524 * C88376) +
         be * (3 * C88230 + C87524 * C88377) +
         C87524 * (3 * C88376 + be * C88377 +
                   C87524 * (2 * C88370 + be * C88372 +
                             C87524 * (C87748 + be * C87524 * C87724 +
                                       C87524 * (be * C87724 +
                                                 C87524 * std::pow(C87408, 7) *
                                                     bs[7] * C87739))))) /
        C87283;
    const double C31853 =
        (3 * (C88229 + ae * C88590 + C87568 * C88593) +
         ae * (2 * C88590 + C87568 * C88594) +
         C87568 * (2 * C88593 + ae * C88594 +
                   C87568 * (C88370 + ae * C87568 * C88325 +
                             C87568 * (ae * C88325 +
                                       C87568 * (be * C87724 +
                                                 C87524 * std::pow(C87408, 7) *
                                                     bs[7] * C87739))))) /
        C87283;
    const double C35956 =
        (4 * (2 * C88499 + ae * C88500 + C87568 * C88658) +
         ae * (3 * C88500 + C87568 * C88659) +
         C87568 * (3 * C88658 + ae * C88659 +
                   C87568 * (2 * C88654 + ae * C88655 +
                             C87568 * (C87748 + ae * C87568 * C87556 +
                                       C87568 * (ae * C87556 +
                                                 C87568 * std::pow(C87408, 7) *
                                                     bs[7] * C87739))))) /
        C87283;
    const double C96 = (C89333 * C89113) / C89110 + (C89299 - C89323) / C89112;
    const double C97 =
        (C89334 * C89113) / C89110 + (2 * C89124 + C89333) / C89112;
    const double C98 = (C89113 * C89124) / C89127 + C89334 / C89112;
    const double C5720 =
        (C89335 * C89184) / C89110 + (C89307 - C89325) / C89112;
    const double C5721 =
        (C89336 * C89184) / C89110 + (2 * C89189 + C89335) / C89112;
    const double C5722 = (C89184 * C89189) / C89127 + C89336 / C89112;
    const double C10538 =
        (C89337 * C89212) / C89110 + (C89308 - C89328) / C89112;
    const double C10539 =
        (C89338 * C89212) / C89110 + (2 * C89217 + C89337) / C89112;
    const double C10540 = (C89212 * C89217) / C89127 + C89338 / C89112;
    const double C87294 = C87293 * C87290;
    const double C102 =
        ((C87293 * ae) / C87281 - C87280 / C87285) / (2 * C87281) +
        ((C87279 * ((0 * ae) / C87281 - C87286 / C87283) + C38292) * ae) /
            C87281;
    const double C38295 = (C87293 * ae) / C87281 - C87280 / C87285;
    const double C18651 = C18488 * C263;
    const double C14330 = C14084 * C263;
    const double C18655 = C18652 * C89247;
    const double C14344 = C14342 * C89247;
    const double C21608 = C21373 * C263;
    const double C21612 = C21609 * C89247;
    const double C31540 = C31534 * C180;
    const double C35740 = C35734 * C89236;
    const double C35739 = C35733 * C180;
    const double C27337 = C27333 * C89236;
    const double C27336 = C27332 * C180;
    const double C87339 = C87338 * C87290;
    const double C38365 = (C87338 * ae) / C87281 - C87325 / C87285;
    const double C27448 = C27444 * C89093;
    const double C56910 = C27444 * C38291;
    const double C87365 = C87364 * C87290;
    const double C54884 = (C87364 * ae) / C87281 - C87351 / C87285;
    const double C735 = C731 * C89236;
    const double C38910 = C731 * C38293;
    const double C31541 = C31535 * C89236;
    const double C1260 = C1256 + C1245;
    const double C1640 = C1636 + C1625;
    const double C2165 = C2161 + C2150;
    const double C2545 = C2541 + C2530;
    const double C4562 = C4560 + C4553;
    const double C4996 = C4994 + C4987;
    const double C14337 = C14086 * C263;
    const double C27338 = C27334 * C180;
    const double C31379 = C31373 * C13261;
    const double C29683 = C29680 - C29672;
    const double C33869 = C33867 - C33861;
    const double C19500 = C19498 + C19491;
    const double C27430 = C2164 * C89093;
    const double C56914 = C2164 * C38291;
    const double C56911 = C2164 * C38292;
    const double C27449 = C27445 * C89093;
    const double C56913 = C27445 * C38291;
    const double C29688 = C29685 * C89093;
    const double C59874 = C29685 * C38291;
    const double C736 = C732 * C89236;
    const double C38913 = C732 * C38293;
    const double C737 = C733 * C89236;
    const double C38914 = C733 * C38293;
    const double C1643 = C1639 * C89236;
    const double C38911 = C1639 * C38294;
    const double C39964 = C1639 * C38293;
    const double C2548 = C2544 * C89236;
    const double C40908 = C2544 * C38293;
    const double C936 =
        (C87535 + ae * C87538 + C87402 * C87546 + be * C87524 * C87468 +
         C87524 * (be * C87468 + C87524 * C87564)) /
        C87283;
    const double C937 =
        (be * (2 * C87434 + C87402 * C87468 + C87452 * ae) +
         C87524 * (2 * C87546 + ae * C87547 + C87402 * C87564)) /
        C87283;
    const double C1947 =
        (C87579 + ae * C87582 + C87402 * C87590 + be * C87568 * C87468 +
         C87568 * (be * C87468 + C87568 * C87608)) /
        C87283;
    const double C1948 =
        (be * (2 * C87434 + C87402 * C87468 + C87452 * ae) +
         C87568 * (2 * C87590 + ae * C87591 + C87402 * C87608)) /
        C87283;
    const double C4217 = (C87568 * (be * C87468 + C87524 * C87564)) / C87283;
    const double C4331 =
        (be * C87524 * C87468 + C87568 * C87524 * C87608) / C87283;
    const double C121 = (3 * (C87415 + C87402 * C87434 + C87423 * ae) +
                         C87402 * (2 * C87434 + C87402 * C87468 + C87452 * ae) +
                         (2 * C87423 + C87402 * C87452) * ae) /
                        C87281;
    const double C836 =
        (C87415 + C87402 * C87434 + C87423 * ae + C87468 * C87656) / C87281;
    const double C838 =
        (C87524 * (2 * C87434 + C87402 * C87468 + C87452 * ae)) / C87281;
    const double C1741 =
        (C87415 + C87402 * C87434 + C87423 * ae + C87468 * C87754) / C87281;
    const double C1743 =
        (C87568 * (2 * C87434 + C87402 * C87468 + C87452 * ae)) / C87281;
    const double C4106 = (C87568 * C87524 * C87468) / C87281;
    const double C128 =
        (3 * (C87432 + ae * C87433 + be * C87434 + C87402 * C87464) +
         ae * (2 * C87433 + C87402 * C87467 + C87452 * be) +
         be * (2 * C87434 + C87402 * C87468 + C87452 * ae) +
         C87402 *
             (2 * C87464 + ae * C87467 + be * C87468 +
              C87402 * (C87458 + ae * C87459 + be * C87460 +
                        C87402 * (ae * C87450 + be * C87453 +
                                  C87402 *
                                      (C87439 * C87440 +
                                       C87406 * bs[6] * std::pow(C87400, 6)) *
                                      C87282)))) /
        C87283;
    const double C847 =
        (2 * (ae * C87524 * C87427 + be * C87524 * C87428 + C87402 * C87779) +
         ae * C87524 * C87467 + be * C87524 * C87468 +
         C87402 * (C87779 + ae * C87524 * C87459 + be * C87524 * C87460 +
                   C87402 * (ae * C87524 * C87450 + be * C87524 * C87453 +
                             C87402 * C87524 * C87502))) /
        C87283;
    const double C1148 =
        (C87622 + be * C87625 + C87402 * C87633 + ae * C87524 * C87467 +
         C87524 * (ae * C87467 + C87524 * C87651)) /
        C87283;
    const double C1149 =
        (ae * (2 * C87433 + C87402 * C87467 + C87452 * be) +
         C87524 * (2 * C87633 + be * C87634 + C87402 * C87651)) /
        C87283;
    const double C1752 =
        (2 * (ae * C87568 * C87427 + be * C87568 * C87428 + C87402 * C87854) +
         ae * C87568 * C87467 + be * C87568 * C87468 +
         C87402 * (C87854 + ae * C87568 * C87459 + be * C87568 * C87460 +
                   C87402 * (ae * C87568 * C87450 + be * C87568 * C87453 +
                             C87402 * C87568 * C87502))) /
        C87283;
    const double C2343 =
        (C87703 + be * C87706 + C87402 * C87714 + ae * C87568 * C87467 +
         C87568 * (ae * C87467 + C87568 * C87732)) /
        C87283;
    const double C2344 =
        (ae * (2 * C87433 + C87402 * C87467 + C87452 * be) +
         C87568 * (2 * C87714 + be * C87715 + C87402 * C87732)) /
        C87283;
    const double C4445 =
        (ae * C87568 * C87467 + C87524 * C87568 * C87651) / C87283;
    const double C4773 =
        (ae * C87524 * C87467 + C87568 * C87524 * C87732) / C87283;
    const double C120 = (3 * (C87414 + C87402 * C87433 + C87423 * be) +
                         C87402 * (2 * C87433 + C87402 * C87467 + C87452 * be) +
                         (2 * C87423 + C87402 * C87452) * be) /
                        C87281;
    const double C835 =
        (C87414 + C87402 * C87433 + C87423 * be + C87467 * C87656) / C87281;
    const double C837 =
        (C87524 * (2 * C87433 + C87402 * C87467 + C87452 * be)) / C87281;
    const double C1740 =
        (C87414 + C87402 * C87433 + C87423 * be + C87467 * C87754) / C87281;
    const double C1742 =
        (C87568 * (2 * C87433 + C87402 * C87467 + C87452 * be)) / C87281;
    const double C4105 = (C87568 * C87524 * C87467) / C87281;
    const double C87517 = C87402 * C87514;
    const double C88050 = C87524 * C87514;
    const double C5792 =
        (2 * (be * C87468 + C87524 * C87564) + be * (C87468 + C87514 * C87656) +
         C87524 * (C87564 + be * C87524 * C87514 +
                   C87524 * (be * C87514 +
                             C87524 * (C87554 + ae * C87402 * C87556 +
                                       C87402 * (ae * C87556 +
                                                 C87402 * std::pow(C87408, 7) *
                                                     bs[7] * C87530))))) /
        C87283;
    const double C6338 =
        (be * C87468 + C87524 * C87564 +
         (be * C87514 +
          C87524 * (C87554 + ae * C87402 * C87556 +
                    C87402 * (ae * C87556 +
                              C87402 * std::pow(C87408, 7) * bs[7] * C87530))) *
             C87754) /
        C87283;
    const double C8685 =
        (be * (C87468 + C87514 * C87656) +
         C87568 *
             (C87608 + (C87598 + ae * C87402 * C87600 +
                        C87402 * (ae * C87600 + C87402 * std::pow(C87408, 7) *
                                                    bs[7] * C87574)) *
                           C87656)) /
        C87283;
    const double C10665 =
        (2 * (be * C87468 + C87568 * C87608) + be * (C87468 + C87514 * C87754) +
         C87568 * (C87608 + be * C87568 * C87514 +
                   C87568 * (be * C87514 +
                             C87568 * (C87598 + ae * C87402 * C87600 +
                                       C87402 * (ae * C87600 +
                                                 C87402 * std::pow(C87408, 7) *
                                                     bs[7] * C87574))))) /
        C87283;
    const double C5729 =
        (2 * C87524 * C87468 + C87524 * (C87468 + C87514 * C87656)) / C87281;
    const double C8518 = (C87568 * (C87468 + C87514 * C87656)) / C87281;
    const double C10546 =
        (2 * C87568 * C87468 + C87568 * (C87468 + C87514 * C87754)) / C87281;
    const double C88344 = C87524 * C88342;
    const double C88690 = C87568 * C88688;
    const double C88211 = C88209 + C88202;
    const double C88542 = C88540 + C88536;
    const double C88210 = C88208 + C88199;
    const double C88541 = C88539 + C88533;
    const double C87516 = C87402 * C87513;
    const double C88065 = C87524 * C87513;
    const double C848 =
        (2 * (ae * (C87427 + C87450 * C87656) +
              be * (C87428 + C87453 * C87656) + C87402 * C87782) +
         ae * (C87467 + C87513 * C87656) + be * (C87468 + C87514 * C87656) +
         C87402 * (C87782 + ae * (C87459 + C87503 * C87656) +
                   be * (C87460 + C87505 * C87656) +
                   C87402 * (ae * (C87450 + C87491 * C87656) +
                             be * (C87453 + C87494 * C87656) +
                             C87402 * (C87502 +
                                       (C87475 * C87476 +
                                        C87406 * bs[7] * std::pow(C87408, 7)) *
                                           C87282 * C87656)))) /
        C87283;
    const double C1753 =
        (2 * (ae * (C87427 + C87450 * C87754) +
              be * (C87428 + C87453 * C87754) + C87402 * C87857) +
         ae * (C87467 + C87513 * C87754) + be * (C87468 + C87514 * C87754) +
         C87402 * (C87857 + ae * (C87459 + C87503 * C87754) +
                   be * (C87460 + C87505 * C87754) +
                   C87402 * (ae * (C87450 + C87491 * C87754) +
                             be * (C87453 + C87494 * C87754) +
                             C87402 * (C87502 +
                                       (C87475 * C87476 +
                                        C87406 * bs[7] * std::pow(C87408, 7)) *
                                           C87282 * C87754)))) /
        C87283;
    const double C4112 =
        (2 * (ae * C87568 * C87923 + be * C87568 * C87924 + C87402 * C87960) +
         ae * C87568 * C87524 * C87513 + be * C87568 * C87524 * C87514 +
         C87402 * (C87960 + ae * C87568 * C87524 * C87503 +
                   be * C87568 * C87524 * C87505 +
                   C87402 * (ae * C87568 * C87524 * C87491 +
                             be * C87568 * C87524 * C87494 +
                             C87402 * C87568 * C87524 *
                                 (C87475 * C87476 +
                                  C87406 * bs[7] * std::pow(C87408, 7)) *
                                 C87282))) /
        C87283;
    const double C5904 =
        (2 * (ae * C87467 + C87524 * C87651) + ae * (C87467 + C87513 * C87656) +
         C87524 * (C87651 + ae * C87524 * C87513 +
                   C87524 * (ae * C87513 +
                             C87524 * (C87641 + be * C87402 * C87643 +
                                       C87402 * (be * C87643 +
                                                 C87402 * std::pow(C87408, 7) *
                                                     bs[7] * C87617))))) /
        C87283;
    const double C6498 =
        (ae * (C87467 + C87513 * C87754) +
         C87524 *
             (C87651 + (C87641 + be * C87402 * C87643 +
                        C87402 * (be * C87643 + C87402 * std::pow(C87408, 7) *
                                                    bs[7] * C87617)) *
                           C87754)) /
        C87283;
    const double C8999 =
        (ae * (C87467 + C87513 * C87656) +
         C87568 *
             (C87732 + (C87722 + be * C87402 * C87724 +
                        C87402 * (be * C87724 + C87402 * std::pow(C87408, 7) *
                                                    bs[7] * C87698)) *
                           C87656)) /
        C87283;
    const double C10883 =
        (2 * (ae * C87467 + C87568 * C87732) + ae * (C87467 + C87513 * C87754) +
         C87568 * (C87732 + ae * C87568 * C87513 +
                   C87568 * (ae * C87513 +
                             C87568 * (C87722 + be * C87402 * C87724 +
                                       C87402 * (be * C87724 +
                                                 C87402 * std::pow(C87408, 7) *
                                                     bs[7] * C87698))))) /
        C87283;
    const double C5728 =
        (2 * C87524 * C87467 + C87524 * (C87467 + C87513 * C87656)) / C87281;
    const double C8517 = (C87568 * (C87467 + C87513 * C87656)) / C87281;
    const double C10545 =
        (2 * C87568 * C87467 + C87568 * (C87467 + C87513 * C87754)) / C87281;
    const double C88343 = C87524 * C88341;
    const double C88689 = C87568 * C88687;
    const double C87515 = C87489 + C87512;
    const double C13775 = C89093 * C5735;
    const double C44978 = C38292 * C5735;
    const double C16707 = C89093 * C8524;
    const double C48590 = C38292 * C8524;
    const double C18318 = C89093 * C13749;
    const double C18851 = C89093 * C14607;
    const double C21131 = C89093 * C16689;
    const double C27029 = C89093 * C10552;
    const double C67551 = C38292 * C10552;
    const double C35564 = C89093 * C27003;
    const double C1249 = C89236 * C1230;
    const double C41447 = C38294 * C1230;
    const double C2952 = C89236 * C1231;
    const double C38615 = C38294 * C1231;
    const double C2154 = C89236 * C2135;
    const double C3675 = C89236 * C2136;
    const double C4557 = C89236 * C4547;
    const double C42362 = C38294 * C4547;
    const double C31621 = C89236 * C23373;
    const double C84064 = C38294 * C23373;
    const double C35796 = C89236 * C27415;
    const double C1629 = C89247 * C1610;
    const double C3272 = C89247 * C1611;
    const double C2534 = C89247 * C2515;
    const double C59205 = C54751 * C2515;
    const double C3995 = C89247 * C2516;
    const double C55344 = C54751 * C2516;
    const double C4991 = C89247 * C4981;
    const double C58266 = C54751 * C4981;
    const double C88616 = C88614 + C88607;
    const double C88615 = C88613 + C88604;
    const double C439 = C435 - C430;
    const double C1257 = C1253 - C1248;
    const double C2954 = C2953 - C2951;
    const double C2162 = C2158 - C2153;
    const double C3677 = C3676 - C3674;
    const double C4561 = C4559 - C4556;
    const double C29681 = C29675 - C29676;
    const double C55877 = C55873 - C55874;
    const double C15147 =
        (C87742 + be * C88077 + C87524 * C88229 + ae * C87568 * C88188 +
         C87568 *
             (ae * C88188 + C87568 * (C87745 + be * C87524 * C87711 +
                                      C87524 * (C87718 + C87524 * C87748)))) /
        C87283;
    const double C17471 =
        (ae * (2 * C88022 + C87524 * C88188 + C88181 * be) +
         C87568 * (2 * C88229 + be * C88230 +
                   C87524 * (C87745 + be * C87524 * C87711 +
                             C87524 * (C87718 + C87524 * C87748)))) /
        C87283;
    const double C23531 =
        (2 * (ae * C88188 + C87568 * C88376) + ae * (C88188 + C88341 * C87754) +
         C87568 * (C88376 + ae * C87568 * C88341 +
                   C87568 * (ae * C88341 +
                             C87568 * (C87748 + be * C87524 * C87724 +
                                       C87524 * (be * C87724 +
                                                 C87524 * std::pow(C87408, 7) *
                                                     bs[7] * C87739))))) /
        C87283;
    const double C13873 =
        (3 * (C87531 + C87524 * C88022 + C88020 * be) +
         C87524 * (2 * C88022 + C87524 * C88188 + C88181 * be) +
         (2 * C88020 + C87524 * C88181) * be) /
        C87281;
    const double C14683 =
        (C87531 + C87524 * C88022 + C88020 * be + C88188 * C87754) / C87281;
    const double C16821 =
        (C87568 * (2 * C88022 + C87524 * C88188 + C88181 * be)) / C87281;
    const double C23211 =
        (2 * C87568 * C88188 + C87568 * (C88188 + C88341 * C87754)) / C87281;
    const double C88337 = C88330 + C88331;
    const double C31623 = C31622 - C31620;
    const double C35798 = C35797 - C35795;
    const double C730 = C726 - C721;
    const double C1637 = C1633 - C1628;
    const double C3274 = C3273 - C3271;
    const double C2542 = C2538 - C2533;
    const double C3997 = C3996 - C3994;
    const double C4995 = C4993 - C4990;
    const double C40915 = C40914 - C40912;
    const double C18764 = C18763 - C18761;
    const double C19499 = C19497 - C19494;
    const double C21769 = C21768 - C21766;
    const double C88684 = C88674 + C88681;
    const double C31699 =
        (ae *
             (3 * C88520 +
              C87568 * (2 * C88418 +
                        C87568 * (C87587 + C87568 * (C87568 * C87600 + C87484) +
                                  C87568 * C87474 * be) +
                        C88579 * be) +
              (2 * C88511 + C87568 * C88579) * be) +
         C87524 * (3 * C88397 + be * (2 * C88391 + C87568 * C88580) +
                   C87568 * (2 * C88394 + be * C88580 +
                             C87568 * (C87688 + be * C87568 * C87643 +
                                       C87568 * (be * C87643 +
                                                 C87568 * std::pow(C87408, 7) *
                                                     bs[7] * C87679))))) /
        C87283;
    const double C27225 =
        (3 * (C87575 + C87568 * C88145 + C88143 * be) +
         C87568 * (2 * C88145 + C87568 * C88520 + C88517 * be) +
         (2 * C88143 + C87568 * C88517) * be) /
        C87281;
    const double C14161 =
        (3 * (C87661 + ae * C88022 + be * C88023 + C87524 * C88178) +
         ae * (2 * C88022 + C87524 * C88188 + C88181 * be) +
         be * (2 * C88023 + C87524 * C88189 + C88181 * ae) +
         C87524 * (2 * C88178 + ae * C88188 + be * C88189 +
                   C87524 * (C87666 + ae * C88179 + be * C88182 +
                             C87524 * (C87550 + C87637 + C87524 * C87671)))) /
        C87283;
    const double C17155 =
        (2 * (ae * C87568 * C87536 + be * C87568 * C87623 + C87524 * C88270) +
         ae * C87568 * C88188 + be * C87568 * C88189 +
         C87524 * (C88270 + ae * C87568 * C88179 + be * C87568 * C88182 +
                   C87524 * (ae * C87568 * C87543 + be * C87568 * C87630 +
                             C87524 * C87568 * C87671))) /
        C87283;
    const double C19177 =
        (2 * (ae * (C87536 + C87543 * C87754) +
              be * (C87623 + C87630 * C87754) + C87524 * C88389) +
         ae * (C88188 + C88341 * C87754) + be * (C88189 + C88342 * C87754) +
         C87524 * (C88389 + ae * (C88179 + C88325 * C87754) +
                   be * (C88182 + C88328 * C87754) +
                   C87524 * (ae * (C87543 + C87556 * C87754) +
                             be * (C87630 + C87643 * C87754) +
                             C87524 * (C87671 +
                                       (C87475 * C87476 +
                                        C87656 * bs[7] * std::pow(C87408, 7)) *
                                           C87282 * C87754)))) /
        C87283;
    const double C14055 =
        (3 * (C87618 + C87524 * C88023 + C88020 * ae) +
         C87524 * (2 * C88023 + C87524 * C88189 + C88181 * ae) +
         (2 * C88020 + C87524 * C88181) * ae) /
        C87281;
    const double C14839 =
        (C87618 + C87524 * C88023 + C88020 * ae + C88189 * C87754) / C87281;
    const double C17037 =
        (C87568 * (2 * C88023 + C87524 * C88189 + C88181 * ae)) / C87281;
    const double C23319 =
        (2 * C87568 * C88189 + C87568 * (C88189 + C88342 * C87754)) / C87281;
    const double C27447 = C27443 + C27435;
    const double C28840 = C2163 * C89093;
    const double C56915 = C2163 * C38292;
    const double C58795 = C2163 * C38291;
    const double C27450 = C27446 * C89093;
    const double C67830 = C27446 * C38291;
    const double C27779 =
        (3 * (C87759 + ae * C88145 + be * C88146 + C87568 * C88514) +
         ae * (2 * C88145 + C87568 * C88520 + C88517 * be) +
         be * (2 * C88146 + C87568 * C88523 + C88517 * ae) +
         C87568 * (2 * C88514 + ae * C88520 + be * C88523 +
                   C87568 * (C87764 + C88419 + be * C88518 +
                             C87568 * (C87594 + C87718 + C87568 * C87769)))) /
        C87283;
    const double C27601 =
        (3 * (C87699 + C87568 * C88146 + C88143 * ae) +
         C87568 * (2 * C88146 + C87568 * C88523 + C88517 * ae) +
         (2 * C88143 + C87568 * C88517) * ae) /
        C87281;
    const double C14527 = C14523 + C14515;
    const double C17594 = C17591 + C17585;
    const double C1642 = C1638 * C89236;
    const double C38912 = C1638 * C38294;
    const double C41855 = C1638 * C38293;
    const double C2547 = C2543 * C89236;
    const double C42765 = C2543 * C38293;
    const double C27147 = C27139 * C89093;
    const double C1859 = C89236 * C1841;
    const double C3437 = C89236 * C1842;
    const double C27339 = C27335 * C89236;
    const double C28764 = C89093 * C2053;
    const double C56810 = C38292 * C2053;
    const double C58695 = C38292 * C2054;
    const double C13977 = C13969 * C89093;
    const double C1060 = C89247 * C1042;
    const double C2796 = C89247 * C1043;
    const double C78649 = C54751 * C23424;
    const double C14345 = C14343 * C89247;
    const double C15770 = C89093 * C1438;
    const double C39757 = C38292 * C1438;
    const double C41653 = C38292 * C1439;
    const double C87299 = C87279 * C87294;
    const double C101 =
        (ae * -2 * C87280) / (C87283 * 2 * C87281) +
        (((C87279 * ((-4 * C87286) / C87281 - (C87279 * C87294) / C87281) *
           ae) /
              C87281 +
          2 * ((C87293 * ae) / C87281 - C87280 / C87285)) *
         ae) /
            C87281 -
        C87294 / C87285;
    const double C105 = (-C87294 / C87281) / (4 * C87283);
    const double C13262 = -C87294 / C87281;
    const double C38298 = (-C87294 / C87281) / (2 * C87281);
    const double C39040 = C38295 * C834;
    const double C39038 = C38295 * C833;
    const double C39032 = C38295 * C828;
    const double C39030 = C38295 * C827;
    const double C39028 = C38295 * C832;
    const double C39026 = C38295 * C831;
    const double C39016 = C38295 * C830;
    const double C39014 = C38295 * C829;
    const double C39415 = C38295 * C1139;
    const double C39411 = C38295 * C821;
    const double C39406 = C38295 * C1136;
    const double C39402 = C38295 * C818;
    const double C39398 = C38295 * C1138;
    const double C39394 = C38295 * C820;
    const double C39391 = C38295 * C1135;
    const double C39387 = C38295 * C819;
    const double C39756 = C38295 * C1429;
    const double C39751 = C38295 * C1426;
    const double C39747 = C38295 * C1428;
    const double C39744 = C38295 * C1425;
    const double C41018 = C38295 * C826;
    const double C41016 = C38295 * C825;
    const double C41339 = C38295 * C1137;
    const double C41335 = C38295 * C817;
    const double C41652 = C38295 * C1427;
    const double C42907 = C38295 * C4104;
    const double C42905 = C38295 * C4103;
    const double C42903 = C38295 * C4102;
    const double C42901 = C38295 * C4101;
    const double C43340 = C38295 * C4440;
    const double C43336 = C38295 * C4098;
    const double C43331 = C38295 * C4439;
    const double C43327 = C38295 * C4097;
    const double C43754 = C38295 * C4768;
    const double C43749 = C38295 * C4767;
    const double C44973 = C38295 * C5733;
    const double C44971 = C38295 * C5732;
    const double C45188 = C38295 * C5899;
    const double C45184 = C38295 * C5727;
    const double C45390 = C38295 * C6061;
    const double C45625 = C38295 * C6255;
    const double C45623 = C38295 * C6254;
    const double C45936 = C38295 * C6493;
    const double C45932 = C38295 * C6249;
    const double C46234 = C38295 * C6727;
    const double C48585 = C38295 * C8522;
    const double C48583 = C38295 * C8521;
    const double C48896 = C38295 * C8760;
    const double C48892 = C38295 * C8516;
    const double C49194 = C38295 * C8994;
    const double C56434 = C38295 * C1739;
    const double C56432 = C38295 * C1738;
    const double C56426 = C38295 * C1733;
    const double C56424 = C38295 * C1732;
    const double C56422 = C38295 * C1737;
    const double C56420 = C38295 * C1736;
    const double C56410 = C38295 * C1735;
    const double C56408 = C38295 * C1734;
    const double C56809 = C38295 * C2044;
    const double C56805 = C38295 * C1726;
    const double C56800 = C38295 * C2041;
    const double C56796 = C38295 * C1723;
    const double C56792 = C38295 * C2043;
    const double C56788 = C38295 * C1725;
    const double C56785 = C38295 * C2040;
    const double C56781 = C38295 * C1724;
    const double C57135 = C38295 * C2334;
    const double C57130 = C38295 * C2331;
    const double C57126 = C38295 * C2333;
    const double C57123 = C38295 * C2330;
    const double C58373 = C38295 * C1731;
    const double C58371 = C38295 * C1730;
    const double C58694 = C38295 * C2042;
    const double C58690 = C38295 * C1722;
    const double C58998 = C38295 * C2332;
    const double C67546 = C38295 * C10550;
    const double C67544 = C38295 * C10549;
    const double C67761 = C38295 * C10716;
    const double C67757 = C38295 * C10544;
    const double C67965 = C38295 * C10878;
    const double C18656 = C18651 + C18655;
    const double C14346 = C14330 + C14344;
    const double C21613 = C21608 + C21612;
    const double C35741 = C35739 + C35740;
    const double C27340 = C27336 + C27337;
    const double C87342 = C87311 * C87339;
    const double C13466 =
        (ae * -2 * C87325) / (C87283 * 2 * C87281) +
        (((C87311 * ((-4 * C87327) / C87281 - (C87311 * C87339) / C87281) *
           ae) /
              C87281 +
          2 * ((C87338 * ae) / C87281 - C87325 / C87285)) *
         ae) /
            C87281 -
        C87339 / C87285;
    const double C13468 = (-C87339 / C87281) / (4 * C87283);
    const double C38590 = (-C87339 / C87281) / (2 * C87281);
    const double C38389 = C38365 * C119;
    const double C38385 = C38365 * C109;
    const double C38380 = C38365 * C117;
    const double C38376 = C38365 * C108;
    const double C38373 = C38365 * C115;
    const double C38369 = C38365 * C107;
    const double C38610 = C38365 * C349;
    const double C38608 = C38365 * C184;
    const double C38606 = C38365 * C348;
    const double C38604 = C38365 * C183;
    const double C38594 = C38365 * C347;
    const double C38592 = C38365 * C182;
    const double C38841 = C38365 * C568;
    const double C38836 = C38365 * C567;
    const double C38833 = C38365 * C566;
    const double C39181 = C38365 * C834;
    const double C39177 = C38365 * C821;
    const double C39172 = C38365 * C828;
    const double C39168 = C38365 * C818;
    const double C39526 = C38365 * C1139;
    const double C39524 = C38365 * C927;
    const double C39522 = C38365 * C1136;
    const double C39520 = C38365 * C924;
    const double C39862 = C38365 * C1429;
    const double C39857 = C38365 * C1426;
    const double C40176 = C38365 * C1739;
    const double C40172 = C38365 * C1726;
    const double C40167 = C38365 * C1733;
    const double C40163 = C38365 * C1723;
    const double C40487 = C38365 * C2044;
    const double C40485 = C38365 * C1832;
    const double C40483 = C38365 * C2041;
    const double C40481 = C38365 * C1829;
    const double C40806 = C38365 * C2334;
    const double C40801 = C38365 * C2331;
    const double C41133 = C38365 * C826;
    const double C41129 = C38365 * C817;
    const double C41442 = C38365 * C1137;
    const double C41440 = C38365 * C925;
    const double C41754 = C38365 * C1427;
    const double C42058 = C38365 * C1731;
    const double C42054 = C38365 * C1722;
    const double C42357 = C38365 * C2042;
    const double C42355 = C38365 * C1830;
    const double C42664 = C38365 * C2332;
    const double C43060 = C38365 * C4104;
    const double C43056 = C38365 * C4098;
    const double C43475 = C38365 * C4440;
    const double C43473 = C38365 * C4212;
    const double C43888 = C38365 * C4768;
    const double C72778 = C38365 * C1737;
    const double C72774 = C38365 * C1725;
    const double C72771 = C38365 * C1735;
    const double C72767 = C38365 * C1724;
    const double C73090 = C38365 * C2043;
    const double C73088 = C38365 * C1831;
    const double C73078 = C38365 * C2040;
    const double C73076 = C38365 * C1828;
    const double C73402 = C38365 * C2333;
    const double C73399 = C38365 * C2330;
    const double C75551 = C38365 * C4102;
    const double C75547 = C38365 * C4097;
    const double C75963 = C38365 * C4439;
    const double C75961 = C38365 * C4211;
    const double C76373 = C38365 * C4767;
    const double C78228 = C38365 * C6255;
    const double C78224 = C38365 * C6249;
    const double C78537 = C38365 * C6493;
    const double C78535 = C38365 * C6333;
    const double C78849 = C38365 * C6727;
    const double C81219 = C38365 * C8522;
    const double C81215 = C38365 * C8516;
    const double C81528 = C38365 * C8760;
    const double C81526 = C38365 * C8600;
    const double C81840 = C38365 * C8994;
    const double C83856 = C38365 * C10550;
    const double C83852 = C38365 * C10544;
    const double C84059 = C38365 * C10716;
    const double C84057 = C38365 * C10604;
    const double C84270 = C38365 * C10878;
    const double C87368 = C87314 * C87365;
    const double C26254 =
        (ae * -2 * C87351) / (C87283 * 2 * C87281) +
        (((C87314 * ((-4 * C87353) / C87281 - (C87314 * C87365) / C87281) *
           ae) /
              C87281 +
          2 * ((C87364 * ae) / C87281 - C87351 / C87285)) *
         ae) /
            C87281 -
        C87365 / C87285;
    const double C26256 = (-C87365 / C87281) / (4 * C87283);
    const double C55319 = (-C87365 / C87281) / (2 * C87281);
    const double C54908 = C54884 * C119;
    const double C54904 = C54884 * C109;
    const double C54899 = C54884 * C117;
    const double C54895 = C54884 * C108;
    const double C54892 = C54884 * C115;
    const double C54888 = C54884 * C107;
    const double C55118 = C54884 * C349;
    const double C55113 = C54884 * C348;
    const double C55110 = C54884 * C347;
    const double C55339 = C54884 * C568;
    const double C55337 = C54884 * C267;
    const double C55335 = C54884 * C567;
    const double C55333 = C54884 * C266;
    const double C55323 = C54884 * C566;
    const double C55321 = C54884 * C265;
    const double C55674 = C54884 * C834;
    const double C55670 = C54884 * C821;
    const double C55665 = C54884 * C828;
    const double C55661 = C54884 * C818;
    const double C55983 = C54884 * C1139;
    const double C55978 = C54884 * C1136;
    const double C56292 = C54884 * C1429;
    const double C56290 = C54884 * C1033;
    const double C56288 = C54884 * C1426;
    const double C56286 = C54884 * C1030;
    const double C56679 = C54884 * C1739;
    const double C56675 = C54884 * C1726;
    const double C56670 = C54884 * C1733;
    const double C56666 = C54884 * C1723;
    const double C57021 = C54884 * C2044;
    const double C57016 = C54884 * C2041;
    const double C57347 = C54884 * C2334;
    const double C57345 = C54884 * C1938;
    const double C57343 = C54884 * C2331;
    const double C57341 = C54884 * C1935;
    const double C57664 = C54884 * C826;
    const double C57660 = C54884 * C817;
    const double C57962 = C54884 * C1137;
    const double C58261 = C54884 * C1427;
    const double C58259 = C54884 * C1031;
    const double C58588 = C54884 * C1731;
    const double C58584 = C54884 * C1722;
    const double C58896 = C54884 * C2042;
    const double C59200 = C54884 * C2332;
    const double C59198 = C54884 * C1936;
    const double C59611 = C54884 * C4104;
    const double C59607 = C54884 * C4098;
    const double C60009 = C54884 * C4440;
    const double C60406 = C54884 * C4768;
    const double C60404 = C54884 * C4326;
    const double C71942 = C54884 * C832;
    const double C71938 = C54884 * C820;
    const double C71935 = C54884 * C830;
    const double C71931 = C54884 * C819;
    const double C72244 = C54884 * C1138;
    const double C72241 = C54884 * C1135;
    const double C72556 = C54884 * C1428;
    const double C72554 = C54884 * C1032;
    const double C72544 = C54884 * C1425;
    const double C72542 = C54884 * C1029;
    const double C75689 = C54884 * C4102;
    const double C75685 = C54884 * C4097;
    const double C76105 = C54884 * C4439;
    const double C76513 = C54884 * C4767;
    const double C76511 = C54884 * C4325;
    const double C77608 = C54884 * C5733;
    const double C77604 = C54884 * C5727;
    const double C77810 = C54884 * C5899;
    const double C78013 = C54884 * C6061;
    const double C78011 = C54884 * C5843;
    const double C78334 = C54884 * C6255;
    const double C78330 = C54884 * C6249;
    const double C78648 = C54884 * C6493;
    const double C78952 = C54884 * C6727;
    const double C78950 = C54884 * C6413;
    const double C81325 = C54884 * C8522;
    const double C81321 = C54884 * C8516;
    const double C81639 = C54884 * C8760;
    const double C81943 = C54884 * C8994;
    const double C81941 = C54884 * C8680;
    const double C31542 = C31540 + C31541;
    const double C1644 = C1640 * C89236;
    const double C39965 = C1640 * C38293;
    const double C39963 = C1640 * C38294;
    const double C27431 = C2165 * C89093;
    const double C56916 = C2165 * C38291;
    const double C56912 = C2165 * C38292;
    const double C2549 = C2545 * C89236;
    const double C40909 = C2545 * C38293;
    const double C29674 = C4562 * C89093;
    const double C59876 = C4562 * C38291;
    const double C59875 = C4562 * C38292;
    const double C4998 = C4996 * C89236;
    const double C40907 = C4996 * C38294;
    const double C44021 = C4996 * C38293;
    const double C31381 = C31379 + C31380;
    const double C29686 = C29683 + C29673;
    const double C33871 = C33869 + C33862;
    const double C954 = C89236 * C936;
    const double C41134 = C38294 * C936;
    const double C2714 = C89236 * C937;
    const double C38390 = C38294 * C937;
    const double C1965 = C89247 * C1947;
    const double C58589 = C54751 * C1947;
    const double C3519 = C89247 * C1948;
    const double C54909 = C54751 * C1948;
    const double C4226 = C89236 * C4217;
    const double C42059 = C38294 * C4217;
    const double C4340 = C89247 * C4331;
    const double C57665 = C54751 * C4331;
    const double C209 = C180 * C121;
    const double C292 = C263 * C121;
    const double C955 = C180 * C836;
    const double C1061 = C263 * C836;
    const double C15306 = C13261 * C836;
    const double C39044 = C38297 * C836;
    const double C41135 = C38366 * C836;
    const double C2715 = C180 * C838;
    const double C2797 = C263 * C838;
    const double C38391 = C38366 * C838;
    const double C41022 = C38297 * C838;
    const double C1860 = C180 * C1741;
    const double C1966 = C263 * C1741;
    const double C28528 = C13261 * C1741;
    const double C56438 = C38297 * C1741;
    const double C58590 = C54885 * C1741;
    const double C3438 = C180 * C1743;
    const double C3520 = C263 * C1743;
    const double C54910 = C54885 * C1743;
    const double C58377 = C38297 * C1743;
    const double C4227 = C180 * C4106;
    const double C4341 = C263 * C4106;
    const double C42060 = C38366 * C4106;
    const double C42911 = C38297 * C4106;
    const double C57666 = C54885 * C4106;
    const double C73605 = C13261 * C4106;
    const double C41023 = C38292 * C847;
    const double C15544 = C89093 * C1148;
    const double C39416 = C38292 * C1148;
    const double C41340 = C38292 * C1149;
    const double C58378 = C38292 * C1752;
    const double C28992 = C89093 * C2343;
    const double C57136 = C38292 * C2343;
    const double C58999 = C38292 * C2344;
    const double C43341 = C38292 * C4445;
    const double C73907 = C89093 * C4445;
    const double C43755 = C38292 * C4773;
    const double C74203 = C89093 * C4773;
    const double C15304 = C13261 * C835;
    const double C15542 = C89093 * C835;
    const double C39042 = C38297 * C835;
    const double C39412 = C38292 * C835;
    const double C41020 = C38297 * C837;
    const double C41336 = C38292 * C837;
    const double C28526 = C13261 * C1740;
    const double C28762 = C89093 * C1740;
    const double C56436 = C38297 * C1740;
    const double C56806 = C38292 * C1740;
    const double C58375 = C38297 * C1742;
    const double C58691 = C38292 * C1742;
    const double C42909 = C38297 * C4105;
    const double C43337 = C38292 * C4105;
    const double C73603 = C13261 * C4105;
    const double C73905 = C89093 * C4105;
    const double C87519 = C87479 + C87517;
    const double C6418 =
        (C87524 * C87608 + be * C87568 * C88050 +
         C87568 * (be * C88050 +
                   C87568 * C87524 *
                       (C87598 + ae * C87402 * C87600 +
                        C87402 * (ae * C87600 + C87402 * std::pow(C87408, 7) *
                                                    bs[7] * C87574)))) /
        C87283;
    const double C8605 =
        (C87568 * (C87564 + be * C88050 +
                   C87524 * (be * C87514 +
                             C87524 * (C87554 + ae * C87402 * C87556 +
                                       C87402 * (ae * C87556 +
                                                 C87402 * std::pow(C87408, 7) *
                                                     bs[7] * C87530))))) /
        C87283;
    const double C6251 = (C87524 * C87468 + C88050 * C87754) / C87281;
    const double C88346 = C88321 + C88344;
    const double C88692 = C88671 + C88690;
    const double C14056 =
        (3 * (C87625 + C87524 * C88017 + C88014 * ae) +
         C87524 * (2 * C88017 + C87524 * C88211 + C88200 * ae) +
         (2 * C88014 + C87524 * C88200) * ae) /
        C87281;
    const double C14840 =
        (C87625 + C87524 * C88017 + C88014 * ae + C88211 * C87754) / C87281;
    const double C17038 =
        (C87568 * (2 * C88017 + C87524 * C88211 + C88200 * ae)) / C87281;
    const double C27602 =
        (3 * (C87706 + C87568 * C88140 + C88137 * ae) +
         C87568 * (2 * C88140 + C87568 * C88542 + C88534 * ae) +
         (2 * C88137 + C87568 * C88534) * ae) /
        C87281;
    const double C14162 =
        (3 * (C88012 + ae * C88016 + be * C88017 + C87524 * C88203) +
         ae * (2 * C88016 + C87524 * C88210 + C88200 * be) +
         be * (2 * C88017 + C87524 * C88211 + C88200 * ae) +
         C87524 *
             (2 * C88203 + ae * C88210 + be * C88211 +
              C87524 * (C88192 + ae * C88204 + be * C88205 +
                        C87524 * (ae * C88193 + be * C88196 +
                                  C87524 * C87402 *
                                      (C87475 * C87476 +
                                       C87656 * bs[7] * std::pow(C87408, 7)) *
                                      C87282)))) /
        C87283;
    const double C15148 =
        (C88033 + be * C88074 + C87524 * C88236 + ae * C87568 * C88210 +
         C87568 * (ae * C88210 +
                   C87568 * (C88232 + be * C87524 * C88233 +
                             C87524 * (be * C88233 + C87524 * C87402 *
                                                         std::pow(C87408, 7) *
                                                         bs[7] * C87739)))) /
        C87283;
    const double C17156 =
        (2 * (ae * C87568 * C87549 + be * C87568 * C87636 + C87524 * C88272) +
         ae * C87568 * C88210 + be * C87568 * C88211 +
         C87524 * (C88272 + ae * C87568 * C88204 + be * C87568 * C88205 +
                   C87524 * (ae * C87568 * C88193 + be * C87568 * C88196 +
                             C87524 * C87568 * C87402 *
                                 (C87475 * C87476 +
                                  C87656 * bs[7] * std::pow(C87408, 7)) *
                                 C87282))) /
        C87283;
    const double C17472 =
        (ae * (2 * C88016 + C87524 * C88210 + C88200 * be) +
         C87568 * (2 * C88236 + be * C88237 +
                   C87524 * (C88232 + be * C87524 * C88233 +
                             C87524 * (be * C88233 + C87524 * C87402 *
                                                         std::pow(C87408, 7) *
                                                         bs[7] * C87739)))) /
        C87283;
    const double C13874 =
        (3 * (C87538 + C87524 * C88016 + C88014 * be) +
         C87524 * (2 * C88016 + C87524 * C88210 + C88200 * be) +
         (2 * C88014 + C87524 * C88200) * be) /
        C87281;
    const double C14684 =
        (C87538 + C87524 * C88016 + C88014 * be + C88210 * C87754) / C87281;
    const double C16822 =
        (C87568 * (2 * C88016 + C87524 * C88210 + C88200 * be)) / C87281;
    const double C27780 =
        (3 * (C88037 + ae * C88139 + be * C88140 + C87568 * C88531) +
         ae * (2 * C88139 + C87568 * C88541 + C88534 * be) +
         be * (2 * C88140 + C87568 * C88542 + C88534 * ae) +
         C87568 *
             (2 * C88531 + ae * C88541 + be * C88542 +
              C87568 * (C88240 + ae * C88532 + be * C88535 +
                        C87568 * (ae * C88219 + be * C88233 +
                                  C87568 * C87402 *
                                      (C87475 * C87476 +
                                       C87754 * bs[7] * std::pow(C87408, 7)) *
                                      C87282)))) /
        C87283;
    const double C29788 =
        (ae * (2 * C88139 + C87568 * C88541 + C88534 * be) +
         C87524 * (2 * C88278 + be * C88482 +
                   C87568 * (C88218 + be * C87568 * C88196 +
                             C87568 * (be * C88196 + C87568 * C87402 *
                                                         std::pow(C87408, 7) *
                                                         bs[7] * C87679)))) /
        C87283;
    const double C27226 =
        (3 * (C87582 + C87568 * C88139 + C88137 * be) +
         C87568 * (2 * C88139 + C87568 * C88541 + C88534 * be) +
         (2 * C88137 + C87568 * C88534) * be) /
        C87281;
    const double C87518 = C87477 + C87516;
    const double C6732 =
        (C87524 * C87732 + ae * C87568 * C88065 +
         C87568 * (ae * C88065 +
                   C87568 * C87524 *
                       (C87722 + be * C87402 * C87724 +
                        C87402 * (be * C87724 + C87402 * std::pow(C87408, 7) *
                                                    bs[7] * C87698)))) /
        C87283;
    const double C8765 =
        (C87568 * C87651 + ae * C87568 * C88065 +
         C87524 * (ae * C87568 * C87513 +
                   C87524 * C87568 *
                       (C87641 + be * C87402 * C87643 +
                        C87402 * (be * C87643 + C87402 * std::pow(C87408, 7) *
                                                    bs[7] * C87617)))) /
        C87283;
    const double C6250 = (C87524 * C87467 + C88065 * C87754) / C87281;
    const double C88345 = C88316 + C88343;
    const double C88691 = C88665 + C88689;
    const double C31774 =
        (3 * (C88077 + C87568 * C88454 + C88451 * ae) +
         C87568 * (2 * C88454 + C87568 * C88616 + C88605 * ae) +
         (2 * C88451 + C87568 * C88605) * ae) /
        C87281;
    const double C31931 =
        (3 * (C88449 + ae * C88453 + be * C88454 + C87568 * C88608) +
         ae * (2 * C88453 + C87568 * C88615 + C88605 * be) +
         be * (2 * C88454 + C87568 * C88616 + C88605 * ae) +
         C87568 *
             (2 * C88608 + ae * C88615 + be * C88616 +
              C87568 * (C88597 + ae * C88609 + be * C88610 +
                        C87568 * (ae * C88598 + be * C88601 +
                                  C87568 * C87524 *
                                      (C87475 * C87476 +
                                       C87754 * bs[7] * std::pow(C87408, 7)) *
                                      C87282)))) /
        C87283;
    const double C31455 =
        (3 * (C88076 + C87568 * C88453 + C88451 * be) +
         C87568 * (2 * C88453 + C87568 * C88615 + C88605 * be) +
         (2 * C88451 + C87568 * C88605) * be) /
        C87281;
    const double C443 = C439 + C431;
    const double C1261 = C1257 + C1249;
    const double C2955 = C2954 + C2952;
    const double C2166 = C2162 + C2154;
    const double C3678 = C3677 + C3675;
    const double C4563 = C4561 + C4557;
    const double C29684 = C29681 - C29677;
    const double C55878 = C55877 - C55875;
    const double C34099 = C89236 * C15147;
    const double C78850 = C38294 * C15147;
    const double C81841 = C38294 * C17471;
    const double C33633 = C89236 * C14683;
    const double C33863 = C180 * C14683;
    const double C78225 = C38294 * C14683;
    const double C78539 = C38366 * C14683;
    const double C81216 = C38294 * C16821;
    const double C81530 = C38366 * C16821;
    const double C31624 = C31623 + C31621;
    const double C35799 = C35798 + C35796;
    const double C734 = C730 + C722;
    const double C1641 = C1637 + C1629;
    const double C3275 = C3274 + C3272;
    const double C2546 = C2542 + C2534;
    const double C3998 = C3997 + C3995;
    const double C4997 = C4995 + C4991;
    const double C40916 = C40915 + C40913;
    const double C18765 = C18764 + C18762;
    const double C19501 = C19499 + C19495;
    const double C21770 = C21769 + C21767;
    const double C81533 = C38294 * C17155;
    const double C18493 = C13261 * C14055;
    const double C18598 = C263 * C14055;
    const double C19103 = C13261 * C14839;
    const double C19257 = C263 * C14839;
    const double C33865 = C180 * C14839;
    const double C78541 = C38366 * C14839;
    const double C81641 = C54885 * C14839;
    const double C21378 = C13261 * C17037;
    const double C21531 = C263 * C17037;
    const double C77812 = C54885 * C17037;
    const double C81532 = C38366 * C17037;
    const double C27451 = C27447 * C89093;
    const double C67831 = C27447 * C38292;
    const double C35906 = C13261 * C27601;
    const double C35960 = C180 * C27601;
    const double C39966 = C14527 * C38294;
    const double C44022 = C17594 * C38294;
    const double C27150 = C27146 + C27147;
    const double C27341 = C27338 + C27339;
    const double C13980 = C13976 + C13977;
    const double C14347 = C14337 + C14345;
    const double C103 =
        (((-4 * C87286) / C87281 - C87299 / C87281) * ae) / C87285 +
        ((2 * ((0 * ae) / C87281 - C87286 / C87283) - C87299 / C87285) * ae) /
            C87281;
    const double C38296 =
        (((-4 * C87286) / C87281 - C87299 / C87281) * ae) / C87281;
    const double C13773 = C13262 * C5726;
    const double C13769 = C13262 * C821;
    const double C13765 = C13262 * C818;
    const double C13761 = C13262 * C5727;
    const double C13757 = C13262 * C820;
    const double C13753 = C13262 * C819;
    const double C15305 = C13262 * C822;
    const double C15301 = C13262 * C817;
    const double C16705 = C13262 * C8515;
    const double C16701 = C13262 * C4098;
    const double C16697 = C13262 * C4097;
    const double C16693 = C13262 * C8516;
    const double C18316 = C13262 * C13743;
    const double C18849 = C13262 * C14601;
    const double C18845 = C13262 * C6249;
    const double C21129 = C13262 * C16683;
    const double C27027 = C13262 * C10543;
    const double C27023 = C13262 * C1726;
    const double C27019 = C13262 * C1723;
    const double C27015 = C13262 * C10544;
    const double C27011 = C13262 * C1725;
    const double C27007 = C13262 * C1724;
    const double C28527 = C13262 * C1727;
    const double C28523 = C13262 * C1722;
    const double C29245 = C13262 * C6248;
    const double C31291 = C13262 * C23153;
    const double C35562 = C13262 * C26997;
    const double C73604 = C13262 * C4099;
    const double C39043 = C38298 * C822;
    const double C39035 = C38298 * C817;
    const double C39023 = C38298 * C821;
    const double C39019 = C38298 * C818;
    const double C41021 = C38298 * C823;
    const double C42910 = C38298 * C4099;
    const double C42898 = C38298 * C4098;
    const double C44976 = C38298 * C5726;
    const double C45628 = C38298 * C6248;
    const double C48588 = C38298 * C8515;
    const double C56437 = C38298 * C1727;
    const double C56429 = C38298 * C1722;
    const double C56417 = C38298 * C1726;
    const double C56413 = C38298 * C1723;
    const double C58376 = C38298 * C1728;
    const double C67549 = C38298 * C10543;
    const double C13467 =
        (((-4 * C87327) / C87281 - C87342 / C87281) * ae) / C87285 +
        ((2 * ((0 * ae) / C87281 - C87327 / C87283) - C87342 / C87285) * ae) /
            C87281;
    const double C38589 =
        (((-4 * C87327) / C87281 - C87342 / C87281) * ae) / C87281;
    const double C38613 = C38590 * C823;
    const double C38601 = C38590 * C817;
    const double C38597 = C38590 * C818;
    const double C39529 = C38590 * C5726;
    const double C39517 = C38590 * C821;
    const double C40490 = C38590 * C6248;
    const double C40478 = C38590 * C4098;
    const double C41445 = C38590 * C822;
    const double C42360 = C38590 * C4099;
    const double C43478 = C38590 * C8515;
    const double C73085 = C38590 * C6249;
    const double C73081 = C38590 * C4097;
    const double C75966 = C38590 * C8516;
    const double C78540 = C38590 * C14601;
    const double C81531 = C38590 * C16683;
    const double C84062 = C38590 * C23153;
    const double C26255 =
        (((-4 * C87353) / C87281 - C87368 / C87281) * ae) / C87285 +
        ((2 * ((0 * ae) / C87281 - C87353 / C87283) - C87368 / C87285) * ae) /
            C87281;
    const double C55318 =
        (((-4 * C87353) / C87281 - C87368 / C87281) * ae) / C87281;
    const double C55342 = C55319 * C1728;
    const double C55330 = C55319 * C1722;
    const double C55326 = C55319 * C1723;
    const double C56295 = C55319 * C8515;
    const double C56283 = C55319 * C4098;
    const double C57350 = C55319 * C10543;
    const double C57338 = C55319 * C1726;
    const double C58264 = C55319 * C4099;
    const double C59203 = C55319 * C1727;
    const double C60409 = C55319 * C6248;
    const double C72551 = C55319 * C8516;
    const double C72547 = C55319 * C4097;
    const double C76508 = C55319 * C6249;
    const double C78016 = C55319 * C16683;
    const double C78955 = C55319 * C23153;
    const double C81946 = C55319 * C14601;
    const double C29689 = C29686 * C89093;
    const double C62384 = C29686 * C38291;
    const double C33873 = C33871 * C89093;
    const double C65320 = C33871 * C38291;
    const double C87521 = C87519 + C87501;
    const double C88348 = C88346 + C88336;
    const double C88694 = C88692 + C88673;
    const double C87520 = C87518 + C87498;
    const double C88347 = C88345 + C88333;
    const double C88693 = C88691 + C88668;
    const double C28841 = C2166 * C89093;
    const double C56917 = C2166 * C38292;
    const double C58796 = C3678 * C38292;
    const double C59877 = C4563 * C38292;
    const double C29687 = C29684 + C29678;
    const double C55879 = C55878 + C55876;
    const double C33868 = C33863 - C33864;
    const double C31625 = C31624 * C89093;
    const double C35800 = C35799 * C89093;
    const double C738 = C734 * C89236;
    const double C1645 = C1641 * C89236;
    const double C41856 = C1641 * C38294;
    const double C3276 = C3275 * C89236;
    const double C38915 = C3275 * C38294;
    const double C2550 = C2546 * C89236;
    const double C3999 = C3998 * C89236;
    const double C4999 = C4997 * C89236;
    const double C42766 = C4997 * C38294;
    const double C40917 = C40916 * C38294;
    const double C39039 = C38296 * C821;
    const double C39031 = C38296 * C818;
    const double C39027 = C38296 * C820;
    const double C39015 = C38296 * C819;
    const double C41017 = C38296 * C817;
    const double C42906 = C38296 * C4098;
    const double C42902 = C38296 * C4097;
    const double C44972 = C38296 * C5727;
    const double C45624 = C38296 * C6249;
    const double C48584 = C38296 * C8516;
    const double C56433 = C38296 * C1726;
    const double C56425 = C38296 * C1723;
    const double C56421 = C38296 * C1725;
    const double C56409 = C38296 * C1724;
    const double C58372 = C38296 * C1722;
    const double C67545 = C38296 * C10544;
    const double C13781 = C13772 - C13773;
    const double C13780 = C13768 - C13769;
    const double C13779 = C13764 - C13765;
    const double C13778 = C13760 - C13761;
    const double C13777 = C13756 - C13757;
    const double C13776 = C13752 - C13753;
    const double C15309 = C15304 - C15305;
    const double C15308 = C15300 - C15301;
    const double C16711 = C16704 - C16705;
    const double C16710 = C16700 - C16701;
    const double C16709 = C16696 - C16697;
    const double C16708 = C16692 - C16693;
    const double C18319 = C18315 - C18316;
    const double C18853 = C18848 - C18849;
    const double C18852 = C18844 - C18845;
    const double C21132 = C21128 - C21129;
    const double C27035 = C27026 - C27027;
    const double C27034 = C27022 - C27023;
    const double C27033 = C27018 - C27019;
    const double C27032 = C27014 - C27015;
    const double C27031 = C27010 - C27011;
    const double C27030 = C27006 - C27007;
    const double C28531 = C28526 - C28527;
    const double C28530 = C28522 - C28523;
    const double C29248 = C29244 - C29245;
    const double C31294 = C31290 - C31291;
    const double C35565 = C35561 - C35562;
    const double C73607 = C73603 - C73604;
    const double C39053 = C39042 - C39043;
    const double C39051 = C39034 - C39035;
    const double C39048 = C39022 - C39023;
    const double C39047 = C39018 - C39019;
    const double C41025 = C41020 - C41021;
    const double C42916 = C42909 - C42910;
    const double C42913 = C42897 - C42898;
    const double C44980 = C44975 - C44976;
    const double C45632 = C45627 - C45628;
    const double C48592 = C48587 - C48588;
    const double C56447 = C56436 - C56437;
    const double C56445 = C56428 - C56429;
    const double C56442 = C56416 - C56417;
    const double C56441 = C56412 - C56413;
    const double C58380 = C58375 - C58376;
    const double C67553 = C67548 - C67549;
    const double C38609 = C38589 * C109;
    const double C38605 = C38589 * C108;
    const double C38593 = C38589 * C107;
    const double C39525 = C38589 * C821;
    const double C39521 = C38589 * C818;
    const double C40486 = C38589 * C1726;
    const double C40482 = C38589 * C1723;
    const double C41441 = C38589 * C817;
    const double C42356 = C38589 * C1722;
    const double C43474 = C38589 * C4098;
    const double C73089 = C38589 * C1725;
    const double C73077 = C38589 * C1724;
    const double C75962 = C38589 * C4097;
    const double C78536 = C38589 * C6249;
    const double C81527 = C38589 * C8516;
    const double C84058 = C38589 * C10544;
    const double C38621 = C38612 - C38613;
    const double C38618 = C38600 - C38601;
    const double C38617 = C38596 - C38597;
    const double C39535 = C39528 - C39529;
    const double C39532 = C39516 - C39517;
    const double C40496 = C40489 - C40490;
    const double C40493 = C40477 - C40478;
    const double C41449 = C41444 - C41445;
    const double C42364 = C42359 - C42360;
    const double C43482 = C43477 - C43478;
    const double C73094 = C73084 - C73085;
    const double C73093 = C73080 - C73081;
    const double C75970 = C75965 - C75966;
    const double C78544 = C78539 - C78540;
    const double C81535 = C81530 - C81531;
    const double C84066 = C84061 - C84062;
    const double C55338 = C55318 * C109;
    const double C55334 = C55318 * C108;
    const double C55322 = C55318 * C107;
    const double C56291 = C55318 * C821;
    const double C56287 = C55318 * C818;
    const double C57346 = C55318 * C1726;
    const double C57342 = C55318 * C1723;
    const double C58260 = C55318 * C817;
    const double C59199 = C55318 * C1722;
    const double C60405 = C55318 * C4098;
    const double C72555 = C55318 * C820;
    const double C72543 = C55318 * C819;
    const double C76512 = C55318 * C4097;
    const double C78012 = C55318 * C5727;
    const double C78951 = C55318 * C6249;
    const double C81942 = C55318 * C8516;
    const double C55350 = C55341 - C55342;
    const double C55347 = C55329 - C55330;
    const double C55346 = C55325 - C55326;
    const double C56301 = C56294 - C56295;
    const double C56298 = C56282 - C56283;
    const double C57356 = C57349 - C57350;
    const double C57353 = C57337 - C57338;
    const double C58268 = C58263 - C58264;
    const double C59207 = C59202 - C59203;
    const double C60413 = C60408 - C60409;
    const double C72560 = C72550 - C72551;
    const double C72559 = C72546 - C72547;
    const double C76515 = C76507 - C76508;
    const double C78020 = C78015 - C78016;
    const double C78959 = C78954 - C78955;
    const double C81950 = C81945 - C81946;
    const double C938 =
        (2 * C87546 + ae * C87547 + C87402 * C87564 + be * C87524 * C87521 +
         C87524 * (be * C87521 +
                   C87524 * (2 * C87560 + ae * C87561 +
                             C87402 * (C87554 + ae * C87402 * C87556 +
                                       C87402 * (ae * C87556 +
                                                 C87402 * std::pow(C87408, 7) *
                                                     bs[7] * C87530))))) /
        C87283;
    const double C1949 =
        (2 * C87590 + ae * C87591 + C87402 * C87608 + be * C87568 * C87521 +
         C87568 * (be * C87521 +
                   C87568 * (2 * C87604 + ae * C87605 +
                             C87402 * (C87598 + ae * C87402 * C87600 +
                                       C87402 * (ae * C87600 +
                                                 C87402 * std::pow(C87408, 7) *
                                                     bs[7] * C87574))))) /
        C87283;
    const double C2708 =
        (be * (3 * C87468 + C87402 * C87521 + C87504 * ae) +
         C87524 * (3 * C87564 + ae * C87565 +
                   C87402 * (2 * C87560 + ae * C87561 +
                             C87402 * (C87554 + ae * C87402 * C87556 +
                                       C87402 * (ae * C87556 +
                                                 C87402 * std::pow(C87408, 7) *
                                                     bs[7] * C87530))))) /
        C87283;
    const double C3513 =
        (be * (3 * C87468 + C87402 * C87521 + C87504 * ae) +
         C87568 * (3 * C87608 + ae * C87609 +
                   C87402 * (2 * C87604 + ae * C87605 +
                             C87402 * (C87598 + ae * C87402 * C87600 +
                                       C87402 * (ae * C87600 +
                                                 C87402 * std::pow(C87408, 7) *
                                                     bs[7] * C87574))))) /
        C87283;
    const double C4218 =
        (C87568 * (be * C87521 +
                   C87524 * (2 * C87560 + ae * C87561 +
                             C87402 * (C87554 + ae * C87402 * C87556 +
                                       C87402 * (ae * C87556 +
                                                 C87402 * std::pow(C87408, 7) *
                                                     bs[7] * C87530))))) /
        C87283;
    const double C4332 =
        (be * C87524 * C87521 +
         C87568 * C87524 *
             (2 * C87604 + ae * C87605 +
              C87402 * (C87598 + ae * C87402 * C87600 +
                        C87402 * (ae * C87600 + C87402 * std::pow(C87408, 7) *
                                                    bs[7] * C87574)))) /
        C87283;
    const double C123 = (4 * (2 * C87434 + C87402 * C87468 + C87452 * ae) +
                         C87402 * (3 * C87468 + C87402 * C87521 + C87504 * ae) +
                         (3 * C87452 + C87402 * C87504) * ae) /
                        C87281;
    const double C840 =
        (2 * C87434 + C87402 * C87468 + C87452 * ae + C87521 * C87656) / C87281;
    const double C1745 =
        (2 * C87434 + C87402 * C87468 + C87452 * ae + C87521 * C87754) / C87281;
    const double C2631 =
        (C87524 * (3 * C87468 + C87402 * C87521 + C87504 * ae)) / C87281;
    const double C3354 =
        (C87568 * (3 * C87468 + C87402 * C87521 + C87504 * ae)) / C87281;
    const double C4108 = (C87568 * C87524 * C87521) / C87281;
    const double C18485 =
        (4 * (2 * C88023 + C87524 * C88189 + C88181 * ae) +
         C87524 * (3 * C88189 + C87524 * C88348 + C88339 * ae) +
         (3 * C88181 + C87524 * C88339) * ae) /
        C87281;
    const double C19093 =
        (2 * C88023 + C87524 * C88189 + C88181 * ae + C88348 * C87754) / C87281;
    const double C21370 =
        (C87568 * (3 * C88189 + C87524 * C88348 + C88339 * ae)) / C87281;
    const double C35901 =
        (4 * (2 * C88146 + C87568 * C88523 + C88517 * ae) +
         C87568 * (3 * C88523 + C87568 * C88694 + C88678 * ae) +
         (3 * C88517 + C87568 * C88678) * ae) /
        C87281;
    const double C129 =
        (4 * (2 * C87464 + ae * C87467 + be * C87468 + C87402 * C87515) +
         ae * (3 * C87467 + C87402 * C87520 + C87504 * be) +
         be * (3 * C87468 + C87402 * C87521 + C87504 * ae) +
         C87402 * (3 * C87515 + ae * C87520 + be * C87521 +
                   C87402 * (2 * C87509 + ae * C87513 + be * C87514 +
                             C87402 * (C87502 + ae * C87503 + be * C87505 +
                                       C87402 * (ae * C87491 + be * C87494 +
                                                 C87402 *
                                                     (C87475 * C87476 +
                                                      C87406 * bs[7] *
                                                          std::pow(C87408, 7)) *
                                                     C87282))))) /
        C87283;
    const double C1150 =
        (2 * C87633 + be * C87634 + C87402 * C87651 + ae * C87524 * C87520 +
         C87524 * (ae * C87520 +
                   C87524 * (2 * C87647 + be * C87648 +
                             C87402 * (C87641 + be * C87402 * C87643 +
                                       C87402 * (be * C87643 +
                                                 C87402 * std::pow(C87408, 7) *
                                                     bs[7] * C87617))))) /
        C87283;
    const double C2345 =
        (2 * C87714 + be * C87715 + C87402 * C87732 + ae * C87568 * C87520 +
         C87568 * (ae * C87520 +
                   C87568 * (2 * C87728 + be * C87729 +
                             C87402 * (C87722 + be * C87402 * C87724 +
                                       C87402 * (be * C87724 +
                                                 C87402 * std::pow(C87408, 7) *
                                                     bs[7] * C87698))))) /
        C87283;
    const double C2632 =
        (3 * (C87779 + ae * C87524 * C87459 + be * C87524 * C87460 +
              C87402 * C87930) +
         ae * C87524 * C87520 + be * C87524 * C87521 +
         C87402 *
             (2 * C87930 + ae * C87524 * C87513 + be * C87524 * C87514 +
              C87402 * (C87925 + ae * C87524 * C87503 + be * C87524 * C87505 +
                        C87402 * (ae * C87524 * C87491 + be * C87524 * C87494 +
                                  C87402 * C87524 *
                                      (C87475 * C87476 +
                                       C87406 * bs[7] * std::pow(C87408, 7)) *
                                      C87282)))) /
        C87283;
    const double C2872 =
        (ae * (3 * C87467 + C87402 * C87520 + C87504 * be) +
         C87524 * (3 * C87651 + be * C87652 +
                   C87402 * (2 * C87647 + be * C87648 +
                             C87402 * (C87641 + be * C87402 * C87643 +
                                       C87402 * (be * C87643 +
                                                 C87402 * std::pow(C87408, 7) *
                                                     bs[7] * C87617))))) /
        C87283;
    const double C3355 =
        (3 * (C87854 + ae * C87568 * C87459 + be * C87568 * C87460 +
              C87402 * C87947) +
         ae * C87568 * C87520 + be * C87568 * C87521 +
         C87402 *
             (2 * C87947 + ae * C87568 * C87513 + be * C87568 * C87514 +
              C87402 * (C87942 + ae * C87568 * C87503 + be * C87568 * C87505 +
                        C87402 * (ae * C87568 * C87491 + be * C87568 * C87494 +
                                  C87402 * C87568 *
                                      (C87475 * C87476 +
                                       C87406 * bs[7] * std::pow(C87408, 7)) *
                                      C87282)))) /
        C87283;
    const double C3834 =
        (ae * (3 * C87467 + C87402 * C87520 + C87504 * be) +
         C87568 * (3 * C87732 + be * C87733 +
                   C87402 * (2 * C87728 + be * C87729 +
                             C87402 * (C87722 + be * C87402 * C87724 +
                                       C87402 * (be * C87724 +
                                                 C87402 * std::pow(C87408, 7) *
                                                     bs[7] * C87698))))) /
        C87283;
    const double C4446 =
        (ae * C87568 * C87520 +
         C87524 * C87568 *
             (2 * C87647 + be * C87648 +
              C87402 * (C87641 + be * C87402 * C87643 +
                        C87402 * (be * C87643 + C87402 * std::pow(C87408, 7) *
                                                    bs[7] * C87617)))) /
        C87283;
    const double C4774 =
        (ae * C87524 * C87520 +
         C87568 * C87524 *
             (2 * C87728 + be * C87729 +
              C87402 * (C87722 + be * C87402 * C87724 +
                        C87402 * (be * C87724 + C87402 * std::pow(C87408, 7) *
                                                    bs[7] * C87698)))) /
        C87283;
    const double C122 = (4 * (2 * C87433 + C87402 * C87467 + C87452 * be) +
                         C87402 * (3 * C87467 + C87402 * C87520 + C87504 * be) +
                         (3 * C87452 + C87402 * C87504) * be) /
                        C87281;
    const double C839 =
        (2 * C87433 + C87402 * C87467 + C87452 * be + C87520 * C87656) / C87281;
    const double C1744 =
        (2 * C87433 + C87402 * C87467 + C87452 * be + C87520 * C87754) / C87281;
    const double C2630 =
        (C87524 * (3 * C87467 + C87402 * C87520 + C87504 * be)) / C87281;
    const double C3353 =
        (C87568 * (3 * C87467 + C87402 * C87520 + C87504 * be)) / C87281;
    const double C4107 = (C87568 * C87524 * C87520) / C87281;
    const double C18543 =
        (4 * (2 * C88178 + ae * C88188 + be * C88189 + C87524 * C88337) +
         ae * (3 * C88188 + C87524 * C88347 + C88339 * be) +
         be * (3 * C88189 + C87524 * C88348 + C88339 * ae) +
         C87524 * (3 * C88337 + ae * C88347 + be * C88348 +
                   C87524 * (2 * C88324 + ae * C88341 + be * C88342 +
                             C87524 * (C87671 + ae * C88325 + be * C88328 +
                                       C87524 * (ae * C87556 + be * C87643 +
                                                 C87524 *
                                                     (C87475 * C87476 +
                                                      C87656 * bs[7] *
                                                          std::pow(C87408, 7)) *
                                                     C87282))))) /
        C87283;
    const double C19411 =
        (2 * C88229 + be * C88230 + C87524 * C88376 + ae * C87568 * C88347 +
         C87568 * (ae * C88347 +
                   C87568 * (2 * C88370 + be * C88372 +
                             C87524 * (C87748 + be * C87524 * C87724 +
                                       C87524 * (be * C87724 +
                                                 C87524 * std::pow(C87408, 7) *
                                                     bs[7] * C87739))))) /
        C87283;
    const double C21452 =
        (3 * (C88270 + ae * C87568 * C88179 + be * C87568 * C88182 +
              C87524 * C88414) +
         ae * C87568 * C88347 + be * C87568 * C88348 +
         C87524 *
             (2 * C88414 + ae * C87568 * C88341 + be * C87568 * C88342 +
              C87524 * (C88410 + ae * C87568 * C88325 + be * C87568 * C88328 +
                        C87524 * (ae * C87568 * C87556 + be * C87568 * C87643 +
                                  C87524 * C87568 *
                                      (C87475 * C87476 +
                                       C87656 * bs[7] * std::pow(C87408, 7)) *
                                      C87282)))) /
        C87283;
    const double C21687 =
        (ae * (3 * C88188 + C87524 * C88347 + C88339 * be) +
         C87568 * (3 * C88376 + be * C88377 +
                   C87524 * (2 * C88370 + be * C88372 +
                             C87524 * (C87748 + be * C87524 * C87724 +
                                       C87524 * (be * C87724 +
                                                 C87524 * std::pow(C87408, 7) *
                                                     bs[7] * C87739))))) /
        C87283;
    const double C18372 =
        (4 * (2 * C88022 + C87524 * C88188 + C88181 * be) +
         C87524 * (3 * C88188 + C87524 * C88347 + C88339 * be) +
         (3 * C88181 + C87524 * C88339) * be) /
        C87281;
    const double C18933 =
        (2 * C88022 + C87524 * C88188 + C88181 * be + C88347 * C87754) / C87281;
    const double C21209 =
        (C87568 * (3 * C88188 + C87524 * C88347 + C88339 * be)) / C87281;
    const double C36010 =
        (4 * (2 * C88514 + ae * C88520 + be * C88523 + C87568 * C88684) +
         ae * (3 * C88520 + C87568 * C88693 + C88678 * be) +
         be * (3 * C88523 + C87568 * C88694 + C88678 * ae) +
         C87568 * (3 * C88684 + ae * C88693 + be * C88694 +
                   C87568 * (2 * C88675 + ae * C88687 + be * C88688 +
                             C87568 * (C87769 + ae * C88676 + be * C88679 +
                                       C87568 * (ae * C87600 + be * C87724 +
                                                 C87568 *
                                                     (C87475 * C87476 +
                                                      C87754 * bs[7] *
                                                          std::pow(C87408, 7)) *
                                                     C87282))))) /
        C87283;
    const double C35678 =
        (4 * (2 * C88145 + C87568 * C88520 + C88517 * be) +
         C87568 * (3 * C88520 + C87568 * C88693 + C88678 * be) +
         (3 * C88517 + C87568 * C88678) * be) /
        C87281;
    const double C29690 = C29687 * C89093;
    const double C62385 = C29687 * C38292;
    const double C65321 = C55879 * C38292;
    const double C33870 = C33868 - C33865;
    const double C39052 = C39038 - C39039;
    const double C39050 = C39030 - C39031;
    const double C39049 = C39026 - C39027;
    const double C39046 = C39014 - C39015;
    const double C41024 = C41016 - C41017;
    const double C42915 = C42905 - C42906;
    const double C42914 = C42901 - C42902;
    const double C44979 = C44971 - C44972;
    const double C45631 = C45623 - C45624;
    const double C48591 = C48583 - C48584;
    const double C56446 = C56432 - C56433;
    const double C56444 = C56424 - C56425;
    const double C56443 = C56420 - C56421;
    const double C56440 = C56408 - C56409;
    const double C58379 = C58371 - C58372;
    const double C67552 = C67544 - C67545;
    const double C13787 = C13781 - C13774;
    const double C13786 = C13780 - C13770;
    const double C13785 = C13779 - C13766;
    const double C13784 = C13778 - C13762;
    const double C13783 = C13777 - C13758;
    const double C13782 = C13776 - C13754;
    const double C15311 = C15309 - C15306;
    const double C15310 = C15308 - C15302;
    const double C16715 = C16711 - C16706;
    const double C16714 = C16710 - C16702;
    const double C16713 = C16709 - C16698;
    const double C16712 = C16708 - C16694;
    const double C18320 = C18319 - C18317;
    const double C18855 = C18853 - C18850;
    const double C18854 = C18852 - C18846;
    const double C21133 = C21132 - C21130;
    const double C27041 = C27035 - C27028;
    const double C27040 = C27034 - C27024;
    const double C27039 = C27033 - C27020;
    const double C27038 = C27032 - C27016;
    const double C27037 = C27031 - C27012;
    const double C27036 = C27030 - C27008;
    const double C28533 = C28531 - C28528;
    const double C28532 = C28530 - C28524;
    const double C29249 = C29248 - C29246;
    const double C31295 = C31294 - C31292;
    const double C35566 = C35565 - C35563;
    const double C73608 = C73607 - C73605;
    const double C39061 = C39053 - C39044;
    const double C39059 = C39051 - C39036;
    const double C39056 = C39048 - C39024;
    const double C39055 = C39047 - C39020;
    const double C41027 = C41025 - C41022;
    const double C42920 = C42916 - C42911;
    const double C42917 = C42913 - C42899;
    const double C44982 = C44980 - C44977;
    const double C45634 = C45632 - C45629;
    const double C48594 = C48592 - C48589;
    const double C56455 = C56447 - C56438;
    const double C56453 = C56445 - C56430;
    const double C56450 = C56442 - C56418;
    const double C56449 = C56441 - C56414;
    const double C58382 = C58380 - C58377;
    const double C67555 = C67553 - C67550;
    const double C38620 = C38608 - C38609;
    const double C38619 = C38604 - C38605;
    const double C38616 = C38592 - C38593;
    const double C39534 = C39524 - C39525;
    const double C39533 = C39520 - C39521;
    const double C40495 = C40485 - C40486;
    const double C40494 = C40481 - C40482;
    const double C41448 = C41440 - C41441;
    const double C42363 = C42355 - C42356;
    const double C43481 = C43473 - C43474;
    const double C73095 = C73088 - C73089;
    const double C73092 = C73076 - C73077;
    const double C75969 = C75961 - C75962;
    const double C78543 = C78535 - C78536;
    const double C81534 = C81526 - C81527;
    const double C84065 = C84057 - C84058;
    const double C38627 = C38621 - C38614;
    const double C38624 = C38618 - C38602;
    const double C38623 = C38617 - C38598;
    const double C39539 = C39535 - C39530;
    const double C39536 = C39532 - C39518;
    const double C40500 = C40496 - C40491;
    const double C40497 = C40493 - C40479;
    const double C41451 = C41449 - C41446;
    const double C42366 = C42364 - C42361;
    const double C43484 = C43482 - C43479;
    const double C73098 = C73094 - C73086;
    const double C73097 = C73093 - C73082;
    const double C75972 = C75970 - C75967;
    const double C78546 = C78544 - C78541;
    const double C81537 = C81535 - C81532;
    const double C84068 = C84066 - C84063;
    const double C55349 = C55337 - C55338;
    const double C55348 = C55333 - C55334;
    const double C55345 = C55321 - C55322;
    const double C56300 = C56290 - C56291;
    const double C56299 = C56286 - C56287;
    const double C57355 = C57345 - C57346;
    const double C57354 = C57341 - C57342;
    const double C58267 = C58259 - C58260;
    const double C59206 = C59198 - C59199;
    const double C60412 = C60404 - C60405;
    const double C72561 = C72554 - C72555;
    const double C72558 = C72542 - C72543;
    const double C76516 = C76511 - C76512;
    const double C78019 = C78011 - C78012;
    const double C78958 = C78950 - C78951;
    const double C81949 = C81941 - C81942;
    const double C55356 = C55350 - C55343;
    const double C55353 = C55347 - C55331;
    const double C55352 = C55346 - C55327;
    const double C56305 = C56301 - C56296;
    const double C56302 = C56298 - C56284;
    const double C57360 = C57356 - C57351;
    const double C57357 = C57353 - C57339;
    const double C58270 = C58268 - C58265;
    const double C59209 = C59207 - C59204;
    const double C60415 = C60413 - C60410;
    const double C72564 = C72560 - C72552;
    const double C72563 = C72559 - C72548;
    const double C76517 = C76515 - C76509;
    const double C78022 = C78020 - C78017;
    const double C78961 = C78959 - C78956;
    const double C81952 = C81950 - C81947;
    const double C33872 = C33870 + C33866;
    const double C39060 = C39052 - C39040;
    const double C39058 = C39050 - C39032;
    const double C39057 = C39049 - C39028;
    const double C39054 = C39046 - C39016;
    const double C41026 = C41024 - C41018;
    const double C42919 = C42915 - C42907;
    const double C42918 = C42914 - C42903;
    const double C44981 = C44979 - C44973;
    const double C45633 = C45631 - C45625;
    const double C48593 = C48591 - C48585;
    const double C56454 = C56446 - C56434;
    const double C56452 = C56444 - C56426;
    const double C56451 = C56443 - C56422;
    const double C56448 = C56440 - C56410;
    const double C58381 = C58379 - C58373;
    const double C67554 = C67552 - C67546;
    const double C13793 = C13787 + C13775;
    const double C13792 = C13786 + C13771;
    const double C13791 = C13785 + C13767;
    const double C13790 = C13784 + C13763;
    const double C13789 = C13783 + C13759;
    const double C13788 = C13782 + C13755;
    const double C15313 = C15311 + C15307;
    const double C15312 = C15310 + C15303;
    const double C16719 = C16715 + C16707;
    const double C16718 = C16714 + C16703;
    const double C16717 = C16713 + C16699;
    const double C16716 = C16712 + C16695;
    const double C18321 = C18320 + C18318;
    const double C18857 = C18855 + C18851;
    const double C18856 = C18854 + C18847;
    const double C21134 = C21133 + C21131;
    const double C27047 = C27041 + C27029;
    const double C27046 = C27040 + C27025;
    const double C27045 = C27039 + C27021;
    const double C27044 = C27038 + C27017;
    const double C27043 = C27037 + C27013;
    const double C27042 = C27036 + C27009;
    const double C28535 = C28533 + C28529;
    const double C28534 = C28532 + C28525;
    const double C29250 = C29249 + C29247;
    const double C31296 = C31295 + C31293;
    const double C35567 = C35566 + C35564;
    const double C73609 = C73608 + C73606;
    const double C39069 = C39061 + C39045;
    const double C39067 = C39059 + C39037;
    const double C39064 = C39056 + C39025;
    const double C39063 = C39055 + C39021;
    const double C41029 = C41027 + C41023;
    const double C42924 = C42920 + C42912;
    const double C42921 = C42917 + C42900;
    const double C44984 = C44982 + C44978;
    const double C45636 = C45634 + C45630;
    const double C48596 = C48594 + C48590;
    const double C56463 = C56455 + C56439;
    const double C56461 = C56453 + C56431;
    const double C56458 = C56450 + C56419;
    const double C56457 = C56449 + C56415;
    const double C58384 = C58382 + C58378;
    const double C67557 = C67555 + C67551;
    const double C38626 = C38620 - C38610;
    const double C38625 = C38619 - C38606;
    const double C38622 = C38616 - C38594;
    const double C39538 = C39534 - C39526;
    const double C39537 = C39533 - C39522;
    const double C40499 = C40495 - C40487;
    const double C40498 = C40494 - C40483;
    const double C41450 = C41448 - C41442;
    const double C42365 = C42363 - C42357;
    const double C43483 = C43481 - C43475;
    const double C73099 = C73095 - C73090;
    const double C73096 = C73092 - C73078;
    const double C75971 = C75969 - C75963;
    const double C78545 = C78543 - C78537;
    const double C81536 = C81534 - C81528;
    const double C84067 = C84065 - C84059;
    const double C38633 = C38627 + C38615;
    const double C38630 = C38624 + C38603;
    const double C38629 = C38623 + C38599;
    const double C39543 = C39539 + C39531;
    const double C39540 = C39536 + C39519;
    const double C40504 = C40500 + C40492;
    const double C40501 = C40497 + C40480;
    const double C41453 = C41451 + C41447;
    const double C42368 = C42366 + C42362;
    const double C43486 = C43484 + C43480;
    const double C73102 = C73098 + C73087;
    const double C73101 = C73097 + C73083;
    const double C75974 = C75972 + C75968;
    const double C78548 = C78546 + C78542;
    const double C81539 = C81537 + C81533;
    const double C84070 = C84068 + C84064;
    const double C55355 = C55349 - C55339;
    const double C55354 = C55348 - C55335;
    const double C55351 = C55345 - C55323;
    const double C56304 = C56300 - C56292;
    const double C56303 = C56299 - C56288;
    const double C57359 = C57355 - C57347;
    const double C57358 = C57354 - C57343;
    const double C58269 = C58267 - C58261;
    const double C59208 = C59206 - C59200;
    const double C60414 = C60412 - C60406;
    const double C72565 = C72561 - C72556;
    const double C72562 = C72558 - C72544;
    const double C76518 = C76516 - C76513;
    const double C78021 = C78019 - C78013;
    const double C78960 = C78958 - C78952;
    const double C81951 = C81949 - C81943;
    const double C55362 = C55356 + C55344;
    const double C55359 = C55353 + C55332;
    const double C55358 = C55352 + C55328;
    const double C56309 = C56305 + C56297;
    const double C56306 = C56302 + C56285;
    const double C57364 = C57360 + C57352;
    const double C57361 = C57357 + C57340;
    const double C58272 = C58270 + C58266;
    const double C59211 = C59209 + C59205;
    const double C60417 = C60415 + C60411;
    const double C72568 = C72564 + C72553;
    const double C72567 = C72563 + C72549;
    const double C76519 = C76517 + C76510;
    const double C78024 = C78022 + C78018;
    const double C78963 = C78961 + C78957;
    const double C81954 = C81952 + C81948;
    const double C33874 = C33872 * C89093;
    const double C39068 = C39060 + C39041;
    const double C39066 = C39058 + C39033;
    const double C39065 = C39057 + C39029;
    const double C39062 = C39054 + C39017;
    const double C41028 = C41026 + C41019;
    const double C42923 = C42919 + C42908;
    const double C42922 = C42918 + C42904;
    const double C44983 = C44981 + C44974;
    const double C45635 = C45633 + C45626;
    const double C48595 = C48593 + C48586;
    const double C56462 = C56454 + C56435;
    const double C56460 = C56452 + C56427;
    const double C56459 = C56451 + C56423;
    const double C56456 = C56448 + C56411;
    const double C58383 = C58381 + C58374;
    const double C67556 = C67554 + C67547;
    const double C13799 = C13793 * C89247;
    const double C13798 = C13792 * C89247;
    const double C71732 = C13792 * C54750;
    const double C13797 = C13791 * C89247;
    const double C71730 = C13791 * C54750;
    const double C13796 = C13790 * C89247;
    const double C77469 = C13790 * C54750;
    const double C13795 = C13789 * C89247;
    const double C71729 = C13789 * C54750;
    const double C13794 = C13788 * C89247;
    const double C71726 = C13788 * C54750;
    const double C15315 = C15313 * C89247;
    const double C15314 = C15312 * C89247;
    const double C73602 = C15312 * C54750;
    const double C16723 = C16719 * C89247;
    const double C71733 = C16719 * C54751;
    const double C16722 = C16718 * C89247;
    const double C71731 = C16718 * C54751;
    const double C75415 = C16718 * C54750;
    const double C16721 = C16717 * C89247;
    const double C71727 = C16717 * C54751;
    const double C75414 = C16717 * C54750;
    const double C16720 = C16716 * C89247;
    const double C71728 = C16716 * C54751;
    const double C81114 = C16716 * C54750;
    const double C18322 = C18321 * C89247;
    const double C18859 = C18857 * C89247;
    const double C81115 = C18857 * C54751;
    const double C18858 = C18856 * C89247;
    const double C75413 = C18856 * C54751;
    const double C78123 = C18856 * C54750;
    const double C21135 = C21134 * C89247;
    const double C77470 = C21134 * C54751;
    const double C75416 = C29250 * C54751;
    const double C78124 = C31296 * C54751;
    const double C73610 = C73609 * C54751;
    const double C38632 = C38626 + C38611;
    const double C38631 = C38625 + C38607;
    const double C38628 = C38622 + C38595;
    const double C39542 = C39538 + C39527;
    const double C39541 = C39537 + C39523;
    const double C40503 = C40499 + C40488;
    const double C40502 = C40498 + C40484;
    const double C41452 = C41450 + C41443;
    const double C42367 = C42365 + C42358;
    const double C43485 = C43483 + C43476;
    const double C73103 = C73099 + C73091;
    const double C73100 = C73096 + C73079;
    const double C75973 = C75971 + C75964;
    const double C78547 = C78545 + C78538;
    const double C81538 = C81536 + C81529;
    const double C84069 = C84067 + C84060;
    const double C55361 = C55355 + C55340;
    const double C55360 = C55354 + C55336;
    const double C55357 = C55351 + C55324;
    const double C56308 = C56304 + C56293;
    const double C56307 = C56303 + C56289;
    const double C57363 = C57359 + C57348;
    const double C57362 = C57358 + C57344;
    const double C58271 = C58269 + C58262;
    const double C59210 = C59208 + C59201;
    const double C60416 = C60414 + C60407;
    const double C72569 = C72565 + C72557;
    const double C72566 = C72562 + C72545;
    const double C76520 = C76518 + C76514;
    const double C78023 = C78021 + C78014;
    const double C78962 = C78960 + C78953;
    const double C81953 = C81951 + C81944;
    d2eexx[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C38295 * C112 - C38296 * C106 - C38295 * C113 + C38291 * C124 +
             C38297 * C114 - C38298 * C107 - C38297 * C115 + C38292 * C125) *
                C89247 * C38293 +
            (C39062 + C39063) * C89247 * C38294) *
               C89153 * C89307 -
           ((C39064 + C39065) * C89247 * C38294 +
            (C39063 + C39062) * C89247 * C38293) *
               C89153 * C89189) *
              C89333 +
          (((C39066 + C39067) * C89247 * C38293 +
            (C39068 + C39069) * C89247 * C38294) *
               C89153 * C89189 -
           ((C39067 + C39066) * C89247 * C38294 +
            (C38297 * C116 - C38298 * C108 - C38297 * C117 + C38292 * C126 +
             C38295 * C114 - C38296 * C107 - C38295 * C115 + C38291 * C125) *
                C89247 * C38293) *
               C89153 * C89307) *
              C89334 +
          (((C38295 * C116 - C38296 * C108 - C38295 * C117 + C38291 * C126 +
             C38297 * C118 - C38298 * C109 - C38297 * C119 + C38292 * C127) *
                C89247 * C38293 +
            (C41028 + C41029) * C89247 * C38294) *
               C89153 * C89307 -
           ((C38297 * C839 - C38298 * C824 - C38297 * C840 + C38292 * C848 +
             C38295 * C835 - C38296 * C822 - C38295 * C836 + C38291 * C846) *
                C89247 * C38294 +
            (C41029 + C41028) * C89247 * C38293) *
               C89153 * C89189) *
              C2628)) /
        (p * q * std::sqrt(p + q));
    d2eexy[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                C38295 +
            (C38293 * C187 - C38365 * C113 + C38294 * C931 - C38366 * C830) *
                C38291 +
            (C38368 - C38369 + C38370 - C38371) * C38297 +
            (C38372 - C38373 + C38374 - C38375) * C38292) *
               C89247 * C89153 * C89307 +
           ((C38365 * C819 - C38293 * C923 + C38366 * C820 - C38294 * C926) *
                C38295 +
            (C38365 * C830 - C38293 * C931 + C38366 * C832 - C38294 * C934) *
                C38291 +
            (C39168 - C39169 + C39170 - C39171) * C38297 +
            (C39172 - C39173 + C39174 - C39175) * C38292) *
               C89247 * C89153 * C89189) *
              C89333 +
          (((C38369 - C38368 + C38371 - C38370) * C38295 +
            (C38373 - C38372 + C38375 - C38374) * C38291 +
            (C38376 - C38377 + C38378 - C38379) * C38297 +
            (C38380 - C38381 + C38382 - C38383) * C38292) *
               C89247 * C89153 * C89307 +
           ((C39169 - C39168 + C39171 - C39170) * C38295 +
            (C39173 - C39172 + C39175 - C39174) * C38291 +
            (C41128 - C41129 + C41130 - C41131) * C38297 +
            (C41132 - C41133 + C41134 - C41135) * C38292) *
               C89247 * C89153 * C89189) *
              C89334 +
          (((C38377 - C38376 + C38379 - C38378) * C38295 +
            (C38381 - C38380 + C38383 - C38382) * C38291 +
            (C38384 - C38385 + C38386 - C38387) * C38297 +
            (C38388 - C38389 + C38390 - C38391) * C38292) *
               C89247 * C89153 * C89307 +
           ((C41129 - C41128 + C41131 - C41130) * C38295 +
            (C41133 - C41132 + C41135 - C41134) * C38291 +
            (C38365 * C823 - C38293 * C929 + C38366 * C824 - C38294 * C930) *
                C38297 +
            (C38365 * C838 - C38293 * C937 + C38366 * C840 - C38294 * C938) *
                C38292) *
               C89247 * C89153 * C89189) *
              C2628)) /
        (p * q * std::sqrt(p + q));
    d2eexz[0] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C89247 * C264 - C263 * C106) * C38295 +
                      (C89247 * C270 - C263 * C113) * C38291 +
                      (C277 - C278) * C38297 + (C279 - C280) * C38292) *
                         C38293 +
                     ((C13956 - C13957) * C38295 + (C13958 - C13959) * C38291 +
                      C39282 * C38297 + C39283 * C38292) *
                         C38294) *
                        C89153 * C89307 +
                    (((C13957 - C13956) * C38295 + (C13959 - C13958) * C38291 +
                      C39284 * C38297 + C39285 * C38292) *
                         C38293 +
                     ((C13961 - C13960) * C38295 + (C13963 - C13962) * C38291 +
                      C13968 * C38297 + C13969 * C38292) *
                         C38294) *
                        C89153 * C89189) *
                       C89333 +
                   ((((C278 - C277) * C38295 + (C280 - C279) * C38291 +
                      (C282 - C281) * C38297 + (C284 - C283) * C38292) *
                         C38293 +
                     (C39284 * C38295 + C39285 * C38291 + C2792 * C38297 +
                      C2793 * C38292) *
                         C38294) *
                        C89153 * C89307 +
                    ((C39282 * C38295 + C39283 * C38291 + C41234 * C38297 +
                      C41235 * C38292) *
                         C38293 +
                     (C39286 * C38295 + C39287 * C38291 +
                      (C1058 - C1059) * C38297 + (C1060 - C1061) * C38292) *
                         C38294) *
                        C89153 * C89189) *
                       C89334 +
                   (((C293 * C38295 + C294 * C38291 + (C286 - C285) * C38297 +
                      (C288 - C287) * C38292) *
                         C38293 +
                     (C41234 * C38295 + C41235 * C38291 +
                      (C2794 - C2795) * C38297 + (C2796 - C2797) * C38292) *
                         C38294) *
                        C89153 * C89307 +
                    ((C2792 * C38295 + C2793 * C38291 +
                      (C2795 - C2794) * C38297 + (C2797 - C2796) * C38292) *
                         C38293 +
                     ((C1059 - C1058) * C38295 + (C1061 - C1060) * C38291 +
                      (C263 * C824 - C89247 * C1036) * C38297 +
                      (C263 * C840 - C89247 * C1044) * C38292) *
                         C38294) *
                        C89153 * C89189) *
                       C2628)) /
                 (p * q * std::sqrt(p + q));
    d2eeyx[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                C38365 +
            (C38291 * C352 - C38295 * C346 + C38292 * C353 - C38297 * C347) *
                C38293 +
            (C39386 - C39387 + C39388 - C39389) * C38366 +
            (C39390 - C39391 + C39392 - C39393) * C38294) *
               C89247 * C89153 * C89307 +
           ((C39387 - C39386 + C39389 - C39388) * C38365 +
            (C39391 - C39390 + C39393 - C39392) * C38293 +
            (C39394 - C39395 + C39396 - C39397) * C38366 +
            (C39398 - C39399 + C39400 - C39401) * C38294) *
               C89247 * C89153 * C89189) *
              C89333 +
          (((C38295 * C107 - C38291 * C114 + C38297 * C108 - C38292 * C116) *
                C38365 +
            (C38295 * C347 - C38291 * C353 + C38297 * C348 - C38292 * C354) *
                C38293 +
            (C39402 - C39403 + C39404 - C39405) * C38366 +
            (C39406 - C39407 + C39408 - C39409) * C38294) *
               C89247 * C89153 * C89307 +
           ((C39403 - C39402 + C39405 - C39404) * C38365 +
            (C39407 - C39406 + C39409 - C39408) * C38293 +
            (C39410 - C39411 + C39412 - C39413) * C38366 +
            (C39414 - C39415 + C39416 - C39417) * C38294) *
               C89247 * C89153 * C89189) *
              C89334 +
          (((C38291 * C116 - C38295 * C108 + C38292 * C118 - C38297 * C109) *
                C38365 +
            (C38291 * C354 - C38295 * C348 + C38292 * C355 - C38297 * C349) *
                C38293 +
            (C41334 - C41335 + C41336 - C41337) * C38366 +
            (C41338 - C41339 + C41340 - C41341) * C38294) *
               C89247 * C89153 * C89307 +
           ((C41335 - C41334 + C41337 - C41336) * C38365 +
            (C41339 - C41338 + C41341 - C41340) * C38293 +
            (C38295 * C822 - C38291 * C835 + C38297 * C824 - C38292 * C839) *
                C38366 +
            (C38295 * C1140 - C38291 * C1148 + C38297 * C1142 -
             C38292 * C1150) *
                C38294) *
               C89247 * C89153 * C89189) *
              C2628)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C38365 * C181 - C38589 * C106 - C38365 * C346 + C38293 * C409 +
             C38366 * C923 - C38590 * C819 - C38366 * C1135 + C38294 * C1227) *
                C38291 +
            (C38628 + C38629) * C38292) *
               C89247 * C89153 * C89307 -
           ((C39540 + C39541) * C38292 +
            (C38366 * C926 - C38590 * C820 - C38366 * C1138 + C38294 * C1228 +
             C38365 * C923 - C38589 * C819 - C38365 * C1135 + C38293 * C1227) *
                C38291) *
               C89247 * C89153 * C89189) *
              C89333 +
          (((C39541 + C39540) * C38291 + (C41452 + C41453) * C38292) * C89247 *
               C89153 * C89189 -
           ((C38630 + C38631) * C38292 + (C38629 + C38628) * C38291) * C89247 *
               C89153 * C89307) *
              C89334 +
          (((C38631 + C38630) * C38291 + (C38632 + C38633) * C38292) * C89247 *
               C89153 * C89307 -
           ((C38366 * C930 - C38590 * C824 - C38366 * C1142 + C38294 * C1232 +
             C38365 * C929 - C38589 * C823 - C38365 * C1141 + C38293 * C1231) *
                C38292 +
            (C41453 + C41452) * C38291) *
               C89247 * C89153 * C89189) *
              C2628)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[0] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C89247 * C264 - C263 * C106) * C38365 +
                      (C89247 * C493 - C263 * C346) * C38293 +
                      (C13956 - C13957) * C38366 + (C14240 - C14241) * C38294) *
                         C38291 +
                     ((C277 - C278) * C38365 + (C500 - C501) * C38293 +
                      C39282 * C38366 + C39642 * C38294) *
                         C38292) *
                        C89153 * C89307 +
                    (((C13957 - C13956) * C38365 + (C14241 - C14240) * C38293 +
                      (C13961 - C13960) * C38366 + (C14243 - C14242) * C38294) *
                         C38291 +
                     (C39284 * C38365 + C39643 * C38293 + C13968 * C38366 +
                      C14246 * C38294) *
                         C38292) *
                        C89153 * C89189) *
                       C89333 +
                   ((((C278 - C277) * C38365 + (C501 - C500) * C38293 +
                      C39284 * C38366 + C39643 * C38294) *
                         C38291 +
                     ((C282 - C281) * C38365 + (C504 - C503) * C38293 +
                      C2792 * C38366 + C3032 * C38294) *
                         C38292) *
                        C89153 * C89307 +
                    ((C39282 * C38365 + C39642 * C38293 + C39286 * C38366 +
                      C39644 * C38294) *
                         C38291 +
                     (C41234 * C38365 + C41552 * C38293 +
                      (C1058 - C1059) * C38366 + (C1350 - C1351) * C38294) *
                         C38292) *
                        C89153 * C89189) *
                       C89334 +
                   (((C293 * C38365 + C510 * C38293 + C41234 * C38366 +
                      C41552 * C38294) *
                         C38291 +
                     ((C286 - C285) * C38365 + (C507 - C506) * C38293 +
                      (C2794 - C2795) * C38366 + (C3033 - C3034) * C38294) *
                         C38292) *
                        C89153 * C89307 +
                    ((C2792 * C38365 + C3032 * C38293 +
                      (C1059 - C1058) * C38366 + (C1351 - C1350) * C38294) *
                         C38291 +
                     ((C2795 - C2794) * C38365 + (C3034 - C3033) * C38293 +
                      (C263 * C824 - C89247 * C1036) * C38366 +
                      (C263 * C1142 - C89247 * C1342) * C38294) *
                         C38292) *
                        C89153 * C89189) *
                       C2628)) /
                 (p * q * std::sqrt(p + q));
    d2eezx[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                 C263 +
             (C38291 * C571 - C38295 * C565 + C38292 * C572 - C38297 * C566) *
                 C89247) *
                C38293 +
            ((C39386 - C39387 + C39388 - C39389) * C263 +
             (C39743 - C39744 + C39745 - C39746) * C89247) *
                C38294) *
               C89153 * C89307 +
           (((C39387 - C39386 + C39389 - C39388) * C263 +
             (C39744 - C39743 + C39746 - C39745) * C89247) *
                C38293 +
            ((C39394 - C39395 + C39396 - C39397) * C263 +
             (C39747 - C39748 + C39749 - C39750) * C89247) *
                C38294) *
               C89153 * C89189) *
              C89333 +
          ((((C38295 * C107 - C38291 * C114 + C38297 * C108 - C38292 * C116) *
                 C263 +
             (C38295 * C566 - C38291 * C572 + C38297 * C567 - C38292 * C573) *
                 C89247) *
                C38293 +
            ((C39402 - C39403 + C39404 - C39405) * C263 +
             (C39751 - C39752 + C39753 - C39754) * C89247) *
                C38294) *
               C89153 * C89307 +
           (((C39403 - C39402 + C39405 - C39404) * C263 +
             (C39752 - C39751 + C39754 - C39753) * C89247) *
                C38293 +
            ((C39410 - C39411 + C39412 - C39413) * C263 +
             (C39755 - C39756 + C39757 - C39758) * C89247) *
                C38294) *
               C89153 * C89189) *
              C89334 +
          ((((C38291 * C116 - C38295 * C108 + C38292 * C118 - C38297 * C109) *
                 C263 +
             (C38291 * C573 - C38295 * C567 + C38292 * C574 - C38297 * C568) *
                 C89247) *
                C38293 +
            ((C41334 - C41335 + C41336 - C41337) * C263 +
             (C41651 - C41652 + C41653 - C41654) * C89247) *
                C38294) *
               C89153 * C89307 +
           (((C41335 - C41334 + C41337 - C41336) * C263 +
             (C41652 - C41651 + C41654 - C41653) * C89247) *
                C38293 +
            ((C38295 * C822 - C38291 * C835 + C38297 * C824 - C38292 * C839) *
                 C263 +
             (C38295 * C1430 - C38291 * C1438 + C38297 * C1432 -
              C38292 * C1440) *
                 C89247) *
                C38294) *
               C89153 * C89189) *
              C2628)) /
        (p * q * std::sqrt(p + q));
    d2eezy[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                 C263 +
             (C38293 * C627 - C38365 * C565 + C38294 * C1515 - C38366 * C1425) *
                 C89247) *
                C38291 +
            ((C38368 - C38369 + C38370 - C38371) * C263 +
             (C38832 - C38833 + C38834 - C38835) * C89247) *
                C38292) *
               C89153 * C89307 +
           (((C38365 * C819 - C38293 * C923 + C38366 * C820 - C38294 * C926) *
                 C263 +
             (C38365 * C1425 - C38293 * C1515 + C38366 * C1428 -
              C38294 * C1518) *
                 C89247) *
                C38291 +
            ((C39168 - C39169 + C39170 - C39171) * C263 +
             (C39857 - C39858 + C39859 - C39860) * C89247) *
                C38292) *
               C89153 * C89189) *
              C89333 +
          ((((C38369 - C38368 + C38371 - C38370) * C263 +
             (C38833 - C38832 + C38835 - C38834) * C89247) *
                C38291 +
            ((C38376 - C38377 + C38378 - C38379) * C263 +
             (C38836 - C38837 + C38838 - C38839) * C89247) *
                C38292) *
               C89153 * C89307 +
           (((C39169 - C39168 + C39171 - C39170) * C263 +
             (C39858 - C39857 + C39860 - C39859) * C89247) *
                C38291 +
            ((C41128 - C41129 + C41130 - C41131) * C263 +
             (C41753 - C41754 + C41755 - C41756) * C89247) *
                C38292) *
               C89153 * C89189) *
              C89334 +
          ((((C38377 - C38376 + C38379 - C38378) * C263 +
             (C38837 - C38836 + C38839 - C38838) * C89247) *
                C38291 +
            ((C38384 - C38385 + C38386 - C38387) * C263 +
             (C38840 - C38841 + C38842 - C38843) * C89247) *
                C38292) *
               C89153 * C89307 +
           (((C41129 - C41128 + C41131 - C41130) * C263 +
             (C41754 - C41753 + C41756 - C41755) * C89247) *
                C38291 +
            ((C38365 * C823 - C38293 * C929 + C38366 * C824 - C38294 * C930) *
                 C263 +
             (C38365 * C1431 - C38293 * C1521 + C38366 * C1432 -
              C38294 * C1522) *
                 C89247) *
                C38292) *
               C89153 * C89189) *
              C2628)) /
        (p * q * std::sqrt(p + q));
    d2eezz[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) *
                 C38293 +
             C14524 * C38294) *
                C38291 +
            (C38910 + C38911) * C38292) *
               C89153 * C89307 -
           ((C39963 + C39964) * C38292 +
            (C14525 * C38294 + C14524 * C38293) * C38291) *
               C89153 * C89189) *
              C89333 +
          (((C39964 + C39963) * C38291 + (C41855 + C41856) * C38292) * C89153 *
               C89189 -
           ((C38912 + C38913) * C38292 + (C38911 + C38910) * C38291) * C89153 *
               C89307) *
              C89334 +
          (((C38913 + C38912) * C38291 + (C38914 + C38915) * C38292) * C89153 *
               C89307 -
           (((C263 * C1036 - C699 * C824 - C263 * C1432 + C89247 * C1612) *
                 C38294 +
             C3275 * C38293) *
                C38292 +
            (C41856 + C41855) * C38291) *
               C89153 * C89189) *
              C2628)) /
        (p * q * std::sqrt(p + q));
    d2eexx[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C38295 * C112 - C38296 * C106 - C38295 * C113 + C38291 * C124 +
              C38297 * C114 - C38298 * C107 - C38297 * C115 + C38292 * C125) *
                 C89247 * C38293 +
             (C39062 + C39063) * C89247 * C38294) *
                C89308 -
            ((C42921 + C42922) * C89247 * C38294 +
             (C38297 * C1732 - C38298 * C1723 - C38297 * C1733 +
              C38292 * C1747 + C38295 * C1734 - C38296 * C1724 -
              C38295 * C1735 + C38291 * C1748) *
                 C89247 * C38293) *
                C89217) *
               C89307 +
           (((C42922 + C42921) * C89247 * C38293 +
             (C38295 * C8521 - C38296 * C8516 - C38295 * C8522 +
              C38291 * C8525 + C38297 * C8519 - C38298 * C8515 -
              C38297 * C8520 + C38292 * C8524) *
                 C89247 * C38294) *
                C89217 -
            ((C39064 + C39065) * C89247 * C38294 +
             (C39063 + C39062) * C89247 * C38293) *
                C89308) *
               C89189) *
              C815 +
          ((((C38295 * C1732 - C38296 * C1723 - C38295 * C1733 +
              C38291 * C1747 + C38297 * C1730 - C38298 * C1722 -
              C38297 * C1731 + C38292 * C1746) *
                 C89247 * C38293 +
             (C42923 + C42924) * C89247 * C38294) *
                C89217 -
            ((C39067 + C39066) * C89247 * C38294 +
             (C38297 * C116 - C38298 * C108 - C38297 * C117 + C38292 * C126 +
              C38295 * C114 - C38296 * C107 - C38295 * C115 + C38291 * C125) *
                 C89247 * C38293) *
                C89308) *
               C89307 +
           (((C39066 + C39067) * C89247 * C38293 +
             (C39068 + C39069) * C89247 * C38294) *
                C89308 -
            ((C38297 * C8517 - C38298 * C8514 - C38297 * C8518 +
              C38292 * C8523 + C38295 * C8519 - C38296 * C8515 -
              C38295 * C8520 + C38291 * C8524) *
                 C89247 * C38294 +
             (C42924 + C42923) * C89247 * C38293) *
                C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eexy[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                 C38295 +
             (C38293 * C187 - C38365 * C113 + C38294 * C931 - C38366 * C830) *
                 C38291 +
             (C38368 - C38369 + C38370 - C38371) * C38297 +
             (C38372 - C38373 + C38374 - C38375) * C38292) *
                C89247 * C89308 +
            ((C38365 * C1724 - C38293 * C1828 + C38366 * C4097 -
              C38294 * C4211) *
                 C38295 +
             (C38365 * C1735 - C38293 * C1836 + C38366 * C4102 -
              C38294 * C4215) *
                 C38291 +
             (C40163 - C40164 + C40165 - C40166) * C38297 +
             (C40167 - C40168 + C40169 - C40170) * C38292) *
                C89247 * C89217) *
               C89307 +
           (((C38365 * C819 - C38293 * C923 + C38366 * C820 - C38294 * C926) *
                 C38295 +
             (C38365 * C830 - C38293 * C931 + C38366 * C832 - C38294 * C934) *
                 C38291 +
             (C39168 - C39169 + C39170 - C39171) * C38297 +
             (C39172 - C39173 + C39174 - C39175) * C38292) *
                C89247 * C89308 +
            ((C38293 * C4211 - C38365 * C4097 + C38294 * C8600 -
              C38366 * C8516) *
                 C38295 +
             (C38293 * C4215 - C38365 * C4102 + C38294 * C8603 -
              C38366 * C8522) *
                 C38291 +
             (C43055 - C43056 + C43057 - C43058) * C38297 +
             (C43059 - C43060 + C43061 - C43062) * C38292) *
                C89247 * C89217) *
               C89189) *
              C815 +
          ((((C38369 - C38368 + C38371 - C38370) * C38295 +
             (C38373 - C38372 + C38375 - C38374) * C38291 +
             (C38376 - C38377 + C38378 - C38379) * C38297 +
             (C38380 - C38381 + C38382 - C38383) * C38292) *
                C89247 * C89308 +
            ((C40164 - C40163 + C40166 - C40165) * C38295 +
             (C40168 - C40167 + C40170 - C40169) * C38291 +
             (C42053 - C42054 + C42055 - C42056) * C38297 +
             (C42057 - C42058 + C42059 - C42060) * C38292) *
                C89247 * C89217) *
               C89307 +
           (((C39169 - C39168 + C39171 - C39170) * C38295 +
             (C39173 - C39172 + C39175 - C39174) * C38291 +
             (C41128 - C41129 + C41130 - C41131) * C38297 +
             (C41132 - C41133 + C41134 - C41135) * C38292) *
                C89247 * C89308 +
            ((C43056 - C43055 + C43058 - C43057) * C38295 +
             (C43060 - C43059 + C43062 - C43061) * C38291 +
             (C38365 * C4099 - C38293 * C4213 + C38366 * C8514 -
              C38294 * C8602) *
                 C38297 +
             (C38365 * C4106 - C38293 * C4217 + C38366 * C8518 -
              C38294 * C8605) *
                 C38292) *
                C89247 * C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eexz[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C89247 * C264 - C263 * C106) * C38295 +
              (C89247 * C270 - C263 * C113) * C38291 + (C277 - C278) * C38297 +
              (C279 - C280) * C38292) *
                 C38293 +
             ((C13956 - C13957) * C38295 + (C13958 - C13959) * C38291 +
              C39282 * C38297 + C39283 * C38292) *
                 C38294) *
                C89308 +
            (((C263 * C1724 - C89247 * C1934) * C38295 +
              (C263 * C1735 - C89247 * C1942) * C38291 +
              (C1951 - C1952) * C38297 + (C1953 - C1954) * C38292) *
                 C38293 +
             ((C16928 - C16929) * C38295 + (C16930 - C16931) * C38291 +
              C43193 * C38297 + C43194 * C38292) *
                 C38294) *
                C89217) *
               C89307 +
           ((((C13957 - C13956) * C38295 + (C13959 - C13958) * C38291 +
              C39284 * C38297 + C39285 * C38292) *
                 C38293 +
             ((C13961 - C13960) * C38295 + (C13963 - C13962) * C38291 +
              C13968 * C38297 + C13969 * C38292) *
                 C38294) *
                C89308 +
            (((C16929 - C16928) * C38295 + (C16931 - C16930) * C38291 +
              C43195 * C38297 + C43196 * C38292) *
                 C38293 +
             ((C16933 - C16932) * C38295 + (C16935 - C16934) * C38291 +
              (C16936 - C16937) * C38297 + (C16938 - C16939) * C38292) *
                 C38294) *
                C89217) *
               C89189) *
              C815 +
          (((((C278 - C277) * C38295 + (C280 - C279) * C38291 +
              (C282 - C281) * C38297 + (C284 - C283) * C38292) *
                 C38293 +
             (C39284 * C38295 + C39285 * C38291 + C2792 * C38297 +
              C2793 * C38292) *
                 C38294) *
                C89308 +
            (((C1952 - C1951) * C38295 + (C1954 - C1953) * C38291 +
              (C1956 - C1955) * C38297 + (C1958 - C1957) * C38292) *
                 C38293 +
             (C43195 * C38295 + C43196 * C38291 + (C4338 - C4339) * C38297 +
              (C4340 - C4341) * C38292) *
                 C38294) *
                C89217) *
               C89307 +
           (((C39282 * C38295 + C39283 * C38291 + C41234 * C38297 +
              C41235 * C38292) *
                 C38293 +
             (C39286 * C38295 + C39287 * C38291 + (C1058 - C1059) * C38297 +
              (C1060 - C1061) * C38292) *
                 C38294) *
                C89308 +
            ((C43193 * C38295 + C43194 * C38291 + (C4339 - C4338) * C38297 +
              (C4341 - C4340) * C38292) *
                 C38293 +
             ((C16937 - C16936) * C38295 + (C16939 - C16938) * C38291 +
              (C263 * C8514 - C89247 * C8682) * C38297 +
              (C263 * C8518 - C89247 * C8685) * C38292) *
                 C38294) *
                C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                 C38365 +
             (C38291 * C352 - C38295 * C346 + C38292 * C353 - C38297 * C347) *
                 C38293 +
             (C39386 - C39387 + C39388 - C39389) * C38366 +
             (C39390 - C39391 + C39392 - C39393) * C38294) *
                C89247 * C89308 +
            ((C38295 * C1724 - C38291 * C1734 + C38297 * C1723 -
              C38292 * C1732) *
                 C38365 +
             (C38295 * C2040 - C38291 * C2048 + C38297 * C2041 -
              C38292 * C2049) *
                 C38293 +
             (C43327 - C43328 + C43329 - C43330) * C38366 +
             (C43331 - C43332 + C43333 - C43334) * C38294) *
                C89247 * C89217) *
               C89307 +
           (((C39387 - C39386 + C39389 - C39388) * C38365 +
             (C39391 - C39390 + C39393 - C39392) * C38293 +
             (C39394 - C39395 + C39396 - C39397) * C38366 +
             (C39398 - C39399 + C39400 - C39401) * C38294) *
                C89247 * C89308 +
            ((C43328 - C43327 + C43330 - C43329) * C38365 +
             (C43332 - C43331 + C43334 - C43333) * C38293 +
             (C38291 * C8521 - C38295 * C8516 + C38292 * C8519 -
              C38297 * C8515) *
                 C38366 +
             (C38291 * C8763 - C38295 * C8760 + C38292 * C8764 -
              C38297 * C8761) *
                 C38294) *
                C89247 * C89217) *
               C89189) *
              C815 +
          ((((C38295 * C107 - C38291 * C114 + C38297 * C108 - C38292 * C116) *
                 C38365 +
             (C38295 * C347 - C38291 * C353 + C38297 * C348 - C38292 * C354) *
                 C38293 +
             (C39402 - C39403 + C39404 - C39405) * C38366 +
             (C39406 - C39407 + C39408 - C39409) * C38294) *
                C89247 * C89308 +
            ((C38291 * C1732 - C38295 * C1723 + C38292 * C1730 -
              C38297 * C1722) *
                 C38365 +
             (C38291 * C2049 - C38295 * C2041 + C38292 * C2050 -
              C38297 * C2042) *
                 C38293 +
             (C43335 - C43336 + C43337 - C43338) * C38366 +
             (C43339 - C43340 + C43341 - C43342) * C38294) *
                C89247 * C89217) *
               C89307 +
           (((C39403 - C39402 + C39405 - C39404) * C38365 +
             (C39407 - C39406 + C39409 - C39408) * C38293 +
             (C39410 - C39411 + C39412 - C39413) * C38366 +
             (C39414 - C39415 + C39416 - C39417) * C38294) *
                C89247 * C89308 +
            ((C43336 - C43335 + C43338 - C43337) * C38365 +
             (C43340 - C43339 + C43342 - C43341) * C38293 +
             (C38295 * C8515 - C38291 * C8519 + C38297 * C8514 -
              C38292 * C8517) *
                 C38366 +
             (C38295 * C8761 - C38291 * C8764 + C38297 * C8762 -
              C38292 * C8765) *
                 C38294) *
                C89247 * C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C38365 * C181 - C38589 * C106 - C38365 * C346 + C38293 * C409 +
              C38366 * C923 - C38590 * C819 - C38366 * C1135 + C38294 * C1227) *
                 C38291 +
             (C38628 + C38629) * C38292) *
                C89247 * C89308 -
            ((C40501 + C40502) * C38292 +
             (C38366 * C4211 - C38590 * C4097 - C38366 * C4439 +
              C38294 * C4545 + C38365 * C1828 - C38589 * C1724 -
              C38365 * C2040 + C38293 * C2132) *
                 C38291) *
                C89247 * C89217) *
               C89307 +
           (((C38365 * C4211 - C38589 * C4097 - C38365 * C4439 +
              C38293 * C4545 + C38366 * C8600 - C38590 * C8516 -
              C38366 * C8760 + C38294 * C8842) *
                 C38291 +
             (C43485 + C43486) * C38292) *
                C89247 * C89217 -
            ((C39540 + C39541) * C38292 +
             (C38366 * C926 - C38590 * C820 - C38366 * C1138 + C38294 * C1228 +
              C38365 * C923 - C38589 * C819 - C38365 * C1135 + C38293 * C1227) *
                 C38291) *
                C89247 * C89308) *
               C89189) *
              C815 +
          ((((C40502 + C40501) * C38291 + (C42367 + C42368) * C38292) * C89247 *
                C89217 -
            ((C38630 + C38631) * C38292 + (C38629 + C38628) * C38291) * C89247 *
                C89308) *
               C89307 +
           (((C39541 + C39540) * C38291 + (C41452 + C41453) * C38292) * C89247 *
                C89308 -
            ((C38366 * C8602 - C38590 * C8514 - C38366 * C8762 +
              C38294 * C8840 + C38365 * C4213 - C38589 * C4099 -
              C38365 * C4441 + C38293 * C4547) *
                 C38292 +
             (C43486 + C43485) * C38291) *
                C89247 * C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C89247 * C264 - C263 * C106) * C38365 +
              (C89247 * C493 - C263 * C346) * C38293 +
              (C13956 - C13957) * C38366 + (C14240 - C14241) * C38294) *
                 C38291 +
             ((C277 - C278) * C38365 + (C500 - C501) * C38293 +
              C39282 * C38366 + C39642 * C38294) *
                 C38292) *
                C89308 +
            (((C263 * C1724 - C89247 * C1934) * C38365 +
              (C263 * C2040 - C89247 * C2240) * C38293 +
              (C16928 - C16929) * C38366 + (C17258 - C17259) * C38294) *
                 C38291 +
             ((C1951 - C1952) * C38365 + (C2249 - C2250) * C38293 +
              C43193 * C38366 + C43617 * C38294) *
                 C38292) *
                C89217) *
               C89307 +
           ((((C13957 - C13956) * C38365 + (C14241 - C14240) * C38293 +
              (C13961 - C13960) * C38366 + (C14243 - C14242) * C38294) *
                 C38291 +
             (C39284 * C38365 + C39643 * C38293 + C13968 * C38366 +
              C14246 * C38294) *
                 C38292) *
                C89308 +
            (((C16929 - C16928) * C38365 + (C17259 - C17258) * C38293 +
              (C16933 - C16932) * C38366 + (C17261 - C17260) * C38294) *
                 C38291 +
             (C43195 * C38365 + C43618 * C38293 + (C16936 - C16937) * C38366 +
              (C17262 - C17263) * C38294) *
                 C38292) *
                C89217) *
               C89189) *
              C815 +
          (((((C278 - C277) * C38365 + (C501 - C500) * C38293 +
              C39284 * C38366 + C39643 * C38294) *
                 C38291 +
             ((C282 - C281) * C38365 + (C504 - C503) * C38293 + C2792 * C38366 +
              C3032 * C38294) *
                 C38292) *
                C89308 +
            (((C1952 - C1951) * C38365 + (C2250 - C2249) * C38293 +
              C43195 * C38366 + C43618 * C38294) *
                 C38291 +
             ((C1956 - C1955) * C38365 + (C2252 - C2251) * C38293 +
              (C4338 - C4339) * C38366 + (C4668 - C4669) * C38294) *
                 C38292) *
                C89217) *
               C89307 +
           (((C39282 * C38365 + C39642 * C38293 + C39286 * C38366 +
              C39644 * C38294) *
                 C38291 +
             (C41234 * C38365 + C41552 * C38293 + (C1058 - C1059) * C38366 +
              (C1350 - C1351) * C38294) *
                 C38292) *
                C89308 +
            ((C43193 * C38365 + C43617 * C38293 + (C16937 - C16936) * C38366 +
              (C17263 - C17262) * C38294) *
                 C38291 +
             ((C4339 - C4338) * C38365 + (C4669 - C4668) * C38293 +
              (C263 * C8514 - C89247 * C8682) * C38366 +
              (C263 * C8762 - C89247 * C8919) * C38294) *
                 C38292) *
                C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eezx[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                  C263 +
              (C38291 * C571 - C38295 * C565 + C38292 * C572 - C38297 * C566) *
                  C89247) *
                 C38293 +
             ((C39386 - C39387 + C39388 - C39389) * C263 +
              (C39743 - C39744 + C39745 - C39746) * C89247) *
                 C38294) *
                C89308 +
            (((C38295 * C1724 - C38291 * C1734 + C38297 * C1723 -
               C38292 * C1732) *
                  C263 +
              (C38295 * C2330 - C38291 * C2338 + C38297 * C2331 -
               C38292 * C2339) *
                  C89247) *
                 C38293 +
             ((C43327 - C43328 + C43329 - C43330) * C263 +
              (C43749 - C43750 + C43751 - C43752) * C89247) *
                 C38294) *
                C89217) *
               C89307 +
           ((((C39387 - C39386 + C39389 - C39388) * C263 +
              (C39744 - C39743 + C39746 - C39745) * C89247) *
                 C38293 +
             ((C39394 - C39395 + C39396 - C39397) * C263 +
              (C39747 - C39748 + C39749 - C39750) * C89247) *
                 C38294) *
                C89308 +
            (((C43328 - C43327 + C43330 - C43329) * C263 +
              (C43750 - C43749 + C43752 - C43751) * C89247) *
                 C38293 +
             ((C38291 * C8521 - C38295 * C8516 + C38292 * C8519 -
               C38297 * C8515) *
                  C263 +
              (C38291 * C8997 - C38295 * C8994 + C38292 * C8998 -
               C38297 * C8995) *
                  C89247) *
                 C38294) *
                C89217) *
               C89189) *
              C815 +
          (((((C38295 * C107 - C38291 * C114 + C38297 * C108 - C38292 * C116) *
                  C263 +
              (C38295 * C566 - C38291 * C572 + C38297 * C567 - C38292 * C573) *
                  C89247) *
                 C38293 +
             ((C39402 - C39403 + C39404 - C39405) * C263 +
              (C39751 - C39752 + C39753 - C39754) * C89247) *
                 C38294) *
                C89308 +
            (((C38291 * C1732 - C38295 * C1723 + C38292 * C1730 -
               C38297 * C1722) *
                  C263 +
              (C38291 * C2339 - C38295 * C2331 + C38292 * C2340 -
               C38297 * C2332) *
                  C89247) *
                 C38293 +
             ((C43335 - C43336 + C43337 - C43338) * C263 +
              (C43753 - C43754 + C43755 - C43756) * C89247) *
                 C38294) *
                C89217) *
               C89307 +
           ((((C39403 - C39402 + C39405 - C39404) * C263 +
              (C39752 - C39751 + C39754 - C39753) * C89247) *
                 C38293 +
             ((C39410 - C39411 + C39412 - C39413) * C263 +
              (C39755 - C39756 + C39757 - C39758) * C89247) *
                 C38294) *
                C89308 +
            (((C43336 - C43335 + C43338 - C43337) * C263 +
              (C43754 - C43753 + C43756 - C43755) * C89247) *
                 C38293 +
             ((C38295 * C8515 - C38291 * C8519 + C38297 * C8514 -
               C38292 * C8517) *
                  C263 +
              (C38295 * C8995 - C38291 * C8998 + C38297 * C8996 -
               C38292 * C8999) *
                  C89247) *
                 C38294) *
                C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eezy[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                  C263 +
              (C38293 * C627 - C38365 * C565 + C38294 * C1515 -
               C38366 * C1425) *
                  C89247) *
                 C38291 +
             ((C38368 - C38369 + C38370 - C38371) * C263 +
              (C38832 - C38833 + C38834 - C38835) * C89247) *
                 C38292) *
                C89308 +
            (((C38365 * C1724 - C38293 * C1828 + C38366 * C4097 -
               C38294 * C4211) *
                  C263 +
              (C38365 * C2330 - C38293 * C2420 + C38366 * C4767 -
               C38294 * C4873) *
                  C89247) *
                 C38291 +
             ((C40163 - C40164 + C40165 - C40166) * C263 +
              (C40801 - C40802 + C40803 - C40804) * C89247) *
                 C38292) *
                C89217) *
               C89307 +
           ((((C38365 * C819 - C38293 * C923 + C38366 * C820 - C38294 * C926) *
                  C263 +
              (C38365 * C1425 - C38293 * C1515 + C38366 * C1428 -
               C38294 * C1518) *
                  C89247) *
                 C38291 +
             ((C39168 - C39169 + C39170 - C39171) * C263 +
              (C39857 - C39858 + C39859 - C39860) * C89247) *
                 C38292) *
                C89308 +
            (((C38293 * C4211 - C38365 * C4097 + C38294 * C8600 -
               C38366 * C8516) *
                  C263 +
              (C38293 * C4873 - C38365 * C4767 + C38294 * C9074 -
               C38366 * C8994) *
                  C89247) *
                 C38291 +
             ((C43055 - C43056 + C43057 - C43058) * C263 +
              (C43887 - C43888 + C43889 - C43890) * C89247) *
                 C38292) *
                C89217) *
               C89189) *
              C815 +
          (((((C38369 - C38368 + C38371 - C38370) * C263 +
              (C38833 - C38832 + C38835 - C38834) * C89247) *
                 C38291 +
             ((C38376 - C38377 + C38378 - C38379) * C263 +
              (C38836 - C38837 + C38838 - C38839) * C89247) *
                 C38292) *
                C89308 +
            (((C40164 - C40163 + C40166 - C40165) * C263 +
              (C40802 - C40801 + C40804 - C40803) * C89247) *
                 C38291 +
             ((C42053 - C42054 + C42055 - C42056) * C263 +
              (C42663 - C42664 + C42665 - C42666) * C89247) *
                 C38292) *
                C89217) *
               C89307 +
           ((((C39169 - C39168 + C39171 - C39170) * C263 +
              (C39858 - C39857 + C39860 - C39859) * C89247) *
                 C38291 +
             ((C41128 - C41129 + C41130 - C41131) * C263 +
              (C41753 - C41754 + C41755 - C41756) * C89247) *
                 C38292) *
                C89308 +
            (((C43056 - C43055 + C43058 - C43057) * C263 +
              (C43888 - C43887 + C43890 - C43889) * C89247) *
                 C38291 +
             ((C38365 * C4099 - C38293 * C4213 + C38366 * C8514 -
               C38294 * C8602) *
                  C263 +
              (C38365 * C4769 - C38293 * C4875 + C38366 * C8996 -
               C38294 * C9076) *
                  C89247) *
                 C38292) *
                C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eezz[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) *
                  C38293 +
              C14524 * C38294) *
                 C38291 +
             (C38910 + C38911) * C38292) *
                C89308 -
            ((C40907 + C40908) * C38292 +
             (C17593 * C38294 +
              (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
                  C38293) *
                 C38291) *
                C89217) *
               C89307 +
           (((C17593 * C38293 + C17592 * C38294) * C38291 +
             (C44021 + C44022) * C38292) *
                C89217 -
            ((C39963 + C39964) * C38292 +
             (C14525 * C38294 + C14524 * C38293) * C38291) *
                C89308) *
               C89189) *
              C815 +
          ((((C40908 + C40907) * C38291 + (C42765 + C42766) * C38292) * C89217 -
            ((C38912 + C38913) * C38292 + (C38911 + C38910) * C38291) *
                C89308) *
               C89307 +
           (((C39964 + C39963) * C38291 + (C41855 + C41856) * C38292) * C89308 -
            (((C263 * C8682 - C699 * C8514 - C263 * C8996 + C89247 * C9151) *
                  C38294 +
              C4997 * C38293) *
                 C38292 +
             (C44022 + C44021) * C38291) *
                C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eexx[2] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C38295 * C112 - C38296 * C106 - C38295 * C113 + C38291 * C124 +
             C38297 * C114 - C38298 * C107 - C38297 * C115 + C38292 * C125) *
                C89247 * C38293 +
            (C39062 + C39063) * C89247 * C38294) *
               C89153 * C812 -
           ((C39064 + C39065) * C89247 * C38294 +
            (C39063 + C39062) * C89247 * C38293) *
               C89153 * C813 +
           ((C39065 + C39064) * C89247 * C38293 +
            (C38295 * C5732 - C38296 * C5727 - C38295 * C5733 + C38291 * C5736 +
             C38297 * C5730 - C38298 * C5726 - C38297 * C5731 +
             C38292 * C5735) *
                C89247 * C38294) *
               C89153 * C814) *
              C815 +
          (((C39066 + C39067) * C89247 * C38293 +
            (C39068 + C39069) * C89247 * C38294) *
               C89153 * C813 -
           ((C39067 + C39066) * C89247 * C38294 +
            (C38297 * C116 - C38298 * C108 - C38297 * C117 + C38292 * C126 +
             C38295 * C114 - C38296 * C107 - C38295 * C115 + C38291 * C125) *
                C89247 * C38293) *
               C89153 * C812 -
           ((C38297 * C5728 - C38298 * C5725 - C38297 * C5729 + C38292 * C5734 +
             C38295 * C5730 - C38296 * C5726 - C38295 * C5731 +
             C38291 * C5735) *
                C89247 * C38294 +
            (C39069 + C39068) * C89247 * C38293) *
               C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C38295 * C112 - C38296 * C106 - C38295 * C113 + C38291 * C124 +
            C38297 * C114 - C38298 * C107 - C38297 * C115 + C38292 * C125) *
               C89247 * C38293 +
           (C38295 * C829 - C38296 * C819 - C38295 * C830 + C38291 * C843 +
            C38297 * C827 - C38298 * C818 - C38297 * C828 + C38292 * C842) *
               C89247 * C38294) *
              C89153 * C89137 * C96 -
          ((C38297 * C825 - C38298 * C817 - C38297 * C826 + C38292 * C841 +
            C38295 * C827 - C38296 * C818 - C38295 * C828 + C38291 * C842) *
               C89247 * C38294 +
           (C38297 * C116 - C38298 * C108 - C38297 * C117 + C38292 * C126 +
            C38295 * C114 - C38296 * C107 - C38295 * C115 + C38291 * C125) *
               C89247 * C38293) *
              C89153 * C89137 * C97 +
          ((C38295 * C116 - C38296 * C108 - C38295 * C117 + C38291 * C126 +
            C38297 * C118 - C38298 * C109 - C38297 * C119 + C38292 * C127) *
               C89247 * C38293 +
           (C38295 * C825 - C38296 * C817 - C38295 * C826 + C38291 * C841 +
            C38297 * C837 - C38298 * C823 - C38297 * C838 + C38292 * C847) *
               C89247 * C38294) *
              C89153 * C89137 * C98 -
          ((C38297 * C2630 - C38298 * C2629 - C38297 * C2631 + C38292 * C2632 +
            C38295 * C837 - C38296 * C823 - C38295 * C838 + C38291 * C847) *
               C89247 * C38294 +
           (C38297 * C120 - C38298 * C110 - C38297 * C121 + C38292 * C128 +
            C38295 * C118 - C38296 * C109 - C38295 * C119 + C38291 * C127) *
               C89247 * C38293) *
              C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C38295 * C112 - C38296 * C106 - C38295 * C113 + C38291 * C124 +
             C38297 * C114 - C38298 * C107 - C38297 * C115 + C38292 * C125) *
                C89247 * C38293 +
            (C39062 + C39063) * C89247 * C38294) *
               C1719 -
           ((C38297 * C4103 - C38298 * C4098 - C38297 * C4104 + C38292 * C4110 +
             C38295 * C4101 - C38296 * C4097 - C38295 * C4102 +
             C38291 * C4109) *
                C89247 * C38294 +
            (C38297 * C1732 - C38298 * C1723 - C38297 * C1733 + C38292 * C1747 +
             C38295 * C1734 - C38296 * C1724 - C38295 * C1735 +
             C38291 * C1748) *
                C89247 * C38293) *
               C1720 +
           ((C38295 * C1736 - C38296 * C1725 - C38295 * C1737 + C38291 * C1749 +
             C38297 * C1738 - C38298 * C1726 - C38297 * C1739 +
             C38292 * C1750) *
                C89247 * C38293 +
            (C38295 * C6254 - C38296 * C6249 - C38295 * C6255 + C38291 * C6258 +
             C38297 * C6252 - C38298 * C6248 - C38297 * C6253 +
             C38292 * C6257) *
                C89247 * C38294) *
               C1721) *
              C89137 * C815 +
          (((C38295 * C1732 - C38296 * C1723 - C38295 * C1733 + C38291 * C1747 +
             C38297 * C1730 - C38298 * C1722 - C38297 * C1731 +
             C38292 * C1746) *
                C89247 * C38293 +
            (C38295 * C4103 - C38296 * C4098 - C38295 * C4104 + C38291 * C4110 +
             C38297 * C4105 - C38298 * C4099 - C38297 * C4106 +
             C38292 * C4111) *
                C89247 * C38294) *
               C1720 -
           ((C39067 + C39066) * C89247 * C38294 +
            (C38297 * C116 - C38298 * C108 - C38297 * C117 + C38292 * C126 +
             C38295 * C114 - C38296 * C107 - C38295 * C115 + C38291 * C125) *
                C89247 * C38293) *
               C1719 -
           ((C38297 * C6250 - C38298 * C6247 - C38297 * C6251 + C38292 * C6256 +
             C38295 * C6252 - C38296 * C6248 - C38295 * C6253 +
             C38291 * C6257) *
                C89247 * C38294 +
            (C38297 * C1740 - C38298 * C1727 - C38297 * C1741 + C38292 * C1751 +
             C38295 * C1738 - C38296 * C1726 - C38295 * C1739 +
             C38291 * C1750) *
                C89247 * C38293) *
               C1721) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q));
    d2eexy[2] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                C38295 +
            (C38293 * C187 - C38365 * C113 + C38294 * C931 - C38366 * C830) *
                C38291 +
            (C38368 - C38369 + C38370 - C38371) * C38297 +
            (C38372 - C38373 + C38374 - C38375) * C38292) *
               C89247 * C89153 * C812 +
           ((C38365 * C819 - C38293 * C923 + C38366 * C820 - C38294 * C926) *
                C38295 +
            (C38365 * C830 - C38293 * C931 + C38366 * C832 - C38294 * C934) *
                C38291 +
            (C39168 - C39169 + C39170 - C39171) * C38297 +
            (C39172 - C39173 + C39174 - C39175) * C38292) *
               C89247 * C89153 * C813 +
           ((C38293 * C926 - C38365 * C820 + C38294 * C5787 - C38366 * C5727) *
                C38295 +
            (C38293 * C934 - C38365 * C832 + C38294 * C5790 - C38366 * C5733) *
                C38291 +
            (C39176 - C39177 + C39178 - C39179) * C38297 +
            (C39180 - C39181 + C39182 - C39183) * C38292) *
               C89247 * C89153 * C814) *
              C815 +
          (((C38369 - C38368 + C38371 - C38370) * C38295 +
            (C38373 - C38372 + C38375 - C38374) * C38291 +
            (C38376 - C38377 + C38378 - C38379) * C38297 +
            (C38380 - C38381 + C38382 - C38383) * C38292) *
               C89247 * C89153 * C812 +
           ((C39169 - C39168 + C39171 - C39170) * C38295 +
            (C39173 - C39172 + C39175 - C39174) * C38291 +
            (C38293 * C925 - C38365 * C817 + C38294 * C928 - C38366 * C822) *
                C38297 +
            (C38293 * C933 - C38365 * C826 + C38294 * C936 - C38366 * C836) *
                C38292) *
               C89247 * C89153 * C813 +
           ((C39177 - C39176 + C39179 - C39178) * C38295 +
            (C39181 - C39180 + C39183 - C39182) * C38291 +
            (C38365 * C822 - C38293 * C928 + C38366 * C5725 - C38294 * C5789) *
                C38297 +
            (C38365 * C836 - C38293 * C936 + C38366 * C5729 - C38294 * C5792) *
                C38292) *
               C89247 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
               C38295 +
           (C38293 * C187 - C38365 * C113 + C38294 * C931 - C38366 * C830) *
               C38291 +
           (C38368 - C38369 + C38370 - C38371) * C38297 +
           (C38372 - C38373 + C38374 - C38375) * C38292) *
              C89247 * C89153 * C89137 * C96 +
          ((C38369 - C38368 + C38371 - C38370) * C38295 +
           (C38373 - C38372 + C38375 - C38374) * C38291 +
           (C38376 - C38377 + C38378 - C38379) * C38297 +
           (C38380 - C38381 + C38382 - C38383) * C38292) *
              C89247 * C89153 * C89137 * C97 +
          ((C38377 - C38376 + C38379 - C38378) * C38295 +
           (C38381 - C38380 + C38383 - C38382) * C38291 +
           (C38384 - C38385 + C38386 - C38387) * C38297 +
           (C38388 - C38389 + C38390 - C38391) * C38292) *
              C89247 * C89153 * C89137 * C98 +
          ((C38385 - C38384 + C38387 - C38386) * C38295 +
           (C38389 - C38388 + C38391 - C38390) * C38291 +
           (C38365 * C110 - C38293 * C185 + C38366 * C2629 - C38294 * C2707) *
               C38297 +
           (C38365 * C121 - C38293 * C191 + C38366 * C2631 - C38294 * C2708) *
               C38292) *
              C89247 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                C38295 +
            (C38293 * C187 - C38365 * C113 + C38294 * C931 - C38366 * C830) *
                C38291 +
            (C38368 - C38369 + C38370 - C38371) * C38297 +
            (C38372 - C38373 + C38374 - C38375) * C38292) *
               C89247 * C1719 +
           ((C38365 * C1724 - C38293 * C1828 + C38366 * C4097 -
             C38294 * C4211) *
                C38295 +
            (C38365 * C1735 - C38293 * C1836 + C38366 * C4102 -
             C38294 * C4215) *
                C38291 +
            (C40163 - C40164 + C40165 - C40166) * C38297 +
            (C40167 - C40168 + C40169 - C40170) * C38292) *
               C89247 * C1720 +
           ((C38293 * C1831 - C38365 * C1725 + C38294 * C6333 -
             C38366 * C6249) *
                C38295 +
            (C38293 * C1839 - C38365 * C1737 + C38294 * C6336 -
             C38366 * C6255) *
                C38291 +
            (C40171 - C40172 + C40173 - C40174) * C38297 +
            (C40175 - C40176 + C40177 - C40178) * C38292) *
               C89247 * C1721) *
              C89137 * C815 +
          (((C38369 - C38368 + C38371 - C38370) * C38295 +
            (C38373 - C38372 + C38375 - C38374) * C38291 +
            (C38376 - C38377 + C38378 - C38379) * C38297 +
            (C38380 - C38381 + C38382 - C38383) * C38292) *
               C89247 * C1719 +
           ((C40164 - C40163 + C40166 - C40165) * C38295 +
            (C40168 - C40167 + C40170 - C40169) * C38291 +
            (C38293 * C1830 - C38365 * C1722 + C38294 * C4213 -
             C38366 * C4099) *
                C38297 +
            (C38293 * C1838 - C38365 * C1731 + C38294 * C4217 -
             C38366 * C4106) *
                C38292) *
               C89247 * C1720 +
           ((C40172 - C40171 + C40174 - C40173) * C38295 +
            (C40176 - C40175 + C40178 - C40177) * C38291 +
            (C38365 * C1727 - C38293 * C1833 + C38366 * C6247 -
             C38294 * C6335) *
                C38297 +
            (C38365 * C1741 - C38293 * C1841 + C38366 * C6251 -
             C38294 * C6338) *
                C38292) *
               C89247 * C1721) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q));
    d2eexz[2] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C89247 * C264 - C263 * C106) * C38295 +
                      (C89247 * C270 - C263 * C113) * C38291 +
                      (C277 - C278) * C38297 + (C279 - C280) * C38292) *
                         C38293 +
                     ((C13956 - C13957) * C38295 + (C13958 - C13959) * C38291 +
                      C39282 * C38297 + C39283 * C38292) *
                         C38294) *
                        C89153 * C812 +
                    (((C13957 - C13956) * C38295 + (C13959 - C13958) * C38291 +
                      C39284 * C38297 + C39285 * C38292) *
                         C38293 +
                     ((C13961 - C13960) * C38295 + (C13963 - C13962) * C38291 +
                      C13968 * C38297 + C13969 * C38292) *
                         C38294) *
                        C89153 * C813 +
                    ((C13974 * C38295 + C13975 * C38291 + C39286 * C38297 +
                      C39287 * C38292) *
                         C38293 +
                     ((C13965 - C13964) * C38295 + (C13967 - C13966) * C38291 +
                      (C13970 - C13971) * C38297 + (C13972 - C13973) * C38292) *
                         C38294) *
                        C89153 * C814) *
                       C815 +
                   ((((C278 - C277) * C38295 + (C280 - C279) * C38291 +
                      (C282 - C281) * C38297 + (C284 - C283) * C38292) *
                         C38293 +
                     (C39284 * C38295 + C39285 * C38291 + C2792 * C38297 +
                      C2793 * C38292) *
                         C38294) *
                        C89153 * C812 +
                    ((C39282 * C38295 + C39283 * C38291 +
                      (C1051 - C1050) * C38297 + (C1053 - C1052) * C38292) *
                         C38293 +
                     (C39286 * C38295 + C39287 * C38291 +
                      (C1058 - C1059) * C38297 + (C1060 - C1061) * C38292) *
                         C38294) *
                        C89153 * C813 +
                    ((C13968 * C38295 + C13969 * C38291 +
                      (C1059 - C1058) * C38297 + (C1061 - C1060) * C38292) *
                         C38293 +
                     ((C13971 - C13970) * C38295 + (C13973 - C13972) * C38291 +
                      (C263 * C5725 - C89247 * C5845) * C38297 +
                      (C263 * C5729 - C89247 * C5848) * C38292) *
                         C38294) *
                        C89153 * C814) *
                       C89124)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C89247 * C264 - C263 * C106) * C38295 +
                     (C89247 * C270 - C263 * C113) * C38291 +
                     (C277 - C278) * C38297 + (C279 - C280) * C38292) *
                        C38293 +
                    ((C13956 - C13957) * C38295 + (C13958 - C13959) * C38291 +
                     (C1047 - C1046) * C38297 + (C1049 - C1048) * C38292) *
                        C38294) *
                       C89153 * C89137 * C96 +
                   (((C278 - C277) * C38295 + (C280 - C279) * C38291 +
                     (C282 - C281) * C38297 + (C284 - C283) * C38292) *
                        C38293 +
                    ((C1046 - C1047) * C38295 + (C1048 - C1049) * C38291 +
                     C2792 * C38297 + C2793 * C38292) *
                        C38294) *
                       C89153 * C89137 * C97 +
                   ((C293 * C38295 + C294 * C38291 + (C286 - C285) * C38297 +
                     (C288 - C287) * C38292) *
                        C38293 +
                    ((C1051 - C1050) * C38295 + (C1053 - C1052) * C38291 +
                     (C2794 - C2795) * C38297 + (C2796 - C2797) * C38292) *
                        C38294) *
                       C89153 * C89137 * C98 +
                   ((C295 * C38295 + C296 * C38291 + (C290 - C289) * C38297 +
                     (C292 - C291) * C38292) *
                        C38293 +
                    ((C2795 - C2794) * C38295 + (C2797 - C2796) * C38291 +
                     (C263 * C2629 - C89247 * C2789) * C38297 +
                     (C263 * C2631 - C89247 * C2790) * C38292) *
                        C38294) *
                       C89153 * C89137 * C99)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C89247 * C264 - C263 * C106) * C38295 +
                      (C89247 * C270 - C263 * C113) * C38291 +
                      (C277 - C278) * C38297 + (C279 - C280) * C38292) *
                         C38293 +
                     ((C13956 - C13957) * C38295 + (C13958 - C13959) * C38291 +
                      C39282 * C38297 + C39283 * C38292) *
                         C38294) *
                        C1719 +
                    (((C263 * C1724 - C89247 * C1934) * C38295 +
                      (C263 * C1735 - C89247 * C1942) * C38291 +
                      (C1951 - C1952) * C38297 + (C1953 - C1954) * C38292) *
                         C38293 +
                     ((C16928 - C16929) * C38295 + (C16930 - C16931) * C38291 +
                      (C4335 - C4334) * C38297 + (C4337 - C4336) * C38292) *
                         C38294) *
                        C1720 +
                    (((C89247 * C1937 - C263 * C1725) * C38295 +
                      (C89247 * C1945 - C263 * C1737) * C38291 +
                      (C1959 - C1960) * C38297 + (C1961 - C1962) * C38292) *
                         C38293 +
                     ((C19012 - C19013) * C38295 + (C19014 - C19015) * C38291 +
                      (C40277 - C40278) * C38297 + (C40279 - C40280) * C38292) *
                         C38294) *
                        C1721) *
                       C89137 * C815 +
                   ((((C278 - C277) * C38295 + (C280 - C279) * C38291 +
                      (C282 - C281) * C38297 + (C284 - C283) * C38292) *
                         C38293 +
                     (C39284 * C38295 + C39285 * C38291 + C2792 * C38297 +
                      C2793 * C38292) *
                         C38294) *
                        C1719 +
                    (((C1952 - C1951) * C38295 + (C1954 - C1953) * C38291 +
                      (C1956 - C1955) * C38297 + (C1958 - C1957) * C38292) *
                         C38293 +
                     ((C4334 - C4335) * C38295 + (C4336 - C4337) * C38291 +
                      (C4338 - C4339) * C38297 + (C4340 - C4341) * C38292) *
                         C38294) *
                        C1720 +
                    (((C1960 - C1959) * C38295 + (C1962 - C1961) * C38291 +
                      (C1964 - C1963) * C38297 + (C1966 - C1965) * C38292) *
                         C38293 +
                     ((C40278 - C40277) * C38295 + (C40280 - C40279) * C38291 +
                      (C263 * C6247 - C89247 * C6415) * C38297 +
                      (C263 * C6251 - C89247 * C6418) * C38292) *
                         C38294) *
                        C1721) *
                       C89137 * C89124)) /
                     (p * q * std::sqrt(p + q));
    d2eeyx[2] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                C38365 +
            (C38291 * C352 - C38295 * C346 + C38292 * C353 - C38297 * C347) *
                C38293 +
            (C39386 - C39387 + C39388 - C39389) * C38366 +
            (C39390 - C39391 + C39392 - C39393) * C38294) *
               C89247 * C89153 * C812 +
           ((C39387 - C39386 + C39389 - C39388) * C38365 +
            (C39391 - C39390 + C39393 - C39392) * C38293 +
            (C39394 - C39395 + C39396 - C39397) * C38366 +
            (C39398 - C39399 + C39400 - C39401) * C38294) *
               C89247 * C89153 * C813 +
           ((C39395 - C39394 + C39397 - C39396) * C38365 +
            (C39399 - C39398 + C39401 - C39400) * C38293 +
            (C38291 * C5732 - C38295 * C5727 + C38292 * C5730 -
             C38297 * C5726) *
                C38366 +
            (C38291 * C5902 - C38295 * C5899 + C38292 * C5903 -
             C38297 * C5900) *
                C38294) *
               C89247 * C89153 * C814) *
              C815 +
          (((C38295 * C107 - C38291 * C114 + C38297 * C108 - C38292 * C116) *
                C38365 +
            (C38295 * C347 - C38291 * C353 + C38297 * C348 - C38292 * C354) *
                C38293 +
            (C39402 - C39403 + C39404 - C39405) * C38366 +
            (C39406 - C39407 + C39408 - C39409) * C38294) *
               C89247 * C89153 * C812 +
           ((C39403 - C39402 + C39405 - C39404) * C38365 +
            (C39407 - C39406 + C39409 - C39408) * C38293 +
            (C39410 - C39411 + C39412 - C39413) * C38366 +
            (C39414 - C39415 + C39416 - C39417) * C38294) *
               C89247 * C89153 * C813 +
           ((C39411 - C39410 + C39413 - C39412) * C38365 +
            (C39415 - C39414 + C39417 - C39416) * C38293 +
            (C38295 * C5726 - C38291 * C5730 + C38297 * C5725 -
             C38292 * C5728) *
                C38366 +
            (C38295 * C5900 - C38291 * C5903 + C38297 * C5901 -
             C38292 * C5904) *
                C38294) *
               C89247 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
               C38365 +
           (C38291 * C352 - C38295 * C346 + C38292 * C353 - C38297 * C347) *
               C38293 +
           (C38291 * C829 - C38295 * C819 + C38292 * C827 - C38297 * C818) *
               C38366 +
           (C38291 * C1143 - C38295 * C1135 + C38292 * C1144 - C38297 * C1136) *
               C38294) *
              C89247 * C89153 * C89137 * C96 +
          ((C38295 * C107 - C38291 * C114 + C38297 * C108 - C38292 * C116) *
               C38365 +
           (C38295 * C347 - C38291 * C353 + C38297 * C348 - C38292 * C354) *
               C38293 +
           (C38295 * C818 - C38291 * C827 + C38297 * C817 - C38292 * C825) *
               C38366 +
           (C38295 * C1136 - C38291 * C1144 + C38297 * C1137 - C38292 * C1145) *
               C38294) *
              C89247 * C89153 * C89137 * C97 +
          ((C38291 * C116 - C38295 * C108 + C38292 * C118 - C38297 * C109) *
               C38365 +
           (C38291 * C354 - C38295 * C348 + C38292 * C355 - C38297 * C349) *
               C38293 +
           (C38291 * C825 - C38295 * C817 + C38292 * C837 - C38297 * C823) *
               C38366 +
           (C38291 * C1145 - C38295 * C1137 + C38292 * C1149 - C38297 * C1141) *
               C38294) *
              C89247 * C89153 * C89137 * C98 +
          ((C38295 * C109 - C38291 * C118 + C38297 * C110 - C38292 * C120) *
               C38365 +
           (C38295 * C349 - C38291 * C355 + C38297 * C350 - C38292 * C356) *
               C38293 +
           (C38295 * C823 - C38291 * C837 + C38297 * C2629 - C38292 * C2630) *
               C38366 +
           (C38295 * C1141 - C38291 * C1149 + C38297 * C2871 - C38292 * C2872) *
               C38294) *
              C89247 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                C38365 +
            (C38291 * C352 - C38295 * C346 + C38292 * C353 - C38297 * C347) *
                C38293 +
            (C39386 - C39387 + C39388 - C39389) * C38366 +
            (C39390 - C39391 + C39392 - C39393) * C38294) *
               C89247 * C1719 +
           ((C38295 * C1724 - C38291 * C1734 + C38297 * C1723 -
             C38292 * C1732) *
                C38365 +
            (C38295 * C2040 - C38291 * C2048 + C38297 * C2041 -
             C38292 * C2049) *
                C38293 +
            (C38295 * C4097 - C38291 * C4101 + C38297 * C4098 -
             C38292 * C4103) *
                C38366 +
            (C38295 * C4439 - C38291 * C4443 + C38297 * C4440 -
             C38292 * C4444) *
                C38294) *
               C89247 * C1720 +
           ((C38291 * C1736 - C38295 * C1725 + C38292 * C1738 -
             C38297 * C1726) *
                C38365 +
            (C38291 * C2051 - C38295 * C2043 + C38292 * C2052 -
             C38297 * C2044) *
                C38293 +
            (C38291 * C6254 - C38295 * C6249 + C38292 * C6252 -
             C38297 * C6248) *
                C38366 +
            (C38291 * C6496 - C38295 * C6493 + C38292 * C6497 -
             C38297 * C6494) *
                C38294) *
               C89247 * C1721) *
              C89137 * C815 +
          (((C38295 * C107 - C38291 * C114 + C38297 * C108 - C38292 * C116) *
                C38365 +
            (C38295 * C347 - C38291 * C353 + C38297 * C348 - C38292 * C354) *
                C38293 +
            (C39402 - C39403 + C39404 - C39405) * C38366 +
            (C39406 - C39407 + C39408 - C39409) * C38294) *
               C89247 * C1719 +
           ((C38291 * C1732 - C38295 * C1723 + C38292 * C1730 -
             C38297 * C1722) *
                C38365 +
            (C38291 * C2049 - C38295 * C2041 + C38292 * C2050 -
             C38297 * C2042) *
                C38293 +
            (C38291 * C4103 - C38295 * C4098 + C38292 * C4105 -
             C38297 * C4099) *
                C38366 +
            (C38291 * C4444 - C38295 * C4440 + C38292 * C4445 -
             C38297 * C4441) *
                C38294) *
               C89247 * C1720 +
           ((C38295 * C1726 - C38291 * C1738 + C38297 * C1727 -
             C38292 * C1740) *
                C38365 +
            (C38295 * C2044 - C38291 * C2052 + C38297 * C2045 -
             C38292 * C2053) *
                C38293 +
            (C38295 * C6248 - C38291 * C6252 + C38297 * C6247 -
             C38292 * C6250) *
                C38366 +
            (C38295 * C6494 - C38291 * C6497 + C38297 * C6495 -
             C38292 * C6498) *
                C38294) *
               C89247 * C1721) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[2] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C38365 * C181 - C38589 * C106 - C38365 * C346 + C38293 * C409 +
             C38366 * C923 - C38590 * C819 - C38366 * C1135 + C38294 * C1227) *
                C38291 +
            (C38628 + C38629) * C38292) *
               C89247 * C89153 * C812 -
           ((C39540 + C39541) * C38292 +
            (C38366 * C926 - C38590 * C820 - C38366 * C1138 + C38294 * C1228 +
             C38365 * C923 - C38589 * C819 - C38365 * C1135 + C38293 * C1227) *
                C38291) *
               C89247 * C89153 * C813 +
           ((C38365 * C926 - C38589 * C820 - C38365 * C1138 + C38293 * C1228 +
             C38366 * C5787 - C38590 * C5727 - C38366 * C5899 +
             C38294 * C5957) *
                C38291 +
            (C39542 + C39543) * C38292) *
               C89247 * C89153 * C814) *
              C815 +
          (((C39541 + C39540) * C38291 +
            (C38365 * C925 - C38589 * C817 - C38365 * C1137 + C38293 * C1225 +
             C38366 * C928 - C38590 * C822 - C38366 * C1140 + C38294 * C1230) *
                C38292) *
               C89247 * C89153 * C813 -
           ((C38630 + C38631) * C38292 + (C38629 + C38628) * C38291) * C89247 *
               C89153 * C812 -
           ((C38366 * C5789 - C38590 * C5725 - C38366 * C5901 + C38294 * C5955 +
             C38365 * C928 - C38589 * C822 - C38365 * C1140 + C38293 * C1230) *
                C38292 +
            (C39543 + C39542) * C38291) *
               C89247 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C38365 * C181 - C38589 * C106 - C38365 * C346 + C38293 * C409 +
            C38366 * C923 - C38590 * C819 - C38366 * C1135 + C38294 * C1227) *
               C38291 +
           (C38628 + C38629) * C38292) *
              C89247 * C89153 * C89137 * C96 -
          ((C38630 + C38631) * C38292 + (C38629 + C38628) * C38291) * C89247 *
              C89153 * C89137 * C97 +
          ((C38631 + C38630) * C38291 + (C38632 + C38633) * C38292) * C89247 *
              C89153 * C89137 * C98 -
          ((C38366 * C2707 - C38590 * C2629 - C38366 * C2871 + C38294 * C2947 +
            C38365 * C185 - C38589 * C110 - C38365 * C350 + C38293 * C413) *
               C38292 +
           (C38633 + C38632) * C38291) *
              C89247 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C38365 * C181 - C38589 * C106 - C38365 * C346 + C38293 * C409 +
             C38366 * C923 - C38590 * C819 - C38366 * C1135 + C38294 * C1227) *
                C38291 +
            (C38628 + C38629) * C38292) *
               C89247 * C1719 -
           ((C40501 + C40502) * C38292 +
            (C38366 * C4211 - C38590 * C4097 - C38366 * C4439 + C38294 * C4545 +
             C38365 * C1828 - C38589 * C1724 - C38365 * C2040 +
             C38293 * C2132) *
                C38291) *
               C89247 * C1720 +
           ((C38365 * C1831 - C38589 * C1725 - C38365 * C2043 + C38293 * C2133 +
             C38366 * C6333 - C38590 * C6249 - C38366 * C6493 +
             C38294 * C6575) *
                C38291 +
            (C40503 + C40504) * C38292) *
               C89247 * C1721) *
              C89137 * C815 +
          (((C40502 + C40501) * C38291 +
            (C38365 * C1830 - C38589 * C1722 - C38365 * C2042 + C38293 * C2130 +
             C38366 * C4213 - C38590 * C4099 - C38366 * C4441 +
             C38294 * C4547) *
                C38292) *
               C89247 * C1720 -
           ((C38630 + C38631) * C38292 + (C38629 + C38628) * C38291) * C89247 *
               C1719 -
           ((C38366 * C6335 - C38590 * C6247 - C38366 * C6495 + C38294 * C6573 +
             C38365 * C1833 - C38589 * C1727 - C38365 * C2045 +
             C38293 * C2135) *
                C38292 +
            (C40504 + C40503) * C38291) *
               C89247 * C1721) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[2] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C89247 * C264 - C263 * C106) * C38365 +
                      (C89247 * C493 - C263 * C346) * C38293 +
                      (C13956 - C13957) * C38366 + (C14240 - C14241) * C38294) *
                         C38291 +
                     ((C277 - C278) * C38365 + (C500 - C501) * C38293 +
                      C39282 * C38366 + C39642 * C38294) *
                         C38292) *
                        C89153 * C812 +
                    (((C13957 - C13956) * C38365 + (C14241 - C14240) * C38293 +
                      (C13961 - C13960) * C38366 + (C14243 - C14242) * C38294) *
                         C38291 +
                     (C39284 * C38365 + C39643 * C38293 + C13968 * C38366 +
                      C14246 * C38294) *
                         C38292) *
                        C89153 * C813 +
                    ((C13974 * C38365 + C14249 * C38293 +
                      (C13965 - C13964) * C38366 + (C14245 - C14244) * C38294) *
                         C38291 +
                     (C39286 * C38365 + C39644 * C38293 +
                      (C13970 - C13971) * C38366 + (C14247 - C14248) * C38294) *
                         C38292) *
                        C89153 * C814) *
                       C815 +
                   ((((C278 - C277) * C38365 + (C501 - C500) * C38293 +
                      C39284 * C38366 + C39643 * C38294) *
                         C38291 +
                     ((C282 - C281) * C38365 + (C504 - C503) * C38293 +
                      C2792 * C38366 + C3032 * C38294) *
                         C38292) *
                        C89153 * C812 +
                    ((C39282 * C38365 + C39642 * C38293 + C39286 * C38366 +
                      C39644 * C38294) *
                         C38291 +
                     ((C1051 - C1050) * C38365 + (C1347 - C1346) * C38293 +
                      (C1058 - C1059) * C38366 + (C1350 - C1351) * C38294) *
                         C38292) *
                        C89153 * C813 +
                    ((C13968 * C38365 + C14246 * C38293 +
                      (C13971 - C13970) * C38366 + (C14248 - C14247) * C38294) *
                         C38291 +
                     ((C1059 - C1058) * C38365 + (C1351 - C1350) * C38293 +
                      (C263 * C5725 - C89247 * C5845) * C38366 +
                      (C263 * C5901 - C89247 * C6010) * C38294) *
                         C38292) *
                        C89153 * C814) *
                       C89124)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C89247 * C264 - C263 * C106) * C38365 +
                     (C89247 * C493 - C263 * C346) * C38293 +
                     (C13956 - C13957) * C38366 + (C14240 - C14241) * C38294) *
                        C38291 +
                    ((C277 - C278) * C38365 + (C500 - C501) * C38293 +
                     (C1047 - C1046) * C38366 + (C1345 - C1344) * C38294) *
                        C38292) *
                       C89153 * C89137 * C96 +
                   (((C278 - C277) * C38365 + (C501 - C500) * C38293 +
                     (C1046 - C1047) * C38366 + (C1344 - C1345) * C38294) *
                        C38291 +
                    ((C282 - C281) * C38365 + (C504 - C503) * C38293 +
                     C2792 * C38366 + C3032 * C38294) *
                        C38292) *
                       C89153 * C89137 * C97 +
                   ((C293 * C38365 + C510 * C38293 + (C1051 - C1050) * C38366 +
                     (C1347 - C1346) * C38294) *
                        C38291 +
                    ((C286 - C285) * C38365 + (C507 - C506) * C38293 +
                     (C2794 - C2795) * C38366 + (C3033 - C3034) * C38294) *
                        C38292) *
                       C89153 * C89137 * C98 +
                   ((C295 * C38365 + C511 * C38293 + (C2795 - C2794) * C38366 +
                     (C3034 - C3033) * C38294) *
                        C38291 +
                    ((C290 - C289) * C38365 + (C509 - C508) * C38293 +
                     (C263 * C2629 - C89247 * C2789) * C38366 +
                     (C263 * C2871 - C89247 * C3029) * C38294) *
                        C38292) *
                       C89153 * C89137 * C99)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C89247 * C264 - C263 * C106) * C38365 +
                      (C89247 * C493 - C263 * C346) * C38293 +
                      (C13956 - C13957) * C38366 + (C14240 - C14241) * C38294) *
                         C38291 +
                     ((C277 - C278) * C38365 + (C500 - C501) * C38293 +
                      C39282 * C38366 + C39642 * C38294) *
                         C38292) *
                        C1719 +
                    (((C263 * C1724 - C89247 * C1934) * C38365 +
                      (C263 * C2040 - C89247 * C2240) * C38293 +
                      (C16928 - C16929) * C38366 + (C17258 - C17259) * C38294) *
                         C38291 +
                     ((C1951 - C1952) * C38365 + (C2249 - C2250) * C38293 +
                      (C4335 - C4334) * C38366 + (C4667 - C4666) * C38294) *
                         C38292) *
                        C1720 +
                    (((C89247 * C1937 - C263 * C1725) * C38365 +
                      (C89247 * C2243 - C263 * C2043) * C38293 +
                      (C19012 - C19013) * C38366 + (C19254 - C19255) * C38294) *
                         C38291 +
                     ((C1959 - C1960) * C38365 + (C2253 - C2254) * C38293 +
                      (C40277 - C40278) * C38366 + (C40603 - C40604) * C38294) *
                         C38292) *
                        C1721) *
                       C89137 * C815 +
                   ((((C278 - C277) * C38365 + (C501 - C500) * C38293 +
                      C39284 * C38366 + C39643 * C38294) *
                         C38291 +
                     ((C282 - C281) * C38365 + (C504 - C503) * C38293 +
                      C2792 * C38366 + C3032 * C38294) *
                         C38292) *
                        C1719 +
                    (((C1952 - C1951) * C38365 + (C2250 - C2249) * C38293 +
                      (C4334 - C4335) * C38366 + (C4666 - C4667) * C38294) *
                         C38291 +
                     ((C1956 - C1955) * C38365 + (C2252 - C2251) * C38293 +
                      (C4338 - C4339) * C38366 + (C4668 - C4669) * C38294) *
                         C38292) *
                        C1720 +
                    (((C1960 - C1959) * C38365 + (C2254 - C2253) * C38293 +
                      (C40278 - C40277) * C38366 + (C40604 - C40603) * C38294) *
                         C38291 +
                     ((C1964 - C1963) * C38365 + (C2256 - C2255) * C38293 +
                      (C263 * C6247 - C89247 * C6415) * C38366 +
                      (C263 * C6495 - C89247 * C6652) * C38294) *
                         C38292) *
                        C1721) *
                       C89137 * C89124)) /
                     (p * q * std::sqrt(p + q));
    d2eezx[2] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                 C263 +
             (C38291 * C571 - C38295 * C565 + C38292 * C572 - C38297 * C566) *
                 C89247) *
                C38293 +
            ((C39386 - C39387 + C39388 - C39389) * C263 +
             (C39743 - C39744 + C39745 - C39746) * C89247) *
                C38294) *
               C89153 * C812 +
           (((C39387 - C39386 + C39389 - C39388) * C263 +
             (C39744 - C39743 + C39746 - C39745) * C89247) *
                C38293 +
            ((C39394 - C39395 + C39396 - C39397) * C263 +
             (C39747 - C39748 + C39749 - C39750) * C89247) *
                C38294) *
               C89153 * C813 +
           (((C39395 - C39394 + C39397 - C39396) * C263 +
             (C39748 - C39747 + C39750 - C39749) * C89247) *
                C38293 +
            ((C38291 * C5732 - C38295 * C5727 + C38292 * C5730 -
              C38297 * C5726) *
                 C263 +
             (C38291 * C6064 - C38295 * C6061 + C38292 * C6065 -
              C38297 * C6062) *
                 C89247) *
                C38294) *
               C89153 * C814) *
              C815 +
          ((((C38295 * C107 - C38291 * C114 + C38297 * C108 - C38292 * C116) *
                 C263 +
             (C38295 * C566 - C38291 * C572 + C38297 * C567 - C38292 * C573) *
                 C89247) *
                C38293 +
            ((C39402 - C39403 + C39404 - C39405) * C263 +
             (C39751 - C39752 + C39753 - C39754) * C89247) *
                C38294) *
               C89153 * C812 +
           (((C39403 - C39402 + C39405 - C39404) * C263 +
             (C39752 - C39751 + C39754 - C39753) * C89247) *
                C38293 +
            ((C39410 - C39411 + C39412 - C39413) * C263 +
             (C39755 - C39756 + C39757 - C39758) * C89247) *
                C38294) *
               C89153 * C813 +
           (((C39411 - C39410 + C39413 - C39412) * C263 +
             (C39756 - C39755 + C39758 - C39757) * C89247) *
                C38293 +
            ((C38295 * C5726 - C38291 * C5730 + C38297 * C5725 -
              C38292 * C5728) *
                 C263 +
             (C38295 * C6062 - C38291 * C6065 + C38297 * C6063 -
              C38292 * C6066) *
                 C89247) *
                C38294) *
               C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                C263 +
            (C38291 * C571 - C38295 * C565 + C38292 * C572 - C38297 * C566) *
                C89247) *
               C38293 +
           ((C38291 * C829 - C38295 * C819 + C38292 * C827 - C38297 * C818) *
                C263 +
            (C38291 * C1433 - C38295 * C1425 + C38292 * C1434 -
             C38297 * C1426) *
                C89247) *
               C38294) *
              C89153 * C89137 * C96 +
          (((C38295 * C107 - C38291 * C114 + C38297 * C108 - C38292 * C116) *
                C263 +
            (C38295 * C566 - C38291 * C572 + C38297 * C567 - C38292 * C573) *
                C89247) *
               C38293 +
           ((C38295 * C818 - C38291 * C827 + C38297 * C817 - C38292 * C825) *
                C263 +
            (C38295 * C1426 - C38291 * C1434 + C38297 * C1427 -
             C38292 * C1435) *
                C89247) *
               C38294) *
              C89153 * C89137 * C97 +
          (((C38291 * C116 - C38295 * C108 + C38292 * C118 - C38297 * C109) *
                C263 +
            (C38291 * C573 - C38295 * C567 + C38292 * C574 - C38297 * C568) *
                C89247) *
               C38293 +
           ((C38291 * C825 - C38295 * C817 + C38292 * C837 - C38297 * C823) *
                C263 +
            (C38291 * C1435 - C38295 * C1427 + C38292 * C1439 -
             C38297 * C1431) *
                C89247) *
               C38294) *
              C89153 * C89137 * C98 +
          (((C38295 * C109 - C38291 * C118 + C38297 * C110 - C38292 * C120) *
                C263 +
            (C38295 * C568 - C38291 * C574 + C38297 * C569 - C38292 * C575) *
                C89247) *
               C38293 +
           ((C38295 * C823 - C38291 * C837 + C38297 * C2629 - C38292 * C2630) *
                C263 +
            (C38295 * C1431 - C38291 * C1439 + C38297 * C3110 -
             C38292 * C3111) *
                C89247) *
               C38294) *
              C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                 C263 +
             (C38291 * C571 - C38295 * C565 + C38292 * C572 - C38297 * C566) *
                 C89247) *
                C38293 +
            ((C39386 - C39387 + C39388 - C39389) * C263 +
             (C39743 - C39744 + C39745 - C39746) * C89247) *
                C38294) *
               C1719 +
           (((C38295 * C1724 - C38291 * C1734 + C38297 * C1723 -
              C38292 * C1732) *
                 C263 +
             (C38295 * C2330 - C38291 * C2338 + C38297 * C2331 -
              C38292 * C2339) *
                 C89247) *
                C38293 +
            ((C38295 * C4097 - C38291 * C4101 + C38297 * C4098 -
              C38292 * C4103) *
                 C263 +
             (C38295 * C4767 - C38291 * C4771 + C38297 * C4768 -
              C38292 * C4772) *
                 C89247) *
                C38294) *
               C1720 +
           (((C38291 * C1736 - C38295 * C1725 + C38292 * C1738 -
              C38297 * C1726) *
                 C263 +
             (C38291 * C2341 - C38295 * C2333 + C38292 * C2342 -
              C38297 * C2334) *
                 C89247) *
                C38293 +
            ((C38291 * C6254 - C38295 * C6249 + C38292 * C6252 -
              C38297 * C6248) *
                 C263 +
             (C38291 * C6730 - C38295 * C6727 + C38292 * C6731 -
              C38297 * C6728) *
                 C89247) *
                C38294) *
               C1721) *
              C89137 * C815 +
          ((((C38295 * C107 - C38291 * C114 + C38297 * C108 - C38292 * C116) *
                 C263 +
             (C38295 * C566 - C38291 * C572 + C38297 * C567 - C38292 * C573) *
                 C89247) *
                C38293 +
            ((C39402 - C39403 + C39404 - C39405) * C263 +
             (C39751 - C39752 + C39753 - C39754) * C89247) *
                C38294) *
               C1719 +
           (((C38291 * C1732 - C38295 * C1723 + C38292 * C1730 -
              C38297 * C1722) *
                 C263 +
             (C38291 * C2339 - C38295 * C2331 + C38292 * C2340 -
              C38297 * C2332) *
                 C89247) *
                C38293 +
            ((C38291 * C4103 - C38295 * C4098 + C38292 * C4105 -
              C38297 * C4099) *
                 C263 +
             (C38291 * C4772 - C38295 * C4768 + C38292 * C4773 -
              C38297 * C4769) *
                 C89247) *
                C38294) *
               C1720 +
           (((C38295 * C1726 - C38291 * C1738 + C38297 * C1727 -
              C38292 * C1740) *
                 C263 +
             (C38295 * C2334 - C38291 * C2342 + C38297 * C2335 -
              C38292 * C2343) *
                 C89247) *
                C38293 +
            ((C38295 * C6248 - C38291 * C6252 + C38297 * C6247 -
              C38292 * C6250) *
                 C263 +
             (C38295 * C6728 - C38291 * C6731 + C38297 * C6729 -
              C38292 * C6732) *
                 C89247) *
                C38294) *
               C1721) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q));
    d2eezy[2] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                 C263 +
             (C38293 * C627 - C38365 * C565 + C38294 * C1515 - C38366 * C1425) *
                 C89247) *
                C38291 +
            ((C38368 - C38369 + C38370 - C38371) * C263 +
             (C38832 - C38833 + C38834 - C38835) * C89247) *
                C38292) *
               C89153 * C812 +
           (((C38365 * C819 - C38293 * C923 + C38366 * C820 - C38294 * C926) *
                 C263 +
             (C38365 * C1425 - C38293 * C1515 + C38366 * C1428 -
              C38294 * C1518) *
                 C89247) *
                C38291 +
            ((C39168 - C39169 + C39170 - C39171) * C263 +
             (C39857 - C39858 + C39859 - C39860) * C89247) *
                C38292) *
               C89153 * C813 +
           (((C38293 * C926 - C38365 * C820 + C38294 * C5787 - C38366 * C5727) *
                 C263 +
             (C38293 * C1518 - C38365 * C1428 + C38294 * C6117 -
              C38366 * C6061) *
                 C89247) *
                C38291 +
            ((C39176 - C39177 + C39178 - C39179) * C263 +
             (C39861 - C39862 + C39863 - C39864) * C89247) *
                C38292) *
               C89153 * C814) *
              C815 +
          ((((C38369 - C38368 + C38371 - C38370) * C263 +
             (C38833 - C38832 + C38835 - C38834) * C89247) *
                C38291 +
            ((C38376 - C38377 + C38378 - C38379) * C263 +
             (C38836 - C38837 + C38838 - C38839) * C89247) *
                C38292) *
               C89153 * C812 +
           (((C39169 - C39168 + C39171 - C39170) * C263 +
             (C39858 - C39857 + C39860 - C39859) * C89247) *
                C38291 +
            ((C38293 * C925 - C38365 * C817 + C38294 * C928 - C38366 * C822) *
                 C263 +
             (C38293 * C1517 - C38365 * C1427 + C38294 * C1520 -
              C38366 * C1430) *
                 C89247) *
                C38292) *
               C89153 * C813 +
           (((C39177 - C39176 + C39179 - C39178) * C263 +
             (C39862 - C39861 + C39864 - C39863) * C89247) *
                C38291 +
            ((C38365 * C822 - C38293 * C928 + C38366 * C5725 - C38294 * C5789) *
                 C263 +
             (C38365 * C1430 - C38293 * C1520 + C38366 * C6063 -
              C38294 * C6119) *
                 C89247) *
                C38292) *
               C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                C263 +
            (C38293 * C627 - C38365 * C565 + C38294 * C1515 - C38366 * C1425) *
                C89247) *
               C38291 +
           ((C38368 - C38369 + C38370 - C38371) * C263 +
            (C38832 - C38833 + C38834 - C38835) * C89247) *
               C38292) *
              C89153 * C89137 * C96 +
          (((C38369 - C38368 + C38371 - C38370) * C263 +
            (C38833 - C38832 + C38835 - C38834) * C89247) *
               C38291 +
           ((C38376 - C38377 + C38378 - C38379) * C263 +
            (C38836 - C38837 + C38838 - C38839) * C89247) *
               C38292) *
              C89153 * C89137 * C97 +
          (((C38377 - C38376 + C38379 - C38378) * C263 +
            (C38837 - C38836 + C38839 - C38838) * C89247) *
               C38291 +
           ((C38384 - C38385 + C38386 - C38387) * C263 +
            (C38840 - C38841 + C38842 - C38843) * C89247) *
               C38292) *
              C89153 * C89137 * C98 +
          (((C38385 - C38384 + C38387 - C38386) * C263 +
            (C38841 - C38840 + C38843 - C38842) * C89247) *
               C38291 +
           ((C38365 * C110 - C38293 * C185 + C38366 * C2629 - C38294 * C2707) *
                C263 +
            (C38365 * C569 - C38293 * C631 + C38366 * C3110 - C38294 * C3186) *
                C89247) *
               C38292) *
              C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                 C263 +
             (C38293 * C627 - C38365 * C565 + C38294 * C1515 - C38366 * C1425) *
                 C89247) *
                C38291 +
            ((C38368 - C38369 + C38370 - C38371) * C263 +
             (C38832 - C38833 + C38834 - C38835) * C89247) *
                C38292) *
               C1719 +
           (((C38365 * C1724 - C38293 * C1828 + C38366 * C4097 -
              C38294 * C4211) *
                 C263 +
             (C38365 * C2330 - C38293 * C2420 + C38366 * C4767 -
              C38294 * C4873) *
                 C89247) *
                C38291 +
            ((C40163 - C40164 + C40165 - C40166) * C263 +
             (C40801 - C40802 + C40803 - C40804) * C89247) *
                C38292) *
               C1720 +
           (((C38293 * C1831 - C38365 * C1725 + C38294 * C6333 -
              C38366 * C6249) *
                 C263 +
             (C38293 * C2423 - C38365 * C2333 + C38294 * C6807 -
              C38366 * C6727) *
                 C89247) *
                C38291 +
            ((C40171 - C40172 + C40173 - C40174) * C263 +
             (C40805 - C40806 + C40807 - C40808) * C89247) *
                C38292) *
               C1721) *
              C89137 * C815 +
          ((((C38369 - C38368 + C38371 - C38370) * C263 +
             (C38833 - C38832 + C38835 - C38834) * C89247) *
                C38291 +
            ((C38376 - C38377 + C38378 - C38379) * C263 +
             (C38836 - C38837 + C38838 - C38839) * C89247) *
                C38292) *
               C1719 +
           (((C40164 - C40163 + C40166 - C40165) * C263 +
             (C40802 - C40801 + C40804 - C40803) * C89247) *
                C38291 +
            ((C38293 * C1830 - C38365 * C1722 + C38294 * C4213 -
              C38366 * C4099) *
                 C263 +
             (C38293 * C2422 - C38365 * C2332 + C38294 * C4875 -
              C38366 * C4769) *
                 C89247) *
                C38292) *
               C1720 +
           (((C40172 - C40171 + C40174 - C40173) * C263 +
             (C40806 - C40805 + C40808 - C40807) * C89247) *
                C38291 +
            ((C38365 * C1727 - C38293 * C1833 + C38366 * C6247 -
              C38294 * C6335) *
                 C263 +
             (C38365 * C2335 - C38293 * C2425 + C38366 * C6729 -
              C38294 * C6809) *
                 C89247) *
                C38292) *
               C1721) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q));
    d2eezz[2] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) *
                 C38293 +
             C14524 * C38294) *
                C38291 +
            (C38910 + C38911) * C38292) *
               C89153 * C812 -
           ((C39963 + C39964) * C38292 +
            (C14525 * C38294 + C14524 * C38293) * C38291) *
               C89153 * C813 +
           ((C14525 * C38293 + C14526 * C38294) * C38291 +
            (C39965 + C39966) * C38292) *
               C89153 * C814) *
              C815 +
          (((C39964 + C39963) * C38291 +
            (C1638 * C38293 + C1641 * C38294) * C38292) *
               C89153 * C813 -
           ((C38912 + C38913) * C38292 + (C38911 + C38910) * C38291) * C89153 *
               C812 -
           (((C263 * C5845 - C699 * C5725 - C263 * C6063 + C89247 * C6170) *
                 C38294 +
             C1641 * C38293) *
                C38292 +
            (C39966 + C39965) * C38291) *
               C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C38293 +
            C14524 * C38294) *
               C38291 +
           (C38910 + C38911) * C38292) *
              C89153 * C89137 * C96 -
          ((C38912 + C38913) * C38292 + (C38911 + C38910) * C38291) * C89153 *
              C89137 * C97 +
          ((C38913 + C38912) * C38291 + (C38914 + C38915) * C38292) * C89153 *
              C89137 * C98 -
          (((C263 * C2789 - C699 * C2629 - C263 * C3110 + C89247 * C3267) *
                C38294 +
            C734 * C38293) *
               C38292 +
           (C38915 + C38914) * C38291) *
              C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) *
                 C38293 +
             C14524 * C38294) *
                C38291 +
            (C38910 + C38911) * C38292) *
               C1719 -
           ((C40907 + C40908) * C38292 +
            (C17593 * C38294 +
             (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
                 C38293) *
                C38291) *
               C1720 +
           (((C263 * C1937 - C699 * C1725 - C263 * C2333 + C89247 * C2513) *
                 C38293 +
             C19500 * C38294) *
                C38291 +
            (C40909 + C40917) * C38292) *
               C1721) *
              C89137 * C815 +
          (((C40908 + C40907) * C38291 +
            (C2543 * C38293 + C4997 * C38294) * C38292) *
               C1720 -
           ((C38912 + C38913) * C38292 + (C38911 + C38910) * C38291) * C1719 -
           (((C263 * C6415 - C699 * C6247 - C263 * C6729 + C89247 * C6884) *
                 C38294 +
             C2546 * C38293) *
                C38292 +
            (C40917 + C40909) * C38291) *
               C1721) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q));
    d2eexx[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C38295 * C112 - C38296 * C106 - C38295 * C113 + C38291 * C124 +
             C38297 * C114 - C38298 * C107 - C38297 * C115 + C38292 * C125) *
                C89247 * C38293 +
            (C39062 + C39063) * C89247 * C38294) *
               C89308 -
           ((C38297 * C4103 - C38298 * C4098 - C38297 * C4104 + C38292 * C4110 +
             C38295 * C4101 - C38296 * C4097 - C38295 * C4102 +
             C38291 * C4109) *
                C89247 * C38294 +
            (C38297 * C1732 - C38298 * C1723 - C38297 * C1733 + C38292 * C1747 +
             C38295 * C1734 - C38296 * C1724 - C38295 * C1735 +
             C38291 * C1748) *
                C89247 * C38293) *
               C89217) *
              C89137 * C89333 +
          (((C38295 * C1732 - C38296 * C1723 - C38295 * C1733 + C38291 * C1747 +
             C38297 * C1730 - C38298 * C1722 - C38297 * C1731 +
             C38292 * C1746) *
                C89247 * C38293 +
            (C38295 * C4103 - C38296 * C4098 - C38295 * C4104 + C38291 * C4110 +
             C38297 * C4105 - C38298 * C4099 - C38297 * C4106 +
             C38292 * C4111) *
                C89247 * C38294) *
               C89217 -
           ((C39067 + C39066) * C89247 * C38294 +
            (C38297 * C116 - C38298 * C108 - C38297 * C117 + C38292 * C126 +
             C38295 * C114 - C38296 * C107 - C38295 * C115 + C38291 * C125) *
                C89247 * C38293) *
               C89308) *
              C89137 * C89334 +
          (((C38295 * C116 - C38296 * C108 - C38295 * C117 + C38291 * C126 +
             C38297 * C118 - C38298 * C109 - C38297 * C119 + C38292 * C127) *
                C89247 * C38293 +
            (C41028 + C41029) * C89247 * C38294) *
               C89308 -
           ((C38297 * C4107 - C38298 * C4100 - C38297 * C4108 + C38292 * C4112 +
             C38295 * C4105 - C38296 * C4099 - C38295 * C4106 +
             C38291 * C4111) *
                C89247 * C38294 +
            (C38297 * C1742 - C38298 * C1728 - C38297 * C1743 + C38292 * C1752 +
             C38295 * C1730 - C38296 * C1722 - C38295 * C1731 +
             C38291 * C1746) *
                C89247 * C38293) *
               C89217) *
              C89137 * C2628)) /
        (p * q * std::sqrt(p + q));
    d2eexy[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                C38295 +
            (C38293 * C187 - C38365 * C113 + C38294 * C931 - C38366 * C830) *
                C38291 +
            (C38368 - C38369 + C38370 - C38371) * C38297 +
            (C38372 - C38373 + C38374 - C38375) * C38292) *
               C89247 * C89308 +
           ((C38365 * C1724 - C38293 * C1828 + C38366 * C4097 -
             C38294 * C4211) *
                C38295 +
            (C38365 * C1735 - C38293 * C1836 + C38366 * C4102 -
             C38294 * C4215) *
                C38291 +
            (C40163 - C40164 + C40165 - C40166) * C38297 +
            (C40167 - C40168 + C40169 - C40170) * C38292) *
               C89247 * C89217) *
              C89137 * C89333 +
          (((C38369 - C38368 + C38371 - C38370) * C38295 +
            (C38373 - C38372 + C38375 - C38374) * C38291 +
            (C38376 - C38377 + C38378 - C38379) * C38297 +
            (C38380 - C38381 + C38382 - C38383) * C38292) *
               C89247 * C89308 +
           ((C40164 - C40163 + C40166 - C40165) * C38295 +
            (C40168 - C40167 + C40170 - C40169) * C38291 +
            (C42053 - C42054 + C42055 - C42056) * C38297 +
            (C42057 - C42058 + C42059 - C42060) * C38292) *
               C89247 * C89217) *
              C89137 * C89334 +
          (((C38377 - C38376 + C38379 - C38378) * C38295 +
            (C38381 - C38380 + C38383 - C38382) * C38291 +
            (C38384 - C38385 + C38386 - C38387) * C38297 +
            (C38388 - C38389 + C38390 - C38391) * C38292) *
               C89247 * C89308 +
           ((C42054 - C42053 + C42056 - C42055) * C38295 +
            (C42058 - C42057 + C42060 - C42059) * C38291 +
            (C38365 * C1728 - C38293 * C1834 + C38366 * C4100 -
             C38294 * C4214) *
                C38297 +
            (C38365 * C1743 - C38293 * C1842 + C38366 * C4108 -
             C38294 * C4218) *
                C38292) *
               C89247 * C89217) *
              C89137 * C2628)) /
        (p * q * std::sqrt(p + q));
    d2eexz[3] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C89247 * C264 - C263 * C106) * C38295 +
                      (C89247 * C270 - C263 * C113) * C38291 +
                      (C277 - C278) * C38297 + (C279 - C280) * C38292) *
                         C38293 +
                     ((C13956 - C13957) * C38295 + (C13958 - C13959) * C38291 +
                      C39282 * C38297 + C39283 * C38292) *
                         C38294) *
                        C89308 +
                    (((C263 * C1724 - C89247 * C1934) * C38295 +
                      (C263 * C1735 - C89247 * C1942) * C38291 +
                      (C1951 - C1952) * C38297 + (C1953 - C1954) * C38292) *
                         C38293 +
                     ((C16928 - C16929) * C38295 + (C16930 - C16931) * C38291 +
                      (C4335 - C4334) * C38297 + (C4337 - C4336) * C38292) *
                         C38294) *
                        C89217) *
                       C89137 * C89333 +
                   ((((C278 - C277) * C38295 + (C280 - C279) * C38291 +
                      (C282 - C281) * C38297 + (C284 - C283) * C38292) *
                         C38293 +
                     (C39284 * C38295 + C39285 * C38291 + C2792 * C38297 +
                      C2793 * C38292) *
                         C38294) *
                        C89308 +
                    (((C1952 - C1951) * C38295 + (C1954 - C1953) * C38291 +
                      (C1956 - C1955) * C38297 + (C1958 - C1957) * C38292) *
                         C38293 +
                     ((C4334 - C4335) * C38295 + (C4336 - C4337) * C38291 +
                      (C4338 - C4339) * C38297 + (C4340 - C4341) * C38292) *
                         C38294) *
                        C89217) *
                       C89137 * C89334 +
                   (((C293 * C38295 + C294 * C38291 + (C286 - C285) * C38297 +
                      (C288 - C287) * C38292) *
                         C38293 +
                     (C41234 * C38295 + C41235 * C38291 +
                      (C2794 - C2795) * C38297 + (C2796 - C2797) * C38292) *
                         C38294) *
                        C89308 +
                    ((C3515 * C38295 + C3516 * C38291 +
                      (C3518 - C3517) * C38297 + (C3520 - C3519) * C38292) *
                         C38293 +
                     ((C4339 - C4338) * C38295 + (C4341 - C4340) * C38291 +
                      (C263 * C4100 - C89247 * C4328) * C38297 +
                      (C263 * C4108 - C89247 * C4332) * C38292) *
                         C38294) *
                        C89217) *
                       C89137 * C2628)) /
                 (p * q * std::sqrt(p + q));
    d2eeyx[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                C38365 +
            (C38291 * C352 - C38295 * C346 + C38292 * C353 - C38297 * C347) *
                C38293 +
            (C39386 - C39387 + C39388 - C39389) * C38366 +
            (C39390 - C39391 + C39392 - C39393) * C38294) *
               C89247 * C89308 +
           ((C38295 * C1724 - C38291 * C1734 + C38297 * C1723 -
             C38292 * C1732) *
                C38365 +
            (C38295 * C2040 - C38291 * C2048 + C38297 * C2041 -
             C38292 * C2049) *
                C38293 +
            (C38295 * C4097 - C38291 * C4101 + C38297 * C4098 -
             C38292 * C4103) *
                C38366 +
            (C38295 * C4439 - C38291 * C4443 + C38297 * C4440 -
             C38292 * C4444) *
                C38294) *
               C89247 * C89217) *
              C89137 * C89333 +
          (((C38295 * C107 - C38291 * C114 + C38297 * C108 - C38292 * C116) *
                C38365 +
            (C38295 * C347 - C38291 * C353 + C38297 * C348 - C38292 * C354) *
                C38293 +
            (C39402 - C39403 + C39404 - C39405) * C38366 +
            (C39406 - C39407 + C39408 - C39409) * C38294) *
               C89247 * C89308 +
           ((C38291 * C1732 - C38295 * C1723 + C38292 * C1730 -
             C38297 * C1722) *
                C38365 +
            (C38291 * C2049 - C38295 * C2041 + C38292 * C2050 -
             C38297 * C2042) *
                C38293 +
            (C38291 * C4103 - C38295 * C4098 + C38292 * C4105 -
             C38297 * C4099) *
                C38366 +
            (C38291 * C4444 - C38295 * C4440 + C38292 * C4445 -
             C38297 * C4441) *
                C38294) *
               C89247 * C89217) *
              C89137 * C89334 +
          (((C38291 * C116 - C38295 * C108 + C38292 * C118 - C38297 * C109) *
                C38365 +
            (C38291 * C354 - C38295 * C348 + C38292 * C355 - C38297 * C349) *
                C38293 +
            (C41334 - C41335 + C41336 - C41337) * C38366 +
            (C41338 - C41339 + C41340 - C41341) * C38294) *
               C89247 * C89308 +
           ((C38295 * C1722 - C38291 * C1730 + C38297 * C1728 -
             C38292 * C1742) *
                C38365 +
            (C38295 * C2042 - C38291 * C2050 + C38297 * C2046 -
             C38292 * C2054) *
                C38293 +
            (C38295 * C4099 - C38291 * C4105 + C38297 * C4100 -
             C38292 * C4107) *
                C38366 +
            (C38295 * C4441 - C38291 * C4445 + C38297 * C4442 -
             C38292 * C4446) *
                C38294) *
               C89247 * C89217) *
              C89137 * C2628)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C38365 * C181 - C38589 * C106 - C38365 * C346 + C38293 * C409 +
             C38366 * C923 - C38590 * C819 - C38366 * C1135 + C38294 * C1227) *
                C38291 +
            (C38628 + C38629) * C38292) *
               C89247 * C89308 -
           ((C40501 + C40502) * C38292 +
            (C38366 * C4211 - C38590 * C4097 - C38366 * C4439 + C38294 * C4545 +
             C38365 * C1828 - C38589 * C1724 - C38365 * C2040 +
             C38293 * C2132) *
                C38291) *
               C89247 * C89217) *
              C89137 * C89333 +
          (((C40502 + C40501) * C38291 + (C42367 + C42368) * C38292) * C89247 *
               C89217 -
           ((C38630 + C38631) * C38292 + (C38629 + C38628) * C38291) * C89247 *
               C89308) *
              C89137 * C89334 +
          (((C38631 + C38630) * C38291 + (C38632 + C38633) * C38292) * C89247 *
               C89308 -
           ((C38366 * C4214 - C38590 * C4100 - C38366 * C4442 + C38294 * C4548 +
             C38365 * C1834 - C38589 * C1728 - C38365 * C2046 +
             C38293 * C2136) *
                C38292 +
            (C42368 + C42367) * C38291) *
               C89247 * C89217) *
              C89137 * C2628)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[3] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C89247 * C264 - C263 * C106) * C38365 +
                      (C89247 * C493 - C263 * C346) * C38293 +
                      (C13956 - C13957) * C38366 + (C14240 - C14241) * C38294) *
                         C38291 +
                     ((C277 - C278) * C38365 + (C500 - C501) * C38293 +
                      C39282 * C38366 + C39642 * C38294) *
                         C38292) *
                        C89308 +
                    (((C263 * C1724 - C89247 * C1934) * C38365 +
                      (C263 * C2040 - C89247 * C2240) * C38293 +
                      (C16928 - C16929) * C38366 + (C17258 - C17259) * C38294) *
                         C38291 +
                     ((C1951 - C1952) * C38365 + (C2249 - C2250) * C38293 +
                      (C4335 - C4334) * C38366 + (C4667 - C4666) * C38294) *
                         C38292) *
                        C89217) *
                       C89137 * C89333 +
                   ((((C278 - C277) * C38365 + (C501 - C500) * C38293 +
                      C39284 * C38366 + C39643 * C38294) *
                         C38291 +
                     ((C282 - C281) * C38365 + (C504 - C503) * C38293 +
                      C2792 * C38366 + C3032 * C38294) *
                         C38292) *
                        C89308 +
                    (((C1952 - C1951) * C38365 + (C2250 - C2249) * C38293 +
                      (C4334 - C4335) * C38366 + (C4666 - C4667) * C38294) *
                         C38291 +
                     ((C1956 - C1955) * C38365 + (C2252 - C2251) * C38293 +
                      (C4338 - C4339) * C38366 + (C4668 - C4669) * C38294) *
                         C38292) *
                        C89217) *
                       C89137 * C89334 +
                   (((C293 * C38365 + C510 * C38293 + C41234 * C38366 +
                      C41552 * C38294) *
                         C38291 +
                     ((C286 - C285) * C38365 + (C507 - C506) * C38293 +
                      (C2794 - C2795) * C38366 + (C3033 - C3034) * C38294) *
                         C38292) *
                        C89308 +
                    ((C3515 * C38365 + C3755 * C38293 +
                      (C4339 - C4338) * C38366 + (C4669 - C4668) * C38294) *
                         C38291 +
                     ((C3518 - C3517) * C38365 + (C3757 - C3756) * C38293 +
                      (C263 * C4100 - C89247 * C4328) * C38366 +
                      (C263 * C4442 - C89247 * C4664) * C38294) *
                         C38292) *
                        C89217) *
                       C89137 * C2628)) /
                 (p * q * std::sqrt(p + q));
    d2eezx[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                 C263 +
             (C38291 * C571 - C38295 * C565 + C38292 * C572 - C38297 * C566) *
                 C89247) *
                C38293 +
            ((C39386 - C39387 + C39388 - C39389) * C263 +
             (C39743 - C39744 + C39745 - C39746) * C89247) *
                C38294) *
               C89308 +
           (((C38295 * C1724 - C38291 * C1734 + C38297 * C1723 -
              C38292 * C1732) *
                 C263 +
             (C38295 * C2330 - C38291 * C2338 + C38297 * C2331 -
              C38292 * C2339) *
                 C89247) *
                C38293 +
            ((C38295 * C4097 - C38291 * C4101 + C38297 * C4098 -
              C38292 * C4103) *
                 C263 +
             (C38295 * C4767 - C38291 * C4771 + C38297 * C4768 -
              C38292 * C4772) *
                 C89247) *
                C38294) *
               C89217) *
              C89137 * C89333 +
          ((((C38295 * C107 - C38291 * C114 + C38297 * C108 - C38292 * C116) *
                 C263 +
             (C38295 * C566 - C38291 * C572 + C38297 * C567 - C38292 * C573) *
                 C89247) *
                C38293 +
            ((C39402 - C39403 + C39404 - C39405) * C263 +
             (C39751 - C39752 + C39753 - C39754) * C89247) *
                C38294) *
               C89308 +
           (((C38291 * C1732 - C38295 * C1723 + C38292 * C1730 -
              C38297 * C1722) *
                 C263 +
             (C38291 * C2339 - C38295 * C2331 + C38292 * C2340 -
              C38297 * C2332) *
                 C89247) *
                C38293 +
            ((C38291 * C4103 - C38295 * C4098 + C38292 * C4105 -
              C38297 * C4099) *
                 C263 +
             (C38291 * C4772 - C38295 * C4768 + C38292 * C4773 -
              C38297 * C4769) *
                 C89247) *
                C38294) *
               C89217) *
              C89137 * C89334 +
          ((((C38291 * C116 - C38295 * C108 + C38292 * C118 - C38297 * C109) *
                 C263 +
             (C38291 * C573 - C38295 * C567 + C38292 * C574 - C38297 * C568) *
                 C89247) *
                C38293 +
            ((C41334 - C41335 + C41336 - C41337) * C263 +
             (C41651 - C41652 + C41653 - C41654) * C89247) *
                C38294) *
               C89308 +
           (((C38295 * C1722 - C38291 * C1730 + C38297 * C1728 -
              C38292 * C1742) *
                 C263 +
             (C38295 * C2332 - C38291 * C2340 + C38297 * C2336 -
              C38292 * C2344) *
                 C89247) *
                C38293 +
            ((C38295 * C4099 - C38291 * C4105 + C38297 * C4100 -
              C38292 * C4107) *
                 C263 +
             (C38295 * C4769 - C38291 * C4773 + C38297 * C4770 -
              C38292 * C4774) *
                 C89247) *
                C38294) *
               C89217) *
              C89137 * C2628)) /
        (p * q * std::sqrt(p + q));
    d2eezy[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                 C263 +
             (C38293 * C627 - C38365 * C565 + C38294 * C1515 - C38366 * C1425) *
                 C89247) *
                C38291 +
            ((C38368 - C38369 + C38370 - C38371) * C263 +
             (C38832 - C38833 + C38834 - C38835) * C89247) *
                C38292) *
               C89308 +
           (((C38365 * C1724 - C38293 * C1828 + C38366 * C4097 -
              C38294 * C4211) *
                 C263 +
             (C38365 * C2330 - C38293 * C2420 + C38366 * C4767 -
              C38294 * C4873) *
                 C89247) *
                C38291 +
            ((C40163 - C40164 + C40165 - C40166) * C263 +
             (C40801 - C40802 + C40803 - C40804) * C89247) *
                C38292) *
               C89217) *
              C89137 * C89333 +
          ((((C38369 - C38368 + C38371 - C38370) * C263 +
             (C38833 - C38832 + C38835 - C38834) * C89247) *
                C38291 +
            ((C38376 - C38377 + C38378 - C38379) * C263 +
             (C38836 - C38837 + C38838 - C38839) * C89247) *
                C38292) *
               C89308 +
           (((C40164 - C40163 + C40166 - C40165) * C263 +
             (C40802 - C40801 + C40804 - C40803) * C89247) *
                C38291 +
            ((C42053 - C42054 + C42055 - C42056) * C263 +
             (C42663 - C42664 + C42665 - C42666) * C89247) *
                C38292) *
               C89217) *
              C89137 * C89334 +
          ((((C38377 - C38376 + C38379 - C38378) * C263 +
             (C38837 - C38836 + C38839 - C38838) * C89247) *
                C38291 +
            ((C38384 - C38385 + C38386 - C38387) * C263 +
             (C38840 - C38841 + C38842 - C38843) * C89247) *
                C38292) *
               C89308 +
           (((C42054 - C42053 + C42056 - C42055) * C263 +
             (C42664 - C42663 + C42666 - C42665) * C89247) *
                C38291 +
            ((C38365 * C1728 - C38293 * C1834 + C38366 * C4100 -
              C38294 * C4214) *
                 C263 +
             (C38365 * C2336 - C38293 * C2426 + C38366 * C4770 -
              C38294 * C4876) *
                 C89247) *
                C38292) *
               C89217) *
              C89137 * C2628)) /
        (p * q * std::sqrt(p + q));
    d2eezz[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) *
                 C38293 +
             C14524 * C38294) *
                C38291 +
            (C38910 + C38911) * C38292) *
               C89308 -
           ((C40907 + C40908) * C38292 +
            (C17593 * C38294 +
             (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
                 C38293) *
                C38291) *
               C89217) *
              C89137 * C89333 +
          (((C40908 + C40907) * C38291 + (C42765 + C42766) * C38292) * C89217 -
           ((C38912 + C38913) * C38292 + (C38911 + C38910) * C38291) * C89308) *
              C89137 * C89334 +
          (((C38913 + C38912) * C38291 + (C38914 + C38915) * C38292) * C89308 -
           (((C263 * C4328 - C699 * C4100 - C263 * C4770 + C89247 * C4982) *
                 C38294 +
             C3998 * C38293) *
                C38292 +
            (C42766 + C42765) * C38291) *
               C89217) *
              C89137 * C2628)) /
        (p * q * std::sqrt(p + q));
    d2eexx[4] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C38295 * C112 - C38296 * C106 - C38295 * C113 + C38291 * C124 +
            C38297 * C114 - C38298 * C107 - C38297 * C115 + C38292 * C125) *
               C89247 * C38293 +
           (C38295 * C829 - C38296 * C819 - C38295 * C830 + C38291 * C843 +
            C38297 * C827 - C38298 * C818 - C38297 * C828 + C38292 * C842) *
               C89247 * C38294) *
              C89153 * C89137 * C96 -
          ((C38297 * C825 - C38298 * C817 - C38297 * C826 + C38292 * C841 +
            C38295 * C827 - C38296 * C818 - C38295 * C828 + C38291 * C842) *
               C89247 * C38294 +
           (C38297 * C116 - C38298 * C108 - C38297 * C117 + C38292 * C126 +
            C38295 * C114 - C38296 * C107 - C38295 * C115 + C38291 * C125) *
               C89247 * C38293) *
              C89153 * C89137 * C97 +
          ((C38295 * C116 - C38296 * C108 - C38295 * C117 + C38291 * C126 +
            C38297 * C118 - C38298 * C109 - C38297 * C119 + C38292 * C127) *
               C89247 * C38293 +
           (C38295 * C825 - C38296 * C817 - C38295 * C826 + C38291 * C841 +
            C38297 * C837 - C38298 * C823 - C38297 * C838 + C38292 * C847) *
               C89247 * C38294) *
              C89153 * C89137 * C98 -
          ((C38297 * C2630 - C38298 * C2629 - C38297 * C2631 + C38292 * C2632 +
            C38295 * C837 - C38296 * C823 - C38295 * C838 + C38291 * C847) *
               C89247 * C38294 +
           (C38297 * C120 - C38298 * C110 - C38297 * C121 + C38292 * C128 +
            C38295 * C118 - C38296 * C109 - C38295 * C119 + C38291 * C127) *
               C89247 * C38293) *
              C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C38295 * C112 - C38296 * C106 - C38295 * C113 + C38291 * C124 +
             C38297 * C114 - C38298 * C107 - C38297 * C115 + C38292 * C125) *
                C89247 * C38293 +
            (C39062 + C39063) * C89247 * C38294) *
               C89153 * C812 -
           ((C39064 + C39065) * C89247 * C38294 +
            (C39063 + C39062) * C89247 * C38293) *
               C89153 * C813 +
           ((C39065 + C39064) * C89247 * C38293 +
            (C38295 * C5732 - C38296 * C5727 - C38295 * C5733 + C38291 * C5736 +
             C38297 * C5730 - C38298 * C5726 - C38297 * C5731 +
             C38292 * C5735) *
                C89247 * C38294) *
               C89153 * C814) *
              C815 +
          (((C39066 + C39067) * C89247 * C38293 +
            (C39068 + C39069) * C89247 * C38294) *
               C89153 * C813 -
           ((C39067 + C39066) * C89247 * C38294 +
            (C38297 * C116 - C38298 * C108 - C38297 * C117 + C38292 * C126 +
             C38295 * C114 - C38296 * C107 - C38295 * C115 + C38291 * C125) *
                C89247 * C38293) *
               C89153 * C812 -
           ((C38297 * C5728 - C38298 * C5725 - C38297 * C5729 + C38292 * C5734 +
             C38295 * C5730 - C38296 * C5726 - C38295 * C5731 +
             C38291 * C5735) *
                C89247 * C38294 +
            (C39069 + C39068) * C89247 * C38293) *
               C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eexy[4] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
               C38295 +
           (C38293 * C187 - C38365 * C113 + C38294 * C931 - C38366 * C830) *
               C38291 +
           (C38368 - C38369 + C38370 - C38371) * C38297 +
           (C38372 - C38373 + C38374 - C38375) * C38292) *
              C89247 * C89153 * C89137 * C96 +
          ((C38369 - C38368 + C38371 - C38370) * C38295 +
           (C38373 - C38372 + C38375 - C38374) * C38291 +
           (C38376 - C38377 + C38378 - C38379) * C38297 +
           (C38380 - C38381 + C38382 - C38383) * C38292) *
              C89247 * C89153 * C89137 * C97 +
          ((C38377 - C38376 + C38379 - C38378) * C38295 +
           (C38381 - C38380 + C38383 - C38382) * C38291 +
           (C38384 - C38385 + C38386 - C38387) * C38297 +
           (C38388 - C38389 + C38390 - C38391) * C38292) *
              C89247 * C89153 * C89137 * C98 +
          ((C38385 - C38384 + C38387 - C38386) * C38295 +
           (C38389 - C38388 + C38391 - C38390) * C38291 +
           (C38365 * C110 - C38293 * C185 + C38366 * C2629 - C38294 * C2707) *
               C38297 +
           (C38365 * C121 - C38293 * C191 + C38366 * C2631 - C38294 * C2708) *
               C38292) *
              C89247 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                C38295 +
            (C38293 * C187 - C38365 * C113 + C38294 * C931 - C38366 * C830) *
                C38291 +
            (C38368 - C38369 + C38370 - C38371) * C38297 +
            (C38372 - C38373 + C38374 - C38375) * C38292) *
               C89247 * C89153 * C812 +
           ((C38365 * C819 - C38293 * C923 + C38366 * C820 - C38294 * C926) *
                C38295 +
            (C38365 * C830 - C38293 * C931 + C38366 * C832 - C38294 * C934) *
                C38291 +
            (C39168 - C39169 + C39170 - C39171) * C38297 +
            (C39172 - C39173 + C39174 - C39175) * C38292) *
               C89247 * C89153 * C813 +
           ((C38293 * C926 - C38365 * C820 + C38294 * C5787 - C38366 * C5727) *
                C38295 +
            (C38293 * C934 - C38365 * C832 + C38294 * C5790 - C38366 * C5733) *
                C38291 +
            (C39176 - C39177 + C39178 - C39179) * C38297 +
            (C39180 - C39181 + C39182 - C39183) * C38292) *
               C89247 * C89153 * C814) *
              C815 +
          (((C38369 - C38368 + C38371 - C38370) * C38295 +
            (C38373 - C38372 + C38375 - C38374) * C38291 +
            (C38376 - C38377 + C38378 - C38379) * C38297 +
            (C38380 - C38381 + C38382 - C38383) * C38292) *
               C89247 * C89153 * C812 +
           ((C39169 - C39168 + C39171 - C39170) * C38295 +
            (C39173 - C39172 + C39175 - C39174) * C38291 +
            (C38293 * C925 - C38365 * C817 + C38294 * C928 - C38366 * C822) *
                C38297 +
            (C38293 * C933 - C38365 * C826 + C38294 * C936 - C38366 * C836) *
                C38292) *
               C89247 * C89153 * C813 +
           ((C39177 - C39176 + C39179 - C39178) * C38295 +
            (C39181 - C39180 + C39183 - C39182) * C38291 +
            (C38365 * C822 - C38293 * C928 + C38366 * C5725 - C38294 * C5789) *
                C38297 +
            (C38365 * C836 - C38293 * C936 + C38366 * C5729 - C38294 * C5792) *
                C38292) *
               C89247 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eexz[4] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C89247 * C264 - C263 * C106) * C38295 +
                     (C89247 * C270 - C263 * C113) * C38291 +
                     (C277 - C278) * C38297 + (C279 - C280) * C38292) *
                        C38293 +
                    ((C13956 - C13957) * C38295 + (C13958 - C13959) * C38291 +
                     (C1047 - C1046) * C38297 + (C1049 - C1048) * C38292) *
                        C38294) *
                       C89153 * C89137 * C96 +
                   (((C278 - C277) * C38295 + (C280 - C279) * C38291 +
                     (C282 - C281) * C38297 + (C284 - C283) * C38292) *
                        C38293 +
                    ((C1046 - C1047) * C38295 + (C1048 - C1049) * C38291 +
                     C2792 * C38297 + C2793 * C38292) *
                        C38294) *
                       C89153 * C89137 * C97 +
                   ((C293 * C38295 + C294 * C38291 + (C286 - C285) * C38297 +
                     (C288 - C287) * C38292) *
                        C38293 +
                    ((C1051 - C1050) * C38295 + (C1053 - C1052) * C38291 +
                     (C2794 - C2795) * C38297 + (C2796 - C2797) * C38292) *
                        C38294) *
                       C89153 * C89137 * C98 +
                   ((C295 * C38295 + C296 * C38291 + (C290 - C289) * C38297 +
                     (C292 - C291) * C38292) *
                        C38293 +
                    ((C2795 - C2794) * C38295 + (C2797 - C2796) * C38291 +
                     (C263 * C2629 - C89247 * C2789) * C38297 +
                     (C263 * C2631 - C89247 * C2790) * C38292) *
                        C38294) *
                       C89153 * C89137 * C99)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C89247 * C264 - C263 * C106) * C38295 +
                      (C89247 * C270 - C263 * C113) * C38291 +
                      (C277 - C278) * C38297 + (C279 - C280) * C38292) *
                         C38293 +
                     ((C13956 - C13957) * C38295 + (C13958 - C13959) * C38291 +
                      C39282 * C38297 + C39283 * C38292) *
                         C38294) *
                        C89153 * C812 +
                    (((C13957 - C13956) * C38295 + (C13959 - C13958) * C38291 +
                      C39284 * C38297 + C39285 * C38292) *
                         C38293 +
                     ((C13961 - C13960) * C38295 + (C13963 - C13962) * C38291 +
                      C13968 * C38297 + C13969 * C38292) *
                         C38294) *
                        C89153 * C813 +
                    ((C13974 * C38295 + C13975 * C38291 + C39286 * C38297 +
                      C39287 * C38292) *
                         C38293 +
                     ((C13965 - C13964) * C38295 + (C13967 - C13966) * C38291 +
                      (C13970 - C13971) * C38297 + (C13972 - C13973) * C38292) *
                         C38294) *
                        C89153 * C814) *
                       C815 +
                   ((((C278 - C277) * C38295 + (C280 - C279) * C38291 +
                      (C282 - C281) * C38297 + (C284 - C283) * C38292) *
                         C38293 +
                     (C39284 * C38295 + C39285 * C38291 + C2792 * C38297 +
                      C2793 * C38292) *
                         C38294) *
                        C89153 * C812 +
                    ((C39282 * C38295 + C39283 * C38291 +
                      (C1051 - C1050) * C38297 + (C1053 - C1052) * C38292) *
                         C38293 +
                     (C39286 * C38295 + C39287 * C38291 +
                      (C1058 - C1059) * C38297 + (C1060 - C1061) * C38292) *
                         C38294) *
                        C89153 * C813 +
                    ((C13968 * C38295 + C13969 * C38291 +
                      (C1059 - C1058) * C38297 + (C1061 - C1060) * C38292) *
                         C38293 +
                     ((C13971 - C13970) * C38295 + (C13973 - C13972) * C38291 +
                      (C263 * C5725 - C89247 * C5845) * C38297 +
                      (C263 * C5729 - C89247 * C5848) * C38292) *
                         C38294) *
                        C89153 * C814) *
                       C89124)) /
                     (p * q * std::sqrt(p + q));
    d2eeyx[4] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
               C38365 +
           (C38291 * C352 - C38295 * C346 + C38292 * C353 - C38297 * C347) *
               C38293 +
           (C38291 * C829 - C38295 * C819 + C38292 * C827 - C38297 * C818) *
               C38366 +
           (C38291 * C1143 - C38295 * C1135 + C38292 * C1144 - C38297 * C1136) *
               C38294) *
              C89247 * C89153 * C89137 * C96 +
          ((C38295 * C107 - C38291 * C114 + C38297 * C108 - C38292 * C116) *
               C38365 +
           (C38295 * C347 - C38291 * C353 + C38297 * C348 - C38292 * C354) *
               C38293 +
           (C38295 * C818 - C38291 * C827 + C38297 * C817 - C38292 * C825) *
               C38366 +
           (C38295 * C1136 - C38291 * C1144 + C38297 * C1137 - C38292 * C1145) *
               C38294) *
              C89247 * C89153 * C89137 * C97 +
          ((C38291 * C116 - C38295 * C108 + C38292 * C118 - C38297 * C109) *
               C38365 +
           (C38291 * C354 - C38295 * C348 + C38292 * C355 - C38297 * C349) *
               C38293 +
           (C38291 * C825 - C38295 * C817 + C38292 * C837 - C38297 * C823) *
               C38366 +
           (C38291 * C1145 - C38295 * C1137 + C38292 * C1149 - C38297 * C1141) *
               C38294) *
              C89247 * C89153 * C89137 * C98 +
          ((C38295 * C109 - C38291 * C118 + C38297 * C110 - C38292 * C120) *
               C38365 +
           (C38295 * C349 - C38291 * C355 + C38297 * C350 - C38292 * C356) *
               C38293 +
           (C38295 * C823 - C38291 * C837 + C38297 * C2629 - C38292 * C2630) *
               C38366 +
           (C38295 * C1141 - C38291 * C1149 + C38297 * C2871 - C38292 * C2872) *
               C38294) *
              C89247 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                C38365 +
            (C38291 * C352 - C38295 * C346 + C38292 * C353 - C38297 * C347) *
                C38293 +
            (C39386 - C39387 + C39388 - C39389) * C38366 +
            (C39390 - C39391 + C39392 - C39393) * C38294) *
               C89247 * C89153 * C812 +
           ((C39387 - C39386 + C39389 - C39388) * C38365 +
            (C39391 - C39390 + C39393 - C39392) * C38293 +
            (C39394 - C39395 + C39396 - C39397) * C38366 +
            (C39398 - C39399 + C39400 - C39401) * C38294) *
               C89247 * C89153 * C813 +
           ((C39395 - C39394 + C39397 - C39396) * C38365 +
            (C39399 - C39398 + C39401 - C39400) * C38293 +
            (C38291 * C5732 - C38295 * C5727 + C38292 * C5730 -
             C38297 * C5726) *
                C38366 +
            (C38291 * C5902 - C38295 * C5899 + C38292 * C5903 -
             C38297 * C5900) *
                C38294) *
               C89247 * C89153 * C814) *
              C815 +
          (((C38295 * C107 - C38291 * C114 + C38297 * C108 - C38292 * C116) *
                C38365 +
            (C38295 * C347 - C38291 * C353 + C38297 * C348 - C38292 * C354) *
                C38293 +
            (C39402 - C39403 + C39404 - C39405) * C38366 +
            (C39406 - C39407 + C39408 - C39409) * C38294) *
               C89247 * C89153 * C812 +
           ((C39403 - C39402 + C39405 - C39404) * C38365 +
            (C39407 - C39406 + C39409 - C39408) * C38293 +
            (C39410 - C39411 + C39412 - C39413) * C38366 +
            (C39414 - C39415 + C39416 - C39417) * C38294) *
               C89247 * C89153 * C813 +
           ((C39411 - C39410 + C39413 - C39412) * C38365 +
            (C39415 - C39414 + C39417 - C39416) * C38293 +
            (C38295 * C5726 - C38291 * C5730 + C38297 * C5725 -
             C38292 * C5728) *
                C38366 +
            (C38295 * C5900 - C38291 * C5903 + C38297 * C5901 -
             C38292 * C5904) *
                C38294) *
               C89247 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[4] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C38365 * C181 - C38589 * C106 - C38365 * C346 + C38293 * C409 +
            C38366 * C923 - C38590 * C819 - C38366 * C1135 + C38294 * C1227) *
               C38291 +
           (C38628 + C38629) * C38292) *
              C89247 * C89153 * C89137 * C96 -
          ((C38630 + C38631) * C38292 + (C38629 + C38628) * C38291) * C89247 *
              C89153 * C89137 * C97 +
          ((C38631 + C38630) * C38291 + (C38632 + C38633) * C38292) * C89247 *
              C89153 * C89137 * C98 -
          ((C38366 * C2707 - C38590 * C2629 - C38366 * C2871 + C38294 * C2947 +
            C38365 * C185 - C38589 * C110 - C38365 * C350 + C38293 * C413) *
               C38292 +
           (C38633 + C38632) * C38291) *
              C89247 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C38365 * C181 - C38589 * C106 - C38365 * C346 + C38293 * C409 +
             C38366 * C923 - C38590 * C819 - C38366 * C1135 + C38294 * C1227) *
                C38291 +
            (C38628 + C38629) * C38292) *
               C89247 * C89153 * C812 -
           ((C39540 + C39541) * C38292 +
            (C38366 * C926 - C38590 * C820 - C38366 * C1138 + C38294 * C1228 +
             C38365 * C923 - C38589 * C819 - C38365 * C1135 + C38293 * C1227) *
                C38291) *
               C89247 * C89153 * C813 +
           ((C38365 * C926 - C38589 * C820 - C38365 * C1138 + C38293 * C1228 +
             C38366 * C5787 - C38590 * C5727 - C38366 * C5899 +
             C38294 * C5957) *
                C38291 +
            (C39542 + C39543) * C38292) *
               C89247 * C89153 * C814) *
              C815 +
          (((C39541 + C39540) * C38291 +
            (C38365 * C925 - C38589 * C817 - C38365 * C1137 + C38293 * C1225 +
             C38366 * C928 - C38590 * C822 - C38366 * C1140 + C38294 * C1230) *
                C38292) *
               C89247 * C89153 * C813 -
           ((C38630 + C38631) * C38292 + (C38629 + C38628) * C38291) * C89247 *
               C89153 * C812 -
           ((C38366 * C5789 - C38590 * C5725 - C38366 * C5901 + C38294 * C5955 +
             C38365 * C928 - C38589 * C822 - C38365 * C1140 + C38293 * C1230) *
                C38292 +
            (C39543 + C39542) * C38291) *
               C89247 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[4] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C89247 * C264 - C263 * C106) * C38365 +
                     (C89247 * C493 - C263 * C346) * C38293 +
                     (C13956 - C13957) * C38366 + (C14240 - C14241) * C38294) *
                        C38291 +
                    ((C277 - C278) * C38365 + (C500 - C501) * C38293 +
                     (C1047 - C1046) * C38366 + (C1345 - C1344) * C38294) *
                        C38292) *
                       C89153 * C89137 * C96 +
                   (((C278 - C277) * C38365 + (C501 - C500) * C38293 +
                     (C1046 - C1047) * C38366 + (C1344 - C1345) * C38294) *
                        C38291 +
                    ((C282 - C281) * C38365 + (C504 - C503) * C38293 +
                     C2792 * C38366 + C3032 * C38294) *
                        C38292) *
                       C89153 * C89137 * C97 +
                   ((C293 * C38365 + C510 * C38293 + (C1051 - C1050) * C38366 +
                     (C1347 - C1346) * C38294) *
                        C38291 +
                    ((C286 - C285) * C38365 + (C507 - C506) * C38293 +
                     (C2794 - C2795) * C38366 + (C3033 - C3034) * C38294) *
                        C38292) *
                       C89153 * C89137 * C98 +
                   ((C295 * C38365 + C511 * C38293 + (C2795 - C2794) * C38366 +
                     (C3034 - C3033) * C38294) *
                        C38291 +
                    ((C290 - C289) * C38365 + (C509 - C508) * C38293 +
                     (C263 * C2629 - C89247 * C2789) * C38366 +
                     (C263 * C2871 - C89247 * C3029) * C38294) *
                        C38292) *
                       C89153 * C89137 * C99)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C89247 * C264 - C263 * C106) * C38365 +
                      (C89247 * C493 - C263 * C346) * C38293 +
                      (C13956 - C13957) * C38366 + (C14240 - C14241) * C38294) *
                         C38291 +
                     ((C277 - C278) * C38365 + (C500 - C501) * C38293 +
                      C39282 * C38366 + C39642 * C38294) *
                         C38292) *
                        C89153 * C812 +
                    (((C13957 - C13956) * C38365 + (C14241 - C14240) * C38293 +
                      (C13961 - C13960) * C38366 + (C14243 - C14242) * C38294) *
                         C38291 +
                     (C39284 * C38365 + C39643 * C38293 + C13968 * C38366 +
                      C14246 * C38294) *
                         C38292) *
                        C89153 * C813 +
                    ((C13974 * C38365 + C14249 * C38293 +
                      (C13965 - C13964) * C38366 + (C14245 - C14244) * C38294) *
                         C38291 +
                     (C39286 * C38365 + C39644 * C38293 +
                      (C13970 - C13971) * C38366 + (C14247 - C14248) * C38294) *
                         C38292) *
                        C89153 * C814) *
                       C815 +
                   ((((C278 - C277) * C38365 + (C501 - C500) * C38293 +
                      C39284 * C38366 + C39643 * C38294) *
                         C38291 +
                     ((C282 - C281) * C38365 + (C504 - C503) * C38293 +
                      C2792 * C38366 + C3032 * C38294) *
                         C38292) *
                        C89153 * C812 +
                    ((C39282 * C38365 + C39642 * C38293 + C39286 * C38366 +
                      C39644 * C38294) *
                         C38291 +
                     ((C1051 - C1050) * C38365 + (C1347 - C1346) * C38293 +
                      (C1058 - C1059) * C38366 + (C1350 - C1351) * C38294) *
                         C38292) *
                        C89153 * C813 +
                    ((C13968 * C38365 + C14246 * C38293 +
                      (C13971 - C13970) * C38366 + (C14248 - C14247) * C38294) *
                         C38291 +
                     ((C1059 - C1058) * C38365 + (C1351 - C1350) * C38293 +
                      (C263 * C5725 - C89247 * C5845) * C38366 +
                      (C263 * C5901 - C89247 * C6010) * C38294) *
                         C38292) *
                        C89153 * C814) *
                       C89124)) /
                     (p * q * std::sqrt(p + q));
    d2eezx[4] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                C263 +
            (C38291 * C571 - C38295 * C565 + C38292 * C572 - C38297 * C566) *
                C89247) *
               C38293 +
           ((C38291 * C829 - C38295 * C819 + C38292 * C827 - C38297 * C818) *
                C263 +
            (C38291 * C1433 - C38295 * C1425 + C38292 * C1434 -
             C38297 * C1426) *
                C89247) *
               C38294) *
              C89153 * C89137 * C96 +
          (((C38295 * C107 - C38291 * C114 + C38297 * C108 - C38292 * C116) *
                C263 +
            (C38295 * C566 - C38291 * C572 + C38297 * C567 - C38292 * C573) *
                C89247) *
               C38293 +
           ((C38295 * C818 - C38291 * C827 + C38297 * C817 - C38292 * C825) *
                C263 +
            (C38295 * C1426 - C38291 * C1434 + C38297 * C1427 -
             C38292 * C1435) *
                C89247) *
               C38294) *
              C89153 * C89137 * C97 +
          (((C38291 * C116 - C38295 * C108 + C38292 * C118 - C38297 * C109) *
                C263 +
            (C38291 * C573 - C38295 * C567 + C38292 * C574 - C38297 * C568) *
                C89247) *
               C38293 +
           ((C38291 * C825 - C38295 * C817 + C38292 * C837 - C38297 * C823) *
                C263 +
            (C38291 * C1435 - C38295 * C1427 + C38292 * C1439 -
             C38297 * C1431) *
                C89247) *
               C38294) *
              C89153 * C89137 * C98 +
          (((C38295 * C109 - C38291 * C118 + C38297 * C110 - C38292 * C120) *
                C263 +
            (C38295 * C568 - C38291 * C574 + C38297 * C569 - C38292 * C575) *
                C89247) *
               C38293 +
           ((C38295 * C823 - C38291 * C837 + C38297 * C2629 - C38292 * C2630) *
                C263 +
            (C38295 * C1431 - C38291 * C1439 + C38297 * C3110 -
             C38292 * C3111) *
                C89247) *
               C38294) *
              C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                 C263 +
             (C38291 * C571 - C38295 * C565 + C38292 * C572 - C38297 * C566) *
                 C89247) *
                C38293 +
            ((C39386 - C39387 + C39388 - C39389) * C263 +
             (C39743 - C39744 + C39745 - C39746) * C89247) *
                C38294) *
               C89153 * C812 +
           (((C39387 - C39386 + C39389 - C39388) * C263 +
             (C39744 - C39743 + C39746 - C39745) * C89247) *
                C38293 +
            ((C39394 - C39395 + C39396 - C39397) * C263 +
             (C39747 - C39748 + C39749 - C39750) * C89247) *
                C38294) *
               C89153 * C813 +
           (((C39395 - C39394 + C39397 - C39396) * C263 +
             (C39748 - C39747 + C39750 - C39749) * C89247) *
                C38293 +
            ((C38291 * C5732 - C38295 * C5727 + C38292 * C5730 -
              C38297 * C5726) *
                 C263 +
             (C38291 * C6064 - C38295 * C6061 + C38292 * C6065 -
              C38297 * C6062) *
                 C89247) *
                C38294) *
               C89153 * C814) *
              C815 +
          ((((C38295 * C107 - C38291 * C114 + C38297 * C108 - C38292 * C116) *
                 C263 +
             (C38295 * C566 - C38291 * C572 + C38297 * C567 - C38292 * C573) *
                 C89247) *
                C38293 +
            ((C39402 - C39403 + C39404 - C39405) * C263 +
             (C39751 - C39752 + C39753 - C39754) * C89247) *
                C38294) *
               C89153 * C812 +
           (((C39403 - C39402 + C39405 - C39404) * C263 +
             (C39752 - C39751 + C39754 - C39753) * C89247) *
                C38293 +
            ((C39410 - C39411 + C39412 - C39413) * C263 +
             (C39755 - C39756 + C39757 - C39758) * C89247) *
                C38294) *
               C89153 * C813 +
           (((C39411 - C39410 + C39413 - C39412) * C263 +
             (C39756 - C39755 + C39758 - C39757) * C89247) *
                C38293 +
            ((C38295 * C5726 - C38291 * C5730 + C38297 * C5725 -
              C38292 * C5728) *
                 C263 +
             (C38295 * C6062 - C38291 * C6065 + C38297 * C6063 -
              C38292 * C6066) *
                 C89247) *
                C38294) *
               C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eezy[4] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                C263 +
            (C38293 * C627 - C38365 * C565 + C38294 * C1515 - C38366 * C1425) *
                C89247) *
               C38291 +
           ((C38368 - C38369 + C38370 - C38371) * C263 +
            (C38832 - C38833 + C38834 - C38835) * C89247) *
               C38292) *
              C89153 * C89137 * C96 +
          (((C38369 - C38368 + C38371 - C38370) * C263 +
            (C38833 - C38832 + C38835 - C38834) * C89247) *
               C38291 +
           ((C38376 - C38377 + C38378 - C38379) * C263 +
            (C38836 - C38837 + C38838 - C38839) * C89247) *
               C38292) *
              C89153 * C89137 * C97 +
          (((C38377 - C38376 + C38379 - C38378) * C263 +
            (C38837 - C38836 + C38839 - C38838) * C89247) *
               C38291 +
           ((C38384 - C38385 + C38386 - C38387) * C263 +
            (C38840 - C38841 + C38842 - C38843) * C89247) *
               C38292) *
              C89153 * C89137 * C98 +
          (((C38385 - C38384 + C38387 - C38386) * C263 +
            (C38841 - C38840 + C38843 - C38842) * C89247) *
               C38291 +
           ((C38365 * C110 - C38293 * C185 + C38366 * C2629 - C38294 * C2707) *
                C263 +
            (C38365 * C569 - C38293 * C631 + C38366 * C3110 - C38294 * C3186) *
                C89247) *
               C38292) *
              C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                 C263 +
             (C38293 * C627 - C38365 * C565 + C38294 * C1515 - C38366 * C1425) *
                 C89247) *
                C38291 +
            ((C38368 - C38369 + C38370 - C38371) * C263 +
             (C38832 - C38833 + C38834 - C38835) * C89247) *
                C38292) *
               C89153 * C812 +
           (((C38365 * C819 - C38293 * C923 + C38366 * C820 - C38294 * C926) *
                 C263 +
             (C38365 * C1425 - C38293 * C1515 + C38366 * C1428 -
              C38294 * C1518) *
                 C89247) *
                C38291 +
            ((C39168 - C39169 + C39170 - C39171) * C263 +
             (C39857 - C39858 + C39859 - C39860) * C89247) *
                C38292) *
               C89153 * C813 +
           (((C38293 * C926 - C38365 * C820 + C38294 * C5787 - C38366 * C5727) *
                 C263 +
             (C38293 * C1518 - C38365 * C1428 + C38294 * C6117 -
              C38366 * C6061) *
                 C89247) *
                C38291 +
            ((C39176 - C39177 + C39178 - C39179) * C263 +
             (C39861 - C39862 + C39863 - C39864) * C89247) *
                C38292) *
               C89153 * C814) *
              C815 +
          ((((C38369 - C38368 + C38371 - C38370) * C263 +
             (C38833 - C38832 + C38835 - C38834) * C89247) *
                C38291 +
            ((C38376 - C38377 + C38378 - C38379) * C263 +
             (C38836 - C38837 + C38838 - C38839) * C89247) *
                C38292) *
               C89153 * C812 +
           (((C39169 - C39168 + C39171 - C39170) * C263 +
             (C39858 - C39857 + C39860 - C39859) * C89247) *
                C38291 +
            ((C38293 * C925 - C38365 * C817 + C38294 * C928 - C38366 * C822) *
                 C263 +
             (C38293 * C1517 - C38365 * C1427 + C38294 * C1520 -
              C38366 * C1430) *
                 C89247) *
                C38292) *
               C89153 * C813 +
           (((C39177 - C39176 + C39179 - C39178) * C263 +
             (C39862 - C39861 + C39864 - C39863) * C89247) *
                C38291 +
            ((C38365 * C822 - C38293 * C928 + C38366 * C5725 - C38294 * C5789) *
                 C263 +
             (C38365 * C1430 - C38293 * C1520 + C38366 * C6063 -
              C38294 * C6119) *
                 C89247) *
                C38292) *
               C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eezz[4] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C38293 +
            C14524 * C38294) *
               C38291 +
           (C38910 + C38911) * C38292) *
              C89153 * C89137 * C96 -
          ((C38912 + C38913) * C38292 + (C38911 + C38910) * C38291) * C89153 *
              C89137 * C97 +
          ((C38913 + C38912) * C38291 + (C38914 + C38915) * C38292) * C89153 *
              C89137 * C98 -
          (((C263 * C2789 - C699 * C2629 - C263 * C3110 + C89247 * C3267) *
                C38294 +
            C734 * C38293) *
               C38292 +
           (C38915 + C38914) * C38291) *
              C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) *
                 C38293 +
             C14524 * C38294) *
                C38291 +
            (C38910 + C38911) * C38292) *
               C89153 * C812 -
           ((C39963 + C39964) * C38292 +
            (C14525 * C38294 + C14524 * C38293) * C38291) *
               C89153 * C813 +
           ((C14525 * C38293 + C14526 * C38294) * C38291 +
            (C39965 + C39966) * C38292) *
               C89153 * C814) *
              C815 +
          (((C39964 + C39963) * C38291 +
            (C1638 * C38293 + C1641 * C38294) * C38292) *
               C89153 * C813 -
           ((C38912 + C38913) * C38292 + (C38911 + C38910) * C38291) * C89153 *
               C812 -
           (((C263 * C5845 - C699 * C5725 - C263 * C6063 + C89247 * C6170) *
                 C38294 +
             C1641 * C38293) *
                C38292 +
            (C39966 + C39965) * C38291) *
               C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eexx[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C38295 * C112 - C38296 * C106 - C38295 * C113 + C38291 * C124 +
             C38297 * C114 - C38298 * C107 - C38297 * C115 + C38292 * C125) *
                C89247 * C38293 +
            (C39062 + C39063) * C89247 * C38294) *
               C89153 * C89335 -
           ((C39064 + C39065) * C89247 * C38294 +
            (C39063 + C39062) * C89247 * C38293) *
               C89153 * C89336 +
           ((C39065 + C39064) * C89247 * C38293 +
            (C44983 + C44984) * C89247 * C38294) *
               C89153 * C6963) *
              C89299 +
          (((C39066 + C39067) * C89247 * C38293 +
            (C39068 + C39069) * C89247 * C38294) *
               C89153 * C89336 -
           ((C39067 + C39066) * C89247 * C38294 +
            (C38297 * C116 - C38298 * C108 - C38297 * C117 + C38292 * C126 +
             C38295 * C114 - C38296 * C107 - C38295 * C115 + C38291 * C125) *
                C89247 * C38293) *
               C89153 * C89335 -
           ((C38297 * C5728 - C38298 * C5725 - C38297 * C5729 + C38292 * C5734 +
             C38295 * C5730 - C38296 * C5726 - C38295 * C5731 +
             C38291 * C5735) *
                C89247 * C38294 +
            (C39069 + C39068) * C89247 * C38293) *
               C89153 * C6963) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eexy[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                C38295 +
            (C38293 * C187 - C38365 * C113 + C38294 * C931 - C38366 * C830) *
                C38291 +
            (C38368 - C38369 + C38370 - C38371) * C38297 +
            (C38372 - C38373 + C38374 - C38375) * C38292) *
               C89247 * C89153 * C89335 +
           ((C38365 * C819 - C38293 * C923 + C38366 * C820 - C38294 * C926) *
                C38295 +
            (C38365 * C830 - C38293 * C931 + C38366 * C832 - C38294 * C934) *
                C38291 +
            (C39168 - C39169 + C39170 - C39171) * C38297 +
            (C39172 - C39173 + C39174 - C39175) * C38292) *
               C89247 * C89153 * C89336 +
           ((C38293 * C926 - C38365 * C820 + C38294 * C5787 - C38366 * C5727) *
                C38295 +
            (C38293 * C934 - C38365 * C832 + C38294 * C5790 - C38366 * C5733) *
                C38291 +
            (C39176 - C39177 + C39178 - C39179) * C38297 +
            (C39180 - C39181 + C39182 - C39183) * C38292) *
               C89247 * C89153 * C6963) *
              C89299 +
          (((C38369 - C38368 + C38371 - C38370) * C38295 +
            (C38373 - C38372 + C38375 - C38374) * C38291 +
            (C38376 - C38377 + C38378 - C38379) * C38297 +
            (C38380 - C38381 + C38382 - C38383) * C38292) *
               C89247 * C89153 * C89335 +
           ((C39169 - C39168 + C39171 - C39170) * C38295 +
            (C39173 - C39172 + C39175 - C39174) * C38291 +
            (C41128 - C41129 + C41130 - C41131) * C38297 +
            (C41132 - C41133 + C41134 - C41135) * C38292) *
               C89247 * C89153 * C89336 +
           ((C39177 - C39176 + C39179 - C39178) * C38295 +
            (C39181 - C39180 + C39183 - C39182) * C38291 +
            (C38365 * C822 - C38293 * C928 + C38366 * C5725 - C38294 * C5789) *
                C38297 +
            (C38365 * C836 - C38293 * C936 + C38366 * C5729 - C38294 * C5792) *
                C38292) *
               C89247 * C89153 * C6963) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eexz[5] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C89247 * C264 - C263 * C106) * C38295 +
                      (C89247 * C270 - C263 * C113) * C38291 +
                      (C277 - C278) * C38297 + (C279 - C280) * C38292) *
                         C38293 +
                     ((C13956 - C13957) * C38295 + (C13958 - C13959) * C38291 +
                      C39282 * C38297 + C39283 * C38292) *
                         C38294) *
                        C89153 * C89335 +
                    (((C13957 - C13956) * C38295 + (C13959 - C13958) * C38291 +
                      C39284 * C38297 + C39285 * C38292) *
                         C38293 +
                     ((C13961 - C13960) * C38295 + (C13963 - C13962) * C38291 +
                      C13968 * C38297 + C13969 * C38292) *
                         C38294) *
                        C89153 * C89336 +
                    ((C13974 * C38295 + C13975 * C38291 + C39286 * C38297 +
                      C39287 * C38292) *
                         C38293 +
                     ((C13965 - C13964) * C38295 + (C13967 - C13966) * C38291 +
                      (C13970 - C13971) * C38297 + (C13972 - C13973) * C38292) *
                         C38294) *
                        C89153 * C6963) *
                       C89299 +
                   ((((C278 - C277) * C38295 + (C280 - C279) * C38291 +
                      (C282 - C281) * C38297 + (C284 - C283) * C38292) *
                         C38293 +
                     (C39284 * C38295 + C39285 * C38291 + C2792 * C38297 +
                      C2793 * C38292) *
                         C38294) *
                        C89153 * C89335 +
                    ((C39282 * C38295 + C39283 * C38291 + C41234 * C38297 +
                      C41235 * C38292) *
                         C38293 +
                     (C39286 * C38295 + C39287 * C38291 +
                      (C1058 - C1059) * C38297 + (C1060 - C1061) * C38292) *
                         C38294) *
                        C89153 * C89336 +
                    ((C13968 * C38295 + C13969 * C38291 +
                      (C1059 - C1058) * C38297 + (C1061 - C1060) * C38292) *
                         C38293 +
                     ((C13971 - C13970) * C38295 + (C13973 - C13972) * C38291 +
                      (C263 * C5725 - C89247 * C5845) * C38297 +
                      (C263 * C5729 - C89247 * C5848) * C38292) *
                         C38294) *
                        C89153 * C6963) *
                       C89124)) /
                 (p * q * std::sqrt(p + q));
    d2eeyx[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                C38365 +
            (C38291 * C352 - C38295 * C346 + C38292 * C353 - C38297 * C347) *
                C38293 +
            (C39386 - C39387 + C39388 - C39389) * C38366 +
            (C39390 - C39391 + C39392 - C39393) * C38294) *
               C89247 * C89153 * C89335 +
           ((C39387 - C39386 + C39389 - C39388) * C38365 +
            (C39391 - C39390 + C39393 - C39392) * C38293 +
            (C39394 - C39395 + C39396 - C39397) * C38366 +
            (C39398 - C39399 + C39400 - C39401) * C38294) *
               C89247 * C89153 * C89336 +
           ((C39395 - C39394 + C39397 - C39396) * C38365 +
            (C39399 - C39398 + C39401 - C39400) * C38293 +
            (C45183 - C45184 + C45185 - C45186) * C38366 +
            (C45187 - C45188 + C45189 - C45190) * C38294) *
               C89247 * C89153 * C6963) *
              C89299 +
          (((C38295 * C107 - C38291 * C114 + C38297 * C108 - C38292 * C116) *
                C38365 +
            (C38295 * C347 - C38291 * C353 + C38297 * C348 - C38292 * C354) *
                C38293 +
            (C39402 - C39403 + C39404 - C39405) * C38366 +
            (C39406 - C39407 + C39408 - C39409) * C38294) *
               C89247 * C89153 * C89335 +
           ((C39403 - C39402 + C39405 - C39404) * C38365 +
            (C39407 - C39406 + C39409 - C39408) * C38293 +
            (C39410 - C39411 + C39412 - C39413) * C38366 +
            (C39414 - C39415 + C39416 - C39417) * C38294) *
               C89247 * C89153 * C89336 +
           ((C39411 - C39410 + C39413 - C39412) * C38365 +
            (C39415 - C39414 + C39417 - C39416) * C38293 +
            (C38295 * C5726 - C38291 * C5730 + C38297 * C5725 -
             C38292 * C5728) *
                C38366 +
            (C38295 * C5900 - C38291 * C5903 + C38297 * C5901 -
             C38292 * C5904) *
                C38294) *
               C89247 * C89153 * C6963) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C38365 * C181 - C38589 * C106 - C38365 * C346 + C38293 * C409 +
             C38366 * C923 - C38590 * C819 - C38366 * C1135 + C38294 * C1227) *
                C38291 +
            (C38628 + C38629) * C38292) *
               C89247 * C89153 * C89335 -
           ((C39540 + C39541) * C38292 +
            (C38366 * C926 - C38590 * C820 - C38366 * C1138 + C38294 * C1228 +
             C38365 * C923 - C38589 * C819 - C38365 * C1135 + C38293 * C1227) *
                C38291) *
               C89247 * C89153 * C89336 +
           ((C38365 * C926 - C38589 * C820 - C38365 * C1138 + C38293 * C1228 +
             C38366 * C5787 - C38590 * C5727 - C38366 * C5899 +
             C38294 * C5957) *
                C38291 +
            (C39542 + C39543) * C38292) *
               C89247 * C89153 * C6963) *
              C89299 +
          (((C39541 + C39540) * C38291 + (C41452 + C41453) * C38292) * C89247 *
               C89153 * C89336 -
           ((C38630 + C38631) * C38292 + (C38629 + C38628) * C38291) * C89247 *
               C89153 * C89335 -
           ((C38366 * C5789 - C38590 * C5725 - C38366 * C5901 + C38294 * C5955 +
             C38365 * C928 - C38589 * C822 - C38365 * C1140 + C38293 * C1230) *
                C38292 +
            (C39543 + C39542) * C38291) *
               C89247 * C89153 * C6963) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[5] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C89247 * C264 - C263 * C106) * C38365 +
                      (C89247 * C493 - C263 * C346) * C38293 +
                      (C13956 - C13957) * C38366 + (C14240 - C14241) * C38294) *
                         C38291 +
                     ((C277 - C278) * C38365 + (C500 - C501) * C38293 +
                      C39282 * C38366 + C39642 * C38294) *
                         C38292) *
                        C89153 * C89335 +
                    (((C13957 - C13956) * C38365 + (C14241 - C14240) * C38293 +
                      (C13961 - C13960) * C38366 + (C14243 - C14242) * C38294) *
                         C38291 +
                     (C39284 * C38365 + C39643 * C38293 + C13968 * C38366 +
                      C14246 * C38294) *
                         C38292) *
                        C89153 * C89336 +
                    ((C13974 * C38365 + C14249 * C38293 +
                      (C13965 - C13964) * C38366 + (C14245 - C14244) * C38294) *
                         C38291 +
                     (C39286 * C38365 + C39644 * C38293 +
                      (C13970 - C13971) * C38366 + (C14247 - C14248) * C38294) *
                         C38292) *
                        C89153 * C6963) *
                       C89299 +
                   ((((C278 - C277) * C38365 + (C501 - C500) * C38293 +
                      C39284 * C38366 + C39643 * C38294) *
                         C38291 +
                     ((C282 - C281) * C38365 + (C504 - C503) * C38293 +
                      C2792 * C38366 + C3032 * C38294) *
                         C38292) *
                        C89153 * C89335 +
                    ((C39282 * C38365 + C39642 * C38293 + C39286 * C38366 +
                      C39644 * C38294) *
                         C38291 +
                     (C41234 * C38365 + C41552 * C38293 +
                      (C1058 - C1059) * C38366 + (C1350 - C1351) * C38294) *
                         C38292) *
                        C89153 * C89336 +
                    ((C13968 * C38365 + C14246 * C38293 +
                      (C13971 - C13970) * C38366 + (C14248 - C14247) * C38294) *
                         C38291 +
                     ((C1059 - C1058) * C38365 + (C1351 - C1350) * C38293 +
                      (C263 * C5725 - C89247 * C5845) * C38366 +
                      (C263 * C5901 - C89247 * C6010) * C38294) *
                         C38292) *
                        C89153 * C6963) *
                       C89124)) /
                 (p * q * std::sqrt(p + q));
    d2eezx[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                 C263 +
             (C38291 * C571 - C38295 * C565 + C38292 * C572 - C38297 * C566) *
                 C89247) *
                C38293 +
            ((C39386 - C39387 + C39388 - C39389) * C263 +
             (C39743 - C39744 + C39745 - C39746) * C89247) *
                C38294) *
               C89153 * C89335 +
           (((C39387 - C39386 + C39389 - C39388) * C263 +
             (C39744 - C39743 + C39746 - C39745) * C89247) *
                C38293 +
            ((C39394 - C39395 + C39396 - C39397) * C263 +
             (C39747 - C39748 + C39749 - C39750) * C89247) *
                C38294) *
               C89153 * C89336 +
           (((C39395 - C39394 + C39397 - C39396) * C263 +
             (C39748 - C39747 + C39750 - C39749) * C89247) *
                C38293 +
            ((C45183 - C45184 + C45185 - C45186) * C263 +
             (C45389 - C45390 + C45391 - C45392) * C89247) *
                C38294) *
               C89153 * C6963) *
              C89299 +
          ((((C38295 * C107 - C38291 * C114 + C38297 * C108 - C38292 * C116) *
                 C263 +
             (C38295 * C566 - C38291 * C572 + C38297 * C567 - C38292 * C573) *
                 C89247) *
                C38293 +
            ((C39402 - C39403 + C39404 - C39405) * C263 +
             (C39751 - C39752 + C39753 - C39754) * C89247) *
                C38294) *
               C89153 * C89335 +
           (((C39403 - C39402 + C39405 - C39404) * C263 +
             (C39752 - C39751 + C39754 - C39753) * C89247) *
                C38293 +
            ((C39410 - C39411 + C39412 - C39413) * C263 +
             (C39755 - C39756 + C39757 - C39758) * C89247) *
                C38294) *
               C89153 * C89336 +
           (((C39411 - C39410 + C39413 - C39412) * C263 +
             (C39756 - C39755 + C39758 - C39757) * C89247) *
                C38293 +
            ((C38295 * C5726 - C38291 * C5730 + C38297 * C5725 -
              C38292 * C5728) *
                 C263 +
             (C38295 * C6062 - C38291 * C6065 + C38297 * C6063 -
              C38292 * C6066) *
                 C89247) *
                C38294) *
               C89153 * C6963) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eezy[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                 C263 +
             (C38293 * C627 - C38365 * C565 + C38294 * C1515 - C38366 * C1425) *
                 C89247) *
                C38291 +
            ((C38368 - C38369 + C38370 - C38371) * C263 +
             (C38832 - C38833 + C38834 - C38835) * C89247) *
                C38292) *
               C89153 * C89335 +
           (((C38365 * C819 - C38293 * C923 + C38366 * C820 - C38294 * C926) *
                 C263 +
             (C38365 * C1425 - C38293 * C1515 + C38366 * C1428 -
              C38294 * C1518) *
                 C89247) *
                C38291 +
            ((C39168 - C39169 + C39170 - C39171) * C263 +
             (C39857 - C39858 + C39859 - C39860) * C89247) *
                C38292) *
               C89153 * C89336 +
           (((C38293 * C926 - C38365 * C820 + C38294 * C5787 - C38366 * C5727) *
                 C263 +
             (C38293 * C1518 - C38365 * C1428 + C38294 * C6117 -
              C38366 * C6061) *
                 C89247) *
                C38291 +
            ((C39176 - C39177 + C39178 - C39179) * C263 +
             (C39861 - C39862 + C39863 - C39864) * C89247) *
                C38292) *
               C89153 * C6963) *
              C89299 +
          ((((C38369 - C38368 + C38371 - C38370) * C263 +
             (C38833 - C38832 + C38835 - C38834) * C89247) *
                C38291 +
            ((C38376 - C38377 + C38378 - C38379) * C263 +
             (C38836 - C38837 + C38838 - C38839) * C89247) *
                C38292) *
               C89153 * C89335 +
           (((C39169 - C39168 + C39171 - C39170) * C263 +
             (C39858 - C39857 + C39860 - C39859) * C89247) *
                C38291 +
            ((C41128 - C41129 + C41130 - C41131) * C263 +
             (C41753 - C41754 + C41755 - C41756) * C89247) *
                C38292) *
               C89153 * C89336 +
           (((C39177 - C39176 + C39179 - C39178) * C263 +
             (C39862 - C39861 + C39864 - C39863) * C89247) *
                C38291 +
            ((C38365 * C822 - C38293 * C928 + C38366 * C5725 - C38294 * C5789) *
                 C263 +
             (C38365 * C1430 - C38293 * C1520 + C38366 * C6063 -
              C38294 * C6119) *
                 C89247) *
                C38292) *
               C89153 * C6963) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eezz[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) *
                 C38293 +
             C14524 * C38294) *
                C38291 +
            (C38910 + C38911) * C38292) *
               C89153 * C89335 -
           ((C39963 + C39964) * C38292 +
            (C14525 * C38294 + C14524 * C38293) * C38291) *
               C89153 * C89336 +
           ((C14525 * C38293 + C14526 * C38294) * C38291 +
            (C39965 + C39966) * C38292) *
               C89153 * C6963) *
              C89299 +
          (((C39964 + C39963) * C38291 + (C41855 + C41856) * C38292) * C89153 *
               C89336 -
           ((C38912 + C38913) * C38292 + (C38911 + C38910) * C38291) * C89153 *
               C89335 -
           (((C263 * C5845 - C699 * C5725 - C263 * C6063 + C89247 * C6170) *
                 C38294 +
             C1641 * C38293) *
                C38292 +
            (C39966 + C39965) * C38291) *
               C89153 * C6963) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eexx[6] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C38295 * C112 - C38296 * C106 - C38295 * C113 + C38291 * C124 +
             C38297 * C114 - C38298 * C107 - C38297 * C115 + C38292 * C125) *
                C89247 * C38293 +
            (C39062 + C39063) * C89247 * C38294) *
               C89308 -
           ((C42921 + C42922) * C89247 * C38294 +
            (C38297 * C1732 - C38298 * C1723 - C38297 * C1733 + C38292 * C1747 +
             C38295 * C1734 - C38296 * C1724 - C38295 * C1735 +
             C38291 * C1748) *
                C89247 * C38293) *
               C89217) *
              C89335 +
          (((C42922 + C42921) * C89247 * C38293 +
            (C48595 + C48596) * C89247 * C38294) *
               C89217 -
           ((C39064 + C39065) * C89247 * C38294 +
            (C39063 + C39062) * C89247 * C38293) *
               C89308) *
              C89336 +
          (((C39065 + C39064) * C89247 * C38293 +
            (C44983 + C44984) * C89247 * C38294) *
               C89308 -
           ((C38297 * C16687 - C38298 * C16684 - C38297 * C16688 +
             C38292 * C16690 + C38295 * C16685 - C38296 * C16683 -
             C38295 * C16686 + C38291 * C16689) *
                C89247 * C38294 +
            (C48596 + C48595) * C89247 * C38293) *
               C89217) *
              C6963) *
         C89118) /
        (p * q * std::sqrt(p + q));
    d2eexy[6] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                C38295 +
            (C38293 * C187 - C38365 * C113 + C38294 * C931 - C38366 * C830) *
                C38291 +
            (C38368 - C38369 + C38370 - C38371) * C38297 +
            (C38372 - C38373 + C38374 - C38375) * C38292) *
               C89247 * C89308 +
           ((C38365 * C1724 - C38293 * C1828 + C38366 * C4097 -
             C38294 * C4211) *
                C38295 +
            (C38365 * C1735 - C38293 * C1836 + C38366 * C4102 -
             C38294 * C4215) *
                C38291 +
            (C40163 - C40164 + C40165 - C40166) * C38297 +
            (C40167 - C40168 + C40169 - C40170) * C38292) *
               C89247 * C89217) *
              C89335 +
          (((C38365 * C819 - C38293 * C923 + C38366 * C820 - C38294 * C926) *
                C38295 +
            (C38365 * C830 - C38293 * C931 + C38366 * C832 - C38294 * C934) *
                C38291 +
            (C39168 - C39169 + C39170 - C39171) * C38297 +
            (C39172 - C39173 + C39174 - C39175) * C38292) *
               C89247 * C89308 +
           ((C38293 * C4211 - C38365 * C4097 + C38294 * C8600 -
             C38366 * C8516) *
                C38295 +
            (C38293 * C4215 - C38365 * C4102 + C38294 * C8603 -
             C38366 * C8522) *
                C38291 +
            (C43055 - C43056 + C43057 - C43058) * C38297 +
            (C43059 - C43060 + C43061 - C43062) * C38292) *
               C89247 * C89217) *
              C89336 +
          (((C38293 * C926 - C38365 * C820 + C38294 * C5787 - C38366 * C5727) *
                C38295 +
            (C38293 * C934 - C38365 * C832 + C38294 * C5790 - C38366 * C5733) *
                C38291 +
            (C39176 - C39177 + C39178 - C39179) * C38297 +
            (C39180 - C39181 + C39182 - C39183) * C38292) *
               C89247 * C89308 +
           ((C38365 * C8516 - C38293 * C8600 + C38366 * C16683 -
             C38294 * C16821) *
                C38295 +
            (C38365 * C8522 - C38293 * C8603 + C38366 * C16686 -
             C38294 * C16823) *
                C38291 +
            (C38365 * C8515 - C38293 * C8601 + C38366 * C16684 -
             C38294 * C16822) *
                C38297 +
            (C38365 * C8520 - C38293 * C8604 + C38366 * C16688 -
             C38294 * C16824) *
                C38292) *
               C89247 * C89217) *
              C6963) *
         C89118) /
        (p * q * std::sqrt(p + q));
    d2eexz[6] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C89247 * C264 - C263 * C106) * C38295 +
                      (C89247 * C270 - C263 * C113) * C38291 +
                      (C277 - C278) * C38297 + (C279 - C280) * C38292) *
                         C38293 +
                     ((C13956 - C13957) * C38295 + (C13958 - C13959) * C38291 +
                      C39282 * C38297 + C39283 * C38292) *
                         C38294) *
                        C89308 +
                    (((C263 * C1724 - C89247 * C1934) * C38295 +
                      (C263 * C1735 - C89247 * C1942) * C38291 +
                      (C1951 - C1952) * C38297 + (C1953 - C1954) * C38292) *
                         C38293 +
                     ((C16928 - C16929) * C38295 + (C16930 - C16931) * C38291 +
                      C43193 * C38297 + C43194 * C38292) *
                         C38294) *
                        C89217) *
                       C89335 +
                   ((((C13957 - C13956) * C38295 + (C13959 - C13958) * C38291 +
                      C39284 * C38297 + C39285 * C38292) *
                         C38293 +
                     ((C13961 - C13960) * C38295 + (C13963 - C13962) * C38291 +
                      C13968 * C38297 + C13969 * C38292) *
                         C38294) *
                        C89308 +
                    (((C16929 - C16928) * C38295 + (C16931 - C16930) * C38291 +
                      C43195 * C38297 + C43196 * C38292) *
                         C38293 +
                     ((C16933 - C16932) * C38295 + (C16935 - C16934) * C38291 +
                      (C16936 - C16937) * C38297 + (C16938 - C16939) * C38292) *
                         C38294) *
                        C89217) *
                       C89336 +
                   (((C13974 * C38295 + C13975 * C38291 + C39286 * C38297 +
                      C39287 * C38292) *
                         C38293 +
                     ((C13965 - C13964) * C38295 + (C13967 - C13966) * C38291 +
                      (C13970 - C13971) * C38297 + (C13972 - C13973) * C38292) *
                         C38294) *
                        C89308 +
                    ((C21288 * C38295 + C21289 * C38291 +
                      (C16937 - C16936) * C38297 + (C16939 - C16938) * C38292) *
                         C38293 +
                     ((C21291 - C21290) * C38295 + (C21293 - C21292) * C38291 +
                      (C263 * C16684 - C89247 * C16924) * C38297 +
                      (C263 * C16688 - C89247 * C16926) * C38292) *
                         C38294) *
                        C89217) *
                       C6963) *
                  C89118) /
                 (p * q * std::sqrt(p + q));
    d2eeyx[6] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                C38365 +
            (C38291 * C352 - C38295 * C346 + C38292 * C353 - C38297 * C347) *
                C38293 +
            (C39386 - C39387 + C39388 - C39389) * C38366 +
            (C39390 - C39391 + C39392 - C39393) * C38294) *
               C89247 * C89308 +
           ((C38295 * C1724 - C38291 * C1734 + C38297 * C1723 -
             C38292 * C1732) *
                C38365 +
            (C38295 * C2040 - C38291 * C2048 + C38297 * C2041 -
             C38292 * C2049) *
                C38293 +
            (C43327 - C43328 + C43329 - C43330) * C38366 +
            (C43331 - C43332 + C43333 - C43334) * C38294) *
               C89247 * C89217) *
              C89335 +
          (((C39387 - C39386 + C39389 - C39388) * C38365 +
            (C39391 - C39390 + C39393 - C39392) * C38293 +
            (C39394 - C39395 + C39396 - C39397) * C38366 +
            (C39398 - C39399 + C39400 - C39401) * C38294) *
               C89247 * C89308 +
           ((C43328 - C43327 + C43330 - C43329) * C38365 +
            (C43332 - C43331 + C43334 - C43333) * C38293 +
            (C48891 - C48892 + C48893 - C48894) * C38366 +
            (C48895 - C48896 + C48897 - C48898) * C38294) *
               C89247 * C89217) *
              C89336 +
          (((C39395 - C39394 + C39397 - C39396) * C38365 +
            (C39399 - C39398 + C39401 - C39400) * C38293 +
            (C45183 - C45184 + C45185 - C45186) * C38366 +
            (C45187 - C45188 + C45189 - C45190) * C38294) *
               C89247 * C89308 +
           ((C48892 - C48891 + C48894 - C48893) * C38365 +
            (C48896 - C48895 + C48898 - C48897) * C38293 +
            (C38295 * C16683 - C38291 * C16685 + C38297 * C16684 -
             C38292 * C16687) *
                C38366 +
            (C38295 * C17037 - C38291 * C17039 + C38297 * C17038 -
             C38292 * C17040) *
                C38294) *
               C89247 * C89217) *
              C6963) *
         C89118) /
        (p * q * std::sqrt(p + q));
    d2eeyy[6] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C38365 * C181 - C38589 * C106 - C38365 * C346 + C38293 * C409 +
             C38366 * C923 - C38590 * C819 - C38366 * C1135 + C38294 * C1227) *
                C38291 +
            (C38628 + C38629) * C38292) *
               C89247 * C89308 -
           ((C40501 + C40502) * C38292 +
            (C38366 * C4211 - C38590 * C4097 - C38366 * C4439 + C38294 * C4545 +
             C38365 * C1828 - C38589 * C1724 - C38365 * C2040 +
             C38293 * C2132) *
                C38291) *
               C89247 * C89217) *
              C89335 +
          (((C38365 * C4211 - C38589 * C4097 - C38365 * C4439 + C38293 * C4545 +
             C38366 * C8600 - C38590 * C8516 - C38366 * C8760 +
             C38294 * C8842) *
                C38291 +
            (C43485 + C43486) * C38292) *
               C89247 * C89217 -
           ((C39540 + C39541) * C38292 +
            (C38366 * C926 - C38590 * C820 - C38366 * C1138 + C38294 * C1228 +
             C38365 * C923 - C38589 * C819 - C38365 * C1135 + C38293 * C1227) *
                C38291) *
               C89247 * C89308) *
              C89336 +
          (((C38365 * C926 - C38589 * C820 - C38365 * C1138 + C38293 * C1228 +
             C38366 * C5787 - C38590 * C5727 - C38366 * C5899 +
             C38294 * C5957) *
                C38291 +
            (C39542 + C39543) * C38292) *
               C89247 * C89308 -
           ((C38366 * C16822 - C38590 * C16684 - C38366 * C17038 +
             C38294 * C17156 + C38365 * C8601 - C38589 * C8515 -
             C38365 * C8761 + C38293 * C8841) *
                C38292 +
            (C38366 * C16821 - C38590 * C16683 - C38366 * C17037 +
             C38294 * C17155 + C38365 * C8600 - C38589 * C8516 -
             C38365 * C8760 + C38293 * C8842) *
                C38291) *
               C89247 * C89217) *
              C6963) *
         C89118) /
        (p * q * std::sqrt(p + q));
    d2eeyz[6] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C89247 * C264 - C263 * C106) * C38365 +
                      (C89247 * C493 - C263 * C346) * C38293 +
                      (C13956 - C13957) * C38366 + (C14240 - C14241) * C38294) *
                         C38291 +
                     ((C277 - C278) * C38365 + (C500 - C501) * C38293 +
                      C39282 * C38366 + C39642 * C38294) *
                         C38292) *
                        C89308 +
                    (((C263 * C1724 - C89247 * C1934) * C38365 +
                      (C263 * C2040 - C89247 * C2240) * C38293 +
                      (C16928 - C16929) * C38366 + (C17258 - C17259) * C38294) *
                         C38291 +
                     ((C1951 - C1952) * C38365 + (C2249 - C2250) * C38293 +
                      C43193 * C38366 + C43617 * C38294) *
                         C38292) *
                        C89217) *
                       C89335 +
                   ((((C13957 - C13956) * C38365 + (C14241 - C14240) * C38293 +
                      (C13961 - C13960) * C38366 + (C14243 - C14242) * C38294) *
                         C38291 +
                     (C39284 * C38365 + C39643 * C38293 + C13968 * C38366 +
                      C14246 * C38294) *
                         C38292) *
                        C89308 +
                    (((C16929 - C16928) * C38365 + (C17259 - C17258) * C38293 +
                      (C16933 - C16932) * C38366 + (C17261 - C17260) * C38294) *
                         C38291 +
                     (C43195 * C38365 + C43618 * C38293 +
                      (C16936 - C16937) * C38366 + (C17262 - C17263) * C38294) *
                         C38292) *
                        C89217) *
                       C89336 +
                   (((C13974 * C38365 + C14249 * C38293 +
                      (C13965 - C13964) * C38366 + (C14245 - C14244) * C38294) *
                         C38291 +
                     (C39286 * C38365 + C39644 * C38293 +
                      (C13970 - C13971) * C38366 + (C14247 - C14248) * C38294) *
                         C38292) *
                        C89308 +
                    ((C21288 * C38365 + C21529 * C38293 +
                      (C21291 - C21290) * C38366 + (C21531 - C21530) * C38294) *
                         C38291 +
                     ((C16937 - C16936) * C38365 + (C17263 - C17262) * C38293 +
                      (C263 * C16684 - C89247 * C16924) * C38366 +
                      (C263 * C17038 - C89247 * C17256) * C38294) *
                         C38292) *
                        C89217) *
                       C6963) *
                  C89118) /
                 (p * q * std::sqrt(p + q));
    d2eezx[6] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                 C263 +
             (C38291 * C571 - C38295 * C565 + C38292 * C572 - C38297 * C566) *
                 C89247) *
                C38293 +
            ((C39386 - C39387 + C39388 - C39389) * C263 +
             (C39743 - C39744 + C39745 - C39746) * C89247) *
                C38294) *
               C89308 +
           (((C38295 * C1724 - C38291 * C1734 + C38297 * C1723 -
              C38292 * C1732) *
                 C263 +
             (C38295 * C2330 - C38291 * C2338 + C38297 * C2331 -
              C38292 * C2339) *
                 C89247) *
                C38293 +
            ((C43327 - C43328 + C43329 - C43330) * C263 +
             (C43749 - C43750 + C43751 - C43752) * C89247) *
                C38294) *
               C89217) *
              C89335 +
          ((((C39387 - C39386 + C39389 - C39388) * C263 +
             (C39744 - C39743 + C39746 - C39745) * C89247) *
                C38293 +
            ((C39394 - C39395 + C39396 - C39397) * C263 +
             (C39747 - C39748 + C39749 - C39750) * C89247) *
                C38294) *
               C89308 +
           (((C43328 - C43327 + C43330 - C43329) * C263 +
             (C43750 - C43749 + C43752 - C43751) * C89247) *
                C38293 +
            ((C48891 - C48892 + C48893 - C48894) * C263 +
             (C49193 - C49194 + C49195 - C49196) * C89247) *
                C38294) *
               C89217) *
              C89336 +
          ((((C39395 - C39394 + C39397 - C39396) * C263 +
             (C39748 - C39747 + C39750 - C39749) * C89247) *
                C38293 +
            ((C45183 - C45184 + C45185 - C45186) * C263 +
             (C45389 - C45390 + C45391 - C45392) * C89247) *
                C38294) *
               C89308 +
           (((C48892 - C48891 + C48894 - C48893) * C263 +
             (C49194 - C49193 + C49196 - C49195) * C89247) *
                C38293 +
            ((C38295 * C16683 - C38291 * C16685 + C38297 * C16684 -
              C38292 * C16687) *
                 C263 +
             (C38295 * C17361 - C38291 * C17363 + C38297 * C17362 -
              C38292 * C17364) *
                 C89247) *
                C38294) *
               C89217) *
              C6963) *
         C89118) /
        (p * q * std::sqrt(p + q));
    d2eezy[6] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                 C263 +
             (C38293 * C627 - C38365 * C565 + C38294 * C1515 - C38366 * C1425) *
                 C89247) *
                C38291 +
            ((C38368 - C38369 + C38370 - C38371) * C263 +
             (C38832 - C38833 + C38834 - C38835) * C89247) *
                C38292) *
               C89308 +
           (((C38365 * C1724 - C38293 * C1828 + C38366 * C4097 -
              C38294 * C4211) *
                 C263 +
             (C38365 * C2330 - C38293 * C2420 + C38366 * C4767 -
              C38294 * C4873) *
                 C89247) *
                C38291 +
            ((C40163 - C40164 + C40165 - C40166) * C263 +
             (C40801 - C40802 + C40803 - C40804) * C89247) *
                C38292) *
               C89217) *
              C89335 +
          ((((C38365 * C819 - C38293 * C923 + C38366 * C820 - C38294 * C926) *
                 C263 +
             (C38365 * C1425 - C38293 * C1515 + C38366 * C1428 -
              C38294 * C1518) *
                 C89247) *
                C38291 +
            ((C39168 - C39169 + C39170 - C39171) * C263 +
             (C39857 - C39858 + C39859 - C39860) * C89247) *
                C38292) *
               C89308 +
           (((C38293 * C4211 - C38365 * C4097 + C38294 * C8600 -
              C38366 * C8516) *
                 C263 +
             (C38293 * C4873 - C38365 * C4767 + C38294 * C9074 -
              C38366 * C8994) *
                 C89247) *
                C38291 +
            ((C43055 - C43056 + C43057 - C43058) * C263 +
             (C43887 - C43888 + C43889 - C43890) * C89247) *
                C38292) *
               C89217) *
              C89336 +
          ((((C38293 * C926 - C38365 * C820 + C38294 * C5787 - C38366 * C5727) *
                 C263 +
             (C38293 * C1518 - C38365 * C1428 + C38294 * C6117 -
              C38366 * C6061) *
                 C89247) *
                C38291 +
            ((C39176 - C39177 + C39178 - C39179) * C263 +
             (C39861 - C39862 + C39863 - C39864) * C89247) *
                C38292) *
               C89308 +
           (((C38365 * C8516 - C38293 * C8600 + C38366 * C16683 -
              C38294 * C16821) *
                 C263 +
             (C38365 * C8994 - C38293 * C9074 + C38366 * C17361 -
              C38294 * C17471) *
                 C89247) *
                C38291 +
            ((C38365 * C8515 - C38293 * C8601 + C38366 * C16684 -
              C38294 * C16822) *
                 C263 +
             (C38365 * C8995 - C38293 * C9075 + C38366 * C17362 -
              C38294 * C17472) *
                 C89247) *
                C38292) *
               C89217) *
              C6963) *
         C89118) /
        (p * q * std::sqrt(p + q));
    d2eezz[6] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) *
                 C38293 +
             C14524 * C38294) *
                C38291 +
            (C38910 + C38911) * C38292) *
               C89308 -
           ((C40907 + C40908) * C38292 +
            (C17593 * C38294 +
             (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
                 C38293) *
                C38291) *
               C89217) *
              C89335 +
          (((C17593 * C38293 + C17592 * C38294) * C38291 +
            (C44021 + C44022) * C38292) *
               C89217 -
           ((C39963 + C39964) * C38292 +
            (C14525 * C38294 + C14524 * C38293) * C38291) *
               C89308) *
              C89336 +
          (((C14525 * C38293 + C14526 * C38294) * C38291 +
            (C39965 + C39966) * C38292) *
               C89308 -
           (((C263 * C16924 - C699 * C16684 - C263 * C17362 + C89247 * C17572) *
                 C38294 +
             C17594 * C38293) *
                C38292 +
            (C21770 * C38294 + C17592 * C38293) * C38291) *
               C89217) *
              C6963) *
         C89118) /
        (p * q * std::sqrt(p + q));
    d2eexx[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C38295 * C112 - C38296 * C106 - C38295 * C113 + C38291 * C124 +
            C38297 * C114 - C38298 * C107 - C38297 * C115 + C38292 * C125) *
               C89247 * C38293 +
           (C39062 + C39063) * C89247 * C38294) *
              C89153 * C5720 -
          ((C39064 + C39065) * C89247 * C38294 +
           (C39063 + C39062) * C89247 * C38293) *
              C89153 * C5721 +
          ((C39065 + C39064) * C89247 * C38293 +
           (C44983 + C44984) * C89247 * C38294) *
              C89153 * C5722 -
          ((C38297 * C13747 - C38298 * C13744 - C38297 * C13748 +
            C38292 * C13750 + C38295 * C13745 - C38296 * C13743 -
            C38295 * C13746 + C38291 * C13749) *
               C89247 * C38294 +
           (C44984 + C44983) * C89247 * C38293) *
              C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C38295 * C112 - C38296 * C106 - C38295 * C113 + C38291 * C124 +
             C38297 * C114 - C38298 * C107 - C38297 * C115 + C38292 * C125) *
                C89247 * C38293 +
            (C39062 + C39063) * C89247 * C38294) *
               C89153 * C5073 -
           ((C39064 + C39065) * C89247 * C38294 +
            (C39063 + C39062) * C89247 * C38293) *
               C89153 * C89189) *
              C5075 +
          (((C39066 + C39067) * C89247 * C38293 +
            (C39068 + C39069) * C89247 * C38294) *
               C89153 * C89189 -
           ((C39067 + C39066) * C89247 * C38294 +
            (C38297 * C116 - C38298 * C108 - C38297 * C117 + C38292 * C126 +
             C38295 * C114 - C38296 * C107 - C38295 * C115 + C38291 * C125) *
                C89247 * C38293) *
               C89153 * C5073) *
              C5076 +
          (((C38295 * C116 - C38296 * C108 - C38295 * C117 + C38291 * C126 +
             C38297 * C118 - C38298 * C109 - C38297 * C119 + C38292 * C127) *
                C89247 * C38293 +
            (C41028 + C41029) * C89247 * C38294) *
               C89153 * C5073 -
           ((C38297 * C839 - C38298 * C824 - C38297 * C840 + C38292 * C848 +
             C38295 * C835 - C38296 * C822 - C38295 * C836 + C38291 * C846) *
                C89247 * C38294 +
            (C41029 + C41028) * C89247 * C38293) *
               C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C38295 * C112 - C38296 * C106 - C38295 * C113 + C38291 * C124 +
             C38297 * C114 - C38298 * C107 - C38297 * C115 + C38292 * C125) *
                C89247 * C38293 +
            (C39062 + C39063) * C89247 * C38294) *
               C1719 -
           ((C42921 + C42922) * C89247 * C38294 +
            (C38297 * C1732 - C38298 * C1723 - C38297 * C1733 + C38292 * C1747 +
             C38295 * C1734 - C38296 * C1724 - C38295 * C1735 +
             C38291 * C1748) *
                C89247 * C38293) *
               C1720 +
           ((C38295 * C1736 - C38296 * C1725 - C38295 * C1737 + C38291 * C1749 +
             C38297 * C1738 - C38298 * C1726 - C38297 * C1739 +
             C38292 * C1750) *
                C89247 * C38293 +
            (C45635 + C45636) * C89247 * C38294) *
               C1721) *
              C5073 +
          (((C42922 + C42921) * C89247 * C38293 +
            (C38295 * C8521 - C38296 * C8516 - C38295 * C8522 + C38291 * C8525 +
             C38297 * C8519 - C38298 * C8515 - C38297 * C8520 +
             C38292 * C8524) *
                C89247 * C38294) *
               C1720 -
           ((C39064 + C39065) * C89247 * C38294 +
            (C39063 + C39062) * C89247 * C38293) *
               C1719 -
           ((C38297 * C14605 - C38298 * C14602 - C38297 * C14606 +
             C38292 * C14608 + C38295 * C14603 - C38296 * C14601 -
             C38295 * C14604 + C38291 * C14607) *
                C89247 * C38294 +
            (C45636 + C45635) * C89247 * C38293) *
               C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eexy[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
               C38295 +
           (C38293 * C187 - C38365 * C113 + C38294 * C931 - C38366 * C830) *
               C38291 +
           (C38368 - C38369 + C38370 - C38371) * C38297 +
           (C38372 - C38373 + C38374 - C38375) * C38292) *
              C89247 * C89153 * C5720 +
          ((C38365 * C819 - C38293 * C923 + C38366 * C820 - C38294 * C926) *
               C38295 +
           (C38365 * C830 - C38293 * C931 + C38366 * C832 - C38294 * C934) *
               C38291 +
           (C39168 - C39169 + C39170 - C39171) * C38297 +
           (C39172 - C39173 + C39174 - C39175) * C38292) *
              C89247 * C89153 * C5721 +
          ((C38293 * C926 - C38365 * C820 + C38294 * C5787 - C38366 * C5727) *
               C38295 +
           (C38293 * C934 - C38365 * C832 + C38294 * C5790 - C38366 * C5733) *
               C38291 +
           (C39176 - C39177 + C39178 - C39179) * C38297 +
           (C39180 - C39181 + C39182 - C39183) * C38292) *
              C89247 * C89153 * C5722 +
          ((C38365 * C5727 - C38293 * C5787 + C38366 * C13743 -
            C38294 * C13873) *
               C38295 +
           (C38365 * C5733 - C38293 * C5790 + C38366 * C13746 -
            C38294 * C13875) *
               C38291 +
           (C38365 * C5726 - C38293 * C5788 + C38366 * C13744 -
            C38294 * C13874) *
               C38297 +
           (C38365 * C5731 - C38293 * C5791 + C38366 * C13748 -
            C38294 * C13876) *
               C38292) *
              C89247 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                C38295 +
            (C38293 * C187 - C38365 * C113 + C38294 * C931 - C38366 * C830) *
                C38291 +
            (C38368 - C38369 + C38370 - C38371) * C38297 +
            (C38372 - C38373 + C38374 - C38375) * C38292) *
               C89247 * C89153 * C5073 +
           ((C38365 * C819 - C38293 * C923 + C38366 * C820 - C38294 * C926) *
                C38295 +
            (C38365 * C830 - C38293 * C931 + C38366 * C832 - C38294 * C934) *
                C38291 +
            (C39168 - C39169 + C39170 - C39171) * C38297 +
            (C39172 - C39173 + C39174 - C39175) * C38292) *
               C89247 * C89153 * C89189) *
              C5075 +
          (((C38369 - C38368 + C38371 - C38370) * C38295 +
            (C38373 - C38372 + C38375 - C38374) * C38291 +
            (C38376 - C38377 + C38378 - C38379) * C38297 +
            (C38380 - C38381 + C38382 - C38383) * C38292) *
               C89247 * C89153 * C5073 +
           ((C39169 - C39168 + C39171 - C39170) * C38295 +
            (C39173 - C39172 + C39175 - C39174) * C38291 +
            (C41128 - C41129 + C41130 - C41131) * C38297 +
            (C41132 - C41133 + C41134 - C41135) * C38292) *
               C89247 * C89153 * C89189) *
              C5076 +
          (((C38377 - C38376 + C38379 - C38378) * C38295 +
            (C38381 - C38380 + C38383 - C38382) * C38291 +
            (C38384 - C38385 + C38386 - C38387) * C38297 +
            (C38388 - C38389 + C38390 - C38391) * C38292) *
               C89247 * C89153 * C5073 +
           ((C41129 - C41128 + C41131 - C41130) * C38295 +
            (C41133 - C41132 + C41135 - C41134) * C38291 +
            (C38365 * C823 - C38293 * C929 + C38366 * C824 - C38294 * C930) *
                C38297 +
            (C38365 * C838 - C38293 * C937 + C38366 * C840 - C38294 * C938) *
                C38292) *
               C89247 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                C38295 +
            (C38293 * C187 - C38365 * C113 + C38294 * C931 - C38366 * C830) *
                C38291 +
            (C38368 - C38369 + C38370 - C38371) * C38297 +
            (C38372 - C38373 + C38374 - C38375) * C38292) *
               C89247 * C1719 +
           ((C38365 * C1724 - C38293 * C1828 + C38366 * C4097 -
             C38294 * C4211) *
                C38295 +
            (C38365 * C1735 - C38293 * C1836 + C38366 * C4102 -
             C38294 * C4215) *
                C38291 +
            (C40163 - C40164 + C40165 - C40166) * C38297 +
            (C40167 - C40168 + C40169 - C40170) * C38292) *
               C89247 * C1720 +
           ((C38293 * C1831 - C38365 * C1725 + C38294 * C6333 -
             C38366 * C6249) *
                C38295 +
            (C38293 * C1839 - C38365 * C1737 + C38294 * C6336 -
             C38366 * C6255) *
                C38291 +
            (C40171 - C40172 + C40173 - C40174) * C38297 +
            (C40175 - C40176 + C40177 - C40178) * C38292) *
               C89247 * C1721) *
              C5073 +
          (((C38365 * C819 - C38293 * C923 + C38366 * C820 - C38294 * C926) *
                C38295 +
            (C38365 * C830 - C38293 * C931 + C38366 * C832 - C38294 * C934) *
                C38291 +
            (C39168 - C39169 + C39170 - C39171) * C38297 +
            (C39172 - C39173 + C39174 - C39175) * C38292) *
               C89247 * C1719 +
           ((C38293 * C4211 - C38365 * C4097 + C38294 * C8600 -
             C38366 * C8516) *
                C38295 +
            (C38293 * C4215 - C38365 * C4102 + C38294 * C8603 -
             C38366 * C8522) *
                C38291 +
            (C43055 - C43056 + C43057 - C43058) * C38297 +
            (C43059 - C43060 + C43061 - C43062) * C38292) *
               C89247 * C1720 +
           ((C38365 * C6249 - C38293 * C6333 + C38366 * C14601 -
             C38294 * C14683) *
                C38295 +
            (C38365 * C6255 - C38293 * C6336 + C38366 * C14604 -
             C38294 * C14685) *
                C38291 +
            (C38365 * C6248 - C38293 * C6334 + C38366 * C14602 -
             C38294 * C14684) *
                C38297 +
            (C38365 * C6253 - C38293 * C6337 + C38366 * C14606 -
             C38294 * C14686) *
                C38292) *
               C89247 * C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eexz[7] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C89247 * C264 - C263 * C106) * C38295 +
                     (C89247 * C270 - C263 * C113) * C38291 +
                     (C277 - C278) * C38297 + (C279 - C280) * C38292) *
                        C38293 +
                    ((C13956 - C13957) * C38295 + (C13958 - C13959) * C38291 +
                     C39282 * C38297 + C39283 * C38292) *
                        C38294) *
                       C89153 * C5720 +
                   (((C13957 - C13956) * C38295 + (C13959 - C13958) * C38291 +
                     C39284 * C38297 + C39285 * C38292) *
                        C38293 +
                    ((C13961 - C13960) * C38295 + (C13963 - C13962) * C38291 +
                     C13968 * C38297 + C13969 * C38292) *
                        C38294) *
                       C89153 * C5721 +
                   ((C13974 * C38295 + C13975 * C38291 + C39286 * C38297 +
                     C39287 * C38292) *
                        C38293 +
                    ((C13965 - C13964) * C38295 + (C13967 - C13966) * C38291 +
                     (C13970 - C13971) * C38297 + (C13972 - C13973) * C38292) *
                        C38294) *
                       C89153 * C5722 +
                   ((C18427 * C38295 + C18428 * C38291 +
                     (C13971 - C13970) * C38297 + (C13973 - C13972) * C38292) *
                        C38293 +
                    ((C18430 - C18429) * C38295 + (C18432 - C18431) * C38291 +
                     (C263 * C13744 - C89247 * C13952) * C38297 +
                     (C263 * C13748 - C89247 * C13954) * C38292) *
                        C38294) *
                       C89153 * C5723) *
                  C89118) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C89247 * C264 - C263 * C106) * C38295 +
                      (C89247 * C270 - C263 * C113) * C38291 +
                      (C277 - C278) * C38297 + (C279 - C280) * C38292) *
                         C38293 +
                     ((C13956 - C13957) * C38295 + (C13958 - C13959) * C38291 +
                      C39282 * C38297 + C39283 * C38292) *
                         C38294) *
                        C89153 * C5073 +
                    (((C13957 - C13956) * C38295 + (C13959 - C13958) * C38291 +
                      C39284 * C38297 + C39285 * C38292) *
                         C38293 +
                     ((C13961 - C13960) * C38295 + (C13963 - C13962) * C38291 +
                      C13968 * C38297 + C13969 * C38292) *
                         C38294) *
                        C89153 * C89189) *
                       C5075 +
                   ((((C278 - C277) * C38295 + (C280 - C279) * C38291 +
                      (C282 - C281) * C38297 + (C284 - C283) * C38292) *
                         C38293 +
                     (C39284 * C38295 + C39285 * C38291 + C2792 * C38297 +
                      C2793 * C38292) *
                         C38294) *
                        C89153 * C5073 +
                    ((C39282 * C38295 + C39283 * C38291 + C41234 * C38297 +
                      C41235 * C38292) *
                         C38293 +
                     (C39286 * C38295 + C39287 * C38291 +
                      (C1058 - C1059) * C38297 + (C1060 - C1061) * C38292) *
                         C38294) *
                        C89153 * C89189) *
                       C5076 +
                   (((C293 * C38295 + C294 * C38291 + (C286 - C285) * C38297 +
                      (C288 - C287) * C38292) *
                         C38293 +
                     (C41234 * C38295 + C41235 * C38291 +
                      (C2794 - C2795) * C38297 + (C2796 - C2797) * C38292) *
                         C38294) *
                        C89153 * C5073 +
                    ((C2792 * C38295 + C2793 * C38291 +
                      (C2795 - C2794) * C38297 + (C2797 - C2796) * C38292) *
                         C38293 +
                     ((C1059 - C1058) * C38295 + (C1061 - C1060) * C38291 +
                      (C263 * C824 - C89247 * C1036) * C38297 +
                      (C263 * C840 - C89247 * C1044) * C38292) *
                         C38294) *
                        C89153 * C89189) *
                       C5077)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C89247 * C264 - C263 * C106) * C38295 +
                      (C89247 * C270 - C263 * C113) * C38291 +
                      (C277 - C278) * C38297 + (C279 - C280) * C38292) *
                         C38293 +
                     ((C13956 - C13957) * C38295 + (C13958 - C13959) * C38291 +
                      C39282 * C38297 + C39283 * C38292) *
                         C38294) *
                        C1719 +
                    (((C263 * C1724 - C89247 * C1934) * C38295 +
                      (C263 * C1735 - C89247 * C1942) * C38291 +
                      (C1951 - C1952) * C38297 + (C1953 - C1954) * C38292) *
                         C38293 +
                     ((C16928 - C16929) * C38295 + (C16930 - C16931) * C38291 +
                      C43193 * C38297 + C43194 * C38292) *
                         C38294) *
                        C1720 +
                    (((C89247 * C1937 - C263 * C1725) * C38295 +
                      (C89247 * C1945 - C263 * C1737) * C38291 +
                      (C1959 - C1960) * C38297 + (C1961 - C1962) * C38292) *
                         C38293 +
                     ((C19012 - C19013) * C38295 + (C19014 - C19015) * C38291 +
                      (C40277 - C40278) * C38297 + (C40279 - C40280) * C38292) *
                         C38294) *
                        C1721) *
                       C5073 +
                   ((((C13957 - C13956) * C38295 + (C13959 - C13958) * C38291 +
                      C39284 * C38297 + C39285 * C38292) *
                         C38293 +
                     ((C13961 - C13960) * C38295 + (C13963 - C13962) * C38291 +
                      C13968 * C38297 + C13969 * C38292) *
                         C38294) *
                        C1719 +
                    (((C16929 - C16928) * C38295 + (C16931 - C16930) * C38291 +
                      C43195 * C38297 + C43196 * C38292) *
                         C38293 +
                     ((C16933 - C16932) * C38295 + (C16935 - C16934) * C38291 +
                      (C16936 - C16937) * C38297 + (C16938 - C16939) * C38292) *
                         C38294) *
                        C1720 +
                    (((C19013 - C19012) * C38295 + (C19015 - C19014) * C38291 +
                      (C40278 - C40277) * C38297 + (C40280 - C40279) * C38292) *
                         C38293 +
                     ((C19017 - C19016) * C38295 + (C19019 - C19018) * C38291 +
                      (C263 * C14602 - C89247 * C14762) * C38297 +
                      (C263 * C14606 - C89247 * C14764) * C38292) *
                         C38294) *
                        C1721) *
                       C89189) *
                  C89118) /
                     (p * q * std::sqrt(p + q));
    d2eeyx[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
               C38365 +
           (C38291 * C352 - C38295 * C346 + C38292 * C353 - C38297 * C347) *
               C38293 +
           (C39386 - C39387 + C39388 - C39389) * C38366 +
           (C39390 - C39391 + C39392 - C39393) * C38294) *
              C89247 * C89153 * C5720 +
          ((C39387 - C39386 + C39389 - C39388) * C38365 +
           (C39391 - C39390 + C39393 - C39392) * C38293 +
           (C39394 - C39395 + C39396 - C39397) * C38366 +
           (C39398 - C39399 + C39400 - C39401) * C38294) *
              C89247 * C89153 * C5721 +
          ((C39395 - C39394 + C39397 - C39396) * C38365 +
           (C39399 - C39398 + C39401 - C39400) * C38293 +
           (C45183 - C45184 + C45185 - C45186) * C38366 +
           (C45187 - C45188 + C45189 - C45190) * C38294) *
              C89247 * C89153 * C5722 +
          ((C45184 - C45183 + C45186 - C45185) * C38365 +
           (C45188 - C45187 + C45190 - C45189) * C38293 +
           (C38295 * C13743 - C38291 * C13745 + C38297 * C13744 -
            C38292 * C13747) *
               C38366 +
           (C38295 * C14055 - C38291 * C14057 + C38297 * C14056 -
            C38292 * C14058) *
               C38294) *
              C89247 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                C38365 +
            (C38291 * C352 - C38295 * C346 + C38292 * C353 - C38297 * C347) *
                C38293 +
            (C39386 - C39387 + C39388 - C39389) * C38366 +
            (C39390 - C39391 + C39392 - C39393) * C38294) *
               C89247 * C89153 * C5073 +
           ((C39387 - C39386 + C39389 - C39388) * C38365 +
            (C39391 - C39390 + C39393 - C39392) * C38293 +
            (C39394 - C39395 + C39396 - C39397) * C38366 +
            (C39398 - C39399 + C39400 - C39401) * C38294) *
               C89247 * C89153 * C89189) *
              C5075 +
          (((C38295 * C107 - C38291 * C114 + C38297 * C108 - C38292 * C116) *
                C38365 +
            (C38295 * C347 - C38291 * C353 + C38297 * C348 - C38292 * C354) *
                C38293 +
            (C39402 - C39403 + C39404 - C39405) * C38366 +
            (C39406 - C39407 + C39408 - C39409) * C38294) *
               C89247 * C89153 * C5073 +
           ((C39403 - C39402 + C39405 - C39404) * C38365 +
            (C39407 - C39406 + C39409 - C39408) * C38293 +
            (C39410 - C39411 + C39412 - C39413) * C38366 +
            (C39414 - C39415 + C39416 - C39417) * C38294) *
               C89247 * C89153 * C89189) *
              C5076 +
          (((C38291 * C116 - C38295 * C108 + C38292 * C118 - C38297 * C109) *
                C38365 +
            (C38291 * C354 - C38295 * C348 + C38292 * C355 - C38297 * C349) *
                C38293 +
            (C41334 - C41335 + C41336 - C41337) * C38366 +
            (C41338 - C41339 + C41340 - C41341) * C38294) *
               C89247 * C89153 * C5073 +
           ((C41335 - C41334 + C41337 - C41336) * C38365 +
            (C41339 - C41338 + C41341 - C41340) * C38293 +
            (C38295 * C822 - C38291 * C835 + C38297 * C824 - C38292 * C839) *
                C38366 +
            (C38295 * C1140 - C38291 * C1148 + C38297 * C1142 -
             C38292 * C1150) *
                C38294) *
               C89247 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                C38365 +
            (C38291 * C352 - C38295 * C346 + C38292 * C353 - C38297 * C347) *
                C38293 +
            (C39386 - C39387 + C39388 - C39389) * C38366 +
            (C39390 - C39391 + C39392 - C39393) * C38294) *
               C89247 * C1719 +
           ((C38295 * C1724 - C38291 * C1734 + C38297 * C1723 -
             C38292 * C1732) *
                C38365 +
            (C38295 * C2040 - C38291 * C2048 + C38297 * C2041 -
             C38292 * C2049) *
                C38293 +
            (C43327 - C43328 + C43329 - C43330) * C38366 +
            (C43331 - C43332 + C43333 - C43334) * C38294) *
               C89247 * C1720 +
           ((C38291 * C1736 - C38295 * C1725 + C38292 * C1738 -
             C38297 * C1726) *
                C38365 +
            (C38291 * C2051 - C38295 * C2043 + C38292 * C2052 -
             C38297 * C2044) *
                C38293 +
            (C45931 - C45932 + C45933 - C45934) * C38366 +
            (C45935 - C45936 + C45937 - C45938) * C38294) *
               C89247 * C1721) *
              C5073 +
          (((C39387 - C39386 + C39389 - C39388) * C38365 +
            (C39391 - C39390 + C39393 - C39392) * C38293 +
            (C39394 - C39395 + C39396 - C39397) * C38366 +
            (C39398 - C39399 + C39400 - C39401) * C38294) *
               C89247 * C1719 +
           ((C43328 - C43327 + C43330 - C43329) * C38365 +
            (C43332 - C43331 + C43334 - C43333) * C38293 +
            (C38291 * C8521 - C38295 * C8516 + C38292 * C8519 -
             C38297 * C8515) *
                C38366 +
            (C38291 * C8763 - C38295 * C8760 + C38292 * C8764 -
             C38297 * C8761) *
                C38294) *
               C89247 * C1720 +
           ((C45932 - C45931 + C45934 - C45933) * C38365 +
            (C45936 - C45935 + C45938 - C45937) * C38293 +
            (C38295 * C14601 - C38291 * C14603 + C38297 * C14602 -
             C38292 * C14605) *
                C38366 +
            (C38295 * C14839 - C38291 * C14841 + C38297 * C14840 -
             C38292 * C14842) *
                C38294) *
               C89247 * C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eeyy[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C38365 * C181 - C38589 * C106 - C38365 * C346 + C38293 * C409 +
            C38366 * C923 - C38590 * C819 - C38366 * C1135 + C38294 * C1227) *
               C38291 +
           (C38628 + C38629) * C38292) *
              C89247 * C89153 * C5720 -
          ((C39540 + C39541) * C38292 +
           (C38366 * C926 - C38590 * C820 - C38366 * C1138 + C38294 * C1228 +
            C38365 * C923 - C38589 * C819 - C38365 * C1135 + C38293 * C1227) *
               C38291) *
              C89247 * C89153 * C5721 +
          ((C38365 * C926 - C38589 * C820 - C38365 * C1138 + C38293 * C1228 +
            C38366 * C5787 - C38590 * C5727 - C38366 * C5899 + C38294 * C5957) *
               C38291 +
           (C39542 + C39543) * C38292) *
              C89247 * C89153 * C5722 -
          ((C38366 * C13874 - C38590 * C13744 - C38366 * C14056 +
            C38294 * C14162 + C38365 * C5788 - C38589 * C5726 - C38365 * C5900 +
            C38293 * C5956) *
               C38292 +
           (C38366 * C13873 - C38590 * C13743 - C38366 * C14055 +
            C38294 * C14161 + C38365 * C5787 - C38589 * C5727 - C38365 * C5899 +
            C38293 * C5957) *
               C38291) *
              C89247 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C38365 * C181 - C38589 * C106 - C38365 * C346 + C38293 * C409 +
             C38366 * C923 - C38590 * C819 - C38366 * C1135 + C38294 * C1227) *
                C38291 +
            (C38628 + C38629) * C38292) *
               C89247 * C89153 * C5073 -
           ((C39540 + C39541) * C38292 +
            (C38366 * C926 - C38590 * C820 - C38366 * C1138 + C38294 * C1228 +
             C38365 * C923 - C38589 * C819 - C38365 * C1135 + C38293 * C1227) *
                C38291) *
               C89247 * C89153 * C89189) *
              C5075 +
          (((C39541 + C39540) * C38291 + (C41452 + C41453) * C38292) * C89247 *
               C89153 * C89189 -
           ((C38630 + C38631) * C38292 + (C38629 + C38628) * C38291) * C89247 *
               C89153 * C5073) *
              C5076 +
          (((C38631 + C38630) * C38291 + (C38632 + C38633) * C38292) * C89247 *
               C89153 * C5073 -
           ((C38366 * C930 - C38590 * C824 - C38366 * C1142 + C38294 * C1232 +
             C38365 * C929 - C38589 * C823 - C38365 * C1141 + C38293 * C1231) *
                C38292 +
            (C41453 + C41452) * C38291) *
               C89247 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C38365 * C181 - C38589 * C106 - C38365 * C346 + C38293 * C409 +
             C38366 * C923 - C38590 * C819 - C38366 * C1135 + C38294 * C1227) *
                C38291 +
            (C38628 + C38629) * C38292) *
               C89247 * C1719 -
           ((C40501 + C40502) * C38292 +
            (C38366 * C4211 - C38590 * C4097 - C38366 * C4439 + C38294 * C4545 +
             C38365 * C1828 - C38589 * C1724 - C38365 * C2040 +
             C38293 * C2132) *
                C38291) *
               C89247 * C1720 +
           ((C38365 * C1831 - C38589 * C1725 - C38365 * C2043 + C38293 * C2133 +
             C38366 * C6333 - C38590 * C6249 - C38366 * C6493 +
             C38294 * C6575) *
                C38291 +
            (C40503 + C40504) * C38292) *
               C89247 * C1721) *
              C5073 +
          (((C38365 * C4211 - C38589 * C4097 - C38365 * C4439 + C38293 * C4545 +
             C38366 * C8600 - C38590 * C8516 - C38366 * C8760 +
             C38294 * C8842) *
                C38291 +
            (C43485 + C43486) * C38292) *
               C89247 * C1720 -
           ((C39540 + C39541) * C38292 +
            (C38366 * C926 - C38590 * C820 - C38366 * C1138 + C38294 * C1228 +
             C38365 * C923 - C38589 * C819 - C38365 * C1135 + C38293 * C1227) *
                C38291) *
               C89247 * C1719 -
           ((C38366 * C14684 - C38590 * C14602 - C38366 * C14840 +
             C38294 * C14918 + C38365 * C6334 - C38589 * C6248 -
             C38365 * C6494 + C38293 * C6574) *
                C38292 +
            (C38366 * C14683 - C38590 * C14601 - C38366 * C14839 +
             C38294 * C14917 + C38365 * C6333 - C38589 * C6249 -
             C38365 * C6493 + C38293 * C6575) *
                C38291) *
               C89247 * C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eeyz[7] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C89247 * C264 - C263 * C106) * C38365 +
                     (C89247 * C493 - C263 * C346) * C38293 +
                     (C13956 - C13957) * C38366 + (C14240 - C14241) * C38294) *
                        C38291 +
                    ((C277 - C278) * C38365 + (C500 - C501) * C38293 +
                     C39282 * C38366 + C39642 * C38294) *
                        C38292) *
                       C89153 * C5720 +
                   (((C13957 - C13956) * C38365 + (C14241 - C14240) * C38293 +
                     (C13961 - C13960) * C38366 + (C14243 - C14242) * C38294) *
                        C38291 +
                    (C39284 * C38365 + C39643 * C38293 + C13968 * C38366 +
                     C14246 * C38294) *
                        C38292) *
                       C89153 * C5721 +
                   ((C13974 * C38365 + C14249 * C38293 +
                     (C13965 - C13964) * C38366 + (C14245 - C14244) * C38294) *
                        C38291 +
                    (C39286 * C38365 + C39644 * C38293 +
                     (C13970 - C13971) * C38366 + (C14247 - C14248) * C38294) *
                        C38292) *
                       C89153 * C5722 +
                   ((C18427 * C38365 + C18596 * C38293 +
                     (C18430 - C18429) * C38366 + (C18598 - C18597) * C38294) *
                        C38291 +
                    ((C13971 - C13970) * C38365 + (C14248 - C14247) * C38293 +
                     (C263 * C13744 - C89247 * C13952) * C38366 +
                     (C263 * C14056 - C89247 * C14238) * C38294) *
                        C38292) *
                       C89153 * C5723) *
                  C89118) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C89247 * C264 - C263 * C106) * C38365 +
                      (C89247 * C493 - C263 * C346) * C38293 +
                      (C13956 - C13957) * C38366 + (C14240 - C14241) * C38294) *
                         C38291 +
                     ((C277 - C278) * C38365 + (C500 - C501) * C38293 +
                      C39282 * C38366 + C39642 * C38294) *
                         C38292) *
                        C89153 * C5073 +
                    (((C13957 - C13956) * C38365 + (C14241 - C14240) * C38293 +
                      (C13961 - C13960) * C38366 + (C14243 - C14242) * C38294) *
                         C38291 +
                     (C39284 * C38365 + C39643 * C38293 + C13968 * C38366 +
                      C14246 * C38294) *
                         C38292) *
                        C89153 * C89189) *
                       C5075 +
                   ((((C278 - C277) * C38365 + (C501 - C500) * C38293 +
                      C39284 * C38366 + C39643 * C38294) *
                         C38291 +
                     ((C282 - C281) * C38365 + (C504 - C503) * C38293 +
                      C2792 * C38366 + C3032 * C38294) *
                         C38292) *
                        C89153 * C5073 +
                    ((C39282 * C38365 + C39642 * C38293 + C39286 * C38366 +
                      C39644 * C38294) *
                         C38291 +
                     (C41234 * C38365 + C41552 * C38293 +
                      (C1058 - C1059) * C38366 + (C1350 - C1351) * C38294) *
                         C38292) *
                        C89153 * C89189) *
                       C5076 +
                   (((C293 * C38365 + C510 * C38293 + C41234 * C38366 +
                      C41552 * C38294) *
                         C38291 +
                     ((C286 - C285) * C38365 + (C507 - C506) * C38293 +
                      (C2794 - C2795) * C38366 + (C3033 - C3034) * C38294) *
                         C38292) *
                        C89153 * C5073 +
                    ((C2792 * C38365 + C3032 * C38293 +
                      (C1059 - C1058) * C38366 + (C1351 - C1350) * C38294) *
                         C38291 +
                     ((C2795 - C2794) * C38365 + (C3034 - C3033) * C38293 +
                      (C263 * C824 - C89247 * C1036) * C38366 +
                      (C263 * C1142 - C89247 * C1342) * C38294) *
                         C38292) *
                        C89153 * C89189) *
                       C5077)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C89247 * C264 - C263 * C106) * C38365 +
                      (C89247 * C493 - C263 * C346) * C38293 +
                      (C13956 - C13957) * C38366 + (C14240 - C14241) * C38294) *
                         C38291 +
                     ((C277 - C278) * C38365 + (C500 - C501) * C38293 +
                      C39282 * C38366 + C39642 * C38294) *
                         C38292) *
                        C1719 +
                    (((C263 * C1724 - C89247 * C1934) * C38365 +
                      (C263 * C2040 - C89247 * C2240) * C38293 +
                      (C16928 - C16929) * C38366 + (C17258 - C17259) * C38294) *
                         C38291 +
                     ((C1951 - C1952) * C38365 + (C2249 - C2250) * C38293 +
                      C43193 * C38366 + C43617 * C38294) *
                         C38292) *
                        C1720 +
                    (((C89247 * C1937 - C263 * C1725) * C38365 +
                      (C89247 * C2243 - C263 * C2043) * C38293 +
                      (C19012 - C19013) * C38366 + (C19254 - C19255) * C38294) *
                         C38291 +
                     ((C1959 - C1960) * C38365 + (C2253 - C2254) * C38293 +
                      (C40277 - C40278) * C38366 + (C40603 - C40604) * C38294) *
                         C38292) *
                        C1721) *
                       C5073 +
                   ((((C13957 - C13956) * C38365 + (C14241 - C14240) * C38293 +
                      (C13961 - C13960) * C38366 + (C14243 - C14242) * C38294) *
                         C38291 +
                     (C39284 * C38365 + C39643 * C38293 + C13968 * C38366 +
                      C14246 * C38294) *
                         C38292) *
                        C1719 +
                    (((C16929 - C16928) * C38365 + (C17259 - C17258) * C38293 +
                      (C16933 - C16932) * C38366 + (C17261 - C17260) * C38294) *
                         C38291 +
                     (C43195 * C38365 + C43618 * C38293 +
                      (C16936 - C16937) * C38366 + (C17262 - C17263) * C38294) *
                         C38292) *
                        C1720 +
                    (((C19013 - C19012) * C38365 + (C19255 - C19254) * C38293 +
                      (C19017 - C19016) * C38366 + (C19257 - C19256) * C38294) *
                         C38291 +
                     ((C40278 - C40277) * C38365 + (C40604 - C40603) * C38293 +
                      (C263 * C14602 - C89247 * C14762) * C38366 +
                      (C263 * C14840 - C89247 * C14994) * C38294) *
                         C38292) *
                        C1721) *
                       C89189) *
                  C89118) /
                     (p * q * std::sqrt(p + q));
    d2eezx[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                C263 +
            (C38291 * C571 - C38295 * C565 + C38292 * C572 - C38297 * C566) *
                C89247) *
               C38293 +
           ((C39386 - C39387 + C39388 - C39389) * C263 +
            (C39743 - C39744 + C39745 - C39746) * C89247) *
               C38294) *
              C89153 * C5720 +
          (((C39387 - C39386 + C39389 - C39388) * C263 +
            (C39744 - C39743 + C39746 - C39745) * C89247) *
               C38293 +
           ((C39394 - C39395 + C39396 - C39397) * C263 +
            (C39747 - C39748 + C39749 - C39750) * C89247) *
               C38294) *
              C89153 * C5721 +
          (((C39395 - C39394 + C39397 - C39396) * C263 +
            (C39748 - C39747 + C39750 - C39749) * C89247) *
               C38293 +
           ((C45183 - C45184 + C45185 - C45186) * C263 +
            (C45389 - C45390 + C45391 - C45392) * C89247) *
               C38294) *
              C89153 * C5722 +
          (((C45184 - C45183 + C45186 - C45185) * C263 +
            (C45390 - C45389 + C45392 - C45391) * C89247) *
               C38293 +
           ((C38295 * C13743 - C38291 * C13745 + C38297 * C13744 -
             C38292 * C13747) *
                C263 +
            (C38295 * C14323 - C38291 * C14325 + C38297 * C14324 -
             C38292 * C14326) *
                C89247) *
               C38294) *
              C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                 C263 +
             (C38291 * C571 - C38295 * C565 + C38292 * C572 - C38297 * C566) *
                 C89247) *
                C38293 +
            ((C39386 - C39387 + C39388 - C39389) * C263 +
             (C39743 - C39744 + C39745 - C39746) * C89247) *
                C38294) *
               C89153 * C5073 +
           (((C39387 - C39386 + C39389 - C39388) * C263 +
             (C39744 - C39743 + C39746 - C39745) * C89247) *
                C38293 +
            ((C39394 - C39395 + C39396 - C39397) * C263 +
             (C39747 - C39748 + C39749 - C39750) * C89247) *
                C38294) *
               C89153 * C89189) *
              C5075 +
          ((((C38295 * C107 - C38291 * C114 + C38297 * C108 - C38292 * C116) *
                 C263 +
             (C38295 * C566 - C38291 * C572 + C38297 * C567 - C38292 * C573) *
                 C89247) *
                C38293 +
            ((C39402 - C39403 + C39404 - C39405) * C263 +
             (C39751 - C39752 + C39753 - C39754) * C89247) *
                C38294) *
               C89153 * C5073 +
           (((C39403 - C39402 + C39405 - C39404) * C263 +
             (C39752 - C39751 + C39754 - C39753) * C89247) *
                C38293 +
            ((C39410 - C39411 + C39412 - C39413) * C263 +
             (C39755 - C39756 + C39757 - C39758) * C89247) *
                C38294) *
               C89153 * C89189) *
              C5076 +
          ((((C38291 * C116 - C38295 * C108 + C38292 * C118 - C38297 * C109) *
                 C263 +
             (C38291 * C573 - C38295 * C567 + C38292 * C574 - C38297 * C568) *
                 C89247) *
                C38293 +
            ((C41334 - C41335 + C41336 - C41337) * C263 +
             (C41651 - C41652 + C41653 - C41654) * C89247) *
                C38294) *
               C89153 * C5073 +
           (((C41335 - C41334 + C41337 - C41336) * C263 +
             (C41652 - C41651 + C41654 - C41653) * C89247) *
                C38293 +
            ((C38295 * C822 - C38291 * C835 + C38297 * C824 - C38292 * C839) *
                 C263 +
             (C38295 * C1430 - C38291 * C1438 + C38297 * C1432 -
              C38292 * C1440) *
                 C89247) *
                C38294) *
               C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                 C263 +
             (C38291 * C571 - C38295 * C565 + C38292 * C572 - C38297 * C566) *
                 C89247) *
                C38293 +
            ((C39386 - C39387 + C39388 - C39389) * C263 +
             (C39743 - C39744 + C39745 - C39746) * C89247) *
                C38294) *
               C1719 +
           (((C38295 * C1724 - C38291 * C1734 + C38297 * C1723 -
              C38292 * C1732) *
                 C263 +
             (C38295 * C2330 - C38291 * C2338 + C38297 * C2331 -
              C38292 * C2339) *
                 C89247) *
                C38293 +
            ((C43327 - C43328 + C43329 - C43330) * C263 +
             (C43749 - C43750 + C43751 - C43752) * C89247) *
                C38294) *
               C1720 +
           (((C38291 * C1736 - C38295 * C1725 + C38292 * C1738 -
              C38297 * C1726) *
                 C263 +
             (C38291 * C2341 - C38295 * C2333 + C38292 * C2342 -
              C38297 * C2334) *
                 C89247) *
                C38293 +
            ((C45931 - C45932 + C45933 - C45934) * C263 +
             (C46233 - C46234 + C46235 - C46236) * C89247) *
                C38294) *
               C1721) *
              C5073 +
          ((((C39387 - C39386 + C39389 - C39388) * C263 +
             (C39744 - C39743 + C39746 - C39745) * C89247) *
                C38293 +
            ((C39394 - C39395 + C39396 - C39397) * C263 +
             (C39747 - C39748 + C39749 - C39750) * C89247) *
                C38294) *
               C1719 +
           (((C43328 - C43327 + C43330 - C43329) * C263 +
             (C43750 - C43749 + C43752 - C43751) * C89247) *
                C38293 +
            ((C38291 * C8521 - C38295 * C8516 + C38292 * C8519 -
              C38297 * C8515) *
                 C263 +
             (C38291 * C8997 - C38295 * C8994 + C38292 * C8998 -
              C38297 * C8995) *
                 C89247) *
                C38294) *
               C1720 +
           (((C45932 - C45931 + C45934 - C45933) * C263 +
             (C46234 - C46233 + C46236 - C46235) * C89247) *
                C38293 +
            ((C38295 * C14601 - C38291 * C14603 + C38297 * C14602 -
              C38292 * C14605) *
                 C263 +
             (C38295 * C15069 - C38291 * C15071 + C38297 * C15070 -
              C38292 * C15072) *
                 C89247) *
                C38294) *
               C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eezy[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                C263 +
            (C38293 * C627 - C38365 * C565 + C38294 * C1515 - C38366 * C1425) *
                C89247) *
               C38291 +
           ((C38368 - C38369 + C38370 - C38371) * C263 +
            (C38832 - C38833 + C38834 - C38835) * C89247) *
               C38292) *
              C89153 * C5720 +
          (((C38365 * C819 - C38293 * C923 + C38366 * C820 - C38294 * C926) *
                C263 +
            (C38365 * C1425 - C38293 * C1515 + C38366 * C1428 -
             C38294 * C1518) *
                C89247) *
               C38291 +
           ((C39168 - C39169 + C39170 - C39171) * C263 +
            (C39857 - C39858 + C39859 - C39860) * C89247) *
               C38292) *
              C89153 * C5721 +
          (((C38293 * C926 - C38365 * C820 + C38294 * C5787 - C38366 * C5727) *
                C263 +
            (C38293 * C1518 - C38365 * C1428 + C38294 * C6117 -
             C38366 * C6061) *
                C89247) *
               C38291 +
           ((C39176 - C39177 + C39178 - C39179) * C263 +
            (C39861 - C39862 + C39863 - C39864) * C89247) *
               C38292) *
              C89153 * C5722 +
          (((C38365 * C5727 - C38293 * C5787 + C38366 * C13743 -
             C38294 * C13873) *
                C263 +
            (C38365 * C6061 - C38293 * C6117 + C38366 * C14323 -
             C38294 * C14421) *
                C89247) *
               C38291 +
           ((C38365 * C5726 - C38293 * C5788 + C38366 * C13744 -
             C38294 * C13874) *
                C263 +
            (C38365 * C6062 - C38293 * C6118 + C38366 * C14324 -
             C38294 * C14422) *
                C89247) *
               C38292) *
              C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                 C263 +
             (C38293 * C627 - C38365 * C565 + C38294 * C1515 - C38366 * C1425) *
                 C89247) *
                C38291 +
            ((C38368 - C38369 + C38370 - C38371) * C263 +
             (C38832 - C38833 + C38834 - C38835) * C89247) *
                C38292) *
               C89153 * C5073 +
           (((C38365 * C819 - C38293 * C923 + C38366 * C820 - C38294 * C926) *
                 C263 +
             (C38365 * C1425 - C38293 * C1515 + C38366 * C1428 -
              C38294 * C1518) *
                 C89247) *
                C38291 +
            ((C39168 - C39169 + C39170 - C39171) * C263 +
             (C39857 - C39858 + C39859 - C39860) * C89247) *
                C38292) *
               C89153 * C89189) *
              C5075 +
          ((((C38369 - C38368 + C38371 - C38370) * C263 +
             (C38833 - C38832 + C38835 - C38834) * C89247) *
                C38291 +
            ((C38376 - C38377 + C38378 - C38379) * C263 +
             (C38836 - C38837 + C38838 - C38839) * C89247) *
                C38292) *
               C89153 * C5073 +
           (((C39169 - C39168 + C39171 - C39170) * C263 +
             (C39858 - C39857 + C39860 - C39859) * C89247) *
                C38291 +
            ((C41128 - C41129 + C41130 - C41131) * C263 +
             (C41753 - C41754 + C41755 - C41756) * C89247) *
                C38292) *
               C89153 * C89189) *
              C5076 +
          ((((C38377 - C38376 + C38379 - C38378) * C263 +
             (C38837 - C38836 + C38839 - C38838) * C89247) *
                C38291 +
            ((C38384 - C38385 + C38386 - C38387) * C263 +
             (C38840 - C38841 + C38842 - C38843) * C89247) *
                C38292) *
               C89153 * C5073 +
           (((C41129 - C41128 + C41131 - C41130) * C263 +
             (C41754 - C41753 + C41756 - C41755) * C89247) *
                C38291 +
            ((C38365 * C823 - C38293 * C929 + C38366 * C824 - C38294 * C930) *
                 C263 +
             (C38365 * C1431 - C38293 * C1521 + C38366 * C1432 -
              C38294 * C1522) *
                 C89247) *
                C38292) *
               C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                 C263 +
             (C38293 * C627 - C38365 * C565 + C38294 * C1515 - C38366 * C1425) *
                 C89247) *
                C38291 +
            ((C38368 - C38369 + C38370 - C38371) * C263 +
             (C38832 - C38833 + C38834 - C38835) * C89247) *
                C38292) *
               C1719 +
           (((C38365 * C1724 - C38293 * C1828 + C38366 * C4097 -
              C38294 * C4211) *
                 C263 +
             (C38365 * C2330 - C38293 * C2420 + C38366 * C4767 -
              C38294 * C4873) *
                 C89247) *
                C38291 +
            ((C40163 - C40164 + C40165 - C40166) * C263 +
             (C40801 - C40802 + C40803 - C40804) * C89247) *
                C38292) *
               C1720 +
           (((C38293 * C1831 - C38365 * C1725 + C38294 * C6333 -
              C38366 * C6249) *
                 C263 +
             (C38293 * C2423 - C38365 * C2333 + C38294 * C6807 -
              C38366 * C6727) *
                 C89247) *
                C38291 +
            ((C40171 - C40172 + C40173 - C40174) * C263 +
             (C40805 - C40806 + C40807 - C40808) * C89247) *
                C38292) *
               C1721) *
              C5073 +
          ((((C38365 * C819 - C38293 * C923 + C38366 * C820 - C38294 * C926) *
                 C263 +
             (C38365 * C1425 - C38293 * C1515 + C38366 * C1428 -
              C38294 * C1518) *
                 C89247) *
                C38291 +
            ((C39168 - C39169 + C39170 - C39171) * C263 +
             (C39857 - C39858 + C39859 - C39860) * C89247) *
                C38292) *
               C1719 +
           (((C38293 * C4211 - C38365 * C4097 + C38294 * C8600 -
              C38366 * C8516) *
                 C263 +
             (C38293 * C4873 - C38365 * C4767 + C38294 * C9074 -
              C38366 * C8994) *
                 C89247) *
                C38291 +
            ((C43055 - C43056 + C43057 - C43058) * C263 +
             (C43887 - C43888 + C43889 - C43890) * C89247) *
                C38292) *
               C1720 +
           (((C38365 * C6249 - C38293 * C6333 + C38366 * C14601 -
              C38294 * C14683) *
                 C263 +
             (C38365 * C6727 - C38293 * C6807 + C38366 * C15069 -
              C38294 * C15147) *
                 C89247) *
                C38291 +
            ((C38365 * C6248 - C38293 * C6334 + C38366 * C14602 -
              C38294 * C14684) *
                 C263 +
             (C38365 * C6728 - C38293 * C6808 + C38366 * C15070 -
              C38294 * C15148) *
                 C89247) *
                C38292) *
               C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eezz[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C38293 +
            C14524 * C38294) *
               C38291 +
           (C38910 + C38911) * C38292) *
              C89153 * C5720 -
          ((C39963 + C39964) * C38292 +
           (C14525 * C38294 + C14524 * C38293) * C38291) *
              C89153 * C5721 +
          ((C14525 * C38293 + C14526 * C38294) * C38291 +
           (C39965 + C39966) * C38292) *
              C89153 * C5722 -
          (((C263 * C13952 - C699 * C13744 - C263 * C14324 + C89247 * C14498) *
                C38294 +
            C14527 * C38293) *
               C38292 +
           (C18765 * C38294 + C14526 * C38293) * C38291) *
              C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) *
                 C38293 +
             C14524 * C38294) *
                C38291 +
            (C38910 + C38911) * C38292) *
               C89153 * C5073 -
           ((C39963 + C39964) * C38292 +
            (C14525 * C38294 + C14524 * C38293) * C38291) *
               C89153 * C89189) *
              C5075 +
          (((C39964 + C39963) * C38291 + (C41855 + C41856) * C38292) * C89153 *
               C89189 -
           ((C38912 + C38913) * C38292 + (C38911 + C38910) * C38291) * C89153 *
               C5073) *
              C5076 +
          (((C38913 + C38912) * C38291 + (C38914 + C38915) * C38292) * C89153 *
               C5073 -
           (((C263 * C1036 - C699 * C824 - C263 * C1432 + C89247 * C1612) *
                 C38294 +
             C3275 * C38293) *
                C38292 +
            (C41856 + C41855) * C38291) *
               C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) *
                 C38293 +
             C14524 * C38294) *
                C38291 +
            (C38910 + C38911) * C38292) *
               C1719 -
           ((C40907 + C40908) * C38292 +
            (C17593 * C38294 +
             (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
                 C38293) *
                C38291) *
               C1720 +
           (((C263 * C1937 - C699 * C1725 - C263 * C2333 + C89247 * C2513) *
                 C38293 +
             C19500 * C38294) *
                C38291 +
            (C40909 + C40917) * C38292) *
               C1721) *
              C5073 +
          (((C17593 * C38293 + C17592 * C38294) * C38291 +
            (C44021 + C44022) * C38292) *
               C1720 -
           ((C39963 + C39964) * C38292 +
            (C14525 * C38294 + C14524 * C38293) * C38291) *
               C1719 -
           (((C263 * C14762 - C699 * C14602 - C263 * C15070 + C89247 * C15224) *
                 C38294 +
             C40916 * C38293) *
                C38292 +
            (C19501 * C38294 + C19500 * C38293) * C38291) *
               C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eexx[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C38295 * C112 - C38296 * C106 - C38295 * C113 + C38291 * C124 +
              C38297 * C114 - C38298 * C107 - C38297 * C115 + C38292 * C125) *
                 C89247 * C38293 +
             (C39062 + C39063) * C89247 * C38294) *
                C89308 -
            ((C42921 + C42922) * C89247 * C38294 +
             (C38297 * C1732 - C38298 * C1723 - C38297 * C1733 +
              C38292 * C1747 + C38295 * C1734 - C38296 * C1724 -
              C38295 * C1735 + C38291 * C1748) *
                 C89247 * C38293) *
                C89217) *
               C5073 +
           (((C42922 + C42921) * C89247 * C38293 +
             (C38295 * C8521 - C38296 * C8516 - C38295 * C8522 +
              C38291 * C8525 + C38297 * C8519 - C38298 * C8515 -
              C38297 * C8520 + C38292 * C8524) *
                 C89247 * C38294) *
                C89217 -
            ((C39064 + C39065) * C89247 * C38294 +
             (C39063 + C39062) * C89247 * C38293) *
                C89308) *
               C89189) *
              C89299 +
          ((((C38295 * C1732 - C38296 * C1723 - C38295 * C1733 +
              C38291 * C1747 + C38297 * C1730 - C38298 * C1722 -
              C38297 * C1731 + C38292 * C1746) *
                 C89247 * C38293 +
             (C42923 + C42924) * C89247 * C38294) *
                C89217 -
            ((C39067 + C39066) * C89247 * C38294 +
             (C38297 * C116 - C38298 * C108 - C38297 * C117 + C38292 * C126 +
              C38295 * C114 - C38296 * C107 - C38295 * C115 + C38291 * C125) *
                 C89247 * C38293) *
                C89308) *
               C5073 +
           (((C39066 + C39067) * C89247 * C38293 +
             (C39068 + C39069) * C89247 * C38294) *
                C89308 -
            ((C38297 * C8517 - C38298 * C8514 - C38297 * C8518 +
              C38292 * C8523 + C38295 * C8519 - C38296 * C8515 -
              C38295 * C8520 + C38291 * C8524) *
                 C89247 * C38294 +
             (C42924 + C42923) * C89247 * C38293) *
                C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eexy[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                 C38295 +
             (C38293 * C187 - C38365 * C113 + C38294 * C931 - C38366 * C830) *
                 C38291 +
             (C38368 - C38369 + C38370 - C38371) * C38297 +
             (C38372 - C38373 + C38374 - C38375) * C38292) *
                C89247 * C89308 +
            ((C38365 * C1724 - C38293 * C1828 + C38366 * C4097 -
              C38294 * C4211) *
                 C38295 +
             (C38365 * C1735 - C38293 * C1836 + C38366 * C4102 -
              C38294 * C4215) *
                 C38291 +
             (C40163 - C40164 + C40165 - C40166) * C38297 +
             (C40167 - C40168 + C40169 - C40170) * C38292) *
                C89247 * C89217) *
               C5073 +
           (((C38365 * C819 - C38293 * C923 + C38366 * C820 - C38294 * C926) *
                 C38295 +
             (C38365 * C830 - C38293 * C931 + C38366 * C832 - C38294 * C934) *
                 C38291 +
             (C39168 - C39169 + C39170 - C39171) * C38297 +
             (C39172 - C39173 + C39174 - C39175) * C38292) *
                C89247 * C89308 +
            ((C38293 * C4211 - C38365 * C4097 + C38294 * C8600 -
              C38366 * C8516) *
                 C38295 +
             (C38293 * C4215 - C38365 * C4102 + C38294 * C8603 -
              C38366 * C8522) *
                 C38291 +
             (C43055 - C43056 + C43057 - C43058) * C38297 +
             (C43059 - C43060 + C43061 - C43062) * C38292) *
                C89247 * C89217) *
               C89189) *
              C89299 +
          ((((C38369 - C38368 + C38371 - C38370) * C38295 +
             (C38373 - C38372 + C38375 - C38374) * C38291 +
             (C38376 - C38377 + C38378 - C38379) * C38297 +
             (C38380 - C38381 + C38382 - C38383) * C38292) *
                C89247 * C89308 +
            ((C40164 - C40163 + C40166 - C40165) * C38295 +
             (C40168 - C40167 + C40170 - C40169) * C38291 +
             (C42053 - C42054 + C42055 - C42056) * C38297 +
             (C42057 - C42058 + C42059 - C42060) * C38292) *
                C89247 * C89217) *
               C5073 +
           (((C39169 - C39168 + C39171 - C39170) * C38295 +
             (C39173 - C39172 + C39175 - C39174) * C38291 +
             (C41128 - C41129 + C41130 - C41131) * C38297 +
             (C41132 - C41133 + C41134 - C41135) * C38292) *
                C89247 * C89308 +
            ((C43056 - C43055 + C43058 - C43057) * C38295 +
             (C43060 - C43059 + C43062 - C43061) * C38291 +
             (C38365 * C4099 - C38293 * C4213 + C38366 * C8514 -
              C38294 * C8602) *
                 C38297 +
             (C38365 * C4106 - C38293 * C4217 + C38366 * C8518 -
              C38294 * C8605) *
                 C38292) *
                C89247 * C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eexz[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C89247 * C264 - C263 * C106) * C38295 +
              (C89247 * C270 - C263 * C113) * C38291 + (C277 - C278) * C38297 +
              (C279 - C280) * C38292) *
                 C38293 +
             ((C13956 - C13957) * C38295 + (C13958 - C13959) * C38291 +
              C39282 * C38297 + C39283 * C38292) *
                 C38294) *
                C89308 +
            (((C263 * C1724 - C89247 * C1934) * C38295 +
              (C263 * C1735 - C89247 * C1942) * C38291 +
              (C1951 - C1952) * C38297 + (C1953 - C1954) * C38292) *
                 C38293 +
             ((C16928 - C16929) * C38295 + (C16930 - C16931) * C38291 +
              C43193 * C38297 + C43194 * C38292) *
                 C38294) *
                C89217) *
               C5073 +
           ((((C13957 - C13956) * C38295 + (C13959 - C13958) * C38291 +
              C39284 * C38297 + C39285 * C38292) *
                 C38293 +
             ((C13961 - C13960) * C38295 + (C13963 - C13962) * C38291 +
              C13968 * C38297 + C13969 * C38292) *
                 C38294) *
                C89308 +
            (((C16929 - C16928) * C38295 + (C16931 - C16930) * C38291 +
              C43195 * C38297 + C43196 * C38292) *
                 C38293 +
             ((C16933 - C16932) * C38295 + (C16935 - C16934) * C38291 +
              (C16936 - C16937) * C38297 + (C16938 - C16939) * C38292) *
                 C38294) *
                C89217) *
               C89189) *
              C89299 +
          (((((C278 - C277) * C38295 + (C280 - C279) * C38291 +
              (C282 - C281) * C38297 + (C284 - C283) * C38292) *
                 C38293 +
             (C39284 * C38295 + C39285 * C38291 + C2792 * C38297 +
              C2793 * C38292) *
                 C38294) *
                C89308 +
            (((C1952 - C1951) * C38295 + (C1954 - C1953) * C38291 +
              (C1956 - C1955) * C38297 + (C1958 - C1957) * C38292) *
                 C38293 +
             (C43195 * C38295 + C43196 * C38291 + (C4338 - C4339) * C38297 +
              (C4340 - C4341) * C38292) *
                 C38294) *
                C89217) *
               C5073 +
           (((C39282 * C38295 + C39283 * C38291 + C41234 * C38297 +
              C41235 * C38292) *
                 C38293 +
             (C39286 * C38295 + C39287 * C38291 + (C1058 - C1059) * C38297 +
              (C1060 - C1061) * C38292) *
                 C38294) *
                C89308 +
            ((C43193 * C38295 + C43194 * C38291 + (C4339 - C4338) * C38297 +
              (C4341 - C4340) * C38292) *
                 C38293 +
             ((C16937 - C16936) * C38295 + (C16939 - C16938) * C38291 +
              (C263 * C8514 - C89247 * C8682) * C38297 +
              (C263 * C8518 - C89247 * C8685) * C38292) *
                 C38294) *
                C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                 C38365 +
             (C38291 * C352 - C38295 * C346 + C38292 * C353 - C38297 * C347) *
                 C38293 +
             (C39386 - C39387 + C39388 - C39389) * C38366 +
             (C39390 - C39391 + C39392 - C39393) * C38294) *
                C89247 * C89308 +
            ((C38295 * C1724 - C38291 * C1734 + C38297 * C1723 -
              C38292 * C1732) *
                 C38365 +
             (C38295 * C2040 - C38291 * C2048 + C38297 * C2041 -
              C38292 * C2049) *
                 C38293 +
             (C43327 - C43328 + C43329 - C43330) * C38366 +
             (C43331 - C43332 + C43333 - C43334) * C38294) *
                C89247 * C89217) *
               C5073 +
           (((C39387 - C39386 + C39389 - C39388) * C38365 +
             (C39391 - C39390 + C39393 - C39392) * C38293 +
             (C39394 - C39395 + C39396 - C39397) * C38366 +
             (C39398 - C39399 + C39400 - C39401) * C38294) *
                C89247 * C89308 +
            ((C43328 - C43327 + C43330 - C43329) * C38365 +
             (C43332 - C43331 + C43334 - C43333) * C38293 +
             (C38291 * C8521 - C38295 * C8516 + C38292 * C8519 -
              C38297 * C8515) *
                 C38366 +
             (C38291 * C8763 - C38295 * C8760 + C38292 * C8764 -
              C38297 * C8761) *
                 C38294) *
                C89247 * C89217) *
               C89189) *
              C89299 +
          ((((C38295 * C107 - C38291 * C114 + C38297 * C108 - C38292 * C116) *
                 C38365 +
             (C38295 * C347 - C38291 * C353 + C38297 * C348 - C38292 * C354) *
                 C38293 +
             (C39402 - C39403 + C39404 - C39405) * C38366 +
             (C39406 - C39407 + C39408 - C39409) * C38294) *
                C89247 * C89308 +
            ((C38291 * C1732 - C38295 * C1723 + C38292 * C1730 -
              C38297 * C1722) *
                 C38365 +
             (C38291 * C2049 - C38295 * C2041 + C38292 * C2050 -
              C38297 * C2042) *
                 C38293 +
             (C43335 - C43336 + C43337 - C43338) * C38366 +
             (C43339 - C43340 + C43341 - C43342) * C38294) *
                C89247 * C89217) *
               C5073 +
           (((C39403 - C39402 + C39405 - C39404) * C38365 +
             (C39407 - C39406 + C39409 - C39408) * C38293 +
             (C39410 - C39411 + C39412 - C39413) * C38366 +
             (C39414 - C39415 + C39416 - C39417) * C38294) *
                C89247 * C89308 +
            ((C43336 - C43335 + C43338 - C43337) * C38365 +
             (C43340 - C43339 + C43342 - C43341) * C38293 +
             (C38295 * C8515 - C38291 * C8519 + C38297 * C8514 -
              C38292 * C8517) *
                 C38366 +
             (C38295 * C8761 - C38291 * C8764 + C38297 * C8762 -
              C38292 * C8765) *
                 C38294) *
                C89247 * C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C38365 * C181 - C38589 * C106 - C38365 * C346 + C38293 * C409 +
              C38366 * C923 - C38590 * C819 - C38366 * C1135 + C38294 * C1227) *
                 C38291 +
             (C38628 + C38629) * C38292) *
                C89247 * C89308 -
            ((C40501 + C40502) * C38292 +
             (C38366 * C4211 - C38590 * C4097 - C38366 * C4439 +
              C38294 * C4545 + C38365 * C1828 - C38589 * C1724 -
              C38365 * C2040 + C38293 * C2132) *
                 C38291) *
                C89247 * C89217) *
               C5073 +
           (((C38365 * C4211 - C38589 * C4097 - C38365 * C4439 +
              C38293 * C4545 + C38366 * C8600 - C38590 * C8516 -
              C38366 * C8760 + C38294 * C8842) *
                 C38291 +
             (C43485 + C43486) * C38292) *
                C89247 * C89217 -
            ((C39540 + C39541) * C38292 +
             (C38366 * C926 - C38590 * C820 - C38366 * C1138 + C38294 * C1228 +
              C38365 * C923 - C38589 * C819 - C38365 * C1135 + C38293 * C1227) *
                 C38291) *
                C89247 * C89308) *
               C89189) *
              C89299 +
          ((((C40502 + C40501) * C38291 + (C42367 + C42368) * C38292) * C89247 *
                C89217 -
            ((C38630 + C38631) * C38292 + (C38629 + C38628) * C38291) * C89247 *
                C89308) *
               C5073 +
           (((C39541 + C39540) * C38291 + (C41452 + C41453) * C38292) * C89247 *
                C89308 -
            ((C38366 * C8602 - C38590 * C8514 - C38366 * C8762 +
              C38294 * C8840 + C38365 * C4213 - C38589 * C4099 -
              C38365 * C4441 + C38293 * C4547) *
                 C38292 +
             (C43486 + C43485) * C38291) *
                C89247 * C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C89247 * C264 - C263 * C106) * C38365 +
              (C89247 * C493 - C263 * C346) * C38293 +
              (C13956 - C13957) * C38366 + (C14240 - C14241) * C38294) *
                 C38291 +
             ((C277 - C278) * C38365 + (C500 - C501) * C38293 +
              C39282 * C38366 + C39642 * C38294) *
                 C38292) *
                C89308 +
            (((C263 * C1724 - C89247 * C1934) * C38365 +
              (C263 * C2040 - C89247 * C2240) * C38293 +
              (C16928 - C16929) * C38366 + (C17258 - C17259) * C38294) *
                 C38291 +
             ((C1951 - C1952) * C38365 + (C2249 - C2250) * C38293 +
              C43193 * C38366 + C43617 * C38294) *
                 C38292) *
                C89217) *
               C5073 +
           ((((C13957 - C13956) * C38365 + (C14241 - C14240) * C38293 +
              (C13961 - C13960) * C38366 + (C14243 - C14242) * C38294) *
                 C38291 +
             (C39284 * C38365 + C39643 * C38293 + C13968 * C38366 +
              C14246 * C38294) *
                 C38292) *
                C89308 +
            (((C16929 - C16928) * C38365 + (C17259 - C17258) * C38293 +
              (C16933 - C16932) * C38366 + (C17261 - C17260) * C38294) *
                 C38291 +
             (C43195 * C38365 + C43618 * C38293 + (C16936 - C16937) * C38366 +
              (C17262 - C17263) * C38294) *
                 C38292) *
                C89217) *
               C89189) *
              C89299 +
          (((((C278 - C277) * C38365 + (C501 - C500) * C38293 +
              C39284 * C38366 + C39643 * C38294) *
                 C38291 +
             ((C282 - C281) * C38365 + (C504 - C503) * C38293 + C2792 * C38366 +
              C3032 * C38294) *
                 C38292) *
                C89308 +
            (((C1952 - C1951) * C38365 + (C2250 - C2249) * C38293 +
              C43195 * C38366 + C43618 * C38294) *
                 C38291 +
             ((C1956 - C1955) * C38365 + (C2252 - C2251) * C38293 +
              (C4338 - C4339) * C38366 + (C4668 - C4669) * C38294) *
                 C38292) *
                C89217) *
               C5073 +
           (((C39282 * C38365 + C39642 * C38293 + C39286 * C38366 +
              C39644 * C38294) *
                 C38291 +
             (C41234 * C38365 + C41552 * C38293 + (C1058 - C1059) * C38366 +
              (C1350 - C1351) * C38294) *
                 C38292) *
                C89308 +
            ((C43193 * C38365 + C43617 * C38293 + (C16937 - C16936) * C38366 +
              (C17263 - C17262) * C38294) *
                 C38291 +
             ((C4339 - C4338) * C38365 + (C4669 - C4668) * C38293 +
              (C263 * C8514 - C89247 * C8682) * C38366 +
              (C263 * C8762 - C89247 * C8919) * C38294) *
                 C38292) *
                C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eezx[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                  C263 +
              (C38291 * C571 - C38295 * C565 + C38292 * C572 - C38297 * C566) *
                  C89247) *
                 C38293 +
             ((C39386 - C39387 + C39388 - C39389) * C263 +
              (C39743 - C39744 + C39745 - C39746) * C89247) *
                 C38294) *
                C89308 +
            (((C38295 * C1724 - C38291 * C1734 + C38297 * C1723 -
               C38292 * C1732) *
                  C263 +
              (C38295 * C2330 - C38291 * C2338 + C38297 * C2331 -
               C38292 * C2339) *
                  C89247) *
                 C38293 +
             ((C43327 - C43328 + C43329 - C43330) * C263 +
              (C43749 - C43750 + C43751 - C43752) * C89247) *
                 C38294) *
                C89217) *
               C5073 +
           ((((C39387 - C39386 + C39389 - C39388) * C263 +
              (C39744 - C39743 + C39746 - C39745) * C89247) *
                 C38293 +
             ((C39394 - C39395 + C39396 - C39397) * C263 +
              (C39747 - C39748 + C39749 - C39750) * C89247) *
                 C38294) *
                C89308 +
            (((C43328 - C43327 + C43330 - C43329) * C263 +
              (C43750 - C43749 + C43752 - C43751) * C89247) *
                 C38293 +
             ((C38291 * C8521 - C38295 * C8516 + C38292 * C8519 -
               C38297 * C8515) *
                  C263 +
              (C38291 * C8997 - C38295 * C8994 + C38292 * C8998 -
               C38297 * C8995) *
                  C89247) *
                 C38294) *
                C89217) *
               C89189) *
              C89299 +
          (((((C38295 * C107 - C38291 * C114 + C38297 * C108 - C38292 * C116) *
                  C263 +
              (C38295 * C566 - C38291 * C572 + C38297 * C567 - C38292 * C573) *
                  C89247) *
                 C38293 +
             ((C39402 - C39403 + C39404 - C39405) * C263 +
              (C39751 - C39752 + C39753 - C39754) * C89247) *
                 C38294) *
                C89308 +
            (((C38291 * C1732 - C38295 * C1723 + C38292 * C1730 -
               C38297 * C1722) *
                  C263 +
              (C38291 * C2339 - C38295 * C2331 + C38292 * C2340 -
               C38297 * C2332) *
                  C89247) *
                 C38293 +
             ((C43335 - C43336 + C43337 - C43338) * C263 +
              (C43753 - C43754 + C43755 - C43756) * C89247) *
                 C38294) *
                C89217) *
               C5073 +
           ((((C39403 - C39402 + C39405 - C39404) * C263 +
              (C39752 - C39751 + C39754 - C39753) * C89247) *
                 C38293 +
             ((C39410 - C39411 + C39412 - C39413) * C263 +
              (C39755 - C39756 + C39757 - C39758) * C89247) *
                 C38294) *
                C89308 +
            (((C43336 - C43335 + C43338 - C43337) * C263 +
              (C43754 - C43753 + C43756 - C43755) * C89247) *
                 C38293 +
             ((C38295 * C8515 - C38291 * C8519 + C38297 * C8514 -
               C38292 * C8517) *
                  C263 +
              (C38295 * C8995 - C38291 * C8998 + C38297 * C8996 -
               C38292 * C8999) *
                  C89247) *
                 C38294) *
                C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eezy[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                  C263 +
              (C38293 * C627 - C38365 * C565 + C38294 * C1515 -
               C38366 * C1425) *
                  C89247) *
                 C38291 +
             ((C38368 - C38369 + C38370 - C38371) * C263 +
              (C38832 - C38833 + C38834 - C38835) * C89247) *
                 C38292) *
                C89308 +
            (((C38365 * C1724 - C38293 * C1828 + C38366 * C4097 -
               C38294 * C4211) *
                  C263 +
              (C38365 * C2330 - C38293 * C2420 + C38366 * C4767 -
               C38294 * C4873) *
                  C89247) *
                 C38291 +
             ((C40163 - C40164 + C40165 - C40166) * C263 +
              (C40801 - C40802 + C40803 - C40804) * C89247) *
                 C38292) *
                C89217) *
               C5073 +
           ((((C38365 * C819 - C38293 * C923 + C38366 * C820 - C38294 * C926) *
                  C263 +
              (C38365 * C1425 - C38293 * C1515 + C38366 * C1428 -
               C38294 * C1518) *
                  C89247) *
                 C38291 +
             ((C39168 - C39169 + C39170 - C39171) * C263 +
              (C39857 - C39858 + C39859 - C39860) * C89247) *
                 C38292) *
                C89308 +
            (((C38293 * C4211 - C38365 * C4097 + C38294 * C8600 -
               C38366 * C8516) *
                  C263 +
              (C38293 * C4873 - C38365 * C4767 + C38294 * C9074 -
               C38366 * C8994) *
                  C89247) *
                 C38291 +
             ((C43055 - C43056 + C43057 - C43058) * C263 +
              (C43887 - C43888 + C43889 - C43890) * C89247) *
                 C38292) *
                C89217) *
               C89189) *
              C89299 +
          (((((C38369 - C38368 + C38371 - C38370) * C263 +
              (C38833 - C38832 + C38835 - C38834) * C89247) *
                 C38291 +
             ((C38376 - C38377 + C38378 - C38379) * C263 +
              (C38836 - C38837 + C38838 - C38839) * C89247) *
                 C38292) *
                C89308 +
            (((C40164 - C40163 + C40166 - C40165) * C263 +
              (C40802 - C40801 + C40804 - C40803) * C89247) *
                 C38291 +
             ((C42053 - C42054 + C42055 - C42056) * C263 +
              (C42663 - C42664 + C42665 - C42666) * C89247) *
                 C38292) *
                C89217) *
               C5073 +
           ((((C39169 - C39168 + C39171 - C39170) * C263 +
              (C39858 - C39857 + C39860 - C39859) * C89247) *
                 C38291 +
             ((C41128 - C41129 + C41130 - C41131) * C263 +
              (C41753 - C41754 + C41755 - C41756) * C89247) *
                 C38292) *
                C89308 +
            (((C43056 - C43055 + C43058 - C43057) * C263 +
              (C43888 - C43887 + C43890 - C43889) * C89247) *
                 C38291 +
             ((C38365 * C4099 - C38293 * C4213 + C38366 * C8514 -
               C38294 * C8602) *
                  C263 +
              (C38365 * C4769 - C38293 * C4875 + C38366 * C8996 -
               C38294 * C9076) *
                  C89247) *
                 C38292) *
                C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eezz[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) *
                  C38293 +
              C14524 * C38294) *
                 C38291 +
             (C38910 + C38911) * C38292) *
                C89308 -
            ((C40907 + C40908) * C38292 +
             (C17593 * C38294 +
              (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
                  C38293) *
                 C38291) *
                C89217) *
               C5073 +
           (((C17593 * C38293 + C17592 * C38294) * C38291 +
             (C44021 + C44022) * C38292) *
                C89217 -
            ((C39963 + C39964) * C38292 +
             (C14525 * C38294 + C14524 * C38293) * C38291) *
                C89308) *
               C89189) *
              C89299 +
          ((((C40908 + C40907) * C38291 + (C42765 + C42766) * C38292) * C89217 -
            ((C38912 + C38913) * C38292 + (C38911 + C38910) * C38291) *
                C89308) *
               C5073 +
           (((C39964 + C39963) * C38291 + (C41855 + C41856) * C38292) * C89308 -
            (((C263 * C8682 - C699 * C8514 - C263 * C8996 + C89247 * C9151) *
                  C38294 +
              C4997 * C38293) *
                 C38292 +
             (C44022 + C44021) * C38291) *
                C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eexx[9] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C38295 * C112 - C38296 * C106 - C38295 * C113 + C38291 * C124 +
             C38297 * C114 - C38298 * C107 - C38297 * C115 + C38292 * C125) *
                C89247 * C38293 +
            (C39062 + C39063) * C89247 * C38294) *
               C89153 * C5073 -
           ((C39064 + C39065) * C89247 * C38294 +
            (C39063 + C39062) * C89247 * C38293) *
               C89153 * C89189) *
              C5075 +
          (((C39066 + C39067) * C89247 * C38293 +
            (C39068 + C39069) * C89247 * C38294) *
               C89153 * C89189 -
           ((C39067 + C39066) * C89247 * C38294 +
            (C38297 * C116 - C38298 * C108 - C38297 * C117 + C38292 * C126 +
             C38295 * C114 - C38296 * C107 - C38295 * C115 + C38291 * C125) *
                C89247 * C38293) *
               C89153 * C5073) *
              C5076 +
          (((C38295 * C116 - C38296 * C108 - C38295 * C117 + C38291 * C126 +
             C38297 * C118 - C38298 * C109 - C38297 * C119 + C38292 * C127) *
                C89247 * C38293 +
            (C41028 + C41029) * C89247 * C38294) *
               C89153 * C5073 -
           ((C38297 * C839 - C38298 * C824 - C38297 * C840 + C38292 * C848 +
             C38295 * C835 - C38296 * C822 - C38295 * C836 + C38291 * C846) *
                C89247 * C38294 +
            (C41029 + C41028) * C89247 * C38293) *
               C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C38295 * C112 - C38296 * C106 - C38295 * C113 + C38291 * C124 +
            C38297 * C114 - C38298 * C107 - C38297 * C115 + C38292 * C125) *
               C89247 * C38293 +
           (C39062 + C39063) * C89247 * C38294) *
              C89153 * C5720 -
          ((C39064 + C39065) * C89247 * C38294 +
           (C39063 + C39062) * C89247 * C38293) *
              C89153 * C5721 +
          ((C39065 + C39064) * C89247 * C38293 +
           (C44983 + C44984) * C89247 * C38294) *
              C89153 * C5722 -
          ((C38297 * C13747 - C38298 * C13744 - C38297 * C13748 +
            C38292 * C13750 + C38295 * C13745 - C38296 * C13743 -
            C38295 * C13746 + C38291 * C13749) *
               C89247 * C38294 +
           (C44984 + C44983) * C89247 * C38293) *
              C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eexy[9] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                C38295 +
            (C38293 * C187 - C38365 * C113 + C38294 * C931 - C38366 * C830) *
                C38291 +
            (C38368 - C38369 + C38370 - C38371) * C38297 +
            (C38372 - C38373 + C38374 - C38375) * C38292) *
               C89247 * C89153 * C5073 +
           ((C38365 * C819 - C38293 * C923 + C38366 * C820 - C38294 * C926) *
                C38295 +
            (C38365 * C830 - C38293 * C931 + C38366 * C832 - C38294 * C934) *
                C38291 +
            (C39168 - C39169 + C39170 - C39171) * C38297 +
            (C39172 - C39173 + C39174 - C39175) * C38292) *
               C89247 * C89153 * C89189) *
              C5075 +
          (((C38369 - C38368 + C38371 - C38370) * C38295 +
            (C38373 - C38372 + C38375 - C38374) * C38291 +
            (C38376 - C38377 + C38378 - C38379) * C38297 +
            (C38380 - C38381 + C38382 - C38383) * C38292) *
               C89247 * C89153 * C5073 +
           ((C39169 - C39168 + C39171 - C39170) * C38295 +
            (C39173 - C39172 + C39175 - C39174) * C38291 +
            (C41128 - C41129 + C41130 - C41131) * C38297 +
            (C41132 - C41133 + C41134 - C41135) * C38292) *
               C89247 * C89153 * C89189) *
              C5076 +
          (((C38377 - C38376 + C38379 - C38378) * C38295 +
            (C38381 - C38380 + C38383 - C38382) * C38291 +
            (C38384 - C38385 + C38386 - C38387) * C38297 +
            (C38388 - C38389 + C38390 - C38391) * C38292) *
               C89247 * C89153 * C5073 +
           ((C41129 - C41128 + C41131 - C41130) * C38295 +
            (C41133 - C41132 + C41135 - C41134) * C38291 +
            (C38365 * C823 - C38293 * C929 + C38366 * C824 - C38294 * C930) *
                C38297 +
            (C38365 * C838 - C38293 * C937 + C38366 * C840 - C38294 * C938) *
                C38292) *
               C89247 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
               C38295 +
           (C38293 * C187 - C38365 * C113 + C38294 * C931 - C38366 * C830) *
               C38291 +
           (C38368 - C38369 + C38370 - C38371) * C38297 +
           (C38372 - C38373 + C38374 - C38375) * C38292) *
              C89247 * C89153 * C5720 +
          ((C38365 * C819 - C38293 * C923 + C38366 * C820 - C38294 * C926) *
               C38295 +
           (C38365 * C830 - C38293 * C931 + C38366 * C832 - C38294 * C934) *
               C38291 +
           (C39168 - C39169 + C39170 - C39171) * C38297 +
           (C39172 - C39173 + C39174 - C39175) * C38292) *
              C89247 * C89153 * C5721 +
          ((C38293 * C926 - C38365 * C820 + C38294 * C5787 - C38366 * C5727) *
               C38295 +
           (C38293 * C934 - C38365 * C832 + C38294 * C5790 - C38366 * C5733) *
               C38291 +
           (C39176 - C39177 + C39178 - C39179) * C38297 +
           (C39180 - C39181 + C39182 - C39183) * C38292) *
              C89247 * C89153 * C5722 +
          ((C38365 * C5727 - C38293 * C5787 + C38366 * C13743 -
            C38294 * C13873) *
               C38295 +
           (C38365 * C5733 - C38293 * C5790 + C38366 * C13746 -
            C38294 * C13875) *
               C38291 +
           (C38365 * C5726 - C38293 * C5788 + C38366 * C13744 -
            C38294 * C13874) *
               C38297 +
           (C38365 * C5731 - C38293 * C5791 + C38366 * C13748 -
            C38294 * C13876) *
               C38292) *
              C89247 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eexz[9] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C89247 * C264 - C263 * C106) * C38295 +
                      (C89247 * C270 - C263 * C113) * C38291 +
                      (C277 - C278) * C38297 + (C279 - C280) * C38292) *
                         C38293 +
                     ((C13956 - C13957) * C38295 + (C13958 - C13959) * C38291 +
                      C39282 * C38297 + C39283 * C38292) *
                         C38294) *
                        C89153 * C5073 +
                    (((C13957 - C13956) * C38295 + (C13959 - C13958) * C38291 +
                      C39284 * C38297 + C39285 * C38292) *
                         C38293 +
                     ((C13961 - C13960) * C38295 + (C13963 - C13962) * C38291 +
                      C13968 * C38297 + C13969 * C38292) *
                         C38294) *
                        C89153 * C89189) *
                       C5075 +
                   ((((C278 - C277) * C38295 + (C280 - C279) * C38291 +
                      (C282 - C281) * C38297 + (C284 - C283) * C38292) *
                         C38293 +
                     (C39284 * C38295 + C39285 * C38291 + C2792 * C38297 +
                      C2793 * C38292) *
                         C38294) *
                        C89153 * C5073 +
                    ((C39282 * C38295 + C39283 * C38291 + C41234 * C38297 +
                      C41235 * C38292) *
                         C38293 +
                     (C39286 * C38295 + C39287 * C38291 +
                      (C1058 - C1059) * C38297 + (C1060 - C1061) * C38292) *
                         C38294) *
                        C89153 * C89189) *
                       C5076 +
                   (((C293 * C38295 + C294 * C38291 + (C286 - C285) * C38297 +
                      (C288 - C287) * C38292) *
                         C38293 +
                     (C41234 * C38295 + C41235 * C38291 +
                      (C2794 - C2795) * C38297 + (C2796 - C2797) * C38292) *
                         C38294) *
                        C89153 * C5073 +
                    ((C2792 * C38295 + C2793 * C38291 +
                      (C2795 - C2794) * C38297 + (C2797 - C2796) * C38292) *
                         C38293 +
                     ((C1059 - C1058) * C38295 + (C1061 - C1060) * C38291 +
                      (C263 * C824 - C89247 * C1036) * C38297 +
                      (C263 * C840 - C89247 * C1044) * C38292) *
                         C38294) *
                        C89153 * C89189) *
                       C5077)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C89247 * C264 - C263 * C106) * C38295 +
                     (C89247 * C270 - C263 * C113) * C38291 +
                     (C277 - C278) * C38297 + (C279 - C280) * C38292) *
                        C38293 +
                    ((C13956 - C13957) * C38295 + (C13958 - C13959) * C38291 +
                     C39282 * C38297 + C39283 * C38292) *
                        C38294) *
                       C89153 * C5720 +
                   (((C13957 - C13956) * C38295 + (C13959 - C13958) * C38291 +
                     C39284 * C38297 + C39285 * C38292) *
                        C38293 +
                    ((C13961 - C13960) * C38295 + (C13963 - C13962) * C38291 +
                     C13968 * C38297 + C13969 * C38292) *
                        C38294) *
                       C89153 * C5721 +
                   ((C13974 * C38295 + C13975 * C38291 + C39286 * C38297 +
                     C39287 * C38292) *
                        C38293 +
                    ((C13965 - C13964) * C38295 + (C13967 - C13966) * C38291 +
                     (C13970 - C13971) * C38297 + (C13972 - C13973) * C38292) *
                        C38294) *
                       C89153 * C5722 +
                   ((C18427 * C38295 + C18428 * C38291 +
                     (C13971 - C13970) * C38297 + (C13973 - C13972) * C38292) *
                        C38293 +
                    ((C18430 - C18429) * C38295 + (C18432 - C18431) * C38291 +
                     (C263 * C13744 - C89247 * C13952) * C38297 +
                     (C263 * C13748 - C89247 * C13954) * C38292) *
                        C38294) *
                       C89153 * C5723) *
                  C89118) /
                     (p * q * std::sqrt(p + q));
    d2eeyx[9] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                C38365 +
            (C38291 * C352 - C38295 * C346 + C38292 * C353 - C38297 * C347) *
                C38293 +
            (C39386 - C39387 + C39388 - C39389) * C38366 +
            (C39390 - C39391 + C39392 - C39393) * C38294) *
               C89247 * C89153 * C5073 +
           ((C39387 - C39386 + C39389 - C39388) * C38365 +
            (C39391 - C39390 + C39393 - C39392) * C38293 +
            (C39394 - C39395 + C39396 - C39397) * C38366 +
            (C39398 - C39399 + C39400 - C39401) * C38294) *
               C89247 * C89153 * C89189) *
              C5075 +
          (((C38295 * C107 - C38291 * C114 + C38297 * C108 - C38292 * C116) *
                C38365 +
            (C38295 * C347 - C38291 * C353 + C38297 * C348 - C38292 * C354) *
                C38293 +
            (C39402 - C39403 + C39404 - C39405) * C38366 +
            (C39406 - C39407 + C39408 - C39409) * C38294) *
               C89247 * C89153 * C5073 +
           ((C39403 - C39402 + C39405 - C39404) * C38365 +
            (C39407 - C39406 + C39409 - C39408) * C38293 +
            (C39410 - C39411 + C39412 - C39413) * C38366 +
            (C39414 - C39415 + C39416 - C39417) * C38294) *
               C89247 * C89153 * C89189) *
              C5076 +
          (((C38291 * C116 - C38295 * C108 + C38292 * C118 - C38297 * C109) *
                C38365 +
            (C38291 * C354 - C38295 * C348 + C38292 * C355 - C38297 * C349) *
                C38293 +
            (C41334 - C41335 + C41336 - C41337) * C38366 +
            (C41338 - C41339 + C41340 - C41341) * C38294) *
               C89247 * C89153 * C5073 +
           ((C41335 - C41334 + C41337 - C41336) * C38365 +
            (C41339 - C41338 + C41341 - C41340) * C38293 +
            (C38295 * C822 - C38291 * C835 + C38297 * C824 - C38292 * C839) *
                C38366 +
            (C38295 * C1140 - C38291 * C1148 + C38297 * C1142 -
             C38292 * C1150) *
                C38294) *
               C89247 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
               C38365 +
           (C38291 * C352 - C38295 * C346 + C38292 * C353 - C38297 * C347) *
               C38293 +
           (C39386 - C39387 + C39388 - C39389) * C38366 +
           (C39390 - C39391 + C39392 - C39393) * C38294) *
              C89247 * C89153 * C5720 +
          ((C39387 - C39386 + C39389 - C39388) * C38365 +
           (C39391 - C39390 + C39393 - C39392) * C38293 +
           (C39394 - C39395 + C39396 - C39397) * C38366 +
           (C39398 - C39399 + C39400 - C39401) * C38294) *
              C89247 * C89153 * C5721 +
          ((C39395 - C39394 + C39397 - C39396) * C38365 +
           (C39399 - C39398 + C39401 - C39400) * C38293 +
           (C45183 - C45184 + C45185 - C45186) * C38366 +
           (C45187 - C45188 + C45189 - C45190) * C38294) *
              C89247 * C89153 * C5722 +
          ((C45184 - C45183 + C45186 - C45185) * C38365 +
           (C45188 - C45187 + C45190 - C45189) * C38293 +
           (C38295 * C13743 - C38291 * C13745 + C38297 * C13744 -
            C38292 * C13747) *
               C38366 +
           (C38295 * C14055 - C38291 * C14057 + C38297 * C14056 -
            C38292 * C14058) *
               C38294) *
              C89247 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eeyy[9] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C38365 * C181 - C38589 * C106 - C38365 * C346 + C38293 * C409 +
             C38366 * C923 - C38590 * C819 - C38366 * C1135 + C38294 * C1227) *
                C38291 +
            (C38628 + C38629) * C38292) *
               C89247 * C89153 * C5073 -
           ((C39540 + C39541) * C38292 +
            (C38366 * C926 - C38590 * C820 - C38366 * C1138 + C38294 * C1228 +
             C38365 * C923 - C38589 * C819 - C38365 * C1135 + C38293 * C1227) *
                C38291) *
               C89247 * C89153 * C89189) *
              C5075 +
          (((C39541 + C39540) * C38291 + (C41452 + C41453) * C38292) * C89247 *
               C89153 * C89189 -
           ((C38630 + C38631) * C38292 + (C38629 + C38628) * C38291) * C89247 *
               C89153 * C5073) *
              C5076 +
          (((C38631 + C38630) * C38291 + (C38632 + C38633) * C38292) * C89247 *
               C89153 * C5073 -
           ((C38366 * C930 - C38590 * C824 - C38366 * C1142 + C38294 * C1232 +
             C38365 * C929 - C38589 * C823 - C38365 * C1141 + C38293 * C1231) *
                C38292 +
            (C41453 + C41452) * C38291) *
               C89247 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C38365 * C181 - C38589 * C106 - C38365 * C346 + C38293 * C409 +
            C38366 * C923 - C38590 * C819 - C38366 * C1135 + C38294 * C1227) *
               C38291 +
           (C38628 + C38629) * C38292) *
              C89247 * C89153 * C5720 -
          ((C39540 + C39541) * C38292 +
           (C38366 * C926 - C38590 * C820 - C38366 * C1138 + C38294 * C1228 +
            C38365 * C923 - C38589 * C819 - C38365 * C1135 + C38293 * C1227) *
               C38291) *
              C89247 * C89153 * C5721 +
          ((C38365 * C926 - C38589 * C820 - C38365 * C1138 + C38293 * C1228 +
            C38366 * C5787 - C38590 * C5727 - C38366 * C5899 + C38294 * C5957) *
               C38291 +
           (C39542 + C39543) * C38292) *
              C89247 * C89153 * C5722 -
          ((C38366 * C13874 - C38590 * C13744 - C38366 * C14056 +
            C38294 * C14162 + C38365 * C5788 - C38589 * C5726 - C38365 * C5900 +
            C38293 * C5956) *
               C38292 +
           (C38366 * C13873 - C38590 * C13743 - C38366 * C14055 +
            C38294 * C14161 + C38365 * C5787 - C38589 * C5727 - C38365 * C5899 +
            C38293 * C5957) *
               C38291) *
              C89247 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eeyz[9] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C89247 * C264 - C263 * C106) * C38365 +
                      (C89247 * C493 - C263 * C346) * C38293 +
                      (C13956 - C13957) * C38366 + (C14240 - C14241) * C38294) *
                         C38291 +
                     ((C277 - C278) * C38365 + (C500 - C501) * C38293 +
                      C39282 * C38366 + C39642 * C38294) *
                         C38292) *
                        C89153 * C5073 +
                    (((C13957 - C13956) * C38365 + (C14241 - C14240) * C38293 +
                      (C13961 - C13960) * C38366 + (C14243 - C14242) * C38294) *
                         C38291 +
                     (C39284 * C38365 + C39643 * C38293 + C13968 * C38366 +
                      C14246 * C38294) *
                         C38292) *
                        C89153 * C89189) *
                       C5075 +
                   ((((C278 - C277) * C38365 + (C501 - C500) * C38293 +
                      C39284 * C38366 + C39643 * C38294) *
                         C38291 +
                     ((C282 - C281) * C38365 + (C504 - C503) * C38293 +
                      C2792 * C38366 + C3032 * C38294) *
                         C38292) *
                        C89153 * C5073 +
                    ((C39282 * C38365 + C39642 * C38293 + C39286 * C38366 +
                      C39644 * C38294) *
                         C38291 +
                     (C41234 * C38365 + C41552 * C38293 +
                      (C1058 - C1059) * C38366 + (C1350 - C1351) * C38294) *
                         C38292) *
                        C89153 * C89189) *
                       C5076 +
                   (((C293 * C38365 + C510 * C38293 + C41234 * C38366 +
                      C41552 * C38294) *
                         C38291 +
                     ((C286 - C285) * C38365 + (C507 - C506) * C38293 +
                      (C2794 - C2795) * C38366 + (C3033 - C3034) * C38294) *
                         C38292) *
                        C89153 * C5073 +
                    ((C2792 * C38365 + C3032 * C38293 +
                      (C1059 - C1058) * C38366 + (C1351 - C1350) * C38294) *
                         C38291 +
                     ((C2795 - C2794) * C38365 + (C3034 - C3033) * C38293 +
                      (C263 * C824 - C89247 * C1036) * C38366 +
                      (C263 * C1142 - C89247 * C1342) * C38294) *
                         C38292) *
                        C89153 * C89189) *
                       C5077)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C89247 * C264 - C263 * C106) * C38365 +
                     (C89247 * C493 - C263 * C346) * C38293 +
                     (C13956 - C13957) * C38366 + (C14240 - C14241) * C38294) *
                        C38291 +
                    ((C277 - C278) * C38365 + (C500 - C501) * C38293 +
                     C39282 * C38366 + C39642 * C38294) *
                        C38292) *
                       C89153 * C5720 +
                   (((C13957 - C13956) * C38365 + (C14241 - C14240) * C38293 +
                     (C13961 - C13960) * C38366 + (C14243 - C14242) * C38294) *
                        C38291 +
                    (C39284 * C38365 + C39643 * C38293 + C13968 * C38366 +
                     C14246 * C38294) *
                        C38292) *
                       C89153 * C5721 +
                   ((C13974 * C38365 + C14249 * C38293 +
                     (C13965 - C13964) * C38366 + (C14245 - C14244) * C38294) *
                        C38291 +
                    (C39286 * C38365 + C39644 * C38293 +
                     (C13970 - C13971) * C38366 + (C14247 - C14248) * C38294) *
                        C38292) *
                       C89153 * C5722 +
                   ((C18427 * C38365 + C18596 * C38293 +
                     (C18430 - C18429) * C38366 + (C18598 - C18597) * C38294) *
                        C38291 +
                    ((C13971 - C13970) * C38365 + (C14248 - C14247) * C38293 +
                     (C263 * C13744 - C89247 * C13952) * C38366 +
                     (C263 * C14056 - C89247 * C14238) * C38294) *
                        C38292) *
                       C89153 * C5723) *
                  C89118) /
                     (p * q * std::sqrt(p + q));
    d2eezx[9] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                 C263 +
             (C38291 * C571 - C38295 * C565 + C38292 * C572 - C38297 * C566) *
                 C89247) *
                C38293 +
            ((C39386 - C39387 + C39388 - C39389) * C263 +
             (C39743 - C39744 + C39745 - C39746) * C89247) *
                C38294) *
               C89153 * C5073 +
           (((C39387 - C39386 + C39389 - C39388) * C263 +
             (C39744 - C39743 + C39746 - C39745) * C89247) *
                C38293 +
            ((C39394 - C39395 + C39396 - C39397) * C263 +
             (C39747 - C39748 + C39749 - C39750) * C89247) *
                C38294) *
               C89153 * C89189) *
              C5075 +
          ((((C38295 * C107 - C38291 * C114 + C38297 * C108 - C38292 * C116) *
                 C263 +
             (C38295 * C566 - C38291 * C572 + C38297 * C567 - C38292 * C573) *
                 C89247) *
                C38293 +
            ((C39402 - C39403 + C39404 - C39405) * C263 +
             (C39751 - C39752 + C39753 - C39754) * C89247) *
                C38294) *
               C89153 * C5073 +
           (((C39403 - C39402 + C39405 - C39404) * C263 +
             (C39752 - C39751 + C39754 - C39753) * C89247) *
                C38293 +
            ((C39410 - C39411 + C39412 - C39413) * C263 +
             (C39755 - C39756 + C39757 - C39758) * C89247) *
                C38294) *
               C89153 * C89189) *
              C5076 +
          ((((C38291 * C116 - C38295 * C108 + C38292 * C118 - C38297 * C109) *
                 C263 +
             (C38291 * C573 - C38295 * C567 + C38292 * C574 - C38297 * C568) *
                 C89247) *
                C38293 +
            ((C41334 - C41335 + C41336 - C41337) * C263 +
             (C41651 - C41652 + C41653 - C41654) * C89247) *
                C38294) *
               C89153 * C5073 +
           (((C41335 - C41334 + C41337 - C41336) * C263 +
             (C41652 - C41651 + C41654 - C41653) * C89247) *
                C38293 +
            ((C38295 * C822 - C38291 * C835 + C38297 * C824 - C38292 * C839) *
                 C263 +
             (C38295 * C1430 - C38291 * C1438 + C38297 * C1432 -
              C38292 * C1440) *
                 C89247) *
                C38294) *
               C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                C263 +
            (C38291 * C571 - C38295 * C565 + C38292 * C572 - C38297 * C566) *
                C89247) *
               C38293 +
           ((C39386 - C39387 + C39388 - C39389) * C263 +
            (C39743 - C39744 + C39745 - C39746) * C89247) *
               C38294) *
              C89153 * C5720 +
          (((C39387 - C39386 + C39389 - C39388) * C263 +
            (C39744 - C39743 + C39746 - C39745) * C89247) *
               C38293 +
           ((C39394 - C39395 + C39396 - C39397) * C263 +
            (C39747 - C39748 + C39749 - C39750) * C89247) *
               C38294) *
              C89153 * C5721 +
          (((C39395 - C39394 + C39397 - C39396) * C263 +
            (C39748 - C39747 + C39750 - C39749) * C89247) *
               C38293 +
           ((C45183 - C45184 + C45185 - C45186) * C263 +
            (C45389 - C45390 + C45391 - C45392) * C89247) *
               C38294) *
              C89153 * C5722 +
          (((C45184 - C45183 + C45186 - C45185) * C263 +
            (C45390 - C45389 + C45392 - C45391) * C89247) *
               C38293 +
           ((C38295 * C13743 - C38291 * C13745 + C38297 * C13744 -
             C38292 * C13747) *
                C263 +
            (C38295 * C14323 - C38291 * C14325 + C38297 * C14324 -
             C38292 * C14326) *
                C89247) *
               C38294) *
              C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eezy[9] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                 C263 +
             (C38293 * C627 - C38365 * C565 + C38294 * C1515 - C38366 * C1425) *
                 C89247) *
                C38291 +
            ((C38368 - C38369 + C38370 - C38371) * C263 +
             (C38832 - C38833 + C38834 - C38835) * C89247) *
                C38292) *
               C89153 * C5073 +
           (((C38365 * C819 - C38293 * C923 + C38366 * C820 - C38294 * C926) *
                 C263 +
             (C38365 * C1425 - C38293 * C1515 + C38366 * C1428 -
              C38294 * C1518) *
                 C89247) *
                C38291 +
            ((C39168 - C39169 + C39170 - C39171) * C263 +
             (C39857 - C39858 + C39859 - C39860) * C89247) *
                C38292) *
               C89153 * C89189) *
              C5075 +
          ((((C38369 - C38368 + C38371 - C38370) * C263 +
             (C38833 - C38832 + C38835 - C38834) * C89247) *
                C38291 +
            ((C38376 - C38377 + C38378 - C38379) * C263 +
             (C38836 - C38837 + C38838 - C38839) * C89247) *
                C38292) *
               C89153 * C5073 +
           (((C39169 - C39168 + C39171 - C39170) * C263 +
             (C39858 - C39857 + C39860 - C39859) * C89247) *
                C38291 +
            ((C41128 - C41129 + C41130 - C41131) * C263 +
             (C41753 - C41754 + C41755 - C41756) * C89247) *
                C38292) *
               C89153 * C89189) *
              C5076 +
          ((((C38377 - C38376 + C38379 - C38378) * C263 +
             (C38837 - C38836 + C38839 - C38838) * C89247) *
                C38291 +
            ((C38384 - C38385 + C38386 - C38387) * C263 +
             (C38840 - C38841 + C38842 - C38843) * C89247) *
                C38292) *
               C89153 * C5073 +
           (((C41129 - C41128 + C41131 - C41130) * C263 +
             (C41754 - C41753 + C41756 - C41755) * C89247) *
                C38291 +
            ((C38365 * C823 - C38293 * C929 + C38366 * C824 - C38294 * C930) *
                 C263 +
             (C38365 * C1431 - C38293 * C1521 + C38366 * C1432 -
              C38294 * C1522) *
                 C89247) *
                C38292) *
               C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                C263 +
            (C38293 * C627 - C38365 * C565 + C38294 * C1515 - C38366 * C1425) *
                C89247) *
               C38291 +
           ((C38368 - C38369 + C38370 - C38371) * C263 +
            (C38832 - C38833 + C38834 - C38835) * C89247) *
               C38292) *
              C89153 * C5720 +
          (((C38365 * C819 - C38293 * C923 + C38366 * C820 - C38294 * C926) *
                C263 +
            (C38365 * C1425 - C38293 * C1515 + C38366 * C1428 -
             C38294 * C1518) *
                C89247) *
               C38291 +
           ((C39168 - C39169 + C39170 - C39171) * C263 +
            (C39857 - C39858 + C39859 - C39860) * C89247) *
               C38292) *
              C89153 * C5721 +
          (((C38293 * C926 - C38365 * C820 + C38294 * C5787 - C38366 * C5727) *
                C263 +
            (C38293 * C1518 - C38365 * C1428 + C38294 * C6117 -
             C38366 * C6061) *
                C89247) *
               C38291 +
           ((C39176 - C39177 + C39178 - C39179) * C263 +
            (C39861 - C39862 + C39863 - C39864) * C89247) *
               C38292) *
              C89153 * C5722 +
          (((C38365 * C5727 - C38293 * C5787 + C38366 * C13743 -
             C38294 * C13873) *
                C263 +
            (C38365 * C6061 - C38293 * C6117 + C38366 * C14323 -
             C38294 * C14421) *
                C89247) *
               C38291 +
           ((C38365 * C5726 - C38293 * C5788 + C38366 * C13744 -
             C38294 * C13874) *
                C263 +
            (C38365 * C6062 - C38293 * C6118 + C38366 * C14324 -
             C38294 * C14422) *
                C89247) *
               C38292) *
              C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eezz[9] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) *
                 C38293 +
             C14524 * C38294) *
                C38291 +
            (C38910 + C38911) * C38292) *
               C89153 * C5073 -
           ((C39963 + C39964) * C38292 +
            (C14525 * C38294 + C14524 * C38293) * C38291) *
               C89153 * C89189) *
              C5075 +
          (((C39964 + C39963) * C38291 + (C41855 + C41856) * C38292) * C89153 *
               C89189 -
           ((C38912 + C38913) * C38292 + (C38911 + C38910) * C38291) * C89153 *
               C5073) *
              C5076 +
          (((C38913 + C38912) * C38291 + (C38914 + C38915) * C38292) * C89153 *
               C5073 -
           (((C263 * C1036 - C699 * C824 - C263 * C1432 + C89247 * C1612) *
                 C38294 +
             C3275 * C38293) *
                C38292 +
            (C41856 + C41855) * C38291) *
               C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C38293 +
            C14524 * C38294) *
               C38291 +
           (C38910 + C38911) * C38292) *
              C89153 * C5720 -
          ((C39963 + C39964) * C38292 +
           (C14525 * C38294 + C14524 * C38293) * C38291) *
              C89153 * C5721 +
          ((C14525 * C38293 + C14526 * C38294) * C38291 +
           (C39965 + C39966) * C38292) *
              C89153 * C5722 -
          (((C263 * C13952 - C699 * C13744 - C263 * C14324 + C89247 * C14498) *
                C38294 +
            C14527 * C38293) *
               C38292 +
           (C18765 * C38294 + C14526 * C38293) * C38291) *
              C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eexx[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C38295 * C112 - C38296 * C106 - C38295 * C113 + C38291 * C124 +
              C38297 * C114 - C38298 * C107 - C38297 * C115 + C38292 * C125) *
                 C89247 * C38293 +
             (C39062 + C39063) * C89247 * C38294) *
                C9228 -
            ((C42921 + C42922) * C89247 * C38294 +
             (C38297 * C1732 - C38298 * C1723 - C38297 * C1733 +
              C38292 * C1747 + C38295 * C1734 - C38296 * C1724 -
              C38295 * C1735 + C38291 * C1748) *
                 C89247 * C38293) *
                C89217) *
               C89307 +
           (((C42922 + C42921) * C89247 * C38293 +
             (C48595 + C48596) * C89247 * C38294) *
                C89217 -
            ((C39064 + C39065) * C89247 * C38294 +
             (C39063 + C39062) * C89247 * C38293) *
                C9228) *
               C89189) *
              C89299 +
          ((((C38295 * C1732 - C38296 * C1723 - C38295 * C1733 +
              C38291 * C1747 + C38297 * C1730 - C38298 * C1722 -
              C38297 * C1731 + C38292 * C1746) *
                 C89247 * C38293 +
             (C42923 + C42924) * C89247 * C38294) *
                C89217 -
            ((C39067 + C39066) * C89247 * C38294 +
             (C38297 * C116 - C38298 * C108 - C38297 * C117 + C38292 * C126 +
              C38295 * C114 - C38296 * C107 - C38295 * C115 + C38291 * C125) *
                 C89247 * C38293) *
                C9228) *
               C89307 +
           (((C39066 + C39067) * C89247 * C38293 +
             (C39068 + C39069) * C89247 * C38294) *
                C9228 -
            ((C38297 * C8517 - C38298 * C8514 - C38297 * C8518 +
              C38292 * C8523 + C38295 * C8519 - C38296 * C8515 -
              C38295 * C8520 + C38291 * C8524) *
                 C89247 * C38294 +
             (C42924 + C42923) * C89247 * C38293) *
                C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eexy[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                 C38295 +
             (C38293 * C187 - C38365 * C113 + C38294 * C931 - C38366 * C830) *
                 C38291 +
             (C38368 - C38369 + C38370 - C38371) * C38297 +
             (C38372 - C38373 + C38374 - C38375) * C38292) *
                C89247 * C9228 +
            ((C38365 * C1724 - C38293 * C1828 + C38366 * C4097 -
              C38294 * C4211) *
                 C38295 +
             (C38365 * C1735 - C38293 * C1836 + C38366 * C4102 -
              C38294 * C4215) *
                 C38291 +
             (C40163 - C40164 + C40165 - C40166) * C38297 +
             (C40167 - C40168 + C40169 - C40170) * C38292) *
                C89247 * C89217) *
               C89307 +
           (((C38365 * C819 - C38293 * C923 + C38366 * C820 - C38294 * C926) *
                 C38295 +
             (C38365 * C830 - C38293 * C931 + C38366 * C832 - C38294 * C934) *
                 C38291 +
             (C39168 - C39169 + C39170 - C39171) * C38297 +
             (C39172 - C39173 + C39174 - C39175) * C38292) *
                C89247 * C9228 +
            ((C38293 * C4211 - C38365 * C4097 + C38294 * C8600 -
              C38366 * C8516) *
                 C38295 +
             (C38293 * C4215 - C38365 * C4102 + C38294 * C8603 -
              C38366 * C8522) *
                 C38291 +
             (C43055 - C43056 + C43057 - C43058) * C38297 +
             (C43059 - C43060 + C43061 - C43062) * C38292) *
                C89247 * C89217) *
               C89189) *
              C89299 +
          ((((C38369 - C38368 + C38371 - C38370) * C38295 +
             (C38373 - C38372 + C38375 - C38374) * C38291 +
             (C38376 - C38377 + C38378 - C38379) * C38297 +
             (C38380 - C38381 + C38382 - C38383) * C38292) *
                C89247 * C9228 +
            ((C40164 - C40163 + C40166 - C40165) * C38295 +
             (C40168 - C40167 + C40170 - C40169) * C38291 +
             (C42053 - C42054 + C42055 - C42056) * C38297 +
             (C42057 - C42058 + C42059 - C42060) * C38292) *
                C89247 * C89217) *
               C89307 +
           (((C39169 - C39168 + C39171 - C39170) * C38295 +
             (C39173 - C39172 + C39175 - C39174) * C38291 +
             (C41128 - C41129 + C41130 - C41131) * C38297 +
             (C41132 - C41133 + C41134 - C41135) * C38292) *
                C89247 * C9228 +
            ((C43056 - C43055 + C43058 - C43057) * C38295 +
             (C43060 - C43059 + C43062 - C43061) * C38291 +
             (C38365 * C4099 - C38293 * C4213 + C38366 * C8514 -
              C38294 * C8602) *
                 C38297 +
             (C38365 * C4106 - C38293 * C4217 + C38366 * C8518 -
              C38294 * C8605) *
                 C38292) *
                C89247 * C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eexz[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C89247 * C264 - C263 * C106) * C38295 +
              (C89247 * C270 - C263 * C113) * C38291 + (C277 - C278) * C38297 +
              (C279 - C280) * C38292) *
                 C38293 +
             ((C13956 - C13957) * C38295 + (C13958 - C13959) * C38291 +
              C39282 * C38297 + C39283 * C38292) *
                 C38294) *
                C9228 +
            (((C263 * C1724 - C89247 * C1934) * C38295 +
              (C263 * C1735 - C89247 * C1942) * C38291 +
              (C1951 - C1952) * C38297 + (C1953 - C1954) * C38292) *
                 C38293 +
             ((C16928 - C16929) * C38295 + (C16930 - C16931) * C38291 +
              C43193 * C38297 + C43194 * C38292) *
                 C38294) *
                C89217) *
               C89307 +
           ((((C13957 - C13956) * C38295 + (C13959 - C13958) * C38291 +
              C39284 * C38297 + C39285 * C38292) *
                 C38293 +
             ((C13961 - C13960) * C38295 + (C13963 - C13962) * C38291 +
              C13968 * C38297 + C13969 * C38292) *
                 C38294) *
                C9228 +
            (((C16929 - C16928) * C38295 + (C16931 - C16930) * C38291 +
              C43195 * C38297 + C43196 * C38292) *
                 C38293 +
             ((C16933 - C16932) * C38295 + (C16935 - C16934) * C38291 +
              (C16936 - C16937) * C38297 + (C16938 - C16939) * C38292) *
                 C38294) *
                C89217) *
               C89189) *
              C89299 +
          (((((C278 - C277) * C38295 + (C280 - C279) * C38291 +
              (C282 - C281) * C38297 + (C284 - C283) * C38292) *
                 C38293 +
             (C39284 * C38295 + C39285 * C38291 + C2792 * C38297 +
              C2793 * C38292) *
                 C38294) *
                C9228 +
            (((C1952 - C1951) * C38295 + (C1954 - C1953) * C38291 +
              (C1956 - C1955) * C38297 + (C1958 - C1957) * C38292) *
                 C38293 +
             (C43195 * C38295 + C43196 * C38291 + (C4338 - C4339) * C38297 +
              (C4340 - C4341) * C38292) *
                 C38294) *
                C89217) *
               C89307 +
           (((C39282 * C38295 + C39283 * C38291 + C41234 * C38297 +
              C41235 * C38292) *
                 C38293 +
             (C39286 * C38295 + C39287 * C38291 + (C1058 - C1059) * C38297 +
              (C1060 - C1061) * C38292) *
                 C38294) *
                C9228 +
            ((C43193 * C38295 + C43194 * C38291 + (C4339 - C4338) * C38297 +
              (C4341 - C4340) * C38292) *
                 C38293 +
             ((C16937 - C16936) * C38295 + (C16939 - C16938) * C38291 +
              (C263 * C8514 - C89247 * C8682) * C38297 +
              (C263 * C8518 - C89247 * C8685) * C38292) *
                 C38294) *
                C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                 C38365 +
             (C38291 * C352 - C38295 * C346 + C38292 * C353 - C38297 * C347) *
                 C38293 +
             (C39386 - C39387 + C39388 - C39389) * C38366 +
             (C39390 - C39391 + C39392 - C39393) * C38294) *
                C89247 * C9228 +
            ((C38295 * C1724 - C38291 * C1734 + C38297 * C1723 -
              C38292 * C1732) *
                 C38365 +
             (C38295 * C2040 - C38291 * C2048 + C38297 * C2041 -
              C38292 * C2049) *
                 C38293 +
             (C43327 - C43328 + C43329 - C43330) * C38366 +
             (C43331 - C43332 + C43333 - C43334) * C38294) *
                C89247 * C89217) *
               C89307 +
           (((C39387 - C39386 + C39389 - C39388) * C38365 +
             (C39391 - C39390 + C39393 - C39392) * C38293 +
             (C39394 - C39395 + C39396 - C39397) * C38366 +
             (C39398 - C39399 + C39400 - C39401) * C38294) *
                C89247 * C9228 +
            ((C43328 - C43327 + C43330 - C43329) * C38365 +
             (C43332 - C43331 + C43334 - C43333) * C38293 +
             (C48891 - C48892 + C48893 - C48894) * C38366 +
             (C48895 - C48896 + C48897 - C48898) * C38294) *
                C89247 * C89217) *
               C89189) *
              C89299 +
          ((((C38295 * C107 - C38291 * C114 + C38297 * C108 - C38292 * C116) *
                 C38365 +
             (C38295 * C347 - C38291 * C353 + C38297 * C348 - C38292 * C354) *
                 C38293 +
             (C39402 - C39403 + C39404 - C39405) * C38366 +
             (C39406 - C39407 + C39408 - C39409) * C38294) *
                C89247 * C9228 +
            ((C38291 * C1732 - C38295 * C1723 + C38292 * C1730 -
              C38297 * C1722) *
                 C38365 +
             (C38291 * C2049 - C38295 * C2041 + C38292 * C2050 -
              C38297 * C2042) *
                 C38293 +
             (C43335 - C43336 + C43337 - C43338) * C38366 +
             (C43339 - C43340 + C43341 - C43342) * C38294) *
                C89247 * C89217) *
               C89307 +
           (((C39403 - C39402 + C39405 - C39404) * C38365 +
             (C39407 - C39406 + C39409 - C39408) * C38293 +
             (C39410 - C39411 + C39412 - C39413) * C38366 +
             (C39414 - C39415 + C39416 - C39417) * C38294) *
                C89247 * C9228 +
            ((C43336 - C43335 + C43338 - C43337) * C38365 +
             (C43340 - C43339 + C43342 - C43341) * C38293 +
             (C38295 * C8515 - C38291 * C8519 + C38297 * C8514 -
              C38292 * C8517) *
                 C38366 +
             (C38295 * C8761 - C38291 * C8764 + C38297 * C8762 -
              C38292 * C8765) *
                 C38294) *
                C89247 * C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C38365 * C181 - C38589 * C106 - C38365 * C346 + C38293 * C409 +
              C38366 * C923 - C38590 * C819 - C38366 * C1135 + C38294 * C1227) *
                 C38291 +
             (C38628 + C38629) * C38292) *
                C89247 * C9228 -
            ((C40501 + C40502) * C38292 +
             (C38366 * C4211 - C38590 * C4097 - C38366 * C4439 +
              C38294 * C4545 + C38365 * C1828 - C38589 * C1724 -
              C38365 * C2040 + C38293 * C2132) *
                 C38291) *
                C89247 * C89217) *
               C89307 +
           (((C38365 * C4211 - C38589 * C4097 - C38365 * C4439 +
              C38293 * C4545 + C38366 * C8600 - C38590 * C8516 -
              C38366 * C8760 + C38294 * C8842) *
                 C38291 +
             (C43485 + C43486) * C38292) *
                C89247 * C89217 -
            ((C39540 + C39541) * C38292 +
             (C38366 * C926 - C38590 * C820 - C38366 * C1138 + C38294 * C1228 +
              C38365 * C923 - C38589 * C819 - C38365 * C1135 + C38293 * C1227) *
                 C38291) *
                C89247 * C9228) *
               C89189) *
              C89299 +
          ((((C40502 + C40501) * C38291 + (C42367 + C42368) * C38292) * C89247 *
                C89217 -
            ((C38630 + C38631) * C38292 + (C38629 + C38628) * C38291) * C89247 *
                C9228) *
               C89307 +
           (((C39541 + C39540) * C38291 + (C41452 + C41453) * C38292) * C89247 *
                C9228 -
            ((C38366 * C8602 - C38590 * C8514 - C38366 * C8762 +
              C38294 * C8840 + C38365 * C4213 - C38589 * C4099 -
              C38365 * C4441 + C38293 * C4547) *
                 C38292 +
             (C43486 + C43485) * C38291) *
                C89247 * C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C89247 * C264 - C263 * C106) * C38365 +
              (C89247 * C493 - C263 * C346) * C38293 +
              (C13956 - C13957) * C38366 + (C14240 - C14241) * C38294) *
                 C38291 +
             ((C277 - C278) * C38365 + (C500 - C501) * C38293 +
              C39282 * C38366 + C39642 * C38294) *
                 C38292) *
                C9228 +
            (((C263 * C1724 - C89247 * C1934) * C38365 +
              (C263 * C2040 - C89247 * C2240) * C38293 +
              (C16928 - C16929) * C38366 + (C17258 - C17259) * C38294) *
                 C38291 +
             ((C1951 - C1952) * C38365 + (C2249 - C2250) * C38293 +
              C43193 * C38366 + C43617 * C38294) *
                 C38292) *
                C89217) *
               C89307 +
           ((((C13957 - C13956) * C38365 + (C14241 - C14240) * C38293 +
              (C13961 - C13960) * C38366 + (C14243 - C14242) * C38294) *
                 C38291 +
             (C39284 * C38365 + C39643 * C38293 + C13968 * C38366 +
              C14246 * C38294) *
                 C38292) *
                C9228 +
            (((C16929 - C16928) * C38365 + (C17259 - C17258) * C38293 +
              (C16933 - C16932) * C38366 + (C17261 - C17260) * C38294) *
                 C38291 +
             (C43195 * C38365 + C43618 * C38293 + (C16936 - C16937) * C38366 +
              (C17262 - C17263) * C38294) *
                 C38292) *
                C89217) *
               C89189) *
              C89299 +
          (((((C278 - C277) * C38365 + (C501 - C500) * C38293 +
              C39284 * C38366 + C39643 * C38294) *
                 C38291 +
             ((C282 - C281) * C38365 + (C504 - C503) * C38293 + C2792 * C38366 +
              C3032 * C38294) *
                 C38292) *
                C9228 +
            (((C1952 - C1951) * C38365 + (C2250 - C2249) * C38293 +
              C43195 * C38366 + C43618 * C38294) *
                 C38291 +
             ((C1956 - C1955) * C38365 + (C2252 - C2251) * C38293 +
              (C4338 - C4339) * C38366 + (C4668 - C4669) * C38294) *
                 C38292) *
                C89217) *
               C89307 +
           (((C39282 * C38365 + C39642 * C38293 + C39286 * C38366 +
              C39644 * C38294) *
                 C38291 +
             (C41234 * C38365 + C41552 * C38293 + (C1058 - C1059) * C38366 +
              (C1350 - C1351) * C38294) *
                 C38292) *
                C9228 +
            ((C43193 * C38365 + C43617 * C38293 + (C16937 - C16936) * C38366 +
              (C17263 - C17262) * C38294) *
                 C38291 +
             ((C4339 - C4338) * C38365 + (C4669 - C4668) * C38293 +
              (C263 * C8514 - C89247 * C8682) * C38366 +
              (C263 * C8762 - C89247 * C8919) * C38294) *
                 C38292) *
                C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eezx[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                  C263 +
              (C38291 * C571 - C38295 * C565 + C38292 * C572 - C38297 * C566) *
                  C89247) *
                 C38293 +
             ((C39386 - C39387 + C39388 - C39389) * C263 +
              (C39743 - C39744 + C39745 - C39746) * C89247) *
                 C38294) *
                C9228 +
            (((C38295 * C1724 - C38291 * C1734 + C38297 * C1723 -
               C38292 * C1732) *
                  C263 +
              (C38295 * C2330 - C38291 * C2338 + C38297 * C2331 -
               C38292 * C2339) *
                  C89247) *
                 C38293 +
             ((C43327 - C43328 + C43329 - C43330) * C263 +
              (C43749 - C43750 + C43751 - C43752) * C89247) *
                 C38294) *
                C89217) *
               C89307 +
           ((((C39387 - C39386 + C39389 - C39388) * C263 +
              (C39744 - C39743 + C39746 - C39745) * C89247) *
                 C38293 +
             ((C39394 - C39395 + C39396 - C39397) * C263 +
              (C39747 - C39748 + C39749 - C39750) * C89247) *
                 C38294) *
                C9228 +
            (((C43328 - C43327 + C43330 - C43329) * C263 +
              (C43750 - C43749 + C43752 - C43751) * C89247) *
                 C38293 +
             ((C48891 - C48892 + C48893 - C48894) * C263 +
              (C49193 - C49194 + C49195 - C49196) * C89247) *
                 C38294) *
                C89217) *
               C89189) *
              C89299 +
          (((((C38295 * C107 - C38291 * C114 + C38297 * C108 - C38292 * C116) *
                  C263 +
              (C38295 * C566 - C38291 * C572 + C38297 * C567 - C38292 * C573) *
                  C89247) *
                 C38293 +
             ((C39402 - C39403 + C39404 - C39405) * C263 +
              (C39751 - C39752 + C39753 - C39754) * C89247) *
                 C38294) *
                C9228 +
            (((C38291 * C1732 - C38295 * C1723 + C38292 * C1730 -
               C38297 * C1722) *
                  C263 +
              (C38291 * C2339 - C38295 * C2331 + C38292 * C2340 -
               C38297 * C2332) *
                  C89247) *
                 C38293 +
             ((C43335 - C43336 + C43337 - C43338) * C263 +
              (C43753 - C43754 + C43755 - C43756) * C89247) *
                 C38294) *
                C89217) *
               C89307 +
           ((((C39403 - C39402 + C39405 - C39404) * C263 +
              (C39752 - C39751 + C39754 - C39753) * C89247) *
                 C38293 +
             ((C39410 - C39411 + C39412 - C39413) * C263 +
              (C39755 - C39756 + C39757 - C39758) * C89247) *
                 C38294) *
                C9228 +
            (((C43336 - C43335 + C43338 - C43337) * C263 +
              (C43754 - C43753 + C43756 - C43755) * C89247) *
                 C38293 +
             ((C38295 * C8515 - C38291 * C8519 + C38297 * C8514 -
               C38292 * C8517) *
                  C263 +
              (C38295 * C8995 - C38291 * C8998 + C38297 * C8996 -
               C38292 * C8999) *
                  C89247) *
                 C38294) *
                C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eezy[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                  C263 +
              (C38293 * C627 - C38365 * C565 + C38294 * C1515 -
               C38366 * C1425) *
                  C89247) *
                 C38291 +
             ((C38368 - C38369 + C38370 - C38371) * C263 +
              (C38832 - C38833 + C38834 - C38835) * C89247) *
                 C38292) *
                C9228 +
            (((C38365 * C1724 - C38293 * C1828 + C38366 * C4097 -
               C38294 * C4211) *
                  C263 +
              (C38365 * C2330 - C38293 * C2420 + C38366 * C4767 -
               C38294 * C4873) *
                  C89247) *
                 C38291 +
             ((C40163 - C40164 + C40165 - C40166) * C263 +
              (C40801 - C40802 + C40803 - C40804) * C89247) *
                 C38292) *
                C89217) *
               C89307 +
           ((((C38365 * C819 - C38293 * C923 + C38366 * C820 - C38294 * C926) *
                  C263 +
              (C38365 * C1425 - C38293 * C1515 + C38366 * C1428 -
               C38294 * C1518) *
                  C89247) *
                 C38291 +
             ((C39168 - C39169 + C39170 - C39171) * C263 +
              (C39857 - C39858 + C39859 - C39860) * C89247) *
                 C38292) *
                C9228 +
            (((C38293 * C4211 - C38365 * C4097 + C38294 * C8600 -
               C38366 * C8516) *
                  C263 +
              (C38293 * C4873 - C38365 * C4767 + C38294 * C9074 -
               C38366 * C8994) *
                  C89247) *
                 C38291 +
             ((C43055 - C43056 + C43057 - C43058) * C263 +
              (C43887 - C43888 + C43889 - C43890) * C89247) *
                 C38292) *
                C89217) *
               C89189) *
              C89299 +
          (((((C38369 - C38368 + C38371 - C38370) * C263 +
              (C38833 - C38832 + C38835 - C38834) * C89247) *
                 C38291 +
             ((C38376 - C38377 + C38378 - C38379) * C263 +
              (C38836 - C38837 + C38838 - C38839) * C89247) *
                 C38292) *
                C9228 +
            (((C40164 - C40163 + C40166 - C40165) * C263 +
              (C40802 - C40801 + C40804 - C40803) * C89247) *
                 C38291 +
             ((C42053 - C42054 + C42055 - C42056) * C263 +
              (C42663 - C42664 + C42665 - C42666) * C89247) *
                 C38292) *
                C89217) *
               C89307 +
           ((((C39169 - C39168 + C39171 - C39170) * C263 +
              (C39858 - C39857 + C39860 - C39859) * C89247) *
                 C38291 +
             ((C41128 - C41129 + C41130 - C41131) * C263 +
              (C41753 - C41754 + C41755 - C41756) * C89247) *
                 C38292) *
                C9228 +
            (((C43056 - C43055 + C43058 - C43057) * C263 +
              (C43888 - C43887 + C43890 - C43889) * C89247) *
                 C38291 +
             ((C38365 * C4099 - C38293 * C4213 + C38366 * C8514 -
               C38294 * C8602) *
                  C263 +
              (C38365 * C4769 - C38293 * C4875 + C38366 * C8996 -
               C38294 * C9076) *
                  C89247) *
                 C38292) *
                C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eezz[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) *
                  C38293 +
              C14524 * C38294) *
                 C38291 +
             (C38910 + C38911) * C38292) *
                C9228 -
            ((C40907 + C40908) * C38292 +
             (C17593 * C38294 +
              (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
                  C38293) *
                 C38291) *
                C89217) *
               C89307 +
           (((C17593 * C38293 + C17592 * C38294) * C38291 +
             (C44021 + C44022) * C38292) *
                C89217 -
            ((C39963 + C39964) * C38292 +
             (C14525 * C38294 + C14524 * C38293) * C38291) *
                C9228) *
               C89189) *
              C89299 +
          ((((C40908 + C40907) * C38291 + (C42765 + C42766) * C38292) * C89217 -
            ((C38912 + C38913) * C38292 + (C38911 + C38910) * C38291) * C9228) *
               C89307 +
           (((C39964 + C39963) * C38291 + (C41855 + C41856) * C38292) * C9228 -
            (((C263 * C8682 - C699 * C8514 - C263 * C8996 + C89247 * C9151) *
                  C38294 +
              C4997 * C38293) *
                 C38292 +
             (C44022 + C44021) * C38291) *
                C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eexx[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C38295 * C112 - C38296 * C106 - C38295 * C113 + C38291 * C124 +
             C38297 * C114 - C38298 * C107 - C38297 * C115 + C38292 * C125) *
                C89247 * C38293 +
            (C39062 + C39063) * C89247 * C38294) *
               C89337 -
           ((C42921 + C42922) * C89247 * C38294 +
            (C38297 * C1732 - C38298 * C1723 - C38297 * C1733 + C38292 * C1747 +
             C38295 * C1734 - C38296 * C1724 - C38295 * C1735 +
             C38291 * C1748) *
                C89247 * C38293) *
               C89338 +
           ((C38295 * C1736 - C38296 * C1725 - C38295 * C1737 + C38291 * C1749 +
             C38297 * C1738 - C38298 * C1726 - C38297 * C1739 +
             C38292 * C1750) *
                C89247 * C38293 +
            (C45635 + C45636) * C89247 * C38294) *
               C11948) *
              C89307 +
          (((C42922 + C42921) * C89247 * C38293 +
            (C48595 + C48596) * C89247 * C38294) *
               C89338 -
           ((C39064 + C39065) * C89247 * C38294 +
            (C39063 + C39062) * C89247 * C38293) *
               C89337 -
           ((C38297 * C14605 - C38298 * C14602 - C38297 * C14606 +
             C38292 * C14608 + C38295 * C14603 - C38296 * C14601 -
             C38295 * C14604 + C38291 * C14607) *
                C89247 * C38294 +
            (C45636 + C45635) * C89247 * C38293) *
               C11948) *
              C89189) *
         C89118) /
        (p * q * std::sqrt(p + q));
    d2eexy[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                C38295 +
            (C38293 * C187 - C38365 * C113 + C38294 * C931 - C38366 * C830) *
                C38291 +
            (C38368 - C38369 + C38370 - C38371) * C38297 +
            (C38372 - C38373 + C38374 - C38375) * C38292) *
               C89247 * C89337 +
           ((C38365 * C1724 - C38293 * C1828 + C38366 * C4097 -
             C38294 * C4211) *
                C38295 +
            (C38365 * C1735 - C38293 * C1836 + C38366 * C4102 -
             C38294 * C4215) *
                C38291 +
            (C40163 - C40164 + C40165 - C40166) * C38297 +
            (C40167 - C40168 + C40169 - C40170) * C38292) *
               C89247 * C89338 +
           ((C38293 * C1831 - C38365 * C1725 + C38294 * C6333 -
             C38366 * C6249) *
                C38295 +
            (C38293 * C1839 - C38365 * C1737 + C38294 * C6336 -
             C38366 * C6255) *
                C38291 +
            (C40171 - C40172 + C40173 - C40174) * C38297 +
            (C40175 - C40176 + C40177 - C40178) * C38292) *
               C89247 * C11948) *
              C89307 +
          (((C38365 * C819 - C38293 * C923 + C38366 * C820 - C38294 * C926) *
                C38295 +
            (C38365 * C830 - C38293 * C931 + C38366 * C832 - C38294 * C934) *
                C38291 +
            (C39168 - C39169 + C39170 - C39171) * C38297 +
            (C39172 - C39173 + C39174 - C39175) * C38292) *
               C89247 * C89337 +
           ((C38293 * C4211 - C38365 * C4097 + C38294 * C8600 -
             C38366 * C8516) *
                C38295 +
            (C38293 * C4215 - C38365 * C4102 + C38294 * C8603 -
             C38366 * C8522) *
                C38291 +
            (C43055 - C43056 + C43057 - C43058) * C38297 +
            (C43059 - C43060 + C43061 - C43062) * C38292) *
               C89247 * C89338 +
           ((C38365 * C6249 - C38293 * C6333 + C38366 * C14601 -
             C38294 * C14683) *
                C38295 +
            (C38365 * C6255 - C38293 * C6336 + C38366 * C14604 -
             C38294 * C14685) *
                C38291 +
            (C38365 * C6248 - C38293 * C6334 + C38366 * C14602 -
             C38294 * C14684) *
                C38297 +
            (C38365 * C6253 - C38293 * C6337 + C38366 * C14606 -
             C38294 * C14686) *
                C38292) *
               C89247 * C11948) *
              C89189) *
         C89118) /
        (p * q * std::sqrt(p + q));
    d2eexz[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C38295 +
             (C89247 * C270 - C263 * C113) * C38291 + (C277 - C278) * C38297 +
             (C279 - C280) * C38292) *
                C38293 +
            ((C13956 - C13957) * C38295 + (C13958 - C13959) * C38291 +
             C39282 * C38297 + C39283 * C38292) *
                C38294) *
               C89337 +
           (((C263 * C1724 - C89247 * C1934) * C38295 +
             (C263 * C1735 - C89247 * C1942) * C38291 +
             (C1951 - C1952) * C38297 + (C1953 - C1954) * C38292) *
                C38293 +
            ((C16928 - C16929) * C38295 + (C16930 - C16931) * C38291 +
             C43193 * C38297 + C43194 * C38292) *
                C38294) *
               C89338 +
           (((C89247 * C1937 - C263 * C1725) * C38295 +
             (C89247 * C1945 - C263 * C1737) * C38291 +
             (C1959 - C1960) * C38297 + (C1961 - C1962) * C38292) *
                C38293 +
            ((C19012 - C19013) * C38295 + (C19014 - C19015) * C38291 +
             (C40277 - C40278) * C38297 + (C40279 - C40280) * C38292) *
                C38294) *
               C11948) *
              C89307 +
          ((((C13957 - C13956) * C38295 + (C13959 - C13958) * C38291 +
             C39284 * C38297 + C39285 * C38292) *
                C38293 +
            ((C13961 - C13960) * C38295 + (C13963 - C13962) * C38291 +
             C13968 * C38297 + C13969 * C38292) *
                C38294) *
               C89337 +
           (((C16929 - C16928) * C38295 + (C16931 - C16930) * C38291 +
             C43195 * C38297 + C43196 * C38292) *
                C38293 +
            ((C16933 - C16932) * C38295 + (C16935 - C16934) * C38291 +
             (C16936 - C16937) * C38297 + (C16938 - C16939) * C38292) *
                C38294) *
               C89338 +
           (((C19013 - C19012) * C38295 + (C19015 - C19014) * C38291 +
             (C40278 - C40277) * C38297 + (C40280 - C40279) * C38292) *
                C38293 +
            ((C19017 - C19016) * C38295 + (C19019 - C19018) * C38291 +
             (C263 * C14602 - C89247 * C14762) * C38297 +
             (C263 * C14606 - C89247 * C14764) * C38292) *
                C38294) *
               C11948) *
              C89189) *
         C89118) /
        (p * q * std::sqrt(p + q));
    d2eeyx[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                C38365 +
            (C38291 * C352 - C38295 * C346 + C38292 * C353 - C38297 * C347) *
                C38293 +
            (C39386 - C39387 + C39388 - C39389) * C38366 +
            (C39390 - C39391 + C39392 - C39393) * C38294) *
               C89247 * C89337 +
           ((C38295 * C1724 - C38291 * C1734 + C38297 * C1723 -
             C38292 * C1732) *
                C38365 +
            (C38295 * C2040 - C38291 * C2048 + C38297 * C2041 -
             C38292 * C2049) *
                C38293 +
            (C43327 - C43328 + C43329 - C43330) * C38366 +
            (C43331 - C43332 + C43333 - C43334) * C38294) *
               C89247 * C89338 +
           ((C38291 * C1736 - C38295 * C1725 + C38292 * C1738 -
             C38297 * C1726) *
                C38365 +
            (C38291 * C2051 - C38295 * C2043 + C38292 * C2052 -
             C38297 * C2044) *
                C38293 +
            (C45931 - C45932 + C45933 - C45934) * C38366 +
            (C45935 - C45936 + C45937 - C45938) * C38294) *
               C89247 * C11948) *
              C89307 +
          (((C39387 - C39386 + C39389 - C39388) * C38365 +
            (C39391 - C39390 + C39393 - C39392) * C38293 +
            (C39394 - C39395 + C39396 - C39397) * C38366 +
            (C39398 - C39399 + C39400 - C39401) * C38294) *
               C89247 * C89337 +
           ((C43328 - C43327 + C43330 - C43329) * C38365 +
            (C43332 - C43331 + C43334 - C43333) * C38293 +
            (C48891 - C48892 + C48893 - C48894) * C38366 +
            (C48895 - C48896 + C48897 - C48898) * C38294) *
               C89247 * C89338 +
           ((C45932 - C45931 + C45934 - C45933) * C38365 +
            (C45936 - C45935 + C45938 - C45937) * C38293 +
            (C38295 * C14601 - C38291 * C14603 + C38297 * C14602 -
             C38292 * C14605) *
                C38366 +
            (C38295 * C14839 - C38291 * C14841 + C38297 * C14840 -
             C38292 * C14842) *
                C38294) *
               C89247 * C11948) *
              C89189) *
         C89118) /
        (p * q * std::sqrt(p + q));
    d2eeyy[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C38365 * C181 - C38589 * C106 - C38365 * C346 + C38293 * C409 +
             C38366 * C923 - C38590 * C819 - C38366 * C1135 + C38294 * C1227) *
                C38291 +
            (C38628 + C38629) * C38292) *
               C89247 * C89337 -
           ((C40501 + C40502) * C38292 +
            (C38366 * C4211 - C38590 * C4097 - C38366 * C4439 + C38294 * C4545 +
             C38365 * C1828 - C38589 * C1724 - C38365 * C2040 +
             C38293 * C2132) *
                C38291) *
               C89247 * C89338 +
           ((C38365 * C1831 - C38589 * C1725 - C38365 * C2043 + C38293 * C2133 +
             C38366 * C6333 - C38590 * C6249 - C38366 * C6493 +
             C38294 * C6575) *
                C38291 +
            (C40503 + C40504) * C38292) *
               C89247 * C11948) *
              C89307 +
          (((C38365 * C4211 - C38589 * C4097 - C38365 * C4439 + C38293 * C4545 +
             C38366 * C8600 - C38590 * C8516 - C38366 * C8760 +
             C38294 * C8842) *
                C38291 +
            (C43485 + C43486) * C38292) *
               C89247 * C89338 -
           ((C39540 + C39541) * C38292 +
            (C38366 * C926 - C38590 * C820 - C38366 * C1138 + C38294 * C1228 +
             C38365 * C923 - C38589 * C819 - C38365 * C1135 + C38293 * C1227) *
                C38291) *
               C89247 * C89337 -
           ((C38366 * C14684 - C38590 * C14602 - C38366 * C14840 +
             C38294 * C14918 + C38365 * C6334 - C38589 * C6248 -
             C38365 * C6494 + C38293 * C6574) *
                C38292 +
            (C38366 * C14683 - C38590 * C14601 - C38366 * C14839 +
             C38294 * C14917 + C38365 * C6333 - C38589 * C6249 -
             C38365 * C6493 + C38293 * C6575) *
                C38291) *
               C89247 * C11948) *
              C89189) *
         C89118) /
        (p * q * std::sqrt(p + q));
    d2eeyz[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C38365 +
             (C89247 * C493 - C263 * C346) * C38293 +
             (C13956 - C13957) * C38366 + (C14240 - C14241) * C38294) *
                C38291 +
            ((C277 - C278) * C38365 + (C500 - C501) * C38293 + C39282 * C38366 +
             C39642 * C38294) *
                C38292) *
               C89337 +
           (((C263 * C1724 - C89247 * C1934) * C38365 +
             (C263 * C2040 - C89247 * C2240) * C38293 +
             (C16928 - C16929) * C38366 + (C17258 - C17259) * C38294) *
                C38291 +
            ((C1951 - C1952) * C38365 + (C2249 - C2250) * C38293 +
             C43193 * C38366 + C43617 * C38294) *
                C38292) *
               C89338 +
           (((C89247 * C1937 - C263 * C1725) * C38365 +
             (C89247 * C2243 - C263 * C2043) * C38293 +
             (C19012 - C19013) * C38366 + (C19254 - C19255) * C38294) *
                C38291 +
            ((C1959 - C1960) * C38365 + (C2253 - C2254) * C38293 +
             (C40277 - C40278) * C38366 + (C40603 - C40604) * C38294) *
                C38292) *
               C11948) *
              C89307 +
          ((((C13957 - C13956) * C38365 + (C14241 - C14240) * C38293 +
             (C13961 - C13960) * C38366 + (C14243 - C14242) * C38294) *
                C38291 +
            (C39284 * C38365 + C39643 * C38293 + C13968 * C38366 +
             C14246 * C38294) *
                C38292) *
               C89337 +
           (((C16929 - C16928) * C38365 + (C17259 - C17258) * C38293 +
             (C16933 - C16932) * C38366 + (C17261 - C17260) * C38294) *
                C38291 +
            (C43195 * C38365 + C43618 * C38293 + (C16936 - C16937) * C38366 +
             (C17262 - C17263) * C38294) *
                C38292) *
               C89338 +
           (((C19013 - C19012) * C38365 + (C19255 - C19254) * C38293 +
             (C19017 - C19016) * C38366 + (C19257 - C19256) * C38294) *
                C38291 +
            ((C40278 - C40277) * C38365 + (C40604 - C40603) * C38293 +
             (C263 * C14602 - C89247 * C14762) * C38366 +
             (C263 * C14840 - C89247 * C14994) * C38294) *
                C38292) *
               C11948) *
              C89189) *
         C89118) /
        (p * q * std::sqrt(p + q));
    d2eezx[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                 C263 +
             (C38291 * C571 - C38295 * C565 + C38292 * C572 - C38297 * C566) *
                 C89247) *
                C38293 +
            ((C39386 - C39387 + C39388 - C39389) * C263 +
             (C39743 - C39744 + C39745 - C39746) * C89247) *
                C38294) *
               C89337 +
           (((C38295 * C1724 - C38291 * C1734 + C38297 * C1723 -
              C38292 * C1732) *
                 C263 +
             (C38295 * C2330 - C38291 * C2338 + C38297 * C2331 -
              C38292 * C2339) *
                 C89247) *
                C38293 +
            ((C43327 - C43328 + C43329 - C43330) * C263 +
             (C43749 - C43750 + C43751 - C43752) * C89247) *
                C38294) *
               C89338 +
           (((C38291 * C1736 - C38295 * C1725 + C38292 * C1738 -
              C38297 * C1726) *
                 C263 +
             (C38291 * C2341 - C38295 * C2333 + C38292 * C2342 -
              C38297 * C2334) *
                 C89247) *
                C38293 +
            ((C45931 - C45932 + C45933 - C45934) * C263 +
             (C46233 - C46234 + C46235 - C46236) * C89247) *
                C38294) *
               C11948) *
              C89307 +
          ((((C39387 - C39386 + C39389 - C39388) * C263 +
             (C39744 - C39743 + C39746 - C39745) * C89247) *
                C38293 +
            ((C39394 - C39395 + C39396 - C39397) * C263 +
             (C39747 - C39748 + C39749 - C39750) * C89247) *
                C38294) *
               C89337 +
           (((C43328 - C43327 + C43330 - C43329) * C263 +
             (C43750 - C43749 + C43752 - C43751) * C89247) *
                C38293 +
            ((C48891 - C48892 + C48893 - C48894) * C263 +
             (C49193 - C49194 + C49195 - C49196) * C89247) *
                C38294) *
               C89338 +
           (((C45932 - C45931 + C45934 - C45933) * C263 +
             (C46234 - C46233 + C46236 - C46235) * C89247) *
                C38293 +
            ((C38295 * C14601 - C38291 * C14603 + C38297 * C14602 -
              C38292 * C14605) *
                 C263 +
             (C38295 * C15069 - C38291 * C15071 + C38297 * C15070 -
              C38292 * C15072) *
                 C89247) *
                C38294) *
               C11948) *
              C89189) *
         C89118) /
        (p * q * std::sqrt(p + q));
    d2eezy[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                 C263 +
             (C38293 * C627 - C38365 * C565 + C38294 * C1515 - C38366 * C1425) *
                 C89247) *
                C38291 +
            ((C38368 - C38369 + C38370 - C38371) * C263 +
             (C38832 - C38833 + C38834 - C38835) * C89247) *
                C38292) *
               C89337 +
           (((C38365 * C1724 - C38293 * C1828 + C38366 * C4097 -
              C38294 * C4211) *
                 C263 +
             (C38365 * C2330 - C38293 * C2420 + C38366 * C4767 -
              C38294 * C4873) *
                 C89247) *
                C38291 +
            ((C40163 - C40164 + C40165 - C40166) * C263 +
             (C40801 - C40802 + C40803 - C40804) * C89247) *
                C38292) *
               C89338 +
           (((C38293 * C1831 - C38365 * C1725 + C38294 * C6333 -
              C38366 * C6249) *
                 C263 +
             (C38293 * C2423 - C38365 * C2333 + C38294 * C6807 -
              C38366 * C6727) *
                 C89247) *
                C38291 +
            ((C40171 - C40172 + C40173 - C40174) * C263 +
             (C40805 - C40806 + C40807 - C40808) * C89247) *
                C38292) *
               C11948) *
              C89307 +
          ((((C38365 * C819 - C38293 * C923 + C38366 * C820 - C38294 * C926) *
                 C263 +
             (C38365 * C1425 - C38293 * C1515 + C38366 * C1428 -
              C38294 * C1518) *
                 C89247) *
                C38291 +
            ((C39168 - C39169 + C39170 - C39171) * C263 +
             (C39857 - C39858 + C39859 - C39860) * C89247) *
                C38292) *
               C89337 +
           (((C38293 * C4211 - C38365 * C4097 + C38294 * C8600 -
              C38366 * C8516) *
                 C263 +
             (C38293 * C4873 - C38365 * C4767 + C38294 * C9074 -
              C38366 * C8994) *
                 C89247) *
                C38291 +
            ((C43055 - C43056 + C43057 - C43058) * C263 +
             (C43887 - C43888 + C43889 - C43890) * C89247) *
                C38292) *
               C89338 +
           (((C38365 * C6249 - C38293 * C6333 + C38366 * C14601 -
              C38294 * C14683) *
                 C263 +
             (C38365 * C6727 - C38293 * C6807 + C38366 * C15069 -
              C38294 * C15147) *
                 C89247) *
                C38291 +
            ((C38365 * C6248 - C38293 * C6334 + C38366 * C14602 -
              C38294 * C14684) *
                 C263 +
             (C38365 * C6728 - C38293 * C6808 + C38366 * C15070 -
              C38294 * C15148) *
                 C89247) *
                C38292) *
               C11948) *
              C89189) *
         C89118) /
        (p * q * std::sqrt(p + q));
    d2eezz[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) *
                 C38293 +
             C14524 * C38294) *
                C38291 +
            (C38910 + C38911) * C38292) *
               C89337 -
           ((C40907 + C40908) * C38292 +
            (C17593 * C38294 +
             (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
                 C38293) *
                C38291) *
               C89338 +
           (((C263 * C1937 - C699 * C1725 - C263 * C2333 + C89247 * C2513) *
                 C38293 +
             C19500 * C38294) *
                C38291 +
            (C40909 + C40917) * C38292) *
               C11948) *
              C89307 +
          (((C17593 * C38293 + C17592 * C38294) * C38291 +
            (C44021 + C44022) * C38292) *
               C89338 -
           ((C39963 + C39964) * C38292 +
            (C14525 * C38294 + C14524 * C38293) * C38291) *
               C89337 -
           (((C263 * C14762 - C699 * C14602 - C263 * C15070 + C89247 * C15224) *
                 C38294 +
             C40916 * C38293) *
                C38292 +
            (C19501 * C38294 + C19500 * C38293) * C38291) *
               C11948) *
              C89189) *
         C89118) /
        (p * q * std::sqrt(p + q));
    d2eexx[12] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C38295 * C112 - C38296 * C106 - C38295 * C113 + C38291 * C124 +
             C38297 * C114 - C38298 * C107 - C38297 * C115 + C38292 * C125) *
                C89247 * C38293 +
            (C39062 + C39063) * C89247 * C38294) *
               C9228 -
           ((C42921 + C42922) * C89247 * C38294 +
            (C38297 * C1732 - C38298 * C1723 - C38297 * C1733 + C38292 * C1747 +
             C38295 * C1734 - C38296 * C1724 - C38295 * C1735 +
             C38291 * C1748) *
                C89247 * C38293) *
               C89217) *
              C812 +
          (((C42922 + C42921) * C89247 * C38293 +
            (C48595 + C48596) * C89247 * C38294) *
               C89217 -
           ((C39064 + C39065) * C89247 * C38294 +
            (C39063 + C39062) * C89247 * C38293) *
               C9228) *
              C813 +
          (((C39065 + C39064) * C89247 * C38293 +
            (C44983 + C44984) * C89247 * C38294) *
               C9228 -
           ((C38297 * C16687 - C38298 * C16684 - C38297 * C16688 +
             C38292 * C16690 + C38295 * C16685 - C38296 * C16683 -
             C38295 * C16686 + C38291 * C16689) *
                C89247 * C38294 +
            (C48596 + C48595) * C89247 * C38293) *
               C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C38295 * C112 - C38296 * C106 - C38295 * C113 + C38291 * C124 +
             C38297 * C114 - C38298 * C107 - C38297 * C115 + C38292 * C125) *
                C89247 * C38293 +
            (C39062 + C39063) * C89247 * C38294) *
               C9228 -
           ((C42921 + C42922) * C89247 * C38294 +
            (C38297 * C1732 - C38298 * C1723 - C38297 * C1733 + C38292 * C1747 +
             C38295 * C1734 - C38296 * C1724 - C38295 * C1735 +
             C38291 * C1748) *
                C89247 * C38293) *
               C89217) *
              C89137 * C5075 +
          (((C38295 * C1732 - C38296 * C1723 - C38295 * C1733 + C38291 * C1747 +
             C38297 * C1730 - C38298 * C1722 - C38297 * C1731 +
             C38292 * C1746) *
                C89247 * C38293 +
            (C42923 + C42924) * C89247 * C38294) *
               C89217 -
           ((C39067 + C39066) * C89247 * C38294 +
            (C38297 * C116 - C38298 * C108 - C38297 * C117 + C38292 * C126 +
             C38295 * C114 - C38296 * C107 - C38295 * C115 + C38291 * C125) *
                C89247 * C38293) *
               C9228) *
              C89137 * C5076 +
          (((C38295 * C116 - C38296 * C108 - C38295 * C117 + C38291 * C126 +
             C38297 * C118 - C38298 * C109 - C38297 * C119 + C38292 * C127) *
                C89247 * C38293 +
            (C41028 + C41029) * C89247 * C38294) *
               C9228 -
           ((C38297 * C4107 - C38298 * C4100 - C38297 * C4108 + C38292 * C4112 +
             C38295 * C4105 - C38296 * C4099 - C38295 * C4106 +
             C38291 * C4111) *
                C89247 * C38294 +
            (C38297 * C1742 - C38298 * C1728 - C38297 * C1743 + C38292 * C1752 +
             C38295 * C1730 - C38296 * C1722 - C38295 * C1731 +
             C38291 * C1746) *
                C89247 * C38293) *
               C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C38295 * C112 - C38296 * C106 - C38295 * C113 + C38291 * C124 +
            C38297 * C114 - C38298 * C107 - C38297 * C115 + C38292 * C125) *
               C89247 * C38293 +
           (C39062 + C39063) * C89247 * C38294) *
              C10538 -
          ((C42921 + C42922) * C89247 * C38294 +
           (C38297 * C1732 - C38298 * C1723 - C38297 * C1733 + C38292 * C1747 +
            C38295 * C1734 - C38296 * C1724 - C38295 * C1735 + C38291 * C1748) *
               C89247 * C38293) *
              C10539 +
          ((C38295 * C1736 - C38296 * C1725 - C38295 * C1737 + C38291 * C1749 +
            C38297 * C1738 - C38298 * C1726 - C38297 * C1739 + C38292 * C1750) *
               C89247 * C38293 +
           (C45635 + C45636) * C89247 * C38294) *
              C10540 -
          ((C38297 * C29240 - C38298 * C29239 - C38297 * C29241 +
            C38292 * C29242 + C38295 * C23156 - C38296 * C23153 -
            C38295 * C23157 + C38291 * C23159) *
               C89247 * C38294 +
           (C38297 * C10547 - C38298 * C10543 - C38297 * C10548 +
            C38292 * C10552 + C38295 * C10549 - C38296 * C10544 -
            C38295 * C10550 + C38291 * C10553) *
               C89247 * C38293) *
              C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q));
    d2eexy[12] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                C38295 +
            (C38293 * C187 - C38365 * C113 + C38294 * C931 - C38366 * C830) *
                C38291 +
            (C38368 - C38369 + C38370 - C38371) * C38297 +
            (C38372 - C38373 + C38374 - C38375) * C38292) *
               C89247 * C9228 +
           ((C38365 * C1724 - C38293 * C1828 + C38366 * C4097 -
             C38294 * C4211) *
                C38295 +
            (C38365 * C1735 - C38293 * C1836 + C38366 * C4102 -
             C38294 * C4215) *
                C38291 +
            (C40163 - C40164 + C40165 - C40166) * C38297 +
            (C40167 - C40168 + C40169 - C40170) * C38292) *
               C89247 * C89217) *
              C812 +
          (((C38365 * C819 - C38293 * C923 + C38366 * C820 - C38294 * C926) *
                C38295 +
            (C38365 * C830 - C38293 * C931 + C38366 * C832 - C38294 * C934) *
                C38291 +
            (C39168 - C39169 + C39170 - C39171) * C38297 +
            (C39172 - C39173 + C39174 - C39175) * C38292) *
               C89247 * C9228 +
           ((C38293 * C4211 - C38365 * C4097 + C38294 * C8600 -
             C38366 * C8516) *
                C38295 +
            (C38293 * C4215 - C38365 * C4102 + C38294 * C8603 -
             C38366 * C8522) *
                C38291 +
            (C43055 - C43056 + C43057 - C43058) * C38297 +
            (C43059 - C43060 + C43061 - C43062) * C38292) *
               C89247 * C89217) *
              C813 +
          (((C38293 * C926 - C38365 * C820 + C38294 * C5787 - C38366 * C5727) *
                C38295 +
            (C38293 * C934 - C38365 * C832 + C38294 * C5790 - C38366 * C5733) *
                C38291 +
            (C39176 - C39177 + C39178 - C39179) * C38297 +
            (C39180 - C39181 + C39182 - C39183) * C38292) *
               C89247 * C9228 +
           ((C38365 * C8516 - C38293 * C8600 + C38366 * C16683 -
             C38294 * C16821) *
                C38295 +
            (C38365 * C8522 - C38293 * C8603 + C38366 * C16686 -
             C38294 * C16823) *
                C38291 +
            (C38365 * C8515 - C38293 * C8601 + C38366 * C16684 -
             C38294 * C16822) *
                C38297 +
            (C38365 * C8520 - C38293 * C8604 + C38366 * C16688 -
             C38294 * C16824) *
                C38292) *
               C89247 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                C38295 +
            (C38293 * C187 - C38365 * C113 + C38294 * C931 - C38366 * C830) *
                C38291 +
            (C38368 - C38369 + C38370 - C38371) * C38297 +
            (C38372 - C38373 + C38374 - C38375) * C38292) *
               C89247 * C9228 +
           ((C38365 * C1724 - C38293 * C1828 + C38366 * C4097 -
             C38294 * C4211) *
                C38295 +
            (C38365 * C1735 - C38293 * C1836 + C38366 * C4102 -
             C38294 * C4215) *
                C38291 +
            (C40163 - C40164 + C40165 - C40166) * C38297 +
            (C40167 - C40168 + C40169 - C40170) * C38292) *
               C89247 * C89217) *
              C89137 * C5075 +
          (((C38369 - C38368 + C38371 - C38370) * C38295 +
            (C38373 - C38372 + C38375 - C38374) * C38291 +
            (C38376 - C38377 + C38378 - C38379) * C38297 +
            (C38380 - C38381 + C38382 - C38383) * C38292) *
               C89247 * C9228 +
           ((C40164 - C40163 + C40166 - C40165) * C38295 +
            (C40168 - C40167 + C40170 - C40169) * C38291 +
            (C42053 - C42054 + C42055 - C42056) * C38297 +
            (C42057 - C42058 + C42059 - C42060) * C38292) *
               C89247 * C89217) *
              C89137 * C5076 +
          (((C38377 - C38376 + C38379 - C38378) * C38295 +
            (C38381 - C38380 + C38383 - C38382) * C38291 +
            (C38384 - C38385 + C38386 - C38387) * C38297 +
            (C38388 - C38389 + C38390 - C38391) * C38292) *
               C89247 * C9228 +
           ((C42054 - C42053 + C42056 - C42055) * C38295 +
            (C42058 - C42057 + C42060 - C42059) * C38291 +
            (C38365 * C1728 - C38293 * C1834 + C38366 * C4100 -
             C38294 * C4214) *
                C38297 +
            (C38365 * C1743 - C38293 * C1842 + C38366 * C4108 -
             C38294 * C4218) *
                C38292) *
               C89247 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
               C38295 +
           (C38293 * C187 - C38365 * C113 + C38294 * C931 - C38366 * C830) *
               C38291 +
           (C38368 - C38369 + C38370 - C38371) * C38297 +
           (C38372 - C38373 + C38374 - C38375) * C38292) *
              C89247 * C10538 +
          ((C38365 * C1724 - C38293 * C1828 + C38366 * C4097 - C38294 * C4211) *
               C38295 +
           (C38365 * C1735 - C38293 * C1836 + C38366 * C4102 - C38294 * C4215) *
               C38291 +
           (C40163 - C40164 + C40165 - C40166) * C38297 +
           (C40167 - C40168 + C40169 - C40170) * C38292) *
              C89247 * C10539 +
          ((C38293 * C1831 - C38365 * C1725 + C38294 * C6333 - C38366 * C6249) *
               C38295 +
           (C38293 * C1839 - C38365 * C1737 + C38294 * C6336 - C38366 * C6255) *
               C38291 +
           (C40171 - C40172 + C40173 - C40174) * C38297 +
           (C40175 - C40176 + C40177 - C40178) * C38292) *
              C89247 * C10540 +
          ((C38365 * C10544 - C38293 * C10604 + C38366 * C23153 -
            C38294 * C23210) *
               C38295 +
           (C38365 * C10550 - C38293 * C10607 + C38366 * C23157 -
            C38294 * C23212) *
               C38291 +
           (C38365 * C10543 - C38293 * C10605 + C38366 * C29239 -
            C38294 * C29348) *
               C38297 +
           (C38365 * C10548 - C38293 * C10608 + C38366 * C29241 -
            C38294 * C29349) *
               C38292) *
              C89247 * C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q));
    d2eexz[12] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C38295 +
             (C89247 * C270 - C263 * C113) * C38291 + (C277 - C278) * C38297 +
             (C279 - C280) * C38292) *
                C38293 +
            ((C13956 - C13957) * C38295 + (C13958 - C13959) * C38291 +
             C39282 * C38297 + C39283 * C38292) *
                C38294) *
               C9228 +
           (((C263 * C1724 - C89247 * C1934) * C38295 +
             (C263 * C1735 - C89247 * C1942) * C38291 +
             (C1951 - C1952) * C38297 + (C1953 - C1954) * C38292) *
                C38293 +
            ((C16928 - C16929) * C38295 + (C16930 - C16931) * C38291 +
             C43193 * C38297 + C43194 * C38292) *
                C38294) *
               C89217) *
              C812 +
          ((((C13957 - C13956) * C38295 + (C13959 - C13958) * C38291 +
             C39284 * C38297 + C39285 * C38292) *
                C38293 +
            ((C13961 - C13960) * C38295 + (C13963 - C13962) * C38291 +
             C13968 * C38297 + C13969 * C38292) *
                C38294) *
               C9228 +
           (((C16929 - C16928) * C38295 + (C16931 - C16930) * C38291 +
             C43195 * C38297 + C43196 * C38292) *
                C38293 +
            ((C16933 - C16932) * C38295 + (C16935 - C16934) * C38291 +
             (C16936 - C16937) * C38297 + (C16938 - C16939) * C38292) *
                C38294) *
               C89217) *
              C813 +
          (((C13974 * C38295 + C13975 * C38291 + C39286 * C38297 +
             C39287 * C38292) *
                C38293 +
            ((C13965 - C13964) * C38295 + (C13967 - C13966) * C38291 +
             (C13970 - C13971) * C38297 + (C13972 - C13973) * C38292) *
                C38294) *
               C9228 +
           ((C21288 * C38295 + C21289 * C38291 + (C16937 - C16936) * C38297 +
             (C16939 - C16938) * C38292) *
                C38293 +
            ((C21291 - C21290) * C38295 + (C21293 - C21292) * C38291 +
             (C263 * C16684 - C89247 * C16924) * C38297 +
             (C263 * C16688 - C89247 * C16926) * C38292) *
                C38294) *
               C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C38295 +
             (C89247 * C270 - C263 * C113) * C38291 + (C277 - C278) * C38297 +
             (C279 - C280) * C38292) *
                C38293 +
            ((C13956 - C13957) * C38295 + (C13958 - C13959) * C38291 +
             C39282 * C38297 + C39283 * C38292) *
                C38294) *
               C9228 +
           (((C263 * C1724 - C89247 * C1934) * C38295 +
             (C263 * C1735 - C89247 * C1942) * C38291 +
             (C1951 - C1952) * C38297 + (C1953 - C1954) * C38292) *
                C38293 +
            ((C16928 - C16929) * C38295 + (C16930 - C16931) * C38291 +
             C43193 * C38297 + C43194 * C38292) *
                C38294) *
               C89217) *
              C89137 * C5075 +
          ((((C278 - C277) * C38295 + (C280 - C279) * C38291 +
             (C282 - C281) * C38297 + (C284 - C283) * C38292) *
                C38293 +
            (C39284 * C38295 + C39285 * C38291 + C2792 * C38297 +
             C2793 * C38292) *
                C38294) *
               C9228 +
           (((C1952 - C1951) * C38295 + (C1954 - C1953) * C38291 +
             (C1956 - C1955) * C38297 + (C1958 - C1957) * C38292) *
                C38293 +
            (C43195 * C38295 + C43196 * C38291 + (C4338 - C4339) * C38297 +
             (C4340 - C4341) * C38292) *
                C38294) *
               C89217) *
              C89137 * C5076 +
          (((C293 * C38295 + C294 * C38291 + (C286 - C285) * C38297 +
             (C288 - C287) * C38292) *
                C38293 +
            (C41234 * C38295 + C41235 * C38291 + (C2794 - C2795) * C38297 +
             (C2796 - C2797) * C38292) *
                C38294) *
               C9228 +
           ((C3515 * C38295 + C3516 * C38291 + (C3518 - C3517) * C38297 +
             (C3520 - C3519) * C38292) *
                C38293 +
            ((C4339 - C4338) * C38295 + (C4341 - C4340) * C38291 +
             (C263 * C4100 - C89247 * C4328) * C38297 +
             (C263 * C4108 - C89247 * C4332) * C38292) *
                C38294) *
               C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C38295 +
            (C89247 * C270 - C263 * C113) * C38291 + (C277 - C278) * C38297 +
            (C279 - C280) * C38292) *
               C38293 +
           ((C13956 - C13957) * C38295 + (C13958 - C13959) * C38291 +
            C39282 * C38297 + C39283 * C38292) *
               C38294) *
              C10538 +
          (((C263 * C1724 - C89247 * C1934) * C38295 +
            (C263 * C1735 - C89247 * C1942) * C38291 +
            (C1951 - C1952) * C38297 + (C1953 - C1954) * C38292) *
               C38293 +
           ((C16928 - C16929) * C38295 + (C16930 - C16931) * C38291 +
            C43193 * C38297 + C43194 * C38292) *
               C38294) *
              C10539 +
          (((C89247 * C1937 - C263 * C1725) * C38295 +
            (C89247 * C1945 - C263 * C1737) * C38291 +
            (C1959 - C1960) * C38297 + (C1961 - C1962) * C38292) *
               C38293 +
           ((C19012 - C19013) * C38295 + (C19014 - C19015) * C38291 +
            (C40277 - C40278) * C38297 + (C40279 - C40280) * C38292) *
               C38294) *
              C10540 +
          (((C263 * C10544 - C89247 * C10660) * C38295 +
            (C263 * C10550 - C89247 * C10663) * C38291 +
            (C263 * C10543 - C89247 * C10661) * C38297 +
            (C263 * C10548 - C89247 * C10664) * C38292) *
               C38293 +
           ((C263 * C23153 - C89247 * C23264) * C38295 +
            (C263 * C23157 - C89247 * C23266) * C38291 +
            (C263 * C29239 - C89247 * C29460) * C38297 +
            (C263 * C29241 - C89247 * C29461) * C38292) *
               C38294) *
              C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q));
    d2eeyx[12] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                C38365 +
            (C38291 * C352 - C38295 * C346 + C38292 * C353 - C38297 * C347) *
                C38293 +
            (C39386 - C39387 + C39388 - C39389) * C38366 +
            (C39390 - C39391 + C39392 - C39393) * C38294) *
               C89247 * C9228 +
           ((C38295 * C1724 - C38291 * C1734 + C38297 * C1723 -
             C38292 * C1732) *
                C38365 +
            (C38295 * C2040 - C38291 * C2048 + C38297 * C2041 -
             C38292 * C2049) *
                C38293 +
            (C43327 - C43328 + C43329 - C43330) * C38366 +
            (C43331 - C43332 + C43333 - C43334) * C38294) *
               C89247 * C89217) *
              C812 +
          (((C39387 - C39386 + C39389 - C39388) * C38365 +
            (C39391 - C39390 + C39393 - C39392) * C38293 +
            (C39394 - C39395 + C39396 - C39397) * C38366 +
            (C39398 - C39399 + C39400 - C39401) * C38294) *
               C89247 * C9228 +
           ((C43328 - C43327 + C43330 - C43329) * C38365 +
            (C43332 - C43331 + C43334 - C43333) * C38293 +
            (C48891 - C48892 + C48893 - C48894) * C38366 +
            (C48895 - C48896 + C48897 - C48898) * C38294) *
               C89247 * C89217) *
              C813 +
          (((C39395 - C39394 + C39397 - C39396) * C38365 +
            (C39399 - C39398 + C39401 - C39400) * C38293 +
            (C45183 - C45184 + C45185 - C45186) * C38366 +
            (C45187 - C45188 + C45189 - C45190) * C38294) *
               C89247 * C9228 +
           ((C48892 - C48891 + C48894 - C48893) * C38365 +
            (C48896 - C48895 + C48898 - C48897) * C38293 +
            (C38295 * C16683 - C38291 * C16685 + C38297 * C16684 -
             C38292 * C16687) *
                C38366 +
            (C38295 * C17037 - C38291 * C17039 + C38297 * C17038 -
             C38292 * C17040) *
                C38294) *
               C89247 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                C38365 +
            (C38291 * C352 - C38295 * C346 + C38292 * C353 - C38297 * C347) *
                C38293 +
            (C39386 - C39387 + C39388 - C39389) * C38366 +
            (C39390 - C39391 + C39392 - C39393) * C38294) *
               C89247 * C9228 +
           ((C38295 * C1724 - C38291 * C1734 + C38297 * C1723 -
             C38292 * C1732) *
                C38365 +
            (C38295 * C2040 - C38291 * C2048 + C38297 * C2041 -
             C38292 * C2049) *
                C38293 +
            (C43327 - C43328 + C43329 - C43330) * C38366 +
            (C43331 - C43332 + C43333 - C43334) * C38294) *
               C89247 * C89217) *
              C89137 * C5075 +
          (((C38295 * C107 - C38291 * C114 + C38297 * C108 - C38292 * C116) *
                C38365 +
            (C38295 * C347 - C38291 * C353 + C38297 * C348 - C38292 * C354) *
                C38293 +
            (C39402 - C39403 + C39404 - C39405) * C38366 +
            (C39406 - C39407 + C39408 - C39409) * C38294) *
               C89247 * C9228 +
           ((C38291 * C1732 - C38295 * C1723 + C38292 * C1730 -
             C38297 * C1722) *
                C38365 +
            (C38291 * C2049 - C38295 * C2041 + C38292 * C2050 -
             C38297 * C2042) *
                C38293 +
            (C43335 - C43336 + C43337 - C43338) * C38366 +
            (C43339 - C43340 + C43341 - C43342) * C38294) *
               C89247 * C89217) *
              C89137 * C5076 +
          (((C38291 * C116 - C38295 * C108 + C38292 * C118 - C38297 * C109) *
                C38365 +
            (C38291 * C354 - C38295 * C348 + C38292 * C355 - C38297 * C349) *
                C38293 +
            (C41334 - C41335 + C41336 - C41337) * C38366 +
            (C41338 - C41339 + C41340 - C41341) * C38294) *
               C89247 * C9228 +
           ((C38295 * C1722 - C38291 * C1730 + C38297 * C1728 -
             C38292 * C1742) *
                C38365 +
            (C38295 * C2042 - C38291 * C2050 + C38297 * C2046 -
             C38292 * C2054) *
                C38293 +
            (C38295 * C4099 - C38291 * C4105 + C38297 * C4100 -
             C38292 * C4107) *
                C38366 +
            (C38295 * C4441 - C38291 * C4445 + C38297 * C4442 -
             C38292 * C4446) *
                C38294) *
               C89247 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
               C38365 +
           (C38291 * C352 - C38295 * C346 + C38292 * C353 - C38297 * C347) *
               C38293 +
           (C39386 - C39387 + C39388 - C39389) * C38366 +
           (C39390 - C39391 + C39392 - C39393) * C38294) *
              C89247 * C10538 +
          ((C38295 * C1724 - C38291 * C1734 + C38297 * C1723 - C38292 * C1732) *
               C38365 +
           (C38295 * C2040 - C38291 * C2048 + C38297 * C2041 - C38292 * C2049) *
               C38293 +
           (C43327 - C43328 + C43329 - C43330) * C38366 +
           (C43331 - C43332 + C43333 - C43334) * C38294) *
              C89247 * C10539 +
          ((C38291 * C1736 - C38295 * C1725 + C38292 * C1738 - C38297 * C1726) *
               C38365 +
           (C38291 * C2051 - C38295 * C2043 + C38292 * C2052 - C38297 * C2044) *
               C38293 +
           (C45931 - C45932 + C45933 - C45934) * C38366 +
           (C45935 - C45936 + C45937 - C45938) * C38294) *
              C89247 * C10540 +
          ((C38295 * C10544 - C38291 * C10549 + C38297 * C10543 -
            C38292 * C10547) *
               C38365 +
           (C38295 * C10716 - C38291 * C10719 + C38297 * C10717 -
            C38292 * C10720) *
               C38293 +
           (C38295 * C23153 - C38291 * C23156 + C38297 * C29239 -
            C38292 * C29240) *
               C38366 +
           (C38295 * C23318 - C38291 * C23320 + C38297 * C29560 -
            C38292 * C29561) *
               C38294) *
              C89247 * C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q));
    d2eeyy[12] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C38365 * C181 - C38589 * C106 - C38365 * C346 + C38293 * C409 +
             C38366 * C923 - C38590 * C819 - C38366 * C1135 + C38294 * C1227) *
                C38291 +
            (C38628 + C38629) * C38292) *
               C89247 * C9228 -
           ((C40501 + C40502) * C38292 +
            (C38366 * C4211 - C38590 * C4097 - C38366 * C4439 + C38294 * C4545 +
             C38365 * C1828 - C38589 * C1724 - C38365 * C2040 +
             C38293 * C2132) *
                C38291) *
               C89247 * C89217) *
              C812 +
          (((C38365 * C4211 - C38589 * C4097 - C38365 * C4439 + C38293 * C4545 +
             C38366 * C8600 - C38590 * C8516 - C38366 * C8760 +
             C38294 * C8842) *
                C38291 +
            (C43485 + C43486) * C38292) *
               C89247 * C89217 -
           ((C39540 + C39541) * C38292 +
            (C38366 * C926 - C38590 * C820 - C38366 * C1138 + C38294 * C1228 +
             C38365 * C923 - C38589 * C819 - C38365 * C1135 + C38293 * C1227) *
                C38291) *
               C89247 * C9228) *
              C813 +
          (((C38365 * C926 - C38589 * C820 - C38365 * C1138 + C38293 * C1228 +
             C38366 * C5787 - C38590 * C5727 - C38366 * C5899 +
             C38294 * C5957) *
                C38291 +
            (C39542 + C39543) * C38292) *
               C89247 * C9228 -
           ((C38366 * C16822 - C38590 * C16684 - C38366 * C17038 +
             C38294 * C17156 + C38365 * C8601 - C38589 * C8515 -
             C38365 * C8761 + C38293 * C8841) *
                C38292 +
            (C38366 * C16821 - C38590 * C16683 - C38366 * C17037 +
             C38294 * C17155 + C38365 * C8600 - C38589 * C8516 -
             C38365 * C8760 + C38293 * C8842) *
                C38291) *
               C89247 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C38365 * C181 - C38589 * C106 - C38365 * C346 + C38293 * C409 +
             C38366 * C923 - C38590 * C819 - C38366 * C1135 + C38294 * C1227) *
                C38291 +
            (C38628 + C38629) * C38292) *
               C89247 * C9228 -
           ((C40501 + C40502) * C38292 +
            (C38366 * C4211 - C38590 * C4097 - C38366 * C4439 + C38294 * C4545 +
             C38365 * C1828 - C38589 * C1724 - C38365 * C2040 +
             C38293 * C2132) *
                C38291) *
               C89247 * C89217) *
              C89137 * C5075 +
          (((C40502 + C40501) * C38291 + (C42367 + C42368) * C38292) * C89247 *
               C89217 -
           ((C38630 + C38631) * C38292 + (C38629 + C38628) * C38291) * C89247 *
               C9228) *
              C89137 * C5076 +
          (((C38631 + C38630) * C38291 + (C38632 + C38633) * C38292) * C89247 *
               C9228 -
           ((C38366 * C4214 - C38590 * C4100 - C38366 * C4442 + C38294 * C4548 +
             C38365 * C1834 - C38589 * C1728 - C38365 * C2046 +
             C38293 * C2136) *
                C38292 +
            (C42368 + C42367) * C38291) *
               C89247 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C38365 * C181 - C38589 * C106 - C38365 * C346 + C38293 * C409 +
            C38366 * C923 - C38590 * C819 - C38366 * C1135 + C38294 * C1227) *
               C38291 +
           (C38628 + C38629) * C38292) *
              C89247 * C10538 -
          ((C40501 + C40502) * C38292 +
           (C38366 * C4211 - C38590 * C4097 - C38366 * C4439 + C38294 * C4545 +
            C38365 * C1828 - C38589 * C1724 - C38365 * C2040 + C38293 * C2132) *
               C38291) *
              C89247 * C10539 +
          ((C38365 * C1831 - C38589 * C1725 - C38365 * C2043 + C38293 * C2133 +
            C38366 * C6333 - C38590 * C6249 - C38366 * C6493 + C38294 * C6575) *
               C38291 +
           (C40503 + C40504) * C38292) *
              C89247 * C10540 -
          ((C38366 * C29348 - C38590 * C29239 - C38366 * C29560 +
            C38294 * C29664 + C38365 * C10605 - C38589 * C10543 -
            C38365 * C10717 + C38293 * C10773) *
               C38292 +
           (C38366 * C23210 - C38590 * C23153 - C38366 * C23318 +
            C38294 * C23373 + C38365 * C10604 - C38589 * C10544 -
            C38365 * C10716 + C38293 * C10774) *
               C38291) *
              C89247 * C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q));
    d2eeyz[12] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C38365 +
             (C89247 * C493 - C263 * C346) * C38293 +
             (C13956 - C13957) * C38366 + (C14240 - C14241) * C38294) *
                C38291 +
            ((C277 - C278) * C38365 + (C500 - C501) * C38293 + C39282 * C38366 +
             C39642 * C38294) *
                C38292) *
               C9228 +
           (((C263 * C1724 - C89247 * C1934) * C38365 +
             (C263 * C2040 - C89247 * C2240) * C38293 +
             (C16928 - C16929) * C38366 + (C17258 - C17259) * C38294) *
                C38291 +
            ((C1951 - C1952) * C38365 + (C2249 - C2250) * C38293 +
             C43193 * C38366 + C43617 * C38294) *
                C38292) *
               C89217) *
              C812 +
          ((((C13957 - C13956) * C38365 + (C14241 - C14240) * C38293 +
             (C13961 - C13960) * C38366 + (C14243 - C14242) * C38294) *
                C38291 +
            (C39284 * C38365 + C39643 * C38293 + C13968 * C38366 +
             C14246 * C38294) *
                C38292) *
               C9228 +
           (((C16929 - C16928) * C38365 + (C17259 - C17258) * C38293 +
             (C16933 - C16932) * C38366 + (C17261 - C17260) * C38294) *
                C38291 +
            (C43195 * C38365 + C43618 * C38293 + (C16936 - C16937) * C38366 +
             (C17262 - C17263) * C38294) *
                C38292) *
               C89217) *
              C813 +
          (((C13974 * C38365 + C14249 * C38293 + (C13965 - C13964) * C38366 +
             (C14245 - C14244) * C38294) *
                C38291 +
            (C39286 * C38365 + C39644 * C38293 + (C13970 - C13971) * C38366 +
             (C14247 - C14248) * C38294) *
                C38292) *
               C9228 +
           ((C21288 * C38365 + C21529 * C38293 + (C21291 - C21290) * C38366 +
             (C21531 - C21530) * C38294) *
                C38291 +
            ((C16937 - C16936) * C38365 + (C17263 - C17262) * C38293 +
             (C263 * C16684 - C89247 * C16924) * C38366 +
             (C263 * C17038 - C89247 * C17256) * C38294) *
                C38292) *
               C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C38365 +
             (C89247 * C493 - C263 * C346) * C38293 +
             (C13956 - C13957) * C38366 + (C14240 - C14241) * C38294) *
                C38291 +
            ((C277 - C278) * C38365 + (C500 - C501) * C38293 + C39282 * C38366 +
             C39642 * C38294) *
                C38292) *
               C9228 +
           (((C263 * C1724 - C89247 * C1934) * C38365 +
             (C263 * C2040 - C89247 * C2240) * C38293 +
             (C16928 - C16929) * C38366 + (C17258 - C17259) * C38294) *
                C38291 +
            ((C1951 - C1952) * C38365 + (C2249 - C2250) * C38293 +
             C43193 * C38366 + C43617 * C38294) *
                C38292) *
               C89217) *
              C89137 * C5075 +
          ((((C278 - C277) * C38365 + (C501 - C500) * C38293 + C39284 * C38366 +
             C39643 * C38294) *
                C38291 +
            ((C282 - C281) * C38365 + (C504 - C503) * C38293 + C2792 * C38366 +
             C3032 * C38294) *
                C38292) *
               C9228 +
           (((C1952 - C1951) * C38365 + (C2250 - C2249) * C38293 +
             C43195 * C38366 + C43618 * C38294) *
                C38291 +
            ((C1956 - C1955) * C38365 + (C2252 - C2251) * C38293 +
             (C4338 - C4339) * C38366 + (C4668 - C4669) * C38294) *
                C38292) *
               C89217) *
              C89137 * C5076 +
          (((C293 * C38365 + C510 * C38293 + C41234 * C38366 +
             C41552 * C38294) *
                C38291 +
            ((C286 - C285) * C38365 + (C507 - C506) * C38293 +
             (C2794 - C2795) * C38366 + (C3033 - C3034) * C38294) *
                C38292) *
               C9228 +
           ((C3515 * C38365 + C3755 * C38293 + (C4339 - C4338) * C38366 +
             (C4669 - C4668) * C38294) *
                C38291 +
            ((C3518 - C3517) * C38365 + (C3757 - C3756) * C38293 +
             (C263 * C4100 - C89247 * C4328) * C38366 +
             (C263 * C4442 - C89247 * C4664) * C38294) *
                C38292) *
               C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C38365 +
            (C89247 * C493 - C263 * C346) * C38293 +
            (C13956 - C13957) * C38366 + (C14240 - C14241) * C38294) *
               C38291 +
           ((C277 - C278) * C38365 + (C500 - C501) * C38293 + C39282 * C38366 +
            C39642 * C38294) *
               C38292) *
              C10538 +
          (((C263 * C1724 - C89247 * C1934) * C38365 +
            (C263 * C2040 - C89247 * C2240) * C38293 +
            (C16928 - C16929) * C38366 + (C17258 - C17259) * C38294) *
               C38291 +
           ((C1951 - C1952) * C38365 + (C2249 - C2250) * C38293 +
            C43193 * C38366 + C43617 * C38294) *
               C38292) *
              C10539 +
          (((C89247 * C1937 - C263 * C1725) * C38365 +
            (C89247 * C2243 - C263 * C2043) * C38293 +
            (C19012 - C19013) * C38366 + (C19254 - C19255) * C38294) *
               C38291 +
           ((C1959 - C1960) * C38365 + (C2253 - C2254) * C38293 +
            (C40277 - C40278) * C38366 + (C40603 - C40604) * C38294) *
               C38292) *
              C10540 +
          (((C263 * C10544 - C89247 * C10660) * C38365 +
            (C263 * C10716 - C89247 * C10825) * C38293 +
            (C263 * C23153 - C89247 * C23264) * C38366 +
            (C263 * C23318 - C89247 * C23424) * C38294) *
               C38291 +
           ((C263 * C10543 - C89247 * C10661) * C38365 +
            (C263 * C10717 - C89247 * C10826) * C38293 +
            (C263 * C29239 - C89247 * C29460) * C38366 +
            (C263 * C29560 - C89247 * C29788) * C38294) *
               C38292) *
              C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q));
    d2eezx[12] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                 C263 +
             (C38291 * C571 - C38295 * C565 + C38292 * C572 - C38297 * C566) *
                 C89247) *
                C38293 +
            ((C39386 - C39387 + C39388 - C39389) * C263 +
             (C39743 - C39744 + C39745 - C39746) * C89247) *
                C38294) *
               C9228 +
           (((C38295 * C1724 - C38291 * C1734 + C38297 * C1723 -
              C38292 * C1732) *
                 C263 +
             (C38295 * C2330 - C38291 * C2338 + C38297 * C2331 -
              C38292 * C2339) *
                 C89247) *
                C38293 +
            ((C43327 - C43328 + C43329 - C43330) * C263 +
             (C43749 - C43750 + C43751 - C43752) * C89247) *
                C38294) *
               C89217) *
              C812 +
          ((((C39387 - C39386 + C39389 - C39388) * C263 +
             (C39744 - C39743 + C39746 - C39745) * C89247) *
                C38293 +
            ((C39394 - C39395 + C39396 - C39397) * C263 +
             (C39747 - C39748 + C39749 - C39750) * C89247) *
                C38294) *
               C9228 +
           (((C43328 - C43327 + C43330 - C43329) * C263 +
             (C43750 - C43749 + C43752 - C43751) * C89247) *
                C38293 +
            ((C48891 - C48892 + C48893 - C48894) * C263 +
             (C49193 - C49194 + C49195 - C49196) * C89247) *
                C38294) *
               C89217) *
              C813 +
          ((((C39395 - C39394 + C39397 - C39396) * C263 +
             (C39748 - C39747 + C39750 - C39749) * C89247) *
                C38293 +
            ((C45183 - C45184 + C45185 - C45186) * C263 +
             (C45389 - C45390 + C45391 - C45392) * C89247) *
                C38294) *
               C9228 +
           (((C48892 - C48891 + C48894 - C48893) * C263 +
             (C49194 - C49193 + C49196 - C49195) * C89247) *
                C38293 +
            ((C38295 * C16683 - C38291 * C16685 + C38297 * C16684 -
              C38292 * C16687) *
                 C263 +
             (C38295 * C17361 - C38291 * C17363 + C38297 * C17362 -
              C38292 * C17364) *
                 C89247) *
                C38294) *
               C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                 C263 +
             (C38291 * C571 - C38295 * C565 + C38292 * C572 - C38297 * C566) *
                 C89247) *
                C38293 +
            ((C39386 - C39387 + C39388 - C39389) * C263 +
             (C39743 - C39744 + C39745 - C39746) * C89247) *
                C38294) *
               C9228 +
           (((C38295 * C1724 - C38291 * C1734 + C38297 * C1723 -
              C38292 * C1732) *
                 C263 +
             (C38295 * C2330 - C38291 * C2338 + C38297 * C2331 -
              C38292 * C2339) *
                 C89247) *
                C38293 +
            ((C43327 - C43328 + C43329 - C43330) * C263 +
             (C43749 - C43750 + C43751 - C43752) * C89247) *
                C38294) *
               C89217) *
              C89137 * C5075 +
          ((((C38295 * C107 - C38291 * C114 + C38297 * C108 - C38292 * C116) *
                 C263 +
             (C38295 * C566 - C38291 * C572 + C38297 * C567 - C38292 * C573) *
                 C89247) *
                C38293 +
            ((C39402 - C39403 + C39404 - C39405) * C263 +
             (C39751 - C39752 + C39753 - C39754) * C89247) *
                C38294) *
               C9228 +
           (((C38291 * C1732 - C38295 * C1723 + C38292 * C1730 -
              C38297 * C1722) *
                 C263 +
             (C38291 * C2339 - C38295 * C2331 + C38292 * C2340 -
              C38297 * C2332) *
                 C89247) *
                C38293 +
            ((C43335 - C43336 + C43337 - C43338) * C263 +
             (C43753 - C43754 + C43755 - C43756) * C89247) *
                C38294) *
               C89217) *
              C89137 * C5076 +
          ((((C38291 * C116 - C38295 * C108 + C38292 * C118 - C38297 * C109) *
                 C263 +
             (C38291 * C573 - C38295 * C567 + C38292 * C574 - C38297 * C568) *
                 C89247) *
                C38293 +
            ((C41334 - C41335 + C41336 - C41337) * C263 +
             (C41651 - C41652 + C41653 - C41654) * C89247) *
                C38294) *
               C9228 +
           (((C38295 * C1722 - C38291 * C1730 + C38297 * C1728 -
              C38292 * C1742) *
                 C263 +
             (C38295 * C2332 - C38291 * C2340 + C38297 * C2336 -
              C38292 * C2344) *
                 C89247) *
                C38293 +
            ((C38295 * C4099 - C38291 * C4105 + C38297 * C4100 -
              C38292 * C4107) *
                 C263 +
             (C38295 * C4769 - C38291 * C4773 + C38297 * C4770 -
              C38292 * C4774) *
                 C89247) *
                C38294) *
               C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                C263 +
            (C38291 * C571 - C38295 * C565 + C38292 * C572 - C38297 * C566) *
                C89247) *
               C38293 +
           ((C39386 - C39387 + C39388 - C39389) * C263 +
            (C39743 - C39744 + C39745 - C39746) * C89247) *
               C38294) *
              C10538 +
          (((C38295 * C1724 - C38291 * C1734 + C38297 * C1723 -
             C38292 * C1732) *
                C263 +
            (C38295 * C2330 - C38291 * C2338 + C38297 * C2331 -
             C38292 * C2339) *
                C89247) *
               C38293 +
           ((C43327 - C43328 + C43329 - C43330) * C263 +
            (C43749 - C43750 + C43751 - C43752) * C89247) *
               C38294) *
              C10539 +
          (((C38291 * C1736 - C38295 * C1725 + C38292 * C1738 -
             C38297 * C1726) *
                C263 +
            (C38291 * C2341 - C38295 * C2333 + C38292 * C2342 -
             C38297 * C2334) *
                C89247) *
               C38293 +
           ((C45931 - C45932 + C45933 - C45934) * C263 +
            (C46233 - C46234 + C46235 - C46236) * C89247) *
               C38294) *
              C10540 +
          (((C38295 * C10544 - C38291 * C10549 + C38297 * C10543 -
             C38292 * C10547) *
                C263 +
            (C38295 * C10878 - C38291 * C10881 + C38297 * C10879 -
             C38292 * C10882) *
                C89247) *
               C38293 +
           ((C38295 * C23153 - C38291 * C23156 + C38297 * C29239 -
             C38292 * C29240) *
                C263 +
            (C38295 * C23476 - C38291 * C23478 + C38297 * C29887 -
             C38292 * C29888) *
                C89247) *
               C38294) *
              C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q));
    d2eezy[12] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                 C263 +
             (C38293 * C627 - C38365 * C565 + C38294 * C1515 - C38366 * C1425) *
                 C89247) *
                C38291 +
            ((C38368 - C38369 + C38370 - C38371) * C263 +
             (C38832 - C38833 + C38834 - C38835) * C89247) *
                C38292) *
               C9228 +
           (((C38365 * C1724 - C38293 * C1828 + C38366 * C4097 -
              C38294 * C4211) *
                 C263 +
             (C38365 * C2330 - C38293 * C2420 + C38366 * C4767 -
              C38294 * C4873) *
                 C89247) *
                C38291 +
            ((C40163 - C40164 + C40165 - C40166) * C263 +
             (C40801 - C40802 + C40803 - C40804) * C89247) *
                C38292) *
               C89217) *
              C812 +
          ((((C38365 * C819 - C38293 * C923 + C38366 * C820 - C38294 * C926) *
                 C263 +
             (C38365 * C1425 - C38293 * C1515 + C38366 * C1428 -
              C38294 * C1518) *
                 C89247) *
                C38291 +
            ((C39168 - C39169 + C39170 - C39171) * C263 +
             (C39857 - C39858 + C39859 - C39860) * C89247) *
                C38292) *
               C9228 +
           (((C38293 * C4211 - C38365 * C4097 + C38294 * C8600 -
              C38366 * C8516) *
                 C263 +
             (C38293 * C4873 - C38365 * C4767 + C38294 * C9074 -
              C38366 * C8994) *
                 C89247) *
                C38291 +
            ((C43055 - C43056 + C43057 - C43058) * C263 +
             (C43887 - C43888 + C43889 - C43890) * C89247) *
                C38292) *
               C89217) *
              C813 +
          ((((C38293 * C926 - C38365 * C820 + C38294 * C5787 - C38366 * C5727) *
                 C263 +
             (C38293 * C1518 - C38365 * C1428 + C38294 * C6117 -
              C38366 * C6061) *
                 C89247) *
                C38291 +
            ((C39176 - C39177 + C39178 - C39179) * C263 +
             (C39861 - C39862 + C39863 - C39864) * C89247) *
                C38292) *
               C9228 +
           (((C38365 * C8516 - C38293 * C8600 + C38366 * C16683 -
              C38294 * C16821) *
                 C263 +
             (C38365 * C8994 - C38293 * C9074 + C38366 * C17361 -
              C38294 * C17471) *
                 C89247) *
                C38291 +
            ((C38365 * C8515 - C38293 * C8601 + C38366 * C16684 -
              C38294 * C16822) *
                 C263 +
             (C38365 * C8995 - C38293 * C9075 + C38366 * C17362 -
              C38294 * C17472) *
                 C89247) *
                C38292) *
               C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                 C263 +
             (C38293 * C627 - C38365 * C565 + C38294 * C1515 - C38366 * C1425) *
                 C89247) *
                C38291 +
            ((C38368 - C38369 + C38370 - C38371) * C263 +
             (C38832 - C38833 + C38834 - C38835) * C89247) *
                C38292) *
               C9228 +
           (((C38365 * C1724 - C38293 * C1828 + C38366 * C4097 -
              C38294 * C4211) *
                 C263 +
             (C38365 * C2330 - C38293 * C2420 + C38366 * C4767 -
              C38294 * C4873) *
                 C89247) *
                C38291 +
            ((C40163 - C40164 + C40165 - C40166) * C263 +
             (C40801 - C40802 + C40803 - C40804) * C89247) *
                C38292) *
               C89217) *
              C89137 * C5075 +
          ((((C38369 - C38368 + C38371 - C38370) * C263 +
             (C38833 - C38832 + C38835 - C38834) * C89247) *
                C38291 +
            ((C38376 - C38377 + C38378 - C38379) * C263 +
             (C38836 - C38837 + C38838 - C38839) * C89247) *
                C38292) *
               C9228 +
           (((C40164 - C40163 + C40166 - C40165) * C263 +
             (C40802 - C40801 + C40804 - C40803) * C89247) *
                C38291 +
            ((C42053 - C42054 + C42055 - C42056) * C263 +
             (C42663 - C42664 + C42665 - C42666) * C89247) *
                C38292) *
               C89217) *
              C89137 * C5076 +
          ((((C38377 - C38376 + C38379 - C38378) * C263 +
             (C38837 - C38836 + C38839 - C38838) * C89247) *
                C38291 +
            ((C38384 - C38385 + C38386 - C38387) * C263 +
             (C38840 - C38841 + C38842 - C38843) * C89247) *
                C38292) *
               C9228 +
           (((C42054 - C42053 + C42056 - C42055) * C263 +
             (C42664 - C42663 + C42666 - C42665) * C89247) *
                C38291 +
            ((C38365 * C1728 - C38293 * C1834 + C38366 * C4100 -
              C38294 * C4214) *
                 C263 +
             (C38365 * C2336 - C38293 * C2426 + C38366 * C4770 -
              C38294 * C4876) *
                 C89247) *
                C38292) *
               C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                C263 +
            (C38293 * C627 - C38365 * C565 + C38294 * C1515 - C38366 * C1425) *
                C89247) *
               C38291 +
           ((C38368 - C38369 + C38370 - C38371) * C263 +
            (C38832 - C38833 + C38834 - C38835) * C89247) *
               C38292) *
              C10538 +
          (((C38365 * C1724 - C38293 * C1828 + C38366 * C4097 -
             C38294 * C4211) *
                C263 +
            (C38365 * C2330 - C38293 * C2420 + C38366 * C4767 -
             C38294 * C4873) *
                C89247) *
               C38291 +
           ((C40163 - C40164 + C40165 - C40166) * C263 +
            (C40801 - C40802 + C40803 - C40804) * C89247) *
               C38292) *
              C10539 +
          (((C38293 * C1831 - C38365 * C1725 + C38294 * C6333 -
             C38366 * C6249) *
                C263 +
            (C38293 * C2423 - C38365 * C2333 + C38294 * C6807 -
             C38366 * C6727) *
                C89247) *
               C38291 +
           ((C40171 - C40172 + C40173 - C40174) * C263 +
            (C40805 - C40806 + C40807 - C40808) * C89247) *
               C38292) *
              C10540 +
          (((C38365 * C10544 - C38293 * C10604 + C38366 * C23153 -
             C38294 * C23210) *
                C263 +
            (C38365 * C10878 - C38293 * C10934 + C38366 * C23476 -
             C38294 * C23530) *
                C89247) *
               C38291 +
           ((C38365 * C10543 - C38293 * C10605 + C38366 * C29239 -
             C38294 * C29348) *
                C263 +
            (C38365 * C10879 - C38293 * C10935 + C38366 * C29887 -
             C38294 * C29989) *
                C89247) *
               C38292) *
              C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q));
    d2eezz[12] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) *
                 C38293 +
             C14524 * C38294) *
                C38291 +
            (C38910 + C38911) * C38292) *
               C9228 -
           ((C40907 + C40908) * C38292 +
            (C17593 * C38294 +
             (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
                 C38293) *
                C38291) *
               C89217) *
              C812 +
          (((C17593 * C38293 + C17592 * C38294) * C38291 +
            (C44021 + C44022) * C38292) *
               C89217 -
           ((C39963 + C39964) * C38292 +
            (C14525 * C38294 + C14524 * C38293) * C38291) *
               C9228) *
              C813 +
          (((C14525 * C38293 + C14526 * C38294) * C38291 +
            (C39965 + C39966) * C38292) *
               C9228 -
           (((C263 * C16924 - C699 * C16684 - C263 * C17362 + C89247 * C17572) *
                 C38294 +
             C17594 * C38293) *
                C38292 +
            (C21770 * C38294 + C17592 * C38293) * C38291) *
               C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) *
                 C38293 +
             C14524 * C38294) *
                C38291 +
            (C38910 + C38911) * C38292) *
               C9228 -
           ((C40907 + C40908) * C38292 +
            (C17593 * C38294 +
             (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
                 C38293) *
                C38291) *
               C89217) *
              C89137 * C5075 +
          (((C40908 + C40907) * C38291 + (C42765 + C42766) * C38292) * C89217 -
           ((C38912 + C38913) * C38292 + (C38911 + C38910) * C38291) * C9228) *
              C89137 * C5076 +
          (((C38913 + C38912) * C38291 + (C38914 + C38915) * C38292) * C9228 -
           (((C263 * C4328 - C699 * C4100 - C263 * C4770 + C89247 * C4982) *
                 C38294 +
             C3998 * C38293) *
                C38292 +
            (C42766 + C42765) * C38291) *
               C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C38293 +
            C14524 * C38294) *
               C38291 +
           (C38910 + C38911) * C38292) *
              C10538 -
          ((C40907 + C40908) * C38292 +
           (C17593 * C38294 +
            (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
                C38293) *
               C38291) *
              C10539 +
          (((C263 * C1937 - C699 * C1725 - C263 * C2333 + C89247 * C2513) *
                C38293 +
            C19500 * C38294) *
               C38291 +
           (C40909 + C40917) * C38292) *
              C10540 -
          (((C263 * C29460 - C699 * C29239 - C263 * C29887 + C89247 * C30094) *
                C38294 +
            (C263 * C10661 - C699 * C10543 - C263 * C10879 + C89247 * C10988) *
                C38293) *
               C38292 +
           ((C263 * C23264 - C699 * C23153 - C263 * C23476 + C89247 * C23583) *
                C38294 +
            (C263 * C10660 - C699 * C10544 - C263 * C10878 + C89247 * C10989) *
                C38293) *
               C38291) *
              C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q));
    d2eexx[13] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C38295 * C112 - C38296 * C106 - C38295 * C113 + C38291 * C124 +
             C38297 * C114 - C38298 * C107 - C38297 * C115 + C38292 * C125) *
                C89247 * C38293 +
            (C39062 + C39063) * C89247 * C38294) *
               C89337 -
           ((C42921 + C42922) * C89247 * C38294 +
            (C38297 * C1732 - C38298 * C1723 - C38297 * C1733 + C38292 * C1747 +
             C38295 * C1734 - C38296 * C1724 - C38295 * C1735 +
             C38291 * C1748) *
                C89247 * C38293) *
               C89338 +
           ((C38295 * C1736 - C38296 * C1725 - C38295 * C1737 + C38291 * C1749 +
             C38297 * C1738 - C38298 * C1726 - C38297 * C1739 +
             C38292 * C1750) *
                C89247 * C38293 +
            (C45635 + C45636) * C89247 * C38294) *
               C11948) *
              C89137 * C89299 +
          (((C38295 * C1732 - C38296 * C1723 - C38295 * C1733 + C38291 * C1747 +
             C38297 * C1730 - C38298 * C1722 - C38297 * C1731 +
             C38292 * C1746) *
                C89247 * C38293 +
            (C42923 + C42924) * C89247 * C38294) *
               C89338 -
           ((C39067 + C39066) * C89247 * C38294 +
            (C38297 * C116 - C38298 * C108 - C38297 * C117 + C38292 * C126 +
             C38295 * C114 - C38296 * C107 - C38295 * C115 + C38291 * C125) *
                C89247 * C38293) *
               C89337 -
           ((C38297 * C6250 - C38298 * C6247 - C38297 * C6251 + C38292 * C6256 +
             C38295 * C6252 - C38296 * C6248 - C38295 * C6253 +
             C38291 * C6257) *
                C89247 * C38294 +
            (C38297 * C1740 - C38298 * C1727 - C38297 * C1741 + C38292 * C1751 +
             C38295 * C1738 - C38296 * C1726 - C38295 * C1739 +
             C38291 * C1750) *
                C89247 * C38293) *
               C11948) *
              C89137 * C89124)) /
        (p * q * std::sqrt(p + q));
    d2eexy[13] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                C38295 +
            (C38293 * C187 - C38365 * C113 + C38294 * C931 - C38366 * C830) *
                C38291 +
            (C38368 - C38369 + C38370 - C38371) * C38297 +
            (C38372 - C38373 + C38374 - C38375) * C38292) *
               C89247 * C89337 +
           ((C38365 * C1724 - C38293 * C1828 + C38366 * C4097 -
             C38294 * C4211) *
                C38295 +
            (C38365 * C1735 - C38293 * C1836 + C38366 * C4102 -
             C38294 * C4215) *
                C38291 +
            (C40163 - C40164 + C40165 - C40166) * C38297 +
            (C40167 - C40168 + C40169 - C40170) * C38292) *
               C89247 * C89338 +
           ((C38293 * C1831 - C38365 * C1725 + C38294 * C6333 -
             C38366 * C6249) *
                C38295 +
            (C38293 * C1839 - C38365 * C1737 + C38294 * C6336 -
             C38366 * C6255) *
                C38291 +
            (C40171 - C40172 + C40173 - C40174) * C38297 +
            (C40175 - C40176 + C40177 - C40178) * C38292) *
               C89247 * C11948) *
              C89137 * C89299 +
          (((C38369 - C38368 + C38371 - C38370) * C38295 +
            (C38373 - C38372 + C38375 - C38374) * C38291 +
            (C38376 - C38377 + C38378 - C38379) * C38297 +
            (C38380 - C38381 + C38382 - C38383) * C38292) *
               C89247 * C89337 +
           ((C40164 - C40163 + C40166 - C40165) * C38295 +
            (C40168 - C40167 + C40170 - C40169) * C38291 +
            (C42053 - C42054 + C42055 - C42056) * C38297 +
            (C42057 - C42058 + C42059 - C42060) * C38292) *
               C89247 * C89338 +
           ((C40172 - C40171 + C40174 - C40173) * C38295 +
            (C40176 - C40175 + C40178 - C40177) * C38291 +
            (C38365 * C1727 - C38293 * C1833 + C38366 * C6247 -
             C38294 * C6335) *
                C38297 +
            (C38365 * C1741 - C38293 * C1841 + C38366 * C6251 -
             C38294 * C6338) *
                C38292) *
               C89247 * C11948) *
              C89137 * C89124)) /
        (p * q * std::sqrt(p + q));
    d2eexz[13] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C38295 +
             (C89247 * C270 - C263 * C113) * C38291 + (C277 - C278) * C38297 +
             (C279 - C280) * C38292) *
                C38293 +
            ((C13956 - C13957) * C38295 + (C13958 - C13959) * C38291 +
             C39282 * C38297 + C39283 * C38292) *
                C38294) *
               C89337 +
           (((C263 * C1724 - C89247 * C1934) * C38295 +
             (C263 * C1735 - C89247 * C1942) * C38291 +
             (C1951 - C1952) * C38297 + (C1953 - C1954) * C38292) *
                C38293 +
            ((C16928 - C16929) * C38295 + (C16930 - C16931) * C38291 +
             C43193 * C38297 + C43194 * C38292) *
                C38294) *
               C89338 +
           (((C89247 * C1937 - C263 * C1725) * C38295 +
             (C89247 * C1945 - C263 * C1737) * C38291 +
             (C1959 - C1960) * C38297 + (C1961 - C1962) * C38292) *
                C38293 +
            ((C19012 - C19013) * C38295 + (C19014 - C19015) * C38291 +
             (C40277 - C40278) * C38297 + (C40279 - C40280) * C38292) *
                C38294) *
               C11948) *
              C89137 * C89299 +
          ((((C278 - C277) * C38295 + (C280 - C279) * C38291 +
             (C282 - C281) * C38297 + (C284 - C283) * C38292) *
                C38293 +
            (C39284 * C38295 + C39285 * C38291 + C2792 * C38297 +
             C2793 * C38292) *
                C38294) *
               C89337 +
           (((C1952 - C1951) * C38295 + (C1954 - C1953) * C38291 +
             (C1956 - C1955) * C38297 + (C1958 - C1957) * C38292) *
                C38293 +
            (C43195 * C38295 + C43196 * C38291 + (C4338 - C4339) * C38297 +
             (C4340 - C4341) * C38292) *
                C38294) *
               C89338 +
           (((C1960 - C1959) * C38295 + (C1962 - C1961) * C38291 +
             (C1964 - C1963) * C38297 + (C1966 - C1965) * C38292) *
                C38293 +
            ((C40278 - C40277) * C38295 + (C40280 - C40279) * C38291 +
             (C263 * C6247 - C89247 * C6415) * C38297 +
             (C263 * C6251 - C89247 * C6418) * C38292) *
                C38294) *
               C11948) *
              C89137 * C89124)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[13] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                C38365 +
            (C38291 * C352 - C38295 * C346 + C38292 * C353 - C38297 * C347) *
                C38293 +
            (C39386 - C39387 + C39388 - C39389) * C38366 +
            (C39390 - C39391 + C39392 - C39393) * C38294) *
               C89247 * C89337 +
           ((C38295 * C1724 - C38291 * C1734 + C38297 * C1723 -
             C38292 * C1732) *
                C38365 +
            (C38295 * C2040 - C38291 * C2048 + C38297 * C2041 -
             C38292 * C2049) *
                C38293 +
            (C43327 - C43328 + C43329 - C43330) * C38366 +
            (C43331 - C43332 + C43333 - C43334) * C38294) *
               C89247 * C89338 +
           ((C38291 * C1736 - C38295 * C1725 + C38292 * C1738 -
             C38297 * C1726) *
                C38365 +
            (C38291 * C2051 - C38295 * C2043 + C38292 * C2052 -
             C38297 * C2044) *
                C38293 +
            (C45931 - C45932 + C45933 - C45934) * C38366 +
            (C45935 - C45936 + C45937 - C45938) * C38294) *
               C89247 * C11948) *
              C89137 * C89299 +
          (((C38295 * C107 - C38291 * C114 + C38297 * C108 - C38292 * C116) *
                C38365 +
            (C38295 * C347 - C38291 * C353 + C38297 * C348 - C38292 * C354) *
                C38293 +
            (C39402 - C39403 + C39404 - C39405) * C38366 +
            (C39406 - C39407 + C39408 - C39409) * C38294) *
               C89247 * C89337 +
           ((C38291 * C1732 - C38295 * C1723 + C38292 * C1730 -
             C38297 * C1722) *
                C38365 +
            (C38291 * C2049 - C38295 * C2041 + C38292 * C2050 -
             C38297 * C2042) *
                C38293 +
            (C43335 - C43336 + C43337 - C43338) * C38366 +
            (C43339 - C43340 + C43341 - C43342) * C38294) *
               C89247 * C89338 +
           ((C38295 * C1726 - C38291 * C1738 + C38297 * C1727 -
             C38292 * C1740) *
                C38365 +
            (C38295 * C2044 - C38291 * C2052 + C38297 * C2045 -
             C38292 * C2053) *
                C38293 +
            (C38295 * C6248 - C38291 * C6252 + C38297 * C6247 -
             C38292 * C6250) *
                C38366 +
            (C38295 * C6494 - C38291 * C6497 + C38297 * C6495 -
             C38292 * C6498) *
                C38294) *
               C89247 * C11948) *
              C89137 * C89124)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[13] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C38365 * C181 - C38589 * C106 - C38365 * C346 + C38293 * C409 +
             C38366 * C923 - C38590 * C819 - C38366 * C1135 + C38294 * C1227) *
                C38291 +
            (C38628 + C38629) * C38292) *
               C89247 * C89337 -
           ((C40501 + C40502) * C38292 +
            (C38366 * C4211 - C38590 * C4097 - C38366 * C4439 + C38294 * C4545 +
             C38365 * C1828 - C38589 * C1724 - C38365 * C2040 +
             C38293 * C2132) *
                C38291) *
               C89247 * C89338 +
           ((C38365 * C1831 - C38589 * C1725 - C38365 * C2043 + C38293 * C2133 +
             C38366 * C6333 - C38590 * C6249 - C38366 * C6493 +
             C38294 * C6575) *
                C38291 +
            (C40503 + C40504) * C38292) *
               C89247 * C11948) *
              C89137 * C89299 +
          (((C40502 + C40501) * C38291 + (C42367 + C42368) * C38292) * C89247 *
               C89338 -
           ((C38630 + C38631) * C38292 + (C38629 + C38628) * C38291) * C89247 *
               C89337 -
           ((C38366 * C6335 - C38590 * C6247 - C38366 * C6495 + C38294 * C6573 +
             C38365 * C1833 - C38589 * C1727 - C38365 * C2045 +
             C38293 * C2135) *
                C38292 +
            (C40504 + C40503) * C38291) *
               C89247 * C11948) *
              C89137 * C89124)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[13] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C38365 +
             (C89247 * C493 - C263 * C346) * C38293 +
             (C13956 - C13957) * C38366 + (C14240 - C14241) * C38294) *
                C38291 +
            ((C277 - C278) * C38365 + (C500 - C501) * C38293 + C39282 * C38366 +
             C39642 * C38294) *
                C38292) *
               C89337 +
           (((C263 * C1724 - C89247 * C1934) * C38365 +
             (C263 * C2040 - C89247 * C2240) * C38293 +
             (C16928 - C16929) * C38366 + (C17258 - C17259) * C38294) *
                C38291 +
            ((C1951 - C1952) * C38365 + (C2249 - C2250) * C38293 +
             C43193 * C38366 + C43617 * C38294) *
                C38292) *
               C89338 +
           (((C89247 * C1937 - C263 * C1725) * C38365 +
             (C89247 * C2243 - C263 * C2043) * C38293 +
             (C19012 - C19013) * C38366 + (C19254 - C19255) * C38294) *
                C38291 +
            ((C1959 - C1960) * C38365 + (C2253 - C2254) * C38293 +
             (C40277 - C40278) * C38366 + (C40603 - C40604) * C38294) *
                C38292) *
               C11948) *
              C89137 * C89299 +
          ((((C278 - C277) * C38365 + (C501 - C500) * C38293 + C39284 * C38366 +
             C39643 * C38294) *
                C38291 +
            ((C282 - C281) * C38365 + (C504 - C503) * C38293 + C2792 * C38366 +
             C3032 * C38294) *
                C38292) *
               C89337 +
           (((C1952 - C1951) * C38365 + (C2250 - C2249) * C38293 +
             C43195 * C38366 + C43618 * C38294) *
                C38291 +
            ((C1956 - C1955) * C38365 + (C2252 - C2251) * C38293 +
             (C4338 - C4339) * C38366 + (C4668 - C4669) * C38294) *
                C38292) *
               C89338 +
           (((C1960 - C1959) * C38365 + (C2254 - C2253) * C38293 +
             (C40278 - C40277) * C38366 + (C40604 - C40603) * C38294) *
                C38291 +
            ((C1964 - C1963) * C38365 + (C2256 - C2255) * C38293 +
             (C263 * C6247 - C89247 * C6415) * C38366 +
             (C263 * C6495 - C89247 * C6652) * C38294) *
                C38292) *
               C11948) *
              C89137 * C89124)) /
        (p * q * std::sqrt(p + q));
    d2eezx[13] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                 C263 +
             (C38291 * C571 - C38295 * C565 + C38292 * C572 - C38297 * C566) *
                 C89247) *
                C38293 +
            ((C39386 - C39387 + C39388 - C39389) * C263 +
             (C39743 - C39744 + C39745 - C39746) * C89247) *
                C38294) *
               C89337 +
           (((C38295 * C1724 - C38291 * C1734 + C38297 * C1723 -
              C38292 * C1732) *
                 C263 +
             (C38295 * C2330 - C38291 * C2338 + C38297 * C2331 -
              C38292 * C2339) *
                 C89247) *
                C38293 +
            ((C43327 - C43328 + C43329 - C43330) * C263 +
             (C43749 - C43750 + C43751 - C43752) * C89247) *
                C38294) *
               C89338 +
           (((C38291 * C1736 - C38295 * C1725 + C38292 * C1738 -
              C38297 * C1726) *
                 C263 +
             (C38291 * C2341 - C38295 * C2333 + C38292 * C2342 -
              C38297 * C2334) *
                 C89247) *
                C38293 +
            ((C45931 - C45932 + C45933 - C45934) * C263 +
             (C46233 - C46234 + C46235 - C46236) * C89247) *
                C38294) *
               C11948) *
              C89137 * C89299 +
          ((((C38295 * C107 - C38291 * C114 + C38297 * C108 - C38292 * C116) *
                 C263 +
             (C38295 * C566 - C38291 * C572 + C38297 * C567 - C38292 * C573) *
                 C89247) *
                C38293 +
            ((C39402 - C39403 + C39404 - C39405) * C263 +
             (C39751 - C39752 + C39753 - C39754) * C89247) *
                C38294) *
               C89337 +
           (((C38291 * C1732 - C38295 * C1723 + C38292 * C1730 -
              C38297 * C1722) *
                 C263 +
             (C38291 * C2339 - C38295 * C2331 + C38292 * C2340 -
              C38297 * C2332) *
                 C89247) *
                C38293 +
            ((C43335 - C43336 + C43337 - C43338) * C263 +
             (C43753 - C43754 + C43755 - C43756) * C89247) *
                C38294) *
               C89338 +
           (((C38295 * C1726 - C38291 * C1738 + C38297 * C1727 -
              C38292 * C1740) *
                 C263 +
             (C38295 * C2334 - C38291 * C2342 + C38297 * C2335 -
              C38292 * C2343) *
                 C89247) *
                C38293 +
            ((C38295 * C6248 - C38291 * C6252 + C38297 * C6247 -
              C38292 * C6250) *
                 C263 +
             (C38295 * C6728 - C38291 * C6731 + C38297 * C6729 -
              C38292 * C6732) *
                 C89247) *
                C38294) *
               C11948) *
              C89137 * C89124)) /
        (p * q * std::sqrt(p + q));
    d2eezy[13] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                 C263 +
             (C38293 * C627 - C38365 * C565 + C38294 * C1515 - C38366 * C1425) *
                 C89247) *
                C38291 +
            ((C38368 - C38369 + C38370 - C38371) * C263 +
             (C38832 - C38833 + C38834 - C38835) * C89247) *
                C38292) *
               C89337 +
           (((C38365 * C1724 - C38293 * C1828 + C38366 * C4097 -
              C38294 * C4211) *
                 C263 +
             (C38365 * C2330 - C38293 * C2420 + C38366 * C4767 -
              C38294 * C4873) *
                 C89247) *
                C38291 +
            ((C40163 - C40164 + C40165 - C40166) * C263 +
             (C40801 - C40802 + C40803 - C40804) * C89247) *
                C38292) *
               C89338 +
           (((C38293 * C1831 - C38365 * C1725 + C38294 * C6333 -
              C38366 * C6249) *
                 C263 +
             (C38293 * C2423 - C38365 * C2333 + C38294 * C6807 -
              C38366 * C6727) *
                 C89247) *
                C38291 +
            ((C40171 - C40172 + C40173 - C40174) * C263 +
             (C40805 - C40806 + C40807 - C40808) * C89247) *
                C38292) *
               C11948) *
              C89137 * C89299 +
          ((((C38369 - C38368 + C38371 - C38370) * C263 +
             (C38833 - C38832 + C38835 - C38834) * C89247) *
                C38291 +
            ((C38376 - C38377 + C38378 - C38379) * C263 +
             (C38836 - C38837 + C38838 - C38839) * C89247) *
                C38292) *
               C89337 +
           (((C40164 - C40163 + C40166 - C40165) * C263 +
             (C40802 - C40801 + C40804 - C40803) * C89247) *
                C38291 +
            ((C42053 - C42054 + C42055 - C42056) * C263 +
             (C42663 - C42664 + C42665 - C42666) * C89247) *
                C38292) *
               C89338 +
           (((C40172 - C40171 + C40174 - C40173) * C263 +
             (C40806 - C40805 + C40808 - C40807) * C89247) *
                C38291 +
            ((C38365 * C1727 - C38293 * C1833 + C38366 * C6247 -
              C38294 * C6335) *
                 C263 +
             (C38365 * C2335 - C38293 * C2425 + C38366 * C6729 -
              C38294 * C6809) *
                 C89247) *
                C38292) *
               C11948) *
              C89137 * C89124)) /
        (p * q * std::sqrt(p + q));
    d2eezz[13] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) *
                 C38293 +
             C14524 * C38294) *
                C38291 +
            (C38910 + C38911) * C38292) *
               C89337 -
           ((C40907 + C40908) * C38292 +
            (C17593 * C38294 +
             (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
                 C38293) *
                C38291) *
               C89338 +
           (((C263 * C1937 - C699 * C1725 - C263 * C2333 + C89247 * C2513) *
                 C38293 +
             C19500 * C38294) *
                C38291 +
            (C40909 + C40917) * C38292) *
               C11948) *
              C89137 * C89299 +
          (((C40908 + C40907) * C38291 + (C42765 + C42766) * C38292) * C89338 -
           ((C38912 + C38913) * C38292 + (C38911 + C38910) * C38291) * C89337 -
           (((C263 * C6415 - C699 * C6247 - C263 * C6729 + C89247 * C6884) *
                 C38294 +
             C2546 * C38293) *
                C38292 +
            (C40917 + C40909) * C38291) *
               C11948) *
              C89137 * C89124)) /
        (p * q * std::sqrt(p + q));
    d2eexx[14] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C38295 * C112 - C38296 * C106 - C38295 * C113 + C38291 * C124 +
             C38297 * C114 - C38298 * C107 - C38297 * C115 + C38292 * C125) *
                C89247 * C38293 +
            (C39062 + C39063) * C89247 * C38294) *
               C9228 -
           ((C42921 + C42922) * C89247 * C38294 +
            (C38297 * C1732 - C38298 * C1723 - C38297 * C1733 + C38292 * C1747 +
             C38295 * C1734 - C38296 * C1724 - C38295 * C1735 +
             C38291 * C1748) *
                C89247 * C38293) *
               C89217) *
              C89137 * C5075 +
          (((C38295 * C1732 - C38296 * C1723 - C38295 * C1733 + C38291 * C1747 +
             C38297 * C1730 - C38298 * C1722 - C38297 * C1731 +
             C38292 * C1746) *
                C89247 * C38293 +
            (C42923 + C42924) * C89247 * C38294) *
               C89217 -
           ((C39067 + C39066) * C89247 * C38294 +
            (C38297 * C116 - C38298 * C108 - C38297 * C117 + C38292 * C126 +
             C38295 * C114 - C38296 * C107 - C38295 * C115 + C38291 * C125) *
                C89247 * C38293) *
               C9228) *
              C89137 * C5076 +
          (((C38295 * C116 - C38296 * C108 - C38295 * C117 + C38291 * C126 +
             C38297 * C118 - C38298 * C109 - C38297 * C119 + C38292 * C127) *
                C89247 * C38293 +
            (C41028 + C41029) * C89247 * C38294) *
               C9228 -
           ((C38297 * C4107 - C38298 * C4100 - C38297 * C4108 + C38292 * C4112 +
             C38295 * C4105 - C38296 * C4099 - C38295 * C4106 +
             C38291 * C4111) *
                C89247 * C38294 +
            (C38297 * C1742 - C38298 * C1728 - C38297 * C1743 + C38292 * C1752 +
             C38295 * C1730 - C38296 * C1722 - C38295 * C1731 +
             C38291 * C1746) *
                C89247 * C38293) *
               C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C38295 * C112 - C38296 * C106 - C38295 * C113 + C38291 * C124 +
             C38297 * C114 - C38298 * C107 - C38297 * C115 + C38292 * C125) *
                C89247 * C38293 +
            (C39062 + C39063) * C89247 * C38294) *
               C9228 -
           ((C42921 + C42922) * C89247 * C38294 +
            (C38297 * C1732 - C38298 * C1723 - C38297 * C1733 + C38292 * C1747 +
             C38295 * C1734 - C38296 * C1724 - C38295 * C1735 +
             C38291 * C1748) *
                C89247 * C38293) *
               C89217) *
              C812 +
          (((C42922 + C42921) * C89247 * C38293 +
            (C48595 + C48596) * C89247 * C38294) *
               C89217 -
           ((C39064 + C39065) * C89247 * C38294 +
            (C39063 + C39062) * C89247 * C38293) *
               C9228) *
              C813 +
          (((C39065 + C39064) * C89247 * C38293 +
            (C44983 + C44984) * C89247 * C38294) *
               C9228 -
           ((C38297 * C16687 - C38298 * C16684 - C38297 * C16688 +
             C38292 * C16690 + C38295 * C16685 - C38296 * C16683 -
             C38295 * C16686 + C38291 * C16689) *
                C89247 * C38294 +
            (C48596 + C48595) * C89247 * C38293) *
               C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eexy[14] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                C38295 +
            (C38293 * C187 - C38365 * C113 + C38294 * C931 - C38366 * C830) *
                C38291 +
            (C38368 - C38369 + C38370 - C38371) * C38297 +
            (C38372 - C38373 + C38374 - C38375) * C38292) *
               C89247 * C9228 +
           ((C38365 * C1724 - C38293 * C1828 + C38366 * C4097 -
             C38294 * C4211) *
                C38295 +
            (C38365 * C1735 - C38293 * C1836 + C38366 * C4102 -
             C38294 * C4215) *
                C38291 +
            (C40163 - C40164 + C40165 - C40166) * C38297 +
            (C40167 - C40168 + C40169 - C40170) * C38292) *
               C89247 * C89217) *
              C89137 * C5075 +
          (((C38369 - C38368 + C38371 - C38370) * C38295 +
            (C38373 - C38372 + C38375 - C38374) * C38291 +
            (C38376 - C38377 + C38378 - C38379) * C38297 +
            (C38380 - C38381 + C38382 - C38383) * C38292) *
               C89247 * C9228 +
           ((C40164 - C40163 + C40166 - C40165) * C38295 +
            (C40168 - C40167 + C40170 - C40169) * C38291 +
            (C42053 - C42054 + C42055 - C42056) * C38297 +
            (C42057 - C42058 + C42059 - C42060) * C38292) *
               C89247 * C89217) *
              C89137 * C5076 +
          (((C38377 - C38376 + C38379 - C38378) * C38295 +
            (C38381 - C38380 + C38383 - C38382) * C38291 +
            (C38384 - C38385 + C38386 - C38387) * C38297 +
            (C38388 - C38389 + C38390 - C38391) * C38292) *
               C89247 * C9228 +
           ((C42054 - C42053 + C42056 - C42055) * C38295 +
            (C42058 - C42057 + C42060 - C42059) * C38291 +
            (C38365 * C1728 - C38293 * C1834 + C38366 * C4100 -
             C38294 * C4214) *
                C38297 +
            (C38365 * C1743 - C38293 * C1842 + C38366 * C4108 -
             C38294 * C4218) *
                C38292) *
               C89247 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                C38295 +
            (C38293 * C187 - C38365 * C113 + C38294 * C931 - C38366 * C830) *
                C38291 +
            (C38368 - C38369 + C38370 - C38371) * C38297 +
            (C38372 - C38373 + C38374 - C38375) * C38292) *
               C89247 * C9228 +
           ((C38365 * C1724 - C38293 * C1828 + C38366 * C4097 -
             C38294 * C4211) *
                C38295 +
            (C38365 * C1735 - C38293 * C1836 + C38366 * C4102 -
             C38294 * C4215) *
                C38291 +
            (C40163 - C40164 + C40165 - C40166) * C38297 +
            (C40167 - C40168 + C40169 - C40170) * C38292) *
               C89247 * C89217) *
              C812 +
          (((C38365 * C819 - C38293 * C923 + C38366 * C820 - C38294 * C926) *
                C38295 +
            (C38365 * C830 - C38293 * C931 + C38366 * C832 - C38294 * C934) *
                C38291 +
            (C39168 - C39169 + C39170 - C39171) * C38297 +
            (C39172 - C39173 + C39174 - C39175) * C38292) *
               C89247 * C9228 +
           ((C38293 * C4211 - C38365 * C4097 + C38294 * C8600 -
             C38366 * C8516) *
                C38295 +
            (C38293 * C4215 - C38365 * C4102 + C38294 * C8603 -
             C38366 * C8522) *
                C38291 +
            (C43055 - C43056 + C43057 - C43058) * C38297 +
            (C43059 - C43060 + C43061 - C43062) * C38292) *
               C89247 * C89217) *
              C813 +
          (((C38293 * C926 - C38365 * C820 + C38294 * C5787 - C38366 * C5727) *
                C38295 +
            (C38293 * C934 - C38365 * C832 + C38294 * C5790 - C38366 * C5733) *
                C38291 +
            (C39176 - C39177 + C39178 - C39179) * C38297 +
            (C39180 - C39181 + C39182 - C39183) * C38292) *
               C89247 * C9228 +
           ((C38365 * C8516 - C38293 * C8600 + C38366 * C16683 -
             C38294 * C16821) *
                C38295 +
            (C38365 * C8522 - C38293 * C8603 + C38366 * C16686 -
             C38294 * C16823) *
                C38291 +
            (C38365 * C8515 - C38293 * C8601 + C38366 * C16684 -
             C38294 * C16822) *
                C38297 +
            (C38365 * C8520 - C38293 * C8604 + C38366 * C16688 -
             C38294 * C16824) *
                C38292) *
               C89247 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eexz[14] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C38295 +
             (C89247 * C270 - C263 * C113) * C38291 + (C277 - C278) * C38297 +
             (C279 - C280) * C38292) *
                C38293 +
            ((C13956 - C13957) * C38295 + (C13958 - C13959) * C38291 +
             C39282 * C38297 + C39283 * C38292) *
                C38294) *
               C9228 +
           (((C263 * C1724 - C89247 * C1934) * C38295 +
             (C263 * C1735 - C89247 * C1942) * C38291 +
             (C1951 - C1952) * C38297 + (C1953 - C1954) * C38292) *
                C38293 +
            ((C16928 - C16929) * C38295 + (C16930 - C16931) * C38291 +
             C43193 * C38297 + C43194 * C38292) *
                C38294) *
               C89217) *
              C89137 * C5075 +
          ((((C278 - C277) * C38295 + (C280 - C279) * C38291 +
             (C282 - C281) * C38297 + (C284 - C283) * C38292) *
                C38293 +
            (C39284 * C38295 + C39285 * C38291 + C2792 * C38297 +
             C2793 * C38292) *
                C38294) *
               C9228 +
           (((C1952 - C1951) * C38295 + (C1954 - C1953) * C38291 +
             (C1956 - C1955) * C38297 + (C1958 - C1957) * C38292) *
                C38293 +
            (C43195 * C38295 + C43196 * C38291 + (C4338 - C4339) * C38297 +
             (C4340 - C4341) * C38292) *
                C38294) *
               C89217) *
              C89137 * C5076 +
          (((C293 * C38295 + C294 * C38291 + (C286 - C285) * C38297 +
             (C288 - C287) * C38292) *
                C38293 +
            (C41234 * C38295 + C41235 * C38291 + (C2794 - C2795) * C38297 +
             (C2796 - C2797) * C38292) *
                C38294) *
               C9228 +
           ((C3515 * C38295 + C3516 * C38291 + (C3518 - C3517) * C38297 +
             (C3520 - C3519) * C38292) *
                C38293 +
            ((C4339 - C4338) * C38295 + (C4341 - C4340) * C38291 +
             (C263 * C4100 - C89247 * C4328) * C38297 +
             (C263 * C4108 - C89247 * C4332) * C38292) *
                C38294) *
               C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C38295 +
             (C89247 * C270 - C263 * C113) * C38291 + (C277 - C278) * C38297 +
             (C279 - C280) * C38292) *
                C38293 +
            ((C13956 - C13957) * C38295 + (C13958 - C13959) * C38291 +
             C39282 * C38297 + C39283 * C38292) *
                C38294) *
               C9228 +
           (((C263 * C1724 - C89247 * C1934) * C38295 +
             (C263 * C1735 - C89247 * C1942) * C38291 +
             (C1951 - C1952) * C38297 + (C1953 - C1954) * C38292) *
                C38293 +
            ((C16928 - C16929) * C38295 + (C16930 - C16931) * C38291 +
             C43193 * C38297 + C43194 * C38292) *
                C38294) *
               C89217) *
              C812 +
          ((((C13957 - C13956) * C38295 + (C13959 - C13958) * C38291 +
             C39284 * C38297 + C39285 * C38292) *
                C38293 +
            ((C13961 - C13960) * C38295 + (C13963 - C13962) * C38291 +
             C13968 * C38297 + C13969 * C38292) *
                C38294) *
               C9228 +
           (((C16929 - C16928) * C38295 + (C16931 - C16930) * C38291 +
             C43195 * C38297 + C43196 * C38292) *
                C38293 +
            ((C16933 - C16932) * C38295 + (C16935 - C16934) * C38291 +
             (C16936 - C16937) * C38297 + (C16938 - C16939) * C38292) *
                C38294) *
               C89217) *
              C813 +
          (((C13974 * C38295 + C13975 * C38291 + C39286 * C38297 +
             C39287 * C38292) *
                C38293 +
            ((C13965 - C13964) * C38295 + (C13967 - C13966) * C38291 +
             (C13970 - C13971) * C38297 + (C13972 - C13973) * C38292) *
                C38294) *
               C9228 +
           ((C21288 * C38295 + C21289 * C38291 + (C16937 - C16936) * C38297 +
             (C16939 - C16938) * C38292) *
                C38293 +
            ((C21291 - C21290) * C38295 + (C21293 - C21292) * C38291 +
             (C263 * C16684 - C89247 * C16924) * C38297 +
             (C263 * C16688 - C89247 * C16926) * C38292) *
                C38294) *
               C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eeyx[14] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                C38365 +
            (C38291 * C352 - C38295 * C346 + C38292 * C353 - C38297 * C347) *
                C38293 +
            (C39386 - C39387 + C39388 - C39389) * C38366 +
            (C39390 - C39391 + C39392 - C39393) * C38294) *
               C89247 * C9228 +
           ((C38295 * C1724 - C38291 * C1734 + C38297 * C1723 -
             C38292 * C1732) *
                C38365 +
            (C38295 * C2040 - C38291 * C2048 + C38297 * C2041 -
             C38292 * C2049) *
                C38293 +
            (C43327 - C43328 + C43329 - C43330) * C38366 +
            (C43331 - C43332 + C43333 - C43334) * C38294) *
               C89247 * C89217) *
              C89137 * C5075 +
          (((C38295 * C107 - C38291 * C114 + C38297 * C108 - C38292 * C116) *
                C38365 +
            (C38295 * C347 - C38291 * C353 + C38297 * C348 - C38292 * C354) *
                C38293 +
            (C39402 - C39403 + C39404 - C39405) * C38366 +
            (C39406 - C39407 + C39408 - C39409) * C38294) *
               C89247 * C9228 +
           ((C38291 * C1732 - C38295 * C1723 + C38292 * C1730 -
             C38297 * C1722) *
                C38365 +
            (C38291 * C2049 - C38295 * C2041 + C38292 * C2050 -
             C38297 * C2042) *
                C38293 +
            (C43335 - C43336 + C43337 - C43338) * C38366 +
            (C43339 - C43340 + C43341 - C43342) * C38294) *
               C89247 * C89217) *
              C89137 * C5076 +
          (((C38291 * C116 - C38295 * C108 + C38292 * C118 - C38297 * C109) *
                C38365 +
            (C38291 * C354 - C38295 * C348 + C38292 * C355 - C38297 * C349) *
                C38293 +
            (C41334 - C41335 + C41336 - C41337) * C38366 +
            (C41338 - C41339 + C41340 - C41341) * C38294) *
               C89247 * C9228 +
           ((C38295 * C1722 - C38291 * C1730 + C38297 * C1728 -
             C38292 * C1742) *
                C38365 +
            (C38295 * C2042 - C38291 * C2050 + C38297 * C2046 -
             C38292 * C2054) *
                C38293 +
            (C38295 * C4099 - C38291 * C4105 + C38297 * C4100 -
             C38292 * C4107) *
                C38366 +
            (C38295 * C4441 - C38291 * C4445 + C38297 * C4442 -
             C38292 * C4446) *
                C38294) *
               C89247 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                C38365 +
            (C38291 * C352 - C38295 * C346 + C38292 * C353 - C38297 * C347) *
                C38293 +
            (C39386 - C39387 + C39388 - C39389) * C38366 +
            (C39390 - C39391 + C39392 - C39393) * C38294) *
               C89247 * C9228 +
           ((C38295 * C1724 - C38291 * C1734 + C38297 * C1723 -
             C38292 * C1732) *
                C38365 +
            (C38295 * C2040 - C38291 * C2048 + C38297 * C2041 -
             C38292 * C2049) *
                C38293 +
            (C43327 - C43328 + C43329 - C43330) * C38366 +
            (C43331 - C43332 + C43333 - C43334) * C38294) *
               C89247 * C89217) *
              C812 +
          (((C39387 - C39386 + C39389 - C39388) * C38365 +
            (C39391 - C39390 + C39393 - C39392) * C38293 +
            (C39394 - C39395 + C39396 - C39397) * C38366 +
            (C39398 - C39399 + C39400 - C39401) * C38294) *
               C89247 * C9228 +
           ((C43328 - C43327 + C43330 - C43329) * C38365 +
            (C43332 - C43331 + C43334 - C43333) * C38293 +
            (C48891 - C48892 + C48893 - C48894) * C38366 +
            (C48895 - C48896 + C48897 - C48898) * C38294) *
               C89247 * C89217) *
              C813 +
          (((C39395 - C39394 + C39397 - C39396) * C38365 +
            (C39399 - C39398 + C39401 - C39400) * C38293 +
            (C45183 - C45184 + C45185 - C45186) * C38366 +
            (C45187 - C45188 + C45189 - C45190) * C38294) *
               C89247 * C9228 +
           ((C48892 - C48891 + C48894 - C48893) * C38365 +
            (C48896 - C48895 + C48898 - C48897) * C38293 +
            (C38295 * C16683 - C38291 * C16685 + C38297 * C16684 -
             C38292 * C16687) *
                C38366 +
            (C38295 * C17037 - C38291 * C17039 + C38297 * C17038 -
             C38292 * C17040) *
                C38294) *
               C89247 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eeyy[14] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C38365 * C181 - C38589 * C106 - C38365 * C346 + C38293 * C409 +
             C38366 * C923 - C38590 * C819 - C38366 * C1135 + C38294 * C1227) *
                C38291 +
            (C38628 + C38629) * C38292) *
               C89247 * C9228 -
           ((C40501 + C40502) * C38292 +
            (C38366 * C4211 - C38590 * C4097 - C38366 * C4439 + C38294 * C4545 +
             C38365 * C1828 - C38589 * C1724 - C38365 * C2040 +
             C38293 * C2132) *
                C38291) *
               C89247 * C89217) *
              C89137 * C5075 +
          (((C40502 + C40501) * C38291 + (C42367 + C42368) * C38292) * C89247 *
               C89217 -
           ((C38630 + C38631) * C38292 + (C38629 + C38628) * C38291) * C89247 *
               C9228) *
              C89137 * C5076 +
          (((C38631 + C38630) * C38291 + (C38632 + C38633) * C38292) * C89247 *
               C9228 -
           ((C38366 * C4214 - C38590 * C4100 - C38366 * C4442 + C38294 * C4548 +
             C38365 * C1834 - C38589 * C1728 - C38365 * C2046 +
             C38293 * C2136) *
                C38292 +
            (C42368 + C42367) * C38291) *
               C89247 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C38365 * C181 - C38589 * C106 - C38365 * C346 + C38293 * C409 +
             C38366 * C923 - C38590 * C819 - C38366 * C1135 + C38294 * C1227) *
                C38291 +
            (C38628 + C38629) * C38292) *
               C89247 * C9228 -
           ((C40501 + C40502) * C38292 +
            (C38366 * C4211 - C38590 * C4097 - C38366 * C4439 + C38294 * C4545 +
             C38365 * C1828 - C38589 * C1724 - C38365 * C2040 +
             C38293 * C2132) *
                C38291) *
               C89247 * C89217) *
              C812 +
          (((C38365 * C4211 - C38589 * C4097 - C38365 * C4439 + C38293 * C4545 +
             C38366 * C8600 - C38590 * C8516 - C38366 * C8760 +
             C38294 * C8842) *
                C38291 +
            (C43485 + C43486) * C38292) *
               C89247 * C89217 -
           ((C39540 + C39541) * C38292 +
            (C38366 * C926 - C38590 * C820 - C38366 * C1138 + C38294 * C1228 +
             C38365 * C923 - C38589 * C819 - C38365 * C1135 + C38293 * C1227) *
                C38291) *
               C89247 * C9228) *
              C813 +
          (((C38365 * C926 - C38589 * C820 - C38365 * C1138 + C38293 * C1228 +
             C38366 * C5787 - C38590 * C5727 - C38366 * C5899 +
             C38294 * C5957) *
                C38291 +
            (C39542 + C39543) * C38292) *
               C89247 * C9228 -
           ((C38366 * C16822 - C38590 * C16684 - C38366 * C17038 +
             C38294 * C17156 + C38365 * C8601 - C38589 * C8515 -
             C38365 * C8761 + C38293 * C8841) *
                C38292 +
            (C38366 * C16821 - C38590 * C16683 - C38366 * C17037 +
             C38294 * C17155 + C38365 * C8600 - C38589 * C8516 -
             C38365 * C8760 + C38293 * C8842) *
                C38291) *
               C89247 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eeyz[14] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C38365 +
             (C89247 * C493 - C263 * C346) * C38293 +
             (C13956 - C13957) * C38366 + (C14240 - C14241) * C38294) *
                C38291 +
            ((C277 - C278) * C38365 + (C500 - C501) * C38293 + C39282 * C38366 +
             C39642 * C38294) *
                C38292) *
               C9228 +
           (((C263 * C1724 - C89247 * C1934) * C38365 +
             (C263 * C2040 - C89247 * C2240) * C38293 +
             (C16928 - C16929) * C38366 + (C17258 - C17259) * C38294) *
                C38291 +
            ((C1951 - C1952) * C38365 + (C2249 - C2250) * C38293 +
             C43193 * C38366 + C43617 * C38294) *
                C38292) *
               C89217) *
              C89137 * C5075 +
          ((((C278 - C277) * C38365 + (C501 - C500) * C38293 + C39284 * C38366 +
             C39643 * C38294) *
                C38291 +
            ((C282 - C281) * C38365 + (C504 - C503) * C38293 + C2792 * C38366 +
             C3032 * C38294) *
                C38292) *
               C9228 +
           (((C1952 - C1951) * C38365 + (C2250 - C2249) * C38293 +
             C43195 * C38366 + C43618 * C38294) *
                C38291 +
            ((C1956 - C1955) * C38365 + (C2252 - C2251) * C38293 +
             (C4338 - C4339) * C38366 + (C4668 - C4669) * C38294) *
                C38292) *
               C89217) *
              C89137 * C5076 +
          (((C293 * C38365 + C510 * C38293 + C41234 * C38366 +
             C41552 * C38294) *
                C38291 +
            ((C286 - C285) * C38365 + (C507 - C506) * C38293 +
             (C2794 - C2795) * C38366 + (C3033 - C3034) * C38294) *
                C38292) *
               C9228 +
           ((C3515 * C38365 + C3755 * C38293 + (C4339 - C4338) * C38366 +
             (C4669 - C4668) * C38294) *
                C38291 +
            ((C3518 - C3517) * C38365 + (C3757 - C3756) * C38293 +
             (C263 * C4100 - C89247 * C4328) * C38366 +
             (C263 * C4442 - C89247 * C4664) * C38294) *
                C38292) *
               C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C38365 +
             (C89247 * C493 - C263 * C346) * C38293 +
             (C13956 - C13957) * C38366 + (C14240 - C14241) * C38294) *
                C38291 +
            ((C277 - C278) * C38365 + (C500 - C501) * C38293 + C39282 * C38366 +
             C39642 * C38294) *
                C38292) *
               C9228 +
           (((C263 * C1724 - C89247 * C1934) * C38365 +
             (C263 * C2040 - C89247 * C2240) * C38293 +
             (C16928 - C16929) * C38366 + (C17258 - C17259) * C38294) *
                C38291 +
            ((C1951 - C1952) * C38365 + (C2249 - C2250) * C38293 +
             C43193 * C38366 + C43617 * C38294) *
                C38292) *
               C89217) *
              C812 +
          ((((C13957 - C13956) * C38365 + (C14241 - C14240) * C38293 +
             (C13961 - C13960) * C38366 + (C14243 - C14242) * C38294) *
                C38291 +
            (C39284 * C38365 + C39643 * C38293 + C13968 * C38366 +
             C14246 * C38294) *
                C38292) *
               C9228 +
           (((C16929 - C16928) * C38365 + (C17259 - C17258) * C38293 +
             (C16933 - C16932) * C38366 + (C17261 - C17260) * C38294) *
                C38291 +
            (C43195 * C38365 + C43618 * C38293 + (C16936 - C16937) * C38366 +
             (C17262 - C17263) * C38294) *
                C38292) *
               C89217) *
              C813 +
          (((C13974 * C38365 + C14249 * C38293 + (C13965 - C13964) * C38366 +
             (C14245 - C14244) * C38294) *
                C38291 +
            (C39286 * C38365 + C39644 * C38293 + (C13970 - C13971) * C38366 +
             (C14247 - C14248) * C38294) *
                C38292) *
               C9228 +
           ((C21288 * C38365 + C21529 * C38293 + (C21291 - C21290) * C38366 +
             (C21531 - C21530) * C38294) *
                C38291 +
            ((C16937 - C16936) * C38365 + (C17263 - C17262) * C38293 +
             (C263 * C16684 - C89247 * C16924) * C38366 +
             (C263 * C17038 - C89247 * C17256) * C38294) *
                C38292) *
               C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eezx[14] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                 C263 +
             (C38291 * C571 - C38295 * C565 + C38292 * C572 - C38297 * C566) *
                 C89247) *
                C38293 +
            ((C39386 - C39387 + C39388 - C39389) * C263 +
             (C39743 - C39744 + C39745 - C39746) * C89247) *
                C38294) *
               C9228 +
           (((C38295 * C1724 - C38291 * C1734 + C38297 * C1723 -
              C38292 * C1732) *
                 C263 +
             (C38295 * C2330 - C38291 * C2338 + C38297 * C2331 -
              C38292 * C2339) *
                 C89247) *
                C38293 +
            ((C43327 - C43328 + C43329 - C43330) * C263 +
             (C43749 - C43750 + C43751 - C43752) * C89247) *
                C38294) *
               C89217) *
              C89137 * C5075 +
          ((((C38295 * C107 - C38291 * C114 + C38297 * C108 - C38292 * C116) *
                 C263 +
             (C38295 * C566 - C38291 * C572 + C38297 * C567 - C38292 * C573) *
                 C89247) *
                C38293 +
            ((C39402 - C39403 + C39404 - C39405) * C263 +
             (C39751 - C39752 + C39753 - C39754) * C89247) *
                C38294) *
               C9228 +
           (((C38291 * C1732 - C38295 * C1723 + C38292 * C1730 -
              C38297 * C1722) *
                 C263 +
             (C38291 * C2339 - C38295 * C2331 + C38292 * C2340 -
              C38297 * C2332) *
                 C89247) *
                C38293 +
            ((C43335 - C43336 + C43337 - C43338) * C263 +
             (C43753 - C43754 + C43755 - C43756) * C89247) *
                C38294) *
               C89217) *
              C89137 * C5076 +
          ((((C38291 * C116 - C38295 * C108 + C38292 * C118 - C38297 * C109) *
                 C263 +
             (C38291 * C573 - C38295 * C567 + C38292 * C574 - C38297 * C568) *
                 C89247) *
                C38293 +
            ((C41334 - C41335 + C41336 - C41337) * C263 +
             (C41651 - C41652 + C41653 - C41654) * C89247) *
                C38294) *
               C9228 +
           (((C38295 * C1722 - C38291 * C1730 + C38297 * C1728 -
              C38292 * C1742) *
                 C263 +
             (C38295 * C2332 - C38291 * C2340 + C38297 * C2336 -
              C38292 * C2344) *
                 C89247) *
                C38293 +
            ((C38295 * C4099 - C38291 * C4105 + C38297 * C4100 -
              C38292 * C4107) *
                 C263 +
             (C38295 * C4769 - C38291 * C4773 + C38297 * C4770 -
              C38292 * C4774) *
                 C89247) *
                C38294) *
               C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                 C263 +
             (C38291 * C571 - C38295 * C565 + C38292 * C572 - C38297 * C566) *
                 C89247) *
                C38293 +
            ((C39386 - C39387 + C39388 - C39389) * C263 +
             (C39743 - C39744 + C39745 - C39746) * C89247) *
                C38294) *
               C9228 +
           (((C38295 * C1724 - C38291 * C1734 + C38297 * C1723 -
              C38292 * C1732) *
                 C263 +
             (C38295 * C2330 - C38291 * C2338 + C38297 * C2331 -
              C38292 * C2339) *
                 C89247) *
                C38293 +
            ((C43327 - C43328 + C43329 - C43330) * C263 +
             (C43749 - C43750 + C43751 - C43752) * C89247) *
                C38294) *
               C89217) *
              C812 +
          ((((C39387 - C39386 + C39389 - C39388) * C263 +
             (C39744 - C39743 + C39746 - C39745) * C89247) *
                C38293 +
            ((C39394 - C39395 + C39396 - C39397) * C263 +
             (C39747 - C39748 + C39749 - C39750) * C89247) *
                C38294) *
               C9228 +
           (((C43328 - C43327 + C43330 - C43329) * C263 +
             (C43750 - C43749 + C43752 - C43751) * C89247) *
                C38293 +
            ((C48891 - C48892 + C48893 - C48894) * C263 +
             (C49193 - C49194 + C49195 - C49196) * C89247) *
                C38294) *
               C89217) *
              C813 +
          ((((C39395 - C39394 + C39397 - C39396) * C263 +
             (C39748 - C39747 + C39750 - C39749) * C89247) *
                C38293 +
            ((C45183 - C45184 + C45185 - C45186) * C263 +
             (C45389 - C45390 + C45391 - C45392) * C89247) *
                C38294) *
               C9228 +
           (((C48892 - C48891 + C48894 - C48893) * C263 +
             (C49194 - C49193 + C49196 - C49195) * C89247) *
                C38293 +
            ((C38295 * C16683 - C38291 * C16685 + C38297 * C16684 -
              C38292 * C16687) *
                 C263 +
             (C38295 * C17361 - C38291 * C17363 + C38297 * C17362 -
              C38292 * C17364) *
                 C89247) *
                C38294) *
               C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eezy[14] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                 C263 +
             (C38293 * C627 - C38365 * C565 + C38294 * C1515 - C38366 * C1425) *
                 C89247) *
                C38291 +
            ((C38368 - C38369 + C38370 - C38371) * C263 +
             (C38832 - C38833 + C38834 - C38835) * C89247) *
                C38292) *
               C9228 +
           (((C38365 * C1724 - C38293 * C1828 + C38366 * C4097 -
              C38294 * C4211) *
                 C263 +
             (C38365 * C2330 - C38293 * C2420 + C38366 * C4767 -
              C38294 * C4873) *
                 C89247) *
                C38291 +
            ((C40163 - C40164 + C40165 - C40166) * C263 +
             (C40801 - C40802 + C40803 - C40804) * C89247) *
                C38292) *
               C89217) *
              C89137 * C5075 +
          ((((C38369 - C38368 + C38371 - C38370) * C263 +
             (C38833 - C38832 + C38835 - C38834) * C89247) *
                C38291 +
            ((C38376 - C38377 + C38378 - C38379) * C263 +
             (C38836 - C38837 + C38838 - C38839) * C89247) *
                C38292) *
               C9228 +
           (((C40164 - C40163 + C40166 - C40165) * C263 +
             (C40802 - C40801 + C40804 - C40803) * C89247) *
                C38291 +
            ((C42053 - C42054 + C42055 - C42056) * C263 +
             (C42663 - C42664 + C42665 - C42666) * C89247) *
                C38292) *
               C89217) *
              C89137 * C5076 +
          ((((C38377 - C38376 + C38379 - C38378) * C263 +
             (C38837 - C38836 + C38839 - C38838) * C89247) *
                C38291 +
            ((C38384 - C38385 + C38386 - C38387) * C263 +
             (C38840 - C38841 + C38842 - C38843) * C89247) *
                C38292) *
               C9228 +
           (((C42054 - C42053 + C42056 - C42055) * C263 +
             (C42664 - C42663 + C42666 - C42665) * C89247) *
                C38291 +
            ((C38365 * C1728 - C38293 * C1834 + C38366 * C4100 -
              C38294 * C4214) *
                 C263 +
             (C38365 * C2336 - C38293 * C2426 + C38366 * C4770 -
              C38294 * C4876) *
                 C89247) *
                C38292) *
               C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                 C263 +
             (C38293 * C627 - C38365 * C565 + C38294 * C1515 - C38366 * C1425) *
                 C89247) *
                C38291 +
            ((C38368 - C38369 + C38370 - C38371) * C263 +
             (C38832 - C38833 + C38834 - C38835) * C89247) *
                C38292) *
               C9228 +
           (((C38365 * C1724 - C38293 * C1828 + C38366 * C4097 -
              C38294 * C4211) *
                 C263 +
             (C38365 * C2330 - C38293 * C2420 + C38366 * C4767 -
              C38294 * C4873) *
                 C89247) *
                C38291 +
            ((C40163 - C40164 + C40165 - C40166) * C263 +
             (C40801 - C40802 + C40803 - C40804) * C89247) *
                C38292) *
               C89217) *
              C812 +
          ((((C38365 * C819 - C38293 * C923 + C38366 * C820 - C38294 * C926) *
                 C263 +
             (C38365 * C1425 - C38293 * C1515 + C38366 * C1428 -
              C38294 * C1518) *
                 C89247) *
                C38291 +
            ((C39168 - C39169 + C39170 - C39171) * C263 +
             (C39857 - C39858 + C39859 - C39860) * C89247) *
                C38292) *
               C9228 +
           (((C38293 * C4211 - C38365 * C4097 + C38294 * C8600 -
              C38366 * C8516) *
                 C263 +
             (C38293 * C4873 - C38365 * C4767 + C38294 * C9074 -
              C38366 * C8994) *
                 C89247) *
                C38291 +
            ((C43055 - C43056 + C43057 - C43058) * C263 +
             (C43887 - C43888 + C43889 - C43890) * C89247) *
                C38292) *
               C89217) *
              C813 +
          ((((C38293 * C926 - C38365 * C820 + C38294 * C5787 - C38366 * C5727) *
                 C263 +
             (C38293 * C1518 - C38365 * C1428 + C38294 * C6117 -
              C38366 * C6061) *
                 C89247) *
                C38291 +
            ((C39176 - C39177 + C39178 - C39179) * C263 +
             (C39861 - C39862 + C39863 - C39864) * C89247) *
                C38292) *
               C9228 +
           (((C38365 * C8516 - C38293 * C8600 + C38366 * C16683 -
              C38294 * C16821) *
                 C263 +
             (C38365 * C8994 - C38293 * C9074 + C38366 * C17361 -
              C38294 * C17471) *
                 C89247) *
                C38291 +
            ((C38365 * C8515 - C38293 * C8601 + C38366 * C16684 -
              C38294 * C16822) *
                 C263 +
             (C38365 * C8995 - C38293 * C9075 + C38366 * C17362 -
              C38294 * C17472) *
                 C89247) *
                C38292) *
               C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eezz[14] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) *
                 C38293 +
             C14524 * C38294) *
                C38291 +
            (C38910 + C38911) * C38292) *
               C9228 -
           ((C40907 + C40908) * C38292 +
            (C17593 * C38294 +
             (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
                 C38293) *
                C38291) *
               C89217) *
              C89137 * C5075 +
          (((C40908 + C40907) * C38291 + (C42765 + C42766) * C38292) * C89217 -
           ((C38912 + C38913) * C38292 + (C38911 + C38910) * C38291) * C9228) *
              C89137 * C5076 +
          (((C38913 + C38912) * C38291 + (C38914 + C38915) * C38292) * C9228 -
           (((C263 * C4328 - C699 * C4100 - C263 * C4770 + C89247 * C4982) *
                 C38294 +
             C3998 * C38293) *
                C38292 +
            (C42766 + C42765) * C38291) *
               C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) *
                 C38293 +
             C14524 * C38294) *
                C38291 +
            (C38910 + C38911) * C38292) *
               C9228 -
           ((C40907 + C40908) * C38292 +
            (C17593 * C38294 +
             (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
                 C38293) *
                C38291) *
               C89217) *
              C812 +
          (((C17593 * C38293 + C17592 * C38294) * C38291 +
            (C44021 + C44022) * C38292) *
               C89217 -
           ((C39963 + C39964) * C38292 +
            (C14525 * C38294 + C14524 * C38293) * C38291) *
               C9228) *
              C813 +
          (((C14525 * C38293 + C14526 * C38294) * C38291 +
            (C39965 + C39966) * C38292) *
               C9228 -
           (((C263 * C16924 - C699 * C16684 - C263 * C17362 + C89247 * C17572) *
                 C38294 +
             C17594 * C38293) *
                C38292 +
            (C21770 * C38294 + C17592 * C38293) * C38291) *
               C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eexx[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                 C54750 +
             C27042 * C54751) *
                C38293 +
            (C71726 + C71727) * C38294) *
               C89153 * C89307 -
           ((C71728 + C71729) * C38294 + (C71727 + C71726) * C38293) * C89153 *
               C89189) *
              C89333 +
          (((C71730 + C71731) * C38293 + (C71732 + C71733) * C38294) * C89153 *
               C89189 -
           ((C71731 + C71730) * C38294 +
            (C27045 * C54751 +
             (C13261 * C114 - C13262 * C107 - C13261 * C115 + C89093 * C125) *
                 C54750) *
                C38293) *
               C89153 * C89307) *
              C89334 +
          ((((C13261 * C116 - C13262 * C108 - C13261 * C117 + C89093 * C126) *
                 C54750 +
             C28534 * C54751) *
                C38293 +
            (C73602 + C73610) * C38294) *
               C89153 * C89307 -
           (((C13261 * C8517 - C13262 * C8514 - C13261 * C8518 +
              C89093 * C8523) *
                 C54751 +
             C15313 * C54750) *
                C38294 +
            (C73610 + C73602) * C38293) *
               C89153 * C89189) *
              C2628)) /
        (p * q * std::sqrt(p + q));
    d2eexy[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                 C13261 +
             (C38293 * C187 - C38365 * C113 + C38294 * C931 - C38366 * C830) *
                 C89093) *
                C54750 +
            ((C72766 - C72767 + C72768 - C72769) * C13261 +
             (C72770 - C72771 + C72772 - C72773) * C89093) *
                C54751) *
               C89153 * C89307 +
           (((C38365 * C819 - C38293 * C923 + C38366 * C820 - C38294 * C926) *
                 C13261 +
             (C38365 * C830 - C38293 * C931 + C38366 * C832 - C38294 * C934) *
                 C89093) *
                C54750 +
            ((C38365 * C4097 - C38293 * C4211 + C38366 * C8516 -
              C38294 * C8600) *
                 C13261 +
             (C38365 * C4102 - C38293 * C4215 + C38366 * C8522 -
              C38294 * C8603) *
                 C89093) *
                C54751) *
               C89153 * C89189) *
              C89333 +
          ((((C38369 - C38368 + C38371 - C38370) * C13261 +
             (C38373 - C38372 + C38375 - C38374) * C89093) *
                C54750 +
            ((C40163 - C40164 + C40165 - C40166) * C13261 +
             (C40167 - C40168 + C40169 - C40170) * C89093) *
                C54751) *
               C89153 * C89307 +
           (((C39169 - C39168 + C39171 - C39170) * C13261 +
             (C39173 - C39172 + C39175 - C39174) * C89093) *
                C54750 +
            ((C43055 - C43056 + C43057 - C43058) * C13261 +
             (C43059 - C43060 + C43061 - C43062) * C89093) *
                C54751) *
               C89153 * C89189) *
              C89334 +
          ((((C38377 - C38376 + C38379 - C38378) * C13261 +
             (C38381 - C38380 + C38383 - C38382) * C89093) *
                C54750 +
            ((C42053 - C42054 + C42055 - C42056) * C13261 +
             (C42057 - C42058 + C42059 - C42060) * C89093) *
                C54751) *
               C89153 * C89307 +
           (((C41129 - C41128 + C41131 - C41130) * C13261 +
             (C41133 - C41132 + C41135 - C41134) * C89093) *
                C54750 +
            ((C38365 * C4099 - C38293 * C4213 + C38366 * C8514 -
              C38294 * C8602) *
                 C13261 +
             (C38365 * C4106 - C38293 * C4217 + C38366 * C8518 -
              C38294 * C8605) *
                 C89093) *
                C54751) *
               C89153 * C89189) *
              C2628)) /
        (p * q * std::sqrt(p + q));
    d2eexz[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                 C13261 +
             (C54750 * C270 - C54884 * C113 + C54751 * C1942 - C54885 * C1735) *
                 C89093) *
                C38293 +
            ((C71930 - C71931 + C71932 - C71933) * C13261 +
             (C71934 - C71935 + C71936 - C71937) * C89093) *
                C38294) *
               C89153 * C89307 +
           (((C71931 - C71930 + C71933 - C71932) * C13261 +
             (C71935 - C71934 + C71937 - C71936) * C89093) *
                C38293 +
            ((C71938 - C71939 + C71940 - C71941) * C13261 +
             (C71942 - C71943 + C71944 - C71945) * C89093) *
                C38294) *
               C89153 * C89189) *
              C89333 +
          ((((C54888 - C54887 + C54890 - C54889) * C13261 +
             (C54892 - C54891 + C54894 - C54893) * C89093) *
                C38293 +
            ((C55661 - C55662 + C55663 - C55664) * C13261 +
             (C55665 - C55666 + C55667 - C55668) * C89093) *
                C38294) *
               C89153 * C89307 +
           (((C55662 - C55661 + C55664 - C55663) * C13261 +
             (C55666 - C55665 + C55668 - C55667) * C89093) *
                C38293 +
            ((C55669 - C55670 + C55671 - C55672) * C13261 +
             (C55673 - C55674 + C55675 - C55676) * C89093) *
                C38294) *
               C89153 * C89189) *
              C89334 +
          ((((C54896 - C54895 + C54898 - C54897) * C13261 +
             (C54900 - C54899 + C54902 - C54901) * C89093) *
                C38293 +
            ((C57659 - C57660 + C57661 - C57662) * C13261 +
             (C57663 - C57664 + C57665 - C57666) * C89093) *
                C38294) *
               C89153 * C89307 +
           (((C57660 - C57659 + C57662 - C57661) * C13261 +
             (C57664 - C57663 + C57666 - C57665) * C89093) *
                C38293 +
            ((C54884 * C822 - C54750 * C1034 + C54885 * C8514 -
              C54751 * C8682) *
                 C13261 +
             (C54884 * C836 - C54750 * C1042 + C54885 * C8518 -
              C54751 * C8685) *
                 C89093) *
                C38294) *
               C89153 * C89189) *
              C2628)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C38365 +
             (C89093 * C352 - C13261 * C346) * C38293 +
             (C14060 - C14061) * C38366 + (C14062 - C14063) * C38294) *
                C54750 +
            ((C27308 - C27309) * C38365 + (C27310 - C27311) * C38293 +
             (C17043 - C17042) * C38366 + (C17045 - C17044) * C38294) *
                C54751) *
               C89153 * C89307 +
           (((C14061 - C14060) * C38365 + (C14063 - C14062) * C38293 +
             (C14065 - C14064) * C38366 + (C14067 - C14066) * C38294) *
                C54750 +
            ((C17042 - C17043) * C38365 + (C17044 - C17045) * C38293 +
             C21373 * C38366 + C21374 * C38294) *
                C54751) *
               C89153 * C89189) *
              C89333 +
          ((((C13261 * C107 - C89093 * C114) * C38365 +
             (C13261 * C347 - C89093 * C353) * C38293 +
             (C14072 - C14073) * C38366 + (C14074 - C14075) * C38294) *
                C54750 +
            ((C27320 - C27321) * C38365 + (C27322 - C27323) * C38293 +
             (C17051 - C17050) * C38366 + (C17053 - C17052) * C38294) *
                C54751) *
               C89153 * C89307 +
           (((C14073 - C14072) * C38365 + (C14075 - C14074) * C38293 +
             (C14077 - C14076) * C38366 + (C14079 - C14078) * C38294) *
                C54750 +
            ((C17050 - C17051) * C38365 + (C17052 - C17053) * C38293 +
             (C17054 - C17055) * C38366 + (C17056 - C17057) * C38294) *
                C54751) *
               C89153 * C89189) *
              C89334 +
          ((((C89093 * C116 - C13261 * C108) * C38365 +
             (C89093 * C354 - C13261 * C348) * C38293 +
             (C15538 - C15539) * C38366 + (C15540 - C15541) * C38294) *
                C54750 +
            ((C28758 - C28759) * C38365 + (C28760 - C28761) * C38293 +
             (C73905 - C73906) * C38366 + (C73907 - C73908) * C38294) *
                C54751) *
               C89153 * C89307 +
           (((C15539 - C15538) * C38365 + (C15541 - C15540) * C38293 +
             (C15543 - C15542) * C38366 + (C15545 - C15544) * C38294) *
                C54750 +
            ((C73906 - C73905) * C38365 + (C73908 - C73907) * C38293 +
             (C13261 * C8514 - C89093 * C8517) * C38366 +
             (C13261 * C8762 - C89093 * C8765) * C38294) *
                C54751) *
               C89153 * C89189) *
              C2628)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C38365 * C181 - C38589 * C106 - C38365 * C346 + C38293 * C409 +
             C38366 * C923 - C38590 * C819 - C38366 * C1135 + C38294 * C1227) *
                C89093 * C54750 +
            (C73100 + C73101) * C89093 * C54751) *
               C89153 * C89307 -
           ((C38366 * C8600 - C38590 * C8516 - C38366 * C8760 + C38294 * C8842 +
             C38365 * C4211 - C38589 * C4097 - C38365 * C4439 +
             C38293 * C4545) *
                C89093 * C54751 +
            (C38366 * C926 - C38590 * C820 - C38366 * C1138 + C38294 * C1228 +
             C38365 * C923 - C38589 * C819 - C38365 * C1135 + C38293 * C1227) *
                C89093 * C54750) *
               C89153 * C89189) *
              C89333 +
          (((C39541 + C39540) * C89093 * C54750 +
            (C43485 + C43486) * C89093 * C54751) *
               C89153 * C89189 -
           ((C40501 + C40502) * C89093 * C54751 +
            (C38629 + C38628) * C89093 * C54750) *
               C89153 * C89307) *
              C89334 +
          (((C38631 + C38630) * C89093 * C54750 +
            (C42367 + C42368) * C89093 * C54751) *
               C89153 * C89307 -
           ((C38366 * C8602 - C38590 * C8514 - C38366 * C8762 + C38294 * C8840 +
             C38365 * C4213 - C38589 * C4099 - C38365 * C4441 +
             C38293 * C4547) *
                C89093 * C54751 +
            (C41453 + C41452) * C89093 * C54750) *
               C89153 * C89189) *
              C2628)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                C38365 +
            (C54750 * C493 - C54884 * C346 + C54751 * C2240 - C54885 * C2040) *
                C38293 +
            (C71930 - C71931 + C71932 - C71933) * C38366 +
            (C72240 - C72241 + C72242 - C72243) * C38294) *
               C89093 * C89153 * C89307 +
           ((C71931 - C71930 + C71933 - C71932) * C38365 +
            (C72241 - C72240 + C72243 - C72242) * C38293 +
            (C71938 - C71939 + C71940 - C71941) * C38366 +
            (C72244 - C72245 + C72246 - C72247) * C38294) *
               C89093 * C89153 * C89189) *
              C89333 +
          (((C54888 - C54887 + C54890 - C54889) * C38365 +
            (C55110 - C55109 + C55112 - C55111) * C38293 +
            (C55661 - C55662 + C55663 - C55664) * C38366 +
            (C55978 - C55979 + C55980 - C55981) * C38294) *
               C89093 * C89153 * C89307 +
           ((C55662 - C55661 + C55664 - C55663) * C38365 +
            (C55979 - C55978 + C55981 - C55980) * C38293 +
            (C55669 - C55670 + C55671 - C55672) * C38366 +
            (C55982 - C55983 + C55984 - C55985) * C38294) *
               C89093 * C89153 * C89189) *
              C89334 +
          (((C54896 - C54895 + C54898 - C54897) * C38365 +
            (C55114 - C55113 + C55116 - C55115) * C38293 +
            (C57659 - C57660 + C57661 - C57662) * C38366 +
            (C57961 - C57962 + C57963 - C57964) * C38294) *
               C89093 * C89153 * C89307 +
           ((C57660 - C57659 + C57662 - C57661) * C38365 +
            (C57962 - C57961 + C57964 - C57963) * C38293 +
            (C54884 * C822 - C54750 * C1034 + C54885 * C8514 - C54751 * C8682) *
                C38366 +
            (C54884 * C1140 - C54750 * C1340 + C54885 * C8762 -
             C54751 * C8919) *
                C38294) *
               C89093 * C89153 * C89189) *
              C2628)) /
        (p * q * std::sqrt(p + q));
    d2eezx[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C54884 +
             (C89093 * C571 - C13261 * C565) * C54750 +
             (C27308 - C27309) * C54885 + (C27606 - C27607) * C54751) *
                C38293 +
            ((C14060 - C14061) * C54884 + (C14328 - C14329) * C54750 +
             (C17043 - C17042) * C54885 + (C17367 - C17366) * C54751) *
                C38294) *
               C89153 * C89307 +
           (((C14061 - C14060) * C54884 + (C14329 - C14328) * C54750 +
             (C17042 - C17043) * C54885 + (C17366 - C17367) * C54751) *
                C38293 +
            ((C14065 - C14064) * C54884 + (C14332 - C14331) * C54750 +
             C21373 * C54885 + C21609 * C54751) *
                C38294) *
               C89153 * C89189) *
              C89333 +
          ((((C13261 * C107 - C89093 * C114) * C54884 +
             (C13261 * C566 - C89093 * C572) * C54750 +
             (C27320 - C27321) * C54885 + (C27612 - C27613) * C54751) *
                C38293 +
            ((C14072 - C14073) * C54884 + (C14335 - C14336) * C54750 +
             (C17051 - C17050) * C54885 + (C17371 - C17370) * C54751) *
                C38294) *
               C89153 * C89307 +
           (((C14073 - C14072) * C54884 + (C14336 - C14335) * C54750 +
             (C17050 - C17051) * C54885 + (C17370 - C17371) * C54751) *
                C38293 +
            ((C14077 - C14076) * C54884 + (C14339 - C14338) * C54750 +
             (C17054 - C17055) * C54885 + (C17372 - C17373) * C54751) *
                C38294) *
               C89153 * C89189) *
              C89334 +
          ((((C89093 * C116 - C13261 * C108) * C54884 +
             (C89093 * C573 - C13261 * C567) * C54750 +
             (C28758 - C28759) * C54885 + (C28990 - C28991) * C54751) *
                C38293 +
            ((C15538 - C15539) * C54884 + (C15768 - C15769) * C54750 +
             (C73905 - C73906) * C54885 + (C74203 - C74204) * C54751) *
                C38294) *
               C89153 * C89307 +
           (((C15539 - C15538) * C54884 + (C15769 - C15768) * C54750 +
             (C73906 - C73905) * C54885 + (C74204 - C74203) * C54751) *
                C38293 +
            ((C15543 - C15542) * C54884 + (C15771 - C15770) * C54750 +
             (C13261 * C8514 - C89093 * C8517) * C54885 +
             (C13261 * C8996 - C89093 * C8999) * C54751) *
                C38294) *
               C89153 * C89189) *
              C2628)) /
        (p * q * std::sqrt(p + q));
    d2eezy[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                C54884 +
            (C38293 * C627 - C38365 * C565 + C38294 * C1515 - C38366 * C1425) *
                C54750 +
            (C72766 - C72767 + C72768 - C72769) * C54885 +
            (C73398 - C73399 + C73400 - C73401) * C54751) *
               C89093 * C89153 * C89307 +
           ((C38365 * C819 - C38293 * C923 + C38366 * C820 - C38294 * C926) *
                C54884 +
            (C38365 * C1425 - C38293 * C1515 + C38366 * C1428 -
             C38294 * C1518) *
                C54750 +
            (C38365 * C4097 - C38293 * C4211 + C38366 * C8516 -
             C38294 * C8600) *
                C54885 +
            (C38365 * C4767 - C38293 * C4873 + C38366 * C8994 -
             C38294 * C9074) *
                C54751) *
               C89093 * C89153 * C89189) *
              C89333 +
          (((C38369 - C38368 + C38371 - C38370) * C54884 +
            (C38833 - C38832 + C38835 - C38834) * C54750 +
            (C40163 - C40164 + C40165 - C40166) * C54885 +
            (C40801 - C40802 + C40803 - C40804) * C54751) *
               C89093 * C89153 * C89307 +
           ((C39169 - C39168 + C39171 - C39170) * C54884 +
            (C39858 - C39857 + C39860 - C39859) * C54750 +
            (C43055 - C43056 + C43057 - C43058) * C54885 +
            (C43887 - C43888 + C43889 - C43890) * C54751) *
               C89093 * C89153 * C89189) *
              C89334 +
          (((C38377 - C38376 + C38379 - C38378) * C54884 +
            (C38837 - C38836 + C38839 - C38838) * C54750 +
            (C42053 - C42054 + C42055 - C42056) * C54885 +
            (C42663 - C42664 + C42665 - C42666) * C54751) *
               C89093 * C89153 * C89307 +
           ((C41129 - C41128 + C41131 - C41130) * C54884 +
            (C41754 - C41753 + C41756 - C41755) * C54750 +
            (C38365 * C4099 - C38293 * C4213 + C38366 * C8514 -
             C38294 * C8602) *
                C54885 +
            (C38365 * C4769 - C38293 * C4875 + C38366 * C8996 -
             C38294 * C9076) *
                C54751) *
               C89093 * C89153 * C89189) *
              C2628)) /
        (p * q * std::sqrt(p + q));
    d2eezz[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C54884 * C264 - C55318 * C106 - C54884 * C565 + C54750 * C700 +
             C54885 * C1934 - C55319 * C1724 - C54885 * C2330 +
             C54751 * C2512) *
                C38293 +
            (C72566 + C72567) * C38294) *
               C89093 * C89153 * C89307 -
           ((C72568 + C72569) * C38294 + (C72567 + C72566) * C38293) * C89093 *
               C89153 * C89189) *
              C89333 +
          (((C56307 + C56306) * C38293 + (C56308 + C56309) * C38294) * C89093 *
               C89153 * C89189 -
           ((C56306 + C56307) * C38294 + (C55358 + C55357) * C38293) * C89093 *
               C89153 * C89307) *
              C89334 +
          (((C55360 + C55359) * C38293 + (C58271 + C58272) * C38294) * C89093 *
               C89153 * C89307 -
           ((C54885 * C8682 - C55319 * C8514 - C54885 * C8996 + C54751 * C9151 +
             C54884 * C1034 - C55318 * C822 - C54884 * C1430 + C54750 * C1610) *
                C38294 +
            (C58272 + C58271) * C38293) *
               C89093 * C89153 * C89189) *
              C2628)) /
        (p * q * std::sqrt(p + q));
    d2eexx[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                  C54750 +
              C27042 * C54751) *
                 C38293 +
             (C71726 + C71727) * C38294) *
                C89308 -
            ((C75413 + C75414) * C38294 +
             (C27043 * C54751 + C27042 * C54750) * C38293) *
                C89217) *
               C89307 +
           (((C75414 + C75413) * C38293 +
             (C16716 * C54750 + C18857 * C54751) * C38294) *
                C89217 -
            ((C71728 + C71729) * C38294 + (C71727 + C71726) * C38293) *
                C89308) *
               C89189) *
              C815 +
          ((((C27045 * C54750 + C27046 * C54751) * C38293 +
             (C75415 + C75416) * C38294) *
                C89217 -
            ((C71731 + C71730) * C38294 +
             (C27045 * C54751 +
              (C13261 * C114 - C13262 * C107 - C13261 * C115 + C89093 * C125) *
                  C54750) *
                 C38293) *
                C89308) *
               C89307 +
           (((C71730 + C71731) * C38293 + (C71732 + C71733) * C38294) * C89308 -
            (((C13261 * C14605 - C13262 * C14602 - C13261 * C14606 +
               C89093 * C14608) *
                  C54751 +
              C16719 * C54750) *
                 C38294 +
             (C75416 + C75415) * C38293) *
                C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eexy[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                  C13261 +
              (C38293 * C187 - C38365 * C113 + C38294 * C931 - C38366 * C830) *
                  C89093) *
                 C54750 +
             ((C72766 - C72767 + C72768 - C72769) * C13261 +
              (C72770 - C72771 + C72772 - C72773) * C89093) *
                 C54751) *
                C89308 +
            (((C72767 - C72766 + C72769 - C72768) * C13261 +
              (C72771 - C72770 + C72773 - C72772) * C89093) *
                 C54750 +
             ((C72774 - C72775 + C72776 - C72777) * C13261 +
              (C72778 - C72779 + C72780 - C72781) * C89093) *
                 C54751) *
                C89217) *
               C89307 +
           ((((C38365 * C819 - C38293 * C923 + C38366 * C820 - C38294 * C926) *
                  C13261 +
              (C38365 * C830 - C38293 * C931 + C38366 * C832 - C38294 * C934) *
                  C89093) *
                 C54750 +
             ((C75547 - C75548 + C75549 - C75550) * C13261 +
              (C75551 - C75552 + C75553 - C75554) * C89093) *
                 C54751) *
                C89308 +
            (((C75548 - C75547 + C75550 - C75549) * C13261 +
              (C75552 - C75551 + C75554 - C75553) * C89093) *
                 C54750 +
             ((C38293 * C6333 - C38365 * C6249 + C38294 * C14683 -
               C38366 * C14601) *
                  C13261 +
              (C38293 * C6336 - C38365 * C6255 + C38294 * C14685 -
               C38366 * C14604) *
                  C89093) *
                 C54751) *
                C89217) *
               C89189) *
              C815 +
          (((((C38369 - C38368 + C38371 - C38370) * C13261 +
              (C38373 - C38372 + C38375 - C38374) * C89093) *
                 C54750 +
             ((C40163 - C40164 + C40165 - C40166) * C13261 +
              (C40167 - C40168 + C40169 - C40170) * C89093) *
                 C54751) *
                C89308 +
            (((C40164 - C40163 + C40166 - C40165) * C13261 +
              (C40168 - C40167 + C40170 - C40169) * C89093) *
                 C54750 +
             ((C40171 - C40172 + C40173 - C40174) * C13261 +
              (C40175 - C40176 + C40177 - C40178) * C89093) *
                 C54751) *
                C89217) *
               C89307 +
           ((((C39169 - C39168 + C39171 - C39170) * C13261 +
              (C39173 - C39172 + C39175 - C39174) * C89093) *
                 C54750 +
             ((C43055 - C43056 + C43057 - C43058) * C13261 +
              (C43059 - C43060 + C43061 - C43062) * C89093) *
                 C54751) *
                C89308 +
            (((C43056 - C43055 + C43058 - C43057) * C13261 +
              (C43060 - C43059 + C43062 - C43061) * C89093) *
                 C54750 +
             ((C38365 * C6248 - C38293 * C6334 + C38366 * C14602 -
               C38294 * C14684) *
                  C13261 +
              (C38365 * C6253 - C38293 * C6337 + C38366 * C14606 -
               C38294 * C14686) *
                  C89093) *
                 C54751) *
                C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eexz[16] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((((C54750 * C264 - C54884 * C106 + C54751 * C1934 -
                         C54885 * C1724) *
                            C13261 +
                        (C54750 * C270 - C54884 * C113 + C54751 * C1942 -
                         C54885 * C1735) *
                            C89093) *
                           C38293 +
                       ((C71930 - C71931 + C71932 - C71933) * C13261 +
                        (C71934 - C71935 + C71936 - C71937) * C89093) *
                           C38294) *
                          C89308 +
                      (((C54884 * C1724 - C54750 * C1934 + C54885 * C1725 -
                         C54751 * C1937) *
                            C13261 +
                        (C54884 * C1735 - C54750 * C1942 + C54885 * C1737 -
                         C54751 * C1945) *
                            C89093) *
                           C38293 +
                       ((C75685 - C75686 + C75687 - C75688) * C13261 +
                        (C75689 - C75690 + C75691 - C75692) * C89093) *
                           C38294) *
                          C89217) *
                         C89307 +
                     ((((C71931 - C71930 + C71933 - C71932) * C13261 +
                        (C71935 - C71934 + C71937 - C71936) * C89093) *
                           C38293 +
                       ((C71938 - C71939 + C71940 - C71941) * C13261 +
                        (C71942 - C71943 + C71944 - C71945) * C89093) *
                           C38294) *
                          C89308 +
                      (((C75686 - C75685 + C75688 - C75687) * C13261 +
                        (C75690 - C75689 + C75692 - C75691) * C89093) *
                           C38293 +
                       ((C54750 * C8680 - C54884 * C8516 + C54751 * C14761 -
                         C54885 * C14601) *
                            C13261 +
                        (C54750 * C8683 - C54884 * C8522 + C54751 * C14763 -
                         C54885 * C14604) *
                            C89093) *
                           C38294) *
                          C89217) *
                         C89189) *
                        C815 +
                    (((((C54888 - C54887 + C54890 - C54889) * C13261 +
                        (C54892 - C54891 + C54894 - C54893) * C89093) *
                           C38293 +
                       ((C55661 - C55662 + C55663 - C55664) * C13261 +
                        (C55665 - C55666 + C55667 - C55668) * C89093) *
                           C38294) *
                          C89308 +
                      (((C56667 - C56666 + C56669 - C56668) * C13261 +
                        (C56671 - C56670 + C56673 - C56672) * C89093) *
                           C38293 +
                       ((C59606 - C59607 + C59608 - C59609) * C13261 +
                        (C59610 - C59611 + C59612 - C59613) * C89093) *
                           C38294) *
                          C89217) *
                         C89307 +
                     ((((C55662 - C55661 + C55664 - C55663) * C13261 +
                        (C55666 - C55665 + C55668 - C55667) * C89093) *
                           C38293 +
                       ((C55669 - C55670 + C55671 - C55672) * C13261 +
                        (C55673 - C55674 + C55675 - C55676) * C89093) *
                           C38294) *
                          C89308 +
                      (((C59607 - C59606 + C59609 - C59608) * C13261 +
                        (C59611 - C59610 + C59613 - C59612) * C89093) *
                           C38293 +
                       ((C54884 * C8515 - C54750 * C8681 + C54885 * C14602 -
                         C54751 * C14762) *
                            C13261 +
                        (C54884 * C8520 - C54750 * C8684 + C54885 * C14606 -
                         C54751 * C14764) *
                            C89093) *
                           C38294) *
                          C89217) *
                         C89189) *
                        C89124)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C89093 * C112 - C13261 * C106) * C38365 +
              (C89093 * C352 - C13261 * C346) * C38293 +
              (C14060 - C14061) * C38366 + (C14062 - C14063) * C38294) *
                 C54750 +
             ((C27308 - C27309) * C38365 + (C27310 - C27311) * C38293 +
              C75823 * C38366 + C75824 * C38294) *
                 C54751) *
                C89308 +
            (((C27309 - C27308) * C38365 + (C27311 - C27310) * C38293 +
              C75825 * C38366 + C75826 * C38294) *
                 C54750 +
             ((C27313 - C27312) * C38365 + (C27315 - C27314) * C38293 +
              C31534 * C38366 + C31535 * C38294) *
                 C54751) *
                C89217) *
               C89307 +
           ((((C14061 - C14060) * C38365 + (C14063 - C14062) * C38293 +
              (C14065 - C14064) * C38366 + (C14067 - C14066) * C38294) *
                 C54750 +
             (C75825 * C38365 + C75826 * C38293 + C21373 * C38366 +
              C21374 * C38294) *
                 C54751) *
                C89308 +
            ((C75823 * C38365 + C75824 * C38293 + (C17047 - C17046) * C38366 +
              (C17049 - C17048) * C38294) *
                 C54750 +
             ((C19096 - C19097) * C38365 + (C19098 - C19099) * C38293 +
              (C19100 - C19101) * C38366 + (C19102 - C19103) * C38294) *
                 C54751) *
                C89217) *
               C89189) *
              C815 +
          (((((C13261 * C107 - C89093 * C114) * C38365 +
              (C13261 * C347 - C89093 * C353) * C38293 +
              (C14072 - C14073) * C38366 + (C14074 - C14075) * C38294) *
                 C54750 +
             ((C27320 - C27321) * C38365 + (C27322 - C27323) * C38293 +
              C75827 * C38366 + C75828 * C38294) *
                 C54751) *
                C89308 +
            (((C27321 - C27320) * C38365 + (C27323 - C27322) * C38293 +
              C75829 * C38366 + C75830 * C38294) *
                 C54750 +
             ((C27325 - C27324) * C38365 + (C27327 - C27326) * C38293 +
              (C29563 - C29564) * C38366 + (C29565 - C29566) * C38294) *
                 C54751) *
                C89217) *
               C89307 +
           ((((C14073 - C14072) * C38365 + (C14075 - C14074) * C38293 +
              (C14077 - C14076) * C38366 + (C14079 - C14078) * C38294) *
                 C54750 +
             (C75829 * C38365 + C75830 * C38293 + (C17054 - C17055) * C38366 +
              (C17056 - C17057) * C38294) *
                 C54751) *
                C89308 +
            ((C75827 * C38365 + C75828 * C38293 + (C17055 - C17054) * C38366 +
              (C17057 - C17056) * C38294) *
                 C54750 +
             ((C29564 - C29563) * C38365 + (C29566 - C29565) * C38293 +
              (C13261 * C14602 - C89093 * C14605) * C38366 +
              (C13261 * C14840 - C89093 * C14842) * C38294) *
                 C54751) *
                C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C38365 * C181 - C38589 * C106 - C38365 * C346 + C38293 * C409 +
              C38366 * C923 - C38590 * C819 - C38366 * C1135 + C38294 * C1227) *
                 C89093 * C54750 +
             (C73100 + C73101) * C89093 * C54751) *
                C89308 -
            ((C73102 + C73103) * C89093 * C54751 +
             (C73101 + C73100) * C89093 * C54750) *
                C89217) *
               C89307 +
           (((C75973 + C75974) * C89093 * C54750 +
             (C38365 * C6333 - C38589 * C6249 - C38365 * C6493 +
              C38293 * C6575 + C38366 * C14683 - C38590 * C14601 -
              C38366 * C14839 + C38294 * C14917) *
                 C89093 * C54751) *
                C89217 -
            ((C75974 + C75973) * C89093 * C54751 +
             (C38366 * C926 - C38590 * C820 - C38366 * C1138 + C38294 * C1228 +
              C38365 * C923 - C38589 * C819 - C38365 * C1135 + C38293 * C1227) *
                 C89093 * C54750) *
                C89308) *
               C89189) *
              C815 +
          ((((C40502 + C40501) * C89093 * C54750 +
             (C40503 + C40504) * C89093 * C54751) *
                C89217 -
            ((C40501 + C40502) * C89093 * C54751 +
             (C38629 + C38628) * C89093 * C54750) *
                C89308) *
               C89307 +
           (((C39541 + C39540) * C89093 * C54750 +
             (C43485 + C43486) * C89093 * C54751) *
                C89308 -
            ((C38366 * C14684 - C38590 * C14602 - C38366 * C14840 +
              C38294 * C14918 + C38365 * C6334 - C38589 * C6248 -
              C38365 * C6494 + C38293 * C6574) *
                 C89093 * C54751 +
             (C43486 + C43485) * C89093 * C54750) *
                C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                 C38365 +
             (C54750 * C493 - C54884 * C346 + C54751 * C2240 - C54885 * C2040) *
                 C38293 +
             (C71930 - C71931 + C71932 - C71933) * C38366 +
             (C72240 - C72241 + C72242 - C72243) * C38294) *
                C89093 * C89308 +
            ((C54884 * C1724 - C54750 * C1934 + C54885 * C1725 -
              C54751 * C1937) *
                 C38365 +
             (C54884 * C2040 - C54750 * C2240 + C54885 * C2043 -
              C54751 * C2243) *
                 C38293 +
             (C75685 - C75686 + C75687 - C75688) * C38366 +
             (C76105 - C76106 + C76107 - C76108) * C38294) *
                C89093 * C89217) *
               C89307 +
           (((C71931 - C71930 + C71933 - C71932) * C38365 +
             (C72241 - C72240 + C72243 - C72242) * C38293 +
             (C71938 - C71939 + C71940 - C71941) * C38366 +
             (C72244 - C72245 + C72246 - C72247) * C38294) *
                C89093 * C89308 +
            ((C75686 - C75685 + C75688 - C75687) * C38365 +
             (C76106 - C76105 + C76108 - C76107) * C38293 +
             (C54750 * C8680 - C54884 * C8516 + C54751 * C14761 -
              C54885 * C14601) *
                 C38366 +
             (C54750 * C8917 - C54884 * C8760 + C54751 * C14993 -
              C54885 * C14839) *
                 C38294) *
                C89093 * C89217) *
               C89189) *
              C815 +
          ((((C54888 - C54887 + C54890 - C54889) * C38365 +
             (C55110 - C55109 + C55112 - C55111) * C38293 +
             (C55661 - C55662 + C55663 - C55664) * C38366 +
             (C55978 - C55979 + C55980 - C55981) * C38294) *
                C89093 * C89308 +
            ((C56667 - C56666 + C56669 - C56668) * C38365 +
             (C57017 - C57016 + C57019 - C57018) * C38293 +
             (C59606 - C59607 + C59608 - C59609) * C38366 +
             (C60008 - C60009 + C60010 - C60011) * C38294) *
                C89093 * C89217) *
               C89307 +
           (((C55662 - C55661 + C55664 - C55663) * C38365 +
             (C55979 - C55978 + C55981 - C55980) * C38293 +
             (C55669 - C55670 + C55671 - C55672) * C38366 +
             (C55982 - C55983 + C55984 - C55985) * C38294) *
                C89093 * C89308 +
            ((C59607 - C59606 + C59609 - C59608) * C38365 +
             (C60009 - C60008 + C60011 - C60010) * C38293 +
             (C54884 * C8515 - C54750 * C8681 + C54885 * C14602 -
              C54751 * C14762) *
                 C38366 +
             (C54884 * C8761 - C54750 * C8918 + C54885 * C14840 -
              C54751 * C14994) *
                 C38294) *
                C89093 * C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eezx[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C89093 * C112 - C13261 * C106) * C54884 +
              (C89093 * C571 - C13261 * C565) * C54750 +
              (C27308 - C27309) * C54885 + (C27606 - C27607) * C54751) *
                 C38293 +
             ((C14060 - C14061) * C54884 + (C14328 - C14329) * C54750 +
              C75823 * C54885 + C76239 * C54751) *
                 C38294) *
                C89308 +
            (((C27309 - C27308) * C54884 + (C27607 - C27606) * C54750 +
              (C27313 - C27312) * C54885 + (C27609 - C27608) * C54751) *
                 C38293 +
             (C75825 * C54884 + C76240 * C54750 + C31534 * C54885 +
              C31777 * C54751) *
                 C38294) *
                C89217) *
               C89307 +
           ((((C14061 - C14060) * C54884 + (C14329 - C14328) * C54750 +
              C75825 * C54885 + C76240 * C54751) *
                 C38293 +
             ((C14065 - C14064) * C54884 + (C14332 - C14331) * C54750 +
              C21373 * C54885 + C21609 * C54751) *
                 C38294) *
                C89308 +
            ((C75823 * C54884 + C76239 * C54750 + (C19096 - C19097) * C54885 +
              (C19334 - C19335) * C54751) *
                 C38293 +
             ((C17047 - C17046) * C54884 + (C17369 - C17368) * C54750 +
              (C19100 - C19101) * C54885 + (C19336 - C19337) * C54751) *
                 C38294) *
                C89217) *
               C89189) *
              C815 +
          (((((C13261 * C107 - C89093 * C114) * C54884 +
              (C13261 * C566 - C89093 * C572) * C54750 +
              (C27320 - C27321) * C54885 + (C27612 - C27613) * C54751) *
                 C38293 +
             ((C14072 - C14073) * C54884 + (C14335 - C14336) * C54750 +
              C75827 * C54885 + C76241 * C54751) *
                 C38294) *
                C89308 +
            (((C27321 - C27320) * C54884 + (C27613 - C27612) * C54750 +
              (C27325 - C27324) * C54885 + (C27615 - C27614) * C54751) *
                 C38293 +
             (C75829 * C54884 + C76242 * C54750 + (C29563 - C29564) * C54885 +
              (C29890 - C29891) * C54751) *
                 C38294) *
                C89217) *
               C89307 +
           ((((C14073 - C14072) * C54884 + (C14336 - C14335) * C54750 +
              C75829 * C54885 + C76242 * C54751) *
                 C38293 +
             ((C14077 - C14076) * C54884 + (C14339 - C14338) * C54750 +
              (C17054 - C17055) * C54885 + (C17372 - C17373) * C54751) *
                 C38294) *
                C89308 +
            ((C75827 * C54884 + C76241 * C54750 + (C29564 - C29563) * C54885 +
              (C29891 - C29890) * C54751) *
                 C38293 +
             ((C17055 - C17054) * C54884 + (C17373 - C17372) * C54750 +
              (C13261 * C14602 - C89093 * C14605) * C54885 +
              (C13261 * C15070 - C89093 * C15072) * C54751) *
                 C38294) *
                C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eezy[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                 C54884 +
             (C38293 * C627 - C38365 * C565 + C38294 * C1515 - C38366 * C1425) *
                 C54750 +
             (C72766 - C72767 + C72768 - C72769) * C54885 +
             (C73398 - C73399 + C73400 - C73401) * C54751) *
                C89093 * C89308 +
            ((C72767 - C72766 + C72769 - C72768) * C54884 +
             (C73399 - C73398 + C73401 - C73400) * C54750 +
             (C72774 - C72775 + C72776 - C72777) * C54885 +
             (C73402 - C73403 + C73404 - C73405) * C54751) *
                C89093 * C89217) *
               C89307 +
           (((C38365 * C819 - C38293 * C923 + C38366 * C820 - C38294 * C926) *
                 C54884 +
             (C38365 * C1425 - C38293 * C1515 + C38366 * C1428 -
              C38294 * C1518) *
                 C54750 +
             (C75547 - C75548 + C75549 - C75550) * C54885 +
             (C76373 - C76374 + C76375 - C76376) * C54751) *
                C89093 * C89308 +
            ((C75548 - C75547 + C75550 - C75549) * C54884 +
             (C76374 - C76373 + C76376 - C76375) * C54750 +
             (C38293 * C6333 - C38365 * C6249 + C38294 * C14683 -
              C38366 * C14601) *
                 C54885 +
             (C38293 * C6807 - C38365 * C6727 + C38294 * C15147 -
              C38366 * C15069) *
                 C54751) *
                C89093 * C89217) *
               C89189) *
              C815 +
          ((((C38369 - C38368 + C38371 - C38370) * C54884 +
             (C38833 - C38832 + C38835 - C38834) * C54750 +
             (C40163 - C40164 + C40165 - C40166) * C54885 +
             (C40801 - C40802 + C40803 - C40804) * C54751) *
                C89093 * C89308 +
            ((C40164 - C40163 + C40166 - C40165) * C54884 +
             (C40802 - C40801 + C40804 - C40803) * C54750 +
             (C40171 - C40172 + C40173 - C40174) * C54885 +
             (C40805 - C40806 + C40807 - C40808) * C54751) *
                C89093 * C89217) *
               C89307 +
           (((C39169 - C39168 + C39171 - C39170) * C54884 +
             (C39858 - C39857 + C39860 - C39859) * C54750 +
             (C43055 - C43056 + C43057 - C43058) * C54885 +
             (C43887 - C43888 + C43889 - C43890) * C54751) *
                C89093 * C89308 +
            ((C43056 - C43055 + C43058 - C43057) * C54884 +
             (C43888 - C43887 + C43890 - C43889) * C54750 +
             (C38365 * C6248 - C38293 * C6334 + C38366 * C14602 -
              C38294 * C14684) *
                 C54885 +
             (C38365 * C6728 - C38293 * C6808 + C38366 * C15070 -
              C38294 * C15148) *
                 C54751) *
                C89093 * C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eezz[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C54884 * C264 - C55318 * C106 - C54884 * C565 + C54750 * C700 +
              C54885 * C1934 - C55319 * C1724 - C54885 * C2330 +
              C54751 * C2512) *
                 C38293 +
             (C72566 + C72567) * C38294) *
                C89093 * C89308 -
            ((C76519 + C76520) * C38294 +
             (C54885 * C1937 - C55319 * C1725 - C54885 * C2333 +
              C54751 * C2513 + C54884 * C1934 - C55318 * C1724 -
              C54884 * C2330 + C54750 * C2512) *
                 C38293) *
                C89093 * C89217) *
               C89307 +
           (((C76520 + C76519) * C38293 +
             (C54884 * C8680 - C55318 * C8516 - C54884 * C8994 +
              C54750 * C9153 + C54885 * C14761 - C55319 * C14601 -
              C54885 * C15069 + C54751 * C15223) *
                 C38294) *
                C89093 * C89217 -
            ((C72568 + C72569) * C38294 + (C72567 + C72566) * C38293) * C89093 *
                C89308) *
               C89189) *
              C815 +
          ((((C57362 + C57361) * C38293 + (C60416 + C60417) * C38294) * C89093 *
                C89217 -
            ((C56306 + C56307) * C38294 + (C55358 + C55357) * C38293) * C89093 *
                C89308) *
               C89307 +
           (((C56307 + C56306) * C38293 + (C56308 + C56309) * C38294) * C89093 *
                C89308 -
            ((C54885 * C14762 - C55319 * C14602 - C54885 * C15070 +
              C54751 * C15224 + C54884 * C8681 - C55318 * C8515 -
              C54884 * C8995 + C54750 * C9152) *
                 C38294 +
             (C60417 + C60416) * C38293) *
                C89093 * C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eexx[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                 C54750 +
             C27042 * C54751) *
                C38293 +
            (C71726 + C71727) * C38294) *
               C89153 * C812 -
           ((C71728 + C71729) * C38294 + (C71727 + C71726) * C38293) * C89153 *
               C813 +
           ((C71729 + C71728) * C38293 +
            (C13790 * C54750 + C21134 * C54751) * C38294) *
               C89153 * C814) *
              C815 +
          (((C71730 + C71731) * C38293 + (C71732 + C71733) * C38294) * C89153 *
               C813 -
           ((C71731 + C71730) * C38294 +
            (C27045 * C54751 +
             (C13261 * C114 - C13262 * C107 - C13261 * C115 + C89093 * C125) *
                 C54750) *
                C38293) *
               C89153 * C812 -
           (((C13261 * C16687 - C13262 * C16684 - C13261 * C16688 +
              C89093 * C16690) *
                 C54751 +
             C13793 * C54750) *
                C38294 +
            (C71733 + C71732) * C38293) *
               C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                C54750 +
            C27042 * C54751) *
               C38293 +
           (C13788 * C54750 + C16717 * C54751) * C38294) *
              C89153 * C89137 * C96 -
          ((C16718 * C54751 + C13791 * C54750) * C38294 +
           (C27045 * C54751 +
            (C13261 * C114 - C13262 * C107 - C13261 * C115 + C89093 * C125) *
                C54750) *
               C38293) *
              C89153 * C89137 * C97 +
          (((C13261 * C116 - C13262 * C108 - C13261 * C117 + C89093 * C126) *
                C54750 +
            C28534 * C54751) *
               C38293 +
           (C15312 * C54750 + (C13261 * C4105 - C13262 * C4099 -
                               C13261 * C4106 + C89093 * C4111) *
                                  C54751) *
               C38294) *
              C89153 * C89137 * C98 -
          (((C13261 * C4107 - C13262 * C4100 - C13261 * C4108 +
             C89093 * C4112) *
                C54751 +
            (C13261 * C837 - C13262 * C823 - C13261 * C838 + C89093 * C847) *
                C54750) *
               C38294 +
           ((C13261 * C1742 - C13262 * C1728 - C13261 * C1743 +
             C89093 * C1752) *
                C54751 +
            (C13261 * C118 - C13262 * C109 - C13261 * C119 + C89093 * C127) *
                C54750) *
               C38293) *
              C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                 C54750 +
             C27042 * C54751) *
                C38293 +
            (C71726 + C71727) * C38294) *
               C1719 -
           ((C18856 * C54751 + C16717 * C54750) * C38294 +
            (C27043 * C54751 + C27042 * C54750) * C38293) *
               C1720 +
           ((C27043 * C54750 + C27044 * C54751) * C38293 +
            (C18856 * C54750 + C31296 * C54751) * C38294) *
               C1721) *
              C89137 * C815 +
          (((C27045 * C54750 + C27046 * C54751) * C38293 +
            (C16718 * C54750 + C29250 * C54751) * C38294) *
               C1720 -
           ((C71731 + C71730) * C38294 +
            (C27045 * C54751 +
             (C13261 * C114 - C13262 * C107 - C13261 * C115 + C89093 * C125) *
                 C54750) *
                C38293) *
               C1719 -
           (((C13261 * C29240 - C13262 * C29239 - C13261 * C29241 +
              C89093 * C29242) *
                 C54751 +
             C29250 * C54750) *
                C38294 +
            (C27047 * C54751 + C27046 * C54750) * C38293) *
               C1721) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q));
    d2eexy[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                 C13261 +
             (C38293 * C187 - C38365 * C113 + C38294 * C931 - C38366 * C830) *
                 C89093) *
                C54750 +
            ((C38293 * C1828 - C38365 * C1724 + C38294 * C4211 -
              C38366 * C4097) *
                 C13261 +
             (C38293 * C1836 - C38365 * C1735 + C38294 * C4215 -
              C38366 * C4102) *
                 C89093) *
                C54751) *
               C89153 * C812 +
           (((C38365 * C819 - C38293 * C923 + C38366 * C820 - C38294 * C926) *
                 C13261 +
             (C38365 * C830 - C38293 * C931 + C38366 * C832 - C38294 * C934) *
                 C89093) *
                C54750 +
            ((C38365 * C4097 - C38293 * C4211 + C38366 * C8516 -
              C38294 * C8600) *
                 C13261 +
             (C38365 * C4102 - C38293 * C4215 + C38366 * C8522 -
              C38294 * C8603) *
                 C89093) *
                C54751) *
               C89153 * C813 +
           (((C38293 * C926 - C38365 * C820 + C38294 * C5787 - C38366 * C5727) *
                 C13261 +
             (C38293 * C934 - C38365 * C832 + C38294 * C5790 - C38366 * C5733) *
                 C89093) *
                C54750 +
            ((C38293 * C8600 - C38365 * C8516 + C38294 * C16821 -
              C38366 * C16683) *
                 C13261 +
             (C38293 * C8603 - C38365 * C8522 + C38294 * C16823 -
              C38366 * C16686) *
                 C89093) *
                C54751) *
               C89153 * C814) *
              C815 +
          ((((C38369 - C38368 + C38371 - C38370) * C13261 +
             (C38373 - C38372 + C38375 - C38374) * C89093) *
                C54750 +
            ((C40163 - C40164 + C40165 - C40166) * C13261 +
             (C40167 - C40168 + C40169 - C40170) * C89093) *
                C54751) *
               C89153 * C812 +
           (((C39169 - C39168 + C39171 - C39170) * C13261 +
             (C39173 - C39172 + C39175 - C39174) * C89093) *
                C54750 +
            ((C43055 - C43056 + C43057 - C43058) * C13261 +
             (C43059 - C43060 + C43061 - C43062) * C89093) *
                C54751) *
               C89153 * C813 +
           (((C39177 - C39176 + C39179 - C39178) * C13261 +
             (C39181 - C39180 + C39183 - C39182) * C89093) *
                C54750 +
            ((C38365 * C8515 - C38293 * C8601 + C38366 * C16684 -
              C38294 * C16822) *
                 C13261 +
             (C38365 * C8520 - C38293 * C8604 + C38366 * C16688 -
              C38294 * C16824) *
                 C89093) *
                C54751) *
               C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                C13261 +
            (C38293 * C187 - C38365 * C113 + C38294 * C931 - C38366 * C830) *
                C89093) *
               C54750 +
           ((C38293 * C1828 - C38365 * C1724 + C38294 * C4211 -
             C38366 * C4097) *
                C13261 +
            (C38293 * C1836 - C38365 * C1735 + C38294 * C4215 -
             C38366 * C4102) *
                C89093) *
               C54751) *
              C89153 * C89137 * C96 +
          (((C38369 - C38368 + C38371 - C38370) * C13261 +
            (C38373 - C38372 + C38375 - C38374) * C89093) *
               C54750 +
           ((C40163 - C40164 + C40165 - C40166) * C13261 +
            (C40167 - C40168 + C40169 - C40170) * C89093) *
               C54751) *
              C89153 * C89137 * C97 +
          (((C38377 - C38376 + C38379 - C38378) * C13261 +
            (C38381 - C38380 + C38383 - C38382) * C89093) *
               C54750 +
           ((C42053 - C42054 + C42055 - C42056) * C13261 +
            (C42057 - C42058 + C42059 - C42060) * C89093) *
               C54751) *
              C89153 * C89137 * C98 +
          (((C38385 - C38384 + C38387 - C38386) * C13261 +
            (C38389 - C38388 + C38391 - C38390) * C89093) *
               C54750 +
           ((C38365 * C1728 - C38293 * C1834 + C38366 * C4100 -
             C38294 * C4214) *
                C13261 +
            (C38365 * C1743 - C38293 * C1842 + C38366 * C4108 -
             C38294 * C4218) *
                C89093) *
               C54751) *
              C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                 C13261 +
             (C38293 * C187 - C38365 * C113 + C38294 * C931 - C38366 * C830) *
                 C89093) *
                C54750 +
            ((C72766 - C72767 + C72768 - C72769) * C13261 +
             (C72770 - C72771 + C72772 - C72773) * C89093) *
                C54751) *
               C1719 +
           (((C72767 - C72766 + C72769 - C72768) * C13261 +
             (C72771 - C72770 + C72773 - C72772) * C89093) *
                C54750 +
            ((C72774 - C72775 + C72776 - C72777) * C13261 +
             (C72778 - C72779 + C72780 - C72781) * C89093) *
                C54751) *
               C1720 +
           (((C72775 - C72774 + C72777 - C72776) * C13261 +
             (C72779 - C72778 + C72781 - C72780) * C89093) *
                C54750 +
            ((C38293 * C10604 - C38365 * C10544 + C38294 * C23210 -
              C38366 * C23153) *
                 C13261 +
             (C38293 * C10607 - C38365 * C10550 + C38294 * C23212 -
              C38366 * C23157) *
                 C89093) *
                C54751) *
               C1721) *
              C89137 * C815 +
          ((((C38369 - C38368 + C38371 - C38370) * C13261 +
             (C38373 - C38372 + C38375 - C38374) * C89093) *
                C54750 +
            ((C40163 - C40164 + C40165 - C40166) * C13261 +
             (C40167 - C40168 + C40169 - C40170) * C89093) *
                C54751) *
               C1719 +
           (((C40164 - C40163 + C40166 - C40165) * C13261 +
             (C40168 - C40167 + C40170 - C40169) * C89093) *
                C54750 +
            ((C40171 - C40172 + C40173 - C40174) * C13261 +
             (C40175 - C40176 + C40177 - C40178) * C89093) *
                C54751) *
               C1720 +
           (((C40172 - C40171 + C40174 - C40173) * C13261 +
             (C40176 - C40175 + C40178 - C40177) * C89093) *
                C54750 +
            ((C38365 * C10543 - C38293 * C10605 + C38366 * C29239 -
              C38294 * C29348) *
                 C13261 +
             (C38365 * C10548 - C38293 * C10608 + C38366 * C29241 -
              C38294 * C29349) *
                 C89093) *
                C54751) *
               C1721) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q));
    d2eexz[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                 C13261 +
             (C54750 * C270 - C54884 * C113 + C54751 * C1942 - C54885 * C1735) *
                 C89093) *
                C38293 +
            ((C71930 - C71931 + C71932 - C71933) * C13261 +
             (C71934 - C71935 + C71936 - C71937) * C89093) *
                C38294) *
               C89153 * C812 +
           (((C71931 - C71930 + C71933 - C71932) * C13261 +
             (C71935 - C71934 + C71937 - C71936) * C89093) *
                C38293 +
            ((C71938 - C71939 + C71940 - C71941) * C13261 +
             (C71942 - C71943 + C71944 - C71945) * C89093) *
                C38294) *
               C89153 * C813 +
           (((C71939 - C71938 + C71941 - C71940) * C13261 +
             (C71943 - C71942 + C71945 - C71944) * C89093) *
                C38293 +
            ((C54750 * C5843 - C54884 * C5727 + C54751 * C16923 -
              C54885 * C16683) *
                 C13261 +
             (C54750 * C5846 - C54884 * C5733 + C54751 * C16925 -
              C54885 * C16686) *
                 C89093) *
                C38294) *
               C89153 * C814) *
              C815 +
          ((((C54888 - C54887 + C54890 - C54889) * C13261 +
             (C54892 - C54891 + C54894 - C54893) * C89093) *
                C38293 +
            ((C55661 - C55662 + C55663 - C55664) * C13261 +
             (C55665 - C55666 + C55667 - C55668) * C89093) *
                C38294) *
               C89153 * C812 +
           (((C55662 - C55661 + C55664 - C55663) * C13261 +
             (C55666 - C55665 + C55668 - C55667) * C89093) *
                C38293 +
            ((C55669 - C55670 + C55671 - C55672) * C13261 +
             (C55673 - C55674 + C55675 - C55676) * C89093) *
                C38294) *
               C89153 * C813 +
           (((C55670 - C55669 + C55672 - C55671) * C13261 +
             (C55674 - C55673 + C55676 - C55675) * C89093) *
                C38293 +
            ((C54884 * C5726 - C54750 * C5844 + C54885 * C16684 -
              C54751 * C16924) *
                 C13261 +
             (C54884 * C5731 - C54750 * C5847 + C54885 * C16688 -
              C54751 * C16926) *
                 C89093) *
                C38294) *
               C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                C13261 +
            (C54750 * C270 - C54884 * C113 + C54751 * C1942 - C54885 * C1735) *
                C89093) *
               C38293 +
           ((C54750 * C1029 - C54884 * C819 + C54751 * C4325 - C54885 * C4097) *
                C13261 +
            (C54750 * C1037 - C54884 * C830 + C54751 * C4329 - C54885 * C4102) *
                C89093) *
               C38294) *
              C89153 * C89137 * C96 +
          (((C54888 - C54887 + C54890 - C54889) * C13261 +
            (C54892 - C54891 + C54894 - C54893) * C89093) *
               C38293 +
           ((C55661 - C55662 + C55663 - C55664) * C13261 +
            (C55665 - C55666 + C55667 - C55668) * C89093) *
               C38294) *
              C89153 * C89137 * C97 +
          (((C54896 - C54895 + C54898 - C54897) * C13261 +
            (C54900 - C54899 + C54902 - C54901) * C89093) *
               C38293 +
           ((C57659 - C57660 + C57661 - C57662) * C13261 +
            (C57663 - C57664 + C57665 - C57666) * C89093) *
               C38294) *
              C89153 * C89137 * C98 +
          (((C54904 - C54903 + C54906 - C54905) * C13261 +
            (C54908 - C54907 + C54910 - C54909) * C89093) *
               C38293 +
           ((C54884 * C823 - C54750 * C1035 + C54885 * C4100 - C54751 * C4328) *
                C13261 +
            (C54884 * C838 - C54750 * C1043 + C54885 * C4108 - C54751 * C4332) *
                C89093) *
               C38294) *
              C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                 C13261 +
             (C54750 * C270 - C54884 * C113 + C54751 * C1942 - C54885 * C1735) *
                 C89093) *
                C38293 +
            ((C71930 - C71931 + C71932 - C71933) * C13261 +
             (C71934 - C71935 + C71936 - C71937) * C89093) *
                C38294) *
               C1719 +
           (((C54884 * C1724 - C54750 * C1934 + C54885 * C1725 -
              C54751 * C1937) *
                 C13261 +
             (C54884 * C1735 - C54750 * C1942 + C54885 * C1737 -
              C54751 * C1945) *
                 C89093) *
                C38293 +
            ((C54884 * C4097 - C54750 * C4325 + C54885 * C6249 -
              C54751 * C6413) *
                 C13261 +
             (C54884 * C4102 - C54750 * C4329 + C54885 * C6255 -
              C54751 * C6416) *
                 C89093) *
                C38294) *
               C1720 +
           (((C54750 * C1937 - C54884 * C1725 + C54751 * C10660 -
              C54885 * C10544) *
                 C13261 +
             (C54750 * C1945 - C54884 * C1737 + C54751 * C10663 -
              C54885 * C10550) *
                 C89093) *
                C38293 +
            ((C54750 * C6413 - C54884 * C6249 + C54751 * C23264 -
              C54885 * C23153) *
                 C13261 +
             (C54750 * C6416 - C54884 * C6255 + C54751 * C23266 -
              C54885 * C23157) *
                 C89093) *
                C38294) *
               C1721) *
              C89137 * C815 +
          ((((C54888 - C54887 + C54890 - C54889) * C13261 +
             (C54892 - C54891 + C54894 - C54893) * C89093) *
                C38293 +
            ((C55661 - C55662 + C55663 - C55664) * C13261 +
             (C55665 - C55666 + C55667 - C55668) * C89093) *
                C38294) *
               C1719 +
           (((C56667 - C56666 + C56669 - C56668) * C13261 +
             (C56671 - C56670 + C56673 - C56672) * C89093) *
                C38293 +
            ((C59606 - C59607 + C59608 - C59609) * C13261 +
             (C59610 - C59611 + C59612 - C59613) * C89093) *
                C38294) *
               C1720 +
           (((C56675 - C56674 + C56677 - C56676) * C13261 +
             (C56679 - C56678 + C56681 - C56680) * C89093) *
                C38293 +
            ((C54884 * C6248 - C54750 * C6414 + C54885 * C29239 -
              C54751 * C29460) *
                 C13261 +
             (C54884 * C6253 - C54750 * C6417 + C54885 * C29241 -
              C54751 * C29461) *
                 C89093) *
                C38294) *
               C1721) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C38365 +
             (C89093 * C352 - C13261 * C346) * C38293 +
             (C14060 - C14061) * C38366 + (C14062 - C14063) * C38294) *
                C54750 +
            ((C27308 - C27309) * C38365 + (C27310 - C27311) * C38293 +
             (C17043 - C17042) * C38366 + (C17045 - C17044) * C38294) *
                C54751) *
               C89153 * C812 +
           (((C14061 - C14060) * C38365 + (C14063 - C14062) * C38293 +
             (C14065 - C14064) * C38366 + (C14067 - C14066) * C38294) *
                C54750 +
            ((C17042 - C17043) * C38365 + (C17044 - C17045) * C38293 +
             C21373 * C38366 + C21374 * C38294) *
                C54751) *
               C89153 * C813 +
           ((C14084 * C38365 + C14085 * C38293 + (C14069 - C14068) * C38366 +
             (C14071 - C14070) * C38294) *
                C54750 +
            ((C17047 - C17046) * C38365 + (C17049 - C17048) * C38293 +
             (C21375 - C21376) * C38366 + (C21377 - C21378) * C38294) *
                C54751) *
               C89153 * C814) *
              C815 +
          ((((C13261 * C107 - C89093 * C114) * C38365 +
             (C13261 * C347 - C89093 * C353) * C38293 +
             (C14072 - C14073) * C38366 + (C14074 - C14075) * C38294) *
                C54750 +
            ((C27320 - C27321) * C38365 + (C27322 - C27323) * C38293 +
             (C17051 - C17050) * C38366 + (C17053 - C17052) * C38294) *
                C54751) *
               C89153 * C812 +
           (((C14073 - C14072) * C38365 + (C14075 - C14074) * C38293 +
             (C14077 - C14076) * C38366 + (C14079 - C14078) * C38294) *
                C54750 +
            ((C17050 - C17051) * C38365 + (C17052 - C17053) * C38293 +
             (C17054 - C17055) * C38366 + (C17056 - C17057) * C38294) *
                C54751) *
               C89153 * C813 +
           ((C14086 * C38365 + C14087 * C38293 + (C14081 - C14080) * C38366 +
             (C14083 - C14082) * C38294) *
                C54750 +
            ((C17055 - C17054) * C38365 + (C17057 - C17056) * C38293 +
             (C13261 * C16684 - C89093 * C16687) * C38366 +
             (C13261 * C17038 - C89093 * C17040) * C38294) *
                C54751) *
               C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89093 * C112 - C13261 * C106) * C38365 +
            (C89093 * C352 - C13261 * C346) * C38293 +
            (C14060 - C14061) * C38366 + (C14062 - C14063) * C38294) *
               C54750 +
           ((C27308 - C27309) * C38365 + (C27310 - C27311) * C38293 +
            (C17043 - C17042) * C38366 + (C17045 - C17044) * C38294) *
               C54751) *
              C89153 * C89137 * C96 +
          (((C13261 * C107 - C89093 * C114) * C38365 +
            (C13261 * C347 - C89093 * C353) * C38293 +
            (C14072 - C14073) * C38366 + (C14074 - C14075) * C38294) *
               C54750 +
           ((C27320 - C27321) * C38365 + (C27322 - C27323) * C38293 +
            (C17051 - C17050) * C38366 + (C17053 - C17052) * C38294) *
               C54751) *
              C89153 * C89137 * C97 +
          (((C89093 * C116 - C13261 * C108) * C38365 +
            (C89093 * C354 - C13261 * C348) * C38293 +
            (C15538 - C15539) * C38366 + (C15540 - C15541) * C38294) *
               C54750 +
           ((C28758 - C28759) * C38365 + (C28760 - C28761) * C38293 +
            (C89093 * C4105 - C13261 * C4099) * C38366 +
            (C89093 * C4445 - C13261 * C4441) * C38294) *
               C54751) *
              C89153 * C89137 * C98 +
          (((C13261 * C109 - C89093 * C118) * C38365 +
            (C13261 * C349 - C89093 * C355) * C38293 +
            (C13261 * C823 - C89093 * C837) * C38366 +
            (C13261 * C1141 - C89093 * C1149) * C38294) *
               C54750 +
           ((C13261 * C1728 - C89093 * C1742) * C38365 +
            (C13261 * C2046 - C89093 * C2054) * C38293 +
            (C13261 * C4100 - C89093 * C4107) * C38366 +
            (C13261 * C4442 - C89093 * C4446) * C38294) *
               C54751) *
              C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C38365 +
             (C89093 * C352 - C13261 * C346) * C38293 +
             (C14060 - C14061) * C38366 + (C14062 - C14063) * C38294) *
                C54750 +
            ((C27308 - C27309) * C38365 + (C27310 - C27311) * C38293 +
             (C17043 - C17042) * C38366 + (C17045 - C17044) * C38294) *
                C54751) *
               C1719 +
           (((C27309 - C27308) * C38365 + (C27311 - C27310) * C38293 +
             (C17042 - C17043) * C38366 + (C17044 - C17045) * C38294) *
                C54750 +
            ((C27313 - C27312) * C38365 + (C27315 - C27314) * C38293 +
             C31534 * C38366 + C31535 * C38294) *
                C54751) *
               C1720 +
           ((C27332 * C38365 + C27333 * C38293 + (C19096 - C19097) * C38366 +
             (C19098 - C19099) * C38294) *
                C54750 +
            ((C27317 - C27316) * C38365 + (C27319 - C27318) * C38293 +
             (C31536 - C31537) * C38366 + (C31538 - C31539) * C38294) *
                C54751) *
               C1721) *
              C89137 * C815 +
          ((((C13261 * C107 - C89093 * C114) * C38365 +
             (C13261 * C347 - C89093 * C353) * C38293 +
             (C14072 - C14073) * C38366 + (C14074 - C14075) * C38294) *
                C54750 +
            ((C27320 - C27321) * C38365 + (C27322 - C27323) * C38293 +
             (C17051 - C17050) * C38366 + (C17053 - C17052) * C38294) *
                C54751) *
               C1719 +
           (((C27321 - C27320) * C38365 + (C27323 - C27322) * C38293 +
             (C17050 - C17051) * C38366 + (C17052 - C17053) * C38294) *
                C54750 +
            ((C27325 - C27324) * C38365 + (C27327 - C27326) * C38293 +
             (C29563 - C29564) * C38366 + (C29565 - C29566) * C38294) *
                C54751) *
               C1720 +
           ((C27334 * C38365 + C27335 * C38293 + (C29564 - C29563) * C38366 +
             (C29566 - C29565) * C38294) *
                C54750 +
            ((C27329 - C27328) * C38365 + (C27331 - C27330) * C38293 +
             (C13261 * C29239 - C89093 * C29240) * C38366 +
             (C13261 * C29560 - C89093 * C29561) * C38294) *
                C54751) *
               C1721) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C38365 * C181 - C38589 * C106 - C38365 * C346 + C38293 * C409 +
             C38366 * C923 - C38590 * C819 - C38366 * C1135 + C38294 * C1227) *
                C89093 * C54750 +
            (C38365 * C1828 - C38589 * C1724 - C38365 * C2040 + C38293 * C2132 +
             C38366 * C4211 - C38590 * C4097 - C38366 * C4439 +
             C38294 * C4545) *
                C89093 * C54751) *
               C89153 * C812 -
           ((C38366 * C8600 - C38590 * C8516 - C38366 * C8760 + C38294 * C8842 +
             C38365 * C4211 - C38589 * C4097 - C38365 * C4439 +
             C38293 * C4545) *
                C89093 * C54751 +
            (C38366 * C926 - C38590 * C820 - C38366 * C1138 + C38294 * C1228 +
             C38365 * C923 - C38589 * C819 - C38365 * C1135 + C38293 * C1227) *
                C89093 * C54750) *
               C89153 * C813 +
           ((C38365 * C926 - C38589 * C820 - C38365 * C1138 + C38293 * C1228 +
             C38366 * C5787 - C38590 * C5727 - C38366 * C5899 +
             C38294 * C5957) *
                C89093 * C54750 +
            (C38365 * C8600 - C38589 * C8516 - C38365 * C8760 + C38293 * C8842 +
             C38366 * C16821 - C38590 * C16683 - C38366 * C17037 +
             C38294 * C17155) *
                C89093 * C54751) *
               C89153 * C814) *
              C815 +
          (((C39541 + C39540) * C89093 * C54750 +
            (C43485 + C43486) * C89093 * C54751) *
               C89153 * C813 -
           ((C40501 + C40502) * C89093 * C54751 +
            (C38629 + C38628) * C89093 * C54750) *
               C89153 * C812 -
           ((C38366 * C16822 - C38590 * C16684 - C38366 * C17038 +
             C38294 * C17156 + C38365 * C8601 - C38589 * C8515 -
             C38365 * C8761 + C38293 * C8841) *
                C89093 * C54751 +
            (C39543 + C39542) * C89093 * C54750) *
               C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C38365 * C181 - C38589 * C106 - C38365 * C346 + C38293 * C409 +
            C38366 * C923 - C38590 * C819 - C38366 * C1135 + C38294 * C1227) *
               C89093 * C54750 +
           (C38365 * C1828 - C38589 * C1724 - C38365 * C2040 + C38293 * C2132 +
            C38366 * C4211 - C38590 * C4097 - C38366 * C4439 + C38294 * C4545) *
               C89093 * C54751) *
              C89153 * C89137 * C96 -
          ((C40501 + C40502) * C89093 * C54751 +
           (C38629 + C38628) * C89093 * C54750) *
              C89153 * C89137 * C97 +
          ((C38631 + C38630) * C89093 * C54750 +
           (C42367 + C42368) * C89093 * C54751) *
              C89153 * C89137 * C98 -
          ((C38366 * C4214 - C38590 * C4100 - C38366 * C4442 + C38294 * C4548 +
            C38365 * C1834 - C38589 * C1728 - C38365 * C2046 + C38293 * C2136) *
               C89093 * C54751 +
           (C38633 + C38632) * C89093 * C54750) *
              C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C38365 * C181 - C38589 * C106 - C38365 * C346 + C38293 * C409 +
             C38366 * C923 - C38590 * C819 - C38366 * C1135 + C38294 * C1227) *
                C89093 * C54750 +
            (C73100 + C73101) * C89093 * C54751) *
               C1719 -
           ((C73102 + C73103) * C89093 * C54751 +
            (C73101 + C73100) * C89093 * C54750) *
               C1720 +
           ((C73103 + C73102) * C89093 * C54750 +
            (C38365 * C10604 - C38589 * C10544 - C38365 * C10716 +
             C38293 * C10774 + C38366 * C23210 - C38590 * C23153 -
             C38366 * C23318 + C38294 * C23373) *
                C89093 * C54751) *
               C1721) *
              C89137 * C815 +
          (((C40502 + C40501) * C89093 * C54750 +
            (C40503 + C40504) * C89093 * C54751) *
               C1720 -
           ((C40501 + C40502) * C89093 * C54751 +
            (C38629 + C38628) * C89093 * C54750) *
               C1719 -
           ((C38366 * C29348 - C38590 * C29239 - C38366 * C29560 +
             C38294 * C29664 + C38365 * C10605 - C38589 * C10543 -
             C38365 * C10717 + C38293 * C10773) *
                C89093 * C54751 +
            (C40504 + C40503) * C89093 * C54750) *
               C1721) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                C38365 +
            (C54750 * C493 - C54884 * C346 + C54751 * C2240 - C54885 * C2040) *
                C38293 +
            (C71930 - C71931 + C71932 - C71933) * C38366 +
            (C72240 - C72241 + C72242 - C72243) * C38294) *
               C89093 * C89153 * C812 +
           ((C71931 - C71930 + C71933 - C71932) * C38365 +
            (C72241 - C72240 + C72243 - C72242) * C38293 +
            (C71938 - C71939 + C71940 - C71941) * C38366 +
            (C72244 - C72245 + C72246 - C72247) * C38294) *
               C89093 * C89153 * C813 +
           ((C71939 - C71938 + C71941 - C71940) * C38365 +
            (C72245 - C72244 + C72247 - C72246) * C38293 +
            (C54750 * C5843 - C54884 * C5727 + C54751 * C16923 -
             C54885 * C16683) *
                C38366 +
            (C54750 * C6008 - C54884 * C5899 + C54751 * C17255 -
             C54885 * C17037) *
                C38294) *
               C89093 * C89153 * C814) *
              C815 +
          (((C54888 - C54887 + C54890 - C54889) * C38365 +
            (C55110 - C55109 + C55112 - C55111) * C38293 +
            (C55661 - C55662 + C55663 - C55664) * C38366 +
            (C55978 - C55979 + C55980 - C55981) * C38294) *
               C89093 * C89153 * C812 +
           ((C55662 - C55661 + C55664 - C55663) * C38365 +
            (C55979 - C55978 + C55981 - C55980) * C38293 +
            (C55669 - C55670 + C55671 - C55672) * C38366 +
            (C55982 - C55983 + C55984 - C55985) * C38294) *
               C89093 * C89153 * C813 +
           ((C55670 - C55669 + C55672 - C55671) * C38365 +
            (C55983 - C55982 + C55985 - C55984) * C38293 +
            (C54884 * C5726 - C54750 * C5844 + C54885 * C16684 -
             C54751 * C16924) *
                C38366 +
            (C54884 * C5900 - C54750 * C6009 + C54885 * C17038 -
             C54751 * C17256) *
                C38294) *
               C89093 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
               C38365 +
           (C54750 * C493 - C54884 * C346 + C54751 * C2240 - C54885 * C2040) *
               C38293 +
           (C54750 * C1029 - C54884 * C819 + C54751 * C4325 - C54885 * C4097) *
               C38366 +
           (C54750 * C1335 - C54884 * C1135 + C54751 * C4661 - C54885 * C4439) *
               C38294) *
              C89093 * C89153 * C89137 * C96 +
          ((C54888 - C54887 + C54890 - C54889) * C38365 +
           (C55110 - C55109 + C55112 - C55111) * C38293 +
           (C55661 - C55662 + C55663 - C55664) * C38366 +
           (C55978 - C55979 + C55980 - C55981) * C38294) *
              C89093 * C89153 * C89137 * C97 +
          ((C54896 - C54895 + C54898 - C54897) * C38365 +
           (C55114 - C55113 + C55116 - C55115) * C38293 +
           (C57659 - C57660 + C57661 - C57662) * C38366 +
           (C57961 - C57962 + C57963 - C57964) * C38294) *
              C89093 * C89153 * C89137 * C98 +
          ((C54904 - C54903 + C54906 - C54905) * C38365 +
           (C55118 - C55117 + C55120 - C55119) * C38293 +
           (C54884 * C823 - C54750 * C1035 + C54885 * C4100 - C54751 * C4328) *
               C38366 +
           (C54884 * C1141 - C54750 * C1341 + C54885 * C4442 - C54751 * C4664) *
               C38294) *
              C89093 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                C38365 +
            (C54750 * C493 - C54884 * C346 + C54751 * C2240 - C54885 * C2040) *
                C38293 +
            (C71930 - C71931 + C71932 - C71933) * C38366 +
            (C72240 - C72241 + C72242 - C72243) * C38294) *
               C89093 * C1719 +
           ((C54884 * C1724 - C54750 * C1934 + C54885 * C1725 -
             C54751 * C1937) *
                C38365 +
            (C54884 * C2040 - C54750 * C2240 + C54885 * C2043 -
             C54751 * C2243) *
                C38293 +
            (C54884 * C4097 - C54750 * C4325 + C54885 * C6249 -
             C54751 * C6413) *
                C38366 +
            (C54884 * C4439 - C54750 * C4661 + C54885 * C6493 -
             C54751 * C6650) *
                C38294) *
               C89093 * C1720 +
           ((C54750 * C1937 - C54884 * C1725 + C54751 * C10660 -
             C54885 * C10544) *
                C38365 +
            (C54750 * C2243 - C54884 * C2043 + C54751 * C10825 -
             C54885 * C10716) *
                C38293 +
            (C54750 * C6413 - C54884 * C6249 + C54751 * C23264 -
             C54885 * C23153) *
                C38366 +
            (C54750 * C6650 - C54884 * C6493 + C54751 * C23424 -
             C54885 * C23318) *
                C38294) *
               C89093 * C1721) *
              C89137 * C815 +
          (((C54888 - C54887 + C54890 - C54889) * C38365 +
            (C55110 - C55109 + C55112 - C55111) * C38293 +
            (C55661 - C55662 + C55663 - C55664) * C38366 +
            (C55978 - C55979 + C55980 - C55981) * C38294) *
               C89093 * C1719 +
           ((C56667 - C56666 + C56669 - C56668) * C38365 +
            (C57017 - C57016 + C57019 - C57018) * C38293 +
            (C59606 - C59607 + C59608 - C59609) * C38366 +
            (C60008 - C60009 + C60010 - C60011) * C38294) *
               C89093 * C1720 +
           ((C56675 - C56674 + C56677 - C56676) * C38365 +
            (C57021 - C57020 + C57023 - C57022) * C38293 +
            (C54884 * C6248 - C54750 * C6414 + C54885 * C29239 -
             C54751 * C29460) *
                C38366 +
            (C54884 * C6494 - C54750 * C6651 + C54885 * C29560 -
             C54751 * C29788) *
                C38294) *
               C89093 * C1721) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q));
    d2eezx[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C54884 +
             (C89093 * C571 - C13261 * C565) * C54750 +
             (C27308 - C27309) * C54885 + (C27606 - C27607) * C54751) *
                C38293 +
            ((C14060 - C14061) * C54884 + (C14328 - C14329) * C54750 +
             (C17043 - C17042) * C54885 + (C17367 - C17366) * C54751) *
                C38294) *
               C89153 * C812 +
           (((C14061 - C14060) * C54884 + (C14329 - C14328) * C54750 +
             (C17042 - C17043) * C54885 + (C17366 - C17367) * C54751) *
                C38293 +
            ((C14065 - C14064) * C54884 + (C14332 - C14331) * C54750 +
             C21373 * C54885 + C21609 * C54751) *
                C38294) *
               C89153 * C813 +
           ((C14084 * C54884 + C14342 * C54750 + (C17047 - C17046) * C54885 +
             (C17369 - C17368) * C54751) *
                C38293 +
            ((C14069 - C14068) * C54884 + (C14334 - C14333) * C54750 +
             (C21375 - C21376) * C54885 + (C21610 - C21611) * C54751) *
                C38294) *
               C89153 * C814) *
              C815 +
          ((((C13261 * C107 - C89093 * C114) * C54884 +
             (C13261 * C566 - C89093 * C572) * C54750 +
             (C27320 - C27321) * C54885 + (C27612 - C27613) * C54751) *
                C38293 +
            ((C14072 - C14073) * C54884 + (C14335 - C14336) * C54750 +
             (C17051 - C17050) * C54885 + (C17371 - C17370) * C54751) *
                C38294) *
               C89153 * C812 +
           (((C14073 - C14072) * C54884 + (C14336 - C14335) * C54750 +
             (C17050 - C17051) * C54885 + (C17370 - C17371) * C54751) *
                C38293 +
            ((C14077 - C14076) * C54884 + (C14339 - C14338) * C54750 +
             (C17054 - C17055) * C54885 + (C17372 - C17373) * C54751) *
                C38294) *
               C89153 * C813 +
           ((C14086 * C54884 + C14343 * C54750 + (C17055 - C17054) * C54885 +
             (C17373 - C17372) * C54751) *
                C38293 +
            ((C14081 - C14080) * C54884 + (C14341 - C14340) * C54750 +
             (C13261 * C16684 - C89093 * C16687) * C54885 +
             (C13261 * C17362 - C89093 * C17364) * C54751) *
                C38294) *
               C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89093 * C112 - C13261 * C106) * C54884 +
            (C89093 * C571 - C13261 * C565) * C54750 +
            (C27308 - C27309) * C54885 + (C27606 - C27607) * C54751) *
               C38293 +
           ((C14060 - C14061) * C54884 + (C14328 - C14329) * C54750 +
            (C17043 - C17042) * C54885 + (C17367 - C17366) * C54751) *
               C38294) *
              C89153 * C89137 * C96 +
          (((C13261 * C107 - C89093 * C114) * C54884 +
            (C13261 * C566 - C89093 * C572) * C54750 +
            (C27320 - C27321) * C54885 + (C27612 - C27613) * C54751) *
               C38293 +
           ((C14072 - C14073) * C54884 + (C14335 - C14336) * C54750 +
            (C17051 - C17050) * C54885 + (C17371 - C17370) * C54751) *
               C38294) *
              C89153 * C89137 * C97 +
          (((C89093 * C116 - C13261 * C108) * C54884 +
            (C89093 * C573 - C13261 * C567) * C54750 +
            (C28758 - C28759) * C54885 + (C28990 - C28991) * C54751) *
               C38293 +
           ((C15538 - C15539) * C54884 + (C15768 - C15769) * C54750 +
            (C89093 * C4105 - C13261 * C4099) * C54885 +
            (C89093 * C4773 - C13261 * C4769) * C54751) *
               C38294) *
              C89153 * C89137 * C98 +
          (((C13261 * C109 - C89093 * C118) * C54884 +
            (C13261 * C568 - C89093 * C574) * C54750 +
            (C13261 * C1728 - C89093 * C1742) * C54885 +
            (C13261 * C2336 - C89093 * C2344) * C54751) *
               C38293 +
           ((C13261 * C823 - C89093 * C837) * C54884 +
            (C13261 * C1431 - C89093 * C1439) * C54750 +
            (C13261 * C4100 - C89093 * C4107) * C54885 +
            (C13261 * C4770 - C89093 * C4774) * C54751) *
               C38294) *
              C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C54884 +
             (C89093 * C571 - C13261 * C565) * C54750 +
             (C27308 - C27309) * C54885 + (C27606 - C27607) * C54751) *
                C38293 +
            ((C14060 - C14061) * C54884 + (C14328 - C14329) * C54750 +
             (C17043 - C17042) * C54885 + (C17367 - C17366) * C54751) *
                C38294) *
               C1719 +
           (((C27309 - C27308) * C54884 + (C27607 - C27606) * C54750 +
             (C27313 - C27312) * C54885 + (C27609 - C27608) * C54751) *
                C38293 +
            ((C17042 - C17043) * C54884 + (C17366 - C17367) * C54750 +
             C31534 * C54885 + C31777 * C54751) *
                C38294) *
               C1720 +
           ((C27332 * C54884 + C27618 * C54750 + (C27317 - C27316) * C54885 +
             (C27611 - C27610) * C54751) *
                C38293 +
            ((C19096 - C19097) * C54884 + (C19334 - C19335) * C54750 +
             (C31536 - C31537) * C54885 + (C31778 - C31779) * C54751) *
                C38294) *
               C1721) *
              C89137 * C815 +
          ((((C13261 * C107 - C89093 * C114) * C54884 +
             (C13261 * C566 - C89093 * C572) * C54750 +
             (C27320 - C27321) * C54885 + (C27612 - C27613) * C54751) *
                C38293 +
            ((C14072 - C14073) * C54884 + (C14335 - C14336) * C54750 +
             (C17051 - C17050) * C54885 + (C17371 - C17370) * C54751) *
                C38294) *
               C1719 +
           (((C27321 - C27320) * C54884 + (C27613 - C27612) * C54750 +
             (C27325 - C27324) * C54885 + (C27615 - C27614) * C54751) *
                C38293 +
            ((C17050 - C17051) * C54884 + (C17370 - C17371) * C54750 +
             (C29563 - C29564) * C54885 + (C29890 - C29891) * C54751) *
                C38294) *
               C1720 +
           ((C27334 * C54884 + C27619 * C54750 + (C27329 - C27328) * C54885 +
             (C27617 - C27616) * C54751) *
                C38293 +
            ((C29564 - C29563) * C54884 + (C29891 - C29890) * C54750 +
             (C13261 * C29239 - C89093 * C29240) * C54885 +
             (C13261 * C29887 - C89093 * C29888) * C54751) *
                C38294) *
               C1721) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q));
    d2eezy[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                C54884 +
            (C38293 * C627 - C38365 * C565 + C38294 * C1515 - C38366 * C1425) *
                C54750 +
            (C38293 * C1828 - C38365 * C1724 + C38294 * C4211 -
             C38366 * C4097) *
                C54885 +
            (C38293 * C2420 - C38365 * C2330 + C38294 * C4873 -
             C38366 * C4767) *
                C54751) *
               C89093 * C89153 * C812 +
           ((C38365 * C819 - C38293 * C923 + C38366 * C820 - C38294 * C926) *
                C54884 +
            (C38365 * C1425 - C38293 * C1515 + C38366 * C1428 -
             C38294 * C1518) *
                C54750 +
            (C38365 * C4097 - C38293 * C4211 + C38366 * C8516 -
             C38294 * C8600) *
                C54885 +
            (C38365 * C4767 - C38293 * C4873 + C38366 * C8994 -
             C38294 * C9074) *
                C54751) *
               C89093 * C89153 * C813 +
           ((C38293 * C926 - C38365 * C820 + C38294 * C5787 - C38366 * C5727) *
                C54884 +
            (C38293 * C1518 - C38365 * C1428 + C38294 * C6117 -
             C38366 * C6061) *
                C54750 +
            (C38293 * C8600 - C38365 * C8516 + C38294 * C16821 -
             C38366 * C16683) *
                C54885 +
            (C38293 * C9074 - C38365 * C8994 + C38294 * C17471 -
             C38366 * C17361) *
                C54751) *
               C89093 * C89153 * C814) *
              C815 +
          (((C38369 - C38368 + C38371 - C38370) * C54884 +
            (C38833 - C38832 + C38835 - C38834) * C54750 +
            (C40163 - C40164 + C40165 - C40166) * C54885 +
            (C40801 - C40802 + C40803 - C40804) * C54751) *
               C89093 * C89153 * C812 +
           ((C39169 - C39168 + C39171 - C39170) * C54884 +
            (C39858 - C39857 + C39860 - C39859) * C54750 +
            (C43055 - C43056 + C43057 - C43058) * C54885 +
            (C43887 - C43888 + C43889 - C43890) * C54751) *
               C89093 * C89153 * C813 +
           ((C39177 - C39176 + C39179 - C39178) * C54884 +
            (C39862 - C39861 + C39864 - C39863) * C54750 +
            (C38365 * C8515 - C38293 * C8601 + C38366 * C16684 -
             C38294 * C16822) *
                C54885 +
            (C38365 * C8995 - C38293 * C9075 + C38366 * C17362 -
             C38294 * C17472) *
                C54751) *
               C89093 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
               C54884 +
           (C38293 * C627 - C38365 * C565 + C38294 * C1515 - C38366 * C1425) *
               C54750 +
           (C38293 * C1828 - C38365 * C1724 + C38294 * C4211 - C38366 * C4097) *
               C54885 +
           (C38293 * C2420 - C38365 * C2330 + C38294 * C4873 - C38366 * C4767) *
               C54751) *
              C89093 * C89153 * C89137 * C96 +
          ((C38369 - C38368 + C38371 - C38370) * C54884 +
           (C38833 - C38832 + C38835 - C38834) * C54750 +
           (C40163 - C40164 + C40165 - C40166) * C54885 +
           (C40801 - C40802 + C40803 - C40804) * C54751) *
              C89093 * C89153 * C89137 * C97 +
          ((C38377 - C38376 + C38379 - C38378) * C54884 +
           (C38837 - C38836 + C38839 - C38838) * C54750 +
           (C42053 - C42054 + C42055 - C42056) * C54885 +
           (C42663 - C42664 + C42665 - C42666) * C54751) *
              C89093 * C89153 * C89137 * C98 +
          ((C38385 - C38384 + C38387 - C38386) * C54884 +
           (C38841 - C38840 + C38843 - C38842) * C54750 +
           (C38365 * C1728 - C38293 * C1834 + C38366 * C4100 - C38294 * C4214) *
               C54885 +
           (C38365 * C2336 - C38293 * C2426 + C38366 * C4770 - C38294 * C4876) *
               C54751) *
              C89093 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                C54884 +
            (C38293 * C627 - C38365 * C565 + C38294 * C1515 - C38366 * C1425) *
                C54750 +
            (C72766 - C72767 + C72768 - C72769) * C54885 +
            (C73398 - C73399 + C73400 - C73401) * C54751) *
               C89093 * C1719 +
           ((C72767 - C72766 + C72769 - C72768) * C54884 +
            (C73399 - C73398 + C73401 - C73400) * C54750 +
            (C72774 - C72775 + C72776 - C72777) * C54885 +
            (C73402 - C73403 + C73404 - C73405) * C54751) *
               C89093 * C1720 +
           ((C72775 - C72774 + C72777 - C72776) * C54884 +
            (C73403 - C73402 + C73405 - C73404) * C54750 +
            (C38293 * C10604 - C38365 * C10544 + C38294 * C23210 -
             C38366 * C23153) *
                C54885 +
            (C38293 * C10934 - C38365 * C10878 + C38294 * C23530 -
             C38366 * C23476) *
                C54751) *
               C89093 * C1721) *
              C89137 * C815 +
          (((C38369 - C38368 + C38371 - C38370) * C54884 +
            (C38833 - C38832 + C38835 - C38834) * C54750 +
            (C40163 - C40164 + C40165 - C40166) * C54885 +
            (C40801 - C40802 + C40803 - C40804) * C54751) *
               C89093 * C1719 +
           ((C40164 - C40163 + C40166 - C40165) * C54884 +
            (C40802 - C40801 + C40804 - C40803) * C54750 +
            (C40171 - C40172 + C40173 - C40174) * C54885 +
            (C40805 - C40806 + C40807 - C40808) * C54751) *
               C89093 * C1720 +
           ((C40172 - C40171 + C40174 - C40173) * C54884 +
            (C40806 - C40805 + C40808 - C40807) * C54750 +
            (C38365 * C10543 - C38293 * C10605 + C38366 * C29239 -
             C38294 * C29348) *
                C54885 +
            (C38365 * C10879 - C38293 * C10935 + C38366 * C29887 -
             C38294 * C29989) *
                C54751) *
               C89093 * C1721) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q));
    d2eezz[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C54884 * C264 - C55318 * C106 - C54884 * C565 + C54750 * C700 +
             C54885 * C1934 - C55319 * C1724 - C54885 * C2330 +
             C54751 * C2512) *
                C38293 +
            (C72566 + C72567) * C38294) *
               C89093 * C89153 * C812 -
           ((C72568 + C72569) * C38294 + (C72567 + C72566) * C38293) * C89093 *
               C89153 * C813 +
           ((C72569 + C72568) * C38293 +
            (C54884 * C5843 - C55318 * C5727 - C54884 * C6061 + C54750 * C6172 +
             C54885 * C16923 - C55319 * C16683 - C54885 * C17361 +
             C54751 * C17571) *
                C38294) *
               C89093 * C89153 * C814) *
              C815 +
          (((C56307 + C56306) * C38293 + (C56308 + C56309) * C38294) * C89093 *
               C89153 * C813 -
           ((C56306 + C56307) * C38294 + (C55358 + C55357) * C38293) * C89093 *
               C89153 * C812 -
           ((C54885 * C16924 - C55319 * C16684 - C54885 * C17362 +
             C54751 * C17572 + C54884 * C5844 - C55318 * C5726 -
             C54884 * C6062 + C54750 * C6171) *
                C38294 +
            (C56309 + C56308) * C38293) *
               C89093 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C54884 * C264 - C55318 * C106 - C54884 * C565 + C54750 * C700 +
            C54885 * C1934 - C55319 * C1724 - C54885 * C2330 + C54751 * C2512) *
               C38293 +
           (C54884 * C1029 - C55318 * C819 - C54884 * C1425 + C54750 * C1607 +
            C54885 * C4325 - C55319 * C4097 - C54885 * C4767 + C54751 * C4979) *
               C38294) *
              C89093 * C89153 * C89137 * C96 -
          ((C56306 + C56307) * C38294 + (C55358 + C55357) * C38293) * C89093 *
              C89153 * C89137 * C97 +
          ((C55360 + C55359) * C38293 + (C58271 + C58272) * C38294) * C89093 *
              C89153 * C89137 * C98 -
          ((C54885 * C4328 - C55319 * C4100 - C54885 * C4770 + C54751 * C4982 +
            C54884 * C1035 - C55318 * C823 - C54884 * C1431 + C54750 * C1611) *
               C38294 +
           (C55362 + C55361) * C38293) *
              C89093 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C54884 * C264 - C55318 * C106 - C54884 * C565 + C54750 * C700 +
             C54885 * C1934 - C55319 * C1724 - C54885 * C2330 +
             C54751 * C2512) *
                C38293 +
            (C72566 + C72567) * C38294) *
               C89093 * C1719 -
           ((C54885 * C6413 - C55319 * C6249 - C54885 * C6727 + C54751 * C6886 +
             C54884 * C4325 - C55318 * C4097 - C54884 * C4767 +
             C54750 * C4979) *
                C38294 +
            (C54885 * C1937 - C55319 * C1725 - C54885 * C2333 + C54751 * C2513 +
             C54884 * C1934 - C55318 * C1724 - C54884 * C2330 +
             C54750 * C2512) *
                C38293) *
               C89093 * C1720 +
           ((C54884 * C1937 - C55318 * C1725 - C54884 * C2333 + C54750 * C2513 +
             C54885 * C10660 - C55319 * C10544 - C54885 * C10878 +
             C54751 * C10989) *
                C38293 +
            (C54884 * C6413 - C55318 * C6249 - C54884 * C6727 + C54750 * C6886 +
             C54885 * C23264 - C55319 * C23153 - C54885 * C23476 +
             C54751 * C23583) *
                C38294) *
               C89093 * C1721) *
              C89137 * C815 +
          (((C57362 + C57361) * C38293 + (C60416 + C60417) * C38294) * C89093 *
               C1720 -
           ((C56306 + C56307) * C38294 + (C55358 + C55357) * C38293) * C89093 *
               C1719 -
           ((C54885 * C29460 - C55319 * C29239 - C54885 * C29887 +
             C54751 * C30094 + C54884 * C6414 - C55318 * C6248 -
             C54884 * C6728 + C54750 * C6885) *
                C38294 +
            (C57364 + C57363) * C38293) *
               C89093 * C1721) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q));
    d2eexx[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                 C54750 +
             C27042 * C54751) *
                C38293 +
            (C71726 + C71727) * C38294) *
               C89308 -
           ((C18856 * C54751 + C16717 * C54750) * C38294 +
            (C27043 * C54751 + C27042 * C54750) * C38293) *
               C89217) *
              C89137 * C89333 +
          (((C27045 * C54750 + C27046 * C54751) * C38293 +
            (C16718 * C54750 + C29250 * C54751) * C38294) *
               C89217 -
           ((C71731 + C71730) * C38294 +
            (C27045 * C54751 +
             (C13261 * C114 - C13262 * C107 - C13261 * C115 + C89093 * C125) *
                 C54750) *
                C38293) *
               C89308) *
              C89137 * C89334 +
          ((((C13261 * C116 - C13262 * C108 - C13261 * C117 + C89093 * C126) *
                 C54750 +
             C28534 * C54751) *
                C38293 +
            (C73602 + C73610) * C38294) *
               C89308 -
           (((C13261 * C6250 - C13262 * C6247 - C13261 * C6251 +
              C89093 * C6256) *
                 C54751 +
             C73609 * C54750) *
                C38294 +
            (C28535 * C54751 + C28534 * C54750) * C38293) *
               C89217) *
              C89137 * C2628)) /
        (p * q * std::sqrt(p + q));
    d2eexy[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                 C13261 +
             (C38293 * C187 - C38365 * C113 + C38294 * C931 - C38366 * C830) *
                 C89093) *
                C54750 +
            ((C72766 - C72767 + C72768 - C72769) * C13261 +
             (C72770 - C72771 + C72772 - C72773) * C89093) *
                C54751) *
               C89308 +
           (((C72767 - C72766 + C72769 - C72768) * C13261 +
             (C72771 - C72770 + C72773 - C72772) * C89093) *
                C54750 +
            ((C72774 - C72775 + C72776 - C72777) * C13261 +
             (C72778 - C72779 + C72780 - C72781) * C89093) *
                C54751) *
               C89217) *
              C89137 * C89333 +
          ((((C38369 - C38368 + C38371 - C38370) * C13261 +
             (C38373 - C38372 + C38375 - C38374) * C89093) *
                C54750 +
            ((C40163 - C40164 + C40165 - C40166) * C13261 +
             (C40167 - C40168 + C40169 - C40170) * C89093) *
                C54751) *
               C89308 +
           (((C40164 - C40163 + C40166 - C40165) * C13261 +
             (C40168 - C40167 + C40170 - C40169) * C89093) *
                C54750 +
            ((C40171 - C40172 + C40173 - C40174) * C13261 +
             (C40175 - C40176 + C40177 - C40178) * C89093) *
                C54751) *
               C89217) *
              C89137 * C89334 +
          ((((C38377 - C38376 + C38379 - C38378) * C13261 +
             (C38381 - C38380 + C38383 - C38382) * C89093) *
                C54750 +
            ((C42053 - C42054 + C42055 - C42056) * C13261 +
             (C42057 - C42058 + C42059 - C42060) * C89093) *
                C54751) *
               C89308 +
           (((C42054 - C42053 + C42056 - C42055) * C13261 +
             (C42058 - C42057 + C42060 - C42059) * C89093) *
                C54750 +
            ((C38365 * C1727 - C38293 * C1833 + C38366 * C6247 -
              C38294 * C6335) *
                 C13261 +
             (C38365 * C1741 - C38293 * C1841 + C38366 * C6251 -
              C38294 * C6338) *
                 C89093) *
                C54751) *
               C89217) *
              C89137 * C2628)) /
        (p * q * std::sqrt(p + q));
    d2eexz[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                 C13261 +
             (C54750 * C270 - C54884 * C113 + C54751 * C1942 - C54885 * C1735) *
                 C89093) *
                C38293 +
            ((C71930 - C71931 + C71932 - C71933) * C13261 +
             (C71934 - C71935 + C71936 - C71937) * C89093) *
                C38294) *
               C89308 +
           (((C54884 * C1724 - C54750 * C1934 + C54885 * C1725 -
              C54751 * C1937) *
                 C13261 +
             (C54884 * C1735 - C54750 * C1942 + C54885 * C1737 -
              C54751 * C1945) *
                 C89093) *
                C38293 +
            ((C54884 * C4097 - C54750 * C4325 + C54885 * C6249 -
              C54751 * C6413) *
                 C13261 +
             (C54884 * C4102 - C54750 * C4329 + C54885 * C6255 -
              C54751 * C6416) *
                 C89093) *
                C38294) *
               C89217) *
              C89137 * C89333 +
          ((((C54888 - C54887 + C54890 - C54889) * C13261 +
             (C54892 - C54891 + C54894 - C54893) * C89093) *
                C38293 +
            ((C55661 - C55662 + C55663 - C55664) * C13261 +
             (C55665 - C55666 + C55667 - C55668) * C89093) *
                C38294) *
               C89308 +
           (((C56667 - C56666 + C56669 - C56668) * C13261 +
             (C56671 - C56670 + C56673 - C56672) * C89093) *
                C38293 +
            ((C59606 - C59607 + C59608 - C59609) * C13261 +
             (C59610 - C59611 + C59612 - C59613) * C89093) *
                C38294) *
               C89217) *
              C89137 * C89334 +
          ((((C54896 - C54895 + C54898 - C54897) * C13261 +
             (C54900 - C54899 + C54902 - C54901) * C89093) *
                C38293 +
            ((C57659 - C57660 + C57661 - C57662) * C13261 +
             (C57663 - C57664 + C57665 - C57666) * C89093) *
                C38294) *
               C89308 +
           (((C58584 - C58583 + C58586 - C58585) * C13261 +
             (C58588 - C58587 + C58590 - C58589) * C89093) *
                C38293 +
            ((C54884 * C4099 - C54750 * C4327 + C54885 * C6247 -
              C54751 * C6415) *
                 C13261 +
             (C54884 * C4106 - C54750 * C4331 + C54885 * C6251 -
              C54751 * C6418) *
                 C89093) *
                C38294) *
               C89217) *
              C89137 * C2628)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C38365 +
             (C89093 * C352 - C13261 * C346) * C38293 +
             (C14060 - C14061) * C38366 + (C14062 - C14063) * C38294) *
                C54750 +
            ((C27308 - C27309) * C38365 + (C27310 - C27311) * C38293 +
             (C17043 - C17042) * C38366 + (C17045 - C17044) * C38294) *
                C54751) *
               C89308 +
           (((C27309 - C27308) * C38365 + (C27311 - C27310) * C38293 +
             (C17042 - C17043) * C38366 + (C17044 - C17045) * C38294) *
                C54750 +
            ((C27313 - C27312) * C38365 + (C27315 - C27314) * C38293 +
             C31534 * C38366 + C31535 * C38294) *
                C54751) *
               C89217) *
              C89137 * C89333 +
          ((((C13261 * C107 - C89093 * C114) * C38365 +
             (C13261 * C347 - C89093 * C353) * C38293 +
             (C14072 - C14073) * C38366 + (C14074 - C14075) * C38294) *
                C54750 +
            ((C27320 - C27321) * C38365 + (C27322 - C27323) * C38293 +
             (C17051 - C17050) * C38366 + (C17053 - C17052) * C38294) *
                C54751) *
               C89308 +
           (((C27321 - C27320) * C38365 + (C27323 - C27322) * C38293 +
             (C17050 - C17051) * C38366 + (C17052 - C17053) * C38294) *
                C54750 +
            ((C27325 - C27324) * C38365 + (C27327 - C27326) * C38293 +
             (C29563 - C29564) * C38366 + (C29565 - C29566) * C38294) *
                C54751) *
               C89217) *
              C89137 * C89334 +
          ((((C89093 * C116 - C13261 * C108) * C38365 +
             (C89093 * C354 - C13261 * C348) * C38293 +
             (C15538 - C15539) * C38366 + (C15540 - C15541) * C38294) *
                C54750 +
            ((C28758 - C28759) * C38365 + (C28760 - C28761) * C38293 +
             (C73905 - C73906) * C38366 + (C73907 - C73908) * C38294) *
                C54751) *
               C89308 +
           (((C28759 - C28758) * C38365 + (C28761 - C28760) * C38293 +
             (C73906 - C73905) * C38366 + (C73908 - C73907) * C38294) *
                C54750 +
            ((C28763 - C28762) * C38365 + (C28765 - C28764) * C38293 +
             (C13261 * C6247 - C89093 * C6250) * C38366 +
             (C13261 * C6495 - C89093 * C6498) * C38294) *
                C54751) *
               C89217) *
              C89137 * C2628)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C38365 * C181 - C38589 * C106 - C38365 * C346 + C38293 * C409 +
             C38366 * C923 - C38590 * C819 - C38366 * C1135 + C38294 * C1227) *
                C89093 * C54750 +
            (C73100 + C73101) * C89093 * C54751) *
               C89308 -
           ((C73102 + C73103) * C89093 * C54751 +
            (C73101 + C73100) * C89093 * C54750) *
               C89217) *
              C89137 * C89333 +
          (((C40502 + C40501) * C89093 * C54750 +
            (C40503 + C40504) * C89093 * C54751) *
               C89217 -
           ((C40501 + C40502) * C89093 * C54751 +
            (C38629 + C38628) * C89093 * C54750) *
               C89308) *
              C89137 * C89334 +
          (((C38631 + C38630) * C89093 * C54750 +
            (C42367 + C42368) * C89093 * C54751) *
               C89308 -
           ((C38366 * C6335 - C38590 * C6247 - C38366 * C6495 + C38294 * C6573 +
             C38365 * C1833 - C38589 * C1727 - C38365 * C2045 +
             C38293 * C2135) *
                C89093 * C54751 +
            (C42368 + C42367) * C89093 * C54750) *
               C89217) *
              C89137 * C2628)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                C38365 +
            (C54750 * C493 - C54884 * C346 + C54751 * C2240 - C54885 * C2040) *
                C38293 +
            (C71930 - C71931 + C71932 - C71933) * C38366 +
            (C72240 - C72241 + C72242 - C72243) * C38294) *
               C89093 * C89308 +
           ((C54884 * C1724 - C54750 * C1934 + C54885 * C1725 -
             C54751 * C1937) *
                C38365 +
            (C54884 * C2040 - C54750 * C2240 + C54885 * C2043 -
             C54751 * C2243) *
                C38293 +
            (C54884 * C4097 - C54750 * C4325 + C54885 * C6249 -
             C54751 * C6413) *
                C38366 +
            (C54884 * C4439 - C54750 * C4661 + C54885 * C6493 -
             C54751 * C6650) *
                C38294) *
               C89093 * C89217) *
              C89137 * C89333 +
          (((C54888 - C54887 + C54890 - C54889) * C38365 +
            (C55110 - C55109 + C55112 - C55111) * C38293 +
            (C55661 - C55662 + C55663 - C55664) * C38366 +
            (C55978 - C55979 + C55980 - C55981) * C38294) *
               C89093 * C89308 +
           ((C56667 - C56666 + C56669 - C56668) * C38365 +
            (C57017 - C57016 + C57019 - C57018) * C38293 +
            (C59606 - C59607 + C59608 - C59609) * C38366 +
            (C60008 - C60009 + C60010 - C60011) * C38294) *
               C89093 * C89217) *
              C89137 * C89334 +
          (((C54896 - C54895 + C54898 - C54897) * C38365 +
            (C55114 - C55113 + C55116 - C55115) * C38293 +
            (C57659 - C57660 + C57661 - C57662) * C38366 +
            (C57961 - C57962 + C57963 - C57964) * C38294) *
               C89093 * C89308 +
           ((C58584 - C58583 + C58586 - C58585) * C38365 +
            (C58896 - C58895 + C58898 - C58897) * C38293 +
            (C54884 * C4099 - C54750 * C4327 + C54885 * C6247 -
             C54751 * C6415) *
                C38366 +
            (C54884 * C4441 - C54750 * C4663 + C54885 * C6495 -
             C54751 * C6652) *
                C38294) *
               C89093 * C89217) *
              C89137 * C2628)) /
        (p * q * std::sqrt(p + q));
    d2eezx[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C54884 +
             (C89093 * C571 - C13261 * C565) * C54750 +
             (C27308 - C27309) * C54885 + (C27606 - C27607) * C54751) *
                C38293 +
            ((C14060 - C14061) * C54884 + (C14328 - C14329) * C54750 +
             (C17043 - C17042) * C54885 + (C17367 - C17366) * C54751) *
                C38294) *
               C89308 +
           (((C27309 - C27308) * C54884 + (C27607 - C27606) * C54750 +
             (C27313 - C27312) * C54885 + (C27609 - C27608) * C54751) *
                C38293 +
            ((C17042 - C17043) * C54884 + (C17366 - C17367) * C54750 +
             C31534 * C54885 + C31777 * C54751) *
                C38294) *
               C89217) *
              C89137 * C89333 +
          ((((C13261 * C107 - C89093 * C114) * C54884 +
             (C13261 * C566 - C89093 * C572) * C54750 +
             (C27320 - C27321) * C54885 + (C27612 - C27613) * C54751) *
                C38293 +
            ((C14072 - C14073) * C54884 + (C14335 - C14336) * C54750 +
             (C17051 - C17050) * C54885 + (C17371 - C17370) * C54751) *
                C38294) *
               C89308 +
           (((C27321 - C27320) * C54884 + (C27613 - C27612) * C54750 +
             (C27325 - C27324) * C54885 + (C27615 - C27614) * C54751) *
                C38293 +
            ((C17050 - C17051) * C54884 + (C17370 - C17371) * C54750 +
             (C29563 - C29564) * C54885 + (C29890 - C29891) * C54751) *
                C38294) *
               C89217) *
              C89137 * C89334 +
          ((((C89093 * C116 - C13261 * C108) * C54884 +
             (C89093 * C573 - C13261 * C567) * C54750 +
             (C28758 - C28759) * C54885 + (C28990 - C28991) * C54751) *
                C38293 +
            ((C15538 - C15539) * C54884 + (C15768 - C15769) * C54750 +
             (C73905 - C73906) * C54885 + (C74203 - C74204) * C54751) *
                C38294) *
               C89308 +
           (((C28759 - C28758) * C54884 + (C28991 - C28990) * C54750 +
             (C28763 - C28762) * C54885 + (C28993 - C28992) * C54751) *
                C38293 +
            ((C73906 - C73905) * C54884 + (C74204 - C74203) * C54750 +
             (C13261 * C6247 - C89093 * C6250) * C54885 +
             (C13261 * C6729 - C89093 * C6732) * C54751) *
                C38294) *
               C89217) *
              C89137 * C2628)) /
        (p * q * std::sqrt(p + q));
    d2eezy[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                C54884 +
            (C38293 * C627 - C38365 * C565 + C38294 * C1515 - C38366 * C1425) *
                C54750 +
            (C72766 - C72767 + C72768 - C72769) * C54885 +
            (C73398 - C73399 + C73400 - C73401) * C54751) *
               C89093 * C89308 +
           ((C72767 - C72766 + C72769 - C72768) * C54884 +
            (C73399 - C73398 + C73401 - C73400) * C54750 +
            (C72774 - C72775 + C72776 - C72777) * C54885 +
            (C73402 - C73403 + C73404 - C73405) * C54751) *
               C89093 * C89217) *
              C89137 * C89333 +
          (((C38369 - C38368 + C38371 - C38370) * C54884 +
            (C38833 - C38832 + C38835 - C38834) * C54750 +
            (C40163 - C40164 + C40165 - C40166) * C54885 +
            (C40801 - C40802 + C40803 - C40804) * C54751) *
               C89093 * C89308 +
           ((C40164 - C40163 + C40166 - C40165) * C54884 +
            (C40802 - C40801 + C40804 - C40803) * C54750 +
            (C40171 - C40172 + C40173 - C40174) * C54885 +
            (C40805 - C40806 + C40807 - C40808) * C54751) *
               C89093 * C89217) *
              C89137 * C89334 +
          (((C38377 - C38376 + C38379 - C38378) * C54884 +
            (C38837 - C38836 + C38839 - C38838) * C54750 +
            (C42053 - C42054 + C42055 - C42056) * C54885 +
            (C42663 - C42664 + C42665 - C42666) * C54751) *
               C89093 * C89308 +
           ((C42054 - C42053 + C42056 - C42055) * C54884 +
            (C42664 - C42663 + C42666 - C42665) * C54750 +
            (C38365 * C1727 - C38293 * C1833 + C38366 * C6247 -
             C38294 * C6335) *
                C54885 +
            (C38365 * C2335 - C38293 * C2425 + C38366 * C6729 -
             C38294 * C6809) *
                C54751) *
               C89093 * C89217) *
              C89137 * C2628)) /
        (p * q * std::sqrt(p + q));
    d2eezz[18] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C54884 * C264 - C55318 * C106 - C54884 * C565 +
                       C54750 * C700 + C54885 * C1934 - C55319 * C1724 -
                       C54885 * C2330 + C54751 * C2512) *
                          C38293 +
                      (C72566 + C72567) * C38294) *
                         C89093 * C89308 -
                     ((C54885 * C6413 - C55319 * C6249 - C54885 * C6727 +
                       C54751 * C6886 + C54884 * C4325 - C55318 * C4097 -
                       C54884 * C4767 + C54750 * C4979) *
                          C38294 +
                      (C54885 * C1937 - C55319 * C1725 - C54885 * C2333 +
                       C54751 * C2513 + C54884 * C1934 - C55318 * C1724 -
                       C54884 * C2330 + C54750 * C2512) *
                          C38293) *
                         C89093 * C89217) *
                        C89137 * C89333 +
                    (((C57362 + C57361) * C38293 + (C60416 + C60417) * C38294) *
                         C89093 * C89217 -
                     ((C56306 + C56307) * C38294 + (C55358 + C55357) * C38293) *
                         C89093 * C89308) *
                        C89137 * C89334 +
                    (((C55360 + C55359) * C38293 + (C58271 + C58272) * C38294) *
                         C89093 * C89308 -
                     ((C54885 * C6415 - C55319 * C6247 - C54885 * C6729 +
                       C54751 * C6884 + C54884 * C4327 - C55318 * C4099 -
                       C54884 * C4769 + C54750 * C4981) *
                          C38294 +
                      (C59211 + C59210) * C38293) *
                         C89093 * C89217) *
                        C89137 * C2628)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                C54750 +
            C27042 * C54751) *
               C38293 +
           (C13788 * C54750 + C16717 * C54751) * C38294) *
              C89153 * C89137 * C96 -
          ((C16718 * C54751 + C13791 * C54750) * C38294 +
           (C27045 * C54751 +
            (C13261 * C114 - C13262 * C107 - C13261 * C115 + C89093 * C125) *
                C54750) *
               C38293) *
              C89153 * C89137 * C97 +
          (((C13261 * C116 - C13262 * C108 - C13261 * C117 + C89093 * C126) *
                C54750 +
            C28534 * C54751) *
               C38293 +
           (C15312 * C54750 + (C13261 * C4105 - C13262 * C4099 -
                               C13261 * C4106 + C89093 * C4111) *
                                  C54751) *
               C38294) *
              C89153 * C89137 * C98 -
          (((C13261 * C4107 - C13262 * C4100 - C13261 * C4108 +
             C89093 * C4112) *
                C54751 +
            (C13261 * C837 - C13262 * C823 - C13261 * C838 + C89093 * C847) *
                C54750) *
               C38294 +
           ((C13261 * C1742 - C13262 * C1728 - C13261 * C1743 +
             C89093 * C1752) *
                C54751 +
            (C13261 * C118 - C13262 * C109 - C13261 * C119 + C89093 * C127) *
                C54750) *
               C38293) *
              C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                 C54750 +
             C27042 * C54751) *
                C38293 +
            (C71726 + C71727) * C38294) *
               C89153 * C812 -
           ((C71728 + C71729) * C38294 + (C71727 + C71726) * C38293) * C89153 *
               C813 +
           ((C71729 + C71728) * C38293 +
            (C13790 * C54750 + C21134 * C54751) * C38294) *
               C89153 * C814) *
              C815 +
          (((C71730 + C71731) * C38293 + (C71732 + C71733) * C38294) * C89153 *
               C813 -
           ((C71731 + C71730) * C38294 +
            (C27045 * C54751 +
             (C13261 * C114 - C13262 * C107 - C13261 * C115 + C89093 * C125) *
                 C54750) *
                C38293) *
               C89153 * C812 -
           (((C13261 * C16687 - C13262 * C16684 - C13261 * C16688 +
              C89093 * C16690) *
                 C54751 +
             C13793 * C54750) *
                C38294 +
            (C71733 + C71732) * C38293) *
               C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eexy[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                C13261 +
            (C38293 * C187 - C38365 * C113 + C38294 * C931 - C38366 * C830) *
                C89093) *
               C54750 +
           ((C38293 * C1828 - C38365 * C1724 + C38294 * C4211 -
             C38366 * C4097) *
                C13261 +
            (C38293 * C1836 - C38365 * C1735 + C38294 * C4215 -
             C38366 * C4102) *
                C89093) *
               C54751) *
              C89153 * C89137 * C96 +
          (((C38369 - C38368 + C38371 - C38370) * C13261 +
            (C38373 - C38372 + C38375 - C38374) * C89093) *
               C54750 +
           ((C40163 - C40164 + C40165 - C40166) * C13261 +
            (C40167 - C40168 + C40169 - C40170) * C89093) *
               C54751) *
              C89153 * C89137 * C97 +
          (((C38377 - C38376 + C38379 - C38378) * C13261 +
            (C38381 - C38380 + C38383 - C38382) * C89093) *
               C54750 +
           ((C42053 - C42054 + C42055 - C42056) * C13261 +
            (C42057 - C42058 + C42059 - C42060) * C89093) *
               C54751) *
              C89153 * C89137 * C98 +
          (((C38385 - C38384 + C38387 - C38386) * C13261 +
            (C38389 - C38388 + C38391 - C38390) * C89093) *
               C54750 +
           ((C38365 * C1728 - C38293 * C1834 + C38366 * C4100 -
             C38294 * C4214) *
                C13261 +
            (C38365 * C1743 - C38293 * C1842 + C38366 * C4108 -
             C38294 * C4218) *
                C89093) *
               C54751) *
              C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                 C13261 +
             (C38293 * C187 - C38365 * C113 + C38294 * C931 - C38366 * C830) *
                 C89093) *
                C54750 +
            ((C38293 * C1828 - C38365 * C1724 + C38294 * C4211 -
              C38366 * C4097) *
                 C13261 +
             (C38293 * C1836 - C38365 * C1735 + C38294 * C4215 -
              C38366 * C4102) *
                 C89093) *
                C54751) *
               C89153 * C812 +
           (((C38365 * C819 - C38293 * C923 + C38366 * C820 - C38294 * C926) *
                 C13261 +
             (C38365 * C830 - C38293 * C931 + C38366 * C832 - C38294 * C934) *
                 C89093) *
                C54750 +
            ((C38365 * C4097 - C38293 * C4211 + C38366 * C8516 -
              C38294 * C8600) *
                 C13261 +
             (C38365 * C4102 - C38293 * C4215 + C38366 * C8522 -
              C38294 * C8603) *
                 C89093) *
                C54751) *
               C89153 * C813 +
           (((C38293 * C926 - C38365 * C820 + C38294 * C5787 - C38366 * C5727) *
                 C13261 +
             (C38293 * C934 - C38365 * C832 + C38294 * C5790 - C38366 * C5733) *
                 C89093) *
                C54750 +
            ((C38293 * C8600 - C38365 * C8516 + C38294 * C16821 -
              C38366 * C16683) *
                 C13261 +
             (C38293 * C8603 - C38365 * C8522 + C38294 * C16823 -
              C38366 * C16686) *
                 C89093) *
                C54751) *
               C89153 * C814) *
              C815 +
          ((((C38369 - C38368 + C38371 - C38370) * C13261 +
             (C38373 - C38372 + C38375 - C38374) * C89093) *
                C54750 +
            ((C40163 - C40164 + C40165 - C40166) * C13261 +
             (C40167 - C40168 + C40169 - C40170) * C89093) *
                C54751) *
               C89153 * C812 +
           (((C39169 - C39168 + C39171 - C39170) * C13261 +
             (C39173 - C39172 + C39175 - C39174) * C89093) *
                C54750 +
            ((C43055 - C43056 + C43057 - C43058) * C13261 +
             (C43059 - C43060 + C43061 - C43062) * C89093) *
                C54751) *
               C89153 * C813 +
           (((C39177 - C39176 + C39179 - C39178) * C13261 +
             (C39181 - C39180 + C39183 - C39182) * C89093) *
                C54750 +
            ((C38365 * C8515 - C38293 * C8601 + C38366 * C16684 -
              C38294 * C16822) *
                 C13261 +
             (C38365 * C8520 - C38293 * C8604 + C38366 * C16688 -
              C38294 * C16824) *
                 C89093) *
                C54751) *
               C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eexz[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                C13261 +
            (C54750 * C270 - C54884 * C113 + C54751 * C1942 - C54885 * C1735) *
                C89093) *
               C38293 +
           ((C54750 * C1029 - C54884 * C819 + C54751 * C4325 - C54885 * C4097) *
                C13261 +
            (C54750 * C1037 - C54884 * C830 + C54751 * C4329 - C54885 * C4102) *
                C89093) *
               C38294) *
              C89153 * C89137 * C96 +
          (((C54888 - C54887 + C54890 - C54889) * C13261 +
            (C54892 - C54891 + C54894 - C54893) * C89093) *
               C38293 +
           ((C55661 - C55662 + C55663 - C55664) * C13261 +
            (C55665 - C55666 + C55667 - C55668) * C89093) *
               C38294) *
              C89153 * C89137 * C97 +
          (((C54896 - C54895 + C54898 - C54897) * C13261 +
            (C54900 - C54899 + C54902 - C54901) * C89093) *
               C38293 +
           ((C57659 - C57660 + C57661 - C57662) * C13261 +
            (C57663 - C57664 + C57665 - C57666) * C89093) *
               C38294) *
              C89153 * C89137 * C98 +
          (((C54904 - C54903 + C54906 - C54905) * C13261 +
            (C54908 - C54907 + C54910 - C54909) * C89093) *
               C38293 +
           ((C54884 * C823 - C54750 * C1035 + C54885 * C4100 - C54751 * C4328) *
                C13261 +
            (C54884 * C838 - C54750 * C1043 + C54885 * C4108 - C54751 * C4332) *
                C89093) *
               C38294) *
              C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                 C13261 +
             (C54750 * C270 - C54884 * C113 + C54751 * C1942 - C54885 * C1735) *
                 C89093) *
                C38293 +
            ((C71930 - C71931 + C71932 - C71933) * C13261 +
             (C71934 - C71935 + C71936 - C71937) * C89093) *
                C38294) *
               C89153 * C812 +
           (((C71931 - C71930 + C71933 - C71932) * C13261 +
             (C71935 - C71934 + C71937 - C71936) * C89093) *
                C38293 +
            ((C71938 - C71939 + C71940 - C71941) * C13261 +
             (C71942 - C71943 + C71944 - C71945) * C89093) *
                C38294) *
               C89153 * C813 +
           (((C71939 - C71938 + C71941 - C71940) * C13261 +
             (C71943 - C71942 + C71945 - C71944) * C89093) *
                C38293 +
            ((C54750 * C5843 - C54884 * C5727 + C54751 * C16923 -
              C54885 * C16683) *
                 C13261 +
             (C54750 * C5846 - C54884 * C5733 + C54751 * C16925 -
              C54885 * C16686) *
                 C89093) *
                C38294) *
               C89153 * C814) *
              C815 +
          ((((C54888 - C54887 + C54890 - C54889) * C13261 +
             (C54892 - C54891 + C54894 - C54893) * C89093) *
                C38293 +
            ((C55661 - C55662 + C55663 - C55664) * C13261 +
             (C55665 - C55666 + C55667 - C55668) * C89093) *
                C38294) *
               C89153 * C812 +
           (((C55662 - C55661 + C55664 - C55663) * C13261 +
             (C55666 - C55665 + C55668 - C55667) * C89093) *
                C38293 +
            ((C55669 - C55670 + C55671 - C55672) * C13261 +
             (C55673 - C55674 + C55675 - C55676) * C89093) *
                C38294) *
               C89153 * C813 +
           (((C55670 - C55669 + C55672 - C55671) * C13261 +
             (C55674 - C55673 + C55676 - C55675) * C89093) *
                C38293 +
            ((C54884 * C5726 - C54750 * C5844 + C54885 * C16684 -
              C54751 * C16924) *
                 C13261 +
             (C54884 * C5731 - C54750 * C5847 + C54885 * C16688 -
              C54751 * C16926) *
                 C89093) *
                C38294) *
               C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C89093 * C112 - C13261 * C106) * C38365 +
            (C89093 * C352 - C13261 * C346) * C38293 +
            (C14060 - C14061) * C38366 + (C14062 - C14063) * C38294) *
               C54750 +
           ((C27308 - C27309) * C38365 + (C27310 - C27311) * C38293 +
            (C17043 - C17042) * C38366 + (C17045 - C17044) * C38294) *
               C54751) *
              C89153 * C89137 * C96 +
          (((C13261 * C107 - C89093 * C114) * C38365 +
            (C13261 * C347 - C89093 * C353) * C38293 +
            (C14072 - C14073) * C38366 + (C14074 - C14075) * C38294) *
               C54750 +
           ((C27320 - C27321) * C38365 + (C27322 - C27323) * C38293 +
            (C17051 - C17050) * C38366 + (C17053 - C17052) * C38294) *
               C54751) *
              C89153 * C89137 * C97 +
          (((C89093 * C116 - C13261 * C108) * C38365 +
            (C89093 * C354 - C13261 * C348) * C38293 +
            (C15538 - C15539) * C38366 + (C15540 - C15541) * C38294) *
               C54750 +
           ((C28758 - C28759) * C38365 + (C28760 - C28761) * C38293 +
            (C89093 * C4105 - C13261 * C4099) * C38366 +
            (C89093 * C4445 - C13261 * C4441) * C38294) *
               C54751) *
              C89153 * C89137 * C98 +
          (((C13261 * C109 - C89093 * C118) * C38365 +
            (C13261 * C349 - C89093 * C355) * C38293 +
            (C13261 * C823 - C89093 * C837) * C38366 +
            (C13261 * C1141 - C89093 * C1149) * C38294) *
               C54750 +
           ((C13261 * C1728 - C89093 * C1742) * C38365 +
            (C13261 * C2046 - C89093 * C2054) * C38293 +
            (C13261 * C4100 - C89093 * C4107) * C38366 +
            (C13261 * C4442 - C89093 * C4446) * C38294) *
               C54751) *
              C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C38365 +
             (C89093 * C352 - C13261 * C346) * C38293 +
             (C14060 - C14061) * C38366 + (C14062 - C14063) * C38294) *
                C54750 +
            ((C27308 - C27309) * C38365 + (C27310 - C27311) * C38293 +
             (C17043 - C17042) * C38366 + (C17045 - C17044) * C38294) *
                C54751) *
               C89153 * C812 +
           (((C14061 - C14060) * C38365 + (C14063 - C14062) * C38293 +
             (C14065 - C14064) * C38366 + (C14067 - C14066) * C38294) *
                C54750 +
            ((C17042 - C17043) * C38365 + (C17044 - C17045) * C38293 +
             C21373 * C38366 + C21374 * C38294) *
                C54751) *
               C89153 * C813 +
           ((C14084 * C38365 + C14085 * C38293 + (C14069 - C14068) * C38366 +
             (C14071 - C14070) * C38294) *
                C54750 +
            ((C17047 - C17046) * C38365 + (C17049 - C17048) * C38293 +
             (C21375 - C21376) * C38366 + (C21377 - C21378) * C38294) *
                C54751) *
               C89153 * C814) *
              C815 +
          ((((C13261 * C107 - C89093 * C114) * C38365 +
             (C13261 * C347 - C89093 * C353) * C38293 +
             (C14072 - C14073) * C38366 + (C14074 - C14075) * C38294) *
                C54750 +
            ((C27320 - C27321) * C38365 + (C27322 - C27323) * C38293 +
             (C17051 - C17050) * C38366 + (C17053 - C17052) * C38294) *
                C54751) *
               C89153 * C812 +
           (((C14073 - C14072) * C38365 + (C14075 - C14074) * C38293 +
             (C14077 - C14076) * C38366 + (C14079 - C14078) * C38294) *
                C54750 +
            ((C17050 - C17051) * C38365 + (C17052 - C17053) * C38293 +
             (C17054 - C17055) * C38366 + (C17056 - C17057) * C38294) *
                C54751) *
               C89153 * C813 +
           ((C14086 * C38365 + C14087 * C38293 + (C14081 - C14080) * C38366 +
             (C14083 - C14082) * C38294) *
                C54750 +
            ((C17055 - C17054) * C38365 + (C17057 - C17056) * C38293 +
             (C13261 * C16684 - C89093 * C16687) * C38366 +
             (C13261 * C17038 - C89093 * C17040) * C38294) *
                C54751) *
               C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C38365 * C181 - C38589 * C106 - C38365 * C346 + C38293 * C409 +
            C38366 * C923 - C38590 * C819 - C38366 * C1135 + C38294 * C1227) *
               C89093 * C54750 +
           (C38365 * C1828 - C38589 * C1724 - C38365 * C2040 + C38293 * C2132 +
            C38366 * C4211 - C38590 * C4097 - C38366 * C4439 + C38294 * C4545) *
               C89093 * C54751) *
              C89153 * C89137 * C96 -
          ((C40501 + C40502) * C89093 * C54751 +
           (C38629 + C38628) * C89093 * C54750) *
              C89153 * C89137 * C97 +
          ((C38631 + C38630) * C89093 * C54750 +
           (C42367 + C42368) * C89093 * C54751) *
              C89153 * C89137 * C98 -
          ((C38366 * C4214 - C38590 * C4100 - C38366 * C4442 + C38294 * C4548 +
            C38365 * C1834 - C38589 * C1728 - C38365 * C2046 + C38293 * C2136) *
               C89093 * C54751 +
           (C38633 + C38632) * C89093 * C54750) *
              C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C38365 * C181 - C38589 * C106 - C38365 * C346 + C38293 * C409 +
             C38366 * C923 - C38590 * C819 - C38366 * C1135 + C38294 * C1227) *
                C89093 * C54750 +
            (C38365 * C1828 - C38589 * C1724 - C38365 * C2040 + C38293 * C2132 +
             C38366 * C4211 - C38590 * C4097 - C38366 * C4439 +
             C38294 * C4545) *
                C89093 * C54751) *
               C89153 * C812 -
           ((C38366 * C8600 - C38590 * C8516 - C38366 * C8760 + C38294 * C8842 +
             C38365 * C4211 - C38589 * C4097 - C38365 * C4439 +
             C38293 * C4545) *
                C89093 * C54751 +
            (C38366 * C926 - C38590 * C820 - C38366 * C1138 + C38294 * C1228 +
             C38365 * C923 - C38589 * C819 - C38365 * C1135 + C38293 * C1227) *
                C89093 * C54750) *
               C89153 * C813 +
           ((C38365 * C926 - C38589 * C820 - C38365 * C1138 + C38293 * C1228 +
             C38366 * C5787 - C38590 * C5727 - C38366 * C5899 +
             C38294 * C5957) *
                C89093 * C54750 +
            (C38365 * C8600 - C38589 * C8516 - C38365 * C8760 + C38293 * C8842 +
             C38366 * C16821 - C38590 * C16683 - C38366 * C17037 +
             C38294 * C17155) *
                C89093 * C54751) *
               C89153 * C814) *
              C815 +
          (((C39541 + C39540) * C89093 * C54750 +
            (C43485 + C43486) * C89093 * C54751) *
               C89153 * C813 -
           ((C40501 + C40502) * C89093 * C54751 +
            (C38629 + C38628) * C89093 * C54750) *
               C89153 * C812 -
           ((C38366 * C16822 - C38590 * C16684 - C38366 * C17038 +
             C38294 * C17156 + C38365 * C8601 - C38589 * C8515 -
             C38365 * C8761 + C38293 * C8841) *
                C89093 * C54751 +
            (C39543 + C39542) * C89093 * C54750) *
               C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
               C38365 +
           (C54750 * C493 - C54884 * C346 + C54751 * C2240 - C54885 * C2040) *
               C38293 +
           (C54750 * C1029 - C54884 * C819 + C54751 * C4325 - C54885 * C4097) *
               C38366 +
           (C54750 * C1335 - C54884 * C1135 + C54751 * C4661 - C54885 * C4439) *
               C38294) *
              C89093 * C89153 * C89137 * C96 +
          ((C54888 - C54887 + C54890 - C54889) * C38365 +
           (C55110 - C55109 + C55112 - C55111) * C38293 +
           (C55661 - C55662 + C55663 - C55664) * C38366 +
           (C55978 - C55979 + C55980 - C55981) * C38294) *
              C89093 * C89153 * C89137 * C97 +
          ((C54896 - C54895 + C54898 - C54897) * C38365 +
           (C55114 - C55113 + C55116 - C55115) * C38293 +
           (C57659 - C57660 + C57661 - C57662) * C38366 +
           (C57961 - C57962 + C57963 - C57964) * C38294) *
              C89093 * C89153 * C89137 * C98 +
          ((C54904 - C54903 + C54906 - C54905) * C38365 +
           (C55118 - C55117 + C55120 - C55119) * C38293 +
           (C54884 * C823 - C54750 * C1035 + C54885 * C4100 - C54751 * C4328) *
               C38366 +
           (C54884 * C1141 - C54750 * C1341 + C54885 * C4442 - C54751 * C4664) *
               C38294) *
              C89093 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                C38365 +
            (C54750 * C493 - C54884 * C346 + C54751 * C2240 - C54885 * C2040) *
                C38293 +
            (C71930 - C71931 + C71932 - C71933) * C38366 +
            (C72240 - C72241 + C72242 - C72243) * C38294) *
               C89093 * C89153 * C812 +
           ((C71931 - C71930 + C71933 - C71932) * C38365 +
            (C72241 - C72240 + C72243 - C72242) * C38293 +
            (C71938 - C71939 + C71940 - C71941) * C38366 +
            (C72244 - C72245 + C72246 - C72247) * C38294) *
               C89093 * C89153 * C813 +
           ((C71939 - C71938 + C71941 - C71940) * C38365 +
            (C72245 - C72244 + C72247 - C72246) * C38293 +
            (C54750 * C5843 - C54884 * C5727 + C54751 * C16923 -
             C54885 * C16683) *
                C38366 +
            (C54750 * C6008 - C54884 * C5899 + C54751 * C17255 -
             C54885 * C17037) *
                C38294) *
               C89093 * C89153 * C814) *
              C815 +
          (((C54888 - C54887 + C54890 - C54889) * C38365 +
            (C55110 - C55109 + C55112 - C55111) * C38293 +
            (C55661 - C55662 + C55663 - C55664) * C38366 +
            (C55978 - C55979 + C55980 - C55981) * C38294) *
               C89093 * C89153 * C812 +
           ((C55662 - C55661 + C55664 - C55663) * C38365 +
            (C55979 - C55978 + C55981 - C55980) * C38293 +
            (C55669 - C55670 + C55671 - C55672) * C38366 +
            (C55982 - C55983 + C55984 - C55985) * C38294) *
               C89093 * C89153 * C813 +
           ((C55670 - C55669 + C55672 - C55671) * C38365 +
            (C55983 - C55982 + C55985 - C55984) * C38293 +
            (C54884 * C5726 - C54750 * C5844 + C54885 * C16684 -
             C54751 * C16924) *
                C38366 +
            (C54884 * C5900 - C54750 * C6009 + C54885 * C17038 -
             C54751 * C17256) *
                C38294) *
               C89093 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eezx[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C89093 * C112 - C13261 * C106) * C54884 +
            (C89093 * C571 - C13261 * C565) * C54750 +
            (C27308 - C27309) * C54885 + (C27606 - C27607) * C54751) *
               C38293 +
           ((C14060 - C14061) * C54884 + (C14328 - C14329) * C54750 +
            (C17043 - C17042) * C54885 + (C17367 - C17366) * C54751) *
               C38294) *
              C89153 * C89137 * C96 +
          (((C13261 * C107 - C89093 * C114) * C54884 +
            (C13261 * C566 - C89093 * C572) * C54750 +
            (C27320 - C27321) * C54885 + (C27612 - C27613) * C54751) *
               C38293 +
           ((C14072 - C14073) * C54884 + (C14335 - C14336) * C54750 +
            (C17051 - C17050) * C54885 + (C17371 - C17370) * C54751) *
               C38294) *
              C89153 * C89137 * C97 +
          (((C89093 * C116 - C13261 * C108) * C54884 +
            (C89093 * C573 - C13261 * C567) * C54750 +
            (C28758 - C28759) * C54885 + (C28990 - C28991) * C54751) *
               C38293 +
           ((C15538 - C15539) * C54884 + (C15768 - C15769) * C54750 +
            (C89093 * C4105 - C13261 * C4099) * C54885 +
            (C89093 * C4773 - C13261 * C4769) * C54751) *
               C38294) *
              C89153 * C89137 * C98 +
          (((C13261 * C109 - C89093 * C118) * C54884 +
            (C13261 * C568 - C89093 * C574) * C54750 +
            (C13261 * C1728 - C89093 * C1742) * C54885 +
            (C13261 * C2336 - C89093 * C2344) * C54751) *
               C38293 +
           ((C13261 * C823 - C89093 * C837) * C54884 +
            (C13261 * C1431 - C89093 * C1439) * C54750 +
            (C13261 * C4100 - C89093 * C4107) * C54885 +
            (C13261 * C4770 - C89093 * C4774) * C54751) *
               C38294) *
              C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C54884 +
             (C89093 * C571 - C13261 * C565) * C54750 +
             (C27308 - C27309) * C54885 + (C27606 - C27607) * C54751) *
                C38293 +
            ((C14060 - C14061) * C54884 + (C14328 - C14329) * C54750 +
             (C17043 - C17042) * C54885 + (C17367 - C17366) * C54751) *
                C38294) *
               C89153 * C812 +
           (((C14061 - C14060) * C54884 + (C14329 - C14328) * C54750 +
             (C17042 - C17043) * C54885 + (C17366 - C17367) * C54751) *
                C38293 +
            ((C14065 - C14064) * C54884 + (C14332 - C14331) * C54750 +
             C21373 * C54885 + C21609 * C54751) *
                C38294) *
               C89153 * C813 +
           ((C14084 * C54884 + C14342 * C54750 + (C17047 - C17046) * C54885 +
             (C17369 - C17368) * C54751) *
                C38293 +
            ((C14069 - C14068) * C54884 + (C14334 - C14333) * C54750 +
             (C21375 - C21376) * C54885 + (C21610 - C21611) * C54751) *
                C38294) *
               C89153 * C814) *
              C815 +
          ((((C13261 * C107 - C89093 * C114) * C54884 +
             (C13261 * C566 - C89093 * C572) * C54750 +
             (C27320 - C27321) * C54885 + (C27612 - C27613) * C54751) *
                C38293 +
            ((C14072 - C14073) * C54884 + (C14335 - C14336) * C54750 +
             (C17051 - C17050) * C54885 + (C17371 - C17370) * C54751) *
                C38294) *
               C89153 * C812 +
           (((C14073 - C14072) * C54884 + (C14336 - C14335) * C54750 +
             (C17050 - C17051) * C54885 + (C17370 - C17371) * C54751) *
                C38293 +
            ((C14077 - C14076) * C54884 + (C14339 - C14338) * C54750 +
             (C17054 - C17055) * C54885 + (C17372 - C17373) * C54751) *
                C38294) *
               C89153 * C813 +
           ((C14086 * C54884 + C14343 * C54750 + (C17055 - C17054) * C54885 +
             (C17373 - C17372) * C54751) *
                C38293 +
            ((C14081 - C14080) * C54884 + (C14341 - C14340) * C54750 +
             (C13261 * C16684 - C89093 * C16687) * C54885 +
             (C13261 * C17362 - C89093 * C17364) * C54751) *
                C38294) *
               C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eezy[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
               C54884 +
           (C38293 * C627 - C38365 * C565 + C38294 * C1515 - C38366 * C1425) *
               C54750 +
           (C38293 * C1828 - C38365 * C1724 + C38294 * C4211 - C38366 * C4097) *
               C54885 +
           (C38293 * C2420 - C38365 * C2330 + C38294 * C4873 - C38366 * C4767) *
               C54751) *
              C89093 * C89153 * C89137 * C96 +
          ((C38369 - C38368 + C38371 - C38370) * C54884 +
           (C38833 - C38832 + C38835 - C38834) * C54750 +
           (C40163 - C40164 + C40165 - C40166) * C54885 +
           (C40801 - C40802 + C40803 - C40804) * C54751) *
              C89093 * C89153 * C89137 * C97 +
          ((C38377 - C38376 + C38379 - C38378) * C54884 +
           (C38837 - C38836 + C38839 - C38838) * C54750 +
           (C42053 - C42054 + C42055 - C42056) * C54885 +
           (C42663 - C42664 + C42665 - C42666) * C54751) *
              C89093 * C89153 * C89137 * C98 +
          ((C38385 - C38384 + C38387 - C38386) * C54884 +
           (C38841 - C38840 + C38843 - C38842) * C54750 +
           (C38365 * C1728 - C38293 * C1834 + C38366 * C4100 - C38294 * C4214) *
               C54885 +
           (C38365 * C2336 - C38293 * C2426 + C38366 * C4770 - C38294 * C4876) *
               C54751) *
              C89093 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                C54884 +
            (C38293 * C627 - C38365 * C565 + C38294 * C1515 - C38366 * C1425) *
                C54750 +
            (C38293 * C1828 - C38365 * C1724 + C38294 * C4211 -
             C38366 * C4097) *
                C54885 +
            (C38293 * C2420 - C38365 * C2330 + C38294 * C4873 -
             C38366 * C4767) *
                C54751) *
               C89093 * C89153 * C812 +
           ((C38365 * C819 - C38293 * C923 + C38366 * C820 - C38294 * C926) *
                C54884 +
            (C38365 * C1425 - C38293 * C1515 + C38366 * C1428 -
             C38294 * C1518) *
                C54750 +
            (C38365 * C4097 - C38293 * C4211 + C38366 * C8516 -
             C38294 * C8600) *
                C54885 +
            (C38365 * C4767 - C38293 * C4873 + C38366 * C8994 -
             C38294 * C9074) *
                C54751) *
               C89093 * C89153 * C813 +
           ((C38293 * C926 - C38365 * C820 + C38294 * C5787 - C38366 * C5727) *
                C54884 +
            (C38293 * C1518 - C38365 * C1428 + C38294 * C6117 -
             C38366 * C6061) *
                C54750 +
            (C38293 * C8600 - C38365 * C8516 + C38294 * C16821 -
             C38366 * C16683) *
                C54885 +
            (C38293 * C9074 - C38365 * C8994 + C38294 * C17471 -
             C38366 * C17361) *
                C54751) *
               C89093 * C89153 * C814) *
              C815 +
          (((C38369 - C38368 + C38371 - C38370) * C54884 +
            (C38833 - C38832 + C38835 - C38834) * C54750 +
            (C40163 - C40164 + C40165 - C40166) * C54885 +
            (C40801 - C40802 + C40803 - C40804) * C54751) *
               C89093 * C89153 * C812 +
           ((C39169 - C39168 + C39171 - C39170) * C54884 +
            (C39858 - C39857 + C39860 - C39859) * C54750 +
            (C43055 - C43056 + C43057 - C43058) * C54885 +
            (C43887 - C43888 + C43889 - C43890) * C54751) *
               C89093 * C89153 * C813 +
           ((C39177 - C39176 + C39179 - C39178) * C54884 +
            (C39862 - C39861 + C39864 - C39863) * C54750 +
            (C38365 * C8515 - C38293 * C8601 + C38366 * C16684 -
             C38294 * C16822) *
                C54885 +
            (C38365 * C8995 - C38293 * C9075 + C38366 * C17362 -
             C38294 * C17472) *
                C54751) *
               C89093 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eezz[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C54884 * C264 - C55318 * C106 - C54884 * C565 + C54750 * C700 +
            C54885 * C1934 - C55319 * C1724 - C54885 * C2330 + C54751 * C2512) *
               C38293 +
           (C54884 * C1029 - C55318 * C819 - C54884 * C1425 + C54750 * C1607 +
            C54885 * C4325 - C55319 * C4097 - C54885 * C4767 + C54751 * C4979) *
               C38294) *
              C89093 * C89153 * C89137 * C96 -
          ((C56306 + C56307) * C38294 + (C55358 + C55357) * C38293) * C89093 *
              C89153 * C89137 * C97 +
          ((C55360 + C55359) * C38293 + (C58271 + C58272) * C38294) * C89093 *
              C89153 * C89137 * C98 -
          ((C54885 * C4328 - C55319 * C4100 - C54885 * C4770 + C54751 * C4982 +
            C54884 * C1035 - C55318 * C823 - C54884 * C1431 + C54750 * C1611) *
               C38294 +
           (C55362 + C55361) * C38293) *
              C89093 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C54884 * C264 - C55318 * C106 - C54884 * C565 + C54750 * C700 +
             C54885 * C1934 - C55319 * C1724 - C54885 * C2330 +
             C54751 * C2512) *
                C38293 +
            (C72566 + C72567) * C38294) *
               C89093 * C89153 * C812 -
           ((C72568 + C72569) * C38294 + (C72567 + C72566) * C38293) * C89093 *
               C89153 * C813 +
           ((C72569 + C72568) * C38293 +
            (C54884 * C5843 - C55318 * C5727 - C54884 * C6061 + C54750 * C6172 +
             C54885 * C16923 - C55319 * C16683 - C54885 * C17361 +
             C54751 * C17571) *
                C38294) *
               C89093 * C89153 * C814) *
              C815 +
          (((C56307 + C56306) * C38293 + (C56308 + C56309) * C38294) * C89093 *
               C89153 * C813 -
           ((C56306 + C56307) * C38294 + (C55358 + C55357) * C38293) * C89093 *
               C89153 * C812 -
           ((C54885 * C16924 - C55319 * C16684 - C54885 * C17362 +
             C54751 * C17572 + C54884 * C5844 - C55318 * C5726 -
             C54884 * C6062 + C54750 * C6171) *
                C38294 +
            (C56309 + C56308) * C38293) *
               C89093 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eexx[20] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                 C54750 +
             C27042 * C54751) *
                C38293 +
            (C71726 + C71727) * C38294) *
               C89153 * C89335 -
           ((C71728 + C71729) * C38294 + (C71727 + C71726) * C38293) * C89153 *
               C89336 +
           ((C71729 + C71728) * C38293 + (C77469 + C77470) * C38294) * C89153 *
               C6963) *
              C89299 +
          (((C71730 + C71731) * C38293 + (C71732 + C71733) * C38294) * C89153 *
               C89336 -
           ((C71731 + C71730) * C38294 +
            (C27045 * C54751 +
             (C13261 * C114 - C13262 * C107 - C13261 * C115 + C89093 * C125) *
                 C54750) *
                C38293) *
               C89153 * C89335 -
           (((C13261 * C16687 - C13262 * C16684 - C13261 * C16688 +
              C89093 * C16690) *
                 C54751 +
             C13793 * C54750) *
                C38294 +
            (C71733 + C71732) * C38293) *
               C89153 * C6963) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eexy[20] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                 C13261 +
             (C38293 * C187 - C38365 * C113 + C38294 * C931 - C38366 * C830) *
                 C89093) *
                C54750 +
            ((C72766 - C72767 + C72768 - C72769) * C13261 +
             (C72770 - C72771 + C72772 - C72773) * C89093) *
                C54751) *
               C89153 * C89335 +
           (((C38365 * C819 - C38293 * C923 + C38366 * C820 - C38294 * C926) *
                 C13261 +
             (C38365 * C830 - C38293 * C931 + C38366 * C832 - C38294 * C934) *
                 C89093) *
                C54750 +
            ((C75547 - C75548 + C75549 - C75550) * C13261 +
             (C75551 - C75552 + C75553 - C75554) * C89093) *
                C54751) *
               C89153 * C89336 +
           (((C38293 * C926 - C38365 * C820 + C38294 * C5787 - C38366 * C5727) *
                 C13261 +
             (C38293 * C934 - C38365 * C832 + C38294 * C5790 - C38366 * C5733) *
                 C89093) *
                C54750 +
            ((C38293 * C8600 - C38365 * C8516 + C38294 * C16821 -
              C38366 * C16683) *
                 C13261 +
             (C38293 * C8603 - C38365 * C8522 + C38294 * C16823 -
              C38366 * C16686) *
                 C89093) *
                C54751) *
               C89153 * C6963) *
              C89299 +
          ((((C38369 - C38368 + C38371 - C38370) * C13261 +
             (C38373 - C38372 + C38375 - C38374) * C89093) *
                C54750 +
            ((C40163 - C40164 + C40165 - C40166) * C13261 +
             (C40167 - C40168 + C40169 - C40170) * C89093) *
                C54751) *
               C89153 * C89335 +
           (((C39169 - C39168 + C39171 - C39170) * C13261 +
             (C39173 - C39172 + C39175 - C39174) * C89093) *
                C54750 +
            ((C43055 - C43056 + C43057 - C43058) * C13261 +
             (C43059 - C43060 + C43061 - C43062) * C89093) *
                C54751) *
               C89153 * C89336 +
           (((C39177 - C39176 + C39179 - C39178) * C13261 +
             (C39181 - C39180 + C39183 - C39182) * C89093) *
                C54750 +
            ((C38365 * C8515 - C38293 * C8601 + C38366 * C16684 -
              C38294 * C16822) *
                 C13261 +
             (C38365 * C8520 - C38293 * C8604 + C38366 * C16688 -
              C38294 * C16824) *
                 C89093) *
                C54751) *
               C89153 * C6963) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eexz[20] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                 C13261 +
             (C54750 * C270 - C54884 * C113 + C54751 * C1942 - C54885 * C1735) *
                 C89093) *
                C38293 +
            ((C71930 - C71931 + C71932 - C71933) * C13261 +
             (C71934 - C71935 + C71936 - C71937) * C89093) *
                C38294) *
               C89153 * C89335 +
           (((C71931 - C71930 + C71933 - C71932) * C13261 +
             (C71935 - C71934 + C71937 - C71936) * C89093) *
                C38293 +
            ((C71938 - C71939 + C71940 - C71941) * C13261 +
             (C71942 - C71943 + C71944 - C71945) * C89093) *
                C38294) *
               C89153 * C89336 +
           (((C71939 - C71938 + C71941 - C71940) * C13261 +
             (C71943 - C71942 + C71945 - C71944) * C89093) *
                C38293 +
            ((C77603 - C77604 + C77605 - C77606) * C13261 +
             (C77607 - C77608 + C77609 - C77610) * C89093) *
                C38294) *
               C89153 * C6963) *
              C89299 +
          ((((C54888 - C54887 + C54890 - C54889) * C13261 +
             (C54892 - C54891 + C54894 - C54893) * C89093) *
                C38293 +
            ((C55661 - C55662 + C55663 - C55664) * C13261 +
             (C55665 - C55666 + C55667 - C55668) * C89093) *
                C38294) *
               C89153 * C89335 +
           (((C55662 - C55661 + C55664 - C55663) * C13261 +
             (C55666 - C55665 + C55668 - C55667) * C89093) *
                C38293 +
            ((C55669 - C55670 + C55671 - C55672) * C13261 +
             (C55673 - C55674 + C55675 - C55676) * C89093) *
                C38294) *
               C89153 * C89336 +
           (((C55670 - C55669 + C55672 - C55671) * C13261 +
             (C55674 - C55673 + C55676 - C55675) * C89093) *
                C38293 +
            ((C54884 * C5726 - C54750 * C5844 + C54885 * C16684 -
              C54751 * C16924) *
                 C13261 +
             (C54884 * C5731 - C54750 * C5847 + C54885 * C16688 -
              C54751 * C16926) *
                 C89093) *
                C38294) *
               C89153 * C6963) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[20] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C38365 +
             (C89093 * C352 - C13261 * C346) * C38293 +
             (C14060 - C14061) * C38366 + (C14062 - C14063) * C38294) *
                C54750 +
            ((C27308 - C27309) * C38365 + (C27310 - C27311) * C38293 +
             C75823 * C38366 + C75824 * C38294) *
                C54751) *
               C89153 * C89335 +
           (((C14061 - C14060) * C38365 + (C14063 - C14062) * C38293 +
             (C14065 - C14064) * C38366 + (C14067 - C14066) * C38294) *
                C54750 +
            (C75825 * C38365 + C75826 * C38293 + C21373 * C38366 +
             C21374 * C38294) *
                C54751) *
               C89153 * C89336 +
           ((C14084 * C38365 + C14085 * C38293 + (C14069 - C14068) * C38366 +
             (C14071 - C14070) * C38294) *
                C54750 +
            ((C17047 - C17046) * C38365 + (C17049 - C17048) * C38293 +
             (C21375 - C21376) * C38366 + (C21377 - C21378) * C38294) *
                C54751) *
               C89153 * C6963) *
              C89299 +
          ((((C13261 * C107 - C89093 * C114) * C38365 +
             (C13261 * C347 - C89093 * C353) * C38293 +
             (C14072 - C14073) * C38366 + (C14074 - C14075) * C38294) *
                C54750 +
            ((C27320 - C27321) * C38365 + (C27322 - C27323) * C38293 +
             C75827 * C38366 + C75828 * C38294) *
                C54751) *
               C89153 * C89335 +
           (((C14073 - C14072) * C38365 + (C14075 - C14074) * C38293 +
             (C14077 - C14076) * C38366 + (C14079 - C14078) * C38294) *
                C54750 +
            (C75829 * C38365 + C75830 * C38293 + (C17054 - C17055) * C38366 +
             (C17056 - C17057) * C38294) *
                C54751) *
               C89153 * C89336 +
           ((C14086 * C38365 + C14087 * C38293 + (C14081 - C14080) * C38366 +
             (C14083 - C14082) * C38294) *
                C54750 +
            ((C17055 - C17054) * C38365 + (C17057 - C17056) * C38293 +
             (C13261 * C16684 - C89093 * C16687) * C38366 +
             (C13261 * C17038 - C89093 * C17040) * C38294) *
                C54751) *
               C89153 * C6963) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[20] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C38365 * C181 - C38589 * C106 - C38365 * C346 + C38293 * C409 +
             C38366 * C923 - C38590 * C819 - C38366 * C1135 + C38294 * C1227) *
                C89093 * C54750 +
            (C73100 + C73101) * C89093 * C54751) *
               C89153 * C89335 -
           ((C75974 + C75973) * C89093 * C54751 +
            (C38366 * C926 - C38590 * C820 - C38366 * C1138 + C38294 * C1228 +
             C38365 * C923 - C38589 * C819 - C38365 * C1135 + C38293 * C1227) *
                C89093 * C54750) *
               C89153 * C89336 +
           ((C38365 * C926 - C38589 * C820 - C38365 * C1138 + C38293 * C1228 +
             C38366 * C5787 - C38590 * C5727 - C38366 * C5899 +
             C38294 * C5957) *
                C89093 * C54750 +
            (C38365 * C8600 - C38589 * C8516 - C38365 * C8760 + C38293 * C8842 +
             C38366 * C16821 - C38590 * C16683 - C38366 * C17037 +
             C38294 * C17155) *
                C89093 * C54751) *
               C89153 * C6963) *
              C89299 +
          (((C39541 + C39540) * C89093 * C54750 +
            (C43485 + C43486) * C89093 * C54751) *
               C89153 * C89336 -
           ((C40501 + C40502) * C89093 * C54751 +
            (C38629 + C38628) * C89093 * C54750) *
               C89153 * C89335 -
           ((C38366 * C16822 - C38590 * C16684 - C38366 * C17038 +
             C38294 * C17156 + C38365 * C8601 - C38589 * C8515 -
             C38365 * C8761 + C38293 * C8841) *
                C89093 * C54751 +
            (C39543 + C39542) * C89093 * C54750) *
               C89153 * C6963) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[20] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                C38365 +
            (C54750 * C493 - C54884 * C346 + C54751 * C2240 - C54885 * C2040) *
                C38293 +
            (C71930 - C71931 + C71932 - C71933) * C38366 +
            (C72240 - C72241 + C72242 - C72243) * C38294) *
               C89093 * C89153 * C89335 +
           ((C71931 - C71930 + C71933 - C71932) * C38365 +
            (C72241 - C72240 + C72243 - C72242) * C38293 +
            (C71938 - C71939 + C71940 - C71941) * C38366 +
            (C72244 - C72245 + C72246 - C72247) * C38294) *
               C89093 * C89153 * C89336 +
           ((C71939 - C71938 + C71941 - C71940) * C38365 +
            (C72245 - C72244 + C72247 - C72246) * C38293 +
            (C77603 - C77604 + C77605 - C77606) * C38366 +
            (C77809 - C77810 + C77811 - C77812) * C38294) *
               C89093 * C89153 * C6963) *
              C89299 +
          (((C54888 - C54887 + C54890 - C54889) * C38365 +
            (C55110 - C55109 + C55112 - C55111) * C38293 +
            (C55661 - C55662 + C55663 - C55664) * C38366 +
            (C55978 - C55979 + C55980 - C55981) * C38294) *
               C89093 * C89153 * C89335 +
           ((C55662 - C55661 + C55664 - C55663) * C38365 +
            (C55979 - C55978 + C55981 - C55980) * C38293 +
            (C55669 - C55670 + C55671 - C55672) * C38366 +
            (C55982 - C55983 + C55984 - C55985) * C38294) *
               C89093 * C89153 * C89336 +
           ((C55670 - C55669 + C55672 - C55671) * C38365 +
            (C55983 - C55982 + C55985 - C55984) * C38293 +
            (C54884 * C5726 - C54750 * C5844 + C54885 * C16684 -
             C54751 * C16924) *
                C38366 +
            (C54884 * C5900 - C54750 * C6009 + C54885 * C17038 -
             C54751 * C17256) *
                C38294) *
               C89093 * C89153 * C6963) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eezx[20] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C54884 +
             (C89093 * C571 - C13261 * C565) * C54750 +
             (C27308 - C27309) * C54885 + (C27606 - C27607) * C54751) *
                C38293 +
            ((C14060 - C14061) * C54884 + (C14328 - C14329) * C54750 +
             C75823 * C54885 + C76239 * C54751) *
                C38294) *
               C89153 * C89335 +
           (((C14061 - C14060) * C54884 + (C14329 - C14328) * C54750 +
             C75825 * C54885 + C76240 * C54751) *
                C38293 +
            ((C14065 - C14064) * C54884 + (C14332 - C14331) * C54750 +
             C21373 * C54885 + C21609 * C54751) *
                C38294) *
               C89153 * C89336 +
           ((C14084 * C54884 + C14342 * C54750 + (C17047 - C17046) * C54885 +
             (C17369 - C17368) * C54751) *
                C38293 +
            ((C14069 - C14068) * C54884 + (C14334 - C14333) * C54750 +
             (C21375 - C21376) * C54885 + (C21610 - C21611) * C54751) *
                C38294) *
               C89153 * C6963) *
              C89299 +
          ((((C13261 * C107 - C89093 * C114) * C54884 +
             (C13261 * C566 - C89093 * C572) * C54750 +
             (C27320 - C27321) * C54885 + (C27612 - C27613) * C54751) *
                C38293 +
            ((C14072 - C14073) * C54884 + (C14335 - C14336) * C54750 +
             C75827 * C54885 + C76241 * C54751) *
                C38294) *
               C89153 * C89335 +
           (((C14073 - C14072) * C54884 + (C14336 - C14335) * C54750 +
             C75829 * C54885 + C76242 * C54751) *
                C38293 +
            ((C14077 - C14076) * C54884 + (C14339 - C14338) * C54750 +
             (C17054 - C17055) * C54885 + (C17372 - C17373) * C54751) *
                C38294) *
               C89153 * C89336 +
           ((C14086 * C54884 + C14343 * C54750 + (C17055 - C17054) * C54885 +
             (C17373 - C17372) * C54751) *
                C38293 +
            ((C14081 - C14080) * C54884 + (C14341 - C14340) * C54750 +
             (C13261 * C16684 - C89093 * C16687) * C54885 +
             (C13261 * C17362 - C89093 * C17364) * C54751) *
                C38294) *
               C89153 * C6963) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eezy[20] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                C54884 +
            (C38293 * C627 - C38365 * C565 + C38294 * C1515 - C38366 * C1425) *
                C54750 +
            (C72766 - C72767 + C72768 - C72769) * C54885 +
            (C73398 - C73399 + C73400 - C73401) * C54751) *
               C89093 * C89153 * C89335 +
           ((C38365 * C819 - C38293 * C923 + C38366 * C820 - C38294 * C926) *
                C54884 +
            (C38365 * C1425 - C38293 * C1515 + C38366 * C1428 -
             C38294 * C1518) *
                C54750 +
            (C75547 - C75548 + C75549 - C75550) * C54885 +
            (C76373 - C76374 + C76375 - C76376) * C54751) *
               C89093 * C89153 * C89336 +
           ((C38293 * C926 - C38365 * C820 + C38294 * C5787 - C38366 * C5727) *
                C54884 +
            (C38293 * C1518 - C38365 * C1428 + C38294 * C6117 -
             C38366 * C6061) *
                C54750 +
            (C38293 * C8600 - C38365 * C8516 + C38294 * C16821 -
             C38366 * C16683) *
                C54885 +
            (C38293 * C9074 - C38365 * C8994 + C38294 * C17471 -
             C38366 * C17361) *
                C54751) *
               C89093 * C89153 * C6963) *
              C89299 +
          (((C38369 - C38368 + C38371 - C38370) * C54884 +
            (C38833 - C38832 + C38835 - C38834) * C54750 +
            (C40163 - C40164 + C40165 - C40166) * C54885 +
            (C40801 - C40802 + C40803 - C40804) * C54751) *
               C89093 * C89153 * C89335 +
           ((C39169 - C39168 + C39171 - C39170) * C54884 +
            (C39858 - C39857 + C39860 - C39859) * C54750 +
            (C43055 - C43056 + C43057 - C43058) * C54885 +
            (C43887 - C43888 + C43889 - C43890) * C54751) *
               C89093 * C89153 * C89336 +
           ((C39177 - C39176 + C39179 - C39178) * C54884 +
            (C39862 - C39861 + C39864 - C39863) * C54750 +
            (C38365 * C8515 - C38293 * C8601 + C38366 * C16684 -
             C38294 * C16822) *
                C54885 +
            (C38365 * C8995 - C38293 * C9075 + C38366 * C17362 -
             C38294 * C17472) *
                C54751) *
               C89093 * C89153 * C6963) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eezz[20] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C54884 * C264 - C55318 * C106 - C54884 * C565 +
                       C54750 * C700 + C54885 * C1934 - C55319 * C1724 -
                       C54885 * C2330 + C54751 * C2512) *
                          C38293 +
                      (C72566 + C72567) * C38294) *
                         C89093 * C89153 * C89335 -
                     ((C72568 + C72569) * C38294 + (C72567 + C72566) * C38293) *
                         C89093 * C89153 * C89336 +
                     ((C72569 + C72568) * C38293 + (C78023 + C78024) * C38294) *
                         C89093 * C89153 * C6963) *
                        C89299 +
                    (((C56307 + C56306) * C38293 + (C56308 + C56309) * C38294) *
                         C89093 * C89153 * C89336 -
                     ((C56306 + C56307) * C38294 + (C55358 + C55357) * C38293) *
                         C89093 * C89153 * C89335 -
                     ((C54885 * C16924 - C55319 * C16684 - C54885 * C17362 +
                       C54751 * C17572 + C54884 * C5844 - C55318 * C5726 -
                       C54884 * C6062 + C54750 * C6171) *
                          C38294 +
                      (C56309 + C56308) * C38293) *
                         C89093 * C89153 * C6963) *
                        C89124)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[21] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                 C54750 +
             C27042 * C54751) *
                C38293 +
            (C71726 + C71727) * C38294) *
               C89308 -
           ((C75413 + C75414) * C38294 +
            (C27043 * C54751 + C27042 * C54750) * C38293) *
               C89217) *
              C89335 +
          (((C75414 + C75413) * C38293 + (C81114 + C81115) * C38294) * C89217 -
           ((C71728 + C71729) * C38294 + (C71727 + C71726) * C38293) * C89308) *
              C89336 +
          (((C71729 + C71728) * C38293 + (C77469 + C77470) * C38294) * C89308 -
           (((C13261 * C18840 - C13262 * C18839 - C13261 * C18841 +
              C89093 * C18842) *
                 C54751 +
             C21134 * C54750) *
                C38294 +
            (C81115 + C81114) * C38293) *
               C89217) *
              C6963) *
         C89118) /
        (p * q * std::sqrt(p + q));
    d2eexy[21] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                 C13261 +
             (C38293 * C187 - C38365 * C113 + C38294 * C931 - C38366 * C830) *
                 C89093) *
                C54750 +
            ((C72766 - C72767 + C72768 - C72769) * C13261 +
             (C72770 - C72771 + C72772 - C72773) * C89093) *
                C54751) *
               C89308 +
           (((C72767 - C72766 + C72769 - C72768) * C13261 +
             (C72771 - C72770 + C72773 - C72772) * C89093) *
                C54750 +
            ((C72774 - C72775 + C72776 - C72777) * C13261 +
             (C72778 - C72779 + C72780 - C72781) * C89093) *
                C54751) *
               C89217) *
              C89335 +
          ((((C38365 * C819 - C38293 * C923 + C38366 * C820 - C38294 * C926) *
                 C13261 +
             (C38365 * C830 - C38293 * C931 + C38366 * C832 - C38294 * C934) *
                 C89093) *
                C54750 +
            ((C75547 - C75548 + C75549 - C75550) * C13261 +
             (C75551 - C75552 + C75553 - C75554) * C89093) *
                C54751) *
               C89308 +
           (((C75548 - C75547 + C75550 - C75549) * C13261 +
             (C75552 - C75551 + C75554 - C75553) * C89093) *
                C54750 +
            ((C78223 - C78224 + C78225 - C78226) * C13261 +
             (C78227 - C78228 + C78229 - C78230) * C89093) *
                C54751) *
               C89217) *
              C89336 +
          ((((C38293 * C926 - C38365 * C820 + C38294 * C5787 - C38366 * C5727) *
                 C13261 +
             (C38293 * C934 - C38365 * C832 + C38294 * C5790 - C38366 * C5733) *
                 C89093) *
                C54750 +
            ((C81214 - C81215 + C81216 - C81217) * C13261 +
             (C81218 - C81219 + C81220 - C81221) * C89093) *
                C54751) *
               C89308 +
           (((C81215 - C81214 + C81217 - C81216) * C13261 +
             (C81219 - C81218 + C81221 - C81220) * C89093) *
                C54750 +
            ((C38365 * C14601 - C38293 * C14683 + C38366 * C18839 -
              C38294 * C18933) *
                 C13261 +
             (C38365 * C14604 - C38293 * C14685 + C38366 * C18841 -
              C38294 * C18934) *
                 C89093) *
                C54751) *
               C89217) *
              C6963) *
         C89118) /
        (p * q * std::sqrt(p + q));
    d2eexz[21] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                 C13261 +
             (C54750 * C270 - C54884 * C113 + C54751 * C1942 - C54885 * C1735) *
                 C89093) *
                C38293 +
            ((C71930 - C71931 + C71932 - C71933) * C13261 +
             (C71934 - C71935 + C71936 - C71937) * C89093) *
                C38294) *
               C89308 +
           (((C54884 * C1724 - C54750 * C1934 + C54885 * C1725 -
              C54751 * C1937) *
                 C13261 +
             (C54884 * C1735 - C54750 * C1942 + C54885 * C1737 -
              C54751 * C1945) *
                 C89093) *
                C38293 +
            ((C75685 - C75686 + C75687 - C75688) * C13261 +
             (C75689 - C75690 + C75691 - C75692) * C89093) *
                C38294) *
               C89217) *
              C89335 +
          ((((C71931 - C71930 + C71933 - C71932) * C13261 +
             (C71935 - C71934 + C71937 - C71936) * C89093) *
                C38293 +
            ((C71938 - C71939 + C71940 - C71941) * C13261 +
             (C71942 - C71943 + C71944 - C71945) * C89093) *
                C38294) *
               C89308 +
           (((C75686 - C75685 + C75688 - C75687) * C13261 +
             (C75690 - C75689 + C75692 - C75691) * C89093) *
                C38293 +
            ((C81320 - C81321 + C81322 - C81323) * C13261 +
             (C81324 - C81325 + C81326 - C81327) * C89093) *
                C38294) *
               C89217) *
              C89336 +
          ((((C71939 - C71938 + C71941 - C71940) * C13261 +
             (C71943 - C71942 + C71945 - C71944) * C89093) *
                C38293 +
            ((C77603 - C77604 + C77605 - C77606) * C13261 +
             (C77607 - C77608 + C77609 - C77610) * C89093) *
                C38294) *
               C89308 +
           (((C81321 - C81320 + C81323 - C81322) * C13261 +
             (C81325 - C81324 + C81327 - C81326) * C89093) *
                C38293 +
            ((C54884 * C16683 - C54750 * C16923 + C54885 * C18839 -
              C54751 * C19009) *
                 C13261 +
             (C54884 * C16686 - C54750 * C16925 + C54885 * C18841 -
              C54751 * C19010) *
                 C89093) *
                C38294) *
               C89217) *
              C6963) *
         C89118) /
        (p * q * std::sqrt(p + q));
    d2eeyx[21] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C38365 +
             (C89093 * C352 - C13261 * C346) * C38293 +
             (C14060 - C14061) * C38366 + (C14062 - C14063) * C38294) *
                C54750 +
            ((C27308 - C27309) * C38365 + (C27310 - C27311) * C38293 +
             C75823 * C38366 + C75824 * C38294) *
                C54751) *
               C89308 +
           (((C27309 - C27308) * C38365 + (C27311 - C27310) * C38293 +
             C75825 * C38366 + C75826 * C38294) *
                C54750 +
            ((C27313 - C27312) * C38365 + (C27315 - C27314) * C38293 +
             C31534 * C38366 + C31535 * C38294) *
                C54751) *
               C89217) *
              C89335 +
          ((((C14061 - C14060) * C38365 + (C14063 - C14062) * C38293 +
             (C14065 - C14064) * C38366 + (C14067 - C14066) * C38294) *
                C54750 +
            (C75825 * C38365 + C75826 * C38293 + C21373 * C38366 +
             C21374 * C38294) *
                C54751) *
               C89308 +
           ((C75823 * C38365 + C75824 * C38293 + C81426 * C38366 +
             C81427 * C38294) *
                C54750 +
            (C78435 * C38365 + C78436 * C38293 + (C19100 - C19101) * C38366 +
             (C19102 - C19103) * C38294) *
                C54751) *
               C89217) *
              C89336 +
          (((C14084 * C38365 + C14085 * C38293 + (C14069 - C14068) * C38366 +
             (C14071 - C14070) * C38294) *
                C54750 +
            (C81426 * C38365 + C81427 * C38293 + (C21375 - C21376) * C38366 +
             (C21377 - C21378) * C38294) *
                C54751) *
               C89308 +
           ((C21373 * C38365 + C21374 * C38293 + (C21376 - C21375) * C38366 +
             (C21378 - C21377) * C38294) *
                C54750 +
            ((C19101 - C19100) * C38365 + (C19103 - C19102) * C38293 +
             (C13261 * C18839 - C89093 * C18840) * C38366 +
             (C13261 * C19093 - C89093 * C19094) * C38294) *
                C54751) *
               C89217) *
              C6963) *
         C89118) /
        (p * q * std::sqrt(p + q));
    d2eeyy[21] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C38365 * C181 - C38589 * C106 - C38365 * C346 + C38293 * C409 +
             C38366 * C923 - C38590 * C819 - C38366 * C1135 + C38294 * C1227) *
                C89093 * C54750 +
            (C73100 + C73101) * C89093 * C54751) *
               C89308 -
           ((C73102 + C73103) * C89093 * C54751 +
            (C73101 + C73100) * C89093 * C54750) *
               C89217) *
              C89335 +
          (((C75973 + C75974) * C89093 * C54750 +
            (C78547 + C78548) * C89093 * C54751) *
               C89217 -
           ((C75974 + C75973) * C89093 * C54751 +
            (C38366 * C926 - C38590 * C820 - C38366 * C1138 + C38294 * C1228 +
             C38365 * C923 - C38589 * C819 - C38365 * C1135 + C38293 * C1227) *
                C89093 * C54750) *
               C89308) *
              C89336 +
          (((C38365 * C926 - C38589 * C820 - C38365 * C1138 + C38293 * C1228 +
             C38366 * C5787 - C38590 * C5727 - C38366 * C5899 +
             C38294 * C5957) *
                C89093 * C54750 +
            (C81538 + C81539) * C89093 * C54751) *
               C89308 -
           ((C38366 * C18933 - C38590 * C18839 - C38366 * C19093 +
             C38294 * C19177 + C38365 * C14683 - C38589 * C14601 -
             C38365 * C14839 + C38293 * C14917) *
                C89093 * C54751 +
            (C81539 + C81538) * C89093 * C54750) *
               C89217) *
              C6963) *
         C89118) /
        (p * q * std::sqrt(p + q));
    d2eeyz[21] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                C38365 +
            (C54750 * C493 - C54884 * C346 + C54751 * C2240 - C54885 * C2040) *
                C38293 +
            (C71930 - C71931 + C71932 - C71933) * C38366 +
            (C72240 - C72241 + C72242 - C72243) * C38294) *
               C89093 * C89308 +
           ((C54884 * C1724 - C54750 * C1934 + C54885 * C1725 -
             C54751 * C1937) *
                C38365 +
            (C54884 * C2040 - C54750 * C2240 + C54885 * C2043 -
             C54751 * C2243) *
                C38293 +
            (C75685 - C75686 + C75687 - C75688) * C38366 +
            (C76105 - C76106 + C76107 - C76108) * C38294) *
               C89093 * C89217) *
              C89335 +
          (((C71931 - C71930 + C71933 - C71932) * C38365 +
            (C72241 - C72240 + C72243 - C72242) * C38293 +
            (C71938 - C71939 + C71940 - C71941) * C38366 +
            (C72244 - C72245 + C72246 - C72247) * C38294) *
               C89093 * C89308 +
           ((C75686 - C75685 + C75688 - C75687) * C38365 +
            (C76106 - C76105 + C76108 - C76107) * C38293 +
            (C81320 - C81321 + C81322 - C81323) * C38366 +
            (C81638 - C81639 + C81640 - C81641) * C38294) *
               C89093 * C89217) *
              C89336 +
          (((C71939 - C71938 + C71941 - C71940) * C38365 +
            (C72245 - C72244 + C72247 - C72246) * C38293 +
            (C77603 - C77604 + C77605 - C77606) * C38366 +
            (C77809 - C77810 + C77811 - C77812) * C38294) *
               C89093 * C89308 +
           ((C81321 - C81320 + C81323 - C81322) * C38365 +
            (C81639 - C81638 + C81641 - C81640) * C38293 +
            (C54884 * C16683 - C54750 * C16923 + C54885 * C18839 -
             C54751 * C19009) *
                C38366 +
            (C54884 * C17037 - C54750 * C17255 + C54885 * C19093 -
             C54751 * C19252) *
                C38294) *
               C89093 * C89217) *
              C6963) *
         C89118) /
        (p * q * std::sqrt(p + q));
    d2eezx[21] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C54884 +
             (C89093 * C571 - C13261 * C565) * C54750 +
             (C27308 - C27309) * C54885 + (C27606 - C27607) * C54751) *
                C38293 +
            ((C14060 - C14061) * C54884 + (C14328 - C14329) * C54750 +
             C75823 * C54885 + C76239 * C54751) *
                C38294) *
               C89308 +
           (((C27309 - C27308) * C54884 + (C27607 - C27606) * C54750 +
             (C27313 - C27312) * C54885 + (C27609 - C27608) * C54751) *
                C38293 +
            (C75825 * C54884 + C76240 * C54750 + C31534 * C54885 +
             C31777 * C54751) *
                C38294) *
               C89217) *
              C89335 +
          ((((C14061 - C14060) * C54884 + (C14329 - C14328) * C54750 +
             C75825 * C54885 + C76240 * C54751) *
                C38293 +
            ((C14065 - C14064) * C54884 + (C14332 - C14331) * C54750 +
             C21373 * C54885 + C21609 * C54751) *
                C38294) *
               C89308 +
           ((C75823 * C54884 + C76239 * C54750 + C78435 * C54885 +
             C78749 * C54751) *
                C38293 +
            (C81426 * C54884 + C81740 * C54750 + (C19100 - C19101) * C54885 +
             (C19336 - C19337) * C54751) *
                C38294) *
               C89217) *
              C89336 +
          (((C14084 * C54884 + C14342 * C54750 + C81426 * C54885 +
             C81740 * C54751) *
                C38293 +
            ((C14069 - C14068) * C54884 + (C14334 - C14333) * C54750 +
             (C21375 - C21376) * C54885 + (C21610 - C21611) * C54751) *
                C38294) *
               C89308 +
           ((C21373 * C54884 + C21609 * C54750 + (C19101 - C19100) * C54885 +
             (C19337 - C19336) * C54751) *
                C38293 +
            ((C21376 - C21375) * C54884 + (C21611 - C21610) * C54750 +
             (C13261 * C18839 - C89093 * C18840) * C54885 +
             (C13261 * C19331 - C89093 * C19332) * C54751) *
                C38294) *
               C89217) *
              C6963) *
         C89118) /
        (p * q * std::sqrt(p + q));
    d2eezy[21] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                C54884 +
            (C38293 * C627 - C38365 * C565 + C38294 * C1515 - C38366 * C1425) *
                C54750 +
            (C72766 - C72767 + C72768 - C72769) * C54885 +
            (C73398 - C73399 + C73400 - C73401) * C54751) *
               C89093 * C89308 +
           ((C72767 - C72766 + C72769 - C72768) * C54884 +
            (C73399 - C73398 + C73401 - C73400) * C54750 +
            (C72774 - C72775 + C72776 - C72777) * C54885 +
            (C73402 - C73403 + C73404 - C73405) * C54751) *
               C89093 * C89217) *
              C89335 +
          (((C38365 * C819 - C38293 * C923 + C38366 * C820 - C38294 * C926) *
                C54884 +
            (C38365 * C1425 - C38293 * C1515 + C38366 * C1428 -
             C38294 * C1518) *
                C54750 +
            (C75547 - C75548 + C75549 - C75550) * C54885 +
            (C76373 - C76374 + C76375 - C76376) * C54751) *
               C89093 * C89308 +
           ((C75548 - C75547 + C75550 - C75549) * C54884 +
            (C76374 - C76373 + C76376 - C76375) * C54750 +
            (C78223 - C78224 + C78225 - C78226) * C54885 +
            (C78848 - C78849 + C78850 - C78851) * C54751) *
               C89093 * C89217) *
              C89336 +
          (((C38293 * C926 - C38365 * C820 + C38294 * C5787 - C38366 * C5727) *
                C54884 +
            (C38293 * C1518 - C38365 * C1428 + C38294 * C6117 -
             C38366 * C6061) *
                C54750 +
            (C81214 - C81215 + C81216 - C81217) * C54885 +
            (C81839 - C81840 + C81841 - C81842) * C54751) *
               C89093 * C89308 +
           ((C81215 - C81214 + C81217 - C81216) * C54884 +
            (C81840 - C81839 + C81842 - C81841) * C54750 +
            (C38365 * C14601 - C38293 * C14683 + C38366 * C18839 -
             C38294 * C18933) *
                C54885 +
            (C38365 * C15069 - C38293 * C15147 + C38366 * C19331 -
             C38294 * C19411) *
                C54751) *
               C89093 * C89217) *
              C6963) *
         C89118) /
        (p * q * std::sqrt(p + q));
    d2eezz[21] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C54884 * C264 - C55318 * C106 - C54884 * C565 +
                       C54750 * C700 + C54885 * C1934 - C55319 * C1724 -
                       C54885 * C2330 + C54751 * C2512) *
                          C38293 +
                      (C72566 + C72567) * C38294) *
                         C89093 * C89308 -
                     ((C76519 + C76520) * C38294 +
                      (C54885 * C1937 - C55319 * C1725 - C54885 * C2333 +
                       C54751 * C2513 + C54884 * C1934 - C55318 * C1724 -
                       C54884 * C2330 + C54750 * C2512) *
                          C38293) *
                         C89093 * C89217) *
                        C89335 +
                    (((C76520 + C76519) * C38293 + (C81953 + C81954) * C38294) *
                         C89093 * C89217 -
                     ((C72568 + C72569) * C38294 + (C72567 + C72566) * C38293) *
                         C89093 * C89308) *
                        C89336 +
                    (((C72569 + C72568) * C38293 + (C78023 + C78024) * C38294) *
                         C89093 * C89308 -
                     ((C54885 * C19009 - C55319 * C18839 - C54885 * C19331 +
                       C54751 * C19486 + C54884 * C16923 - C55318 * C16683 -
                       C54884 * C17361 + C54750 * C17571) *
                          C38294 +
                      (C81954 + C81953) * C38293) *
                         C89093 * C89217) *
                        C6963) *
                   C89118) /
                  (p * q * std::sqrt(p + q));
    d2eexx[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                C54750 +
            C27042 * C54751) *
               C38293 +
           (C71726 + C71727) * C38294) *
              C89153 * C5720 -
          ((C71728 + C71729) * C38294 + (C71727 + C71726) * C38293) * C89153 *
              C5721 +
          ((C71729 + C71728) * C38293 + (C77469 + C77470) * C38294) * C89153 *
              C5722 -
          (((C13261 * C21124 - C13262 * C21123 - C13261 * C21125 +
             C89093 * C21126) *
                C54751 +
            C18321 * C54750) *
               C38294 +
           (C77470 + C77469) * C38293) *
              C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                 C54750 +
             C27042 * C54751) *
                C38293 +
            (C71726 + C71727) * C38294) *
               C89153 * C5073 -
           ((C71728 + C71729) * C38294 + (C71727 + C71726) * C38293) * C89153 *
               C89189) *
              C5075 +
          (((C71730 + C71731) * C38293 + (C71732 + C71733) * C38294) * C89153 *
               C89189 -
           ((C71731 + C71730) * C38294 +
            (C27045 * C54751 +
             (C13261 * C114 - C13262 * C107 - C13261 * C115 + C89093 * C125) *
                 C54750) *
                C38293) *
               C89153 * C5073) *
              C5076 +
          ((((C13261 * C116 - C13262 * C108 - C13261 * C117 + C89093 * C126) *
                 C54750 +
             C28534 * C54751) *
                C38293 +
            (C73602 + C73610) * C38294) *
               C89153 * C5073 -
           (((C13261 * C8517 - C13262 * C8514 - C13261 * C8518 +
              C89093 * C8523) *
                 C54751 +
             C15313 * C54750) *
                C38294 +
            (C73610 + C73602) * C38293) *
               C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                 C54750 +
             C27042 * C54751) *
                C38293 +
            (C71726 + C71727) * C38294) *
               C1719 -
           ((C75413 + C75414) * C38294 +
            (C27043 * C54751 + C27042 * C54750) * C38293) *
               C1720 +
           ((C27043 * C54750 + C27044 * C54751) * C38293 +
            (C78123 + C78124) * C38294) *
               C1721) *
              C5073 +
          (((C75414 + C75413) * C38293 +
            (C16716 * C54750 + C18857 * C54751) * C38294) *
               C1720 -
           ((C71728 + C71729) * C38294 + (C71727 + C71726) * C38293) * C1719 -
           (((C13261 * C23154 - C13262 * C23152 - C13261 * C23155 +
              C89093 * C23158) *
                 C54751 +
             C18857 * C54750) *
                C38294 +
            (C78124 + C78123) * C38293) *
               C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eexy[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                C13261 +
            (C38293 * C187 - C38365 * C113 + C38294 * C931 - C38366 * C830) *
                C89093) *
               C54750 +
           ((C72766 - C72767 + C72768 - C72769) * C13261 +
            (C72770 - C72771 + C72772 - C72773) * C89093) *
               C54751) *
              C89153 * C5720 +
          (((C38365 * C819 - C38293 * C923 + C38366 * C820 - C38294 * C926) *
                C13261 +
            (C38365 * C830 - C38293 * C931 + C38366 * C832 - C38294 * C934) *
                C89093) *
               C54750 +
           ((C75547 - C75548 + C75549 - C75550) * C13261 +
            (C75551 - C75552 + C75553 - C75554) * C89093) *
               C54751) *
              C89153 * C5721 +
          (((C38293 * C926 - C38365 * C820 + C38294 * C5787 - C38366 * C5727) *
                C13261 +
            (C38293 * C934 - C38365 * C832 + C38294 * C5790 - C38366 * C5733) *
                C89093) *
               C54750 +
           ((C38293 * C8600 - C38365 * C8516 + C38294 * C16821 -
             C38366 * C16683) *
                C13261 +
            (C38293 * C8603 - C38365 * C8522 + C38294 * C16823 -
             C38366 * C16686) *
                C89093) *
               C54751) *
              C89153 * C5722 +
          (((C38365 * C5727 - C38293 * C5787 + C38366 * C13743 -
             C38294 * C13873) *
                C13261 +
            (C38365 * C5733 - C38293 * C5790 + C38366 * C13746 -
             C38294 * C13875) *
                C89093) *
               C54750 +
           ((C38365 * C16683 - C38293 * C16821 + C38366 * C21123 -
             C38294 * C21209) *
                C13261 +
            (C38365 * C16686 - C38293 * C16823 + C38366 * C21125 -
             C38294 * C21210) *
                C89093) *
               C54751) *
              C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                 C13261 +
             (C38293 * C187 - C38365 * C113 + C38294 * C931 - C38366 * C830) *
                 C89093) *
                C54750 +
            ((C72766 - C72767 + C72768 - C72769) * C13261 +
             (C72770 - C72771 + C72772 - C72773) * C89093) *
                C54751) *
               C89153 * C5073 +
           (((C38365 * C819 - C38293 * C923 + C38366 * C820 - C38294 * C926) *
                 C13261 +
             (C38365 * C830 - C38293 * C931 + C38366 * C832 - C38294 * C934) *
                 C89093) *
                C54750 +
            ((C75547 - C75548 + C75549 - C75550) * C13261 +
             (C75551 - C75552 + C75553 - C75554) * C89093) *
                C54751) *
               C89153 * C89189) *
              C5075 +
          ((((C38369 - C38368 + C38371 - C38370) * C13261 +
             (C38373 - C38372 + C38375 - C38374) * C89093) *
                C54750 +
            ((C40163 - C40164 + C40165 - C40166) * C13261 +
             (C40167 - C40168 + C40169 - C40170) * C89093) *
                C54751) *
               C89153 * C5073 +
           (((C39169 - C39168 + C39171 - C39170) * C13261 +
             (C39173 - C39172 + C39175 - C39174) * C89093) *
                C54750 +
            ((C43055 - C43056 + C43057 - C43058) * C13261 +
             (C43059 - C43060 + C43061 - C43062) * C89093) *
                C54751) *
               C89153 * C89189) *
              C5076 +
          ((((C38377 - C38376 + C38379 - C38378) * C13261 +
             (C38381 - C38380 + C38383 - C38382) * C89093) *
                C54750 +
            ((C42053 - C42054 + C42055 - C42056) * C13261 +
             (C42057 - C42058 + C42059 - C42060) * C89093) *
                C54751) *
               C89153 * C5073 +
           (((C41129 - C41128 + C41131 - C41130) * C13261 +
             (C41133 - C41132 + C41135 - C41134) * C89093) *
                C54750 +
            ((C38365 * C4099 - C38293 * C4213 + C38366 * C8514 -
              C38294 * C8602) *
                 C13261 +
             (C38365 * C4106 - C38293 * C4217 + C38366 * C8518 -
              C38294 * C8605) *
                 C89093) *
                C54751) *
               C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                 C13261 +
             (C38293 * C187 - C38365 * C113 + C38294 * C931 - C38366 * C830) *
                 C89093) *
                C54750 +
            ((C72766 - C72767 + C72768 - C72769) * C13261 +
             (C72770 - C72771 + C72772 - C72773) * C89093) *
                C54751) *
               C1719 +
           (((C72767 - C72766 + C72769 - C72768) * C13261 +
             (C72771 - C72770 + C72773 - C72772) * C89093) *
                C54750 +
            ((C72774 - C72775 + C72776 - C72777) * C13261 +
             (C72778 - C72779 + C72780 - C72781) * C89093) *
                C54751) *
               C1720 +
           (((C72775 - C72774 + C72777 - C72776) * C13261 +
             (C72779 - C72778 + C72781 - C72780) * C89093) *
                C54750 +
            ((C38293 * C10604 - C38365 * C10544 + C38294 * C23210 -
              C38366 * C23153) *
                 C13261 +
             (C38293 * C10607 - C38365 * C10550 + C38294 * C23212 -
              C38366 * C23157) *
                 C89093) *
                C54751) *
               C1721) *
              C5073 +
          ((((C38365 * C819 - C38293 * C923 + C38366 * C820 - C38294 * C926) *
                 C13261 +
             (C38365 * C830 - C38293 * C931 + C38366 * C832 - C38294 * C934) *
                 C89093) *
                C54750 +
            ((C75547 - C75548 + C75549 - C75550) * C13261 +
             (C75551 - C75552 + C75553 - C75554) * C89093) *
                C54751) *
               C1719 +
           (((C75548 - C75547 + C75550 - C75549) * C13261 +
             (C75552 - C75551 + C75554 - C75553) * C89093) *
                C54750 +
            ((C78223 - C78224 + C78225 - C78226) * C13261 +
             (C78227 - C78228 + C78229 - C78230) * C89093) *
                C54751) *
               C1720 +
           (((C78224 - C78223 + C78226 - C78225) * C13261 +
             (C78228 - C78227 + C78230 - C78229) * C89093) *
                C54750 +
            ((C38365 * C23153 - C38293 * C23210 + C38366 * C23152 -
              C38294 * C23211) *
                 C13261 +
             (C38365 * C23157 - C38293 * C23212 + C38366 * C23155 -
              C38294 * C23213) *
                 C89093) *
                C54751) *
               C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eexz[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                C13261 +
            (C54750 * C270 - C54884 * C113 + C54751 * C1942 - C54885 * C1735) *
                C89093) *
               C38293 +
           ((C71930 - C71931 + C71932 - C71933) * C13261 +
            (C71934 - C71935 + C71936 - C71937) * C89093) *
               C38294) *
              C89153 * C5720 +
          (((C71931 - C71930 + C71933 - C71932) * C13261 +
            (C71935 - C71934 + C71937 - C71936) * C89093) *
               C38293 +
           ((C71938 - C71939 + C71940 - C71941) * C13261 +
            (C71942 - C71943 + C71944 - C71945) * C89093) *
               C38294) *
              C89153 * C5721 +
          (((C71939 - C71938 + C71941 - C71940) * C13261 +
            (C71943 - C71942 + C71945 - C71944) * C89093) *
               C38293 +
           ((C77603 - C77604 + C77605 - C77606) * C13261 +
            (C77607 - C77608 + C77609 - C77610) * C89093) *
               C38294) *
              C89153 * C5722 +
          (((C77604 - C77603 + C77606 - C77605) * C13261 +
            (C77608 - C77607 + C77610 - C77609) * C89093) *
               C38293 +
           ((C54884 * C13743 - C54750 * C13951 + C54885 * C21123 -
             C54751 * C21285) *
                C13261 +
            (C54884 * C13746 - C54750 * C13953 + C54885 * C21125 -
             C54751 * C21286) *
                C89093) *
               C38294) *
              C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                 C13261 +
             (C54750 * C270 - C54884 * C113 + C54751 * C1942 - C54885 * C1735) *
                 C89093) *
                C38293 +
            ((C71930 - C71931 + C71932 - C71933) * C13261 +
             (C71934 - C71935 + C71936 - C71937) * C89093) *
                C38294) *
               C89153 * C5073 +
           (((C71931 - C71930 + C71933 - C71932) * C13261 +
             (C71935 - C71934 + C71937 - C71936) * C89093) *
                C38293 +
            ((C71938 - C71939 + C71940 - C71941) * C13261 +
             (C71942 - C71943 + C71944 - C71945) * C89093) *
                C38294) *
               C89153 * C89189) *
              C5075 +
          ((((C54888 - C54887 + C54890 - C54889) * C13261 +
             (C54892 - C54891 + C54894 - C54893) * C89093) *
                C38293 +
            ((C55661 - C55662 + C55663 - C55664) * C13261 +
             (C55665 - C55666 + C55667 - C55668) * C89093) *
                C38294) *
               C89153 * C5073 +
           (((C55662 - C55661 + C55664 - C55663) * C13261 +
             (C55666 - C55665 + C55668 - C55667) * C89093) *
                C38293 +
            ((C55669 - C55670 + C55671 - C55672) * C13261 +
             (C55673 - C55674 + C55675 - C55676) * C89093) *
                C38294) *
               C89153 * C89189) *
              C5076 +
          ((((C54896 - C54895 + C54898 - C54897) * C13261 +
             (C54900 - C54899 + C54902 - C54901) * C89093) *
                C38293 +
            ((C57659 - C57660 + C57661 - C57662) * C13261 +
             (C57663 - C57664 + C57665 - C57666) * C89093) *
                C38294) *
               C89153 * C5073 +
           (((C57660 - C57659 + C57662 - C57661) * C13261 +
             (C57664 - C57663 + C57666 - C57665) * C89093) *
                C38293 +
            ((C54884 * C822 - C54750 * C1034 + C54885 * C8514 -
              C54751 * C8682) *
                 C13261 +
             (C54884 * C836 - C54750 * C1042 + C54885 * C8518 -
              C54751 * C8685) *
                 C89093) *
                C38294) *
               C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                 C13261 +
             (C54750 * C270 - C54884 * C113 + C54751 * C1942 - C54885 * C1735) *
                 C89093) *
                C38293 +
            ((C71930 - C71931 + C71932 - C71933) * C13261 +
             (C71934 - C71935 + C71936 - C71937) * C89093) *
                C38294) *
               C1719 +
           (((C54884 * C1724 - C54750 * C1934 + C54885 * C1725 -
              C54751 * C1937) *
                 C13261 +
             (C54884 * C1735 - C54750 * C1942 + C54885 * C1737 -
              C54751 * C1945) *
                 C89093) *
                C38293 +
            ((C75685 - C75686 + C75687 - C75688) * C13261 +
             (C75689 - C75690 + C75691 - C75692) * C89093) *
                C38294) *
               C1720 +
           (((C54750 * C1937 - C54884 * C1725 + C54751 * C10660 -
              C54885 * C10544) *
                 C13261 +
             (C54750 * C1945 - C54884 * C1737 + C54751 * C10663 -
              C54885 * C10550) *
                 C89093) *
                C38293 +
            ((C78329 - C78330 + C78331 - C78332) * C13261 +
             (C78333 - C78334 + C78335 - C78336) * C89093) *
                C38294) *
               C1721) *
              C5073 +
          ((((C71931 - C71930 + C71933 - C71932) * C13261 +
             (C71935 - C71934 + C71937 - C71936) * C89093) *
                C38293 +
            ((C71938 - C71939 + C71940 - C71941) * C13261 +
             (C71942 - C71943 + C71944 - C71945) * C89093) *
                C38294) *
               C1719 +
           (((C75686 - C75685 + C75688 - C75687) * C13261 +
             (C75690 - C75689 + C75692 - C75691) * C89093) *
                C38293 +
            ((C54750 * C8680 - C54884 * C8516 + C54751 * C14761 -
              C54885 * C14601) *
                 C13261 +
             (C54750 * C8683 - C54884 * C8522 + C54751 * C14763 -
              C54885 * C14604) *
                 C89093) *
                C38294) *
               C1720 +
           (((C78330 - C78329 + C78332 - C78331) * C13261 +
             (C78334 - C78333 + C78336 - C78335) * C89093) *
                C38293 +
            ((C54884 * C14601 - C54750 * C14761 + C54885 * C23152 -
              C54751 * C23265) *
                 C13261 +
             (C54884 * C14604 - C54750 * C14763 + C54885 * C23155 -
              C54751 * C23267) *
                 C89093) *
                C38294) *
               C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eeyx[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89093 * C112 - C13261 * C106) * C38365 +
            (C89093 * C352 - C13261 * C346) * C38293 +
            (C14060 - C14061) * C38366 + (C14062 - C14063) * C38294) *
               C54750 +
           ((C27308 - C27309) * C38365 + (C27310 - C27311) * C38293 +
            C75823 * C38366 + C75824 * C38294) *
               C54751) *
              C89153 * C5720 +
          (((C14061 - C14060) * C38365 + (C14063 - C14062) * C38293 +
            (C14065 - C14064) * C38366 + (C14067 - C14066) * C38294) *
               C54750 +
           (C75825 * C38365 + C75826 * C38293 + C21373 * C38366 +
            C21374 * C38294) *
               C54751) *
              C89153 * C5721 +
          ((C14084 * C38365 + C14085 * C38293 + (C14069 - C14068) * C38366 +
            (C14071 - C14070) * C38294) *
               C54750 +
           ((C17047 - C17046) * C38365 + (C17049 - C17048) * C38293 +
            (C21375 - C21376) * C38366 + (C21377 - C21378) * C38294) *
               C54751) *
              C89153 * C5722 +
          ((C18488 * C38365 + C18489 * C38293 + (C18491 - C18490) * C38366 +
            (C18493 - C18492) * C38294) *
               C54750 +
           ((C21376 - C21375) * C38365 + (C21378 - C21377) * C38293 +
            (C13261 * C21123 - C89093 * C21124) * C38366 +
            (C13261 * C21370 - C89093 * C21371) * C38294) *
               C54751) *
              C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C38365 +
             (C89093 * C352 - C13261 * C346) * C38293 +
             (C14060 - C14061) * C38366 + (C14062 - C14063) * C38294) *
                C54750 +
            ((C27308 - C27309) * C38365 + (C27310 - C27311) * C38293 +
             C75823 * C38366 + C75824 * C38294) *
                C54751) *
               C89153 * C5073 +
           (((C14061 - C14060) * C38365 + (C14063 - C14062) * C38293 +
             (C14065 - C14064) * C38366 + (C14067 - C14066) * C38294) *
                C54750 +
            (C75825 * C38365 + C75826 * C38293 + C21373 * C38366 +
             C21374 * C38294) *
                C54751) *
               C89153 * C89189) *
              C5075 +
          ((((C13261 * C107 - C89093 * C114) * C38365 +
             (C13261 * C347 - C89093 * C353) * C38293 +
             (C14072 - C14073) * C38366 + (C14074 - C14075) * C38294) *
                C54750 +
            ((C27320 - C27321) * C38365 + (C27322 - C27323) * C38293 +
             C75827 * C38366 + C75828 * C38294) *
                C54751) *
               C89153 * C5073 +
           (((C14073 - C14072) * C38365 + (C14075 - C14074) * C38293 +
             (C14077 - C14076) * C38366 + (C14079 - C14078) * C38294) *
                C54750 +
            (C75829 * C38365 + C75830 * C38293 + (C17054 - C17055) * C38366 +
             (C17056 - C17057) * C38294) *
                C54751) *
               C89153 * C89189) *
              C5076 +
          ((((C89093 * C116 - C13261 * C108) * C38365 +
             (C89093 * C354 - C13261 * C348) * C38293 +
             (C15538 - C15539) * C38366 + (C15540 - C15541) * C38294) *
                C54750 +
            ((C28758 - C28759) * C38365 + (C28760 - C28761) * C38293 +
             (C73905 - C73906) * C38366 + (C73907 - C73908) * C38294) *
                C54751) *
               C89153 * C5073 +
           (((C15539 - C15538) * C38365 + (C15541 - C15540) * C38293 +
             (C15543 - C15542) * C38366 + (C15545 - C15544) * C38294) *
                C54750 +
            ((C73906 - C73905) * C38365 + (C73908 - C73907) * C38293 +
             (C13261 * C8514 - C89093 * C8517) * C38366 +
             (C13261 * C8762 - C89093 * C8765) * C38294) *
                C54751) *
               C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C38365 +
             (C89093 * C352 - C13261 * C346) * C38293 +
             (C14060 - C14061) * C38366 + (C14062 - C14063) * C38294) *
                C54750 +
            ((C27308 - C27309) * C38365 + (C27310 - C27311) * C38293 +
             C75823 * C38366 + C75824 * C38294) *
                C54751) *
               C1719 +
           (((C27309 - C27308) * C38365 + (C27311 - C27310) * C38293 +
             C75825 * C38366 + C75826 * C38294) *
                C54750 +
            ((C27313 - C27312) * C38365 + (C27315 - C27314) * C38293 +
             C31534 * C38366 + C31535 * C38294) *
                C54751) *
               C1720 +
           ((C27332 * C38365 + C27333 * C38293 + C78435 * C38366 +
             C78436 * C38294) *
                C54750 +
            ((C27317 - C27316) * C38365 + (C27319 - C27318) * C38293 +
             (C31536 - C31537) * C38366 + (C31538 - C31539) * C38294) *
                C54751) *
               C1721) *
              C5073 +
          ((((C14061 - C14060) * C38365 + (C14063 - C14062) * C38293 +
             (C14065 - C14064) * C38366 + (C14067 - C14066) * C38294) *
                C54750 +
            (C75825 * C38365 + C75826 * C38293 + C21373 * C38366 +
             C21374 * C38294) *
                C54751) *
               C1719 +
           ((C75823 * C38365 + C75824 * C38293 + (C17047 - C17046) * C38366 +
             (C17049 - C17048) * C38294) *
                C54750 +
            (C78435 * C38365 + C78436 * C38293 + (C19100 - C19101) * C38366 +
             (C19102 - C19103) * C38294) *
                C54751) *
               C1720 +
           ((C31534 * C38365 + C31535 * C38293 + (C19101 - C19100) * C38366 +
             (C19103 - C19102) * C38294) *
                C54750 +
            ((C31537 - C31536) * C38365 + (C31539 - C31538) * C38293 +
             (C13261 * C23152 - C89093 * C23154) * C38366 +
             (C13261 * C23319 - C89093 * C23321) * C38294) *
                C54751) *
               C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eeyy[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C38365 * C181 - C38589 * C106 - C38365 * C346 + C38293 * C409 +
            C38366 * C923 - C38590 * C819 - C38366 * C1135 + C38294 * C1227) *
               C89093 * C54750 +
           (C73100 + C73101) * C89093 * C54751) *
              C89153 * C5720 -
          ((C75974 + C75973) * C89093 * C54751 +
           (C38366 * C926 - C38590 * C820 - C38366 * C1138 + C38294 * C1228 +
            C38365 * C923 - C38589 * C819 - C38365 * C1135 + C38293 * C1227) *
               C89093 * C54750) *
              C89153 * C5721 +
          ((C38365 * C926 - C38589 * C820 - C38365 * C1138 + C38293 * C1228 +
            C38366 * C5787 - C38590 * C5727 - C38366 * C5899 + C38294 * C5957) *
               C89093 * C54750 +
           (C38365 * C8600 - C38589 * C8516 - C38365 * C8760 + C38293 * C8842 +
            C38366 * C16821 - C38590 * C16683 - C38366 * C17037 +
            C38294 * C17155) *
               C89093 * C54751) *
              C89153 * C5722 -
          ((C38366 * C21209 - C38590 * C21123 - C38366 * C21370 +
            C38294 * C21452 + C38365 * C16821 - C38589 * C16683 -
            C38365 * C17037 + C38293 * C17155) *
               C89093 * C54751 +
           (C38366 * C13873 - C38590 * C13743 - C38366 * C14055 +
            C38294 * C14161 + C38365 * C5787 - C38589 * C5727 - C38365 * C5899 +
            C38293 * C5957) *
               C89093 * C54750) *
              C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C38365 * C181 - C38589 * C106 - C38365 * C346 + C38293 * C409 +
             C38366 * C923 - C38590 * C819 - C38366 * C1135 + C38294 * C1227) *
                C89093 * C54750 +
            (C73100 + C73101) * C89093 * C54751) *
               C89153 * C5073 -
           ((C75974 + C75973) * C89093 * C54751 +
            (C38366 * C926 - C38590 * C820 - C38366 * C1138 + C38294 * C1228 +
             C38365 * C923 - C38589 * C819 - C38365 * C1135 + C38293 * C1227) *
                C89093 * C54750) *
               C89153 * C89189) *
              C5075 +
          (((C39541 + C39540) * C89093 * C54750 +
            (C43485 + C43486) * C89093 * C54751) *
               C89153 * C89189 -
           ((C40501 + C40502) * C89093 * C54751 +
            (C38629 + C38628) * C89093 * C54750) *
               C89153 * C5073) *
              C5076 +
          (((C38631 + C38630) * C89093 * C54750 +
            (C42367 + C42368) * C89093 * C54751) *
               C89153 * C5073 -
           ((C38366 * C8602 - C38590 * C8514 - C38366 * C8762 + C38294 * C8840 +
             C38365 * C4213 - C38589 * C4099 - C38365 * C4441 +
             C38293 * C4547) *
                C89093 * C54751 +
            (C41453 + C41452) * C89093 * C54750) *
               C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C38365 * C181 - C38589 * C106 - C38365 * C346 + C38293 * C409 +
             C38366 * C923 - C38590 * C819 - C38366 * C1135 + C38294 * C1227) *
                C89093 * C54750 +
            (C73100 + C73101) * C89093 * C54751) *
               C1719 -
           ((C73102 + C73103) * C89093 * C54751 +
            (C73101 + C73100) * C89093 * C54750) *
               C1720 +
           ((C73103 + C73102) * C89093 * C54750 +
            (C38365 * C10604 - C38589 * C10544 - C38365 * C10716 +
             C38293 * C10774 + C38366 * C23210 - C38590 * C23153 -
             C38366 * C23318 + C38294 * C23373) *
                C89093 * C54751) *
               C1721) *
              C5073 +
          (((C75973 + C75974) * C89093 * C54750 +
            (C78547 + C78548) * C89093 * C54751) *
               C1720 -
           ((C75974 + C75973) * C89093 * C54751 +
            (C38366 * C926 - C38590 * C820 - C38366 * C1138 + C38294 * C1228 +
             C38365 * C923 - C38589 * C819 - C38365 * C1135 + C38293 * C1227) *
                C89093 * C54750) *
               C1719 -
           ((C38366 * C23211 - C38590 * C23152 - C38366 * C23319 +
             C38294 * C23372 + C38365 * C23210 - C38589 * C23153 -
             C38365 * C23318 + C38293 * C23373) *
                C89093 * C54751 +
            (C78548 + C78547) * C89093 * C54750) *
               C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eeyz[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
               C38365 +
           (C54750 * C493 - C54884 * C346 + C54751 * C2240 - C54885 * C2040) *
               C38293 +
           (C71930 - C71931 + C71932 - C71933) * C38366 +
           (C72240 - C72241 + C72242 - C72243) * C38294) *
              C89093 * C89153 * C5720 +
          ((C71931 - C71930 + C71933 - C71932) * C38365 +
           (C72241 - C72240 + C72243 - C72242) * C38293 +
           (C71938 - C71939 + C71940 - C71941) * C38366 +
           (C72244 - C72245 + C72246 - C72247) * C38294) *
              C89093 * C89153 * C5721 +
          ((C71939 - C71938 + C71941 - C71940) * C38365 +
           (C72245 - C72244 + C72247 - C72246) * C38293 +
           (C77603 - C77604 + C77605 - C77606) * C38366 +
           (C77809 - C77810 + C77811 - C77812) * C38294) *
              C89093 * C89153 * C5722 +
          ((C77604 - C77603 + C77606 - C77605) * C38365 +
           (C77810 - C77809 + C77812 - C77811) * C38293 +
           (C54884 * C13743 - C54750 * C13951 + C54885 * C21123 -
            C54751 * C21285) *
               C38366 +
           (C54884 * C14055 - C54750 * C14237 + C54885 * C21370 -
            C54751 * C21527) *
               C38294) *
              C89093 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                C38365 +
            (C54750 * C493 - C54884 * C346 + C54751 * C2240 - C54885 * C2040) *
                C38293 +
            (C71930 - C71931 + C71932 - C71933) * C38366 +
            (C72240 - C72241 + C72242 - C72243) * C38294) *
               C89093 * C89153 * C5073 +
           ((C71931 - C71930 + C71933 - C71932) * C38365 +
            (C72241 - C72240 + C72243 - C72242) * C38293 +
            (C71938 - C71939 + C71940 - C71941) * C38366 +
            (C72244 - C72245 + C72246 - C72247) * C38294) *
               C89093 * C89153 * C89189) *
              C5075 +
          (((C54888 - C54887 + C54890 - C54889) * C38365 +
            (C55110 - C55109 + C55112 - C55111) * C38293 +
            (C55661 - C55662 + C55663 - C55664) * C38366 +
            (C55978 - C55979 + C55980 - C55981) * C38294) *
               C89093 * C89153 * C5073 +
           ((C55662 - C55661 + C55664 - C55663) * C38365 +
            (C55979 - C55978 + C55981 - C55980) * C38293 +
            (C55669 - C55670 + C55671 - C55672) * C38366 +
            (C55982 - C55983 + C55984 - C55985) * C38294) *
               C89093 * C89153 * C89189) *
              C5076 +
          (((C54896 - C54895 + C54898 - C54897) * C38365 +
            (C55114 - C55113 + C55116 - C55115) * C38293 +
            (C57659 - C57660 + C57661 - C57662) * C38366 +
            (C57961 - C57962 + C57963 - C57964) * C38294) *
               C89093 * C89153 * C5073 +
           ((C57660 - C57659 + C57662 - C57661) * C38365 +
            (C57962 - C57961 + C57964 - C57963) * C38293 +
            (C54884 * C822 - C54750 * C1034 + C54885 * C8514 - C54751 * C8682) *
                C38366 +
            (C54884 * C1140 - C54750 * C1340 + C54885 * C8762 -
             C54751 * C8919) *
                C38294) *
               C89093 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                C38365 +
            (C54750 * C493 - C54884 * C346 + C54751 * C2240 - C54885 * C2040) *
                C38293 +
            (C71930 - C71931 + C71932 - C71933) * C38366 +
            (C72240 - C72241 + C72242 - C72243) * C38294) *
               C89093 * C1719 +
           ((C54884 * C1724 - C54750 * C1934 + C54885 * C1725 -
             C54751 * C1937) *
                C38365 +
            (C54884 * C2040 - C54750 * C2240 + C54885 * C2043 -
             C54751 * C2243) *
                C38293 +
            (C75685 - C75686 + C75687 - C75688) * C38366 +
            (C76105 - C76106 + C76107 - C76108) * C38294) *
               C89093 * C1720 +
           ((C54750 * C1937 - C54884 * C1725 + C54751 * C10660 -
             C54885 * C10544) *
                C38365 +
            (C54750 * C2243 - C54884 * C2043 + C54751 * C10825 -
             C54885 * C10716) *
                C38293 +
            (C78329 - C78330 + C78331 - C78332) * C38366 +
            (C78647 - C78648 + C78649 - C78650) * C38294) *
               C89093 * C1721) *
              C5073 +
          (((C71931 - C71930 + C71933 - C71932) * C38365 +
            (C72241 - C72240 + C72243 - C72242) * C38293 +
            (C71938 - C71939 + C71940 - C71941) * C38366 +
            (C72244 - C72245 + C72246 - C72247) * C38294) *
               C89093 * C1719 +
           ((C75686 - C75685 + C75688 - C75687) * C38365 +
            (C76106 - C76105 + C76108 - C76107) * C38293 +
            (C54750 * C8680 - C54884 * C8516 + C54751 * C14761 -
             C54885 * C14601) *
                C38366 +
            (C54750 * C8917 - C54884 * C8760 + C54751 * C14993 -
             C54885 * C14839) *
                C38294) *
               C89093 * C1720 +
           ((C78330 - C78329 + C78332 - C78331) * C38365 +
            (C78648 - C78647 + C78650 - C78649) * C38293 +
            (C54884 * C14601 - C54750 * C14761 + C54885 * C23152 -
             C54751 * C23265) *
                C38366 +
            (C54884 * C14839 - C54750 * C14993 + C54885 * C23319 -
             C54751 * C23425) *
                C38294) *
               C89093 * C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eezx[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89093 * C112 - C13261 * C106) * C54884 +
            (C89093 * C571 - C13261 * C565) * C54750 +
            (C27308 - C27309) * C54885 + (C27606 - C27607) * C54751) *
               C38293 +
           ((C14060 - C14061) * C54884 + (C14328 - C14329) * C54750 +
            C75823 * C54885 + C76239 * C54751) *
               C38294) *
              C89153 * C5720 +
          (((C14061 - C14060) * C54884 + (C14329 - C14328) * C54750 +
            C75825 * C54885 + C76240 * C54751) *
               C38293 +
           ((C14065 - C14064) * C54884 + (C14332 - C14331) * C54750 +
            C21373 * C54885 + C21609 * C54751) *
               C38294) *
              C89153 * C5721 +
          ((C14084 * C54884 + C14342 * C54750 + (C17047 - C17046) * C54885 +
            (C17369 - C17368) * C54751) *
               C38293 +
           ((C14069 - C14068) * C54884 + (C14334 - C14333) * C54750 +
            (C21375 - C21376) * C54885 + (C21610 - C21611) * C54751) *
               C38294) *
              C89153 * C5722 +
          ((C18488 * C54884 + C18652 * C54750 + (C21376 - C21375) * C54885 +
            (C21611 - C21610) * C54751) *
               C38293 +
           ((C18491 - C18490) * C54884 + (C18654 - C18653) * C54750 +
            (C13261 * C21123 - C89093 * C21124) * C54885 +
            (C13261 * C21605 - C89093 * C21606) * C54751) *
               C38294) *
              C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C54884 +
             (C89093 * C571 - C13261 * C565) * C54750 +
             (C27308 - C27309) * C54885 + (C27606 - C27607) * C54751) *
                C38293 +
            ((C14060 - C14061) * C54884 + (C14328 - C14329) * C54750 +
             C75823 * C54885 + C76239 * C54751) *
                C38294) *
               C89153 * C5073 +
           (((C14061 - C14060) * C54884 + (C14329 - C14328) * C54750 +
             C75825 * C54885 + C76240 * C54751) *
                C38293 +
            ((C14065 - C14064) * C54884 + (C14332 - C14331) * C54750 +
             C21373 * C54885 + C21609 * C54751) *
                C38294) *
               C89153 * C89189) *
              C5075 +
          ((((C13261 * C107 - C89093 * C114) * C54884 +
             (C13261 * C566 - C89093 * C572) * C54750 +
             (C27320 - C27321) * C54885 + (C27612 - C27613) * C54751) *
                C38293 +
            ((C14072 - C14073) * C54884 + (C14335 - C14336) * C54750 +
             C75827 * C54885 + C76241 * C54751) *
                C38294) *
               C89153 * C5073 +
           (((C14073 - C14072) * C54884 + (C14336 - C14335) * C54750 +
             C75829 * C54885 + C76242 * C54751) *
                C38293 +
            ((C14077 - C14076) * C54884 + (C14339 - C14338) * C54750 +
             (C17054 - C17055) * C54885 + (C17372 - C17373) * C54751) *
                C38294) *
               C89153 * C89189) *
              C5076 +
          ((((C89093 * C116 - C13261 * C108) * C54884 +
             (C89093 * C573 - C13261 * C567) * C54750 +
             (C28758 - C28759) * C54885 + (C28990 - C28991) * C54751) *
                C38293 +
            ((C15538 - C15539) * C54884 + (C15768 - C15769) * C54750 +
             (C73905 - C73906) * C54885 + (C74203 - C74204) * C54751) *
                C38294) *
               C89153 * C5073 +
           (((C15539 - C15538) * C54884 + (C15769 - C15768) * C54750 +
             (C73906 - C73905) * C54885 + (C74204 - C74203) * C54751) *
                C38293 +
            ((C15543 - C15542) * C54884 + (C15771 - C15770) * C54750 +
             (C13261 * C8514 - C89093 * C8517) * C54885 +
             (C13261 * C8996 - C89093 * C8999) * C54751) *
                C38294) *
               C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C54884 +
             (C89093 * C571 - C13261 * C565) * C54750 +
             (C27308 - C27309) * C54885 + (C27606 - C27607) * C54751) *
                C38293 +
            ((C14060 - C14061) * C54884 + (C14328 - C14329) * C54750 +
             C75823 * C54885 + C76239 * C54751) *
                C38294) *
               C1719 +
           (((C27309 - C27308) * C54884 + (C27607 - C27606) * C54750 +
             (C27313 - C27312) * C54885 + (C27609 - C27608) * C54751) *
                C38293 +
            (C75825 * C54884 + C76240 * C54750 + C31534 * C54885 +
             C31777 * C54751) *
                C38294) *
               C1720 +
           ((C27332 * C54884 + C27618 * C54750 + (C27317 - C27316) * C54885 +
             (C27611 - C27610) * C54751) *
                C38293 +
            (C78435 * C54884 + C78749 * C54750 + (C31536 - C31537) * C54885 +
             (C31778 - C31779) * C54751) *
                C38294) *
               C1721) *
              C5073 +
          ((((C14061 - C14060) * C54884 + (C14329 - C14328) * C54750 +
             C75825 * C54885 + C76240 * C54751) *
                C38293 +
            ((C14065 - C14064) * C54884 + (C14332 - C14331) * C54750 +
             C21373 * C54885 + C21609 * C54751) *
                C38294) *
               C1719 +
           ((C75823 * C54884 + C76239 * C54750 + C78435 * C54885 +
             C78749 * C54751) *
                C38293 +
            ((C17047 - C17046) * C54884 + (C17369 - C17368) * C54750 +
             (C19100 - C19101) * C54885 + (C19336 - C19337) * C54751) *
                C38294) *
               C1720 +
           ((C31534 * C54884 + C31777 * C54750 + (C31537 - C31536) * C54885 +
             (C31779 - C31778) * C54751) *
                C38293 +
            ((C19101 - C19100) * C54884 + (C19337 - C19336) * C54750 +
             (C13261 * C23152 - C89093 * C23154) * C54885 +
             (C13261 * C23477 - C89093 * C23479) * C54751) *
                C38294) *
               C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eezy[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
               C54884 +
           (C38293 * C627 - C38365 * C565 + C38294 * C1515 - C38366 * C1425) *
               C54750 +
           (C72766 - C72767 + C72768 - C72769) * C54885 +
           (C73398 - C73399 + C73400 - C73401) * C54751) *
              C89093 * C89153 * C5720 +
          ((C38365 * C819 - C38293 * C923 + C38366 * C820 - C38294 * C926) *
               C54884 +
           (C38365 * C1425 - C38293 * C1515 + C38366 * C1428 - C38294 * C1518) *
               C54750 +
           (C75547 - C75548 + C75549 - C75550) * C54885 +
           (C76373 - C76374 + C76375 - C76376) * C54751) *
              C89093 * C89153 * C5721 +
          ((C38293 * C926 - C38365 * C820 + C38294 * C5787 - C38366 * C5727) *
               C54884 +
           (C38293 * C1518 - C38365 * C1428 + C38294 * C6117 - C38366 * C6061) *
               C54750 +
           (C38293 * C8600 - C38365 * C8516 + C38294 * C16821 -
            C38366 * C16683) *
               C54885 +
           (C38293 * C9074 - C38365 * C8994 + C38294 * C17471 -
            C38366 * C17361) *
               C54751) *
              C89093 * C89153 * C5722 +
          ((C38365 * C5727 - C38293 * C5787 + C38366 * C13743 -
            C38294 * C13873) *
               C54884 +
           (C38365 * C6061 - C38293 * C6117 + C38366 * C14323 -
            C38294 * C14421) *
               C54750 +
           (C38365 * C16683 - C38293 * C16821 + C38366 * C21123 -
            C38294 * C21209) *
               C54885 +
           (C38365 * C17361 - C38293 * C17471 + C38366 * C21605 -
            C38294 * C21687) *
               C54751) *
              C89093 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                C54884 +
            (C38293 * C627 - C38365 * C565 + C38294 * C1515 - C38366 * C1425) *
                C54750 +
            (C72766 - C72767 + C72768 - C72769) * C54885 +
            (C73398 - C73399 + C73400 - C73401) * C54751) *
               C89093 * C89153 * C5073 +
           ((C38365 * C819 - C38293 * C923 + C38366 * C820 - C38294 * C926) *
                C54884 +
            (C38365 * C1425 - C38293 * C1515 + C38366 * C1428 -
             C38294 * C1518) *
                C54750 +
            (C75547 - C75548 + C75549 - C75550) * C54885 +
            (C76373 - C76374 + C76375 - C76376) * C54751) *
               C89093 * C89153 * C89189) *
              C5075 +
          (((C38369 - C38368 + C38371 - C38370) * C54884 +
            (C38833 - C38832 + C38835 - C38834) * C54750 +
            (C40163 - C40164 + C40165 - C40166) * C54885 +
            (C40801 - C40802 + C40803 - C40804) * C54751) *
               C89093 * C89153 * C5073 +
           ((C39169 - C39168 + C39171 - C39170) * C54884 +
            (C39858 - C39857 + C39860 - C39859) * C54750 +
            (C43055 - C43056 + C43057 - C43058) * C54885 +
            (C43887 - C43888 + C43889 - C43890) * C54751) *
               C89093 * C89153 * C89189) *
              C5076 +
          (((C38377 - C38376 + C38379 - C38378) * C54884 +
            (C38837 - C38836 + C38839 - C38838) * C54750 +
            (C42053 - C42054 + C42055 - C42056) * C54885 +
            (C42663 - C42664 + C42665 - C42666) * C54751) *
               C89093 * C89153 * C5073 +
           ((C41129 - C41128 + C41131 - C41130) * C54884 +
            (C41754 - C41753 + C41756 - C41755) * C54750 +
            (C38365 * C4099 - C38293 * C4213 + C38366 * C8514 -
             C38294 * C8602) *
                C54885 +
            (C38365 * C4769 - C38293 * C4875 + C38366 * C8996 -
             C38294 * C9076) *
                C54751) *
               C89093 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                C54884 +
            (C38293 * C627 - C38365 * C565 + C38294 * C1515 - C38366 * C1425) *
                C54750 +
            (C72766 - C72767 + C72768 - C72769) * C54885 +
            (C73398 - C73399 + C73400 - C73401) * C54751) *
               C89093 * C1719 +
           ((C72767 - C72766 + C72769 - C72768) * C54884 +
            (C73399 - C73398 + C73401 - C73400) * C54750 +
            (C72774 - C72775 + C72776 - C72777) * C54885 +
            (C73402 - C73403 + C73404 - C73405) * C54751) *
               C89093 * C1720 +
           ((C72775 - C72774 + C72777 - C72776) * C54884 +
            (C73403 - C73402 + C73405 - C73404) * C54750 +
            (C38293 * C10604 - C38365 * C10544 + C38294 * C23210 -
             C38366 * C23153) *
                C54885 +
            (C38293 * C10934 - C38365 * C10878 + C38294 * C23530 -
             C38366 * C23476) *
                C54751) *
               C89093 * C1721) *
              C5073 +
          (((C38365 * C819 - C38293 * C923 + C38366 * C820 - C38294 * C926) *
                C54884 +
            (C38365 * C1425 - C38293 * C1515 + C38366 * C1428 -
             C38294 * C1518) *
                C54750 +
            (C75547 - C75548 + C75549 - C75550) * C54885 +
            (C76373 - C76374 + C76375 - C76376) * C54751) *
               C89093 * C1719 +
           ((C75548 - C75547 + C75550 - C75549) * C54884 +
            (C76374 - C76373 + C76376 - C76375) * C54750 +
            (C78223 - C78224 + C78225 - C78226) * C54885 +
            (C78848 - C78849 + C78850 - C78851) * C54751) *
               C89093 * C1720 +
           ((C78224 - C78223 + C78226 - C78225) * C54884 +
            (C78849 - C78848 + C78851 - C78850) * C54750 +
            (C38365 * C23153 - C38293 * C23210 + C38366 * C23152 -
             C38294 * C23211) *
                C54885 +
            (C38365 * C23476 - C38293 * C23530 + C38366 * C23477 -
             C38294 * C23531) *
                C54751) *
               C89093 * C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eezz[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C54884 * C264 - C55318 * C106 - C54884 * C565 + C54750 * C700 +
            C54885 * C1934 - C55319 * C1724 - C54885 * C2330 + C54751 * C2512) *
               C38293 +
           (C72566 + C72567) * C38294) *
              C89093 * C89153 * C5720 -
          ((C72568 + C72569) * C38294 + (C72567 + C72566) * C38293) * C89093 *
              C89153 * C5721 +
          ((C72569 + C72568) * C38293 + (C78023 + C78024) * C38294) * C89093 *
              C89153 * C5722 -
          ((C54885 * C21285 - C55319 * C21123 - C54885 * C21605 +
            C54751 * C21762 + C54884 * C13951 - C55318 * C13743 -
            C54884 * C14323 + C54750 * C14497) *
               C38294 +
           (C78024 + C78023) * C38293) *
              C89093 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C54884 * C264 - C55318 * C106 - C54884 * C565 + C54750 * C700 +
             C54885 * C1934 - C55319 * C1724 - C54885 * C2330 +
             C54751 * C2512) *
                C38293 +
            (C72566 + C72567) * C38294) *
               C89093 * C89153 * C5073 -
           ((C72568 + C72569) * C38294 + (C72567 + C72566) * C38293) * C89093 *
               C89153 * C89189) *
              C5075 +
          (((C56307 + C56306) * C38293 + (C56308 + C56309) * C38294) * C89093 *
               C89153 * C89189 -
           ((C56306 + C56307) * C38294 + (C55358 + C55357) * C38293) * C89093 *
               C89153 * C5073) *
              C5076 +
          (((C55360 + C55359) * C38293 + (C58271 + C58272) * C38294) * C89093 *
               C89153 * C5073 -
           ((C54885 * C8682 - C55319 * C8514 - C54885 * C8996 + C54751 * C9151 +
             C54884 * C1034 - C55318 * C822 - C54884 * C1430 + C54750 * C1610) *
                C38294 +
            (C58272 + C58271) * C38293) *
               C89093 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C54884 * C264 - C55318 * C106 - C54884 * C565 + C54750 * C700 +
             C54885 * C1934 - C55319 * C1724 - C54885 * C2330 +
             C54751 * C2512) *
                C38293 +
            (C72566 + C72567) * C38294) *
               C89093 * C1719 -
           ((C76519 + C76520) * C38294 +
            (C54885 * C1937 - C55319 * C1725 - C54885 * C2333 + C54751 * C2513 +
             C54884 * C1934 - C55318 * C1724 - C54884 * C2330 +
             C54750 * C2512) *
                C38293) *
               C89093 * C1720 +
           ((C54884 * C1937 - C55318 * C1725 - C54884 * C2333 + C54750 * C2513 +
             C54885 * C10660 - C55319 * C10544 - C54885 * C10878 +
             C54751 * C10989) *
                C38293 +
            (C78962 + C78963) * C38294) *
               C89093 * C1721) *
              C5073 +
          (((C76520 + C76519) * C38293 +
            (C54884 * C8680 - C55318 * C8516 - C54884 * C8994 + C54750 * C9153 +
             C54885 * C14761 - C55319 * C14601 - C54885 * C15069 +
             C54751 * C15223) *
                C38294) *
               C89093 * C1720 -
           ((C72568 + C72569) * C38294 + (C72567 + C72566) * C38293) * C89093 *
               C1719 -
           ((C54885 * C23265 - C55319 * C23152 - C54885 * C23477 +
             C54751 * C23582 + C54884 * C14761 - C55318 * C14601 -
             C54884 * C15069 + C54750 * C15223) *
                C38294 +
            (C78963 + C78962) * C38293) *
               C89093 * C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eexx[23] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                  C54750 +
              C27042 * C54751) *
                 C38293 +
             (C71726 + C71727) * C38294) *
                C89308 -
            ((C75413 + C75414) * C38294 +
             (C27043 * C54751 + C27042 * C54750) * C38293) *
                C89217) *
               C5073 +
           (((C75414 + C75413) * C38293 +
             (C16716 * C54750 + C18857 * C54751) * C38294) *
                C89217 -
            ((C71728 + C71729) * C38294 + (C71727 + C71726) * C38293) *
                C89308) *
               C89189) *
              C89299 +
          ((((C27045 * C54750 + C27046 * C54751) * C38293 +
             (C75415 + C75416) * C38294) *
                C89217 -
            ((C71731 + C71730) * C38294 +
             (C27045 * C54751 +
              (C13261 * C114 - C13262 * C107 - C13261 * C115 + C89093 * C125) *
                  C54750) *
                 C38293) *
                C89308) *
               C5073 +
           (((C71730 + C71731) * C38293 + (C71732 + C71733) * C38294) * C89308 -
            (((C13261 * C14605 - C13262 * C14602 - C13261 * C14606 +
               C89093 * C14608) *
                  C54751 +
              C16719 * C54750) *
                 C38294 +
             (C75416 + C75415) * C38293) *
                C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eexy[23] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                  C13261 +
              (C38293 * C187 - C38365 * C113 + C38294 * C931 - C38366 * C830) *
                  C89093) *
                 C54750 +
             ((C72766 - C72767 + C72768 - C72769) * C13261 +
              (C72770 - C72771 + C72772 - C72773) * C89093) *
                 C54751) *
                C89308 +
            (((C72767 - C72766 + C72769 - C72768) * C13261 +
              (C72771 - C72770 + C72773 - C72772) * C89093) *
                 C54750 +
             ((C72774 - C72775 + C72776 - C72777) * C13261 +
              (C72778 - C72779 + C72780 - C72781) * C89093) *
                 C54751) *
                C89217) *
               C5073 +
           ((((C38365 * C819 - C38293 * C923 + C38366 * C820 - C38294 * C926) *
                  C13261 +
              (C38365 * C830 - C38293 * C931 + C38366 * C832 - C38294 * C934) *
                  C89093) *
                 C54750 +
             ((C75547 - C75548 + C75549 - C75550) * C13261 +
              (C75551 - C75552 + C75553 - C75554) * C89093) *
                 C54751) *
                C89308 +
            (((C75548 - C75547 + C75550 - C75549) * C13261 +
              (C75552 - C75551 + C75554 - C75553) * C89093) *
                 C54750 +
             ((C78223 - C78224 + C78225 - C78226) * C13261 +
              (C78227 - C78228 + C78229 - C78230) * C89093) *
                 C54751) *
                C89217) *
               C89189) *
              C89299 +
          (((((C38369 - C38368 + C38371 - C38370) * C13261 +
              (C38373 - C38372 + C38375 - C38374) * C89093) *
                 C54750 +
             ((C40163 - C40164 + C40165 - C40166) * C13261 +
              (C40167 - C40168 + C40169 - C40170) * C89093) *
                 C54751) *
                C89308 +
            (((C40164 - C40163 + C40166 - C40165) * C13261 +
              (C40168 - C40167 + C40170 - C40169) * C89093) *
                 C54750 +
             ((C40171 - C40172 + C40173 - C40174) * C13261 +
              (C40175 - C40176 + C40177 - C40178) * C89093) *
                 C54751) *
                C89217) *
               C5073 +
           ((((C39169 - C39168 + C39171 - C39170) * C13261 +
              (C39173 - C39172 + C39175 - C39174) * C89093) *
                 C54750 +
             ((C43055 - C43056 + C43057 - C43058) * C13261 +
              (C43059 - C43060 + C43061 - C43062) * C89093) *
                 C54751) *
                C89308 +
            (((C43056 - C43055 + C43058 - C43057) * C13261 +
              (C43060 - C43059 + C43062 - C43061) * C89093) *
                 C54750 +
             ((C38365 * C6248 - C38293 * C6334 + C38366 * C14602 -
               C38294 * C14684) *
                  C13261 +
              (C38365 * C6253 - C38293 * C6337 + C38366 * C14606 -
               C38294 * C14686) *
                  C89093) *
                 C54751) *
                C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eexz[23] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((((C54750 * C264 - C54884 * C106 + C54751 * C1934 -
                         C54885 * C1724) *
                            C13261 +
                        (C54750 * C270 - C54884 * C113 + C54751 * C1942 -
                         C54885 * C1735) *
                            C89093) *
                           C38293 +
                       ((C71930 - C71931 + C71932 - C71933) * C13261 +
                        (C71934 - C71935 + C71936 - C71937) * C89093) *
                           C38294) *
                          C89308 +
                      (((C54884 * C1724 - C54750 * C1934 + C54885 * C1725 -
                         C54751 * C1937) *
                            C13261 +
                        (C54884 * C1735 - C54750 * C1942 + C54885 * C1737 -
                         C54751 * C1945) *
                            C89093) *
                           C38293 +
                       ((C75685 - C75686 + C75687 - C75688) * C13261 +
                        (C75689 - C75690 + C75691 - C75692) * C89093) *
                           C38294) *
                          C89217) *
                         C5073 +
                     ((((C71931 - C71930 + C71933 - C71932) * C13261 +
                        (C71935 - C71934 + C71937 - C71936) * C89093) *
                           C38293 +
                       ((C71938 - C71939 + C71940 - C71941) * C13261 +
                        (C71942 - C71943 + C71944 - C71945) * C89093) *
                           C38294) *
                          C89308 +
                      (((C75686 - C75685 + C75688 - C75687) * C13261 +
                        (C75690 - C75689 + C75692 - C75691) * C89093) *
                           C38293 +
                       ((C54750 * C8680 - C54884 * C8516 + C54751 * C14761 -
                         C54885 * C14601) *
                            C13261 +
                        (C54750 * C8683 - C54884 * C8522 + C54751 * C14763 -
                         C54885 * C14604) *
                            C89093) *
                           C38294) *
                          C89217) *
                         C89189) *
                        C89299 +
                    (((((C54888 - C54887 + C54890 - C54889) * C13261 +
                        (C54892 - C54891 + C54894 - C54893) * C89093) *
                           C38293 +
                       ((C55661 - C55662 + C55663 - C55664) * C13261 +
                        (C55665 - C55666 + C55667 - C55668) * C89093) *
                           C38294) *
                          C89308 +
                      (((C56667 - C56666 + C56669 - C56668) * C13261 +
                        (C56671 - C56670 + C56673 - C56672) * C89093) *
                           C38293 +
                       ((C59606 - C59607 + C59608 - C59609) * C13261 +
                        (C59610 - C59611 + C59612 - C59613) * C89093) *
                           C38294) *
                          C89217) *
                         C5073 +
                     ((((C55662 - C55661 + C55664 - C55663) * C13261 +
                        (C55666 - C55665 + C55668 - C55667) * C89093) *
                           C38293 +
                       ((C55669 - C55670 + C55671 - C55672) * C13261 +
                        (C55673 - C55674 + C55675 - C55676) * C89093) *
                           C38294) *
                          C89308 +
                      (((C59607 - C59606 + C59609 - C59608) * C13261 +
                        (C59611 - C59610 + C59613 - C59612) * C89093) *
                           C38293 +
                       ((C54884 * C8515 - C54750 * C8681 + C54885 * C14602 -
                         C54751 * C14762) *
                            C13261 +
                        (C54884 * C8520 - C54750 * C8684 + C54885 * C14606 -
                         C54751 * C14764) *
                            C89093) *
                           C38294) *
                          C89217) *
                         C89189) *
                        C89124)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[23] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C89093 * C112 - C13261 * C106) * C38365 +
              (C89093 * C352 - C13261 * C346) * C38293 +
              (C14060 - C14061) * C38366 + (C14062 - C14063) * C38294) *
                 C54750 +
             ((C27308 - C27309) * C38365 + (C27310 - C27311) * C38293 +
              C75823 * C38366 + C75824 * C38294) *
                 C54751) *
                C89308 +
            (((C27309 - C27308) * C38365 + (C27311 - C27310) * C38293 +
              C75825 * C38366 + C75826 * C38294) *
                 C54750 +
             ((C27313 - C27312) * C38365 + (C27315 - C27314) * C38293 +
              C31534 * C38366 + C31535 * C38294) *
                 C54751) *
                C89217) *
               C5073 +
           ((((C14061 - C14060) * C38365 + (C14063 - C14062) * C38293 +
              (C14065 - C14064) * C38366 + (C14067 - C14066) * C38294) *
                 C54750 +
             (C75825 * C38365 + C75826 * C38293 + C21373 * C38366 +
              C21374 * C38294) *
                 C54751) *
                C89308 +
            ((C75823 * C38365 + C75824 * C38293 + (C17047 - C17046) * C38366 +
              (C17049 - C17048) * C38294) *
                 C54750 +
             (C78435 * C38365 + C78436 * C38293 + (C19100 - C19101) * C38366 +
              (C19102 - C19103) * C38294) *
                 C54751) *
                C89217) *
               C89189) *
              C89299 +
          (((((C13261 * C107 - C89093 * C114) * C38365 +
              (C13261 * C347 - C89093 * C353) * C38293 +
              (C14072 - C14073) * C38366 + (C14074 - C14075) * C38294) *
                 C54750 +
             ((C27320 - C27321) * C38365 + (C27322 - C27323) * C38293 +
              C75827 * C38366 + C75828 * C38294) *
                 C54751) *
                C89308 +
            (((C27321 - C27320) * C38365 + (C27323 - C27322) * C38293 +
              C75829 * C38366 + C75830 * C38294) *
                 C54750 +
             ((C27325 - C27324) * C38365 + (C27327 - C27326) * C38293 +
              (C29563 - C29564) * C38366 + (C29565 - C29566) * C38294) *
                 C54751) *
                C89217) *
               C5073 +
           ((((C14073 - C14072) * C38365 + (C14075 - C14074) * C38293 +
              (C14077 - C14076) * C38366 + (C14079 - C14078) * C38294) *
                 C54750 +
             (C75829 * C38365 + C75830 * C38293 + (C17054 - C17055) * C38366 +
              (C17056 - C17057) * C38294) *
                 C54751) *
                C89308 +
            ((C75827 * C38365 + C75828 * C38293 + (C17055 - C17054) * C38366 +
              (C17057 - C17056) * C38294) *
                 C54750 +
             ((C29564 - C29563) * C38365 + (C29566 - C29565) * C38293 +
              (C13261 * C14602 - C89093 * C14605) * C38366 +
              (C13261 * C14840 - C89093 * C14842) * C38294) *
                 C54751) *
                C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[23] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C38365 * C181 - C38589 * C106 - C38365 * C346 + C38293 * C409 +
              C38366 * C923 - C38590 * C819 - C38366 * C1135 + C38294 * C1227) *
                 C89093 * C54750 +
             (C73100 + C73101) * C89093 * C54751) *
                C89308 -
            ((C73102 + C73103) * C89093 * C54751 +
             (C73101 + C73100) * C89093 * C54750) *
                C89217) *
               C5073 +
           (((C75973 + C75974) * C89093 * C54750 +
             (C78547 + C78548) * C89093 * C54751) *
                C89217 -
            ((C75974 + C75973) * C89093 * C54751 +
             (C38366 * C926 - C38590 * C820 - C38366 * C1138 + C38294 * C1228 +
              C38365 * C923 - C38589 * C819 - C38365 * C1135 + C38293 * C1227) *
                 C89093 * C54750) *
                C89308) *
               C89189) *
              C89299 +
          ((((C40502 + C40501) * C89093 * C54750 +
             (C40503 + C40504) * C89093 * C54751) *
                C89217 -
            ((C40501 + C40502) * C89093 * C54751 +
             (C38629 + C38628) * C89093 * C54750) *
                C89308) *
               C5073 +
           (((C39541 + C39540) * C89093 * C54750 +
             (C43485 + C43486) * C89093 * C54751) *
                C89308 -
            ((C38366 * C14684 - C38590 * C14602 - C38366 * C14840 +
              C38294 * C14918 + C38365 * C6334 - C38589 * C6248 -
              C38365 * C6494 + C38293 * C6574) *
                 C89093 * C54751 +
             (C43486 + C43485) * C89093 * C54750) *
                C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[23] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                 C38365 +
             (C54750 * C493 - C54884 * C346 + C54751 * C2240 - C54885 * C2040) *
                 C38293 +
             (C71930 - C71931 + C71932 - C71933) * C38366 +
             (C72240 - C72241 + C72242 - C72243) * C38294) *
                C89093 * C89308 +
            ((C54884 * C1724 - C54750 * C1934 + C54885 * C1725 -
              C54751 * C1937) *
                 C38365 +
             (C54884 * C2040 - C54750 * C2240 + C54885 * C2043 -
              C54751 * C2243) *
                 C38293 +
             (C75685 - C75686 + C75687 - C75688) * C38366 +
             (C76105 - C76106 + C76107 - C76108) * C38294) *
                C89093 * C89217) *
               C5073 +
           (((C71931 - C71930 + C71933 - C71932) * C38365 +
             (C72241 - C72240 + C72243 - C72242) * C38293 +
             (C71938 - C71939 + C71940 - C71941) * C38366 +
             (C72244 - C72245 + C72246 - C72247) * C38294) *
                C89093 * C89308 +
            ((C75686 - C75685 + C75688 - C75687) * C38365 +
             (C76106 - C76105 + C76108 - C76107) * C38293 +
             (C54750 * C8680 - C54884 * C8516 + C54751 * C14761 -
              C54885 * C14601) *
                 C38366 +
             (C54750 * C8917 - C54884 * C8760 + C54751 * C14993 -
              C54885 * C14839) *
                 C38294) *
                C89093 * C89217) *
               C89189) *
              C89299 +
          ((((C54888 - C54887 + C54890 - C54889) * C38365 +
             (C55110 - C55109 + C55112 - C55111) * C38293 +
             (C55661 - C55662 + C55663 - C55664) * C38366 +
             (C55978 - C55979 + C55980 - C55981) * C38294) *
                C89093 * C89308 +
            ((C56667 - C56666 + C56669 - C56668) * C38365 +
             (C57017 - C57016 + C57019 - C57018) * C38293 +
             (C59606 - C59607 + C59608 - C59609) * C38366 +
             (C60008 - C60009 + C60010 - C60011) * C38294) *
                C89093 * C89217) *
               C5073 +
           (((C55662 - C55661 + C55664 - C55663) * C38365 +
             (C55979 - C55978 + C55981 - C55980) * C38293 +
             (C55669 - C55670 + C55671 - C55672) * C38366 +
             (C55982 - C55983 + C55984 - C55985) * C38294) *
                C89093 * C89308 +
            ((C59607 - C59606 + C59609 - C59608) * C38365 +
             (C60009 - C60008 + C60011 - C60010) * C38293 +
             (C54884 * C8515 - C54750 * C8681 + C54885 * C14602 -
              C54751 * C14762) *
                 C38366 +
             (C54884 * C8761 - C54750 * C8918 + C54885 * C14840 -
              C54751 * C14994) *
                 C38294) *
                C89093 * C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eezx[23] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C89093 * C112 - C13261 * C106) * C54884 +
              (C89093 * C571 - C13261 * C565) * C54750 +
              (C27308 - C27309) * C54885 + (C27606 - C27607) * C54751) *
                 C38293 +
             ((C14060 - C14061) * C54884 + (C14328 - C14329) * C54750 +
              C75823 * C54885 + C76239 * C54751) *
                 C38294) *
                C89308 +
            (((C27309 - C27308) * C54884 + (C27607 - C27606) * C54750 +
              (C27313 - C27312) * C54885 + (C27609 - C27608) * C54751) *
                 C38293 +
             (C75825 * C54884 + C76240 * C54750 + C31534 * C54885 +
              C31777 * C54751) *
                 C38294) *
                C89217) *
               C5073 +
           ((((C14061 - C14060) * C54884 + (C14329 - C14328) * C54750 +
              C75825 * C54885 + C76240 * C54751) *
                 C38293 +
             ((C14065 - C14064) * C54884 + (C14332 - C14331) * C54750 +
              C21373 * C54885 + C21609 * C54751) *
                 C38294) *
                C89308 +
            ((C75823 * C54884 + C76239 * C54750 + C78435 * C54885 +
              C78749 * C54751) *
                 C38293 +
             ((C17047 - C17046) * C54884 + (C17369 - C17368) * C54750 +
              (C19100 - C19101) * C54885 + (C19336 - C19337) * C54751) *
                 C38294) *
                C89217) *
               C89189) *
              C89299 +
          (((((C13261 * C107 - C89093 * C114) * C54884 +
              (C13261 * C566 - C89093 * C572) * C54750 +
              (C27320 - C27321) * C54885 + (C27612 - C27613) * C54751) *
                 C38293 +
             ((C14072 - C14073) * C54884 + (C14335 - C14336) * C54750 +
              C75827 * C54885 + C76241 * C54751) *
                 C38294) *
                C89308 +
            (((C27321 - C27320) * C54884 + (C27613 - C27612) * C54750 +
              (C27325 - C27324) * C54885 + (C27615 - C27614) * C54751) *
                 C38293 +
             (C75829 * C54884 + C76242 * C54750 + (C29563 - C29564) * C54885 +
              (C29890 - C29891) * C54751) *
                 C38294) *
                C89217) *
               C5073 +
           ((((C14073 - C14072) * C54884 + (C14336 - C14335) * C54750 +
              C75829 * C54885 + C76242 * C54751) *
                 C38293 +
             ((C14077 - C14076) * C54884 + (C14339 - C14338) * C54750 +
              (C17054 - C17055) * C54885 + (C17372 - C17373) * C54751) *
                 C38294) *
                C89308 +
            ((C75827 * C54884 + C76241 * C54750 + (C29564 - C29563) * C54885 +
              (C29891 - C29890) * C54751) *
                 C38293 +
             ((C17055 - C17054) * C54884 + (C17373 - C17372) * C54750 +
              (C13261 * C14602 - C89093 * C14605) * C54885 +
              (C13261 * C15070 - C89093 * C15072) * C54751) *
                 C38294) *
                C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eezy[23] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                 C54884 +
             (C38293 * C627 - C38365 * C565 + C38294 * C1515 - C38366 * C1425) *
                 C54750 +
             (C72766 - C72767 + C72768 - C72769) * C54885 +
             (C73398 - C73399 + C73400 - C73401) * C54751) *
                C89093 * C89308 +
            ((C72767 - C72766 + C72769 - C72768) * C54884 +
             (C73399 - C73398 + C73401 - C73400) * C54750 +
             (C72774 - C72775 + C72776 - C72777) * C54885 +
             (C73402 - C73403 + C73404 - C73405) * C54751) *
                C89093 * C89217) *
               C5073 +
           (((C38365 * C819 - C38293 * C923 + C38366 * C820 - C38294 * C926) *
                 C54884 +
             (C38365 * C1425 - C38293 * C1515 + C38366 * C1428 -
              C38294 * C1518) *
                 C54750 +
             (C75547 - C75548 + C75549 - C75550) * C54885 +
             (C76373 - C76374 + C76375 - C76376) * C54751) *
                C89093 * C89308 +
            ((C75548 - C75547 + C75550 - C75549) * C54884 +
             (C76374 - C76373 + C76376 - C76375) * C54750 +
             (C78223 - C78224 + C78225 - C78226) * C54885 +
             (C78848 - C78849 + C78850 - C78851) * C54751) *
                C89093 * C89217) *
               C89189) *
              C89299 +
          ((((C38369 - C38368 + C38371 - C38370) * C54884 +
             (C38833 - C38832 + C38835 - C38834) * C54750 +
             (C40163 - C40164 + C40165 - C40166) * C54885 +
             (C40801 - C40802 + C40803 - C40804) * C54751) *
                C89093 * C89308 +
            ((C40164 - C40163 + C40166 - C40165) * C54884 +
             (C40802 - C40801 + C40804 - C40803) * C54750 +
             (C40171 - C40172 + C40173 - C40174) * C54885 +
             (C40805 - C40806 + C40807 - C40808) * C54751) *
                C89093 * C89217) *
               C5073 +
           (((C39169 - C39168 + C39171 - C39170) * C54884 +
             (C39858 - C39857 + C39860 - C39859) * C54750 +
             (C43055 - C43056 + C43057 - C43058) * C54885 +
             (C43887 - C43888 + C43889 - C43890) * C54751) *
                C89093 * C89308 +
            ((C43056 - C43055 + C43058 - C43057) * C54884 +
             (C43888 - C43887 + C43890 - C43889) * C54750 +
             (C38365 * C6248 - C38293 * C6334 + C38366 * C14602 -
              C38294 * C14684) *
                 C54885 +
             (C38365 * C6728 - C38293 * C6808 + C38366 * C15070 -
              C38294 * C15148) *
                 C54751) *
                C89093 * C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eezz[23] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C54884 * C264 - C55318 * C106 - C54884 * C565 + C54750 * C700 +
              C54885 * C1934 - C55319 * C1724 - C54885 * C2330 +
              C54751 * C2512) *
                 C38293 +
             (C72566 + C72567) * C38294) *
                C89093 * C89308 -
            ((C76519 + C76520) * C38294 +
             (C54885 * C1937 - C55319 * C1725 - C54885 * C2333 +
              C54751 * C2513 + C54884 * C1934 - C55318 * C1724 -
              C54884 * C2330 + C54750 * C2512) *
                 C38293) *
                C89093 * C89217) *
               C5073 +
           (((C76520 + C76519) * C38293 +
             (C54884 * C8680 - C55318 * C8516 - C54884 * C8994 +
              C54750 * C9153 + C54885 * C14761 - C55319 * C14601 -
              C54885 * C15069 + C54751 * C15223) *
                 C38294) *
                C89093 * C89217 -
            ((C72568 + C72569) * C38294 + (C72567 + C72566) * C38293) * C89093 *
                C89308) *
               C89189) *
              C89299 +
          ((((C57362 + C57361) * C38293 + (C60416 + C60417) * C38294) * C89093 *
                C89217 -
            ((C56306 + C56307) * C38294 + (C55358 + C55357) * C38293) * C89093 *
                C89308) *
               C5073 +
           (((C56307 + C56306) * C38293 + (C56308 + C56309) * C38294) * C89093 *
                C89308 -
            ((C54885 * C14762 - C55319 * C14602 - C54885 * C15070 +
              C54751 * C15224 + C54884 * C8681 - C55318 * C8515 -
              C54884 * C8995 + C54750 * C9152) *
                 C38294 +
             (C60417 + C60416) * C38293) *
                C89093 * C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eexx[24] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                 C54750 +
             C27042 * C54751) *
                C38293 +
            (C71726 + C71727) * C38294) *
               C89153 * C5073 -
           ((C71728 + C71729) * C38294 + (C71727 + C71726) * C38293) * C89153 *
               C89189) *
              C5075 +
          (((C71730 + C71731) * C38293 + (C71732 + C71733) * C38294) * C89153 *
               C89189 -
           ((C71731 + C71730) * C38294 +
            (C27045 * C54751 +
             (C13261 * C114 - C13262 * C107 - C13261 * C115 + C89093 * C125) *
                 C54750) *
                C38293) *
               C89153 * C5073) *
              C5076 +
          ((((C13261 * C116 - C13262 * C108 - C13261 * C117 + C89093 * C126) *
                 C54750 +
             C28534 * C54751) *
                C38293 +
            (C73602 + C73610) * C38294) *
               C89153 * C5073 -
           (((C13261 * C8517 - C13262 * C8514 - C13261 * C8518 +
              C89093 * C8523) *
                 C54751 +
             C15313 * C54750) *
                C38294 +
            (C73610 + C73602) * C38293) *
               C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                C54750 +
            C27042 * C54751) *
               C38293 +
           (C71726 + C71727) * C38294) *
              C89153 * C5720 -
          ((C71728 + C71729) * C38294 + (C71727 + C71726) * C38293) * C89153 *
              C5721 +
          ((C71729 + C71728) * C38293 + (C77469 + C77470) * C38294) * C89153 *
              C5722 -
          (((C13261 * C21124 - C13262 * C21123 - C13261 * C21125 +
             C89093 * C21126) *
                C54751 +
            C18321 * C54750) *
               C38294 +
           (C77470 + C77469) * C38293) *
              C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eexy[24] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                 C13261 +
             (C38293 * C187 - C38365 * C113 + C38294 * C931 - C38366 * C830) *
                 C89093) *
                C54750 +
            ((C72766 - C72767 + C72768 - C72769) * C13261 +
             (C72770 - C72771 + C72772 - C72773) * C89093) *
                C54751) *
               C89153 * C5073 +
           (((C38365 * C819 - C38293 * C923 + C38366 * C820 - C38294 * C926) *
                 C13261 +
             (C38365 * C830 - C38293 * C931 + C38366 * C832 - C38294 * C934) *
                 C89093) *
                C54750 +
            ((C75547 - C75548 + C75549 - C75550) * C13261 +
             (C75551 - C75552 + C75553 - C75554) * C89093) *
                C54751) *
               C89153 * C89189) *
              C5075 +
          ((((C38369 - C38368 + C38371 - C38370) * C13261 +
             (C38373 - C38372 + C38375 - C38374) * C89093) *
                C54750 +
            ((C40163 - C40164 + C40165 - C40166) * C13261 +
             (C40167 - C40168 + C40169 - C40170) * C89093) *
                C54751) *
               C89153 * C5073 +
           (((C39169 - C39168 + C39171 - C39170) * C13261 +
             (C39173 - C39172 + C39175 - C39174) * C89093) *
                C54750 +
            ((C43055 - C43056 + C43057 - C43058) * C13261 +
             (C43059 - C43060 + C43061 - C43062) * C89093) *
                C54751) *
               C89153 * C89189) *
              C5076 +
          ((((C38377 - C38376 + C38379 - C38378) * C13261 +
             (C38381 - C38380 + C38383 - C38382) * C89093) *
                C54750 +
            ((C42053 - C42054 + C42055 - C42056) * C13261 +
             (C42057 - C42058 + C42059 - C42060) * C89093) *
                C54751) *
               C89153 * C5073 +
           (((C41129 - C41128 + C41131 - C41130) * C13261 +
             (C41133 - C41132 + C41135 - C41134) * C89093) *
                C54750 +
            ((C38365 * C4099 - C38293 * C4213 + C38366 * C8514 -
              C38294 * C8602) *
                 C13261 +
             (C38365 * C4106 - C38293 * C4217 + C38366 * C8518 -
              C38294 * C8605) *
                 C89093) *
                C54751) *
               C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                C13261 +
            (C38293 * C187 - C38365 * C113 + C38294 * C931 - C38366 * C830) *
                C89093) *
               C54750 +
           ((C72766 - C72767 + C72768 - C72769) * C13261 +
            (C72770 - C72771 + C72772 - C72773) * C89093) *
               C54751) *
              C89153 * C5720 +
          (((C38365 * C819 - C38293 * C923 + C38366 * C820 - C38294 * C926) *
                C13261 +
            (C38365 * C830 - C38293 * C931 + C38366 * C832 - C38294 * C934) *
                C89093) *
               C54750 +
           ((C75547 - C75548 + C75549 - C75550) * C13261 +
            (C75551 - C75552 + C75553 - C75554) * C89093) *
               C54751) *
              C89153 * C5721 +
          (((C38293 * C926 - C38365 * C820 + C38294 * C5787 - C38366 * C5727) *
                C13261 +
            (C38293 * C934 - C38365 * C832 + C38294 * C5790 - C38366 * C5733) *
                C89093) *
               C54750 +
           ((C38293 * C8600 - C38365 * C8516 + C38294 * C16821 -
             C38366 * C16683) *
                C13261 +
            (C38293 * C8603 - C38365 * C8522 + C38294 * C16823 -
             C38366 * C16686) *
                C89093) *
               C54751) *
              C89153 * C5722 +
          (((C38365 * C5727 - C38293 * C5787 + C38366 * C13743 -
             C38294 * C13873) *
                C13261 +
            (C38365 * C5733 - C38293 * C5790 + C38366 * C13746 -
             C38294 * C13875) *
                C89093) *
               C54750 +
           ((C38365 * C16683 - C38293 * C16821 + C38366 * C21123 -
             C38294 * C21209) *
                C13261 +
            (C38365 * C16686 - C38293 * C16823 + C38366 * C21125 -
             C38294 * C21210) *
                C89093) *
               C54751) *
              C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eexz[24] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                 C13261 +
             (C54750 * C270 - C54884 * C113 + C54751 * C1942 - C54885 * C1735) *
                 C89093) *
                C38293 +
            ((C71930 - C71931 + C71932 - C71933) * C13261 +
             (C71934 - C71935 + C71936 - C71937) * C89093) *
                C38294) *
               C89153 * C5073 +
           (((C71931 - C71930 + C71933 - C71932) * C13261 +
             (C71935 - C71934 + C71937 - C71936) * C89093) *
                C38293 +
            ((C71938 - C71939 + C71940 - C71941) * C13261 +
             (C71942 - C71943 + C71944 - C71945) * C89093) *
                C38294) *
               C89153 * C89189) *
              C5075 +
          ((((C54888 - C54887 + C54890 - C54889) * C13261 +
             (C54892 - C54891 + C54894 - C54893) * C89093) *
                C38293 +
            ((C55661 - C55662 + C55663 - C55664) * C13261 +
             (C55665 - C55666 + C55667 - C55668) * C89093) *
                C38294) *
               C89153 * C5073 +
           (((C55662 - C55661 + C55664 - C55663) * C13261 +
             (C55666 - C55665 + C55668 - C55667) * C89093) *
                C38293 +
            ((C55669 - C55670 + C55671 - C55672) * C13261 +
             (C55673 - C55674 + C55675 - C55676) * C89093) *
                C38294) *
               C89153 * C89189) *
              C5076 +
          ((((C54896 - C54895 + C54898 - C54897) * C13261 +
             (C54900 - C54899 + C54902 - C54901) * C89093) *
                C38293 +
            ((C57659 - C57660 + C57661 - C57662) * C13261 +
             (C57663 - C57664 + C57665 - C57666) * C89093) *
                C38294) *
               C89153 * C5073 +
           (((C57660 - C57659 + C57662 - C57661) * C13261 +
             (C57664 - C57663 + C57666 - C57665) * C89093) *
                C38293 +
            ((C54884 * C822 - C54750 * C1034 + C54885 * C8514 -
              C54751 * C8682) *
                 C13261 +
             (C54884 * C836 - C54750 * C1042 + C54885 * C8518 -
              C54751 * C8685) *
                 C89093) *
                C38294) *
               C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                C13261 +
            (C54750 * C270 - C54884 * C113 + C54751 * C1942 - C54885 * C1735) *
                C89093) *
               C38293 +
           ((C71930 - C71931 + C71932 - C71933) * C13261 +
            (C71934 - C71935 + C71936 - C71937) * C89093) *
               C38294) *
              C89153 * C5720 +
          (((C71931 - C71930 + C71933 - C71932) * C13261 +
            (C71935 - C71934 + C71937 - C71936) * C89093) *
               C38293 +
           ((C71938 - C71939 + C71940 - C71941) * C13261 +
            (C71942 - C71943 + C71944 - C71945) * C89093) *
               C38294) *
              C89153 * C5721 +
          (((C71939 - C71938 + C71941 - C71940) * C13261 +
            (C71943 - C71942 + C71945 - C71944) * C89093) *
               C38293 +
           ((C77603 - C77604 + C77605 - C77606) * C13261 +
            (C77607 - C77608 + C77609 - C77610) * C89093) *
               C38294) *
              C89153 * C5722 +
          (((C77604 - C77603 + C77606 - C77605) * C13261 +
            (C77608 - C77607 + C77610 - C77609) * C89093) *
               C38293 +
           ((C54884 * C13743 - C54750 * C13951 + C54885 * C21123 -
             C54751 * C21285) *
                C13261 +
            (C54884 * C13746 - C54750 * C13953 + C54885 * C21125 -
             C54751 * C21286) *
                C89093) *
               C38294) *
              C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eeyx[24] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C38365 +
             (C89093 * C352 - C13261 * C346) * C38293 +
             (C14060 - C14061) * C38366 + (C14062 - C14063) * C38294) *
                C54750 +
            ((C27308 - C27309) * C38365 + (C27310 - C27311) * C38293 +
             C75823 * C38366 + C75824 * C38294) *
                C54751) *
               C89153 * C5073 +
           (((C14061 - C14060) * C38365 + (C14063 - C14062) * C38293 +
             (C14065 - C14064) * C38366 + (C14067 - C14066) * C38294) *
                C54750 +
            (C75825 * C38365 + C75826 * C38293 + C21373 * C38366 +
             C21374 * C38294) *
                C54751) *
               C89153 * C89189) *
              C5075 +
          ((((C13261 * C107 - C89093 * C114) * C38365 +
             (C13261 * C347 - C89093 * C353) * C38293 +
             (C14072 - C14073) * C38366 + (C14074 - C14075) * C38294) *
                C54750 +
            ((C27320 - C27321) * C38365 + (C27322 - C27323) * C38293 +
             C75827 * C38366 + C75828 * C38294) *
                C54751) *
               C89153 * C5073 +
           (((C14073 - C14072) * C38365 + (C14075 - C14074) * C38293 +
             (C14077 - C14076) * C38366 + (C14079 - C14078) * C38294) *
                C54750 +
            (C75829 * C38365 + C75830 * C38293 + (C17054 - C17055) * C38366 +
             (C17056 - C17057) * C38294) *
                C54751) *
               C89153 * C89189) *
              C5076 +
          ((((C89093 * C116 - C13261 * C108) * C38365 +
             (C89093 * C354 - C13261 * C348) * C38293 +
             (C15538 - C15539) * C38366 + (C15540 - C15541) * C38294) *
                C54750 +
            ((C28758 - C28759) * C38365 + (C28760 - C28761) * C38293 +
             (C73905 - C73906) * C38366 + (C73907 - C73908) * C38294) *
                C54751) *
               C89153 * C5073 +
           (((C15539 - C15538) * C38365 + (C15541 - C15540) * C38293 +
             (C15543 - C15542) * C38366 + (C15545 - C15544) * C38294) *
                C54750 +
            ((C73906 - C73905) * C38365 + (C73908 - C73907) * C38293 +
             (C13261 * C8514 - C89093 * C8517) * C38366 +
             (C13261 * C8762 - C89093 * C8765) * C38294) *
                C54751) *
               C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C89093 * C112 - C13261 * C106) * C38365 +
            (C89093 * C352 - C13261 * C346) * C38293 +
            (C14060 - C14061) * C38366 + (C14062 - C14063) * C38294) *
               C54750 +
           ((C27308 - C27309) * C38365 + (C27310 - C27311) * C38293 +
            C75823 * C38366 + C75824 * C38294) *
               C54751) *
              C89153 * C5720 +
          (((C14061 - C14060) * C38365 + (C14063 - C14062) * C38293 +
            (C14065 - C14064) * C38366 + (C14067 - C14066) * C38294) *
               C54750 +
           (C75825 * C38365 + C75826 * C38293 + C21373 * C38366 +
            C21374 * C38294) *
               C54751) *
              C89153 * C5721 +
          ((C14084 * C38365 + C14085 * C38293 + (C14069 - C14068) * C38366 +
            (C14071 - C14070) * C38294) *
               C54750 +
           ((C17047 - C17046) * C38365 + (C17049 - C17048) * C38293 +
            (C21375 - C21376) * C38366 + (C21377 - C21378) * C38294) *
               C54751) *
              C89153 * C5722 +
          ((C18488 * C38365 + C18489 * C38293 + (C18491 - C18490) * C38366 +
            (C18493 - C18492) * C38294) *
               C54750 +
           ((C21376 - C21375) * C38365 + (C21378 - C21377) * C38293 +
            (C13261 * C21123 - C89093 * C21124) * C38366 +
            (C13261 * C21370 - C89093 * C21371) * C38294) *
               C54751) *
              C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eeyy[24] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C38365 * C181 - C38589 * C106 - C38365 * C346 + C38293 * C409 +
             C38366 * C923 - C38590 * C819 - C38366 * C1135 + C38294 * C1227) *
                C89093 * C54750 +
            (C73100 + C73101) * C89093 * C54751) *
               C89153 * C5073 -
           ((C75974 + C75973) * C89093 * C54751 +
            (C38366 * C926 - C38590 * C820 - C38366 * C1138 + C38294 * C1228 +
             C38365 * C923 - C38589 * C819 - C38365 * C1135 + C38293 * C1227) *
                C89093 * C54750) *
               C89153 * C89189) *
              C5075 +
          (((C39541 + C39540) * C89093 * C54750 +
            (C43485 + C43486) * C89093 * C54751) *
               C89153 * C89189 -
           ((C40501 + C40502) * C89093 * C54751 +
            (C38629 + C38628) * C89093 * C54750) *
               C89153 * C5073) *
              C5076 +
          (((C38631 + C38630) * C89093 * C54750 +
            (C42367 + C42368) * C89093 * C54751) *
               C89153 * C5073 -
           ((C38366 * C8602 - C38590 * C8514 - C38366 * C8762 + C38294 * C8840 +
             C38365 * C4213 - C38589 * C4099 - C38365 * C4441 +
             C38293 * C4547) *
                C89093 * C54751 +
            (C41453 + C41452) * C89093 * C54750) *
               C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C38365 * C181 - C38589 * C106 - C38365 * C346 + C38293 * C409 +
            C38366 * C923 - C38590 * C819 - C38366 * C1135 + C38294 * C1227) *
               C89093 * C54750 +
           (C73100 + C73101) * C89093 * C54751) *
              C89153 * C5720 -
          ((C75974 + C75973) * C89093 * C54751 +
           (C38366 * C926 - C38590 * C820 - C38366 * C1138 + C38294 * C1228 +
            C38365 * C923 - C38589 * C819 - C38365 * C1135 + C38293 * C1227) *
               C89093 * C54750) *
              C89153 * C5721 +
          ((C38365 * C926 - C38589 * C820 - C38365 * C1138 + C38293 * C1228 +
            C38366 * C5787 - C38590 * C5727 - C38366 * C5899 + C38294 * C5957) *
               C89093 * C54750 +
           (C38365 * C8600 - C38589 * C8516 - C38365 * C8760 + C38293 * C8842 +
            C38366 * C16821 - C38590 * C16683 - C38366 * C17037 +
            C38294 * C17155) *
               C89093 * C54751) *
              C89153 * C5722 -
          ((C38366 * C21209 - C38590 * C21123 - C38366 * C21370 +
            C38294 * C21452 + C38365 * C16821 - C38589 * C16683 -
            C38365 * C17037 + C38293 * C17155) *
               C89093 * C54751 +
           (C38366 * C13873 - C38590 * C13743 - C38366 * C14055 +
            C38294 * C14161 + C38365 * C5787 - C38589 * C5727 - C38365 * C5899 +
            C38293 * C5957) *
               C89093 * C54750) *
              C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eeyz[24] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                C38365 +
            (C54750 * C493 - C54884 * C346 + C54751 * C2240 - C54885 * C2040) *
                C38293 +
            (C71930 - C71931 + C71932 - C71933) * C38366 +
            (C72240 - C72241 + C72242 - C72243) * C38294) *
               C89093 * C89153 * C5073 +
           ((C71931 - C71930 + C71933 - C71932) * C38365 +
            (C72241 - C72240 + C72243 - C72242) * C38293 +
            (C71938 - C71939 + C71940 - C71941) * C38366 +
            (C72244 - C72245 + C72246 - C72247) * C38294) *
               C89093 * C89153 * C89189) *
              C5075 +
          (((C54888 - C54887 + C54890 - C54889) * C38365 +
            (C55110 - C55109 + C55112 - C55111) * C38293 +
            (C55661 - C55662 + C55663 - C55664) * C38366 +
            (C55978 - C55979 + C55980 - C55981) * C38294) *
               C89093 * C89153 * C5073 +
           ((C55662 - C55661 + C55664 - C55663) * C38365 +
            (C55979 - C55978 + C55981 - C55980) * C38293 +
            (C55669 - C55670 + C55671 - C55672) * C38366 +
            (C55982 - C55983 + C55984 - C55985) * C38294) *
               C89093 * C89153 * C89189) *
              C5076 +
          (((C54896 - C54895 + C54898 - C54897) * C38365 +
            (C55114 - C55113 + C55116 - C55115) * C38293 +
            (C57659 - C57660 + C57661 - C57662) * C38366 +
            (C57961 - C57962 + C57963 - C57964) * C38294) *
               C89093 * C89153 * C5073 +
           ((C57660 - C57659 + C57662 - C57661) * C38365 +
            (C57962 - C57961 + C57964 - C57963) * C38293 +
            (C54884 * C822 - C54750 * C1034 + C54885 * C8514 - C54751 * C8682) *
                C38366 +
            (C54884 * C1140 - C54750 * C1340 + C54885 * C8762 -
             C54751 * C8919) *
                C38294) *
               C89093 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
               C38365 +
           (C54750 * C493 - C54884 * C346 + C54751 * C2240 - C54885 * C2040) *
               C38293 +
           (C71930 - C71931 + C71932 - C71933) * C38366 +
           (C72240 - C72241 + C72242 - C72243) * C38294) *
              C89093 * C89153 * C5720 +
          ((C71931 - C71930 + C71933 - C71932) * C38365 +
           (C72241 - C72240 + C72243 - C72242) * C38293 +
           (C71938 - C71939 + C71940 - C71941) * C38366 +
           (C72244 - C72245 + C72246 - C72247) * C38294) *
              C89093 * C89153 * C5721 +
          ((C71939 - C71938 + C71941 - C71940) * C38365 +
           (C72245 - C72244 + C72247 - C72246) * C38293 +
           (C77603 - C77604 + C77605 - C77606) * C38366 +
           (C77809 - C77810 + C77811 - C77812) * C38294) *
              C89093 * C89153 * C5722 +
          ((C77604 - C77603 + C77606 - C77605) * C38365 +
           (C77810 - C77809 + C77812 - C77811) * C38293 +
           (C54884 * C13743 - C54750 * C13951 + C54885 * C21123 -
            C54751 * C21285) *
               C38366 +
           (C54884 * C14055 - C54750 * C14237 + C54885 * C21370 -
            C54751 * C21527) *
               C38294) *
              C89093 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eezx[24] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C54884 +
             (C89093 * C571 - C13261 * C565) * C54750 +
             (C27308 - C27309) * C54885 + (C27606 - C27607) * C54751) *
                C38293 +
            ((C14060 - C14061) * C54884 + (C14328 - C14329) * C54750 +
             C75823 * C54885 + C76239 * C54751) *
                C38294) *
               C89153 * C5073 +
           (((C14061 - C14060) * C54884 + (C14329 - C14328) * C54750 +
             C75825 * C54885 + C76240 * C54751) *
                C38293 +
            ((C14065 - C14064) * C54884 + (C14332 - C14331) * C54750 +
             C21373 * C54885 + C21609 * C54751) *
                C38294) *
               C89153 * C89189) *
              C5075 +
          ((((C13261 * C107 - C89093 * C114) * C54884 +
             (C13261 * C566 - C89093 * C572) * C54750 +
             (C27320 - C27321) * C54885 + (C27612 - C27613) * C54751) *
                C38293 +
            ((C14072 - C14073) * C54884 + (C14335 - C14336) * C54750 +
             C75827 * C54885 + C76241 * C54751) *
                C38294) *
               C89153 * C5073 +
           (((C14073 - C14072) * C54884 + (C14336 - C14335) * C54750 +
             C75829 * C54885 + C76242 * C54751) *
                C38293 +
            ((C14077 - C14076) * C54884 + (C14339 - C14338) * C54750 +
             (C17054 - C17055) * C54885 + (C17372 - C17373) * C54751) *
                C38294) *
               C89153 * C89189) *
              C5076 +
          ((((C89093 * C116 - C13261 * C108) * C54884 +
             (C89093 * C573 - C13261 * C567) * C54750 +
             (C28758 - C28759) * C54885 + (C28990 - C28991) * C54751) *
                C38293 +
            ((C15538 - C15539) * C54884 + (C15768 - C15769) * C54750 +
             (C73905 - C73906) * C54885 + (C74203 - C74204) * C54751) *
                C38294) *
               C89153 * C5073 +
           (((C15539 - C15538) * C54884 + (C15769 - C15768) * C54750 +
             (C73906 - C73905) * C54885 + (C74204 - C74203) * C54751) *
                C38293 +
            ((C15543 - C15542) * C54884 + (C15771 - C15770) * C54750 +
             (C13261 * C8514 - C89093 * C8517) * C54885 +
             (C13261 * C8996 - C89093 * C8999) * C54751) *
                C38294) *
               C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C89093 * C112 - C13261 * C106) * C54884 +
            (C89093 * C571 - C13261 * C565) * C54750 +
            (C27308 - C27309) * C54885 + (C27606 - C27607) * C54751) *
               C38293 +
           ((C14060 - C14061) * C54884 + (C14328 - C14329) * C54750 +
            C75823 * C54885 + C76239 * C54751) *
               C38294) *
              C89153 * C5720 +
          (((C14061 - C14060) * C54884 + (C14329 - C14328) * C54750 +
            C75825 * C54885 + C76240 * C54751) *
               C38293 +
           ((C14065 - C14064) * C54884 + (C14332 - C14331) * C54750 +
            C21373 * C54885 + C21609 * C54751) *
               C38294) *
              C89153 * C5721 +
          ((C14084 * C54884 + C14342 * C54750 + (C17047 - C17046) * C54885 +
            (C17369 - C17368) * C54751) *
               C38293 +
           ((C14069 - C14068) * C54884 + (C14334 - C14333) * C54750 +
            (C21375 - C21376) * C54885 + (C21610 - C21611) * C54751) *
               C38294) *
              C89153 * C5722 +
          ((C18488 * C54884 + C18652 * C54750 + (C21376 - C21375) * C54885 +
            (C21611 - C21610) * C54751) *
               C38293 +
           ((C18491 - C18490) * C54884 + (C18654 - C18653) * C54750 +
            (C13261 * C21123 - C89093 * C21124) * C54885 +
            (C13261 * C21605 - C89093 * C21606) * C54751) *
               C38294) *
              C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eezy[24] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                C54884 +
            (C38293 * C627 - C38365 * C565 + C38294 * C1515 - C38366 * C1425) *
                C54750 +
            (C72766 - C72767 + C72768 - C72769) * C54885 +
            (C73398 - C73399 + C73400 - C73401) * C54751) *
               C89093 * C89153 * C5073 +
           ((C38365 * C819 - C38293 * C923 + C38366 * C820 - C38294 * C926) *
                C54884 +
            (C38365 * C1425 - C38293 * C1515 + C38366 * C1428 -
             C38294 * C1518) *
                C54750 +
            (C75547 - C75548 + C75549 - C75550) * C54885 +
            (C76373 - C76374 + C76375 - C76376) * C54751) *
               C89093 * C89153 * C89189) *
              C5075 +
          (((C38369 - C38368 + C38371 - C38370) * C54884 +
            (C38833 - C38832 + C38835 - C38834) * C54750 +
            (C40163 - C40164 + C40165 - C40166) * C54885 +
            (C40801 - C40802 + C40803 - C40804) * C54751) *
               C89093 * C89153 * C5073 +
           ((C39169 - C39168 + C39171 - C39170) * C54884 +
            (C39858 - C39857 + C39860 - C39859) * C54750 +
            (C43055 - C43056 + C43057 - C43058) * C54885 +
            (C43887 - C43888 + C43889 - C43890) * C54751) *
               C89093 * C89153 * C89189) *
              C5076 +
          (((C38377 - C38376 + C38379 - C38378) * C54884 +
            (C38837 - C38836 + C38839 - C38838) * C54750 +
            (C42053 - C42054 + C42055 - C42056) * C54885 +
            (C42663 - C42664 + C42665 - C42666) * C54751) *
               C89093 * C89153 * C5073 +
           ((C41129 - C41128 + C41131 - C41130) * C54884 +
            (C41754 - C41753 + C41756 - C41755) * C54750 +
            (C38365 * C4099 - C38293 * C4213 + C38366 * C8514 -
             C38294 * C8602) *
                C54885 +
            (C38365 * C4769 - C38293 * C4875 + C38366 * C8996 -
             C38294 * C9076) *
                C54751) *
               C89093 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
               C54884 +
           (C38293 * C627 - C38365 * C565 + C38294 * C1515 - C38366 * C1425) *
               C54750 +
           (C72766 - C72767 + C72768 - C72769) * C54885 +
           (C73398 - C73399 + C73400 - C73401) * C54751) *
              C89093 * C89153 * C5720 +
          ((C38365 * C819 - C38293 * C923 + C38366 * C820 - C38294 * C926) *
               C54884 +
           (C38365 * C1425 - C38293 * C1515 + C38366 * C1428 - C38294 * C1518) *
               C54750 +
           (C75547 - C75548 + C75549 - C75550) * C54885 +
           (C76373 - C76374 + C76375 - C76376) * C54751) *
              C89093 * C89153 * C5721 +
          ((C38293 * C926 - C38365 * C820 + C38294 * C5787 - C38366 * C5727) *
               C54884 +
           (C38293 * C1518 - C38365 * C1428 + C38294 * C6117 - C38366 * C6061) *
               C54750 +
           (C38293 * C8600 - C38365 * C8516 + C38294 * C16821 -
            C38366 * C16683) *
               C54885 +
           (C38293 * C9074 - C38365 * C8994 + C38294 * C17471 -
            C38366 * C17361) *
               C54751) *
              C89093 * C89153 * C5722 +
          ((C38365 * C5727 - C38293 * C5787 + C38366 * C13743 -
            C38294 * C13873) *
               C54884 +
           (C38365 * C6061 - C38293 * C6117 + C38366 * C14323 -
            C38294 * C14421) *
               C54750 +
           (C38365 * C16683 - C38293 * C16821 + C38366 * C21123 -
            C38294 * C21209) *
               C54885 +
           (C38365 * C17361 - C38293 * C17471 + C38366 * C21605 -
            C38294 * C21687) *
               C54751) *
              C89093 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eezz[24] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C54884 * C264 - C55318 * C106 - C54884 * C565 + C54750 * C700 +
             C54885 * C1934 - C55319 * C1724 - C54885 * C2330 +
             C54751 * C2512) *
                C38293 +
            (C72566 + C72567) * C38294) *
               C89093 * C89153 * C5073 -
           ((C72568 + C72569) * C38294 + (C72567 + C72566) * C38293) * C89093 *
               C89153 * C89189) *
              C5075 +
          (((C56307 + C56306) * C38293 + (C56308 + C56309) * C38294) * C89093 *
               C89153 * C89189 -
           ((C56306 + C56307) * C38294 + (C55358 + C55357) * C38293) * C89093 *
               C89153 * C5073) *
              C5076 +
          (((C55360 + C55359) * C38293 + (C58271 + C58272) * C38294) * C89093 *
               C89153 * C5073 -
           ((C54885 * C8682 - C55319 * C8514 - C54885 * C8996 + C54751 * C9151 +
             C54884 * C1034 - C55318 * C822 - C54884 * C1430 + C54750 * C1610) *
                C38294 +
            (C58272 + C58271) * C38293) *
               C89093 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C54884 * C264 - C55318 * C106 - C54884 * C565 + C54750 * C700 +
            C54885 * C1934 - C55319 * C1724 - C54885 * C2330 + C54751 * C2512) *
               C38293 +
           (C72566 + C72567) * C38294) *
              C89093 * C89153 * C5720 -
          ((C72568 + C72569) * C38294 + (C72567 + C72566) * C38293) * C89093 *
              C89153 * C5721 +
          ((C72569 + C72568) * C38293 + (C78023 + C78024) * C38294) * C89093 *
              C89153 * C5722 -
          ((C54885 * C21285 - C55319 * C21123 - C54885 * C21605 +
            C54751 * C21762 + C54884 * C13951 - C55318 * C13743 -
            C54884 * C14323 + C54750 * C14497) *
               C38294 +
           (C78024 + C78023) * C38293) *
              C89093 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eexx[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                  C54750 +
              C27042 * C54751) *
                 C38293 +
             (C71726 + C71727) * C38294) *
                C9228 -
            ((C75413 + C75414) * C38294 +
             (C27043 * C54751 + C27042 * C54750) * C38293) *
                C89217) *
               C89307 +
           (((C75414 + C75413) * C38293 + (C81114 + C81115) * C38294) * C89217 -
            ((C71728 + C71729) * C38294 + (C71727 + C71726) * C38293) * C9228) *
               C89189) *
              C89299 +
          ((((C27045 * C54750 + C27046 * C54751) * C38293 +
             (C75415 + C75416) * C38294) *
                C89217 -
            ((C71731 + C71730) * C38294 +
             (C27045 * C54751 +
              (C13261 * C114 - C13262 * C107 - C13261 * C115 + C89093 * C125) *
                  C54750) *
                 C38293) *
                C9228) *
               C89307 +
           (((C71730 + C71731) * C38293 + (C71732 + C71733) * C38294) * C9228 -
            (((C13261 * C14605 - C13262 * C14602 - C13261 * C14606 +
               C89093 * C14608) *
                  C54751 +
              C16719 * C54750) *
                 C38294 +
             (C75416 + C75415) * C38293) *
                C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eexy[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                  C13261 +
              (C38293 * C187 - C38365 * C113 + C38294 * C931 - C38366 * C830) *
                  C89093) *
                 C54750 +
             ((C72766 - C72767 + C72768 - C72769) * C13261 +
              (C72770 - C72771 + C72772 - C72773) * C89093) *
                 C54751) *
                C9228 +
            (((C72767 - C72766 + C72769 - C72768) * C13261 +
              (C72771 - C72770 + C72773 - C72772) * C89093) *
                 C54750 +
             ((C72774 - C72775 + C72776 - C72777) * C13261 +
              (C72778 - C72779 + C72780 - C72781) * C89093) *
                 C54751) *
                C89217) *
               C89307 +
           ((((C38365 * C819 - C38293 * C923 + C38366 * C820 - C38294 * C926) *
                  C13261 +
              (C38365 * C830 - C38293 * C931 + C38366 * C832 - C38294 * C934) *
                  C89093) *
                 C54750 +
             ((C75547 - C75548 + C75549 - C75550) * C13261 +
              (C75551 - C75552 + C75553 - C75554) * C89093) *
                 C54751) *
                C9228 +
            (((C75548 - C75547 + C75550 - C75549) * C13261 +
              (C75552 - C75551 + C75554 - C75553) * C89093) *
                 C54750 +
             ((C78223 - C78224 + C78225 - C78226) * C13261 +
              (C78227 - C78228 + C78229 - C78230) * C89093) *
                 C54751) *
                C89217) *
               C89189) *
              C89299 +
          (((((C38369 - C38368 + C38371 - C38370) * C13261 +
              (C38373 - C38372 + C38375 - C38374) * C89093) *
                 C54750 +
             ((C40163 - C40164 + C40165 - C40166) * C13261 +
              (C40167 - C40168 + C40169 - C40170) * C89093) *
                 C54751) *
                C9228 +
            (((C40164 - C40163 + C40166 - C40165) * C13261 +
              (C40168 - C40167 + C40170 - C40169) * C89093) *
                 C54750 +
             ((C40171 - C40172 + C40173 - C40174) * C13261 +
              (C40175 - C40176 + C40177 - C40178) * C89093) *
                 C54751) *
                C89217) *
               C89307 +
           ((((C39169 - C39168 + C39171 - C39170) * C13261 +
              (C39173 - C39172 + C39175 - C39174) * C89093) *
                 C54750 +
             ((C43055 - C43056 + C43057 - C43058) * C13261 +
              (C43059 - C43060 + C43061 - C43062) * C89093) *
                 C54751) *
                C9228 +
            (((C43056 - C43055 + C43058 - C43057) * C13261 +
              (C43060 - C43059 + C43062 - C43061) * C89093) *
                 C54750 +
             ((C38365 * C6248 - C38293 * C6334 + C38366 * C14602 -
               C38294 * C14684) *
                  C13261 +
              (C38365 * C6253 - C38293 * C6337 + C38366 * C14606 -
               C38294 * C14686) *
                  C89093) *
                 C54751) *
                C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eexz[25] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((((C54750 * C264 - C54884 * C106 + C54751 * C1934 -
                         C54885 * C1724) *
                            C13261 +
                        (C54750 * C270 - C54884 * C113 + C54751 * C1942 -
                         C54885 * C1735) *
                            C89093) *
                           C38293 +
                       ((C71930 - C71931 + C71932 - C71933) * C13261 +
                        (C71934 - C71935 + C71936 - C71937) * C89093) *
                           C38294) *
                          C9228 +
                      (((C54884 * C1724 - C54750 * C1934 + C54885 * C1725 -
                         C54751 * C1937) *
                            C13261 +
                        (C54884 * C1735 - C54750 * C1942 + C54885 * C1737 -
                         C54751 * C1945) *
                            C89093) *
                           C38293 +
                       ((C75685 - C75686 + C75687 - C75688) * C13261 +
                        (C75689 - C75690 + C75691 - C75692) * C89093) *
                           C38294) *
                          C89217) *
                         C89307 +
                     ((((C71931 - C71930 + C71933 - C71932) * C13261 +
                        (C71935 - C71934 + C71937 - C71936) * C89093) *
                           C38293 +
                       ((C71938 - C71939 + C71940 - C71941) * C13261 +
                        (C71942 - C71943 + C71944 - C71945) * C89093) *
                           C38294) *
                          C9228 +
                      (((C75686 - C75685 + C75688 - C75687) * C13261 +
                        (C75690 - C75689 + C75692 - C75691) * C89093) *
                           C38293 +
                       ((C81320 - C81321 + C81322 - C81323) * C13261 +
                        (C81324 - C81325 + C81326 - C81327) * C89093) *
                           C38294) *
                          C89217) *
                         C89189) *
                        C89299 +
                    (((((C54888 - C54887 + C54890 - C54889) * C13261 +
                        (C54892 - C54891 + C54894 - C54893) * C89093) *
                           C38293 +
                       ((C55661 - C55662 + C55663 - C55664) * C13261 +
                        (C55665 - C55666 + C55667 - C55668) * C89093) *
                           C38294) *
                          C9228 +
                      (((C56667 - C56666 + C56669 - C56668) * C13261 +
                        (C56671 - C56670 + C56673 - C56672) * C89093) *
                           C38293 +
                       ((C59606 - C59607 + C59608 - C59609) * C13261 +
                        (C59610 - C59611 + C59612 - C59613) * C89093) *
                           C38294) *
                          C89217) *
                         C89307 +
                     ((((C55662 - C55661 + C55664 - C55663) * C13261 +
                        (C55666 - C55665 + C55668 - C55667) * C89093) *
                           C38293 +
                       ((C55669 - C55670 + C55671 - C55672) * C13261 +
                        (C55673 - C55674 + C55675 - C55676) * C89093) *
                           C38294) *
                          C9228 +
                      (((C59607 - C59606 + C59609 - C59608) * C13261 +
                        (C59611 - C59610 + C59613 - C59612) * C89093) *
                           C38293 +
                       ((C54884 * C8515 - C54750 * C8681 + C54885 * C14602 -
                         C54751 * C14762) *
                            C13261 +
                        (C54884 * C8520 - C54750 * C8684 + C54885 * C14606 -
                         C54751 * C14764) *
                            C89093) *
                           C38294) *
                          C89217) *
                         C89189) *
                        C89124)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C89093 * C112 - C13261 * C106) * C38365 +
              (C89093 * C352 - C13261 * C346) * C38293 +
              (C14060 - C14061) * C38366 + (C14062 - C14063) * C38294) *
                 C54750 +
             ((C27308 - C27309) * C38365 + (C27310 - C27311) * C38293 +
              C75823 * C38366 + C75824 * C38294) *
                 C54751) *
                C9228 +
            (((C27309 - C27308) * C38365 + (C27311 - C27310) * C38293 +
              C75825 * C38366 + C75826 * C38294) *
                 C54750 +
             ((C27313 - C27312) * C38365 + (C27315 - C27314) * C38293 +
              C31534 * C38366 + C31535 * C38294) *
                 C54751) *
                C89217) *
               C89307 +
           ((((C14061 - C14060) * C38365 + (C14063 - C14062) * C38293 +
              (C14065 - C14064) * C38366 + (C14067 - C14066) * C38294) *
                 C54750 +
             (C75825 * C38365 + C75826 * C38293 + C21373 * C38366 +
              C21374 * C38294) *
                 C54751) *
                C9228 +
            ((C75823 * C38365 + C75824 * C38293 + C81426 * C38366 +
              C81427 * C38294) *
                 C54750 +
             (C78435 * C38365 + C78436 * C38293 + (C19100 - C19101) * C38366 +
              (C19102 - C19103) * C38294) *
                 C54751) *
                C89217) *
               C89189) *
              C89299 +
          (((((C13261 * C107 - C89093 * C114) * C38365 +
              (C13261 * C347 - C89093 * C353) * C38293 +
              (C14072 - C14073) * C38366 + (C14074 - C14075) * C38294) *
                 C54750 +
             ((C27320 - C27321) * C38365 + (C27322 - C27323) * C38293 +
              C75827 * C38366 + C75828 * C38294) *
                 C54751) *
                C9228 +
            (((C27321 - C27320) * C38365 + (C27323 - C27322) * C38293 +
              C75829 * C38366 + C75830 * C38294) *
                 C54750 +
             ((C27325 - C27324) * C38365 + (C27327 - C27326) * C38293 +
              (C29563 - C29564) * C38366 + (C29565 - C29566) * C38294) *
                 C54751) *
                C89217) *
               C89307 +
           ((((C14073 - C14072) * C38365 + (C14075 - C14074) * C38293 +
              (C14077 - C14076) * C38366 + (C14079 - C14078) * C38294) *
                 C54750 +
             (C75829 * C38365 + C75830 * C38293 + (C17054 - C17055) * C38366 +
              (C17056 - C17057) * C38294) *
                 C54751) *
                C9228 +
            ((C75827 * C38365 + C75828 * C38293 + (C17055 - C17054) * C38366 +
              (C17057 - C17056) * C38294) *
                 C54750 +
             ((C29564 - C29563) * C38365 + (C29566 - C29565) * C38293 +
              (C13261 * C14602 - C89093 * C14605) * C38366 +
              (C13261 * C14840 - C89093 * C14842) * C38294) *
                 C54751) *
                C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C38365 * C181 - C38589 * C106 - C38365 * C346 + C38293 * C409 +
              C38366 * C923 - C38590 * C819 - C38366 * C1135 + C38294 * C1227) *
                 C89093 * C54750 +
             (C73100 + C73101) * C89093 * C54751) *
                C9228 -
            ((C73102 + C73103) * C89093 * C54751 +
             (C73101 + C73100) * C89093 * C54750) *
                C89217) *
               C89307 +
           (((C75973 + C75974) * C89093 * C54750 +
             (C78547 + C78548) * C89093 * C54751) *
                C89217 -
            ((C75974 + C75973) * C89093 * C54751 +
             (C38366 * C926 - C38590 * C820 - C38366 * C1138 + C38294 * C1228 +
              C38365 * C923 - C38589 * C819 - C38365 * C1135 + C38293 * C1227) *
                 C89093 * C54750) *
                C9228) *
               C89189) *
              C89299 +
          ((((C40502 + C40501) * C89093 * C54750 +
             (C40503 + C40504) * C89093 * C54751) *
                C89217 -
            ((C40501 + C40502) * C89093 * C54751 +
             (C38629 + C38628) * C89093 * C54750) *
                C9228) *
               C89307 +
           (((C39541 + C39540) * C89093 * C54750 +
             (C43485 + C43486) * C89093 * C54751) *
                C9228 -
            ((C38366 * C14684 - C38590 * C14602 - C38366 * C14840 +
              C38294 * C14918 + C38365 * C6334 - C38589 * C6248 -
              C38365 * C6494 + C38293 * C6574) *
                 C89093 * C54751 +
             (C43486 + C43485) * C89093 * C54750) *
                C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                 C38365 +
             (C54750 * C493 - C54884 * C346 + C54751 * C2240 - C54885 * C2040) *
                 C38293 +
             (C71930 - C71931 + C71932 - C71933) * C38366 +
             (C72240 - C72241 + C72242 - C72243) * C38294) *
                C89093 * C9228 +
            ((C54884 * C1724 - C54750 * C1934 + C54885 * C1725 -
              C54751 * C1937) *
                 C38365 +
             (C54884 * C2040 - C54750 * C2240 + C54885 * C2043 -
              C54751 * C2243) *
                 C38293 +
             (C75685 - C75686 + C75687 - C75688) * C38366 +
             (C76105 - C76106 + C76107 - C76108) * C38294) *
                C89093 * C89217) *
               C89307 +
           (((C71931 - C71930 + C71933 - C71932) * C38365 +
             (C72241 - C72240 + C72243 - C72242) * C38293 +
             (C71938 - C71939 + C71940 - C71941) * C38366 +
             (C72244 - C72245 + C72246 - C72247) * C38294) *
                C89093 * C9228 +
            ((C75686 - C75685 + C75688 - C75687) * C38365 +
             (C76106 - C76105 + C76108 - C76107) * C38293 +
             (C81320 - C81321 + C81322 - C81323) * C38366 +
             (C81638 - C81639 + C81640 - C81641) * C38294) *
                C89093 * C89217) *
               C89189) *
              C89299 +
          ((((C54888 - C54887 + C54890 - C54889) * C38365 +
             (C55110 - C55109 + C55112 - C55111) * C38293 +
             (C55661 - C55662 + C55663 - C55664) * C38366 +
             (C55978 - C55979 + C55980 - C55981) * C38294) *
                C89093 * C9228 +
            ((C56667 - C56666 + C56669 - C56668) * C38365 +
             (C57017 - C57016 + C57019 - C57018) * C38293 +
             (C59606 - C59607 + C59608 - C59609) * C38366 +
             (C60008 - C60009 + C60010 - C60011) * C38294) *
                C89093 * C89217) *
               C89307 +
           (((C55662 - C55661 + C55664 - C55663) * C38365 +
             (C55979 - C55978 + C55981 - C55980) * C38293 +
             (C55669 - C55670 + C55671 - C55672) * C38366 +
             (C55982 - C55983 + C55984 - C55985) * C38294) *
                C89093 * C9228 +
            ((C59607 - C59606 + C59609 - C59608) * C38365 +
             (C60009 - C60008 + C60011 - C60010) * C38293 +
             (C54884 * C8515 - C54750 * C8681 + C54885 * C14602 -
              C54751 * C14762) *
                 C38366 +
             (C54884 * C8761 - C54750 * C8918 + C54885 * C14840 -
              C54751 * C14994) *
                 C38294) *
                C89093 * C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eezx[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C89093 * C112 - C13261 * C106) * C54884 +
              (C89093 * C571 - C13261 * C565) * C54750 +
              (C27308 - C27309) * C54885 + (C27606 - C27607) * C54751) *
                 C38293 +
             ((C14060 - C14061) * C54884 + (C14328 - C14329) * C54750 +
              C75823 * C54885 + C76239 * C54751) *
                 C38294) *
                C9228 +
            (((C27309 - C27308) * C54884 + (C27607 - C27606) * C54750 +
              (C27313 - C27312) * C54885 + (C27609 - C27608) * C54751) *
                 C38293 +
             (C75825 * C54884 + C76240 * C54750 + C31534 * C54885 +
              C31777 * C54751) *
                 C38294) *
                C89217) *
               C89307 +
           ((((C14061 - C14060) * C54884 + (C14329 - C14328) * C54750 +
              C75825 * C54885 + C76240 * C54751) *
                 C38293 +
             ((C14065 - C14064) * C54884 + (C14332 - C14331) * C54750 +
              C21373 * C54885 + C21609 * C54751) *
                 C38294) *
                C9228 +
            ((C75823 * C54884 + C76239 * C54750 + C78435 * C54885 +
              C78749 * C54751) *
                 C38293 +
             (C81426 * C54884 + C81740 * C54750 + (C19100 - C19101) * C54885 +
              (C19336 - C19337) * C54751) *
                 C38294) *
                C89217) *
               C89189) *
              C89299 +
          (((((C13261 * C107 - C89093 * C114) * C54884 +
              (C13261 * C566 - C89093 * C572) * C54750 +
              (C27320 - C27321) * C54885 + (C27612 - C27613) * C54751) *
                 C38293 +
             ((C14072 - C14073) * C54884 + (C14335 - C14336) * C54750 +
              C75827 * C54885 + C76241 * C54751) *
                 C38294) *
                C9228 +
            (((C27321 - C27320) * C54884 + (C27613 - C27612) * C54750 +
              (C27325 - C27324) * C54885 + (C27615 - C27614) * C54751) *
                 C38293 +
             (C75829 * C54884 + C76242 * C54750 + (C29563 - C29564) * C54885 +
              (C29890 - C29891) * C54751) *
                 C38294) *
                C89217) *
               C89307 +
           ((((C14073 - C14072) * C54884 + (C14336 - C14335) * C54750 +
              C75829 * C54885 + C76242 * C54751) *
                 C38293 +
             ((C14077 - C14076) * C54884 + (C14339 - C14338) * C54750 +
              (C17054 - C17055) * C54885 + (C17372 - C17373) * C54751) *
                 C38294) *
                C9228 +
            ((C75827 * C54884 + C76241 * C54750 + (C29564 - C29563) * C54885 +
              (C29891 - C29890) * C54751) *
                 C38293 +
             ((C17055 - C17054) * C54884 + (C17373 - C17372) * C54750 +
              (C13261 * C14602 - C89093 * C14605) * C54885 +
              (C13261 * C15070 - C89093 * C15072) * C54751) *
                 C38294) *
                C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eezy[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                 C54884 +
             (C38293 * C627 - C38365 * C565 + C38294 * C1515 - C38366 * C1425) *
                 C54750 +
             (C72766 - C72767 + C72768 - C72769) * C54885 +
             (C73398 - C73399 + C73400 - C73401) * C54751) *
                C89093 * C9228 +
            ((C72767 - C72766 + C72769 - C72768) * C54884 +
             (C73399 - C73398 + C73401 - C73400) * C54750 +
             (C72774 - C72775 + C72776 - C72777) * C54885 +
             (C73402 - C73403 + C73404 - C73405) * C54751) *
                C89093 * C89217) *
               C89307 +
           (((C38365 * C819 - C38293 * C923 + C38366 * C820 - C38294 * C926) *
                 C54884 +
             (C38365 * C1425 - C38293 * C1515 + C38366 * C1428 -
              C38294 * C1518) *
                 C54750 +
             (C75547 - C75548 + C75549 - C75550) * C54885 +
             (C76373 - C76374 + C76375 - C76376) * C54751) *
                C89093 * C9228 +
            ((C75548 - C75547 + C75550 - C75549) * C54884 +
             (C76374 - C76373 + C76376 - C76375) * C54750 +
             (C78223 - C78224 + C78225 - C78226) * C54885 +
             (C78848 - C78849 + C78850 - C78851) * C54751) *
                C89093 * C89217) *
               C89189) *
              C89299 +
          ((((C38369 - C38368 + C38371 - C38370) * C54884 +
             (C38833 - C38832 + C38835 - C38834) * C54750 +
             (C40163 - C40164 + C40165 - C40166) * C54885 +
             (C40801 - C40802 + C40803 - C40804) * C54751) *
                C89093 * C9228 +
            ((C40164 - C40163 + C40166 - C40165) * C54884 +
             (C40802 - C40801 + C40804 - C40803) * C54750 +
             (C40171 - C40172 + C40173 - C40174) * C54885 +
             (C40805 - C40806 + C40807 - C40808) * C54751) *
                C89093 * C89217) *
               C89307 +
           (((C39169 - C39168 + C39171 - C39170) * C54884 +
             (C39858 - C39857 + C39860 - C39859) * C54750 +
             (C43055 - C43056 + C43057 - C43058) * C54885 +
             (C43887 - C43888 + C43889 - C43890) * C54751) *
                C89093 * C9228 +
            ((C43056 - C43055 + C43058 - C43057) * C54884 +
             (C43888 - C43887 + C43890 - C43889) * C54750 +
             (C38365 * C6248 - C38293 * C6334 + C38366 * C14602 -
              C38294 * C14684) *
                 C54885 +
             (C38365 * C6728 - C38293 * C6808 + C38366 * C15070 -
              C38294 * C15148) *
                 C54751) *
                C89093 * C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eezz[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C54884 * C264 - C55318 * C106 - C54884 * C565 + C54750 * C700 +
              C54885 * C1934 - C55319 * C1724 - C54885 * C2330 +
              C54751 * C2512) *
                 C38293 +
             (C72566 + C72567) * C38294) *
                C89093 * C9228 -
            ((C76519 + C76520) * C38294 +
             (C54885 * C1937 - C55319 * C1725 - C54885 * C2333 +
              C54751 * C2513 + C54884 * C1934 - C55318 * C1724 -
              C54884 * C2330 + C54750 * C2512) *
                 C38293) *
                C89093 * C89217) *
               C89307 +
           (((C76520 + C76519) * C38293 + (C81953 + C81954) * C38294) * C89093 *
                C89217 -
            ((C72568 + C72569) * C38294 + (C72567 + C72566) * C38293) * C89093 *
                C9228) *
               C89189) *
              C89299 +
          ((((C57362 + C57361) * C38293 + (C60416 + C60417) * C38294) * C89093 *
                C89217 -
            ((C56306 + C56307) * C38294 + (C55358 + C55357) * C38293) * C89093 *
                C9228) *
               C89307 +
           (((C56307 + C56306) * C38293 + (C56308 + C56309) * C38294) * C89093 *
                C9228 -
            ((C54885 * C14762 - C55319 * C14602 - C54885 * C15070 +
              C54751 * C15224 + C54884 * C8681 - C55318 * C8515 -
              C54884 * C8995 + C54750 * C9152) *
                 C38294 +
             (C60417 + C60416) * C38293) *
                C89093 * C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eexx[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                 C54750 +
             C27042 * C54751) *
                C38293 +
            (C71726 + C71727) * C38294) *
               C89337 -
           ((C75413 + C75414) * C38294 +
            (C27043 * C54751 + C27042 * C54750) * C38293) *
               C89338 +
           ((C27043 * C54750 + C27044 * C54751) * C38293 +
            (C78123 + C78124) * C38294) *
               C11948) *
              C89307 +
          (((C75414 + C75413) * C38293 + (C81114 + C81115) * C38294) * C89338 -
           ((C71728 + C71729) * C38294 + (C71727 + C71726) * C38293) * C89337 -
           (((C13261 * C23154 - C13262 * C23152 - C13261 * C23155 +
              C89093 * C23158) *
                 C54751 +
             C18857 * C54750) *
                C38294 +
            (C78124 + C78123) * C38293) *
               C11948) *
              C89189) *
         C89118) /
        (p * q * std::sqrt(p + q));
    d2eexy[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                 C13261 +
             (C38293 * C187 - C38365 * C113 + C38294 * C931 - C38366 * C830) *
                 C89093) *
                C54750 +
            ((C72766 - C72767 + C72768 - C72769) * C13261 +
             (C72770 - C72771 + C72772 - C72773) * C89093) *
                C54751) *
               C89337 +
           (((C72767 - C72766 + C72769 - C72768) * C13261 +
             (C72771 - C72770 + C72773 - C72772) * C89093) *
                C54750 +
            ((C72774 - C72775 + C72776 - C72777) * C13261 +
             (C72778 - C72779 + C72780 - C72781) * C89093) *
                C54751) *
               C89338 +
           (((C72775 - C72774 + C72777 - C72776) * C13261 +
             (C72779 - C72778 + C72781 - C72780) * C89093) *
                C54750 +
            ((C83851 - C83852 + C83853 - C83854) * C13261 +
             (C83855 - C83856 + C83857 - C83858) * C89093) *
                C54751) *
               C11948) *
              C89307 +
          ((((C38365 * C819 - C38293 * C923 + C38366 * C820 - C38294 * C926) *
                 C13261 +
             (C38365 * C830 - C38293 * C931 + C38366 * C832 - C38294 * C934) *
                 C89093) *
                C54750 +
            ((C75547 - C75548 + C75549 - C75550) * C13261 +
             (C75551 - C75552 + C75553 - C75554) * C89093) *
                C54751) *
               C89337 +
           (((C75548 - C75547 + C75550 - C75549) * C13261 +
             (C75552 - C75551 + C75554 - C75553) * C89093) *
                C54750 +
            ((C78223 - C78224 + C78225 - C78226) * C13261 +
             (C78227 - C78228 + C78229 - C78230) * C89093) *
                C54751) *
               C89338 +
           (((C78224 - C78223 + C78226 - C78225) * C13261 +
             (C78228 - C78227 + C78230 - C78229) * C89093) *
                C54750 +
            ((C38365 * C23153 - C38293 * C23210 + C38366 * C23152 -
              C38294 * C23211) *
                 C13261 +
             (C38365 * C23157 - C38293 * C23212 + C38366 * C23155 -
              C38294 * C23213) *
                 C89093) *
                C54751) *
               C11948) *
              C89189) *
         C89118) /
        (p * q * std::sqrt(p + q));
    d2eexz[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                 C13261 +
             (C54750 * C270 - C54884 * C113 + C54751 * C1942 - C54885 * C1735) *
                 C89093) *
                C38293 +
            ((C71930 - C71931 + C71932 - C71933) * C13261 +
             (C71934 - C71935 + C71936 - C71937) * C89093) *
                C38294) *
               C89337 +
           (((C54884 * C1724 - C54750 * C1934 + C54885 * C1725 -
              C54751 * C1937) *
                 C13261 +
             (C54884 * C1735 - C54750 * C1942 + C54885 * C1737 -
              C54751 * C1945) *
                 C89093) *
                C38293 +
            ((C75685 - C75686 + C75687 - C75688) * C13261 +
             (C75689 - C75690 + C75691 - C75692) * C89093) *
                C38294) *
               C89338 +
           (((C54750 * C1937 - C54884 * C1725 + C54751 * C10660 -
              C54885 * C10544) *
                 C13261 +
             (C54750 * C1945 - C54884 * C1737 + C54751 * C10663 -
              C54885 * C10550) *
                 C89093) *
                C38293 +
            ((C78329 - C78330 + C78331 - C78332) * C13261 +
             (C78333 - C78334 + C78335 - C78336) * C89093) *
                C38294) *
               C11948) *
              C89307 +
          ((((C71931 - C71930 + C71933 - C71932) * C13261 +
             (C71935 - C71934 + C71937 - C71936) * C89093) *
                C38293 +
            ((C71938 - C71939 + C71940 - C71941) * C13261 +
             (C71942 - C71943 + C71944 - C71945) * C89093) *
                C38294) *
               C89337 +
           (((C75686 - C75685 + C75688 - C75687) * C13261 +
             (C75690 - C75689 + C75692 - C75691) * C89093) *
                C38293 +
            ((C81320 - C81321 + C81322 - C81323) * C13261 +
             (C81324 - C81325 + C81326 - C81327) * C89093) *
                C38294) *
               C89338 +
           (((C78330 - C78329 + C78332 - C78331) * C13261 +
             (C78334 - C78333 + C78336 - C78335) * C89093) *
                C38293 +
            ((C54884 * C14601 - C54750 * C14761 + C54885 * C23152 -
              C54751 * C23265) *
                 C13261 +
             (C54884 * C14604 - C54750 * C14763 + C54885 * C23155 -
              C54751 * C23267) *
                 C89093) *
                C38294) *
               C11948) *
              C89189) *
         C89118) /
        (p * q * std::sqrt(p + q));
    d2eeyx[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C38365 +
             (C89093 * C352 - C13261 * C346) * C38293 +
             (C14060 - C14061) * C38366 + (C14062 - C14063) * C38294) *
                C54750 +
            ((C27308 - C27309) * C38365 + (C27310 - C27311) * C38293 +
             C75823 * C38366 + C75824 * C38294) *
                C54751) *
               C89337 +
           (((C27309 - C27308) * C38365 + (C27311 - C27310) * C38293 +
             C75825 * C38366 + C75826 * C38294) *
                C54750 +
            ((C27313 - C27312) * C38365 + (C27315 - C27314) * C38293 +
             C31534 * C38366 + C31535 * C38294) *
                C54751) *
               C89338 +
           ((C27332 * C38365 + C27333 * C38293 + C78435 * C38366 +
             C78436 * C38294) *
                C54750 +
            ((C27317 - C27316) * C38365 + (C27319 - C27318) * C38293 +
             (C31536 - C31537) * C38366 + (C31538 - C31539) * C38294) *
                C54751) *
               C11948) *
              C89307 +
          ((((C14061 - C14060) * C38365 + (C14063 - C14062) * C38293 +
             (C14065 - C14064) * C38366 + (C14067 - C14066) * C38294) *
                C54750 +
            (C75825 * C38365 + C75826 * C38293 + C21373 * C38366 +
             C21374 * C38294) *
                C54751) *
               C89337 +
           ((C75823 * C38365 + C75824 * C38293 + C81426 * C38366 +
             C81427 * C38294) *
                C54750 +
            (C78435 * C38365 + C78436 * C38293 + (C19100 - C19101) * C38366 +
             (C19102 - C19103) * C38294) *
                C54751) *
               C89338 +
           ((C31534 * C38365 + C31535 * C38293 + (C19101 - C19100) * C38366 +
             (C19103 - C19102) * C38294) *
                C54750 +
            ((C31537 - C31536) * C38365 + (C31539 - C31538) * C38293 +
             (C13261 * C23152 - C89093 * C23154) * C38366 +
             (C13261 * C23319 - C89093 * C23321) * C38294) *
                C54751) *
               C11948) *
              C89189) *
         C89118) /
        (p * q * std::sqrt(p + q));
    d2eeyy[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C38365 * C181 - C38589 * C106 - C38365 * C346 + C38293 * C409 +
             C38366 * C923 - C38590 * C819 - C38366 * C1135 + C38294 * C1227) *
                C89093 * C54750 +
            (C73100 + C73101) * C89093 * C54751) *
               C89337 -
           ((C73102 + C73103) * C89093 * C54751 +
            (C73101 + C73100) * C89093 * C54750) *
               C89338 +
           ((C73103 + C73102) * C89093 * C54750 +
            (C84069 + C84070) * C89093 * C54751) *
               C11948) *
              C89307 +
          (((C75973 + C75974) * C89093 * C54750 +
            (C78547 + C78548) * C89093 * C54751) *
               C89338 -
           ((C75974 + C75973) * C89093 * C54751 +
            (C38366 * C926 - C38590 * C820 - C38366 * C1138 + C38294 * C1228 +
             C38365 * C923 - C38589 * C819 - C38365 * C1135 + C38293 * C1227) *
                C89093 * C54750) *
               C89337 -
           ((C38366 * C23211 - C38590 * C23152 - C38366 * C23319 +
             C38294 * C23372 + C38365 * C23210 - C38589 * C23153 -
             C38365 * C23318 + C38293 * C23373) *
                C89093 * C54751 +
            (C78548 + C78547) * C89093 * C54750) *
               C11948) *
              C89189) *
         C89118) /
        (p * q * std::sqrt(p + q));
    d2eeyz[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                C38365 +
            (C54750 * C493 - C54884 * C346 + C54751 * C2240 - C54885 * C2040) *
                C38293 +
            (C71930 - C71931 + C71932 - C71933) * C38366 +
            (C72240 - C72241 + C72242 - C72243) * C38294) *
               C89093 * C89337 +
           ((C54884 * C1724 - C54750 * C1934 + C54885 * C1725 -
             C54751 * C1937) *
                C38365 +
            (C54884 * C2040 - C54750 * C2240 + C54885 * C2043 -
             C54751 * C2243) *
                C38293 +
            (C75685 - C75686 + C75687 - C75688) * C38366 +
            (C76105 - C76106 + C76107 - C76108) * C38294) *
               C89093 * C89338 +
           ((C54750 * C1937 - C54884 * C1725 + C54751 * C10660 -
             C54885 * C10544) *
                C38365 +
            (C54750 * C2243 - C54884 * C2043 + C54751 * C10825 -
             C54885 * C10716) *
                C38293 +
            (C78329 - C78330 + C78331 - C78332) * C38366 +
            (C78647 - C78648 + C78649 - C78650) * C38294) *
               C89093 * C11948) *
              C89307 +
          (((C71931 - C71930 + C71933 - C71932) * C38365 +
            (C72241 - C72240 + C72243 - C72242) * C38293 +
            (C71938 - C71939 + C71940 - C71941) * C38366 +
            (C72244 - C72245 + C72246 - C72247) * C38294) *
               C89093 * C89337 +
           ((C75686 - C75685 + C75688 - C75687) * C38365 +
            (C76106 - C76105 + C76108 - C76107) * C38293 +
            (C81320 - C81321 + C81322 - C81323) * C38366 +
            (C81638 - C81639 + C81640 - C81641) * C38294) *
               C89093 * C89338 +
           ((C78330 - C78329 + C78332 - C78331) * C38365 +
            (C78648 - C78647 + C78650 - C78649) * C38293 +
            (C54884 * C14601 - C54750 * C14761 + C54885 * C23152 -
             C54751 * C23265) *
                C38366 +
            (C54884 * C14839 - C54750 * C14993 + C54885 * C23319 -
             C54751 * C23425) *
                C38294) *
               C89093 * C11948) *
              C89189) *
         C89118) /
        (p * q * std::sqrt(p + q));
    d2eezx[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C54884 +
             (C89093 * C571 - C13261 * C565) * C54750 +
             (C27308 - C27309) * C54885 + (C27606 - C27607) * C54751) *
                C38293 +
            ((C14060 - C14061) * C54884 + (C14328 - C14329) * C54750 +
             C75823 * C54885 + C76239 * C54751) *
                C38294) *
               C89337 +
           (((C27309 - C27308) * C54884 + (C27607 - C27606) * C54750 +
             (C27313 - C27312) * C54885 + (C27609 - C27608) * C54751) *
                C38293 +
            (C75825 * C54884 + C76240 * C54750 + C31534 * C54885 +
             C31777 * C54751) *
                C38294) *
               C89338 +
           ((C27332 * C54884 + C27618 * C54750 + (C27317 - C27316) * C54885 +
             (C27611 - C27610) * C54751) *
                C38293 +
            (C78435 * C54884 + C78749 * C54750 + (C31536 - C31537) * C54885 +
             (C31778 - C31779) * C54751) *
                C38294) *
               C11948) *
              C89307 +
          ((((C14061 - C14060) * C54884 + (C14329 - C14328) * C54750 +
             C75825 * C54885 + C76240 * C54751) *
                C38293 +
            ((C14065 - C14064) * C54884 + (C14332 - C14331) * C54750 +
             C21373 * C54885 + C21609 * C54751) *
                C38294) *
               C89337 +
           ((C75823 * C54884 + C76239 * C54750 + C78435 * C54885 +
             C78749 * C54751) *
                C38293 +
            (C81426 * C54884 + C81740 * C54750 + (C19100 - C19101) * C54885 +
             (C19336 - C19337) * C54751) *
                C38294) *
               C89338 +
           ((C31534 * C54884 + C31777 * C54750 + (C31537 - C31536) * C54885 +
             (C31779 - C31778) * C54751) *
                C38293 +
            ((C19101 - C19100) * C54884 + (C19337 - C19336) * C54750 +
             (C13261 * C23152 - C89093 * C23154) * C54885 +
             (C13261 * C23477 - C89093 * C23479) * C54751) *
                C38294) *
               C11948) *
              C89189) *
         C89118) /
        (p * q * std::sqrt(p + q));
    d2eezy[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                C54884 +
            (C38293 * C627 - C38365 * C565 + C38294 * C1515 - C38366 * C1425) *
                C54750 +
            (C72766 - C72767 + C72768 - C72769) * C54885 +
            (C73398 - C73399 + C73400 - C73401) * C54751) *
               C89093 * C89337 +
           ((C72767 - C72766 + C72769 - C72768) * C54884 +
            (C73399 - C73398 + C73401 - C73400) * C54750 +
            (C72774 - C72775 + C72776 - C72777) * C54885 +
            (C73402 - C73403 + C73404 - C73405) * C54751) *
               C89093 * C89338 +
           ((C72775 - C72774 + C72777 - C72776) * C54884 +
            (C73403 - C73402 + C73405 - C73404) * C54750 +
            (C83851 - C83852 + C83853 - C83854) * C54885 +
            (C84269 - C84270 + C84271 - C84272) * C54751) *
               C89093 * C11948) *
              C89307 +
          (((C38365 * C819 - C38293 * C923 + C38366 * C820 - C38294 * C926) *
                C54884 +
            (C38365 * C1425 - C38293 * C1515 + C38366 * C1428 -
             C38294 * C1518) *
                C54750 +
            (C75547 - C75548 + C75549 - C75550) * C54885 +
            (C76373 - C76374 + C76375 - C76376) * C54751) *
               C89093 * C89337 +
           ((C75548 - C75547 + C75550 - C75549) * C54884 +
            (C76374 - C76373 + C76376 - C76375) * C54750 +
            (C78223 - C78224 + C78225 - C78226) * C54885 +
            (C78848 - C78849 + C78850 - C78851) * C54751) *
               C89093 * C89338 +
           ((C78224 - C78223 + C78226 - C78225) * C54884 +
            (C78849 - C78848 + C78851 - C78850) * C54750 +
            (C38365 * C23153 - C38293 * C23210 + C38366 * C23152 -
             C38294 * C23211) *
                C54885 +
            (C38365 * C23476 - C38293 * C23530 + C38366 * C23477 -
             C38294 * C23531) *
                C54751) *
               C89093 * C11948) *
              C89189) *
         C89118) /
        (p * q * std::sqrt(p + q));
    d2eezz[26] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C54884 * C264 - C55318 * C106 - C54884 * C565 +
                       C54750 * C700 + C54885 * C1934 - C55319 * C1724 -
                       C54885 * C2330 + C54751 * C2512) *
                          C38293 +
                      (C72566 + C72567) * C38294) *
                         C89093 * C89337 -
                     ((C76519 + C76520) * C38294 +
                      (C54885 * C1937 - C55319 * C1725 - C54885 * C2333 +
                       C54751 * C2513 + C54884 * C1934 - C55318 * C1724 -
                       C54884 * C2330 + C54750 * C2512) *
                          C38293) *
                         C89093 * C89338 +
                     ((C54884 * C1937 - C55318 * C1725 - C54884 * C2333 +
                       C54750 * C2513 + C54885 * C10660 - C55319 * C10544 -
                       C54885 * C10878 + C54751 * C10989) *
                          C38293 +
                      (C78962 + C78963) * C38294) *
                         C89093 * C11948) *
                        C89307 +
                    (((C76520 + C76519) * C38293 + (C81953 + C81954) * C38294) *
                         C89093 * C89338 -
                     ((C72568 + C72569) * C38294 + (C72567 + C72566) * C38293) *
                         C89093 * C89337 -
                     ((C54885 * C23265 - C55319 * C23152 - C54885 * C23477 +
                       C54751 * C23582 + C54884 * C14761 - C55318 * C14601 -
                       C54884 * C15069 + C54750 * C15223) *
                          C38294 +
                      (C78963 + C78962) * C38293) *
                         C89093 * C11948) *
                        C89189) *
                   C89118) /
                  (p * q * std::sqrt(p + q));
    d2eexx[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                 C54750 +
             C27042 * C54751) *
                C38293 +
            (C71726 + C71727) * C38294) *
               C9228 -
           ((C75413 + C75414) * C38294 +
            (C27043 * C54751 + C27042 * C54750) * C38293) *
               C89217) *
              C812 +
          (((C75414 + C75413) * C38293 + (C81114 + C81115) * C38294) * C89217 -
           ((C71728 + C71729) * C38294 + (C71727 + C71726) * C38293) * C9228) *
              C813 +
          (((C71729 + C71728) * C38293 + (C77469 + C77470) * C38294) * C9228 -
           (((C13261 * C18840 - C13262 * C18839 - C13261 * C18841 +
              C89093 * C18842) *
                 C54751 +
             C21134 * C54750) *
                C38294 +
            (C81115 + C81114) * C38293) *
               C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                 C54750 +
             C27042 * C54751) *
                C38293 +
            (C71726 + C71727) * C38294) *
               C9228 -
           ((C75413 + C75414) * C38294 +
            (C27043 * C54751 + C27042 * C54750) * C38293) *
               C89217) *
              C89137 * C5075 +
          (((C27045 * C54750 + C27046 * C54751) * C38293 +
            (C75415 + C75416) * C38294) *
               C89217 -
           ((C71731 + C71730) * C38294 +
            (C27045 * C54751 +
             (C13261 * C114 - C13262 * C107 - C13261 * C115 + C89093 * C125) *
                 C54750) *
                C38293) *
               C9228) *
              C89137 * C5076 +
          ((((C13261 * C116 - C13262 * C108 - C13261 * C117 + C89093 * C126) *
                 C54750 +
             C28534 * C54751) *
                C38293 +
            (C73602 + C73610) * C38294) *
               C9228 -
           (((C13261 * C6250 - C13262 * C6247 - C13261 * C6251 +
              C89093 * C6256) *
                 C54751 +
             C73609 * C54750) *
                C38294 +
            (C28535 * C54751 + C28534 * C54750) * C38293) *
               C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                C54750 +
            C27042 * C54751) *
               C38293 +
           (C71726 + C71727) * C38294) *
              C10538 -
          ((C75413 + C75414) * C38294 +
           (C27043 * C54751 + C27042 * C54750) * C38293) *
              C10539 +
          ((C27043 * C54750 + C27044 * C54751) * C38293 +
           (C78123 + C78124) * C38294) *
              C10540 -
          (((C13261 * C31286 - C13262 * C31285 - C13261 * C31287 +
             C89093 * C31288) *
                C54751 +
            C31296 * C54750) *
               C38294 +
           (C35567 * C54751 + C27044 * C54750) * C38293) *
              C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q));
    d2eexy[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                 C13261 +
             (C38293 * C187 - C38365 * C113 + C38294 * C931 - C38366 * C830) *
                 C89093) *
                C54750 +
            ((C72766 - C72767 + C72768 - C72769) * C13261 +
             (C72770 - C72771 + C72772 - C72773) * C89093) *
                C54751) *
               C9228 +
           (((C72767 - C72766 + C72769 - C72768) * C13261 +
             (C72771 - C72770 + C72773 - C72772) * C89093) *
                C54750 +
            ((C72774 - C72775 + C72776 - C72777) * C13261 +
             (C72778 - C72779 + C72780 - C72781) * C89093) *
                C54751) *
               C89217) *
              C812 +
          ((((C38365 * C819 - C38293 * C923 + C38366 * C820 - C38294 * C926) *
                 C13261 +
             (C38365 * C830 - C38293 * C931 + C38366 * C832 - C38294 * C934) *
                 C89093) *
                C54750 +
            ((C75547 - C75548 + C75549 - C75550) * C13261 +
             (C75551 - C75552 + C75553 - C75554) * C89093) *
                C54751) *
               C9228 +
           (((C75548 - C75547 + C75550 - C75549) * C13261 +
             (C75552 - C75551 + C75554 - C75553) * C89093) *
                C54750 +
            ((C78223 - C78224 + C78225 - C78226) * C13261 +
             (C78227 - C78228 + C78229 - C78230) * C89093) *
                C54751) *
               C89217) *
              C813 +
          ((((C38293 * C926 - C38365 * C820 + C38294 * C5787 - C38366 * C5727) *
                 C13261 +
             (C38293 * C934 - C38365 * C832 + C38294 * C5790 - C38366 * C5733) *
                 C89093) *
                C54750 +
            ((C81214 - C81215 + C81216 - C81217) * C13261 +
             (C81218 - C81219 + C81220 - C81221) * C89093) *
                C54751) *
               C9228 +
           (((C81215 - C81214 + C81217 - C81216) * C13261 +
             (C81219 - C81218 + C81221 - C81220) * C89093) *
                C54750 +
            ((C38365 * C14601 - C38293 * C14683 + C38366 * C18839 -
              C38294 * C18933) *
                 C13261 +
             (C38365 * C14604 - C38293 * C14685 + C38366 * C18841 -
              C38294 * C18934) *
                 C89093) *
                C54751) *
               C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                 C13261 +
             (C38293 * C187 - C38365 * C113 + C38294 * C931 - C38366 * C830) *
                 C89093) *
                C54750 +
            ((C72766 - C72767 + C72768 - C72769) * C13261 +
             (C72770 - C72771 + C72772 - C72773) * C89093) *
                C54751) *
               C9228 +
           (((C72767 - C72766 + C72769 - C72768) * C13261 +
             (C72771 - C72770 + C72773 - C72772) * C89093) *
                C54750 +
            ((C72774 - C72775 + C72776 - C72777) * C13261 +
             (C72778 - C72779 + C72780 - C72781) * C89093) *
                C54751) *
               C89217) *
              C89137 * C5075 +
          ((((C38369 - C38368 + C38371 - C38370) * C13261 +
             (C38373 - C38372 + C38375 - C38374) * C89093) *
                C54750 +
            ((C40163 - C40164 + C40165 - C40166) * C13261 +
             (C40167 - C40168 + C40169 - C40170) * C89093) *
                C54751) *
               C9228 +
           (((C40164 - C40163 + C40166 - C40165) * C13261 +
             (C40168 - C40167 + C40170 - C40169) * C89093) *
                C54750 +
            ((C40171 - C40172 + C40173 - C40174) * C13261 +
             (C40175 - C40176 + C40177 - C40178) * C89093) *
                C54751) *
               C89217) *
              C89137 * C5076 +
          ((((C38377 - C38376 + C38379 - C38378) * C13261 +
             (C38381 - C38380 + C38383 - C38382) * C89093) *
                C54750 +
            ((C42053 - C42054 + C42055 - C42056) * C13261 +
             (C42057 - C42058 + C42059 - C42060) * C89093) *
                C54751) *
               C9228 +
           (((C42054 - C42053 + C42056 - C42055) * C13261 +
             (C42058 - C42057 + C42060 - C42059) * C89093) *
                C54750 +
            ((C38365 * C1727 - C38293 * C1833 + C38366 * C6247 -
              C38294 * C6335) *
                 C13261 +
             (C38365 * C1741 - C38293 * C1841 + C38366 * C6251 -
              C38294 * C6338) *
                 C89093) *
                C54751) *
               C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                C13261 +
            (C38293 * C187 - C38365 * C113 + C38294 * C931 - C38366 * C830) *
                C89093) *
               C54750 +
           ((C72766 - C72767 + C72768 - C72769) * C13261 +
            (C72770 - C72771 + C72772 - C72773) * C89093) *
               C54751) *
              C10538 +
          (((C72767 - C72766 + C72769 - C72768) * C13261 +
            (C72771 - C72770 + C72773 - C72772) * C89093) *
               C54750 +
           ((C72774 - C72775 + C72776 - C72777) * C13261 +
            (C72778 - C72779 + C72780 - C72781) * C89093) *
               C54751) *
              C10539 +
          (((C72775 - C72774 + C72777 - C72776) * C13261 +
            (C72779 - C72778 + C72781 - C72780) * C89093) *
               C54750 +
           ((C83851 - C83852 + C83853 - C83854) * C13261 +
            (C83855 - C83856 + C83857 - C83858) * C89093) *
               C54751) *
              C10540 +
          (((C83852 - C83851 + C83854 - C83853) * C13261 +
            (C83856 - C83855 + C83858 - C83857) * C89093) *
               C54750 +
           ((C38365 * C26997 - C38293 * C27121 + C38366 * C31285 -
             C38294 * C31370) *
                C13261 +
            (C38365 * C27000 - C38293 * C27123 + C38366 * C31287 -
             C38294 * C31371) *
                C89093) *
               C54751) *
              C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q));
    d2eexz[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                 C13261 +
             (C54750 * C270 - C54884 * C113 + C54751 * C1942 - C54885 * C1735) *
                 C89093) *
                C38293 +
            ((C71930 - C71931 + C71932 - C71933) * C13261 +
             (C71934 - C71935 + C71936 - C71937) * C89093) *
                C38294) *
               C9228 +
           (((C54884 * C1724 - C54750 * C1934 + C54885 * C1725 -
              C54751 * C1937) *
                 C13261 +
             (C54884 * C1735 - C54750 * C1942 + C54885 * C1737 -
              C54751 * C1945) *
                 C89093) *
                C38293 +
            ((C75685 - C75686 + C75687 - C75688) * C13261 +
             (C75689 - C75690 + C75691 - C75692) * C89093) *
                C38294) *
               C89217) *
              C812 +
          ((((C71931 - C71930 + C71933 - C71932) * C13261 +
             (C71935 - C71934 + C71937 - C71936) * C89093) *
                C38293 +
            ((C71938 - C71939 + C71940 - C71941) * C13261 +
             (C71942 - C71943 + C71944 - C71945) * C89093) *
                C38294) *
               C9228 +
           (((C75686 - C75685 + C75688 - C75687) * C13261 +
             (C75690 - C75689 + C75692 - C75691) * C89093) *
                C38293 +
            ((C81320 - C81321 + C81322 - C81323) * C13261 +
             (C81324 - C81325 + C81326 - C81327) * C89093) *
                C38294) *
               C89217) *
              C813 +
          ((((C71939 - C71938 + C71941 - C71940) * C13261 +
             (C71943 - C71942 + C71945 - C71944) * C89093) *
                C38293 +
            ((C77603 - C77604 + C77605 - C77606) * C13261 +
             (C77607 - C77608 + C77609 - C77610) * C89093) *
                C38294) *
               C9228 +
           (((C81321 - C81320 + C81323 - C81322) * C13261 +
             (C81325 - C81324 + C81327 - C81326) * C89093) *
                C38293 +
            ((C54884 * C16683 - C54750 * C16923 + C54885 * C18839 -
              C54751 * C19009) *
                 C13261 +
             (C54884 * C16686 - C54750 * C16925 + C54885 * C18841 -
              C54751 * C19010) *
                 C89093) *
                C38294) *
               C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                 C13261 +
             (C54750 * C270 - C54884 * C113 + C54751 * C1942 - C54885 * C1735) *
                 C89093) *
                C38293 +
            ((C71930 - C71931 + C71932 - C71933) * C13261 +
             (C71934 - C71935 + C71936 - C71937) * C89093) *
                C38294) *
               C9228 +
           (((C54884 * C1724 - C54750 * C1934 + C54885 * C1725 -
              C54751 * C1937) *
                 C13261 +
             (C54884 * C1735 - C54750 * C1942 + C54885 * C1737 -
              C54751 * C1945) *
                 C89093) *
                C38293 +
            ((C75685 - C75686 + C75687 - C75688) * C13261 +
             (C75689 - C75690 + C75691 - C75692) * C89093) *
                C38294) *
               C89217) *
              C89137 * C5075 +
          ((((C54888 - C54887 + C54890 - C54889) * C13261 +
             (C54892 - C54891 + C54894 - C54893) * C89093) *
                C38293 +
            ((C55661 - C55662 + C55663 - C55664) * C13261 +
             (C55665 - C55666 + C55667 - C55668) * C89093) *
                C38294) *
               C9228 +
           (((C56667 - C56666 + C56669 - C56668) * C13261 +
             (C56671 - C56670 + C56673 - C56672) * C89093) *
                C38293 +
            ((C59606 - C59607 + C59608 - C59609) * C13261 +
             (C59610 - C59611 + C59612 - C59613) * C89093) *
                C38294) *
               C89217) *
              C89137 * C5076 +
          ((((C54896 - C54895 + C54898 - C54897) * C13261 +
             (C54900 - C54899 + C54902 - C54901) * C89093) *
                C38293 +
            ((C57659 - C57660 + C57661 - C57662) * C13261 +
             (C57663 - C57664 + C57665 - C57666) * C89093) *
                C38294) *
               C9228 +
           (((C58584 - C58583 + C58586 - C58585) * C13261 +
             (C58588 - C58587 + C58590 - C58589) * C89093) *
                C38293 +
            ((C54884 * C4099 - C54750 * C4327 + C54885 * C6247 -
              C54751 * C6415) *
                 C13261 +
             (C54884 * C4106 - C54750 * C4331 + C54885 * C6251 -
              C54751 * C6418) *
                 C89093) *
                C38294) *
               C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                C13261 +
            (C54750 * C270 - C54884 * C113 + C54751 * C1942 - C54885 * C1735) *
                C89093) *
               C38293 +
           ((C71930 - C71931 + C71932 - C71933) * C13261 +
            (C71934 - C71935 + C71936 - C71937) * C89093) *
               C38294) *
              C10538 +
          (((C54884 * C1724 - C54750 * C1934 + C54885 * C1725 -
             C54751 * C1937) *
                C13261 +
            (C54884 * C1735 - C54750 * C1942 + C54885 * C1737 -
             C54751 * C1945) *
                C89093) *
               C38293 +
           ((C75685 - C75686 + C75687 - C75688) * C13261 +
            (C75689 - C75690 + C75691 - C75692) * C89093) *
               C38294) *
              C10539 +
          (((C54750 * C1937 - C54884 * C1725 + C54751 * C10660 -
             C54885 * C10544) *
                C13261 +
            (C54750 * C1945 - C54884 * C1737 + C54751 * C10663 -
             C54885 * C10550) *
                C89093) *
               C38293 +
           ((C78329 - C78330 + C78331 - C78332) * C13261 +
            (C78333 - C78334 + C78335 - C78336) * C89093) *
               C38294) *
              C10540 +
          (((C54884 * C10544 - C54750 * C10660 + C54885 * C26997 -
             C54751 * C27225) *
                C13261 +
            (C54884 * C10550 - C54750 * C10663 + C54885 * C27000 -
             C54751 * C27227) *
                C89093) *
               C38293 +
           ((C54884 * C23153 - C54750 * C23264 + C54885 * C31285 -
             C54751 * C31455) *
                C13261 +
            (C54884 * C23157 - C54750 * C23266 + C54885 * C31287 -
             C54751 * C31456) *
                C89093) *
               C38294) *
              C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q));
    d2eeyx[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C38365 +
             (C89093 * C352 - C13261 * C346) * C38293 +
             (C14060 - C14061) * C38366 + (C14062 - C14063) * C38294) *
                C54750 +
            ((C27308 - C27309) * C38365 + (C27310 - C27311) * C38293 +
             C75823 * C38366 + C75824 * C38294) *
                C54751) *
               C9228 +
           (((C27309 - C27308) * C38365 + (C27311 - C27310) * C38293 +
             C75825 * C38366 + C75826 * C38294) *
                C54750 +
            ((C27313 - C27312) * C38365 + (C27315 - C27314) * C38293 +
             C31534 * C38366 + C31535 * C38294) *
                C54751) *
               C89217) *
              C812 +
          ((((C14061 - C14060) * C38365 + (C14063 - C14062) * C38293 +
             (C14065 - C14064) * C38366 + (C14067 - C14066) * C38294) *
                C54750 +
            (C75825 * C38365 + C75826 * C38293 + C21373 * C38366 +
             C21374 * C38294) *
                C54751) *
               C9228 +
           ((C75823 * C38365 + C75824 * C38293 + C81426 * C38366 +
             C81427 * C38294) *
                C54750 +
            (C78435 * C38365 + C78436 * C38293 + (C19100 - C19101) * C38366 +
             (C19102 - C19103) * C38294) *
                C54751) *
               C89217) *
              C813 +
          (((C14084 * C38365 + C14085 * C38293 + (C14069 - C14068) * C38366 +
             (C14071 - C14070) * C38294) *
                C54750 +
            (C81426 * C38365 + C81427 * C38293 + (C21375 - C21376) * C38366 +
             (C21377 - C21378) * C38294) *
                C54751) *
               C9228 +
           ((C21373 * C38365 + C21374 * C38293 + (C21376 - C21375) * C38366 +
             (C21378 - C21377) * C38294) *
                C54750 +
            ((C19101 - C19100) * C38365 + (C19103 - C19102) * C38293 +
             (C13261 * C18839 - C89093 * C18840) * C38366 +
             (C13261 * C19093 - C89093 * C19094) * C38294) *
                C54751) *
               C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C38365 +
             (C89093 * C352 - C13261 * C346) * C38293 +
             (C14060 - C14061) * C38366 + (C14062 - C14063) * C38294) *
                C54750 +
            ((C27308 - C27309) * C38365 + (C27310 - C27311) * C38293 +
             C75823 * C38366 + C75824 * C38294) *
                C54751) *
               C9228 +
           (((C27309 - C27308) * C38365 + (C27311 - C27310) * C38293 +
             C75825 * C38366 + C75826 * C38294) *
                C54750 +
            ((C27313 - C27312) * C38365 + (C27315 - C27314) * C38293 +
             C31534 * C38366 + C31535 * C38294) *
                C54751) *
               C89217) *
              C89137 * C5075 +
          ((((C13261 * C107 - C89093 * C114) * C38365 +
             (C13261 * C347 - C89093 * C353) * C38293 +
             (C14072 - C14073) * C38366 + (C14074 - C14075) * C38294) *
                C54750 +
            ((C27320 - C27321) * C38365 + (C27322 - C27323) * C38293 +
             C75827 * C38366 + C75828 * C38294) *
                C54751) *
               C9228 +
           (((C27321 - C27320) * C38365 + (C27323 - C27322) * C38293 +
             C75829 * C38366 + C75830 * C38294) *
                C54750 +
            ((C27325 - C27324) * C38365 + (C27327 - C27326) * C38293 +
             (C29563 - C29564) * C38366 + (C29565 - C29566) * C38294) *
                C54751) *
               C89217) *
              C89137 * C5076 +
          ((((C89093 * C116 - C13261 * C108) * C38365 +
             (C89093 * C354 - C13261 * C348) * C38293 +
             (C15538 - C15539) * C38366 + (C15540 - C15541) * C38294) *
                C54750 +
            ((C28758 - C28759) * C38365 + (C28760 - C28761) * C38293 +
             (C73905 - C73906) * C38366 + (C73907 - C73908) * C38294) *
                C54751) *
               C9228 +
           (((C28759 - C28758) * C38365 + (C28761 - C28760) * C38293 +
             (C73906 - C73905) * C38366 + (C73908 - C73907) * C38294) *
                C54750 +
            ((C28763 - C28762) * C38365 + (C28765 - C28764) * C38293 +
             (C13261 * C6247 - C89093 * C6250) * C38366 +
             (C13261 * C6495 - C89093 * C6498) * C38294) *
                C54751) *
               C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C89093 * C112 - C13261 * C106) * C38365 +
            (C89093 * C352 - C13261 * C346) * C38293 +
            (C14060 - C14061) * C38366 + (C14062 - C14063) * C38294) *
               C54750 +
           ((C27308 - C27309) * C38365 + (C27310 - C27311) * C38293 +
            C75823 * C38366 + C75824 * C38294) *
               C54751) *
              C10538 +
          (((C27309 - C27308) * C38365 + (C27311 - C27310) * C38293 +
            C75825 * C38366 + C75826 * C38294) *
               C54750 +
           ((C27313 - C27312) * C38365 + (C27315 - C27314) * C38293 +
            C31534 * C38366 + C31535 * C38294) *
               C54751) *
              C10539 +
          ((C27332 * C38365 + C27333 * C38293 + C78435 * C38366 +
            C78436 * C38294) *
               C54750 +
           ((C27317 - C27316) * C38365 + (C27319 - C27318) * C38293 +
            (C31536 - C31537) * C38366 + (C31538 - C31539) * C38294) *
               C54751) *
              C10540 +
          ((C35733 * C38365 + C35734 * C38293 + (C31537 - C31536) * C38366 +
            (C31539 - C31538) * C38294) *
               C54750 +
           ((C35736 - C35735) * C38365 + (C35738 - C35737) * C38293 +
            (C13261 * C31285 - C89093 * C31286) * C38366 +
            (C13261 * C31531 - C89093 * C31532) * C38294) *
               C54751) *
              C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q));
    d2eeyy[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C38365 * C181 - C38589 * C106 - C38365 * C346 + C38293 * C409 +
             C38366 * C923 - C38590 * C819 - C38366 * C1135 + C38294 * C1227) *
                C89093 * C54750 +
            (C73100 + C73101) * C89093 * C54751) *
               C9228 -
           ((C73102 + C73103) * C89093 * C54751 +
            (C73101 + C73100) * C89093 * C54750) *
               C89217) *
              C812 +
          (((C75973 + C75974) * C89093 * C54750 +
            (C78547 + C78548) * C89093 * C54751) *
               C89217 -
           ((C75974 + C75973) * C89093 * C54751 +
            (C38366 * C926 - C38590 * C820 - C38366 * C1138 + C38294 * C1228 +
             C38365 * C923 - C38589 * C819 - C38365 * C1135 + C38293 * C1227) *
                C89093 * C54750) *
               C9228) *
              C813 +
          (((C38365 * C926 - C38589 * C820 - C38365 * C1138 + C38293 * C1228 +
             C38366 * C5787 - C38590 * C5727 - C38366 * C5899 +
             C38294 * C5957) *
                C89093 * C54750 +
            (C81538 + C81539) * C89093 * C54751) *
               C9228 -
           ((C38366 * C18933 - C38590 * C18839 - C38366 * C19093 +
             C38294 * C19177 + C38365 * C14683 - C38589 * C14601 -
             C38365 * C14839 + C38293 * C14917) *
                C89093 * C54751 +
            (C81539 + C81538) * C89093 * C54750) *
               C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C38365 * C181 - C38589 * C106 - C38365 * C346 + C38293 * C409 +
             C38366 * C923 - C38590 * C819 - C38366 * C1135 + C38294 * C1227) *
                C89093 * C54750 +
            (C73100 + C73101) * C89093 * C54751) *
               C9228 -
           ((C73102 + C73103) * C89093 * C54751 +
            (C73101 + C73100) * C89093 * C54750) *
               C89217) *
              C89137 * C5075 +
          (((C40502 + C40501) * C89093 * C54750 +
            (C40503 + C40504) * C89093 * C54751) *
               C89217 -
           ((C40501 + C40502) * C89093 * C54751 +
            (C38629 + C38628) * C89093 * C54750) *
               C9228) *
              C89137 * C5076 +
          (((C38631 + C38630) * C89093 * C54750 +
            (C42367 + C42368) * C89093 * C54751) *
               C9228 -
           ((C38366 * C6335 - C38590 * C6247 - C38366 * C6495 + C38294 * C6573 +
             C38365 * C1833 - C38589 * C1727 - C38365 * C2045 +
             C38293 * C2135) *
                C89093 * C54751 +
            (C42368 + C42367) * C89093 * C54750) *
               C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C38365 * C181 - C38589 * C106 - C38365 * C346 + C38293 * C409 +
            C38366 * C923 - C38590 * C819 - C38366 * C1135 + C38294 * C1227) *
               C89093 * C54750 +
           (C73100 + C73101) * C89093 * C54751) *
              C10538 -
          ((C73102 + C73103) * C89093 * C54751 +
           (C73101 + C73100) * C89093 * C54750) *
              C10539 +
          ((C73103 + C73102) * C89093 * C54750 +
           (C84069 + C84070) * C89093 * C54751) *
              C10540 -
          ((C38366 * C31370 - C38590 * C31285 - C38366 * C31531 +
            C38294 * C31616 + C38365 * C27121 - C38589 * C26997 -
            C38365 * C27303 + C38293 * C27415) *
               C89093 * C54751 +
           (C84070 + C84069) * C89093 * C54750) *
              C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q));
    d2eeyz[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                C38365 +
            (C54750 * C493 - C54884 * C346 + C54751 * C2240 - C54885 * C2040) *
                C38293 +
            (C71930 - C71931 + C71932 - C71933) * C38366 +
            (C72240 - C72241 + C72242 - C72243) * C38294) *
               C89093 * C9228 +
           ((C54884 * C1724 - C54750 * C1934 + C54885 * C1725 -
             C54751 * C1937) *
                C38365 +
            (C54884 * C2040 - C54750 * C2240 + C54885 * C2043 -
             C54751 * C2243) *
                C38293 +
            (C75685 - C75686 + C75687 - C75688) * C38366 +
            (C76105 - C76106 + C76107 - C76108) * C38294) *
               C89093 * C89217) *
              C812 +
          (((C71931 - C71930 + C71933 - C71932) * C38365 +
            (C72241 - C72240 + C72243 - C72242) * C38293 +
            (C71938 - C71939 + C71940 - C71941) * C38366 +
            (C72244 - C72245 + C72246 - C72247) * C38294) *
               C89093 * C9228 +
           ((C75686 - C75685 + C75688 - C75687) * C38365 +
            (C76106 - C76105 + C76108 - C76107) * C38293 +
            (C81320 - C81321 + C81322 - C81323) * C38366 +
            (C81638 - C81639 + C81640 - C81641) * C38294) *
               C89093 * C89217) *
              C813 +
          (((C71939 - C71938 + C71941 - C71940) * C38365 +
            (C72245 - C72244 + C72247 - C72246) * C38293 +
            (C77603 - C77604 + C77605 - C77606) * C38366 +
            (C77809 - C77810 + C77811 - C77812) * C38294) *
               C89093 * C9228 +
           ((C81321 - C81320 + C81323 - C81322) * C38365 +
            (C81639 - C81638 + C81641 - C81640) * C38293 +
            (C54884 * C16683 - C54750 * C16923 + C54885 * C18839 -
             C54751 * C19009) *
                C38366 +
            (C54884 * C17037 - C54750 * C17255 + C54885 * C19093 -
             C54751 * C19252) *
                C38294) *
               C89093 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                C38365 +
            (C54750 * C493 - C54884 * C346 + C54751 * C2240 - C54885 * C2040) *
                C38293 +
            (C71930 - C71931 + C71932 - C71933) * C38366 +
            (C72240 - C72241 + C72242 - C72243) * C38294) *
               C89093 * C9228 +
           ((C54884 * C1724 - C54750 * C1934 + C54885 * C1725 -
             C54751 * C1937) *
                C38365 +
            (C54884 * C2040 - C54750 * C2240 + C54885 * C2043 -
             C54751 * C2243) *
                C38293 +
            (C75685 - C75686 + C75687 - C75688) * C38366 +
            (C76105 - C76106 + C76107 - C76108) * C38294) *
               C89093 * C89217) *
              C89137 * C5075 +
          (((C54888 - C54887 + C54890 - C54889) * C38365 +
            (C55110 - C55109 + C55112 - C55111) * C38293 +
            (C55661 - C55662 + C55663 - C55664) * C38366 +
            (C55978 - C55979 + C55980 - C55981) * C38294) *
               C89093 * C9228 +
           ((C56667 - C56666 + C56669 - C56668) * C38365 +
            (C57017 - C57016 + C57019 - C57018) * C38293 +
            (C59606 - C59607 + C59608 - C59609) * C38366 +
            (C60008 - C60009 + C60010 - C60011) * C38294) *
               C89093 * C89217) *
              C89137 * C5076 +
          (((C54896 - C54895 + C54898 - C54897) * C38365 +
            (C55114 - C55113 + C55116 - C55115) * C38293 +
            (C57659 - C57660 + C57661 - C57662) * C38366 +
            (C57961 - C57962 + C57963 - C57964) * C38294) *
               C89093 * C9228 +
           ((C58584 - C58583 + C58586 - C58585) * C38365 +
            (C58896 - C58895 + C58898 - C58897) * C38293 +
            (C54884 * C4099 - C54750 * C4327 + C54885 * C6247 -
             C54751 * C6415) *
                C38366 +
            (C54884 * C4441 - C54750 * C4663 + C54885 * C6495 -
             C54751 * C6652) *
                C38294) *
               C89093 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
               C38365 +
           (C54750 * C493 - C54884 * C346 + C54751 * C2240 - C54885 * C2040) *
               C38293 +
           (C71930 - C71931 + C71932 - C71933) * C38366 +
           (C72240 - C72241 + C72242 - C72243) * C38294) *
              C89093 * C10538 +
          ((C54884 * C1724 - C54750 * C1934 + C54885 * C1725 - C54751 * C1937) *
               C38365 +
           (C54884 * C2040 - C54750 * C2240 + C54885 * C2043 - C54751 * C2243) *
               C38293 +
           (C75685 - C75686 + C75687 - C75688) * C38366 +
           (C76105 - C76106 + C76107 - C76108) * C38294) *
              C89093 * C10539 +
          ((C54750 * C1937 - C54884 * C1725 + C54751 * C10660 -
            C54885 * C10544) *
               C38365 +
           (C54750 * C2243 - C54884 * C2043 + C54751 * C10825 -
            C54885 * C10716) *
               C38293 +
           (C78329 - C78330 + C78331 - C78332) * C38366 +
           (C78647 - C78648 + C78649 - C78650) * C38294) *
              C89093 * C10540 +
          ((C54884 * C10544 - C54750 * C10660 + C54885 * C26997 -
            C54751 * C27225) *
               C38365 +
           (C54884 * C10716 - C54750 * C10825 + C54885 * C27303 -
            C54751 * C27525) *
               C38293 +
           (C54884 * C23153 - C54750 * C23264 + C54885 * C31285 -
            C54751 * C31455) *
               C38366 +
           (C54884 * C23318 - C54750 * C23424 + C54885 * C31531 -
            C54751 * C31699) *
               C38294) *
              C89093 * C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q));
    d2eezx[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C54884 +
             (C89093 * C571 - C13261 * C565) * C54750 +
             (C27308 - C27309) * C54885 + (C27606 - C27607) * C54751) *
                C38293 +
            ((C14060 - C14061) * C54884 + (C14328 - C14329) * C54750 +
             C75823 * C54885 + C76239 * C54751) *
                C38294) *
               C9228 +
           (((C27309 - C27308) * C54884 + (C27607 - C27606) * C54750 +
             (C27313 - C27312) * C54885 + (C27609 - C27608) * C54751) *
                C38293 +
            (C75825 * C54884 + C76240 * C54750 + C31534 * C54885 +
             C31777 * C54751) *
                C38294) *
               C89217) *
              C812 +
          ((((C14061 - C14060) * C54884 + (C14329 - C14328) * C54750 +
             C75825 * C54885 + C76240 * C54751) *
                C38293 +
            ((C14065 - C14064) * C54884 + (C14332 - C14331) * C54750 +
             C21373 * C54885 + C21609 * C54751) *
                C38294) *
               C9228 +
           ((C75823 * C54884 + C76239 * C54750 + C78435 * C54885 +
             C78749 * C54751) *
                C38293 +
            (C81426 * C54884 + C81740 * C54750 + (C19100 - C19101) * C54885 +
             (C19336 - C19337) * C54751) *
                C38294) *
               C89217) *
              C813 +
          (((C14084 * C54884 + C14342 * C54750 + C81426 * C54885 +
             C81740 * C54751) *
                C38293 +
            ((C14069 - C14068) * C54884 + (C14334 - C14333) * C54750 +
             (C21375 - C21376) * C54885 + (C21610 - C21611) * C54751) *
                C38294) *
               C9228 +
           ((C21373 * C54884 + C21609 * C54750 + (C19101 - C19100) * C54885 +
             (C19337 - C19336) * C54751) *
                C38293 +
            ((C21376 - C21375) * C54884 + (C21611 - C21610) * C54750 +
             (C13261 * C18839 - C89093 * C18840) * C54885 +
             (C13261 * C19331 - C89093 * C19332) * C54751) *
                C38294) *
               C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C54884 +
             (C89093 * C571 - C13261 * C565) * C54750 +
             (C27308 - C27309) * C54885 + (C27606 - C27607) * C54751) *
                C38293 +
            ((C14060 - C14061) * C54884 + (C14328 - C14329) * C54750 +
             C75823 * C54885 + C76239 * C54751) *
                C38294) *
               C9228 +
           (((C27309 - C27308) * C54884 + (C27607 - C27606) * C54750 +
             (C27313 - C27312) * C54885 + (C27609 - C27608) * C54751) *
                C38293 +
            (C75825 * C54884 + C76240 * C54750 + C31534 * C54885 +
             C31777 * C54751) *
                C38294) *
               C89217) *
              C89137 * C5075 +
          ((((C13261 * C107 - C89093 * C114) * C54884 +
             (C13261 * C566 - C89093 * C572) * C54750 +
             (C27320 - C27321) * C54885 + (C27612 - C27613) * C54751) *
                C38293 +
            ((C14072 - C14073) * C54884 + (C14335 - C14336) * C54750 +
             C75827 * C54885 + C76241 * C54751) *
                C38294) *
               C9228 +
           (((C27321 - C27320) * C54884 + (C27613 - C27612) * C54750 +
             (C27325 - C27324) * C54885 + (C27615 - C27614) * C54751) *
                C38293 +
            (C75829 * C54884 + C76242 * C54750 + (C29563 - C29564) * C54885 +
             (C29890 - C29891) * C54751) *
                C38294) *
               C89217) *
              C89137 * C5076 +
          ((((C89093 * C116 - C13261 * C108) * C54884 +
             (C89093 * C573 - C13261 * C567) * C54750 +
             (C28758 - C28759) * C54885 + (C28990 - C28991) * C54751) *
                C38293 +
            ((C15538 - C15539) * C54884 + (C15768 - C15769) * C54750 +
             (C73905 - C73906) * C54885 + (C74203 - C74204) * C54751) *
                C38294) *
               C9228 +
           (((C28759 - C28758) * C54884 + (C28991 - C28990) * C54750 +
             (C28763 - C28762) * C54885 + (C28993 - C28992) * C54751) *
                C38293 +
            ((C73906 - C73905) * C54884 + (C74204 - C74203) * C54750 +
             (C13261 * C6247 - C89093 * C6250) * C54885 +
             (C13261 * C6729 - C89093 * C6732) * C54751) *
                C38294) *
               C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C89093 * C112 - C13261 * C106) * C54884 +
            (C89093 * C571 - C13261 * C565) * C54750 +
            (C27308 - C27309) * C54885 + (C27606 - C27607) * C54751) *
               C38293 +
           ((C14060 - C14061) * C54884 + (C14328 - C14329) * C54750 +
            C75823 * C54885 + C76239 * C54751) *
               C38294) *
              C10538 +
          (((C27309 - C27308) * C54884 + (C27607 - C27606) * C54750 +
            (C27313 - C27312) * C54885 + (C27609 - C27608) * C54751) *
               C38293 +
           (C75825 * C54884 + C76240 * C54750 + C31534 * C54885 +
            C31777 * C54751) *
               C38294) *
              C10539 +
          ((C27332 * C54884 + C27618 * C54750 + (C27317 - C27316) * C54885 +
            (C27611 - C27610) * C54751) *
               C38293 +
           (C78435 * C54884 + C78749 * C54750 + (C31536 - C31537) * C54885 +
            (C31778 - C31779) * C54751) *
               C38294) *
              C10540 +
          ((C35733 * C54884 + C35904 * C54750 + (C35736 - C35735) * C54885 +
            (C35906 - C35905) * C54751) *
               C38293 +
           ((C31537 - C31536) * C54884 + (C31779 - C31778) * C54750 +
            (C13261 * C31285 - C89093 * C31286) * C54885 +
            (C13261 * C31774 - C89093 * C31775) * C54751) *
               C38294) *
              C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q));
    d2eezy[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                C54884 +
            (C38293 * C627 - C38365 * C565 + C38294 * C1515 - C38366 * C1425) *
                C54750 +
            (C72766 - C72767 + C72768 - C72769) * C54885 +
            (C73398 - C73399 + C73400 - C73401) * C54751) *
               C89093 * C9228 +
           ((C72767 - C72766 + C72769 - C72768) * C54884 +
            (C73399 - C73398 + C73401 - C73400) * C54750 +
            (C72774 - C72775 + C72776 - C72777) * C54885 +
            (C73402 - C73403 + C73404 - C73405) * C54751) *
               C89093 * C89217) *
              C812 +
          (((C38365 * C819 - C38293 * C923 + C38366 * C820 - C38294 * C926) *
                C54884 +
            (C38365 * C1425 - C38293 * C1515 + C38366 * C1428 -
             C38294 * C1518) *
                C54750 +
            (C75547 - C75548 + C75549 - C75550) * C54885 +
            (C76373 - C76374 + C76375 - C76376) * C54751) *
               C89093 * C9228 +
           ((C75548 - C75547 + C75550 - C75549) * C54884 +
            (C76374 - C76373 + C76376 - C76375) * C54750 +
            (C78223 - C78224 + C78225 - C78226) * C54885 +
            (C78848 - C78849 + C78850 - C78851) * C54751) *
               C89093 * C89217) *
              C813 +
          (((C38293 * C926 - C38365 * C820 + C38294 * C5787 - C38366 * C5727) *
                C54884 +
            (C38293 * C1518 - C38365 * C1428 + C38294 * C6117 -
             C38366 * C6061) *
                C54750 +
            (C81214 - C81215 + C81216 - C81217) * C54885 +
            (C81839 - C81840 + C81841 - C81842) * C54751) *
               C89093 * C9228 +
           ((C81215 - C81214 + C81217 - C81216) * C54884 +
            (C81840 - C81839 + C81842 - C81841) * C54750 +
            (C38365 * C14601 - C38293 * C14683 + C38366 * C18839 -
             C38294 * C18933) *
                C54885 +
            (C38365 * C15069 - C38293 * C15147 + C38366 * C19331 -
             C38294 * C19411) *
                C54751) *
               C89093 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                C54884 +
            (C38293 * C627 - C38365 * C565 + C38294 * C1515 - C38366 * C1425) *
                C54750 +
            (C72766 - C72767 + C72768 - C72769) * C54885 +
            (C73398 - C73399 + C73400 - C73401) * C54751) *
               C89093 * C9228 +
           ((C72767 - C72766 + C72769 - C72768) * C54884 +
            (C73399 - C73398 + C73401 - C73400) * C54750 +
            (C72774 - C72775 + C72776 - C72777) * C54885 +
            (C73402 - C73403 + C73404 - C73405) * C54751) *
               C89093 * C89217) *
              C89137 * C5075 +
          (((C38369 - C38368 + C38371 - C38370) * C54884 +
            (C38833 - C38832 + C38835 - C38834) * C54750 +
            (C40163 - C40164 + C40165 - C40166) * C54885 +
            (C40801 - C40802 + C40803 - C40804) * C54751) *
               C89093 * C9228 +
           ((C40164 - C40163 + C40166 - C40165) * C54884 +
            (C40802 - C40801 + C40804 - C40803) * C54750 +
            (C40171 - C40172 + C40173 - C40174) * C54885 +
            (C40805 - C40806 + C40807 - C40808) * C54751) *
               C89093 * C89217) *
              C89137 * C5076 +
          (((C38377 - C38376 + C38379 - C38378) * C54884 +
            (C38837 - C38836 + C38839 - C38838) * C54750 +
            (C42053 - C42054 + C42055 - C42056) * C54885 +
            (C42663 - C42664 + C42665 - C42666) * C54751) *
               C89093 * C9228 +
           ((C42054 - C42053 + C42056 - C42055) * C54884 +
            (C42664 - C42663 + C42666 - C42665) * C54750 +
            (C38365 * C1727 - C38293 * C1833 + C38366 * C6247 -
             C38294 * C6335) *
                C54885 +
            (C38365 * C2335 - C38293 * C2425 + C38366 * C6729 -
             C38294 * C6809) *
                C54751) *
               C89093 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
               C54884 +
           (C38293 * C627 - C38365 * C565 + C38294 * C1515 - C38366 * C1425) *
               C54750 +
           (C72766 - C72767 + C72768 - C72769) * C54885 +
           (C73398 - C73399 + C73400 - C73401) * C54751) *
              C89093 * C10538 +
          ((C72767 - C72766 + C72769 - C72768) * C54884 +
           (C73399 - C73398 + C73401 - C73400) * C54750 +
           (C72774 - C72775 + C72776 - C72777) * C54885 +
           (C73402 - C73403 + C73404 - C73405) * C54751) *
              C89093 * C10539 +
          ((C72775 - C72774 + C72777 - C72776) * C54884 +
           (C73403 - C73402 + C73405 - C73404) * C54750 +
           (C83851 - C83852 + C83853 - C83854) * C54885 +
           (C84269 - C84270 + C84271 - C84272) * C54751) *
              C89093 * C10540 +
          ((C83852 - C83851 + C83854 - C83853) * C54884 +
           (C84270 - C84269 + C84272 - C84271) * C54750 +
           (C38365 * C26997 - C38293 * C27121 + C38366 * C31285 -
            C38294 * C31370) *
               C54885 +
           (C38365 * C27601 - C38293 * C27693 + C38366 * C31774 -
            C38294 * C31853) *
               C54751) *
              C89093 * C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q));
    d2eezz[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C54884 * C264 - C55318 * C106 - C54884 * C565 + C54750 * C700 +
             C54885 * C1934 - C55319 * C1724 - C54885 * C2330 +
             C54751 * C2512) *
                C38293 +
            (C72566 + C72567) * C38294) *
               C89093 * C9228 -
           ((C76519 + C76520) * C38294 +
            (C54885 * C1937 - C55319 * C1725 - C54885 * C2333 + C54751 * C2513 +
             C54884 * C1934 - C55318 * C1724 - C54884 * C2330 +
             C54750 * C2512) *
                C38293) *
               C89093 * C89217) *
              C812 +
          (((C76520 + C76519) * C38293 + (C81953 + C81954) * C38294) * C89093 *
               C89217 -
           ((C72568 + C72569) * C38294 + (C72567 + C72566) * C38293) * C89093 *
               C9228) *
              C813 +
          (((C72569 + C72568) * C38293 + (C78023 + C78024) * C38294) * C89093 *
               C9228 -
           ((C54885 * C19009 - C55319 * C18839 - C54885 * C19331 +
             C54751 * C19486 + C54884 * C16923 - C55318 * C16683 -
             C54884 * C17361 + C54750 * C17571) *
                C38294 +
            (C81954 + C81953) * C38293) *
               C89093 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C54884 * C264 - C55318 * C106 - C54884 * C565 + C54750 * C700 +
             C54885 * C1934 - C55319 * C1724 - C54885 * C2330 +
             C54751 * C2512) *
                C38293 +
            (C72566 + C72567) * C38294) *
               C89093 * C9228 -
           ((C76519 + C76520) * C38294 +
            (C54885 * C1937 - C55319 * C1725 - C54885 * C2333 + C54751 * C2513 +
             C54884 * C1934 - C55318 * C1724 - C54884 * C2330 +
             C54750 * C2512) *
                C38293) *
               C89093 * C89217) *
              C89137 * C5075 +
          (((C57362 + C57361) * C38293 + (C60416 + C60417) * C38294) * C89093 *
               C89217 -
           ((C56306 + C56307) * C38294 + (C55358 + C55357) * C38293) * C89093 *
               C9228) *
              C89137 * C5076 +
          (((C55360 + C55359) * C38293 + (C58271 + C58272) * C38294) * C89093 *
               C9228 -
           ((C54885 * C6415 - C55319 * C6247 - C54885 * C6729 + C54751 * C6884 +
             C54884 * C4327 - C55318 * C4099 - C54884 * C4769 +
             C54750 * C4981) *
                C38294 +
            (C59211 + C59210) * C38293) *
               C89093 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C54884 * C264 - C55318 * C106 - C54884 * C565 + C54750 * C700 +
            C54885 * C1934 - C55319 * C1724 - C54885 * C2330 + C54751 * C2512) *
               C38293 +
           (C72566 + C72567) * C38294) *
              C89093 * C10538 -
          ((C76519 + C76520) * C38294 +
           (C54885 * C1937 - C55319 * C1725 - C54885 * C2333 + C54751 * C2513 +
            C54884 * C1934 - C55318 * C1724 - C54884 * C2330 + C54750 * C2512) *
               C38293) *
              C89093 * C10539 +
          ((C54884 * C1937 - C55318 * C1725 - C54884 * C2333 + C54750 * C2513 +
            C54885 * C10660 - C55319 * C10544 - C54885 * C10878 +
            C54751 * C10989) *
               C38293 +
           (C78962 + C78963) * C38294) *
              C89093 * C10540 -
          ((C54885 * C31455 - C55319 * C31285 - C54885 * C31774 +
            C54751 * C31931 + C54884 * C23264 - C55318 * C23153 -
            C54884 * C23476 + C54750 * C23583) *
               C38294 +
           (C54885 * C27225 - C55319 * C26997 - C54885 * C27601 +
            C54751 * C27779 + C54884 * C10660 - C55318 * C10544 -
            C54884 * C10878 + C54750 * C10989) *
               C38293) *
              C89093 * C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q));
    d2eexx[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                 C54750 +
             C27042 * C54751) *
                C38293 +
            (C71726 + C71727) * C38294) *
               C89337 -
           ((C75413 + C75414) * C38294 +
            (C27043 * C54751 + C27042 * C54750) * C38293) *
               C89338 +
           ((C27043 * C54750 + C27044 * C54751) * C38293 +
            (C78123 + C78124) * C38294) *
               C11948) *
              C89137 * C89299 +
          (((C27045 * C54750 + C27046 * C54751) * C38293 +
            (C75415 + C75416) * C38294) *
               C89338 -
           ((C71731 + C71730) * C38294 +
            (C27045 * C54751 +
             (C13261 * C114 - C13262 * C107 - C13261 * C115 + C89093 * C125) *
                 C54750) *
                C38293) *
               C89337 -
           (((C13261 * C29240 - C13262 * C29239 - C13261 * C29241 +
              C89093 * C29242) *
                 C54751 +
             C29250 * C54750) *
                C38294 +
            (C27047 * C54751 + C27046 * C54750) * C38293) *
               C11948) *
              C89137 * C89124)) /
        (p * q * std::sqrt(p + q));
    d2eexy[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                 C13261 +
             (C38293 * C187 - C38365 * C113 + C38294 * C931 - C38366 * C830) *
                 C89093) *
                C54750 +
            ((C72766 - C72767 + C72768 - C72769) * C13261 +
             (C72770 - C72771 + C72772 - C72773) * C89093) *
                C54751) *
               C89337 +
           (((C72767 - C72766 + C72769 - C72768) * C13261 +
             (C72771 - C72770 + C72773 - C72772) * C89093) *
                C54750 +
            ((C72774 - C72775 + C72776 - C72777) * C13261 +
             (C72778 - C72779 + C72780 - C72781) * C89093) *
                C54751) *
               C89338 +
           (((C72775 - C72774 + C72777 - C72776) * C13261 +
             (C72779 - C72778 + C72781 - C72780) * C89093) *
                C54750 +
            ((C83851 - C83852 + C83853 - C83854) * C13261 +
             (C83855 - C83856 + C83857 - C83858) * C89093) *
                C54751) *
               C11948) *
              C89137 * C89299 +
          ((((C38369 - C38368 + C38371 - C38370) * C13261 +
             (C38373 - C38372 + C38375 - C38374) * C89093) *
                C54750 +
            ((C40163 - C40164 + C40165 - C40166) * C13261 +
             (C40167 - C40168 + C40169 - C40170) * C89093) *
                C54751) *
               C89337 +
           (((C40164 - C40163 + C40166 - C40165) * C13261 +
             (C40168 - C40167 + C40170 - C40169) * C89093) *
                C54750 +
            ((C40171 - C40172 + C40173 - C40174) * C13261 +
             (C40175 - C40176 + C40177 - C40178) * C89093) *
                C54751) *
               C89338 +
           (((C40172 - C40171 + C40174 - C40173) * C13261 +
             (C40176 - C40175 + C40178 - C40177) * C89093) *
                C54750 +
            ((C38365 * C10543 - C38293 * C10605 + C38366 * C29239 -
              C38294 * C29348) *
                 C13261 +
             (C38365 * C10548 - C38293 * C10608 + C38366 * C29241 -
              C38294 * C29349) *
                 C89093) *
                C54751) *
               C11948) *
              C89137 * C89124)) /
        (p * q * std::sqrt(p + q));
    d2eexz[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                 C13261 +
             (C54750 * C270 - C54884 * C113 + C54751 * C1942 - C54885 * C1735) *
                 C89093) *
                C38293 +
            ((C71930 - C71931 + C71932 - C71933) * C13261 +
             (C71934 - C71935 + C71936 - C71937) * C89093) *
                C38294) *
               C89337 +
           (((C54884 * C1724 - C54750 * C1934 + C54885 * C1725 -
              C54751 * C1937) *
                 C13261 +
             (C54884 * C1735 - C54750 * C1942 + C54885 * C1737 -
              C54751 * C1945) *
                 C89093) *
                C38293 +
            ((C75685 - C75686 + C75687 - C75688) * C13261 +
             (C75689 - C75690 + C75691 - C75692) * C89093) *
                C38294) *
               C89338 +
           (((C54750 * C1937 - C54884 * C1725 + C54751 * C10660 -
              C54885 * C10544) *
                 C13261 +
             (C54750 * C1945 - C54884 * C1737 + C54751 * C10663 -
              C54885 * C10550) *
                 C89093) *
                C38293 +
            ((C78329 - C78330 + C78331 - C78332) * C13261 +
             (C78333 - C78334 + C78335 - C78336) * C89093) *
                C38294) *
               C11948) *
              C89137 * C89299 +
          ((((C54888 - C54887 + C54890 - C54889) * C13261 +
             (C54892 - C54891 + C54894 - C54893) * C89093) *
                C38293 +
            ((C55661 - C55662 + C55663 - C55664) * C13261 +
             (C55665 - C55666 + C55667 - C55668) * C89093) *
                C38294) *
               C89337 +
           (((C56667 - C56666 + C56669 - C56668) * C13261 +
             (C56671 - C56670 + C56673 - C56672) * C89093) *
                C38293 +
            ((C59606 - C59607 + C59608 - C59609) * C13261 +
             (C59610 - C59611 + C59612 - C59613) * C89093) *
                C38294) *
               C89338 +
           (((C56675 - C56674 + C56677 - C56676) * C13261 +
             (C56679 - C56678 + C56681 - C56680) * C89093) *
                C38293 +
            ((C54884 * C6248 - C54750 * C6414 + C54885 * C29239 -
              C54751 * C29460) *
                 C13261 +
             (C54884 * C6253 - C54750 * C6417 + C54885 * C29241 -
              C54751 * C29461) *
                 C89093) *
                C38294) *
               C11948) *
              C89137 * C89124)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C38365 +
             (C89093 * C352 - C13261 * C346) * C38293 +
             (C14060 - C14061) * C38366 + (C14062 - C14063) * C38294) *
                C54750 +
            ((C27308 - C27309) * C38365 + (C27310 - C27311) * C38293 +
             C75823 * C38366 + C75824 * C38294) *
                C54751) *
               C89337 +
           (((C27309 - C27308) * C38365 + (C27311 - C27310) * C38293 +
             C75825 * C38366 + C75826 * C38294) *
                C54750 +
            ((C27313 - C27312) * C38365 + (C27315 - C27314) * C38293 +
             C31534 * C38366 + C31535 * C38294) *
                C54751) *
               C89338 +
           ((C27332 * C38365 + C27333 * C38293 + C78435 * C38366 +
             C78436 * C38294) *
                C54750 +
            ((C27317 - C27316) * C38365 + (C27319 - C27318) * C38293 +
             (C31536 - C31537) * C38366 + (C31538 - C31539) * C38294) *
                C54751) *
               C11948) *
              C89137 * C89299 +
          ((((C13261 * C107 - C89093 * C114) * C38365 +
             (C13261 * C347 - C89093 * C353) * C38293 +
             (C14072 - C14073) * C38366 + (C14074 - C14075) * C38294) *
                C54750 +
            ((C27320 - C27321) * C38365 + (C27322 - C27323) * C38293 +
             C75827 * C38366 + C75828 * C38294) *
                C54751) *
               C89337 +
           (((C27321 - C27320) * C38365 + (C27323 - C27322) * C38293 +
             C75829 * C38366 + C75830 * C38294) *
                C54750 +
            ((C27325 - C27324) * C38365 + (C27327 - C27326) * C38293 +
             (C29563 - C29564) * C38366 + (C29565 - C29566) * C38294) *
                C54751) *
               C89338 +
           ((C27334 * C38365 + C27335 * C38293 + (C29564 - C29563) * C38366 +
             (C29566 - C29565) * C38294) *
                C54750 +
            ((C27329 - C27328) * C38365 + (C27331 - C27330) * C38293 +
             (C13261 * C29239 - C89093 * C29240) * C38366 +
             (C13261 * C29560 - C89093 * C29561) * C38294) *
                C54751) *
               C11948) *
              C89137 * C89124)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C38365 * C181 - C38589 * C106 - C38365 * C346 + C38293 * C409 +
             C38366 * C923 - C38590 * C819 - C38366 * C1135 + C38294 * C1227) *
                C89093 * C54750 +
            (C73100 + C73101) * C89093 * C54751) *
               C89337 -
           ((C73102 + C73103) * C89093 * C54751 +
            (C73101 + C73100) * C89093 * C54750) *
               C89338 +
           ((C73103 + C73102) * C89093 * C54750 +
            (C84069 + C84070) * C89093 * C54751) *
               C11948) *
              C89137 * C89299 +
          (((C40502 + C40501) * C89093 * C54750 +
            (C40503 + C40504) * C89093 * C54751) *
               C89338 -
           ((C40501 + C40502) * C89093 * C54751 +
            (C38629 + C38628) * C89093 * C54750) *
               C89337 -
           ((C38366 * C29348 - C38590 * C29239 - C38366 * C29560 +
             C38294 * C29664 + C38365 * C10605 - C38589 * C10543 -
             C38365 * C10717 + C38293 * C10773) *
                C89093 * C54751 +
            (C40504 + C40503) * C89093 * C54750) *
               C11948) *
              C89137 * C89124)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                C38365 +
            (C54750 * C493 - C54884 * C346 + C54751 * C2240 - C54885 * C2040) *
                C38293 +
            (C71930 - C71931 + C71932 - C71933) * C38366 +
            (C72240 - C72241 + C72242 - C72243) * C38294) *
               C89093 * C89337 +
           ((C54884 * C1724 - C54750 * C1934 + C54885 * C1725 -
             C54751 * C1937) *
                C38365 +
            (C54884 * C2040 - C54750 * C2240 + C54885 * C2043 -
             C54751 * C2243) *
                C38293 +
            (C75685 - C75686 + C75687 - C75688) * C38366 +
            (C76105 - C76106 + C76107 - C76108) * C38294) *
               C89093 * C89338 +
           ((C54750 * C1937 - C54884 * C1725 + C54751 * C10660 -
             C54885 * C10544) *
                C38365 +
            (C54750 * C2243 - C54884 * C2043 + C54751 * C10825 -
             C54885 * C10716) *
                C38293 +
            (C78329 - C78330 + C78331 - C78332) * C38366 +
            (C78647 - C78648 + C78649 - C78650) * C38294) *
               C89093 * C11948) *
              C89137 * C89299 +
          (((C54888 - C54887 + C54890 - C54889) * C38365 +
            (C55110 - C55109 + C55112 - C55111) * C38293 +
            (C55661 - C55662 + C55663 - C55664) * C38366 +
            (C55978 - C55979 + C55980 - C55981) * C38294) *
               C89093 * C89337 +
           ((C56667 - C56666 + C56669 - C56668) * C38365 +
            (C57017 - C57016 + C57019 - C57018) * C38293 +
            (C59606 - C59607 + C59608 - C59609) * C38366 +
            (C60008 - C60009 + C60010 - C60011) * C38294) *
               C89093 * C89338 +
           ((C56675 - C56674 + C56677 - C56676) * C38365 +
            (C57021 - C57020 + C57023 - C57022) * C38293 +
            (C54884 * C6248 - C54750 * C6414 + C54885 * C29239 -
             C54751 * C29460) *
                C38366 +
            (C54884 * C6494 - C54750 * C6651 + C54885 * C29560 -
             C54751 * C29788) *
                C38294) *
               C89093 * C11948) *
              C89137 * C89124)) /
        (p * q * std::sqrt(p + q));
    d2eezx[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C54884 +
             (C89093 * C571 - C13261 * C565) * C54750 +
             (C27308 - C27309) * C54885 + (C27606 - C27607) * C54751) *
                C38293 +
            ((C14060 - C14061) * C54884 + (C14328 - C14329) * C54750 +
             C75823 * C54885 + C76239 * C54751) *
                C38294) *
               C89337 +
           (((C27309 - C27308) * C54884 + (C27607 - C27606) * C54750 +
             (C27313 - C27312) * C54885 + (C27609 - C27608) * C54751) *
                C38293 +
            (C75825 * C54884 + C76240 * C54750 + C31534 * C54885 +
             C31777 * C54751) *
                C38294) *
               C89338 +
           ((C27332 * C54884 + C27618 * C54750 + (C27317 - C27316) * C54885 +
             (C27611 - C27610) * C54751) *
                C38293 +
            (C78435 * C54884 + C78749 * C54750 + (C31536 - C31537) * C54885 +
             (C31778 - C31779) * C54751) *
                C38294) *
               C11948) *
              C89137 * C89299 +
          ((((C13261 * C107 - C89093 * C114) * C54884 +
             (C13261 * C566 - C89093 * C572) * C54750 +
             (C27320 - C27321) * C54885 + (C27612 - C27613) * C54751) *
                C38293 +
            ((C14072 - C14073) * C54884 + (C14335 - C14336) * C54750 +
             C75827 * C54885 + C76241 * C54751) *
                C38294) *
               C89337 +
           (((C27321 - C27320) * C54884 + (C27613 - C27612) * C54750 +
             (C27325 - C27324) * C54885 + (C27615 - C27614) * C54751) *
                C38293 +
            (C75829 * C54884 + C76242 * C54750 + (C29563 - C29564) * C54885 +
             (C29890 - C29891) * C54751) *
                C38294) *
               C89338 +
           ((C27334 * C54884 + C27619 * C54750 + (C27329 - C27328) * C54885 +
             (C27617 - C27616) * C54751) *
                C38293 +
            ((C29564 - C29563) * C54884 + (C29891 - C29890) * C54750 +
             (C13261 * C29239 - C89093 * C29240) * C54885 +
             (C13261 * C29887 - C89093 * C29888) * C54751) *
                C38294) *
               C11948) *
              C89137 * C89124)) /
        (p * q * std::sqrt(p + q));
    d2eezy[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                C54884 +
            (C38293 * C627 - C38365 * C565 + C38294 * C1515 - C38366 * C1425) *
                C54750 +
            (C72766 - C72767 + C72768 - C72769) * C54885 +
            (C73398 - C73399 + C73400 - C73401) * C54751) *
               C89093 * C89337 +
           ((C72767 - C72766 + C72769 - C72768) * C54884 +
            (C73399 - C73398 + C73401 - C73400) * C54750 +
            (C72774 - C72775 + C72776 - C72777) * C54885 +
            (C73402 - C73403 + C73404 - C73405) * C54751) *
               C89093 * C89338 +
           ((C72775 - C72774 + C72777 - C72776) * C54884 +
            (C73403 - C73402 + C73405 - C73404) * C54750 +
            (C83851 - C83852 + C83853 - C83854) * C54885 +
            (C84269 - C84270 + C84271 - C84272) * C54751) *
               C89093 * C11948) *
              C89137 * C89299 +
          (((C38369 - C38368 + C38371 - C38370) * C54884 +
            (C38833 - C38832 + C38835 - C38834) * C54750 +
            (C40163 - C40164 + C40165 - C40166) * C54885 +
            (C40801 - C40802 + C40803 - C40804) * C54751) *
               C89093 * C89337 +
           ((C40164 - C40163 + C40166 - C40165) * C54884 +
            (C40802 - C40801 + C40804 - C40803) * C54750 +
            (C40171 - C40172 + C40173 - C40174) * C54885 +
            (C40805 - C40806 + C40807 - C40808) * C54751) *
               C89093 * C89338 +
           ((C40172 - C40171 + C40174 - C40173) * C54884 +
            (C40806 - C40805 + C40808 - C40807) * C54750 +
            (C38365 * C10543 - C38293 * C10605 + C38366 * C29239 -
             C38294 * C29348) *
                C54885 +
            (C38365 * C10879 - C38293 * C10935 + C38366 * C29887 -
             C38294 * C29989) *
                C54751) *
               C89093 * C11948) *
              C89137 * C89124)) /
        (p * q * std::sqrt(p + q));
    d2eezz[28] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C54884 * C264 - C55318 * C106 - C54884 * C565 +
                       C54750 * C700 + C54885 * C1934 - C55319 * C1724 -
                       C54885 * C2330 + C54751 * C2512) *
                          C38293 +
                      (C72566 + C72567) * C38294) *
                         C89093 * C89337 -
                     ((C76519 + C76520) * C38294 +
                      (C54885 * C1937 - C55319 * C1725 - C54885 * C2333 +
                       C54751 * C2513 + C54884 * C1934 - C55318 * C1724 -
                       C54884 * C2330 + C54750 * C2512) *
                          C38293) *
                         C89093 * C89338 +
                     ((C54884 * C1937 - C55318 * C1725 - C54884 * C2333 +
                       C54750 * C2513 + C54885 * C10660 - C55319 * C10544 -
                       C54885 * C10878 + C54751 * C10989) *
                          C38293 +
                      (C78962 + C78963) * C38294) *
                         C89093 * C11948) *
                        C89137 * C89299 +
                    (((C57362 + C57361) * C38293 + (C60416 + C60417) * C38294) *
                         C89093 * C89338 -
                     ((C56306 + C56307) * C38294 + (C55358 + C55357) * C38293) *
                         C89093 * C89337 -
                     ((C54885 * C29460 - C55319 * C29239 - C54885 * C29887 +
                       C54751 * C30094 + C54884 * C6414 - C55318 * C6248 -
                       C54884 * C6728 + C54750 * C6885) *
                          C38294 +
                      (C57364 + C57363) * C38293) *
                         C89093 * C11948) *
                        C89137 * C89124)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                 C54750 +
             C27042 * C54751) *
                C38293 +
            (C71726 + C71727) * C38294) *
               C9228 -
           ((C75413 + C75414) * C38294 +
            (C27043 * C54751 + C27042 * C54750) * C38293) *
               C89217) *
              C89137 * C5075 +
          (((C27045 * C54750 + C27046 * C54751) * C38293 +
            (C75415 + C75416) * C38294) *
               C89217 -
           ((C71731 + C71730) * C38294 +
            (C27045 * C54751 +
             (C13261 * C114 - C13262 * C107 - C13261 * C115 + C89093 * C125) *
                 C54750) *
                C38293) *
               C9228) *
              C89137 * C5076 +
          ((((C13261 * C116 - C13262 * C108 - C13261 * C117 + C89093 * C126) *
                 C54750 +
             C28534 * C54751) *
                C38293 +
            (C73602 + C73610) * C38294) *
               C9228 -
           (((C13261 * C6250 - C13262 * C6247 - C13261 * C6251 +
              C89093 * C6256) *
                 C54751 +
             C73609 * C54750) *
                C38294 +
            (C28535 * C54751 + C28534 * C54750) * C38293) *
               C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                 C54750 +
             C27042 * C54751) *
                C38293 +
            (C71726 + C71727) * C38294) *
               C9228 -
           ((C75413 + C75414) * C38294 +
            (C27043 * C54751 + C27042 * C54750) * C38293) *
               C89217) *
              C812 +
          (((C75414 + C75413) * C38293 + (C81114 + C81115) * C38294) * C89217 -
           ((C71728 + C71729) * C38294 + (C71727 + C71726) * C38293) * C9228) *
              C813 +
          (((C71729 + C71728) * C38293 + (C77469 + C77470) * C38294) * C9228 -
           (((C13261 * C18840 - C13262 * C18839 - C13261 * C18841 +
              C89093 * C18842) *
                 C54751 +
             C21134 * C54750) *
                C38294 +
            (C81115 + C81114) * C38293) *
               C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eexy[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                 C13261 +
             (C38293 * C187 - C38365 * C113 + C38294 * C931 - C38366 * C830) *
                 C89093) *
                C54750 +
            ((C72766 - C72767 + C72768 - C72769) * C13261 +
             (C72770 - C72771 + C72772 - C72773) * C89093) *
                C54751) *
               C9228 +
           (((C72767 - C72766 + C72769 - C72768) * C13261 +
             (C72771 - C72770 + C72773 - C72772) * C89093) *
                C54750 +
            ((C72774 - C72775 + C72776 - C72777) * C13261 +
             (C72778 - C72779 + C72780 - C72781) * C89093) *
                C54751) *
               C89217) *
              C89137 * C5075 +
          ((((C38369 - C38368 + C38371 - C38370) * C13261 +
             (C38373 - C38372 + C38375 - C38374) * C89093) *
                C54750 +
            ((C40163 - C40164 + C40165 - C40166) * C13261 +
             (C40167 - C40168 + C40169 - C40170) * C89093) *
                C54751) *
               C9228 +
           (((C40164 - C40163 + C40166 - C40165) * C13261 +
             (C40168 - C40167 + C40170 - C40169) * C89093) *
                C54750 +
            ((C40171 - C40172 + C40173 - C40174) * C13261 +
             (C40175 - C40176 + C40177 - C40178) * C89093) *
                C54751) *
               C89217) *
              C89137 * C5076 +
          ((((C38377 - C38376 + C38379 - C38378) * C13261 +
             (C38381 - C38380 + C38383 - C38382) * C89093) *
                C54750 +
            ((C42053 - C42054 + C42055 - C42056) * C13261 +
             (C42057 - C42058 + C42059 - C42060) * C89093) *
                C54751) *
               C9228 +
           (((C42054 - C42053 + C42056 - C42055) * C13261 +
             (C42058 - C42057 + C42060 - C42059) * C89093) *
                C54750 +
            ((C38365 * C1727 - C38293 * C1833 + C38366 * C6247 -
              C38294 * C6335) *
                 C13261 +
             (C38365 * C1741 - C38293 * C1841 + C38366 * C6251 -
              C38294 * C6338) *
                 C89093) *
                C54751) *
               C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                 C13261 +
             (C38293 * C187 - C38365 * C113 + C38294 * C931 - C38366 * C830) *
                 C89093) *
                C54750 +
            ((C72766 - C72767 + C72768 - C72769) * C13261 +
             (C72770 - C72771 + C72772 - C72773) * C89093) *
                C54751) *
               C9228 +
           (((C72767 - C72766 + C72769 - C72768) * C13261 +
             (C72771 - C72770 + C72773 - C72772) * C89093) *
                C54750 +
            ((C72774 - C72775 + C72776 - C72777) * C13261 +
             (C72778 - C72779 + C72780 - C72781) * C89093) *
                C54751) *
               C89217) *
              C812 +
          ((((C38365 * C819 - C38293 * C923 + C38366 * C820 - C38294 * C926) *
                 C13261 +
             (C38365 * C830 - C38293 * C931 + C38366 * C832 - C38294 * C934) *
                 C89093) *
                C54750 +
            ((C75547 - C75548 + C75549 - C75550) * C13261 +
             (C75551 - C75552 + C75553 - C75554) * C89093) *
                C54751) *
               C9228 +
           (((C75548 - C75547 + C75550 - C75549) * C13261 +
             (C75552 - C75551 + C75554 - C75553) * C89093) *
                C54750 +
            ((C78223 - C78224 + C78225 - C78226) * C13261 +
             (C78227 - C78228 + C78229 - C78230) * C89093) *
                C54751) *
               C89217) *
              C813 +
          ((((C38293 * C926 - C38365 * C820 + C38294 * C5787 - C38366 * C5727) *
                 C13261 +
             (C38293 * C934 - C38365 * C832 + C38294 * C5790 - C38366 * C5733) *
                 C89093) *
                C54750 +
            ((C81214 - C81215 + C81216 - C81217) * C13261 +
             (C81218 - C81219 + C81220 - C81221) * C89093) *
                C54751) *
               C9228 +
           (((C81215 - C81214 + C81217 - C81216) * C13261 +
             (C81219 - C81218 + C81221 - C81220) * C89093) *
                C54750 +
            ((C38365 * C14601 - C38293 * C14683 + C38366 * C18839 -
              C38294 * C18933) *
                 C13261 +
             (C38365 * C14604 - C38293 * C14685 + C38366 * C18841 -
              C38294 * C18934) *
                 C89093) *
                C54751) *
               C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eexz[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                 C13261 +
             (C54750 * C270 - C54884 * C113 + C54751 * C1942 - C54885 * C1735) *
                 C89093) *
                C38293 +
            ((C71930 - C71931 + C71932 - C71933) * C13261 +
             (C71934 - C71935 + C71936 - C71937) * C89093) *
                C38294) *
               C9228 +
           (((C54884 * C1724 - C54750 * C1934 + C54885 * C1725 -
              C54751 * C1937) *
                 C13261 +
             (C54884 * C1735 - C54750 * C1942 + C54885 * C1737 -
              C54751 * C1945) *
                 C89093) *
                C38293 +
            ((C75685 - C75686 + C75687 - C75688) * C13261 +
             (C75689 - C75690 + C75691 - C75692) * C89093) *
                C38294) *
               C89217) *
              C89137 * C5075 +
          ((((C54888 - C54887 + C54890 - C54889) * C13261 +
             (C54892 - C54891 + C54894 - C54893) * C89093) *
                C38293 +
            ((C55661 - C55662 + C55663 - C55664) * C13261 +
             (C55665 - C55666 + C55667 - C55668) * C89093) *
                C38294) *
               C9228 +
           (((C56667 - C56666 + C56669 - C56668) * C13261 +
             (C56671 - C56670 + C56673 - C56672) * C89093) *
                C38293 +
            ((C59606 - C59607 + C59608 - C59609) * C13261 +
             (C59610 - C59611 + C59612 - C59613) * C89093) *
                C38294) *
               C89217) *
              C89137 * C5076 +
          ((((C54896 - C54895 + C54898 - C54897) * C13261 +
             (C54900 - C54899 + C54902 - C54901) * C89093) *
                C38293 +
            ((C57659 - C57660 + C57661 - C57662) * C13261 +
             (C57663 - C57664 + C57665 - C57666) * C89093) *
                C38294) *
               C9228 +
           (((C58584 - C58583 + C58586 - C58585) * C13261 +
             (C58588 - C58587 + C58590 - C58589) * C89093) *
                C38293 +
            ((C54884 * C4099 - C54750 * C4327 + C54885 * C6247 -
              C54751 * C6415) *
                 C13261 +
             (C54884 * C4106 - C54750 * C4331 + C54885 * C6251 -
              C54751 * C6418) *
                 C89093) *
                C38294) *
               C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                 C13261 +
             (C54750 * C270 - C54884 * C113 + C54751 * C1942 - C54885 * C1735) *
                 C89093) *
                C38293 +
            ((C71930 - C71931 + C71932 - C71933) * C13261 +
             (C71934 - C71935 + C71936 - C71937) * C89093) *
                C38294) *
               C9228 +
           (((C54884 * C1724 - C54750 * C1934 + C54885 * C1725 -
              C54751 * C1937) *
                 C13261 +
             (C54884 * C1735 - C54750 * C1942 + C54885 * C1737 -
              C54751 * C1945) *
                 C89093) *
                C38293 +
            ((C75685 - C75686 + C75687 - C75688) * C13261 +
             (C75689 - C75690 + C75691 - C75692) * C89093) *
                C38294) *
               C89217) *
              C812 +
          ((((C71931 - C71930 + C71933 - C71932) * C13261 +
             (C71935 - C71934 + C71937 - C71936) * C89093) *
                C38293 +
            ((C71938 - C71939 + C71940 - C71941) * C13261 +
             (C71942 - C71943 + C71944 - C71945) * C89093) *
                C38294) *
               C9228 +
           (((C75686 - C75685 + C75688 - C75687) * C13261 +
             (C75690 - C75689 + C75692 - C75691) * C89093) *
                C38293 +
            ((C81320 - C81321 + C81322 - C81323) * C13261 +
             (C81324 - C81325 + C81326 - C81327) * C89093) *
                C38294) *
               C89217) *
              C813 +
          ((((C71939 - C71938 + C71941 - C71940) * C13261 +
             (C71943 - C71942 + C71945 - C71944) * C89093) *
                C38293 +
            ((C77603 - C77604 + C77605 - C77606) * C13261 +
             (C77607 - C77608 + C77609 - C77610) * C89093) *
                C38294) *
               C9228 +
           (((C81321 - C81320 + C81323 - C81322) * C13261 +
             (C81325 - C81324 + C81327 - C81326) * C89093) *
                C38293 +
            ((C54884 * C16683 - C54750 * C16923 + C54885 * C18839 -
              C54751 * C19009) *
                 C13261 +
             (C54884 * C16686 - C54750 * C16925 + C54885 * C18841 -
              C54751 * C19010) *
                 C89093) *
                C38294) *
               C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eeyx[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C38365 +
             (C89093 * C352 - C13261 * C346) * C38293 +
             (C14060 - C14061) * C38366 + (C14062 - C14063) * C38294) *
                C54750 +
            ((C27308 - C27309) * C38365 + (C27310 - C27311) * C38293 +
             C75823 * C38366 + C75824 * C38294) *
                C54751) *
               C9228 +
           (((C27309 - C27308) * C38365 + (C27311 - C27310) * C38293 +
             C75825 * C38366 + C75826 * C38294) *
                C54750 +
            ((C27313 - C27312) * C38365 + (C27315 - C27314) * C38293 +
             C31534 * C38366 + C31535 * C38294) *
                C54751) *
               C89217) *
              C89137 * C5075 +
          ((((C13261 * C107 - C89093 * C114) * C38365 +
             (C13261 * C347 - C89093 * C353) * C38293 +
             (C14072 - C14073) * C38366 + (C14074 - C14075) * C38294) *
                C54750 +
            ((C27320 - C27321) * C38365 + (C27322 - C27323) * C38293 +
             C75827 * C38366 + C75828 * C38294) *
                C54751) *
               C9228 +
           (((C27321 - C27320) * C38365 + (C27323 - C27322) * C38293 +
             C75829 * C38366 + C75830 * C38294) *
                C54750 +
            ((C27325 - C27324) * C38365 + (C27327 - C27326) * C38293 +
             (C29563 - C29564) * C38366 + (C29565 - C29566) * C38294) *
                C54751) *
               C89217) *
              C89137 * C5076 +
          ((((C89093 * C116 - C13261 * C108) * C38365 +
             (C89093 * C354 - C13261 * C348) * C38293 +
             (C15538 - C15539) * C38366 + (C15540 - C15541) * C38294) *
                C54750 +
            ((C28758 - C28759) * C38365 + (C28760 - C28761) * C38293 +
             (C73905 - C73906) * C38366 + (C73907 - C73908) * C38294) *
                C54751) *
               C9228 +
           (((C28759 - C28758) * C38365 + (C28761 - C28760) * C38293 +
             (C73906 - C73905) * C38366 + (C73908 - C73907) * C38294) *
                C54750 +
            ((C28763 - C28762) * C38365 + (C28765 - C28764) * C38293 +
             (C13261 * C6247 - C89093 * C6250) * C38366 +
             (C13261 * C6495 - C89093 * C6498) * C38294) *
                C54751) *
               C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C38365 +
             (C89093 * C352 - C13261 * C346) * C38293 +
             (C14060 - C14061) * C38366 + (C14062 - C14063) * C38294) *
                C54750 +
            ((C27308 - C27309) * C38365 + (C27310 - C27311) * C38293 +
             C75823 * C38366 + C75824 * C38294) *
                C54751) *
               C9228 +
           (((C27309 - C27308) * C38365 + (C27311 - C27310) * C38293 +
             C75825 * C38366 + C75826 * C38294) *
                C54750 +
            ((C27313 - C27312) * C38365 + (C27315 - C27314) * C38293 +
             C31534 * C38366 + C31535 * C38294) *
                C54751) *
               C89217) *
              C812 +
          ((((C14061 - C14060) * C38365 + (C14063 - C14062) * C38293 +
             (C14065 - C14064) * C38366 + (C14067 - C14066) * C38294) *
                C54750 +
            (C75825 * C38365 + C75826 * C38293 + C21373 * C38366 +
             C21374 * C38294) *
                C54751) *
               C9228 +
           ((C75823 * C38365 + C75824 * C38293 + C81426 * C38366 +
             C81427 * C38294) *
                C54750 +
            (C78435 * C38365 + C78436 * C38293 + (C19100 - C19101) * C38366 +
             (C19102 - C19103) * C38294) *
                C54751) *
               C89217) *
              C813 +
          (((C14084 * C38365 + C14085 * C38293 + (C14069 - C14068) * C38366 +
             (C14071 - C14070) * C38294) *
                C54750 +
            (C81426 * C38365 + C81427 * C38293 + (C21375 - C21376) * C38366 +
             (C21377 - C21378) * C38294) *
                C54751) *
               C9228 +
           ((C21373 * C38365 + C21374 * C38293 + (C21376 - C21375) * C38366 +
             (C21378 - C21377) * C38294) *
                C54750 +
            ((C19101 - C19100) * C38365 + (C19103 - C19102) * C38293 +
             (C13261 * C18839 - C89093 * C18840) * C38366 +
             (C13261 * C19093 - C89093 * C19094) * C38294) *
                C54751) *
               C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eeyy[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C38365 * C181 - C38589 * C106 - C38365 * C346 + C38293 * C409 +
             C38366 * C923 - C38590 * C819 - C38366 * C1135 + C38294 * C1227) *
                C89093 * C54750 +
            (C73100 + C73101) * C89093 * C54751) *
               C9228 -
           ((C73102 + C73103) * C89093 * C54751 +
            (C73101 + C73100) * C89093 * C54750) *
               C89217) *
              C89137 * C5075 +
          (((C40502 + C40501) * C89093 * C54750 +
            (C40503 + C40504) * C89093 * C54751) *
               C89217 -
           ((C40501 + C40502) * C89093 * C54751 +
            (C38629 + C38628) * C89093 * C54750) *
               C9228) *
              C89137 * C5076 +
          (((C38631 + C38630) * C89093 * C54750 +
            (C42367 + C42368) * C89093 * C54751) *
               C9228 -
           ((C38366 * C6335 - C38590 * C6247 - C38366 * C6495 + C38294 * C6573 +
             C38365 * C1833 - C38589 * C1727 - C38365 * C2045 +
             C38293 * C2135) *
                C89093 * C54751 +
            (C42368 + C42367) * C89093 * C54750) *
               C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C38365 * C181 - C38589 * C106 - C38365 * C346 + C38293 * C409 +
             C38366 * C923 - C38590 * C819 - C38366 * C1135 + C38294 * C1227) *
                C89093 * C54750 +
            (C73100 + C73101) * C89093 * C54751) *
               C9228 -
           ((C73102 + C73103) * C89093 * C54751 +
            (C73101 + C73100) * C89093 * C54750) *
               C89217) *
              C812 +
          (((C75973 + C75974) * C89093 * C54750 +
            (C78547 + C78548) * C89093 * C54751) *
               C89217 -
           ((C75974 + C75973) * C89093 * C54751 +
            (C38366 * C926 - C38590 * C820 - C38366 * C1138 + C38294 * C1228 +
             C38365 * C923 - C38589 * C819 - C38365 * C1135 + C38293 * C1227) *
                C89093 * C54750) *
               C9228) *
              C813 +
          (((C38365 * C926 - C38589 * C820 - C38365 * C1138 + C38293 * C1228 +
             C38366 * C5787 - C38590 * C5727 - C38366 * C5899 +
             C38294 * C5957) *
                C89093 * C54750 +
            (C81538 + C81539) * C89093 * C54751) *
               C9228 -
           ((C38366 * C18933 - C38590 * C18839 - C38366 * C19093 +
             C38294 * C19177 + C38365 * C14683 - C38589 * C14601 -
             C38365 * C14839 + C38293 * C14917) *
                C89093 * C54751 +
            (C81539 + C81538) * C89093 * C54750) *
               C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eeyz[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                C38365 +
            (C54750 * C493 - C54884 * C346 + C54751 * C2240 - C54885 * C2040) *
                C38293 +
            (C71930 - C71931 + C71932 - C71933) * C38366 +
            (C72240 - C72241 + C72242 - C72243) * C38294) *
               C89093 * C9228 +
           ((C54884 * C1724 - C54750 * C1934 + C54885 * C1725 -
             C54751 * C1937) *
                C38365 +
            (C54884 * C2040 - C54750 * C2240 + C54885 * C2043 -
             C54751 * C2243) *
                C38293 +
            (C75685 - C75686 + C75687 - C75688) * C38366 +
            (C76105 - C76106 + C76107 - C76108) * C38294) *
               C89093 * C89217) *
              C89137 * C5075 +
          (((C54888 - C54887 + C54890 - C54889) * C38365 +
            (C55110 - C55109 + C55112 - C55111) * C38293 +
            (C55661 - C55662 + C55663 - C55664) * C38366 +
            (C55978 - C55979 + C55980 - C55981) * C38294) *
               C89093 * C9228 +
           ((C56667 - C56666 + C56669 - C56668) * C38365 +
            (C57017 - C57016 + C57019 - C57018) * C38293 +
            (C59606 - C59607 + C59608 - C59609) * C38366 +
            (C60008 - C60009 + C60010 - C60011) * C38294) *
               C89093 * C89217) *
              C89137 * C5076 +
          (((C54896 - C54895 + C54898 - C54897) * C38365 +
            (C55114 - C55113 + C55116 - C55115) * C38293 +
            (C57659 - C57660 + C57661 - C57662) * C38366 +
            (C57961 - C57962 + C57963 - C57964) * C38294) *
               C89093 * C9228 +
           ((C58584 - C58583 + C58586 - C58585) * C38365 +
            (C58896 - C58895 + C58898 - C58897) * C38293 +
            (C54884 * C4099 - C54750 * C4327 + C54885 * C6247 -
             C54751 * C6415) *
                C38366 +
            (C54884 * C4441 - C54750 * C4663 + C54885 * C6495 -
             C54751 * C6652) *
                C38294) *
               C89093 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                C38365 +
            (C54750 * C493 - C54884 * C346 + C54751 * C2240 - C54885 * C2040) *
                C38293 +
            (C71930 - C71931 + C71932 - C71933) * C38366 +
            (C72240 - C72241 + C72242 - C72243) * C38294) *
               C89093 * C9228 +
           ((C54884 * C1724 - C54750 * C1934 + C54885 * C1725 -
             C54751 * C1937) *
                C38365 +
            (C54884 * C2040 - C54750 * C2240 + C54885 * C2043 -
             C54751 * C2243) *
                C38293 +
            (C75685 - C75686 + C75687 - C75688) * C38366 +
            (C76105 - C76106 + C76107 - C76108) * C38294) *
               C89093 * C89217) *
              C812 +
          (((C71931 - C71930 + C71933 - C71932) * C38365 +
            (C72241 - C72240 + C72243 - C72242) * C38293 +
            (C71938 - C71939 + C71940 - C71941) * C38366 +
            (C72244 - C72245 + C72246 - C72247) * C38294) *
               C89093 * C9228 +
           ((C75686 - C75685 + C75688 - C75687) * C38365 +
            (C76106 - C76105 + C76108 - C76107) * C38293 +
            (C81320 - C81321 + C81322 - C81323) * C38366 +
            (C81638 - C81639 + C81640 - C81641) * C38294) *
               C89093 * C89217) *
              C813 +
          (((C71939 - C71938 + C71941 - C71940) * C38365 +
            (C72245 - C72244 + C72247 - C72246) * C38293 +
            (C77603 - C77604 + C77605 - C77606) * C38366 +
            (C77809 - C77810 + C77811 - C77812) * C38294) *
               C89093 * C9228 +
           ((C81321 - C81320 + C81323 - C81322) * C38365 +
            (C81639 - C81638 + C81641 - C81640) * C38293 +
            (C54884 * C16683 - C54750 * C16923 + C54885 * C18839 -
             C54751 * C19009) *
                C38366 +
            (C54884 * C17037 - C54750 * C17255 + C54885 * C19093 -
             C54751 * C19252) *
                C38294) *
               C89093 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eezx[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C54884 +
             (C89093 * C571 - C13261 * C565) * C54750 +
             (C27308 - C27309) * C54885 + (C27606 - C27607) * C54751) *
                C38293 +
            ((C14060 - C14061) * C54884 + (C14328 - C14329) * C54750 +
             C75823 * C54885 + C76239 * C54751) *
                C38294) *
               C9228 +
           (((C27309 - C27308) * C54884 + (C27607 - C27606) * C54750 +
             (C27313 - C27312) * C54885 + (C27609 - C27608) * C54751) *
                C38293 +
            (C75825 * C54884 + C76240 * C54750 + C31534 * C54885 +
             C31777 * C54751) *
                C38294) *
               C89217) *
              C89137 * C5075 +
          ((((C13261 * C107 - C89093 * C114) * C54884 +
             (C13261 * C566 - C89093 * C572) * C54750 +
             (C27320 - C27321) * C54885 + (C27612 - C27613) * C54751) *
                C38293 +
            ((C14072 - C14073) * C54884 + (C14335 - C14336) * C54750 +
             C75827 * C54885 + C76241 * C54751) *
                C38294) *
               C9228 +
           (((C27321 - C27320) * C54884 + (C27613 - C27612) * C54750 +
             (C27325 - C27324) * C54885 + (C27615 - C27614) * C54751) *
                C38293 +
            (C75829 * C54884 + C76242 * C54750 + (C29563 - C29564) * C54885 +
             (C29890 - C29891) * C54751) *
                C38294) *
               C89217) *
              C89137 * C5076 +
          ((((C89093 * C116 - C13261 * C108) * C54884 +
             (C89093 * C573 - C13261 * C567) * C54750 +
             (C28758 - C28759) * C54885 + (C28990 - C28991) * C54751) *
                C38293 +
            ((C15538 - C15539) * C54884 + (C15768 - C15769) * C54750 +
             (C73905 - C73906) * C54885 + (C74203 - C74204) * C54751) *
                C38294) *
               C9228 +
           (((C28759 - C28758) * C54884 + (C28991 - C28990) * C54750 +
             (C28763 - C28762) * C54885 + (C28993 - C28992) * C54751) *
                C38293 +
            ((C73906 - C73905) * C54884 + (C74204 - C74203) * C54750 +
             (C13261 * C6247 - C89093 * C6250) * C54885 +
             (C13261 * C6729 - C89093 * C6732) * C54751) *
                C38294) *
               C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C54884 +
             (C89093 * C571 - C13261 * C565) * C54750 +
             (C27308 - C27309) * C54885 + (C27606 - C27607) * C54751) *
                C38293 +
            ((C14060 - C14061) * C54884 + (C14328 - C14329) * C54750 +
             C75823 * C54885 + C76239 * C54751) *
                C38294) *
               C9228 +
           (((C27309 - C27308) * C54884 + (C27607 - C27606) * C54750 +
             (C27313 - C27312) * C54885 + (C27609 - C27608) * C54751) *
                C38293 +
            (C75825 * C54884 + C76240 * C54750 + C31534 * C54885 +
             C31777 * C54751) *
                C38294) *
               C89217) *
              C812 +
          ((((C14061 - C14060) * C54884 + (C14329 - C14328) * C54750 +
             C75825 * C54885 + C76240 * C54751) *
                C38293 +
            ((C14065 - C14064) * C54884 + (C14332 - C14331) * C54750 +
             C21373 * C54885 + C21609 * C54751) *
                C38294) *
               C9228 +
           ((C75823 * C54884 + C76239 * C54750 + C78435 * C54885 +
             C78749 * C54751) *
                C38293 +
            (C81426 * C54884 + C81740 * C54750 + (C19100 - C19101) * C54885 +
             (C19336 - C19337) * C54751) *
                C38294) *
               C89217) *
              C813 +
          (((C14084 * C54884 + C14342 * C54750 + C81426 * C54885 +
             C81740 * C54751) *
                C38293 +
            ((C14069 - C14068) * C54884 + (C14334 - C14333) * C54750 +
             (C21375 - C21376) * C54885 + (C21610 - C21611) * C54751) *
                C38294) *
               C9228 +
           ((C21373 * C54884 + C21609 * C54750 + (C19101 - C19100) * C54885 +
             (C19337 - C19336) * C54751) *
                C38293 +
            ((C21376 - C21375) * C54884 + (C21611 - C21610) * C54750 +
             (C13261 * C18839 - C89093 * C18840) * C54885 +
             (C13261 * C19331 - C89093 * C19332) * C54751) *
                C38294) *
               C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eezy[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                C54884 +
            (C38293 * C627 - C38365 * C565 + C38294 * C1515 - C38366 * C1425) *
                C54750 +
            (C72766 - C72767 + C72768 - C72769) * C54885 +
            (C73398 - C73399 + C73400 - C73401) * C54751) *
               C89093 * C9228 +
           ((C72767 - C72766 + C72769 - C72768) * C54884 +
            (C73399 - C73398 + C73401 - C73400) * C54750 +
            (C72774 - C72775 + C72776 - C72777) * C54885 +
            (C73402 - C73403 + C73404 - C73405) * C54751) *
               C89093 * C89217) *
              C89137 * C5075 +
          (((C38369 - C38368 + C38371 - C38370) * C54884 +
            (C38833 - C38832 + C38835 - C38834) * C54750 +
            (C40163 - C40164 + C40165 - C40166) * C54885 +
            (C40801 - C40802 + C40803 - C40804) * C54751) *
               C89093 * C9228 +
           ((C40164 - C40163 + C40166 - C40165) * C54884 +
            (C40802 - C40801 + C40804 - C40803) * C54750 +
            (C40171 - C40172 + C40173 - C40174) * C54885 +
            (C40805 - C40806 + C40807 - C40808) * C54751) *
               C89093 * C89217) *
              C89137 * C5076 +
          (((C38377 - C38376 + C38379 - C38378) * C54884 +
            (C38837 - C38836 + C38839 - C38838) * C54750 +
            (C42053 - C42054 + C42055 - C42056) * C54885 +
            (C42663 - C42664 + C42665 - C42666) * C54751) *
               C89093 * C9228 +
           ((C42054 - C42053 + C42056 - C42055) * C54884 +
            (C42664 - C42663 + C42666 - C42665) * C54750 +
            (C38365 * C1727 - C38293 * C1833 + C38366 * C6247 -
             C38294 * C6335) *
                C54885 +
            (C38365 * C2335 - C38293 * C2425 + C38366 * C6729 -
             C38294 * C6809) *
                C54751) *
               C89093 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C38293 * C181 - C38365 * C106 + C38294 * C923 - C38366 * C819) *
                C54884 +
            (C38293 * C627 - C38365 * C565 + C38294 * C1515 - C38366 * C1425) *
                C54750 +
            (C72766 - C72767 + C72768 - C72769) * C54885 +
            (C73398 - C73399 + C73400 - C73401) * C54751) *
               C89093 * C9228 +
           ((C72767 - C72766 + C72769 - C72768) * C54884 +
            (C73399 - C73398 + C73401 - C73400) * C54750 +
            (C72774 - C72775 + C72776 - C72777) * C54885 +
            (C73402 - C73403 + C73404 - C73405) * C54751) *
               C89093 * C89217) *
              C812 +
          (((C38365 * C819 - C38293 * C923 + C38366 * C820 - C38294 * C926) *
                C54884 +
            (C38365 * C1425 - C38293 * C1515 + C38366 * C1428 -
             C38294 * C1518) *
                C54750 +
            (C75547 - C75548 + C75549 - C75550) * C54885 +
            (C76373 - C76374 + C76375 - C76376) * C54751) *
               C89093 * C9228 +
           ((C75548 - C75547 + C75550 - C75549) * C54884 +
            (C76374 - C76373 + C76376 - C76375) * C54750 +
            (C78223 - C78224 + C78225 - C78226) * C54885 +
            (C78848 - C78849 + C78850 - C78851) * C54751) *
               C89093 * C89217) *
              C813 +
          (((C38293 * C926 - C38365 * C820 + C38294 * C5787 - C38366 * C5727) *
                C54884 +
            (C38293 * C1518 - C38365 * C1428 + C38294 * C6117 -
             C38366 * C6061) *
                C54750 +
            (C81214 - C81215 + C81216 - C81217) * C54885 +
            (C81839 - C81840 + C81841 - C81842) * C54751) *
               C89093 * C9228 +
           ((C81215 - C81214 + C81217 - C81216) * C54884 +
            (C81840 - C81839 + C81842 - C81841) * C54750 +
            (C38365 * C14601 - C38293 * C14683 + C38366 * C18839 -
             C38294 * C18933) *
                C54885 +
            (C38365 * C15069 - C38293 * C15147 + C38366 * C19331 -
             C38294 * C19411) *
                C54751) *
               C89093 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eezz[29] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C54884 * C264 - C55318 * C106 - C54884 * C565 +
                       C54750 * C700 + C54885 * C1934 - C55319 * C1724 -
                       C54885 * C2330 + C54751 * C2512) *
                          C38293 +
                      (C72566 + C72567) * C38294) *
                         C89093 * C9228 -
                     ((C76519 + C76520) * C38294 +
                      (C54885 * C1937 - C55319 * C1725 - C54885 * C2333 +
                       C54751 * C2513 + C54884 * C1934 - C55318 * C1724 -
                       C54884 * C2330 + C54750 * C2512) *
                          C38293) *
                         C89093 * C89217) *
                        C89137 * C5075 +
                    (((C57362 + C57361) * C38293 + (C60416 + C60417) * C38294) *
                         C89093 * C89217 -
                     ((C56306 + C56307) * C38294 + (C55358 + C55357) * C38293) *
                         C89093 * C9228) *
                        C89137 * C5076 +
                    (((C55360 + C55359) * C38293 + (C58271 + C58272) * C38294) *
                         C89093 * C9228 -
                     ((C54885 * C6415 - C55319 * C6247 - C54885 * C6729 +
                       C54751 * C6884 + C54884 * C4327 - C55318 * C4099 -
                       C54884 * C4769 + C54750 * C4981) *
                          C38294 +
                      (C59211 + C59210) * C38293) *
                         C89093 * C89217) *
                        C89137 * C5077)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C54884 * C264 - C55318 * C106 - C54884 * C565 +
                       C54750 * C700 + C54885 * C1934 - C55319 * C1724 -
                       C54885 * C2330 + C54751 * C2512) *
                          C38293 +
                      (C72566 + C72567) * C38294) *
                         C89093 * C9228 -
                     ((C76519 + C76520) * C38294 +
                      (C54885 * C1937 - C55319 * C1725 - C54885 * C2333 +
                       C54751 * C2513 + C54884 * C1934 - C55318 * C1724 -
                       C54884 * C2330 + C54750 * C2512) *
                          C38293) *
                         C89093 * C89217) *
                        C812 +
                    (((C76520 + C76519) * C38293 + (C81953 + C81954) * C38294) *
                         C89093 * C89217 -
                     ((C72568 + C72569) * C38294 + (C72567 + C72566) * C38293) *
                         C89093 * C9228) *
                        C813 +
                    (((C72569 + C72568) * C38293 + (C78023 + C78024) * C38294) *
                         C89093 * C9228 -
                     ((C54885 * C19009 - C55319 * C18839 - C54885 * C19331 +
                       C54751 * C19486 + C54884 * C16923 - C55318 * C16683 -
                       C54884 * C17361 + C54750 * C17571) *
                          C38294 +
                      (C81954 + C81953) * C38293) *
                         C89093 * C89217) *
                        C814) *
                   C89118) /
                      (p * q * std::sqrt(p + q));
    d2eexx[30] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                C89247 * C13258 +
            C13794 * C13259 + C13795 * C13260) *
               C89153 * C89307 -
           (C13796 * C13260 + C13795 * C13259 + C13794 * C13258) * C89153 *
               C89189) *
              C89333 +
          ((C13797 * C13258 + C13798 * C13259 + C13799 * C13260) * C89153 *
               C89189 -
           (C13798 * C13260 + C13797 * C13259 +
            (C13261 * C114 - C13262 * C107 - C13261 * C115 + C89093 * C125) *
                C89247 * C13258) *
               C89153 * C89307) *
              C89334 +
          (((C13261 * C116 - C13262 * C108 - C13261 * C117 + C89093 * C126) *
                C89247 * C13258 +
            C15314 * C13259 + C15315 * C13260) *
               C89153 * C89307 -
           ((C13261 * C5728 - C13262 * C5725 - C13261 * C5729 +
             C89093 * C5734) *
                C89247 * C13260 +
            C15315 * C13259 + C15314 * C13258) *
               C89153 * C89189) *
              C2628)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C112 - C101 * C106 - C100 * C113 + C89 * C124 + C102 * C114 -
            C103 * C107 - C102 * C115 + C90 * C125 + C104 * C116 - C105 * C108 -
            C104 * C117 + C91 * C126) *
               C89247 * C89236 * C89153 * C89307 -
           (C104 * C825 - C105 * C817 - C104 * C826 + C91 * C841 + C102 * C827 -
            C103 * C818 - C102 * C828 + C90 * C842 + C100 * C829 - C101 * C819 -
            C100 * C830 + C89 * C843) *
               C89247 * C89236 * C89153 * C89189) *
              C89333 +
          ((C100 * C827 - C101 * C818 - C100 * C828 + C89 * C842 + C102 * C825 -
            C103 * C817 - C102 * C826 + C90 * C841 + C104 * C837 - C105 * C823 -
            C104 * C838 + C91 * C847) *
               C89247 * C89236 * C89153 * C89189 -
           (C104 * C118 - C105 * C109 - C104 * C119 + C91 * C127 + C102 * C116 -
            C103 * C108 - C102 * C117 + C90 * C126 + C100 * C114 - C101 * C107 -
            C100 * C115 + C89 * C125) *
               C89247 * C89236 * C89153 * C89307) *
              C89334 +
          ((C100 * C116 - C101 * C108 - C100 * C117 + C89 * C126 + C102 * C118 -
            C103 * C109 - C102 * C119 + C90 * C127 + C104 * C120 - C105 * C110 -
            C104 * C121 + C91 * C128) *
               C89247 * C89236 * C89153 * C89307 -
           (C104 * C2630 - C105 * C2629 - C104 * C2631 + C91 * C2632 +
            C102 * C837 - C103 * C823 - C102 * C838 + C90 * C847 + C100 * C825 -
            C101 * C817 - C100 * C826 + C89 * C841) *
               C89247 * C89236 * C89153 * C89189) *
              C2628)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                C25848 +
            C27042 * C25849 + C27043 * C25850) *
               C89236 * C89153 * C89307 -
           (C18856 * C25850 + C16717 * C25849 + C13788 * C25848) * C89236 *
               C89153 * C89189) *
              C89333 +
          ((C13791 * C25848 + C16718 * C25849 +
            (C13261 * C6252 - C13262 * C6248 - C13261 * C6253 +
             C89093 * C6257) *
                C25850) *
               C89236 * C89153 * C89189 -
           (C27046 * C25850 + C27045 * C25849 +
            (C13261 * C114 - C13262 * C107 - C13261 * C115 + C89093 * C125) *
                C25848) *
               C89236 * C89153 * C89307) *
              C89334 +
          (((C13261 * C116 - C13262 * C108 - C13261 * C117 + C89093 * C126) *
                C25848 +
            (C13261 * C1730 - C13262 * C1722 - C13261 * C1731 +
             C89093 * C1746) *
                C25849 +
            (C13261 * C1740 - C13262 * C1727 - C13261 * C1741 +
             C89093 * C1751) *
                C25850) *
               C89236 * C89153 * C89307 -
           ((C13261 * C6250 - C13262 * C6247 - C13261 * C6251 +
             C89093 * C6256) *
                C25850 +
            (C13261 * C4105 - C13262 * C4099 - C13261 * C4106 +
             C89093 * C4111) *
                C25849 +
            C15312 * C25848) *
               C89236 * C89153 * C89189) *
              C2628)) /
            (p * q * std::sqrt(p + q));
    d2eexy[30] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
             C13260 * C926 - C13315 * C820) *
                C13261 +
            (C13258 * C187 - C13313 * C113 + C13259 * C931 - C13314 * C830 +
             C13260 * C934 - C13315 * C832) *
                C89093) *
               C89247 * C89153 * C89307 +
           ((C13313 * C819 - C13258 * C923 + C13314 * C820 - C13259 * C926 +
             C13315 * C5727 - C13260 * C5787) *
                C13261 +
            (C13313 * C830 - C13258 * C931 + C13314 * C832 - C13259 * C934 +
             C13315 * C5733 - C13260 * C5790) *
                C89093) *
               C89247 * C89153 * C89189) *
              C89333 +
          (((C13313 * C107 - C13258 * C182 + C13314 * C818 - C13259 * C924 +
             C13315 * C821 - C13260 * C927) *
                C13261 +
            (C13313 * C115 - C13258 * C188 + C13314 * C828 - C13259 * C932 +
             C13315 * C834 - C13260 * C935) *
                C89093) *
               C89247 * C89153 * C89307 +
           ((C13258 * C924 - C13313 * C818 + C13259 * C927 - C13314 * C821 +
             C13260 * C5788 - C13315 * C5726) *
                C13261 +
            (C13258 * C932 - C13313 * C828 + C13259 * C935 - C13314 * C834 +
             C13260 * C5791 - C13315 * C5731) *
                C89093) *
               C89247 * C89153 * C89189) *
              C89334 +
          (((C13258 * C183 - C13313 * C108 + C13259 * C925 - C13314 * C817 +
             C13260 * C928 - C13315 * C822) *
                C13261 +
            (C13258 * C189 - C13313 * C117 + C13259 * C933 - C13314 * C826 +
             C13260 * C936 - C13315 * C836) *
                C89093) *
               C89247 * C89153 * C89307 +
           ((C13313 * C817 - C13258 * C925 + C13314 * C822 - C13259 * C928 +
             C13315 * C5725 - C13260 * C5789) *
                C13261 +
            (C13313 * C826 - C13258 * C933 + C13314 * C836 - C13259 * C936 +
             C13315 * C5729 - C13260 * C5792) *
                C89093) *
               C89247 * C89153 * C89189) *
              C2628)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89236 * C181 - C180 * C106) * C100 +
            (C89236 * C187 - C180 * C113) * C89 + (C194 - C195) * C102 +
            (C196 - C197) * C90 + C210 * C104 + C211 * C91) *
               C89247 * C89153 * C89307 +
           ((C180 * C819 - C89236 * C923) * C100 +
            (C180 * C830 - C89236 * C931) * C89 + (C940 - C941) * C102 +
            (C942 - C943) * C90 + C2710 * C104 + C2711 * C91) *
               C89247 * C89153 * C89189) *
              C89333 +
          (((C195 - C194) * C100 + (C197 - C196) * C89 + (C199 - C198) * C102 +
            (C201 - C200) * C90 + C212 * C104 + C213 * C91) *
               C89247 * C89153 * C89307 +
           ((C941 - C940) * C100 + (C943 - C942) * C89 + (C945 - C944) * C102 +
            (C947 - C946) * C90 + (C2712 - C2713) * C104 +
            (C2714 - C2715) * C91) *
               C89247 * C89153 * C89189) *
              C89334 +
          ((C210 * C100 + C211 * C89 + (C203 - C202) * C102 +
            (C205 - C204) * C90 + (C206 - C207) * C104 + (C208 - C209) * C91) *
               C89247 * C89153 * C89307 +
           (C2710 * C100 + C2711 * C89 + (C2713 - C2712) * C102 +
            (C2715 - C2714) * C90 + (C180 * C2629 - C89236 * C2707) * C104 +
            (C180 * C2631 - C89236 * C2708) * C91) *
               C89247 * C89153 * C89189) *
              C2628)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C13261 +
             (C89236 * C187 - C180 * C113) * C89093) *
                C25848 +
            ((C27126 - C27127) * C13261 + (C27128 - C27129) * C89093) * C25849 +
            C27151 * C25850) *
               C89153 * C89307 +
           (((C180 * C819 - C89236 * C923) * C13261 +
             (C180 * C830 - C89236 * C931) * C89093) *
                C25848 +
            ((C180 * C4097 - C89236 * C4211) * C13261 +
             (C180 * C4102 - C89236 * C4215) * C89093) *
                C25849 +
            ((C180 * C6249 - C89236 * C6333) * C13261 +
             (C180 * C6255 - C89236 * C6336) * C89093) *
                C25850) *
               C89153 * C89189) *
              C89333 +
          ((((C195 - C194) * C13261 + (C197 - C196) * C89093) * C25848 +
            ((C1845 - C1846) * C13261 + (C1847 - C1848) * C89093) * C25849 +
            C27150 * C25850) *
               C89153 * C89307 +
           (((C941 - C940) * C13261 + (C943 - C942) * C89093) * C25848 +
            ((C4220 - C4221) * C13261 + (C4222 - C4223) * C89093) * C25849 +
            ((C89236 * C6334 - C180 * C6248) * C13261 +
             (C89236 * C6337 - C180 * C6253) * C89093) *
                C25850) *
               C89153 * C89189) *
              C89334 +
          (((C210 * C13261 + C211 * C89093) * C25848 +
            ((C1850 - C1849) * C13261 + (C1852 - C1851) * C89093) * C25849 +
            ((C1857 - C1858) * C13261 + (C1859 - C1860) * C89093) * C25850) *
               C89153 * C89307 +
           ((C2710 * C13261 + C2711 * C89093) * C25848 +
            ((C4225 - C4224) * C13261 + (C4227 - C4226) * C89093) * C25849 +
            ((C180 * C6247 - C89236 * C6335) * C13261 +
             (C180 * C6251 - C89236 * C6338) * C89093) *
                C25850) *
               C89153 * C89189) *
              C2628)) /
            (p * q * std::sqrt(p + q));
    d2eexz[30] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C13261 +
             (C89247 * C270 - C263 * C113) * C89093) *
                C13258 +
            ((C13956 - C13957) * C13261 + (C13958 - C13959) * C89093) * C13259 +
            C13981 * C13260) *
               C89153 * C89307 +
           (((C13957 - C13956) * C13261 + (C13959 - C13958) * C89093) * C13258 +
            ((C13961 - C13960) * C13261 + (C13963 - C13962) * C89093) * C13259 +
            ((C13964 - C13965) * C13261 + (C13966 - C13967) * C89093) *
                C13260) *
               C89153 * C89189) *
              C89333 +
          ((((C278 - C277) * C13261 + (C280 - C279) * C89093) * C13258 +
            ((C1046 - C1047) * C13261 + (C1048 - C1049) * C89093) * C13259 +
            C13980 * C13260) *
               C89153 * C89307 +
           (((C1047 - C1046) * C13261 + (C1049 - C1048) * C89093) * C13258 +
            ((C1054 - C1055) * C13261 + (C1056 - C1057) * C89093) * C13259 +
            ((C13970 - C13971) * C13261 + (C13972 - C13973) * C89093) *
                C13260) *
               C89153 * C89189) *
              C89334 +
          (((C293 * C13261 + C294 * C89093) * C13258 +
            ((C1051 - C1050) * C13261 + (C1053 - C1052) * C89093) * C13259 +
            ((C1058 - C1059) * C13261 + (C1060 - C1061) * C89093) * C13260) *
               C89153 * C89307 +
           ((C2792 * C13261 + C2793 * C89093) * C13258 +
            ((C1059 - C1058) * C13261 + (C1061 - C1060) * C89093) * C13259 +
            ((C263 * C5725 - C89247 * C5845) * C13261 +
             (C263 * C5729 - C89247 * C5848) * C89093) *
                C13260) *
               C89153 * C89189) *
              C2628)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C100 +
            (C89247 * C270 - C263 * C113) * C89 + (C277 - C278) * C102 +
            (C279 - C280) * C90 + C293 * C104 + C294 * C91) *
               C89236 * C89153 * C89307 +
           ((C263 * C819 - C89247 * C1029) * C100 +
            (C263 * C830 - C89247 * C1037) * C89 + (C1046 - C1047) * C102 +
            (C1048 - C1049) * C90 + C2792 * C104 + C2793 * C91) *
               C89236 * C89153 * C89189) *
              C89333 +
          (((C278 - C277) * C100 + (C280 - C279) * C89 + (C282 - C281) * C102 +
            (C284 - C283) * C90 + C295 * C104 + C296 * C91) *
               C89236 * C89153 * C89307 +
           ((C1047 - C1046) * C100 + (C1049 - C1048) * C89 +
            (C1051 - C1050) * C102 + (C1053 - C1052) * C90 +
            (C2794 - C2795) * C104 + (C2796 - C2797) * C91) *
               C89236 * C89153 * C89189) *
              C89334 +
          ((C293 * C100 + C294 * C89 + (C286 - C285) * C102 +
            (C288 - C287) * C90 + (C289 - C290) * C104 + (C291 - C292) * C91) *
               C89236 * C89153 * C89307 +
           (C2792 * C100 + C2793 * C89 + (C2795 - C2794) * C102 +
            (C2797 - C2796) * C90 + (C263 * C2629 - C89247 * C2789) * C104 +
            (C263 * C2631 - C89247 * C2790) * C91) *
               C89236 * C89153 * C89189) *
              C2628)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C25848 * C264 - C25951 * C106 + C25849 * C1934 - C25952 * C1724 +
             C25850 * C1937 - C25953 * C1725) *
                C13261 +
            (C25848 * C270 - C25951 * C113 + C25849 * C1942 - C25952 * C1735 +
             C25850 * C1945 - C25953 * C1737) *
                C89093) *
               C89236 * C89153 * C89307 +
           ((C25951 * C819 - C25848 * C1029 + C25952 * C4097 - C25849 * C4325 +
             C25953 * C6249 - C25850 * C6413) *
                C13261 +
            (C25951 * C830 - C25848 * C1037 + C25952 * C4102 - C25849 * C4329 +
             C25953 * C6255 - C25850 * C6416) *
                C89093) *
               C89236 * C89153 * C89189) *
              C89333 +
          (((C25951 * C107 - C25848 * C265 + C25952 * C1723 - C25849 * C1935 +
             C25953 * C1726 - C25850 * C1938) *
                C13261 +
            (C25951 * C115 - C25848 * C271 + C25952 * C1733 - C25849 * C1943 +
             C25953 * C1739 - C25850 * C1946) *
                C89093) *
               C89236 * C89153 * C89307 +
           ((C25848 * C1030 - C25951 * C818 + C25849 * C4326 - C25952 * C4098 +
             C25850 * C6414 - C25953 * C6248) *
                C13261 +
            (C25848 * C1038 - C25951 * C828 + C25849 * C4330 - C25952 * C4104 +
             C25850 * C6417 - C25953 * C6253) *
                C89093) *
               C89236 * C89153 * C89189) *
              C89334 +
          (((C25848 * C266 - C25951 * C108 + C25849 * C1936 - C25952 * C1722 +
             C25850 * C1939 - C25953 * C1727) *
                C13261 +
            (C25848 * C272 - C25951 * C117 + C25849 * C1944 - C25952 * C1731 +
             C25850 * C1947 - C25953 * C1741) *
                C89093) *
               C89236 * C89153 * C89307 +
           ((C25951 * C817 - C25848 * C1031 + C25952 * C4099 - C25849 * C4327 +
             C25953 * C6247 - C25850 * C6415) *
                C13261 +
            (C25951 * C826 - C25848 * C1039 + C25952 * C4106 - C25849 * C4331 +
             C25953 * C6251 - C25850 * C6418) *
                C89093) *
               C89236 * C89153 * C89189) *
              C2628)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[30] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89093 * C112 - C13261 * C106) * C13313 +
            (C89093 * C352 - C13261 * C346) * C13258 +
            (C14060 - C14061) * C13314 + (C14062 - C14063) * C13259 +
            C14084 * C13315 + C14085 * C13260) *
               C89247 * C89153 * C89307 +
           ((C14061 - C14060) * C13313 + (C14063 - C14062) * C13258 +
            (C14065 - C14064) * C13314 + (C14067 - C14066) * C13259 +
            (C14068 - C14069) * C13315 + (C14070 - C14071) * C13260) *
               C89247 * C89153 * C89189) *
              C89333 +
          (((C13261 * C107 - C89093 * C114) * C13313 +
            (C13261 * C347 - C89093 * C353) * C13258 +
            (C14072 - C14073) * C13314 + (C14074 - C14075) * C13259 +
            C14086 * C13315 + C14087 * C13260) *
               C89247 * C89153 * C89307 +
           ((C14073 - C14072) * C13313 + (C14075 - C14074) * C13258 +
            (C14077 - C14076) * C13314 + (C14079 - C14078) * C13259 +
            (C14080 - C14081) * C13315 + (C14082 - C14083) * C13260) *
               C89247 * C89153 * C89189) *
              C89334 +
          (((C89093 * C116 - C13261 * C108) * C13313 +
            (C89093 * C354 - C13261 * C348) * C13258 +
            (C15538 - C15539) * C13314 + (C15540 - C15541) * C13259 +
            (C15542 - C15543) * C13315 + (C15544 - C15545) * C13260) *
               C89247 * C89153 * C89307 +
           ((C15539 - C15538) * C13313 + (C15541 - C15540) * C13258 +
            (C15543 - C15542) * C13314 + (C15545 - C15544) * C13259 +
            (C13261 * C5725 - C89093 * C5728) * C13315 +
            (C13261 * C5901 - C89093 * C5904) * C13260) *
               C89247 * C89153 * C89189) *
              C2628)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 + C91 * C116 -
             C104 * C108) *
                C180 +
            (C89 * C352 - C100 * C346 + C90 * C353 - C102 * C347 + C91 * C354 -
             C104 * C348) *
                C89236) *
               C89247 * C89153 * C89307 +
           ((C100 * C819 - C89 * C829 + C102 * C818 - C90 * C827 + C104 * C817 -
             C91 * C825) *
                C180 +
            (C100 * C1135 - C89 * C1143 + C102 * C1136 - C90 * C1144 +
             C104 * C1137 - C91 * C1145) *
                C89236) *
               C89247 * C89153 * C89189) *
              C89333 +
          (((C100 * C107 - C89 * C114 + C102 * C108 - C90 * C116 + C104 * C109 -
             C91 * C118) *
                C180 +
            (C100 * C347 - C89 * C353 + C102 * C348 - C90 * C354 + C104 * C349 -
             C91 * C355) *
                C89236) *
               C89247 * C89153 * C89307 +
           ((C89 * C827 - C100 * C818 + C90 * C825 - C102 * C817 + C91 * C837 -
             C104 * C823) *
                C180 +
            (C89 * C1144 - C100 * C1136 + C90 * C1145 - C102 * C1137 +
             C91 * C1149 - C104 * C1141) *
                C89236) *
               C89247 * C89153 * C89189) *
              C89334 +
          (((C89 * C116 - C100 * C108 + C90 * C118 - C102 * C109 + C91 * C120 -
             C104 * C110) *
                C180 +
            (C89 * C354 - C100 * C348 + C90 * C355 - C102 * C349 + C91 * C356 -
             C104 * C350) *
                C89236) *
               C89247 * C89153 * C89307 +
           ((C100 * C817 - C89 * C825 + C102 * C823 - C90 * C837 +
             C104 * C2629 - C91 * C2630) *
                C180 +
            (C100 * C1137 - C89 * C1145 + C102 * C1141 - C90 * C1149 +
             C104 * C2871 - C91 * C2872) *
                C89236) *
               C89247 * C89153 * C89189) *
              C2628)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C180 +
             (C89093 * C352 - C13261 * C346) * C89236) *
                C25848 +
            ((C27308 - C27309) * C180 + (C27310 - C27311) * C89236) * C25849 +
            C27340 * C25850) *
               C89153 * C89307 +
           (((C14061 - C14060) * C180 + (C14063 - C14062) * C89236) * C25848 +
            ((C17042 - C17043) * C180 + (C17044 - C17045) * C89236) * C25849 +
            ((C19097 - C19096) * C180 + (C19099 - C19098) * C89236) * C25850) *
               C89153 * C89189) *
              C89333 +
          ((((C13261 * C107 - C89093 * C114) * C180 +
             (C13261 * C347 - C89093 * C353) * C89236) *
                C25848 +
            ((C27320 - C27321) * C180 + (C27322 - C27323) * C89236) * C25849 +
            C27341 * C25850) *
               C89153 * C89307 +
           (((C14073 - C14072) * C180 + (C14075 - C14074) * C89236) * C25848 +
            ((C17050 - C17051) * C180 + (C17052 - C17053) * C89236) * C25849 +
            ((C89093 * C6252 - C13261 * C6248) * C180 +
             (C89093 * C6497 - C13261 * C6494) * C89236) *
                C25850) *
               C89153 * C89189) *
              C89334 +
          ((((C89093 * C116 - C13261 * C108) * C180 +
             (C89093 * C354 - C13261 * C348) * C89236) *
                C25848 +
            ((C89093 * C1730 - C13261 * C1722) * C180 +
             (C89093 * C2050 - C13261 * C2042) * C89236) *
                C25849 +
            ((C89093 * C1740 - C13261 * C1727) * C180 +
             (C89093 * C2053 - C13261 * C2045) * C89236) *
                C25850) *
               C89153 * C89307 +
           (((C15539 - C15538) * C180 + (C15541 - C15540) * C89236) * C25848 +
            ((C13261 * C4099 - C89093 * C4105) * C180 +
             (C13261 * C4441 - C89093 * C4445) * C89236) *
                C25849 +
            ((C13261 * C6247 - C89093 * C6250) * C180 +
             (C13261 * C6495 - C89093 * C6498) * C89236) *
                C25850) *
               C89153 * C89189) *
              C2628)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[30] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13313 * C181 - C13466 * C106 - C13313 * C346 + C13258 * C409 +
            C13314 * C923 - C13467 * C819 - C13314 * C1135 + C13259 * C1227 +
            C13315 * C926 - C13468 * C820 - C13315 * C1138 + C13260 * C1228) *
               C89093 * C89247 * C89153 * C89307 -
           (C13315 * C5787 - C13468 * C5727 - C13315 * C5899 + C13260 * C5957 +
            C13314 * C926 - C13467 * C820 - C13314 * C1138 + C13259 * C1228 +
            C13313 * C923 - C13466 * C819 - C13313 * C1135 + C13258 * C1227) *
               C89093 * C89247 * C89153 * C89189) *
              C89333 +
          ((C13313 * C924 - C13466 * C818 - C13313 * C1136 + C13258 * C1226 +
            C13314 * C927 - C13467 * C821 - C13314 * C1139 + C13259 * C1229 +
            C13315 * C5788 - C13468 * C5726 - C13315 * C5900 + C13260 * C5956) *
               C89093 * C89247 * C89153 * C89189 -
           (C13315 * C927 - C13468 * C821 - C13315 * C1139 + C13260 * C1229 +
            C13314 * C924 - C13467 * C818 - C13314 * C1136 + C13259 * C1226 +
            C13313 * C182 - C13466 * C107 - C13313 * C347 + C13258 * C410) *
               C89093 * C89247 * C89153 * C89307) *
              C89334 +
          ((C13313 * C183 - C13466 * C108 - C13313 * C348 + C13258 * C411 +
            C13314 * C925 - C13467 * C817 - C13314 * C1137 + C13259 * C1225 +
            C13315 * C928 - C13468 * C822 - C13315 * C1140 + C13260 * C1230) *
               C89093 * C89247 * C89153 * C89307 -
           (C13315 * C5789 - C13468 * C5725 - C13315 * C5901 + C13260 * C5955 +
            C13314 * C928 - C13467 * C822 - C13314 * C1140 + C13259 * C1230 +
            C13313 * C925 - C13466 * C817 - C13313 * C1137 + C13258 * C1225) *
               C89093 * C89247 * C89153 * C89189) *
              C2628)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C89 +
            C440 * C90 + C441 * C91) *
               C89247 * C89153 * C89307 -
           (C1258 * C91 + C1259 * C90 +
            (C180 * C923 - C408 * C819 - C180 * C1135 + C89236 * C1227) * C89) *
               C89247 * C89153 * C89189) *
              C89333 +
          ((C1259 * C89 + C1258 * C90 + C2955 * C91) * C89247 * C89153 *
               C89189 -
           (C442 * C91 + C441 * C90 + C440 * C89) * C89247 * C89153 * C89307) *
              C89334 +
          ((C441 * C89 + C442 * C90 + C443 * C91) * C89247 * C89153 * C89307 -
           ((C180 * C2707 - C408 * C2629 - C180 * C2871 + C89236 * C2947) *
                C91 +
            C2955 * C90 + C1258 * C89) *
               C89247 * C89153 * C89189) *
              C2628)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C89093 *
                C25848 +
            C27448 * C25849 + C27449 * C25850) *
               C89153 * C89307 -
           ((C180 * C6333 - C408 * C6249 - C180 * C6493 + C89236 * C6575) *
                C89093 * C25850 +
            (C180 * C4211 - C408 * C4097 - C180 * C4439 + C89236 * C4545) *
                C89093 * C25849 +
            (C180 * C923 - C408 * C819 - C180 * C1135 + C89236 * C1227) *
                C89093 * C25848) *
               C89153 * C89189) *
              C89333 +
          ((C1259 * C89093 * C25848 + C4562 * C89093 * C25849 +
            (C180 * C6334 - C408 * C6248 - C180 * C6494 + C89236 * C6574) *
                C89093 * C25850) *
               C89153 * C89189 -
           (C27431 * C25850 + C27430 * C25849 + C440 * C89093 * C25848) *
               C89153 * C89307) *
              C89334 +
          ((C441 * C89093 * C25848 + C2163 * C89093 * C25849 +
            C2166 * C89093 * C25850) *
               C89153 * C89307 -
           ((C180 * C6335 - C408 * C6247 - C180 * C6495 + C89236 * C6573) *
                C89093 * C25850 +
            C4563 * C89093 * C25849 + C1258 * C89093 * C25848) *
               C89153 * C89189) *
              C2628)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[30] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C13313 +
            (C89247 * C493 - C263 * C346) * C13258 +
            (C13956 - C13957) * C13314 + (C14240 - C14241) * C13259 +
            C13974 * C13315 + C14249 * C13260) *
               C89093 * C89153 * C89307 +
           ((C13957 - C13956) * C13313 + (C14241 - C14240) * C13258 +
            (C13961 - C13960) * C13314 + (C14243 - C14242) * C13259 +
            (C13964 - C13965) * C13315 + (C14244 - C14245) * C13260) *
               C89093 * C89153 * C89189) *
              C89333 +
          (((C278 - C277) * C13313 + (C501 - C500) * C13258 +
            (C1046 - C1047) * C13314 + (C1344 - C1345) * C13259 +
            C13968 * C13315 + C14246 * C13260) *
               C89093 * C89153 * C89307 +
           ((C1047 - C1046) * C13313 + (C1345 - C1344) * C13258 +
            (C1054 - C1055) * C13314 + (C1348 - C1349) * C13259 +
            (C13970 - C13971) * C13315 + (C14247 - C14248) * C13260) *
               C89093 * C89153 * C89189) *
              C89334 +
          ((C293 * C13313 + C510 * C13258 + (C1051 - C1050) * C13314 +
            (C1347 - C1346) * C13259 + (C1058 - C1059) * C13315 +
            (C1350 - C1351) * C13260) *
               C89093 * C89153 * C89307 +
           (C2792 * C13313 + C3032 * C13258 + (C1059 - C1058) * C13314 +
            (C1351 - C1350) * C13259 +
            (C263 * C5725 - C89247 * C5845) * C13315 +
            (C263 * C5901 - C89247 * C6010) * C13260) *
               C89093 * C89153 * C89189) *
              C2628)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C180 +
             (C89247 * C493 - C263 * C346) * C89236) *
                C89 +
            ((C277 - C278) * C180 + (C500 - C501) * C89236) * C90 +
            C514 * C91) *
               C89153 * C89307 +
           (((C263 * C819 - C89247 * C1029) * C180 +
             (C263 * C1135 - C89247 * C1335) * C89236) *
                C89 +
            ((C1046 - C1047) * C180 + (C1344 - C1345) * C89236) * C90 +
            C3036 * C91) *
               C89153 * C89189) *
              C89333 +
          ((((C278 - C277) * C180 + (C501 - C500) * C89236) * C89 +
            ((C282 - C281) * C180 + (C504 - C503) * C89236) * C90 +
            C515 * C91) *
               C89153 * C89307 +
           (((C1047 - C1046) * C180 + (C1345 - C1344) * C89236) * C89 +
            ((C1051 - C1050) * C180 + (C1347 - C1346) * C89236) * C90 +
            ((C2794 - C2795) * C180 + (C3033 - C3034) * C89236) * C91) *
               C89153 * C89189) *
              C89334 +
          ((C514 * C89 + ((C286 - C285) * C180 + (C507 - C506) * C89236) * C90 +
            ((C289 - C290) * C180 + (C508 - C509) * C89236) * C91) *
               C89153 * C89307 +
           (C3036 * C89 +
            ((C2795 - C2794) * C180 + (C3034 - C3033) * C89236) * C90 +
            ((C263 * C2629 - C89247 * C2789) * C180 +
             (C263 * C2871 - C89247 * C3029) * C89236) *
                C91) *
               C89153 * C89189) *
              C2628)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C25848 * C264 - C25951 * C106 + C25849 * C1934 - C25952 * C1724 +
             C25850 * C1937 - C25953 * C1725) *
                C180 +
            (C25848 * C493 - C25951 * C346 + C25849 * C2240 - C25952 * C2040 +
             C25850 * C2243 - C25953 * C2043) *
                C89236) *
               C89093 * C89153 * C89307 +
           ((C25951 * C819 - C25848 * C1029 + C25952 * C4097 - C25849 * C4325 +
             C25953 * C6249 - C25850 * C6413) *
                C180 +
            (C25951 * C1135 - C25848 * C1335 + C25952 * C4439 - C25849 * C4661 +
             C25953 * C6493 - C25850 * C6650) *
                C89236) *
               C89093 * C89153 * C89189) *
              C89333 +
          (((C25951 * C107 - C25848 * C265 + C25952 * C1723 - C25849 * C1935 +
             C25953 * C1726 - C25850 * C1938) *
                C180 +
            (C25951 * C347 - C25848 * C494 + C25952 * C2041 - C25849 * C2241 +
             C25953 * C2044 - C25850 * C2244) *
                C89236) *
               C89093 * C89153 * C89307 +
           ((C25848 * C1030 - C25951 * C818 + C25849 * C4326 - C25952 * C4098 +
             C25850 * C6414 - C25953 * C6248) *
                C180 +
            (C25848 * C1336 - C25951 * C1136 + C25849 * C4662 - C25952 * C4440 +
             C25850 * C6651 - C25953 * C6494) *
                C89236) *
               C89093 * C89153 * C89189) *
              C89334 +
          (((C25848 * C266 - C25951 * C108 + C25849 * C1936 - C25952 * C1722 +
             C25850 * C1939 - C25953 * C1727) *
                C180 +
            (C25848 * C495 - C25951 * C348 + C25849 * C2242 - C25952 * C2042 +
             C25850 * C2245 - C25953 * C2045) *
                C89236) *
               C89093 * C89153 * C89307 +
           ((C25951 * C817 - C25848 * C1031 + C25952 * C4099 - C25849 * C4327 +
             C25953 * C6247 - C25850 * C6415) *
                C180 +
            (C25951 * C1137 - C25848 * C1337 + C25952 * C4441 - C25849 * C4663 +
             C25953 * C6495 - C25850 * C6652) *
                C89236) *
               C89093 * C89153 * C89189) *
              C2628)) /
            (p * q * std::sqrt(p + q));
    d2eezx[30] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C263 +
             (C89093 * C571 - C13261 * C565) * C89247) *
                C13258 +
            ((C14060 - C14061) * C263 + (C14328 - C14329) * C89247) * C13259 +
            C14346 * C13260) *
               C89153 * C89307 +
           (((C14061 - C14060) * C263 + (C14329 - C14328) * C89247) * C13258 +
            ((C14065 - C14064) * C263 + (C14332 - C14331) * C89247) * C13259 +
            ((C14068 - C14069) * C263 + (C14333 - C14334) * C89247) * C13260) *
               C89153 * C89189) *
              C89333 +
          ((((C13261 * C107 - C89093 * C114) * C263 +
             (C13261 * C566 - C89093 * C572) * C89247) *
                C13258 +
            ((C14072 - C14073) * C263 + (C14335 - C14336) * C89247) * C13259 +
            C14347 * C13260) *
               C89153 * C89307 +
           (((C14073 - C14072) * C263 + (C14336 - C14335) * C89247) * C13258 +
            ((C14077 - C14076) * C263 + (C14339 - C14338) * C89247) * C13259 +
            ((C14080 - C14081) * C263 + (C14340 - C14341) * C89247) * C13260) *
               C89153 * C89189) *
              C89334 +
          ((((C89093 * C116 - C13261 * C108) * C263 +
             (C89093 * C573 - C13261 * C567) * C89247) *
                C13258 +
            ((C15538 - C15539) * C263 + (C15768 - C15769) * C89247) * C13259 +
            ((C15542 - C15543) * C263 + (C15770 - C15771) * C89247) * C13260) *
               C89153 * C89307 +
           (((C15539 - C15538) * C263 + (C15769 - C15768) * C89247) * C13258 +
            ((C15543 - C15542) * C263 + (C15771 - C15770) * C89247) * C13259 +
            ((C13261 * C5725 - C89093 * C5728) * C263 +
             (C13261 * C6063 - C89093 * C6066) * C89247) *
                C13260) *
               C89153 * C89189) *
              C2628)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 + C91 * C116 -
             C104 * C108) *
                C263 +
            (C89 * C571 - C100 * C565 + C90 * C572 - C102 * C566 + C91 * C573 -
             C104 * C567) *
                C89247) *
               C89236 * C89153 * C89307 +
           ((C100 * C819 - C89 * C829 + C102 * C818 - C90 * C827 + C104 * C817 -
             C91 * C825) *
                C263 +
            (C100 * C1425 - C89 * C1433 + C102 * C1426 - C90 * C1434 +
             C104 * C1427 - C91 * C1435) *
                C89247) *
               C89236 * C89153 * C89189) *
              C89333 +
          (((C100 * C107 - C89 * C114 + C102 * C108 - C90 * C116 + C104 * C109 -
             C91 * C118) *
                C263 +
            (C100 * C566 - C89 * C572 + C102 * C567 - C90 * C573 + C104 * C568 -
             C91 * C574) *
                C89247) *
               C89236 * C89153 * C89307 +
           ((C89 * C827 - C100 * C818 + C90 * C825 - C102 * C817 + C91 * C837 -
             C104 * C823) *
                C263 +
            (C89 * C1434 - C100 * C1426 + C90 * C1435 - C102 * C1427 +
             C91 * C1439 - C104 * C1431) *
                C89247) *
               C89236 * C89153 * C89189) *
              C89334 +
          (((C89 * C116 - C100 * C108 + C90 * C118 - C102 * C109 + C91 * C120 -
             C104 * C110) *
                C263 +
            (C89 * C573 - C100 * C567 + C90 * C574 - C102 * C568 + C91 * C575 -
             C104 * C569) *
                C89247) *
               C89236 * C89153 * C89307 +
           ((C100 * C817 - C89 * C825 + C102 * C823 - C90 * C837 +
             C104 * C2629 - C91 * C2630) *
                C263 +
            (C100 * C1427 - C89 * C1435 + C102 * C1431 - C90 * C1439 +
             C104 * C3110 - C91 * C3111) *
                C89247) *
               C89236 * C89153 * C89189) *
              C2628)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C89093 * C112 - C13261 * C106) * C25951 +
            (C89093 * C571 - C13261 * C565) * C25848 +
            (C27308 - C27309) * C25952 + (C27606 - C27607) * C25849 +
            C27332 * C25953 + C27618 * C25850) *
               C89236 * C89153 * C89307 +
           ((C14061 - C14060) * C25951 + (C14329 - C14328) * C25848 +
            (C17042 - C17043) * C25952 + (C17366 - C17367) * C25849 +
            (C19097 - C19096) * C25953 + (C19335 - C19334) * C25850) *
               C89236 * C89153 * C89189) *
              C89333 +
          (((C13261 * C107 - C89093 * C114) * C25951 +
            (C13261 * C566 - C89093 * C572) * C25848 +
            (C27320 - C27321) * C25952 + (C27612 - C27613) * C25849 +
            C27334 * C25953 + C27619 * C25850) *
               C89236 * C89153 * C89307 +
           ((C14073 - C14072) * C25951 + (C14336 - C14335) * C25848 +
            (C17050 - C17051) * C25952 + (C17370 - C17371) * C25849 +
            (C89093 * C6252 - C13261 * C6248) * C25953 +
            (C89093 * C6731 - C13261 * C6728) * C25850) *
               C89236 * C89153 * C89189) *
              C89334 +
          (((C89093 * C116 - C13261 * C108) * C25951 +
            (C89093 * C573 - C13261 * C567) * C25848 +
            (C89093 * C1730 - C13261 * C1722) * C25952 +
            (C89093 * C2340 - C13261 * C2332) * C25849 +
            (C89093 * C1740 - C13261 * C1727) * C25953 +
            (C89093 * C2343 - C13261 * C2335) * C25850) *
               C89236 * C89153 * C89307 +
           ((C15539 - C15538) * C25951 + (C15769 - C15768) * C25848 +
            (C13261 * C4099 - C89093 * C4105) * C25952 +
            (C13261 * C4769 - C89093 * C4773) * C25849 +
            (C13261 * C6247 - C89093 * C6250) * C25953 +
            (C13261 * C6729 - C89093 * C6732) * C25850) *
               C89236 * C89153 * C89189) *
              C2628)) /
            (p * q * std::sqrt(p + q));
    d2eezy[30] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
             C13260 * C926 - C13315 * C820) *
                C263 +
            (C13258 * C627 - C13313 * C565 + C13259 * C1515 - C13314 * C1425 +
             C13260 * C1518 - C13315 * C1428) *
                C89247) *
               C89093 * C89153 * C89307 +
           ((C13313 * C819 - C13258 * C923 + C13314 * C820 - C13259 * C926 +
             C13315 * C5727 - C13260 * C5787) *
                C263 +
            (C13313 * C1425 - C13258 * C1515 + C13314 * C1428 - C13259 * C1518 +
             C13315 * C6061 - C13260 * C6117) *
                C89247) *
               C89093 * C89153 * C89189) *
              C89333 +
          (((C13313 * C107 - C13258 * C182 + C13314 * C818 - C13259 * C924 +
             C13315 * C821 - C13260 * C927) *
                C263 +
            (C13313 * C566 - C13258 * C628 + C13314 * C1426 - C13259 * C1516 +
             C13315 * C1429 - C13260 * C1519) *
                C89247) *
               C89093 * C89153 * C89307 +
           ((C13258 * C924 - C13313 * C818 + C13259 * C927 - C13314 * C821 +
             C13260 * C5788 - C13315 * C5726) *
                C263 +
            (C13258 * C1516 - C13313 * C1426 + C13259 * C1519 - C13314 * C1429 +
             C13260 * C6118 - C13315 * C6062) *
                C89247) *
               C89093 * C89153 * C89189) *
              C89334 +
          (((C13258 * C183 - C13313 * C108 + C13259 * C925 - C13314 * C817 +
             C13260 * C928 - C13315 * C822) *
                C263 +
            (C13258 * C629 - C13313 * C567 + C13259 * C1517 - C13314 * C1427 +
             C13260 * C1520 - C13315 * C1430) *
                C89247) *
               C89093 * C89153 * C89307 +
           ((C13313 * C817 - C13258 * C925 + C13314 * C822 - C13259 * C928 +
             C13315 * C5725 - C13260 * C5789) *
                C263 +
            (C13313 * C1427 - C13258 * C1517 + C13314 * C1430 - C13259 * C1520 +
             C13315 * C6063 - C13260 * C6119) *
                C89247) *
               C89093 * C89153 * C89189) *
              C2628)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C263 +
             (C89236 * C627 - C180 * C565) * C89247) *
                C89 +
            ((C194 - C195) * C263 + (C634 - C635) * C89247) * C90 +
            C648 * C91) *
               C89153 * C89307 +
           (((C180 * C819 - C89236 * C923) * C263 +
             (C180 * C1425 - C89236 * C1515) * C89247) *
                C89 +
            ((C940 - C941) * C263 + (C1524 - C1525) * C89247) * C90 +
            C3193 * C91) *
               C89153 * C89189) *
              C89333 +
          ((((C195 - C194) * C263 + (C635 - C634) * C89247) * C89 +
            ((C199 - C198) * C263 + (C638 - C637) * C89247) * C90 +
            C649 * C91) *
               C89153 * C89307 +
           (((C941 - C940) * C263 + (C1525 - C1524) * C89247) * C89 +
            ((C945 - C944) * C263 + (C1527 - C1526) * C89247) * C90 +
            ((C2712 - C2713) * C263 + (C3190 - C3191) * C89247) * C91) *
               C89153 * C89189) *
              C89334 +
          ((C648 * C89 + ((C203 - C202) * C263 + (C641 - C640) * C89247) * C90 +
            ((C206 - C207) * C263 + (C642 - C643) * C89247) * C91) *
               C89153 * C89307 +
           (C3193 * C89 +
            ((C2713 - C2712) * C263 + (C3191 - C3190) * C89247) * C90 +
            ((C180 * C2629 - C89236 * C2707) * C263 +
             (C180 * C3110 - C89236 * C3186) * C89247) *
                C91) *
               C89153 * C89189) *
              C2628)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C89236 * C181 - C180 * C106) * C25951 +
            (C89236 * C627 - C180 * C565) * C25848 +
            (C27126 - C27127) * C25952 + (C27696 - C27697) * C25849 +
            C27144 * C25953 + C27705 * C25850) *
               C89093 * C89153 * C89307 +
           ((C180 * C819 - C89236 * C923) * C25951 +
            (C180 * C1425 - C89236 * C1515) * C25848 +
            (C180 * C4097 - C89236 * C4211) * C25952 +
            (C180 * C4767 - C89236 * C4873) * C25849 +
            (C180 * C6249 - C89236 * C6333) * C25953 +
            (C180 * C6727 - C89236 * C6807) * C25850) *
               C89093 * C89153 * C89189) *
              C89333 +
          (((C195 - C194) * C25951 + (C635 - C634) * C25848 +
            (C1845 - C1846) * C25952 + (C2429 - C2430) * C25849 +
            C27138 * C25953 + C27702 * C25850) *
               C89093 * C89153 * C89307 +
           ((C941 - C940) * C25951 + (C1525 - C1524) * C25848 +
            (C4220 - C4221) * C25952 + (C4878 - C4879) * C25849 +
            (C89236 * C6334 - C180 * C6248) * C25953 +
            (C89236 * C6808 - C180 * C6728) * C25850) *
               C89093 * C89153 * C89189) *
              C89334 +
          ((C210 * C25951 + C644 * C25848 + (C1850 - C1849) * C25952 +
            (C2432 - C2431) * C25849 + (C1857 - C1858) * C25953 +
            (C2435 - C2436) * C25850) *
               C89093 * C89153 * C89307 +
           (C2710 * C25951 + C3189 * C25848 + (C4225 - C4224) * C25952 +
            (C4881 - C4880) * C25849 +
            (C180 * C6247 - C89236 * C6335) * C25953 +
            (C180 * C6729 - C89236 * C6809) * C25850) *
               C89093 * C89153 * C89189) *
              C2628)) /
            (p * q * std::sqrt(p + q));
    d2eezz[30] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C13258 +
            C14524 * C13259 + C14525 * C13260) *
               C89093 * C89153 * C89307 -
           (C14526 * C13260 + C14525 * C13259 + C14524 * C13258) * C89093 *
               C89153 * C89189) *
              C89333 +
          ((C1639 * C13258 + C1640 * C13259 + C14527 * C13260) * C89093 *
               C89153 * C89189 -
           (C1640 * C13260 + C1639 * C13259 + C731 * C13258) * C89093 * C89153 *
               C89307) *
              C89334 +
          ((C732 * C13258 + C1638 * C13259 + C1641 * C13260) * C89093 * C89153 *
               C89307 -
           ((C263 * C5845 - C699 * C5725 - C263 * C6063 + C89247 * C6170) *
                C13260 +
            C1641 * C13259 + C1638 * C13258) *
               C89093 * C89153 * C89189) *
              C2628)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C89236 *
                C89 +
            C735 * C90 + C736 * C91) *
               C89153 * C89307 -
           (C1642 * C91 + C1643 * C90 +
            (C263 * C1029 - C699 * C819 - C263 * C1425 + C89247 * C1607) *
                C89236 * C89) *
               C89153 * C89189) *
              C89333 +
          ((C1643 * C89 + C1642 * C90 + C3276 * C91) * C89153 * C89189 -
           (C737 * C91 + C736 * C90 + C735 * C89) * C89153 * C89307) *
              C89334 +
          ((C736 * C89 + C737 * C90 + C738 * C91) * C89153 * C89307 -
           ((C263 * C2789 - C699 * C2629 - C263 * C3110 + C89247 * C3267) *
                C89236 * C91 +
            C3276 * C90 + C1642 * C89) *
               C89153 * C89189) *
              C2628)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C25951 * C264 - C26254 * C106 - C25951 * C565 + C25848 * C700 +
            C25952 * C1934 - C26255 * C1724 - C25952 * C2330 + C25849 * C2512 +
            C25953 * C1937 - C26256 * C1725 - C25953 * C2333 + C25850 * C2513) *
               C89236 * C89093 * C89153 * C89307 -
           (C25953 * C6413 - C26256 * C6249 - C25953 * C6727 + C25850 * C6886 +
            C25952 * C4325 - C26255 * C4097 - C25952 * C4767 + C25849 * C4979 +
            C25951 * C1029 - C26254 * C819 - C25951 * C1425 + C25848 * C1607) *
               C89236 * C89093 * C89153 * C89189) *
              C89333 +
          ((C25951 * C1030 - C26254 * C818 - C25951 * C1426 + C25848 * C1606 +
            C25952 * C4326 - C26255 * C4098 - C25952 * C4768 + C25849 * C4980 +
            C25953 * C6414 - C26256 * C6248 - C25953 * C6728 + C25850 * C6885) *
               C89236 * C89093 * C89153 * C89189 -
           (C25953 * C1938 - C26256 * C1726 - C25953 * C2334 + C25850 * C2514 +
            C25952 * C1935 - C26255 * C1723 - C25952 * C2331 + C25849 * C2511 +
            C25951 * C265 - C26254 * C107 - C25951 * C566 + C25848 * C701) *
               C89236 * C89093 * C89153 * C89307) *
              C89334 +
          ((C25951 * C266 - C26254 * C108 - C25951 * C567 + C25848 * C702 +
            C25952 * C1936 - C26255 * C1722 - C25952 * C2332 + C25849 * C2510 +
            C25953 * C1939 - C26256 * C1727 - C25953 * C2335 + C25850 * C2515) *
               C89236 * C89093 * C89153 * C89307 -
           (C25953 * C6415 - C26256 * C6247 - C25953 * C6729 + C25850 * C6884 +
            C25952 * C4327 - C26255 * C4099 - C25952 * C4769 + C25849 * C4981 +
            C25951 * C1031 - C26254 * C817 - C25951 * C1427 + C25848 * C1605) *
               C89236 * C89093 * C89153 * C89189) *
              C2628)) /
            (p * q * std::sqrt(p + q));
    d2eexx[31] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                 C89247 * C13258 +
             C13794 * C13259 + C13795 * C13260) *
                C89308 -
            (C16720 * C13260 + C16721 * C13259 +
             (C13261 * C1734 - C13262 * C1724 - C13261 * C1735 +
              C89093 * C1748) *
                 C89247 * C13258) *
                C89217) *
               C89307 +
           ((C16721 * C13258 + C16720 * C13259 +
             (C13261 * C16685 - C13262 * C16683 - C13261 * C16686 +
              C89093 * C16689) *
                 C89247 * C13260) *
                C89217 -
            (C13796 * C13260 + C13795 * C13259 + C13794 * C13258) * C89308) *
               C89189) *
              C815 +
          ((((C13261 * C1732 - C13262 * C1723 - C13261 * C1733 +
              C89093 * C1747) *
                 C89247 * C13258 +
             C16722 * C13259 + C16723 * C13260) *
                C89217 -
            (C13798 * C13260 + C13797 * C13259 +
             (C13261 * C114 - C13262 * C107 - C13261 * C115 + C89093 * C125) *
                 C89247 * C13258) *
                C89308) *
               C89307 +
           ((C13797 * C13258 + C13798 * C13259 + C13799 * C13260) * C89308 -
            ((C13261 * C16687 - C13262 * C16684 - C13261 * C16688 +
              C89093 * C16690) *
                 C89247 * C13260 +
             C16723 * C13259 + C16722 * C13258) *
                C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C100 * C112 - C101 * C106 - C100 * C113 + C89 * C124 +
             C102 * C114 - C103 * C107 - C102 * C115 + C90 * C125 +
             C104 * C116 - C105 * C108 - C104 * C117 + C91 * C126) *
                C89247 * C89236 * C89308 -
            (C104 * C1730 - C105 * C1722 - C104 * C1731 + C91 * C1746 +
             C102 * C1732 - C103 * C1723 - C102 * C1733 + C90 * C1747 +
             C100 * C1734 - C101 * C1724 - C100 * C1735 + C89 * C1748) *
                C89247 * C89236 * C89217) *
               C89307 +
           ((C100 * C4101 - C101 * C4097 - C100 * C4102 + C89 * C4109 +
             C102 * C4103 - C103 * C4098 - C102 * C4104 + C90 * C4110 +
             C104 * C4105 - C105 * C4099 - C104 * C4106 + C91 * C4111) *
                C89247 * C89236 * C89217 -
            (C104 * C825 - C105 * C817 - C104 * C826 + C91 * C841 +
             C102 * C827 - C103 * C818 - C102 * C828 + C90 * C842 +
             C100 * C829 - C101 * C819 - C100 * C830 + C89 * C843) *
                C89247 * C89236 * C89308) *
               C89189) *
              C815 +
          (((C100 * C1732 - C101 * C1723 - C100 * C1733 + C89 * C1747 +
             C102 * C1730 - C103 * C1722 - C102 * C1731 + C90 * C1746 +
             C104 * C1742 - C105 * C1728 - C104 * C1743 + C91 * C1752) *
                C89247 * C89236 * C89217 -
            (C104 * C118 - C105 * C109 - C104 * C119 + C91 * C127 +
             C102 * C116 - C103 * C108 - C102 * C117 + C90 * C126 +
             C100 * C114 - C101 * C107 - C100 * C115 + C89 * C125) *
                C89247 * C89236 * C89308) *
               C89307 +
           ((C100 * C827 - C101 * C818 - C100 * C828 + C89 * C842 +
             C102 * C825 - C103 * C817 - C102 * C826 + C90 * C841 +
             C104 * C837 - C105 * C823 - C104 * C838 + C91 * C847) *
                C89247 * C89236 * C89308 -
            (C104 * C4107 - C105 * C4100 - C104 * C4108 + C91 * C4112 +
             C102 * C4105 - C103 * C4099 - C102 * C4106 + C90 * C4111 +
             C100 * C4103 - C101 * C4098 - C100 * C4104 + C89 * C4110) *
                C89247 * C89236 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                 C25848 +
             C27042 * C25849 + C27043 * C25850) *
                C89236 * C89308 -
            (C27044 * C25850 + C27043 * C25849 + C27042 * C25848) * C89236 *
                C89217) *
               C89307 +
           ((C16717 * C25848 + C18856 * C25849 +
             (C13261 * C23156 - C13262 * C23153 - C13261 * C23157 +
              C89093 * C23159) *
                 C25850) *
                C89236 * C89217 -
            (C18856 * C25850 + C16717 * C25849 + C13788 * C25848) * C89236 *
                C89308) *
               C89189) *
              C815 +
          (((C27045 * C25848 + C27046 * C25849 + C27047 * C25850) * C89236 *
                C89217 -
            (C27046 * C25850 + C27045 * C25849 +
             (C13261 * C114 - C13262 * C107 - C13261 * C115 + C89093 * C125) *
                 C25848) *
                C89236 * C89308) *
               C89307 +
           ((C13791 * C25848 + C16718 * C25849 + C29250 * C25850) * C89236 *
                C89308 -
            ((C13261 * C29240 - C13262 * C29239 - C13261 * C29241 +
              C89093 * C29242) *
                 C25850 +
             C29250 * C25849 + C16718 * C25848) *
                C89236 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eexy[31] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
              C13260 * C926 - C13315 * C820) *
                 C13261 +
             (C13258 * C187 - C13313 * C113 + C13259 * C931 - C13314 * C830 +
              C13260 * C934 - C13315 * C832) *
                 C89093) *
                C89247 * C89308 +
            ((C13313 * C1724 - C13258 * C1828 + C13314 * C4097 -
              C13259 * C4211 + C13315 * C8516 - C13260 * C8600) *
                 C13261 +
             (C13313 * C1735 - C13258 * C1836 + C13314 * C4102 -
              C13259 * C4215 + C13315 * C8522 - C13260 * C8603) *
                 C89093) *
                C89247 * C89217) *
               C89307 +
           (((C13313 * C819 - C13258 * C923 + C13314 * C820 - C13259 * C926 +
              C13315 * C5727 - C13260 * C5787) *
                 C13261 +
             (C13313 * C830 - C13258 * C931 + C13314 * C832 - C13259 * C934 +
              C13315 * C5733 - C13260 * C5790) *
                 C89093) *
                C89247 * C89308 +
            ((C13258 * C4211 - C13313 * C4097 + C13259 * C8600 -
              C13314 * C8516 + C13260 * C16821 - C13315 * C16683) *
                 C13261 +
             (C13258 * C4215 - C13313 * C4102 + C13259 * C8603 -
              C13314 * C8522 + C13260 * C16823 - C13315 * C16686) *
                 C89093) *
                C89247 * C89217) *
               C89189) *
              C815 +
          ((((C13313 * C107 - C13258 * C182 + C13314 * C818 - C13259 * C924 +
              C13315 * C821 - C13260 * C927) *
                 C13261 +
             (C13313 * C115 - C13258 * C188 + C13314 * C828 - C13259 * C932 +
              C13315 * C834 - C13260 * C935) *
                 C89093) *
                C89247 * C89308 +
            ((C13258 * C1829 - C13313 * C1723 + C13259 * C4212 -
              C13314 * C4098 + C13260 * C8601 - C13315 * C8515) *
                 C13261 +
             (C13258 * C1837 - C13313 * C1733 + C13259 * C4216 -
              C13314 * C4104 + C13260 * C8604 - C13315 * C8520) *
                 C89093) *
                C89247 * C89217) *
               C89307 +
           (((C13258 * C924 - C13313 * C818 + C13259 * C927 - C13314 * C821 +
              C13260 * C5788 - C13315 * C5726) *
                 C13261 +
             (C13258 * C932 - C13313 * C828 + C13259 * C935 - C13314 * C834 +
              C13260 * C5791 - C13315 * C5731) *
                 C89093) *
                C89247 * C89308 +
            ((C13313 * C4098 - C13258 * C4212 + C13314 * C8515 -
              C13259 * C8601 + C13315 * C16684 - C13260 * C16822) *
                 C13261 +
             (C13313 * C4104 - C13258 * C4216 + C13314 * C8520 -
              C13259 * C8604 + C13315 * C16688 - C13260 * C16824) *
                 C89093) *
                C89247 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C100 +
             (C89236 * C187 - C180 * C113) * C89 + (C194 - C195) * C102 +
             (C196 - C197) * C90 + C210 * C104 + C211 * C91) *
                C89247 * C89308 +
            ((C180 * C1724 - C89236 * C1828) * C100 +
             (C180 * C1735 - C89236 * C1836) * C89 + (C1845 - C1846) * C102 +
             (C1847 - C1848) * C90 + C3433 * C104 + C3434 * C91) *
                C89247 * C89217) *
               C89307 +
           (((C180 * C819 - C89236 * C923) * C100 +
             (C180 * C830 - C89236 * C931) * C89 + (C940 - C941) * C102 +
             (C942 - C943) * C90 + C2710 * C104 + C2711 * C91) *
                C89247 * C89308 +
            ((C89236 * C4211 - C180 * C4097) * C100 +
             (C89236 * C4215 - C180 * C4102) * C89 + (C4220 - C4221) * C102 +
             (C4222 - C4223) * C90 + (C4224 - C4225) * C104 +
             (C4226 - C4227) * C91) *
                C89247 * C89217) *
               C89189) *
              C815 +
          ((((C195 - C194) * C100 + (C197 - C196) * C89 + (C199 - C198) * C102 +
             (C201 - C200) * C90 + C212 * C104 + C213 * C91) *
                C89247 * C89308 +
            ((C1846 - C1845) * C100 + (C1848 - C1847) * C89 +
             (C1850 - C1849) * C102 + (C1852 - C1851) * C90 +
             (C3435 - C3436) * C104 + (C3437 - C3438) * C91) *
                C89247 * C89217) *
               C89307 +
           (((C941 - C940) * C100 + (C943 - C942) * C89 + (C945 - C944) * C102 +
             (C947 - C946) * C90 + (C2712 - C2713) * C104 +
             (C2714 - C2715) * C91) *
                C89247 * C89308 +
            ((C4221 - C4220) * C100 + (C4223 - C4222) * C89 +
             (C4225 - C4224) * C102 + (C4227 - C4226) * C90 +
             (C180 * C4100 - C89236 * C4214) * C104 +
             (C180 * C4108 - C89236 * C4218) * C91) *
                C89247 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C89236 * C181 - C180 * C106) * C13261 +
              (C89236 * C187 - C180 * C113) * C89093) *
                 C25848 +
             ((C27126 - C27127) * C13261 + (C27128 - C27129) * C89093) *
                 C25849 +
             C27151 * C25850) *
                C89308 +
            (((C27127 - C27126) * C13261 + (C27129 - C27128) * C89093) *
                 C25848 +
             ((C27131 - C27130) * C13261 + (C27133 - C27132) * C89093) *
                 C25849 +
             ((C27134 - C27135) * C13261 + (C27136 - C27137) * C89093) *
                 C25850) *
                C89217) *
               C89307 +
           ((((C180 * C819 - C89236 * C923) * C13261 +
              (C180 * C830 - C89236 * C931) * C89093) *
                 C25848 +
             ((C29351 - C29352) * C13261 + (C29353 - C29354) * C89093) *
                 C25849 +
             ((C29355 - C29356) * C13261 + (C29357 - C29358) * C89093) *
                 C25850) *
                C89308 +
            (((C29352 - C29351) * C13261 + (C29354 - C29353) * C89093) *
                 C25848 +
             ((C29356 - C29355) * C13261 + (C29358 - C29357) * C89093) *
                 C25849 +
             ((C89236 * C23210 - C180 * C23153) * C13261 +
              (C89236 * C23212 - C180 * C23157) * C89093) *
                 C25850) *
                C89217) *
               C89189) *
              C815 +
          (((((C195 - C194) * C13261 + (C197 - C196) * C89093) * C25848 +
             ((C1845 - C1846) * C13261 + (C1847 - C1848) * C89093) * C25849 +
             C27150 * C25850) *
                C89308 +
            (((C1846 - C1845) * C13261 + (C1848 - C1847) * C89093) * C25848 +
             ((C1853 - C1854) * C13261 + (C1855 - C1856) * C89093) * C25849 +
             ((C27140 - C27141) * C13261 + (C27142 - C27143) * C89093) *
                 C25850) *
                C89217) *
               C89307 +
           ((((C941 - C940) * C13261 + (C943 - C942) * C89093) * C25848 +
             ((C4220 - C4221) * C13261 + (C4222 - C4223) * C89093) * C25849 +
             ((C29359 - C29360) * C13261 + (C29361 - C29362) * C89093) *
                 C25850) *
                C89308 +
            (((C4221 - C4220) * C13261 + (C4223 - C4222) * C89093) * C25848 +
             ((C29360 - C29359) * C13261 + (C29362 - C29361) * C89093) *
                 C25849 +
             ((C180 * C29239 - C89236 * C29348) * C13261 +
              (C180 * C29241 - C89236 * C29349) * C89093) *
                 C25850) *
                C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eexz[31] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C89247 * C264 - C263 * C106) * C13261 +
              (C89247 * C270 - C263 * C113) * C89093) *
                 C13258 +
             ((C13956 - C13957) * C13261 + (C13958 - C13959) * C89093) *
                 C13259 +
             C13981 * C13260) *
                C89308 +
            (((C263 * C1724 - C89247 * C1934) * C13261 +
              (C263 * C1735 - C89247 * C1942) * C89093) *
                 C13258 +
             ((C16928 - C16929) * C13261 + (C16930 - C16931) * C89093) *
                 C13259 +
             ((C16932 - C16933) * C13261 + (C16934 - C16935) * C89093) *
                 C13260) *
                C89217) *
               C89307 +
           ((((C13957 - C13956) * C13261 + (C13959 - C13958) * C89093) *
                 C13258 +
             ((C13961 - C13960) * C13261 + (C13963 - C13962) * C89093) *
                 C13259 +
             ((C13964 - C13965) * C13261 + (C13966 - C13967) * C89093) *
                 C13260) *
                C89308 +
            (((C16929 - C16928) * C13261 + (C16931 - C16930) * C89093) *
                 C13258 +
             ((C16933 - C16932) * C13261 + (C16935 - C16934) * C89093) *
                 C13259 +
             ((C89247 * C16923 - C263 * C16683) * C13261 +
              (C89247 * C16925 - C263 * C16686) * C89093) *
                 C13260) *
                C89217) *
               C89189) *
              C815 +
          (((((C278 - C277) * C13261 + (C280 - C279) * C89093) * C13258 +
             ((C1046 - C1047) * C13261 + (C1048 - C1049) * C89093) * C13259 +
             C13980 * C13260) *
                C89308 +
            (((C1952 - C1951) * C13261 + (C1954 - C1953) * C89093) * C13258 +
             ((C4334 - C4335) * C13261 + (C4336 - C4337) * C89093) * C13259 +
             ((C16936 - C16937) * C13261 + (C16938 - C16939) * C89093) *
                 C13260) *
                C89217) *
               C89307 +
           ((((C1047 - C1046) * C13261 + (C1049 - C1048) * C89093) * C13258 +
             ((C1054 - C1055) * C13261 + (C1056 - C1057) * C89093) * C13259 +
             ((C13970 - C13971) * C13261 + (C13972 - C13973) * C89093) *
                 C13260) *
                C89308 +
            (((C4335 - C4334) * C13261 + (C4337 - C4336) * C89093) * C13258 +
             ((C16937 - C16936) * C13261 + (C16939 - C16938) * C89093) *
                 C13259 +
             ((C263 * C16684 - C89247 * C16924) * C13261 +
              (C263 * C16688 - C89247 * C16926) * C89093) *
                 C13260) *
                C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C100 +
             (C89247 * C270 - C263 * C113) * C89 + (C277 - C278) * C102 +
             (C279 - C280) * C90 + C293 * C104 + C294 * C91) *
                C89236 * C89308 +
            ((C263 * C1724 - C89247 * C1934) * C100 +
             (C263 * C1735 - C89247 * C1942) * C89 + (C1951 - C1952) * C102 +
             (C1953 - C1954) * C90 + C3515 * C104 + C3516 * C91) *
                C89236 * C89217) *
               C89307 +
           (((C263 * C819 - C89247 * C1029) * C100 +
             (C263 * C830 - C89247 * C1037) * C89 + (C1046 - C1047) * C102 +
             (C1048 - C1049) * C90 + C2792 * C104 + C2793 * C91) *
                C89236 * C89308 +
            ((C89247 * C4325 - C263 * C4097) * C100 +
             (C89247 * C4329 - C263 * C4102) * C89 + (C4334 - C4335) * C102 +
             (C4336 - C4337) * C90 + (C4338 - C4339) * C104 +
             (C4340 - C4341) * C91) *
                C89236 * C89217) *
               C89189) *
              C815 +
          ((((C278 - C277) * C100 + (C280 - C279) * C89 + (C282 - C281) * C102 +
             (C284 - C283) * C90 + C295 * C104 + C296 * C91) *
                C89236 * C89308 +
            ((C1952 - C1951) * C100 + (C1954 - C1953) * C89 +
             (C1956 - C1955) * C102 + (C1958 - C1957) * C90 +
             (C3517 - C3518) * C104 + (C3519 - C3520) * C91) *
                C89236 * C89217) *
               C89307 +
           (((C1047 - C1046) * C100 + (C1049 - C1048) * C89 +
             (C1051 - C1050) * C102 + (C1053 - C1052) * C90 +
             (C2794 - C2795) * C104 + (C2796 - C2797) * C91) *
                C89236 * C89308 +
            ((C4335 - C4334) * C100 + (C4337 - C4336) * C89 +
             (C4339 - C4338) * C102 + (C4341 - C4340) * C90 +
             (C263 * C4100 - C89247 * C4328) * C104 +
             (C263 * C4108 - C89247 * C4332) * C91) *
                C89236 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C25848 * C264 - C25951 * C106 + C25849 * C1934 - C25952 * C1724 +
              C25850 * C1937 - C25953 * C1725) *
                 C13261 +
             (C25848 * C270 - C25951 * C113 + C25849 * C1942 - C25952 * C1735 +
              C25850 * C1945 - C25953 * C1737) *
                 C89093) *
                C89236 * C89308 +
            ((C25951 * C1724 - C25848 * C1934 + C25952 * C1725 -
              C25849 * C1937 + C25953 * C10544 - C25850 * C10660) *
                 C13261 +
             (C25951 * C1735 - C25848 * C1942 + C25952 * C1737 -
              C25849 * C1945 + C25953 * C10550 - C25850 * C10663) *
                 C89093) *
                C89236 * C89217) *
               C89307 +
           (((C25951 * C819 - C25848 * C1029 + C25952 * C4097 - C25849 * C4325 +
              C25953 * C6249 - C25850 * C6413) *
                 C13261 +
             (C25951 * C830 - C25848 * C1037 + C25952 * C4102 - C25849 * C4329 +
              C25953 * C6255 - C25850 * C6416) *
                 C89093) *
                C89236 * C89308 +
            ((C25848 * C4325 - C25951 * C4097 + C25849 * C6413 -
              C25952 * C6249 + C25850 * C23264 - C25953 * C23153) *
                 C13261 +
             (C25848 * C4329 - C25951 * C4102 + C25849 * C6416 -
              C25952 * C6255 + C25850 * C23266 - C25953 * C23157) *
                 C89093) *
                C89236 * C89217) *
               C89189) *
              C815 +
          ((((C25951 * C107 - C25848 * C265 + C25952 * C1723 - C25849 * C1935 +
              C25953 * C1726 - C25850 * C1938) *
                 C13261 +
             (C25951 * C115 - C25848 * C271 + C25952 * C1733 - C25849 * C1943 +
              C25953 * C1739 - C25850 * C1946) *
                 C89093) *
                C89236 * C89308 +
            ((C25848 * C1935 - C25951 * C1723 + C25849 * C1938 -
              C25952 * C1726 + C25850 * C10661 - C25953 * C10543) *
                 C13261 +
             (C25848 * C1943 - C25951 * C1733 + C25849 * C1946 -
              C25952 * C1739 + C25850 * C10664 - C25953 * C10548) *
                 C89093) *
                C89236 * C89217) *
               C89307 +
           (((C25848 * C1030 - C25951 * C818 + C25849 * C4326 - C25952 * C4098 +
              C25850 * C6414 - C25953 * C6248) *
                 C13261 +
             (C25848 * C1038 - C25951 * C828 + C25849 * C4330 - C25952 * C4104 +
              C25850 * C6417 - C25953 * C6253) *
                 C89093) *
                C89236 * C89308 +
            ((C25951 * C4098 - C25848 * C4326 + C25952 * C6248 -
              C25849 * C6414 + C25953 * C29239 - C25850 * C29460) *
                 C13261 +
             (C25951 * C4104 - C25848 * C4330 + C25952 * C6253 -
              C25849 * C6417 + C25953 * C29241 - C25850 * C29461) *
                 C89093) *
                C89236 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[31] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C13313 +
             (C89093 * C352 - C13261 * C346) * C13258 +
             (C14060 - C14061) * C13314 + (C14062 - C14063) * C13259 +
             C14084 * C13315 + C14085 * C13260) *
                C89247 * C89308 +
            ((C13261 * C1724 - C89093 * C1734) * C13313 +
             (C13261 * C2040 - C89093 * C2048) * C13258 +
             (C17042 - C17043) * C13314 + (C17044 - C17045) * C13259 +
             (C17046 - C17047) * C13315 + (C17048 - C17049) * C13260) *
                C89247 * C89217) *
               C89307 +
           (((C14061 - C14060) * C13313 + (C14063 - C14062) * C13258 +
             (C14065 - C14064) * C13314 + (C14067 - C14066) * C13259 +
             (C14068 - C14069) * C13315 + (C14070 - C14071) * C13260) *
                C89247 * C89308 +
            ((C17043 - C17042) * C13313 + (C17045 - C17044) * C13258 +
             (C17047 - C17046) * C13314 + (C17049 - C17048) * C13259 +
             (C89093 * C16685 - C13261 * C16683) * C13315 +
             (C89093 * C17039 - C13261 * C17037) * C13260) *
                C89247 * C89217) *
               C89189) *
              C815 +
          ((((C13261 * C107 - C89093 * C114) * C13313 +
             (C13261 * C347 - C89093 * C353) * C13258 +
             (C14072 - C14073) * C13314 + (C14074 - C14075) * C13259 +
             C14086 * C13315 + C14087 * C13260) *
                C89247 * C89308 +
            ((C89093 * C1732 - C13261 * C1723) * C13313 +
             (C89093 * C2049 - C13261 * C2041) * C13258 +
             (C17050 - C17051) * C13314 + (C17052 - C17053) * C13259 +
             (C17054 - C17055) * C13315 + (C17056 - C17057) * C13260) *
                C89247 * C89217) *
               C89307 +
           (((C14073 - C14072) * C13313 + (C14075 - C14074) * C13258 +
             (C14077 - C14076) * C13314 + (C14079 - C14078) * C13259 +
             (C14080 - C14081) * C13315 + (C14082 - C14083) * C13260) *
                C89247 * C89308 +
            ((C17051 - C17050) * C13313 + (C17053 - C17052) * C13258 +
             (C17055 - C17054) * C13314 + (C17057 - C17056) * C13259 +
             (C13261 * C16684 - C89093 * C16687) * C13315 +
             (C13261 * C17038 - C89093 * C17040) * C13260) *
                C89247 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 + C91 * C116 -
              C104 * C108) *
                 C180 +
             (C89 * C352 - C100 * C346 + C90 * C353 - C102 * C347 + C91 * C354 -
              C104 * C348) *
                 C89236) *
                C89247 * C89308 +
            ((C100 * C1724 - C89 * C1734 + C102 * C1723 - C90 * C1732 +
              C104 * C1722 - C91 * C1730) *
                 C180 +
             (C100 * C2040 - C89 * C2048 + C102 * C2041 - C90 * C2049 +
              C104 * C2042 - C91 * C2050) *
                 C89236) *
                C89247 * C89217) *
               C89307 +
           (((C100 * C819 - C89 * C829 + C102 * C818 - C90 * C827 +
              C104 * C817 - C91 * C825) *
                 C180 +
             (C100 * C1135 - C89 * C1143 + C102 * C1136 - C90 * C1144 +
              C104 * C1137 - C91 * C1145) *
                 C89236) *
                C89247 * C89308 +
            ((C89 * C4101 - C100 * C4097 + C90 * C4103 - C102 * C4098 +
              C91 * C4105 - C104 * C4099) *
                 C180 +
             (C89 * C4443 - C100 * C4439 + C90 * C4444 - C102 * C4440 +
              C91 * C4445 - C104 * C4441) *
                 C89236) *
                C89247 * C89217) *
               C89189) *
              C815 +
          ((((C100 * C107 - C89 * C114 + C102 * C108 - C90 * C116 +
              C104 * C109 - C91 * C118) *
                 C180 +
             (C100 * C347 - C89 * C353 + C102 * C348 - C90 * C354 +
              C104 * C349 - C91 * C355) *
                 C89236) *
                C89247 * C89308 +
            ((C89 * C1732 - C100 * C1723 + C90 * C1730 - C102 * C1722 +
              C91 * C1742 - C104 * C1728) *
                 C180 +
             (C89 * C2049 - C100 * C2041 + C90 * C2050 - C102 * C2042 +
              C91 * C2054 - C104 * C2046) *
                 C89236) *
                C89247 * C89217) *
               C89307 +
           (((C89 * C827 - C100 * C818 + C90 * C825 - C102 * C817 + C91 * C837 -
              C104 * C823) *
                 C180 +
             (C89 * C1144 - C100 * C1136 + C90 * C1145 - C102 * C1137 +
              C91 * C1149 - C104 * C1141) *
                 C89236) *
                C89247 * C89308 +
            ((C100 * C4098 - C89 * C4103 + C102 * C4099 - C90 * C4105 +
              C104 * C4100 - C91 * C4107) *
                 C180 +
             (C100 * C4440 - C89 * C4444 + C102 * C4441 - C90 * C4445 +
              C104 * C4442 - C91 * C4446) *
                 C89236) *
                C89247 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C89093 * C112 - C13261 * C106) * C180 +
              (C89093 * C352 - C13261 * C346) * C89236) *
                 C25848 +
             ((C27308 - C27309) * C180 + (C27310 - C27311) * C89236) * C25849 +
             C27340 * C25850) *
                C89308 +
            (((C27309 - C27308) * C180 + (C27311 - C27310) * C89236) * C25848 +
             ((C27313 - C27312) * C180 + (C27315 - C27314) * C89236) * C25849 +
             ((C27316 - C27317) * C180 + (C27318 - C27319) * C89236) * C25850) *
                C89217) *
               C89307 +
           ((((C14061 - C14060) * C180 + (C14063 - C14062) * C89236) * C25848 +
             ((C17042 - C17043) * C180 + (C17044 - C17045) * C89236) * C25849 +
             ((C19097 - C19096) * C180 + (C19099 - C19098) * C89236) * C25850) *
                C89308 +
            (((C17043 - C17042) * C180 + (C17045 - C17044) * C89236) * C25848 +
             ((C19096 - C19097) * C180 + (C19098 - C19099) * C89236) * C25849 +
             ((C89093 * C23156 - C13261 * C23153) * C180 +
              (C89093 * C23320 - C13261 * C23318) * C89236) *
                 C25850) *
                C89217) *
               C89189) *
              C815 +
          (((((C13261 * C107 - C89093 * C114) * C180 +
              (C13261 * C347 - C89093 * C353) * C89236) *
                 C25848 +
             ((C27320 - C27321) * C180 + (C27322 - C27323) * C89236) * C25849 +
             C27341 * C25850) *
                C89308 +
            (((C27321 - C27320) * C180 + (C27323 - C27322) * C89236) * C25848 +
             ((C27325 - C27324) * C180 + (C27327 - C27326) * C89236) * C25849 +
             ((C27328 - C27329) * C180 + (C27330 - C27331) * C89236) * C25850) *
                C89217) *
               C89307 +
           ((((C14073 - C14072) * C180 + (C14075 - C14074) * C89236) * C25848 +
             ((C17050 - C17051) * C180 + (C17052 - C17053) * C89236) * C25849 +
             ((C29563 - C29564) * C180 + (C29565 - C29566) * C89236) * C25850) *
                C89308 +
            (((C17051 - C17050) * C180 + (C17053 - C17052) * C89236) * C25848 +
             ((C29564 - C29563) * C180 + (C29566 - C29565) * C89236) * C25849 +
             ((C13261 * C29239 - C89093 * C29240) * C180 +
              (C13261 * C29560 - C89093 * C29561) * C89236) *
                 C25850) *
                C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[31] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13313 * C181 - C13466 * C106 - C13313 * C346 + C13258 * C409 +
             C13314 * C923 - C13467 * C819 - C13314 * C1135 + C13259 * C1227 +
             C13315 * C926 - C13468 * C820 - C13315 * C1138 + C13260 * C1228) *
                C89093 * C89247 * C89308 -
            (C13315 * C8600 - C13468 * C8516 - C13315 * C8760 + C13260 * C8842 +
             C13314 * C4211 - C13467 * C4097 - C13314 * C4439 + C13259 * C4545 +
             C13313 * C1828 - C13466 * C1724 - C13313 * C2040 +
             C13258 * C2132) *
                C89093 * C89247 * C89217) *
               C89307 +
           ((C13313 * C4211 - C13466 * C4097 - C13313 * C4439 + C13258 * C4545 +
             C13314 * C8600 - C13467 * C8516 - C13314 * C8760 + C13259 * C8842 +
             C13315 * C16821 - C13468 * C16683 - C13315 * C17037 +
             C13260 * C17155) *
                C89093 * C89247 * C89217 -
            (C13315 * C5787 - C13468 * C5727 - C13315 * C5899 + C13260 * C5957 +
             C13314 * C926 - C13467 * C820 - C13314 * C1138 + C13259 * C1228 +
             C13313 * C923 - C13466 * C819 - C13313 * C1135 + C13258 * C1227) *
                C89093 * C89247 * C89308) *
               C89189) *
              C815 +
          (((C13313 * C1829 - C13466 * C1723 - C13313 * C2041 + C13258 * C2131 +
             C13314 * C4212 - C13467 * C4098 - C13314 * C4440 + C13259 * C4546 +
             C13315 * C8601 - C13468 * C8515 - C13315 * C8761 +
             C13260 * C8841) *
                C89093 * C89247 * C89217 -
            (C13315 * C927 - C13468 * C821 - C13315 * C1139 + C13260 * C1229 +
             C13314 * C924 - C13467 * C818 - C13314 * C1136 + C13259 * C1226 +
             C13313 * C182 - C13466 * C107 - C13313 * C347 + C13258 * C410) *
                C89093 * C89247 * C89308) *
               C89307 +
           ((C13313 * C924 - C13466 * C818 - C13313 * C1136 + C13258 * C1226 +
             C13314 * C927 - C13467 * C821 - C13314 * C1139 + C13259 * C1229 +
             C13315 * C5788 - C13468 * C5726 - C13315 * C5900 +
             C13260 * C5956) *
                C89093 * C89247 * C89308 -
            (C13315 * C16822 - C13468 * C16684 - C13315 * C17038 +
             C13260 * C17156 + C13314 * C8601 - C13467 * C8515 -
             C13314 * C8761 + C13259 * C8841 + C13313 * C4212 - C13466 * C4098 -
             C13313 * C4440 + C13258 * C4546) *
                C89093 * C89247 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C89 +
             C440 * C90 + C441 * C91) *
                C89247 * C89308 -
            (C2163 * C91 + C2164 * C90 +
             (C180 * C1828 - C408 * C1724 - C180 * C2040 + C89236 * C2132) *
                 C89) *
                C89247 * C89217) *
               C89307 +
           (((C180 * C4211 - C408 * C4097 - C180 * C4439 + C89236 * C4545) *
                 C89 +
             C4562 * C90 + C4563 * C91) *
                C89247 * C89217 -
            (C1258 * C91 + C1259 * C90 +
             (C180 * C923 - C408 * C819 - C180 * C1135 + C89236 * C1227) *
                 C89) *
                C89247 * C89308) *
               C89189) *
              C815 +
          (((C2164 * C89 + C2163 * C90 + C3678 * C91) * C89247 * C89217 -
            (C442 * C91 + C441 * C90 + C440 * C89) * C89247 * C89308) *
               C89307 +
           ((C1259 * C89 + C1258 * C90 + C2955 * C91) * C89247 * C89308 -
            ((C180 * C4214 - C408 * C4100 - C180 * C4442 + C89236 * C4548) *
                 C91 +
             C4563 * C90 + C4562 * C89) *
                C89247 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) *
                 C89093 * C25848 +
             C27448 * C25849 + C27449 * C25850) *
                C89308 -
            (C27450 * C25850 + C27449 * C25849 + C27448 * C25848) * C89217) *
               C89307 +
           ((C29688 * C25848 + C29689 * C25849 +
             (C180 * C23210 - C408 * C23153 - C180 * C23318 + C89236 * C23373) *
                 C89093 * C25850) *
                C89217 -
            (C29689 * C25850 + C29688 * C25849 +
             (C180 * C923 - C408 * C819 - C180 * C1135 + C89236 * C1227) *
                 C89093 * C25848) *
                C89308) *
               C89189) *
              C815 +
          (((C27430 * C25848 + C27431 * C25849 + C27451 * C25850) * C89217 -
            (C27431 * C25850 + C27430 * C25849 + C440 * C89093 * C25848) *
                C89308) *
               C89307 +
           ((C1259 * C89093 * C25848 + C29674 * C25849 + C29690 * C25850) *
                C89308 -
            ((C180 * C29348 - C408 * C29239 - C180 * C29560 + C89236 * C29664) *
                 C89093 * C25850 +
             C29690 * C25849 + C29674 * C25848) *
                C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[31] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C13313 +
             (C89247 * C493 - C263 * C346) * C13258 +
             (C13956 - C13957) * C13314 + (C14240 - C14241) * C13259 +
             C13974 * C13315 + C14249 * C13260) *
                C89093 * C89308 +
            ((C263 * C1724 - C89247 * C1934) * C13313 +
             (C263 * C2040 - C89247 * C2240) * C13258 +
             (C16928 - C16929) * C13314 + (C17258 - C17259) * C13259 +
             (C16932 - C16933) * C13315 + (C17260 - C17261) * C13260) *
                C89093 * C89217) *
               C89307 +
           (((C13957 - C13956) * C13313 + (C14241 - C14240) * C13258 +
             (C13961 - C13960) * C13314 + (C14243 - C14242) * C13259 +
             (C13964 - C13965) * C13315 + (C14244 - C14245) * C13260) *
                C89093 * C89308 +
            ((C16929 - C16928) * C13313 + (C17259 - C17258) * C13258 +
             (C16933 - C16932) * C13314 + (C17261 - C17260) * C13259 +
             (C89247 * C16923 - C263 * C16683) * C13315 +
             (C89247 * C17255 - C263 * C17037) * C13260) *
                C89093 * C89217) *
               C89189) *
              C815 +
          ((((C278 - C277) * C13313 + (C501 - C500) * C13258 +
             (C1046 - C1047) * C13314 + (C1344 - C1345) * C13259 +
             C13968 * C13315 + C14246 * C13260) *
                C89093 * C89308 +
            ((C1952 - C1951) * C13313 + (C2250 - C2249) * C13258 +
             (C4334 - C4335) * C13314 + (C4666 - C4667) * C13259 +
             (C16936 - C16937) * C13315 + (C17262 - C17263) * C13260) *
                C89093 * C89217) *
               C89307 +
           (((C1047 - C1046) * C13313 + (C1345 - C1344) * C13258 +
             (C1054 - C1055) * C13314 + (C1348 - C1349) * C13259 +
             (C13970 - C13971) * C13315 + (C14247 - C14248) * C13260) *
                C89093 * C89308 +
            ((C4335 - C4334) * C13313 + (C4667 - C4666) * C13258 +
             (C16937 - C16936) * C13314 + (C17263 - C17262) * C13259 +
             (C263 * C16684 - C89247 * C16924) * C13315 +
             (C263 * C17038 - C89247 * C17256) * C13260) *
                C89093 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C89247 * C264 - C263 * C106) * C180 +
              (C89247 * C493 - C263 * C346) * C89236) *
                 C89 +
             ((C277 - C278) * C180 + (C500 - C501) * C89236) * C90 +
             C514 * C91) *
                C89308 +
            (((C263 * C1724 - C89247 * C1934) * C180 +
              (C263 * C2040 - C89247 * C2240) * C89236) *
                 C89 +
             ((C1951 - C1952) * C180 + (C2249 - C2250) * C89236) * C90 +
             C3759 * C91) *
                C89217) *
               C89307 +
           ((((C263 * C819 - C89247 * C1029) * C180 +
              (C263 * C1135 - C89247 * C1335) * C89236) *
                 C89 +
             ((C1046 - C1047) * C180 + (C1344 - C1345) * C89236) * C90 +
             C3036 * C91) *
                C89308 +
            (((C89247 * C4325 - C263 * C4097) * C180 +
              (C89247 * C4661 - C263 * C4439) * C89236) *
                 C89 +
             ((C4334 - C4335) * C180 + (C4666 - C4667) * C89236) * C90 +
             ((C4338 - C4339) * C180 + (C4668 - C4669) * C89236) * C91) *
                C89217) *
               C89189) *
              C815 +
          (((((C278 - C277) * C180 + (C501 - C500) * C89236) * C89 +
             ((C282 - C281) * C180 + (C504 - C503) * C89236) * C90 +
             C515 * C91) *
                C89308 +
            (((C1952 - C1951) * C180 + (C2250 - C2249) * C89236) * C89 +
             ((C1956 - C1955) * C180 + (C2252 - C2251) * C89236) * C90 +
             ((C3517 - C3518) * C180 + (C3756 - C3757) * C89236) * C91) *
                C89217) *
               C89307 +
           ((((C1047 - C1046) * C180 + (C1345 - C1344) * C89236) * C89 +
             ((C1051 - C1050) * C180 + (C1347 - C1346) * C89236) * C90 +
             ((C2794 - C2795) * C180 + (C3033 - C3034) * C89236) * C91) *
                C89308 +
            (((C4335 - C4334) * C180 + (C4667 - C4666) * C89236) * C89 +
             ((C4339 - C4338) * C180 + (C4669 - C4668) * C89236) * C90 +
             ((C263 * C4100 - C89247 * C4328) * C180 +
              (C263 * C4442 - C89247 * C4664) * C89236) *
                 C91) *
                C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C25848 * C264 - C25951 * C106 + C25849 * C1934 - C25952 * C1724 +
              C25850 * C1937 - C25953 * C1725) *
                 C180 +
             (C25848 * C493 - C25951 * C346 + C25849 * C2240 - C25952 * C2040 +
              C25850 * C2243 - C25953 * C2043) *
                 C89236) *
                C89093 * C89308 +
            ((C25951 * C1724 - C25848 * C1934 + C25952 * C1725 -
              C25849 * C1937 + C25953 * C10544 - C25850 * C10660) *
                 C180 +
             (C25951 * C2040 - C25848 * C2240 + C25952 * C2043 -
              C25849 * C2243 + C25953 * C10716 - C25850 * C10825) *
                 C89236) *
                C89093 * C89217) *
               C89307 +
           (((C25951 * C819 - C25848 * C1029 + C25952 * C4097 - C25849 * C4325 +
              C25953 * C6249 - C25850 * C6413) *
                 C180 +
             (C25951 * C1135 - C25848 * C1335 + C25952 * C4439 -
              C25849 * C4661 + C25953 * C6493 - C25850 * C6650) *
                 C89236) *
                C89093 * C89308 +
            ((C25848 * C4325 - C25951 * C4097 + C25849 * C6413 -
              C25952 * C6249 + C25850 * C23264 - C25953 * C23153) *
                 C180 +
             (C25848 * C4661 - C25951 * C4439 + C25849 * C6650 -
              C25952 * C6493 + C25850 * C23424 - C25953 * C23318) *
                 C89236) *
                C89093 * C89217) *
               C89189) *
              C815 +
          ((((C25951 * C107 - C25848 * C265 + C25952 * C1723 - C25849 * C1935 +
              C25953 * C1726 - C25850 * C1938) *
                 C180 +
             (C25951 * C347 - C25848 * C494 + C25952 * C2041 - C25849 * C2241 +
              C25953 * C2044 - C25850 * C2244) *
                 C89236) *
                C89093 * C89308 +
            ((C25848 * C1935 - C25951 * C1723 + C25849 * C1938 -
              C25952 * C1726 + C25850 * C10661 - C25953 * C10543) *
                 C180 +
             (C25848 * C2241 - C25951 * C2041 + C25849 * C2244 -
              C25952 * C2044 + C25850 * C10826 - C25953 * C10717) *
                 C89236) *
                C89093 * C89217) *
               C89307 +
           (((C25848 * C1030 - C25951 * C818 + C25849 * C4326 - C25952 * C4098 +
              C25850 * C6414 - C25953 * C6248) *
                 C180 +
             (C25848 * C1336 - C25951 * C1136 + C25849 * C4662 -
              C25952 * C4440 + C25850 * C6651 - C25953 * C6494) *
                 C89236) *
                C89093 * C89308 +
            ((C25951 * C4098 - C25848 * C4326 + C25952 * C6248 -
              C25849 * C6414 + C25953 * C29239 - C25850 * C29460) *
                 C180 +
             (C25951 * C4440 - C25848 * C4662 + C25952 * C6494 -
              C25849 * C6651 + C25953 * C29560 - C25850 * C29788) *
                 C89236) *
                C89093 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eezx[31] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C89093 * C112 - C13261 * C106) * C263 +
              (C89093 * C571 - C13261 * C565) * C89247) *
                 C13258 +
             ((C14060 - C14061) * C263 + (C14328 - C14329) * C89247) * C13259 +
             C14346 * C13260) *
                C89308 +
            (((C13261 * C1724 - C89093 * C1734) * C263 +
              (C13261 * C2330 - C89093 * C2338) * C89247) *
                 C13258 +
             ((C17042 - C17043) * C263 + (C17366 - C17367) * C89247) * C13259 +
             ((C17046 - C17047) * C263 + (C17368 - C17369) * C89247) * C13260) *
                C89217) *
               C89307 +
           ((((C14061 - C14060) * C263 + (C14329 - C14328) * C89247) * C13258 +
             ((C14065 - C14064) * C263 + (C14332 - C14331) * C89247) * C13259 +
             ((C14068 - C14069) * C263 + (C14333 - C14334) * C89247) * C13260) *
                C89308 +
            (((C17043 - C17042) * C263 + (C17367 - C17366) * C89247) * C13258 +
             ((C17047 - C17046) * C263 + (C17369 - C17368) * C89247) * C13259 +
             ((C89093 * C16685 - C13261 * C16683) * C263 +
              (C89093 * C17363 - C13261 * C17361) * C89247) *
                 C13260) *
                C89217) *
               C89189) *
              C815 +
          (((((C13261 * C107 - C89093 * C114) * C263 +
              (C13261 * C566 - C89093 * C572) * C89247) *
                 C13258 +
             ((C14072 - C14073) * C263 + (C14335 - C14336) * C89247) * C13259 +
             C14347 * C13260) *
                C89308 +
            (((C89093 * C1732 - C13261 * C1723) * C263 +
              (C89093 * C2339 - C13261 * C2331) * C89247) *
                 C13258 +
             ((C17050 - C17051) * C263 + (C17370 - C17371) * C89247) * C13259 +
             ((C17054 - C17055) * C263 + (C17372 - C17373) * C89247) * C13260) *
                C89217) *
               C89307 +
           ((((C14073 - C14072) * C263 + (C14336 - C14335) * C89247) * C13258 +
             ((C14077 - C14076) * C263 + (C14339 - C14338) * C89247) * C13259 +
             ((C14080 - C14081) * C263 + (C14340 - C14341) * C89247) * C13260) *
                C89308 +
            (((C17051 - C17050) * C263 + (C17371 - C17370) * C89247) * C13258 +
             ((C17055 - C17054) * C263 + (C17373 - C17372) * C89247) * C13259 +
             ((C13261 * C16684 - C89093 * C16687) * C263 +
              (C13261 * C17362 - C89093 * C17364) * C89247) *
                 C13260) *
                C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 + C91 * C116 -
              C104 * C108) *
                 C263 +
             (C89 * C571 - C100 * C565 + C90 * C572 - C102 * C566 + C91 * C573 -
              C104 * C567) *
                 C89247) *
                C89236 * C89308 +
            ((C100 * C1724 - C89 * C1734 + C102 * C1723 - C90 * C1732 +
              C104 * C1722 - C91 * C1730) *
                 C263 +
             (C100 * C2330 - C89 * C2338 + C102 * C2331 - C90 * C2339 +
              C104 * C2332 - C91 * C2340) *
                 C89247) *
                C89236 * C89217) *
               C89307 +
           (((C100 * C819 - C89 * C829 + C102 * C818 - C90 * C827 +
              C104 * C817 - C91 * C825) *
                 C263 +
             (C100 * C1425 - C89 * C1433 + C102 * C1426 - C90 * C1434 +
              C104 * C1427 - C91 * C1435) *
                 C89247) *
                C89236 * C89308 +
            ((C89 * C4101 - C100 * C4097 + C90 * C4103 - C102 * C4098 +
              C91 * C4105 - C104 * C4099) *
                 C263 +
             (C89 * C4771 - C100 * C4767 + C90 * C4772 - C102 * C4768 +
              C91 * C4773 - C104 * C4769) *
                 C89247) *
                C89236 * C89217) *
               C89189) *
              C815 +
          ((((C100 * C107 - C89 * C114 + C102 * C108 - C90 * C116 +
              C104 * C109 - C91 * C118) *
                 C263 +
             (C100 * C566 - C89 * C572 + C102 * C567 - C90 * C573 +
              C104 * C568 - C91 * C574) *
                 C89247) *
                C89236 * C89308 +
            ((C89 * C1732 - C100 * C1723 + C90 * C1730 - C102 * C1722 +
              C91 * C1742 - C104 * C1728) *
                 C263 +
             (C89 * C2339 - C100 * C2331 + C90 * C2340 - C102 * C2332 +
              C91 * C2344 - C104 * C2336) *
                 C89247) *
                C89236 * C89217) *
               C89307 +
           (((C89 * C827 - C100 * C818 + C90 * C825 - C102 * C817 + C91 * C837 -
              C104 * C823) *
                 C263 +
             (C89 * C1434 - C100 * C1426 + C90 * C1435 - C102 * C1427 +
              C91 * C1439 - C104 * C1431) *
                 C89247) *
                C89236 * C89308 +
            ((C100 * C4098 - C89 * C4103 + C102 * C4099 - C90 * C4105 +
              C104 * C4100 - C91 * C4107) *
                 C263 +
             (C100 * C4768 - C89 * C4772 + C102 * C4769 - C90 * C4773 +
              C104 * C4770 - C91 * C4774) *
                 C89247) *
                C89236 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C25951 +
             (C89093 * C571 - C13261 * C565) * C25848 +
             (C27308 - C27309) * C25952 + (C27606 - C27607) * C25849 +
             C27332 * C25953 + C27618 * C25850) *
                C89236 * C89308 +
            ((C27309 - C27308) * C25951 + (C27607 - C27606) * C25848 +
             (C27313 - C27312) * C25952 + (C27609 - C27608) * C25849 +
             (C27316 - C27317) * C25953 + (C27610 - C27611) * C25850) *
                C89236 * C89217) *
               C89307 +
           (((C14061 - C14060) * C25951 + (C14329 - C14328) * C25848 +
             (C17042 - C17043) * C25952 + (C17366 - C17367) * C25849 +
             (C19097 - C19096) * C25953 + (C19335 - C19334) * C25850) *
                C89236 * C89308 +
            ((C17043 - C17042) * C25951 + (C17367 - C17366) * C25848 +
             (C19096 - C19097) * C25952 + (C19334 - C19335) * C25849 +
             (C89093 * C23156 - C13261 * C23153) * C25953 +
             (C89093 * C23478 - C13261 * C23476) * C25850) *
                C89236 * C89217) *
               C89189) *
              C815 +
          ((((C13261 * C107 - C89093 * C114) * C25951 +
             (C13261 * C566 - C89093 * C572) * C25848 +
             (C27320 - C27321) * C25952 + (C27612 - C27613) * C25849 +
             C27334 * C25953 + C27619 * C25850) *
                C89236 * C89308 +
            ((C27321 - C27320) * C25951 + (C27613 - C27612) * C25848 +
             (C27325 - C27324) * C25952 + (C27615 - C27614) * C25849 +
             (C27328 - C27329) * C25953 + (C27616 - C27617) * C25850) *
                C89236 * C89217) *
               C89307 +
           (((C14073 - C14072) * C25951 + (C14336 - C14335) * C25848 +
             (C17050 - C17051) * C25952 + (C17370 - C17371) * C25849 +
             (C29563 - C29564) * C25953 + (C29890 - C29891) * C25850) *
                C89236 * C89308 +
            ((C17051 - C17050) * C25951 + (C17371 - C17370) * C25848 +
             (C29564 - C29563) * C25952 + (C29891 - C29890) * C25849 +
             (C13261 * C29239 - C89093 * C29240) * C25953 +
             (C13261 * C29887 - C89093 * C29888) * C25850) *
                C89236 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eezy[31] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
              C13260 * C926 - C13315 * C820) *
                 C263 +
             (C13258 * C627 - C13313 * C565 + C13259 * C1515 - C13314 * C1425 +
              C13260 * C1518 - C13315 * C1428) *
                 C89247) *
                C89093 * C89308 +
            ((C13313 * C1724 - C13258 * C1828 + C13314 * C4097 -
              C13259 * C4211 + C13315 * C8516 - C13260 * C8600) *
                 C263 +
             (C13313 * C2330 - C13258 * C2420 + C13314 * C4767 -
              C13259 * C4873 + C13315 * C8994 - C13260 * C9074) *
                 C89247) *
                C89093 * C89217) *
               C89307 +
           (((C13313 * C819 - C13258 * C923 + C13314 * C820 - C13259 * C926 +
              C13315 * C5727 - C13260 * C5787) *
                 C263 +
             (C13313 * C1425 - C13258 * C1515 + C13314 * C1428 -
              C13259 * C1518 + C13315 * C6061 - C13260 * C6117) *
                 C89247) *
                C89093 * C89308 +
            ((C13258 * C4211 - C13313 * C4097 + C13259 * C8600 -
              C13314 * C8516 + C13260 * C16821 - C13315 * C16683) *
                 C263 +
             (C13258 * C4873 - C13313 * C4767 + C13259 * C9074 -
              C13314 * C8994 + C13260 * C17471 - C13315 * C17361) *
                 C89247) *
                C89093 * C89217) *
               C89189) *
              C815 +
          ((((C13313 * C107 - C13258 * C182 + C13314 * C818 - C13259 * C924 +
              C13315 * C821 - C13260 * C927) *
                 C263 +
             (C13313 * C566 - C13258 * C628 + C13314 * C1426 - C13259 * C1516 +
              C13315 * C1429 - C13260 * C1519) *
                 C89247) *
                C89093 * C89308 +
            ((C13258 * C1829 - C13313 * C1723 + C13259 * C4212 -
              C13314 * C4098 + C13260 * C8601 - C13315 * C8515) *
                 C263 +
             (C13258 * C2421 - C13313 * C2331 + C13259 * C4874 -
              C13314 * C4768 + C13260 * C9075 - C13315 * C8995) *
                 C89247) *
                C89093 * C89217) *
               C89307 +
           (((C13258 * C924 - C13313 * C818 + C13259 * C927 - C13314 * C821 +
              C13260 * C5788 - C13315 * C5726) *
                 C263 +
             (C13258 * C1516 - C13313 * C1426 + C13259 * C1519 -
              C13314 * C1429 + C13260 * C6118 - C13315 * C6062) *
                 C89247) *
                C89093 * C89308 +
            ((C13313 * C4098 - C13258 * C4212 + C13314 * C8515 -
              C13259 * C8601 + C13315 * C16684 - C13260 * C16822) *
                 C263 +
             (C13313 * C4768 - C13258 * C4874 + C13314 * C8995 -
              C13259 * C9075 + C13315 * C17362 - C13260 * C17472) *
                 C89247) *
                C89093 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C89236 * C181 - C180 * C106) * C263 +
              (C89236 * C627 - C180 * C565) * C89247) *
                 C89 +
             ((C194 - C195) * C263 + (C634 - C635) * C89247) * C90 +
             C648 * C91) *
                C89308 +
            (((C180 * C1724 - C89236 * C1828) * C263 +
              (C180 * C2330 - C89236 * C2420) * C89247) *
                 C89 +
             ((C1845 - C1846) * C263 + (C2429 - C2430) * C89247) * C90 +
             C3916 * C91) *
                C89217) *
               C89307 +
           ((((C180 * C819 - C89236 * C923) * C263 +
              (C180 * C1425 - C89236 * C1515) * C89247) *
                 C89 +
             ((C940 - C941) * C263 + (C1524 - C1525) * C89247) * C90 +
             C3193 * C91) *
                C89308 +
            (((C89236 * C4211 - C180 * C4097) * C263 +
              (C89236 * C4873 - C180 * C4767) * C89247) *
                 C89 +
             ((C4220 - C4221) * C263 + (C4878 - C4879) * C89247) * C90 +
             ((C4224 - C4225) * C263 + (C4880 - C4881) * C89247) * C91) *
                C89217) *
               C89189) *
              C815 +
          (((((C195 - C194) * C263 + (C635 - C634) * C89247) * C89 +
             ((C199 - C198) * C263 + (C638 - C637) * C89247) * C90 +
             C649 * C91) *
                C89308 +
            (((C1846 - C1845) * C263 + (C2430 - C2429) * C89247) * C89 +
             ((C1850 - C1849) * C263 + (C2432 - C2431) * C89247) * C90 +
             ((C3435 - C3436) * C263 + (C3913 - C3914) * C89247) * C91) *
                C89217) *
               C89307 +
           ((((C941 - C940) * C263 + (C1525 - C1524) * C89247) * C89 +
             ((C945 - C944) * C263 + (C1527 - C1526) * C89247) * C90 +
             ((C2712 - C2713) * C263 + (C3190 - C3191) * C89247) * C91) *
                C89308 +
            (((C4221 - C4220) * C263 + (C4879 - C4878) * C89247) * C89 +
             ((C4225 - C4224) * C263 + (C4881 - C4880) * C89247) * C90 +
             ((C180 * C4100 - C89236 * C4214) * C263 +
              (C180 * C4770 - C89236 * C4876) * C89247) *
                 C91) *
                C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C25951 +
             (C89236 * C627 - C180 * C565) * C25848 +
             (C27126 - C27127) * C25952 + (C27696 - C27697) * C25849 +
             C27144 * C25953 + C27705 * C25850) *
                C89093 * C89308 +
            ((C27127 - C27126) * C25951 + (C27697 - C27696) * C25848 +
             (C27131 - C27130) * C25952 + (C27699 - C27698) * C25849 +
             (C27134 - C27135) * C25953 + (C27700 - C27701) * C25850) *
                C89093 * C89217) *
               C89307 +
           (((C180 * C819 - C89236 * C923) * C25951 +
             (C180 * C1425 - C89236 * C1515) * C25848 +
             (C29351 - C29352) * C25952 + (C29991 - C29992) * C25849 +
             (C29355 - C29356) * C25953 + (C29993 - C29994) * C25850) *
                C89093 * C89308 +
            ((C29352 - C29351) * C25951 + (C29992 - C29991) * C25848 +
             (C29356 - C29355) * C25952 + (C29994 - C29993) * C25849 +
             (C89236 * C23210 - C180 * C23153) * C25953 +
             (C89236 * C23530 - C180 * C23476) * C25850) *
                C89093 * C89217) *
               C89189) *
              C815 +
          ((((C195 - C194) * C25951 + (C635 - C634) * C25848 +
             (C1845 - C1846) * C25952 + (C2429 - C2430) * C25849 +
             C27138 * C25953 + C27702 * C25850) *
                C89093 * C89308 +
            ((C1846 - C1845) * C25951 + (C2430 - C2429) * C25848 +
             (C1853 - C1854) * C25952 + (C2433 - C2434) * C25849 +
             (C27140 - C27141) * C25953 + (C27703 - C27704) * C25850) *
                C89093 * C89217) *
               C89307 +
           (((C941 - C940) * C25951 + (C1525 - C1524) * C25848 +
             (C4220 - C4221) * C25952 + (C4878 - C4879) * C25849 +
             (C29359 - C29360) * C25953 + (C29995 - C29996) * C25850) *
                C89093 * C89308 +
            ((C4221 - C4220) * C25951 + (C4879 - C4878) * C25848 +
             (C29360 - C29359) * C25952 + (C29996 - C29995) * C25849 +
             (C180 * C29239 - C89236 * C29348) * C25953 +
             (C180 * C29887 - C89236 * C29989) * C25850) *
                C89093 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eezz[31] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) *
                 C13258 +
             C14524 * C13259 + C14525 * C13260) *
                C89093 * C89308 -
            (C17592 * C13260 + C17593 * C13259 +
             (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
                 C13258) *
                C89093 * C89217) *
               C89307 +
           ((C17593 * C13258 + C17592 * C13259 +
             (C263 * C16923 - C699 * C16683 - C263 * C17361 + C89247 * C17571) *
                 C13260) *
                C89093 * C89217 -
            (C14526 * C13260 + C14525 * C13259 + C14524 * C13258) * C89093 *
                C89308) *
               C89189) *
              C815 +
          (((C2544 * C13258 + C4996 * C13259 + C17594 * C13260) * C89093 *
                C89217 -
            (C1640 * C13260 + C1639 * C13259 + C731 * C13258) * C89093 *
                C89308) *
               C89307 +
           ((C1639 * C13258 + C1640 * C13259 + C14527 * C13260) * C89093 *
                C89308 -
            ((C263 * C16924 - C699 * C16684 - C263 * C17362 + C89247 * C17572) *
                 C13260 +
             C17594 * C13259 + C4996 * C13258) *
                C89093 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) *
                 C89236 * C89 +
             C735 * C90 + C736 * C91) *
                C89308 -
            (C2547 * C91 + C2548 * C90 +
             (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
                 C89236 * C89) *
                C89217) *
               C89307 +
           (((C263 * C4325 - C699 * C4097 - C263 * C4767 + C89247 * C4979) *
                 C89236 * C89 +
             C4998 * C90 + C4999 * C91) *
                C89217 -
            (C1642 * C91 + C1643 * C90 +
             (C263 * C1029 - C699 * C819 - C263 * C1425 + C89247 * C1607) *
                 C89236 * C89) *
                C89308) *
               C89189) *
              C815 +
          (((C2548 * C89 + C2547 * C90 + C3999 * C91) * C89217 -
            (C737 * C91 + C736 * C90 + C735 * C89) * C89308) *
               C89307 +
           ((C1643 * C89 + C1642 * C90 + C3276 * C91) * C89308 -
            ((C263 * C4328 - C699 * C4100 - C263 * C4770 + C89247 * C4982) *
                 C89236 * C91 +
             C4999 * C90 + C4998 * C89) *
                C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C25951 * C264 - C26254 * C106 - C25951 * C565 + C25848 * C700 +
             C25952 * C1934 - C26255 * C1724 - C25952 * C2330 + C25849 * C2512 +
             C25953 * C1937 - C26256 * C1725 - C25953 * C2333 +
             C25850 * C2513) *
                C89236 * C89093 * C89308 -
            (C25953 * C10660 - C26256 * C10544 - C25953 * C10878 +
             C25850 * C10989 + C25952 * C1937 - C26255 * C1725 -
             C25952 * C2333 + C25849 * C2513 + C25951 * C1934 - C26254 * C1724 -
             C25951 * C2330 + C25848 * C2512) *
                C89236 * C89093 * C89217) *
               C89307 +
           ((C25951 * C4325 - C26254 * C4097 - C25951 * C4767 + C25848 * C4979 +
             C25952 * C6413 - C26255 * C6249 - C25952 * C6727 + C25849 * C6886 +
             C25953 * C23264 - C26256 * C23153 - C25953 * C23476 +
             C25850 * C23583) *
                C89236 * C89093 * C89217 -
            (C25953 * C6413 - C26256 * C6249 - C25953 * C6727 + C25850 * C6886 +
             C25952 * C4325 - C26255 * C4097 - C25952 * C4767 + C25849 * C4979 +
             C25951 * C1029 - C26254 * C819 - C25951 * C1425 + C25848 * C1607) *
                C89236 * C89093 * C89308) *
               C89189) *
              C815 +
          (((C25951 * C1935 - C26254 * C1723 - C25951 * C2331 + C25848 * C2511 +
             C25952 * C1938 - C26255 * C1726 - C25952 * C2334 + C25849 * C2514 +
             C25953 * C10661 - C26256 * C10543 - C25953 * C10879 +
             C25850 * C10988) *
                C89236 * C89093 * C89217 -
            (C25953 * C1938 - C26256 * C1726 - C25953 * C2334 + C25850 * C2514 +
             C25952 * C1935 - C26255 * C1723 - C25952 * C2331 + C25849 * C2511 +
             C25951 * C265 - C26254 * C107 - C25951 * C566 + C25848 * C701) *
                C89236 * C89093 * C89308) *
               C89307 +
           ((C25951 * C1030 - C26254 * C818 - C25951 * C1426 + C25848 * C1606 +
             C25952 * C4326 - C26255 * C4098 - C25952 * C4768 + C25849 * C4980 +
             C25953 * C6414 - C26256 * C6248 - C25953 * C6728 +
             C25850 * C6885) *
                C89236 * C89093 * C89308 -
            (C25953 * C29460 - C26256 * C29239 - C25953 * C29887 +
             C25850 * C30094 + C25952 * C6414 - C26255 * C6248 -
             C25952 * C6728 + C25849 * C6885 + C25951 * C4326 - C26254 * C4098 -
             C25951 * C4768 + C25848 * C4980) *
                C89236 * C89093 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eexx[32] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((C100 * C112 - C101 * C106 - C100 * C113 + C89 * C124 +
               C102 * C114 - C103 * C107 - C102 * C115 + C90 * C125 +
               C104 * C116 - C105 * C108 - C104 * C117 + C91 * C126) *
                  C89247 * C89236 * C89153 * C89137 * C96 -
              (C104 * C118 - C105 * C109 - C104 * C119 + C91 * C127 +
               C102 * C116 - C103 * C108 - C102 * C117 + C90 * C126 +
               C100 * C114 - C101 * C107 - C100 * C115 + C89 * C125) *
                  C89247 * C89236 * C89153 * C89137 * C97 +
              (C100 * C116 - C101 * C108 - C100 * C117 + C89 * C126 +
               C102 * C118 - C103 * C109 - C102 * C119 + C90 * C127 +
               C104 * C120 - C105 * C110 - C104 * C121 + C91 * C128) *
                  C89247 * C89236 * C89153 * C89137 * C98 -
              (C104 * C122 - C105 * C111 - C104 * C123 + C91 * C129 +
               C102 * C120 - C103 * C110 - C102 * C121 + C90 * C128 +
               C100 * C118 - C101 * C109 - C100 * C119 + C89 * C127) *
                  C89247 * C89236 * C89153 * C89137 * C99) +
         0.5 * std::pow(Pi, 2.5) *
             (((C100 * C112 - C101 * C106 - C100 * C113 + C89 * C124 +
                C102 * C114 - C103 * C107 - C102 * C115 + C90 * C125 +
                C104 * C116 - C105 * C108 - C104 * C117 + C91 * C126) *
                   C89247 * C89236 * C89153 * C812 -
               (C104 * C825 - C105 * C817 - C104 * C826 + C91 * C841 +
                C102 * C827 - C103 * C818 - C102 * C828 + C90 * C842 +
                C100 * C829 - C101 * C819 - C100 * C830 + C89 * C843) *
                   C89247 * C89236 * C89153 * C813 +
               (C100 * C831 - C101 * C820 - C100 * C832 + C89 * C844 +
                C102 * C833 - C103 * C821 - C102 * C834 + C90 * C845 +
                C104 * C835 - C105 * C822 - C104 * C836 + C91 * C846) *
                   C89247 * C89236 * C89153 * C814) *
                  C815 +
              ((C100 * C827 - C101 * C818 - C100 * C828 + C89 * C842 +
                C102 * C825 - C103 * C817 - C102 * C826 + C90 * C841 +
                C104 * C837 - C105 * C823 - C104 * C838 + C91 * C847) *
                   C89247 * C89236 * C89153 * C813 -
               (C104 * C118 - C105 * C109 - C104 * C119 + C91 * C127 +
                C102 * C116 - C103 * C108 - C102 * C117 + C90 * C126 +
                C100 * C114 - C101 * C107 - C100 * C115 + C89 * C125) *
                   C89247 * C89236 * C89153 * C812 -
               (C104 * C839 - C105 * C824 - C104 * C840 + C91 * C848 +
                C102 * C835 - C103 * C822 - C102 * C836 + C90 * C846 +
                C100 * C833 - C101 * C821 - C100 * C834 + C89 * C845) *
                   C89247 * C89236 * C89153 * C814) *
                  C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C100 * C112 - C101 * C106 - C100 * C113 + C89 * C124 + C102 * C114 -
            C103 * C107 - C102 * C115 + C90 * C125 + C104 * C116 - C105 * C108 -
            C104 * C117 + C91 * C126) *
               C89247 * C89236 * C1719 -
           (C104 * C1730 - C105 * C1722 - C104 * C1731 + C91 * C1746 +
            C102 * C1732 - C103 * C1723 - C102 * C1733 + C90 * C1747 +
            C100 * C1734 - C101 * C1724 - C100 * C1735 + C89 * C1748) *
               C89247 * C89236 * C1720 +
           (C100 * C1736 - C101 * C1725 - C100 * C1737 + C89 * C1749 +
            C102 * C1738 - C103 * C1726 - C102 * C1739 + C90 * C1750 +
            C104 * C1740 - C105 * C1727 - C104 * C1741 + C91 * C1751) *
               C89247 * C89236 * C1721) *
              C89137 * C815 +
          ((C100 * C1732 - C101 * C1723 - C100 * C1733 + C89 * C1747 +
            C102 * C1730 - C103 * C1722 - C102 * C1731 + C90 * C1746 +
            C104 * C1742 - C105 * C1728 - C104 * C1743 + C91 * C1752) *
               C89247 * C89236 * C1720 -
           (C104 * C118 - C105 * C109 - C104 * C119 + C91 * C127 + C102 * C116 -
            C103 * C108 - C102 * C117 + C90 * C126 + C100 * C114 - C101 * C107 -
            C100 * C115 + C89 * C125) *
               C89247 * C89236 * C1719 -
           (C104 * C1744 - C105 * C1729 - C104 * C1745 + C91 * C1753 +
            C102 * C1740 - C103 * C1727 - C102 * C1741 + C90 * C1751 +
            C100 * C1738 - C101 * C1726 - C100 * C1739 + C89 * C1750) *
               C89247 * C89236 * C1721) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
               C89247 * C13258 +
           (C13261 * C829 - C13262 * C819 - C13261 * C830 + C89093 * C843) *
               C89247 * C13259 +
           (C13261 * C831 - C13262 * C820 - C13261 * C832 + C89093 * C844) *
               C89247 * C13260) *
              C89153 * C89137 * C96 -
          ((C13261 * C833 - C13262 * C821 - C13261 * C834 + C89093 * C845) *
               C89247 * C13260 +
           (C13261 * C827 - C13262 * C818 - C13261 * C828 + C89093 * C842) *
               C89247 * C13259 +
           (C13261 * C114 - C13262 * C107 - C13261 * C115 + C89093 * C125) *
               C89247 * C13258) *
              C89153 * C89137 * C97 +
          ((C13261 * C116 - C13262 * C108 - C13261 * C117 + C89093 * C126) *
               C89247 * C13258 +
           (C13261 * C825 - C13262 * C817 - C13261 * C826 + C89093 * C841) *
               C89247 * C13259 +
           (C13261 * C835 - C13262 * C822 - C13261 * C836 + C89093 * C846) *
               C89247 * C13260) *
              C89153 * C89137 * C98 -
          ((C13261 * C839 - C13262 * C824 - C13261 * C840 + C89093 * C848) *
               C89247 * C13260 +
           (C13261 * C837 - C13262 * C823 - C13261 * C838 + C89093 * C847) *
               C89247 * C13259 +
           (C13261 * C118 - C13262 * C109 - C13261 * C119 + C89093 * C127) *
               C89247 * C13258) *
              C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                C89247 * C13258 +
            C13794 * C13259 + C13795 * C13260) *
               C89153 * C812 -
           (C13796 * C13260 + C13795 * C13259 + C13794 * C13258) * C89153 *
               C813 +
           (C13795 * C13258 + C13796 * C13259 +
            (C13261 * C13745 - C13262 * C13743 - C13261 * C13746 +
             C89093 * C13749) *
                C89247 * C13260) *
               C89153 * C814) *
              C815 +
          ((C13797 * C13258 + C13798 * C13259 + C13799 * C13260) * C89153 *
               C813 -
           (C13798 * C13260 + C13797 * C13259 +
            (C13261 * C114 - C13262 * C107 - C13261 * C115 + C89093 * C125) *
                C89247 * C13258) *
               C89153 * C812 -
           ((C13261 * C13747 - C13262 * C13744 - C13261 * C13748 +
             C89093 * C13750) *
                C89247 * C13260 +
            C13799 * C13259 + C13798 * C13258) *
               C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                C89247 * C13258 +
            C13794 * C13259 + C13795 * C13260) *
               C1719 -
           ((C13261 * C8521 - C13262 * C8516 - C13261 * C8522 +
             C89093 * C8525) *
                C89247 * C13260 +
            (C13261 * C4101 - C13262 * C4097 - C13261 * C4102 +
             C89093 * C4109) *
                C89247 * C13259 +
            (C13261 * C1734 - C13262 * C1724 - C13261 * C1735 +
             C89093 * C1748) *
                C89247 * C13258) *
               C1720 +
           ((C13261 * C1736 - C13262 * C1725 - C13261 * C1737 +
             C89093 * C1749) *
                C89247 * C13258 +
            (C13261 * C6254 - C13262 * C6249 - C13261 * C6255 +
             C89093 * C6258) *
                C89247 * C13259 +
            (C13261 * C14603 - C13262 * C14601 - C13261 * C14604 +
             C89093 * C14607) *
                C89247 * C13260) *
               C1721) *
              C89137 * C815 +
          (((C13261 * C1732 - C13262 * C1723 - C13261 * C1733 +
             C89093 * C1747) *
                C89247 * C13258 +
            (C13261 * C4103 - C13262 * C4098 - C13261 * C4104 +
             C89093 * C4110) *
                C89247 * C13259 +
            (C13261 * C8519 - C13262 * C8515 - C13261 * C8520 +
             C89093 * C8524) *
                C89247 * C13260) *
               C1720 -
           (C13798 * C13260 + C13797 * C13259 +
            (C13261 * C114 - C13262 * C107 - C13261 * C115 + C89093 * C125) *
                C89247 * C13258) *
               C1719 -
           ((C13261 * C14605 - C13262 * C14602 - C13261 * C14606 +
             C89093 * C14608) *
                C89247 * C13260 +
            (C13261 * C6252 - C13262 * C6248 - C13261 * C6253 +
             C89093 * C6257) *
                C89247 * C13259 +
            (C13261 * C1738 - C13262 * C1726 - C13261 * C1739 +
             C89093 * C1750) *
                C89247 * C13258) *
               C1721) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
               C25848 +
           (C13261 * C1734 - C13262 * C1724 - C13261 * C1735 + C89093 * C1748) *
               C25849 +
           (C13261 * C1736 - C13262 * C1725 - C13261 * C1737 + C89093 * C1749) *
               C25850) *
              C89236 * C89153 * C89137 * C96 -
          ((C13261 * C1738 - C13262 * C1726 - C13261 * C1739 + C89093 * C1750) *
               C25850 +
           (C13261 * C1732 - C13262 * C1723 - C13261 * C1733 + C89093 * C1747) *
               C25849 +
           (C13261 * C114 - C13262 * C107 - C13261 * C115 + C89093 * C125) *
               C25848) *
              C89236 * C89153 * C89137 * C97 +
          ((C13261 * C116 - C13262 * C108 - C13261 * C117 + C89093 * C126) *
               C25848 +
           (C13261 * C1730 - C13262 * C1722 - C13261 * C1731 + C89093 * C1746) *
               C25849 +
           (C13261 * C1740 - C13262 * C1727 - C13261 * C1741 + C89093 * C1751) *
               C25850) *
              C89236 * C89153 * C89137 * C98 -
          ((C13261 * C1744 - C13262 * C1729 - C13261 * C1745 + C89093 * C1753) *
               C25850 +
           (C13261 * C1742 - C13262 * C1728 - C13261 * C1743 + C89093 * C1752) *
               C25849 +
           (C13261 * C118 - C13262 * C109 - C13261 * C119 + C89093 * C127) *
               C25848) *
              C89236 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                C25848 +
            (C13261 * C1734 - C13262 * C1724 - C13261 * C1735 +
             C89093 * C1748) *
                C25849 +
            (C13261 * C1736 - C13262 * C1725 - C13261 * C1737 +
             C89093 * C1749) *
                C25850) *
               C89236 * C89153 * C812 -
           (C18856 * C25850 + C16717 * C25849 + C13788 * C25848) * C89236 *
               C89153 * C813 +
           (C13789 * C25848 + C16716 * C25849 + C18857 * C25850) * C89236 *
               C89153 * C814) *
              C815 +
          ((C13791 * C25848 + C16718 * C25849 +
            (C13261 * C6252 - C13262 * C6248 - C13261 * C6253 +
             C89093 * C6257) *
                C25850) *
               C89236 * C89153 * C813 -
           ((C13261 * C1738 - C13262 * C1726 - C13261 * C1739 +
             C89093 * C1750) *
                C25850 +
            (C13261 * C1732 - C13262 * C1723 - C13261 * C1733 +
             C89093 * C1747) *
                C25849 +
            (C13261 * C114 - C13262 * C107 - C13261 * C115 + C89093 * C125) *
                C25848) *
               C89236 * C89153 * C812 -
           ((C13261 * C14605 - C13262 * C14602 - C13261 * C14606 +
             C89093 * C14608) *
                C25850 +
            C16719 * C25849 + C13792 * C25848) *
               C89236 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                C25848 +
            C27042 * C25849 + C27043 * C25850) *
               C89236 * C1719 -
           (C27044 * C25850 + C27043 * C25849 + C27042 * C25848) * C89236 *
               C1720 +
           (C27043 * C25848 + C27044 * C25849 +
            (C13261 * C26999 - C13262 * C26997 - C13261 * C27000 +
             C89093 * C27003) *
                C25850) *
               C89236 * C1721) *
              C89137 * C815 +
          ((C27045 * C25848 + C27046 * C25849 + C27047 * C25850) * C89236 *
               C1720 -
           (C27046 * C25850 + C27045 * C25849 +
            (C13261 * C114 - C13262 * C107 - C13261 * C115 + C89093 * C125) *
                C25848) *
               C89236 * C1719 -
           ((C13261 * C27001 - C13262 * C26998 - C13261 * C27002 +
             C89093 * C27004) *
                C25850 +
            C27047 * C25849 + C27046 * C25848) *
               C89236 * C1721) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q));
    d2eexy[32] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C89236 * C181 - C180 * C106) * C100 +
               (C89236 * C187 - C180 * C113) * C89 + (C194 - C195) * C102 +
               (C196 - C197) * C90 + C210 * C104 + C211 * C91) *
                  C89247 * C89153 * C89137 * C96 +
              ((C195 - C194) * C100 + (C197 - C196) * C89 +
               (C199 - C198) * C102 + (C201 - C200) * C90 + C212 * C104 +
               C213 * C91) *
                  C89247 * C89153 * C89137 * C97 +
              (C210 * C100 + C211 * C89 + (C203 - C202) * C102 +
               (C205 - C204) * C90 + (C206 - C207) * C104 +
               (C208 - C209) * C91) *
                  C89247 * C89153 * C89137 * C98 +
              (C212 * C100 + C213 * C89 + (C207 - C206) * C102 +
               (C209 - C208) * C90 + (C180 * C111 - C89236 * C186) * C104 +
               (C180 * C123 - C89236 * C192) * C91) *
                  C89247 * C89153 * C89137 * C99) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C89236 * C181 - C180 * C106) * C100 +
                (C89236 * C187 - C180 * C113) * C89 + (C194 - C195) * C102 +
                (C196 - C197) * C90 + C210 * C104 + C211 * C91) *
                   C89247 * C89153 * C812 +
               ((C180 * C819 - C89236 * C923) * C100 +
                (C180 * C830 - C89236 * C931) * C89 + (C940 - C941) * C102 +
                (C942 - C943) * C90 + (C944 - C945) * C104 +
                (C946 - C947) * C91) *
                   C89247 * C89153 * C813 +
               ((C89236 * C926 - C180 * C820) * C100 +
                (C89236 * C934 - C180 * C832) * C89 + (C948 - C949) * C102 +
                (C950 - C951) * C90 + (C952 - C953) * C104 +
                (C954 - C955) * C91) *
                   C89247 * C89153 * C814) *
                  C815 +
              (((C195 - C194) * C100 + (C197 - C196) * C89 +
                (C199 - C198) * C102 + (C201 - C200) * C90 + C212 * C104 +
                C213 * C91) *
                   C89247 * C89153 * C812 +
               ((C941 - C940) * C100 + (C943 - C942) * C89 +
                (C945 - C944) * C102 + (C947 - C946) * C90 +
                (C89236 * C929 - C180 * C823) * C104 +
                (C89236 * C937 - C180 * C838) * C91) *
                   C89247 * C89153 * C813 +
               ((C949 - C948) * C100 + (C951 - C950) * C89 +
                (C953 - C952) * C102 + (C955 - C954) * C90 +
                (C180 * C824 - C89236 * C930) * C104 +
                (C180 * C840 - C89236 * C938) * C91) *
                   C89247 * C89153 * C814) *
                  C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C89236 * C181 - C180 * C106) * C100 +
            (C89236 * C187 - C180 * C113) * C89 + (C194 - C195) * C102 +
            (C196 - C197) * C90 + C210 * C104 + C211 * C91) *
               C89247 * C1719 +
           ((C180 * C1724 - C89236 * C1828) * C100 +
            (C180 * C1735 - C89236 * C1836) * C89 + (C1845 - C1846) * C102 +
            (C1847 - C1848) * C90 + (C1849 - C1850) * C104 +
            (C1851 - C1852) * C91) *
               C89247 * C1720 +
           ((C89236 * C1831 - C180 * C1725) * C100 +
            (C89236 * C1839 - C180 * C1737) * C89 + (C1853 - C1854) * C102 +
            (C1855 - C1856) * C90 + (C1857 - C1858) * C104 +
            (C1859 - C1860) * C91) *
               C89247 * C1721) *
              C89137 * C815 +
          (((C195 - C194) * C100 + (C197 - C196) * C89 + (C199 - C198) * C102 +
            (C201 - C200) * C90 + C212 * C104 + C213 * C91) *
               C89247 * C1719 +
           ((C1846 - C1845) * C100 + (C1848 - C1847) * C89 +
            (C1850 - C1849) * C102 + (C1852 - C1851) * C90 +
            (C89236 * C1834 - C180 * C1728) * C104 +
            (C89236 * C1842 - C180 * C1743) * C91) *
               C89247 * C1720 +
           ((C1854 - C1853) * C100 + (C1856 - C1855) * C89 +
            (C1858 - C1857) * C102 + (C1860 - C1859) * C90 +
            (C180 * C1729 - C89236 * C1835) * C104 +
            (C180 * C1745 - C89236 * C1843) * C91) *
               C89247 * C1721) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
            C13260 * C926 - C13315 * C820) *
               C13261 +
           (C13258 * C187 - C13313 * C113 + C13259 * C931 - C13314 * C830 +
            C13260 * C934 - C13315 * C832) *
               C89093) *
              C89247 * C89153 * C89137 * C96 +
          ((C13313 * C107 - C13258 * C182 + C13314 * C818 - C13259 * C924 +
            C13315 * C821 - C13260 * C927) *
               C13261 +
           (C13313 * C115 - C13258 * C188 + C13314 * C828 - C13259 * C932 +
            C13315 * C834 - C13260 * C935) *
               C89093) *
              C89247 * C89153 * C89137 * C97 +
          ((C13258 * C183 - C13313 * C108 + C13259 * C925 - C13314 * C817 +
            C13260 * C928 - C13315 * C822) *
               C13261 +
           (C13258 * C189 - C13313 * C117 + C13259 * C933 - C13314 * C826 +
            C13260 * C936 - C13315 * C836) *
               C89093) *
              C89247 * C89153 * C89137 * C98 +
          ((C13313 * C109 - C13258 * C184 + C13314 * C823 - C13259 * C929 +
            C13315 * C824 - C13260 * C930) *
               C13261 +
           (C13313 * C119 - C13258 * C190 + C13314 * C838 - C13259 * C937 +
            C13315 * C840 - C13260 * C938) *
               C89093) *
              C89247 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
             C13260 * C926 - C13315 * C820) *
                C13261 +
            (C13258 * C187 - C13313 * C113 + C13259 * C931 - C13314 * C830 +
             C13260 * C934 - C13315 * C832) *
                C89093) *
               C89247 * C89153 * C812 +
           ((C13313 * C819 - C13258 * C923 + C13314 * C820 - C13259 * C926 +
             C13315 * C5727 - C13260 * C5787) *
                C13261 +
            (C13313 * C830 - C13258 * C931 + C13314 * C832 - C13259 * C934 +
             C13315 * C5733 - C13260 * C5790) *
                C89093) *
               C89247 * C89153 * C813 +
           ((C13258 * C926 - C13313 * C820 + C13259 * C5787 - C13314 * C5727 +
             C13260 * C13873 - C13315 * C13743) *
                C13261 +
            (C13258 * C934 - C13313 * C832 + C13259 * C5790 - C13314 * C5733 +
             C13260 * C13875 - C13315 * C13746) *
                C89093) *
               C89247 * C89153 * C814) *
              C815 +
          (((C13313 * C107 - C13258 * C182 + C13314 * C818 - C13259 * C924 +
             C13315 * C821 - C13260 * C927) *
                C13261 +
            (C13313 * C115 - C13258 * C188 + C13314 * C828 - C13259 * C932 +
             C13315 * C834 - C13260 * C935) *
                C89093) *
               C89247 * C89153 * C812 +
           ((C13258 * C924 - C13313 * C818 + C13259 * C927 - C13314 * C821 +
             C13260 * C5788 - C13315 * C5726) *
                C13261 +
            (C13258 * C932 - C13313 * C828 + C13259 * C935 - C13314 * C834 +
             C13260 * C5791 - C13315 * C5731) *
                C89093) *
               C89247 * C89153 * C813 +
           ((C13313 * C821 - C13258 * C927 + C13314 * C5726 - C13259 * C5788 +
             C13315 * C13744 - C13260 * C13874) *
                C13261 +
            (C13313 * C834 - C13258 * C935 + C13314 * C5731 - C13259 * C5791 +
             C13315 * C13748 - C13260 * C13876) *
                C89093) *
               C89247 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
             C13260 * C926 - C13315 * C820) *
                C13261 +
            (C13258 * C187 - C13313 * C113 + C13259 * C931 - C13314 * C830 +
             C13260 * C934 - C13315 * C832) *
                C89093) *
               C89247 * C1719 +
           ((C13313 * C1724 - C13258 * C1828 + C13314 * C4097 - C13259 * C4211 +
             C13315 * C8516 - C13260 * C8600) *
                C13261 +
            (C13313 * C1735 - C13258 * C1836 + C13314 * C4102 - C13259 * C4215 +
             C13315 * C8522 - C13260 * C8603) *
                C89093) *
               C89247 * C1720 +
           ((C13258 * C1831 - C13313 * C1725 + C13259 * C6333 - C13314 * C6249 +
             C13260 * C14683 - C13315 * C14601) *
                C13261 +
            (C13258 * C1839 - C13313 * C1737 + C13259 * C6336 - C13314 * C6255 +
             C13260 * C14685 - C13315 * C14604) *
                C89093) *
               C89247 * C1721) *
              C89137 * C815 +
          (((C13313 * C107 - C13258 * C182 + C13314 * C818 - C13259 * C924 +
             C13315 * C821 - C13260 * C927) *
                C13261 +
            (C13313 * C115 - C13258 * C188 + C13314 * C828 - C13259 * C932 +
             C13315 * C834 - C13260 * C935) *
                C89093) *
               C89247 * C1719 +
           ((C13258 * C1829 - C13313 * C1723 + C13259 * C4212 - C13314 * C4098 +
             C13260 * C8601 - C13315 * C8515) *
                C13261 +
            (C13258 * C1837 - C13313 * C1733 + C13259 * C4216 - C13314 * C4104 +
             C13260 * C8604 - C13315 * C8520) *
                C89093) *
               C89247 * C1720 +
           ((C13313 * C1726 - C13258 * C1832 + C13314 * C6248 - C13259 * C6334 +
             C13315 * C14602 - C13260 * C14684) *
                C13261 +
            (C13313 * C1739 - C13258 * C1840 + C13314 * C6253 - C13259 * C6337 +
             C13315 * C14606 - C13260 * C14686) *
                C89093) *
               C89247 * C1721) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C89236 * C181 - C180 * C106) * C13261 +
            (C89236 * C187 - C180 * C113) * C89093) *
               C25848 +
           ((C89236 * C1828 - C180 * C1724) * C13261 +
            (C89236 * C1836 - C180 * C1735) * C89093) *
               C25849 +
           ((C89236 * C1831 - C180 * C1725) * C13261 +
            (C89236 * C1839 - C180 * C1737) * C89093) *
               C25850) *
              C89153 * C89137 * C96 +
          (((C195 - C194) * C13261 + (C197 - C196) * C89093) * C25848 +
           ((C1845 - C1846) * C13261 + (C1847 - C1848) * C89093) * C25849 +
           ((C1854 - C1853) * C13261 + (C1856 - C1855) * C89093) * C25850) *
              C89153 * C89137 * C97 +
          ((C210 * C13261 + C211 * C89093) * C25848 +
           ((C1850 - C1849) * C13261 + (C1852 - C1851) * C89093) * C25849 +
           ((C1857 - C1858) * C13261 + (C1859 - C1860) * C89093) * C25850) *
              C89153 * C89137 * C98 +
          ((C212 * C13261 + C213 * C89093) * C25848 +
           ((C3436 - C3435) * C13261 + (C3438 - C3437) * C89093) * C25849 +
           ((C180 * C1729 - C89236 * C1835) * C13261 +
            (C180 * C1745 - C89236 * C1843) * C89093) *
               C25850) *
              C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C13261 +
             (C89236 * C187 - C180 * C113) * C89093) *
                C25848 +
            ((C89236 * C1828 - C180 * C1724) * C13261 +
             (C89236 * C1836 - C180 * C1735) * C89093) *
                C25849 +
            ((C89236 * C1831 - C180 * C1725) * C13261 +
             (C89236 * C1839 - C180 * C1737) * C89093) *
                C25850) *
               C89153 * C812 +
           (((C180 * C819 - C89236 * C923) * C13261 +
             (C180 * C830 - C89236 * C931) * C89093) *
                C25848 +
            ((C180 * C4097 - C89236 * C4211) * C13261 +
             (C180 * C4102 - C89236 * C4215) * C89093) *
                C25849 +
            ((C180 * C6249 - C89236 * C6333) * C13261 +
             (C180 * C6255 - C89236 * C6336) * C89093) *
                C25850) *
               C89153 * C813 +
           (((C89236 * C926 - C180 * C820) * C13261 +
             (C89236 * C934 - C180 * C832) * C89093) *
                C25848 +
            ((C89236 * C8600 - C180 * C8516) * C13261 +
             (C89236 * C8603 - C180 * C8522) * C89093) *
                C25849 +
            ((C89236 * C14683 - C180 * C14601) * C13261 +
             (C89236 * C14685 - C180 * C14604) * C89093) *
                C25850) *
               C89153 * C814) *
              C815 +
          ((((C195 - C194) * C13261 + (C197 - C196) * C89093) * C25848 +
            ((C1845 - C1846) * C13261 + (C1847 - C1848) * C89093) * C25849 +
            ((C1854 - C1853) * C13261 + (C1856 - C1855) * C89093) * C25850) *
               C89153 * C812 +
           (((C941 - C940) * C13261 + (C943 - C942) * C89093) * C25848 +
            ((C4220 - C4221) * C13261 + (C4222 - C4223) * C89093) * C25849 +
            ((C89236 * C6334 - C180 * C6248) * C13261 +
             (C89236 * C6337 - C180 * C6253) * C89093) *
                C25850) *
               C89153 * C813 +
           (((C949 - C948) * C13261 + (C951 - C950) * C89093) * C25848 +
            ((C180 * C8515 - C89236 * C8601) * C13261 +
             (C180 * C8520 - C89236 * C8604) * C89093) *
                C25849 +
            ((C180 * C14602 - C89236 * C14684) * C13261 +
             (C180 * C14606 - C89236 * C14686) * C89093) *
                C25850) *
               C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C13261 +
             (C89236 * C187 - C180 * C113) * C89093) *
                C25848 +
            ((C27126 - C27127) * C13261 + (C27128 - C27129) * C89093) * C25849 +
            C27151 * C25850) *
               C1719 +
           (((C27127 - C27126) * C13261 + (C27129 - C27128) * C89093) * C25848 +
            ((C27131 - C27130) * C13261 + (C27133 - C27132) * C89093) * C25849 +
            ((C27134 - C27135) * C13261 + (C27136 - C27137) * C89093) *
                C25850) *
               C1720 +
           (C27151 * C25848 +
            ((C27135 - C27134) * C13261 + (C27137 - C27136) * C89093) * C25849 +
            ((C89236 * C27121 - C180 * C26997) * C13261 +
             (C89236 * C27123 - C180 * C27000) * C89093) *
                C25850) *
               C1721) *
              C89137 * C815 +
          ((((C195 - C194) * C13261 + (C197 - C196) * C89093) * C25848 +
            ((C1845 - C1846) * C13261 + (C1847 - C1848) * C89093) * C25849 +
            C27150 * C25850) *
               C1719 +
           (((C1846 - C1845) * C13261 + (C1848 - C1847) * C89093) * C25848 +
            ((C1853 - C1854) * C13261 + (C1855 - C1856) * C89093) * C25849 +
            ((C27140 - C27141) * C13261 + (C27142 - C27143) * C89093) *
                C25850) *
               C1720 +
           (C27150 * C25848 +
            ((C27141 - C27140) * C13261 + (C27143 - C27142) * C89093) * C25849 +
            ((C180 * C26998 - C89236 * C27122) * C13261 +
             (C180 * C27002 - C89236 * C27124) * C89093) *
                C25850) *
               C1721) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q));
    d2eexz[32] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C89247 * C264 - C263 * C106) * C100 +
               (C89247 * C270 - C263 * C113) * C89 + (C277 - C278) * C102 +
               (C279 - C280) * C90 + C293 * C104 + C294 * C91) *
                  C89236 * C89153 * C89137 * C96 +
              ((C278 - C277) * C100 + (C280 - C279) * C89 +
               (C282 - C281) * C102 + (C284 - C283) * C90 + C295 * C104 +
               C296 * C91) *
                  C89236 * C89153 * C89137 * C97 +
              (C293 * C100 + C294 * C89 + (C286 - C285) * C102 +
               (C288 - C287) * C90 + (C289 - C290) * C104 +
               (C291 - C292) * C91) *
                  C89236 * C89153 * C89137 * C98 +
              (C295 * C100 + C296 * C89 + (C290 - C289) * C102 +
               (C292 - C291) * C90 + (C263 * C111 - C89247 * C269) * C104 +
               (C263 * C123 - C89247 * C275) * C91) *
                  C89236 * C89153 * C89137 * C99) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C89247 * C264 - C263 * C106) * C100 +
                (C89247 * C270 - C263 * C113) * C89 + (C277 - C278) * C102 +
                (C279 - C280) * C90 + C293 * C104 + C294 * C91) *
                   C89236 * C89153 * C812 +
               ((C263 * C819 - C89247 * C1029) * C100 +
                (C263 * C830 - C89247 * C1037) * C89 + (C1046 - C1047) * C102 +
                (C1048 - C1049) * C90 + (C1050 - C1051) * C104 +
                (C1052 - C1053) * C91) *
                   C89236 * C89153 * C813 +
               ((C89247 * C1032 - C263 * C820) * C100 +
                (C89247 * C1040 - C263 * C832) * C89 + (C1054 - C1055) * C102 +
                (C1056 - C1057) * C90 + (C1058 - C1059) * C104 +
                (C1060 - C1061) * C91) *
                   C89236 * C89153 * C814) *
                  C815 +
              (((C278 - C277) * C100 + (C280 - C279) * C89 +
                (C282 - C281) * C102 + (C284 - C283) * C90 + C295 * C104 +
                C296 * C91) *
                   C89236 * C89153 * C812 +
               ((C1047 - C1046) * C100 + (C1049 - C1048) * C89 +
                (C1051 - C1050) * C102 + (C1053 - C1052) * C90 +
                (C89247 * C1035 - C263 * C823) * C104 +
                (C89247 * C1043 - C263 * C838) * C91) *
                   C89236 * C89153 * C813 +
               ((C1055 - C1054) * C100 + (C1057 - C1056) * C89 +
                (C1059 - C1058) * C102 + (C1061 - C1060) * C90 +
                (C263 * C824 - C89247 * C1036) * C104 +
                (C263 * C840 - C89247 * C1044) * C91) *
                   C89236 * C89153 * C814) *
                  C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C100 +
            (C89247 * C270 - C263 * C113) * C89 + (C277 - C278) * C102 +
            (C279 - C280) * C90 + C293 * C104 + C294 * C91) *
               C89236 * C1719 +
           ((C263 * C1724 - C89247 * C1934) * C100 +
            (C263 * C1735 - C89247 * C1942) * C89 + (C1951 - C1952) * C102 +
            (C1953 - C1954) * C90 + (C1955 - C1956) * C104 +
            (C1957 - C1958) * C91) *
               C89236 * C1720 +
           ((C89247 * C1937 - C263 * C1725) * C100 +
            (C89247 * C1945 - C263 * C1737) * C89 + (C1959 - C1960) * C102 +
            (C1961 - C1962) * C90 + (C1963 - C1964) * C104 +
            (C1965 - C1966) * C91) *
               C89236 * C1721) *
              C89137 * C815 +
          (((C278 - C277) * C100 + (C280 - C279) * C89 + (C282 - C281) * C102 +
            (C284 - C283) * C90 + C295 * C104 + C296 * C91) *
               C89236 * C1719 +
           ((C1952 - C1951) * C100 + (C1954 - C1953) * C89 +
            (C1956 - C1955) * C102 + (C1958 - C1957) * C90 +
            (C89247 * C1940 - C263 * C1728) * C104 +
            (C89247 * C1948 - C263 * C1743) * C91) *
               C89236 * C1720 +
           ((C1960 - C1959) * C100 + (C1962 - C1961) * C89 +
            (C1964 - C1963) * C102 + (C1966 - C1965) * C90 +
            (C263 * C1729 - C89247 * C1941) * C104 +
            (C263 * C1745 - C89247 * C1949) * C91) *
               C89236 * C1721) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C13261 +
            (C89247 * C270 - C263 * C113) * C89093) *
               C13258 +
           ((C89247 * C1029 - C263 * C819) * C13261 +
            (C89247 * C1037 - C263 * C830) * C89093) *
               C13259 +
           ((C89247 * C1032 - C263 * C820) * C13261 +
            (C89247 * C1040 - C263 * C832) * C89093) *
               C13260) *
              C89153 * C89137 * C96 +
          (((C278 - C277) * C13261 + (C280 - C279) * C89093) * C13258 +
           ((C1046 - C1047) * C13261 + (C1048 - C1049) * C89093) * C13259 +
           ((C1055 - C1054) * C13261 + (C1057 - C1056) * C89093) * C13260) *
              C89153 * C89137 * C97 +
          ((C293 * C13261 + C294 * C89093) * C13258 +
           ((C1051 - C1050) * C13261 + (C1053 - C1052) * C89093) * C13259 +
           ((C1058 - C1059) * C13261 + (C1060 - C1061) * C89093) * C13260) *
              C89153 * C89137 * C98 +
          ((C295 * C13261 + C296 * C89093) * C13258 +
           ((C2795 - C2794) * C13261 + (C2797 - C2796) * C89093) * C13259 +
           ((C263 * C824 - C89247 * C1036) * C13261 +
            (C263 * C840 - C89247 * C1044) * C89093) *
               C13260) *
              C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C13261 +
             (C89247 * C270 - C263 * C113) * C89093) *
                C13258 +
            ((C13956 - C13957) * C13261 + (C13958 - C13959) * C89093) * C13259 +
            C13981 * C13260) *
               C89153 * C812 +
           (((C13957 - C13956) * C13261 + (C13959 - C13958) * C89093) * C13258 +
            ((C13961 - C13960) * C13261 + (C13963 - C13962) * C89093) * C13259 +
            ((C13964 - C13965) * C13261 + (C13966 - C13967) * C89093) *
                C13260) *
               C89153 * C813 +
           (C13981 * C13258 +
            ((C13965 - C13964) * C13261 + (C13967 - C13966) * C89093) * C13259 +
            ((C89247 * C13951 - C263 * C13743) * C13261 +
             (C89247 * C13953 - C263 * C13746) * C89093) *
                C13260) *
               C89153 * C814) *
              C815 +
          ((((C278 - C277) * C13261 + (C280 - C279) * C89093) * C13258 +
            ((C1046 - C1047) * C13261 + (C1048 - C1049) * C89093) * C13259 +
            C13980 * C13260) *
               C89153 * C812 +
           (((C1047 - C1046) * C13261 + (C1049 - C1048) * C89093) * C13258 +
            ((C1054 - C1055) * C13261 + (C1056 - C1057) * C89093) * C13259 +
            ((C13970 - C13971) * C13261 + (C13972 - C13973) * C89093) *
                C13260) *
               C89153 * C813 +
           (C13980 * C13258 +
            ((C13971 - C13970) * C13261 + (C13973 - C13972) * C89093) * C13259 +
            ((C263 * C13744 - C89247 * C13952) * C13261 +
             (C263 * C13748 - C89247 * C13954) * C89093) *
                C13260) *
               C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C13261 +
             (C89247 * C270 - C263 * C113) * C89093) *
                C13258 +
            ((C13956 - C13957) * C13261 + (C13958 - C13959) * C89093) * C13259 +
            C13981 * C13260) *
               C1719 +
           (((C263 * C1724 - C89247 * C1934) * C13261 +
             (C263 * C1735 - C89247 * C1942) * C89093) *
                C13258 +
            ((C263 * C4097 - C89247 * C4325) * C13261 +
             (C263 * C4102 - C89247 * C4329) * C89093) *
                C13259 +
            ((C263 * C8516 - C89247 * C8680) * C13261 +
             (C263 * C8522 - C89247 * C8683) * C89093) *
                C13260) *
               C1720 +
           (((C89247 * C1937 - C263 * C1725) * C13261 +
             (C89247 * C1945 - C263 * C1737) * C89093) *
                C13258 +
            ((C89247 * C6413 - C263 * C6249) * C13261 +
             (C89247 * C6416 - C263 * C6255) * C89093) *
                C13259 +
            ((C89247 * C14761 - C263 * C14601) * C13261 +
             (C89247 * C14763 - C263 * C14604) * C89093) *
                C13260) *
               C1721) *
              C89137 * C815 +
          ((((C278 - C277) * C13261 + (C280 - C279) * C89093) * C13258 +
            ((C1046 - C1047) * C13261 + (C1048 - C1049) * C89093) * C13259 +
            C13980 * C13260) *
               C1719 +
           (((C1952 - C1951) * C13261 + (C1954 - C1953) * C89093) * C13258 +
            ((C4334 - C4335) * C13261 + (C4336 - C4337) * C89093) * C13259 +
            ((C89247 * C8681 - C263 * C8515) * C13261 +
             (C89247 * C8684 - C263 * C8520) * C89093) *
                C13260) *
               C1720 +
           (((C1960 - C1959) * C13261 + (C1962 - C1961) * C89093) * C13258 +
            ((C263 * C6248 - C89247 * C6414) * C13261 +
             (C263 * C6253 - C89247 * C6417) * C89093) *
                C13259 +
            ((C263 * C14602 - C89247 * C14762) * C13261 +
             (C263 * C14606 - C89247 * C14764) * C89093) *
                C13260) *
               C1721) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C25848 * C264 - C25951 * C106 + C25849 * C1934 - C25952 * C1724 +
            C25850 * C1937 - C25953 * C1725) *
               C13261 +
           (C25848 * C270 - C25951 * C113 + C25849 * C1942 - C25952 * C1735 +
            C25850 * C1945 - C25953 * C1737) *
               C89093) *
              C89236 * C89153 * C89137 * C96 +
          ((C25951 * C107 - C25848 * C265 + C25952 * C1723 - C25849 * C1935 +
            C25953 * C1726 - C25850 * C1938) *
               C13261 +
           (C25951 * C115 - C25848 * C271 + C25952 * C1733 - C25849 * C1943 +
            C25953 * C1739 - C25850 * C1946) *
               C89093) *
              C89236 * C89153 * C89137 * C97 +
          ((C25848 * C266 - C25951 * C108 + C25849 * C1936 - C25952 * C1722 +
            C25850 * C1939 - C25953 * C1727) *
               C13261 +
           (C25848 * C272 - C25951 * C117 + C25849 * C1944 - C25952 * C1731 +
            C25850 * C1947 - C25953 * C1741) *
               C89093) *
              C89236 * C89153 * C89137 * C98 +
          ((C25951 * C109 - C25848 * C267 + C25952 * C1728 - C25849 * C1940 +
            C25953 * C1729 - C25850 * C1941) *
               C13261 +
           (C25951 * C119 - C25848 * C273 + C25952 * C1743 - C25849 * C1948 +
            C25953 * C1745 - C25850 * C1949) *
               C89093) *
              C89236 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C25848 * C264 - C25951 * C106 + C25849 * C1934 - C25952 * C1724 +
             C25850 * C1937 - C25953 * C1725) *
                C13261 +
            (C25848 * C270 - C25951 * C113 + C25849 * C1942 - C25952 * C1735 +
             C25850 * C1945 - C25953 * C1737) *
                C89093) *
               C89236 * C89153 * C812 +
           ((C25951 * C819 - C25848 * C1029 + C25952 * C4097 - C25849 * C4325 +
             C25953 * C6249 - C25850 * C6413) *
                C13261 +
            (C25951 * C830 - C25848 * C1037 + C25952 * C4102 - C25849 * C4329 +
             C25953 * C6255 - C25850 * C6416) *
                C89093) *
               C89236 * C89153 * C813 +
           ((C25848 * C1032 - C25951 * C820 + C25849 * C8680 - C25952 * C8516 +
             C25850 * C14761 - C25953 * C14601) *
                C13261 +
            (C25848 * C1040 - C25951 * C832 + C25849 * C8683 - C25952 * C8522 +
             C25850 * C14763 - C25953 * C14604) *
                C89093) *
               C89236 * C89153 * C814) *
              C815 +
          (((C25951 * C107 - C25848 * C265 + C25952 * C1723 - C25849 * C1935 +
             C25953 * C1726 - C25850 * C1938) *
                C13261 +
            (C25951 * C115 - C25848 * C271 + C25952 * C1733 - C25849 * C1943 +
             C25953 * C1739 - C25850 * C1946) *
                C89093) *
               C89236 * C89153 * C812 +
           ((C25848 * C1030 - C25951 * C818 + C25849 * C4326 - C25952 * C4098 +
             C25850 * C6414 - C25953 * C6248) *
                C13261 +
            (C25848 * C1038 - C25951 * C828 + C25849 * C4330 - C25952 * C4104 +
             C25850 * C6417 - C25953 * C6253) *
                C89093) *
               C89236 * C89153 * C813 +
           ((C25951 * C821 - C25848 * C1033 + C25952 * C8515 - C25849 * C8681 +
             C25953 * C14602 - C25850 * C14762) *
                C13261 +
            (C25951 * C834 - C25848 * C1041 + C25952 * C8520 - C25849 * C8684 +
             C25953 * C14606 - C25850 * C14764) *
                C89093) *
               C89236 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C25848 * C264 - C25951 * C106 + C25849 * C1934 - C25952 * C1724 +
             C25850 * C1937 - C25953 * C1725) *
                C13261 +
            (C25848 * C270 - C25951 * C113 + C25849 * C1942 - C25952 * C1735 +
             C25850 * C1945 - C25953 * C1737) *
                C89093) *
               C89236 * C1719 +
           ((C25951 * C1724 - C25848 * C1934 + C25952 * C1725 - C25849 * C1937 +
             C25953 * C10544 - C25850 * C10660) *
                C13261 +
            (C25951 * C1735 - C25848 * C1942 + C25952 * C1737 - C25849 * C1945 +
             C25953 * C10550 - C25850 * C10663) *
                C89093) *
               C89236 * C1720 +
           ((C25848 * C1937 - C25951 * C1725 + C25849 * C10660 -
             C25952 * C10544 + C25850 * C27225 - C25953 * C26997) *
                C13261 +
            (C25848 * C1945 - C25951 * C1737 + C25849 * C10663 -
             C25952 * C10550 + C25850 * C27227 - C25953 * C27000) *
                C89093) *
               C89236 * C1721) *
              C89137 * C815 +
          (((C25951 * C107 - C25848 * C265 + C25952 * C1723 - C25849 * C1935 +
             C25953 * C1726 - C25850 * C1938) *
                C13261 +
            (C25951 * C115 - C25848 * C271 + C25952 * C1733 - C25849 * C1943 +
             C25953 * C1739 - C25850 * C1946) *
                C89093) *
               C89236 * C1719 +
           ((C25848 * C1935 - C25951 * C1723 + C25849 * C1938 - C25952 * C1726 +
             C25850 * C10661 - C25953 * C10543) *
                C13261 +
            (C25848 * C1943 - C25951 * C1733 + C25849 * C1946 - C25952 * C1739 +
             C25850 * C10664 - C25953 * C10548) *
                C89093) *
               C89236 * C1720 +
           ((C25951 * C1726 - C25848 * C1938 + C25952 * C10543 -
             C25849 * C10661 + C25953 * C26998 - C25850 * C27226) *
                C13261 +
            (C25951 * C1739 - C25848 * C1946 + C25952 * C10548 -
             C25849 * C10664 + C25953 * C27002 - C25850 * C27228) *
                C89093) *
               C89236 * C1721) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[32] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 +
                C91 * C116 - C104 * C108) *
                   C180 +
               (C89 * C352 - C100 * C346 + C90 * C353 - C102 * C347 +
                C91 * C354 - C104 * C348) *
                   C89236) *
                  C89247 * C89153 * C89137 * C96 +
              ((C100 * C107 - C89 * C114 + C102 * C108 - C90 * C116 +
                C104 * C109 - C91 * C118) *
                   C180 +
               (C100 * C347 - C89 * C353 + C102 * C348 - C90 * C354 +
                C104 * C349 - C91 * C355) *
                   C89236) *
                  C89247 * C89153 * C89137 * C97 +
              ((C89 * C116 - C100 * C108 + C90 * C118 - C102 * C109 +
                C91 * C120 - C104 * C110) *
                   C180 +
               (C89 * C354 - C100 * C348 + C90 * C355 - C102 * C349 +
                C91 * C356 - C104 * C350) *
                   C89236) *
                  C89247 * C89153 * C89137 * C98 +
              ((C100 * C109 - C89 * C118 + C102 * C110 - C90 * C120 +
                C104 * C111 - C91 * C122) *
                   C180 +
               (C100 * C349 - C89 * C355 + C102 * C350 - C90 * C356 +
                C104 * C351 - C91 * C357) *
                   C89236) *
                  C89247 * C89153 * C89137 * C99) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 +
                 C91 * C116 - C104 * C108) *
                    C180 +
                (C89 * C352 - C100 * C346 + C90 * C353 - C102 * C347 +
                 C91 * C354 - C104 * C348) *
                    C89236) *
                   C89247 * C89153 * C812 +
               ((C100 * C819 - C89 * C829 + C102 * C818 - C90 * C827 +
                 C104 * C817 - C91 * C825) *
                    C180 +
                (C100 * C1135 - C89 * C1143 + C102 * C1136 - C90 * C1144 +
                 C104 * C1137 - C91 * C1145) *
                    C89236) *
                   C89247 * C89153 * C813 +
               ((C89 * C831 - C100 * C820 + C90 * C833 - C102 * C821 +
                 C91 * C835 - C104 * C822) *
                    C180 +
                (C89 * C1146 - C100 * C1138 + C90 * C1147 - C102 * C1139 +
                 C91 * C1148 - C104 * C1140) *
                    C89236) *
                   C89247 * C89153 * C814) *
                  C815 +
              (((C100 * C107 - C89 * C114 + C102 * C108 - C90 * C116 +
                 C104 * C109 - C91 * C118) *
                    C180 +
                (C100 * C347 - C89 * C353 + C102 * C348 - C90 * C354 +
                 C104 * C349 - C91 * C355) *
                    C89236) *
                   C89247 * C89153 * C812 +
               ((C89 * C827 - C100 * C818 + C90 * C825 - C102 * C817 +
                 C91 * C837 - C104 * C823) *
                    C180 +
                (C89 * C1144 - C100 * C1136 + C90 * C1145 - C102 * C1137 +
                 C91 * C1149 - C104 * C1141) *
                    C89236) *
                   C89247 * C89153 * C813 +
               ((C100 * C821 - C89 * C833 + C102 * C822 - C90 * C835 +
                 C104 * C824 - C91 * C839) *
                    C180 +
                (C100 * C1139 - C89 * C1147 + C102 * C1140 - C90 * C1148 +
                 C104 * C1142 - C91 * C1150) *
                    C89236) *
                   C89247 * C89153 * C814) *
                  C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C89 * C112 - C100 * C106 + C90 * C114 -
                                 C102 * C107 + C91 * C116 - C104 * C108) *
                                    C180 +
                                (C89 * C352 - C100 * C346 + C90 * C353 -
                                 C102 * C347 + C91 * C354 - C104 * C348) *
                                    C89236) *
                                   C89247 * C1719 +
                               ((C100 * C1724 - C89 * C1734 + C102 * C1723 -
                                 C90 * C1732 + C104 * C1722 - C91 * C1730) *
                                    C180 +
                                (C100 * C2040 - C89 * C2048 + C102 * C2041 -
                                 C90 * C2049 + C104 * C2042 - C91 * C2050) *
                                    C89236) *
                                   C89247 * C1720 +
                               ((C89 * C1736 - C100 * C1725 + C90 * C1738 -
                                 C102 * C1726 + C91 * C1740 - C104 * C1727) *
                                    C180 +
                                (C89 * C2051 - C100 * C2043 + C90 * C2052 -
                                 C102 * C2044 + C91 * C2053 - C104 * C2045) *
                                    C89236) *
                                   C89247 * C1721) *
                                  C89137 * C815 +
                              (((C100 * C107 - C89 * C114 + C102 * C108 -
                                 C90 * C116 + C104 * C109 - C91 * C118) *
                                    C180 +
                                (C100 * C347 - C89 * C353 + C102 * C348 -
                                 C90 * C354 + C104 * C349 - C91 * C355) *
                                    C89236) *
                                   C89247 * C1719 +
                               ((C89 * C1732 - C100 * C1723 + C90 * C1730 -
                                 C102 * C1722 + C91 * C1742 - C104 * C1728) *
                                    C180 +
                                (C89 * C2049 - C100 * C2041 + C90 * C2050 -
                                 C102 * C2042 + C91 * C2054 - C104 * C2046) *
                                    C89236) *
                                   C89247 * C1720 +
                               ((C100 * C1726 - C89 * C1738 + C102 * C1727 -
                                 C90 * C1740 + C104 * C1729 - C91 * C1744) *
                                    C180 +
                                (C100 * C2044 - C89 * C2052 + C102 * C2045 -
                                 C90 * C2053 + C104 * C2047 - C91 * C2055) *
                                    C89236) *
                                   C89247 * C1721) *
                                  C89137 * C89124)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C89093 * C112 - C13261 * C106) * C13313 +
           (C89093 * C352 - C13261 * C346) * C13258 +
           (C89093 * C829 - C13261 * C819) * C13314 +
           (C89093 * C1143 - C13261 * C1135) * C13259 +
           (C89093 * C831 - C13261 * C820) * C13315 +
           (C89093 * C1146 - C13261 * C1138) * C13260) *
              C89247 * C89153 * C89137 * C96 +
          ((C13261 * C107 - C89093 * C114) * C13313 +
           (C13261 * C347 - C89093 * C353) * C13258 +
           (C13261 * C818 - C89093 * C827) * C13314 +
           (C13261 * C1136 - C89093 * C1144) * C13259 +
           (C13261 * C821 - C89093 * C833) * C13315 +
           (C13261 * C1139 - C89093 * C1147) * C13260) *
              C89247 * C89153 * C89137 * C97 +
          ((C89093 * C116 - C13261 * C108) * C13313 +
           (C89093 * C354 - C13261 * C348) * C13258 +
           (C89093 * C825 - C13261 * C817) * C13314 +
           (C89093 * C1145 - C13261 * C1137) * C13259 +
           (C89093 * C835 - C13261 * C822) * C13315 +
           (C89093 * C1148 - C13261 * C1140) * C13260) *
              C89247 * C89153 * C89137 * C98 +
          ((C13261 * C109 - C89093 * C118) * C13313 +
           (C13261 * C349 - C89093 * C355) * C13258 +
           (C13261 * C823 - C89093 * C837) * C13314 +
           (C13261 * C1141 - C89093 * C1149) * C13259 +
           (C13261 * C824 - C89093 * C839) * C13315 +
           (C13261 * C1142 - C89093 * C1150) * C13260) *
              C89247 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C89093 * C112 - C13261 * C106) * C13313 +
            (C89093 * C352 - C13261 * C346) * C13258 +
            (C14060 - C14061) * C13314 + (C14062 - C14063) * C13259 +
            C14084 * C13315 + C14085 * C13260) *
               C89247 * C89153 * C812 +
           ((C14061 - C14060) * C13313 + (C14063 - C14062) * C13258 +
            (C14065 - C14064) * C13314 + (C14067 - C14066) * C13259 +
            (C14068 - C14069) * C13315 + (C14070 - C14071) * C13260) *
               C89247 * C89153 * C813 +
           (C14084 * C13313 + C14085 * C13258 + (C14069 - C14068) * C13314 +
            (C14071 - C14070) * C13259 +
            (C89093 * C13745 - C13261 * C13743) * C13315 +
            (C89093 * C14057 - C13261 * C14055) * C13260) *
               C89247 * C89153 * C814) *
              C815 +
          (((C13261 * C107 - C89093 * C114) * C13313 +
            (C13261 * C347 - C89093 * C353) * C13258 +
            (C14072 - C14073) * C13314 + (C14074 - C14075) * C13259 +
            C14086 * C13315 + C14087 * C13260) *
               C89247 * C89153 * C812 +
           ((C14073 - C14072) * C13313 + (C14075 - C14074) * C13258 +
            (C14077 - C14076) * C13314 + (C14079 - C14078) * C13259 +
            (C14080 - C14081) * C13315 + (C14082 - C14083) * C13260) *
               C89247 * C89153 * C813 +
           (C14086 * C13313 + C14087 * C13258 + (C14081 - C14080) * C13314 +
            (C14083 - C14082) * C13259 +
            (C13261 * C13744 - C89093 * C13747) * C13315 +
            (C13261 * C14056 - C89093 * C14058) * C13260) *
               C89247 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C89093 * C112 - C13261 * C106) * C13313 +
            (C89093 * C352 - C13261 * C346) * C13258 +
            (C14060 - C14061) * C13314 + (C14062 - C14063) * C13259 +
            C14084 * C13315 + C14085 * C13260) *
               C89247 * C1719 +
           ((C13261 * C1724 - C89093 * C1734) * C13313 +
            (C13261 * C2040 - C89093 * C2048) * C13258 +
            (C13261 * C4097 - C89093 * C4101) * C13314 +
            (C13261 * C4439 - C89093 * C4443) * C13259 +
            (C13261 * C8516 - C89093 * C8521) * C13315 +
            (C13261 * C8760 - C89093 * C8763) * C13260) *
               C89247 * C1720 +
           ((C89093 * C1736 - C13261 * C1725) * C13313 +
            (C89093 * C2051 - C13261 * C2043) * C13258 +
            (C89093 * C6254 - C13261 * C6249) * C13314 +
            (C89093 * C6496 - C13261 * C6493) * C13259 +
            (C89093 * C14603 - C13261 * C14601) * C13315 +
            (C89093 * C14841 - C13261 * C14839) * C13260) *
               C89247 * C1721) *
              C89137 * C815 +
          (((C13261 * C107 - C89093 * C114) * C13313 +
            (C13261 * C347 - C89093 * C353) * C13258 +
            (C14072 - C14073) * C13314 + (C14074 - C14075) * C13259 +
            C14086 * C13315 + C14087 * C13260) *
               C89247 * C1719 +
           ((C89093 * C1732 - C13261 * C1723) * C13313 +
            (C89093 * C2049 - C13261 * C2041) * C13258 +
            (C89093 * C4103 - C13261 * C4098) * C13314 +
            (C89093 * C4444 - C13261 * C4440) * C13259 +
            (C89093 * C8519 - C13261 * C8515) * C13315 +
            (C89093 * C8764 - C13261 * C8761) * C13260) *
               C89247 * C1720 +
           ((C13261 * C1726 - C89093 * C1738) * C13313 +
            (C13261 * C2044 - C89093 * C2052) * C13258 +
            (C13261 * C6248 - C89093 * C6252) * C13314 +
            (C13261 * C6494 - C89093 * C6497) * C13259 +
            (C13261 * C14602 - C89093 * C14605) * C13315 +
            (C13261 * C14840 - C89093 * C14842) * C13260) *
               C89247 * C1721) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C89093 * C112 - C13261 * C106) * C180 +
                                (C89093 * C352 - C13261 * C346) * C89236) *
                                   C25848 +
                               ((C89093 * C1734 - C13261 * C1724) * C180 +
                                (C89093 * C2048 - C13261 * C2040) * C89236) *
                                   C25849 +
                               ((C89093 * C1736 - C13261 * C1725) * C180 +
                                (C89093 * C2051 - C13261 * C2043) * C89236) *
                                   C25850) *
                                  C89153 * C89137 * C96 +
                              (((C13261 * C107 - C89093 * C114) * C180 +
                                (C13261 * C347 - C89093 * C353) * C89236) *
                                   C25848 +
                               ((C13261 * C1723 - C89093 * C1732) * C180 +
                                (C13261 * C2041 - C89093 * C2049) * C89236) *
                                   C25849 +
                               ((C13261 * C1726 - C89093 * C1738) * C180 +
                                (C13261 * C2044 - C89093 * C2052) * C89236) *
                                   C25850) *
                                  C89153 * C89137 * C97 +
                              (((C89093 * C116 - C13261 * C108) * C180 +
                                (C89093 * C354 - C13261 * C348) * C89236) *
                                   C25848 +
                               ((C89093 * C1730 - C13261 * C1722) * C180 +
                                (C89093 * C2050 - C13261 * C2042) * C89236) *
                                   C25849 +
                               ((C89093 * C1740 - C13261 * C1727) * C180 +
                                (C89093 * C2053 - C13261 * C2045) * C89236) *
                                   C25850) *
                                  C89153 * C89137 * C98 +
                              (((C13261 * C109 - C89093 * C118) * C180 +
                                (C13261 * C349 - C89093 * C355) * C89236) *
                                   C25848 +
                               ((C13261 * C1728 - C89093 * C1742) * C180 +
                                (C13261 * C2046 - C89093 * C2054) * C89236) *
                                   C25849 +
                               ((C13261 * C1729 - C89093 * C1744) * C180 +
                                (C13261 * C2047 - C89093 * C2055) * C89236) *
                                   C25850) *
                                  C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C180 +
             (C89093 * C352 - C13261 * C346) * C89236) *
                C25848 +
            ((C89093 * C1734 - C13261 * C1724) * C180 +
             (C89093 * C2048 - C13261 * C2040) * C89236) *
                C25849 +
            ((C89093 * C1736 - C13261 * C1725) * C180 +
             (C89093 * C2051 - C13261 * C2043) * C89236) *
                C25850) *
               C89153 * C812 +
           (((C14061 - C14060) * C180 + (C14063 - C14062) * C89236) * C25848 +
            ((C17042 - C17043) * C180 + (C17044 - C17045) * C89236) * C25849 +
            ((C19097 - C19096) * C180 + (C19099 - C19098) * C89236) * C25850) *
               C89153 * C813 +
           ((C14084 * C180 + C14085 * C89236) * C25848 +
            ((C17047 - C17046) * C180 + (C17049 - C17048) * C89236) * C25849 +
            ((C19100 - C19101) * C180 + (C19102 - C19103) * C89236) * C25850) *
               C89153 * C814) *
              C815 +
          ((((C13261 * C107 - C89093 * C114) * C180 +
             (C13261 * C347 - C89093 * C353) * C89236) *
                C25848 +
            ((C13261 * C1723 - C89093 * C1732) * C180 +
             (C13261 * C2041 - C89093 * C2049) * C89236) *
                C25849 +
            ((C13261 * C1726 - C89093 * C1738) * C180 +
             (C13261 * C2044 - C89093 * C2052) * C89236) *
                C25850) *
               C89153 * C812 +
           (((C14073 - C14072) * C180 + (C14075 - C14074) * C89236) * C25848 +
            ((C17050 - C17051) * C180 + (C17052 - C17053) * C89236) * C25849 +
            ((C89093 * C6252 - C13261 * C6248) * C180 +
             (C89093 * C6497 - C13261 * C6494) * C89236) *
                C25850) *
               C89153 * C813 +
           ((C14086 * C180 + C14087 * C89236) * C25848 +
            ((C17055 - C17054) * C180 + (C17057 - C17056) * C89236) * C25849 +
            ((C13261 * C14602 - C89093 * C14605) * C180 +
             (C13261 * C14840 - C89093 * C14842) * C89236) *
                C25850) *
               C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C180 +
             (C89093 * C352 - C13261 * C346) * C89236) *
                C25848 +
            ((C27308 - C27309) * C180 + (C27310 - C27311) * C89236) * C25849 +
            C27340 * C25850) *
               C1719 +
           (((C27309 - C27308) * C180 + (C27311 - C27310) * C89236) * C25848 +
            ((C27313 - C27312) * C180 + (C27315 - C27314) * C89236) * C25849 +
            ((C27316 - C27317) * C180 + (C27318 - C27319) * C89236) * C25850) *
               C1720 +
           (C27340 * C25848 +
            ((C27317 - C27316) * C180 + (C27319 - C27318) * C89236) * C25849 +
            ((C89093 * C26999 - C13261 * C26997) * C180 +
             (C89093 * C27305 - C13261 * C27303) * C89236) *
                C25850) *
               C1721) *
              C89137 * C815 +
          ((((C13261 * C107 - C89093 * C114) * C180 +
             (C13261 * C347 - C89093 * C353) * C89236) *
                C25848 +
            ((C27320 - C27321) * C180 + (C27322 - C27323) * C89236) * C25849 +
            C27341 * C25850) *
               C1719 +
           (((C27321 - C27320) * C180 + (C27323 - C27322) * C89236) * C25848 +
            ((C27325 - C27324) * C180 + (C27327 - C27326) * C89236) * C25849 +
            ((C27328 - C27329) * C180 + (C27330 - C27331) * C89236) * C25850) *
               C1720 +
           (C27341 * C25848 +
            ((C27329 - C27328) * C180 + (C27331 - C27330) * C89236) * C25849 +
            ((C13261 * C26998 - C89093 * C27001) * C180 +
             (C13261 * C27304 - C89093 * C27306) * C89236) *
                C25850) *
               C1721) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[32] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C89 +
               C440 * C90 + C441 * C91) *
                  C89247 * C89153 * C89137 * C96 -
              (C442 * C91 + C441 * C90 + C440 * C89) * C89247 * C89153 *
                  C89137 * C97 +
              (C441 * C89 + C442 * C90 + C443 * C91) * C89247 * C89153 *
                  C89137 * C98 -
              ((C180 * C186 - C408 * C111 - C180 * C351 + C89236 * C414) * C91 +
               C443 * C90 + C442 * C89) *
                  C89247 * C89153 * C89137 * C99) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) *
                    C89 +
                C440 * C90 + C441 * C91) *
                   C89247 * C89153 * C812 -
               (C1258 * C91 + C1259 * C90 +
                (C180 * C923 - C408 * C819 - C180 * C1135 + C89236 * C1227) *
                    C89) *
                   C89247 * C89153 * C813 +
               ((C180 * C926 - C408 * C820 - C180 * C1138 + C89236 * C1228) *
                    C89 +
                C1260 * C90 + C1261 * C91) *
                   C89247 * C89153 * C814) *
                  C815 +
              ((C1259 * C89 + C1258 * C90 +
                (C180 * C929 - C408 * C823 - C180 * C1141 + C89236 * C1231) *
                    C91) *
                   C89247 * C89153 * C813 -
               (C442 * C91 + C441 * C90 + C440 * C89) * C89247 * C89153 * C812 -
               ((C180 * C930 - C408 * C824 - C180 * C1142 + C89236 * C1232) *
                    C91 +
                C1261 * C90 + C1260 * C89) *
                   C89247 * C89153 * C814) *
                  C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C89 +
            C440 * C90 + C441 * C91) *
               C89247 * C1719 -
           (C2163 * C91 + C2164 * C90 +
            (C180 * C1828 - C408 * C1724 - C180 * C2040 + C89236 * C2132) *
                C89) *
               C89247 * C1720 +
           ((C180 * C1831 - C408 * C1725 - C180 * C2043 + C89236 * C2133) *
                C89 +
            C2165 * C90 + C2166 * C91) *
               C89247 * C1721) *
              C89137 * C815 +
          ((C2164 * C89 + C2163 * C90 +
            (C180 * C1834 - C408 * C1728 - C180 * C2046 + C89236 * C2136) *
                C91) *
               C89247 * C1720 -
           (C442 * C91 + C441 * C90 + C440 * C89) * C89247 * C1719 -
           ((C180 * C1835 - C408 * C1729 - C180 * C2047 + C89236 * C2137) *
                C91 +
            C2166 * C90 + C2165 * C89) *
               C89247 * C1721) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((C13313 * C181 - C13466 * C106 - C13313 * C346 + C13258 * C409 +
           C13314 * C923 - C13467 * C819 - C13314 * C1135 + C13259 * C1227 +
           C13315 * C926 - C13468 * C820 - C13315 * C1138 + C13260 * C1228) *
              C89093 * C89247 * C89153 * C89137 * C96 -
          (C13315 * C927 - C13468 * C821 - C13315 * C1139 + C13260 * C1229 +
           C13314 * C924 - C13467 * C818 - C13314 * C1136 + C13259 * C1226 +
           C13313 * C182 - C13466 * C107 - C13313 * C347 + C13258 * C410) *
              C89093 * C89247 * C89153 * C89137 * C97 +
          (C13313 * C183 - C13466 * C108 - C13313 * C348 + C13258 * C411 +
           C13314 * C925 - C13467 * C817 - C13314 * C1137 + C13259 * C1225 +
           C13315 * C928 - C13468 * C822 - C13315 * C1140 + C13260 * C1230) *
              C89093 * C89247 * C89153 * C89137 * C98 -
          (C13315 * C930 - C13468 * C824 - C13315 * C1142 + C13260 * C1232 +
           C13314 * C929 - C13467 * C823 - C13314 * C1141 + C13259 * C1231 +
           C13313 * C184 - C13466 * C109 - C13313 * C349 + C13258 * C412) *
              C89093 * C89247 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C13313 * C181 - C13466 * C106 - C13313 * C346 + C13258 * C409 +
            C13314 * C923 - C13467 * C819 - C13314 * C1135 + C13259 * C1227 +
            C13315 * C926 - C13468 * C820 - C13315 * C1138 + C13260 * C1228) *
               C89093 * C89247 * C89153 * C812 -
           (C13315 * C5787 - C13468 * C5727 - C13315 * C5899 + C13260 * C5957 +
            C13314 * C926 - C13467 * C820 - C13314 * C1138 + C13259 * C1228 +
            C13313 * C923 - C13466 * C819 - C13313 * C1135 + C13258 * C1227) *
               C89093 * C89247 * C89153 * C813 +
           (C13313 * C926 - C13466 * C820 - C13313 * C1138 + C13258 * C1228 +
            C13314 * C5787 - C13467 * C5727 - C13314 * C5899 + C13259 * C5957 +
            C13315 * C13873 - C13468 * C13743 - C13315 * C14055 +
            C13260 * C14161) *
               C89093 * C89247 * C89153 * C814) *
              C815 +
          ((C13313 * C924 - C13466 * C818 - C13313 * C1136 + C13258 * C1226 +
            C13314 * C927 - C13467 * C821 - C13314 * C1139 + C13259 * C1229 +
            C13315 * C5788 - C13468 * C5726 - C13315 * C5900 + C13260 * C5956) *
               C89093 * C89247 * C89153 * C813 -
           (C13315 * C927 - C13468 * C821 - C13315 * C1139 + C13260 * C1229 +
            C13314 * C924 - C13467 * C818 - C13314 * C1136 + C13259 * C1226 +
            C13313 * C182 - C13466 * C107 - C13313 * C347 + C13258 * C410) *
               C89093 * C89247 * C89153 * C812 -
           (C13315 * C13874 - C13468 * C13744 - C13315 * C14056 +
            C13260 * C14162 + C13314 * C5788 - C13467 * C5726 - C13314 * C5900 +
            C13259 * C5956 + C13313 * C927 - C13466 * C821 - C13313 * C1139 +
            C13258 * C1229) *
               C89093 * C89247 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C13313 * C181 - C13466 * C106 - C13313 * C346 + C13258 * C409 +
            C13314 * C923 - C13467 * C819 - C13314 * C1135 + C13259 * C1227 +
            C13315 * C926 - C13468 * C820 - C13315 * C1138 + C13260 * C1228) *
               C89093 * C89247 * C1719 -
           (C13315 * C8600 - C13468 * C8516 - C13315 * C8760 + C13260 * C8842 +
            C13314 * C4211 - C13467 * C4097 - C13314 * C4439 + C13259 * C4545 +
            C13313 * C1828 - C13466 * C1724 - C13313 * C2040 + C13258 * C2132) *
               C89093 * C89247 * C1720 +
           (C13313 * C1831 - C13466 * C1725 - C13313 * C2043 + C13258 * C2133 +
            C13314 * C6333 - C13467 * C6249 - C13314 * C6493 + C13259 * C6575 +
            C13315 * C14683 - C13468 * C14601 - C13315 * C14839 +
            C13260 * C14917) *
               C89093 * C89247 * C1721) *
              C89137 * C815 +
          ((C13313 * C1829 - C13466 * C1723 - C13313 * C2041 + C13258 * C2131 +
            C13314 * C4212 - C13467 * C4098 - C13314 * C4440 + C13259 * C4546 +
            C13315 * C8601 - C13468 * C8515 - C13315 * C8761 + C13260 * C8841) *
               C89093 * C89247 * C1720 -
           (C13315 * C927 - C13468 * C821 - C13315 * C1139 + C13260 * C1229 +
            C13314 * C924 - C13467 * C818 - C13314 * C1136 + C13259 * C1226 +
            C13313 * C182 - C13466 * C107 - C13313 * C347 + C13258 * C410) *
               C89093 * C89247 * C1719 -
           (C13315 * C14684 - C13468 * C14602 - C13315 * C14840 +
            C13260 * C14918 + C13314 * C6334 - C13467 * C6248 - C13314 * C6494 +
            C13259 * C6574 + C13313 * C1832 - C13466 * C1726 - C13313 * C2044 +
            C13258 * C2134) *
               C89093 * C89247 * C1721) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C89093 *
               C25848 +
           (C180 * C1828 - C408 * C1724 - C180 * C2040 + C89236 * C2132) *
               C89093 * C25849 +
           (C180 * C1831 - C408 * C1725 - C180 * C2043 + C89236 * C2133) *
               C89093 * C25850) *
              C89153 * C89137 * C96 -
          (C2165 * C89093 * C25850 + C2164 * C89093 * C25849 +
           C440 * C89093 * C25848) *
              C89153 * C89137 * C97 +
          (C441 * C89093 * C25848 + C2163 * C89093 * C25849 +
           C2166 * C89093 * C25850) *
              C89153 * C89137 * C98 -
          ((C180 * C1835 - C408 * C1729 - C180 * C2047 + C89236 * C2137) *
               C89093 * C25850 +
           C3678 * C89093 * C25849 + C442 * C89093 * C25848) *
              C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C89093 *
                C25848 +
            (C180 * C1828 - C408 * C1724 - C180 * C2040 + C89236 * C2132) *
                C89093 * C25849 +
            (C180 * C1831 - C408 * C1725 - C180 * C2043 + C89236 * C2133) *
                C89093 * C25850) *
               C89153 * C812 -
           ((C180 * C6333 - C408 * C6249 - C180 * C6493 + C89236 * C6575) *
                C89093 * C25850 +
            (C180 * C4211 - C408 * C4097 - C180 * C4439 + C89236 * C4545) *
                C89093 * C25849 +
            (C180 * C923 - C408 * C819 - C180 * C1135 + C89236 * C1227) *
                C89093 * C25848) *
               C89153 * C813 +
           ((C180 * C926 - C408 * C820 - C180 * C1138 + C89236 * C1228) *
                C89093 * C25848 +
            (C180 * C8600 - C408 * C8516 - C180 * C8760 + C89236 * C8842) *
                C89093 * C25849 +
            (C180 * C14683 - C408 * C14601 - C180 * C14839 + C89236 * C14917) *
                C89093 * C25850) *
               C89153 * C814) *
              C815 +
          ((C1259 * C89093 * C25848 + C4562 * C89093 * C25849 +
            (C180 * C6334 - C408 * C6248 - C180 * C6494 + C89236 * C6574) *
                C89093 * C25850) *
               C89153 * C813 -
           (C2165 * C89093 * C25850 + C2164 * C89093 * C25849 +
            C440 * C89093 * C25848) *
               C89153 * C812 -
           ((C180 * C14684 - C408 * C14602 - C180 * C14840 + C89236 * C14918) *
                C89093 * C25850 +
            (C180 * C8601 - C408 * C8515 - C180 * C8761 + C89236 * C8841) *
                C89093 * C25849 +
            C1260 * C89093 * C25848) *
               C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C89093 *
                C25848 +
            C27448 * C25849 + C27449 * C25850) *
               C1719 -
           (C27450 * C25850 + C27449 * C25849 + C27448 * C25848) * C1720 +
           (C27449 * C25848 + C27450 * C25849 +
            (C180 * C27121 - C408 * C26997 - C180 * C27303 + C89236 * C27415) *
                C89093 * C25850) *
               C1721) *
              C89137 * C815 +
          ((C27430 * C25848 + C27431 * C25849 + C27451 * C25850) * C1720 -
           (C27431 * C25850 + C27430 * C25849 + C440 * C89093 * C25848) *
               C1719 -
           ((C180 * C27122 - C408 * C26998 - C180 * C27304 + C89236 * C27416) *
                C89093 * C25850 +
            C27451 * C25849 + C27431 * C25848) *
               C1721) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[32] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C89247 * C264 - C263 * C106) * C180 +
                (C89247 * C493 - C263 * C346) * C89236) *
                   C89 +
               ((C277 - C278) * C180 + (C500 - C501) * C89236) * C90 +
               C514 * C91) *
                  C89153 * C89137 * C96 +
              (((C278 - C277) * C180 + (C501 - C500) * C89236) * C89 +
               ((C282 - C281) * C180 + (C504 - C503) * C89236) * C90 +
               C515 * C91) *
                  C89153 * C89137 * C97 +
              (C514 * C89 +
               ((C286 - C285) * C180 + (C507 - C506) * C89236) * C90 +
               ((C289 - C290) * C180 + (C508 - C509) * C89236) * C91) *
                  C89153 * C89137 * C98 +
              (C515 * C89 +
               ((C290 - C289) * C180 + (C509 - C508) * C89236) * C90 +
               ((C263 * C111 - C89247 * C269) * C180 +
                (C263 * C351 - C89247 * C498) * C89236) *
                   C91) *
                  C89153 * C89137 * C99) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C89247 * C264 - C263 * C106) * C180 +
                 (C89247 * C493 - C263 * C346) * C89236) *
                    C89 +
                ((C277 - C278) * C180 + (C500 - C501) * C89236) * C90 +
                C514 * C91) *
                   C89153 * C812 +
               (((C263 * C819 - C89247 * C1029) * C180 +
                 (C263 * C1135 - C89247 * C1335) * C89236) *
                    C89 +
                ((C1046 - C1047) * C180 + (C1344 - C1345) * C89236) * C90 +
                ((C1050 - C1051) * C180 + (C1346 - C1347) * C89236) * C91) *
                   C89153 * C813 +
               (((C89247 * C1032 - C263 * C820) * C180 +
                 (C89247 * C1338 - C263 * C1138) * C89236) *
                    C89 +
                ((C1054 - C1055) * C180 + (C1348 - C1349) * C89236) * C90 +
                ((C1058 - C1059) * C180 + (C1350 - C1351) * C89236) * C91) *
                   C89153 * C814) *
                  C815 +
              ((((C278 - C277) * C180 + (C501 - C500) * C89236) * C89 +
                ((C282 - C281) * C180 + (C504 - C503) * C89236) * C90 +
                C515 * C91) *
                   C89153 * C812 +
               (((C1047 - C1046) * C180 + (C1345 - C1344) * C89236) * C89 +
                ((C1051 - C1050) * C180 + (C1347 - C1346) * C89236) * C90 +
                ((C89247 * C1035 - C263 * C823) * C180 +
                 (C89247 * C1341 - C263 * C1141) * C89236) *
                    C91) *
                   C89153 * C813 +
               (((C1055 - C1054) * C180 + (C1349 - C1348) * C89236) * C89 +
                ((C1059 - C1058) * C180 + (C1351 - C1350) * C89236) * C90 +
                ((C263 * C824 - C89247 * C1036) * C180 +
                 (C263 * C1142 - C89247 * C1342) * C89236) *
                    C91) *
                   C89153 * C814) *
                  C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C180 +
             (C89247 * C493 - C263 * C346) * C89236) *
                C89 +
            ((C277 - C278) * C180 + (C500 - C501) * C89236) * C90 +
            C514 * C91) *
               C1719 +
           (((C263 * C1724 - C89247 * C1934) * C180 +
             (C263 * C2040 - C89247 * C2240) * C89236) *
                C89 +
            ((C1951 - C1952) * C180 + (C2249 - C2250) * C89236) * C90 +
            ((C1955 - C1956) * C180 + (C2251 - C2252) * C89236) * C91) *
               C1720 +
           (((C89247 * C1937 - C263 * C1725) * C180 +
             (C89247 * C2243 - C263 * C2043) * C89236) *
                C89 +
            ((C1959 - C1960) * C180 + (C2253 - C2254) * C89236) * C90 +
            ((C1963 - C1964) * C180 + (C2255 - C2256) * C89236) * C91) *
               C1721) *
              C89137 * C815 +
          ((((C278 - C277) * C180 + (C501 - C500) * C89236) * C89 +
            ((C282 - C281) * C180 + (C504 - C503) * C89236) * C90 +
            C515 * C91) *
               C1719 +
           (((C1952 - C1951) * C180 + (C2250 - C2249) * C89236) * C89 +
            ((C1956 - C1955) * C180 + (C2252 - C2251) * C89236) * C90 +
            ((C89247 * C1940 - C263 * C1728) * C180 +
             (C89247 * C2246 - C263 * C2046) * C89236) *
                C91) *
               C1720 +
           (((C1960 - C1959) * C180 + (C2254 - C2253) * C89236) * C89 +
            ((C1964 - C1963) * C180 + (C2256 - C2255) * C89236) * C90 +
            ((C263 * C1729 - C89247 * C1941) * C180 +
             (C263 * C2047 - C89247 * C2247) * C89236) *
                C91) *
               C1721) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C89247 * C264 - C263 * C106) * C13313 +
           (C89247 * C493 - C263 * C346) * C13258 +
           (C89247 * C1029 - C263 * C819) * C13314 +
           (C89247 * C1335 - C263 * C1135) * C13259 +
           (C89247 * C1032 - C263 * C820) * C13315 +
           (C89247 * C1338 - C263 * C1138) * C13260) *
              C89093 * C89153 * C89137 * C96 +
          ((C278 - C277) * C13313 + (C501 - C500) * C13258 +
           (C1046 - C1047) * C13314 + (C1344 - C1345) * C13259 +
           (C1055 - C1054) * C13315 + (C1349 - C1348) * C13260) *
              C89093 * C89153 * C89137 * C97 +
          (C293 * C13313 + C510 * C13258 + (C1051 - C1050) * C13314 +
           (C1347 - C1346) * C13259 + (C1058 - C1059) * C13315 +
           (C1350 - C1351) * C13260) *
              C89093 * C89153 * C89137 * C98 +
          (C295 * C13313 + C511 * C13258 + (C2795 - C2794) * C13314 +
           (C3034 - C3033) * C13259 + (C263 * C824 - C89247 * C1036) * C13315 +
           (C263 * C1142 - C89247 * C1342) * C13260) *
              C89093 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C13313 +
            (C89247 * C493 - C263 * C346) * C13258 +
            (C13956 - C13957) * C13314 + (C14240 - C14241) * C13259 +
            C13974 * C13315 + C14249 * C13260) *
               C89093 * C89153 * C812 +
           ((C13957 - C13956) * C13313 + (C14241 - C14240) * C13258 +
            (C13961 - C13960) * C13314 + (C14243 - C14242) * C13259 +
            (C13964 - C13965) * C13315 + (C14244 - C14245) * C13260) *
               C89093 * C89153 * C813 +
           (C13974 * C13313 + C14249 * C13258 + (C13965 - C13964) * C13314 +
            (C14245 - C14244) * C13259 +
            (C89247 * C13951 - C263 * C13743) * C13315 +
            (C89247 * C14237 - C263 * C14055) * C13260) *
               C89093 * C89153 * C814) *
              C815 +
          (((C278 - C277) * C13313 + (C501 - C500) * C13258 +
            (C1046 - C1047) * C13314 + (C1344 - C1345) * C13259 +
            C13968 * C13315 + C14246 * C13260) *
               C89093 * C89153 * C812 +
           ((C1047 - C1046) * C13313 + (C1345 - C1344) * C13258 +
            (C1054 - C1055) * C13314 + (C1348 - C1349) * C13259 +
            (C13970 - C13971) * C13315 + (C14247 - C14248) * C13260) *
               C89093 * C89153 * C813 +
           (C13968 * C13313 + C14246 * C13258 + (C13971 - C13970) * C13314 +
            (C14248 - C14247) * C13259 +
            (C263 * C13744 - C89247 * C13952) * C13315 +
            (C263 * C14056 - C89247 * C14238) * C13260) *
               C89093 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C13313 +
            (C89247 * C493 - C263 * C346) * C13258 +
            (C13956 - C13957) * C13314 + (C14240 - C14241) * C13259 +
            C13974 * C13315 + C14249 * C13260) *
               C89093 * C1719 +
           ((C263 * C1724 - C89247 * C1934) * C13313 +
            (C263 * C2040 - C89247 * C2240) * C13258 +
            (C263 * C4097 - C89247 * C4325) * C13314 +
            (C263 * C4439 - C89247 * C4661) * C13259 +
            (C263 * C8516 - C89247 * C8680) * C13315 +
            (C263 * C8760 - C89247 * C8917) * C13260) *
               C89093 * C1720 +
           ((C89247 * C1937 - C263 * C1725) * C13313 +
            (C89247 * C2243 - C263 * C2043) * C13258 +
            (C89247 * C6413 - C263 * C6249) * C13314 +
            (C89247 * C6650 - C263 * C6493) * C13259 +
            (C89247 * C14761 - C263 * C14601) * C13315 +
            (C89247 * C14993 - C263 * C14839) * C13260) *
               C89093 * C1721) *
              C89137 * C815 +
          (((C278 - C277) * C13313 + (C501 - C500) * C13258 +
            (C1046 - C1047) * C13314 + (C1344 - C1345) * C13259 +
            C13968 * C13315 + C14246 * C13260) *
               C89093 * C1719 +
           ((C1952 - C1951) * C13313 + (C2250 - C2249) * C13258 +
            (C4334 - C4335) * C13314 + (C4666 - C4667) * C13259 +
            (C89247 * C8681 - C263 * C8515) * C13315 +
            (C89247 * C8918 - C263 * C8761) * C13260) *
               C89093 * C1720 +
           ((C1960 - C1959) * C13313 + (C2254 - C2253) * C13258 +
            (C263 * C6248 - C89247 * C6414) * C13314 +
            (C263 * C6494 - C89247 * C6651) * C13259 +
            (C263 * C14602 - C89247 * C14762) * C13315 +
            (C263 * C14840 - C89247 * C14994) * C13260) *
               C89093 * C1721) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C25848 * C264 - C25951 * C106 + C25849 * C1934 - C25952 * C1724 +
            C25850 * C1937 - C25953 * C1725) *
               C180 +
           (C25848 * C493 - C25951 * C346 + C25849 * C2240 - C25952 * C2040 +
            C25850 * C2243 - C25953 * C2043) *
               C89236) *
              C89093 * C89153 * C89137 * C96 +
          ((C25951 * C107 - C25848 * C265 + C25952 * C1723 - C25849 * C1935 +
            C25953 * C1726 - C25850 * C1938) *
               C180 +
           (C25951 * C347 - C25848 * C494 + C25952 * C2041 - C25849 * C2241 +
            C25953 * C2044 - C25850 * C2244) *
               C89236) *
              C89093 * C89153 * C89137 * C97 +
          ((C25848 * C266 - C25951 * C108 + C25849 * C1936 - C25952 * C1722 +
            C25850 * C1939 - C25953 * C1727) *
               C180 +
           (C25848 * C495 - C25951 * C348 + C25849 * C2242 - C25952 * C2042 +
            C25850 * C2245 - C25953 * C2045) *
               C89236) *
              C89093 * C89153 * C89137 * C98 +
          ((C25951 * C109 - C25848 * C267 + C25952 * C1728 - C25849 * C1940 +
            C25953 * C1729 - C25850 * C1941) *
               C180 +
           (C25951 * C349 - C25848 * C496 + C25952 * C2046 - C25849 * C2246 +
            C25953 * C2047 - C25850 * C2247) *
               C89236) *
              C89093 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C25848 * C264 - C25951 * C106 + C25849 * C1934 - C25952 * C1724 +
             C25850 * C1937 - C25953 * C1725) *
                C180 +
            (C25848 * C493 - C25951 * C346 + C25849 * C2240 - C25952 * C2040 +
             C25850 * C2243 - C25953 * C2043) *
                C89236) *
               C89093 * C89153 * C812 +
           ((C25951 * C819 - C25848 * C1029 + C25952 * C4097 - C25849 * C4325 +
             C25953 * C6249 - C25850 * C6413) *
                C180 +
            (C25951 * C1135 - C25848 * C1335 + C25952 * C4439 - C25849 * C4661 +
             C25953 * C6493 - C25850 * C6650) *
                C89236) *
               C89093 * C89153 * C813 +
           ((C25848 * C1032 - C25951 * C820 + C25849 * C8680 - C25952 * C8516 +
             C25850 * C14761 - C25953 * C14601) *
                C180 +
            (C25848 * C1338 - C25951 * C1138 + C25849 * C8917 - C25952 * C8760 +
             C25850 * C14993 - C25953 * C14839) *
                C89236) *
               C89093 * C89153 * C814) *
              C815 +
          (((C25951 * C107 - C25848 * C265 + C25952 * C1723 - C25849 * C1935 +
             C25953 * C1726 - C25850 * C1938) *
                C180 +
            (C25951 * C347 - C25848 * C494 + C25952 * C2041 - C25849 * C2241 +
             C25953 * C2044 - C25850 * C2244) *
                C89236) *
               C89093 * C89153 * C812 +
           ((C25848 * C1030 - C25951 * C818 + C25849 * C4326 - C25952 * C4098 +
             C25850 * C6414 - C25953 * C6248) *
                C180 +
            (C25848 * C1336 - C25951 * C1136 + C25849 * C4662 - C25952 * C4440 +
             C25850 * C6651 - C25953 * C6494) *
                C89236) *
               C89093 * C89153 * C813 +
           ((C25951 * C821 - C25848 * C1033 + C25952 * C8515 - C25849 * C8681 +
             C25953 * C14602 - C25850 * C14762) *
                C180 +
            (C25951 * C1139 - C25848 * C1339 + C25952 * C8761 - C25849 * C8918 +
             C25953 * C14840 - C25850 * C14994) *
                C89236) *
               C89093 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C25848 * C264 - C25951 * C106 + C25849 * C1934 - C25952 * C1724 +
             C25850 * C1937 - C25953 * C1725) *
                C180 +
            (C25848 * C493 - C25951 * C346 + C25849 * C2240 - C25952 * C2040 +
             C25850 * C2243 - C25953 * C2043) *
                C89236) *
               C89093 * C1719 +
           ((C25951 * C1724 - C25848 * C1934 + C25952 * C1725 - C25849 * C1937 +
             C25953 * C10544 - C25850 * C10660) *
                C180 +
            (C25951 * C2040 - C25848 * C2240 + C25952 * C2043 - C25849 * C2243 +
             C25953 * C10716 - C25850 * C10825) *
                C89236) *
               C89093 * C1720 +
           ((C25848 * C1937 - C25951 * C1725 + C25849 * C10660 -
             C25952 * C10544 + C25850 * C27225 - C25953 * C26997) *
                C180 +
            (C25848 * C2243 - C25951 * C2043 + C25849 * C10825 -
             C25952 * C10716 + C25850 * C27525 - C25953 * C27303) *
                C89236) *
               C89093 * C1721) *
              C89137 * C815 +
          (((C25951 * C107 - C25848 * C265 + C25952 * C1723 - C25849 * C1935 +
             C25953 * C1726 - C25850 * C1938) *
                C180 +
            (C25951 * C347 - C25848 * C494 + C25952 * C2041 - C25849 * C2241 +
             C25953 * C2044 - C25850 * C2244) *
                C89236) *
               C89093 * C1719 +
           ((C25848 * C1935 - C25951 * C1723 + C25849 * C1938 - C25952 * C1726 +
             C25850 * C10661 - C25953 * C10543) *
                C180 +
            (C25848 * C2241 - C25951 * C2041 + C25849 * C2244 - C25952 * C2044 +
             C25850 * C10826 - C25953 * C10717) *
                C89236) *
               C89093 * C1720 +
           ((C25951 * C1726 - C25848 * C1938 + C25952 * C10543 -
             C25849 * C10661 + C25953 * C26998 - C25850 * C27226) *
                C180 +
            (C25951 * C2044 - C25848 * C2244 + C25952 * C10717 -
             C25849 * C10826 + C25953 * C27304 - C25850 * C27526) *
                C89236) *
               C89093 * C1721) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q));
    d2eezx[32] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 +
                C91 * C116 - C104 * C108) *
                   C263 +
               (C89 * C571 - C100 * C565 + C90 * C572 - C102 * C566 +
                C91 * C573 - C104 * C567) *
                   C89247) *
                  C89236 * C89153 * C89137 * C96 +
              ((C100 * C107 - C89 * C114 + C102 * C108 - C90 * C116 +
                C104 * C109 - C91 * C118) *
                   C263 +
               (C100 * C566 - C89 * C572 + C102 * C567 - C90 * C573 +
                C104 * C568 - C91 * C574) *
                   C89247) *
                  C89236 * C89153 * C89137 * C97 +
              ((C89 * C116 - C100 * C108 + C90 * C118 - C102 * C109 +
                C91 * C120 - C104 * C110) *
                   C263 +
               (C89 * C573 - C100 * C567 + C90 * C574 - C102 * C568 +
                C91 * C575 - C104 * C569) *
                   C89247) *
                  C89236 * C89153 * C89137 * C98 +
              ((C100 * C109 - C89 * C118 + C102 * C110 - C90 * C120 +
                C104 * C111 - C91 * C122) *
                   C263 +
               (C100 * C568 - C89 * C574 + C102 * C569 - C90 * C575 +
                C104 * C570 - C91 * C576) *
                   C89247) *
                  C89236 * C89153 * C89137 * C99) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 +
                 C91 * C116 - C104 * C108) *
                    C263 +
                (C89 * C571 - C100 * C565 + C90 * C572 - C102 * C566 +
                 C91 * C573 - C104 * C567) *
                    C89247) *
                   C89236 * C89153 * C812 +
               ((C100 * C819 - C89 * C829 + C102 * C818 - C90 * C827 +
                 C104 * C817 - C91 * C825) *
                    C263 +
                (C100 * C1425 - C89 * C1433 + C102 * C1426 - C90 * C1434 +
                 C104 * C1427 - C91 * C1435) *
                    C89247) *
                   C89236 * C89153 * C813 +
               ((C89 * C831 - C100 * C820 + C90 * C833 - C102 * C821 +
                 C91 * C835 - C104 * C822) *
                    C263 +
                (C89 * C1436 - C100 * C1428 + C90 * C1437 - C102 * C1429 +
                 C91 * C1438 - C104 * C1430) *
                    C89247) *
                   C89236 * C89153 * C814) *
                  C815 +
              (((C100 * C107 - C89 * C114 + C102 * C108 - C90 * C116 +
                 C104 * C109 - C91 * C118) *
                    C263 +
                (C100 * C566 - C89 * C572 + C102 * C567 - C90 * C573 +
                 C104 * C568 - C91 * C574) *
                    C89247) *
                   C89236 * C89153 * C812 +
               ((C89 * C827 - C100 * C818 + C90 * C825 - C102 * C817 +
                 C91 * C837 - C104 * C823) *
                    C263 +
                (C89 * C1434 - C100 * C1426 + C90 * C1435 - C102 * C1427 +
                 C91 * C1439 - C104 * C1431) *
                    C89247) *
                   C89236 * C89153 * C813 +
               ((C100 * C821 - C89 * C833 + C102 * C822 - C90 * C835 +
                 C104 * C824 - C91 * C839) *
                    C263 +
                (C100 * C1429 - C89 * C1437 + C102 * C1430 - C90 * C1438 +
                 C104 * C1432 - C91 * C1440) *
                    C89247) *
                   C89236 * C89153 * C814) *
                  C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C89 * C112 - C100 * C106 + C90 * C114 -
                                 C102 * C107 + C91 * C116 - C104 * C108) *
                                    C263 +
                                (C89 * C571 - C100 * C565 + C90 * C572 -
                                 C102 * C566 + C91 * C573 - C104 * C567) *
                                    C89247) *
                                   C89236 * C1719 +
                               ((C100 * C1724 - C89 * C1734 + C102 * C1723 -
                                 C90 * C1732 + C104 * C1722 - C91 * C1730) *
                                    C263 +
                                (C100 * C2330 - C89 * C2338 + C102 * C2331 -
                                 C90 * C2339 + C104 * C2332 - C91 * C2340) *
                                    C89247) *
                                   C89236 * C1720 +
                               ((C89 * C1736 - C100 * C1725 + C90 * C1738 -
                                 C102 * C1726 + C91 * C1740 - C104 * C1727) *
                                    C263 +
                                (C89 * C2341 - C100 * C2333 + C90 * C2342 -
                                 C102 * C2334 + C91 * C2343 - C104 * C2335) *
                                    C89247) *
                                   C89236 * C1721) *
                                  C89137 * C815 +
                              (((C100 * C107 - C89 * C114 + C102 * C108 -
                                 C90 * C116 + C104 * C109 - C91 * C118) *
                                    C263 +
                                (C100 * C566 - C89 * C572 + C102 * C567 -
                                 C90 * C573 + C104 * C568 - C91 * C574) *
                                    C89247) *
                                   C89236 * C1719 +
                               ((C89 * C1732 - C100 * C1723 + C90 * C1730 -
                                 C102 * C1722 + C91 * C1742 - C104 * C1728) *
                                    C263 +
                                (C89 * C2339 - C100 * C2331 + C90 * C2340 -
                                 C102 * C2332 + C91 * C2344 - C104 * C2336) *
                                    C89247) *
                                   C89236 * C1720 +
                               ((C100 * C1726 - C89 * C1738 + C102 * C1727 -
                                 C90 * C1740 + C104 * C1729 - C91 * C1744) *
                                    C263 +
                                (C100 * C2334 - C89 * C2342 + C102 * C2335 -
                                 C90 * C2343 + C104 * C2337 - C91 * C2345) *
                                    C89247) *
                                   C89236 * C1721) *
                                  C89137 * C89124)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C89093 * C112 - C13261 * C106) * C263 +
            (C89093 * C571 - C13261 * C565) * C89247) *
               C13258 +
           ((C89093 * C829 - C13261 * C819) * C263 +
            (C89093 * C1433 - C13261 * C1425) * C89247) *
               C13259 +
           ((C89093 * C831 - C13261 * C820) * C263 +
            (C89093 * C1436 - C13261 * C1428) * C89247) *
               C13260) *
              C89153 * C89137 * C96 +
          (((C13261 * C107 - C89093 * C114) * C263 +
            (C13261 * C566 - C89093 * C572) * C89247) *
               C13258 +
           ((C13261 * C818 - C89093 * C827) * C263 +
            (C13261 * C1426 - C89093 * C1434) * C89247) *
               C13259 +
           ((C13261 * C821 - C89093 * C833) * C263 +
            (C13261 * C1429 - C89093 * C1437) * C89247) *
               C13260) *
              C89153 * C89137 * C97 +
          (((C89093 * C116 - C13261 * C108) * C263 +
            (C89093 * C573 - C13261 * C567) * C89247) *
               C13258 +
           ((C89093 * C825 - C13261 * C817) * C263 +
            (C89093 * C1435 - C13261 * C1427) * C89247) *
               C13259 +
           ((C89093 * C835 - C13261 * C822) * C263 +
            (C89093 * C1438 - C13261 * C1430) * C89247) *
               C13260) *
              C89153 * C89137 * C98 +
          (((C13261 * C109 - C89093 * C118) * C263 +
            (C13261 * C568 - C89093 * C574) * C89247) *
               C13258 +
           ((C13261 * C823 - C89093 * C837) * C263 +
            (C13261 * C1431 - C89093 * C1439) * C89247) *
               C13259 +
           ((C13261 * C824 - C89093 * C839) * C263 +
            (C13261 * C1432 - C89093 * C1440) * C89247) *
               C13260) *
              C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C263 +
             (C89093 * C571 - C13261 * C565) * C89247) *
                C13258 +
            ((C14060 - C14061) * C263 + (C14328 - C14329) * C89247) * C13259 +
            C14346 * C13260) *
               C89153 * C812 +
           (((C14061 - C14060) * C263 + (C14329 - C14328) * C89247) * C13258 +
            ((C14065 - C14064) * C263 + (C14332 - C14331) * C89247) * C13259 +
            ((C14068 - C14069) * C263 + (C14333 - C14334) * C89247) * C13260) *
               C89153 * C813 +
           (C14346 * C13258 +
            ((C14069 - C14068) * C263 + (C14334 - C14333) * C89247) * C13259 +
            ((C89093 * C13745 - C13261 * C13743) * C263 +
             (C89093 * C14325 - C13261 * C14323) * C89247) *
                C13260) *
               C89153 * C814) *
              C815 +
          ((((C13261 * C107 - C89093 * C114) * C263 +
             (C13261 * C566 - C89093 * C572) * C89247) *
                C13258 +
            ((C14072 - C14073) * C263 + (C14335 - C14336) * C89247) * C13259 +
            C14347 * C13260) *
               C89153 * C812 +
           (((C14073 - C14072) * C263 + (C14336 - C14335) * C89247) * C13258 +
            ((C14077 - C14076) * C263 + (C14339 - C14338) * C89247) * C13259 +
            ((C14080 - C14081) * C263 + (C14340 - C14341) * C89247) * C13260) *
               C89153 * C813 +
           (C14347 * C13258 +
            ((C14081 - C14080) * C263 + (C14341 - C14340) * C89247) * C13259 +
            ((C13261 * C13744 - C89093 * C13747) * C263 +
             (C13261 * C14324 - C89093 * C14326) * C89247) *
                C13260) *
               C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C263 +
             (C89093 * C571 - C13261 * C565) * C89247) *
                C13258 +
            ((C14060 - C14061) * C263 + (C14328 - C14329) * C89247) * C13259 +
            C14346 * C13260) *
               C1719 +
           (((C13261 * C1724 - C89093 * C1734) * C263 +
             (C13261 * C2330 - C89093 * C2338) * C89247) *
                C13258 +
            ((C13261 * C4097 - C89093 * C4101) * C263 +
             (C13261 * C4767 - C89093 * C4771) * C89247) *
                C13259 +
            ((C13261 * C8516 - C89093 * C8521) * C263 +
             (C13261 * C8994 - C89093 * C8997) * C89247) *
                C13260) *
               C1720 +
           (((C89093 * C1736 - C13261 * C1725) * C263 +
             (C89093 * C2341 - C13261 * C2333) * C89247) *
                C13258 +
            ((C89093 * C6254 - C13261 * C6249) * C263 +
             (C89093 * C6730 - C13261 * C6727) * C89247) *
                C13259 +
            ((C89093 * C14603 - C13261 * C14601) * C263 +
             (C89093 * C15071 - C13261 * C15069) * C89247) *
                C13260) *
               C1721) *
              C89137 * C815 +
          ((((C13261 * C107 - C89093 * C114) * C263 +
             (C13261 * C566 - C89093 * C572) * C89247) *
                C13258 +
            ((C14072 - C14073) * C263 + (C14335 - C14336) * C89247) * C13259 +
            C14347 * C13260) *
               C1719 +
           (((C89093 * C1732 - C13261 * C1723) * C263 +
             (C89093 * C2339 - C13261 * C2331) * C89247) *
                C13258 +
            ((C89093 * C4103 - C13261 * C4098) * C263 +
             (C89093 * C4772 - C13261 * C4768) * C89247) *
                C13259 +
            ((C89093 * C8519 - C13261 * C8515) * C263 +
             (C89093 * C8998 - C13261 * C8995) * C89247) *
                C13260) *
               C1720 +
           (((C13261 * C1726 - C89093 * C1738) * C263 +
             (C13261 * C2334 - C89093 * C2342) * C89247) *
                C13258 +
            ((C13261 * C6248 - C89093 * C6252) * C263 +
             (C13261 * C6728 - C89093 * C6731) * C89247) *
                C13259 +
            ((C13261 * C14602 - C89093 * C14605) * C263 +
             (C13261 * C15070 - C89093 * C15072) * C89247) *
                C13260) *
               C1721) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((C89093 * C112 - C13261 * C106) * C25951 +
                               (C89093 * C571 - C13261 * C565) * C25848 +
                               (C89093 * C1734 - C13261 * C1724) * C25952 +
                               (C89093 * C2338 - C13261 * C2330) * C25849 +
                               (C89093 * C1736 - C13261 * C1725) * C25953 +
                               (C89093 * C2341 - C13261 * C2333) * C25850) *
                                  C89236 * C89153 * C89137 * C96 +
                              ((C13261 * C107 - C89093 * C114) * C25951 +
                               (C13261 * C566 - C89093 * C572) * C25848 +
                               (C13261 * C1723 - C89093 * C1732) * C25952 +
                               (C13261 * C2331 - C89093 * C2339) * C25849 +
                               (C13261 * C1726 - C89093 * C1738) * C25953 +
                               (C13261 * C2334 - C89093 * C2342) * C25850) *
                                  C89236 * C89153 * C89137 * C97 +
                              ((C89093 * C116 - C13261 * C108) * C25951 +
                               (C89093 * C573 - C13261 * C567) * C25848 +
                               (C89093 * C1730 - C13261 * C1722) * C25952 +
                               (C89093 * C2340 - C13261 * C2332) * C25849 +
                               (C89093 * C1740 - C13261 * C1727) * C25953 +
                               (C89093 * C2343 - C13261 * C2335) * C25850) *
                                  C89236 * C89153 * C89137 * C98 +
                              ((C13261 * C109 - C89093 * C118) * C25951 +
                               (C13261 * C568 - C89093 * C574) * C25848 +
                               (C13261 * C1728 - C89093 * C1742) * C25952 +
                               (C13261 * C2336 - C89093 * C2344) * C25849 +
                               (C13261 * C1729 - C89093 * C1744) * C25953 +
                               (C13261 * C2337 - C89093 * C2345) * C25850) *
                                  C89236 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C89093 * C112 - C13261 * C106) * C25951 +
            (C89093 * C571 - C13261 * C565) * C25848 +
            (C89093 * C1734 - C13261 * C1724) * C25952 +
            (C89093 * C2338 - C13261 * C2330) * C25849 +
            (C89093 * C1736 - C13261 * C1725) * C25953 +
            (C89093 * C2341 - C13261 * C2333) * C25850) *
               C89236 * C89153 * C812 +
           ((C14061 - C14060) * C25951 + (C14329 - C14328) * C25848 +
            (C17042 - C17043) * C25952 + (C17366 - C17367) * C25849 +
            (C19097 - C19096) * C25953 + (C19335 - C19334) * C25850) *
               C89236 * C89153 * C813 +
           (C14084 * C25951 + C14342 * C25848 + (C17047 - C17046) * C25952 +
            (C17369 - C17368) * C25849 + (C19100 - C19101) * C25953 +
            (C19336 - C19337) * C25850) *
               C89236 * C89153 * C814) *
              C815 +
          (((C13261 * C107 - C89093 * C114) * C25951 +
            (C13261 * C566 - C89093 * C572) * C25848 +
            (C13261 * C1723 - C89093 * C1732) * C25952 +
            (C13261 * C2331 - C89093 * C2339) * C25849 +
            (C13261 * C1726 - C89093 * C1738) * C25953 +
            (C13261 * C2334 - C89093 * C2342) * C25850) *
               C89236 * C89153 * C812 +
           ((C14073 - C14072) * C25951 + (C14336 - C14335) * C25848 +
            (C17050 - C17051) * C25952 + (C17370 - C17371) * C25849 +
            (C89093 * C6252 - C13261 * C6248) * C25953 +
            (C89093 * C6731 - C13261 * C6728) * C25850) *
               C89236 * C89153 * C813 +
           (C14086 * C25951 + C14343 * C25848 + (C17055 - C17054) * C25952 +
            (C17373 - C17372) * C25849 +
            (C13261 * C14602 - C89093 * C14605) * C25953 +
            (C13261 * C15070 - C89093 * C15072) * C25850) *
               C89236 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C89093 * C112 - C13261 * C106) * C25951 +
            (C89093 * C571 - C13261 * C565) * C25848 +
            (C27308 - C27309) * C25952 + (C27606 - C27607) * C25849 +
            C27332 * C25953 + C27618 * C25850) *
               C89236 * C1719 +
           ((C27309 - C27308) * C25951 + (C27607 - C27606) * C25848 +
            (C27313 - C27312) * C25952 + (C27609 - C27608) * C25849 +
            (C27316 - C27317) * C25953 + (C27610 - C27611) * C25850) *
               C89236 * C1720 +
           (C27332 * C25951 + C27618 * C25848 + (C27317 - C27316) * C25952 +
            (C27611 - C27610) * C25849 +
            (C89093 * C26999 - C13261 * C26997) * C25953 +
            (C89093 * C27603 - C13261 * C27601) * C25850) *
               C89236 * C1721) *
              C89137 * C815 +
          (((C13261 * C107 - C89093 * C114) * C25951 +
            (C13261 * C566 - C89093 * C572) * C25848 +
            (C27320 - C27321) * C25952 + (C27612 - C27613) * C25849 +
            C27334 * C25953 + C27619 * C25850) *
               C89236 * C1719 +
           ((C27321 - C27320) * C25951 + (C27613 - C27612) * C25848 +
            (C27325 - C27324) * C25952 + (C27615 - C27614) * C25849 +
            (C27328 - C27329) * C25953 + (C27616 - C27617) * C25850) *
               C89236 * C1720 +
           (C27334 * C25951 + C27619 * C25848 + (C27329 - C27328) * C25952 +
            (C27617 - C27616) * C25849 +
            (C13261 * C26998 - C89093 * C27001) * C25953 +
            (C13261 * C27602 - C89093 * C27604) * C25850) *
               C89236 * C1721) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q));
    d2eezy[32] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C89236 * C181 - C180 * C106) * C263 +
                (C89236 * C627 - C180 * C565) * C89247) *
                   C89 +
               ((C194 - C195) * C263 + (C634 - C635) * C89247) * C90 +
               C648 * C91) *
                  C89153 * C89137 * C96 +
              (((C195 - C194) * C263 + (C635 - C634) * C89247) * C89 +
               ((C199 - C198) * C263 + (C638 - C637) * C89247) * C90 +
               C649 * C91) *
                  C89153 * C89137 * C97 +
              (C648 * C89 +
               ((C203 - C202) * C263 + (C641 - C640) * C89247) * C90 +
               ((C206 - C207) * C263 + (C642 - C643) * C89247) * C91) *
                  C89153 * C89137 * C98 +
              (C649 * C89 +
               ((C207 - C206) * C263 + (C643 - C642) * C89247) * C90 +
               ((C180 * C111 - C89236 * C186) * C263 +
                (C180 * C570 - C89236 * C632) * C89247) *
                   C91) *
                  C89153 * C89137 * C99) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C89236 * C181 - C180 * C106) * C263 +
                 (C89236 * C627 - C180 * C565) * C89247) *
                    C89 +
                ((C194 - C195) * C263 + (C634 - C635) * C89247) * C90 +
                C648 * C91) *
                   C89153 * C812 +
               (((C180 * C819 - C89236 * C923) * C263 +
                 (C180 * C1425 - C89236 * C1515) * C89247) *
                    C89 +
                ((C940 - C941) * C263 + (C1524 - C1525) * C89247) * C90 +
                ((C944 - C945) * C263 + (C1526 - C1527) * C89247) * C91) *
                   C89153 * C813 +
               (((C89236 * C926 - C180 * C820) * C263 +
                 (C89236 * C1518 - C180 * C1428) * C89247) *
                    C89 +
                ((C948 - C949) * C263 + (C1528 - C1529) * C89247) * C90 +
                ((C952 - C953) * C263 + (C1530 - C1531) * C89247) * C91) *
                   C89153 * C814) *
                  C815 +
              ((((C195 - C194) * C263 + (C635 - C634) * C89247) * C89 +
                ((C199 - C198) * C263 + (C638 - C637) * C89247) * C90 +
                C649 * C91) *
                   C89153 * C812 +
               (((C941 - C940) * C263 + (C1525 - C1524) * C89247) * C89 +
                ((C945 - C944) * C263 + (C1527 - C1526) * C89247) * C90 +
                ((C89236 * C929 - C180 * C823) * C263 +
                 (C89236 * C1521 - C180 * C1431) * C89247) *
                    C91) *
                   C89153 * C813 +
               (((C949 - C948) * C263 + (C1529 - C1528) * C89247) * C89 +
                ((C953 - C952) * C263 + (C1531 - C1530) * C89247) * C90 +
                ((C180 * C824 - C89236 * C930) * C263 +
                 (C180 * C1432 - C89236 * C1522) * C89247) *
                    C91) *
                   C89153 * C814) *
                  C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C263 +
             (C89236 * C627 - C180 * C565) * C89247) *
                C89 +
            ((C194 - C195) * C263 + (C634 - C635) * C89247) * C90 +
            C648 * C91) *
               C1719 +
           (((C180 * C1724 - C89236 * C1828) * C263 +
             (C180 * C2330 - C89236 * C2420) * C89247) *
                C89 +
            ((C1845 - C1846) * C263 + (C2429 - C2430) * C89247) * C90 +
            ((C1849 - C1850) * C263 + (C2431 - C2432) * C89247) * C91) *
               C1720 +
           (((C89236 * C1831 - C180 * C1725) * C263 +
             (C89236 * C2423 - C180 * C2333) * C89247) *
                C89 +
            ((C1853 - C1854) * C263 + (C2433 - C2434) * C89247) * C90 +
            ((C1857 - C1858) * C263 + (C2435 - C2436) * C89247) * C91) *
               C1721) *
              C89137 * C815 +
          ((((C195 - C194) * C263 + (C635 - C634) * C89247) * C89 +
            ((C199 - C198) * C263 + (C638 - C637) * C89247) * C90 +
            C649 * C91) *
               C1719 +
           (((C1846 - C1845) * C263 + (C2430 - C2429) * C89247) * C89 +
            ((C1850 - C1849) * C263 + (C2432 - C2431) * C89247) * C90 +
            ((C89236 * C1834 - C180 * C1728) * C263 +
             (C89236 * C2426 - C180 * C2336) * C89247) *
                C91) *
               C1720 +
           (((C1854 - C1853) * C263 + (C2434 - C2433) * C89247) * C89 +
            ((C1858 - C1857) * C263 + (C2436 - C2435) * C89247) * C90 +
            ((C180 * C1729 - C89236 * C1835) * C263 +
             (C180 * C2337 - C89236 * C2427) * C89247) *
                C91) *
               C1721) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
            C13260 * C926 - C13315 * C820) *
               C263 +
           (C13258 * C627 - C13313 * C565 + C13259 * C1515 - C13314 * C1425 +
            C13260 * C1518 - C13315 * C1428) *
               C89247) *
              C89093 * C89153 * C89137 * C96 +
          ((C13313 * C107 - C13258 * C182 + C13314 * C818 - C13259 * C924 +
            C13315 * C821 - C13260 * C927) *
               C263 +
           (C13313 * C566 - C13258 * C628 + C13314 * C1426 - C13259 * C1516 +
            C13315 * C1429 - C13260 * C1519) *
               C89247) *
              C89093 * C89153 * C89137 * C97 +
          ((C13258 * C183 - C13313 * C108 + C13259 * C925 - C13314 * C817 +
            C13260 * C928 - C13315 * C822) *
               C263 +
           (C13258 * C629 - C13313 * C567 + C13259 * C1517 - C13314 * C1427 +
            C13260 * C1520 - C13315 * C1430) *
               C89247) *
              C89093 * C89153 * C89137 * C98 +
          ((C13313 * C109 - C13258 * C184 + C13314 * C823 - C13259 * C929 +
            C13315 * C824 - C13260 * C930) *
               C263 +
           (C13313 * C568 - C13258 * C630 + C13314 * C1431 - C13259 * C1521 +
            C13315 * C1432 - C13260 * C1522) *
               C89247) *
              C89093 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
             C13260 * C926 - C13315 * C820) *
                C263 +
            (C13258 * C627 - C13313 * C565 + C13259 * C1515 - C13314 * C1425 +
             C13260 * C1518 - C13315 * C1428) *
                C89247) *
               C89093 * C89153 * C812 +
           ((C13313 * C819 - C13258 * C923 + C13314 * C820 - C13259 * C926 +
             C13315 * C5727 - C13260 * C5787) *
                C263 +
            (C13313 * C1425 - C13258 * C1515 + C13314 * C1428 - C13259 * C1518 +
             C13315 * C6061 - C13260 * C6117) *
                C89247) *
               C89093 * C89153 * C813 +
           ((C13258 * C926 - C13313 * C820 + C13259 * C5787 - C13314 * C5727 +
             C13260 * C13873 - C13315 * C13743) *
                C263 +
            (C13258 * C1518 - C13313 * C1428 + C13259 * C6117 - C13314 * C6061 +
             C13260 * C14421 - C13315 * C14323) *
                C89247) *
               C89093 * C89153 * C814) *
              C815 +
          (((C13313 * C107 - C13258 * C182 + C13314 * C818 - C13259 * C924 +
             C13315 * C821 - C13260 * C927) *
                C263 +
            (C13313 * C566 - C13258 * C628 + C13314 * C1426 - C13259 * C1516 +
             C13315 * C1429 - C13260 * C1519) *
                C89247) *
               C89093 * C89153 * C812 +
           ((C13258 * C924 - C13313 * C818 + C13259 * C927 - C13314 * C821 +
             C13260 * C5788 - C13315 * C5726) *
                C263 +
            (C13258 * C1516 - C13313 * C1426 + C13259 * C1519 - C13314 * C1429 +
             C13260 * C6118 - C13315 * C6062) *
                C89247) *
               C89093 * C89153 * C813 +
           ((C13313 * C821 - C13258 * C927 + C13314 * C5726 - C13259 * C5788 +
             C13315 * C13744 - C13260 * C13874) *
                C263 +
            (C13313 * C1429 - C13258 * C1519 + C13314 * C6062 - C13259 * C6118 +
             C13315 * C14324 - C13260 * C14422) *
                C89247) *
               C89093 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
             C13260 * C926 - C13315 * C820) *
                C263 +
            (C13258 * C627 - C13313 * C565 + C13259 * C1515 - C13314 * C1425 +
             C13260 * C1518 - C13315 * C1428) *
                C89247) *
               C89093 * C1719 +
           ((C13313 * C1724 - C13258 * C1828 + C13314 * C4097 - C13259 * C4211 +
             C13315 * C8516 - C13260 * C8600) *
                C263 +
            (C13313 * C2330 - C13258 * C2420 + C13314 * C4767 - C13259 * C4873 +
             C13315 * C8994 - C13260 * C9074) *
                C89247) *
               C89093 * C1720 +
           ((C13258 * C1831 - C13313 * C1725 + C13259 * C6333 - C13314 * C6249 +
             C13260 * C14683 - C13315 * C14601) *
                C263 +
            (C13258 * C2423 - C13313 * C2333 + C13259 * C6807 - C13314 * C6727 +
             C13260 * C15147 - C13315 * C15069) *
                C89247) *
               C89093 * C1721) *
              C89137 * C815 +
          (((C13313 * C107 - C13258 * C182 + C13314 * C818 - C13259 * C924 +
             C13315 * C821 - C13260 * C927) *
                C263 +
            (C13313 * C566 - C13258 * C628 + C13314 * C1426 - C13259 * C1516 +
             C13315 * C1429 - C13260 * C1519) *
                C89247) *
               C89093 * C1719 +
           ((C13258 * C1829 - C13313 * C1723 + C13259 * C4212 - C13314 * C4098 +
             C13260 * C8601 - C13315 * C8515) *
                C263 +
            (C13258 * C2421 - C13313 * C2331 + C13259 * C4874 - C13314 * C4768 +
             C13260 * C9075 - C13315 * C8995) *
                C89247) *
               C89093 * C1720 +
           ((C13313 * C1726 - C13258 * C1832 + C13314 * C6248 - C13259 * C6334 +
             C13315 * C14602 - C13260 * C14684) *
                C263 +
            (C13313 * C2334 - C13258 * C2424 + C13314 * C6728 - C13259 * C6808 +
             C13315 * C15070 - C13260 * C15148) *
                C89247) *
               C89093 * C1721) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C89236 * C181 - C180 * C106) * C25951 +
           (C89236 * C627 - C180 * C565) * C25848 +
           (C89236 * C1828 - C180 * C1724) * C25952 +
           (C89236 * C2420 - C180 * C2330) * C25849 +
           (C89236 * C1831 - C180 * C1725) * C25953 +
           (C89236 * C2423 - C180 * C2333) * C25850) *
              C89093 * C89153 * C89137 * C96 +
          ((C195 - C194) * C25951 + (C635 - C634) * C25848 +
           (C1845 - C1846) * C25952 + (C2429 - C2430) * C25849 +
           (C1854 - C1853) * C25953 + (C2434 - C2433) * C25850) *
              C89093 * C89153 * C89137 * C97 +
          (C210 * C25951 + C644 * C25848 + (C1850 - C1849) * C25952 +
           (C2432 - C2431) * C25849 + (C1857 - C1858) * C25953 +
           (C2435 - C2436) * C25850) *
              C89093 * C89153 * C89137 * C98 +
          (C212 * C25951 + C645 * C25848 + (C3436 - C3435) * C25952 +
           (C3914 - C3913) * C25849 + (C180 * C1729 - C89236 * C1835) * C25953 +
           (C180 * C2337 - C89236 * C2427) * C25850) *
              C89093 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C89236 * C181 - C180 * C106) * C25951 +
            (C89236 * C627 - C180 * C565) * C25848 +
            (C89236 * C1828 - C180 * C1724) * C25952 +
            (C89236 * C2420 - C180 * C2330) * C25849 +
            (C89236 * C1831 - C180 * C1725) * C25953 +
            (C89236 * C2423 - C180 * C2333) * C25850) *
               C89093 * C89153 * C812 +
           ((C180 * C819 - C89236 * C923) * C25951 +
            (C180 * C1425 - C89236 * C1515) * C25848 +
            (C180 * C4097 - C89236 * C4211) * C25952 +
            (C180 * C4767 - C89236 * C4873) * C25849 +
            (C180 * C6249 - C89236 * C6333) * C25953 +
            (C180 * C6727 - C89236 * C6807) * C25850) *
               C89093 * C89153 * C813 +
           ((C89236 * C926 - C180 * C820) * C25951 +
            (C89236 * C1518 - C180 * C1428) * C25848 +
            (C89236 * C8600 - C180 * C8516) * C25952 +
            (C89236 * C9074 - C180 * C8994) * C25849 +
            (C89236 * C14683 - C180 * C14601) * C25953 +
            (C89236 * C15147 - C180 * C15069) * C25850) *
               C89093 * C89153 * C814) *
              C815 +
          (((C195 - C194) * C25951 + (C635 - C634) * C25848 +
            (C1845 - C1846) * C25952 + (C2429 - C2430) * C25849 +
            (C1854 - C1853) * C25953 + (C2434 - C2433) * C25850) *
               C89093 * C89153 * C812 +
           ((C941 - C940) * C25951 + (C1525 - C1524) * C25848 +
            (C4220 - C4221) * C25952 + (C4878 - C4879) * C25849 +
            (C89236 * C6334 - C180 * C6248) * C25953 +
            (C89236 * C6808 - C180 * C6728) * C25850) *
               C89093 * C89153 * C813 +
           ((C949 - C948) * C25951 + (C1529 - C1528) * C25848 +
            (C180 * C8515 - C89236 * C8601) * C25952 +
            (C180 * C8995 - C89236 * C9075) * C25849 +
            (C180 * C14602 - C89236 * C14684) * C25953 +
            (C180 * C15070 - C89236 * C15148) * C25850) *
               C89093 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C89236 * C181 - C180 * C106) * C25951 +
            (C89236 * C627 - C180 * C565) * C25848 +
            (C27126 - C27127) * C25952 + (C27696 - C27697) * C25849 +
            C27144 * C25953 + C27705 * C25850) *
               C89093 * C1719 +
           ((C27127 - C27126) * C25951 + (C27697 - C27696) * C25848 +
            (C27131 - C27130) * C25952 + (C27699 - C27698) * C25849 +
            (C27134 - C27135) * C25953 + (C27700 - C27701) * C25850) *
               C89093 * C1720 +
           (C27144 * C25951 + C27705 * C25848 + (C27135 - C27134) * C25952 +
            (C27701 - C27700) * C25849 +
            (C89236 * C27121 - C180 * C26997) * C25953 +
            (C89236 * C27693 - C180 * C27601) * C25850) *
               C89093 * C1721) *
              C89137 * C815 +
          (((C195 - C194) * C25951 + (C635 - C634) * C25848 +
            (C1845 - C1846) * C25952 + (C2429 - C2430) * C25849 +
            C27138 * C25953 + C27702 * C25850) *
               C89093 * C1719 +
           ((C1846 - C1845) * C25951 + (C2430 - C2429) * C25848 +
            (C1853 - C1854) * C25952 + (C2433 - C2434) * C25849 +
            (C27140 - C27141) * C25953 + (C27703 - C27704) * C25850) *
               C89093 * C1720 +
           (C27138 * C25951 + C27702 * C25848 + (C27141 - C27140) * C25952 +
            (C27704 - C27703) * C25849 +
            (C180 * C26998 - C89236 * C27122) * C25953 +
            (C180 * C27602 - C89236 * C27694) * C25850) *
               C89093 * C1721) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q));
    d2eezz[32] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) *
                   C89236 * C89 +
               C735 * C90 + C736 * C91) *
                  C89153 * C89137 * C96 -
              (C737 * C91 + C736 * C90 + C735 * C89) * C89153 * C89137 * C97 +
              (C736 * C89 + C737 * C90 + C738 * C91) * C89153 * C89137 * C98 -
              ((C263 * C269 - C699 * C111 - C263 * C570 + C89247 * C705) *
                   C89236 * C91 +
               C738 * C90 + C737 * C89) *
                  C89153 * C89137 * C99) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) *
                    C89236 * C89 +
                C735 * C90 + C736 * C91) *
                   C89153 * C812 -
               (C1642 * C91 + C1643 * C90 +
                (C263 * C1029 - C699 * C819 - C263 * C1425 + C89247 * C1607) *
                    C89236 * C89) *
                   C89153 * C813 +
               ((C263 * C1032 - C699 * C820 - C263 * C1428 + C89247 * C1608) *
                    C89236 * C89 +
                C1644 * C90 + C1645 * C91) *
                   C89153 * C814) *
                  C815 +
              ((C1643 * C89 + C1642 * C90 +
                (C263 * C1035 - C699 * C823 - C263 * C1431 + C89247 * C1611) *
                    C89236 * C91) *
                   C89153 * C813 -
               (C737 * C91 + C736 * C90 + C735 * C89) * C89153 * C812 -
               ((C263 * C1036 - C699 * C824 - C263 * C1432 + C89247 * C1612) *
                    C89236 * C91 +
                C1645 * C90 + C1644 * C89) *
                   C89153 * C814) *
                  C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C89236 *
                C89 +
            C735 * C90 + C736 * C91) *
               C1719 -
           (C2547 * C91 + C2548 * C90 +
            (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
                C89236 * C89) *
               C1720 +
           ((C263 * C1937 - C699 * C1725 - C263 * C2333 + C89247 * C2513) *
                C89236 * C89 +
            C2549 * C90 + C2550 * C91) *
               C1721) *
              C89137 * C815 +
          ((C2548 * C89 + C2547 * C90 +
            (C263 * C1940 - C699 * C1728 - C263 * C2336 + C89247 * C2516) *
                C89236 * C91) *
               C1720 -
           (C737 * C91 + C736 * C90 + C735 * C89) * C1719 -
           ((C263 * C1941 - C699 * C1729 - C263 * C2337 + C89247 * C2517) *
                C89236 * C91 +
            C2550 * C90 + C2549 * C89) *
               C1721) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C13258 +
           (C263 * C1029 - C699 * C819 - C263 * C1425 + C89247 * C1607) *
               C13259 +
           (C263 * C1032 - C699 * C820 - C263 * C1428 + C89247 * C1608) *
               C13260) *
              C89093 * C89153 * C89137 * C96 -
          (C1640 * C13260 + C1639 * C13259 + C731 * C13258) * C89093 * C89153 *
              C89137 * C97 +
          (C732 * C13258 + C1638 * C13259 + C1641 * C13260) * C89093 * C89153 *
              C89137 * C98 -
          ((C263 * C1036 - C699 * C824 - C263 * C1432 + C89247 * C1612) *
               C13260 +
           C3275 * C13259 + C733 * C13258) *
              C89093 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C13258 +
            C14524 * C13259 + C14525 * C13260) *
               C89093 * C89153 * C812 -
           (C14526 * C13260 + C14525 * C13259 + C14524 * C13258) * C89093 *
               C89153 * C813 +
           (C14525 * C13258 + C14526 * C13259 +
            (C263 * C13951 - C699 * C13743 - C263 * C14323 + C89247 * C14497) *
                C13260) *
               C89093 * C89153 * C814) *
              C815 +
          ((C1639 * C13258 + C1640 * C13259 + C14527 * C13260) * C89093 *
               C89153 * C813 -
           (C1640 * C13260 + C1639 * C13259 + C731 * C13258) * C89093 * C89153 *
               C812 -
           ((C263 * C13952 - C699 * C13744 - C263 * C14324 + C89247 * C14498) *
                C13260 +
            C14527 * C13259 + C1640 * C13258) *
               C89093 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C13258 +
            C14524 * C13259 + C14525 * C13260) *
               C89093 * C1719 -
           ((C263 * C8680 - C699 * C8516 - C263 * C8994 + C89247 * C9153) *
                C13260 +
            (C263 * C4325 - C699 * C4097 - C263 * C4767 + C89247 * C4979) *
                C13259 +
            (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
                C13258) *
               C89093 * C1720 +
           ((C263 * C1937 - C699 * C1725 - C263 * C2333 + C89247 * C2513) *
                C13258 +
            (C263 * C6413 - C699 * C6249 - C263 * C6727 + C89247 * C6886) *
                C13259 +
            (C263 * C14761 - C699 * C14601 - C263 * C15069 + C89247 * C15223) *
                C13260) *
               C89093 * C1721) *
              C89137 * C815 +
          ((C2544 * C13258 + C4996 * C13259 +
            (C263 * C8681 - C699 * C8515 - C263 * C8995 + C89247 * C9152) *
                C13260) *
               C89093 * C1720 -
           (C1640 * C13260 + C1639 * C13259 + C731 * C13258) * C89093 * C1719 -
           ((C263 * C14762 - C699 * C14602 - C263 * C15070 + C89247 * C15224) *
                C13260 +
            (C263 * C6414 - C699 * C6248 - C263 * C6728 + C89247 * C6885) *
                C13259 +
            C2545 * C13258) *
               C89093 * C1721) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((C25951 * C264 - C26254 * C106 - C25951 * C565 + C25848 * C700 +
           C25952 * C1934 - C26255 * C1724 - C25952 * C2330 + C25849 * C2512 +
           C25953 * C1937 - C26256 * C1725 - C25953 * C2333 + C25850 * C2513) *
              C89236 * C89093 * C89153 * C89137 * C96 -
          (C25953 * C1938 - C26256 * C1726 - C25953 * C2334 + C25850 * C2514 +
           C25952 * C1935 - C26255 * C1723 - C25952 * C2331 + C25849 * C2511 +
           C25951 * C265 - C26254 * C107 - C25951 * C566 + C25848 * C701) *
              C89236 * C89093 * C89153 * C89137 * C97 +
          (C25951 * C266 - C26254 * C108 - C25951 * C567 + C25848 * C702 +
           C25952 * C1936 - C26255 * C1722 - C25952 * C2332 + C25849 * C2510 +
           C25953 * C1939 - C26256 * C1727 - C25953 * C2335 + C25850 * C2515) *
              C89236 * C89093 * C89153 * C89137 * C98 -
          (C25953 * C1941 - C26256 * C1729 - C25953 * C2337 + C25850 * C2517 +
           C25952 * C1940 - C26255 * C1728 - C25952 * C2336 + C25849 * C2516 +
           C25951 * C267 - C26254 * C109 - C25951 * C568 + C25848 * C703) *
              C89236 * C89093 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C25951 * C264 - C26254 * C106 - C25951 * C565 + C25848 * C700 +
            C25952 * C1934 - C26255 * C1724 - C25952 * C2330 + C25849 * C2512 +
            C25953 * C1937 - C26256 * C1725 - C25953 * C2333 + C25850 * C2513) *
               C89236 * C89093 * C89153 * C812 -
           (C25953 * C6413 - C26256 * C6249 - C25953 * C6727 + C25850 * C6886 +
            C25952 * C4325 - C26255 * C4097 - C25952 * C4767 + C25849 * C4979 +
            C25951 * C1029 - C26254 * C819 - C25951 * C1425 + C25848 * C1607) *
               C89236 * C89093 * C89153 * C813 +
           (C25951 * C1032 - C26254 * C820 - C25951 * C1428 + C25848 * C1608 +
            C25952 * C8680 - C26255 * C8516 - C25952 * C8994 + C25849 * C9153 +
            C25953 * C14761 - C26256 * C14601 - C25953 * C15069 +
            C25850 * C15223) *
               C89236 * C89093 * C89153 * C814) *
              C815 +
          ((C25951 * C1030 - C26254 * C818 - C25951 * C1426 + C25848 * C1606 +
            C25952 * C4326 - C26255 * C4098 - C25952 * C4768 + C25849 * C4980 +
            C25953 * C6414 - C26256 * C6248 - C25953 * C6728 + C25850 * C6885) *
               C89236 * C89093 * C89153 * C813 -
           (C25953 * C1938 - C26256 * C1726 - C25953 * C2334 + C25850 * C2514 +
            C25952 * C1935 - C26255 * C1723 - C25952 * C2331 + C25849 * C2511 +
            C25951 * C265 - C26254 * C107 - C25951 * C566 + C25848 * C701) *
               C89236 * C89093 * C89153 * C812 -
           (C25953 * C14762 - C26256 * C14602 - C25953 * C15070 +
            C25850 * C15224 + C25952 * C8681 - C26255 * C8515 - C25952 * C8995 +
            C25849 * C9152 + C25951 * C1033 - C26254 * C821 - C25951 * C1429 +
            C25848 * C1609) *
               C89236 * C89093 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C25951 * C264 - C26254 * C106 - C25951 * C565 + C25848 * C700 +
            C25952 * C1934 - C26255 * C1724 - C25952 * C2330 + C25849 * C2512 +
            C25953 * C1937 - C26256 * C1725 - C25953 * C2333 + C25850 * C2513) *
               C89236 * C89093 * C1719 -
           (C25953 * C10660 - C26256 * C10544 - C25953 * C10878 +
            C25850 * C10989 + C25952 * C1937 - C26255 * C1725 - C25952 * C2333 +
            C25849 * C2513 + C25951 * C1934 - C26254 * C1724 - C25951 * C2330 +
            C25848 * C2512) *
               C89236 * C89093 * C1720 +
           (C25951 * C1937 - C26254 * C1725 - C25951 * C2333 + C25848 * C2513 +
            C25952 * C10660 - C26255 * C10544 - C25952 * C10878 +
            C25849 * C10989 + C25953 * C27225 - C26256 * C26997 -
            C25953 * C27601 + C25850 * C27779) *
               C89236 * C89093 * C1721) *
              C89137 * C815 +
          ((C25951 * C1935 - C26254 * C1723 - C25951 * C2331 + C25848 * C2511 +
            C25952 * C1938 - C26255 * C1726 - C25952 * C2334 + C25849 * C2514 +
            C25953 * C10661 - C26256 * C10543 - C25953 * C10879 +
            C25850 * C10988) *
               C89236 * C89093 * C1720 -
           (C25953 * C1938 - C26256 * C1726 - C25953 * C2334 + C25850 * C2514 +
            C25952 * C1935 - C26255 * C1723 - C25952 * C2331 + C25849 * C2511 +
            C25951 * C265 - C26254 * C107 - C25951 * C566 + C25848 * C701) *
               C89236 * C89093 * C1719 -
           (C25953 * C27226 - C26256 * C26998 - C25953 * C27602 +
            C25850 * C27780 + C25952 * C10661 - C26255 * C10543 -
            C25952 * C10879 + C25849 * C10988 + C25951 * C1938 -
            C26254 * C1726 - C25951 * C2334 + C25848 * C2514) *
               C89236 * C89093 * C1721) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q));
    d2eexx[33] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                C89247 * C13258 +
            C13794 * C13259 + C13795 * C13260) *
               C89308 -
           ((C13261 * C8521 - C13262 * C8516 - C13261 * C8522 +
             C89093 * C8525) *
                C89247 * C13260 +
            (C13261 * C4101 - C13262 * C4097 - C13261 * C4102 +
             C89093 * C4109) *
                C89247 * C13259 +
            (C13261 * C1734 - C13262 * C1724 - C13261 * C1735 +
             C89093 * C1748) *
                C89247 * C13258) *
               C89217) *
              C89137 * C89333 +
          (((C13261 * C1732 - C13262 * C1723 - C13261 * C1733 +
             C89093 * C1747) *
                C89247 * C13258 +
            (C13261 * C4103 - C13262 * C4098 - C13261 * C4104 +
             C89093 * C4110) *
                C89247 * C13259 +
            (C13261 * C8519 - C13262 * C8515 - C13261 * C8520 +
             C89093 * C8524) *
                C89247 * C13260) *
               C89217 -
           (C13798 * C13260 + C13797 * C13259 +
            (C13261 * C114 - C13262 * C107 - C13261 * C115 + C89093 * C125) *
                C89247 * C13258) *
               C89308) *
              C89137 * C89334 +
          (((C13261 * C116 - C13262 * C108 - C13261 * C117 + C89093 * C126) *
                C89247 * C13258 +
            C15314 * C13259 + C15315 * C13260) *
               C89308 -
           ((C13261 * C8517 - C13262 * C8514 - C13261 * C8518 +
             C89093 * C8523) *
                C89247 * C13260 +
            (C13261 * C4105 - C13262 * C4099 - C13261 * C4106 +
             C89093 * C4111) *
                C89247 * C13259 +
            (C13261 * C1730 - C13262 * C1722 - C13261 * C1731 +
             C89093 * C1746) *
                C89247 * C13258) *
               C89217) *
              C89137 * C2628)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C112 - C101 * C106 - C100 * C113 + C89 * C124 + C102 * C114 -
            C103 * C107 - C102 * C115 + C90 * C125 + C104 * C116 - C105 * C108 -
            C104 * C117 + C91 * C126) *
               C89247 * C89236 * C89308 -
           (C104 * C1730 - C105 * C1722 - C104 * C1731 + C91 * C1746 +
            C102 * C1732 - C103 * C1723 - C102 * C1733 + C90 * C1747 +
            C100 * C1734 - C101 * C1724 - C100 * C1735 + C89 * C1748) *
               C89247 * C89236 * C89217) *
              C89137 * C89333 +
          ((C100 * C1732 - C101 * C1723 - C100 * C1733 + C89 * C1747 +
            C102 * C1730 - C103 * C1722 - C102 * C1731 + C90 * C1746 +
            C104 * C1742 - C105 * C1728 - C104 * C1743 + C91 * C1752) *
               C89247 * C89236 * C89217 -
           (C104 * C118 - C105 * C109 - C104 * C119 + C91 * C127 + C102 * C116 -
            C103 * C108 - C102 * C117 + C90 * C126 + C100 * C114 - C101 * C107 -
            C100 * C115 + C89 * C125) *
               C89247 * C89236 * C89308) *
              C89137 * C89334 +
          ((C100 * C116 - C101 * C108 - C100 * C117 + C89 * C126 + C102 * C118 -
            C103 * C109 - C102 * C119 + C90 * C127 + C104 * C120 - C105 * C110 -
            C104 * C121 + C91 * C128) *
               C89247 * C89236 * C89308 -
           (C104 * C3353 - C105 * C3352 - C104 * C3354 + C91 * C3355 +
            C102 * C1742 - C103 * C1728 - C102 * C1743 + C90 * C1752 +
            C100 * C1730 - C101 * C1722 - C100 * C1731 + C89 * C1746) *
               C89247 * C89236 * C89217) *
              C89137 * C2628)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                C25848 +
            C27042 * C25849 + C27043 * C25850) *
               C89236 * C89308 -
           (C27044 * C25850 + C27043 * C25849 + C27042 * C25848) * C89236 *
               C89217) *
              C89137 * C89333 +
          ((C27045 * C25848 + C27046 * C25849 + C27047 * C25850) * C89236 *
               C89217 -
           (C27046 * C25850 + C27045 * C25849 +
            (C13261 * C114 - C13262 * C107 - C13261 * C115 + C89093 * C125) *
                C25848) *
               C89236 * C89308) *
              C89137 * C89334 +
          (((C13261 * C116 - C13262 * C108 - C13261 * C117 + C89093 * C126) *
                C25848 +
            C28534 * C25849 + C28535 * C25850) *
               C89236 * C89308 -
           ((C13261 * C10545 - C13262 * C10542 - C13261 * C10546 +
             C89093 * C10551) *
                C25850 +
            C28535 * C25849 + C28534 * C25848) *
               C89236 * C89217) *
              C89137 * C2628)) /
            (p * q * std::sqrt(p + q));
    d2eexy[33] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
             C13260 * C926 - C13315 * C820) *
                C13261 +
            (C13258 * C187 - C13313 * C113 + C13259 * C931 - C13314 * C830 +
             C13260 * C934 - C13315 * C832) *
                C89093) *
               C89247 * C89308 +
           ((C13313 * C1724 - C13258 * C1828 + C13314 * C4097 - C13259 * C4211 +
             C13315 * C8516 - C13260 * C8600) *
                C13261 +
            (C13313 * C1735 - C13258 * C1836 + C13314 * C4102 - C13259 * C4215 +
             C13315 * C8522 - C13260 * C8603) *
                C89093) *
               C89247 * C89217) *
              C89137 * C89333 +
          (((C13313 * C107 - C13258 * C182 + C13314 * C818 - C13259 * C924 +
             C13315 * C821 - C13260 * C927) *
                C13261 +
            (C13313 * C115 - C13258 * C188 + C13314 * C828 - C13259 * C932 +
             C13315 * C834 - C13260 * C935) *
                C89093) *
               C89247 * C89308 +
           ((C13258 * C1829 - C13313 * C1723 + C13259 * C4212 - C13314 * C4098 +
             C13260 * C8601 - C13315 * C8515) *
                C13261 +
            (C13258 * C1837 - C13313 * C1733 + C13259 * C4216 - C13314 * C4104 +
             C13260 * C8604 - C13315 * C8520) *
                C89093) *
               C89247 * C89217) *
              C89137 * C89334 +
          (((C13258 * C183 - C13313 * C108 + C13259 * C925 - C13314 * C817 +
             C13260 * C928 - C13315 * C822) *
                C13261 +
            (C13258 * C189 - C13313 * C117 + C13259 * C933 - C13314 * C826 +
             C13260 * C936 - C13315 * C836) *
                C89093) *
               C89247 * C89308 +
           ((C13313 * C1722 - C13258 * C1830 + C13314 * C4099 - C13259 * C4213 +
             C13315 * C8514 - C13260 * C8602) *
                C13261 +
            (C13313 * C1731 - C13258 * C1838 + C13314 * C4106 - C13259 * C4217 +
             C13315 * C8518 - C13260 * C8605) *
                C89093) *
               C89247 * C89217) *
              C89137 * C2628)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89236 * C181 - C180 * C106) * C100 +
            (C89236 * C187 - C180 * C113) * C89 + (C194 - C195) * C102 +
            (C196 - C197) * C90 + C210 * C104 + C211 * C91) *
               C89247 * C89308 +
           ((C180 * C1724 - C89236 * C1828) * C100 +
            (C180 * C1735 - C89236 * C1836) * C89 + (C1845 - C1846) * C102 +
            (C1847 - C1848) * C90 + C3433 * C104 + C3434 * C91) *
               C89247 * C89217) *
              C89137 * C89333 +
          (((C195 - C194) * C100 + (C197 - C196) * C89 + (C199 - C198) * C102 +
            (C201 - C200) * C90 + C212 * C104 + C213 * C91) *
               C89247 * C89308 +
           ((C1846 - C1845) * C100 + (C1848 - C1847) * C89 +
            (C1850 - C1849) * C102 + (C1852 - C1851) * C90 +
            (C3435 - C3436) * C104 + (C3437 - C3438) * C91) *
               C89247 * C89217) *
              C89137 * C89334 +
          ((C210 * C100 + C211 * C89 + (C203 - C202) * C102 +
            (C205 - C204) * C90 + (C206 - C207) * C104 + (C208 - C209) * C91) *
               C89247 * C89308 +
           (C3433 * C100 + C3434 * C89 + (C3436 - C3435) * C102 +
            (C3438 - C3437) * C90 + (C180 * C3352 - C89236 * C3430) * C104 +
            (C180 * C3354 - C89236 * C3431) * C91) *
               C89247 * C89217) *
              C89137 * C2628)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C13261 +
             (C89236 * C187 - C180 * C113) * C89093) *
                C25848 +
            ((C27126 - C27127) * C13261 + (C27128 - C27129) * C89093) * C25849 +
            C27151 * C25850) *
               C89308 +
           (((C27127 - C27126) * C13261 + (C27129 - C27128) * C89093) * C25848 +
            ((C27131 - C27130) * C13261 + (C27133 - C27132) * C89093) * C25849 +
            ((C27134 - C27135) * C13261 + (C27136 - C27137) * C89093) *
                C25850) *
               C89217) *
              C89137 * C89333 +
          ((((C195 - C194) * C13261 + (C197 - C196) * C89093) * C25848 +
            ((C1845 - C1846) * C13261 + (C1847 - C1848) * C89093) * C25849 +
            C27150 * C25850) *
               C89308 +
           (((C1846 - C1845) * C13261 + (C1848 - C1847) * C89093) * C25848 +
            ((C1853 - C1854) * C13261 + (C1855 - C1856) * C89093) * C25849 +
            ((C27140 - C27141) * C13261 + (C27142 - C27143) * C89093) *
                C25850) *
               C89217) *
              C89137 * C89334 +
          (((C210 * C13261 + C211 * C89093) * C25848 +
            ((C1850 - C1849) * C13261 + (C1852 - C1851) * C89093) * C25849 +
            ((C1857 - C1858) * C13261 + (C1859 - C1860) * C89093) * C25850) *
               C89308 +
           ((C3433 * C13261 + C3434 * C89093) * C25848 +
            ((C1858 - C1857) * C13261 + (C1860 - C1859) * C89093) * C25849 +
            ((C180 * C10542 - C89236 * C10606) * C13261 +
             (C180 * C10546 - C89236 * C10609) * C89093) *
                C25850) *
               C89217) *
              C89137 * C2628)) /
            (p * q * std::sqrt(p + q));
    d2eexz[33] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C13261 +
             (C89247 * C270 - C263 * C113) * C89093) *
                C13258 +
            ((C13956 - C13957) * C13261 + (C13958 - C13959) * C89093) * C13259 +
            C13981 * C13260) *
               C89308 +
           (((C263 * C1724 - C89247 * C1934) * C13261 +
             (C263 * C1735 - C89247 * C1942) * C89093) *
                C13258 +
            ((C263 * C4097 - C89247 * C4325) * C13261 +
             (C263 * C4102 - C89247 * C4329) * C89093) *
                C13259 +
            ((C263 * C8516 - C89247 * C8680) * C13261 +
             (C263 * C8522 - C89247 * C8683) * C89093) *
                C13260) *
               C89217) *
              C89137 * C89333 +
          ((((C278 - C277) * C13261 + (C280 - C279) * C89093) * C13258 +
            ((C1046 - C1047) * C13261 + (C1048 - C1049) * C89093) * C13259 +
            C13980 * C13260) *
               C89308 +
           (((C1952 - C1951) * C13261 + (C1954 - C1953) * C89093) * C13258 +
            ((C4334 - C4335) * C13261 + (C4336 - C4337) * C89093) * C13259 +
            ((C89247 * C8681 - C263 * C8515) * C13261 +
             (C89247 * C8684 - C263 * C8520) * C89093) *
                C13260) *
               C89217) *
              C89137 * C89334 +
          (((C293 * C13261 + C294 * C89093) * C13258 +
            ((C1051 - C1050) * C13261 + (C1053 - C1052) * C89093) * C13259 +
            ((C1058 - C1059) * C13261 + (C1060 - C1061) * C89093) * C13260) *
               C89308 +
           ((C3515 * C13261 + C3516 * C89093) * C13258 +
            ((C4339 - C4338) * C13261 + (C4341 - C4340) * C89093) * C13259 +
            ((C263 * C8514 - C89247 * C8682) * C13261 +
             (C263 * C8518 - C89247 * C8685) * C89093) *
                C13260) *
               C89217) *
              C89137 * C2628)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C100 +
            (C89247 * C270 - C263 * C113) * C89 + (C277 - C278) * C102 +
            (C279 - C280) * C90 + C293 * C104 + C294 * C91) *
               C89236 * C89308 +
           ((C263 * C1724 - C89247 * C1934) * C100 +
            (C263 * C1735 - C89247 * C1942) * C89 + (C1951 - C1952) * C102 +
            (C1953 - C1954) * C90 + C3515 * C104 + C3516 * C91) *
               C89236 * C89217) *
              C89137 * C89333 +
          (((C278 - C277) * C100 + (C280 - C279) * C89 + (C282 - C281) * C102 +
            (C284 - C283) * C90 + C295 * C104 + C296 * C91) *
               C89236 * C89308 +
           ((C1952 - C1951) * C100 + (C1954 - C1953) * C89 +
            (C1956 - C1955) * C102 + (C1958 - C1957) * C90 +
            (C3517 - C3518) * C104 + (C3519 - C3520) * C91) *
               C89236 * C89217) *
              C89137 * C89334 +
          ((C293 * C100 + C294 * C89 + (C286 - C285) * C102 +
            (C288 - C287) * C90 + (C289 - C290) * C104 + (C291 - C292) * C91) *
               C89236 * C89308 +
           (C3515 * C100 + C3516 * C89 + (C3518 - C3517) * C102 +
            (C3520 - C3519) * C90 + (C263 * C3352 - C89247 * C3512) * C104 +
            (C263 * C3354 - C89247 * C3513) * C91) *
               C89236 * C89217) *
              C89137 * C2628)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C25848 * C264 - C25951 * C106 + C25849 * C1934 - C25952 * C1724 +
             C25850 * C1937 - C25953 * C1725) *
                C13261 +
            (C25848 * C270 - C25951 * C113 + C25849 * C1942 - C25952 * C1735 +
             C25850 * C1945 - C25953 * C1737) *
                C89093) *
               C89236 * C89308 +
           ((C25951 * C1724 - C25848 * C1934 + C25952 * C1725 - C25849 * C1937 +
             C25953 * C10544 - C25850 * C10660) *
                C13261 +
            (C25951 * C1735 - C25848 * C1942 + C25952 * C1737 - C25849 * C1945 +
             C25953 * C10550 - C25850 * C10663) *
                C89093) *
               C89236 * C89217) *
              C89137 * C89333 +
          (((C25951 * C107 - C25848 * C265 + C25952 * C1723 - C25849 * C1935 +
             C25953 * C1726 - C25850 * C1938) *
                C13261 +
            (C25951 * C115 - C25848 * C271 + C25952 * C1733 - C25849 * C1943 +
             C25953 * C1739 - C25850 * C1946) *
                C89093) *
               C89236 * C89308 +
           ((C25848 * C1935 - C25951 * C1723 + C25849 * C1938 - C25952 * C1726 +
             C25850 * C10661 - C25953 * C10543) *
                C13261 +
            (C25848 * C1943 - C25951 * C1733 + C25849 * C1946 - C25952 * C1739 +
             C25850 * C10664 - C25953 * C10548) *
                C89093) *
               C89236 * C89217) *
              C89137 * C89334 +
          (((C25848 * C266 - C25951 * C108 + C25849 * C1936 - C25952 * C1722 +
             C25850 * C1939 - C25953 * C1727) *
                C13261 +
            (C25848 * C272 - C25951 * C117 + C25849 * C1944 - C25952 * C1731 +
             C25850 * C1947 - C25953 * C1741) *
                C89093) *
               C89236 * C89308 +
           ((C25951 * C1722 - C25848 * C1936 + C25952 * C1727 - C25849 * C1939 +
             C25953 * C10542 - C25850 * C10662) *
                C13261 +
            (C25951 * C1731 - C25848 * C1944 + C25952 * C1741 - C25849 * C1947 +
             C25953 * C10546 - C25850 * C10665) *
                C89093) *
               C89236 * C89217) *
              C89137 * C2628)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[33] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89093 * C112 - C13261 * C106) * C13313 +
            (C89093 * C352 - C13261 * C346) * C13258 +
            (C14060 - C14061) * C13314 + (C14062 - C14063) * C13259 +
            C14084 * C13315 + C14085 * C13260) *
               C89247 * C89308 +
           ((C13261 * C1724 - C89093 * C1734) * C13313 +
            (C13261 * C2040 - C89093 * C2048) * C13258 +
            (C13261 * C4097 - C89093 * C4101) * C13314 +
            (C13261 * C4439 - C89093 * C4443) * C13259 +
            (C13261 * C8516 - C89093 * C8521) * C13315 +
            (C13261 * C8760 - C89093 * C8763) * C13260) *
               C89247 * C89217) *
              C89137 * C89333 +
          (((C13261 * C107 - C89093 * C114) * C13313 +
            (C13261 * C347 - C89093 * C353) * C13258 +
            (C14072 - C14073) * C13314 + (C14074 - C14075) * C13259 +
            C14086 * C13315 + C14087 * C13260) *
               C89247 * C89308 +
           ((C89093 * C1732 - C13261 * C1723) * C13313 +
            (C89093 * C2049 - C13261 * C2041) * C13258 +
            (C89093 * C4103 - C13261 * C4098) * C13314 +
            (C89093 * C4444 - C13261 * C4440) * C13259 +
            (C89093 * C8519 - C13261 * C8515) * C13315 +
            (C89093 * C8764 - C13261 * C8761) * C13260) *
               C89247 * C89217) *
              C89137 * C89334 +
          (((C89093 * C116 - C13261 * C108) * C13313 +
            (C89093 * C354 - C13261 * C348) * C13258 +
            (C15538 - C15539) * C13314 + (C15540 - C15541) * C13259 +
            (C15542 - C15543) * C13315 + (C15544 - C15545) * C13260) *
               C89247 * C89308 +
           ((C13261 * C1722 - C89093 * C1730) * C13313 +
            (C13261 * C2042 - C89093 * C2050) * C13258 +
            (C13261 * C4099 - C89093 * C4105) * C13314 +
            (C13261 * C4441 - C89093 * C4445) * C13259 +
            (C13261 * C8514 - C89093 * C8517) * C13315 +
            (C13261 * C8762 - C89093 * C8765) * C13260) *
               C89247 * C89217) *
              C89137 * C2628)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 + C91 * C116 -
             C104 * C108) *
                C180 +
            (C89 * C352 - C100 * C346 + C90 * C353 - C102 * C347 + C91 * C354 -
             C104 * C348) *
                C89236) *
               C89247 * C89308 +
           ((C100 * C1724 - C89 * C1734 + C102 * C1723 - C90 * C1732 +
             C104 * C1722 - C91 * C1730) *
                C180 +
            (C100 * C2040 - C89 * C2048 + C102 * C2041 - C90 * C2049 +
             C104 * C2042 - C91 * C2050) *
                C89236) *
               C89247 * C89217) *
              C89137 * C89333 +
          (((C100 * C107 - C89 * C114 + C102 * C108 - C90 * C116 + C104 * C109 -
             C91 * C118) *
                C180 +
            (C100 * C347 - C89 * C353 + C102 * C348 - C90 * C354 + C104 * C349 -
             C91 * C355) *
                C89236) *
               C89247 * C89308 +
           ((C89 * C1732 - C100 * C1723 + C90 * C1730 - C102 * C1722 +
             C91 * C1742 - C104 * C1728) *
                C180 +
            (C89 * C2049 - C100 * C2041 + C90 * C2050 - C102 * C2042 +
             C91 * C2054 - C104 * C2046) *
                C89236) *
               C89247 * C89217) *
              C89137 * C89334 +
          (((C89 * C116 - C100 * C108 + C90 * C118 - C102 * C109 + C91 * C120 -
             C104 * C110) *
                C180 +
            (C89 * C354 - C100 * C348 + C90 * C355 - C102 * C349 + C91 * C356 -
             C104 * C350) *
                C89236) *
               C89247 * C89308 +
           ((C100 * C1722 - C89 * C1730 + C102 * C1728 - C90 * C1742 +
             C104 * C3352 - C91 * C3353) *
                C180 +
            (C100 * C2042 - C89 * C2050 + C102 * C2046 - C90 * C2054 +
             C104 * C3594 - C91 * C3595) *
                C89236) *
               C89247 * C89217) *
              C89137 * C2628)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C180 +
             (C89093 * C352 - C13261 * C346) * C89236) *
                C25848 +
            ((C27308 - C27309) * C180 + (C27310 - C27311) * C89236) * C25849 +
            C27340 * C25850) *
               C89308 +
           (((C27309 - C27308) * C180 + (C27311 - C27310) * C89236) * C25848 +
            ((C27313 - C27312) * C180 + (C27315 - C27314) * C89236) * C25849 +
            ((C27316 - C27317) * C180 + (C27318 - C27319) * C89236) * C25850) *
               C89217) *
              C89137 * C89333 +
          ((((C13261 * C107 - C89093 * C114) * C180 +
             (C13261 * C347 - C89093 * C353) * C89236) *
                C25848 +
            ((C27320 - C27321) * C180 + (C27322 - C27323) * C89236) * C25849 +
            C27341 * C25850) *
               C89308 +
           (((C27321 - C27320) * C180 + (C27323 - C27322) * C89236) * C25848 +
            ((C27325 - C27324) * C180 + (C27327 - C27326) * C89236) * C25849 +
            ((C27328 - C27329) * C180 + (C27330 - C27331) * C89236) * C25850) *
               C89217) *
              C89137 * C89334 +
          ((((C89093 * C116 - C13261 * C108) * C180 +
             (C89093 * C354 - C13261 * C348) * C89236) *
                C25848 +
            ((C28758 - C28759) * C180 + (C28760 - C28761) * C89236) * C25849 +
            ((C28762 - C28763) * C180 + (C28764 - C28765) * C89236) * C25850) *
               C89308 +
           (((C28759 - C28758) * C180 + (C28761 - C28760) * C89236) * C25848 +
            ((C28763 - C28762) * C180 + (C28765 - C28764) * C89236) * C25849 +
            ((C13261 * C10542 - C89093 * C10545) * C180 +
             (C13261 * C10718 - C89093 * C10721) * C89236) *
                C25850) *
               C89217) *
              C89137 * C2628)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[33] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13313 * C181 - C13466 * C106 - C13313 * C346 + C13258 * C409 +
            C13314 * C923 - C13467 * C819 - C13314 * C1135 + C13259 * C1227 +
            C13315 * C926 - C13468 * C820 - C13315 * C1138 + C13260 * C1228) *
               C89093 * C89247 * C89308 -
           (C13315 * C8600 - C13468 * C8516 - C13315 * C8760 + C13260 * C8842 +
            C13314 * C4211 - C13467 * C4097 - C13314 * C4439 + C13259 * C4545 +
            C13313 * C1828 - C13466 * C1724 - C13313 * C2040 + C13258 * C2132) *
               C89093 * C89247 * C89217) *
              C89137 * C89333 +
          ((C13313 * C1829 - C13466 * C1723 - C13313 * C2041 + C13258 * C2131 +
            C13314 * C4212 - C13467 * C4098 - C13314 * C4440 + C13259 * C4546 +
            C13315 * C8601 - C13468 * C8515 - C13315 * C8761 + C13260 * C8841) *
               C89093 * C89247 * C89217 -
           (C13315 * C927 - C13468 * C821 - C13315 * C1139 + C13260 * C1229 +
            C13314 * C924 - C13467 * C818 - C13314 * C1136 + C13259 * C1226 +
            C13313 * C182 - C13466 * C107 - C13313 * C347 + C13258 * C410) *
               C89093 * C89247 * C89308) *
              C89137 * C89334 +
          ((C13313 * C183 - C13466 * C108 - C13313 * C348 + C13258 * C411 +
            C13314 * C925 - C13467 * C817 - C13314 * C1137 + C13259 * C1225 +
            C13315 * C928 - C13468 * C822 - C13315 * C1140 + C13260 * C1230) *
               C89093 * C89247 * C89308 -
           (C13315 * C8602 - C13468 * C8514 - C13315 * C8762 + C13260 * C8840 +
            C13314 * C4213 - C13467 * C4099 - C13314 * C4441 + C13259 * C4547 +
            C13313 * C1830 - C13466 * C1722 - C13313 * C2042 + C13258 * C2130) *
               C89093 * C89247 * C89217) *
              C89137 * C2628)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C89 +
            C440 * C90 + C441 * C91) *
               C89247 * C89308 -
           (C2163 * C91 + C2164 * C90 +
            (C180 * C1828 - C408 * C1724 - C180 * C2040 + C89236 * C2132) *
                C89) *
               C89247 * C89217) *
              C89137 * C89333 +
          ((C2164 * C89 + C2163 * C90 + C3678 * C91) * C89247 * C89217 -
           (C442 * C91 + C441 * C90 + C440 * C89) * C89247 * C89308) *
              C89137 * C89334 +
          ((C441 * C89 + C442 * C90 + C443 * C91) * C89247 * C89308 -
           ((C180 * C3430 - C408 * C3352 - C180 * C3594 + C89236 * C3670) *
                C91 +
            C3678 * C90 + C2163 * C89) *
               C89247 * C89217) *
              C89137 * C2628)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C89093 *
                C25848 +
            C27448 * C25849 + C27449 * C25850) *
               C89308 -
           (C27450 * C25850 + C27449 * C25849 + C27448 * C25848) * C89217) *
              C89137 * C89333 +
          ((C27430 * C25848 + C27431 * C25849 + C27451 * C25850) * C89217 -
           (C27431 * C25850 + C27430 * C25849 + C440 * C89093 * C25848) *
               C89308) *
              C89137 * C89334 +
          ((C441 * C89093 * C25848 + C28840 * C25849 + C28841 * C25850) *
               C89308 -
           ((C180 * C10606 - C408 * C10542 - C180 * C10718 + C89236 * C10772) *
                C89093 * C25850 +
            C28841 * C25849 + C28840 * C25848) *
               C89217) *
              C89137 * C2628)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[33] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C13313 +
            (C89247 * C493 - C263 * C346) * C13258 +
            (C13956 - C13957) * C13314 + (C14240 - C14241) * C13259 +
            C13974 * C13315 + C14249 * C13260) *
               C89093 * C89308 +
           ((C263 * C1724 - C89247 * C1934) * C13313 +
            (C263 * C2040 - C89247 * C2240) * C13258 +
            (C263 * C4097 - C89247 * C4325) * C13314 +
            (C263 * C4439 - C89247 * C4661) * C13259 +
            (C263 * C8516 - C89247 * C8680) * C13315 +
            (C263 * C8760 - C89247 * C8917) * C13260) *
               C89093 * C89217) *
              C89137 * C89333 +
          (((C278 - C277) * C13313 + (C501 - C500) * C13258 +
            (C1046 - C1047) * C13314 + (C1344 - C1345) * C13259 +
            C13968 * C13315 + C14246 * C13260) *
               C89093 * C89308 +
           ((C1952 - C1951) * C13313 + (C2250 - C2249) * C13258 +
            (C4334 - C4335) * C13314 + (C4666 - C4667) * C13259 +
            (C89247 * C8681 - C263 * C8515) * C13315 +
            (C89247 * C8918 - C263 * C8761) * C13260) *
               C89093 * C89217) *
              C89137 * C89334 +
          ((C293 * C13313 + C510 * C13258 + (C1051 - C1050) * C13314 +
            (C1347 - C1346) * C13259 + (C1058 - C1059) * C13315 +
            (C1350 - C1351) * C13260) *
               C89093 * C89308 +
           (C3515 * C13313 + C3755 * C13258 + (C4339 - C4338) * C13314 +
            (C4669 - C4668) * C13259 +
            (C263 * C8514 - C89247 * C8682) * C13315 +
            (C263 * C8762 - C89247 * C8919) * C13260) *
               C89093 * C89217) *
              C89137 * C2628)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C180 +
             (C89247 * C493 - C263 * C346) * C89236) *
                C89 +
            ((C277 - C278) * C180 + (C500 - C501) * C89236) * C90 +
            C514 * C91) *
               C89308 +
           (((C263 * C1724 - C89247 * C1934) * C180 +
             (C263 * C2040 - C89247 * C2240) * C89236) *
                C89 +
            ((C1951 - C1952) * C180 + (C2249 - C2250) * C89236) * C90 +
            C3759 * C91) *
               C89217) *
              C89137 * C89333 +
          ((((C278 - C277) * C180 + (C501 - C500) * C89236) * C89 +
            ((C282 - C281) * C180 + (C504 - C503) * C89236) * C90 +
            C515 * C91) *
               C89308 +
           (((C1952 - C1951) * C180 + (C2250 - C2249) * C89236) * C89 +
            ((C1956 - C1955) * C180 + (C2252 - C2251) * C89236) * C90 +
            ((C3517 - C3518) * C180 + (C3756 - C3757) * C89236) * C91) *
               C89217) *
              C89137 * C89334 +
          ((C514 * C89 + ((C286 - C285) * C180 + (C507 - C506) * C89236) * C90 +
            ((C289 - C290) * C180 + (C508 - C509) * C89236) * C91) *
               C89308 +
           (C3759 * C89 +
            ((C3518 - C3517) * C180 + (C3757 - C3756) * C89236) * C90 +
            ((C263 * C3352 - C89247 * C3512) * C180 +
             (C263 * C3594 - C89247 * C3752) * C89236) *
                C91) *
               C89217) *
              C89137 * C2628)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C25848 * C264 - C25951 * C106 + C25849 * C1934 - C25952 * C1724 +
             C25850 * C1937 - C25953 * C1725) *
                C180 +
            (C25848 * C493 - C25951 * C346 + C25849 * C2240 - C25952 * C2040 +
             C25850 * C2243 - C25953 * C2043) *
                C89236) *
               C89093 * C89308 +
           ((C25951 * C1724 - C25848 * C1934 + C25952 * C1725 - C25849 * C1937 +
             C25953 * C10544 - C25850 * C10660) *
                C180 +
            (C25951 * C2040 - C25848 * C2240 + C25952 * C2043 - C25849 * C2243 +
             C25953 * C10716 - C25850 * C10825) *
                C89236) *
               C89093 * C89217) *
              C89137 * C89333 +
          (((C25951 * C107 - C25848 * C265 + C25952 * C1723 - C25849 * C1935 +
             C25953 * C1726 - C25850 * C1938) *
                C180 +
            (C25951 * C347 - C25848 * C494 + C25952 * C2041 - C25849 * C2241 +
             C25953 * C2044 - C25850 * C2244) *
                C89236) *
               C89093 * C89308 +
           ((C25848 * C1935 - C25951 * C1723 + C25849 * C1938 - C25952 * C1726 +
             C25850 * C10661 - C25953 * C10543) *
                C180 +
            (C25848 * C2241 - C25951 * C2041 + C25849 * C2244 - C25952 * C2044 +
             C25850 * C10826 - C25953 * C10717) *
                C89236) *
               C89093 * C89217) *
              C89137 * C89334 +
          (((C25848 * C266 - C25951 * C108 + C25849 * C1936 - C25952 * C1722 +
             C25850 * C1939 - C25953 * C1727) *
                C180 +
            (C25848 * C495 - C25951 * C348 + C25849 * C2242 - C25952 * C2042 +
             C25850 * C2245 - C25953 * C2045) *
                C89236) *
               C89093 * C89308 +
           ((C25951 * C1722 - C25848 * C1936 + C25952 * C1727 - C25849 * C1939 +
             C25953 * C10542 - C25850 * C10662) *
                C180 +
            (C25951 * C2042 - C25848 * C2242 + C25952 * C2045 - C25849 * C2245 +
             C25953 * C10718 - C25850 * C10827) *
                C89236) *
               C89093 * C89217) *
              C89137 * C2628)) /
            (p * q * std::sqrt(p + q));
    d2eezx[33] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C263 +
             (C89093 * C571 - C13261 * C565) * C89247) *
                C13258 +
            ((C14060 - C14061) * C263 + (C14328 - C14329) * C89247) * C13259 +
            C14346 * C13260) *
               C89308 +
           (((C13261 * C1724 - C89093 * C1734) * C263 +
             (C13261 * C2330 - C89093 * C2338) * C89247) *
                C13258 +
            ((C13261 * C4097 - C89093 * C4101) * C263 +
             (C13261 * C4767 - C89093 * C4771) * C89247) *
                C13259 +
            ((C13261 * C8516 - C89093 * C8521) * C263 +
             (C13261 * C8994 - C89093 * C8997) * C89247) *
                C13260) *
               C89217) *
              C89137 * C89333 +
          ((((C13261 * C107 - C89093 * C114) * C263 +
             (C13261 * C566 - C89093 * C572) * C89247) *
                C13258 +
            ((C14072 - C14073) * C263 + (C14335 - C14336) * C89247) * C13259 +
            C14347 * C13260) *
               C89308 +
           (((C89093 * C1732 - C13261 * C1723) * C263 +
             (C89093 * C2339 - C13261 * C2331) * C89247) *
                C13258 +
            ((C89093 * C4103 - C13261 * C4098) * C263 +
             (C89093 * C4772 - C13261 * C4768) * C89247) *
                C13259 +
            ((C89093 * C8519 - C13261 * C8515) * C263 +
             (C89093 * C8998 - C13261 * C8995) * C89247) *
                C13260) *
               C89217) *
              C89137 * C89334 +
          ((((C89093 * C116 - C13261 * C108) * C263 +
             (C89093 * C573 - C13261 * C567) * C89247) *
                C13258 +
            ((C15538 - C15539) * C263 + (C15768 - C15769) * C89247) * C13259 +
            ((C15542 - C15543) * C263 + (C15770 - C15771) * C89247) * C13260) *
               C89308 +
           (((C13261 * C1722 - C89093 * C1730) * C263 +
             (C13261 * C2332 - C89093 * C2340) * C89247) *
                C13258 +
            ((C13261 * C4099 - C89093 * C4105) * C263 +
             (C13261 * C4769 - C89093 * C4773) * C89247) *
                C13259 +
            ((C13261 * C8514 - C89093 * C8517) * C263 +
             (C13261 * C8996 - C89093 * C8999) * C89247) *
                C13260) *
               C89217) *
              C89137 * C2628)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 + C91 * C116 -
             C104 * C108) *
                C263 +
            (C89 * C571 - C100 * C565 + C90 * C572 - C102 * C566 + C91 * C573 -
             C104 * C567) *
                C89247) *
               C89236 * C89308 +
           ((C100 * C1724 - C89 * C1734 + C102 * C1723 - C90 * C1732 +
             C104 * C1722 - C91 * C1730) *
                C263 +
            (C100 * C2330 - C89 * C2338 + C102 * C2331 - C90 * C2339 +
             C104 * C2332 - C91 * C2340) *
                C89247) *
               C89236 * C89217) *
              C89137 * C89333 +
          (((C100 * C107 - C89 * C114 + C102 * C108 - C90 * C116 + C104 * C109 -
             C91 * C118) *
                C263 +
            (C100 * C566 - C89 * C572 + C102 * C567 - C90 * C573 + C104 * C568 -
             C91 * C574) *
                C89247) *
               C89236 * C89308 +
           ((C89 * C1732 - C100 * C1723 + C90 * C1730 - C102 * C1722 +
             C91 * C1742 - C104 * C1728) *
                C263 +
            (C89 * C2339 - C100 * C2331 + C90 * C2340 - C102 * C2332 +
             C91 * C2344 - C104 * C2336) *
                C89247) *
               C89236 * C89217) *
              C89137 * C89334 +
          (((C89 * C116 - C100 * C108 + C90 * C118 - C102 * C109 + C91 * C120 -
             C104 * C110) *
                C263 +
            (C89 * C573 - C100 * C567 + C90 * C574 - C102 * C568 + C91 * C575 -
             C104 * C569) *
                C89247) *
               C89236 * C89308 +
           ((C100 * C1722 - C89 * C1730 + C102 * C1728 - C90 * C1742 +
             C104 * C3352 - C91 * C3353) *
                C263 +
            (C100 * C2332 - C89 * C2340 + C102 * C2336 - C90 * C2344 +
             C104 * C3833 - C91 * C3834) *
                C89247) *
               C89236 * C89217) *
              C89137 * C2628)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C89093 * C112 - C13261 * C106) * C25951 +
            (C89093 * C571 - C13261 * C565) * C25848 +
            (C27308 - C27309) * C25952 + (C27606 - C27607) * C25849 +
            C27332 * C25953 + C27618 * C25850) *
               C89236 * C89308 +
           ((C27309 - C27308) * C25951 + (C27607 - C27606) * C25848 +
            (C27313 - C27312) * C25952 + (C27609 - C27608) * C25849 +
            (C27316 - C27317) * C25953 + (C27610 - C27611) * C25850) *
               C89236 * C89217) *
              C89137 * C89333 +
          (((C13261 * C107 - C89093 * C114) * C25951 +
            (C13261 * C566 - C89093 * C572) * C25848 +
            (C27320 - C27321) * C25952 + (C27612 - C27613) * C25849 +
            C27334 * C25953 + C27619 * C25850) *
               C89236 * C89308 +
           ((C27321 - C27320) * C25951 + (C27613 - C27612) * C25848 +
            (C27325 - C27324) * C25952 + (C27615 - C27614) * C25849 +
            (C27328 - C27329) * C25953 + (C27616 - C27617) * C25850) *
               C89236 * C89217) *
              C89137 * C89334 +
          (((C89093 * C116 - C13261 * C108) * C25951 +
            (C89093 * C573 - C13261 * C567) * C25848 +
            (C28758 - C28759) * C25952 + (C28990 - C28991) * C25849 +
            (C28762 - C28763) * C25953 + (C28992 - C28993) * C25850) *
               C89236 * C89308 +
           ((C28759 - C28758) * C25951 + (C28991 - C28990) * C25848 +
            (C28763 - C28762) * C25952 + (C28993 - C28992) * C25849 +
            (C13261 * C10542 - C89093 * C10545) * C25953 +
            (C13261 * C10880 - C89093 * C10883) * C25850) *
               C89236 * C89217) *
              C89137 * C2628)) /
            (p * q * std::sqrt(p + q));
    d2eezy[33] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
             C13260 * C926 - C13315 * C820) *
                C263 +
            (C13258 * C627 - C13313 * C565 + C13259 * C1515 - C13314 * C1425 +
             C13260 * C1518 - C13315 * C1428) *
                C89247) *
               C89093 * C89308 +
           ((C13313 * C1724 - C13258 * C1828 + C13314 * C4097 - C13259 * C4211 +
             C13315 * C8516 - C13260 * C8600) *
                C263 +
            (C13313 * C2330 - C13258 * C2420 + C13314 * C4767 - C13259 * C4873 +
             C13315 * C8994 - C13260 * C9074) *
                C89247) *
               C89093 * C89217) *
              C89137 * C89333 +
          (((C13313 * C107 - C13258 * C182 + C13314 * C818 - C13259 * C924 +
             C13315 * C821 - C13260 * C927) *
                C263 +
            (C13313 * C566 - C13258 * C628 + C13314 * C1426 - C13259 * C1516 +
             C13315 * C1429 - C13260 * C1519) *
                C89247) *
               C89093 * C89308 +
           ((C13258 * C1829 - C13313 * C1723 + C13259 * C4212 - C13314 * C4098 +
             C13260 * C8601 - C13315 * C8515) *
                C263 +
            (C13258 * C2421 - C13313 * C2331 + C13259 * C4874 - C13314 * C4768 +
             C13260 * C9075 - C13315 * C8995) *
                C89247) *
               C89093 * C89217) *
              C89137 * C89334 +
          (((C13258 * C183 - C13313 * C108 + C13259 * C925 - C13314 * C817 +
             C13260 * C928 - C13315 * C822) *
                C263 +
            (C13258 * C629 - C13313 * C567 + C13259 * C1517 - C13314 * C1427 +
             C13260 * C1520 - C13315 * C1430) *
                C89247) *
               C89093 * C89308 +
           ((C13313 * C1722 - C13258 * C1830 + C13314 * C4099 - C13259 * C4213 +
             C13315 * C8514 - C13260 * C8602) *
                C263 +
            (C13313 * C2332 - C13258 * C2422 + C13314 * C4769 - C13259 * C4875 +
             C13315 * C8996 - C13260 * C9076) *
                C89247) *
               C89093 * C89217) *
              C89137 * C2628)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C263 +
             (C89236 * C627 - C180 * C565) * C89247) *
                C89 +
            ((C194 - C195) * C263 + (C634 - C635) * C89247) * C90 +
            C648 * C91) *
               C89308 +
           (((C180 * C1724 - C89236 * C1828) * C263 +
             (C180 * C2330 - C89236 * C2420) * C89247) *
                C89 +
            ((C1845 - C1846) * C263 + (C2429 - C2430) * C89247) * C90 +
            C3916 * C91) *
               C89217) *
              C89137 * C89333 +
          ((((C195 - C194) * C263 + (C635 - C634) * C89247) * C89 +
            ((C199 - C198) * C263 + (C638 - C637) * C89247) * C90 +
            C649 * C91) *
               C89308 +
           (((C1846 - C1845) * C263 + (C2430 - C2429) * C89247) * C89 +
            ((C1850 - C1849) * C263 + (C2432 - C2431) * C89247) * C90 +
            ((C3435 - C3436) * C263 + (C3913 - C3914) * C89247) * C91) *
               C89217) *
              C89137 * C89334 +
          ((C648 * C89 + ((C203 - C202) * C263 + (C641 - C640) * C89247) * C90 +
            ((C206 - C207) * C263 + (C642 - C643) * C89247) * C91) *
               C89308 +
           (C3916 * C89 +
            ((C3436 - C3435) * C263 + (C3914 - C3913) * C89247) * C90 +
            ((C180 * C3352 - C89236 * C3430) * C263 +
             (C180 * C3833 - C89236 * C3909) * C89247) *
                C91) *
               C89217) *
              C89137 * C2628)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C89236 * C181 - C180 * C106) * C25951 +
            (C89236 * C627 - C180 * C565) * C25848 +
            (C27126 - C27127) * C25952 + (C27696 - C27697) * C25849 +
            C27144 * C25953 + C27705 * C25850) *
               C89093 * C89308 +
           ((C27127 - C27126) * C25951 + (C27697 - C27696) * C25848 +
            (C27131 - C27130) * C25952 + (C27699 - C27698) * C25849 +
            (C27134 - C27135) * C25953 + (C27700 - C27701) * C25850) *
               C89093 * C89217) *
              C89137 * C89333 +
          (((C195 - C194) * C25951 + (C635 - C634) * C25848 +
            (C1845 - C1846) * C25952 + (C2429 - C2430) * C25849 +
            C27138 * C25953 + C27702 * C25850) *
               C89093 * C89308 +
           ((C1846 - C1845) * C25951 + (C2430 - C2429) * C25848 +
            (C1853 - C1854) * C25952 + (C2433 - C2434) * C25849 +
            (C27140 - C27141) * C25953 + (C27703 - C27704) * C25850) *
               C89093 * C89217) *
              C89137 * C89334 +
          ((C210 * C25951 + C644 * C25848 + (C1850 - C1849) * C25952 +
            (C2432 - C2431) * C25849 + (C1857 - C1858) * C25953 +
            (C2435 - C2436) * C25850) *
               C89093 * C89308 +
           (C3433 * C25951 + C3912 * C25848 + (C1858 - C1857) * C25952 +
            (C2436 - C2435) * C25849 +
            (C180 * C10542 - C89236 * C10606) * C25953 +
            (C180 * C10880 - C89236 * C10936) * C25850) *
               C89093 * C89217) *
              C89137 * C2628)) /
            (p * q * std::sqrt(p + q));
    d2eezz[33] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C13258 +
            C14524 * C13259 + C14525 * C13260) *
               C89093 * C89308 -
           ((C263 * C8680 - C699 * C8516 - C263 * C8994 + C89247 * C9153) *
                C13260 +
            (C263 * C4325 - C699 * C4097 - C263 * C4767 + C89247 * C4979) *
                C13259 +
            (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
                C13258) *
               C89093 * C89217) *
              C89137 * C89333 +
          ((C2544 * C13258 + C4996 * C13259 +
            (C263 * C8681 - C699 * C8515 - C263 * C8995 + C89247 * C9152) *
                C13260) *
               C89093 * C89217 -
           (C1640 * C13260 + C1639 * C13259 + C731 * C13258) * C89093 *
               C89308) *
              C89137 * C89334 +
          ((C732 * C13258 + C1638 * C13259 + C1641 * C13260) * C89093 * C89308 -
           ((C263 * C8682 - C699 * C8514 - C263 * C8996 + C89247 * C9151) *
                C13260 +
            C4997 * C13259 + C2543 * C13258) *
               C89093 * C89217) *
              C89137 * C2628)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C89236 *
                C89 +
            C735 * C90 + C736 * C91) *
               C89308 -
           (C2547 * C91 + C2548 * C90 +
            (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
                C89236 * C89) *
               C89217) *
              C89137 * C89333 +
          ((C2548 * C89 + C2547 * C90 + C3999 * C91) * C89217 -
           (C737 * C91 + C736 * C90 + C735 * C89) * C89308) *
              C89137 * C89334 +
          ((C736 * C89 + C737 * C90 + C738 * C91) * C89308 -
           ((C263 * C3512 - C699 * C3352 - C263 * C3833 + C89247 * C3990) *
                C89236 * C91 +
            C3999 * C90 + C2547 * C89) *
               C89217) *
              C89137 * C2628)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C25951 * C264 - C26254 * C106 - C25951 * C565 + C25848 * C700 +
            C25952 * C1934 - C26255 * C1724 - C25952 * C2330 + C25849 * C2512 +
            C25953 * C1937 - C26256 * C1725 - C25953 * C2333 + C25850 * C2513) *
               C89236 * C89093 * C89308 -
           (C25953 * C10660 - C26256 * C10544 - C25953 * C10878 +
            C25850 * C10989 + C25952 * C1937 - C26255 * C1725 - C25952 * C2333 +
            C25849 * C2513 + C25951 * C1934 - C26254 * C1724 - C25951 * C2330 +
            C25848 * C2512) *
               C89236 * C89093 * C89217) *
              C89137 * C89333 +
          ((C25951 * C1935 - C26254 * C1723 - C25951 * C2331 + C25848 * C2511 +
            C25952 * C1938 - C26255 * C1726 - C25952 * C2334 + C25849 * C2514 +
            C25953 * C10661 - C26256 * C10543 - C25953 * C10879 +
            C25850 * C10988) *
               C89236 * C89093 * C89217 -
           (C25953 * C1938 - C26256 * C1726 - C25953 * C2334 + C25850 * C2514 +
            C25952 * C1935 - C26255 * C1723 - C25952 * C2331 + C25849 * C2511 +
            C25951 * C265 - C26254 * C107 - C25951 * C566 + C25848 * C701) *
               C89236 * C89093 * C89308) *
              C89137 * C89334 +
          ((C25951 * C266 - C26254 * C108 - C25951 * C567 + C25848 * C702 +
            C25952 * C1936 - C26255 * C1722 - C25952 * C2332 + C25849 * C2510 +
            C25953 * C1939 - C26256 * C1727 - C25953 * C2335 + C25850 * C2515) *
               C89236 * C89093 * C89308 -
           (C25953 * C10662 - C26256 * C10542 - C25953 * C10880 +
            C25850 * C10987 + C25952 * C1939 - C26255 * C1727 - C25952 * C2335 +
            C25849 * C2515 + C25951 * C1936 - C26254 * C1722 - C25951 * C2332 +
            C25848 * C2510) *
               C89236 * C89093 * C89217) *
              C89137 * C2628)) /
            (p * q * std::sqrt(p + q));
    d2eexx[34] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C112 - C101 * C106 - C100 * C113 + C89 * C124 + C102 * C114 -
            C103 * C107 - C102 * C115 + C90 * C125 + C104 * C116 - C105 * C108 -
            C104 * C117 + C91 * C126) *
               C89247 * C89236 * C89153 * C812 -
           (C104 * C825 - C105 * C817 - C104 * C826 + C91 * C841 + C102 * C827 -
            C103 * C818 - C102 * C828 + C90 * C842 + C100 * C829 - C101 * C819 -
            C100 * C830 + C89 * C843) *
               C89247 * C89236 * C89153 * C813 +
           (C100 * C831 - C101 * C820 - C100 * C832 + C89 * C844 + C102 * C833 -
            C103 * C821 - C102 * C834 + C90 * C845 + C104 * C835 - C105 * C822 -
            C104 * C836 + C91 * C846) *
               C89247 * C89236 * C89153 * C814) *
              C815 +
          ((C100 * C827 - C101 * C818 - C100 * C828 + C89 * C842 + C102 * C825 -
            C103 * C817 - C102 * C826 + C90 * C841 + C104 * C837 - C105 * C823 -
            C104 * C838 + C91 * C847) *
               C89247 * C89236 * C89153 * C813 -
           (C104 * C118 - C105 * C109 - C104 * C119 + C91 * C127 + C102 * C116 -
            C103 * C108 - C102 * C117 + C90 * C126 + C100 * C114 - C101 * C107 -
            C100 * C115 + C89 * C125) *
               C89247 * C89236 * C89153 * C812 -
           (C104 * C839 - C105 * C824 - C104 * C840 + C91 * C848 + C102 * C835 -
            C103 * C822 - C102 * C836 + C90 * C846 + C100 * C833 - C101 * C821 -
            C100 * C834 + C89 * C845) *
               C89247 * C89236 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C100 * C112 - C101 * C106 - C100 * C113 + C89 * C124 + C102 * C114 -
           C103 * C107 - C102 * C115 + C90 * C125 + C104 * C116 - C105 * C108 -
           C104 * C117 + C91 * C126) *
              C89247 * C89236 * C89153 * C89137 * C96 -
          (C104 * C118 - C105 * C109 - C104 * C119 + C91 * C127 + C102 * C116 -
           C103 * C108 - C102 * C117 + C90 * C126 + C100 * C114 - C101 * C107 -
           C100 * C115 + C89 * C125) *
              C89247 * C89236 * C89153 * C89137 * C97 +
          (C100 * C116 - C101 * C108 - C100 * C117 + C89 * C126 + C102 * C118 -
           C103 * C109 - C102 * C119 + C90 * C127 + C104 * C120 - C105 * C110 -
           C104 * C121 + C91 * C128) *
              C89247 * C89236 * C89153 * C89137 * C98 -
          (C104 * C122 - C105 * C111 - C104 * C123 + C91 * C129 + C102 * C120 -
           C103 * C110 - C102 * C121 + C90 * C128 + C100 * C118 - C101 * C109 -
           C100 * C119 + C89 * C127) *
              C89247 * C89236 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
               C89247 * C13258 +
           (C13261 * C829 - C13262 * C819 - C13261 * C830 + C89093 * C843) *
               C89247 * C13259 +
           (C13261 * C831 - C13262 * C820 - C13261 * C832 + C89093 * C844) *
               C89247 * C13260) *
              C89153 * C89137 * C96 -
          ((C13261 * C833 - C13262 * C821 - C13261 * C834 + C89093 * C845) *
               C89247 * C13260 +
           (C13261 * C827 - C13262 * C818 - C13261 * C828 + C89093 * C842) *
               C89247 * C13259 +
           (C13261 * C114 - C13262 * C107 - C13261 * C115 + C89093 * C125) *
               C89247 * C13258) *
              C89153 * C89137 * C97 +
          ((C13261 * C116 - C13262 * C108 - C13261 * C117 + C89093 * C126) *
               C89247 * C13258 +
           (C13261 * C825 - C13262 * C817 - C13261 * C826 + C89093 * C841) *
               C89247 * C13259 +
           (C13261 * C835 - C13262 * C822 - C13261 * C836 + C89093 * C846) *
               C89247 * C13260) *
              C89153 * C89137 * C98 -
          ((C13261 * C839 - C13262 * C824 - C13261 * C840 + C89093 * C848) *
               C89247 * C13260 +
           (C13261 * C837 - C13262 * C823 - C13261 * C838 + C89093 * C847) *
               C89247 * C13259 +
           (C13261 * C118 - C13262 * C109 - C13261 * C119 + C89093 * C127) *
               C89247 * C13258) *
              C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                C89247 * C13258 +
            C13794 * C13259 + C13795 * C13260) *
               C89153 * C812 -
           (C13796 * C13260 + C13795 * C13259 + C13794 * C13258) * C89153 *
               C813 +
           (C13795 * C13258 + C13796 * C13259 +
            (C13261 * C13745 - C13262 * C13743 - C13261 * C13746 +
             C89093 * C13749) *
                C89247 * C13260) *
               C89153 * C814) *
              C815 +
          ((C13797 * C13258 + C13798 * C13259 + C13799 * C13260) * C89153 *
               C813 -
           (C13798 * C13260 + C13797 * C13259 +
            (C13261 * C114 - C13262 * C107 - C13261 * C115 + C89093 * C125) *
                C89247 * C13258) *
               C89153 * C812 -
           ((C13261 * C13747 - C13262 * C13744 - C13261 * C13748 +
             C89093 * C13750) *
                C89247 * C13260 +
            C13799 * C13259 + C13798 * C13258) *
               C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
               C25848 +
           (C13261 * C1734 - C13262 * C1724 - C13261 * C1735 + C89093 * C1748) *
               C25849 +
           (C13261 * C1736 - C13262 * C1725 - C13261 * C1737 + C89093 * C1749) *
               C25850) *
              C89236 * C89153 * C89137 * C96 -
          ((C13261 * C1738 - C13262 * C1726 - C13261 * C1739 + C89093 * C1750) *
               C25850 +
           (C13261 * C1732 - C13262 * C1723 - C13261 * C1733 + C89093 * C1747) *
               C25849 +
           (C13261 * C114 - C13262 * C107 - C13261 * C115 + C89093 * C125) *
               C25848) *
              C89236 * C89153 * C89137 * C97 +
          ((C13261 * C116 - C13262 * C108 - C13261 * C117 + C89093 * C126) *
               C25848 +
           (C13261 * C1730 - C13262 * C1722 - C13261 * C1731 + C89093 * C1746) *
               C25849 +
           (C13261 * C1740 - C13262 * C1727 - C13261 * C1741 + C89093 * C1751) *
               C25850) *
              C89236 * C89153 * C89137 * C98 -
          ((C13261 * C1744 - C13262 * C1729 - C13261 * C1745 + C89093 * C1753) *
               C25850 +
           (C13261 * C1742 - C13262 * C1728 - C13261 * C1743 + C89093 * C1752) *
               C25849 +
           (C13261 * C118 - C13262 * C109 - C13261 * C119 + C89093 * C127) *
               C25848) *
              C89236 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                C25848 +
            (C13261 * C1734 - C13262 * C1724 - C13261 * C1735 +
             C89093 * C1748) *
                C25849 +
            (C13261 * C1736 - C13262 * C1725 - C13261 * C1737 +
             C89093 * C1749) *
                C25850) *
               C89236 * C89153 * C812 -
           (C18856 * C25850 + C16717 * C25849 + C13788 * C25848) * C89236 *
               C89153 * C813 +
           (C13789 * C25848 + C16716 * C25849 + C18857 * C25850) * C89236 *
               C89153 * C814) *
              C815 +
          ((C13791 * C25848 + C16718 * C25849 +
            (C13261 * C6252 - C13262 * C6248 - C13261 * C6253 +
             C89093 * C6257) *
                C25850) *
               C89236 * C89153 * C813 -
           ((C13261 * C1738 - C13262 * C1726 - C13261 * C1739 +
             C89093 * C1750) *
                C25850 +
            (C13261 * C1732 - C13262 * C1723 - C13261 * C1733 +
             C89093 * C1747) *
                C25849 +
            (C13261 * C114 - C13262 * C107 - C13261 * C115 + C89093 * C125) *
                C25848) *
               C89236 * C89153 * C812 -
           ((C13261 * C14605 - C13262 * C14602 - C13261 * C14606 +
             C89093 * C14608) *
                C25850 +
            C16719 * C25849 + C13792 * C25848) *
               C89236 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eexy[34] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C89236 * C181 - C180 * C106) * C100 +
            (C89236 * C187 - C180 * C113) * C89 + (C194 - C195) * C102 +
            (C196 - C197) * C90 + C210 * C104 + C211 * C91) *
               C89247 * C89153 * C812 +
           ((C180 * C819 - C89236 * C923) * C100 +
            (C180 * C830 - C89236 * C931) * C89 + (C940 - C941) * C102 +
            (C942 - C943) * C90 + (C944 - C945) * C104 + (C946 - C947) * C91) *
               C89247 * C89153 * C813 +
           ((C89236 * C926 - C180 * C820) * C100 +
            (C89236 * C934 - C180 * C832) * C89 + (C948 - C949) * C102 +
            (C950 - C951) * C90 + (C952 - C953) * C104 + (C954 - C955) * C91) *
               C89247 * C89153 * C814) *
              C815 +
          (((C195 - C194) * C100 + (C197 - C196) * C89 + (C199 - C198) * C102 +
            (C201 - C200) * C90 + C212 * C104 + C213 * C91) *
               C89247 * C89153 * C812 +
           ((C941 - C940) * C100 + (C943 - C942) * C89 + (C945 - C944) * C102 +
            (C947 - C946) * C90 + (C89236 * C929 - C180 * C823) * C104 +
            (C89236 * C937 - C180 * C838) * C91) *
               C89247 * C89153 * C813 +
           ((C949 - C948) * C100 + (C951 - C950) * C89 + (C953 - C952) * C102 +
            (C955 - C954) * C90 + (C180 * C824 - C89236 * C930) * C104 +
            (C180 * C840 - C89236 * C938) * C91) *
               C89247 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C89236 * C181 - C180 * C106) * C100 +
           (C89236 * C187 - C180 * C113) * C89 + (C194 - C195) * C102 +
           (C196 - C197) * C90 + C210 * C104 + C211 * C91) *
              C89247 * C89153 * C89137 * C96 +
          ((C195 - C194) * C100 + (C197 - C196) * C89 + (C199 - C198) * C102 +
           (C201 - C200) * C90 + C212 * C104 + C213 * C91) *
              C89247 * C89153 * C89137 * C97 +
          (C210 * C100 + C211 * C89 + (C203 - C202) * C102 +
           (C205 - C204) * C90 + (C206 - C207) * C104 + (C208 - C209) * C91) *
              C89247 * C89153 * C89137 * C98 +
          (C212 * C100 + C213 * C89 + (C207 - C206) * C102 +
           (C209 - C208) * C90 + (C180 * C111 - C89236 * C186) * C104 +
           (C180 * C123 - C89236 * C192) * C91) *
              C89247 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
            C13260 * C926 - C13315 * C820) *
               C13261 +
           (C13258 * C187 - C13313 * C113 + C13259 * C931 - C13314 * C830 +
            C13260 * C934 - C13315 * C832) *
               C89093) *
              C89247 * C89153 * C89137 * C96 +
          ((C13313 * C107 - C13258 * C182 + C13314 * C818 - C13259 * C924 +
            C13315 * C821 - C13260 * C927) *
               C13261 +
           (C13313 * C115 - C13258 * C188 + C13314 * C828 - C13259 * C932 +
            C13315 * C834 - C13260 * C935) *
               C89093) *
              C89247 * C89153 * C89137 * C97 +
          ((C13258 * C183 - C13313 * C108 + C13259 * C925 - C13314 * C817 +
            C13260 * C928 - C13315 * C822) *
               C13261 +
           (C13258 * C189 - C13313 * C117 + C13259 * C933 - C13314 * C826 +
            C13260 * C936 - C13315 * C836) *
               C89093) *
              C89247 * C89153 * C89137 * C98 +
          ((C13313 * C109 - C13258 * C184 + C13314 * C823 - C13259 * C929 +
            C13315 * C824 - C13260 * C930) *
               C13261 +
           (C13313 * C119 - C13258 * C190 + C13314 * C838 - C13259 * C937 +
            C13315 * C840 - C13260 * C938) *
               C89093) *
              C89247 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
             C13260 * C926 - C13315 * C820) *
                C13261 +
            (C13258 * C187 - C13313 * C113 + C13259 * C931 - C13314 * C830 +
             C13260 * C934 - C13315 * C832) *
                C89093) *
               C89247 * C89153 * C812 +
           ((C13313 * C819 - C13258 * C923 + C13314 * C820 - C13259 * C926 +
             C13315 * C5727 - C13260 * C5787) *
                C13261 +
            (C13313 * C830 - C13258 * C931 + C13314 * C832 - C13259 * C934 +
             C13315 * C5733 - C13260 * C5790) *
                C89093) *
               C89247 * C89153 * C813 +
           ((C13258 * C926 - C13313 * C820 + C13259 * C5787 - C13314 * C5727 +
             C13260 * C13873 - C13315 * C13743) *
                C13261 +
            (C13258 * C934 - C13313 * C832 + C13259 * C5790 - C13314 * C5733 +
             C13260 * C13875 - C13315 * C13746) *
                C89093) *
               C89247 * C89153 * C814) *
              C815 +
          (((C13313 * C107 - C13258 * C182 + C13314 * C818 - C13259 * C924 +
             C13315 * C821 - C13260 * C927) *
                C13261 +
            (C13313 * C115 - C13258 * C188 + C13314 * C828 - C13259 * C932 +
             C13315 * C834 - C13260 * C935) *
                C89093) *
               C89247 * C89153 * C812 +
           ((C13258 * C924 - C13313 * C818 + C13259 * C927 - C13314 * C821 +
             C13260 * C5788 - C13315 * C5726) *
                C13261 +
            (C13258 * C932 - C13313 * C828 + C13259 * C935 - C13314 * C834 +
             C13260 * C5791 - C13315 * C5731) *
                C89093) *
               C89247 * C89153 * C813 +
           ((C13313 * C821 - C13258 * C927 + C13314 * C5726 - C13259 * C5788 +
             C13315 * C13744 - C13260 * C13874) *
                C13261 +
            (C13313 * C834 - C13258 * C935 + C13314 * C5731 - C13259 * C5791 +
             C13315 * C13748 - C13260 * C13876) *
                C89093) *
               C89247 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89236 * C181 - C180 * C106) * C13261 +
            (C89236 * C187 - C180 * C113) * C89093) *
               C25848 +
           ((C89236 * C1828 - C180 * C1724) * C13261 +
            (C89236 * C1836 - C180 * C1735) * C89093) *
               C25849 +
           ((C89236 * C1831 - C180 * C1725) * C13261 +
            (C89236 * C1839 - C180 * C1737) * C89093) *
               C25850) *
              C89153 * C89137 * C96 +
          (((C195 - C194) * C13261 + (C197 - C196) * C89093) * C25848 +
           ((C1845 - C1846) * C13261 + (C1847 - C1848) * C89093) * C25849 +
           ((C1854 - C1853) * C13261 + (C1856 - C1855) * C89093) * C25850) *
              C89153 * C89137 * C97 +
          ((C210 * C13261 + C211 * C89093) * C25848 +
           ((C1850 - C1849) * C13261 + (C1852 - C1851) * C89093) * C25849 +
           ((C1857 - C1858) * C13261 + (C1859 - C1860) * C89093) * C25850) *
              C89153 * C89137 * C98 +
          ((C212 * C13261 + C213 * C89093) * C25848 +
           ((C3436 - C3435) * C13261 + (C3438 - C3437) * C89093) * C25849 +
           ((C180 * C1729 - C89236 * C1835) * C13261 +
            (C180 * C1745 - C89236 * C1843) * C89093) *
               C25850) *
              C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C13261 +
             (C89236 * C187 - C180 * C113) * C89093) *
                C25848 +
            ((C89236 * C1828 - C180 * C1724) * C13261 +
             (C89236 * C1836 - C180 * C1735) * C89093) *
                C25849 +
            ((C89236 * C1831 - C180 * C1725) * C13261 +
             (C89236 * C1839 - C180 * C1737) * C89093) *
                C25850) *
               C89153 * C812 +
           (((C180 * C819 - C89236 * C923) * C13261 +
             (C180 * C830 - C89236 * C931) * C89093) *
                C25848 +
            ((C180 * C4097 - C89236 * C4211) * C13261 +
             (C180 * C4102 - C89236 * C4215) * C89093) *
                C25849 +
            ((C180 * C6249 - C89236 * C6333) * C13261 +
             (C180 * C6255 - C89236 * C6336) * C89093) *
                C25850) *
               C89153 * C813 +
           (((C89236 * C926 - C180 * C820) * C13261 +
             (C89236 * C934 - C180 * C832) * C89093) *
                C25848 +
            ((C89236 * C8600 - C180 * C8516) * C13261 +
             (C89236 * C8603 - C180 * C8522) * C89093) *
                C25849 +
            ((C89236 * C14683 - C180 * C14601) * C13261 +
             (C89236 * C14685 - C180 * C14604) * C89093) *
                C25850) *
               C89153 * C814) *
              C815 +
          ((((C195 - C194) * C13261 + (C197 - C196) * C89093) * C25848 +
            ((C1845 - C1846) * C13261 + (C1847 - C1848) * C89093) * C25849 +
            ((C1854 - C1853) * C13261 + (C1856 - C1855) * C89093) * C25850) *
               C89153 * C812 +
           (((C941 - C940) * C13261 + (C943 - C942) * C89093) * C25848 +
            ((C4220 - C4221) * C13261 + (C4222 - C4223) * C89093) * C25849 +
            ((C89236 * C6334 - C180 * C6248) * C13261 +
             (C89236 * C6337 - C180 * C6253) * C89093) *
                C25850) *
               C89153 * C813 +
           (((C949 - C948) * C13261 + (C951 - C950) * C89093) * C25848 +
            ((C180 * C8515 - C89236 * C8601) * C13261 +
             (C180 * C8520 - C89236 * C8604) * C89093) *
                C25849 +
            ((C180 * C14602 - C89236 * C14684) * C13261 +
             (C180 * C14606 - C89236 * C14686) * C89093) *
                C25850) *
               C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eexz[34] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C100 +
            (C89247 * C270 - C263 * C113) * C89 + (C277 - C278) * C102 +
            (C279 - C280) * C90 + C293 * C104 + C294 * C91) *
               C89236 * C89153 * C812 +
           ((C263 * C819 - C89247 * C1029) * C100 +
            (C263 * C830 - C89247 * C1037) * C89 + (C1046 - C1047) * C102 +
            (C1048 - C1049) * C90 + (C1050 - C1051) * C104 +
            (C1052 - C1053) * C91) *
               C89236 * C89153 * C813 +
           ((C89247 * C1032 - C263 * C820) * C100 +
            (C89247 * C1040 - C263 * C832) * C89 + (C1054 - C1055) * C102 +
            (C1056 - C1057) * C90 + (C1058 - C1059) * C104 +
            (C1060 - C1061) * C91) *
               C89236 * C89153 * C814) *
              C815 +
          (((C278 - C277) * C100 + (C280 - C279) * C89 + (C282 - C281) * C102 +
            (C284 - C283) * C90 + C295 * C104 + C296 * C91) *
               C89236 * C89153 * C812 +
           ((C1047 - C1046) * C100 + (C1049 - C1048) * C89 +
            (C1051 - C1050) * C102 + (C1053 - C1052) * C90 +
            (C89247 * C1035 - C263 * C823) * C104 +
            (C89247 * C1043 - C263 * C838) * C91) *
               C89236 * C89153 * C813 +
           ((C1055 - C1054) * C100 + (C1057 - C1056) * C89 +
            (C1059 - C1058) * C102 + (C1061 - C1060) * C90 +
            (C263 * C824 - C89247 * C1036) * C104 +
            (C263 * C840 - C89247 * C1044) * C91) *
               C89236 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C89247 * C264 - C263 * C106) * C100 +
           (C89247 * C270 - C263 * C113) * C89 + (C277 - C278) * C102 +
           (C279 - C280) * C90 + C293 * C104 + C294 * C91) *
              C89236 * C89153 * C89137 * C96 +
          ((C278 - C277) * C100 + (C280 - C279) * C89 + (C282 - C281) * C102 +
           (C284 - C283) * C90 + C295 * C104 + C296 * C91) *
              C89236 * C89153 * C89137 * C97 +
          (C293 * C100 + C294 * C89 + (C286 - C285) * C102 +
           (C288 - C287) * C90 + (C289 - C290) * C104 + (C291 - C292) * C91) *
              C89236 * C89153 * C89137 * C98 +
          (C295 * C100 + C296 * C89 + (C290 - C289) * C102 +
           (C292 - C291) * C90 + (C263 * C111 - C89247 * C269) * C104 +
           (C263 * C123 - C89247 * C275) * C91) *
              C89236 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C13261 +
            (C89247 * C270 - C263 * C113) * C89093) *
               C13258 +
           ((C89247 * C1029 - C263 * C819) * C13261 +
            (C89247 * C1037 - C263 * C830) * C89093) *
               C13259 +
           ((C89247 * C1032 - C263 * C820) * C13261 +
            (C89247 * C1040 - C263 * C832) * C89093) *
               C13260) *
              C89153 * C89137 * C96 +
          (((C278 - C277) * C13261 + (C280 - C279) * C89093) * C13258 +
           ((C1046 - C1047) * C13261 + (C1048 - C1049) * C89093) * C13259 +
           ((C1055 - C1054) * C13261 + (C1057 - C1056) * C89093) * C13260) *
              C89153 * C89137 * C97 +
          ((C293 * C13261 + C294 * C89093) * C13258 +
           ((C1051 - C1050) * C13261 + (C1053 - C1052) * C89093) * C13259 +
           ((C1058 - C1059) * C13261 + (C1060 - C1061) * C89093) * C13260) *
              C89153 * C89137 * C98 +
          ((C295 * C13261 + C296 * C89093) * C13258 +
           ((C2795 - C2794) * C13261 + (C2797 - C2796) * C89093) * C13259 +
           ((C263 * C824 - C89247 * C1036) * C13261 +
            (C263 * C840 - C89247 * C1044) * C89093) *
               C13260) *
              C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C13261 +
             (C89247 * C270 - C263 * C113) * C89093) *
                C13258 +
            ((C13956 - C13957) * C13261 + (C13958 - C13959) * C89093) * C13259 +
            C13981 * C13260) *
               C89153 * C812 +
           (((C13957 - C13956) * C13261 + (C13959 - C13958) * C89093) * C13258 +
            ((C13961 - C13960) * C13261 + (C13963 - C13962) * C89093) * C13259 +
            ((C13964 - C13965) * C13261 + (C13966 - C13967) * C89093) *
                C13260) *
               C89153 * C813 +
           (C13981 * C13258 +
            ((C13965 - C13964) * C13261 + (C13967 - C13966) * C89093) * C13259 +
            ((C89247 * C13951 - C263 * C13743) * C13261 +
             (C89247 * C13953 - C263 * C13746) * C89093) *
                C13260) *
               C89153 * C814) *
              C815 +
          ((((C278 - C277) * C13261 + (C280 - C279) * C89093) * C13258 +
            ((C1046 - C1047) * C13261 + (C1048 - C1049) * C89093) * C13259 +
            C13980 * C13260) *
               C89153 * C812 +
           (((C1047 - C1046) * C13261 + (C1049 - C1048) * C89093) * C13258 +
            ((C1054 - C1055) * C13261 + (C1056 - C1057) * C89093) * C13259 +
            ((C13970 - C13971) * C13261 + (C13972 - C13973) * C89093) *
                C13260) *
               C89153 * C813 +
           (C13980 * C13258 +
            ((C13971 - C13970) * C13261 + (C13973 - C13972) * C89093) * C13259 +
            ((C263 * C13744 - C89247 * C13952) * C13261 +
             (C263 * C13748 - C89247 * C13954) * C89093) *
                C13260) *
               C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C25848 * C264 - C25951 * C106 + C25849 * C1934 - C25952 * C1724 +
            C25850 * C1937 - C25953 * C1725) *
               C13261 +
           (C25848 * C270 - C25951 * C113 + C25849 * C1942 - C25952 * C1735 +
            C25850 * C1945 - C25953 * C1737) *
               C89093) *
              C89236 * C89153 * C89137 * C96 +
          ((C25951 * C107 - C25848 * C265 + C25952 * C1723 - C25849 * C1935 +
            C25953 * C1726 - C25850 * C1938) *
               C13261 +
           (C25951 * C115 - C25848 * C271 + C25952 * C1733 - C25849 * C1943 +
            C25953 * C1739 - C25850 * C1946) *
               C89093) *
              C89236 * C89153 * C89137 * C97 +
          ((C25848 * C266 - C25951 * C108 + C25849 * C1936 - C25952 * C1722 +
            C25850 * C1939 - C25953 * C1727) *
               C13261 +
           (C25848 * C272 - C25951 * C117 + C25849 * C1944 - C25952 * C1731 +
            C25850 * C1947 - C25953 * C1741) *
               C89093) *
              C89236 * C89153 * C89137 * C98 +
          ((C25951 * C109 - C25848 * C267 + C25952 * C1728 - C25849 * C1940 +
            C25953 * C1729 - C25850 * C1941) *
               C13261 +
           (C25951 * C119 - C25848 * C273 + C25952 * C1743 - C25849 * C1948 +
            C25953 * C1745 - C25850 * C1949) *
               C89093) *
              C89236 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C25848 * C264 - C25951 * C106 + C25849 * C1934 - C25952 * C1724 +
             C25850 * C1937 - C25953 * C1725) *
                C13261 +
            (C25848 * C270 - C25951 * C113 + C25849 * C1942 - C25952 * C1735 +
             C25850 * C1945 - C25953 * C1737) *
                C89093) *
               C89236 * C89153 * C812 +
           ((C25951 * C819 - C25848 * C1029 + C25952 * C4097 - C25849 * C4325 +
             C25953 * C6249 - C25850 * C6413) *
                C13261 +
            (C25951 * C830 - C25848 * C1037 + C25952 * C4102 - C25849 * C4329 +
             C25953 * C6255 - C25850 * C6416) *
                C89093) *
               C89236 * C89153 * C813 +
           ((C25848 * C1032 - C25951 * C820 + C25849 * C8680 - C25952 * C8516 +
             C25850 * C14761 - C25953 * C14601) *
                C13261 +
            (C25848 * C1040 - C25951 * C832 + C25849 * C8683 - C25952 * C8522 +
             C25850 * C14763 - C25953 * C14604) *
                C89093) *
               C89236 * C89153 * C814) *
              C815 +
          (((C25951 * C107 - C25848 * C265 + C25952 * C1723 - C25849 * C1935 +
             C25953 * C1726 - C25850 * C1938) *
                C13261 +
            (C25951 * C115 - C25848 * C271 + C25952 * C1733 - C25849 * C1943 +
             C25953 * C1739 - C25850 * C1946) *
                C89093) *
               C89236 * C89153 * C812 +
           ((C25848 * C1030 - C25951 * C818 + C25849 * C4326 - C25952 * C4098 +
             C25850 * C6414 - C25953 * C6248) *
                C13261 +
            (C25848 * C1038 - C25951 * C828 + C25849 * C4330 - C25952 * C4104 +
             C25850 * C6417 - C25953 * C6253) *
                C89093) *
               C89236 * C89153 * C813 +
           ((C25951 * C821 - C25848 * C1033 + C25952 * C8515 - C25849 * C8681 +
             C25953 * C14602 - C25850 * C14762) *
                C13261 +
            (C25951 * C834 - C25848 * C1041 + C25952 * C8520 - C25849 * C8684 +
             C25953 * C14606 - C25850 * C14764) *
                C89093) *
               C89236 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[34] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 + C91 * C116 -
             C104 * C108) *
                C180 +
            (C89 * C352 - C100 * C346 + C90 * C353 - C102 * C347 + C91 * C354 -
             C104 * C348) *
                C89236) *
               C89247 * C89153 * C812 +
           ((C100 * C819 - C89 * C829 + C102 * C818 - C90 * C827 + C104 * C817 -
             C91 * C825) *
                C180 +
            (C100 * C1135 - C89 * C1143 + C102 * C1136 - C90 * C1144 +
             C104 * C1137 - C91 * C1145) *
                C89236) *
               C89247 * C89153 * C813 +
           ((C89 * C831 - C100 * C820 + C90 * C833 - C102 * C821 + C91 * C835 -
             C104 * C822) *
                C180 +
            (C89 * C1146 - C100 * C1138 + C90 * C1147 - C102 * C1139 +
             C91 * C1148 - C104 * C1140) *
                C89236) *
               C89247 * C89153 * C814) *
              C815 +
          (((C100 * C107 - C89 * C114 + C102 * C108 - C90 * C116 + C104 * C109 -
             C91 * C118) *
                C180 +
            (C100 * C347 - C89 * C353 + C102 * C348 - C90 * C354 + C104 * C349 -
             C91 * C355) *
                C89236) *
               C89247 * C89153 * C812 +
           ((C89 * C827 - C100 * C818 + C90 * C825 - C102 * C817 + C91 * C837 -
             C104 * C823) *
                C180 +
            (C89 * C1144 - C100 * C1136 + C90 * C1145 - C102 * C1137 +
             C91 * C1149 - C104 * C1141) *
                C89236) *
               C89247 * C89153 * C813 +
           ((C100 * C821 - C89 * C833 + C102 * C822 - C90 * C835 + C104 * C824 -
             C91 * C839) *
                C180 +
            (C100 * C1139 - C89 * C1147 + C102 * C1140 - C90 * C1148 +
             C104 * C1142 - C91 * C1150) *
                C89236) *
               C89247 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 + C91 * C116 -
            C104 * C108) *
               C180 +
           (C89 * C352 - C100 * C346 + C90 * C353 - C102 * C347 + C91 * C354 -
            C104 * C348) *
               C89236) *
              C89247 * C89153 * C89137 * C96 +
          ((C100 * C107 - C89 * C114 + C102 * C108 - C90 * C116 + C104 * C109 -
            C91 * C118) *
               C180 +
           (C100 * C347 - C89 * C353 + C102 * C348 - C90 * C354 + C104 * C349 -
            C91 * C355) *
               C89236) *
              C89247 * C89153 * C89137 * C97 +
          ((C89 * C116 - C100 * C108 + C90 * C118 - C102 * C109 + C91 * C120 -
            C104 * C110) *
               C180 +
           (C89 * C354 - C100 * C348 + C90 * C355 - C102 * C349 + C91 * C356 -
            C104 * C350) *
               C89236) *
              C89247 * C89153 * C89137 * C98 +
          ((C100 * C109 - C89 * C118 + C102 * C110 - C90 * C120 + C104 * C111 -
            C91 * C122) *
               C180 +
           (C100 * C349 - C89 * C355 + C102 * C350 - C90 * C356 + C104 * C351 -
            C91 * C357) *
               C89236) *
              C89247 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C89093 * C112 - C13261 * C106) * C13313 +
           (C89093 * C352 - C13261 * C346) * C13258 +
           (C89093 * C829 - C13261 * C819) * C13314 +
           (C89093 * C1143 - C13261 * C1135) * C13259 +
           (C89093 * C831 - C13261 * C820) * C13315 +
           (C89093 * C1146 - C13261 * C1138) * C13260) *
              C89247 * C89153 * C89137 * C96 +
          ((C13261 * C107 - C89093 * C114) * C13313 +
           (C13261 * C347 - C89093 * C353) * C13258 +
           (C13261 * C818 - C89093 * C827) * C13314 +
           (C13261 * C1136 - C89093 * C1144) * C13259 +
           (C13261 * C821 - C89093 * C833) * C13315 +
           (C13261 * C1139 - C89093 * C1147) * C13260) *
              C89247 * C89153 * C89137 * C97 +
          ((C89093 * C116 - C13261 * C108) * C13313 +
           (C89093 * C354 - C13261 * C348) * C13258 +
           (C89093 * C825 - C13261 * C817) * C13314 +
           (C89093 * C1145 - C13261 * C1137) * C13259 +
           (C89093 * C835 - C13261 * C822) * C13315 +
           (C89093 * C1148 - C13261 * C1140) * C13260) *
              C89247 * C89153 * C89137 * C98 +
          ((C13261 * C109 - C89093 * C118) * C13313 +
           (C13261 * C349 - C89093 * C355) * C13258 +
           (C13261 * C823 - C89093 * C837) * C13314 +
           (C13261 * C1141 - C89093 * C1149) * C13259 +
           (C13261 * C824 - C89093 * C839) * C13315 +
           (C13261 * C1142 - C89093 * C1150) * C13260) *
              C89247 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C89093 * C112 - C13261 * C106) * C13313 +
            (C89093 * C352 - C13261 * C346) * C13258 +
            (C14060 - C14061) * C13314 + (C14062 - C14063) * C13259 +
            C14084 * C13315 + C14085 * C13260) *
               C89247 * C89153 * C812 +
           ((C14061 - C14060) * C13313 + (C14063 - C14062) * C13258 +
            (C14065 - C14064) * C13314 + (C14067 - C14066) * C13259 +
            (C14068 - C14069) * C13315 + (C14070 - C14071) * C13260) *
               C89247 * C89153 * C813 +
           (C14084 * C13313 + C14085 * C13258 + (C14069 - C14068) * C13314 +
            (C14071 - C14070) * C13259 +
            (C89093 * C13745 - C13261 * C13743) * C13315 +
            (C89093 * C14057 - C13261 * C14055) * C13260) *
               C89247 * C89153 * C814) *
              C815 +
          (((C13261 * C107 - C89093 * C114) * C13313 +
            (C13261 * C347 - C89093 * C353) * C13258 +
            (C14072 - C14073) * C13314 + (C14074 - C14075) * C13259 +
            C14086 * C13315 + C14087 * C13260) *
               C89247 * C89153 * C812 +
           ((C14073 - C14072) * C13313 + (C14075 - C14074) * C13258 +
            (C14077 - C14076) * C13314 + (C14079 - C14078) * C13259 +
            (C14080 - C14081) * C13315 + (C14082 - C14083) * C13260) *
               C89247 * C89153 * C813 +
           (C14086 * C13313 + C14087 * C13258 + (C14081 - C14080) * C13314 +
            (C14083 - C14082) * C13259 +
            (C13261 * C13744 - C89093 * C13747) * C13315 +
            (C13261 * C14056 - C89093 * C14058) * C13260) *
               C89247 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89093 * C112 - C13261 * C106) * C180 +
            (C89093 * C352 - C13261 * C346) * C89236) *
               C25848 +
           ((C89093 * C1734 - C13261 * C1724) * C180 +
            (C89093 * C2048 - C13261 * C2040) * C89236) *
               C25849 +
           ((C89093 * C1736 - C13261 * C1725) * C180 +
            (C89093 * C2051 - C13261 * C2043) * C89236) *
               C25850) *
              C89153 * C89137 * C96 +
          (((C13261 * C107 - C89093 * C114) * C180 +
            (C13261 * C347 - C89093 * C353) * C89236) *
               C25848 +
           ((C13261 * C1723 - C89093 * C1732) * C180 +
            (C13261 * C2041 - C89093 * C2049) * C89236) *
               C25849 +
           ((C13261 * C1726 - C89093 * C1738) * C180 +
            (C13261 * C2044 - C89093 * C2052) * C89236) *
               C25850) *
              C89153 * C89137 * C97 +
          (((C89093 * C116 - C13261 * C108) * C180 +
            (C89093 * C354 - C13261 * C348) * C89236) *
               C25848 +
           ((C89093 * C1730 - C13261 * C1722) * C180 +
            (C89093 * C2050 - C13261 * C2042) * C89236) *
               C25849 +
           ((C89093 * C1740 - C13261 * C1727) * C180 +
            (C89093 * C2053 - C13261 * C2045) * C89236) *
               C25850) *
              C89153 * C89137 * C98 +
          (((C13261 * C109 - C89093 * C118) * C180 +
            (C13261 * C349 - C89093 * C355) * C89236) *
               C25848 +
           ((C13261 * C1728 - C89093 * C1742) * C180 +
            (C13261 * C2046 - C89093 * C2054) * C89236) *
               C25849 +
           ((C13261 * C1729 - C89093 * C1744) * C180 +
            (C13261 * C2047 - C89093 * C2055) * C89236) *
               C25850) *
              C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C180 +
             (C89093 * C352 - C13261 * C346) * C89236) *
                C25848 +
            ((C89093 * C1734 - C13261 * C1724) * C180 +
             (C89093 * C2048 - C13261 * C2040) * C89236) *
                C25849 +
            ((C89093 * C1736 - C13261 * C1725) * C180 +
             (C89093 * C2051 - C13261 * C2043) * C89236) *
                C25850) *
               C89153 * C812 +
           (((C14061 - C14060) * C180 + (C14063 - C14062) * C89236) * C25848 +
            ((C17042 - C17043) * C180 + (C17044 - C17045) * C89236) * C25849 +
            ((C19097 - C19096) * C180 + (C19099 - C19098) * C89236) * C25850) *
               C89153 * C813 +
           ((C14084 * C180 + C14085 * C89236) * C25848 +
            ((C17047 - C17046) * C180 + (C17049 - C17048) * C89236) * C25849 +
            ((C19100 - C19101) * C180 + (C19102 - C19103) * C89236) * C25850) *
               C89153 * C814) *
              C815 +
          ((((C13261 * C107 - C89093 * C114) * C180 +
             (C13261 * C347 - C89093 * C353) * C89236) *
                C25848 +
            ((C13261 * C1723 - C89093 * C1732) * C180 +
             (C13261 * C2041 - C89093 * C2049) * C89236) *
                C25849 +
            ((C13261 * C1726 - C89093 * C1738) * C180 +
             (C13261 * C2044 - C89093 * C2052) * C89236) *
                C25850) *
               C89153 * C812 +
           (((C14073 - C14072) * C180 + (C14075 - C14074) * C89236) * C25848 +
            ((C17050 - C17051) * C180 + (C17052 - C17053) * C89236) * C25849 +
            ((C89093 * C6252 - C13261 * C6248) * C180 +
             (C89093 * C6497 - C13261 * C6494) * C89236) *
                C25850) *
               C89153 * C813 +
           ((C14086 * C180 + C14087 * C89236) * C25848 +
            ((C17055 - C17054) * C180 + (C17057 - C17056) * C89236) * C25849 +
            ((C13261 * C14602 - C89093 * C14605) * C180 +
             (C13261 * C14840 - C89093 * C14842) * C89236) *
                C25850) *
               C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[34] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C89 +
            C440 * C90 + C441 * C91) *
               C89247 * C89153 * C812 -
           (C1258 * C91 + C1259 * C90 +
            (C180 * C923 - C408 * C819 - C180 * C1135 + C89236 * C1227) * C89) *
               C89247 * C89153 * C813 +
           ((C180 * C926 - C408 * C820 - C180 * C1138 + C89236 * C1228) * C89 +
            C1260 * C90 + C1261 * C91) *
               C89247 * C89153 * C814) *
              C815 +
          ((C1259 * C89 + C1258 * C90 +
            (C180 * C929 - C408 * C823 - C180 * C1141 + C89236 * C1231) * C91) *
               C89247 * C89153 * C813 -
           (C442 * C91 + C441 * C90 + C440 * C89) * C89247 * C89153 * C812 -
           ((C180 * C930 - C408 * C824 - C180 * C1142 + C89236 * C1232) * C91 +
            C1261 * C90 + C1260 * C89) *
               C89247 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C89 +
           C440 * C90 + C441 * C91) *
              C89247 * C89153 * C89137 * C96 -
          (C442 * C91 + C441 * C90 + C440 * C89) * C89247 * C89153 * C89137 *
              C97 +
          (C441 * C89 + C442 * C90 + C443 * C91) * C89247 * C89153 * C89137 *
              C98 -
          ((C180 * C186 - C408 * C111 - C180 * C351 + C89236 * C414) * C91 +
           C443 * C90 + C442 * C89) *
              C89247 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C13313 * C181 - C13466 * C106 - C13313 * C346 + C13258 * C409 +
           C13314 * C923 - C13467 * C819 - C13314 * C1135 + C13259 * C1227 +
           C13315 * C926 - C13468 * C820 - C13315 * C1138 + C13260 * C1228) *
              C89093 * C89247 * C89153 * C89137 * C96 -
          (C13315 * C927 - C13468 * C821 - C13315 * C1139 + C13260 * C1229 +
           C13314 * C924 - C13467 * C818 - C13314 * C1136 + C13259 * C1226 +
           C13313 * C182 - C13466 * C107 - C13313 * C347 + C13258 * C410) *
              C89093 * C89247 * C89153 * C89137 * C97 +
          (C13313 * C183 - C13466 * C108 - C13313 * C348 + C13258 * C411 +
           C13314 * C925 - C13467 * C817 - C13314 * C1137 + C13259 * C1225 +
           C13315 * C928 - C13468 * C822 - C13315 * C1140 + C13260 * C1230) *
              C89093 * C89247 * C89153 * C89137 * C98 -
          (C13315 * C930 - C13468 * C824 - C13315 * C1142 + C13260 * C1232 +
           C13314 * C929 - C13467 * C823 - C13314 * C1141 + C13259 * C1231 +
           C13313 * C184 - C13466 * C109 - C13313 * C349 + C13258 * C412) *
              C89093 * C89247 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13313 * C181 - C13466 * C106 - C13313 * C346 + C13258 * C409 +
            C13314 * C923 - C13467 * C819 - C13314 * C1135 + C13259 * C1227 +
            C13315 * C926 - C13468 * C820 - C13315 * C1138 + C13260 * C1228) *
               C89093 * C89247 * C89153 * C812 -
           (C13315 * C5787 - C13468 * C5727 - C13315 * C5899 + C13260 * C5957 +
            C13314 * C926 - C13467 * C820 - C13314 * C1138 + C13259 * C1228 +
            C13313 * C923 - C13466 * C819 - C13313 * C1135 + C13258 * C1227) *
               C89093 * C89247 * C89153 * C813 +
           (C13313 * C926 - C13466 * C820 - C13313 * C1138 + C13258 * C1228 +
            C13314 * C5787 - C13467 * C5727 - C13314 * C5899 + C13259 * C5957 +
            C13315 * C13873 - C13468 * C13743 - C13315 * C14055 +
            C13260 * C14161) *
               C89093 * C89247 * C89153 * C814) *
              C815 +
          ((C13313 * C924 - C13466 * C818 - C13313 * C1136 + C13258 * C1226 +
            C13314 * C927 - C13467 * C821 - C13314 * C1139 + C13259 * C1229 +
            C13315 * C5788 - C13468 * C5726 - C13315 * C5900 + C13260 * C5956) *
               C89093 * C89247 * C89153 * C813 -
           (C13315 * C927 - C13468 * C821 - C13315 * C1139 + C13260 * C1229 +
            C13314 * C924 - C13467 * C818 - C13314 * C1136 + C13259 * C1226 +
            C13313 * C182 - C13466 * C107 - C13313 * C347 + C13258 * C410) *
               C89093 * C89247 * C89153 * C812 -
           (C13315 * C13874 - C13468 * C13744 - C13315 * C14056 +
            C13260 * C14162 + C13314 * C5788 - C13467 * C5726 - C13314 * C5900 +
            C13259 * C5956 + C13313 * C927 - C13466 * C821 - C13313 * C1139 +
            C13258 * C1229) *
               C89093 * C89247 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C89093 *
               C25848 +
           (C180 * C1828 - C408 * C1724 - C180 * C2040 + C89236 * C2132) *
               C89093 * C25849 +
           (C180 * C1831 - C408 * C1725 - C180 * C2043 + C89236 * C2133) *
               C89093 * C25850) *
              C89153 * C89137 * C96 -
          (C2165 * C89093 * C25850 + C2164 * C89093 * C25849 +
           C440 * C89093 * C25848) *
              C89153 * C89137 * C97 +
          (C441 * C89093 * C25848 + C2163 * C89093 * C25849 +
           C2166 * C89093 * C25850) *
              C89153 * C89137 * C98 -
          ((C180 * C1835 - C408 * C1729 - C180 * C2047 + C89236 * C2137) *
               C89093 * C25850 +
           C3678 * C89093 * C25849 + C442 * C89093 * C25848) *
              C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C89093 *
                C25848 +
            (C180 * C1828 - C408 * C1724 - C180 * C2040 + C89236 * C2132) *
                C89093 * C25849 +
            (C180 * C1831 - C408 * C1725 - C180 * C2043 + C89236 * C2133) *
                C89093 * C25850) *
               C89153 * C812 -
           ((C180 * C6333 - C408 * C6249 - C180 * C6493 + C89236 * C6575) *
                C89093 * C25850 +
            (C180 * C4211 - C408 * C4097 - C180 * C4439 + C89236 * C4545) *
                C89093 * C25849 +
            (C180 * C923 - C408 * C819 - C180 * C1135 + C89236 * C1227) *
                C89093 * C25848) *
               C89153 * C813 +
           ((C180 * C926 - C408 * C820 - C180 * C1138 + C89236 * C1228) *
                C89093 * C25848 +
            (C180 * C8600 - C408 * C8516 - C180 * C8760 + C89236 * C8842) *
                C89093 * C25849 +
            (C180 * C14683 - C408 * C14601 - C180 * C14839 + C89236 * C14917) *
                C89093 * C25850) *
               C89153 * C814) *
              C815 +
          ((C1259 * C89093 * C25848 + C4562 * C89093 * C25849 +
            (C180 * C6334 - C408 * C6248 - C180 * C6494 + C89236 * C6574) *
                C89093 * C25850) *
               C89153 * C813 -
           (C2165 * C89093 * C25850 + C2164 * C89093 * C25849 +
            C440 * C89093 * C25848) *
               C89153 * C812 -
           ((C180 * C14684 - C408 * C14602 - C180 * C14840 + C89236 * C14918) *
                C89093 * C25850 +
            (C180 * C8601 - C408 * C8515 - C180 * C8761 + C89236 * C8841) *
                C89093 * C25849 +
            C1260 * C89093 * C25848) *
               C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[34] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C180 +
             (C89247 * C493 - C263 * C346) * C89236) *
                C89 +
            ((C277 - C278) * C180 + (C500 - C501) * C89236) * C90 +
            C514 * C91) *
               C89153 * C812 +
           (((C263 * C819 - C89247 * C1029) * C180 +
             (C263 * C1135 - C89247 * C1335) * C89236) *
                C89 +
            ((C1046 - C1047) * C180 + (C1344 - C1345) * C89236) * C90 +
            ((C1050 - C1051) * C180 + (C1346 - C1347) * C89236) * C91) *
               C89153 * C813 +
           (((C89247 * C1032 - C263 * C820) * C180 +
             (C89247 * C1338 - C263 * C1138) * C89236) *
                C89 +
            ((C1054 - C1055) * C180 + (C1348 - C1349) * C89236) * C90 +
            ((C1058 - C1059) * C180 + (C1350 - C1351) * C89236) * C91) *
               C89153 * C814) *
              C815 +
          ((((C278 - C277) * C180 + (C501 - C500) * C89236) * C89 +
            ((C282 - C281) * C180 + (C504 - C503) * C89236) * C90 +
            C515 * C91) *
               C89153 * C812 +
           (((C1047 - C1046) * C180 + (C1345 - C1344) * C89236) * C89 +
            ((C1051 - C1050) * C180 + (C1347 - C1346) * C89236) * C90 +
            ((C89247 * C1035 - C263 * C823) * C180 +
             (C89247 * C1341 - C263 * C1141) * C89236) *
                C91) *
               C89153 * C813 +
           (((C1055 - C1054) * C180 + (C1349 - C1348) * C89236) * C89 +
            ((C1059 - C1058) * C180 + (C1351 - C1350) * C89236) * C90 +
            ((C263 * C824 - C89247 * C1036) * C180 +
             (C263 * C1142 - C89247 * C1342) * C89236) *
                C91) *
               C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C180 +
            (C89247 * C493 - C263 * C346) * C89236) *
               C89 +
           ((C277 - C278) * C180 + (C500 - C501) * C89236) * C90 + C514 * C91) *
              C89153 * C89137 * C96 +
          (((C278 - C277) * C180 + (C501 - C500) * C89236) * C89 +
           ((C282 - C281) * C180 + (C504 - C503) * C89236) * C90 + C515 * C91) *
              C89153 * C89137 * C97 +
          (C514 * C89 + ((C286 - C285) * C180 + (C507 - C506) * C89236) * C90 +
           ((C289 - C290) * C180 + (C508 - C509) * C89236) * C91) *
              C89153 * C89137 * C98 +
          (C515 * C89 + ((C290 - C289) * C180 + (C509 - C508) * C89236) * C90 +
           ((C263 * C111 - C89247 * C269) * C180 +
            (C263 * C351 - C89247 * C498) * C89236) *
               C91) *
              C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C89247 * C264 - C263 * C106) * C13313 +
           (C89247 * C493 - C263 * C346) * C13258 +
           (C89247 * C1029 - C263 * C819) * C13314 +
           (C89247 * C1335 - C263 * C1135) * C13259 +
           (C89247 * C1032 - C263 * C820) * C13315 +
           (C89247 * C1338 - C263 * C1138) * C13260) *
              C89093 * C89153 * C89137 * C96 +
          ((C278 - C277) * C13313 + (C501 - C500) * C13258 +
           (C1046 - C1047) * C13314 + (C1344 - C1345) * C13259 +
           (C1055 - C1054) * C13315 + (C1349 - C1348) * C13260) *
              C89093 * C89153 * C89137 * C97 +
          (C293 * C13313 + C510 * C13258 + (C1051 - C1050) * C13314 +
           (C1347 - C1346) * C13259 + (C1058 - C1059) * C13315 +
           (C1350 - C1351) * C13260) *
              C89093 * C89153 * C89137 * C98 +
          (C295 * C13313 + C511 * C13258 + (C2795 - C2794) * C13314 +
           (C3034 - C3033) * C13259 + (C263 * C824 - C89247 * C1036) * C13315 +
           (C263 * C1142 - C89247 * C1342) * C13260) *
              C89093 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C13313 +
            (C89247 * C493 - C263 * C346) * C13258 +
            (C13956 - C13957) * C13314 + (C14240 - C14241) * C13259 +
            C13974 * C13315 + C14249 * C13260) *
               C89093 * C89153 * C812 +
           ((C13957 - C13956) * C13313 + (C14241 - C14240) * C13258 +
            (C13961 - C13960) * C13314 + (C14243 - C14242) * C13259 +
            (C13964 - C13965) * C13315 + (C14244 - C14245) * C13260) *
               C89093 * C89153 * C813 +
           (C13974 * C13313 + C14249 * C13258 + (C13965 - C13964) * C13314 +
            (C14245 - C14244) * C13259 +
            (C89247 * C13951 - C263 * C13743) * C13315 +
            (C89247 * C14237 - C263 * C14055) * C13260) *
               C89093 * C89153 * C814) *
              C815 +
          (((C278 - C277) * C13313 + (C501 - C500) * C13258 +
            (C1046 - C1047) * C13314 + (C1344 - C1345) * C13259 +
            C13968 * C13315 + C14246 * C13260) *
               C89093 * C89153 * C812 +
           ((C1047 - C1046) * C13313 + (C1345 - C1344) * C13258 +
            (C1054 - C1055) * C13314 + (C1348 - C1349) * C13259 +
            (C13970 - C13971) * C13315 + (C14247 - C14248) * C13260) *
               C89093 * C89153 * C813 +
           (C13968 * C13313 + C14246 * C13258 + (C13971 - C13970) * C13314 +
            (C14248 - C14247) * C13259 +
            (C263 * C13744 - C89247 * C13952) * C13315 +
            (C263 * C14056 - C89247 * C14238) * C13260) *
               C89093 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C25848 * C264 - C25951 * C106 + C25849 * C1934 - C25952 * C1724 +
            C25850 * C1937 - C25953 * C1725) *
               C180 +
           (C25848 * C493 - C25951 * C346 + C25849 * C2240 - C25952 * C2040 +
            C25850 * C2243 - C25953 * C2043) *
               C89236) *
              C89093 * C89153 * C89137 * C96 +
          ((C25951 * C107 - C25848 * C265 + C25952 * C1723 - C25849 * C1935 +
            C25953 * C1726 - C25850 * C1938) *
               C180 +
           (C25951 * C347 - C25848 * C494 + C25952 * C2041 - C25849 * C2241 +
            C25953 * C2044 - C25850 * C2244) *
               C89236) *
              C89093 * C89153 * C89137 * C97 +
          ((C25848 * C266 - C25951 * C108 + C25849 * C1936 - C25952 * C1722 +
            C25850 * C1939 - C25953 * C1727) *
               C180 +
           (C25848 * C495 - C25951 * C348 + C25849 * C2242 - C25952 * C2042 +
            C25850 * C2245 - C25953 * C2045) *
               C89236) *
              C89093 * C89153 * C89137 * C98 +
          ((C25951 * C109 - C25848 * C267 + C25952 * C1728 - C25849 * C1940 +
            C25953 * C1729 - C25850 * C1941) *
               C180 +
           (C25951 * C349 - C25848 * C496 + C25952 * C2046 - C25849 * C2246 +
            C25953 * C2047 - C25850 * C2247) *
               C89236) *
              C89093 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C25848 * C264 - C25951 * C106 + C25849 * C1934 - C25952 * C1724 +
             C25850 * C1937 - C25953 * C1725) *
                C180 +
            (C25848 * C493 - C25951 * C346 + C25849 * C2240 - C25952 * C2040 +
             C25850 * C2243 - C25953 * C2043) *
                C89236) *
               C89093 * C89153 * C812 +
           ((C25951 * C819 - C25848 * C1029 + C25952 * C4097 - C25849 * C4325 +
             C25953 * C6249 - C25850 * C6413) *
                C180 +
            (C25951 * C1135 - C25848 * C1335 + C25952 * C4439 - C25849 * C4661 +
             C25953 * C6493 - C25850 * C6650) *
                C89236) *
               C89093 * C89153 * C813 +
           ((C25848 * C1032 - C25951 * C820 + C25849 * C8680 - C25952 * C8516 +
             C25850 * C14761 - C25953 * C14601) *
                C180 +
            (C25848 * C1338 - C25951 * C1138 + C25849 * C8917 - C25952 * C8760 +
             C25850 * C14993 - C25953 * C14839) *
                C89236) *
               C89093 * C89153 * C814) *
              C815 +
          (((C25951 * C107 - C25848 * C265 + C25952 * C1723 - C25849 * C1935 +
             C25953 * C1726 - C25850 * C1938) *
                C180 +
            (C25951 * C347 - C25848 * C494 + C25952 * C2041 - C25849 * C2241 +
             C25953 * C2044 - C25850 * C2244) *
                C89236) *
               C89093 * C89153 * C812 +
           ((C25848 * C1030 - C25951 * C818 + C25849 * C4326 - C25952 * C4098 +
             C25850 * C6414 - C25953 * C6248) *
                C180 +
            (C25848 * C1336 - C25951 * C1136 + C25849 * C4662 - C25952 * C4440 +
             C25850 * C6651 - C25953 * C6494) *
                C89236) *
               C89093 * C89153 * C813 +
           ((C25951 * C821 - C25848 * C1033 + C25952 * C8515 - C25849 * C8681 +
             C25953 * C14602 - C25850 * C14762) *
                C180 +
            (C25951 * C1139 - C25848 * C1339 + C25952 * C8761 - C25849 * C8918 +
             C25953 * C14840 - C25850 * C14994) *
                C89236) *
               C89093 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eezx[34] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 + C91 * C116 -
             C104 * C108) *
                C263 +
            (C89 * C571 - C100 * C565 + C90 * C572 - C102 * C566 + C91 * C573 -
             C104 * C567) *
                C89247) *
               C89236 * C89153 * C812 +
           ((C100 * C819 - C89 * C829 + C102 * C818 - C90 * C827 + C104 * C817 -
             C91 * C825) *
                C263 +
            (C100 * C1425 - C89 * C1433 + C102 * C1426 - C90 * C1434 +
             C104 * C1427 - C91 * C1435) *
                C89247) *
               C89236 * C89153 * C813 +
           ((C89 * C831 - C100 * C820 + C90 * C833 - C102 * C821 + C91 * C835 -
             C104 * C822) *
                C263 +
            (C89 * C1436 - C100 * C1428 + C90 * C1437 - C102 * C1429 +
             C91 * C1438 - C104 * C1430) *
                C89247) *
               C89236 * C89153 * C814) *
              C815 +
          (((C100 * C107 - C89 * C114 + C102 * C108 - C90 * C116 + C104 * C109 -
             C91 * C118) *
                C263 +
            (C100 * C566 - C89 * C572 + C102 * C567 - C90 * C573 + C104 * C568 -
             C91 * C574) *
                C89247) *
               C89236 * C89153 * C812 +
           ((C89 * C827 - C100 * C818 + C90 * C825 - C102 * C817 + C91 * C837 -
             C104 * C823) *
                C263 +
            (C89 * C1434 - C100 * C1426 + C90 * C1435 - C102 * C1427 +
             C91 * C1439 - C104 * C1431) *
                C89247) *
               C89236 * C89153 * C813 +
           ((C100 * C821 - C89 * C833 + C102 * C822 - C90 * C835 + C104 * C824 -
             C91 * C839) *
                C263 +
            (C100 * C1429 - C89 * C1437 + C102 * C1430 - C90 * C1438 +
             C104 * C1432 - C91 * C1440) *
                C89247) *
               C89236 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 + C91 * C116 -
            C104 * C108) *
               C263 +
           (C89 * C571 - C100 * C565 + C90 * C572 - C102 * C566 + C91 * C573 -
            C104 * C567) *
               C89247) *
              C89236 * C89153 * C89137 * C96 +
          ((C100 * C107 - C89 * C114 + C102 * C108 - C90 * C116 + C104 * C109 -
            C91 * C118) *
               C263 +
           (C100 * C566 - C89 * C572 + C102 * C567 - C90 * C573 + C104 * C568 -
            C91 * C574) *
               C89247) *
              C89236 * C89153 * C89137 * C97 +
          ((C89 * C116 - C100 * C108 + C90 * C118 - C102 * C109 + C91 * C120 -
            C104 * C110) *
               C263 +
           (C89 * C573 - C100 * C567 + C90 * C574 - C102 * C568 + C91 * C575 -
            C104 * C569) *
               C89247) *
              C89236 * C89153 * C89137 * C98 +
          ((C100 * C109 - C89 * C118 + C102 * C110 - C90 * C120 + C104 * C111 -
            C91 * C122) *
               C263 +
           (C100 * C568 - C89 * C574 + C102 * C569 - C90 * C575 + C104 * C570 -
            C91 * C576) *
               C89247) *
              C89236 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C89093 * C112 - C13261 * C106) * C263 +
            (C89093 * C571 - C13261 * C565) * C89247) *
               C13258 +
           ((C89093 * C829 - C13261 * C819) * C263 +
            (C89093 * C1433 - C13261 * C1425) * C89247) *
               C13259 +
           ((C89093 * C831 - C13261 * C820) * C263 +
            (C89093 * C1436 - C13261 * C1428) * C89247) *
               C13260) *
              C89153 * C89137 * C96 +
          (((C13261 * C107 - C89093 * C114) * C263 +
            (C13261 * C566 - C89093 * C572) * C89247) *
               C13258 +
           ((C13261 * C818 - C89093 * C827) * C263 +
            (C13261 * C1426 - C89093 * C1434) * C89247) *
               C13259 +
           ((C13261 * C821 - C89093 * C833) * C263 +
            (C13261 * C1429 - C89093 * C1437) * C89247) *
               C13260) *
              C89153 * C89137 * C97 +
          (((C89093 * C116 - C13261 * C108) * C263 +
            (C89093 * C573 - C13261 * C567) * C89247) *
               C13258 +
           ((C89093 * C825 - C13261 * C817) * C263 +
            (C89093 * C1435 - C13261 * C1427) * C89247) *
               C13259 +
           ((C89093 * C835 - C13261 * C822) * C263 +
            (C89093 * C1438 - C13261 * C1430) * C89247) *
               C13260) *
              C89153 * C89137 * C98 +
          (((C13261 * C109 - C89093 * C118) * C263 +
            (C13261 * C568 - C89093 * C574) * C89247) *
               C13258 +
           ((C13261 * C823 - C89093 * C837) * C263 +
            (C13261 * C1431 - C89093 * C1439) * C89247) *
               C13259 +
           ((C13261 * C824 - C89093 * C839) * C263 +
            (C13261 * C1432 - C89093 * C1440) * C89247) *
               C13260) *
              C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C263 +
             (C89093 * C571 - C13261 * C565) * C89247) *
                C13258 +
            ((C14060 - C14061) * C263 + (C14328 - C14329) * C89247) * C13259 +
            C14346 * C13260) *
               C89153 * C812 +
           (((C14061 - C14060) * C263 + (C14329 - C14328) * C89247) * C13258 +
            ((C14065 - C14064) * C263 + (C14332 - C14331) * C89247) * C13259 +
            ((C14068 - C14069) * C263 + (C14333 - C14334) * C89247) * C13260) *
               C89153 * C813 +
           (C14346 * C13258 +
            ((C14069 - C14068) * C263 + (C14334 - C14333) * C89247) * C13259 +
            ((C89093 * C13745 - C13261 * C13743) * C263 +
             (C89093 * C14325 - C13261 * C14323) * C89247) *
                C13260) *
               C89153 * C814) *
              C815 +
          ((((C13261 * C107 - C89093 * C114) * C263 +
             (C13261 * C566 - C89093 * C572) * C89247) *
                C13258 +
            ((C14072 - C14073) * C263 + (C14335 - C14336) * C89247) * C13259 +
            C14347 * C13260) *
               C89153 * C812 +
           (((C14073 - C14072) * C263 + (C14336 - C14335) * C89247) * C13258 +
            ((C14077 - C14076) * C263 + (C14339 - C14338) * C89247) * C13259 +
            ((C14080 - C14081) * C263 + (C14340 - C14341) * C89247) * C13260) *
               C89153 * C813 +
           (C14347 * C13258 +
            ((C14081 - C14080) * C263 + (C14341 - C14340) * C89247) * C13259 +
            ((C13261 * C13744 - C89093 * C13747) * C263 +
             (C13261 * C14324 - C89093 * C14326) * C89247) *
                C13260) *
               C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C89093 * C112 - C13261 * C106) * C25951 +
           (C89093 * C571 - C13261 * C565) * C25848 +
           (C89093 * C1734 - C13261 * C1724) * C25952 +
           (C89093 * C2338 - C13261 * C2330) * C25849 +
           (C89093 * C1736 - C13261 * C1725) * C25953 +
           (C89093 * C2341 - C13261 * C2333) * C25850) *
              C89236 * C89153 * C89137 * C96 +
          ((C13261 * C107 - C89093 * C114) * C25951 +
           (C13261 * C566 - C89093 * C572) * C25848 +
           (C13261 * C1723 - C89093 * C1732) * C25952 +
           (C13261 * C2331 - C89093 * C2339) * C25849 +
           (C13261 * C1726 - C89093 * C1738) * C25953 +
           (C13261 * C2334 - C89093 * C2342) * C25850) *
              C89236 * C89153 * C89137 * C97 +
          ((C89093 * C116 - C13261 * C108) * C25951 +
           (C89093 * C573 - C13261 * C567) * C25848 +
           (C89093 * C1730 - C13261 * C1722) * C25952 +
           (C89093 * C2340 - C13261 * C2332) * C25849 +
           (C89093 * C1740 - C13261 * C1727) * C25953 +
           (C89093 * C2343 - C13261 * C2335) * C25850) *
              C89236 * C89153 * C89137 * C98 +
          ((C13261 * C109 - C89093 * C118) * C25951 +
           (C13261 * C568 - C89093 * C574) * C25848 +
           (C13261 * C1728 - C89093 * C1742) * C25952 +
           (C13261 * C2336 - C89093 * C2344) * C25849 +
           (C13261 * C1729 - C89093 * C1744) * C25953 +
           (C13261 * C2337 - C89093 * C2345) * C25850) *
              C89236 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89093 * C112 - C13261 * C106) * C25951 +
            (C89093 * C571 - C13261 * C565) * C25848 +
            (C89093 * C1734 - C13261 * C1724) * C25952 +
            (C89093 * C2338 - C13261 * C2330) * C25849 +
            (C89093 * C1736 - C13261 * C1725) * C25953 +
            (C89093 * C2341 - C13261 * C2333) * C25850) *
               C89236 * C89153 * C812 +
           ((C14061 - C14060) * C25951 + (C14329 - C14328) * C25848 +
            (C17042 - C17043) * C25952 + (C17366 - C17367) * C25849 +
            (C19097 - C19096) * C25953 + (C19335 - C19334) * C25850) *
               C89236 * C89153 * C813 +
           (C14084 * C25951 + C14342 * C25848 + (C17047 - C17046) * C25952 +
            (C17369 - C17368) * C25849 + (C19100 - C19101) * C25953 +
            (C19336 - C19337) * C25850) *
               C89236 * C89153 * C814) *
              C815 +
          (((C13261 * C107 - C89093 * C114) * C25951 +
            (C13261 * C566 - C89093 * C572) * C25848 +
            (C13261 * C1723 - C89093 * C1732) * C25952 +
            (C13261 * C2331 - C89093 * C2339) * C25849 +
            (C13261 * C1726 - C89093 * C1738) * C25953 +
            (C13261 * C2334 - C89093 * C2342) * C25850) *
               C89236 * C89153 * C812 +
           ((C14073 - C14072) * C25951 + (C14336 - C14335) * C25848 +
            (C17050 - C17051) * C25952 + (C17370 - C17371) * C25849 +
            (C89093 * C6252 - C13261 * C6248) * C25953 +
            (C89093 * C6731 - C13261 * C6728) * C25850) *
               C89236 * C89153 * C813 +
           (C14086 * C25951 + C14343 * C25848 + (C17055 - C17054) * C25952 +
            (C17373 - C17372) * C25849 +
            (C13261 * C14602 - C89093 * C14605) * C25953 +
            (C13261 * C15070 - C89093 * C15072) * C25850) *
               C89236 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eezy[34] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C263 +
             (C89236 * C627 - C180 * C565) * C89247) *
                C89 +
            ((C194 - C195) * C263 + (C634 - C635) * C89247) * C90 +
            C648 * C91) *
               C89153 * C812 +
           (((C180 * C819 - C89236 * C923) * C263 +
             (C180 * C1425 - C89236 * C1515) * C89247) *
                C89 +
            ((C940 - C941) * C263 + (C1524 - C1525) * C89247) * C90 +
            ((C944 - C945) * C263 + (C1526 - C1527) * C89247) * C91) *
               C89153 * C813 +
           (((C89236 * C926 - C180 * C820) * C263 +
             (C89236 * C1518 - C180 * C1428) * C89247) *
                C89 +
            ((C948 - C949) * C263 + (C1528 - C1529) * C89247) * C90 +
            ((C952 - C953) * C263 + (C1530 - C1531) * C89247) * C91) *
               C89153 * C814) *
              C815 +
          ((((C195 - C194) * C263 + (C635 - C634) * C89247) * C89 +
            ((C199 - C198) * C263 + (C638 - C637) * C89247) * C90 +
            C649 * C91) *
               C89153 * C812 +
           (((C941 - C940) * C263 + (C1525 - C1524) * C89247) * C89 +
            ((C945 - C944) * C263 + (C1527 - C1526) * C89247) * C90 +
            ((C89236 * C929 - C180 * C823) * C263 +
             (C89236 * C1521 - C180 * C1431) * C89247) *
                C91) *
               C89153 * C813 +
           (((C949 - C948) * C263 + (C1529 - C1528) * C89247) * C89 +
            ((C953 - C952) * C263 + (C1531 - C1530) * C89247) * C90 +
            ((C180 * C824 - C89236 * C930) * C263 +
             (C180 * C1432 - C89236 * C1522) * C89247) *
                C91) *
               C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C89236 * C181 - C180 * C106) * C263 +
            (C89236 * C627 - C180 * C565) * C89247) *
               C89 +
           ((C194 - C195) * C263 + (C634 - C635) * C89247) * C90 + C648 * C91) *
              C89153 * C89137 * C96 +
          (((C195 - C194) * C263 + (C635 - C634) * C89247) * C89 +
           ((C199 - C198) * C263 + (C638 - C637) * C89247) * C90 + C649 * C91) *
              C89153 * C89137 * C97 +
          (C648 * C89 + ((C203 - C202) * C263 + (C641 - C640) * C89247) * C90 +
           ((C206 - C207) * C263 + (C642 - C643) * C89247) * C91) *
              C89153 * C89137 * C98 +
          (C649 * C89 + ((C207 - C206) * C263 + (C643 - C642) * C89247) * C90 +
           ((C180 * C111 - C89236 * C186) * C263 +
            (C180 * C570 - C89236 * C632) * C89247) *
               C91) *
              C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
            C13260 * C926 - C13315 * C820) *
               C263 +
           (C13258 * C627 - C13313 * C565 + C13259 * C1515 - C13314 * C1425 +
            C13260 * C1518 - C13315 * C1428) *
               C89247) *
              C89093 * C89153 * C89137 * C96 +
          ((C13313 * C107 - C13258 * C182 + C13314 * C818 - C13259 * C924 +
            C13315 * C821 - C13260 * C927) *
               C263 +
           (C13313 * C566 - C13258 * C628 + C13314 * C1426 - C13259 * C1516 +
            C13315 * C1429 - C13260 * C1519) *
               C89247) *
              C89093 * C89153 * C89137 * C97 +
          ((C13258 * C183 - C13313 * C108 + C13259 * C925 - C13314 * C817 +
            C13260 * C928 - C13315 * C822) *
               C263 +
           (C13258 * C629 - C13313 * C567 + C13259 * C1517 - C13314 * C1427 +
            C13260 * C1520 - C13315 * C1430) *
               C89247) *
              C89093 * C89153 * C89137 * C98 +
          ((C13313 * C109 - C13258 * C184 + C13314 * C823 - C13259 * C929 +
            C13315 * C824 - C13260 * C930) *
               C263 +
           (C13313 * C568 - C13258 * C630 + C13314 * C1431 - C13259 * C1521 +
            C13315 * C1432 - C13260 * C1522) *
               C89247) *
              C89093 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
             C13260 * C926 - C13315 * C820) *
                C263 +
            (C13258 * C627 - C13313 * C565 + C13259 * C1515 - C13314 * C1425 +
             C13260 * C1518 - C13315 * C1428) *
                C89247) *
               C89093 * C89153 * C812 +
           ((C13313 * C819 - C13258 * C923 + C13314 * C820 - C13259 * C926 +
             C13315 * C5727 - C13260 * C5787) *
                C263 +
            (C13313 * C1425 - C13258 * C1515 + C13314 * C1428 - C13259 * C1518 +
             C13315 * C6061 - C13260 * C6117) *
                C89247) *
               C89093 * C89153 * C813 +
           ((C13258 * C926 - C13313 * C820 + C13259 * C5787 - C13314 * C5727 +
             C13260 * C13873 - C13315 * C13743) *
                C263 +
            (C13258 * C1518 - C13313 * C1428 + C13259 * C6117 - C13314 * C6061 +
             C13260 * C14421 - C13315 * C14323) *
                C89247) *
               C89093 * C89153 * C814) *
              C815 +
          (((C13313 * C107 - C13258 * C182 + C13314 * C818 - C13259 * C924 +
             C13315 * C821 - C13260 * C927) *
                C263 +
            (C13313 * C566 - C13258 * C628 + C13314 * C1426 - C13259 * C1516 +
             C13315 * C1429 - C13260 * C1519) *
                C89247) *
               C89093 * C89153 * C812 +
           ((C13258 * C924 - C13313 * C818 + C13259 * C927 - C13314 * C821 +
             C13260 * C5788 - C13315 * C5726) *
                C263 +
            (C13258 * C1516 - C13313 * C1426 + C13259 * C1519 - C13314 * C1429 +
             C13260 * C6118 - C13315 * C6062) *
                C89247) *
               C89093 * C89153 * C813 +
           ((C13313 * C821 - C13258 * C927 + C13314 * C5726 - C13259 * C5788 +
             C13315 * C13744 - C13260 * C13874) *
                C263 +
            (C13313 * C1429 - C13258 * C1519 + C13314 * C6062 - C13259 * C6118 +
             C13315 * C14324 - C13260 * C14422) *
                C89247) *
               C89093 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C89236 * C181 - C180 * C106) * C25951 +
           (C89236 * C627 - C180 * C565) * C25848 +
           (C89236 * C1828 - C180 * C1724) * C25952 +
           (C89236 * C2420 - C180 * C2330) * C25849 +
           (C89236 * C1831 - C180 * C1725) * C25953 +
           (C89236 * C2423 - C180 * C2333) * C25850) *
              C89093 * C89153 * C89137 * C96 +
          ((C195 - C194) * C25951 + (C635 - C634) * C25848 +
           (C1845 - C1846) * C25952 + (C2429 - C2430) * C25849 +
           (C1854 - C1853) * C25953 + (C2434 - C2433) * C25850) *
              C89093 * C89153 * C89137 * C97 +
          (C210 * C25951 + C644 * C25848 + (C1850 - C1849) * C25952 +
           (C2432 - C2431) * C25849 + (C1857 - C1858) * C25953 +
           (C2435 - C2436) * C25850) *
              C89093 * C89153 * C89137 * C98 +
          (C212 * C25951 + C645 * C25848 + (C3436 - C3435) * C25952 +
           (C3914 - C3913) * C25849 + (C180 * C1729 - C89236 * C1835) * C25953 +
           (C180 * C2337 - C89236 * C2427) * C25850) *
              C89093 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89236 * C181 - C180 * C106) * C25951 +
            (C89236 * C627 - C180 * C565) * C25848 +
            (C89236 * C1828 - C180 * C1724) * C25952 +
            (C89236 * C2420 - C180 * C2330) * C25849 +
            (C89236 * C1831 - C180 * C1725) * C25953 +
            (C89236 * C2423 - C180 * C2333) * C25850) *
               C89093 * C89153 * C812 +
           ((C180 * C819 - C89236 * C923) * C25951 +
            (C180 * C1425 - C89236 * C1515) * C25848 +
            (C180 * C4097 - C89236 * C4211) * C25952 +
            (C180 * C4767 - C89236 * C4873) * C25849 +
            (C180 * C6249 - C89236 * C6333) * C25953 +
            (C180 * C6727 - C89236 * C6807) * C25850) *
               C89093 * C89153 * C813 +
           ((C89236 * C926 - C180 * C820) * C25951 +
            (C89236 * C1518 - C180 * C1428) * C25848 +
            (C89236 * C8600 - C180 * C8516) * C25952 +
            (C89236 * C9074 - C180 * C8994) * C25849 +
            (C89236 * C14683 - C180 * C14601) * C25953 +
            (C89236 * C15147 - C180 * C15069) * C25850) *
               C89093 * C89153 * C814) *
              C815 +
          (((C195 - C194) * C25951 + (C635 - C634) * C25848 +
            (C1845 - C1846) * C25952 + (C2429 - C2430) * C25849 +
            (C1854 - C1853) * C25953 + (C2434 - C2433) * C25850) *
               C89093 * C89153 * C812 +
           ((C941 - C940) * C25951 + (C1525 - C1524) * C25848 +
            (C4220 - C4221) * C25952 + (C4878 - C4879) * C25849 +
            (C89236 * C6334 - C180 * C6248) * C25953 +
            (C89236 * C6808 - C180 * C6728) * C25850) *
               C89093 * C89153 * C813 +
           ((C949 - C948) * C25951 + (C1529 - C1528) * C25848 +
            (C180 * C8515 - C89236 * C8601) * C25952 +
            (C180 * C8995 - C89236 * C9075) * C25849 +
            (C180 * C14602 - C89236 * C14684) * C25953 +
            (C180 * C15070 - C89236 * C15148) * C25850) *
               C89093 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eezz[34] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C89236 *
                C89 +
            C735 * C90 + C736 * C91) *
               C89153 * C812 -
           (C1642 * C91 + C1643 * C90 +
            (C263 * C1029 - C699 * C819 - C263 * C1425 + C89247 * C1607) *
                C89236 * C89) *
               C89153 * C813 +
           ((C263 * C1032 - C699 * C820 - C263 * C1428 + C89247 * C1608) *
                C89236 * C89 +
            C1644 * C90 + C1645 * C91) *
               C89153 * C814) *
              C815 +
          ((C1643 * C89 + C1642 * C90 +
            (C263 * C1035 - C699 * C823 - C263 * C1431 + C89247 * C1611) *
                C89236 * C91) *
               C89153 * C813 -
           (C737 * C91 + C736 * C90 + C735 * C89) * C89153 * C812 -
           ((C263 * C1036 - C699 * C824 - C263 * C1432 + C89247 * C1612) *
                C89236 * C91 +
            C1645 * C90 + C1644 * C89) *
               C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C89236 *
               C89 +
           C735 * C90 + C736 * C91) *
              C89153 * C89137 * C96 -
          (C737 * C91 + C736 * C90 + C735 * C89) * C89153 * C89137 * C97 +
          (C736 * C89 + C737 * C90 + C738 * C91) * C89153 * C89137 * C98 -
          ((C263 * C269 - C699 * C111 - C263 * C570 + C89247 * C705) * C89236 *
               C91 +
           C738 * C90 + C737 * C89) *
              C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C13258 +
           (C263 * C1029 - C699 * C819 - C263 * C1425 + C89247 * C1607) *
               C13259 +
           (C263 * C1032 - C699 * C820 - C263 * C1428 + C89247 * C1608) *
               C13260) *
              C89093 * C89153 * C89137 * C96 -
          (C1640 * C13260 + C1639 * C13259 + C731 * C13258) * C89093 * C89153 *
              C89137 * C97 +
          (C732 * C13258 + C1638 * C13259 + C1641 * C13260) * C89093 * C89153 *
              C89137 * C98 -
          ((C263 * C1036 - C699 * C824 - C263 * C1432 + C89247 * C1612) *
               C13260 +
           C3275 * C13259 + C733 * C13258) *
              C89093 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C13258 +
            C14524 * C13259 + C14525 * C13260) *
               C89093 * C89153 * C812 -
           (C14526 * C13260 + C14525 * C13259 + C14524 * C13258) * C89093 *
               C89153 * C813 +
           (C14525 * C13258 + C14526 * C13259 +
            (C263 * C13951 - C699 * C13743 - C263 * C14323 + C89247 * C14497) *
                C13260) *
               C89093 * C89153 * C814) *
              C815 +
          ((C1639 * C13258 + C1640 * C13259 + C14527 * C13260) * C89093 *
               C89153 * C813 -
           (C1640 * C13260 + C1639 * C13259 + C731 * C13258) * C89093 * C89153 *
               C812 -
           ((C263 * C13952 - C699 * C13744 - C263 * C14324 + C89247 * C14498) *
                C13260 +
            C14527 * C13259 + C1640 * C13258) *
               C89093 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((C25951 * C264 - C26254 * C106 - C25951 * C565 + C25848 * C700 +
           C25952 * C1934 - C26255 * C1724 - C25952 * C2330 + C25849 * C2512 +
           C25953 * C1937 - C26256 * C1725 - C25953 * C2333 + C25850 * C2513) *
              C89236 * C89093 * C89153 * C89137 * C96 -
          (C25953 * C1938 - C26256 * C1726 - C25953 * C2334 + C25850 * C2514 +
           C25952 * C1935 - C26255 * C1723 - C25952 * C2331 + C25849 * C2511 +
           C25951 * C265 - C26254 * C107 - C25951 * C566 + C25848 * C701) *
              C89236 * C89093 * C89153 * C89137 * C97 +
          (C25951 * C266 - C26254 * C108 - C25951 * C567 + C25848 * C702 +
           C25952 * C1936 - C26255 * C1722 - C25952 * C2332 + C25849 * C2510 +
           C25953 * C1939 - C26256 * C1727 - C25953 * C2335 + C25850 * C2515) *
              C89236 * C89093 * C89153 * C89137 * C98 -
          (C25953 * C1941 - C26256 * C1729 - C25953 * C2337 + C25850 * C2517 +
           C25952 * C1940 - C26255 * C1728 - C25952 * C2336 + C25849 * C2516 +
           C25951 * C267 - C26254 * C109 - C25951 * C568 + C25848 * C703) *
              C89236 * C89093 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C25951 * C264 - C26254 * C106 - C25951 * C565 + C25848 * C700 +
            C25952 * C1934 - C26255 * C1724 - C25952 * C2330 + C25849 * C2512 +
            C25953 * C1937 - C26256 * C1725 - C25953 * C2333 + C25850 * C2513) *
               C89236 * C89093 * C89153 * C812 -
           (C25953 * C6413 - C26256 * C6249 - C25953 * C6727 + C25850 * C6886 +
            C25952 * C4325 - C26255 * C4097 - C25952 * C4767 + C25849 * C4979 +
            C25951 * C1029 - C26254 * C819 - C25951 * C1425 + C25848 * C1607) *
               C89236 * C89093 * C89153 * C813 +
           (C25951 * C1032 - C26254 * C820 - C25951 * C1428 + C25848 * C1608 +
            C25952 * C8680 - C26255 * C8516 - C25952 * C8994 + C25849 * C9153 +
            C25953 * C14761 - C26256 * C14601 - C25953 * C15069 +
            C25850 * C15223) *
               C89236 * C89093 * C89153 * C814) *
              C815 +
          ((C25951 * C1030 - C26254 * C818 - C25951 * C1426 + C25848 * C1606 +
            C25952 * C4326 - C26255 * C4098 - C25952 * C4768 + C25849 * C4980 +
            C25953 * C6414 - C26256 * C6248 - C25953 * C6728 + C25850 * C6885) *
               C89236 * C89093 * C89153 * C813 -
           (C25953 * C1938 - C26256 * C1726 - C25953 * C2334 + C25850 * C2514 +
            C25952 * C1935 - C26255 * C1723 - C25952 * C2331 + C25849 * C2511 +
            C25951 * C265 - C26254 * C107 - C25951 * C566 + C25848 * C701) *
               C89236 * C89093 * C89153 * C812 -
           (C25953 * C14762 - C26256 * C14602 - C25953 * C15070 +
            C25850 * C15224 + C25952 * C8681 - C26255 * C8515 - C25952 * C8995 +
            C25849 * C9152 + C25951 * C1033 - C26254 * C821 - C25951 * C1429 +
            C25848 * C1609) *
               C89236 * C89093 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eexx[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                C89247 * C13258 +
            C13794 * C13259 + C13795 * C13260) *
               C89153 * C89335 -
           (C13796 * C13260 + C13795 * C13259 + C13794 * C13258) * C89153 *
               C89336 +
           (C13795 * C13258 + C13796 * C13259 + C18322 * C13260) * C89153 *
               C6963) *
              C89299 +
          ((C13797 * C13258 + C13798 * C13259 + C13799 * C13260) * C89153 *
               C89336 -
           (C13798 * C13260 + C13797 * C13259 +
            (C13261 * C114 - C13262 * C107 - C13261 * C115 + C89093 * C125) *
                C89247 * C13258) *
               C89153 * C89335 -
           ((C13261 * C13747 - C13262 * C13744 - C13261 * C13748 +
             C89093 * C13750) *
                C89247 * C13260 +
            C13799 * C13259 + C13798 * C13258) *
               C89153 * C6963) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C112 - C101 * C106 - C100 * C113 + C89 * C124 + C102 * C114 -
            C103 * C107 - C102 * C115 + C90 * C125 + C104 * C116 - C105 * C108 -
            C104 * C117 + C91 * C126) *
               C89247 * C89236 * C89153 * C89335 -
           (C104 * C825 - C105 * C817 - C104 * C826 + C91 * C841 + C102 * C827 -
            C103 * C818 - C102 * C828 + C90 * C842 + C100 * C829 - C101 * C819 -
            C100 * C830 + C89 * C843) *
               C89247 * C89236 * C89153 * C89336 +
           (C100 * C831 - C101 * C820 - C100 * C832 + C89 * C844 + C102 * C833 -
            C103 * C821 - C102 * C834 + C90 * C845 + C104 * C835 - C105 * C822 -
            C104 * C836 + C91 * C846) *
               C89247 * C89236 * C89153 * C6963) *
              C89299 +
          ((C100 * C827 - C101 * C818 - C100 * C828 + C89 * C842 + C102 * C825 -
            C103 * C817 - C102 * C826 + C90 * C841 + C104 * C837 - C105 * C823 -
            C104 * C838 + C91 * C847) *
               C89247 * C89236 * C89153 * C89336 -
           (C104 * C118 - C105 * C109 - C104 * C119 + C91 * C127 + C102 * C116 -
            C103 * C108 - C102 * C117 + C90 * C126 + C100 * C114 - C101 * C107 -
            C100 * C115 + C89 * C125) *
               C89247 * C89236 * C89153 * C89335 -
           (C104 * C839 - C105 * C824 - C104 * C840 + C91 * C848 + C102 * C835 -
            C103 * C822 - C102 * C836 + C90 * C846 + C100 * C833 - C101 * C821 -
            C100 * C834 + C89 * C845) *
               C89247 * C89236 * C89153 * C6963) *
              C89124)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                C25848 +
            C27042 * C25849 + C27043 * C25850) *
               C89236 * C89153 * C89335 -
           (C18856 * C25850 + C16717 * C25849 + C13788 * C25848) * C89236 *
               C89153 * C89336 +
           (C13789 * C25848 + C16716 * C25849 + C18857 * C25850) * C89236 *
               C89153 * C6963) *
              C89299 +
          ((C13791 * C25848 + C16718 * C25849 + C29250 * C25850) * C89236 *
               C89153 * C89336 -
           (C27046 * C25850 + C27045 * C25849 +
            (C13261 * C114 - C13262 * C107 - C13261 * C115 + C89093 * C125) *
                C25848) *
               C89236 * C89153 * C89335 -
           ((C13261 * C14605 - C13262 * C14602 - C13261 * C14606 +
             C89093 * C14608) *
                C25850 +
            C16719 * C25849 + C13792 * C25848) *
               C89236 * C89153 * C6963) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eexy[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
             C13260 * C926 - C13315 * C820) *
                C13261 +
            (C13258 * C187 - C13313 * C113 + C13259 * C931 - C13314 * C830 +
             C13260 * C934 - C13315 * C832) *
                C89093) *
               C89247 * C89153 * C89335 +
           ((C13313 * C819 - C13258 * C923 + C13314 * C820 - C13259 * C926 +
             C13315 * C5727 - C13260 * C5787) *
                C13261 +
            (C13313 * C830 - C13258 * C931 + C13314 * C832 - C13259 * C934 +
             C13315 * C5733 - C13260 * C5790) *
                C89093) *
               C89247 * C89153 * C89336 +
           ((C13258 * C926 - C13313 * C820 + C13259 * C5787 - C13314 * C5727 +
             C13260 * C13873 - C13315 * C13743) *
                C13261 +
            (C13258 * C934 - C13313 * C832 + C13259 * C5790 - C13314 * C5733 +
             C13260 * C13875 - C13315 * C13746) *
                C89093) *
               C89247 * C89153 * C6963) *
              C89299 +
          (((C13313 * C107 - C13258 * C182 + C13314 * C818 - C13259 * C924 +
             C13315 * C821 - C13260 * C927) *
                C13261 +
            (C13313 * C115 - C13258 * C188 + C13314 * C828 - C13259 * C932 +
             C13315 * C834 - C13260 * C935) *
                C89093) *
               C89247 * C89153 * C89335 +
           ((C13258 * C924 - C13313 * C818 + C13259 * C927 - C13314 * C821 +
             C13260 * C5788 - C13315 * C5726) *
                C13261 +
            (C13258 * C932 - C13313 * C828 + C13259 * C935 - C13314 * C834 +
             C13260 * C5791 - C13315 * C5731) *
                C89093) *
               C89247 * C89153 * C89336 +
           ((C13313 * C821 - C13258 * C927 + C13314 * C5726 - C13259 * C5788 +
             C13315 * C13744 - C13260 * C13874) *
                C13261 +
            (C13313 * C834 - C13258 * C935 + C13314 * C5731 - C13259 * C5791 +
             C13315 * C13748 - C13260 * C13876) *
                C89093) *
               C89247 * C89153 * C6963) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89236 * C181 - C180 * C106) * C100 +
            (C89236 * C187 - C180 * C113) * C89 + (C194 - C195) * C102 +
            (C196 - C197) * C90 + C210 * C104 + C211 * C91) *
               C89247 * C89153 * C89335 +
           ((C180 * C819 - C89236 * C923) * C100 +
            (C180 * C830 - C89236 * C931) * C89 + (C940 - C941) * C102 +
            (C942 - C943) * C90 + C2710 * C104 + C2711 * C91) *
               C89247 * C89153 * C89336 +
           ((C89236 * C926 - C180 * C820) * C100 +
            (C89236 * C934 - C180 * C832) * C89 + (C948 - C949) * C102 +
            (C950 - C951) * C90 + (C952 - C953) * C104 + (C954 - C955) * C91) *
               C89247 * C89153 * C6963) *
              C89299 +
          (((C195 - C194) * C100 + (C197 - C196) * C89 + (C199 - C198) * C102 +
            (C201 - C200) * C90 + C212 * C104 + C213 * C91) *
               C89247 * C89153 * C89335 +
           ((C941 - C940) * C100 + (C943 - C942) * C89 + (C945 - C944) * C102 +
            (C947 - C946) * C90 + (C2712 - C2713) * C104 +
            (C2714 - C2715) * C91) *
               C89247 * C89153 * C89336 +
           ((C949 - C948) * C100 + (C951 - C950) * C89 + (C953 - C952) * C102 +
            (C955 - C954) * C90 + (C180 * C824 - C89236 * C930) * C104 +
            (C180 * C840 - C89236 * C938) * C91) *
               C89247 * C89153 * C6963) *
              C89124)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C13261 +
             (C89236 * C187 - C180 * C113) * C89093) *
                C25848 +
            ((C27126 - C27127) * C13261 + (C27128 - C27129) * C89093) * C25849 +
            C27151 * C25850) *
               C89153 * C89335 +
           (((C180 * C819 - C89236 * C923) * C13261 +
             (C180 * C830 - C89236 * C931) * C89093) *
                C25848 +
            ((C29351 - C29352) * C13261 + (C29353 - C29354) * C89093) * C25849 +
            C31381 * C25850) *
               C89153 * C89336 +
           (((C89236 * C926 - C180 * C820) * C13261 +
             (C89236 * C934 - C180 * C832) * C89093) *
                C25848 +
            ((C89236 * C8600 - C180 * C8516) * C13261 +
             (C89236 * C8603 - C180 * C8522) * C89093) *
                C25849 +
            ((C89236 * C14683 - C180 * C14601) * C13261 +
             (C89236 * C14685 - C180 * C14604) * C89093) *
                C25850) *
               C89153 * C6963) *
              C89299 +
          ((((C195 - C194) * C13261 + (C197 - C196) * C89093) * C25848 +
            ((C1845 - C1846) * C13261 + (C1847 - C1848) * C89093) * C25849 +
            C27150 * C25850) *
               C89153 * C89335 +
           (((C941 - C940) * C13261 + (C943 - C942) * C89093) * C25848 +
            ((C4220 - C4221) * C13261 + (C4222 - C4223) * C89093) * C25849 +
            ((C29359 - C29360) * C13261 + (C29361 - C29362) * C89093) *
                C25850) *
               C89153 * C89336 +
           (((C949 - C948) * C13261 + (C951 - C950) * C89093) * C25848 +
            ((C180 * C8515 - C89236 * C8601) * C13261 +
             (C180 * C8520 - C89236 * C8604) * C89093) *
                C25849 +
            ((C180 * C14602 - C89236 * C14684) * C13261 +
             (C180 * C14606 - C89236 * C14686) * C89093) *
                C25850) *
               C89153 * C6963) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eexz[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C13261 +
             (C89247 * C270 - C263 * C113) * C89093) *
                C13258 +
            ((C13956 - C13957) * C13261 + (C13958 - C13959) * C89093) * C13259 +
            C13981 * C13260) *
               C89153 * C89335 +
           (((C13957 - C13956) * C13261 + (C13959 - C13958) * C89093) * C13258 +
            ((C13961 - C13960) * C13261 + (C13963 - C13962) * C89093) * C13259 +
            C18435 * C13260) *
               C89153 * C89336 +
           (C13981 * C13258 +
            ((C13965 - C13964) * C13261 + (C13967 - C13966) * C89093) * C13259 +
            ((C18429 - C18430) * C13261 + (C18431 - C18432) * C89093) *
                C13260) *
               C89153 * C6963) *
              C89299 +
          ((((C278 - C277) * C13261 + (C280 - C279) * C89093) * C13258 +
            ((C1046 - C1047) * C13261 + (C1048 - C1049) * C89093) * C13259 +
            C13980 * C13260) *
               C89153 * C89335 +
           (((C1047 - C1046) * C13261 + (C1049 - C1048) * C89093) * C13258 +
            ((C1054 - C1055) * C13261 + (C1056 - C1057) * C89093) * C13259 +
            ((C13970 - C13971) * C13261 + (C13972 - C13973) * C89093) *
                C13260) *
               C89153 * C89336 +
           (C13980 * C13258 +
            ((C13971 - C13970) * C13261 + (C13973 - C13972) * C89093) * C13259 +
            ((C263 * C13744 - C89247 * C13952) * C13261 +
             (C263 * C13748 - C89247 * C13954) * C89093) *
                C13260) *
               C89153 * C6963) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C100 +
            (C89247 * C270 - C263 * C113) * C89 + (C277 - C278) * C102 +
            (C279 - C280) * C90 + C293 * C104 + C294 * C91) *
               C89236 * C89153 * C89335 +
           ((C263 * C819 - C89247 * C1029) * C100 +
            (C263 * C830 - C89247 * C1037) * C89 + (C1046 - C1047) * C102 +
            (C1048 - C1049) * C90 + C2792 * C104 + C2793 * C91) *
               C89236 * C89153 * C89336 +
           ((C89247 * C1032 - C263 * C820) * C100 +
            (C89247 * C1040 - C263 * C832) * C89 + (C1054 - C1055) * C102 +
            (C1056 - C1057) * C90 + (C1058 - C1059) * C104 +
            (C1060 - C1061) * C91) *
               C89236 * C89153 * C6963) *
              C89299 +
          (((C278 - C277) * C100 + (C280 - C279) * C89 + (C282 - C281) * C102 +
            (C284 - C283) * C90 + C295 * C104 + C296 * C91) *
               C89236 * C89153 * C89335 +
           ((C1047 - C1046) * C100 + (C1049 - C1048) * C89 +
            (C1051 - C1050) * C102 + (C1053 - C1052) * C90 +
            (C2794 - C2795) * C104 + (C2796 - C2797) * C91) *
               C89236 * C89153 * C89336 +
           ((C1055 - C1054) * C100 + (C1057 - C1056) * C89 +
            (C1059 - C1058) * C102 + (C1061 - C1060) * C90 +
            (C263 * C824 - C89247 * C1036) * C104 +
            (C263 * C840 - C89247 * C1044) * C91) *
               C89236 * C89153 * C6963) *
              C89124)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C25848 * C264 - C25951 * C106 + C25849 * C1934 - C25952 * C1724 +
             C25850 * C1937 - C25953 * C1725) *
                C13261 +
            (C25848 * C270 - C25951 * C113 + C25849 * C1942 - C25952 * C1735 +
             C25850 * C1945 - C25953 * C1737) *
                C89093) *
               C89236 * C89153 * C89335 +
           ((C25951 * C819 - C25848 * C1029 + C25952 * C4097 - C25849 * C4325 +
             C25953 * C6249 - C25850 * C6413) *
                C13261 +
            (C25951 * C830 - C25848 * C1037 + C25952 * C4102 - C25849 * C4329 +
             C25953 * C6255 - C25850 * C6416) *
                C89093) *
               C89236 * C89153 * C89336 +
           ((C25848 * C1032 - C25951 * C820 + C25849 * C8680 - C25952 * C8516 +
             C25850 * C14761 - C25953 * C14601) *
                C13261 +
            (C25848 * C1040 - C25951 * C832 + C25849 * C8683 - C25952 * C8522 +
             C25850 * C14763 - C25953 * C14604) *
                C89093) *
               C89236 * C89153 * C6963) *
              C89299 +
          (((C25951 * C107 - C25848 * C265 + C25952 * C1723 - C25849 * C1935 +
             C25953 * C1726 - C25850 * C1938) *
                C13261 +
            (C25951 * C115 - C25848 * C271 + C25952 * C1733 - C25849 * C1943 +
             C25953 * C1739 - C25850 * C1946) *
                C89093) *
               C89236 * C89153 * C89335 +
           ((C25848 * C1030 - C25951 * C818 + C25849 * C4326 - C25952 * C4098 +
             C25850 * C6414 - C25953 * C6248) *
                C13261 +
            (C25848 * C1038 - C25951 * C828 + C25849 * C4330 - C25952 * C4104 +
             C25850 * C6417 - C25953 * C6253) *
                C89093) *
               C89236 * C89153 * C89336 +
           ((C25951 * C821 - C25848 * C1033 + C25952 * C8515 - C25849 * C8681 +
             C25953 * C14602 - C25850 * C14762) *
                C13261 +
            (C25951 * C834 - C25848 * C1041 + C25952 * C8520 - C25849 * C8684 +
             C25953 * C14606 - C25850 * C14764) *
                C89093) *
               C89236 * C89153 * C6963) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89093 * C112 - C13261 * C106) * C13313 +
            (C89093 * C352 - C13261 * C346) * C13258 +
            (C14060 - C14061) * C13314 + (C14062 - C14063) * C13259 +
            C14084 * C13315 + C14085 * C13260) *
               C89247 * C89153 * C89335 +
           ((C14061 - C14060) * C13313 + (C14063 - C14062) * C13258 +
            (C14065 - C14064) * C13314 + (C14067 - C14066) * C13259 +
            C18488 * C13315 + C18489 * C13260) *
               C89247 * C89153 * C89336 +
           (C14084 * C13313 + C14085 * C13258 + (C14069 - C14068) * C13314 +
            (C14071 - C14070) * C13259 + (C18490 - C18491) * C13315 +
            (C18492 - C18493) * C13260) *
               C89247 * C89153 * C6963) *
              C89299 +
          (((C13261 * C107 - C89093 * C114) * C13313 +
            (C13261 * C347 - C89093 * C353) * C13258 +
            (C14072 - C14073) * C13314 + (C14074 - C14075) * C13259 +
            C14086 * C13315 + C14087 * C13260) *
               C89247 * C89153 * C89335 +
           ((C14073 - C14072) * C13313 + (C14075 - C14074) * C13258 +
            (C14077 - C14076) * C13314 + (C14079 - C14078) * C13259 +
            (C14080 - C14081) * C13315 + (C14082 - C14083) * C13260) *
               C89247 * C89153 * C89336 +
           (C14086 * C13313 + C14087 * C13258 + (C14081 - C14080) * C13314 +
            (C14083 - C14082) * C13259 +
            (C13261 * C13744 - C89093 * C13747) * C13315 +
            (C13261 * C14056 - C89093 * C14058) * C13260) *
               C89247 * C89153 * C6963) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 + C91 * C116 -
             C104 * C108) *
                C180 +
            (C89 * C352 - C100 * C346 + C90 * C353 - C102 * C347 + C91 * C354 -
             C104 * C348) *
                C89236) *
               C89247 * C89153 * C89335 +
           ((C100 * C819 - C89 * C829 + C102 * C818 - C90 * C827 + C104 * C817 -
             C91 * C825) *
                C180 +
            (C100 * C1135 - C89 * C1143 + C102 * C1136 - C90 * C1144 +
             C104 * C1137 - C91 * C1145) *
                C89236) *
               C89247 * C89153 * C89336 +
           ((C89 * C831 - C100 * C820 + C90 * C833 - C102 * C821 + C91 * C835 -
             C104 * C822) *
                C180 +
            (C89 * C1146 - C100 * C1138 + C90 * C1147 - C102 * C1139 +
             C91 * C1148 - C104 * C1140) *
                C89236) *
               C89247 * C89153 * C6963) *
              C89299 +
          (((C100 * C107 - C89 * C114 + C102 * C108 - C90 * C116 + C104 * C109 -
             C91 * C118) *
                C180 +
            (C100 * C347 - C89 * C353 + C102 * C348 - C90 * C354 + C104 * C349 -
             C91 * C355) *
                C89236) *
               C89247 * C89153 * C89335 +
           ((C89 * C827 - C100 * C818 + C90 * C825 - C102 * C817 + C91 * C837 -
             C104 * C823) *
                C180 +
            (C89 * C1144 - C100 * C1136 + C90 * C1145 - C102 * C1137 +
             C91 * C1149 - C104 * C1141) *
                C89236) *
               C89247 * C89153 * C89336 +
           ((C100 * C821 - C89 * C833 + C102 * C822 - C90 * C835 + C104 * C824 -
             C91 * C839) *
                C180 +
            (C100 * C1139 - C89 * C1147 + C102 * C1140 - C90 * C1148 +
             C104 * C1142 - C91 * C1150) *
                C89236) *
               C89247 * C89153 * C6963) *
              C89124)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C180 +
             (C89093 * C352 - C13261 * C346) * C89236) *
                C25848 +
            ((C27308 - C27309) * C180 + (C27310 - C27311) * C89236) * C25849 +
            C27340 * C25850) *
               C89153 * C89335 +
           (((C14061 - C14060) * C180 + (C14063 - C14062) * C89236) * C25848 +
            ((C17042 - C17043) * C180 + (C17044 - C17045) * C89236) * C25849 +
            C31542 * C25850) *
               C89153 * C89336 +
           ((C14084 * C180 + C14085 * C89236) * C25848 +
            ((C17047 - C17046) * C180 + (C17049 - C17048) * C89236) * C25849 +
            ((C19100 - C19101) * C180 + (C19102 - C19103) * C89236) * C25850) *
               C89153 * C6963) *
              C89299 +
          ((((C13261 * C107 - C89093 * C114) * C180 +
             (C13261 * C347 - C89093 * C353) * C89236) *
                C25848 +
            ((C27320 - C27321) * C180 + (C27322 - C27323) * C89236) * C25849 +
            C27341 * C25850) *
               C89153 * C89335 +
           (((C14073 - C14072) * C180 + (C14075 - C14074) * C89236) * C25848 +
            ((C17050 - C17051) * C180 + (C17052 - C17053) * C89236) * C25849 +
            ((C29563 - C29564) * C180 + (C29565 - C29566) * C89236) * C25850) *
               C89153 * C89336 +
           ((C14086 * C180 + C14087 * C89236) * C25848 +
            ((C17055 - C17054) * C180 + (C17057 - C17056) * C89236) * C25849 +
            ((C13261 * C14602 - C89093 * C14605) * C180 +
             (C13261 * C14840 - C89093 * C14842) * C89236) *
                C25850) *
               C89153 * C6963) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13313 * C181 - C13466 * C106 - C13313 * C346 + C13258 * C409 +
            C13314 * C923 - C13467 * C819 - C13314 * C1135 + C13259 * C1227 +
            C13315 * C926 - C13468 * C820 - C13315 * C1138 + C13260 * C1228) *
               C89093 * C89247 * C89153 * C89335 -
           (C13315 * C5787 - C13468 * C5727 - C13315 * C5899 + C13260 * C5957 +
            C13314 * C926 - C13467 * C820 - C13314 * C1138 + C13259 * C1228 +
            C13313 * C923 - C13466 * C819 - C13313 * C1135 + C13258 * C1227) *
               C89093 * C89247 * C89153 * C89336 +
           (C13313 * C926 - C13466 * C820 - C13313 * C1138 + C13258 * C1228 +
            C13314 * C5787 - C13467 * C5727 - C13314 * C5899 + C13259 * C5957 +
            C13315 * C13873 - C13468 * C13743 - C13315 * C14055 +
            C13260 * C14161) *
               C89093 * C89247 * C89153 * C6963) *
              C89299 +
          ((C13313 * C924 - C13466 * C818 - C13313 * C1136 + C13258 * C1226 +
            C13314 * C927 - C13467 * C821 - C13314 * C1139 + C13259 * C1229 +
            C13315 * C5788 - C13468 * C5726 - C13315 * C5900 + C13260 * C5956) *
               C89093 * C89247 * C89153 * C89336 -
           (C13315 * C927 - C13468 * C821 - C13315 * C1139 + C13260 * C1229 +
            C13314 * C924 - C13467 * C818 - C13314 * C1136 + C13259 * C1226 +
            C13313 * C182 - C13466 * C107 - C13313 * C347 + C13258 * C410) *
               C89093 * C89247 * C89153 * C89335 -
           (C13315 * C13874 - C13468 * C13744 - C13315 * C14056 +
            C13260 * C14162 + C13314 * C5788 - C13467 * C5726 - C13314 * C5900 +
            C13259 * C5956 + C13313 * C927 - C13466 * C821 - C13313 * C1139 +
            C13258 * C1229) *
               C89093 * C89247 * C89153 * C6963) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C89 +
            C440 * C90 + C441 * C91) *
               C89247 * C89153 * C89335 -
           (C1258 * C91 + C1259 * C90 +
            (C180 * C923 - C408 * C819 - C180 * C1135 + C89236 * C1227) * C89) *
               C89247 * C89153 * C89336 +
           ((C180 * C926 - C408 * C820 - C180 * C1138 + C89236 * C1228) * C89 +
            C1260 * C90 + C1261 * C91) *
               C89247 * C89153 * C6963) *
              C89299 +
          ((C1259 * C89 + C1258 * C90 + C2955 * C91) * C89247 * C89153 *
               C89336 -
           (C442 * C91 + C441 * C90 + C440 * C89) * C89247 * C89153 * C89335 -
           ((C180 * C930 - C408 * C824 - C180 * C1142 + C89236 * C1232) * C91 +
            C1261 * C90 + C1260 * C89) *
               C89247 * C89153 * C6963) *
              C89124)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C89093 *
                C25848 +
            C27448 * C25849 + C27449 * C25850) *
               C89153 * C89335 -
           (C29689 * C25850 + C29688 * C25849 +
            (C180 * C923 - C408 * C819 - C180 * C1135 + C89236 * C1227) *
                C89093 * C25848) *
               C89153 * C89336 +
           ((C180 * C926 - C408 * C820 - C180 * C1138 + C89236 * C1228) *
                C89093 * C25848 +
            (C180 * C8600 - C408 * C8516 - C180 * C8760 + C89236 * C8842) *
                C89093 * C25849 +
            (C180 * C14683 - C408 * C14601 - C180 * C14839 + C89236 * C14917) *
                C89093 * C25850) *
               C89153 * C6963) *
              C89299 +
          ((C1259 * C89093 * C25848 + C29674 * C25849 + C29690 * C25850) *
               C89153 * C89336 -
           (C27431 * C25850 + C27430 * C25849 + C440 * C89093 * C25848) *
               C89153 * C89335 -
           ((C180 * C14684 - C408 * C14602 - C180 * C14840 + C89236 * C14918) *
                C89093 * C25850 +
            (C180 * C8601 - C408 * C8515 - C180 * C8761 + C89236 * C8841) *
                C89093 * C25849 +
            C1260 * C89093 * C25848) *
               C89153 * C6963) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C13313 +
            (C89247 * C493 - C263 * C346) * C13258 +
            (C13956 - C13957) * C13314 + (C14240 - C14241) * C13259 +
            C13974 * C13315 + C14249 * C13260) *
               C89093 * C89153 * C89335 +
           ((C13957 - C13956) * C13313 + (C14241 - C14240) * C13258 +
            (C13961 - C13960) * C13314 + (C14243 - C14242) * C13259 +
            C18427 * C13315 + C18596 * C13260) *
               C89093 * C89153 * C89336 +
           (C13974 * C13313 + C14249 * C13258 + (C13965 - C13964) * C13314 +
            (C14245 - C14244) * C13259 + (C18429 - C18430) * C13315 +
            (C18597 - C18598) * C13260) *
               C89093 * C89153 * C6963) *
              C89299 +
          (((C278 - C277) * C13313 + (C501 - C500) * C13258 +
            (C1046 - C1047) * C13314 + (C1344 - C1345) * C13259 +
            C13968 * C13315 + C14246 * C13260) *
               C89093 * C89153 * C89335 +
           ((C1047 - C1046) * C13313 + (C1345 - C1344) * C13258 +
            (C1054 - C1055) * C13314 + (C1348 - C1349) * C13259 +
            (C13970 - C13971) * C13315 + (C14247 - C14248) * C13260) *
               C89093 * C89153 * C89336 +
           (C13968 * C13313 + C14246 * C13258 + (C13971 - C13970) * C13314 +
            (C14248 - C14247) * C13259 +
            (C263 * C13744 - C89247 * C13952) * C13315 +
            (C263 * C14056 - C89247 * C14238) * C13260) *
               C89093 * C89153 * C6963) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C180 +
             (C89247 * C493 - C263 * C346) * C89236) *
                C89 +
            ((C277 - C278) * C180 + (C500 - C501) * C89236) * C90 +
            C514 * C91) *
               C89153 * C89335 +
           (((C263 * C819 - C89247 * C1029) * C180 +
             (C263 * C1135 - C89247 * C1335) * C89236) *
                C89 +
            ((C1046 - C1047) * C180 + (C1344 - C1345) * C89236) * C90 +
            C3036 * C91) *
               C89153 * C89336 +
           (((C89247 * C1032 - C263 * C820) * C180 +
             (C89247 * C1338 - C263 * C1138) * C89236) *
                C89 +
            ((C1054 - C1055) * C180 + (C1348 - C1349) * C89236) * C90 +
            ((C1058 - C1059) * C180 + (C1350 - C1351) * C89236) * C91) *
               C89153 * C6963) *
              C89299 +
          ((((C278 - C277) * C180 + (C501 - C500) * C89236) * C89 +
            ((C282 - C281) * C180 + (C504 - C503) * C89236) * C90 +
            C515 * C91) *
               C89153 * C89335 +
           (((C1047 - C1046) * C180 + (C1345 - C1344) * C89236) * C89 +
            ((C1051 - C1050) * C180 + (C1347 - C1346) * C89236) * C90 +
            ((C2794 - C2795) * C180 + (C3033 - C3034) * C89236) * C91) *
               C89153 * C89336 +
           (((C1055 - C1054) * C180 + (C1349 - C1348) * C89236) * C89 +
            ((C1059 - C1058) * C180 + (C1351 - C1350) * C89236) * C90 +
            ((C263 * C824 - C89247 * C1036) * C180 +
             (C263 * C1142 - C89247 * C1342) * C89236) *
                C91) *
               C89153 * C6963) *
              C89124)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C25848 * C264 - C25951 * C106 + C25849 * C1934 - C25952 * C1724 +
             C25850 * C1937 - C25953 * C1725) *
                C180 +
            (C25848 * C493 - C25951 * C346 + C25849 * C2240 - C25952 * C2040 +
             C25850 * C2243 - C25953 * C2043) *
                C89236) *
               C89093 * C89153 * C89335 +
           ((C25951 * C819 - C25848 * C1029 + C25952 * C4097 - C25849 * C4325 +
             C25953 * C6249 - C25850 * C6413) *
                C180 +
            (C25951 * C1135 - C25848 * C1335 + C25952 * C4439 - C25849 * C4661 +
             C25953 * C6493 - C25850 * C6650) *
                C89236) *
               C89093 * C89153 * C89336 +
           ((C25848 * C1032 - C25951 * C820 + C25849 * C8680 - C25952 * C8516 +
             C25850 * C14761 - C25953 * C14601) *
                C180 +
            (C25848 * C1338 - C25951 * C1138 + C25849 * C8917 - C25952 * C8760 +
             C25850 * C14993 - C25953 * C14839) *
                C89236) *
               C89093 * C89153 * C6963) *
              C89299 +
          (((C25951 * C107 - C25848 * C265 + C25952 * C1723 - C25849 * C1935 +
             C25953 * C1726 - C25850 * C1938) *
                C180 +
            (C25951 * C347 - C25848 * C494 + C25952 * C2041 - C25849 * C2241 +
             C25953 * C2044 - C25850 * C2244) *
                C89236) *
               C89093 * C89153 * C89335 +
           ((C25848 * C1030 - C25951 * C818 + C25849 * C4326 - C25952 * C4098 +
             C25850 * C6414 - C25953 * C6248) *
                C180 +
            (C25848 * C1336 - C25951 * C1136 + C25849 * C4662 - C25952 * C4440 +
             C25850 * C6651 - C25953 * C6494) *
                C89236) *
               C89093 * C89153 * C89336 +
           ((C25951 * C821 - C25848 * C1033 + C25952 * C8515 - C25849 * C8681 +
             C25953 * C14602 - C25850 * C14762) *
                C180 +
            (C25951 * C1139 - C25848 * C1339 + C25952 * C8761 - C25849 * C8918 +
             C25953 * C14840 - C25850 * C14994) *
                C89236) *
               C89093 * C89153 * C6963) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eezx[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C263 +
             (C89093 * C571 - C13261 * C565) * C89247) *
                C13258 +
            ((C14060 - C14061) * C263 + (C14328 - C14329) * C89247) * C13259 +
            C14346 * C13260) *
               C89153 * C89335 +
           (((C14061 - C14060) * C263 + (C14329 - C14328) * C89247) * C13258 +
            ((C14065 - C14064) * C263 + (C14332 - C14331) * C89247) * C13259 +
            C18656 * C13260) *
               C89153 * C89336 +
           (C14346 * C13258 +
            ((C14069 - C14068) * C263 + (C14334 - C14333) * C89247) * C13259 +
            ((C18490 - C18491) * C263 + (C18653 - C18654) * C89247) * C13260) *
               C89153 * C6963) *
              C89299 +
          ((((C13261 * C107 - C89093 * C114) * C263 +
             (C13261 * C566 - C89093 * C572) * C89247) *
                C13258 +
            ((C14072 - C14073) * C263 + (C14335 - C14336) * C89247) * C13259 +
            C14347 * C13260) *
               C89153 * C89335 +
           (((C14073 - C14072) * C263 + (C14336 - C14335) * C89247) * C13258 +
            ((C14077 - C14076) * C263 + (C14339 - C14338) * C89247) * C13259 +
            ((C14080 - C14081) * C263 + (C14340 - C14341) * C89247) * C13260) *
               C89153 * C89336 +
           (C14347 * C13258 +
            ((C14081 - C14080) * C263 + (C14341 - C14340) * C89247) * C13259 +
            ((C13261 * C13744 - C89093 * C13747) * C263 +
             (C13261 * C14324 - C89093 * C14326) * C89247) *
                C13260) *
               C89153 * C6963) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 + C91 * C116 -
             C104 * C108) *
                C263 +
            (C89 * C571 - C100 * C565 + C90 * C572 - C102 * C566 + C91 * C573 -
             C104 * C567) *
                C89247) *
               C89236 * C89153 * C89335 +
           ((C100 * C819 - C89 * C829 + C102 * C818 - C90 * C827 + C104 * C817 -
             C91 * C825) *
                C263 +
            (C100 * C1425 - C89 * C1433 + C102 * C1426 - C90 * C1434 +
             C104 * C1427 - C91 * C1435) *
                C89247) *
               C89236 * C89153 * C89336 +
           ((C89 * C831 - C100 * C820 + C90 * C833 - C102 * C821 + C91 * C835 -
             C104 * C822) *
                C263 +
            (C89 * C1436 - C100 * C1428 + C90 * C1437 - C102 * C1429 +
             C91 * C1438 - C104 * C1430) *
                C89247) *
               C89236 * C89153 * C6963) *
              C89299 +
          (((C100 * C107 - C89 * C114 + C102 * C108 - C90 * C116 + C104 * C109 -
             C91 * C118) *
                C263 +
            (C100 * C566 - C89 * C572 + C102 * C567 - C90 * C573 + C104 * C568 -
             C91 * C574) *
                C89247) *
               C89236 * C89153 * C89335 +
           ((C89 * C827 - C100 * C818 + C90 * C825 - C102 * C817 + C91 * C837 -
             C104 * C823) *
                C263 +
            (C89 * C1434 - C100 * C1426 + C90 * C1435 - C102 * C1427 +
             C91 * C1439 - C104 * C1431) *
                C89247) *
               C89236 * C89153 * C89336 +
           ((C100 * C821 - C89 * C833 + C102 * C822 - C90 * C835 + C104 * C824 -
             C91 * C839) *
                C263 +
            (C100 * C1429 - C89 * C1437 + C102 * C1430 - C90 * C1438 +
             C104 * C1432 - C91 * C1440) *
                C89247) *
               C89236 * C89153 * C6963) *
              C89124)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C89093 * C112 - C13261 * C106) * C25951 +
            (C89093 * C571 - C13261 * C565) * C25848 +
            (C27308 - C27309) * C25952 + (C27606 - C27607) * C25849 +
            C27332 * C25953 + C27618 * C25850) *
               C89236 * C89153 * C89335 +
           ((C14061 - C14060) * C25951 + (C14329 - C14328) * C25848 +
            (C17042 - C17043) * C25952 + (C17366 - C17367) * C25849 +
            C31534 * C25953 + C31777 * C25850) *
               C89236 * C89153 * C89336 +
           (C14084 * C25951 + C14342 * C25848 + (C17047 - C17046) * C25952 +
            (C17369 - C17368) * C25849 + (C19100 - C19101) * C25953 +
            (C19336 - C19337) * C25850) *
               C89236 * C89153 * C6963) *
              C89299 +
          (((C13261 * C107 - C89093 * C114) * C25951 +
            (C13261 * C566 - C89093 * C572) * C25848 +
            (C27320 - C27321) * C25952 + (C27612 - C27613) * C25849 +
            C27334 * C25953 + C27619 * C25850) *
               C89236 * C89153 * C89335 +
           ((C14073 - C14072) * C25951 + (C14336 - C14335) * C25848 +
            (C17050 - C17051) * C25952 + (C17370 - C17371) * C25849 +
            (C29563 - C29564) * C25953 + (C29890 - C29891) * C25850) *
               C89236 * C89153 * C89336 +
           (C14086 * C25951 + C14343 * C25848 + (C17055 - C17054) * C25952 +
            (C17373 - C17372) * C25849 +
            (C13261 * C14602 - C89093 * C14605) * C25953 +
            (C13261 * C15070 - C89093 * C15072) * C25850) *
               C89236 * C89153 * C6963) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eezy[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
             C13260 * C926 - C13315 * C820) *
                C263 +
            (C13258 * C627 - C13313 * C565 + C13259 * C1515 - C13314 * C1425 +
             C13260 * C1518 - C13315 * C1428) *
                C89247) *
               C89093 * C89153 * C89335 +
           ((C13313 * C819 - C13258 * C923 + C13314 * C820 - C13259 * C926 +
             C13315 * C5727 - C13260 * C5787) *
                C263 +
            (C13313 * C1425 - C13258 * C1515 + C13314 * C1428 - C13259 * C1518 +
             C13315 * C6061 - C13260 * C6117) *
                C89247) *
               C89093 * C89153 * C89336 +
           ((C13258 * C926 - C13313 * C820 + C13259 * C5787 - C13314 * C5727 +
             C13260 * C13873 - C13315 * C13743) *
                C263 +
            (C13258 * C1518 - C13313 * C1428 + C13259 * C6117 - C13314 * C6061 +
             C13260 * C14421 - C13315 * C14323) *
                C89247) *
               C89093 * C89153 * C6963) *
              C89299 +
          (((C13313 * C107 - C13258 * C182 + C13314 * C818 - C13259 * C924 +
             C13315 * C821 - C13260 * C927) *
                C263 +
            (C13313 * C566 - C13258 * C628 + C13314 * C1426 - C13259 * C1516 +
             C13315 * C1429 - C13260 * C1519) *
                C89247) *
               C89093 * C89153 * C89335 +
           ((C13258 * C924 - C13313 * C818 + C13259 * C927 - C13314 * C821 +
             C13260 * C5788 - C13315 * C5726) *
                C263 +
            (C13258 * C1516 - C13313 * C1426 + C13259 * C1519 - C13314 * C1429 +
             C13260 * C6118 - C13315 * C6062) *
                C89247) *
               C89093 * C89153 * C89336 +
           ((C13313 * C821 - C13258 * C927 + C13314 * C5726 - C13259 * C5788 +
             C13315 * C13744 - C13260 * C13874) *
                C263 +
            (C13313 * C1429 - C13258 * C1519 + C13314 * C6062 - C13259 * C6118 +
             C13315 * C14324 - C13260 * C14422) *
                C89247) *
               C89093 * C89153 * C6963) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C263 +
             (C89236 * C627 - C180 * C565) * C89247) *
                C89 +
            ((C194 - C195) * C263 + (C634 - C635) * C89247) * C90 +
            C648 * C91) *
               C89153 * C89335 +
           (((C180 * C819 - C89236 * C923) * C263 +
             (C180 * C1425 - C89236 * C1515) * C89247) *
                C89 +
            ((C940 - C941) * C263 + (C1524 - C1525) * C89247) * C90 +
            C3193 * C91) *
               C89153 * C89336 +
           (((C89236 * C926 - C180 * C820) * C263 +
             (C89236 * C1518 - C180 * C1428) * C89247) *
                C89 +
            ((C948 - C949) * C263 + (C1528 - C1529) * C89247) * C90 +
            ((C952 - C953) * C263 + (C1530 - C1531) * C89247) * C91) *
               C89153 * C6963) *
              C89299 +
          ((((C195 - C194) * C263 + (C635 - C634) * C89247) * C89 +
            ((C199 - C198) * C263 + (C638 - C637) * C89247) * C90 +
            C649 * C91) *
               C89153 * C89335 +
           (((C941 - C940) * C263 + (C1525 - C1524) * C89247) * C89 +
            ((C945 - C944) * C263 + (C1527 - C1526) * C89247) * C90 +
            ((C2712 - C2713) * C263 + (C3190 - C3191) * C89247) * C91) *
               C89153 * C89336 +
           (((C949 - C948) * C263 + (C1529 - C1528) * C89247) * C89 +
            ((C953 - C952) * C263 + (C1531 - C1530) * C89247) * C90 +
            ((C180 * C824 - C89236 * C930) * C263 +
             (C180 * C1432 - C89236 * C1522) * C89247) *
                C91) *
               C89153 * C6963) *
              C89124)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C89236 * C181 - C180 * C106) * C25951 +
            (C89236 * C627 - C180 * C565) * C25848 +
            (C27126 - C27127) * C25952 + (C27696 - C27697) * C25849 +
            C27144 * C25953 + C27705 * C25850) *
               C89093 * C89153 * C89335 +
           ((C180 * C819 - C89236 * C923) * C25951 +
            (C180 * C1425 - C89236 * C1515) * C25848 +
            (C29351 - C29352) * C25952 + (C29991 - C29992) * C25849 +
            C31373 * C25953 + C31855 * C25850) *
               C89093 * C89153 * C89336 +
           ((C89236 * C926 - C180 * C820) * C25951 +
            (C89236 * C1518 - C180 * C1428) * C25848 +
            (C89236 * C8600 - C180 * C8516) * C25952 +
            (C89236 * C9074 - C180 * C8994) * C25849 +
            (C89236 * C14683 - C180 * C14601) * C25953 +
            (C89236 * C15147 - C180 * C15069) * C25850) *
               C89093 * C89153 * C6963) *
              C89299 +
          (((C195 - C194) * C25951 + (C635 - C634) * C25848 +
            (C1845 - C1846) * C25952 + (C2429 - C2430) * C25849 +
            C27138 * C25953 + C27702 * C25850) *
               C89093 * C89153 * C89335 +
           ((C941 - C940) * C25951 + (C1525 - C1524) * C25848 +
            (C4220 - C4221) * C25952 + (C4878 - C4879) * C25849 +
            (C29359 - C29360) * C25953 + (C29995 - C29996) * C25850) *
               C89093 * C89153 * C89336 +
           ((C949 - C948) * C25951 + (C1529 - C1528) * C25848 +
            (C180 * C8515 - C89236 * C8601) * C25952 +
            (C180 * C8995 - C89236 * C9075) * C25849 +
            (C180 * C14602 - C89236 * C14684) * C25953 +
            (C180 * C15070 - C89236 * C15148) * C25850) *
               C89093 * C89153 * C6963) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eezz[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C13258 +
            C14524 * C13259 + C14525 * C13260) *
               C89093 * C89153 * C89335 -
           (C14526 * C13260 + C14525 * C13259 + C14524 * C13258) * C89093 *
               C89153 * C89336 +
           (C14525 * C13258 + C14526 * C13259 + C18765 * C13260) * C89093 *
               C89153 * C6963) *
              C89299 +
          ((C1639 * C13258 + C1640 * C13259 + C14527 * C13260) * C89093 *
               C89153 * C89336 -
           (C1640 * C13260 + C1639 * C13259 + C731 * C13258) * C89093 * C89153 *
               C89335 -
           ((C263 * C13952 - C699 * C13744 - C263 * C14324 + C89247 * C14498) *
                C13260 +
            C14527 * C13259 + C1640 * C13258) *
               C89093 * C89153 * C6963) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C89236 *
                C89 +
            C735 * C90 + C736 * C91) *
               C89153 * C89335 -
           (C1642 * C91 + C1643 * C90 +
            (C263 * C1029 - C699 * C819 - C263 * C1425 + C89247 * C1607) *
                C89236 * C89) *
               C89153 * C89336 +
           ((C263 * C1032 - C699 * C820 - C263 * C1428 + C89247 * C1608) *
                C89236 * C89 +
            C1644 * C90 + C1645 * C91) *
               C89153 * C6963) *
              C89299 +
          ((C1643 * C89 + C1642 * C90 + C3276 * C91) * C89153 * C89336 -
           (C737 * C91 + C736 * C90 + C735 * C89) * C89153 * C89335 -
           ((C263 * C1036 - C699 * C824 - C263 * C1432 + C89247 * C1612) *
                C89236 * C91 +
            C1645 * C90 + C1644 * C89) *
               C89153 * C6963) *
              C89124)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C25951 * C264 - C26254 * C106 - C25951 * C565 + C25848 * C700 +
            C25952 * C1934 - C26255 * C1724 - C25952 * C2330 + C25849 * C2512 +
            C25953 * C1937 - C26256 * C1725 - C25953 * C2333 + C25850 * C2513) *
               C89236 * C89093 * C89153 * C89335 -
           (C25953 * C6413 - C26256 * C6249 - C25953 * C6727 + C25850 * C6886 +
            C25952 * C4325 - C26255 * C4097 - C25952 * C4767 + C25849 * C4979 +
            C25951 * C1029 - C26254 * C819 - C25951 * C1425 + C25848 * C1607) *
               C89236 * C89093 * C89153 * C89336 +
           (C25951 * C1032 - C26254 * C820 - C25951 * C1428 + C25848 * C1608 +
            C25952 * C8680 - C26255 * C8516 - C25952 * C8994 + C25849 * C9153 +
            C25953 * C14761 - C26256 * C14601 - C25953 * C15069 +
            C25850 * C15223) *
               C89236 * C89093 * C89153 * C6963) *
              C89299 +
          ((C25951 * C1030 - C26254 * C818 - C25951 * C1426 + C25848 * C1606 +
            C25952 * C4326 - C26255 * C4098 - C25952 * C4768 + C25849 * C4980 +
            C25953 * C6414 - C26256 * C6248 - C25953 * C6728 + C25850 * C6885) *
               C89236 * C89093 * C89153 * C89336 -
           (C25953 * C1938 - C26256 * C1726 - C25953 * C2334 + C25850 * C2514 +
            C25952 * C1935 - C26255 * C1723 - C25952 * C2331 + C25849 * C2511 +
            C25951 * C265 - C26254 * C107 - C25951 * C566 + C25848 * C701) *
               C89236 * C89093 * C89153 * C89335 -
           (C25953 * C14762 - C26256 * C14602 - C25953 * C15070 +
            C25850 * C15224 + C25952 * C8681 - C26255 * C8515 - C25952 * C8995 +
            C25849 * C9152 + C25951 * C1033 - C26254 * C821 - C25951 * C1429 +
            C25848 * C1609) *
               C89236 * C89093 * C89153 * C6963) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eexx[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                C89247 * C13258 +
            C13794 * C13259 + C13795 * C13260) *
               C89308 -
           (C16720 * C13260 + C16721 * C13259 +
            (C13261 * C1734 - C13262 * C1724 - C13261 * C1735 +
             C89093 * C1748) *
                C89247 * C13258) *
               C89217) *
              C89335 +
          ((C16721 * C13258 + C16720 * C13259 + C21135 * C13260) * C89217 -
           (C13796 * C13260 + C13795 * C13259 + C13794 * C13258) * C89308) *
              C89336 +
          ((C13795 * C13258 + C13796 * C13259 + C18322 * C13260) * C89308 -
           ((C13261 * C21124 - C13262 * C21123 - C13261 * C21125 +
             C89093 * C21126) *
                C89247 * C13260 +
            C21135 * C13259 + C16720 * C13258) *
               C89217) *
              C6963) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C112 - C101 * C106 - C100 * C113 + C89 * C124 + C102 * C114 -
            C103 * C107 - C102 * C115 + C90 * C125 + C104 * C116 - C105 * C108 -
            C104 * C117 + C91 * C126) *
               C89247 * C89236 * C89308 -
           (C104 * C1730 - C105 * C1722 - C104 * C1731 + C91 * C1746 +
            C102 * C1732 - C103 * C1723 - C102 * C1733 + C90 * C1747 +
            C100 * C1734 - C101 * C1724 - C100 * C1735 + C89 * C1748) *
               C89247 * C89236 * C89217) *
              C89335 +
          ((C100 * C4101 - C101 * C4097 - C100 * C4102 + C89 * C4109 +
            C102 * C4103 - C103 * C4098 - C102 * C4104 + C90 * C4110 +
            C104 * C4105 - C105 * C4099 - C104 * C4106 + C91 * C4111) *
               C89247 * C89236 * C89217 -
           (C104 * C825 - C105 * C817 - C104 * C826 + C91 * C841 + C102 * C827 -
            C103 * C818 - C102 * C828 + C90 * C842 + C100 * C829 - C101 * C819 -
            C100 * C830 + C89 * C843) *
               C89247 * C89236 * C89308) *
              C89336 +
          ((C100 * C831 - C101 * C820 - C100 * C832 + C89 * C844 + C102 * C833 -
            C103 * C821 - C102 * C834 + C90 * C845 + C104 * C835 - C105 * C822 -
            C104 * C836 + C91 * C846) *
               C89247 * C89236 * C89308 -
           (C104 * C8517 - C105 * C8514 - C104 * C8518 + C91 * C8523 +
            C102 * C8519 - C103 * C8515 - C102 * C8520 + C90 * C8524 +
            C100 * C8521 - C101 * C8516 - C100 * C8522 + C89 * C8525) *
               C89247 * C89236 * C89217) *
              C6963) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                C25848 +
            C27042 * C25849 + C27043 * C25850) *
               C89236 * C89308 -
           (C27044 * C25850 + C27043 * C25849 + C27042 * C25848) * C89236 *
               C89217) *
              C89335 +
          ((C16717 * C25848 + C18856 * C25849 + C31296 * C25850) * C89236 *
               C89217 -
           (C18856 * C25850 + C16717 * C25849 + C13788 * C25848) * C89236 *
               C89308) *
              C89336 +
          ((C13789 * C25848 + C16716 * C25849 + C18857 * C25850) * C89236 *
               C89308 -
           ((C13261 * C23154 - C13262 * C23152 - C13261 * C23155 +
             C89093 * C23158) *
                C25850 +
            C18857 * C25849 + C16716 * C25848) *
               C89236 * C89217) *
              C6963) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eexy[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
             C13260 * C926 - C13315 * C820) *
                C13261 +
            (C13258 * C187 - C13313 * C113 + C13259 * C931 - C13314 * C830 +
             C13260 * C934 - C13315 * C832) *
                C89093) *
               C89247 * C89308 +
           ((C13313 * C1724 - C13258 * C1828 + C13314 * C4097 - C13259 * C4211 +
             C13315 * C8516 - C13260 * C8600) *
                C13261 +
            (C13313 * C1735 - C13258 * C1836 + C13314 * C4102 - C13259 * C4215 +
             C13315 * C8522 - C13260 * C8603) *
                C89093) *
               C89247 * C89217) *
              C89335 +
          (((C13313 * C819 - C13258 * C923 + C13314 * C820 - C13259 * C926 +
             C13315 * C5727 - C13260 * C5787) *
                C13261 +
            (C13313 * C830 - C13258 * C931 + C13314 * C832 - C13259 * C934 +
             C13315 * C5733 - C13260 * C5790) *
                C89093) *
               C89247 * C89308 +
           ((C13258 * C4211 - C13313 * C4097 + C13259 * C8600 - C13314 * C8516 +
             C13260 * C16821 - C13315 * C16683) *
                C13261 +
            (C13258 * C4215 - C13313 * C4102 + C13259 * C8603 - C13314 * C8522 +
             C13260 * C16823 - C13315 * C16686) *
                C89093) *
               C89247 * C89217) *
              C89336 +
          (((C13258 * C926 - C13313 * C820 + C13259 * C5787 - C13314 * C5727 +
             C13260 * C13873 - C13315 * C13743) *
                C13261 +
            (C13258 * C934 - C13313 * C832 + C13259 * C5790 - C13314 * C5733 +
             C13260 * C13875 - C13315 * C13746) *
                C89093) *
               C89247 * C89308 +
           ((C13313 * C8516 - C13258 * C8600 + C13314 * C16683 -
             C13259 * C16821 + C13315 * C21123 - C13260 * C21209) *
                C13261 +
            (C13313 * C8522 - C13258 * C8603 + C13314 * C16686 -
             C13259 * C16823 + C13315 * C21125 - C13260 * C21210) *
                C89093) *
               C89247 * C89217) *
              C6963) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89236 * C181 - C180 * C106) * C100 +
            (C89236 * C187 - C180 * C113) * C89 + (C194 - C195) * C102 +
            (C196 - C197) * C90 + C210 * C104 + C211 * C91) *
               C89247 * C89308 +
           ((C180 * C1724 - C89236 * C1828) * C100 +
            (C180 * C1735 - C89236 * C1836) * C89 + (C1845 - C1846) * C102 +
            (C1847 - C1848) * C90 + C3433 * C104 + C3434 * C91) *
               C89247 * C89217) *
              C89335 +
          (((C180 * C819 - C89236 * C923) * C100 +
            (C180 * C830 - C89236 * C931) * C89 + (C940 - C941) * C102 +
            (C942 - C943) * C90 + C2710 * C104 + C2711 * C91) *
               C89247 * C89308 +
           ((C89236 * C4211 - C180 * C4097) * C100 +
            (C89236 * C4215 - C180 * C4102) * C89 + (C4220 - C4221) * C102 +
            (C4222 - C4223) * C90 + (C4224 - C4225) * C104 +
            (C4226 - C4227) * C91) *
               C89247 * C89217) *
              C89336 +
          (((C89236 * C926 - C180 * C820) * C100 +
            (C89236 * C934 - C180 * C832) * C89 + (C948 - C949) * C102 +
            (C950 - C951) * C90 + (C952 - C953) * C104 + (C954 - C955) * C91) *
               C89247 * C89308 +
           ((C180 * C8516 - C89236 * C8600) * C100 +
            (C180 * C8522 - C89236 * C8603) * C89 +
            (C180 * C8515 - C89236 * C8601) * C102 +
            (C180 * C8520 - C89236 * C8604) * C90 +
            (C180 * C8514 - C89236 * C8602) * C104 +
            (C180 * C8518 - C89236 * C8605) * C91) *
               C89247 * C89217) *
              C6963) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C13261 +
             (C89236 * C187 - C180 * C113) * C89093) *
                C25848 +
            ((C27126 - C27127) * C13261 + (C27128 - C27129) * C89093) * C25849 +
            C27151 * C25850) *
               C89308 +
           (((C27127 - C27126) * C13261 + (C27129 - C27128) * C89093) * C25848 +
            ((C27131 - C27130) * C13261 + (C27133 - C27132) * C89093) * C25849 +
            ((C27134 - C27135) * C13261 + (C27136 - C27137) * C89093) *
                C25850) *
               C89217) *
              C89335 +
          ((((C180 * C819 - C89236 * C923) * C13261 +
             (C180 * C830 - C89236 * C931) * C89093) *
                C25848 +
            ((C29351 - C29352) * C13261 + (C29353 - C29354) * C89093) * C25849 +
            C31381 * C25850) *
               C89308 +
           (((C29352 - C29351) * C13261 + (C29354 - C29353) * C89093) * C25848 +
            ((C29356 - C29355) * C13261 + (C29358 - C29357) * C89093) * C25849 +
            ((C31375 - C31376) * C13261 + (C31377 - C31378) * C89093) *
                C25850) *
               C89217) *
              C89336 +
          ((((C89236 * C926 - C180 * C820) * C13261 +
             (C89236 * C934 - C180 * C832) * C89093) *
                C25848 +
            ((C33629 - C33630) * C13261 + (C33631 - C33632) * C89093) * C25849 +
            ((C33633 - C33634) * C13261 + (C33635 - C33636) * C89093) *
                C25850) *
               C89308 +
           (((C33630 - C33629) * C13261 + (C33632 - C33631) * C89093) * C25848 +
            ((C33634 - C33633) * C13261 + (C33636 - C33635) * C89093) * C25849 +
            ((C180 * C23152 - C89236 * C23211) * C13261 +
             (C180 * C23155 - C89236 * C23213) * C89093) *
                C25850) *
               C89217) *
              C6963) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eexz[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C13261 +
             (C89247 * C270 - C263 * C113) * C89093) *
                C13258 +
            ((C13956 - C13957) * C13261 + (C13958 - C13959) * C89093) * C13259 +
            C13981 * C13260) *
               C89308 +
           (((C263 * C1724 - C89247 * C1934) * C13261 +
             (C263 * C1735 - C89247 * C1942) * C89093) *
                C13258 +
            ((C16928 - C16929) * C13261 + (C16930 - C16931) * C89093) * C13259 +
            C21296 * C13260) *
               C89217) *
              C89335 +
          ((((C13957 - C13956) * C13261 + (C13959 - C13958) * C89093) * C13258 +
            ((C13961 - C13960) * C13261 + (C13963 - C13962) * C89093) * C13259 +
            C18435 * C13260) *
               C89308 +
           (((C16929 - C16928) * C13261 + (C16931 - C16930) * C89093) * C13258 +
            ((C16933 - C16932) * C13261 + (C16935 - C16934) * C89093) * C13259 +
            ((C21290 - C21291) * C13261 + (C21292 - C21293) * C89093) *
                C13260) *
               C89217) *
              C89336 +
          ((C13981 * C13258 +
            ((C13965 - C13964) * C13261 + (C13967 - C13966) * C89093) * C13259 +
            ((C18429 - C18430) * C13261 + (C18431 - C18432) * C89093) *
                C13260) *
               C89308 +
           (C21296 * C13258 +
            ((C21291 - C21290) * C13261 + (C21293 - C21292) * C89093) * C13259 +
            ((C263 * C21123 - C89247 * C21285) * C13261 +
             (C263 * C21125 - C89247 * C21286) * C89093) *
                C13260) *
               C89217) *
              C6963) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C100 +
            (C89247 * C270 - C263 * C113) * C89 + (C277 - C278) * C102 +
            (C279 - C280) * C90 + C293 * C104 + C294 * C91) *
               C89236 * C89308 +
           ((C263 * C1724 - C89247 * C1934) * C100 +
            (C263 * C1735 - C89247 * C1942) * C89 + (C1951 - C1952) * C102 +
            (C1953 - C1954) * C90 + C3515 * C104 + C3516 * C91) *
               C89236 * C89217) *
              C89335 +
          (((C263 * C819 - C89247 * C1029) * C100 +
            (C263 * C830 - C89247 * C1037) * C89 + (C1046 - C1047) * C102 +
            (C1048 - C1049) * C90 + C2792 * C104 + C2793 * C91) *
               C89236 * C89308 +
           ((C89247 * C4325 - C263 * C4097) * C100 +
            (C89247 * C4329 - C263 * C4102) * C89 + (C4334 - C4335) * C102 +
            (C4336 - C4337) * C90 + (C4338 - C4339) * C104 +
            (C4340 - C4341) * C91) *
               C89236 * C89217) *
              C89336 +
          (((C89247 * C1032 - C263 * C820) * C100 +
            (C89247 * C1040 - C263 * C832) * C89 + (C1054 - C1055) * C102 +
            (C1056 - C1057) * C90 + (C1058 - C1059) * C104 +
            (C1060 - C1061) * C91) *
               C89236 * C89308 +
           ((C263 * C8516 - C89247 * C8680) * C100 +
            (C263 * C8522 - C89247 * C8683) * C89 +
            (C263 * C8515 - C89247 * C8681) * C102 +
            (C263 * C8520 - C89247 * C8684) * C90 +
            (C263 * C8514 - C89247 * C8682) * C104 +
            (C263 * C8518 - C89247 * C8685) * C91) *
               C89236 * C89217) *
              C6963) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C25848 * C264 - C25951 * C106 + C25849 * C1934 - C25952 * C1724 +
             C25850 * C1937 - C25953 * C1725) *
                C13261 +
            (C25848 * C270 - C25951 * C113 + C25849 * C1942 - C25952 * C1735 +
             C25850 * C1945 - C25953 * C1737) *
                C89093) *
               C89236 * C89308 +
           ((C25951 * C1724 - C25848 * C1934 + C25952 * C1725 - C25849 * C1937 +
             C25953 * C10544 - C25850 * C10660) *
                C13261 +
            (C25951 * C1735 - C25848 * C1942 + C25952 * C1737 - C25849 * C1945 +
             C25953 * C10550 - C25850 * C10663) *
                C89093) *
               C89236 * C89217) *
              C89335 +
          (((C25951 * C819 - C25848 * C1029 + C25952 * C4097 - C25849 * C4325 +
             C25953 * C6249 - C25850 * C6413) *
                C13261 +
            (C25951 * C830 - C25848 * C1037 + C25952 * C4102 - C25849 * C4329 +
             C25953 * C6255 - C25850 * C6416) *
                C89093) *
               C89236 * C89308 +
           ((C25848 * C4325 - C25951 * C4097 + C25849 * C6413 - C25952 * C6249 +
             C25850 * C23264 - C25953 * C23153) *
                C13261 +
            (C25848 * C4329 - C25951 * C4102 + C25849 * C6416 - C25952 * C6255 +
             C25850 * C23266 - C25953 * C23157) *
                C89093) *
               C89236 * C89217) *
              C89336 +
          (((C25848 * C1032 - C25951 * C820 + C25849 * C8680 - C25952 * C8516 +
             C25850 * C14761 - C25953 * C14601) *
                C13261 +
            (C25848 * C1040 - C25951 * C832 + C25849 * C8683 - C25952 * C8522 +
             C25850 * C14763 - C25953 * C14604) *
                C89093) *
               C89236 * C89308 +
           ((C25951 * C8516 - C25848 * C8680 + C25952 * C14601 -
             C25849 * C14761 + C25953 * C23152 - C25850 * C23265) *
                C13261 +
            (C25951 * C8522 - C25848 * C8683 + C25952 * C14604 -
             C25849 * C14763 + C25953 * C23155 - C25850 * C23267) *
                C89093) *
               C89236 * C89217) *
              C6963) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eeyx[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89093 * C112 - C13261 * C106) * C13313 +
            (C89093 * C352 - C13261 * C346) * C13258 +
            (C14060 - C14061) * C13314 + (C14062 - C14063) * C13259 +
            C14084 * C13315 + C14085 * C13260) *
               C89247 * C89308 +
           ((C13261 * C1724 - C89093 * C1734) * C13313 +
            (C13261 * C2040 - C89093 * C2048) * C13258 +
            (C17042 - C17043) * C13314 + (C17044 - C17045) * C13259 +
            C21373 * C13315 + C21374 * C13260) *
               C89247 * C89217) *
              C89335 +
          (((C14061 - C14060) * C13313 + (C14063 - C14062) * C13258 +
            (C14065 - C14064) * C13314 + (C14067 - C14066) * C13259 +
            C18488 * C13315 + C18489 * C13260) *
               C89247 * C89308 +
           ((C17043 - C17042) * C13313 + (C17045 - C17044) * C13258 +
            (C17047 - C17046) * C13314 + (C17049 - C17048) * C13259 +
            (C21375 - C21376) * C13315 + (C21377 - C21378) * C13260) *
               C89247 * C89217) *
              C89336 +
          ((C14084 * C13313 + C14085 * C13258 + (C14069 - C14068) * C13314 +
            (C14071 - C14070) * C13259 + (C18490 - C18491) * C13315 +
            (C18492 - C18493) * C13260) *
               C89247 * C89308 +
           (C21373 * C13313 + C21374 * C13258 + (C21376 - C21375) * C13314 +
            (C21378 - C21377) * C13259 +
            (C13261 * C21123 - C89093 * C21124) * C13315 +
            (C13261 * C21370 - C89093 * C21371) * C13260) *
               C89247 * C89217) *
              C6963) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 + C91 * C116 -
             C104 * C108) *
                C180 +
            (C89 * C352 - C100 * C346 + C90 * C353 - C102 * C347 + C91 * C354 -
             C104 * C348) *
                C89236) *
               C89247 * C89308 +
           ((C100 * C1724 - C89 * C1734 + C102 * C1723 - C90 * C1732 +
             C104 * C1722 - C91 * C1730) *
                C180 +
            (C100 * C2040 - C89 * C2048 + C102 * C2041 - C90 * C2049 +
             C104 * C2042 - C91 * C2050) *
                C89236) *
               C89247 * C89217) *
              C89335 +
          (((C100 * C819 - C89 * C829 + C102 * C818 - C90 * C827 + C104 * C817 -
             C91 * C825) *
                C180 +
            (C100 * C1135 - C89 * C1143 + C102 * C1136 - C90 * C1144 +
             C104 * C1137 - C91 * C1145) *
                C89236) *
               C89247 * C89308 +
           ((C89 * C4101 - C100 * C4097 + C90 * C4103 - C102 * C4098 +
             C91 * C4105 - C104 * C4099) *
                C180 +
            (C89 * C4443 - C100 * C4439 + C90 * C4444 - C102 * C4440 +
             C91 * C4445 - C104 * C4441) *
                C89236) *
               C89247 * C89217) *
              C89336 +
          (((C89 * C831 - C100 * C820 + C90 * C833 - C102 * C821 + C91 * C835 -
             C104 * C822) *
                C180 +
            (C89 * C1146 - C100 * C1138 + C90 * C1147 - C102 * C1139 +
             C91 * C1148 - C104 * C1140) *
                C89236) *
               C89247 * C89308 +
           ((C100 * C8516 - C89 * C8521 + C102 * C8515 - C90 * C8519 +
             C104 * C8514 - C91 * C8517) *
                C180 +
            (C100 * C8760 - C89 * C8763 + C102 * C8761 - C90 * C8764 +
             C104 * C8762 - C91 * C8765) *
                C89236) *
               C89247 * C89217) *
              C6963) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C180 +
             (C89093 * C352 - C13261 * C346) * C89236) *
                C25848 +
            ((C27308 - C27309) * C180 + (C27310 - C27311) * C89236) * C25849 +
            C27340 * C25850) *
               C89308 +
           (((C27309 - C27308) * C180 + (C27311 - C27310) * C89236) * C25848 +
            ((C27313 - C27312) * C180 + (C27315 - C27314) * C89236) * C25849 +
            ((C27316 - C27317) * C180 + (C27318 - C27319) * C89236) * C25850) *
               C89217) *
              C89335 +
          ((((C14061 - C14060) * C180 + (C14063 - C14062) * C89236) * C25848 +
            ((C17042 - C17043) * C180 + (C17044 - C17045) * C89236) * C25849 +
            C31542 * C25850) *
               C89308 +
           (((C17043 - C17042) * C180 + (C17045 - C17044) * C89236) * C25848 +
            ((C19096 - C19097) * C180 + (C19098 - C19099) * C89236) * C25849 +
            ((C31536 - C31537) * C180 + (C31538 - C31539) * C89236) * C25850) *
               C89217) *
              C89336 +
          (((C14084 * C180 + C14085 * C89236) * C25848 +
            ((C17047 - C17046) * C180 + (C17049 - C17048) * C89236) * C25849 +
            ((C19100 - C19101) * C180 + (C19102 - C19103) * C89236) * C25850) *
               C89308 +
           ((C21373 * C180 + C21374 * C89236) * C25848 +
            ((C19101 - C19100) * C180 + (C19103 - C19102) * C89236) * C25849 +
            ((C13261 * C23152 - C89093 * C23154) * C180 +
             (C13261 * C23319 - C89093 * C23321) * C89236) *
                C25850) *
               C89217) *
              C6963) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eeyy[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13313 * C181 - C13466 * C106 - C13313 * C346 + C13258 * C409 +
            C13314 * C923 - C13467 * C819 - C13314 * C1135 + C13259 * C1227 +
            C13315 * C926 - C13468 * C820 - C13315 * C1138 + C13260 * C1228) *
               C89093 * C89247 * C89308 -
           (C13315 * C8600 - C13468 * C8516 - C13315 * C8760 + C13260 * C8842 +
            C13314 * C4211 - C13467 * C4097 - C13314 * C4439 + C13259 * C4545 +
            C13313 * C1828 - C13466 * C1724 - C13313 * C2040 + C13258 * C2132) *
               C89093 * C89247 * C89217) *
              C89335 +
          ((C13313 * C4211 - C13466 * C4097 - C13313 * C4439 + C13258 * C4545 +
            C13314 * C8600 - C13467 * C8516 - C13314 * C8760 + C13259 * C8842 +
            C13315 * C16821 - C13468 * C16683 - C13315 * C17037 +
            C13260 * C17155) *
               C89093 * C89247 * C89217 -
           (C13315 * C5787 - C13468 * C5727 - C13315 * C5899 + C13260 * C5957 +
            C13314 * C926 - C13467 * C820 - C13314 * C1138 + C13259 * C1228 +
            C13313 * C923 - C13466 * C819 - C13313 * C1135 + C13258 * C1227) *
               C89093 * C89247 * C89308) *
              C89336 +
          ((C13313 * C926 - C13466 * C820 - C13313 * C1138 + C13258 * C1228 +
            C13314 * C5787 - C13467 * C5727 - C13314 * C5899 + C13259 * C5957 +
            C13315 * C13873 - C13468 * C13743 - C13315 * C14055 +
            C13260 * C14161) *
               C89093 * C89247 * C89308 -
           (C13315 * C21209 - C13468 * C21123 - C13315 * C21370 +
            C13260 * C21452 + C13314 * C16821 - C13467 * C16683 -
            C13314 * C17037 + C13259 * C17155 + C13313 * C8600 -
            C13466 * C8516 - C13313 * C8760 + C13258 * C8842) *
               C89093 * C89247 * C89217) *
              C6963) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C89 +
            C440 * C90 + C441 * C91) *
               C89247 * C89308 -
           (C2163 * C91 + C2164 * C90 +
            (C180 * C1828 - C408 * C1724 - C180 * C2040 + C89236 * C2132) *
                C89) *
               C89247 * C89217) *
              C89335 +
          (((C180 * C4211 - C408 * C4097 - C180 * C4439 + C89236 * C4545) *
                C89 +
            C4562 * C90 + C4563 * C91) *
               C89247 * C89217 -
           (C1258 * C91 + C1259 * C90 +
            (C180 * C923 - C408 * C819 - C180 * C1135 + C89236 * C1227) * C89) *
               C89247 * C89308) *
              C89336 +
          (((C180 * C926 - C408 * C820 - C180 * C1138 + C89236 * C1228) * C89 +
            C1260 * C90 + C1261 * C91) *
               C89247 * C89308 -
           ((C180 * C8602 - C408 * C8514 - C180 * C8762 + C89236 * C8840) *
                C91 +
            (C180 * C8601 - C408 * C8515 - C180 * C8761 + C89236 * C8841) *
                C90 +
            (C180 * C8600 - C408 * C8516 - C180 * C8760 + C89236 * C8842) *
                C89) *
               C89247 * C89217) *
              C6963) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C89093 *
                C25848 +
            C27448 * C25849 + C27449 * C25850) *
               C89308 -
           (C27450 * C25850 + C27449 * C25849 + C27448 * C25848) * C89217) *
              C89335 +
          ((C29688 * C25848 + C29689 * C25849 + C31625 * C25850) * C89217 -
           (C29689 * C25850 + C29688 * C25849 +
            (C180 * C923 - C408 * C819 - C180 * C1135 + C89236 * C1227) *
                C89093 * C25848) *
               C89308) *
              C89336 +
          (((C180 * C926 - C408 * C820 - C180 * C1138 + C89236 * C1228) *
                C89093 * C25848 +
            C33873 * C25849 + C33874 * C25850) *
               C89308 -
           ((C180 * C23211 - C408 * C23152 - C180 * C23319 + C89236 * C23372) *
                C89093 * C25850 +
            C33874 * C25849 + C33873 * C25848) *
               C89217) *
              C6963) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eeyz[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C13313 +
            (C89247 * C493 - C263 * C346) * C13258 +
            (C13956 - C13957) * C13314 + (C14240 - C14241) * C13259 +
            C13974 * C13315 + C14249 * C13260) *
               C89093 * C89308 +
           ((C263 * C1724 - C89247 * C1934) * C13313 +
            (C263 * C2040 - C89247 * C2240) * C13258 +
            (C16928 - C16929) * C13314 + (C17258 - C17259) * C13259 +
            C21288 * C13315 + C21529 * C13260) *
               C89093 * C89217) *
              C89335 +
          (((C13957 - C13956) * C13313 + (C14241 - C14240) * C13258 +
            (C13961 - C13960) * C13314 + (C14243 - C14242) * C13259 +
            C18427 * C13315 + C18596 * C13260) *
               C89093 * C89308 +
           ((C16929 - C16928) * C13313 + (C17259 - C17258) * C13258 +
            (C16933 - C16932) * C13314 + (C17261 - C17260) * C13259 +
            (C21290 - C21291) * C13315 + (C21530 - C21531) * C13260) *
               C89093 * C89217) *
              C89336 +
          ((C13974 * C13313 + C14249 * C13258 + (C13965 - C13964) * C13314 +
            (C14245 - C14244) * C13259 + (C18429 - C18430) * C13315 +
            (C18597 - C18598) * C13260) *
               C89093 * C89308 +
           (C21288 * C13313 + C21529 * C13258 + (C21291 - C21290) * C13314 +
            (C21531 - C21530) * C13259 +
            (C263 * C21123 - C89247 * C21285) * C13315 +
            (C263 * C21370 - C89247 * C21527) * C13260) *
               C89093 * C89217) *
              C6963) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C180 +
             (C89247 * C493 - C263 * C346) * C89236) *
                C89 +
            ((C277 - C278) * C180 + (C500 - C501) * C89236) * C90 +
            C514 * C91) *
               C89308 +
           (((C263 * C1724 - C89247 * C1934) * C180 +
             (C263 * C2040 - C89247 * C2240) * C89236) *
                C89 +
            ((C1951 - C1952) * C180 + (C2249 - C2250) * C89236) * C90 +
            C3759 * C91) *
               C89217) *
              C89335 +
          ((((C263 * C819 - C89247 * C1029) * C180 +
             (C263 * C1135 - C89247 * C1335) * C89236) *
                C89 +
            ((C1046 - C1047) * C180 + (C1344 - C1345) * C89236) * C90 +
            C3036 * C91) *
               C89308 +
           (((C89247 * C4325 - C263 * C4097) * C180 +
             (C89247 * C4661 - C263 * C4439) * C89236) *
                C89 +
            ((C4334 - C4335) * C180 + (C4666 - C4667) * C89236) * C90 +
            ((C4338 - C4339) * C180 + (C4668 - C4669) * C89236) * C91) *
               C89217) *
              C89336 +
          ((((C89247 * C1032 - C263 * C820) * C180 +
             (C89247 * C1338 - C263 * C1138) * C89236) *
                C89 +
            ((C1054 - C1055) * C180 + (C1348 - C1349) * C89236) * C90 +
            ((C1058 - C1059) * C180 + (C1350 - C1351) * C89236) * C91) *
               C89308 +
           (((C263 * C8516 - C89247 * C8680) * C180 +
             (C263 * C8760 - C89247 * C8917) * C89236) *
                C89 +
            ((C263 * C8515 - C89247 * C8681) * C180 +
             (C263 * C8761 - C89247 * C8918) * C89236) *
                C90 +
            ((C263 * C8514 - C89247 * C8682) * C180 +
             (C263 * C8762 - C89247 * C8919) * C89236) *
                C91) *
               C89217) *
              C6963) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C25848 * C264 - C25951 * C106 + C25849 * C1934 - C25952 * C1724 +
             C25850 * C1937 - C25953 * C1725) *
                C180 +
            (C25848 * C493 - C25951 * C346 + C25849 * C2240 - C25952 * C2040 +
             C25850 * C2243 - C25953 * C2043) *
                C89236) *
               C89093 * C89308 +
           ((C25951 * C1724 - C25848 * C1934 + C25952 * C1725 - C25849 * C1937 +
             C25953 * C10544 - C25850 * C10660) *
                C180 +
            (C25951 * C2040 - C25848 * C2240 + C25952 * C2043 - C25849 * C2243 +
             C25953 * C10716 - C25850 * C10825) *
                C89236) *
               C89093 * C89217) *
              C89335 +
          (((C25951 * C819 - C25848 * C1029 + C25952 * C4097 - C25849 * C4325 +
             C25953 * C6249 - C25850 * C6413) *
                C180 +
            (C25951 * C1135 - C25848 * C1335 + C25952 * C4439 - C25849 * C4661 +
             C25953 * C6493 - C25850 * C6650) *
                C89236) *
               C89093 * C89308 +
           ((C25848 * C4325 - C25951 * C4097 + C25849 * C6413 - C25952 * C6249 +
             C25850 * C23264 - C25953 * C23153) *
                C180 +
            (C25848 * C4661 - C25951 * C4439 + C25849 * C6650 - C25952 * C6493 +
             C25850 * C23424 - C25953 * C23318) *
                C89236) *
               C89093 * C89217) *
              C89336 +
          (((C25848 * C1032 - C25951 * C820 + C25849 * C8680 - C25952 * C8516 +
             C25850 * C14761 - C25953 * C14601) *
                C180 +
            (C25848 * C1338 - C25951 * C1138 + C25849 * C8917 - C25952 * C8760 +
             C25850 * C14993 - C25953 * C14839) *
                C89236) *
               C89093 * C89308 +
           ((C25951 * C8516 - C25848 * C8680 + C25952 * C14601 -
             C25849 * C14761 + C25953 * C23152 - C25850 * C23265) *
                C180 +
            (C25951 * C8760 - C25848 * C8917 + C25952 * C14839 -
             C25849 * C14993 + C25953 * C23319 - C25850 * C23425) *
                C89236) *
               C89093 * C89217) *
              C6963) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eezx[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C263 +
             (C89093 * C571 - C13261 * C565) * C89247) *
                C13258 +
            ((C14060 - C14061) * C263 + (C14328 - C14329) * C89247) * C13259 +
            C14346 * C13260) *
               C89308 +
           (((C13261 * C1724 - C89093 * C1734) * C263 +
             (C13261 * C2330 - C89093 * C2338) * C89247) *
                C13258 +
            ((C17042 - C17043) * C263 + (C17366 - C17367) * C89247) * C13259 +
            C21613 * C13260) *
               C89217) *
              C89335 +
          ((((C14061 - C14060) * C263 + (C14329 - C14328) * C89247) * C13258 +
            ((C14065 - C14064) * C263 + (C14332 - C14331) * C89247) * C13259 +
            C18656 * C13260) *
               C89308 +
           (((C17043 - C17042) * C263 + (C17367 - C17366) * C89247) * C13258 +
            ((C17047 - C17046) * C263 + (C17369 - C17368) * C89247) * C13259 +
            ((C21375 - C21376) * C263 + (C21610 - C21611) * C89247) * C13260) *
               C89217) *
              C89336 +
          ((C14346 * C13258 +
            ((C14069 - C14068) * C263 + (C14334 - C14333) * C89247) * C13259 +
            ((C18490 - C18491) * C263 + (C18653 - C18654) * C89247) * C13260) *
               C89308 +
           (C21613 * C13258 +
            ((C21376 - C21375) * C263 + (C21611 - C21610) * C89247) * C13259 +
            ((C13261 * C21123 - C89093 * C21124) * C263 +
             (C13261 * C21605 - C89093 * C21606) * C89247) *
                C13260) *
               C89217) *
              C6963) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 + C91 * C116 -
             C104 * C108) *
                C263 +
            (C89 * C571 - C100 * C565 + C90 * C572 - C102 * C566 + C91 * C573 -
             C104 * C567) *
                C89247) *
               C89236 * C89308 +
           ((C100 * C1724 - C89 * C1734 + C102 * C1723 - C90 * C1732 +
             C104 * C1722 - C91 * C1730) *
                C263 +
            (C100 * C2330 - C89 * C2338 + C102 * C2331 - C90 * C2339 +
             C104 * C2332 - C91 * C2340) *
                C89247) *
               C89236 * C89217) *
              C89335 +
          (((C100 * C819 - C89 * C829 + C102 * C818 - C90 * C827 + C104 * C817 -
             C91 * C825) *
                C263 +
            (C100 * C1425 - C89 * C1433 + C102 * C1426 - C90 * C1434 +
             C104 * C1427 - C91 * C1435) *
                C89247) *
               C89236 * C89308 +
           ((C89 * C4101 - C100 * C4097 + C90 * C4103 - C102 * C4098 +
             C91 * C4105 - C104 * C4099) *
                C263 +
            (C89 * C4771 - C100 * C4767 + C90 * C4772 - C102 * C4768 +
             C91 * C4773 - C104 * C4769) *
                C89247) *
               C89236 * C89217) *
              C89336 +
          (((C89 * C831 - C100 * C820 + C90 * C833 - C102 * C821 + C91 * C835 -
             C104 * C822) *
                C263 +
            (C89 * C1436 - C100 * C1428 + C90 * C1437 - C102 * C1429 +
             C91 * C1438 - C104 * C1430) *
                C89247) *
               C89236 * C89308 +
           ((C100 * C8516 - C89 * C8521 + C102 * C8515 - C90 * C8519 +
             C104 * C8514 - C91 * C8517) *
                C263 +
            (C100 * C8994 - C89 * C8997 + C102 * C8995 - C90 * C8998 +
             C104 * C8996 - C91 * C8999) *
                C89247) *
               C89236 * C89217) *
              C6963) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C89093 * C112 - C13261 * C106) * C25951 +
            (C89093 * C571 - C13261 * C565) * C25848 +
            (C27308 - C27309) * C25952 + (C27606 - C27607) * C25849 +
            C27332 * C25953 + C27618 * C25850) *
               C89236 * C89308 +
           ((C27309 - C27308) * C25951 + (C27607 - C27606) * C25848 +
            (C27313 - C27312) * C25952 + (C27609 - C27608) * C25849 +
            (C27316 - C27317) * C25953 + (C27610 - C27611) * C25850) *
               C89236 * C89217) *
              C89335 +
          (((C14061 - C14060) * C25951 + (C14329 - C14328) * C25848 +
            (C17042 - C17043) * C25952 + (C17366 - C17367) * C25849 +
            C31534 * C25953 + C31777 * C25850) *
               C89236 * C89308 +
           ((C17043 - C17042) * C25951 + (C17367 - C17366) * C25848 +
            (C19096 - C19097) * C25952 + (C19334 - C19335) * C25849 +
            (C31536 - C31537) * C25953 + (C31778 - C31779) * C25850) *
               C89236 * C89217) *
              C89336 +
          ((C14084 * C25951 + C14342 * C25848 + (C17047 - C17046) * C25952 +
            (C17369 - C17368) * C25849 + (C19100 - C19101) * C25953 +
            (C19336 - C19337) * C25850) *
               C89236 * C89308 +
           (C21373 * C25951 + C21609 * C25848 + (C19101 - C19100) * C25952 +
            (C19337 - C19336) * C25849 +
            (C13261 * C23152 - C89093 * C23154) * C25953 +
            (C13261 * C23477 - C89093 * C23479) * C25850) *
               C89236 * C89217) *
              C6963) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eezy[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
             C13260 * C926 - C13315 * C820) *
                C263 +
            (C13258 * C627 - C13313 * C565 + C13259 * C1515 - C13314 * C1425 +
             C13260 * C1518 - C13315 * C1428) *
                C89247) *
               C89093 * C89308 +
           ((C13313 * C1724 - C13258 * C1828 + C13314 * C4097 - C13259 * C4211 +
             C13315 * C8516 - C13260 * C8600) *
                C263 +
            (C13313 * C2330 - C13258 * C2420 + C13314 * C4767 - C13259 * C4873 +
             C13315 * C8994 - C13260 * C9074) *
                C89247) *
               C89093 * C89217) *
              C89335 +
          (((C13313 * C819 - C13258 * C923 + C13314 * C820 - C13259 * C926 +
             C13315 * C5727 - C13260 * C5787) *
                C263 +
            (C13313 * C1425 - C13258 * C1515 + C13314 * C1428 - C13259 * C1518 +
             C13315 * C6061 - C13260 * C6117) *
                C89247) *
               C89093 * C89308 +
           ((C13258 * C4211 - C13313 * C4097 + C13259 * C8600 - C13314 * C8516 +
             C13260 * C16821 - C13315 * C16683) *
                C263 +
            (C13258 * C4873 - C13313 * C4767 + C13259 * C9074 - C13314 * C8994 +
             C13260 * C17471 - C13315 * C17361) *
                C89247) *
               C89093 * C89217) *
              C89336 +
          (((C13258 * C926 - C13313 * C820 + C13259 * C5787 - C13314 * C5727 +
             C13260 * C13873 - C13315 * C13743) *
                C263 +
            (C13258 * C1518 - C13313 * C1428 + C13259 * C6117 - C13314 * C6061 +
             C13260 * C14421 - C13315 * C14323) *
                C89247) *
               C89093 * C89308 +
           ((C13313 * C8516 - C13258 * C8600 + C13314 * C16683 -
             C13259 * C16821 + C13315 * C21123 - C13260 * C21209) *
                C263 +
            (C13313 * C8994 - C13258 * C9074 + C13314 * C17361 -
             C13259 * C17471 + C13315 * C21605 - C13260 * C21687) *
                C89247) *
               C89093 * C89217) *
              C6963) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C263 +
             (C89236 * C627 - C180 * C565) * C89247) *
                C89 +
            ((C194 - C195) * C263 + (C634 - C635) * C89247) * C90 +
            C648 * C91) *
               C89308 +
           (((C180 * C1724 - C89236 * C1828) * C263 +
             (C180 * C2330 - C89236 * C2420) * C89247) *
                C89 +
            ((C1845 - C1846) * C263 + (C2429 - C2430) * C89247) * C90 +
            C3916 * C91) *
               C89217) *
              C89335 +
          ((((C180 * C819 - C89236 * C923) * C263 +
             (C180 * C1425 - C89236 * C1515) * C89247) *
                C89 +
            ((C940 - C941) * C263 + (C1524 - C1525) * C89247) * C90 +
            C3193 * C91) *
               C89308 +
           (((C89236 * C4211 - C180 * C4097) * C263 +
             (C89236 * C4873 - C180 * C4767) * C89247) *
                C89 +
            ((C4220 - C4221) * C263 + (C4878 - C4879) * C89247) * C90 +
            ((C4224 - C4225) * C263 + (C4880 - C4881) * C89247) * C91) *
               C89217) *
              C89336 +
          ((((C89236 * C926 - C180 * C820) * C263 +
             (C89236 * C1518 - C180 * C1428) * C89247) *
                C89 +
            ((C948 - C949) * C263 + (C1528 - C1529) * C89247) * C90 +
            ((C952 - C953) * C263 + (C1530 - C1531) * C89247) * C91) *
               C89308 +
           (((C180 * C8516 - C89236 * C8600) * C263 +
             (C180 * C8994 - C89236 * C9074) * C89247) *
                C89 +
            ((C180 * C8515 - C89236 * C8601) * C263 +
             (C180 * C8995 - C89236 * C9075) * C89247) *
                C90 +
            ((C180 * C8514 - C89236 * C8602) * C263 +
             (C180 * C8996 - C89236 * C9076) * C89247) *
                C91) *
               C89217) *
              C6963) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C89236 * C181 - C180 * C106) * C25951 +
            (C89236 * C627 - C180 * C565) * C25848 +
            (C27126 - C27127) * C25952 + (C27696 - C27697) * C25849 +
            C27144 * C25953 + C27705 * C25850) *
               C89093 * C89308 +
           ((C27127 - C27126) * C25951 + (C27697 - C27696) * C25848 +
            (C27131 - C27130) * C25952 + (C27699 - C27698) * C25849 +
            (C27134 - C27135) * C25953 + (C27700 - C27701) * C25850) *
               C89093 * C89217) *
              C89335 +
          (((C180 * C819 - C89236 * C923) * C25951 +
            (C180 * C1425 - C89236 * C1515) * C25848 +
            (C29351 - C29352) * C25952 + (C29991 - C29992) * C25849 +
            C31373 * C25953 + C31855 * C25850) *
               C89093 * C89308 +
           ((C29352 - C29351) * C25951 + (C29992 - C29991) * C25848 +
            (C29356 - C29355) * C25952 + (C29994 - C29993) * C25849 +
            (C31375 - C31376) * C25953 + (C31856 - C31857) * C25850) *
               C89093 * C89217) *
              C89336 +
          (((C89236 * C926 - C180 * C820) * C25951 +
            (C89236 * C1518 - C180 * C1428) * C25848 +
            (C33629 - C33630) * C25952 + (C34097 - C34098) * C25849 +
            (C33633 - C33634) * C25953 + (C34099 - C34100) * C25850) *
               C89093 * C89308 +
           ((C33630 - C33629) * C25951 + (C34098 - C34097) * C25848 +
            (C33634 - C33633) * C25952 + (C34100 - C34099) * C25849 +
            (C180 * C23152 - C89236 * C23211) * C25953 +
            (C180 * C23477 - C89236 * C23531) * C25850) *
               C89093 * C89217) *
              C6963) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eezz[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C13258 +
            C14524 * C13259 + C14525 * C13260) *
               C89093 * C89308 -
           (C17592 * C13260 + C17593 * C13259 +
            (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
                C13258) *
               C89093 * C89217) *
              C89335 +
          ((C17593 * C13258 + C17592 * C13259 + C21770 * C13260) * C89093 *
               C89217 -
           (C14526 * C13260 + C14525 * C13259 + C14524 * C13258) * C89093 *
               C89308) *
              C89336 +
          ((C14525 * C13258 + C14526 * C13259 + C18765 * C13260) * C89093 *
               C89308 -
           ((C263 * C21285 - C699 * C21123 - C263 * C21605 + C89247 * C21762) *
                C13260 +
            C21770 * C13259 + C17592 * C13258) *
               C89093 * C89217) *
              C6963) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C89236 *
                C89 +
            C735 * C90 + C736 * C91) *
               C89308 -
           (C2547 * C91 + C2548 * C90 +
            (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
                C89236 * C89) *
               C89217) *
              C89335 +
          (((C263 * C4325 - C699 * C4097 - C263 * C4767 + C89247 * C4979) *
                C89236 * C89 +
            C4998 * C90 + C4999 * C91) *
               C89217 -
           (C1642 * C91 + C1643 * C90 +
            (C263 * C1029 - C699 * C819 - C263 * C1425 + C89247 * C1607) *
                C89236 * C89) *
               C89308) *
              C89336 +
          (((C263 * C1032 - C699 * C820 - C263 * C1428 + C89247 * C1608) *
                C89236 * C89 +
            C1644 * C90 + C1645 * C91) *
               C89308 -
           ((C263 * C8682 - C699 * C8514 - C263 * C8996 + C89247 * C9151) *
                C89236 * C91 +
            (C263 * C8681 - C699 * C8515 - C263 * C8995 + C89247 * C9152) *
                C89236 * C90 +
            (C263 * C8680 - C699 * C8516 - C263 * C8994 + C89247 * C9153) *
                C89236 * C89) *
               C89217) *
              C6963) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C25951 * C264 - C26254 * C106 - C25951 * C565 + C25848 * C700 +
            C25952 * C1934 - C26255 * C1724 - C25952 * C2330 + C25849 * C2512 +
            C25953 * C1937 - C26256 * C1725 - C25953 * C2333 + C25850 * C2513) *
               C89236 * C89093 * C89308 -
           (C25953 * C10660 - C26256 * C10544 - C25953 * C10878 +
            C25850 * C10989 + C25952 * C1937 - C26255 * C1725 - C25952 * C2333 +
            C25849 * C2513 + C25951 * C1934 - C26254 * C1724 - C25951 * C2330 +
            C25848 * C2512) *
               C89236 * C89093 * C89217) *
              C89335 +
          ((C25951 * C4325 - C26254 * C4097 - C25951 * C4767 + C25848 * C4979 +
            C25952 * C6413 - C26255 * C6249 - C25952 * C6727 + C25849 * C6886 +
            C25953 * C23264 - C26256 * C23153 - C25953 * C23476 +
            C25850 * C23583) *
               C89236 * C89093 * C89217 -
           (C25953 * C6413 - C26256 * C6249 - C25953 * C6727 + C25850 * C6886 +
            C25952 * C4325 - C26255 * C4097 - C25952 * C4767 + C25849 * C4979 +
            C25951 * C1029 - C26254 * C819 - C25951 * C1425 + C25848 * C1607) *
               C89236 * C89093 * C89308) *
              C89336 +
          ((C25951 * C1032 - C26254 * C820 - C25951 * C1428 + C25848 * C1608 +
            C25952 * C8680 - C26255 * C8516 - C25952 * C8994 + C25849 * C9153 +
            C25953 * C14761 - C26256 * C14601 - C25953 * C15069 +
            C25850 * C15223) *
               C89236 * C89093 * C89308 -
           (C25953 * C23265 - C26256 * C23152 - C25953 * C23477 +
            C25850 * C23582 + C25952 * C14761 - C26255 * C14601 -
            C25952 * C15069 + C25849 * C15223 + C25951 * C8680 -
            C26254 * C8516 - C25951 * C8994 + C25848 * C9153) *
               C89236 * C89093 * C89217) *
              C6963) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eexx[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C100 * C112 - C101 * C106 - C100 * C113 + C89 * C124 +
                C102 * C114 - C103 * C107 - C102 * C115 + C90 * C125 +
                C104 * C116 - C105 * C108 - C104 * C117 + C91 * C126) *
                   C89247 * C89236 * C89153 * C5073 -
               (C104 * C825 - C105 * C817 - C104 * C826 + C91 * C841 +
                C102 * C827 - C103 * C818 - C102 * C828 + C90 * C842 +
                C100 * C829 - C101 * C819 - C100 * C830 + C89 * C843) *
                   C89247 * C89236 * C89153 * C89189) *
                  C5075 +
              ((C100 * C827 - C101 * C818 - C100 * C828 + C89 * C842 +
                C102 * C825 - C103 * C817 - C102 * C826 + C90 * C841 +
                C104 * C837 - C105 * C823 - C104 * C838 + C91 * C847) *
                   C89247 * C89236 * C89153 * C89189 -
               (C104 * C118 - C105 * C109 - C104 * C119 + C91 * C127 +
                C102 * C116 - C103 * C108 - C102 * C117 + C90 * C126 +
                C100 * C114 - C101 * C107 - C100 * C115 + C89 * C125) *
                   C89247 * C89236 * C89153 * C5073) *
                  C5076 +
              ((C100 * C116 - C101 * C108 - C100 * C117 + C89 * C126 +
                C102 * C118 - C103 * C109 - C102 * C119 + C90 * C127 +
                C104 * C120 - C105 * C110 - C104 * C121 + C91 * C128) *
                   C89247 * C89236 * C89153 * C5073 -
               (C104 * C2630 - C105 * C2629 - C104 * C2631 + C91 * C2632 +
                C102 * C837 - C103 * C823 - C102 * C838 + C90 * C847 +
                C100 * C825 - C101 * C817 - C100 * C826 + C89 * C841) *
                   C89247 * C89236 * C89153 * C89189) *
                  C5077) +
         0.5 * std::pow(Pi, 2.5) *
             ((C100 * C112 - C101 * C106 - C100 * C113 + C89 * C124 +
               C102 * C114 - C103 * C107 - C102 * C115 + C90 * C125 +
               C104 * C116 - C105 * C108 - C104 * C117 + C91 * C126) *
                  C89247 * C89236 * C89153 * C5720 -
              (C104 * C825 - C105 * C817 - C104 * C826 + C91 * C841 +
               C102 * C827 - C103 * C818 - C102 * C828 + C90 * C842 +
               C100 * C829 - C101 * C819 - C100 * C830 + C89 * C843) *
                  C89247 * C89236 * C89153 * C5721 +
              (C100 * C831 - C101 * C820 - C100 * C832 + C89 * C844 +
               C102 * C833 - C103 * C821 - C102 * C834 + C90 * C845 +
               C104 * C835 - C105 * C822 - C104 * C836 + C91 * C846) *
                  C89247 * C89236 * C89153 * C5722 -
              (C104 * C5728 - C105 * C5725 - C104 * C5729 + C91 * C5734 +
               C102 * C5730 - C103 * C5726 - C102 * C5731 + C90 * C5735 +
               C100 * C5732 - C101 * C5727 - C100 * C5733 + C89 * C5736) *
                  C89247 * C89236 * C89153 * C5723) *
             C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C100 * C112 - C101 * C106 - C100 * C113 + C89 * C124 + C102 * C114 -
            C103 * C107 - C102 * C115 + C90 * C125 + C104 * C116 - C105 * C108 -
            C104 * C117 + C91 * C126) *
               C89247 * C89236 * C1719 -
           (C104 * C1730 - C105 * C1722 - C104 * C1731 + C91 * C1746 +
            C102 * C1732 - C103 * C1723 - C102 * C1733 + C90 * C1747 +
            C100 * C1734 - C101 * C1724 - C100 * C1735 + C89 * C1748) *
               C89247 * C89236 * C1720 +
           (C100 * C1736 - C101 * C1725 - C100 * C1737 + C89 * C1749 +
            C102 * C1738 - C103 * C1726 - C102 * C1739 + C90 * C1750 +
            C104 * C1740 - C105 * C1727 - C104 * C1741 + C91 * C1751) *
               C89247 * C89236 * C1721) *
              C5073 +
          ((C100 * C4101 - C101 * C4097 - C100 * C4102 + C89 * C4109 +
            C102 * C4103 - C103 * C4098 - C102 * C4104 + C90 * C4110 +
            C104 * C4105 - C105 * C4099 - C104 * C4106 + C91 * C4111) *
               C89247 * C89236 * C1720 -
           (C104 * C825 - C105 * C817 - C104 * C826 + C91 * C841 + C102 * C827 -
            C103 * C818 - C102 * C828 + C90 * C842 + C100 * C829 - C101 * C819 -
            C100 * C830 + C89 * C843) *
               C89247 * C89236 * C1719 -
           (C104 * C6250 - C105 * C6247 - C104 * C6251 + C91 * C6256 +
            C102 * C6252 - C103 * C6248 - C102 * C6253 + C90 * C6257 +
            C100 * C6254 - C101 * C6249 - C100 * C6255 + C89 * C6258) *
               C89247 * C89236 * C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                C89247 * C13258 +
            C13794 * C13259 + C13795 * C13260) *
               C89153 * C5073 -
           (C13796 * C13260 + C13795 * C13259 + C13794 * C13258) * C89153 *
               C89189) *
              C5075 +
          ((C13797 * C13258 + C13798 * C13259 + C13799 * C13260) * C89153 *
               C89189 -
           (C13798 * C13260 + C13797 * C13259 +
            (C13261 * C114 - C13262 * C107 - C13261 * C115 + C89093 * C125) *
                C89247 * C13258) *
               C89153 * C5073) *
              C5076 +
          (((C13261 * C116 - C13262 * C108 - C13261 * C117 + C89093 * C126) *
                C89247 * C13258 +
            C15314 * C13259 + C15315 * C13260) *
               C89153 * C5073 -
           ((C13261 * C5728 - C13262 * C5725 - C13261 * C5729 +
             C89093 * C5734) *
                C89247 * C13260 +
            C15315 * C13259 + C15314 * C13258) *
               C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
               C89247 * C13258 +
           C13794 * C13259 + C13795 * C13260) *
              C89153 * C5720 -
          (C13796 * C13260 + C13795 * C13259 + C13794 * C13258) * C89153 *
              C5721 +
          (C13795 * C13258 + C13796 * C13259 + C18322 * C13260) * C89153 *
              C5722 -
          ((C13261 * C18311 - C13262 * C18310 - C13261 * C18312 +
            C89093 * C18313) *
               C89247 * C13260 +
           C18322 * C13259 + C13796 * C13258) *
              C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                C89247 * C13258 +
            C13794 * C13259 + C13795 * C13260) *
               C1719 -
           (C16720 * C13260 + C16721 * C13259 +
            (C13261 * C1734 - C13262 * C1724 - C13261 * C1735 +
             C89093 * C1748) *
                C89247 * C13258) *
               C1720 +
           ((C13261 * C1736 - C13262 * C1725 - C13261 * C1737 +
             C89093 * C1749) *
                C89247 * C13258 +
            C18858 * C13259 + C18859 * C13260) *
               C1721) *
              C5073 +
          ((C16721 * C13258 + C16720 * C13259 +
            (C13261 * C16685 - C13262 * C16683 - C13261 * C16686 +
             C89093 * C16689) *
                C89247 * C13260) *
               C1720 -
           (C13796 * C13260 + C13795 * C13259 + C13794 * C13258) * C1719 -
           ((C13261 * C18840 - C13262 * C18839 - C13261 * C18841 +
             C89093 * C18842) *
                C89247 * C13260 +
            C18859 * C13259 + C18858 * C13258) *
               C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                C25848 +
            C27042 * C25849 + C27043 * C25850) *
               C89236 * C89153 * C5073 -
           (C18856 * C25850 + C16717 * C25849 + C13788 * C25848) * C89236 *
               C89153 * C89189) *
              C5075 +
          ((C13791 * C25848 + C16718 * C25849 + C29250 * C25850) * C89236 *
               C89153 * C89189 -
           (C27046 * C25850 + C27045 * C25849 +
            (C13261 * C114 - C13262 * C107 - C13261 * C115 + C89093 * C125) *
                C25848) *
               C89236 * C89153 * C5073) *
              C5076 +
          (((C13261 * C116 - C13262 * C108 - C13261 * C117 + C89093 * C126) *
                C25848 +
            C28534 * C25849 + C28535 * C25850) *
               C89236 * C89153 * C5073 -
           ((C13261 * C6250 - C13262 * C6247 - C13261 * C6251 +
             C89093 * C6256) *
                C25850 +
            (C13261 * C4105 - C13262 * C4099 - C13261 * C4106 +
             C89093 * C4111) *
                C25849 +
            C15312 * C25848) *
               C89236 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
               C25848 +
           C27042 * C25849 + C27043 * C25850) *
              C89236 * C89153 * C5720 -
          (C18856 * C25850 + C16717 * C25849 + C13788 * C25848) * C89236 *
              C89153 * C5721 +
          (C13789 * C25848 + C16716 * C25849 + C18857 * C25850) * C89236 *
              C89153 * C5722 -
          ((C13261 * C18840 - C13262 * C18839 - C13261 * C18841 +
            C89093 * C18842) *
               C25850 +
           C21134 * C25849 + C13790 * C25848) *
              C89236 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                C25848 +
            C27042 * C25849 + C27043 * C25850) *
               C89236 * C1719 -
           (C27044 * C25850 + C27043 * C25849 + C27042 * C25848) * C89236 *
               C1720 +
           (C27043 * C25848 + C27044 * C25849 +
            (C13261 * C26999 - C13262 * C26997 - C13261 * C27000 +
             C89093 * C27003) *
                C25850) *
               C89236 * C1721) *
              C5073 +
          ((C16717 * C25848 + C18856 * C25849 + C31296 * C25850) * C89236 *
               C1720 -
           (C18856 * C25850 + C16717 * C25849 + C13788 * C25848) * C89236 *
               C1719 -
           ((C13261 * C31286 - C13262 * C31285 - C13261 * C31287 +
             C89093 * C31288) *
                C25850 +
            C31296 * C25849 + C18856 * C25848) *
               C89236 * C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eexy[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C89236 * C181 - C180 * C106) * C100 +
                (C89236 * C187 - C180 * C113) * C89 + (C194 - C195) * C102 +
                (C196 - C197) * C90 + C210 * C104 + C211 * C91) *
                   C89247 * C89153 * C5073 +
               ((C180 * C819 - C89236 * C923) * C100 +
                (C180 * C830 - C89236 * C931) * C89 + (C940 - C941) * C102 +
                (C942 - C943) * C90 + C2710 * C104 + C2711 * C91) *
                   C89247 * C89153 * C89189) *
                  C5075 +
              (((C195 - C194) * C100 + (C197 - C196) * C89 +
                (C199 - C198) * C102 + (C201 - C200) * C90 + C212 * C104 +
                C213 * C91) *
                   C89247 * C89153 * C5073 +
               ((C941 - C940) * C100 + (C943 - C942) * C89 +
                (C945 - C944) * C102 + (C947 - C946) * C90 +
                (C2712 - C2713) * C104 + (C2714 - C2715) * C91) *
                   C89247 * C89153 * C89189) *
                  C5076 +
              ((C210 * C100 + C211 * C89 + (C203 - C202) * C102 +
                (C205 - C204) * C90 + (C206 - C207) * C104 +
                (C208 - C209) * C91) *
                   C89247 * C89153 * C5073 +
               (C2710 * C100 + C2711 * C89 + (C2713 - C2712) * C102 +
                (C2715 - C2714) * C90 + (C180 * C2629 - C89236 * C2707) * C104 +
                (C180 * C2631 - C89236 * C2708) * C91) *
                   C89247 * C89153 * C89189) *
                  C5077) +
         0.5 * std::pow(Pi, 2.5) *
             (((C89236 * C181 - C180 * C106) * C100 +
               (C89236 * C187 - C180 * C113) * C89 + (C194 - C195) * C102 +
               (C196 - C197) * C90 + C210 * C104 + C211 * C91) *
                  C89247 * C89153 * C5720 +
              ((C180 * C819 - C89236 * C923) * C100 +
               (C180 * C830 - C89236 * C931) * C89 + (C940 - C941) * C102 +
               (C942 - C943) * C90 + C2710 * C104 + C2711 * C91) *
                  C89247 * C89153 * C5721 +
              ((C89236 * C926 - C180 * C820) * C100 +
               (C89236 * C934 - C180 * C832) * C89 + (C948 - C949) * C102 +
               (C950 - C951) * C90 + (C952 - C953) * C104 +
               (C954 - C955) * C91) *
                  C89247 * C89153 * C5722 +
              ((C180 * C5727 - C89236 * C5787) * C100 +
               (C180 * C5733 - C89236 * C5790) * C89 +
               (C180 * C5726 - C89236 * C5788) * C102 +
               (C180 * C5731 - C89236 * C5791) * C90 +
               (C180 * C5725 - C89236 * C5789) * C104 +
               (C180 * C5729 - C89236 * C5792) * C91) *
                  C89247 * C89153 * C5723) *
             C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C89236 * C181 - C180 * C106) * C100 +
            (C89236 * C187 - C180 * C113) * C89 + (C194 - C195) * C102 +
            (C196 - C197) * C90 + C210 * C104 + C211 * C91) *
               C89247 * C1719 +
           ((C180 * C1724 - C89236 * C1828) * C100 +
            (C180 * C1735 - C89236 * C1836) * C89 + (C1845 - C1846) * C102 +
            (C1847 - C1848) * C90 + C3433 * C104 + C3434 * C91) *
               C89247 * C1720 +
           ((C89236 * C1831 - C180 * C1725) * C100 +
            (C89236 * C1839 - C180 * C1737) * C89 + (C1853 - C1854) * C102 +
            (C1855 - C1856) * C90 + (C1857 - C1858) * C104 +
            (C1859 - C1860) * C91) *
               C89247 * C1721) *
              C5073 +
          (((C180 * C819 - C89236 * C923) * C100 +
            (C180 * C830 - C89236 * C931) * C89 + (C940 - C941) * C102 +
            (C942 - C943) * C90 + C2710 * C104 + C2711 * C91) *
               C89247 * C1719 +
           ((C89236 * C4211 - C180 * C4097) * C100 +
            (C89236 * C4215 - C180 * C4102) * C89 + (C4220 - C4221) * C102 +
            (C4222 - C4223) * C90 + (C4224 - C4225) * C104 +
            (C4226 - C4227) * C91) *
               C89247 * C1720 +
           ((C180 * C6249 - C89236 * C6333) * C100 +
            (C180 * C6255 - C89236 * C6336) * C89 +
            (C180 * C6248 - C89236 * C6334) * C102 +
            (C180 * C6253 - C89236 * C6337) * C90 +
            (C180 * C6247 - C89236 * C6335) * C104 +
            (C180 * C6251 - C89236 * C6338) * C91) *
               C89247 * C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
             C13260 * C926 - C13315 * C820) *
                C13261 +
            (C13258 * C187 - C13313 * C113 + C13259 * C931 - C13314 * C830 +
             C13260 * C934 - C13315 * C832) *
                C89093) *
               C89247 * C89153 * C5073 +
           ((C13313 * C819 - C13258 * C923 + C13314 * C820 - C13259 * C926 +
             C13315 * C5727 - C13260 * C5787) *
                C13261 +
            (C13313 * C830 - C13258 * C931 + C13314 * C832 - C13259 * C934 +
             C13315 * C5733 - C13260 * C5790) *
                C89093) *
               C89247 * C89153 * C89189) *
              C5075 +
          (((C13313 * C107 - C13258 * C182 + C13314 * C818 - C13259 * C924 +
             C13315 * C821 - C13260 * C927) *
                C13261 +
            (C13313 * C115 - C13258 * C188 + C13314 * C828 - C13259 * C932 +
             C13315 * C834 - C13260 * C935) *
                C89093) *
               C89247 * C89153 * C5073 +
           ((C13258 * C924 - C13313 * C818 + C13259 * C927 - C13314 * C821 +
             C13260 * C5788 - C13315 * C5726) *
                C13261 +
            (C13258 * C932 - C13313 * C828 + C13259 * C935 - C13314 * C834 +
             C13260 * C5791 - C13315 * C5731) *
                C89093) *
               C89247 * C89153 * C89189) *
              C5076 +
          (((C13258 * C183 - C13313 * C108 + C13259 * C925 - C13314 * C817 +
             C13260 * C928 - C13315 * C822) *
                C13261 +
            (C13258 * C189 - C13313 * C117 + C13259 * C933 - C13314 * C826 +
             C13260 * C936 - C13315 * C836) *
                C89093) *
               C89247 * C89153 * C5073 +
           ((C13313 * C817 - C13258 * C925 + C13314 * C822 - C13259 * C928 +
             C13315 * C5725 - C13260 * C5789) *
                C13261 +
            (C13313 * C826 - C13258 * C933 + C13314 * C836 - C13259 * C936 +
             C13315 * C5729 - C13260 * C5792) *
                C89093) *
               C89247 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
            C13260 * C926 - C13315 * C820) *
               C13261 +
           (C13258 * C187 - C13313 * C113 + C13259 * C931 - C13314 * C830 +
            C13260 * C934 - C13315 * C832) *
               C89093) *
              C89247 * C89153 * C5720 +
          ((C13313 * C819 - C13258 * C923 + C13314 * C820 - C13259 * C926 +
            C13315 * C5727 - C13260 * C5787) *
               C13261 +
           (C13313 * C830 - C13258 * C931 + C13314 * C832 - C13259 * C934 +
            C13315 * C5733 - C13260 * C5790) *
               C89093) *
              C89247 * C89153 * C5721 +
          ((C13258 * C926 - C13313 * C820 + C13259 * C5787 - C13314 * C5727 +
            C13260 * C13873 - C13315 * C13743) *
               C13261 +
           (C13258 * C934 - C13313 * C832 + C13259 * C5790 - C13314 * C5733 +
            C13260 * C13875 - C13315 * C13746) *
               C89093) *
              C89247 * C89153 * C5722 +
          ((C13313 * C5727 - C13258 * C5787 + C13314 * C13743 -
            C13259 * C13873 + C13315 * C18310 - C13260 * C18372) *
               C13261 +
           (C13313 * C5733 - C13258 * C5790 + C13314 * C13746 -
            C13259 * C13875 + C13315 * C18312 - C13260 * C18373) *
               C89093) *
              C89247 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
             C13260 * C926 - C13315 * C820) *
                C13261 +
            (C13258 * C187 - C13313 * C113 + C13259 * C931 - C13314 * C830 +
             C13260 * C934 - C13315 * C832) *
                C89093) *
               C89247 * C1719 +
           ((C13313 * C1724 - C13258 * C1828 + C13314 * C4097 - C13259 * C4211 +
             C13315 * C8516 - C13260 * C8600) *
                C13261 +
            (C13313 * C1735 - C13258 * C1836 + C13314 * C4102 - C13259 * C4215 +
             C13315 * C8522 - C13260 * C8603) *
                C89093) *
               C89247 * C1720 +
           ((C13258 * C1831 - C13313 * C1725 + C13259 * C6333 - C13314 * C6249 +
             C13260 * C14683 - C13315 * C14601) *
                C13261 +
            (C13258 * C1839 - C13313 * C1737 + C13259 * C6336 - C13314 * C6255 +
             C13260 * C14685 - C13315 * C14604) *
                C89093) *
               C89247 * C1721) *
              C5073 +
          (((C13313 * C819 - C13258 * C923 + C13314 * C820 - C13259 * C926 +
             C13315 * C5727 - C13260 * C5787) *
                C13261 +
            (C13313 * C830 - C13258 * C931 + C13314 * C832 - C13259 * C934 +
             C13315 * C5733 - C13260 * C5790) *
                C89093) *
               C89247 * C1719 +
           ((C13258 * C4211 - C13313 * C4097 + C13259 * C8600 - C13314 * C8516 +
             C13260 * C16821 - C13315 * C16683) *
                C13261 +
            (C13258 * C4215 - C13313 * C4102 + C13259 * C8603 - C13314 * C8522 +
             C13260 * C16823 - C13315 * C16686) *
                C89093) *
               C89247 * C1720 +
           ((C13313 * C6249 - C13258 * C6333 + C13314 * C14601 -
             C13259 * C14683 + C13315 * C18839 - C13260 * C18933) *
                C13261 +
            (C13313 * C6255 - C13258 * C6336 + C13314 * C14604 -
             C13259 * C14685 + C13315 * C18841 - C13260 * C18934) *
                C89093) *
               C89247 * C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C13261 +
             (C89236 * C187 - C180 * C113) * C89093) *
                C25848 +
            ((C27126 - C27127) * C13261 + (C27128 - C27129) * C89093) * C25849 +
            C27151 * C25850) *
               C89153 * C5073 +
           (((C180 * C819 - C89236 * C923) * C13261 +
             (C180 * C830 - C89236 * C931) * C89093) *
                C25848 +
            ((C29351 - C29352) * C13261 + (C29353 - C29354) * C89093) * C25849 +
            ((C29355 - C29356) * C13261 + (C29357 - C29358) * C89093) *
                C25850) *
               C89153 * C89189) *
              C5075 +
          ((((C195 - C194) * C13261 + (C197 - C196) * C89093) * C25848 +
            ((C1845 - C1846) * C13261 + (C1847 - C1848) * C89093) * C25849 +
            C27150 * C25850) *
               C89153 * C5073 +
           (((C941 - C940) * C13261 + (C943 - C942) * C89093) * C25848 +
            ((C4220 - C4221) * C13261 + (C4222 - C4223) * C89093) * C25849 +
            ((C29359 - C29360) * C13261 + (C29361 - C29362) * C89093) *
                C25850) *
               C89153 * C89189) *
              C5076 +
          (((C210 * C13261 + C211 * C89093) * C25848 +
            ((C1850 - C1849) * C13261 + (C1852 - C1851) * C89093) * C25849 +
            ((C1857 - C1858) * C13261 + (C1859 - C1860) * C89093) * C25850) *
               C89153 * C5073 +
           ((C2710 * C13261 + C2711 * C89093) * C25848 +
            ((C4225 - C4224) * C13261 + (C4227 - C4226) * C89093) * C25849 +
            ((C180 * C6247 - C89236 * C6335) * C13261 +
             (C180 * C6251 - C89236 * C6338) * C89093) *
                C25850) *
               C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C89236 * C181 - C180 * C106) * C13261 +
            (C89236 * C187 - C180 * C113) * C89093) *
               C25848 +
           ((C27126 - C27127) * C13261 + (C27128 - C27129) * C89093) * C25849 +
           C27151 * C25850) *
              C89153 * C5720 +
          (((C180 * C819 - C89236 * C923) * C13261 +
            (C180 * C830 - C89236 * C931) * C89093) *
               C25848 +
           ((C29351 - C29352) * C13261 + (C29353 - C29354) * C89093) * C25849 +
           ((C29355 - C29356) * C13261 + (C29357 - C29358) * C89093) * C25850) *
              C89153 * C5721 +
          (((C89236 * C926 - C180 * C820) * C13261 +
            (C89236 * C934 - C180 * C832) * C89093) *
               C25848 +
           ((C89236 * C8600 - C180 * C8516) * C13261 +
            (C89236 * C8603 - C180 * C8522) * C89093) *
               C25849 +
           ((C89236 * C14683 - C180 * C14601) * C13261 +
            (C89236 * C14685 - C180 * C14604) * C89093) *
               C25850) *
              C89153 * C5722 +
          (((C180 * C5727 - C89236 * C5787) * C13261 +
            (C180 * C5733 - C89236 * C5790) * C89093) *
               C25848 +
           ((C180 * C16683 - C89236 * C16821) * C13261 +
            (C180 * C16686 - C89236 * C16823) * C89093) *
               C25849 +
           ((C180 * C18839 - C89236 * C18933) * C13261 +
            (C180 * C18841 - C89236 * C18934) * C89093) *
               C25850) *
              C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C13261 +
             (C89236 * C187 - C180 * C113) * C89093) *
                C25848 +
            ((C27126 - C27127) * C13261 + (C27128 - C27129) * C89093) * C25849 +
            C27151 * C25850) *
               C1719 +
           (((C27127 - C27126) * C13261 + (C27129 - C27128) * C89093) * C25848 +
            ((C27131 - C27130) * C13261 + (C27133 - C27132) * C89093) * C25849 +
            ((C27134 - C27135) * C13261 + (C27136 - C27137) * C89093) *
                C25850) *
               C1720 +
           (C27151 * C25848 +
            ((C27135 - C27134) * C13261 + (C27137 - C27136) * C89093) * C25849 +
            ((C89236 * C27121 - C180 * C26997) * C13261 +
             (C89236 * C27123 - C180 * C27000) * C89093) *
                C25850) *
               C1721) *
              C5073 +
          ((((C180 * C819 - C89236 * C923) * C13261 +
             (C180 * C830 - C89236 * C931) * C89093) *
                C25848 +
            ((C29351 - C29352) * C13261 + (C29353 - C29354) * C89093) * C25849 +
            C31381 * C25850) *
               C1719 +
           (((C29352 - C29351) * C13261 + (C29354 - C29353) * C89093) * C25848 +
            ((C29356 - C29355) * C13261 + (C29358 - C29357) * C89093) * C25849 +
            ((C31375 - C31376) * C13261 + (C31377 - C31378) * C89093) *
                C25850) *
               C1720 +
           (C31381 * C25848 +
            ((C31376 - C31375) * C13261 + (C31378 - C31377) * C89093) * C25849 +
            ((C180 * C31285 - C89236 * C31370) * C13261 +
             (C180 * C31287 - C89236 * C31371) * C89093) *
                C25850) *
               C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eexz[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C89247 * C264 - C263 * C106) * C100 +
                (C89247 * C270 - C263 * C113) * C89 + (C277 - C278) * C102 +
                (C279 - C280) * C90 + C293 * C104 + C294 * C91) *
                   C89236 * C89153 * C5073 +
               ((C263 * C819 - C89247 * C1029) * C100 +
                (C263 * C830 - C89247 * C1037) * C89 + (C1046 - C1047) * C102 +
                (C1048 - C1049) * C90 + C2792 * C104 + C2793 * C91) *
                   C89236 * C89153 * C89189) *
                  C5075 +
              (((C278 - C277) * C100 + (C280 - C279) * C89 +
                (C282 - C281) * C102 + (C284 - C283) * C90 + C295 * C104 +
                C296 * C91) *
                   C89236 * C89153 * C5073 +
               ((C1047 - C1046) * C100 + (C1049 - C1048) * C89 +
                (C1051 - C1050) * C102 + (C1053 - C1052) * C90 +
                (C2794 - C2795) * C104 + (C2796 - C2797) * C91) *
                   C89236 * C89153 * C89189) *
                  C5076 +
              ((C293 * C100 + C294 * C89 + (C286 - C285) * C102 +
                (C288 - C287) * C90 + (C289 - C290) * C104 +
                (C291 - C292) * C91) *
                   C89236 * C89153 * C5073 +
               (C2792 * C100 + C2793 * C89 + (C2795 - C2794) * C102 +
                (C2797 - C2796) * C90 + (C263 * C2629 - C89247 * C2789) * C104 +
                (C263 * C2631 - C89247 * C2790) * C91) *
                   C89236 * C89153 * C89189) *
                  C5077) +
         0.5 * std::pow(Pi, 2.5) *
             (((C89247 * C264 - C263 * C106) * C100 +
               (C89247 * C270 - C263 * C113) * C89 + (C277 - C278) * C102 +
               (C279 - C280) * C90 + C293 * C104 + C294 * C91) *
                  C89236 * C89153 * C5720 +
              ((C263 * C819 - C89247 * C1029) * C100 +
               (C263 * C830 - C89247 * C1037) * C89 + (C1046 - C1047) * C102 +
               (C1048 - C1049) * C90 + C2792 * C104 + C2793 * C91) *
                  C89236 * C89153 * C5721 +
              ((C89247 * C1032 - C263 * C820) * C100 +
               (C89247 * C1040 - C263 * C832) * C89 + (C1054 - C1055) * C102 +
               (C1056 - C1057) * C90 + (C1058 - C1059) * C104 +
               (C1060 - C1061) * C91) *
                  C89236 * C89153 * C5722 +
              ((C263 * C5727 - C89247 * C5843) * C100 +
               (C263 * C5733 - C89247 * C5846) * C89 +
               (C263 * C5726 - C89247 * C5844) * C102 +
               (C263 * C5731 - C89247 * C5847) * C90 +
               (C263 * C5725 - C89247 * C5845) * C104 +
               (C263 * C5729 - C89247 * C5848) * C91) *
                  C89236 * C89153 * C5723) *
             C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C100 +
            (C89247 * C270 - C263 * C113) * C89 + (C277 - C278) * C102 +
            (C279 - C280) * C90 + C293 * C104 + C294 * C91) *
               C89236 * C1719 +
           ((C263 * C1724 - C89247 * C1934) * C100 +
            (C263 * C1735 - C89247 * C1942) * C89 + (C1951 - C1952) * C102 +
            (C1953 - C1954) * C90 + C3515 * C104 + C3516 * C91) *
               C89236 * C1720 +
           ((C89247 * C1937 - C263 * C1725) * C100 +
            (C89247 * C1945 - C263 * C1737) * C89 + (C1959 - C1960) * C102 +
            (C1961 - C1962) * C90 + (C1963 - C1964) * C104 +
            (C1965 - C1966) * C91) *
               C89236 * C1721) *
              C5073 +
          (((C263 * C819 - C89247 * C1029) * C100 +
            (C263 * C830 - C89247 * C1037) * C89 + (C1046 - C1047) * C102 +
            (C1048 - C1049) * C90 + C2792 * C104 + C2793 * C91) *
               C89236 * C1719 +
           ((C89247 * C4325 - C263 * C4097) * C100 +
            (C89247 * C4329 - C263 * C4102) * C89 + (C4334 - C4335) * C102 +
            (C4336 - C4337) * C90 + (C4338 - C4339) * C104 +
            (C4340 - C4341) * C91) *
               C89236 * C1720 +
           ((C263 * C6249 - C89247 * C6413) * C100 +
            (C263 * C6255 - C89247 * C6416) * C89 +
            (C263 * C6248 - C89247 * C6414) * C102 +
            (C263 * C6253 - C89247 * C6417) * C90 +
            (C263 * C6247 - C89247 * C6415) * C104 +
            (C263 * C6251 - C89247 * C6418) * C91) *
               C89236 * C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C13261 +
             (C89247 * C270 - C263 * C113) * C89093) *
                C13258 +
            ((C13956 - C13957) * C13261 + (C13958 - C13959) * C89093) * C13259 +
            C13981 * C13260) *
               C89153 * C5073 +
           (((C13957 - C13956) * C13261 + (C13959 - C13958) * C89093) * C13258 +
            ((C13961 - C13960) * C13261 + (C13963 - C13962) * C89093) * C13259 +
            ((C13964 - C13965) * C13261 + (C13966 - C13967) * C89093) *
                C13260) *
               C89153 * C89189) *
              C5075 +
          ((((C278 - C277) * C13261 + (C280 - C279) * C89093) * C13258 +
            ((C1046 - C1047) * C13261 + (C1048 - C1049) * C89093) * C13259 +
            C13980 * C13260) *
               C89153 * C5073 +
           (((C1047 - C1046) * C13261 + (C1049 - C1048) * C89093) * C13258 +
            ((C1054 - C1055) * C13261 + (C1056 - C1057) * C89093) * C13259 +
            ((C13970 - C13971) * C13261 + (C13972 - C13973) * C89093) *
                C13260) *
               C89153 * C89189) *
              C5076 +
          (((C293 * C13261 + C294 * C89093) * C13258 +
            ((C1051 - C1050) * C13261 + (C1053 - C1052) * C89093) * C13259 +
            ((C1058 - C1059) * C13261 + (C1060 - C1061) * C89093) * C13260) *
               C89153 * C5073 +
           ((C2792 * C13261 + C2793 * C89093) * C13258 +
            ((C1059 - C1058) * C13261 + (C1061 - C1060) * C89093) * C13259 +
            ((C263 * C5725 - C89247 * C5845) * C13261 +
             (C263 * C5729 - C89247 * C5848) * C89093) *
                C13260) *
               C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C13261 +
            (C89247 * C270 - C263 * C113) * C89093) *
               C13258 +
           ((C13956 - C13957) * C13261 + (C13958 - C13959) * C89093) * C13259 +
           C13981 * C13260) *
              C89153 * C5720 +
          (((C13957 - C13956) * C13261 + (C13959 - C13958) * C89093) * C13258 +
           ((C13961 - C13960) * C13261 + (C13963 - C13962) * C89093) * C13259 +
           C18435 * C13260) *
              C89153 * C5721 +
          (C13981 * C13258 +
           ((C13965 - C13964) * C13261 + (C13967 - C13966) * C89093) * C13259 +
           ((C18429 - C18430) * C13261 + (C18431 - C18432) * C89093) * C13260) *
              C89153 * C5722 +
          (C18435 * C13258 +
           ((C18430 - C18429) * C13261 + (C18432 - C18431) * C89093) * C13259 +
           ((C263 * C18310 - C89247 * C18424) * C13261 +
            (C263 * C18312 - C89247 * C18425) * C89093) *
               C13260) *
              C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C13261 +
             (C89247 * C270 - C263 * C113) * C89093) *
                C13258 +
            ((C13956 - C13957) * C13261 + (C13958 - C13959) * C89093) * C13259 +
            C13981 * C13260) *
               C1719 +
           (((C263 * C1724 - C89247 * C1934) * C13261 +
             (C263 * C1735 - C89247 * C1942) * C89093) *
                C13258 +
            ((C16928 - C16929) * C13261 + (C16930 - C16931) * C89093) * C13259 +
            ((C16932 - C16933) * C13261 + (C16934 - C16935) * C89093) *
                C13260) *
               C1720 +
           (((C89247 * C1937 - C263 * C1725) * C13261 +
             (C89247 * C1945 - C263 * C1737) * C89093) *
                C13258 +
            ((C19012 - C19013) * C13261 + (C19014 - C19015) * C89093) * C13259 +
            ((C19016 - C19017) * C13261 + (C19018 - C19019) * C89093) *
                C13260) *
               C1721) *
              C5073 +
          ((((C13957 - C13956) * C13261 + (C13959 - C13958) * C89093) * C13258 +
            ((C13961 - C13960) * C13261 + (C13963 - C13962) * C89093) * C13259 +
            C18435 * C13260) *
               C1719 +
           (((C16929 - C16928) * C13261 + (C16931 - C16930) * C89093) * C13258 +
            ((C16933 - C16932) * C13261 + (C16935 - C16934) * C89093) * C13259 +
            ((C89247 * C16923 - C263 * C16683) * C13261 +
             (C89247 * C16925 - C263 * C16686) * C89093) *
                C13260) *
               C1720 +
           (((C19013 - C19012) * C13261 + (C19015 - C19014) * C89093) * C13258 +
            ((C19017 - C19016) * C13261 + (C19019 - C19018) * C89093) * C13259 +
            ((C263 * C18839 - C89247 * C19009) * C13261 +
             (C263 * C18841 - C89247 * C19010) * C89093) *
                C13260) *
               C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C25848 * C264 - C25951 * C106 + C25849 * C1934 - C25952 * C1724 +
             C25850 * C1937 - C25953 * C1725) *
                C13261 +
            (C25848 * C270 - C25951 * C113 + C25849 * C1942 - C25952 * C1735 +
             C25850 * C1945 - C25953 * C1737) *
                C89093) *
               C89236 * C89153 * C5073 +
           ((C25951 * C819 - C25848 * C1029 + C25952 * C4097 - C25849 * C4325 +
             C25953 * C6249 - C25850 * C6413) *
                C13261 +
            (C25951 * C830 - C25848 * C1037 + C25952 * C4102 - C25849 * C4329 +
             C25953 * C6255 - C25850 * C6416) *
                C89093) *
               C89236 * C89153 * C89189) *
              C5075 +
          (((C25951 * C107 - C25848 * C265 + C25952 * C1723 - C25849 * C1935 +
             C25953 * C1726 - C25850 * C1938) *
                C13261 +
            (C25951 * C115 - C25848 * C271 + C25952 * C1733 - C25849 * C1943 +
             C25953 * C1739 - C25850 * C1946) *
                C89093) *
               C89236 * C89153 * C5073 +
           ((C25848 * C1030 - C25951 * C818 + C25849 * C4326 - C25952 * C4098 +
             C25850 * C6414 - C25953 * C6248) *
                C13261 +
            (C25848 * C1038 - C25951 * C828 + C25849 * C4330 - C25952 * C4104 +
             C25850 * C6417 - C25953 * C6253) *
                C89093) *
               C89236 * C89153 * C89189) *
              C5076 +
          (((C25848 * C266 - C25951 * C108 + C25849 * C1936 - C25952 * C1722 +
             C25850 * C1939 - C25953 * C1727) *
                C13261 +
            (C25848 * C272 - C25951 * C117 + C25849 * C1944 - C25952 * C1731 +
             C25850 * C1947 - C25953 * C1741) *
                C89093) *
               C89236 * C89153 * C5073 +
           ((C25951 * C817 - C25848 * C1031 + C25952 * C4099 - C25849 * C4327 +
             C25953 * C6247 - C25850 * C6415) *
                C13261 +
            (C25951 * C826 - C25848 * C1039 + C25952 * C4106 - C25849 * C4331 +
             C25953 * C6251 - C25850 * C6418) *
                C89093) *
               C89236 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C25848 * C264 - C25951 * C106 + C25849 * C1934 - C25952 * C1724 +
            C25850 * C1937 - C25953 * C1725) *
               C13261 +
           (C25848 * C270 - C25951 * C113 + C25849 * C1942 - C25952 * C1735 +
            C25850 * C1945 - C25953 * C1737) *
               C89093) *
              C89236 * C89153 * C5720 +
          ((C25951 * C819 - C25848 * C1029 + C25952 * C4097 - C25849 * C4325 +
            C25953 * C6249 - C25850 * C6413) *
               C13261 +
           (C25951 * C830 - C25848 * C1037 + C25952 * C4102 - C25849 * C4329 +
            C25953 * C6255 - C25850 * C6416) *
               C89093) *
              C89236 * C89153 * C5721 +
          ((C25848 * C1032 - C25951 * C820 + C25849 * C8680 - C25952 * C8516 +
            C25850 * C14761 - C25953 * C14601) *
               C13261 +
           (C25848 * C1040 - C25951 * C832 + C25849 * C8683 - C25952 * C8522 +
            C25850 * C14763 - C25953 * C14604) *
               C89093) *
              C89236 * C89153 * C5722 +
          ((C25951 * C5727 - C25848 * C5843 + C25952 * C16683 -
            C25849 * C16923 + C25953 * C18839 - C25850 * C19009) *
               C13261 +
           (C25951 * C5733 - C25848 * C5846 + C25952 * C16686 -
            C25849 * C16925 + C25953 * C18841 - C25850 * C19010) *
               C89093) *
              C89236 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C25848 * C264 - C25951 * C106 + C25849 * C1934 - C25952 * C1724 +
             C25850 * C1937 - C25953 * C1725) *
                C13261 +
            (C25848 * C270 - C25951 * C113 + C25849 * C1942 - C25952 * C1735 +
             C25850 * C1945 - C25953 * C1737) *
                C89093) *
               C89236 * C1719 +
           ((C25951 * C1724 - C25848 * C1934 + C25952 * C1725 - C25849 * C1937 +
             C25953 * C10544 - C25850 * C10660) *
                C13261 +
            (C25951 * C1735 - C25848 * C1942 + C25952 * C1737 - C25849 * C1945 +
             C25953 * C10550 - C25850 * C10663) *
                C89093) *
               C89236 * C1720 +
           ((C25848 * C1937 - C25951 * C1725 + C25849 * C10660 -
             C25952 * C10544 + C25850 * C27225 - C25953 * C26997) *
                C13261 +
            (C25848 * C1945 - C25951 * C1737 + C25849 * C10663 -
             C25952 * C10550 + C25850 * C27227 - C25953 * C27000) *
                C89093) *
               C89236 * C1721) *
              C5073 +
          (((C25951 * C819 - C25848 * C1029 + C25952 * C4097 - C25849 * C4325 +
             C25953 * C6249 - C25850 * C6413) *
                C13261 +
            (C25951 * C830 - C25848 * C1037 + C25952 * C4102 - C25849 * C4329 +
             C25953 * C6255 - C25850 * C6416) *
                C89093) *
               C89236 * C1719 +
           ((C25848 * C4325 - C25951 * C4097 + C25849 * C6413 - C25952 * C6249 +
             C25850 * C23264 - C25953 * C23153) *
                C13261 +
            (C25848 * C4329 - C25951 * C4102 + C25849 * C6416 - C25952 * C6255 +
             C25850 * C23266 - C25953 * C23157) *
                C89093) *
               C89236 * C1720 +
           ((C25951 * C6249 - C25848 * C6413 + C25952 * C23153 -
             C25849 * C23264 + C25953 * C31285 - C25850 * C31455) *
                C13261 +
            (C25951 * C6255 - C25848 * C6416 + C25952 * C23157 -
             C25849 * C23266 + C25953 * C31287 - C25850 * C31456) *
                C89093) *
               C89236 * C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eeyx[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 +
                 C91 * C116 - C104 * C108) *
                    C180 +
                (C89 * C352 - C100 * C346 + C90 * C353 - C102 * C347 +
                 C91 * C354 - C104 * C348) *
                    C89236) *
                   C89247 * C89153 * C5073 +
               ((C100 * C819 - C89 * C829 + C102 * C818 - C90 * C827 +
                 C104 * C817 - C91 * C825) *
                    C180 +
                (C100 * C1135 - C89 * C1143 + C102 * C1136 - C90 * C1144 +
                 C104 * C1137 - C91 * C1145) *
                    C89236) *
                   C89247 * C89153 * C89189) *
                  C5075 +
              (((C100 * C107 - C89 * C114 + C102 * C108 - C90 * C116 +
                 C104 * C109 - C91 * C118) *
                    C180 +
                (C100 * C347 - C89 * C353 + C102 * C348 - C90 * C354 +
                 C104 * C349 - C91 * C355) *
                    C89236) *
                   C89247 * C89153 * C5073 +
               ((C89 * C827 - C100 * C818 + C90 * C825 - C102 * C817 +
                 C91 * C837 - C104 * C823) *
                    C180 +
                (C89 * C1144 - C100 * C1136 + C90 * C1145 - C102 * C1137 +
                 C91 * C1149 - C104 * C1141) *
                    C89236) *
                   C89247 * C89153 * C89189) *
                  C5076 +
              (((C89 * C116 - C100 * C108 + C90 * C118 - C102 * C109 +
                 C91 * C120 - C104 * C110) *
                    C180 +
                (C89 * C354 - C100 * C348 + C90 * C355 - C102 * C349 +
                 C91 * C356 - C104 * C350) *
                    C89236) *
                   C89247 * C89153 * C5073 +
               ((C100 * C817 - C89 * C825 + C102 * C823 - C90 * C837 +
                 C104 * C2629 - C91 * C2630) *
                    C180 +
                (C100 * C1137 - C89 * C1145 + C102 * C1141 - C90 * C1149 +
                 C104 * C2871 - C91 * C2872) *
                    C89236) *
                   C89247 * C89153 * C89189) *
                  C5077) +
         0.5 * std::pow(Pi, 2.5) *
             (((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 +
                C91 * C116 - C104 * C108) *
                   C180 +
               (C89 * C352 - C100 * C346 + C90 * C353 - C102 * C347 +
                C91 * C354 - C104 * C348) *
                   C89236) *
                  C89247 * C89153 * C5720 +
              ((C100 * C819 - C89 * C829 + C102 * C818 - C90 * C827 +
                C104 * C817 - C91 * C825) *
                   C180 +
               (C100 * C1135 - C89 * C1143 + C102 * C1136 - C90 * C1144 +
                C104 * C1137 - C91 * C1145) *
                   C89236) *
                  C89247 * C89153 * C5721 +
              ((C89 * C831 - C100 * C820 + C90 * C833 - C102 * C821 +
                C91 * C835 - C104 * C822) *
                   C180 +
               (C89 * C1146 - C100 * C1138 + C90 * C1147 - C102 * C1139 +
                C91 * C1148 - C104 * C1140) *
                   C89236) *
                  C89247 * C89153 * C5722 +
              ((C100 * C5727 - C89 * C5732 + C102 * C5726 - C90 * C5730 +
                C104 * C5725 - C91 * C5728) *
                   C180 +
               (C100 * C5899 - C89 * C5902 + C102 * C5900 - C90 * C5903 +
                C104 * C5901 - C91 * C5904) *
                   C89236) *
                  C89247 * C89153 * C5723) *
             C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 + C91 * C116 -
             C104 * C108) *
                C180 +
            (C89 * C352 - C100 * C346 + C90 * C353 - C102 * C347 + C91 * C354 -
             C104 * C348) *
                C89236) *
               C89247 * C1719 +
           ((C100 * C1724 - C89 * C1734 + C102 * C1723 - C90 * C1732 +
             C104 * C1722 - C91 * C1730) *
                C180 +
            (C100 * C2040 - C89 * C2048 + C102 * C2041 - C90 * C2049 +
             C104 * C2042 - C91 * C2050) *
                C89236) *
               C89247 * C1720 +
           ((C89 * C1736 - C100 * C1725 + C90 * C1738 - C102 * C1726 +
             C91 * C1740 - C104 * C1727) *
                C180 +
            (C89 * C2051 - C100 * C2043 + C90 * C2052 - C102 * C2044 +
             C91 * C2053 - C104 * C2045) *
                C89236) *
               C89247 * C1721) *
              C5073 +
          (((C100 * C819 - C89 * C829 + C102 * C818 - C90 * C827 + C104 * C817 -
             C91 * C825) *
                C180 +
            (C100 * C1135 - C89 * C1143 + C102 * C1136 - C90 * C1144 +
             C104 * C1137 - C91 * C1145) *
                C89236) *
               C89247 * C1719 +
           ((C89 * C4101 - C100 * C4097 + C90 * C4103 - C102 * C4098 +
             C91 * C4105 - C104 * C4099) *
                C180 +
            (C89 * C4443 - C100 * C4439 + C90 * C4444 - C102 * C4440 +
             C91 * C4445 - C104 * C4441) *
                C89236) *
               C89247 * C1720 +
           ((C100 * C6249 - C89 * C6254 + C102 * C6248 - C90 * C6252 +
             C104 * C6247 - C91 * C6250) *
                C180 +
            (C100 * C6493 - C89 * C6496 + C102 * C6494 - C90 * C6497 +
             C104 * C6495 - C91 * C6498) *
                C89236) *
               C89247 * C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C89093 * C112 - C13261 * C106) * C13313 +
            (C89093 * C352 - C13261 * C346) * C13258 +
            (C14060 - C14061) * C13314 + (C14062 - C14063) * C13259 +
            C14084 * C13315 + C14085 * C13260) *
               C89247 * C89153 * C5073 +
           ((C14061 - C14060) * C13313 + (C14063 - C14062) * C13258 +
            (C14065 - C14064) * C13314 + (C14067 - C14066) * C13259 +
            (C14068 - C14069) * C13315 + (C14070 - C14071) * C13260) *
               C89247 * C89153 * C89189) *
              C5075 +
          (((C13261 * C107 - C89093 * C114) * C13313 +
            (C13261 * C347 - C89093 * C353) * C13258 +
            (C14072 - C14073) * C13314 + (C14074 - C14075) * C13259 +
            C14086 * C13315 + C14087 * C13260) *
               C89247 * C89153 * C5073 +
           ((C14073 - C14072) * C13313 + (C14075 - C14074) * C13258 +
            (C14077 - C14076) * C13314 + (C14079 - C14078) * C13259 +
            (C14080 - C14081) * C13315 + (C14082 - C14083) * C13260) *
               C89247 * C89153 * C89189) *
              C5076 +
          (((C89093 * C116 - C13261 * C108) * C13313 +
            (C89093 * C354 - C13261 * C348) * C13258 +
            (C15538 - C15539) * C13314 + (C15540 - C15541) * C13259 +
            (C15542 - C15543) * C13315 + (C15544 - C15545) * C13260) *
               C89247 * C89153 * C5073 +
           ((C15539 - C15538) * C13313 + (C15541 - C15540) * C13258 +
            (C15543 - C15542) * C13314 + (C15545 - C15544) * C13259 +
            (C13261 * C5725 - C89093 * C5728) * C13315 +
            (C13261 * C5901 - C89093 * C5904) * C13260) *
               C89247 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C89093 * C112 - C13261 * C106) * C13313 +
           (C89093 * C352 - C13261 * C346) * C13258 +
           (C14060 - C14061) * C13314 + (C14062 - C14063) * C13259 +
           C14084 * C13315 + C14085 * C13260) *
              C89247 * C89153 * C5720 +
          ((C14061 - C14060) * C13313 + (C14063 - C14062) * C13258 +
           (C14065 - C14064) * C13314 + (C14067 - C14066) * C13259 +
           C18488 * C13315 + C18489 * C13260) *
              C89247 * C89153 * C5721 +
          (C14084 * C13313 + C14085 * C13258 + (C14069 - C14068) * C13314 +
           (C14071 - C14070) * C13259 + (C18490 - C18491) * C13315 +
           (C18492 - C18493) * C13260) *
              C89247 * C89153 * C5722 +
          (C18488 * C13313 + C18489 * C13258 + (C18491 - C18490) * C13314 +
           (C18493 - C18492) * C13259 +
           (C13261 * C18310 - C89093 * C18311) * C13315 +
           (C13261 * C18485 - C89093 * C18486) * C13260) *
              C89247 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C89093 * C112 - C13261 * C106) * C13313 +
            (C89093 * C352 - C13261 * C346) * C13258 +
            (C14060 - C14061) * C13314 + (C14062 - C14063) * C13259 +
            C14084 * C13315 + C14085 * C13260) *
               C89247 * C1719 +
           ((C13261 * C1724 - C89093 * C1734) * C13313 +
            (C13261 * C2040 - C89093 * C2048) * C13258 +
            (C17042 - C17043) * C13314 + (C17044 - C17045) * C13259 +
            (C17046 - C17047) * C13315 + (C17048 - C17049) * C13260) *
               C89247 * C1720 +
           ((C89093 * C1736 - C13261 * C1725) * C13313 +
            (C89093 * C2051 - C13261 * C2043) * C13258 +
            (C19096 - C19097) * C13314 + (C19098 - C19099) * C13259 +
            (C19100 - C19101) * C13315 + (C19102 - C19103) * C13260) *
               C89247 * C1721) *
              C5073 +
          (((C14061 - C14060) * C13313 + (C14063 - C14062) * C13258 +
            (C14065 - C14064) * C13314 + (C14067 - C14066) * C13259 +
            C18488 * C13315 + C18489 * C13260) *
               C89247 * C1719 +
           ((C17043 - C17042) * C13313 + (C17045 - C17044) * C13258 +
            (C17047 - C17046) * C13314 + (C17049 - C17048) * C13259 +
            (C89093 * C16685 - C13261 * C16683) * C13315 +
            (C89093 * C17039 - C13261 * C17037) * C13260) *
               C89247 * C1720 +
           ((C19097 - C19096) * C13313 + (C19099 - C19098) * C13258 +
            (C19101 - C19100) * C13314 + (C19103 - C19102) * C13259 +
            (C13261 * C18839 - C89093 * C18840) * C13315 +
            (C13261 * C19093 - C89093 * C19094) * C13260) *
               C89247 * C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C180 +
             (C89093 * C352 - C13261 * C346) * C89236) *
                C25848 +
            ((C27308 - C27309) * C180 + (C27310 - C27311) * C89236) * C25849 +
            C27340 * C25850) *
               C89153 * C5073 +
           (((C14061 - C14060) * C180 + (C14063 - C14062) * C89236) * C25848 +
            ((C17042 - C17043) * C180 + (C17044 - C17045) * C89236) * C25849 +
            ((C19097 - C19096) * C180 + (C19099 - C19098) * C89236) * C25850) *
               C89153 * C89189) *
              C5075 +
          ((((C13261 * C107 - C89093 * C114) * C180 +
             (C13261 * C347 - C89093 * C353) * C89236) *
                C25848 +
            ((C27320 - C27321) * C180 + (C27322 - C27323) * C89236) * C25849 +
            C27341 * C25850) *
               C89153 * C5073 +
           (((C14073 - C14072) * C180 + (C14075 - C14074) * C89236) * C25848 +
            ((C17050 - C17051) * C180 + (C17052 - C17053) * C89236) * C25849 +
            ((C29563 - C29564) * C180 + (C29565 - C29566) * C89236) * C25850) *
               C89153 * C89189) *
              C5076 +
          ((((C89093 * C116 - C13261 * C108) * C180 +
             (C89093 * C354 - C13261 * C348) * C89236) *
                C25848 +
            ((C28758 - C28759) * C180 + (C28760 - C28761) * C89236) * C25849 +
            ((C28762 - C28763) * C180 + (C28764 - C28765) * C89236) * C25850) *
               C89153 * C5073 +
           (((C15539 - C15538) * C180 + (C15541 - C15540) * C89236) * C25848 +
            ((C13261 * C4099 - C89093 * C4105) * C180 +
             (C13261 * C4441 - C89093 * C4445) * C89236) *
                C25849 +
            ((C13261 * C6247 - C89093 * C6250) * C180 +
             (C13261 * C6495 - C89093 * C6498) * C89236) *
                C25850) *
               C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C89093 * C112 - C13261 * C106) * C180 +
            (C89093 * C352 - C13261 * C346) * C89236) *
               C25848 +
           ((C27308 - C27309) * C180 + (C27310 - C27311) * C89236) * C25849 +
           C27340 * C25850) *
              C89153 * C5720 +
          (((C14061 - C14060) * C180 + (C14063 - C14062) * C89236) * C25848 +
           ((C17042 - C17043) * C180 + (C17044 - C17045) * C89236) * C25849 +
           ((C19097 - C19096) * C180 + (C19099 - C19098) * C89236) * C25850) *
              C89153 * C5721 +
          ((C14084 * C180 + C14085 * C89236) * C25848 +
           ((C17047 - C17046) * C180 + (C17049 - C17048) * C89236) * C25849 +
           ((C19100 - C19101) * C180 + (C19102 - C19103) * C89236) * C25850) *
              C89153 * C5722 +
          ((C18488 * C180 + C18489 * C89236) * C25848 +
           ((C21376 - C21375) * C180 + (C21378 - C21377) * C89236) * C25849 +
           ((C13261 * C18839 - C89093 * C18840) * C180 +
            (C13261 * C19093 - C89093 * C19094) * C89236) *
               C25850) *
              C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C180 +
             (C89093 * C352 - C13261 * C346) * C89236) *
                C25848 +
            ((C27308 - C27309) * C180 + (C27310 - C27311) * C89236) * C25849 +
            C27340 * C25850) *
               C1719 +
           (((C27309 - C27308) * C180 + (C27311 - C27310) * C89236) * C25848 +
            ((C27313 - C27312) * C180 + (C27315 - C27314) * C89236) * C25849 +
            ((C27316 - C27317) * C180 + (C27318 - C27319) * C89236) * C25850) *
               C1720 +
           (C27340 * C25848 +
            ((C27317 - C27316) * C180 + (C27319 - C27318) * C89236) * C25849 +
            ((C89093 * C26999 - C13261 * C26997) * C180 +
             (C89093 * C27305 - C13261 * C27303) * C89236) *
                C25850) *
               C1721) *
              C5073 +
          ((((C14061 - C14060) * C180 + (C14063 - C14062) * C89236) * C25848 +
            ((C17042 - C17043) * C180 + (C17044 - C17045) * C89236) * C25849 +
            C31542 * C25850) *
               C1719 +
           (((C17043 - C17042) * C180 + (C17045 - C17044) * C89236) * C25848 +
            ((C19096 - C19097) * C180 + (C19098 - C19099) * C89236) * C25849 +
            ((C31536 - C31537) * C180 + (C31538 - C31539) * C89236) * C25850) *
               C1720 +
           (C31542 * C25848 +
            ((C31537 - C31536) * C180 + (C31539 - C31538) * C89236) * C25849 +
            ((C13261 * C31285 - C89093 * C31286) * C180 +
             (C13261 * C31531 - C89093 * C31532) * C89236) *
                C25850) *
               C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eeyy[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) *
                    C89 +
                C440 * C90 + C441 * C91) *
                   C89247 * C89153 * C5073 -
               (C1258 * C91 + C1259 * C90 +
                (C180 * C923 - C408 * C819 - C180 * C1135 + C89236 * C1227) *
                    C89) *
                   C89247 * C89153 * C89189) *
                  C5075 +
              ((C1259 * C89 + C1258 * C90 + C2955 * C91) * C89247 * C89153 *
                   C89189 -
               (C442 * C91 + C441 * C90 + C440 * C89) * C89247 * C89153 *
                   C5073) *
                  C5076 +
              ((C441 * C89 + C442 * C90 + C443 * C91) * C89247 * C89153 *
                   C5073 -
               ((C180 * C2707 - C408 * C2629 - C180 * C2871 + C89236 * C2947) *
                    C91 +
                C2955 * C90 + C1258 * C89) *
                   C89247 * C89153 * C89189) *
                  C5077) +
         0.5 * std::pow(Pi, 2.5) *
             (((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C89 +
               C440 * C90 + C441 * C91) *
                  C89247 * C89153 * C5720 -
              (C1258 * C91 + C1259 * C90 +
               (C180 * C923 - C408 * C819 - C180 * C1135 + C89236 * C1227) *
                   C89) *
                  C89247 * C89153 * C5721 +
              ((C180 * C926 - C408 * C820 - C180 * C1138 + C89236 * C1228) *
                   C89 +
               C1260 * C90 + C1261 * C91) *
                  C89247 * C89153 * C5722 -
              ((C180 * C5789 - C408 * C5725 - C180 * C5901 + C89236 * C5955) *
                   C91 +
               (C180 * C5788 - C408 * C5726 - C180 * C5900 + C89236 * C5956) *
                   C90 +
               (C180 * C5787 - C408 * C5727 - C180 * C5899 + C89236 * C5957) *
                   C89) *
                  C89247 * C89153 * C5723) *
             C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C89 +
            C440 * C90 + C441 * C91) *
               C89247 * C1719 -
           (C2163 * C91 + C2164 * C90 +
            (C180 * C1828 - C408 * C1724 - C180 * C2040 + C89236 * C2132) *
                C89) *
               C89247 * C1720 +
           ((C180 * C1831 - C408 * C1725 - C180 * C2043 + C89236 * C2133) *
                C89 +
            C2165 * C90 + C2166 * C91) *
               C89247 * C1721) *
              C5073 +
          (((C180 * C4211 - C408 * C4097 - C180 * C4439 + C89236 * C4545) *
                C89 +
            C4562 * C90 + C4563 * C91) *
               C89247 * C1720 -
           (C1258 * C91 + C1259 * C90 +
            (C180 * C923 - C408 * C819 - C180 * C1135 + C89236 * C1227) * C89) *
               C89247 * C1719 -
           ((C180 * C6335 - C408 * C6247 - C180 * C6495 + C89236 * C6573) *
                C91 +
            (C180 * C6334 - C408 * C6248 - C180 * C6494 + C89236 * C6574) *
                C90 +
            (C180 * C6333 - C408 * C6249 - C180 * C6493 + C89236 * C6575) *
                C89) *
               C89247 * C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C13313 * C181 - C13466 * C106 - C13313 * C346 + C13258 * C409 +
            C13314 * C923 - C13467 * C819 - C13314 * C1135 + C13259 * C1227 +
            C13315 * C926 - C13468 * C820 - C13315 * C1138 + C13260 * C1228) *
               C89093 * C89247 * C89153 * C5073 -
           (C13315 * C5787 - C13468 * C5727 - C13315 * C5899 + C13260 * C5957 +
            C13314 * C926 - C13467 * C820 - C13314 * C1138 + C13259 * C1228 +
            C13313 * C923 - C13466 * C819 - C13313 * C1135 + C13258 * C1227) *
               C89093 * C89247 * C89153 * C89189) *
              C5075 +
          ((C13313 * C924 - C13466 * C818 - C13313 * C1136 + C13258 * C1226 +
            C13314 * C927 - C13467 * C821 - C13314 * C1139 + C13259 * C1229 +
            C13315 * C5788 - C13468 * C5726 - C13315 * C5900 + C13260 * C5956) *
               C89093 * C89247 * C89153 * C89189 -
           (C13315 * C927 - C13468 * C821 - C13315 * C1139 + C13260 * C1229 +
            C13314 * C924 - C13467 * C818 - C13314 * C1136 + C13259 * C1226 +
            C13313 * C182 - C13466 * C107 - C13313 * C347 + C13258 * C410) *
               C89093 * C89247 * C89153 * C5073) *
              C5076 +
          ((C13313 * C183 - C13466 * C108 - C13313 * C348 + C13258 * C411 +
            C13314 * C925 - C13467 * C817 - C13314 * C1137 + C13259 * C1225 +
            C13315 * C928 - C13468 * C822 - C13315 * C1140 + C13260 * C1230) *
               C89093 * C89247 * C89153 * C5073 -
           (C13315 * C5789 - C13468 * C5725 - C13315 * C5901 + C13260 * C5955 +
            C13314 * C928 - C13467 * C822 - C13314 * C1140 + C13259 * C1230 +
            C13313 * C925 - C13466 * C817 - C13313 * C1137 + C13258 * C1225) *
               C89093 * C89247 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((C13313 * C181 - C13466 * C106 - C13313 * C346 + C13258 * C409 +
           C13314 * C923 - C13467 * C819 - C13314 * C1135 + C13259 * C1227 +
           C13315 * C926 - C13468 * C820 - C13315 * C1138 + C13260 * C1228) *
              C89093 * C89247 * C89153 * C5720 -
          (C13315 * C5787 - C13468 * C5727 - C13315 * C5899 + C13260 * C5957 +
           C13314 * C926 - C13467 * C820 - C13314 * C1138 + C13259 * C1228 +
           C13313 * C923 - C13466 * C819 - C13313 * C1135 + C13258 * C1227) *
              C89093 * C89247 * C89153 * C5721 +
          (C13313 * C926 - C13466 * C820 - C13313 * C1138 + C13258 * C1228 +
           C13314 * C5787 - C13467 * C5727 - C13314 * C5899 + C13259 * C5957 +
           C13315 * C13873 - C13468 * C13743 - C13315 * C14055 +
           C13260 * C14161) *
              C89093 * C89247 * C89153 * C5722 -
          (C13315 * C18372 - C13468 * C18310 - C13315 * C18485 +
           C13260 * C18543 + C13314 * C13873 - C13467 * C13743 -
           C13314 * C14055 + C13259 * C14161 + C13313 * C5787 - C13466 * C5727 -
           C13313 * C5899 + C13258 * C5957) *
              C89093 * C89247 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C13313 * C181 - C13466 * C106 - C13313 * C346 + C13258 * C409 +
            C13314 * C923 - C13467 * C819 - C13314 * C1135 + C13259 * C1227 +
            C13315 * C926 - C13468 * C820 - C13315 * C1138 + C13260 * C1228) *
               C89093 * C89247 * C1719 -
           (C13315 * C8600 - C13468 * C8516 - C13315 * C8760 + C13260 * C8842 +
            C13314 * C4211 - C13467 * C4097 - C13314 * C4439 + C13259 * C4545 +
            C13313 * C1828 - C13466 * C1724 - C13313 * C2040 + C13258 * C2132) *
               C89093 * C89247 * C1720 +
           (C13313 * C1831 - C13466 * C1725 - C13313 * C2043 + C13258 * C2133 +
            C13314 * C6333 - C13467 * C6249 - C13314 * C6493 + C13259 * C6575 +
            C13315 * C14683 - C13468 * C14601 - C13315 * C14839 +
            C13260 * C14917) *
               C89093 * C89247 * C1721) *
              C5073 +
          ((C13313 * C4211 - C13466 * C4097 - C13313 * C4439 + C13258 * C4545 +
            C13314 * C8600 - C13467 * C8516 - C13314 * C8760 + C13259 * C8842 +
            C13315 * C16821 - C13468 * C16683 - C13315 * C17037 +
            C13260 * C17155) *
               C89093 * C89247 * C1720 -
           (C13315 * C5787 - C13468 * C5727 - C13315 * C5899 + C13260 * C5957 +
            C13314 * C926 - C13467 * C820 - C13314 * C1138 + C13259 * C1228 +
            C13313 * C923 - C13466 * C819 - C13313 * C1135 + C13258 * C1227) *
               C89093 * C89247 * C1719 -
           (C13315 * C18933 - C13468 * C18839 - C13315 * C19093 +
            C13260 * C19177 + C13314 * C14683 - C13467 * C14601 -
            C13314 * C14839 + C13259 * C14917 + C13313 * C6333 -
            C13466 * C6249 - C13313 * C6493 + C13258 * C6575) *
               C89093 * C89247 * C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C89093 *
                C25848 +
            C27448 * C25849 + C27449 * C25850) *
               C89153 * C5073 -
           (C29689 * C25850 + C29688 * C25849 +
            (C180 * C923 - C408 * C819 - C180 * C1135 + C89236 * C1227) *
                C89093 * C25848) *
               C89153 * C89189) *
              C5075 +
          ((C1259 * C89093 * C25848 + C29674 * C25849 + C29690 * C25850) *
               C89153 * C89189 -
           (C27431 * C25850 + C27430 * C25849 + C440 * C89093 * C25848) *
               C89153 * C5073) *
              C5076 +
          ((C441 * C89093 * C25848 + C28840 * C25849 + C28841 * C25850) *
               C89153 * C5073 -
           ((C180 * C6335 - C408 * C6247 - C180 * C6495 + C89236 * C6573) *
                C89093 * C25850 +
            C4563 * C89093 * C25849 + C1258 * C89093 * C25848) *
               C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C89093 *
               C25848 +
           C27448 * C25849 + C27449 * C25850) *
              C89153 * C5720 -
          (C29689 * C25850 + C29688 * C25849 +
           (C180 * C923 - C408 * C819 - C180 * C1135 + C89236 * C1227) *
               C89093 * C25848) *
              C89153 * C5721 +
          ((C180 * C926 - C408 * C820 - C180 * C1138 + C89236 * C1228) *
               C89093 * C25848 +
           (C180 * C8600 - C408 * C8516 - C180 * C8760 + C89236 * C8842) *
               C89093 * C25849 +
           (C180 * C14683 - C408 * C14601 - C180 * C14839 + C89236 * C14917) *
               C89093 * C25850) *
              C89153 * C5722 -
          ((C180 * C18933 - C408 * C18839 - C180 * C19093 + C89236 * C19177) *
               C89093 * C25850 +
           (C180 * C16821 - C408 * C16683 - C180 * C17037 + C89236 * C17155) *
               C89093 * C25849 +
           (C180 * C5787 - C408 * C5727 - C180 * C5899 + C89236 * C5957) *
               C89093 * C25848) *
              C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C89093 *
                C25848 +
            C27448 * C25849 + C27449 * C25850) *
               C1719 -
           (C27450 * C25850 + C27449 * C25849 + C27448 * C25848) * C1720 +
           (C27449 * C25848 + C27450 * C25849 +
            (C180 * C27121 - C408 * C26997 - C180 * C27303 + C89236 * C27415) *
                C89093 * C25850) *
               C1721) *
              C5073 +
          ((C29688 * C25848 + C29689 * C25849 + C31625 * C25850) * C1720 -
           (C29689 * C25850 + C29688 * C25849 +
            (C180 * C923 - C408 * C819 - C180 * C1135 + C89236 * C1227) *
                C89093 * C25848) *
               C1719 -
           ((C180 * C31370 - C408 * C31285 - C180 * C31531 + C89236 * C31616) *
                C89093 * C25850 +
            C31625 * C25849 + C29689 * C25848) *
               C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eeyz[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C89247 * C264 - C263 * C106) * C180 +
                 (C89247 * C493 - C263 * C346) * C89236) *
                    C89 +
                ((C277 - C278) * C180 + (C500 - C501) * C89236) * C90 +
                C514 * C91) *
                   C89153 * C5073 +
               (((C263 * C819 - C89247 * C1029) * C180 +
                 (C263 * C1135 - C89247 * C1335) * C89236) *
                    C89 +
                ((C1046 - C1047) * C180 + (C1344 - C1345) * C89236) * C90 +
                C3036 * C91) *
                   C89153 * C89189) *
                  C5075 +
              ((((C278 - C277) * C180 + (C501 - C500) * C89236) * C89 +
                ((C282 - C281) * C180 + (C504 - C503) * C89236) * C90 +
                C515 * C91) *
                   C89153 * C5073 +
               (((C1047 - C1046) * C180 + (C1345 - C1344) * C89236) * C89 +
                ((C1051 - C1050) * C180 + (C1347 - C1346) * C89236) * C90 +
                ((C2794 - C2795) * C180 + (C3033 - C3034) * C89236) * C91) *
                   C89153 * C89189) *
                  C5076 +
              ((C514 * C89 +
                ((C286 - C285) * C180 + (C507 - C506) * C89236) * C90 +
                ((C289 - C290) * C180 + (C508 - C509) * C89236) * C91) *
                   C89153 * C5073 +
               (C3036 * C89 +
                ((C2795 - C2794) * C180 + (C3034 - C3033) * C89236) * C90 +
                ((C263 * C2629 - C89247 * C2789) * C180 +
                 (C263 * C2871 - C89247 * C3029) * C89236) *
                    C91) *
                   C89153 * C89189) *
                  C5077) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C89247 * C264 - C263 * C106) * C180 +
                (C89247 * C493 - C263 * C346) * C89236) *
                   C89 +
               ((C277 - C278) * C180 + (C500 - C501) * C89236) * C90 +
               C514 * C91) *
                  C89153 * C5720 +
              (((C263 * C819 - C89247 * C1029) * C180 +
                (C263 * C1135 - C89247 * C1335) * C89236) *
                   C89 +
               ((C1046 - C1047) * C180 + (C1344 - C1345) * C89236) * C90 +
               C3036 * C91) *
                  C89153 * C5721 +
              (((C89247 * C1032 - C263 * C820) * C180 +
                (C89247 * C1338 - C263 * C1138) * C89236) *
                   C89 +
               ((C1054 - C1055) * C180 + (C1348 - C1349) * C89236) * C90 +
               ((C1058 - C1059) * C180 + (C1350 - C1351) * C89236) * C91) *
                  C89153 * C5722 +
              (((C263 * C5727 - C89247 * C5843) * C180 +
                (C263 * C5899 - C89247 * C6008) * C89236) *
                   C89 +
               ((C263 * C5726 - C89247 * C5844) * C180 +
                (C263 * C5900 - C89247 * C6009) * C89236) *
                   C90 +
               ((C263 * C5725 - C89247 * C5845) * C180 +
                (C263 * C5901 - C89247 * C6010) * C89236) *
                   C91) *
                  C89153 * C5723) *
             C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C180 +
             (C89247 * C493 - C263 * C346) * C89236) *
                C89 +
            ((C277 - C278) * C180 + (C500 - C501) * C89236) * C90 +
            C514 * C91) *
               C1719 +
           (((C263 * C1724 - C89247 * C1934) * C180 +
             (C263 * C2040 - C89247 * C2240) * C89236) *
                C89 +
            ((C1951 - C1952) * C180 + (C2249 - C2250) * C89236) * C90 +
            C3759 * C91) *
               C1720 +
           (((C89247 * C1937 - C263 * C1725) * C180 +
             (C89247 * C2243 - C263 * C2043) * C89236) *
                C89 +
            ((C1959 - C1960) * C180 + (C2253 - C2254) * C89236) * C90 +
            ((C1963 - C1964) * C180 + (C2255 - C2256) * C89236) * C91) *
               C1721) *
              C5073 +
          ((((C263 * C819 - C89247 * C1029) * C180 +
             (C263 * C1135 - C89247 * C1335) * C89236) *
                C89 +
            ((C1046 - C1047) * C180 + (C1344 - C1345) * C89236) * C90 +
            C3036 * C91) *
               C1719 +
           (((C89247 * C4325 - C263 * C4097) * C180 +
             (C89247 * C4661 - C263 * C4439) * C89236) *
                C89 +
            ((C4334 - C4335) * C180 + (C4666 - C4667) * C89236) * C90 +
            ((C4338 - C4339) * C180 + (C4668 - C4669) * C89236) * C91) *
               C1720 +
           (((C263 * C6249 - C89247 * C6413) * C180 +
             (C263 * C6493 - C89247 * C6650) * C89236) *
                C89 +
            ((C263 * C6248 - C89247 * C6414) * C180 +
             (C263 * C6494 - C89247 * C6651) * C89236) *
                C90 +
            ((C263 * C6247 - C89247 * C6415) * C180 +
             (C263 * C6495 - C89247 * C6652) * C89236) *
                C91) *
               C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C13313 +
            (C89247 * C493 - C263 * C346) * C13258 +
            (C13956 - C13957) * C13314 + (C14240 - C14241) * C13259 +
            C13974 * C13315 + C14249 * C13260) *
               C89093 * C89153 * C5073 +
           ((C13957 - C13956) * C13313 + (C14241 - C14240) * C13258 +
            (C13961 - C13960) * C13314 + (C14243 - C14242) * C13259 +
            (C13964 - C13965) * C13315 + (C14244 - C14245) * C13260) *
               C89093 * C89153 * C89189) *
              C5075 +
          (((C278 - C277) * C13313 + (C501 - C500) * C13258 +
            (C1046 - C1047) * C13314 + (C1344 - C1345) * C13259 +
            C13968 * C13315 + C14246 * C13260) *
               C89093 * C89153 * C5073 +
           ((C1047 - C1046) * C13313 + (C1345 - C1344) * C13258 +
            (C1054 - C1055) * C13314 + (C1348 - C1349) * C13259 +
            (C13970 - C13971) * C13315 + (C14247 - C14248) * C13260) *
               C89093 * C89153 * C89189) *
              C5076 +
          ((C293 * C13313 + C510 * C13258 + (C1051 - C1050) * C13314 +
            (C1347 - C1346) * C13259 + (C1058 - C1059) * C13315 +
            (C1350 - C1351) * C13260) *
               C89093 * C89153 * C5073 +
           (C2792 * C13313 + C3032 * C13258 + (C1059 - C1058) * C13314 +
            (C1351 - C1350) * C13259 +
            (C263 * C5725 - C89247 * C5845) * C13315 +
            (C263 * C5901 - C89247 * C6010) * C13260) *
               C89093 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C89247 * C264 - C263 * C106) * C13313 +
           (C89247 * C493 - C263 * C346) * C13258 + (C13956 - C13957) * C13314 +
           (C14240 - C14241) * C13259 + C13974 * C13315 + C14249 * C13260) *
              C89093 * C89153 * C5720 +
          ((C13957 - C13956) * C13313 + (C14241 - C14240) * C13258 +
           (C13961 - C13960) * C13314 + (C14243 - C14242) * C13259 +
           C18427 * C13315 + C18596 * C13260) *
              C89093 * C89153 * C5721 +
          (C13974 * C13313 + C14249 * C13258 + (C13965 - C13964) * C13314 +
           (C14245 - C14244) * C13259 + (C18429 - C18430) * C13315 +
           (C18597 - C18598) * C13260) *
              C89093 * C89153 * C5722 +
          (C18427 * C13313 + C18596 * C13258 + (C18430 - C18429) * C13314 +
           (C18598 - C18597) * C13259 +
           (C263 * C18310 - C89247 * C18424) * C13315 +
           (C263 * C18485 - C89247 * C18594) * C13260) *
              C89093 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C13313 +
            (C89247 * C493 - C263 * C346) * C13258 +
            (C13956 - C13957) * C13314 + (C14240 - C14241) * C13259 +
            C13974 * C13315 + C14249 * C13260) *
               C89093 * C1719 +
           ((C263 * C1724 - C89247 * C1934) * C13313 +
            (C263 * C2040 - C89247 * C2240) * C13258 +
            (C16928 - C16929) * C13314 + (C17258 - C17259) * C13259 +
            (C16932 - C16933) * C13315 + (C17260 - C17261) * C13260) *
               C89093 * C1720 +
           ((C89247 * C1937 - C263 * C1725) * C13313 +
            (C89247 * C2243 - C263 * C2043) * C13258 +
            (C19012 - C19013) * C13314 + (C19254 - C19255) * C13259 +
            (C19016 - C19017) * C13315 + (C19256 - C19257) * C13260) *
               C89093 * C1721) *
              C5073 +
          (((C13957 - C13956) * C13313 + (C14241 - C14240) * C13258 +
            (C13961 - C13960) * C13314 + (C14243 - C14242) * C13259 +
            C18427 * C13315 + C18596 * C13260) *
               C89093 * C1719 +
           ((C16929 - C16928) * C13313 + (C17259 - C17258) * C13258 +
            (C16933 - C16932) * C13314 + (C17261 - C17260) * C13259 +
            (C89247 * C16923 - C263 * C16683) * C13315 +
            (C89247 * C17255 - C263 * C17037) * C13260) *
               C89093 * C1720 +
           ((C19013 - C19012) * C13313 + (C19255 - C19254) * C13258 +
            (C19017 - C19016) * C13314 + (C19257 - C19256) * C13259 +
            (C263 * C18839 - C89247 * C19009) * C13315 +
            (C263 * C19093 - C89247 * C19252) * C13260) *
               C89093 * C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C25848 * C264 - C25951 * C106 + C25849 * C1934 - C25952 * C1724 +
             C25850 * C1937 - C25953 * C1725) *
                C180 +
            (C25848 * C493 - C25951 * C346 + C25849 * C2240 - C25952 * C2040 +
             C25850 * C2243 - C25953 * C2043) *
                C89236) *
               C89093 * C89153 * C5073 +
           ((C25951 * C819 - C25848 * C1029 + C25952 * C4097 - C25849 * C4325 +
             C25953 * C6249 - C25850 * C6413) *
                C180 +
            (C25951 * C1135 - C25848 * C1335 + C25952 * C4439 - C25849 * C4661 +
             C25953 * C6493 - C25850 * C6650) *
                C89236) *
               C89093 * C89153 * C89189) *
              C5075 +
          (((C25951 * C107 - C25848 * C265 + C25952 * C1723 - C25849 * C1935 +
             C25953 * C1726 - C25850 * C1938) *
                C180 +
            (C25951 * C347 - C25848 * C494 + C25952 * C2041 - C25849 * C2241 +
             C25953 * C2044 - C25850 * C2244) *
                C89236) *
               C89093 * C89153 * C5073 +
           ((C25848 * C1030 - C25951 * C818 + C25849 * C4326 - C25952 * C4098 +
             C25850 * C6414 - C25953 * C6248) *
                C180 +
            (C25848 * C1336 - C25951 * C1136 + C25849 * C4662 - C25952 * C4440 +
             C25850 * C6651 - C25953 * C6494) *
                C89236) *
               C89093 * C89153 * C89189) *
              C5076 +
          (((C25848 * C266 - C25951 * C108 + C25849 * C1936 - C25952 * C1722 +
             C25850 * C1939 - C25953 * C1727) *
                C180 +
            (C25848 * C495 - C25951 * C348 + C25849 * C2242 - C25952 * C2042 +
             C25850 * C2245 - C25953 * C2045) *
                C89236) *
               C89093 * C89153 * C5073 +
           ((C25951 * C817 - C25848 * C1031 + C25952 * C4099 - C25849 * C4327 +
             C25953 * C6247 - C25850 * C6415) *
                C180 +
            (C25951 * C1137 - C25848 * C1337 + C25952 * C4441 - C25849 * C4663 +
             C25953 * C6495 - C25850 * C6652) *
                C89236) *
               C89093 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C25848 * C264 - C25951 * C106 + C25849 * C1934 - C25952 * C1724 +
            C25850 * C1937 - C25953 * C1725) *
               C180 +
           (C25848 * C493 - C25951 * C346 + C25849 * C2240 - C25952 * C2040 +
            C25850 * C2243 - C25953 * C2043) *
               C89236) *
              C89093 * C89153 * C5720 +
          ((C25951 * C819 - C25848 * C1029 + C25952 * C4097 - C25849 * C4325 +
            C25953 * C6249 - C25850 * C6413) *
               C180 +
           (C25951 * C1135 - C25848 * C1335 + C25952 * C4439 - C25849 * C4661 +
            C25953 * C6493 - C25850 * C6650) *
               C89236) *
              C89093 * C89153 * C5721 +
          ((C25848 * C1032 - C25951 * C820 + C25849 * C8680 - C25952 * C8516 +
            C25850 * C14761 - C25953 * C14601) *
               C180 +
           (C25848 * C1338 - C25951 * C1138 + C25849 * C8917 - C25952 * C8760 +
            C25850 * C14993 - C25953 * C14839) *
               C89236) *
              C89093 * C89153 * C5722 +
          ((C25951 * C5727 - C25848 * C5843 + C25952 * C16683 -
            C25849 * C16923 + C25953 * C18839 - C25850 * C19009) *
               C180 +
           (C25951 * C5899 - C25848 * C6008 + C25952 * C17037 -
            C25849 * C17255 + C25953 * C19093 - C25850 * C19252) *
               C89236) *
              C89093 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C25848 * C264 - C25951 * C106 + C25849 * C1934 - C25952 * C1724 +
             C25850 * C1937 - C25953 * C1725) *
                C180 +
            (C25848 * C493 - C25951 * C346 + C25849 * C2240 - C25952 * C2040 +
             C25850 * C2243 - C25953 * C2043) *
                C89236) *
               C89093 * C1719 +
           ((C25951 * C1724 - C25848 * C1934 + C25952 * C1725 - C25849 * C1937 +
             C25953 * C10544 - C25850 * C10660) *
                C180 +
            (C25951 * C2040 - C25848 * C2240 + C25952 * C2043 - C25849 * C2243 +
             C25953 * C10716 - C25850 * C10825) *
                C89236) *
               C89093 * C1720 +
           ((C25848 * C1937 - C25951 * C1725 + C25849 * C10660 -
             C25952 * C10544 + C25850 * C27225 - C25953 * C26997) *
                C180 +
            (C25848 * C2243 - C25951 * C2043 + C25849 * C10825 -
             C25952 * C10716 + C25850 * C27525 - C25953 * C27303) *
                C89236) *
               C89093 * C1721) *
              C5073 +
          (((C25951 * C819 - C25848 * C1029 + C25952 * C4097 - C25849 * C4325 +
             C25953 * C6249 - C25850 * C6413) *
                C180 +
            (C25951 * C1135 - C25848 * C1335 + C25952 * C4439 - C25849 * C4661 +
             C25953 * C6493 - C25850 * C6650) *
                C89236) *
               C89093 * C1719 +
           ((C25848 * C4325 - C25951 * C4097 + C25849 * C6413 - C25952 * C6249 +
             C25850 * C23264 - C25953 * C23153) *
                C180 +
            (C25848 * C4661 - C25951 * C4439 + C25849 * C6650 - C25952 * C6493 +
             C25850 * C23424 - C25953 * C23318) *
                C89236) *
               C89093 * C1720 +
           ((C25951 * C6249 - C25848 * C6413 + C25952 * C23153 -
             C25849 * C23264 + C25953 * C31285 - C25850 * C31455) *
                C180 +
            (C25951 * C6493 - C25848 * C6650 + C25952 * C23318 -
             C25849 * C23424 + C25953 * C31531 - C25850 * C31699) *
                C89236) *
               C89093 * C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eezx[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 +
                 C91 * C116 - C104 * C108) *
                    C263 +
                (C89 * C571 - C100 * C565 + C90 * C572 - C102 * C566 +
                 C91 * C573 - C104 * C567) *
                    C89247) *
                   C89236 * C89153 * C5073 +
               ((C100 * C819 - C89 * C829 + C102 * C818 - C90 * C827 +
                 C104 * C817 - C91 * C825) *
                    C263 +
                (C100 * C1425 - C89 * C1433 + C102 * C1426 - C90 * C1434 +
                 C104 * C1427 - C91 * C1435) *
                    C89247) *
                   C89236 * C89153 * C89189) *
                  C5075 +
              (((C100 * C107 - C89 * C114 + C102 * C108 - C90 * C116 +
                 C104 * C109 - C91 * C118) *
                    C263 +
                (C100 * C566 - C89 * C572 + C102 * C567 - C90 * C573 +
                 C104 * C568 - C91 * C574) *
                    C89247) *
                   C89236 * C89153 * C5073 +
               ((C89 * C827 - C100 * C818 + C90 * C825 - C102 * C817 +
                 C91 * C837 - C104 * C823) *
                    C263 +
                (C89 * C1434 - C100 * C1426 + C90 * C1435 - C102 * C1427 +
                 C91 * C1439 - C104 * C1431) *
                    C89247) *
                   C89236 * C89153 * C89189) *
                  C5076 +
              (((C89 * C116 - C100 * C108 + C90 * C118 - C102 * C109 +
                 C91 * C120 - C104 * C110) *
                    C263 +
                (C89 * C573 - C100 * C567 + C90 * C574 - C102 * C568 +
                 C91 * C575 - C104 * C569) *
                    C89247) *
                   C89236 * C89153 * C5073 +
               ((C100 * C817 - C89 * C825 + C102 * C823 - C90 * C837 +
                 C104 * C2629 - C91 * C2630) *
                    C263 +
                (C100 * C1427 - C89 * C1435 + C102 * C1431 - C90 * C1439 +
                 C104 * C3110 - C91 * C3111) *
                    C89247) *
                   C89236 * C89153 * C89189) *
                  C5077) +
         0.5 * std::pow(Pi, 2.5) *
             (((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 +
                C91 * C116 - C104 * C108) *
                   C263 +
               (C89 * C571 - C100 * C565 + C90 * C572 - C102 * C566 +
                C91 * C573 - C104 * C567) *
                   C89247) *
                  C89236 * C89153 * C5720 +
              ((C100 * C819 - C89 * C829 + C102 * C818 - C90 * C827 +
                C104 * C817 - C91 * C825) *
                   C263 +
               (C100 * C1425 - C89 * C1433 + C102 * C1426 - C90 * C1434 +
                C104 * C1427 - C91 * C1435) *
                   C89247) *
                  C89236 * C89153 * C5721 +
              ((C89 * C831 - C100 * C820 + C90 * C833 - C102 * C821 +
                C91 * C835 - C104 * C822) *
                   C263 +
               (C89 * C1436 - C100 * C1428 + C90 * C1437 - C102 * C1429 +
                C91 * C1438 - C104 * C1430) *
                   C89247) *
                  C89236 * C89153 * C5722 +
              ((C100 * C5727 - C89 * C5732 + C102 * C5726 - C90 * C5730 +
                C104 * C5725 - C91 * C5728) *
                   C263 +
               (C100 * C6061 - C89 * C6064 + C102 * C6062 - C90 * C6065 +
                C104 * C6063 - C91 * C6066) *
                   C89247) *
                  C89236 * C89153 * C5723) *
             C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 + C91 * C116 -
             C104 * C108) *
                C263 +
            (C89 * C571 - C100 * C565 + C90 * C572 - C102 * C566 + C91 * C573 -
             C104 * C567) *
                C89247) *
               C89236 * C1719 +
           ((C100 * C1724 - C89 * C1734 + C102 * C1723 - C90 * C1732 +
             C104 * C1722 - C91 * C1730) *
                C263 +
            (C100 * C2330 - C89 * C2338 + C102 * C2331 - C90 * C2339 +
             C104 * C2332 - C91 * C2340) *
                C89247) *
               C89236 * C1720 +
           ((C89 * C1736 - C100 * C1725 + C90 * C1738 - C102 * C1726 +
             C91 * C1740 - C104 * C1727) *
                C263 +
            (C89 * C2341 - C100 * C2333 + C90 * C2342 - C102 * C2334 +
             C91 * C2343 - C104 * C2335) *
                C89247) *
               C89236 * C1721) *
              C5073 +
          (((C100 * C819 - C89 * C829 + C102 * C818 - C90 * C827 + C104 * C817 -
             C91 * C825) *
                C263 +
            (C100 * C1425 - C89 * C1433 + C102 * C1426 - C90 * C1434 +
             C104 * C1427 - C91 * C1435) *
                C89247) *
               C89236 * C1719 +
           ((C89 * C4101 - C100 * C4097 + C90 * C4103 - C102 * C4098 +
             C91 * C4105 - C104 * C4099) *
                C263 +
            (C89 * C4771 - C100 * C4767 + C90 * C4772 - C102 * C4768 +
             C91 * C4773 - C104 * C4769) *
                C89247) *
               C89236 * C1720 +
           ((C100 * C6249 - C89 * C6254 + C102 * C6248 - C90 * C6252 +
             C104 * C6247 - C91 * C6250) *
                C263 +
            (C100 * C6727 - C89 * C6730 + C102 * C6728 - C90 * C6731 +
             C104 * C6729 - C91 * C6732) *
                C89247) *
               C89236 * C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C263 +
             (C89093 * C571 - C13261 * C565) * C89247) *
                C13258 +
            ((C14060 - C14061) * C263 + (C14328 - C14329) * C89247) * C13259 +
            C14346 * C13260) *
               C89153 * C5073 +
           (((C14061 - C14060) * C263 + (C14329 - C14328) * C89247) * C13258 +
            ((C14065 - C14064) * C263 + (C14332 - C14331) * C89247) * C13259 +
            ((C14068 - C14069) * C263 + (C14333 - C14334) * C89247) * C13260) *
               C89153 * C89189) *
              C5075 +
          ((((C13261 * C107 - C89093 * C114) * C263 +
             (C13261 * C566 - C89093 * C572) * C89247) *
                C13258 +
            ((C14072 - C14073) * C263 + (C14335 - C14336) * C89247) * C13259 +
            C14347 * C13260) *
               C89153 * C5073 +
           (((C14073 - C14072) * C263 + (C14336 - C14335) * C89247) * C13258 +
            ((C14077 - C14076) * C263 + (C14339 - C14338) * C89247) * C13259 +
            ((C14080 - C14081) * C263 + (C14340 - C14341) * C89247) * C13260) *
               C89153 * C89189) *
              C5076 +
          ((((C89093 * C116 - C13261 * C108) * C263 +
             (C89093 * C573 - C13261 * C567) * C89247) *
                C13258 +
            ((C15538 - C15539) * C263 + (C15768 - C15769) * C89247) * C13259 +
            ((C15542 - C15543) * C263 + (C15770 - C15771) * C89247) * C13260) *
               C89153 * C5073 +
           (((C15539 - C15538) * C263 + (C15769 - C15768) * C89247) * C13258 +
            ((C15543 - C15542) * C263 + (C15771 - C15770) * C89247) * C13259 +
            ((C13261 * C5725 - C89093 * C5728) * C263 +
             (C13261 * C6063 - C89093 * C6066) * C89247) *
                C13260) *
               C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C89093 * C112 - C13261 * C106) * C263 +
            (C89093 * C571 - C13261 * C565) * C89247) *
               C13258 +
           ((C14060 - C14061) * C263 + (C14328 - C14329) * C89247) * C13259 +
           C14346 * C13260) *
              C89153 * C5720 +
          (((C14061 - C14060) * C263 + (C14329 - C14328) * C89247) * C13258 +
           ((C14065 - C14064) * C263 + (C14332 - C14331) * C89247) * C13259 +
           C18656 * C13260) *
              C89153 * C5721 +
          (C14346 * C13258 +
           ((C14069 - C14068) * C263 + (C14334 - C14333) * C89247) * C13259 +
           ((C18490 - C18491) * C263 + (C18653 - C18654) * C89247) * C13260) *
              C89153 * C5722 +
          (C18656 * C13258 +
           ((C18491 - C18490) * C263 + (C18654 - C18653) * C89247) * C13259 +
           ((C13261 * C18310 - C89093 * C18311) * C263 +
            (C13261 * C18648 - C89093 * C18649) * C89247) *
               C13260) *
              C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C263 +
             (C89093 * C571 - C13261 * C565) * C89247) *
                C13258 +
            ((C14060 - C14061) * C263 + (C14328 - C14329) * C89247) * C13259 +
            C14346 * C13260) *
               C1719 +
           (((C13261 * C1724 - C89093 * C1734) * C263 +
             (C13261 * C2330 - C89093 * C2338) * C89247) *
                C13258 +
            ((C17042 - C17043) * C263 + (C17366 - C17367) * C89247) * C13259 +
            ((C17046 - C17047) * C263 + (C17368 - C17369) * C89247) * C13260) *
               C1720 +
           (((C89093 * C1736 - C13261 * C1725) * C263 +
             (C89093 * C2341 - C13261 * C2333) * C89247) *
                C13258 +
            ((C19096 - C19097) * C263 + (C19334 - C19335) * C89247) * C13259 +
            ((C19100 - C19101) * C263 + (C19336 - C19337) * C89247) * C13260) *
               C1721) *
              C5073 +
          ((((C14061 - C14060) * C263 + (C14329 - C14328) * C89247) * C13258 +
            ((C14065 - C14064) * C263 + (C14332 - C14331) * C89247) * C13259 +
            C18656 * C13260) *
               C1719 +
           (((C17043 - C17042) * C263 + (C17367 - C17366) * C89247) * C13258 +
            ((C17047 - C17046) * C263 + (C17369 - C17368) * C89247) * C13259 +
            ((C89093 * C16685 - C13261 * C16683) * C263 +
             (C89093 * C17363 - C13261 * C17361) * C89247) *
                C13260) *
               C1720 +
           (((C19097 - C19096) * C263 + (C19335 - C19334) * C89247) * C13258 +
            ((C19101 - C19100) * C263 + (C19337 - C19336) * C89247) * C13259 +
            ((C13261 * C18839 - C89093 * C18840) * C263 +
             (C13261 * C19331 - C89093 * C19332) * C89247) *
                C13260) *
               C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C89093 * C112 - C13261 * C106) * C25951 +
            (C89093 * C571 - C13261 * C565) * C25848 +
            (C27308 - C27309) * C25952 + (C27606 - C27607) * C25849 +
            C27332 * C25953 + C27618 * C25850) *
               C89236 * C89153 * C5073 +
           ((C14061 - C14060) * C25951 + (C14329 - C14328) * C25848 +
            (C17042 - C17043) * C25952 + (C17366 - C17367) * C25849 +
            (C19097 - C19096) * C25953 + (C19335 - C19334) * C25850) *
               C89236 * C89153 * C89189) *
              C5075 +
          (((C13261 * C107 - C89093 * C114) * C25951 +
            (C13261 * C566 - C89093 * C572) * C25848 +
            (C27320 - C27321) * C25952 + (C27612 - C27613) * C25849 +
            C27334 * C25953 + C27619 * C25850) *
               C89236 * C89153 * C5073 +
           ((C14073 - C14072) * C25951 + (C14336 - C14335) * C25848 +
            (C17050 - C17051) * C25952 + (C17370 - C17371) * C25849 +
            (C29563 - C29564) * C25953 + (C29890 - C29891) * C25850) *
               C89236 * C89153 * C89189) *
              C5076 +
          (((C89093 * C116 - C13261 * C108) * C25951 +
            (C89093 * C573 - C13261 * C567) * C25848 +
            (C28758 - C28759) * C25952 + (C28990 - C28991) * C25849 +
            (C28762 - C28763) * C25953 + (C28992 - C28993) * C25850) *
               C89236 * C89153 * C5073 +
           ((C15539 - C15538) * C25951 + (C15769 - C15768) * C25848 +
            (C13261 * C4099 - C89093 * C4105) * C25952 +
            (C13261 * C4769 - C89093 * C4773) * C25849 +
            (C13261 * C6247 - C89093 * C6250) * C25953 +
            (C13261 * C6729 - C89093 * C6732) * C25850) *
               C89236 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C89093 * C112 - C13261 * C106) * C25951 +
           (C89093 * C571 - C13261 * C565) * C25848 +
           (C27308 - C27309) * C25952 + (C27606 - C27607) * C25849 +
           C27332 * C25953 + C27618 * C25850) *
              C89236 * C89153 * C5720 +
          ((C14061 - C14060) * C25951 + (C14329 - C14328) * C25848 +
           (C17042 - C17043) * C25952 + (C17366 - C17367) * C25849 +
           (C19097 - C19096) * C25953 + (C19335 - C19334) * C25850) *
              C89236 * C89153 * C5721 +
          (C14084 * C25951 + C14342 * C25848 + (C17047 - C17046) * C25952 +
           (C17369 - C17368) * C25849 + (C19100 - C19101) * C25953 +
           (C19336 - C19337) * C25850) *
              C89236 * C89153 * C5722 +
          (C18488 * C25951 + C18652 * C25848 + (C21376 - C21375) * C25952 +
           (C21611 - C21610) * C25849 +
           (C13261 * C18839 - C89093 * C18840) * C25953 +
           (C13261 * C19331 - C89093 * C19332) * C25850) *
              C89236 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C89093 * C112 - C13261 * C106) * C25951 +
            (C89093 * C571 - C13261 * C565) * C25848 +
            (C27308 - C27309) * C25952 + (C27606 - C27607) * C25849 +
            C27332 * C25953 + C27618 * C25850) *
               C89236 * C1719 +
           ((C27309 - C27308) * C25951 + (C27607 - C27606) * C25848 +
            (C27313 - C27312) * C25952 + (C27609 - C27608) * C25849 +
            (C27316 - C27317) * C25953 + (C27610 - C27611) * C25850) *
               C89236 * C1720 +
           (C27332 * C25951 + C27618 * C25848 + (C27317 - C27316) * C25952 +
            (C27611 - C27610) * C25849 +
            (C89093 * C26999 - C13261 * C26997) * C25953 +
            (C89093 * C27603 - C13261 * C27601) * C25850) *
               C89236 * C1721) *
              C5073 +
          (((C14061 - C14060) * C25951 + (C14329 - C14328) * C25848 +
            (C17042 - C17043) * C25952 + (C17366 - C17367) * C25849 +
            C31534 * C25953 + C31777 * C25850) *
               C89236 * C1719 +
           ((C17043 - C17042) * C25951 + (C17367 - C17366) * C25848 +
            (C19096 - C19097) * C25952 + (C19334 - C19335) * C25849 +
            (C31536 - C31537) * C25953 + (C31778 - C31779) * C25850) *
               C89236 * C1720 +
           (C31534 * C25951 + C31777 * C25848 + (C31537 - C31536) * C25952 +
            (C31779 - C31778) * C25849 +
            (C13261 * C31285 - C89093 * C31286) * C25953 +
            (C13261 * C31774 - C89093 * C31775) * C25850) *
               C89236 * C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eezy[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C89236 * C181 - C180 * C106) * C263 +
                 (C89236 * C627 - C180 * C565) * C89247) *
                    C89 +
                ((C194 - C195) * C263 + (C634 - C635) * C89247) * C90 +
                C648 * C91) *
                   C89153 * C5073 +
               (((C180 * C819 - C89236 * C923) * C263 +
                 (C180 * C1425 - C89236 * C1515) * C89247) *
                    C89 +
                ((C940 - C941) * C263 + (C1524 - C1525) * C89247) * C90 +
                C3193 * C91) *
                   C89153 * C89189) *
                  C5075 +
              ((((C195 - C194) * C263 + (C635 - C634) * C89247) * C89 +
                ((C199 - C198) * C263 + (C638 - C637) * C89247) * C90 +
                C649 * C91) *
                   C89153 * C5073 +
               (((C941 - C940) * C263 + (C1525 - C1524) * C89247) * C89 +
                ((C945 - C944) * C263 + (C1527 - C1526) * C89247) * C90 +
                ((C2712 - C2713) * C263 + (C3190 - C3191) * C89247) * C91) *
                   C89153 * C89189) *
                  C5076 +
              ((C648 * C89 +
                ((C203 - C202) * C263 + (C641 - C640) * C89247) * C90 +
                ((C206 - C207) * C263 + (C642 - C643) * C89247) * C91) *
                   C89153 * C5073 +
               (C3193 * C89 +
                ((C2713 - C2712) * C263 + (C3191 - C3190) * C89247) * C90 +
                ((C180 * C2629 - C89236 * C2707) * C263 +
                 (C180 * C3110 - C89236 * C3186) * C89247) *
                    C91) *
                   C89153 * C89189) *
                  C5077) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C89236 * C181 - C180 * C106) * C263 +
                (C89236 * C627 - C180 * C565) * C89247) *
                   C89 +
               ((C194 - C195) * C263 + (C634 - C635) * C89247) * C90 +
               C648 * C91) *
                  C89153 * C5720 +
              (((C180 * C819 - C89236 * C923) * C263 +
                (C180 * C1425 - C89236 * C1515) * C89247) *
                   C89 +
               ((C940 - C941) * C263 + (C1524 - C1525) * C89247) * C90 +
               C3193 * C91) *
                  C89153 * C5721 +
              (((C89236 * C926 - C180 * C820) * C263 +
                (C89236 * C1518 - C180 * C1428) * C89247) *
                   C89 +
               ((C948 - C949) * C263 + (C1528 - C1529) * C89247) * C90 +
               ((C952 - C953) * C263 + (C1530 - C1531) * C89247) * C91) *
                  C89153 * C5722 +
              (((C180 * C5727 - C89236 * C5787) * C263 +
                (C180 * C6061 - C89236 * C6117) * C89247) *
                   C89 +
               ((C180 * C5726 - C89236 * C5788) * C263 +
                (C180 * C6062 - C89236 * C6118) * C89247) *
                   C90 +
               ((C180 * C5725 - C89236 * C5789) * C263 +
                (C180 * C6063 - C89236 * C6119) * C89247) *
                   C91) *
                  C89153 * C5723) *
             C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C263 +
             (C89236 * C627 - C180 * C565) * C89247) *
                C89 +
            ((C194 - C195) * C263 + (C634 - C635) * C89247) * C90 +
            C648 * C91) *
               C1719 +
           (((C180 * C1724 - C89236 * C1828) * C263 +
             (C180 * C2330 - C89236 * C2420) * C89247) *
                C89 +
            ((C1845 - C1846) * C263 + (C2429 - C2430) * C89247) * C90 +
            C3916 * C91) *
               C1720 +
           (((C89236 * C1831 - C180 * C1725) * C263 +
             (C89236 * C2423 - C180 * C2333) * C89247) *
                C89 +
            ((C1853 - C1854) * C263 + (C2433 - C2434) * C89247) * C90 +
            ((C1857 - C1858) * C263 + (C2435 - C2436) * C89247) * C91) *
               C1721) *
              C5073 +
          ((((C180 * C819 - C89236 * C923) * C263 +
             (C180 * C1425 - C89236 * C1515) * C89247) *
                C89 +
            ((C940 - C941) * C263 + (C1524 - C1525) * C89247) * C90 +
            C3193 * C91) *
               C1719 +
           (((C89236 * C4211 - C180 * C4097) * C263 +
             (C89236 * C4873 - C180 * C4767) * C89247) *
                C89 +
            ((C4220 - C4221) * C263 + (C4878 - C4879) * C89247) * C90 +
            ((C4224 - C4225) * C263 + (C4880 - C4881) * C89247) * C91) *
               C1720 +
           (((C180 * C6249 - C89236 * C6333) * C263 +
             (C180 * C6727 - C89236 * C6807) * C89247) *
                C89 +
            ((C180 * C6248 - C89236 * C6334) * C263 +
             (C180 * C6728 - C89236 * C6808) * C89247) *
                C90 +
            ((C180 * C6247 - C89236 * C6335) * C263 +
             (C180 * C6729 - C89236 * C6809) * C89247) *
                C91) *
               C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
             C13260 * C926 - C13315 * C820) *
                C263 +
            (C13258 * C627 - C13313 * C565 + C13259 * C1515 - C13314 * C1425 +
             C13260 * C1518 - C13315 * C1428) *
                C89247) *
               C89093 * C89153 * C5073 +
           ((C13313 * C819 - C13258 * C923 + C13314 * C820 - C13259 * C926 +
             C13315 * C5727 - C13260 * C5787) *
                C263 +
            (C13313 * C1425 - C13258 * C1515 + C13314 * C1428 - C13259 * C1518 +
             C13315 * C6061 - C13260 * C6117) *
                C89247) *
               C89093 * C89153 * C89189) *
              C5075 +
          (((C13313 * C107 - C13258 * C182 + C13314 * C818 - C13259 * C924 +
             C13315 * C821 - C13260 * C927) *
                C263 +
            (C13313 * C566 - C13258 * C628 + C13314 * C1426 - C13259 * C1516 +
             C13315 * C1429 - C13260 * C1519) *
                C89247) *
               C89093 * C89153 * C5073 +
           ((C13258 * C924 - C13313 * C818 + C13259 * C927 - C13314 * C821 +
             C13260 * C5788 - C13315 * C5726) *
                C263 +
            (C13258 * C1516 - C13313 * C1426 + C13259 * C1519 - C13314 * C1429 +
             C13260 * C6118 - C13315 * C6062) *
                C89247) *
               C89093 * C89153 * C89189) *
              C5076 +
          (((C13258 * C183 - C13313 * C108 + C13259 * C925 - C13314 * C817 +
             C13260 * C928 - C13315 * C822) *
                C263 +
            (C13258 * C629 - C13313 * C567 + C13259 * C1517 - C13314 * C1427 +
             C13260 * C1520 - C13315 * C1430) *
                C89247) *
               C89093 * C89153 * C5073 +
           ((C13313 * C817 - C13258 * C925 + C13314 * C822 - C13259 * C928 +
             C13315 * C5725 - C13260 * C5789) *
                C263 +
            (C13313 * C1427 - C13258 * C1517 + C13314 * C1430 - C13259 * C1520 +
             C13315 * C6063 - C13260 * C6119) *
                C89247) *
               C89093 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
            C13260 * C926 - C13315 * C820) *
               C263 +
           (C13258 * C627 - C13313 * C565 + C13259 * C1515 - C13314 * C1425 +
            C13260 * C1518 - C13315 * C1428) *
               C89247) *
              C89093 * C89153 * C5720 +
          ((C13313 * C819 - C13258 * C923 + C13314 * C820 - C13259 * C926 +
            C13315 * C5727 - C13260 * C5787) *
               C263 +
           (C13313 * C1425 - C13258 * C1515 + C13314 * C1428 - C13259 * C1518 +
            C13315 * C6061 - C13260 * C6117) *
               C89247) *
              C89093 * C89153 * C5721 +
          ((C13258 * C926 - C13313 * C820 + C13259 * C5787 - C13314 * C5727 +
            C13260 * C13873 - C13315 * C13743) *
               C263 +
           (C13258 * C1518 - C13313 * C1428 + C13259 * C6117 - C13314 * C6061 +
            C13260 * C14421 - C13315 * C14323) *
               C89247) *
              C89093 * C89153 * C5722 +
          ((C13313 * C5727 - C13258 * C5787 + C13314 * C13743 -
            C13259 * C13873 + C13315 * C18310 - C13260 * C18372) *
               C263 +
           (C13313 * C6061 - C13258 * C6117 + C13314 * C14323 -
            C13259 * C14421 + C13315 * C18648 - C13260 * C18706) *
               C89247) *
              C89093 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
             C13260 * C926 - C13315 * C820) *
                C263 +
            (C13258 * C627 - C13313 * C565 + C13259 * C1515 - C13314 * C1425 +
             C13260 * C1518 - C13315 * C1428) *
                C89247) *
               C89093 * C1719 +
           ((C13313 * C1724 - C13258 * C1828 + C13314 * C4097 - C13259 * C4211 +
             C13315 * C8516 - C13260 * C8600) *
                C263 +
            (C13313 * C2330 - C13258 * C2420 + C13314 * C4767 - C13259 * C4873 +
             C13315 * C8994 - C13260 * C9074) *
                C89247) *
               C89093 * C1720 +
           ((C13258 * C1831 - C13313 * C1725 + C13259 * C6333 - C13314 * C6249 +
             C13260 * C14683 - C13315 * C14601) *
                C263 +
            (C13258 * C2423 - C13313 * C2333 + C13259 * C6807 - C13314 * C6727 +
             C13260 * C15147 - C13315 * C15069) *
                C89247) *
               C89093 * C1721) *
              C5073 +
          (((C13313 * C819 - C13258 * C923 + C13314 * C820 - C13259 * C926 +
             C13315 * C5727 - C13260 * C5787) *
                C263 +
            (C13313 * C1425 - C13258 * C1515 + C13314 * C1428 - C13259 * C1518 +
             C13315 * C6061 - C13260 * C6117) *
                C89247) *
               C89093 * C1719 +
           ((C13258 * C4211 - C13313 * C4097 + C13259 * C8600 - C13314 * C8516 +
             C13260 * C16821 - C13315 * C16683) *
                C263 +
            (C13258 * C4873 - C13313 * C4767 + C13259 * C9074 - C13314 * C8994 +
             C13260 * C17471 - C13315 * C17361) *
                C89247) *
               C89093 * C1720 +
           ((C13313 * C6249 - C13258 * C6333 + C13314 * C14601 -
             C13259 * C14683 + C13315 * C18839 - C13260 * C18933) *
                C263 +
            (C13313 * C6727 - C13258 * C6807 + C13314 * C15069 -
             C13259 * C15147 + C13315 * C19331 - C13260 * C19411) *
                C89247) *
               C89093 * C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C89236 * C181 - C180 * C106) * C25951 +
            (C89236 * C627 - C180 * C565) * C25848 +
            (C27126 - C27127) * C25952 + (C27696 - C27697) * C25849 +
            C27144 * C25953 + C27705 * C25850) *
               C89093 * C89153 * C5073 +
           ((C180 * C819 - C89236 * C923) * C25951 +
            (C180 * C1425 - C89236 * C1515) * C25848 +
            (C29351 - C29352) * C25952 + (C29991 - C29992) * C25849 +
            (C29355 - C29356) * C25953 + (C29993 - C29994) * C25850) *
               C89093 * C89153 * C89189) *
              C5075 +
          (((C195 - C194) * C25951 + (C635 - C634) * C25848 +
            (C1845 - C1846) * C25952 + (C2429 - C2430) * C25849 +
            C27138 * C25953 + C27702 * C25850) *
               C89093 * C89153 * C5073 +
           ((C941 - C940) * C25951 + (C1525 - C1524) * C25848 +
            (C4220 - C4221) * C25952 + (C4878 - C4879) * C25849 +
            (C29359 - C29360) * C25953 + (C29995 - C29996) * C25850) *
               C89093 * C89153 * C89189) *
              C5076 +
          ((C210 * C25951 + C644 * C25848 + (C1850 - C1849) * C25952 +
            (C2432 - C2431) * C25849 + (C1857 - C1858) * C25953 +
            (C2435 - C2436) * C25850) *
               C89093 * C89153 * C5073 +
           (C2710 * C25951 + C3189 * C25848 + (C4225 - C4224) * C25952 +
            (C4881 - C4880) * C25849 +
            (C180 * C6247 - C89236 * C6335) * C25953 +
            (C180 * C6729 - C89236 * C6809) * C25850) *
               C89093 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C89236 * C181 - C180 * C106) * C25951 +
           (C89236 * C627 - C180 * C565) * C25848 + (C27126 - C27127) * C25952 +
           (C27696 - C27697) * C25849 + C27144 * C25953 + C27705 * C25850) *
              C89093 * C89153 * C5720 +
          ((C180 * C819 - C89236 * C923) * C25951 +
           (C180 * C1425 - C89236 * C1515) * C25848 +
           (C29351 - C29352) * C25952 + (C29991 - C29992) * C25849 +
           (C29355 - C29356) * C25953 + (C29993 - C29994) * C25850) *
              C89093 * C89153 * C5721 +
          ((C89236 * C926 - C180 * C820) * C25951 +
           (C89236 * C1518 - C180 * C1428) * C25848 +
           (C89236 * C8600 - C180 * C8516) * C25952 +
           (C89236 * C9074 - C180 * C8994) * C25849 +
           (C89236 * C14683 - C180 * C14601) * C25953 +
           (C89236 * C15147 - C180 * C15069) * C25850) *
              C89093 * C89153 * C5722 +
          ((C180 * C5727 - C89236 * C5787) * C25951 +
           (C180 * C6061 - C89236 * C6117) * C25848 +
           (C180 * C16683 - C89236 * C16821) * C25952 +
           (C180 * C17361 - C89236 * C17471) * C25849 +
           (C180 * C18839 - C89236 * C18933) * C25953 +
           (C180 * C19331 - C89236 * C19411) * C25850) *
              C89093 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C89236 * C181 - C180 * C106) * C25951 +
            (C89236 * C627 - C180 * C565) * C25848 +
            (C27126 - C27127) * C25952 + (C27696 - C27697) * C25849 +
            C27144 * C25953 + C27705 * C25850) *
               C89093 * C1719 +
           ((C27127 - C27126) * C25951 + (C27697 - C27696) * C25848 +
            (C27131 - C27130) * C25952 + (C27699 - C27698) * C25849 +
            (C27134 - C27135) * C25953 + (C27700 - C27701) * C25850) *
               C89093 * C1720 +
           (C27144 * C25951 + C27705 * C25848 + (C27135 - C27134) * C25952 +
            (C27701 - C27700) * C25849 +
            (C89236 * C27121 - C180 * C26997) * C25953 +
            (C89236 * C27693 - C180 * C27601) * C25850) *
               C89093 * C1721) *
              C5073 +
          (((C180 * C819 - C89236 * C923) * C25951 +
            (C180 * C1425 - C89236 * C1515) * C25848 +
            (C29351 - C29352) * C25952 + (C29991 - C29992) * C25849 +
            C31373 * C25953 + C31855 * C25850) *
               C89093 * C1719 +
           ((C29352 - C29351) * C25951 + (C29992 - C29991) * C25848 +
            (C29356 - C29355) * C25952 + (C29994 - C29993) * C25849 +
            (C31375 - C31376) * C25953 + (C31856 - C31857) * C25850) *
               C89093 * C1720 +
           (C31373 * C25951 + C31855 * C25848 + (C31376 - C31375) * C25952 +
            (C31857 - C31856) * C25849 +
            (C180 * C31285 - C89236 * C31370) * C25953 +
            (C180 * C31774 - C89236 * C31853) * C25850) *
               C89093 * C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eezz[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) *
                    C89236 * C89 +
                C735 * C90 + C736 * C91) *
                   C89153 * C5073 -
               (C1642 * C91 + C1643 * C90 +
                (C263 * C1029 - C699 * C819 - C263 * C1425 + C89247 * C1607) *
                    C89236 * C89) *
                   C89153 * C89189) *
                  C5075 +
              ((C1643 * C89 + C1642 * C90 + C3276 * C91) * C89153 * C89189 -
               (C737 * C91 + C736 * C90 + C735 * C89) * C89153 * C5073) *
                  C5076 +
              ((C736 * C89 + C737 * C90 + C738 * C91) * C89153 * C5073 -
               ((C263 * C2789 - C699 * C2629 - C263 * C3110 + C89247 * C3267) *
                    C89236 * C91 +
                C3276 * C90 + C1642 * C89) *
                   C89153 * C89189) *
                  C5077) +
         0.5 * std::pow(Pi, 2.5) *
             (((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) *
                   C89236 * C89 +
               C735 * C90 + C736 * C91) *
                  C89153 * C5720 -
              (C1642 * C91 + C1643 * C90 +
               (C263 * C1029 - C699 * C819 - C263 * C1425 + C89247 * C1607) *
                   C89236 * C89) *
                  C89153 * C5721 +
              ((C263 * C1032 - C699 * C820 - C263 * C1428 + C89247 * C1608) *
                   C89236 * C89 +
               C1644 * C90 + C1645 * C91) *
                  C89153 * C5722 -
              ((C263 * C5845 - C699 * C5725 - C263 * C6063 + C89247 * C6170) *
                   C89236 * C91 +
               (C263 * C5844 - C699 * C5726 - C263 * C6062 + C89247 * C6171) *
                   C89236 * C90 +
               (C263 * C5843 - C699 * C5727 - C263 * C6061 + C89247 * C6172) *
                   C89236 * C89) *
                  C89153 * C5723) *
             C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C89236 *
                C89 +
            C735 * C90 + C736 * C91) *
               C1719 -
           (C2547 * C91 + C2548 * C90 +
            (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
                C89236 * C89) *
               C1720 +
           ((C263 * C1937 - C699 * C1725 - C263 * C2333 + C89247 * C2513) *
                C89236 * C89 +
            C2549 * C90 + C2550 * C91) *
               C1721) *
              C5073 +
          (((C263 * C4325 - C699 * C4097 - C263 * C4767 + C89247 * C4979) *
                C89236 * C89 +
            C4998 * C90 + C4999 * C91) *
               C1720 -
           (C1642 * C91 + C1643 * C90 +
            (C263 * C1029 - C699 * C819 - C263 * C1425 + C89247 * C1607) *
                C89236 * C89) *
               C1719 -
           ((C263 * C6415 - C699 * C6247 - C263 * C6729 + C89247 * C6884) *
                C89236 * C91 +
            (C263 * C6414 - C699 * C6248 - C263 * C6728 + C89247 * C6885) *
                C89236 * C90 +
            (C263 * C6413 - C699 * C6249 - C263 * C6727 + C89247 * C6886) *
                C89236 * C89) *
               C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C13258 +
            C14524 * C13259 + C14525 * C13260) *
               C89093 * C89153 * C5073 -
           (C14526 * C13260 + C14525 * C13259 + C14524 * C13258) * C89093 *
               C89153 * C89189) *
              C5075 +
          ((C1639 * C13258 + C1640 * C13259 + C14527 * C13260) * C89093 *
               C89153 * C89189 -
           (C1640 * C13260 + C1639 * C13259 + C731 * C13258) * C89093 * C89153 *
               C5073) *
              C5076 +
          ((C732 * C13258 + C1638 * C13259 + C1641 * C13260) * C89093 * C89153 *
               C5073 -
           ((C263 * C5845 - C699 * C5725 - C263 * C6063 + C89247 * C6170) *
                C13260 +
            C1641 * C13259 + C1638 * C13258) *
               C89093 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C13258 +
           C14524 * C13259 + C14525 * C13260) *
              C89093 * C89153 * C5720 -
          (C14526 * C13260 + C14525 * C13259 + C14524 * C13258) * C89093 *
              C89153 * C5721 +
          (C14525 * C13258 + C14526 * C13259 + C18765 * C13260) * C89093 *
              C89153 * C5722 -
          ((C263 * C18424 - C699 * C18310 - C263 * C18648 + C89247 * C18757) *
               C13260 +
           C18765 * C13259 + C14526 * C13258) *
              C89093 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C13258 +
            C14524 * C13259 + C14525 * C13260) *
               C89093 * C1719 -
           (C17592 * C13260 + C17593 * C13259 +
            (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
                C13258) *
               C89093 * C1720 +
           ((C263 * C1937 - C699 * C1725 - C263 * C2333 + C89247 * C2513) *
                C13258 +
            C19500 * C13259 + C19501 * C13260) *
               C89093 * C1721) *
              C5073 +
          ((C17593 * C13258 + C17592 * C13259 +
            (C263 * C16923 - C699 * C16683 - C263 * C17361 + C89247 * C17571) *
                C13260) *
               C89093 * C1720 -
           (C14526 * C13260 + C14525 * C13259 + C14524 * C13258) * C89093 *
               C1719 -
           ((C263 * C19009 - C699 * C18839 - C263 * C19331 + C89247 * C19486) *
                C13260 +
            C19501 * C13259 + C19500 * C13258) *
               C89093 * C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C25951 * C264 - C26254 * C106 - C25951 * C565 + C25848 * C700 +
            C25952 * C1934 - C26255 * C1724 - C25952 * C2330 + C25849 * C2512 +
            C25953 * C1937 - C26256 * C1725 - C25953 * C2333 + C25850 * C2513) *
               C89236 * C89093 * C89153 * C5073 -
           (C25953 * C6413 - C26256 * C6249 - C25953 * C6727 + C25850 * C6886 +
            C25952 * C4325 - C26255 * C4097 - C25952 * C4767 + C25849 * C4979 +
            C25951 * C1029 - C26254 * C819 - C25951 * C1425 + C25848 * C1607) *
               C89236 * C89093 * C89153 * C89189) *
              C5075 +
          ((C25951 * C1030 - C26254 * C818 - C25951 * C1426 + C25848 * C1606 +
            C25952 * C4326 - C26255 * C4098 - C25952 * C4768 + C25849 * C4980 +
            C25953 * C6414 - C26256 * C6248 - C25953 * C6728 + C25850 * C6885) *
               C89236 * C89093 * C89153 * C89189 -
           (C25953 * C1938 - C26256 * C1726 - C25953 * C2334 + C25850 * C2514 +
            C25952 * C1935 - C26255 * C1723 - C25952 * C2331 + C25849 * C2511 +
            C25951 * C265 - C26254 * C107 - C25951 * C566 + C25848 * C701) *
               C89236 * C89093 * C89153 * C5073) *
              C5076 +
          ((C25951 * C266 - C26254 * C108 - C25951 * C567 + C25848 * C702 +
            C25952 * C1936 - C26255 * C1722 - C25952 * C2332 + C25849 * C2510 +
            C25953 * C1939 - C26256 * C1727 - C25953 * C2335 + C25850 * C2515) *
               C89236 * C89093 * C89153 * C5073 -
           (C25953 * C6415 - C26256 * C6247 - C25953 * C6729 + C25850 * C6884 +
            C25952 * C4327 - C26255 * C4099 - C25952 * C4769 + C25849 * C4981 +
            C25951 * C1031 - C26254 * C817 - C25951 * C1427 + C25848 * C1605) *
               C89236 * C89093 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((C25951 * C264 - C26254 * C106 - C25951 * C565 + C25848 * C700 +
           C25952 * C1934 - C26255 * C1724 - C25952 * C2330 + C25849 * C2512 +
           C25953 * C1937 - C26256 * C1725 - C25953 * C2333 + C25850 * C2513) *
              C89236 * C89093 * C89153 * C5720 -
          (C25953 * C6413 - C26256 * C6249 - C25953 * C6727 + C25850 * C6886 +
           C25952 * C4325 - C26255 * C4097 - C25952 * C4767 + C25849 * C4979 +
           C25951 * C1029 - C26254 * C819 - C25951 * C1425 + C25848 * C1607) *
              C89236 * C89093 * C89153 * C5721 +
          (C25951 * C1032 - C26254 * C820 - C25951 * C1428 + C25848 * C1608 +
           C25952 * C8680 - C26255 * C8516 - C25952 * C8994 + C25849 * C9153 +
           C25953 * C14761 - C26256 * C14601 - C25953 * C15069 +
           C25850 * C15223) *
              C89236 * C89093 * C89153 * C5722 -
          (C25953 * C19009 - C26256 * C18839 - C25953 * C19331 +
           C25850 * C19486 + C25952 * C16923 - C26255 * C16683 -
           C25952 * C17361 + C25849 * C17571 + C25951 * C5843 - C26254 * C5727 -
           C25951 * C6061 + C25848 * C6172) *
              C89236 * C89093 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C25951 * C264 - C26254 * C106 - C25951 * C565 + C25848 * C700 +
            C25952 * C1934 - C26255 * C1724 - C25952 * C2330 + C25849 * C2512 +
            C25953 * C1937 - C26256 * C1725 - C25953 * C2333 + C25850 * C2513) *
               C89236 * C89093 * C1719 -
           (C25953 * C10660 - C26256 * C10544 - C25953 * C10878 +
            C25850 * C10989 + C25952 * C1937 - C26255 * C1725 - C25952 * C2333 +
            C25849 * C2513 + C25951 * C1934 - C26254 * C1724 - C25951 * C2330 +
            C25848 * C2512) *
               C89236 * C89093 * C1720 +
           (C25951 * C1937 - C26254 * C1725 - C25951 * C2333 + C25848 * C2513 +
            C25952 * C10660 - C26255 * C10544 - C25952 * C10878 +
            C25849 * C10989 + C25953 * C27225 - C26256 * C26997 -
            C25953 * C27601 + C25850 * C27779) *
               C89236 * C89093 * C1721) *
              C5073 +
          ((C25951 * C4325 - C26254 * C4097 - C25951 * C4767 + C25848 * C4979 +
            C25952 * C6413 - C26255 * C6249 - C25952 * C6727 + C25849 * C6886 +
            C25953 * C23264 - C26256 * C23153 - C25953 * C23476 +
            C25850 * C23583) *
               C89236 * C89093 * C1720 -
           (C25953 * C6413 - C26256 * C6249 - C25953 * C6727 + C25850 * C6886 +
            C25952 * C4325 - C26255 * C4097 - C25952 * C4767 + C25849 * C4979 +
            C25951 * C1029 - C26254 * C819 - C25951 * C1425 + C25848 * C1607) *
               C89236 * C89093 * C1719 -
           (C25953 * C31455 - C26256 * C31285 - C25953 * C31774 +
            C25850 * C31931 + C25952 * C23264 - C26255 * C23153 -
            C25952 * C23476 + C25849 * C23583 + C25951 * C6413 -
            C26254 * C6249 - C25951 * C6727 + C25848 * C6886) *
               C89236 * C89093 * C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eexx[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                 C89247 * C13258 +
             C13794 * C13259 + C13795 * C13260) *
                C89308 -
            (C16720 * C13260 + C16721 * C13259 +
             (C13261 * C1734 - C13262 * C1724 - C13261 * C1735 +
              C89093 * C1748) *
                 C89247 * C13258) *
                C89217) *
               C5073 +
           ((C16721 * C13258 + C16720 * C13259 +
             (C13261 * C16685 - C13262 * C16683 - C13261 * C16686 +
              C89093 * C16689) *
                 C89247 * C13260) *
                C89217 -
            (C13796 * C13260 + C13795 * C13259 + C13794 * C13258) * C89308) *
               C89189) *
              C89299 +
          ((((C13261 * C1732 - C13262 * C1723 - C13261 * C1733 +
              C89093 * C1747) *
                 C89247 * C13258 +
             C16722 * C13259 + C16723 * C13260) *
                C89217 -
            (C13798 * C13260 + C13797 * C13259 +
             (C13261 * C114 - C13262 * C107 - C13261 * C115 + C89093 * C125) *
                 C89247 * C13258) *
                C89308) *
               C5073 +
           ((C13797 * C13258 + C13798 * C13259 + C13799 * C13260) * C89308 -
            ((C13261 * C16687 - C13262 * C16684 - C13261 * C16688 +
              C89093 * C16690) *
                 C89247 * C13260 +
             C16723 * C13259 + C16722 * C13258) *
                C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C100 * C112 - C101 * C106 - C100 * C113 + C89 * C124 +
             C102 * C114 - C103 * C107 - C102 * C115 + C90 * C125 +
             C104 * C116 - C105 * C108 - C104 * C117 + C91 * C126) *
                C89247 * C89236 * C89308 -
            (C104 * C1730 - C105 * C1722 - C104 * C1731 + C91 * C1746 +
             C102 * C1732 - C103 * C1723 - C102 * C1733 + C90 * C1747 +
             C100 * C1734 - C101 * C1724 - C100 * C1735 + C89 * C1748) *
                C89247 * C89236 * C89217) *
               C5073 +
           ((C100 * C4101 - C101 * C4097 - C100 * C4102 + C89 * C4109 +
             C102 * C4103 - C103 * C4098 - C102 * C4104 + C90 * C4110 +
             C104 * C4105 - C105 * C4099 - C104 * C4106 + C91 * C4111) *
                C89247 * C89236 * C89217 -
            (C104 * C825 - C105 * C817 - C104 * C826 + C91 * C841 +
             C102 * C827 - C103 * C818 - C102 * C828 + C90 * C842 +
             C100 * C829 - C101 * C819 - C100 * C830 + C89 * C843) *
                C89247 * C89236 * C89308) *
               C89189) *
              C89299 +
          (((C100 * C1732 - C101 * C1723 - C100 * C1733 + C89 * C1747 +
             C102 * C1730 - C103 * C1722 - C102 * C1731 + C90 * C1746 +
             C104 * C1742 - C105 * C1728 - C104 * C1743 + C91 * C1752) *
                C89247 * C89236 * C89217 -
            (C104 * C118 - C105 * C109 - C104 * C119 + C91 * C127 +
             C102 * C116 - C103 * C108 - C102 * C117 + C90 * C126 +
             C100 * C114 - C101 * C107 - C100 * C115 + C89 * C125) *
                C89247 * C89236 * C89308) *
               C5073 +
           ((C100 * C827 - C101 * C818 - C100 * C828 + C89 * C842 +
             C102 * C825 - C103 * C817 - C102 * C826 + C90 * C841 +
             C104 * C837 - C105 * C823 - C104 * C838 + C91 * C847) *
                C89247 * C89236 * C89308 -
            (C104 * C4107 - C105 * C4100 - C104 * C4108 + C91 * C4112 +
             C102 * C4105 - C103 * C4099 - C102 * C4106 + C90 * C4111 +
             C100 * C4103 - C101 * C4098 - C100 * C4104 + C89 * C4110) *
                C89247 * C89236 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                 C25848 +
             C27042 * C25849 + C27043 * C25850) *
                C89236 * C89308 -
            (C27044 * C25850 + C27043 * C25849 + C27042 * C25848) * C89236 *
                C89217) *
               C5073 +
           ((C16717 * C25848 + C18856 * C25849 + C31296 * C25850) * C89236 *
                C89217 -
            (C18856 * C25850 + C16717 * C25849 + C13788 * C25848) * C89236 *
                C89308) *
               C89189) *
              C89299 +
          (((C27045 * C25848 + C27046 * C25849 + C27047 * C25850) * C89236 *
                C89217 -
            (C27046 * C25850 + C27045 * C25849 +
             (C13261 * C114 - C13262 * C107 - C13261 * C115 + C89093 * C125) *
                 C25848) *
                C89236 * C89308) *
               C5073 +
           ((C13791 * C25848 + C16718 * C25849 + C29250 * C25850) * C89236 *
                C89308 -
            ((C13261 * C29240 - C13262 * C29239 - C13261 * C29241 +
              C89093 * C29242) *
                 C25850 +
             C29250 * C25849 + C16718 * C25848) *
                C89236 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eexy[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
              C13260 * C926 - C13315 * C820) *
                 C13261 +
             (C13258 * C187 - C13313 * C113 + C13259 * C931 - C13314 * C830 +
              C13260 * C934 - C13315 * C832) *
                 C89093) *
                C89247 * C89308 +
            ((C13313 * C1724 - C13258 * C1828 + C13314 * C4097 -
              C13259 * C4211 + C13315 * C8516 - C13260 * C8600) *
                 C13261 +
             (C13313 * C1735 - C13258 * C1836 + C13314 * C4102 -
              C13259 * C4215 + C13315 * C8522 - C13260 * C8603) *
                 C89093) *
                C89247 * C89217) *
               C5073 +
           (((C13313 * C819 - C13258 * C923 + C13314 * C820 - C13259 * C926 +
              C13315 * C5727 - C13260 * C5787) *
                 C13261 +
             (C13313 * C830 - C13258 * C931 + C13314 * C832 - C13259 * C934 +
              C13315 * C5733 - C13260 * C5790) *
                 C89093) *
                C89247 * C89308 +
            ((C13258 * C4211 - C13313 * C4097 + C13259 * C8600 -
              C13314 * C8516 + C13260 * C16821 - C13315 * C16683) *
                 C13261 +
             (C13258 * C4215 - C13313 * C4102 + C13259 * C8603 -
              C13314 * C8522 + C13260 * C16823 - C13315 * C16686) *
                 C89093) *
                C89247 * C89217) *
               C89189) *
              C89299 +
          ((((C13313 * C107 - C13258 * C182 + C13314 * C818 - C13259 * C924 +
              C13315 * C821 - C13260 * C927) *
                 C13261 +
             (C13313 * C115 - C13258 * C188 + C13314 * C828 - C13259 * C932 +
              C13315 * C834 - C13260 * C935) *
                 C89093) *
                C89247 * C89308 +
            ((C13258 * C1829 - C13313 * C1723 + C13259 * C4212 -
              C13314 * C4098 + C13260 * C8601 - C13315 * C8515) *
                 C13261 +
             (C13258 * C1837 - C13313 * C1733 + C13259 * C4216 -
              C13314 * C4104 + C13260 * C8604 - C13315 * C8520) *
                 C89093) *
                C89247 * C89217) *
               C5073 +
           (((C13258 * C924 - C13313 * C818 + C13259 * C927 - C13314 * C821 +
              C13260 * C5788 - C13315 * C5726) *
                 C13261 +
             (C13258 * C932 - C13313 * C828 + C13259 * C935 - C13314 * C834 +
              C13260 * C5791 - C13315 * C5731) *
                 C89093) *
                C89247 * C89308 +
            ((C13313 * C4098 - C13258 * C4212 + C13314 * C8515 -
              C13259 * C8601 + C13315 * C16684 - C13260 * C16822) *
                 C13261 +
             (C13313 * C4104 - C13258 * C4216 + C13314 * C8520 -
              C13259 * C8604 + C13315 * C16688 - C13260 * C16824) *
                 C89093) *
                C89247 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C100 +
             (C89236 * C187 - C180 * C113) * C89 + (C194 - C195) * C102 +
             (C196 - C197) * C90 + C210 * C104 + C211 * C91) *
                C89247 * C89308 +
            ((C180 * C1724 - C89236 * C1828) * C100 +
             (C180 * C1735 - C89236 * C1836) * C89 + (C1845 - C1846) * C102 +
             (C1847 - C1848) * C90 + C3433 * C104 + C3434 * C91) *
                C89247 * C89217) *
               C5073 +
           (((C180 * C819 - C89236 * C923) * C100 +
             (C180 * C830 - C89236 * C931) * C89 + (C940 - C941) * C102 +
             (C942 - C943) * C90 + C2710 * C104 + C2711 * C91) *
                C89247 * C89308 +
            ((C89236 * C4211 - C180 * C4097) * C100 +
             (C89236 * C4215 - C180 * C4102) * C89 + (C4220 - C4221) * C102 +
             (C4222 - C4223) * C90 + (C4224 - C4225) * C104 +
             (C4226 - C4227) * C91) *
                C89247 * C89217) *
               C89189) *
              C89299 +
          ((((C195 - C194) * C100 + (C197 - C196) * C89 + (C199 - C198) * C102 +
             (C201 - C200) * C90 + C212 * C104 + C213 * C91) *
                C89247 * C89308 +
            ((C1846 - C1845) * C100 + (C1848 - C1847) * C89 +
             (C1850 - C1849) * C102 + (C1852 - C1851) * C90 +
             (C3435 - C3436) * C104 + (C3437 - C3438) * C91) *
                C89247 * C89217) *
               C5073 +
           (((C941 - C940) * C100 + (C943 - C942) * C89 + (C945 - C944) * C102 +
             (C947 - C946) * C90 + (C2712 - C2713) * C104 +
             (C2714 - C2715) * C91) *
                C89247 * C89308 +
            ((C4221 - C4220) * C100 + (C4223 - C4222) * C89 +
             (C4225 - C4224) * C102 + (C4227 - C4226) * C90 +
             (C180 * C4100 - C89236 * C4214) * C104 +
             (C180 * C4108 - C89236 * C4218) * C91) *
                C89247 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C89236 * C181 - C180 * C106) * C13261 +
              (C89236 * C187 - C180 * C113) * C89093) *
                 C25848 +
             ((C27126 - C27127) * C13261 + (C27128 - C27129) * C89093) *
                 C25849 +
             C27151 * C25850) *
                C89308 +
            (((C27127 - C27126) * C13261 + (C27129 - C27128) * C89093) *
                 C25848 +
             ((C27131 - C27130) * C13261 + (C27133 - C27132) * C89093) *
                 C25849 +
             ((C27134 - C27135) * C13261 + (C27136 - C27137) * C89093) *
                 C25850) *
                C89217) *
               C5073 +
           ((((C180 * C819 - C89236 * C923) * C13261 +
              (C180 * C830 - C89236 * C931) * C89093) *
                 C25848 +
             ((C29351 - C29352) * C13261 + (C29353 - C29354) * C89093) *
                 C25849 +
             C31381 * C25850) *
                C89308 +
            (((C29352 - C29351) * C13261 + (C29354 - C29353) * C89093) *
                 C25848 +
             ((C29356 - C29355) * C13261 + (C29358 - C29357) * C89093) *
                 C25849 +
             ((C31375 - C31376) * C13261 + (C31377 - C31378) * C89093) *
                 C25850) *
                C89217) *
               C89189) *
              C89299 +
          (((((C195 - C194) * C13261 + (C197 - C196) * C89093) * C25848 +
             ((C1845 - C1846) * C13261 + (C1847 - C1848) * C89093) * C25849 +
             C27150 * C25850) *
                C89308 +
            (((C1846 - C1845) * C13261 + (C1848 - C1847) * C89093) * C25848 +
             ((C1853 - C1854) * C13261 + (C1855 - C1856) * C89093) * C25849 +
             ((C27140 - C27141) * C13261 + (C27142 - C27143) * C89093) *
                 C25850) *
                C89217) *
               C5073 +
           ((((C941 - C940) * C13261 + (C943 - C942) * C89093) * C25848 +
             ((C4220 - C4221) * C13261 + (C4222 - C4223) * C89093) * C25849 +
             ((C29359 - C29360) * C13261 + (C29361 - C29362) * C89093) *
                 C25850) *
                C89308 +
            (((C4221 - C4220) * C13261 + (C4223 - C4222) * C89093) * C25848 +
             ((C29360 - C29359) * C13261 + (C29362 - C29361) * C89093) *
                 C25849 +
             ((C180 * C29239 - C89236 * C29348) * C13261 +
              (C180 * C29241 - C89236 * C29349) * C89093) *
                 C25850) *
                C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eexz[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C89247 * C264 - C263 * C106) * C13261 +
              (C89247 * C270 - C263 * C113) * C89093) *
                 C13258 +
             ((C13956 - C13957) * C13261 + (C13958 - C13959) * C89093) *
                 C13259 +
             C13981 * C13260) *
                C89308 +
            (((C263 * C1724 - C89247 * C1934) * C13261 +
              (C263 * C1735 - C89247 * C1942) * C89093) *
                 C13258 +
             ((C16928 - C16929) * C13261 + (C16930 - C16931) * C89093) *
                 C13259 +
             ((C16932 - C16933) * C13261 + (C16934 - C16935) * C89093) *
                 C13260) *
                C89217) *
               C5073 +
           ((((C13957 - C13956) * C13261 + (C13959 - C13958) * C89093) *
                 C13258 +
             ((C13961 - C13960) * C13261 + (C13963 - C13962) * C89093) *
                 C13259 +
             C18435 * C13260) *
                C89308 +
            (((C16929 - C16928) * C13261 + (C16931 - C16930) * C89093) *
                 C13258 +
             ((C16933 - C16932) * C13261 + (C16935 - C16934) * C89093) *
                 C13259 +
             ((C89247 * C16923 - C263 * C16683) * C13261 +
              (C89247 * C16925 - C263 * C16686) * C89093) *
                 C13260) *
                C89217) *
               C89189) *
              C89299 +
          (((((C278 - C277) * C13261 + (C280 - C279) * C89093) * C13258 +
             ((C1046 - C1047) * C13261 + (C1048 - C1049) * C89093) * C13259 +
             C13980 * C13260) *
                C89308 +
            (((C1952 - C1951) * C13261 + (C1954 - C1953) * C89093) * C13258 +
             ((C4334 - C4335) * C13261 + (C4336 - C4337) * C89093) * C13259 +
             ((C16936 - C16937) * C13261 + (C16938 - C16939) * C89093) *
                 C13260) *
                C89217) *
               C5073 +
           ((((C1047 - C1046) * C13261 + (C1049 - C1048) * C89093) * C13258 +
             ((C1054 - C1055) * C13261 + (C1056 - C1057) * C89093) * C13259 +
             ((C13970 - C13971) * C13261 + (C13972 - C13973) * C89093) *
                 C13260) *
                C89308 +
            (((C4335 - C4334) * C13261 + (C4337 - C4336) * C89093) * C13258 +
             ((C16937 - C16936) * C13261 + (C16939 - C16938) * C89093) *
                 C13259 +
             ((C263 * C16684 - C89247 * C16924) * C13261 +
              (C263 * C16688 - C89247 * C16926) * C89093) *
                 C13260) *
                C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C100 +
             (C89247 * C270 - C263 * C113) * C89 + (C277 - C278) * C102 +
             (C279 - C280) * C90 + C293 * C104 + C294 * C91) *
                C89236 * C89308 +
            ((C263 * C1724 - C89247 * C1934) * C100 +
             (C263 * C1735 - C89247 * C1942) * C89 + (C1951 - C1952) * C102 +
             (C1953 - C1954) * C90 + C3515 * C104 + C3516 * C91) *
                C89236 * C89217) *
               C5073 +
           (((C263 * C819 - C89247 * C1029) * C100 +
             (C263 * C830 - C89247 * C1037) * C89 + (C1046 - C1047) * C102 +
             (C1048 - C1049) * C90 + C2792 * C104 + C2793 * C91) *
                C89236 * C89308 +
            ((C89247 * C4325 - C263 * C4097) * C100 +
             (C89247 * C4329 - C263 * C4102) * C89 + (C4334 - C4335) * C102 +
             (C4336 - C4337) * C90 + (C4338 - C4339) * C104 +
             (C4340 - C4341) * C91) *
                C89236 * C89217) *
               C89189) *
              C89299 +
          ((((C278 - C277) * C100 + (C280 - C279) * C89 + (C282 - C281) * C102 +
             (C284 - C283) * C90 + C295 * C104 + C296 * C91) *
                C89236 * C89308 +
            ((C1952 - C1951) * C100 + (C1954 - C1953) * C89 +
             (C1956 - C1955) * C102 + (C1958 - C1957) * C90 +
             (C3517 - C3518) * C104 + (C3519 - C3520) * C91) *
                C89236 * C89217) *
               C5073 +
           (((C1047 - C1046) * C100 + (C1049 - C1048) * C89 +
             (C1051 - C1050) * C102 + (C1053 - C1052) * C90 +
             (C2794 - C2795) * C104 + (C2796 - C2797) * C91) *
                C89236 * C89308 +
            ((C4335 - C4334) * C100 + (C4337 - C4336) * C89 +
             (C4339 - C4338) * C102 + (C4341 - C4340) * C90 +
             (C263 * C4100 - C89247 * C4328) * C104 +
             (C263 * C4108 - C89247 * C4332) * C91) *
                C89236 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C25848 * C264 - C25951 * C106 + C25849 * C1934 - C25952 * C1724 +
              C25850 * C1937 - C25953 * C1725) *
                 C13261 +
             (C25848 * C270 - C25951 * C113 + C25849 * C1942 - C25952 * C1735 +
              C25850 * C1945 - C25953 * C1737) *
                 C89093) *
                C89236 * C89308 +
            ((C25951 * C1724 - C25848 * C1934 + C25952 * C1725 -
              C25849 * C1937 + C25953 * C10544 - C25850 * C10660) *
                 C13261 +
             (C25951 * C1735 - C25848 * C1942 + C25952 * C1737 -
              C25849 * C1945 + C25953 * C10550 - C25850 * C10663) *
                 C89093) *
                C89236 * C89217) *
               C5073 +
           (((C25951 * C819 - C25848 * C1029 + C25952 * C4097 - C25849 * C4325 +
              C25953 * C6249 - C25850 * C6413) *
                 C13261 +
             (C25951 * C830 - C25848 * C1037 + C25952 * C4102 - C25849 * C4329 +
              C25953 * C6255 - C25850 * C6416) *
                 C89093) *
                C89236 * C89308 +
            ((C25848 * C4325 - C25951 * C4097 + C25849 * C6413 -
              C25952 * C6249 + C25850 * C23264 - C25953 * C23153) *
                 C13261 +
             (C25848 * C4329 - C25951 * C4102 + C25849 * C6416 -
              C25952 * C6255 + C25850 * C23266 - C25953 * C23157) *
                 C89093) *
                C89236 * C89217) *
               C89189) *
              C89299 +
          ((((C25951 * C107 - C25848 * C265 + C25952 * C1723 - C25849 * C1935 +
              C25953 * C1726 - C25850 * C1938) *
                 C13261 +
             (C25951 * C115 - C25848 * C271 + C25952 * C1733 - C25849 * C1943 +
              C25953 * C1739 - C25850 * C1946) *
                 C89093) *
                C89236 * C89308 +
            ((C25848 * C1935 - C25951 * C1723 + C25849 * C1938 -
              C25952 * C1726 + C25850 * C10661 - C25953 * C10543) *
                 C13261 +
             (C25848 * C1943 - C25951 * C1733 + C25849 * C1946 -
              C25952 * C1739 + C25850 * C10664 - C25953 * C10548) *
                 C89093) *
                C89236 * C89217) *
               C5073 +
           (((C25848 * C1030 - C25951 * C818 + C25849 * C4326 - C25952 * C4098 +
              C25850 * C6414 - C25953 * C6248) *
                 C13261 +
             (C25848 * C1038 - C25951 * C828 + C25849 * C4330 - C25952 * C4104 +
              C25850 * C6417 - C25953 * C6253) *
                 C89093) *
                C89236 * C89308 +
            ((C25951 * C4098 - C25848 * C4326 + C25952 * C6248 -
              C25849 * C6414 + C25953 * C29239 - C25850 * C29460) *
                 C13261 +
             (C25951 * C4104 - C25848 * C4330 + C25952 * C6253 -
              C25849 * C6417 + C25953 * C29241 - C25850 * C29461) *
                 C89093) *
                C89236 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C13313 +
             (C89093 * C352 - C13261 * C346) * C13258 +
             (C14060 - C14061) * C13314 + (C14062 - C14063) * C13259 +
             C14084 * C13315 + C14085 * C13260) *
                C89247 * C89308 +
            ((C13261 * C1724 - C89093 * C1734) * C13313 +
             (C13261 * C2040 - C89093 * C2048) * C13258 +
             (C17042 - C17043) * C13314 + (C17044 - C17045) * C13259 +
             (C17046 - C17047) * C13315 + (C17048 - C17049) * C13260) *
                C89247 * C89217) *
               C5073 +
           (((C14061 - C14060) * C13313 + (C14063 - C14062) * C13258 +
             (C14065 - C14064) * C13314 + (C14067 - C14066) * C13259 +
             C18488 * C13315 + C18489 * C13260) *
                C89247 * C89308 +
            ((C17043 - C17042) * C13313 + (C17045 - C17044) * C13258 +
             (C17047 - C17046) * C13314 + (C17049 - C17048) * C13259 +
             (C89093 * C16685 - C13261 * C16683) * C13315 +
             (C89093 * C17039 - C13261 * C17037) * C13260) *
                C89247 * C89217) *
               C89189) *
              C89299 +
          ((((C13261 * C107 - C89093 * C114) * C13313 +
             (C13261 * C347 - C89093 * C353) * C13258 +
             (C14072 - C14073) * C13314 + (C14074 - C14075) * C13259 +
             C14086 * C13315 + C14087 * C13260) *
                C89247 * C89308 +
            ((C89093 * C1732 - C13261 * C1723) * C13313 +
             (C89093 * C2049 - C13261 * C2041) * C13258 +
             (C17050 - C17051) * C13314 + (C17052 - C17053) * C13259 +
             (C17054 - C17055) * C13315 + (C17056 - C17057) * C13260) *
                C89247 * C89217) *
               C5073 +
           (((C14073 - C14072) * C13313 + (C14075 - C14074) * C13258 +
             (C14077 - C14076) * C13314 + (C14079 - C14078) * C13259 +
             (C14080 - C14081) * C13315 + (C14082 - C14083) * C13260) *
                C89247 * C89308 +
            ((C17051 - C17050) * C13313 + (C17053 - C17052) * C13258 +
             (C17055 - C17054) * C13314 + (C17057 - C17056) * C13259 +
             (C13261 * C16684 - C89093 * C16687) * C13315 +
             (C13261 * C17038 - C89093 * C17040) * C13260) *
                C89247 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 + C91 * C116 -
              C104 * C108) *
                 C180 +
             (C89 * C352 - C100 * C346 + C90 * C353 - C102 * C347 + C91 * C354 -
              C104 * C348) *
                 C89236) *
                C89247 * C89308 +
            ((C100 * C1724 - C89 * C1734 + C102 * C1723 - C90 * C1732 +
              C104 * C1722 - C91 * C1730) *
                 C180 +
             (C100 * C2040 - C89 * C2048 + C102 * C2041 - C90 * C2049 +
              C104 * C2042 - C91 * C2050) *
                 C89236) *
                C89247 * C89217) *
               C5073 +
           (((C100 * C819 - C89 * C829 + C102 * C818 - C90 * C827 +
              C104 * C817 - C91 * C825) *
                 C180 +
             (C100 * C1135 - C89 * C1143 + C102 * C1136 - C90 * C1144 +
              C104 * C1137 - C91 * C1145) *
                 C89236) *
                C89247 * C89308 +
            ((C89 * C4101 - C100 * C4097 + C90 * C4103 - C102 * C4098 +
              C91 * C4105 - C104 * C4099) *
                 C180 +
             (C89 * C4443 - C100 * C4439 + C90 * C4444 - C102 * C4440 +
              C91 * C4445 - C104 * C4441) *
                 C89236) *
                C89247 * C89217) *
               C89189) *
              C89299 +
          ((((C100 * C107 - C89 * C114 + C102 * C108 - C90 * C116 +
              C104 * C109 - C91 * C118) *
                 C180 +
             (C100 * C347 - C89 * C353 + C102 * C348 - C90 * C354 +
              C104 * C349 - C91 * C355) *
                 C89236) *
                C89247 * C89308 +
            ((C89 * C1732 - C100 * C1723 + C90 * C1730 - C102 * C1722 +
              C91 * C1742 - C104 * C1728) *
                 C180 +
             (C89 * C2049 - C100 * C2041 + C90 * C2050 - C102 * C2042 +
              C91 * C2054 - C104 * C2046) *
                 C89236) *
                C89247 * C89217) *
               C5073 +
           (((C89 * C827 - C100 * C818 + C90 * C825 - C102 * C817 + C91 * C837 -
              C104 * C823) *
                 C180 +
             (C89 * C1144 - C100 * C1136 + C90 * C1145 - C102 * C1137 +
              C91 * C1149 - C104 * C1141) *
                 C89236) *
                C89247 * C89308 +
            ((C100 * C4098 - C89 * C4103 + C102 * C4099 - C90 * C4105 +
              C104 * C4100 - C91 * C4107) *
                 C180 +
             (C100 * C4440 - C89 * C4444 + C102 * C4441 - C90 * C4445 +
              C104 * C4442 - C91 * C4446) *
                 C89236) *
                C89247 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C89093 * C112 - C13261 * C106) * C180 +
              (C89093 * C352 - C13261 * C346) * C89236) *
                 C25848 +
             ((C27308 - C27309) * C180 + (C27310 - C27311) * C89236) * C25849 +
             C27340 * C25850) *
                C89308 +
            (((C27309 - C27308) * C180 + (C27311 - C27310) * C89236) * C25848 +
             ((C27313 - C27312) * C180 + (C27315 - C27314) * C89236) * C25849 +
             ((C27316 - C27317) * C180 + (C27318 - C27319) * C89236) * C25850) *
                C89217) *
               C5073 +
           ((((C14061 - C14060) * C180 + (C14063 - C14062) * C89236) * C25848 +
             ((C17042 - C17043) * C180 + (C17044 - C17045) * C89236) * C25849 +
             C31542 * C25850) *
                C89308 +
            (((C17043 - C17042) * C180 + (C17045 - C17044) * C89236) * C25848 +
             ((C19096 - C19097) * C180 + (C19098 - C19099) * C89236) * C25849 +
             ((C31536 - C31537) * C180 + (C31538 - C31539) * C89236) * C25850) *
                C89217) *
               C89189) *
              C89299 +
          (((((C13261 * C107 - C89093 * C114) * C180 +
              (C13261 * C347 - C89093 * C353) * C89236) *
                 C25848 +
             ((C27320 - C27321) * C180 + (C27322 - C27323) * C89236) * C25849 +
             C27341 * C25850) *
                C89308 +
            (((C27321 - C27320) * C180 + (C27323 - C27322) * C89236) * C25848 +
             ((C27325 - C27324) * C180 + (C27327 - C27326) * C89236) * C25849 +
             ((C27328 - C27329) * C180 + (C27330 - C27331) * C89236) * C25850) *
                C89217) *
               C5073 +
           ((((C14073 - C14072) * C180 + (C14075 - C14074) * C89236) * C25848 +
             ((C17050 - C17051) * C180 + (C17052 - C17053) * C89236) * C25849 +
             ((C29563 - C29564) * C180 + (C29565 - C29566) * C89236) * C25850) *
                C89308 +
            (((C17051 - C17050) * C180 + (C17053 - C17052) * C89236) * C25848 +
             ((C29564 - C29563) * C180 + (C29566 - C29565) * C89236) * C25849 +
             ((C13261 * C29239 - C89093 * C29240) * C180 +
              (C13261 * C29560 - C89093 * C29561) * C89236) *
                 C25850) *
                C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13313 * C181 - C13466 * C106 - C13313 * C346 + C13258 * C409 +
             C13314 * C923 - C13467 * C819 - C13314 * C1135 + C13259 * C1227 +
             C13315 * C926 - C13468 * C820 - C13315 * C1138 + C13260 * C1228) *
                C89093 * C89247 * C89308 -
            (C13315 * C8600 - C13468 * C8516 - C13315 * C8760 + C13260 * C8842 +
             C13314 * C4211 - C13467 * C4097 - C13314 * C4439 + C13259 * C4545 +
             C13313 * C1828 - C13466 * C1724 - C13313 * C2040 +
             C13258 * C2132) *
                C89093 * C89247 * C89217) *
               C5073 +
           ((C13313 * C4211 - C13466 * C4097 - C13313 * C4439 + C13258 * C4545 +
             C13314 * C8600 - C13467 * C8516 - C13314 * C8760 + C13259 * C8842 +
             C13315 * C16821 - C13468 * C16683 - C13315 * C17037 +
             C13260 * C17155) *
                C89093 * C89247 * C89217 -
            (C13315 * C5787 - C13468 * C5727 - C13315 * C5899 + C13260 * C5957 +
             C13314 * C926 - C13467 * C820 - C13314 * C1138 + C13259 * C1228 +
             C13313 * C923 - C13466 * C819 - C13313 * C1135 + C13258 * C1227) *
                C89093 * C89247 * C89308) *
               C89189) *
              C89299 +
          (((C13313 * C1829 - C13466 * C1723 - C13313 * C2041 + C13258 * C2131 +
             C13314 * C4212 - C13467 * C4098 - C13314 * C4440 + C13259 * C4546 +
             C13315 * C8601 - C13468 * C8515 - C13315 * C8761 +
             C13260 * C8841) *
                C89093 * C89247 * C89217 -
            (C13315 * C927 - C13468 * C821 - C13315 * C1139 + C13260 * C1229 +
             C13314 * C924 - C13467 * C818 - C13314 * C1136 + C13259 * C1226 +
             C13313 * C182 - C13466 * C107 - C13313 * C347 + C13258 * C410) *
                C89093 * C89247 * C89308) *
               C5073 +
           ((C13313 * C924 - C13466 * C818 - C13313 * C1136 + C13258 * C1226 +
             C13314 * C927 - C13467 * C821 - C13314 * C1139 + C13259 * C1229 +
             C13315 * C5788 - C13468 * C5726 - C13315 * C5900 +
             C13260 * C5956) *
                C89093 * C89247 * C89308 -
            (C13315 * C16822 - C13468 * C16684 - C13315 * C17038 +
             C13260 * C17156 + C13314 * C8601 - C13467 * C8515 -
             C13314 * C8761 + C13259 * C8841 + C13313 * C4212 - C13466 * C4098 -
             C13313 * C4440 + C13258 * C4546) *
                C89093 * C89247 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C89 +
             C440 * C90 + C441 * C91) *
                C89247 * C89308 -
            (C2163 * C91 + C2164 * C90 +
             (C180 * C1828 - C408 * C1724 - C180 * C2040 + C89236 * C2132) *
                 C89) *
                C89247 * C89217) *
               C5073 +
           (((C180 * C4211 - C408 * C4097 - C180 * C4439 + C89236 * C4545) *
                 C89 +
             C4562 * C90 + C4563 * C91) *
                C89247 * C89217 -
            (C1258 * C91 + C1259 * C90 +
             (C180 * C923 - C408 * C819 - C180 * C1135 + C89236 * C1227) *
                 C89) *
                C89247 * C89308) *
               C89189) *
              C89299 +
          (((C2164 * C89 + C2163 * C90 + C3678 * C91) * C89247 * C89217 -
            (C442 * C91 + C441 * C90 + C440 * C89) * C89247 * C89308) *
               C5073 +
           ((C1259 * C89 + C1258 * C90 + C2955 * C91) * C89247 * C89308 -
            ((C180 * C4214 - C408 * C4100 - C180 * C4442 + C89236 * C4548) *
                 C91 +
             C4563 * C90 + C4562 * C89) *
                C89247 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) *
                 C89093 * C25848 +
             C27448 * C25849 + C27449 * C25850) *
                C89308 -
            (C27450 * C25850 + C27449 * C25849 + C27448 * C25848) * C89217) *
               C5073 +
           ((C29688 * C25848 + C29689 * C25849 + C31625 * C25850) * C89217 -
            (C29689 * C25850 + C29688 * C25849 +
             (C180 * C923 - C408 * C819 - C180 * C1135 + C89236 * C1227) *
                 C89093 * C25848) *
                C89308) *
               C89189) *
              C89299 +
          (((C27430 * C25848 + C27431 * C25849 + C27451 * C25850) * C89217 -
            (C27431 * C25850 + C27430 * C25849 + C440 * C89093 * C25848) *
                C89308) *
               C5073 +
           ((C1259 * C89093 * C25848 + C29674 * C25849 + C29690 * C25850) *
                C89308 -
            ((C180 * C29348 - C408 * C29239 - C180 * C29560 + C89236 * C29664) *
                 C89093 * C25850 +
             C29690 * C25849 + C29674 * C25848) *
                C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C13313 +
             (C89247 * C493 - C263 * C346) * C13258 +
             (C13956 - C13957) * C13314 + (C14240 - C14241) * C13259 +
             C13974 * C13315 + C14249 * C13260) *
                C89093 * C89308 +
            ((C263 * C1724 - C89247 * C1934) * C13313 +
             (C263 * C2040 - C89247 * C2240) * C13258 +
             (C16928 - C16929) * C13314 + (C17258 - C17259) * C13259 +
             (C16932 - C16933) * C13315 + (C17260 - C17261) * C13260) *
                C89093 * C89217) *
               C5073 +
           (((C13957 - C13956) * C13313 + (C14241 - C14240) * C13258 +
             (C13961 - C13960) * C13314 + (C14243 - C14242) * C13259 +
             C18427 * C13315 + C18596 * C13260) *
                C89093 * C89308 +
            ((C16929 - C16928) * C13313 + (C17259 - C17258) * C13258 +
             (C16933 - C16932) * C13314 + (C17261 - C17260) * C13259 +
             (C89247 * C16923 - C263 * C16683) * C13315 +
             (C89247 * C17255 - C263 * C17037) * C13260) *
                C89093 * C89217) *
               C89189) *
              C89299 +
          ((((C278 - C277) * C13313 + (C501 - C500) * C13258 +
             (C1046 - C1047) * C13314 + (C1344 - C1345) * C13259 +
             C13968 * C13315 + C14246 * C13260) *
                C89093 * C89308 +
            ((C1952 - C1951) * C13313 + (C2250 - C2249) * C13258 +
             (C4334 - C4335) * C13314 + (C4666 - C4667) * C13259 +
             (C16936 - C16937) * C13315 + (C17262 - C17263) * C13260) *
                C89093 * C89217) *
               C5073 +
           (((C1047 - C1046) * C13313 + (C1345 - C1344) * C13258 +
             (C1054 - C1055) * C13314 + (C1348 - C1349) * C13259 +
             (C13970 - C13971) * C13315 + (C14247 - C14248) * C13260) *
                C89093 * C89308 +
            ((C4335 - C4334) * C13313 + (C4667 - C4666) * C13258 +
             (C16937 - C16936) * C13314 + (C17263 - C17262) * C13259 +
             (C263 * C16684 - C89247 * C16924) * C13315 +
             (C263 * C17038 - C89247 * C17256) * C13260) *
                C89093 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C89247 * C264 - C263 * C106) * C180 +
              (C89247 * C493 - C263 * C346) * C89236) *
                 C89 +
             ((C277 - C278) * C180 + (C500 - C501) * C89236) * C90 +
             C514 * C91) *
                C89308 +
            (((C263 * C1724 - C89247 * C1934) * C180 +
              (C263 * C2040 - C89247 * C2240) * C89236) *
                 C89 +
             ((C1951 - C1952) * C180 + (C2249 - C2250) * C89236) * C90 +
             C3759 * C91) *
                C89217) *
               C5073 +
           ((((C263 * C819 - C89247 * C1029) * C180 +
              (C263 * C1135 - C89247 * C1335) * C89236) *
                 C89 +
             ((C1046 - C1047) * C180 + (C1344 - C1345) * C89236) * C90 +
             C3036 * C91) *
                C89308 +
            (((C89247 * C4325 - C263 * C4097) * C180 +
              (C89247 * C4661 - C263 * C4439) * C89236) *
                 C89 +
             ((C4334 - C4335) * C180 + (C4666 - C4667) * C89236) * C90 +
             ((C4338 - C4339) * C180 + (C4668 - C4669) * C89236) * C91) *
                C89217) *
               C89189) *
              C89299 +
          (((((C278 - C277) * C180 + (C501 - C500) * C89236) * C89 +
             ((C282 - C281) * C180 + (C504 - C503) * C89236) * C90 +
             C515 * C91) *
                C89308 +
            (((C1952 - C1951) * C180 + (C2250 - C2249) * C89236) * C89 +
             ((C1956 - C1955) * C180 + (C2252 - C2251) * C89236) * C90 +
             ((C3517 - C3518) * C180 + (C3756 - C3757) * C89236) * C91) *
                C89217) *
               C5073 +
           ((((C1047 - C1046) * C180 + (C1345 - C1344) * C89236) * C89 +
             ((C1051 - C1050) * C180 + (C1347 - C1346) * C89236) * C90 +
             ((C2794 - C2795) * C180 + (C3033 - C3034) * C89236) * C91) *
                C89308 +
            (((C4335 - C4334) * C180 + (C4667 - C4666) * C89236) * C89 +
             ((C4339 - C4338) * C180 + (C4669 - C4668) * C89236) * C90 +
             ((C263 * C4100 - C89247 * C4328) * C180 +
              (C263 * C4442 - C89247 * C4664) * C89236) *
                 C91) *
                C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C25848 * C264 - C25951 * C106 + C25849 * C1934 - C25952 * C1724 +
              C25850 * C1937 - C25953 * C1725) *
                 C180 +
             (C25848 * C493 - C25951 * C346 + C25849 * C2240 - C25952 * C2040 +
              C25850 * C2243 - C25953 * C2043) *
                 C89236) *
                C89093 * C89308 +
            ((C25951 * C1724 - C25848 * C1934 + C25952 * C1725 -
              C25849 * C1937 + C25953 * C10544 - C25850 * C10660) *
                 C180 +
             (C25951 * C2040 - C25848 * C2240 + C25952 * C2043 -
              C25849 * C2243 + C25953 * C10716 - C25850 * C10825) *
                 C89236) *
                C89093 * C89217) *
               C5073 +
           (((C25951 * C819 - C25848 * C1029 + C25952 * C4097 - C25849 * C4325 +
              C25953 * C6249 - C25850 * C6413) *
                 C180 +
             (C25951 * C1135 - C25848 * C1335 + C25952 * C4439 -
              C25849 * C4661 + C25953 * C6493 - C25850 * C6650) *
                 C89236) *
                C89093 * C89308 +
            ((C25848 * C4325 - C25951 * C4097 + C25849 * C6413 -
              C25952 * C6249 + C25850 * C23264 - C25953 * C23153) *
                 C180 +
             (C25848 * C4661 - C25951 * C4439 + C25849 * C6650 -
              C25952 * C6493 + C25850 * C23424 - C25953 * C23318) *
                 C89236) *
                C89093 * C89217) *
               C89189) *
              C89299 +
          ((((C25951 * C107 - C25848 * C265 + C25952 * C1723 - C25849 * C1935 +
              C25953 * C1726 - C25850 * C1938) *
                 C180 +
             (C25951 * C347 - C25848 * C494 + C25952 * C2041 - C25849 * C2241 +
              C25953 * C2044 - C25850 * C2244) *
                 C89236) *
                C89093 * C89308 +
            ((C25848 * C1935 - C25951 * C1723 + C25849 * C1938 -
              C25952 * C1726 + C25850 * C10661 - C25953 * C10543) *
                 C180 +
             (C25848 * C2241 - C25951 * C2041 + C25849 * C2244 -
              C25952 * C2044 + C25850 * C10826 - C25953 * C10717) *
                 C89236) *
                C89093 * C89217) *
               C5073 +
           (((C25848 * C1030 - C25951 * C818 + C25849 * C4326 - C25952 * C4098 +
              C25850 * C6414 - C25953 * C6248) *
                 C180 +
             (C25848 * C1336 - C25951 * C1136 + C25849 * C4662 -
              C25952 * C4440 + C25850 * C6651 - C25953 * C6494) *
                 C89236) *
                C89093 * C89308 +
            ((C25951 * C4098 - C25848 * C4326 + C25952 * C6248 -
              C25849 * C6414 + C25953 * C29239 - C25850 * C29460) *
                 C180 +
             (C25951 * C4440 - C25848 * C4662 + C25952 * C6494 -
              C25849 * C6651 + C25953 * C29560 - C25850 * C29788) *
                 C89236) *
                C89093 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eezx[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C89093 * C112 - C13261 * C106) * C263 +
              (C89093 * C571 - C13261 * C565) * C89247) *
                 C13258 +
             ((C14060 - C14061) * C263 + (C14328 - C14329) * C89247) * C13259 +
             C14346 * C13260) *
                C89308 +
            (((C13261 * C1724 - C89093 * C1734) * C263 +
              (C13261 * C2330 - C89093 * C2338) * C89247) *
                 C13258 +
             ((C17042 - C17043) * C263 + (C17366 - C17367) * C89247) * C13259 +
             ((C17046 - C17047) * C263 + (C17368 - C17369) * C89247) * C13260) *
                C89217) *
               C5073 +
           ((((C14061 - C14060) * C263 + (C14329 - C14328) * C89247) * C13258 +
             ((C14065 - C14064) * C263 + (C14332 - C14331) * C89247) * C13259 +
             C18656 * C13260) *
                C89308 +
            (((C17043 - C17042) * C263 + (C17367 - C17366) * C89247) * C13258 +
             ((C17047 - C17046) * C263 + (C17369 - C17368) * C89247) * C13259 +
             ((C89093 * C16685 - C13261 * C16683) * C263 +
              (C89093 * C17363 - C13261 * C17361) * C89247) *
                 C13260) *
                C89217) *
               C89189) *
              C89299 +
          (((((C13261 * C107 - C89093 * C114) * C263 +
              (C13261 * C566 - C89093 * C572) * C89247) *
                 C13258 +
             ((C14072 - C14073) * C263 + (C14335 - C14336) * C89247) * C13259 +
             C14347 * C13260) *
                C89308 +
            (((C89093 * C1732 - C13261 * C1723) * C263 +
              (C89093 * C2339 - C13261 * C2331) * C89247) *
                 C13258 +
             ((C17050 - C17051) * C263 + (C17370 - C17371) * C89247) * C13259 +
             ((C17054 - C17055) * C263 + (C17372 - C17373) * C89247) * C13260) *
                C89217) *
               C5073 +
           ((((C14073 - C14072) * C263 + (C14336 - C14335) * C89247) * C13258 +
             ((C14077 - C14076) * C263 + (C14339 - C14338) * C89247) * C13259 +
             ((C14080 - C14081) * C263 + (C14340 - C14341) * C89247) * C13260) *
                C89308 +
            (((C17051 - C17050) * C263 + (C17371 - C17370) * C89247) * C13258 +
             ((C17055 - C17054) * C263 + (C17373 - C17372) * C89247) * C13259 +
             ((C13261 * C16684 - C89093 * C16687) * C263 +
              (C13261 * C17362 - C89093 * C17364) * C89247) *
                 C13260) *
                C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 + C91 * C116 -
              C104 * C108) *
                 C263 +
             (C89 * C571 - C100 * C565 + C90 * C572 - C102 * C566 + C91 * C573 -
              C104 * C567) *
                 C89247) *
                C89236 * C89308 +
            ((C100 * C1724 - C89 * C1734 + C102 * C1723 - C90 * C1732 +
              C104 * C1722 - C91 * C1730) *
                 C263 +
             (C100 * C2330 - C89 * C2338 + C102 * C2331 - C90 * C2339 +
              C104 * C2332 - C91 * C2340) *
                 C89247) *
                C89236 * C89217) *
               C5073 +
           (((C100 * C819 - C89 * C829 + C102 * C818 - C90 * C827 +
              C104 * C817 - C91 * C825) *
                 C263 +
             (C100 * C1425 - C89 * C1433 + C102 * C1426 - C90 * C1434 +
              C104 * C1427 - C91 * C1435) *
                 C89247) *
                C89236 * C89308 +
            ((C89 * C4101 - C100 * C4097 + C90 * C4103 - C102 * C4098 +
              C91 * C4105 - C104 * C4099) *
                 C263 +
             (C89 * C4771 - C100 * C4767 + C90 * C4772 - C102 * C4768 +
              C91 * C4773 - C104 * C4769) *
                 C89247) *
                C89236 * C89217) *
               C89189) *
              C89299 +
          ((((C100 * C107 - C89 * C114 + C102 * C108 - C90 * C116 +
              C104 * C109 - C91 * C118) *
                 C263 +
             (C100 * C566 - C89 * C572 + C102 * C567 - C90 * C573 +
              C104 * C568 - C91 * C574) *
                 C89247) *
                C89236 * C89308 +
            ((C89 * C1732 - C100 * C1723 + C90 * C1730 - C102 * C1722 +
              C91 * C1742 - C104 * C1728) *
                 C263 +
             (C89 * C2339 - C100 * C2331 + C90 * C2340 - C102 * C2332 +
              C91 * C2344 - C104 * C2336) *
                 C89247) *
                C89236 * C89217) *
               C5073 +
           (((C89 * C827 - C100 * C818 + C90 * C825 - C102 * C817 + C91 * C837 -
              C104 * C823) *
                 C263 +
             (C89 * C1434 - C100 * C1426 + C90 * C1435 - C102 * C1427 +
              C91 * C1439 - C104 * C1431) *
                 C89247) *
                C89236 * C89308 +
            ((C100 * C4098 - C89 * C4103 + C102 * C4099 - C90 * C4105 +
              C104 * C4100 - C91 * C4107) *
                 C263 +
             (C100 * C4768 - C89 * C4772 + C102 * C4769 - C90 * C4773 +
              C104 * C4770 - C91 * C4774) *
                 C89247) *
                C89236 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C25951 +
             (C89093 * C571 - C13261 * C565) * C25848 +
             (C27308 - C27309) * C25952 + (C27606 - C27607) * C25849 +
             C27332 * C25953 + C27618 * C25850) *
                C89236 * C89308 +
            ((C27309 - C27308) * C25951 + (C27607 - C27606) * C25848 +
             (C27313 - C27312) * C25952 + (C27609 - C27608) * C25849 +
             (C27316 - C27317) * C25953 + (C27610 - C27611) * C25850) *
                C89236 * C89217) *
               C5073 +
           (((C14061 - C14060) * C25951 + (C14329 - C14328) * C25848 +
             (C17042 - C17043) * C25952 + (C17366 - C17367) * C25849 +
             C31534 * C25953 + C31777 * C25850) *
                C89236 * C89308 +
            ((C17043 - C17042) * C25951 + (C17367 - C17366) * C25848 +
             (C19096 - C19097) * C25952 + (C19334 - C19335) * C25849 +
             (C31536 - C31537) * C25953 + (C31778 - C31779) * C25850) *
                C89236 * C89217) *
               C89189) *
              C89299 +
          ((((C13261 * C107 - C89093 * C114) * C25951 +
             (C13261 * C566 - C89093 * C572) * C25848 +
             (C27320 - C27321) * C25952 + (C27612 - C27613) * C25849 +
             C27334 * C25953 + C27619 * C25850) *
                C89236 * C89308 +
            ((C27321 - C27320) * C25951 + (C27613 - C27612) * C25848 +
             (C27325 - C27324) * C25952 + (C27615 - C27614) * C25849 +
             (C27328 - C27329) * C25953 + (C27616 - C27617) * C25850) *
                C89236 * C89217) *
               C5073 +
           (((C14073 - C14072) * C25951 + (C14336 - C14335) * C25848 +
             (C17050 - C17051) * C25952 + (C17370 - C17371) * C25849 +
             (C29563 - C29564) * C25953 + (C29890 - C29891) * C25850) *
                C89236 * C89308 +
            ((C17051 - C17050) * C25951 + (C17371 - C17370) * C25848 +
             (C29564 - C29563) * C25952 + (C29891 - C29890) * C25849 +
             (C13261 * C29239 - C89093 * C29240) * C25953 +
             (C13261 * C29887 - C89093 * C29888) * C25850) *
                C89236 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eezy[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
              C13260 * C926 - C13315 * C820) *
                 C263 +
             (C13258 * C627 - C13313 * C565 + C13259 * C1515 - C13314 * C1425 +
              C13260 * C1518 - C13315 * C1428) *
                 C89247) *
                C89093 * C89308 +
            ((C13313 * C1724 - C13258 * C1828 + C13314 * C4097 -
              C13259 * C4211 + C13315 * C8516 - C13260 * C8600) *
                 C263 +
             (C13313 * C2330 - C13258 * C2420 + C13314 * C4767 -
              C13259 * C4873 + C13315 * C8994 - C13260 * C9074) *
                 C89247) *
                C89093 * C89217) *
               C5073 +
           (((C13313 * C819 - C13258 * C923 + C13314 * C820 - C13259 * C926 +
              C13315 * C5727 - C13260 * C5787) *
                 C263 +
             (C13313 * C1425 - C13258 * C1515 + C13314 * C1428 -
              C13259 * C1518 + C13315 * C6061 - C13260 * C6117) *
                 C89247) *
                C89093 * C89308 +
            ((C13258 * C4211 - C13313 * C4097 + C13259 * C8600 -
              C13314 * C8516 + C13260 * C16821 - C13315 * C16683) *
                 C263 +
             (C13258 * C4873 - C13313 * C4767 + C13259 * C9074 -
              C13314 * C8994 + C13260 * C17471 - C13315 * C17361) *
                 C89247) *
                C89093 * C89217) *
               C89189) *
              C89299 +
          ((((C13313 * C107 - C13258 * C182 + C13314 * C818 - C13259 * C924 +
              C13315 * C821 - C13260 * C927) *
                 C263 +
             (C13313 * C566 - C13258 * C628 + C13314 * C1426 - C13259 * C1516 +
              C13315 * C1429 - C13260 * C1519) *
                 C89247) *
                C89093 * C89308 +
            ((C13258 * C1829 - C13313 * C1723 + C13259 * C4212 -
              C13314 * C4098 + C13260 * C8601 - C13315 * C8515) *
                 C263 +
             (C13258 * C2421 - C13313 * C2331 + C13259 * C4874 -
              C13314 * C4768 + C13260 * C9075 - C13315 * C8995) *
                 C89247) *
                C89093 * C89217) *
               C5073 +
           (((C13258 * C924 - C13313 * C818 + C13259 * C927 - C13314 * C821 +
              C13260 * C5788 - C13315 * C5726) *
                 C263 +
             (C13258 * C1516 - C13313 * C1426 + C13259 * C1519 -
              C13314 * C1429 + C13260 * C6118 - C13315 * C6062) *
                 C89247) *
                C89093 * C89308 +
            ((C13313 * C4098 - C13258 * C4212 + C13314 * C8515 -
              C13259 * C8601 + C13315 * C16684 - C13260 * C16822) *
                 C263 +
             (C13313 * C4768 - C13258 * C4874 + C13314 * C8995 -
              C13259 * C9075 + C13315 * C17362 - C13260 * C17472) *
                 C89247) *
                C89093 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C89236 * C181 - C180 * C106) * C263 +
              (C89236 * C627 - C180 * C565) * C89247) *
                 C89 +
             ((C194 - C195) * C263 + (C634 - C635) * C89247) * C90 +
             C648 * C91) *
                C89308 +
            (((C180 * C1724 - C89236 * C1828) * C263 +
              (C180 * C2330 - C89236 * C2420) * C89247) *
                 C89 +
             ((C1845 - C1846) * C263 + (C2429 - C2430) * C89247) * C90 +
             C3916 * C91) *
                C89217) *
               C5073 +
           ((((C180 * C819 - C89236 * C923) * C263 +
              (C180 * C1425 - C89236 * C1515) * C89247) *
                 C89 +
             ((C940 - C941) * C263 + (C1524 - C1525) * C89247) * C90 +
             C3193 * C91) *
                C89308 +
            (((C89236 * C4211 - C180 * C4097) * C263 +
              (C89236 * C4873 - C180 * C4767) * C89247) *
                 C89 +
             ((C4220 - C4221) * C263 + (C4878 - C4879) * C89247) * C90 +
             ((C4224 - C4225) * C263 + (C4880 - C4881) * C89247) * C91) *
                C89217) *
               C89189) *
              C89299 +
          (((((C195 - C194) * C263 + (C635 - C634) * C89247) * C89 +
             ((C199 - C198) * C263 + (C638 - C637) * C89247) * C90 +
             C649 * C91) *
                C89308 +
            (((C1846 - C1845) * C263 + (C2430 - C2429) * C89247) * C89 +
             ((C1850 - C1849) * C263 + (C2432 - C2431) * C89247) * C90 +
             ((C3435 - C3436) * C263 + (C3913 - C3914) * C89247) * C91) *
                C89217) *
               C5073 +
           ((((C941 - C940) * C263 + (C1525 - C1524) * C89247) * C89 +
             ((C945 - C944) * C263 + (C1527 - C1526) * C89247) * C90 +
             ((C2712 - C2713) * C263 + (C3190 - C3191) * C89247) * C91) *
                C89308 +
            (((C4221 - C4220) * C263 + (C4879 - C4878) * C89247) * C89 +
             ((C4225 - C4224) * C263 + (C4881 - C4880) * C89247) * C90 +
             ((C180 * C4100 - C89236 * C4214) * C263 +
              (C180 * C4770 - C89236 * C4876) * C89247) *
                 C91) *
                C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C25951 +
             (C89236 * C627 - C180 * C565) * C25848 +
             (C27126 - C27127) * C25952 + (C27696 - C27697) * C25849 +
             C27144 * C25953 + C27705 * C25850) *
                C89093 * C89308 +
            ((C27127 - C27126) * C25951 + (C27697 - C27696) * C25848 +
             (C27131 - C27130) * C25952 + (C27699 - C27698) * C25849 +
             (C27134 - C27135) * C25953 + (C27700 - C27701) * C25850) *
                C89093 * C89217) *
               C5073 +
           (((C180 * C819 - C89236 * C923) * C25951 +
             (C180 * C1425 - C89236 * C1515) * C25848 +
             (C29351 - C29352) * C25952 + (C29991 - C29992) * C25849 +
             C31373 * C25953 + C31855 * C25850) *
                C89093 * C89308 +
            ((C29352 - C29351) * C25951 + (C29992 - C29991) * C25848 +
             (C29356 - C29355) * C25952 + (C29994 - C29993) * C25849 +
             (C31375 - C31376) * C25953 + (C31856 - C31857) * C25850) *
                C89093 * C89217) *
               C89189) *
              C89299 +
          ((((C195 - C194) * C25951 + (C635 - C634) * C25848 +
             (C1845 - C1846) * C25952 + (C2429 - C2430) * C25849 +
             C27138 * C25953 + C27702 * C25850) *
                C89093 * C89308 +
            ((C1846 - C1845) * C25951 + (C2430 - C2429) * C25848 +
             (C1853 - C1854) * C25952 + (C2433 - C2434) * C25849 +
             (C27140 - C27141) * C25953 + (C27703 - C27704) * C25850) *
                C89093 * C89217) *
               C5073 +
           (((C941 - C940) * C25951 + (C1525 - C1524) * C25848 +
             (C4220 - C4221) * C25952 + (C4878 - C4879) * C25849 +
             (C29359 - C29360) * C25953 + (C29995 - C29996) * C25850) *
                C89093 * C89308 +
            ((C4221 - C4220) * C25951 + (C4879 - C4878) * C25848 +
             (C29360 - C29359) * C25952 + (C29996 - C29995) * C25849 +
             (C180 * C29239 - C89236 * C29348) * C25953 +
             (C180 * C29887 - C89236 * C29989) * C25850) *
                C89093 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eezz[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) *
                 C13258 +
             C14524 * C13259 + C14525 * C13260) *
                C89093 * C89308 -
            (C17592 * C13260 + C17593 * C13259 +
             (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
                 C13258) *
                C89093 * C89217) *
               C5073 +
           ((C17593 * C13258 + C17592 * C13259 +
             (C263 * C16923 - C699 * C16683 - C263 * C17361 + C89247 * C17571) *
                 C13260) *
                C89093 * C89217 -
            (C14526 * C13260 + C14525 * C13259 + C14524 * C13258) * C89093 *
                C89308) *
               C89189) *
              C89299 +
          (((C2544 * C13258 + C4996 * C13259 + C17594 * C13260) * C89093 *
                C89217 -
            (C1640 * C13260 + C1639 * C13259 + C731 * C13258) * C89093 *
                C89308) *
               C5073 +
           ((C1639 * C13258 + C1640 * C13259 + C14527 * C13260) * C89093 *
                C89308 -
            ((C263 * C16924 - C699 * C16684 - C263 * C17362 + C89247 * C17572) *
                 C13260 +
             C17594 * C13259 + C4996 * C13258) *
                C89093 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) *
                 C89236 * C89 +
             C735 * C90 + C736 * C91) *
                C89308 -
            (C2547 * C91 + C2548 * C90 +
             (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
                 C89236 * C89) *
                C89217) *
               C5073 +
           (((C263 * C4325 - C699 * C4097 - C263 * C4767 + C89247 * C4979) *
                 C89236 * C89 +
             C4998 * C90 + C4999 * C91) *
                C89217 -
            (C1642 * C91 + C1643 * C90 +
             (C263 * C1029 - C699 * C819 - C263 * C1425 + C89247 * C1607) *
                 C89236 * C89) *
                C89308) *
               C89189) *
              C89299 +
          (((C2548 * C89 + C2547 * C90 + C3999 * C91) * C89217 -
            (C737 * C91 + C736 * C90 + C735 * C89) * C89308) *
               C5073 +
           ((C1643 * C89 + C1642 * C90 + C3276 * C91) * C89308 -
            ((C263 * C4328 - C699 * C4100 - C263 * C4770 + C89247 * C4982) *
                 C89236 * C91 +
             C4999 * C90 + C4998 * C89) *
                C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C25951 * C264 - C26254 * C106 - C25951 * C565 + C25848 * C700 +
             C25952 * C1934 - C26255 * C1724 - C25952 * C2330 + C25849 * C2512 +
             C25953 * C1937 - C26256 * C1725 - C25953 * C2333 +
             C25850 * C2513) *
                C89236 * C89093 * C89308 -
            (C25953 * C10660 - C26256 * C10544 - C25953 * C10878 +
             C25850 * C10989 + C25952 * C1937 - C26255 * C1725 -
             C25952 * C2333 + C25849 * C2513 + C25951 * C1934 - C26254 * C1724 -
             C25951 * C2330 + C25848 * C2512) *
                C89236 * C89093 * C89217) *
               C5073 +
           ((C25951 * C4325 - C26254 * C4097 - C25951 * C4767 + C25848 * C4979 +
             C25952 * C6413 - C26255 * C6249 - C25952 * C6727 + C25849 * C6886 +
             C25953 * C23264 - C26256 * C23153 - C25953 * C23476 +
             C25850 * C23583) *
                C89236 * C89093 * C89217 -
            (C25953 * C6413 - C26256 * C6249 - C25953 * C6727 + C25850 * C6886 +
             C25952 * C4325 - C26255 * C4097 - C25952 * C4767 + C25849 * C4979 +
             C25951 * C1029 - C26254 * C819 - C25951 * C1425 + C25848 * C1607) *
                C89236 * C89093 * C89308) *
               C89189) *
              C89299 +
          (((C25951 * C1935 - C26254 * C1723 - C25951 * C2331 + C25848 * C2511 +
             C25952 * C1938 - C26255 * C1726 - C25952 * C2334 + C25849 * C2514 +
             C25953 * C10661 - C26256 * C10543 - C25953 * C10879 +
             C25850 * C10988) *
                C89236 * C89093 * C89217 -
            (C25953 * C1938 - C26256 * C1726 - C25953 * C2334 + C25850 * C2514 +
             C25952 * C1935 - C26255 * C1723 - C25952 * C2331 + C25849 * C2511 +
             C25951 * C265 - C26254 * C107 - C25951 * C566 + C25848 * C701) *
                C89236 * C89093 * C89308) *
               C5073 +
           ((C25951 * C1030 - C26254 * C818 - C25951 * C1426 + C25848 * C1606 +
             C25952 * C4326 - C26255 * C4098 - C25952 * C4768 + C25849 * C4980 +
             C25953 * C6414 - C26256 * C6248 - C25953 * C6728 +
             C25850 * C6885) *
                C89236 * C89093 * C89308 -
            (C25953 * C29460 - C26256 * C29239 - C25953 * C29887 +
             C25850 * C30094 + C25952 * C6414 - C26255 * C6248 -
             C25952 * C6728 + C25849 * C6885 + C25951 * C4326 - C26254 * C4098 -
             C25951 * C4768 + C25848 * C4980) *
                C89236 * C89093 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eexx[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C100 * C112 - C101 * C106 - C100 * C113 + C89 * C124 + C102 * C114 -
           C103 * C107 - C102 * C115 + C90 * C125 + C104 * C116 - C105 * C108 -
           C104 * C117 + C91 * C126) *
              C89247 * C89236 * C89153 * C5720 -
          (C104 * C825 - C105 * C817 - C104 * C826 + C91 * C841 + C102 * C827 -
           C103 * C818 - C102 * C828 + C90 * C842 + C100 * C829 - C101 * C819 -
           C100 * C830 + C89 * C843) *
              C89247 * C89236 * C89153 * C5721 +
          (C100 * C831 - C101 * C820 - C100 * C832 + C89 * C844 + C102 * C833 -
           C103 * C821 - C102 * C834 + C90 * C845 + C104 * C835 - C105 * C822 -
           C104 * C836 + C91 * C846) *
              C89247 * C89236 * C89153 * C5722 -
          (C104 * C5728 - C105 * C5725 - C104 * C5729 + C91 * C5734 +
           C102 * C5730 - C103 * C5726 - C102 * C5731 + C90 * C5735 +
           C100 * C5732 - C101 * C5727 - C100 * C5733 + C89 * C5736) *
              C89247 * C89236 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C112 - C101 * C106 - C100 * C113 + C89 * C124 + C102 * C114 -
            C103 * C107 - C102 * C115 + C90 * C125 + C104 * C116 - C105 * C108 -
            C104 * C117 + C91 * C126) *
               C89247 * C89236 * C89153 * C5073 -
           (C104 * C825 - C105 * C817 - C104 * C826 + C91 * C841 + C102 * C827 -
            C103 * C818 - C102 * C828 + C90 * C842 + C100 * C829 - C101 * C819 -
            C100 * C830 + C89 * C843) *
               C89247 * C89236 * C89153 * C89189) *
              C5075 +
          ((C100 * C827 - C101 * C818 - C100 * C828 + C89 * C842 + C102 * C825 -
            C103 * C817 - C102 * C826 + C90 * C841 + C104 * C837 - C105 * C823 -
            C104 * C838 + C91 * C847) *
               C89247 * C89236 * C89153 * C89189 -
           (C104 * C118 - C105 * C109 - C104 * C119 + C91 * C127 + C102 * C116 -
            C103 * C108 - C102 * C117 + C90 * C126 + C100 * C114 - C101 * C107 -
            C100 * C115 + C89 * C125) *
               C89247 * C89236 * C89153 * C5073) *
              C5076 +
          ((C100 * C116 - C101 * C108 - C100 * C117 + C89 * C126 + C102 * C118 -
            C103 * C109 - C102 * C119 + C90 * C127 + C104 * C120 - C105 * C110 -
            C104 * C121 + C91 * C128) *
               C89247 * C89236 * C89153 * C5073 -
           (C104 * C2630 - C105 * C2629 - C104 * C2631 + C91 * C2632 +
            C102 * C837 - C103 * C823 - C102 * C838 + C90 * C847 + C100 * C825 -
            C101 * C817 - C100 * C826 + C89 * C841) *
               C89247 * C89236 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                C89247 * C13258 +
            C13794 * C13259 + C13795 * C13260) *
               C89153 * C5073 -
           (C13796 * C13260 + C13795 * C13259 + C13794 * C13258) * C89153 *
               C89189) *
              C5075 +
          ((C13797 * C13258 + C13798 * C13259 + C13799 * C13260) * C89153 *
               C89189 -
           (C13798 * C13260 + C13797 * C13259 +
            (C13261 * C114 - C13262 * C107 - C13261 * C115 + C89093 * C125) *
                C89247 * C13258) *
               C89153 * C5073) *
              C5076 +
          (((C13261 * C116 - C13262 * C108 - C13261 * C117 + C89093 * C126) *
                C89247 * C13258 +
            C15314 * C13259 + C15315 * C13260) *
               C89153 * C5073 -
           ((C13261 * C5728 - C13262 * C5725 - C13261 * C5729 +
             C89093 * C5734) *
                C89247 * C13260 +
            C15315 * C13259 + C15314 * C13258) *
               C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
               C89247 * C13258 +
           C13794 * C13259 + C13795 * C13260) *
              C89153 * C5720 -
          (C13796 * C13260 + C13795 * C13259 + C13794 * C13258) * C89153 *
              C5721 +
          (C13795 * C13258 + C13796 * C13259 + C18322 * C13260) * C89153 *
              C5722 -
          ((C13261 * C18311 - C13262 * C18310 - C13261 * C18312 +
            C89093 * C18313) *
               C89247 * C13260 +
           C18322 * C13259 + C13796 * C13258) *
              C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                C25848 +
            C27042 * C25849 + C27043 * C25850) *
               C89236 * C89153 * C5073 -
           (C18856 * C25850 + C16717 * C25849 + C13788 * C25848) * C89236 *
               C89153 * C89189) *
              C5075 +
          ((C13791 * C25848 + C16718 * C25849 + C29250 * C25850) * C89236 *
               C89153 * C89189 -
           (C27046 * C25850 + C27045 * C25849 +
            (C13261 * C114 - C13262 * C107 - C13261 * C115 + C89093 * C125) *
                C25848) *
               C89236 * C89153 * C5073) *
              C5076 +
          (((C13261 * C116 - C13262 * C108 - C13261 * C117 + C89093 * C126) *
                C25848 +
            C28534 * C25849 + C28535 * C25850) *
               C89236 * C89153 * C5073 -
           ((C13261 * C6250 - C13262 * C6247 - C13261 * C6251 +
             C89093 * C6256) *
                C25850 +
            (C13261 * C4105 - C13262 * C4099 - C13261 * C4106 +
             C89093 * C4111) *
                C25849 +
            C15312 * C25848) *
               C89236 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
               C25848 +
           C27042 * C25849 + C27043 * C25850) *
              C89236 * C89153 * C5720 -
          (C18856 * C25850 + C16717 * C25849 + C13788 * C25848) * C89236 *
              C89153 * C5721 +
          (C13789 * C25848 + C16716 * C25849 + C18857 * C25850) * C89236 *
              C89153 * C5722 -
          ((C13261 * C18840 - C13262 * C18839 - C13261 * C18841 +
            C89093 * C18842) *
               C25850 +
           C21134 * C25849 + C13790 * C25848) *
              C89236 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eexy[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C89236 * C181 - C180 * C106) * C100 +
           (C89236 * C187 - C180 * C113) * C89 + (C194 - C195) * C102 +
           (C196 - C197) * C90 + C210 * C104 + C211 * C91) *
              C89247 * C89153 * C5720 +
          ((C180 * C819 - C89236 * C923) * C100 +
           (C180 * C830 - C89236 * C931) * C89 + (C940 - C941) * C102 +
           (C942 - C943) * C90 + C2710 * C104 + C2711 * C91) *
              C89247 * C89153 * C5721 +
          ((C89236 * C926 - C180 * C820) * C100 +
           (C89236 * C934 - C180 * C832) * C89 + (C948 - C949) * C102 +
           (C950 - C951) * C90 + (C952 - C953) * C104 + (C954 - C955) * C91) *
              C89247 * C89153 * C5722 +
          ((C180 * C5727 - C89236 * C5787) * C100 +
           (C180 * C5733 - C89236 * C5790) * C89 +
           (C180 * C5726 - C89236 * C5788) * C102 +
           (C180 * C5731 - C89236 * C5791) * C90 +
           (C180 * C5725 - C89236 * C5789) * C104 +
           (C180 * C5729 - C89236 * C5792) * C91) *
              C89247 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C89236 * C181 - C180 * C106) * C100 +
            (C89236 * C187 - C180 * C113) * C89 + (C194 - C195) * C102 +
            (C196 - C197) * C90 + C210 * C104 + C211 * C91) *
               C89247 * C89153 * C5073 +
           ((C180 * C819 - C89236 * C923) * C100 +
            (C180 * C830 - C89236 * C931) * C89 + (C940 - C941) * C102 +
            (C942 - C943) * C90 + C2710 * C104 + C2711 * C91) *
               C89247 * C89153 * C89189) *
              C5075 +
          (((C195 - C194) * C100 + (C197 - C196) * C89 + (C199 - C198) * C102 +
            (C201 - C200) * C90 + C212 * C104 + C213 * C91) *
               C89247 * C89153 * C5073 +
           ((C941 - C940) * C100 + (C943 - C942) * C89 + (C945 - C944) * C102 +
            (C947 - C946) * C90 + (C2712 - C2713) * C104 +
            (C2714 - C2715) * C91) *
               C89247 * C89153 * C89189) *
              C5076 +
          ((C210 * C100 + C211 * C89 + (C203 - C202) * C102 +
            (C205 - C204) * C90 + (C206 - C207) * C104 + (C208 - C209) * C91) *
               C89247 * C89153 * C5073 +
           (C2710 * C100 + C2711 * C89 + (C2713 - C2712) * C102 +
            (C2715 - C2714) * C90 + (C180 * C2629 - C89236 * C2707) * C104 +
            (C180 * C2631 - C89236 * C2708) * C91) *
               C89247 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
             C13260 * C926 - C13315 * C820) *
                C13261 +
            (C13258 * C187 - C13313 * C113 + C13259 * C931 - C13314 * C830 +
             C13260 * C934 - C13315 * C832) *
                C89093) *
               C89247 * C89153 * C5073 +
           ((C13313 * C819 - C13258 * C923 + C13314 * C820 - C13259 * C926 +
             C13315 * C5727 - C13260 * C5787) *
                C13261 +
            (C13313 * C830 - C13258 * C931 + C13314 * C832 - C13259 * C934 +
             C13315 * C5733 - C13260 * C5790) *
                C89093) *
               C89247 * C89153 * C89189) *
              C5075 +
          (((C13313 * C107 - C13258 * C182 + C13314 * C818 - C13259 * C924 +
             C13315 * C821 - C13260 * C927) *
                C13261 +
            (C13313 * C115 - C13258 * C188 + C13314 * C828 - C13259 * C932 +
             C13315 * C834 - C13260 * C935) *
                C89093) *
               C89247 * C89153 * C5073 +
           ((C13258 * C924 - C13313 * C818 + C13259 * C927 - C13314 * C821 +
             C13260 * C5788 - C13315 * C5726) *
                C13261 +
            (C13258 * C932 - C13313 * C828 + C13259 * C935 - C13314 * C834 +
             C13260 * C5791 - C13315 * C5731) *
                C89093) *
               C89247 * C89153 * C89189) *
              C5076 +
          (((C13258 * C183 - C13313 * C108 + C13259 * C925 - C13314 * C817 +
             C13260 * C928 - C13315 * C822) *
                C13261 +
            (C13258 * C189 - C13313 * C117 + C13259 * C933 - C13314 * C826 +
             C13260 * C936 - C13315 * C836) *
                C89093) *
               C89247 * C89153 * C5073 +
           ((C13313 * C817 - C13258 * C925 + C13314 * C822 - C13259 * C928 +
             C13315 * C5725 - C13260 * C5789) *
                C13261 +
            (C13313 * C826 - C13258 * C933 + C13314 * C836 - C13259 * C936 +
             C13315 * C5729 - C13260 * C5792) *
                C89093) *
               C89247 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
            C13260 * C926 - C13315 * C820) *
               C13261 +
           (C13258 * C187 - C13313 * C113 + C13259 * C931 - C13314 * C830 +
            C13260 * C934 - C13315 * C832) *
               C89093) *
              C89247 * C89153 * C5720 +
          ((C13313 * C819 - C13258 * C923 + C13314 * C820 - C13259 * C926 +
            C13315 * C5727 - C13260 * C5787) *
               C13261 +
           (C13313 * C830 - C13258 * C931 + C13314 * C832 - C13259 * C934 +
            C13315 * C5733 - C13260 * C5790) *
               C89093) *
              C89247 * C89153 * C5721 +
          ((C13258 * C926 - C13313 * C820 + C13259 * C5787 - C13314 * C5727 +
            C13260 * C13873 - C13315 * C13743) *
               C13261 +
           (C13258 * C934 - C13313 * C832 + C13259 * C5790 - C13314 * C5733 +
            C13260 * C13875 - C13315 * C13746) *
               C89093) *
              C89247 * C89153 * C5722 +
          ((C13313 * C5727 - C13258 * C5787 + C13314 * C13743 -
            C13259 * C13873 + C13315 * C18310 - C13260 * C18372) *
               C13261 +
           (C13313 * C5733 - C13258 * C5790 + C13314 * C13746 -
            C13259 * C13875 + C13315 * C18312 - C13260 * C18373) *
               C89093) *
              C89247 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C13261 +
             (C89236 * C187 - C180 * C113) * C89093) *
                C25848 +
            ((C27126 - C27127) * C13261 + (C27128 - C27129) * C89093) * C25849 +
            C27151 * C25850) *
               C89153 * C5073 +
           (((C180 * C819 - C89236 * C923) * C13261 +
             (C180 * C830 - C89236 * C931) * C89093) *
                C25848 +
            ((C29351 - C29352) * C13261 + (C29353 - C29354) * C89093) * C25849 +
            ((C29355 - C29356) * C13261 + (C29357 - C29358) * C89093) *
                C25850) *
               C89153 * C89189) *
              C5075 +
          ((((C195 - C194) * C13261 + (C197 - C196) * C89093) * C25848 +
            ((C1845 - C1846) * C13261 + (C1847 - C1848) * C89093) * C25849 +
            C27150 * C25850) *
               C89153 * C5073 +
           (((C941 - C940) * C13261 + (C943 - C942) * C89093) * C25848 +
            ((C4220 - C4221) * C13261 + (C4222 - C4223) * C89093) * C25849 +
            ((C29359 - C29360) * C13261 + (C29361 - C29362) * C89093) *
                C25850) *
               C89153 * C89189) *
              C5076 +
          (((C210 * C13261 + C211 * C89093) * C25848 +
            ((C1850 - C1849) * C13261 + (C1852 - C1851) * C89093) * C25849 +
            ((C1857 - C1858) * C13261 + (C1859 - C1860) * C89093) * C25850) *
               C89153 * C5073 +
           ((C2710 * C13261 + C2711 * C89093) * C25848 +
            ((C4225 - C4224) * C13261 + (C4227 - C4226) * C89093) * C25849 +
            ((C180 * C6247 - C89236 * C6335) * C13261 +
             (C180 * C6251 - C89236 * C6338) * C89093) *
                C25850) *
               C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89236 * C181 - C180 * C106) * C13261 +
            (C89236 * C187 - C180 * C113) * C89093) *
               C25848 +
           ((C27126 - C27127) * C13261 + (C27128 - C27129) * C89093) * C25849 +
           C27151 * C25850) *
              C89153 * C5720 +
          (((C180 * C819 - C89236 * C923) * C13261 +
            (C180 * C830 - C89236 * C931) * C89093) *
               C25848 +
           ((C29351 - C29352) * C13261 + (C29353 - C29354) * C89093) * C25849 +
           ((C29355 - C29356) * C13261 + (C29357 - C29358) * C89093) * C25850) *
              C89153 * C5721 +
          (((C89236 * C926 - C180 * C820) * C13261 +
            (C89236 * C934 - C180 * C832) * C89093) *
               C25848 +
           ((C89236 * C8600 - C180 * C8516) * C13261 +
            (C89236 * C8603 - C180 * C8522) * C89093) *
               C25849 +
           ((C89236 * C14683 - C180 * C14601) * C13261 +
            (C89236 * C14685 - C180 * C14604) * C89093) *
               C25850) *
              C89153 * C5722 +
          (((C180 * C5727 - C89236 * C5787) * C13261 +
            (C180 * C5733 - C89236 * C5790) * C89093) *
               C25848 +
           ((C180 * C16683 - C89236 * C16821) * C13261 +
            (C180 * C16686 - C89236 * C16823) * C89093) *
               C25849 +
           ((C180 * C18839 - C89236 * C18933) * C13261 +
            (C180 * C18841 - C89236 * C18934) * C89093) *
               C25850) *
              C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eexz[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C89247 * C264 - C263 * C106) * C100 +
           (C89247 * C270 - C263 * C113) * C89 + (C277 - C278) * C102 +
           (C279 - C280) * C90 + C293 * C104 + C294 * C91) *
              C89236 * C89153 * C5720 +
          ((C263 * C819 - C89247 * C1029) * C100 +
           (C263 * C830 - C89247 * C1037) * C89 + (C1046 - C1047) * C102 +
           (C1048 - C1049) * C90 + C2792 * C104 + C2793 * C91) *
              C89236 * C89153 * C5721 +
          ((C89247 * C1032 - C263 * C820) * C100 +
           (C89247 * C1040 - C263 * C832) * C89 + (C1054 - C1055) * C102 +
           (C1056 - C1057) * C90 + (C1058 - C1059) * C104 +
           (C1060 - C1061) * C91) *
              C89236 * C89153 * C5722 +
          ((C263 * C5727 - C89247 * C5843) * C100 +
           (C263 * C5733 - C89247 * C5846) * C89 +
           (C263 * C5726 - C89247 * C5844) * C102 +
           (C263 * C5731 - C89247 * C5847) * C90 +
           (C263 * C5725 - C89247 * C5845) * C104 +
           (C263 * C5729 - C89247 * C5848) * C91) *
              C89236 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C100 +
            (C89247 * C270 - C263 * C113) * C89 + (C277 - C278) * C102 +
            (C279 - C280) * C90 + C293 * C104 + C294 * C91) *
               C89236 * C89153 * C5073 +
           ((C263 * C819 - C89247 * C1029) * C100 +
            (C263 * C830 - C89247 * C1037) * C89 + (C1046 - C1047) * C102 +
            (C1048 - C1049) * C90 + C2792 * C104 + C2793 * C91) *
               C89236 * C89153 * C89189) *
              C5075 +
          (((C278 - C277) * C100 + (C280 - C279) * C89 + (C282 - C281) * C102 +
            (C284 - C283) * C90 + C295 * C104 + C296 * C91) *
               C89236 * C89153 * C5073 +
           ((C1047 - C1046) * C100 + (C1049 - C1048) * C89 +
            (C1051 - C1050) * C102 + (C1053 - C1052) * C90 +
            (C2794 - C2795) * C104 + (C2796 - C2797) * C91) *
               C89236 * C89153 * C89189) *
              C5076 +
          ((C293 * C100 + C294 * C89 + (C286 - C285) * C102 +
            (C288 - C287) * C90 + (C289 - C290) * C104 + (C291 - C292) * C91) *
               C89236 * C89153 * C5073 +
           (C2792 * C100 + C2793 * C89 + (C2795 - C2794) * C102 +
            (C2797 - C2796) * C90 + (C263 * C2629 - C89247 * C2789) * C104 +
            (C263 * C2631 - C89247 * C2790) * C91) *
               C89236 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C13261 +
             (C89247 * C270 - C263 * C113) * C89093) *
                C13258 +
            ((C13956 - C13957) * C13261 + (C13958 - C13959) * C89093) * C13259 +
            C13981 * C13260) *
               C89153 * C5073 +
           (((C13957 - C13956) * C13261 + (C13959 - C13958) * C89093) * C13258 +
            ((C13961 - C13960) * C13261 + (C13963 - C13962) * C89093) * C13259 +
            ((C13964 - C13965) * C13261 + (C13966 - C13967) * C89093) *
                C13260) *
               C89153 * C89189) *
              C5075 +
          ((((C278 - C277) * C13261 + (C280 - C279) * C89093) * C13258 +
            ((C1046 - C1047) * C13261 + (C1048 - C1049) * C89093) * C13259 +
            C13980 * C13260) *
               C89153 * C5073 +
           (((C1047 - C1046) * C13261 + (C1049 - C1048) * C89093) * C13258 +
            ((C1054 - C1055) * C13261 + (C1056 - C1057) * C89093) * C13259 +
            ((C13970 - C13971) * C13261 + (C13972 - C13973) * C89093) *
                C13260) *
               C89153 * C89189) *
              C5076 +
          (((C293 * C13261 + C294 * C89093) * C13258 +
            ((C1051 - C1050) * C13261 + (C1053 - C1052) * C89093) * C13259 +
            ((C1058 - C1059) * C13261 + (C1060 - C1061) * C89093) * C13260) *
               C89153 * C5073 +
           ((C2792 * C13261 + C2793 * C89093) * C13258 +
            ((C1059 - C1058) * C13261 + (C1061 - C1060) * C89093) * C13259 +
            ((C263 * C5725 - C89247 * C5845) * C13261 +
             (C263 * C5729 - C89247 * C5848) * C89093) *
                C13260) *
               C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C13261 +
            (C89247 * C270 - C263 * C113) * C89093) *
               C13258 +
           ((C13956 - C13957) * C13261 + (C13958 - C13959) * C89093) * C13259 +
           C13981 * C13260) *
              C89153 * C5720 +
          (((C13957 - C13956) * C13261 + (C13959 - C13958) * C89093) * C13258 +
           ((C13961 - C13960) * C13261 + (C13963 - C13962) * C89093) * C13259 +
           C18435 * C13260) *
              C89153 * C5721 +
          (C13981 * C13258 +
           ((C13965 - C13964) * C13261 + (C13967 - C13966) * C89093) * C13259 +
           ((C18429 - C18430) * C13261 + (C18431 - C18432) * C89093) * C13260) *
              C89153 * C5722 +
          (C18435 * C13258 +
           ((C18430 - C18429) * C13261 + (C18432 - C18431) * C89093) * C13259 +
           ((C263 * C18310 - C89247 * C18424) * C13261 +
            (C263 * C18312 - C89247 * C18425) * C89093) *
               C13260) *
              C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C25848 * C264 - C25951 * C106 + C25849 * C1934 - C25952 * C1724 +
             C25850 * C1937 - C25953 * C1725) *
                C13261 +
            (C25848 * C270 - C25951 * C113 + C25849 * C1942 - C25952 * C1735 +
             C25850 * C1945 - C25953 * C1737) *
                C89093) *
               C89236 * C89153 * C5073 +
           ((C25951 * C819 - C25848 * C1029 + C25952 * C4097 - C25849 * C4325 +
             C25953 * C6249 - C25850 * C6413) *
                C13261 +
            (C25951 * C830 - C25848 * C1037 + C25952 * C4102 - C25849 * C4329 +
             C25953 * C6255 - C25850 * C6416) *
                C89093) *
               C89236 * C89153 * C89189) *
              C5075 +
          (((C25951 * C107 - C25848 * C265 + C25952 * C1723 - C25849 * C1935 +
             C25953 * C1726 - C25850 * C1938) *
                C13261 +
            (C25951 * C115 - C25848 * C271 + C25952 * C1733 - C25849 * C1943 +
             C25953 * C1739 - C25850 * C1946) *
                C89093) *
               C89236 * C89153 * C5073 +
           ((C25848 * C1030 - C25951 * C818 + C25849 * C4326 - C25952 * C4098 +
             C25850 * C6414 - C25953 * C6248) *
                C13261 +
            (C25848 * C1038 - C25951 * C828 + C25849 * C4330 - C25952 * C4104 +
             C25850 * C6417 - C25953 * C6253) *
                C89093) *
               C89236 * C89153 * C89189) *
              C5076 +
          (((C25848 * C266 - C25951 * C108 + C25849 * C1936 - C25952 * C1722 +
             C25850 * C1939 - C25953 * C1727) *
                C13261 +
            (C25848 * C272 - C25951 * C117 + C25849 * C1944 - C25952 * C1731 +
             C25850 * C1947 - C25953 * C1741) *
                C89093) *
               C89236 * C89153 * C5073 +
           ((C25951 * C817 - C25848 * C1031 + C25952 * C4099 - C25849 * C4327 +
             C25953 * C6247 - C25850 * C6415) *
                C13261 +
            (C25951 * C826 - C25848 * C1039 + C25952 * C4106 - C25849 * C4331 +
             C25953 * C6251 - C25850 * C6418) *
                C89093) *
               C89236 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C25848 * C264 - C25951 * C106 + C25849 * C1934 - C25952 * C1724 +
            C25850 * C1937 - C25953 * C1725) *
               C13261 +
           (C25848 * C270 - C25951 * C113 + C25849 * C1942 - C25952 * C1735 +
            C25850 * C1945 - C25953 * C1737) *
               C89093) *
              C89236 * C89153 * C5720 +
          ((C25951 * C819 - C25848 * C1029 + C25952 * C4097 - C25849 * C4325 +
            C25953 * C6249 - C25850 * C6413) *
               C13261 +
           (C25951 * C830 - C25848 * C1037 + C25952 * C4102 - C25849 * C4329 +
            C25953 * C6255 - C25850 * C6416) *
               C89093) *
              C89236 * C89153 * C5721 +
          ((C25848 * C1032 - C25951 * C820 + C25849 * C8680 - C25952 * C8516 +
            C25850 * C14761 - C25953 * C14601) *
               C13261 +
           (C25848 * C1040 - C25951 * C832 + C25849 * C8683 - C25952 * C8522 +
            C25850 * C14763 - C25953 * C14604) *
               C89093) *
              C89236 * C89153 * C5722 +
          ((C25951 * C5727 - C25848 * C5843 + C25952 * C16683 -
            C25849 * C16923 + C25953 * C18839 - C25850 * C19009) *
               C13261 +
           (C25951 * C5733 - C25848 * C5846 + C25952 * C16686 -
            C25849 * C16925 + C25953 * C18841 - C25850 * C19010) *
               C89093) *
              C89236 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eeyx[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 + C91 * C116 -
            C104 * C108) *
               C180 +
           (C89 * C352 - C100 * C346 + C90 * C353 - C102 * C347 + C91 * C354 -
            C104 * C348) *
               C89236) *
              C89247 * C89153 * C5720 +
          ((C100 * C819 - C89 * C829 + C102 * C818 - C90 * C827 + C104 * C817 -
            C91 * C825) *
               C180 +
           (C100 * C1135 - C89 * C1143 + C102 * C1136 - C90 * C1144 +
            C104 * C1137 - C91 * C1145) *
               C89236) *
              C89247 * C89153 * C5721 +
          ((C89 * C831 - C100 * C820 + C90 * C833 - C102 * C821 + C91 * C835 -
            C104 * C822) *
               C180 +
           (C89 * C1146 - C100 * C1138 + C90 * C1147 - C102 * C1139 +
            C91 * C1148 - C104 * C1140) *
               C89236) *
              C89247 * C89153 * C5722 +
          ((C100 * C5727 - C89 * C5732 + C102 * C5726 - C90 * C5730 +
            C104 * C5725 - C91 * C5728) *
               C180 +
           (C100 * C5899 - C89 * C5902 + C102 * C5900 - C90 * C5903 +
            C104 * C5901 - C91 * C5904) *
               C89236) *
              C89247 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 + C91 * C116 -
             C104 * C108) *
                C180 +
            (C89 * C352 - C100 * C346 + C90 * C353 - C102 * C347 + C91 * C354 -
             C104 * C348) *
                C89236) *
               C89247 * C89153 * C5073 +
           ((C100 * C819 - C89 * C829 + C102 * C818 - C90 * C827 + C104 * C817 -
             C91 * C825) *
                C180 +
            (C100 * C1135 - C89 * C1143 + C102 * C1136 - C90 * C1144 +
             C104 * C1137 - C91 * C1145) *
                C89236) *
               C89247 * C89153 * C89189) *
              C5075 +
          (((C100 * C107 - C89 * C114 + C102 * C108 - C90 * C116 + C104 * C109 -
             C91 * C118) *
                C180 +
            (C100 * C347 - C89 * C353 + C102 * C348 - C90 * C354 + C104 * C349 -
             C91 * C355) *
                C89236) *
               C89247 * C89153 * C5073 +
           ((C89 * C827 - C100 * C818 + C90 * C825 - C102 * C817 + C91 * C837 -
             C104 * C823) *
                C180 +
            (C89 * C1144 - C100 * C1136 + C90 * C1145 - C102 * C1137 +
             C91 * C1149 - C104 * C1141) *
                C89236) *
               C89247 * C89153 * C89189) *
              C5076 +
          (((C89 * C116 - C100 * C108 + C90 * C118 - C102 * C109 + C91 * C120 -
             C104 * C110) *
                C180 +
            (C89 * C354 - C100 * C348 + C90 * C355 - C102 * C349 + C91 * C356 -
             C104 * C350) *
                C89236) *
               C89247 * C89153 * C5073 +
           ((C100 * C817 - C89 * C825 + C102 * C823 - C90 * C837 +
             C104 * C2629 - C91 * C2630) *
                C180 +
            (C100 * C1137 - C89 * C1145 + C102 * C1141 - C90 * C1149 +
             C104 * C2871 - C91 * C2872) *
                C89236) *
               C89247 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C89093 * C112 - C13261 * C106) * C13313 +
            (C89093 * C352 - C13261 * C346) * C13258 +
            (C14060 - C14061) * C13314 + (C14062 - C14063) * C13259 +
            C14084 * C13315 + C14085 * C13260) *
               C89247 * C89153 * C5073 +
           ((C14061 - C14060) * C13313 + (C14063 - C14062) * C13258 +
            (C14065 - C14064) * C13314 + (C14067 - C14066) * C13259 +
            (C14068 - C14069) * C13315 + (C14070 - C14071) * C13260) *
               C89247 * C89153 * C89189) *
              C5075 +
          (((C13261 * C107 - C89093 * C114) * C13313 +
            (C13261 * C347 - C89093 * C353) * C13258 +
            (C14072 - C14073) * C13314 + (C14074 - C14075) * C13259 +
            C14086 * C13315 + C14087 * C13260) *
               C89247 * C89153 * C5073 +
           ((C14073 - C14072) * C13313 + (C14075 - C14074) * C13258 +
            (C14077 - C14076) * C13314 + (C14079 - C14078) * C13259 +
            (C14080 - C14081) * C13315 + (C14082 - C14083) * C13260) *
               C89247 * C89153 * C89189) *
              C5076 +
          (((C89093 * C116 - C13261 * C108) * C13313 +
            (C89093 * C354 - C13261 * C348) * C13258 +
            (C15538 - C15539) * C13314 + (C15540 - C15541) * C13259 +
            (C15542 - C15543) * C13315 + (C15544 - C15545) * C13260) *
               C89247 * C89153 * C5073 +
           ((C15539 - C15538) * C13313 + (C15541 - C15540) * C13258 +
            (C15543 - C15542) * C13314 + (C15545 - C15544) * C13259 +
            (C13261 * C5725 - C89093 * C5728) * C13315 +
            (C13261 * C5901 - C89093 * C5904) * C13260) *
               C89247 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C89093 * C112 - C13261 * C106) * C13313 +
           (C89093 * C352 - C13261 * C346) * C13258 +
           (C14060 - C14061) * C13314 + (C14062 - C14063) * C13259 +
           C14084 * C13315 + C14085 * C13260) *
              C89247 * C89153 * C5720 +
          ((C14061 - C14060) * C13313 + (C14063 - C14062) * C13258 +
           (C14065 - C14064) * C13314 + (C14067 - C14066) * C13259 +
           C18488 * C13315 + C18489 * C13260) *
              C89247 * C89153 * C5721 +
          (C14084 * C13313 + C14085 * C13258 + (C14069 - C14068) * C13314 +
           (C14071 - C14070) * C13259 + (C18490 - C18491) * C13315 +
           (C18492 - C18493) * C13260) *
              C89247 * C89153 * C5722 +
          (C18488 * C13313 + C18489 * C13258 + (C18491 - C18490) * C13314 +
           (C18493 - C18492) * C13259 +
           (C13261 * C18310 - C89093 * C18311) * C13315 +
           (C13261 * C18485 - C89093 * C18486) * C13260) *
              C89247 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C180 +
             (C89093 * C352 - C13261 * C346) * C89236) *
                C25848 +
            ((C27308 - C27309) * C180 + (C27310 - C27311) * C89236) * C25849 +
            C27340 * C25850) *
               C89153 * C5073 +
           (((C14061 - C14060) * C180 + (C14063 - C14062) * C89236) * C25848 +
            ((C17042 - C17043) * C180 + (C17044 - C17045) * C89236) * C25849 +
            ((C19097 - C19096) * C180 + (C19099 - C19098) * C89236) * C25850) *
               C89153 * C89189) *
              C5075 +
          ((((C13261 * C107 - C89093 * C114) * C180 +
             (C13261 * C347 - C89093 * C353) * C89236) *
                C25848 +
            ((C27320 - C27321) * C180 + (C27322 - C27323) * C89236) * C25849 +
            C27341 * C25850) *
               C89153 * C5073 +
           (((C14073 - C14072) * C180 + (C14075 - C14074) * C89236) * C25848 +
            ((C17050 - C17051) * C180 + (C17052 - C17053) * C89236) * C25849 +
            ((C29563 - C29564) * C180 + (C29565 - C29566) * C89236) * C25850) *
               C89153 * C89189) *
              C5076 +
          ((((C89093 * C116 - C13261 * C108) * C180 +
             (C89093 * C354 - C13261 * C348) * C89236) *
                C25848 +
            ((C28758 - C28759) * C180 + (C28760 - C28761) * C89236) * C25849 +
            ((C28762 - C28763) * C180 + (C28764 - C28765) * C89236) * C25850) *
               C89153 * C5073 +
           (((C15539 - C15538) * C180 + (C15541 - C15540) * C89236) * C25848 +
            ((C13261 * C4099 - C89093 * C4105) * C180 +
             (C13261 * C4441 - C89093 * C4445) * C89236) *
                C25849 +
            ((C13261 * C6247 - C89093 * C6250) * C180 +
             (C13261 * C6495 - C89093 * C6498) * C89236) *
                C25850) *
               C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89093 * C112 - C13261 * C106) * C180 +
            (C89093 * C352 - C13261 * C346) * C89236) *
               C25848 +
           ((C27308 - C27309) * C180 + (C27310 - C27311) * C89236) * C25849 +
           C27340 * C25850) *
              C89153 * C5720 +
          (((C14061 - C14060) * C180 + (C14063 - C14062) * C89236) * C25848 +
           ((C17042 - C17043) * C180 + (C17044 - C17045) * C89236) * C25849 +
           ((C19097 - C19096) * C180 + (C19099 - C19098) * C89236) * C25850) *
              C89153 * C5721 +
          ((C14084 * C180 + C14085 * C89236) * C25848 +
           ((C17047 - C17046) * C180 + (C17049 - C17048) * C89236) * C25849 +
           ((C19100 - C19101) * C180 + (C19102 - C19103) * C89236) * C25850) *
              C89153 * C5722 +
          ((C18488 * C180 + C18489 * C89236) * C25848 +
           ((C21376 - C21375) * C180 + (C21378 - C21377) * C89236) * C25849 +
           ((C13261 * C18839 - C89093 * C18840) * C180 +
            (C13261 * C19093 - C89093 * C19094) * C89236) *
               C25850) *
              C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eeyy[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C89 +
           C440 * C90 + C441 * C91) *
              C89247 * C89153 * C5720 -
          (C1258 * C91 + C1259 * C90 +
           (C180 * C923 - C408 * C819 - C180 * C1135 + C89236 * C1227) * C89) *
              C89247 * C89153 * C5721 +
          ((C180 * C926 - C408 * C820 - C180 * C1138 + C89236 * C1228) * C89 +
           C1260 * C90 + C1261 * C91) *
              C89247 * C89153 * C5722 -
          ((C180 * C5789 - C408 * C5725 - C180 * C5901 + C89236 * C5955) * C91 +
           (C180 * C5788 - C408 * C5726 - C180 * C5900 + C89236 * C5956) * C90 +
           (C180 * C5787 - C408 * C5727 - C180 * C5899 + C89236 * C5957) *
               C89) *
              C89247 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C89 +
            C440 * C90 + C441 * C91) *
               C89247 * C89153 * C5073 -
           (C1258 * C91 + C1259 * C90 +
            (C180 * C923 - C408 * C819 - C180 * C1135 + C89236 * C1227) * C89) *
               C89247 * C89153 * C89189) *
              C5075 +
          ((C1259 * C89 + C1258 * C90 + C2955 * C91) * C89247 * C89153 *
               C89189 -
           (C442 * C91 + C441 * C90 + C440 * C89) * C89247 * C89153 * C5073) *
              C5076 +
          ((C441 * C89 + C442 * C90 + C443 * C91) * C89247 * C89153 * C5073 -
           ((C180 * C2707 - C408 * C2629 - C180 * C2871 + C89236 * C2947) *
                C91 +
            C2955 * C90 + C1258 * C89) *
               C89247 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13313 * C181 - C13466 * C106 - C13313 * C346 + C13258 * C409 +
            C13314 * C923 - C13467 * C819 - C13314 * C1135 + C13259 * C1227 +
            C13315 * C926 - C13468 * C820 - C13315 * C1138 + C13260 * C1228) *
               C89093 * C89247 * C89153 * C5073 -
           (C13315 * C5787 - C13468 * C5727 - C13315 * C5899 + C13260 * C5957 +
            C13314 * C926 - C13467 * C820 - C13314 * C1138 + C13259 * C1228 +
            C13313 * C923 - C13466 * C819 - C13313 * C1135 + C13258 * C1227) *
               C89093 * C89247 * C89153 * C89189) *
              C5075 +
          ((C13313 * C924 - C13466 * C818 - C13313 * C1136 + C13258 * C1226 +
            C13314 * C927 - C13467 * C821 - C13314 * C1139 + C13259 * C1229 +
            C13315 * C5788 - C13468 * C5726 - C13315 * C5900 + C13260 * C5956) *
               C89093 * C89247 * C89153 * C89189 -
           (C13315 * C927 - C13468 * C821 - C13315 * C1139 + C13260 * C1229 +
            C13314 * C924 - C13467 * C818 - C13314 * C1136 + C13259 * C1226 +
            C13313 * C182 - C13466 * C107 - C13313 * C347 + C13258 * C410) *
               C89093 * C89247 * C89153 * C5073) *
              C5076 +
          ((C13313 * C183 - C13466 * C108 - C13313 * C348 + C13258 * C411 +
            C13314 * C925 - C13467 * C817 - C13314 * C1137 + C13259 * C1225 +
            C13315 * C928 - C13468 * C822 - C13315 * C1140 + C13260 * C1230) *
               C89093 * C89247 * C89153 * C5073 -
           (C13315 * C5789 - C13468 * C5725 - C13315 * C5901 + C13260 * C5955 +
            C13314 * C928 - C13467 * C822 - C13314 * C1140 + C13259 * C1230 +
            C13313 * C925 - C13466 * C817 - C13313 * C1137 + C13258 * C1225) *
               C89093 * C89247 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C13313 * C181 - C13466 * C106 - C13313 * C346 + C13258 * C409 +
           C13314 * C923 - C13467 * C819 - C13314 * C1135 + C13259 * C1227 +
           C13315 * C926 - C13468 * C820 - C13315 * C1138 + C13260 * C1228) *
              C89093 * C89247 * C89153 * C5720 -
          (C13315 * C5787 - C13468 * C5727 - C13315 * C5899 + C13260 * C5957 +
           C13314 * C926 - C13467 * C820 - C13314 * C1138 + C13259 * C1228 +
           C13313 * C923 - C13466 * C819 - C13313 * C1135 + C13258 * C1227) *
              C89093 * C89247 * C89153 * C5721 +
          (C13313 * C926 - C13466 * C820 - C13313 * C1138 + C13258 * C1228 +
           C13314 * C5787 - C13467 * C5727 - C13314 * C5899 + C13259 * C5957 +
           C13315 * C13873 - C13468 * C13743 - C13315 * C14055 +
           C13260 * C14161) *
              C89093 * C89247 * C89153 * C5722 -
          (C13315 * C18372 - C13468 * C18310 - C13315 * C18485 +
           C13260 * C18543 + C13314 * C13873 - C13467 * C13743 -
           C13314 * C14055 + C13259 * C14161 + C13313 * C5787 - C13466 * C5727 -
           C13313 * C5899 + C13258 * C5957) *
              C89093 * C89247 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C89093 *
                C25848 +
            C27448 * C25849 + C27449 * C25850) *
               C89153 * C5073 -
           (C29689 * C25850 + C29688 * C25849 +
            (C180 * C923 - C408 * C819 - C180 * C1135 + C89236 * C1227) *
                C89093 * C25848) *
               C89153 * C89189) *
              C5075 +
          ((C1259 * C89093 * C25848 + C29674 * C25849 + C29690 * C25850) *
               C89153 * C89189 -
           (C27431 * C25850 + C27430 * C25849 + C440 * C89093 * C25848) *
               C89153 * C5073) *
              C5076 +
          ((C441 * C89093 * C25848 + C28840 * C25849 + C28841 * C25850) *
               C89153 * C5073 -
           ((C180 * C6335 - C408 * C6247 - C180 * C6495 + C89236 * C6573) *
                C89093 * C25850 +
            C4563 * C89093 * C25849 + C1258 * C89093 * C25848) *
               C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C89093 *
               C25848 +
           C27448 * C25849 + C27449 * C25850) *
              C89153 * C5720 -
          (C29689 * C25850 + C29688 * C25849 +
           (C180 * C923 - C408 * C819 - C180 * C1135 + C89236 * C1227) *
               C89093 * C25848) *
              C89153 * C5721 +
          ((C180 * C926 - C408 * C820 - C180 * C1138 + C89236 * C1228) *
               C89093 * C25848 +
           (C180 * C8600 - C408 * C8516 - C180 * C8760 + C89236 * C8842) *
               C89093 * C25849 +
           (C180 * C14683 - C408 * C14601 - C180 * C14839 + C89236 * C14917) *
               C89093 * C25850) *
              C89153 * C5722 -
          ((C180 * C18933 - C408 * C18839 - C180 * C19093 + C89236 * C19177) *
               C89093 * C25850 +
           (C180 * C16821 - C408 * C16683 - C180 * C17037 + C89236 * C17155) *
               C89093 * C25849 +
           (C180 * C5787 - C408 * C5727 - C180 * C5899 + C89236 * C5957) *
               C89093 * C25848) *
              C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eeyz[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C180 +
            (C89247 * C493 - C263 * C346) * C89236) *
               C89 +
           ((C277 - C278) * C180 + (C500 - C501) * C89236) * C90 + C514 * C91) *
              C89153 * C5720 +
          (((C263 * C819 - C89247 * C1029) * C180 +
            (C263 * C1135 - C89247 * C1335) * C89236) *
               C89 +
           ((C1046 - C1047) * C180 + (C1344 - C1345) * C89236) * C90 +
           C3036 * C91) *
              C89153 * C5721 +
          (((C89247 * C1032 - C263 * C820) * C180 +
            (C89247 * C1338 - C263 * C1138) * C89236) *
               C89 +
           ((C1054 - C1055) * C180 + (C1348 - C1349) * C89236) * C90 +
           ((C1058 - C1059) * C180 + (C1350 - C1351) * C89236) * C91) *
              C89153 * C5722 +
          (((C263 * C5727 - C89247 * C5843) * C180 +
            (C263 * C5899 - C89247 * C6008) * C89236) *
               C89 +
           ((C263 * C5726 - C89247 * C5844) * C180 +
            (C263 * C5900 - C89247 * C6009) * C89236) *
               C90 +
           ((C263 * C5725 - C89247 * C5845) * C180 +
            (C263 * C5901 - C89247 * C6010) * C89236) *
               C91) *
              C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C180 +
             (C89247 * C493 - C263 * C346) * C89236) *
                C89 +
            ((C277 - C278) * C180 + (C500 - C501) * C89236) * C90 +
            C514 * C91) *
               C89153 * C5073 +
           (((C263 * C819 - C89247 * C1029) * C180 +
             (C263 * C1135 - C89247 * C1335) * C89236) *
                C89 +
            ((C1046 - C1047) * C180 + (C1344 - C1345) * C89236) * C90 +
            C3036 * C91) *
               C89153 * C89189) *
              C5075 +
          ((((C278 - C277) * C180 + (C501 - C500) * C89236) * C89 +
            ((C282 - C281) * C180 + (C504 - C503) * C89236) * C90 +
            C515 * C91) *
               C89153 * C5073 +
           (((C1047 - C1046) * C180 + (C1345 - C1344) * C89236) * C89 +
            ((C1051 - C1050) * C180 + (C1347 - C1346) * C89236) * C90 +
            ((C2794 - C2795) * C180 + (C3033 - C3034) * C89236) * C91) *
               C89153 * C89189) *
              C5076 +
          ((C514 * C89 + ((C286 - C285) * C180 + (C507 - C506) * C89236) * C90 +
            ((C289 - C290) * C180 + (C508 - C509) * C89236) * C91) *
               C89153 * C5073 +
           (C3036 * C89 +
            ((C2795 - C2794) * C180 + (C3034 - C3033) * C89236) * C90 +
            ((C263 * C2629 - C89247 * C2789) * C180 +
             (C263 * C2871 - C89247 * C3029) * C89236) *
                C91) *
               C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C13313 +
            (C89247 * C493 - C263 * C346) * C13258 +
            (C13956 - C13957) * C13314 + (C14240 - C14241) * C13259 +
            C13974 * C13315 + C14249 * C13260) *
               C89093 * C89153 * C5073 +
           ((C13957 - C13956) * C13313 + (C14241 - C14240) * C13258 +
            (C13961 - C13960) * C13314 + (C14243 - C14242) * C13259 +
            (C13964 - C13965) * C13315 + (C14244 - C14245) * C13260) *
               C89093 * C89153 * C89189) *
              C5075 +
          (((C278 - C277) * C13313 + (C501 - C500) * C13258 +
            (C1046 - C1047) * C13314 + (C1344 - C1345) * C13259 +
            C13968 * C13315 + C14246 * C13260) *
               C89093 * C89153 * C5073 +
           ((C1047 - C1046) * C13313 + (C1345 - C1344) * C13258 +
            (C1054 - C1055) * C13314 + (C1348 - C1349) * C13259 +
            (C13970 - C13971) * C13315 + (C14247 - C14248) * C13260) *
               C89093 * C89153 * C89189) *
              C5076 +
          ((C293 * C13313 + C510 * C13258 + (C1051 - C1050) * C13314 +
            (C1347 - C1346) * C13259 + (C1058 - C1059) * C13315 +
            (C1350 - C1351) * C13260) *
               C89093 * C89153 * C5073 +
           (C2792 * C13313 + C3032 * C13258 + (C1059 - C1058) * C13314 +
            (C1351 - C1350) * C13259 +
            (C263 * C5725 - C89247 * C5845) * C13315 +
            (C263 * C5901 - C89247 * C6010) * C13260) *
               C89093 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C89247 * C264 - C263 * C106) * C13313 +
           (C89247 * C493 - C263 * C346) * C13258 + (C13956 - C13957) * C13314 +
           (C14240 - C14241) * C13259 + C13974 * C13315 + C14249 * C13260) *
              C89093 * C89153 * C5720 +
          ((C13957 - C13956) * C13313 + (C14241 - C14240) * C13258 +
           (C13961 - C13960) * C13314 + (C14243 - C14242) * C13259 +
           C18427 * C13315 + C18596 * C13260) *
              C89093 * C89153 * C5721 +
          (C13974 * C13313 + C14249 * C13258 + (C13965 - C13964) * C13314 +
           (C14245 - C14244) * C13259 + (C18429 - C18430) * C13315 +
           (C18597 - C18598) * C13260) *
              C89093 * C89153 * C5722 +
          (C18427 * C13313 + C18596 * C13258 + (C18430 - C18429) * C13314 +
           (C18598 - C18597) * C13259 +
           (C263 * C18310 - C89247 * C18424) * C13315 +
           (C263 * C18485 - C89247 * C18594) * C13260) *
              C89093 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C25848 * C264 - C25951 * C106 + C25849 * C1934 - C25952 * C1724 +
             C25850 * C1937 - C25953 * C1725) *
                C180 +
            (C25848 * C493 - C25951 * C346 + C25849 * C2240 - C25952 * C2040 +
             C25850 * C2243 - C25953 * C2043) *
                C89236) *
               C89093 * C89153 * C5073 +
           ((C25951 * C819 - C25848 * C1029 + C25952 * C4097 - C25849 * C4325 +
             C25953 * C6249 - C25850 * C6413) *
                C180 +
            (C25951 * C1135 - C25848 * C1335 + C25952 * C4439 - C25849 * C4661 +
             C25953 * C6493 - C25850 * C6650) *
                C89236) *
               C89093 * C89153 * C89189) *
              C5075 +
          (((C25951 * C107 - C25848 * C265 + C25952 * C1723 - C25849 * C1935 +
             C25953 * C1726 - C25850 * C1938) *
                C180 +
            (C25951 * C347 - C25848 * C494 + C25952 * C2041 - C25849 * C2241 +
             C25953 * C2044 - C25850 * C2244) *
                C89236) *
               C89093 * C89153 * C5073 +
           ((C25848 * C1030 - C25951 * C818 + C25849 * C4326 - C25952 * C4098 +
             C25850 * C6414 - C25953 * C6248) *
                C180 +
            (C25848 * C1336 - C25951 * C1136 + C25849 * C4662 - C25952 * C4440 +
             C25850 * C6651 - C25953 * C6494) *
                C89236) *
               C89093 * C89153 * C89189) *
              C5076 +
          (((C25848 * C266 - C25951 * C108 + C25849 * C1936 - C25952 * C1722 +
             C25850 * C1939 - C25953 * C1727) *
                C180 +
            (C25848 * C495 - C25951 * C348 + C25849 * C2242 - C25952 * C2042 +
             C25850 * C2245 - C25953 * C2045) *
                C89236) *
               C89093 * C89153 * C5073 +
           ((C25951 * C817 - C25848 * C1031 + C25952 * C4099 - C25849 * C4327 +
             C25953 * C6247 - C25850 * C6415) *
                C180 +
            (C25951 * C1137 - C25848 * C1337 + C25952 * C4441 - C25849 * C4663 +
             C25953 * C6495 - C25850 * C6652) *
                C89236) *
               C89093 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C25848 * C264 - C25951 * C106 + C25849 * C1934 - C25952 * C1724 +
            C25850 * C1937 - C25953 * C1725) *
               C180 +
           (C25848 * C493 - C25951 * C346 + C25849 * C2240 - C25952 * C2040 +
            C25850 * C2243 - C25953 * C2043) *
               C89236) *
              C89093 * C89153 * C5720 +
          ((C25951 * C819 - C25848 * C1029 + C25952 * C4097 - C25849 * C4325 +
            C25953 * C6249 - C25850 * C6413) *
               C180 +
           (C25951 * C1135 - C25848 * C1335 + C25952 * C4439 - C25849 * C4661 +
            C25953 * C6493 - C25850 * C6650) *
               C89236) *
              C89093 * C89153 * C5721 +
          ((C25848 * C1032 - C25951 * C820 + C25849 * C8680 - C25952 * C8516 +
            C25850 * C14761 - C25953 * C14601) *
               C180 +
           (C25848 * C1338 - C25951 * C1138 + C25849 * C8917 - C25952 * C8760 +
            C25850 * C14993 - C25953 * C14839) *
               C89236) *
              C89093 * C89153 * C5722 +
          ((C25951 * C5727 - C25848 * C5843 + C25952 * C16683 -
            C25849 * C16923 + C25953 * C18839 - C25850 * C19009) *
               C180 +
           (C25951 * C5899 - C25848 * C6008 + C25952 * C17037 -
            C25849 * C17255 + C25953 * C19093 - C25850 * C19252) *
               C89236) *
              C89093 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eezx[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 + C91 * C116 -
            C104 * C108) *
               C263 +
           (C89 * C571 - C100 * C565 + C90 * C572 - C102 * C566 + C91 * C573 -
            C104 * C567) *
               C89247) *
              C89236 * C89153 * C5720 +
          ((C100 * C819 - C89 * C829 + C102 * C818 - C90 * C827 + C104 * C817 -
            C91 * C825) *
               C263 +
           (C100 * C1425 - C89 * C1433 + C102 * C1426 - C90 * C1434 +
            C104 * C1427 - C91 * C1435) *
               C89247) *
              C89236 * C89153 * C5721 +
          ((C89 * C831 - C100 * C820 + C90 * C833 - C102 * C821 + C91 * C835 -
            C104 * C822) *
               C263 +
           (C89 * C1436 - C100 * C1428 + C90 * C1437 - C102 * C1429 +
            C91 * C1438 - C104 * C1430) *
               C89247) *
              C89236 * C89153 * C5722 +
          ((C100 * C5727 - C89 * C5732 + C102 * C5726 - C90 * C5730 +
            C104 * C5725 - C91 * C5728) *
               C263 +
           (C100 * C6061 - C89 * C6064 + C102 * C6062 - C90 * C6065 +
            C104 * C6063 - C91 * C6066) *
               C89247) *
              C89236 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 + C91 * C116 -
             C104 * C108) *
                C263 +
            (C89 * C571 - C100 * C565 + C90 * C572 - C102 * C566 + C91 * C573 -
             C104 * C567) *
                C89247) *
               C89236 * C89153 * C5073 +
           ((C100 * C819 - C89 * C829 + C102 * C818 - C90 * C827 + C104 * C817 -
             C91 * C825) *
                C263 +
            (C100 * C1425 - C89 * C1433 + C102 * C1426 - C90 * C1434 +
             C104 * C1427 - C91 * C1435) *
                C89247) *
               C89236 * C89153 * C89189) *
              C5075 +
          (((C100 * C107 - C89 * C114 + C102 * C108 - C90 * C116 + C104 * C109 -
             C91 * C118) *
                C263 +
            (C100 * C566 - C89 * C572 + C102 * C567 - C90 * C573 + C104 * C568 -
             C91 * C574) *
                C89247) *
               C89236 * C89153 * C5073 +
           ((C89 * C827 - C100 * C818 + C90 * C825 - C102 * C817 + C91 * C837 -
             C104 * C823) *
                C263 +
            (C89 * C1434 - C100 * C1426 + C90 * C1435 - C102 * C1427 +
             C91 * C1439 - C104 * C1431) *
                C89247) *
               C89236 * C89153 * C89189) *
              C5076 +
          (((C89 * C116 - C100 * C108 + C90 * C118 - C102 * C109 + C91 * C120 -
             C104 * C110) *
                C263 +
            (C89 * C573 - C100 * C567 + C90 * C574 - C102 * C568 + C91 * C575 -
             C104 * C569) *
                C89247) *
               C89236 * C89153 * C5073 +
           ((C100 * C817 - C89 * C825 + C102 * C823 - C90 * C837 +
             C104 * C2629 - C91 * C2630) *
                C263 +
            (C100 * C1427 - C89 * C1435 + C102 * C1431 - C90 * C1439 +
             C104 * C3110 - C91 * C3111) *
                C89247) *
               C89236 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C263 +
             (C89093 * C571 - C13261 * C565) * C89247) *
                C13258 +
            ((C14060 - C14061) * C263 + (C14328 - C14329) * C89247) * C13259 +
            C14346 * C13260) *
               C89153 * C5073 +
           (((C14061 - C14060) * C263 + (C14329 - C14328) * C89247) * C13258 +
            ((C14065 - C14064) * C263 + (C14332 - C14331) * C89247) * C13259 +
            ((C14068 - C14069) * C263 + (C14333 - C14334) * C89247) * C13260) *
               C89153 * C89189) *
              C5075 +
          ((((C13261 * C107 - C89093 * C114) * C263 +
             (C13261 * C566 - C89093 * C572) * C89247) *
                C13258 +
            ((C14072 - C14073) * C263 + (C14335 - C14336) * C89247) * C13259 +
            C14347 * C13260) *
               C89153 * C5073 +
           (((C14073 - C14072) * C263 + (C14336 - C14335) * C89247) * C13258 +
            ((C14077 - C14076) * C263 + (C14339 - C14338) * C89247) * C13259 +
            ((C14080 - C14081) * C263 + (C14340 - C14341) * C89247) * C13260) *
               C89153 * C89189) *
              C5076 +
          ((((C89093 * C116 - C13261 * C108) * C263 +
             (C89093 * C573 - C13261 * C567) * C89247) *
                C13258 +
            ((C15538 - C15539) * C263 + (C15768 - C15769) * C89247) * C13259 +
            ((C15542 - C15543) * C263 + (C15770 - C15771) * C89247) * C13260) *
               C89153 * C5073 +
           (((C15539 - C15538) * C263 + (C15769 - C15768) * C89247) * C13258 +
            ((C15543 - C15542) * C263 + (C15771 - C15770) * C89247) * C13259 +
            ((C13261 * C5725 - C89093 * C5728) * C263 +
             (C13261 * C6063 - C89093 * C6066) * C89247) *
                C13260) *
               C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C89093 * C112 - C13261 * C106) * C263 +
            (C89093 * C571 - C13261 * C565) * C89247) *
               C13258 +
           ((C14060 - C14061) * C263 + (C14328 - C14329) * C89247) * C13259 +
           C14346 * C13260) *
              C89153 * C5720 +
          (((C14061 - C14060) * C263 + (C14329 - C14328) * C89247) * C13258 +
           ((C14065 - C14064) * C263 + (C14332 - C14331) * C89247) * C13259 +
           C18656 * C13260) *
              C89153 * C5721 +
          (C14346 * C13258 +
           ((C14069 - C14068) * C263 + (C14334 - C14333) * C89247) * C13259 +
           ((C18490 - C18491) * C263 + (C18653 - C18654) * C89247) * C13260) *
              C89153 * C5722 +
          (C18656 * C13258 +
           ((C18491 - C18490) * C263 + (C18654 - C18653) * C89247) * C13259 +
           ((C13261 * C18310 - C89093 * C18311) * C263 +
            (C13261 * C18648 - C89093 * C18649) * C89247) *
               C13260) *
              C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89093 * C112 - C13261 * C106) * C25951 +
            (C89093 * C571 - C13261 * C565) * C25848 +
            (C27308 - C27309) * C25952 + (C27606 - C27607) * C25849 +
            C27332 * C25953 + C27618 * C25850) *
               C89236 * C89153 * C5073 +
           ((C14061 - C14060) * C25951 + (C14329 - C14328) * C25848 +
            (C17042 - C17043) * C25952 + (C17366 - C17367) * C25849 +
            (C19097 - C19096) * C25953 + (C19335 - C19334) * C25850) *
               C89236 * C89153 * C89189) *
              C5075 +
          (((C13261 * C107 - C89093 * C114) * C25951 +
            (C13261 * C566 - C89093 * C572) * C25848 +
            (C27320 - C27321) * C25952 + (C27612 - C27613) * C25849 +
            C27334 * C25953 + C27619 * C25850) *
               C89236 * C89153 * C5073 +
           ((C14073 - C14072) * C25951 + (C14336 - C14335) * C25848 +
            (C17050 - C17051) * C25952 + (C17370 - C17371) * C25849 +
            (C29563 - C29564) * C25953 + (C29890 - C29891) * C25850) *
               C89236 * C89153 * C89189) *
              C5076 +
          (((C89093 * C116 - C13261 * C108) * C25951 +
            (C89093 * C573 - C13261 * C567) * C25848 +
            (C28758 - C28759) * C25952 + (C28990 - C28991) * C25849 +
            (C28762 - C28763) * C25953 + (C28992 - C28993) * C25850) *
               C89236 * C89153 * C5073 +
           ((C15539 - C15538) * C25951 + (C15769 - C15768) * C25848 +
            (C13261 * C4099 - C89093 * C4105) * C25952 +
            (C13261 * C4769 - C89093 * C4773) * C25849 +
            (C13261 * C6247 - C89093 * C6250) * C25953 +
            (C13261 * C6729 - C89093 * C6732) * C25850) *
               C89236 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C89093 * C112 - C13261 * C106) * C25951 +
           (C89093 * C571 - C13261 * C565) * C25848 +
           (C27308 - C27309) * C25952 + (C27606 - C27607) * C25849 +
           C27332 * C25953 + C27618 * C25850) *
              C89236 * C89153 * C5720 +
          ((C14061 - C14060) * C25951 + (C14329 - C14328) * C25848 +
           (C17042 - C17043) * C25952 + (C17366 - C17367) * C25849 +
           (C19097 - C19096) * C25953 + (C19335 - C19334) * C25850) *
              C89236 * C89153 * C5721 +
          (C14084 * C25951 + C14342 * C25848 + (C17047 - C17046) * C25952 +
           (C17369 - C17368) * C25849 + (C19100 - C19101) * C25953 +
           (C19336 - C19337) * C25850) *
              C89236 * C89153 * C5722 +
          (C18488 * C25951 + C18652 * C25848 + (C21376 - C21375) * C25952 +
           (C21611 - C21610) * C25849 +
           (C13261 * C18839 - C89093 * C18840) * C25953 +
           (C13261 * C19331 - C89093 * C19332) * C25850) *
              C89236 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eezy[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C89236 * C181 - C180 * C106) * C263 +
            (C89236 * C627 - C180 * C565) * C89247) *
               C89 +
           ((C194 - C195) * C263 + (C634 - C635) * C89247) * C90 + C648 * C91) *
              C89153 * C5720 +
          (((C180 * C819 - C89236 * C923) * C263 +
            (C180 * C1425 - C89236 * C1515) * C89247) *
               C89 +
           ((C940 - C941) * C263 + (C1524 - C1525) * C89247) * C90 +
           C3193 * C91) *
              C89153 * C5721 +
          (((C89236 * C926 - C180 * C820) * C263 +
            (C89236 * C1518 - C180 * C1428) * C89247) *
               C89 +
           ((C948 - C949) * C263 + (C1528 - C1529) * C89247) * C90 +
           ((C952 - C953) * C263 + (C1530 - C1531) * C89247) * C91) *
              C89153 * C5722 +
          (((C180 * C5727 - C89236 * C5787) * C263 +
            (C180 * C6061 - C89236 * C6117) * C89247) *
               C89 +
           ((C180 * C5726 - C89236 * C5788) * C263 +
            (C180 * C6062 - C89236 * C6118) * C89247) *
               C90 +
           ((C180 * C5725 - C89236 * C5789) * C263 +
            (C180 * C6063 - C89236 * C6119) * C89247) *
               C91) *
              C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C263 +
             (C89236 * C627 - C180 * C565) * C89247) *
                C89 +
            ((C194 - C195) * C263 + (C634 - C635) * C89247) * C90 +
            C648 * C91) *
               C89153 * C5073 +
           (((C180 * C819 - C89236 * C923) * C263 +
             (C180 * C1425 - C89236 * C1515) * C89247) *
                C89 +
            ((C940 - C941) * C263 + (C1524 - C1525) * C89247) * C90 +
            C3193 * C91) *
               C89153 * C89189) *
              C5075 +
          ((((C195 - C194) * C263 + (C635 - C634) * C89247) * C89 +
            ((C199 - C198) * C263 + (C638 - C637) * C89247) * C90 +
            C649 * C91) *
               C89153 * C5073 +
           (((C941 - C940) * C263 + (C1525 - C1524) * C89247) * C89 +
            ((C945 - C944) * C263 + (C1527 - C1526) * C89247) * C90 +
            ((C2712 - C2713) * C263 + (C3190 - C3191) * C89247) * C91) *
               C89153 * C89189) *
              C5076 +
          ((C648 * C89 + ((C203 - C202) * C263 + (C641 - C640) * C89247) * C90 +
            ((C206 - C207) * C263 + (C642 - C643) * C89247) * C91) *
               C89153 * C5073 +
           (C3193 * C89 +
            ((C2713 - C2712) * C263 + (C3191 - C3190) * C89247) * C90 +
            ((C180 * C2629 - C89236 * C2707) * C263 +
             (C180 * C3110 - C89236 * C3186) * C89247) *
                C91) *
               C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
             C13260 * C926 - C13315 * C820) *
                C263 +
            (C13258 * C627 - C13313 * C565 + C13259 * C1515 - C13314 * C1425 +
             C13260 * C1518 - C13315 * C1428) *
                C89247) *
               C89093 * C89153 * C5073 +
           ((C13313 * C819 - C13258 * C923 + C13314 * C820 - C13259 * C926 +
             C13315 * C5727 - C13260 * C5787) *
                C263 +
            (C13313 * C1425 - C13258 * C1515 + C13314 * C1428 - C13259 * C1518 +
             C13315 * C6061 - C13260 * C6117) *
                C89247) *
               C89093 * C89153 * C89189) *
              C5075 +
          (((C13313 * C107 - C13258 * C182 + C13314 * C818 - C13259 * C924 +
             C13315 * C821 - C13260 * C927) *
                C263 +
            (C13313 * C566 - C13258 * C628 + C13314 * C1426 - C13259 * C1516 +
             C13315 * C1429 - C13260 * C1519) *
                C89247) *
               C89093 * C89153 * C5073 +
           ((C13258 * C924 - C13313 * C818 + C13259 * C927 - C13314 * C821 +
             C13260 * C5788 - C13315 * C5726) *
                C263 +
            (C13258 * C1516 - C13313 * C1426 + C13259 * C1519 - C13314 * C1429 +
             C13260 * C6118 - C13315 * C6062) *
                C89247) *
               C89093 * C89153 * C89189) *
              C5076 +
          (((C13258 * C183 - C13313 * C108 + C13259 * C925 - C13314 * C817 +
             C13260 * C928 - C13315 * C822) *
                C263 +
            (C13258 * C629 - C13313 * C567 + C13259 * C1517 - C13314 * C1427 +
             C13260 * C1520 - C13315 * C1430) *
                C89247) *
               C89093 * C89153 * C5073 +
           ((C13313 * C817 - C13258 * C925 + C13314 * C822 - C13259 * C928 +
             C13315 * C5725 - C13260 * C5789) *
                C263 +
            (C13313 * C1427 - C13258 * C1517 + C13314 * C1430 - C13259 * C1520 +
             C13315 * C6063 - C13260 * C6119) *
                C89247) *
               C89093 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
            C13260 * C926 - C13315 * C820) *
               C263 +
           (C13258 * C627 - C13313 * C565 + C13259 * C1515 - C13314 * C1425 +
            C13260 * C1518 - C13315 * C1428) *
               C89247) *
              C89093 * C89153 * C5720 +
          ((C13313 * C819 - C13258 * C923 + C13314 * C820 - C13259 * C926 +
            C13315 * C5727 - C13260 * C5787) *
               C263 +
           (C13313 * C1425 - C13258 * C1515 + C13314 * C1428 - C13259 * C1518 +
            C13315 * C6061 - C13260 * C6117) *
               C89247) *
              C89093 * C89153 * C5721 +
          ((C13258 * C926 - C13313 * C820 + C13259 * C5787 - C13314 * C5727 +
            C13260 * C13873 - C13315 * C13743) *
               C263 +
           (C13258 * C1518 - C13313 * C1428 + C13259 * C6117 - C13314 * C6061 +
            C13260 * C14421 - C13315 * C14323) *
               C89247) *
              C89093 * C89153 * C5722 +
          ((C13313 * C5727 - C13258 * C5787 + C13314 * C13743 -
            C13259 * C13873 + C13315 * C18310 - C13260 * C18372) *
               C263 +
           (C13313 * C6061 - C13258 * C6117 + C13314 * C14323 -
            C13259 * C14421 + C13315 * C18648 - C13260 * C18706) *
               C89247) *
              C89093 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89236 * C181 - C180 * C106) * C25951 +
            (C89236 * C627 - C180 * C565) * C25848 +
            (C27126 - C27127) * C25952 + (C27696 - C27697) * C25849 +
            C27144 * C25953 + C27705 * C25850) *
               C89093 * C89153 * C5073 +
           ((C180 * C819 - C89236 * C923) * C25951 +
            (C180 * C1425 - C89236 * C1515) * C25848 +
            (C29351 - C29352) * C25952 + (C29991 - C29992) * C25849 +
            (C29355 - C29356) * C25953 + (C29993 - C29994) * C25850) *
               C89093 * C89153 * C89189) *
              C5075 +
          (((C195 - C194) * C25951 + (C635 - C634) * C25848 +
            (C1845 - C1846) * C25952 + (C2429 - C2430) * C25849 +
            C27138 * C25953 + C27702 * C25850) *
               C89093 * C89153 * C5073 +
           ((C941 - C940) * C25951 + (C1525 - C1524) * C25848 +
            (C4220 - C4221) * C25952 + (C4878 - C4879) * C25849 +
            (C29359 - C29360) * C25953 + (C29995 - C29996) * C25850) *
               C89093 * C89153 * C89189) *
              C5076 +
          ((C210 * C25951 + C644 * C25848 + (C1850 - C1849) * C25952 +
            (C2432 - C2431) * C25849 + (C1857 - C1858) * C25953 +
            (C2435 - C2436) * C25850) *
               C89093 * C89153 * C5073 +
           (C2710 * C25951 + C3189 * C25848 + (C4225 - C4224) * C25952 +
            (C4881 - C4880) * C25849 +
            (C180 * C6247 - C89236 * C6335) * C25953 +
            (C180 * C6729 - C89236 * C6809) * C25850) *
               C89093 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C89236 * C181 - C180 * C106) * C25951 +
           (C89236 * C627 - C180 * C565) * C25848 + (C27126 - C27127) * C25952 +
           (C27696 - C27697) * C25849 + C27144 * C25953 + C27705 * C25850) *
              C89093 * C89153 * C5720 +
          ((C180 * C819 - C89236 * C923) * C25951 +
           (C180 * C1425 - C89236 * C1515) * C25848 +
           (C29351 - C29352) * C25952 + (C29991 - C29992) * C25849 +
           (C29355 - C29356) * C25953 + (C29993 - C29994) * C25850) *
              C89093 * C89153 * C5721 +
          ((C89236 * C926 - C180 * C820) * C25951 +
           (C89236 * C1518 - C180 * C1428) * C25848 +
           (C89236 * C8600 - C180 * C8516) * C25952 +
           (C89236 * C9074 - C180 * C8994) * C25849 +
           (C89236 * C14683 - C180 * C14601) * C25953 +
           (C89236 * C15147 - C180 * C15069) * C25850) *
              C89093 * C89153 * C5722 +
          ((C180 * C5727 - C89236 * C5787) * C25951 +
           (C180 * C6061 - C89236 * C6117) * C25848 +
           (C180 * C16683 - C89236 * C16821) * C25952 +
           (C180 * C17361 - C89236 * C17471) * C25849 +
           (C180 * C18839 - C89236 * C18933) * C25953 +
           (C180 * C19331 - C89236 * C19411) * C25850) *
              C89093 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eezz[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C89236 *
               C89 +
           C735 * C90 + C736 * C91) *
              C89153 * C5720 -
          (C1642 * C91 + C1643 * C90 +
           (C263 * C1029 - C699 * C819 - C263 * C1425 + C89247 * C1607) *
               C89236 * C89) *
              C89153 * C5721 +
          ((C263 * C1032 - C699 * C820 - C263 * C1428 + C89247 * C1608) *
               C89236 * C89 +
           C1644 * C90 + C1645 * C91) *
              C89153 * C5722 -
          ((C263 * C5845 - C699 * C5725 - C263 * C6063 + C89247 * C6170) *
               C89236 * C91 +
           (C263 * C5844 - C699 * C5726 - C263 * C6062 + C89247 * C6171) *
               C89236 * C90 +
           (C263 * C5843 - C699 * C5727 - C263 * C6061 + C89247 * C6172) *
               C89236 * C89) *
              C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C89236 *
                C89 +
            C735 * C90 + C736 * C91) *
               C89153 * C5073 -
           (C1642 * C91 + C1643 * C90 +
            (C263 * C1029 - C699 * C819 - C263 * C1425 + C89247 * C1607) *
                C89236 * C89) *
               C89153 * C89189) *
              C5075 +
          ((C1643 * C89 + C1642 * C90 + C3276 * C91) * C89153 * C89189 -
           (C737 * C91 + C736 * C90 + C735 * C89) * C89153 * C5073) *
              C5076 +
          ((C736 * C89 + C737 * C90 + C738 * C91) * C89153 * C5073 -
           ((C263 * C2789 - C699 * C2629 - C263 * C3110 + C89247 * C3267) *
                C89236 * C91 +
            C3276 * C90 + C1642 * C89) *
               C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C13258 +
            C14524 * C13259 + C14525 * C13260) *
               C89093 * C89153 * C5073 -
           (C14526 * C13260 + C14525 * C13259 + C14524 * C13258) * C89093 *
               C89153 * C89189) *
              C5075 +
          ((C1639 * C13258 + C1640 * C13259 + C14527 * C13260) * C89093 *
               C89153 * C89189 -
           (C1640 * C13260 + C1639 * C13259 + C731 * C13258) * C89093 * C89153 *
               C5073) *
              C5076 +
          ((C732 * C13258 + C1638 * C13259 + C1641 * C13260) * C89093 * C89153 *
               C5073 -
           ((C263 * C5845 - C699 * C5725 - C263 * C6063 + C89247 * C6170) *
                C13260 +
            C1641 * C13259 + C1638 * C13258) *
               C89093 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C13258 +
           C14524 * C13259 + C14525 * C13260) *
              C89093 * C89153 * C5720 -
          (C14526 * C13260 + C14525 * C13259 + C14524 * C13258) * C89093 *
              C89153 * C5721 +
          (C14525 * C13258 + C14526 * C13259 + C18765 * C13260) * C89093 *
              C89153 * C5722 -
          ((C263 * C18424 - C699 * C18310 - C263 * C18648 + C89247 * C18757) *
               C13260 +
           C18765 * C13259 + C14526 * C13258) *
              C89093 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C25951 * C264 - C26254 * C106 - C25951 * C565 + C25848 * C700 +
            C25952 * C1934 - C26255 * C1724 - C25952 * C2330 + C25849 * C2512 +
            C25953 * C1937 - C26256 * C1725 - C25953 * C2333 + C25850 * C2513) *
               C89236 * C89093 * C89153 * C5073 -
           (C25953 * C6413 - C26256 * C6249 - C25953 * C6727 + C25850 * C6886 +
            C25952 * C4325 - C26255 * C4097 - C25952 * C4767 + C25849 * C4979 +
            C25951 * C1029 - C26254 * C819 - C25951 * C1425 + C25848 * C1607) *
               C89236 * C89093 * C89153 * C89189) *
              C5075 +
          ((C25951 * C1030 - C26254 * C818 - C25951 * C1426 + C25848 * C1606 +
            C25952 * C4326 - C26255 * C4098 - C25952 * C4768 + C25849 * C4980 +
            C25953 * C6414 - C26256 * C6248 - C25953 * C6728 + C25850 * C6885) *
               C89236 * C89093 * C89153 * C89189 -
           (C25953 * C1938 - C26256 * C1726 - C25953 * C2334 + C25850 * C2514 +
            C25952 * C1935 - C26255 * C1723 - C25952 * C2331 + C25849 * C2511 +
            C25951 * C265 - C26254 * C107 - C25951 * C566 + C25848 * C701) *
               C89236 * C89093 * C89153 * C5073) *
              C5076 +
          ((C25951 * C266 - C26254 * C108 - C25951 * C567 + C25848 * C702 +
            C25952 * C1936 - C26255 * C1722 - C25952 * C2332 + C25849 * C2510 +
            C25953 * C1939 - C26256 * C1727 - C25953 * C2335 + C25850 * C2515) *
               C89236 * C89093 * C89153 * C5073 -
           (C25953 * C6415 - C26256 * C6247 - C25953 * C6729 + C25850 * C6884 +
            C25952 * C4327 - C26255 * C4099 - C25952 * C4769 + C25849 * C4981 +
            C25951 * C1031 - C26254 * C817 - C25951 * C1427 + C25848 * C1605) *
               C89236 * C89093 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((C25951 * C264 - C26254 * C106 - C25951 * C565 + C25848 * C700 +
           C25952 * C1934 - C26255 * C1724 - C25952 * C2330 + C25849 * C2512 +
           C25953 * C1937 - C26256 * C1725 - C25953 * C2333 + C25850 * C2513) *
              C89236 * C89093 * C89153 * C5720 -
          (C25953 * C6413 - C26256 * C6249 - C25953 * C6727 + C25850 * C6886 +
           C25952 * C4325 - C26255 * C4097 - C25952 * C4767 + C25849 * C4979 +
           C25951 * C1029 - C26254 * C819 - C25951 * C1425 + C25848 * C1607) *
              C89236 * C89093 * C89153 * C5721 +
          (C25951 * C1032 - C26254 * C820 - C25951 * C1428 + C25848 * C1608 +
           C25952 * C8680 - C26255 * C8516 - C25952 * C8994 + C25849 * C9153 +
           C25953 * C14761 - C26256 * C14601 - C25953 * C15069 +
           C25850 * C15223) *
              C89236 * C89093 * C89153 * C5722 -
          (C25953 * C19009 - C26256 * C18839 - C25953 * C19331 +
           C25850 * C19486 + C25952 * C16923 - C26255 * C16683 -
           C25952 * C17361 + C25849 * C17571 + C25951 * C5843 - C26254 * C5727 -
           C25951 * C6061 + C25848 * C6172) *
              C89236 * C89093 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eexx[40] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                 C89247 * C13258 +
             C13794 * C13259 + C13795 * C13260) *
                C9228 -
            (C16720 * C13260 + C16721 * C13259 +
             (C13261 * C1734 - C13262 * C1724 - C13261 * C1735 +
              C89093 * C1748) *
                 C89247 * C13258) *
                C89217) *
               C89307 +
           ((C16721 * C13258 + C16720 * C13259 + C21135 * C13260) * C89217 -
            (C13796 * C13260 + C13795 * C13259 + C13794 * C13258) * C9228) *
               C89189) *
              C89299 +
          ((((C13261 * C1732 - C13262 * C1723 - C13261 * C1733 +
              C89093 * C1747) *
                 C89247 * C13258 +
             C16722 * C13259 + C16723 * C13260) *
                C89217 -
            (C13798 * C13260 + C13797 * C13259 +
             (C13261 * C114 - C13262 * C107 - C13261 * C115 + C89093 * C125) *
                 C89247 * C13258) *
                C9228) *
               C89307 +
           ((C13797 * C13258 + C13798 * C13259 + C13799 * C13260) * C9228 -
            ((C13261 * C16687 - C13262 * C16684 - C13261 * C16688 +
              C89093 * C16690) *
                 C89247 * C13260 +
             C16723 * C13259 + C16722 * C13258) *
                C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C100 * C112 - C101 * C106 - C100 * C113 + C89 * C124 +
             C102 * C114 - C103 * C107 - C102 * C115 + C90 * C125 +
             C104 * C116 - C105 * C108 - C104 * C117 + C91 * C126) *
                C89247 * C89236 * C9228 -
            (C104 * C1730 - C105 * C1722 - C104 * C1731 + C91 * C1746 +
             C102 * C1732 - C103 * C1723 - C102 * C1733 + C90 * C1747 +
             C100 * C1734 - C101 * C1724 - C100 * C1735 + C89 * C1748) *
                C89247 * C89236 * C89217) *
               C89307 +
           ((C100 * C4101 - C101 * C4097 - C100 * C4102 + C89 * C4109 +
             C102 * C4103 - C103 * C4098 - C102 * C4104 + C90 * C4110 +
             C104 * C4105 - C105 * C4099 - C104 * C4106 + C91 * C4111) *
                C89247 * C89236 * C89217 -
            (C104 * C825 - C105 * C817 - C104 * C826 + C91 * C841 +
             C102 * C827 - C103 * C818 - C102 * C828 + C90 * C842 +
             C100 * C829 - C101 * C819 - C100 * C830 + C89 * C843) *
                C89247 * C89236 * C9228) *
               C89189) *
              C89299 +
          (((C100 * C1732 - C101 * C1723 - C100 * C1733 + C89 * C1747 +
             C102 * C1730 - C103 * C1722 - C102 * C1731 + C90 * C1746 +
             C104 * C1742 - C105 * C1728 - C104 * C1743 + C91 * C1752) *
                C89247 * C89236 * C89217 -
            (C104 * C118 - C105 * C109 - C104 * C119 + C91 * C127 +
             C102 * C116 - C103 * C108 - C102 * C117 + C90 * C126 +
             C100 * C114 - C101 * C107 - C100 * C115 + C89 * C125) *
                C89247 * C89236 * C9228) *
               C89307 +
           ((C100 * C827 - C101 * C818 - C100 * C828 + C89 * C842 +
             C102 * C825 - C103 * C817 - C102 * C826 + C90 * C841 +
             C104 * C837 - C105 * C823 - C104 * C838 + C91 * C847) *
                C89247 * C89236 * C9228 -
            (C104 * C4107 - C105 * C4100 - C104 * C4108 + C91 * C4112 +
             C102 * C4105 - C103 * C4099 - C102 * C4106 + C90 * C4111 +
             C100 * C4103 - C101 * C4098 - C100 * C4104 + C89 * C4110) *
                C89247 * C89236 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                 C25848 +
             C27042 * C25849 + C27043 * C25850) *
                C89236 * C9228 -
            (C27044 * C25850 + C27043 * C25849 + C27042 * C25848) * C89236 *
                C89217) *
               C89307 +
           ((C16717 * C25848 + C18856 * C25849 + C31296 * C25850) * C89236 *
                C89217 -
            (C18856 * C25850 + C16717 * C25849 + C13788 * C25848) * C89236 *
                C9228) *
               C89189) *
              C89299 +
          (((C27045 * C25848 + C27046 * C25849 + C27047 * C25850) * C89236 *
                C89217 -
            (C27046 * C25850 + C27045 * C25849 +
             (C13261 * C114 - C13262 * C107 - C13261 * C115 + C89093 * C125) *
                 C25848) *
                C89236 * C9228) *
               C89307 +
           ((C13791 * C25848 + C16718 * C25849 + C29250 * C25850) * C89236 *
                C9228 -
            ((C13261 * C29240 - C13262 * C29239 - C13261 * C29241 +
              C89093 * C29242) *
                 C25850 +
             C29250 * C25849 + C16718 * C25848) *
                C89236 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eexy[40] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
              C13260 * C926 - C13315 * C820) *
                 C13261 +
             (C13258 * C187 - C13313 * C113 + C13259 * C931 - C13314 * C830 +
              C13260 * C934 - C13315 * C832) *
                 C89093) *
                C89247 * C9228 +
            ((C13313 * C1724 - C13258 * C1828 + C13314 * C4097 -
              C13259 * C4211 + C13315 * C8516 - C13260 * C8600) *
                 C13261 +
             (C13313 * C1735 - C13258 * C1836 + C13314 * C4102 -
              C13259 * C4215 + C13315 * C8522 - C13260 * C8603) *
                 C89093) *
                C89247 * C89217) *
               C89307 +
           (((C13313 * C819 - C13258 * C923 + C13314 * C820 - C13259 * C926 +
              C13315 * C5727 - C13260 * C5787) *
                 C13261 +
             (C13313 * C830 - C13258 * C931 + C13314 * C832 - C13259 * C934 +
              C13315 * C5733 - C13260 * C5790) *
                 C89093) *
                C89247 * C9228 +
            ((C13258 * C4211 - C13313 * C4097 + C13259 * C8600 -
              C13314 * C8516 + C13260 * C16821 - C13315 * C16683) *
                 C13261 +
             (C13258 * C4215 - C13313 * C4102 + C13259 * C8603 -
              C13314 * C8522 + C13260 * C16823 - C13315 * C16686) *
                 C89093) *
                C89247 * C89217) *
               C89189) *
              C89299 +
          ((((C13313 * C107 - C13258 * C182 + C13314 * C818 - C13259 * C924 +
              C13315 * C821 - C13260 * C927) *
                 C13261 +
             (C13313 * C115 - C13258 * C188 + C13314 * C828 - C13259 * C932 +
              C13315 * C834 - C13260 * C935) *
                 C89093) *
                C89247 * C9228 +
            ((C13258 * C1829 - C13313 * C1723 + C13259 * C4212 -
              C13314 * C4098 + C13260 * C8601 - C13315 * C8515) *
                 C13261 +
             (C13258 * C1837 - C13313 * C1733 + C13259 * C4216 -
              C13314 * C4104 + C13260 * C8604 - C13315 * C8520) *
                 C89093) *
                C89247 * C89217) *
               C89307 +
           (((C13258 * C924 - C13313 * C818 + C13259 * C927 - C13314 * C821 +
              C13260 * C5788 - C13315 * C5726) *
                 C13261 +
             (C13258 * C932 - C13313 * C828 + C13259 * C935 - C13314 * C834 +
              C13260 * C5791 - C13315 * C5731) *
                 C89093) *
                C89247 * C9228 +
            ((C13313 * C4098 - C13258 * C4212 + C13314 * C8515 -
              C13259 * C8601 + C13315 * C16684 - C13260 * C16822) *
                 C13261 +
             (C13313 * C4104 - C13258 * C4216 + C13314 * C8520 -
              C13259 * C8604 + C13315 * C16688 - C13260 * C16824) *
                 C89093) *
                C89247 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C100 +
             (C89236 * C187 - C180 * C113) * C89 + (C194 - C195) * C102 +
             (C196 - C197) * C90 + C210 * C104 + C211 * C91) *
                C89247 * C9228 +
            ((C180 * C1724 - C89236 * C1828) * C100 +
             (C180 * C1735 - C89236 * C1836) * C89 + (C1845 - C1846) * C102 +
             (C1847 - C1848) * C90 + C3433 * C104 + C3434 * C91) *
                C89247 * C89217) *
               C89307 +
           (((C180 * C819 - C89236 * C923) * C100 +
             (C180 * C830 - C89236 * C931) * C89 + (C940 - C941) * C102 +
             (C942 - C943) * C90 + C2710 * C104 + C2711 * C91) *
                C89247 * C9228 +
            ((C89236 * C4211 - C180 * C4097) * C100 +
             (C89236 * C4215 - C180 * C4102) * C89 + (C4220 - C4221) * C102 +
             (C4222 - C4223) * C90 + (C4224 - C4225) * C104 +
             (C4226 - C4227) * C91) *
                C89247 * C89217) *
               C89189) *
              C89299 +
          ((((C195 - C194) * C100 + (C197 - C196) * C89 + (C199 - C198) * C102 +
             (C201 - C200) * C90 + C212 * C104 + C213 * C91) *
                C89247 * C9228 +
            ((C1846 - C1845) * C100 + (C1848 - C1847) * C89 +
             (C1850 - C1849) * C102 + (C1852 - C1851) * C90 +
             (C3435 - C3436) * C104 + (C3437 - C3438) * C91) *
                C89247 * C89217) *
               C89307 +
           (((C941 - C940) * C100 + (C943 - C942) * C89 + (C945 - C944) * C102 +
             (C947 - C946) * C90 + (C2712 - C2713) * C104 +
             (C2714 - C2715) * C91) *
                C89247 * C9228 +
            ((C4221 - C4220) * C100 + (C4223 - C4222) * C89 +
             (C4225 - C4224) * C102 + (C4227 - C4226) * C90 +
             (C180 * C4100 - C89236 * C4214) * C104 +
             (C180 * C4108 - C89236 * C4218) * C91) *
                C89247 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C89236 * C181 - C180 * C106) * C13261 +
              (C89236 * C187 - C180 * C113) * C89093) *
                 C25848 +
             ((C27126 - C27127) * C13261 + (C27128 - C27129) * C89093) *
                 C25849 +
             C27151 * C25850) *
                C9228 +
            (((C27127 - C27126) * C13261 + (C27129 - C27128) * C89093) *
                 C25848 +
             ((C27131 - C27130) * C13261 + (C27133 - C27132) * C89093) *
                 C25849 +
             C35628 * C25850) *
                C89217) *
               C89307 +
           ((((C180 * C819 - C89236 * C923) * C13261 +
              (C180 * C830 - C89236 * C931) * C89093) *
                 C25848 +
             ((C29351 - C29352) * C13261 + (C29353 - C29354) * C89093) *
                 C25849 +
             C31381 * C25850) *
                C9228 +
            (((C29352 - C29351) * C13261 + (C29354 - C29353) * C89093) *
                 C25848 +
             ((C29356 - C29355) * C13261 + (C29358 - C29357) * C89093) *
                 C25849 +
             ((C31375 - C31376) * C13261 + (C31377 - C31378) * C89093) *
                 C25850) *
                C89217) *
               C89189) *
              C89299 +
          (((((C195 - C194) * C13261 + (C197 - C196) * C89093) * C25848 +
             ((C1845 - C1846) * C13261 + (C1847 - C1848) * C89093) * C25849 +
             C27150 * C25850) *
                C9228 +
            (((C1846 - C1845) * C13261 + (C1848 - C1847) * C89093) * C25848 +
             ((C1853 - C1854) * C13261 + (C1855 - C1856) * C89093) * C25849 +
             ((C27140 - C27141) * C13261 + (C27142 - C27143) * C89093) *
                 C25850) *
                C89217) *
               C89307 +
           ((((C941 - C940) * C13261 + (C943 - C942) * C89093) * C25848 +
             ((C4220 - C4221) * C13261 + (C4222 - C4223) * C89093) * C25849 +
             ((C29359 - C29360) * C13261 + (C29361 - C29362) * C89093) *
                 C25850) *
                C9228 +
            (((C4221 - C4220) * C13261 + (C4223 - C4222) * C89093) * C25848 +
             ((C29360 - C29359) * C13261 + (C29362 - C29361) * C89093) *
                 C25849 +
             ((C180 * C29239 - C89236 * C29348) * C13261 +
              (C180 * C29241 - C89236 * C29349) * C89093) *
                 C25850) *
                C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eexz[40] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C89247 * C264 - C263 * C106) * C13261 +
              (C89247 * C270 - C263 * C113) * C89093) *
                 C13258 +
             ((C13956 - C13957) * C13261 + (C13958 - C13959) * C89093) *
                 C13259 +
             C13981 * C13260) *
                C9228 +
            (((C263 * C1724 - C89247 * C1934) * C13261 +
              (C263 * C1735 - C89247 * C1942) * C89093) *
                 C13258 +
             ((C16928 - C16929) * C13261 + (C16930 - C16931) * C89093) *
                 C13259 +
             C21296 * C13260) *
                C89217) *
               C89307 +
           ((((C13957 - C13956) * C13261 + (C13959 - C13958) * C89093) *
                 C13258 +
             ((C13961 - C13960) * C13261 + (C13963 - C13962) * C89093) *
                 C13259 +
             C18435 * C13260) *
                C9228 +
            (((C16929 - C16928) * C13261 + (C16931 - C16930) * C89093) *
                 C13258 +
             ((C16933 - C16932) * C13261 + (C16935 - C16934) * C89093) *
                 C13259 +
             ((C21290 - C21291) * C13261 + (C21292 - C21293) * C89093) *
                 C13260) *
                C89217) *
               C89189) *
              C89299 +
          (((((C278 - C277) * C13261 + (C280 - C279) * C89093) * C13258 +
             ((C1046 - C1047) * C13261 + (C1048 - C1049) * C89093) * C13259 +
             C13980 * C13260) *
                C9228 +
            (((C1952 - C1951) * C13261 + (C1954 - C1953) * C89093) * C13258 +
             ((C4334 - C4335) * C13261 + (C4336 - C4337) * C89093) * C13259 +
             ((C16936 - C16937) * C13261 + (C16938 - C16939) * C89093) *
                 C13260) *
                C89217) *
               C89307 +
           ((((C1047 - C1046) * C13261 + (C1049 - C1048) * C89093) * C13258 +
             ((C1054 - C1055) * C13261 + (C1056 - C1057) * C89093) * C13259 +
             ((C13970 - C13971) * C13261 + (C13972 - C13973) * C89093) *
                 C13260) *
                C9228 +
            (((C4335 - C4334) * C13261 + (C4337 - C4336) * C89093) * C13258 +
             ((C16937 - C16936) * C13261 + (C16939 - C16938) * C89093) *
                 C13259 +
             ((C263 * C16684 - C89247 * C16924) * C13261 +
              (C263 * C16688 - C89247 * C16926) * C89093) *
                 C13260) *
                C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C100 +
             (C89247 * C270 - C263 * C113) * C89 + (C277 - C278) * C102 +
             (C279 - C280) * C90 + C293 * C104 + C294 * C91) *
                C89236 * C9228 +
            ((C263 * C1724 - C89247 * C1934) * C100 +
             (C263 * C1735 - C89247 * C1942) * C89 + (C1951 - C1952) * C102 +
             (C1953 - C1954) * C90 + C3515 * C104 + C3516 * C91) *
                C89236 * C89217) *
               C89307 +
           (((C263 * C819 - C89247 * C1029) * C100 +
             (C263 * C830 - C89247 * C1037) * C89 + (C1046 - C1047) * C102 +
             (C1048 - C1049) * C90 + C2792 * C104 + C2793 * C91) *
                C89236 * C9228 +
            ((C89247 * C4325 - C263 * C4097) * C100 +
             (C89247 * C4329 - C263 * C4102) * C89 + (C4334 - C4335) * C102 +
             (C4336 - C4337) * C90 + (C4338 - C4339) * C104 +
             (C4340 - C4341) * C91) *
                C89236 * C89217) *
               C89189) *
              C89299 +
          ((((C278 - C277) * C100 + (C280 - C279) * C89 + (C282 - C281) * C102 +
             (C284 - C283) * C90 + C295 * C104 + C296 * C91) *
                C89236 * C9228 +
            ((C1952 - C1951) * C100 + (C1954 - C1953) * C89 +
             (C1956 - C1955) * C102 + (C1958 - C1957) * C90 +
             (C3517 - C3518) * C104 + (C3519 - C3520) * C91) *
                C89236 * C89217) *
               C89307 +
           (((C1047 - C1046) * C100 + (C1049 - C1048) * C89 +
             (C1051 - C1050) * C102 + (C1053 - C1052) * C90 +
             (C2794 - C2795) * C104 + (C2796 - C2797) * C91) *
                C89236 * C9228 +
            ((C4335 - C4334) * C100 + (C4337 - C4336) * C89 +
             (C4339 - C4338) * C102 + (C4341 - C4340) * C90 +
             (C263 * C4100 - C89247 * C4328) * C104 +
             (C263 * C4108 - C89247 * C4332) * C91) *
                C89236 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C25848 * C264 - C25951 * C106 + C25849 * C1934 - C25952 * C1724 +
              C25850 * C1937 - C25953 * C1725) *
                 C13261 +
             (C25848 * C270 - C25951 * C113 + C25849 * C1942 - C25952 * C1735 +
              C25850 * C1945 - C25953 * C1737) *
                 C89093) *
                C89236 * C9228 +
            ((C25951 * C1724 - C25848 * C1934 + C25952 * C1725 -
              C25849 * C1937 + C25953 * C10544 - C25850 * C10660) *
                 C13261 +
             (C25951 * C1735 - C25848 * C1942 + C25952 * C1737 -
              C25849 * C1945 + C25953 * C10550 - C25850 * C10663) *
                 C89093) *
                C89236 * C89217) *
               C89307 +
           (((C25951 * C819 - C25848 * C1029 + C25952 * C4097 - C25849 * C4325 +
              C25953 * C6249 - C25850 * C6413) *
                 C13261 +
             (C25951 * C830 - C25848 * C1037 + C25952 * C4102 - C25849 * C4329 +
              C25953 * C6255 - C25850 * C6416) *
                 C89093) *
                C89236 * C9228 +
            ((C25848 * C4325 - C25951 * C4097 + C25849 * C6413 -
              C25952 * C6249 + C25850 * C23264 - C25953 * C23153) *
                 C13261 +
             (C25848 * C4329 - C25951 * C4102 + C25849 * C6416 -
              C25952 * C6255 + C25850 * C23266 - C25953 * C23157) *
                 C89093) *
                C89236 * C89217) *
               C89189) *
              C89299 +
          ((((C25951 * C107 - C25848 * C265 + C25952 * C1723 - C25849 * C1935 +
              C25953 * C1726 - C25850 * C1938) *
                 C13261 +
             (C25951 * C115 - C25848 * C271 + C25952 * C1733 - C25849 * C1943 +
              C25953 * C1739 - C25850 * C1946) *
                 C89093) *
                C89236 * C9228 +
            ((C25848 * C1935 - C25951 * C1723 + C25849 * C1938 -
              C25952 * C1726 + C25850 * C10661 - C25953 * C10543) *
                 C13261 +
             (C25848 * C1943 - C25951 * C1733 + C25849 * C1946 -
              C25952 * C1739 + C25850 * C10664 - C25953 * C10548) *
                 C89093) *
                C89236 * C89217) *
               C89307 +
           (((C25848 * C1030 - C25951 * C818 + C25849 * C4326 - C25952 * C4098 +
              C25850 * C6414 - C25953 * C6248) *
                 C13261 +
             (C25848 * C1038 - C25951 * C828 + C25849 * C4330 - C25952 * C4104 +
              C25850 * C6417 - C25953 * C6253) *
                 C89093) *
                C89236 * C9228 +
            ((C25951 * C4098 - C25848 * C4326 + C25952 * C6248 -
              C25849 * C6414 + C25953 * C29239 - C25850 * C29460) *
                 C13261 +
             (C25951 * C4104 - C25848 * C4330 + C25952 * C6253 -
              C25849 * C6417 + C25953 * C29241 - C25850 * C29461) *
                 C89093) *
                C89236 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[40] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C13313 +
             (C89093 * C352 - C13261 * C346) * C13258 +
             (C14060 - C14061) * C13314 + (C14062 - C14063) * C13259 +
             C14084 * C13315 + C14085 * C13260) *
                C89247 * C9228 +
            ((C13261 * C1724 - C89093 * C1734) * C13313 +
             (C13261 * C2040 - C89093 * C2048) * C13258 +
             (C17042 - C17043) * C13314 + (C17044 - C17045) * C13259 +
             C21373 * C13315 + C21374 * C13260) *
                C89247 * C89217) *
               C89307 +
           (((C14061 - C14060) * C13313 + (C14063 - C14062) * C13258 +
             (C14065 - C14064) * C13314 + (C14067 - C14066) * C13259 +
             C18488 * C13315 + C18489 * C13260) *
                C89247 * C9228 +
            ((C17043 - C17042) * C13313 + (C17045 - C17044) * C13258 +
             (C17047 - C17046) * C13314 + (C17049 - C17048) * C13259 +
             (C21375 - C21376) * C13315 + (C21377 - C21378) * C13260) *
                C89247 * C89217) *
               C89189) *
              C89299 +
          ((((C13261 * C107 - C89093 * C114) * C13313 +
             (C13261 * C347 - C89093 * C353) * C13258 +
             (C14072 - C14073) * C13314 + (C14074 - C14075) * C13259 +
             C14086 * C13315 + C14087 * C13260) *
                C89247 * C9228 +
            ((C89093 * C1732 - C13261 * C1723) * C13313 +
             (C89093 * C2049 - C13261 * C2041) * C13258 +
             (C17050 - C17051) * C13314 + (C17052 - C17053) * C13259 +
             (C17054 - C17055) * C13315 + (C17056 - C17057) * C13260) *
                C89247 * C89217) *
               C89307 +
           (((C14073 - C14072) * C13313 + (C14075 - C14074) * C13258 +
             (C14077 - C14076) * C13314 + (C14079 - C14078) * C13259 +
             (C14080 - C14081) * C13315 + (C14082 - C14083) * C13260) *
                C89247 * C9228 +
            ((C17051 - C17050) * C13313 + (C17053 - C17052) * C13258 +
             (C17055 - C17054) * C13314 + (C17057 - C17056) * C13259 +
             (C13261 * C16684 - C89093 * C16687) * C13315 +
             (C13261 * C17038 - C89093 * C17040) * C13260) *
                C89247 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 + C91 * C116 -
              C104 * C108) *
                 C180 +
             (C89 * C352 - C100 * C346 + C90 * C353 - C102 * C347 + C91 * C354 -
              C104 * C348) *
                 C89236) *
                C89247 * C9228 +
            ((C100 * C1724 - C89 * C1734 + C102 * C1723 - C90 * C1732 +
              C104 * C1722 - C91 * C1730) *
                 C180 +
             (C100 * C2040 - C89 * C2048 + C102 * C2041 - C90 * C2049 +
              C104 * C2042 - C91 * C2050) *
                 C89236) *
                C89247 * C89217) *
               C89307 +
           (((C100 * C819 - C89 * C829 + C102 * C818 - C90 * C827 +
              C104 * C817 - C91 * C825) *
                 C180 +
             (C100 * C1135 - C89 * C1143 + C102 * C1136 - C90 * C1144 +
              C104 * C1137 - C91 * C1145) *
                 C89236) *
                C89247 * C9228 +
            ((C89 * C4101 - C100 * C4097 + C90 * C4103 - C102 * C4098 +
              C91 * C4105 - C104 * C4099) *
                 C180 +
             (C89 * C4443 - C100 * C4439 + C90 * C4444 - C102 * C4440 +
              C91 * C4445 - C104 * C4441) *
                 C89236) *
                C89247 * C89217) *
               C89189) *
              C89299 +
          ((((C100 * C107 - C89 * C114 + C102 * C108 - C90 * C116 +
              C104 * C109 - C91 * C118) *
                 C180 +
             (C100 * C347 - C89 * C353 + C102 * C348 - C90 * C354 +
              C104 * C349 - C91 * C355) *
                 C89236) *
                C89247 * C9228 +
            ((C89 * C1732 - C100 * C1723 + C90 * C1730 - C102 * C1722 +
              C91 * C1742 - C104 * C1728) *
                 C180 +
             (C89 * C2049 - C100 * C2041 + C90 * C2050 - C102 * C2042 +
              C91 * C2054 - C104 * C2046) *
                 C89236) *
                C89247 * C89217) *
               C89307 +
           (((C89 * C827 - C100 * C818 + C90 * C825 - C102 * C817 + C91 * C837 -
              C104 * C823) *
                 C180 +
             (C89 * C1144 - C100 * C1136 + C90 * C1145 - C102 * C1137 +
              C91 * C1149 - C104 * C1141) *
                 C89236) *
                C89247 * C9228 +
            ((C100 * C4098 - C89 * C4103 + C102 * C4099 - C90 * C4105 +
              C104 * C4100 - C91 * C4107) *
                 C180 +
             (C100 * C4440 - C89 * C4444 + C102 * C4441 - C90 * C4445 +
              C104 * C4442 - C91 * C4446) *
                 C89236) *
                C89247 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C89093 * C112 - C13261 * C106) * C180 +
              (C89093 * C352 - C13261 * C346) * C89236) *
                 C25848 +
             ((C27308 - C27309) * C180 + (C27310 - C27311) * C89236) * C25849 +
             C27340 * C25850) *
                C9228 +
            (((C27309 - C27308) * C180 + (C27311 - C27310) * C89236) * C25848 +
             ((C27313 - C27312) * C180 + (C27315 - C27314) * C89236) * C25849 +
             C35741 * C25850) *
                C89217) *
               C89307 +
           ((((C14061 - C14060) * C180 + (C14063 - C14062) * C89236) * C25848 +
             ((C17042 - C17043) * C180 + (C17044 - C17045) * C89236) * C25849 +
             C31542 * C25850) *
                C9228 +
            (((C17043 - C17042) * C180 + (C17045 - C17044) * C89236) * C25848 +
             ((C19096 - C19097) * C180 + (C19098 - C19099) * C89236) * C25849 +
             ((C31536 - C31537) * C180 + (C31538 - C31539) * C89236) * C25850) *
                C89217) *
               C89189) *
              C89299 +
          (((((C13261 * C107 - C89093 * C114) * C180 +
              (C13261 * C347 - C89093 * C353) * C89236) *
                 C25848 +
             ((C27320 - C27321) * C180 + (C27322 - C27323) * C89236) * C25849 +
             C27341 * C25850) *
                C9228 +
            (((C27321 - C27320) * C180 + (C27323 - C27322) * C89236) * C25848 +
             ((C27325 - C27324) * C180 + (C27327 - C27326) * C89236) * C25849 +
             ((C27328 - C27329) * C180 + (C27330 - C27331) * C89236) * C25850) *
                C89217) *
               C89307 +
           ((((C14073 - C14072) * C180 + (C14075 - C14074) * C89236) * C25848 +
             ((C17050 - C17051) * C180 + (C17052 - C17053) * C89236) * C25849 +
             ((C29563 - C29564) * C180 + (C29565 - C29566) * C89236) * C25850) *
                C9228 +
            (((C17051 - C17050) * C180 + (C17053 - C17052) * C89236) * C25848 +
             ((C29564 - C29563) * C180 + (C29566 - C29565) * C89236) * C25849 +
             ((C13261 * C29239 - C89093 * C29240) * C180 +
              (C13261 * C29560 - C89093 * C29561) * C89236) *
                 C25850) *
                C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[40] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13313 * C181 - C13466 * C106 - C13313 * C346 + C13258 * C409 +
             C13314 * C923 - C13467 * C819 - C13314 * C1135 + C13259 * C1227 +
             C13315 * C926 - C13468 * C820 - C13315 * C1138 + C13260 * C1228) *
                C89093 * C89247 * C9228 -
            (C13315 * C8600 - C13468 * C8516 - C13315 * C8760 + C13260 * C8842 +
             C13314 * C4211 - C13467 * C4097 - C13314 * C4439 + C13259 * C4545 +
             C13313 * C1828 - C13466 * C1724 - C13313 * C2040 +
             C13258 * C2132) *
                C89093 * C89247 * C89217) *
               C89307 +
           ((C13313 * C4211 - C13466 * C4097 - C13313 * C4439 + C13258 * C4545 +
             C13314 * C8600 - C13467 * C8516 - C13314 * C8760 + C13259 * C8842 +
             C13315 * C16821 - C13468 * C16683 - C13315 * C17037 +
             C13260 * C17155) *
                C89093 * C89247 * C89217 -
            (C13315 * C5787 - C13468 * C5727 - C13315 * C5899 + C13260 * C5957 +
             C13314 * C926 - C13467 * C820 - C13314 * C1138 + C13259 * C1228 +
             C13313 * C923 - C13466 * C819 - C13313 * C1135 + C13258 * C1227) *
                C89093 * C89247 * C9228) *
               C89189) *
              C89299 +
          (((C13313 * C1829 - C13466 * C1723 - C13313 * C2041 + C13258 * C2131 +
             C13314 * C4212 - C13467 * C4098 - C13314 * C4440 + C13259 * C4546 +
             C13315 * C8601 - C13468 * C8515 - C13315 * C8761 +
             C13260 * C8841) *
                C89093 * C89247 * C89217 -
            (C13315 * C927 - C13468 * C821 - C13315 * C1139 + C13260 * C1229 +
             C13314 * C924 - C13467 * C818 - C13314 * C1136 + C13259 * C1226 +
             C13313 * C182 - C13466 * C107 - C13313 * C347 + C13258 * C410) *
                C89093 * C89247 * C9228) *
               C89307 +
           ((C13313 * C924 - C13466 * C818 - C13313 * C1136 + C13258 * C1226 +
             C13314 * C927 - C13467 * C821 - C13314 * C1139 + C13259 * C1229 +
             C13315 * C5788 - C13468 * C5726 - C13315 * C5900 +
             C13260 * C5956) *
                C89093 * C89247 * C9228 -
            (C13315 * C16822 - C13468 * C16684 - C13315 * C17038 +
             C13260 * C17156 + C13314 * C8601 - C13467 * C8515 -
             C13314 * C8761 + C13259 * C8841 + C13313 * C4212 - C13466 * C4098 -
             C13313 * C4440 + C13258 * C4546) *
                C89093 * C89247 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C89 +
             C440 * C90 + C441 * C91) *
                C89247 * C9228 -
            (C2163 * C91 + C2164 * C90 +
             (C180 * C1828 - C408 * C1724 - C180 * C2040 + C89236 * C2132) *
                 C89) *
                C89247 * C89217) *
               C89307 +
           (((C180 * C4211 - C408 * C4097 - C180 * C4439 + C89236 * C4545) *
                 C89 +
             C4562 * C90 + C4563 * C91) *
                C89247 * C89217 -
            (C1258 * C91 + C1259 * C90 +
             (C180 * C923 - C408 * C819 - C180 * C1135 + C89236 * C1227) *
                 C89) *
                C89247 * C9228) *
               C89189) *
              C89299 +
          (((C2164 * C89 + C2163 * C90 + C3678 * C91) * C89247 * C89217 -
            (C442 * C91 + C441 * C90 + C440 * C89) * C89247 * C9228) *
               C89307 +
           ((C1259 * C89 + C1258 * C90 + C2955 * C91) * C89247 * C9228 -
            ((C180 * C4214 - C408 * C4100 - C180 * C4442 + C89236 * C4548) *
                 C91 +
             C4563 * C90 + C4562 * C89) *
                C89247 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) *
                 C89093 * C25848 +
             C27448 * C25849 + C27449 * C25850) *
                C9228 -
            (C27450 * C25850 + C27449 * C25849 + C27448 * C25848) * C89217) *
               C89307 +
           ((C29688 * C25848 + C29689 * C25849 + C31625 * C25850) * C89217 -
            (C29689 * C25850 + C29688 * C25849 +
             (C180 * C923 - C408 * C819 - C180 * C1135 + C89236 * C1227) *
                 C89093 * C25848) *
                C9228) *
               C89189) *
              C89299 +
          (((C27430 * C25848 + C27431 * C25849 + C27451 * C25850) * C89217 -
            (C27431 * C25850 + C27430 * C25849 + C440 * C89093 * C25848) *
                C9228) *
               C89307 +
           ((C1259 * C89093 * C25848 + C29674 * C25849 + C29690 * C25850) *
                C9228 -
            ((C180 * C29348 - C408 * C29239 - C180 * C29560 + C89236 * C29664) *
                 C89093 * C25850 +
             C29690 * C25849 + C29674 * C25848) *
                C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[40] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C13313 +
             (C89247 * C493 - C263 * C346) * C13258 +
             (C13956 - C13957) * C13314 + (C14240 - C14241) * C13259 +
             C13974 * C13315 + C14249 * C13260) *
                C89093 * C9228 +
            ((C263 * C1724 - C89247 * C1934) * C13313 +
             (C263 * C2040 - C89247 * C2240) * C13258 +
             (C16928 - C16929) * C13314 + (C17258 - C17259) * C13259 +
             C21288 * C13315 + C21529 * C13260) *
                C89093 * C89217) *
               C89307 +
           (((C13957 - C13956) * C13313 + (C14241 - C14240) * C13258 +
             (C13961 - C13960) * C13314 + (C14243 - C14242) * C13259 +
             C18427 * C13315 + C18596 * C13260) *
                C89093 * C9228 +
            ((C16929 - C16928) * C13313 + (C17259 - C17258) * C13258 +
             (C16933 - C16932) * C13314 + (C17261 - C17260) * C13259 +
             (C21290 - C21291) * C13315 + (C21530 - C21531) * C13260) *
                C89093 * C89217) *
               C89189) *
              C89299 +
          ((((C278 - C277) * C13313 + (C501 - C500) * C13258 +
             (C1046 - C1047) * C13314 + (C1344 - C1345) * C13259 +
             C13968 * C13315 + C14246 * C13260) *
                C89093 * C9228 +
            ((C1952 - C1951) * C13313 + (C2250 - C2249) * C13258 +
             (C4334 - C4335) * C13314 + (C4666 - C4667) * C13259 +
             (C16936 - C16937) * C13315 + (C17262 - C17263) * C13260) *
                C89093 * C89217) *
               C89307 +
           (((C1047 - C1046) * C13313 + (C1345 - C1344) * C13258 +
             (C1054 - C1055) * C13314 + (C1348 - C1349) * C13259 +
             (C13970 - C13971) * C13315 + (C14247 - C14248) * C13260) *
                C89093 * C9228 +
            ((C4335 - C4334) * C13313 + (C4667 - C4666) * C13258 +
             (C16937 - C16936) * C13314 + (C17263 - C17262) * C13259 +
             (C263 * C16684 - C89247 * C16924) * C13315 +
             (C263 * C17038 - C89247 * C17256) * C13260) *
                C89093 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C89247 * C264 - C263 * C106) * C180 +
              (C89247 * C493 - C263 * C346) * C89236) *
                 C89 +
             ((C277 - C278) * C180 + (C500 - C501) * C89236) * C90 +
             C514 * C91) *
                C9228 +
            (((C263 * C1724 - C89247 * C1934) * C180 +
              (C263 * C2040 - C89247 * C2240) * C89236) *
                 C89 +
             ((C1951 - C1952) * C180 + (C2249 - C2250) * C89236) * C90 +
             C3759 * C91) *
                C89217) *
               C89307 +
           ((((C263 * C819 - C89247 * C1029) * C180 +
              (C263 * C1135 - C89247 * C1335) * C89236) *
                 C89 +
             ((C1046 - C1047) * C180 + (C1344 - C1345) * C89236) * C90 +
             C3036 * C91) *
                C9228 +
            (((C89247 * C4325 - C263 * C4097) * C180 +
              (C89247 * C4661 - C263 * C4439) * C89236) *
                 C89 +
             ((C4334 - C4335) * C180 + (C4666 - C4667) * C89236) * C90 +
             ((C4338 - C4339) * C180 + (C4668 - C4669) * C89236) * C91) *
                C89217) *
               C89189) *
              C89299 +
          (((((C278 - C277) * C180 + (C501 - C500) * C89236) * C89 +
             ((C282 - C281) * C180 + (C504 - C503) * C89236) * C90 +
             C515 * C91) *
                C9228 +
            (((C1952 - C1951) * C180 + (C2250 - C2249) * C89236) * C89 +
             ((C1956 - C1955) * C180 + (C2252 - C2251) * C89236) * C90 +
             ((C3517 - C3518) * C180 + (C3756 - C3757) * C89236) * C91) *
                C89217) *
               C89307 +
           ((((C1047 - C1046) * C180 + (C1345 - C1344) * C89236) * C89 +
             ((C1051 - C1050) * C180 + (C1347 - C1346) * C89236) * C90 +
             ((C2794 - C2795) * C180 + (C3033 - C3034) * C89236) * C91) *
                C9228 +
            (((C4335 - C4334) * C180 + (C4667 - C4666) * C89236) * C89 +
             ((C4339 - C4338) * C180 + (C4669 - C4668) * C89236) * C90 +
             ((C263 * C4100 - C89247 * C4328) * C180 +
              (C263 * C4442 - C89247 * C4664) * C89236) *
                 C91) *
                C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C25848 * C264 - C25951 * C106 + C25849 * C1934 - C25952 * C1724 +
              C25850 * C1937 - C25953 * C1725) *
                 C180 +
             (C25848 * C493 - C25951 * C346 + C25849 * C2240 - C25952 * C2040 +
              C25850 * C2243 - C25953 * C2043) *
                 C89236) *
                C89093 * C9228 +
            ((C25951 * C1724 - C25848 * C1934 + C25952 * C1725 -
              C25849 * C1937 + C25953 * C10544 - C25850 * C10660) *
                 C180 +
             (C25951 * C2040 - C25848 * C2240 + C25952 * C2043 -
              C25849 * C2243 + C25953 * C10716 - C25850 * C10825) *
                 C89236) *
                C89093 * C89217) *
               C89307 +
           (((C25951 * C819 - C25848 * C1029 + C25952 * C4097 - C25849 * C4325 +
              C25953 * C6249 - C25850 * C6413) *
                 C180 +
             (C25951 * C1135 - C25848 * C1335 + C25952 * C4439 -
              C25849 * C4661 + C25953 * C6493 - C25850 * C6650) *
                 C89236) *
                C89093 * C9228 +
            ((C25848 * C4325 - C25951 * C4097 + C25849 * C6413 -
              C25952 * C6249 + C25850 * C23264 - C25953 * C23153) *
                 C180 +
             (C25848 * C4661 - C25951 * C4439 + C25849 * C6650 -
              C25952 * C6493 + C25850 * C23424 - C25953 * C23318) *
                 C89236) *
                C89093 * C89217) *
               C89189) *
              C89299 +
          ((((C25951 * C107 - C25848 * C265 + C25952 * C1723 - C25849 * C1935 +
              C25953 * C1726 - C25850 * C1938) *
                 C180 +
             (C25951 * C347 - C25848 * C494 + C25952 * C2041 - C25849 * C2241 +
              C25953 * C2044 - C25850 * C2244) *
                 C89236) *
                C89093 * C9228 +
            ((C25848 * C1935 - C25951 * C1723 + C25849 * C1938 -
              C25952 * C1726 + C25850 * C10661 - C25953 * C10543) *
                 C180 +
             (C25848 * C2241 - C25951 * C2041 + C25849 * C2244 -
              C25952 * C2044 + C25850 * C10826 - C25953 * C10717) *
                 C89236) *
                C89093 * C89217) *
               C89307 +
           (((C25848 * C1030 - C25951 * C818 + C25849 * C4326 - C25952 * C4098 +
              C25850 * C6414 - C25953 * C6248) *
                 C180 +
             (C25848 * C1336 - C25951 * C1136 + C25849 * C4662 -
              C25952 * C4440 + C25850 * C6651 - C25953 * C6494) *
                 C89236) *
                C89093 * C9228 +
            ((C25951 * C4098 - C25848 * C4326 + C25952 * C6248 -
              C25849 * C6414 + C25953 * C29239 - C25850 * C29460) *
                 C180 +
             (C25951 * C4440 - C25848 * C4662 + C25952 * C6494 -
              C25849 * C6651 + C25953 * C29560 - C25850 * C29788) *
                 C89236) *
                C89093 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eezx[40] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C89093 * C112 - C13261 * C106) * C263 +
              (C89093 * C571 - C13261 * C565) * C89247) *
                 C13258 +
             ((C14060 - C14061) * C263 + (C14328 - C14329) * C89247) * C13259 +
             C14346 * C13260) *
                C9228 +
            (((C13261 * C1724 - C89093 * C1734) * C263 +
              (C13261 * C2330 - C89093 * C2338) * C89247) *
                 C13258 +
             ((C17042 - C17043) * C263 + (C17366 - C17367) * C89247) * C13259 +
             C21613 * C13260) *
                C89217) *
               C89307 +
           ((((C14061 - C14060) * C263 + (C14329 - C14328) * C89247) * C13258 +
             ((C14065 - C14064) * C263 + (C14332 - C14331) * C89247) * C13259 +
             C18656 * C13260) *
                C9228 +
            (((C17043 - C17042) * C263 + (C17367 - C17366) * C89247) * C13258 +
             ((C17047 - C17046) * C263 + (C17369 - C17368) * C89247) * C13259 +
             ((C21375 - C21376) * C263 + (C21610 - C21611) * C89247) * C13260) *
                C89217) *
               C89189) *
              C89299 +
          (((((C13261 * C107 - C89093 * C114) * C263 +
              (C13261 * C566 - C89093 * C572) * C89247) *
                 C13258 +
             ((C14072 - C14073) * C263 + (C14335 - C14336) * C89247) * C13259 +
             C14347 * C13260) *
                C9228 +
            (((C89093 * C1732 - C13261 * C1723) * C263 +
              (C89093 * C2339 - C13261 * C2331) * C89247) *
                 C13258 +
             ((C17050 - C17051) * C263 + (C17370 - C17371) * C89247) * C13259 +
             ((C17054 - C17055) * C263 + (C17372 - C17373) * C89247) * C13260) *
                C89217) *
               C89307 +
           ((((C14073 - C14072) * C263 + (C14336 - C14335) * C89247) * C13258 +
             ((C14077 - C14076) * C263 + (C14339 - C14338) * C89247) * C13259 +
             ((C14080 - C14081) * C263 + (C14340 - C14341) * C89247) * C13260) *
                C9228 +
            (((C17051 - C17050) * C263 + (C17371 - C17370) * C89247) * C13258 +
             ((C17055 - C17054) * C263 + (C17373 - C17372) * C89247) * C13259 +
             ((C13261 * C16684 - C89093 * C16687) * C263 +
              (C13261 * C17362 - C89093 * C17364) * C89247) *
                 C13260) *
                C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 + C91 * C116 -
              C104 * C108) *
                 C263 +
             (C89 * C571 - C100 * C565 + C90 * C572 - C102 * C566 + C91 * C573 -
              C104 * C567) *
                 C89247) *
                C89236 * C9228 +
            ((C100 * C1724 - C89 * C1734 + C102 * C1723 - C90 * C1732 +
              C104 * C1722 - C91 * C1730) *
                 C263 +
             (C100 * C2330 - C89 * C2338 + C102 * C2331 - C90 * C2339 +
              C104 * C2332 - C91 * C2340) *
                 C89247) *
                C89236 * C89217) *
               C89307 +
           (((C100 * C819 - C89 * C829 + C102 * C818 - C90 * C827 +
              C104 * C817 - C91 * C825) *
                 C263 +
             (C100 * C1425 - C89 * C1433 + C102 * C1426 - C90 * C1434 +
              C104 * C1427 - C91 * C1435) *
                 C89247) *
                C89236 * C9228 +
            ((C89 * C4101 - C100 * C4097 + C90 * C4103 - C102 * C4098 +
              C91 * C4105 - C104 * C4099) *
                 C263 +
             (C89 * C4771 - C100 * C4767 + C90 * C4772 - C102 * C4768 +
              C91 * C4773 - C104 * C4769) *
                 C89247) *
                C89236 * C89217) *
               C89189) *
              C89299 +
          ((((C100 * C107 - C89 * C114 + C102 * C108 - C90 * C116 +
              C104 * C109 - C91 * C118) *
                 C263 +
             (C100 * C566 - C89 * C572 + C102 * C567 - C90 * C573 +
              C104 * C568 - C91 * C574) *
                 C89247) *
                C89236 * C9228 +
            ((C89 * C1732 - C100 * C1723 + C90 * C1730 - C102 * C1722 +
              C91 * C1742 - C104 * C1728) *
                 C263 +
             (C89 * C2339 - C100 * C2331 + C90 * C2340 - C102 * C2332 +
              C91 * C2344 - C104 * C2336) *
                 C89247) *
                C89236 * C89217) *
               C89307 +
           (((C89 * C827 - C100 * C818 + C90 * C825 - C102 * C817 + C91 * C837 -
              C104 * C823) *
                 C263 +
             (C89 * C1434 - C100 * C1426 + C90 * C1435 - C102 * C1427 +
              C91 * C1439 - C104 * C1431) *
                 C89247) *
                C89236 * C9228 +
            ((C100 * C4098 - C89 * C4103 + C102 * C4099 - C90 * C4105 +
              C104 * C4100 - C91 * C4107) *
                 C263 +
             (C100 * C4768 - C89 * C4772 + C102 * C4769 - C90 * C4773 +
              C104 * C4770 - C91 * C4774) *
                 C89247) *
                C89236 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C25951 +
             (C89093 * C571 - C13261 * C565) * C25848 +
             (C27308 - C27309) * C25952 + (C27606 - C27607) * C25849 +
             C27332 * C25953 + C27618 * C25850) *
                C89236 * C9228 +
            ((C27309 - C27308) * C25951 + (C27607 - C27606) * C25848 +
             (C27313 - C27312) * C25952 + (C27609 - C27608) * C25849 +
             C35733 * C25953 + C35904 * C25850) *
                C89236 * C89217) *
               C89307 +
           (((C14061 - C14060) * C25951 + (C14329 - C14328) * C25848 +
             (C17042 - C17043) * C25952 + (C17366 - C17367) * C25849 +
             C31534 * C25953 + C31777 * C25850) *
                C89236 * C9228 +
            ((C17043 - C17042) * C25951 + (C17367 - C17366) * C25848 +
             (C19096 - C19097) * C25952 + (C19334 - C19335) * C25849 +
             (C31536 - C31537) * C25953 + (C31778 - C31779) * C25850) *
                C89236 * C89217) *
               C89189) *
              C89299 +
          ((((C13261 * C107 - C89093 * C114) * C25951 +
             (C13261 * C566 - C89093 * C572) * C25848 +
             (C27320 - C27321) * C25952 + (C27612 - C27613) * C25849 +
             C27334 * C25953 + C27619 * C25850) *
                C89236 * C9228 +
            ((C27321 - C27320) * C25951 + (C27613 - C27612) * C25848 +
             (C27325 - C27324) * C25952 + (C27615 - C27614) * C25849 +
             (C27328 - C27329) * C25953 + (C27616 - C27617) * C25850) *
                C89236 * C89217) *
               C89307 +
           (((C14073 - C14072) * C25951 + (C14336 - C14335) * C25848 +
             (C17050 - C17051) * C25952 + (C17370 - C17371) * C25849 +
             (C29563 - C29564) * C25953 + (C29890 - C29891) * C25850) *
                C89236 * C9228 +
            ((C17051 - C17050) * C25951 + (C17371 - C17370) * C25848 +
             (C29564 - C29563) * C25952 + (C29891 - C29890) * C25849 +
             (C13261 * C29239 - C89093 * C29240) * C25953 +
             (C13261 * C29887 - C89093 * C29888) * C25850) *
                C89236 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eezy[40] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
              C13260 * C926 - C13315 * C820) *
                 C263 +
             (C13258 * C627 - C13313 * C565 + C13259 * C1515 - C13314 * C1425 +
              C13260 * C1518 - C13315 * C1428) *
                 C89247) *
                C89093 * C9228 +
            ((C13313 * C1724 - C13258 * C1828 + C13314 * C4097 -
              C13259 * C4211 + C13315 * C8516 - C13260 * C8600) *
                 C263 +
             (C13313 * C2330 - C13258 * C2420 + C13314 * C4767 -
              C13259 * C4873 + C13315 * C8994 - C13260 * C9074) *
                 C89247) *
                C89093 * C89217) *
               C89307 +
           (((C13313 * C819 - C13258 * C923 + C13314 * C820 - C13259 * C926 +
              C13315 * C5727 - C13260 * C5787) *
                 C263 +
             (C13313 * C1425 - C13258 * C1515 + C13314 * C1428 -
              C13259 * C1518 + C13315 * C6061 - C13260 * C6117) *
                 C89247) *
                C89093 * C9228 +
            ((C13258 * C4211 - C13313 * C4097 + C13259 * C8600 -
              C13314 * C8516 + C13260 * C16821 - C13315 * C16683) *
                 C263 +
             (C13258 * C4873 - C13313 * C4767 + C13259 * C9074 -
              C13314 * C8994 + C13260 * C17471 - C13315 * C17361) *
                 C89247) *
                C89093 * C89217) *
               C89189) *
              C89299 +
          ((((C13313 * C107 - C13258 * C182 + C13314 * C818 - C13259 * C924 +
              C13315 * C821 - C13260 * C927) *
                 C263 +
             (C13313 * C566 - C13258 * C628 + C13314 * C1426 - C13259 * C1516 +
              C13315 * C1429 - C13260 * C1519) *
                 C89247) *
                C89093 * C9228 +
            ((C13258 * C1829 - C13313 * C1723 + C13259 * C4212 -
              C13314 * C4098 + C13260 * C8601 - C13315 * C8515) *
                 C263 +
             (C13258 * C2421 - C13313 * C2331 + C13259 * C4874 -
              C13314 * C4768 + C13260 * C9075 - C13315 * C8995) *
                 C89247) *
                C89093 * C89217) *
               C89307 +
           (((C13258 * C924 - C13313 * C818 + C13259 * C927 - C13314 * C821 +
              C13260 * C5788 - C13315 * C5726) *
                 C263 +
             (C13258 * C1516 - C13313 * C1426 + C13259 * C1519 -
              C13314 * C1429 + C13260 * C6118 - C13315 * C6062) *
                 C89247) *
                C89093 * C9228 +
            ((C13313 * C4098 - C13258 * C4212 + C13314 * C8515 -
              C13259 * C8601 + C13315 * C16684 - C13260 * C16822) *
                 C263 +
             (C13313 * C4768 - C13258 * C4874 + C13314 * C8995 -
              C13259 * C9075 + C13315 * C17362 - C13260 * C17472) *
                 C89247) *
                C89093 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C89236 * C181 - C180 * C106) * C263 +
              (C89236 * C627 - C180 * C565) * C89247) *
                 C89 +
             ((C194 - C195) * C263 + (C634 - C635) * C89247) * C90 +
             C648 * C91) *
                C9228 +
            (((C180 * C1724 - C89236 * C1828) * C263 +
              (C180 * C2330 - C89236 * C2420) * C89247) *
                 C89 +
             ((C1845 - C1846) * C263 + (C2429 - C2430) * C89247) * C90 +
             C3916 * C91) *
                C89217) *
               C89307 +
           ((((C180 * C819 - C89236 * C923) * C263 +
              (C180 * C1425 - C89236 * C1515) * C89247) *
                 C89 +
             ((C940 - C941) * C263 + (C1524 - C1525) * C89247) * C90 +
             C3193 * C91) *
                C9228 +
            (((C89236 * C4211 - C180 * C4097) * C263 +
              (C89236 * C4873 - C180 * C4767) * C89247) *
                 C89 +
             ((C4220 - C4221) * C263 + (C4878 - C4879) * C89247) * C90 +
             ((C4224 - C4225) * C263 + (C4880 - C4881) * C89247) * C91) *
                C89217) *
               C89189) *
              C89299 +
          (((((C195 - C194) * C263 + (C635 - C634) * C89247) * C89 +
             ((C199 - C198) * C263 + (C638 - C637) * C89247) * C90 +
             C649 * C91) *
                C9228 +
            (((C1846 - C1845) * C263 + (C2430 - C2429) * C89247) * C89 +
             ((C1850 - C1849) * C263 + (C2432 - C2431) * C89247) * C90 +
             ((C3435 - C3436) * C263 + (C3913 - C3914) * C89247) * C91) *
                C89217) *
               C89307 +
           ((((C941 - C940) * C263 + (C1525 - C1524) * C89247) * C89 +
             ((C945 - C944) * C263 + (C1527 - C1526) * C89247) * C90 +
             ((C2712 - C2713) * C263 + (C3190 - C3191) * C89247) * C91) *
                C9228 +
            (((C4221 - C4220) * C263 + (C4879 - C4878) * C89247) * C89 +
             ((C4225 - C4224) * C263 + (C4881 - C4880) * C89247) * C90 +
             ((C180 * C4100 - C89236 * C4214) * C263 +
              (C180 * C4770 - C89236 * C4876) * C89247) *
                 C91) *
                C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C25951 +
             (C89236 * C627 - C180 * C565) * C25848 +
             (C27126 - C27127) * C25952 + (C27696 - C27697) * C25849 +
             C27144 * C25953 + C27705 * C25850) *
                C89093 * C9228 +
            ((C27127 - C27126) * C25951 + (C27697 - C27696) * C25848 +
             (C27131 - C27130) * C25952 + (C27699 - C27698) * C25849 +
             C35620 * C25953 + C35958 * C25850) *
                C89093 * C89217) *
               C89307 +
           (((C180 * C819 - C89236 * C923) * C25951 +
             (C180 * C1425 - C89236 * C1515) * C25848 +
             (C29351 - C29352) * C25952 + (C29991 - C29992) * C25849 +
             C31373 * C25953 + C31855 * C25850) *
                C89093 * C9228 +
            ((C29352 - C29351) * C25951 + (C29992 - C29991) * C25848 +
             (C29356 - C29355) * C25952 + (C29994 - C29993) * C25849 +
             (C31375 - C31376) * C25953 + (C31856 - C31857) * C25850) *
                C89093 * C89217) *
               C89189) *
              C89299 +
          ((((C195 - C194) * C25951 + (C635 - C634) * C25848 +
             (C1845 - C1846) * C25952 + (C2429 - C2430) * C25849 +
             C27138 * C25953 + C27702 * C25850) *
                C89093 * C9228 +
            ((C1846 - C1845) * C25951 + (C2430 - C2429) * C25848 +
             (C1853 - C1854) * C25952 + (C2433 - C2434) * C25849 +
             (C27140 - C27141) * C25953 + (C27703 - C27704) * C25850) *
                C89093 * C89217) *
               C89307 +
           (((C941 - C940) * C25951 + (C1525 - C1524) * C25848 +
             (C4220 - C4221) * C25952 + (C4878 - C4879) * C25849 +
             (C29359 - C29360) * C25953 + (C29995 - C29996) * C25850) *
                C89093 * C9228 +
            ((C4221 - C4220) * C25951 + (C4879 - C4878) * C25848 +
             (C29360 - C29359) * C25952 + (C29996 - C29995) * C25849 +
             (C180 * C29239 - C89236 * C29348) * C25953 +
             (C180 * C29887 - C89236 * C29989) * C25850) *
                C89093 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eezz[40] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) *
                 C13258 +
             C14524 * C13259 + C14525 * C13260) *
                C89093 * C9228 -
            (C17592 * C13260 + C17593 * C13259 +
             (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
                 C13258) *
                C89093 * C89217) *
               C89307 +
           ((C17593 * C13258 + C17592 * C13259 + C21770 * C13260) * C89093 *
                C89217 -
            (C14526 * C13260 + C14525 * C13259 + C14524 * C13258) * C89093 *
                C9228) *
               C89189) *
              C89299 +
          (((C2544 * C13258 + C4996 * C13259 + C17594 * C13260) * C89093 *
                C89217 -
            (C1640 * C13260 + C1639 * C13259 + C731 * C13258) * C89093 *
                C9228) *
               C89307 +
           ((C1639 * C13258 + C1640 * C13259 + C14527 * C13260) * C89093 *
                C9228 -
            ((C263 * C16924 - C699 * C16684 - C263 * C17362 + C89247 * C17572) *
                 C13260 +
             C17594 * C13259 + C4996 * C13258) *
                C89093 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) *
                 C89236 * C89 +
             C735 * C90 + C736 * C91) *
                C9228 -
            (C2547 * C91 + C2548 * C90 +
             (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
                 C89236 * C89) *
                C89217) *
               C89307 +
           (((C263 * C4325 - C699 * C4097 - C263 * C4767 + C89247 * C4979) *
                 C89236 * C89 +
             C4998 * C90 + C4999 * C91) *
                C89217 -
            (C1642 * C91 + C1643 * C90 +
             (C263 * C1029 - C699 * C819 - C263 * C1425 + C89247 * C1607) *
                 C89236 * C89) *
                C9228) *
               C89189) *
              C89299 +
          (((C2548 * C89 + C2547 * C90 + C3999 * C91) * C89217 -
            (C737 * C91 + C736 * C90 + C735 * C89) * C9228) *
               C89307 +
           ((C1643 * C89 + C1642 * C90 + C3276 * C91) * C9228 -
            ((C263 * C4328 - C699 * C4100 - C263 * C4770 + C89247 * C4982) *
                 C89236 * C91 +
             C4999 * C90 + C4998 * C89) *
                C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C25951 * C264 - C26254 * C106 - C25951 * C565 + C25848 * C700 +
             C25952 * C1934 - C26255 * C1724 - C25952 * C2330 + C25849 * C2512 +
             C25953 * C1937 - C26256 * C1725 - C25953 * C2333 +
             C25850 * C2513) *
                C89236 * C89093 * C9228 -
            (C25953 * C10660 - C26256 * C10544 - C25953 * C10878 +
             C25850 * C10989 + C25952 * C1937 - C26255 * C1725 -
             C25952 * C2333 + C25849 * C2513 + C25951 * C1934 - C26254 * C1724 -
             C25951 * C2330 + C25848 * C2512) *
                C89236 * C89093 * C89217) *
               C89307 +
           ((C25951 * C4325 - C26254 * C4097 - C25951 * C4767 + C25848 * C4979 +
             C25952 * C6413 - C26255 * C6249 - C25952 * C6727 + C25849 * C6886 +
             C25953 * C23264 - C26256 * C23153 - C25953 * C23476 +
             C25850 * C23583) *
                C89236 * C89093 * C89217 -
            (C25953 * C6413 - C26256 * C6249 - C25953 * C6727 + C25850 * C6886 +
             C25952 * C4325 - C26255 * C4097 - C25952 * C4767 + C25849 * C4979 +
             C25951 * C1029 - C26254 * C819 - C25951 * C1425 + C25848 * C1607) *
                C89236 * C89093 * C9228) *
               C89189) *
              C89299 +
          (((C25951 * C1935 - C26254 * C1723 - C25951 * C2331 + C25848 * C2511 +
             C25952 * C1938 - C26255 * C1726 - C25952 * C2334 + C25849 * C2514 +
             C25953 * C10661 - C26256 * C10543 - C25953 * C10879 +
             C25850 * C10988) *
                C89236 * C89093 * C89217 -
            (C25953 * C1938 - C26256 * C1726 - C25953 * C2334 + C25850 * C2514 +
             C25952 * C1935 - C26255 * C1723 - C25952 * C2331 + C25849 * C2511 +
             C25951 * C265 - C26254 * C107 - C25951 * C566 + C25848 * C701) *
                C89236 * C89093 * C9228) *
               C89307 +
           ((C25951 * C1030 - C26254 * C818 - C25951 * C1426 + C25848 * C1606 +
             C25952 * C4326 - C26255 * C4098 - C25952 * C4768 + C25849 * C4980 +
             C25953 * C6414 - C26256 * C6248 - C25953 * C6728 +
             C25850 * C6885) *
                C89236 * C89093 * C9228 -
            (C25953 * C29460 - C26256 * C29239 - C25953 * C29887 +
             C25850 * C30094 + C25952 * C6414 - C26255 * C6248 -
             C25952 * C6728 + C25849 * C6885 + C25951 * C4326 - C26254 * C4098 -
             C25951 * C4768 + C25848 * C4980) *
                C89236 * C89093 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eexx[41] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                C89247 * C13258 +
            C13794 * C13259 + C13795 * C13260) *
               C89337 -
           (C16720 * C13260 + C16721 * C13259 +
            (C13261 * C1734 - C13262 * C1724 - C13261 * C1735 +
             C89093 * C1748) *
                C89247 * C13258) *
               C89338 +
           ((C13261 * C1736 - C13262 * C1725 - C13261 * C1737 +
             C89093 * C1749) *
                C89247 * C13258 +
            C18858 * C13259 + C18859 * C13260) *
               C11948) *
              C89307 +
          ((C16721 * C13258 + C16720 * C13259 + C21135 * C13260) * C89338 -
           (C13796 * C13260 + C13795 * C13259 + C13794 * C13258) * C89337 -
           ((C13261 * C18840 - C13262 * C18839 - C13261 * C18841 +
             C89093 * C18842) *
                C89247 * C13260 +
            C18859 * C13259 + C18858 * C13258) *
               C11948) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C112 - C101 * C106 - C100 * C113 + C89 * C124 + C102 * C114 -
            C103 * C107 - C102 * C115 + C90 * C125 + C104 * C116 - C105 * C108 -
            C104 * C117 + C91 * C126) *
               C89247 * C89236 * C89337 -
           (C104 * C1730 - C105 * C1722 - C104 * C1731 + C91 * C1746 +
            C102 * C1732 - C103 * C1723 - C102 * C1733 + C90 * C1747 +
            C100 * C1734 - C101 * C1724 - C100 * C1735 + C89 * C1748) *
               C89247 * C89236 * C89338 +
           (C100 * C1736 - C101 * C1725 - C100 * C1737 + C89 * C1749 +
            C102 * C1738 - C103 * C1726 - C102 * C1739 + C90 * C1750 +
            C104 * C1740 - C105 * C1727 - C104 * C1741 + C91 * C1751) *
               C89247 * C89236 * C11948) *
              C89307 +
          ((C100 * C4101 - C101 * C4097 - C100 * C4102 + C89 * C4109 +
            C102 * C4103 - C103 * C4098 - C102 * C4104 + C90 * C4110 +
            C104 * C4105 - C105 * C4099 - C104 * C4106 + C91 * C4111) *
               C89247 * C89236 * C89338 -
           (C104 * C825 - C105 * C817 - C104 * C826 + C91 * C841 + C102 * C827 -
            C103 * C818 - C102 * C828 + C90 * C842 + C100 * C829 - C101 * C819 -
            C100 * C830 + C89 * C843) *
               C89247 * C89236 * C89337 -
           (C104 * C6250 - C105 * C6247 - C104 * C6251 + C91 * C6256 +
            C102 * C6252 - C103 * C6248 - C102 * C6253 + C90 * C6257 +
            C100 * C6254 - C101 * C6249 - C100 * C6255 + C89 * C6258) *
               C89247 * C89236 * C11948) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                C25848 +
            C27042 * C25849 + C27043 * C25850) *
               C89236 * C89337 -
           (C27044 * C25850 + C27043 * C25849 + C27042 * C25848) * C89236 *
               C89338 +
           (C27043 * C25848 + C27044 * C25849 + C35567 * C25850) * C89236 *
               C11948) *
              C89307 +
          ((C16717 * C25848 + C18856 * C25849 + C31296 * C25850) * C89236 *
               C89338 -
           (C18856 * C25850 + C16717 * C25849 + C13788 * C25848) * C89236 *
               C89337 -
           ((C13261 * C31286 - C13262 * C31285 - C13261 * C31287 +
             C89093 * C31288) *
                C25850 +
            C31296 * C25849 + C18856 * C25848) *
               C89236 * C11948) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eexy[41] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
             C13260 * C926 - C13315 * C820) *
                C13261 +
            (C13258 * C187 - C13313 * C113 + C13259 * C931 - C13314 * C830 +
             C13260 * C934 - C13315 * C832) *
                C89093) *
               C89247 * C89337 +
           ((C13313 * C1724 - C13258 * C1828 + C13314 * C4097 - C13259 * C4211 +
             C13315 * C8516 - C13260 * C8600) *
                C13261 +
            (C13313 * C1735 - C13258 * C1836 + C13314 * C4102 - C13259 * C4215 +
             C13315 * C8522 - C13260 * C8603) *
                C89093) *
               C89247 * C89338 +
           ((C13258 * C1831 - C13313 * C1725 + C13259 * C6333 - C13314 * C6249 +
             C13260 * C14683 - C13315 * C14601) *
                C13261 +
            (C13258 * C1839 - C13313 * C1737 + C13259 * C6336 - C13314 * C6255 +
             C13260 * C14685 - C13315 * C14604) *
                C89093) *
               C89247 * C11948) *
              C89307 +
          (((C13313 * C819 - C13258 * C923 + C13314 * C820 - C13259 * C926 +
             C13315 * C5727 - C13260 * C5787) *
                C13261 +
            (C13313 * C830 - C13258 * C931 + C13314 * C832 - C13259 * C934 +
             C13315 * C5733 - C13260 * C5790) *
                C89093) *
               C89247 * C89337 +
           ((C13258 * C4211 - C13313 * C4097 + C13259 * C8600 - C13314 * C8516 +
             C13260 * C16821 - C13315 * C16683) *
                C13261 +
            (C13258 * C4215 - C13313 * C4102 + C13259 * C8603 - C13314 * C8522 +
             C13260 * C16823 - C13315 * C16686) *
                C89093) *
               C89247 * C89338 +
           ((C13313 * C6249 - C13258 * C6333 + C13314 * C14601 -
             C13259 * C14683 + C13315 * C18839 - C13260 * C18933) *
                C13261 +
            (C13313 * C6255 - C13258 * C6336 + C13314 * C14604 -
             C13259 * C14685 + C13315 * C18841 - C13260 * C18934) *
                C89093) *
               C89247 * C11948) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89236 * C181 - C180 * C106) * C100 +
            (C89236 * C187 - C180 * C113) * C89 + (C194 - C195) * C102 +
            (C196 - C197) * C90 + C210 * C104 + C211 * C91) *
               C89247 * C89337 +
           ((C180 * C1724 - C89236 * C1828) * C100 +
            (C180 * C1735 - C89236 * C1836) * C89 + (C1845 - C1846) * C102 +
            (C1847 - C1848) * C90 + C3433 * C104 + C3434 * C91) *
               C89247 * C89338 +
           ((C89236 * C1831 - C180 * C1725) * C100 +
            (C89236 * C1839 - C180 * C1737) * C89 + (C1853 - C1854) * C102 +
            (C1855 - C1856) * C90 + (C1857 - C1858) * C104 +
            (C1859 - C1860) * C91) *
               C89247 * C11948) *
              C89307 +
          (((C180 * C819 - C89236 * C923) * C100 +
            (C180 * C830 - C89236 * C931) * C89 + (C940 - C941) * C102 +
            (C942 - C943) * C90 + C2710 * C104 + C2711 * C91) *
               C89247 * C89337 +
           ((C89236 * C4211 - C180 * C4097) * C100 +
            (C89236 * C4215 - C180 * C4102) * C89 + (C4220 - C4221) * C102 +
            (C4222 - C4223) * C90 + (C4224 - C4225) * C104 +
            (C4226 - C4227) * C91) *
               C89247 * C89338 +
           ((C180 * C6249 - C89236 * C6333) * C100 +
            (C180 * C6255 - C89236 * C6336) * C89 +
            (C180 * C6248 - C89236 * C6334) * C102 +
            (C180 * C6253 - C89236 * C6337) * C90 +
            (C180 * C6247 - C89236 * C6335) * C104 +
            (C180 * C6251 - C89236 * C6338) * C91) *
               C89247 * C11948) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C13261 +
             (C89236 * C187 - C180 * C113) * C89093) *
                C25848 +
            ((C27126 - C27127) * C13261 + (C27128 - C27129) * C89093) * C25849 +
            C27151 * C25850) *
               C89337 +
           (((C27127 - C27126) * C13261 + (C27129 - C27128) * C89093) * C25848 +
            ((C27131 - C27130) * C13261 + (C27133 - C27132) * C89093) * C25849 +
            C35628 * C25850) *
               C89338 +
           (C27151 * C25848 +
            ((C27135 - C27134) * C13261 + (C27137 - C27136) * C89093) * C25849 +
            ((C35622 - C35623) * C13261 + (C35624 - C35625) * C89093) *
                C25850) *
               C11948) *
              C89307 +
          ((((C180 * C819 - C89236 * C923) * C13261 +
             (C180 * C830 - C89236 * C931) * C89093) *
                C25848 +
            ((C29351 - C29352) * C13261 + (C29353 - C29354) * C89093) * C25849 +
            C31381 * C25850) *
               C89337 +
           (((C29352 - C29351) * C13261 + (C29354 - C29353) * C89093) * C25848 +
            ((C29356 - C29355) * C13261 + (C29358 - C29357) * C89093) * C25849 +
            ((C31375 - C31376) * C13261 + (C31377 - C31378) * C89093) *
                C25850) *
               C89338 +
           (C31381 * C25848 +
            ((C31376 - C31375) * C13261 + (C31378 - C31377) * C89093) * C25849 +
            ((C180 * C31285 - C89236 * C31370) * C13261 +
             (C180 * C31287 - C89236 * C31371) * C89093) *
                C25850) *
               C11948) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eexz[41] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C13261 +
             (C89247 * C270 - C263 * C113) * C89093) *
                C13258 +
            ((C13956 - C13957) * C13261 + (C13958 - C13959) * C89093) * C13259 +
            C13981 * C13260) *
               C89337 +
           (((C263 * C1724 - C89247 * C1934) * C13261 +
             (C263 * C1735 - C89247 * C1942) * C89093) *
                C13258 +
            ((C16928 - C16929) * C13261 + (C16930 - C16931) * C89093) * C13259 +
            C21296 * C13260) *
               C89338 +
           (((C89247 * C1937 - C263 * C1725) * C13261 +
             (C89247 * C1945 - C263 * C1737) * C89093) *
                C13258 +
            ((C19012 - C19013) * C13261 + (C19014 - C19015) * C89093) * C13259 +
            ((C19016 - C19017) * C13261 + (C19018 - C19019) * C89093) *
                C13260) *
               C11948) *
              C89307 +
          ((((C13957 - C13956) * C13261 + (C13959 - C13958) * C89093) * C13258 +
            ((C13961 - C13960) * C13261 + (C13963 - C13962) * C89093) * C13259 +
            C18435 * C13260) *
               C89337 +
           (((C16929 - C16928) * C13261 + (C16931 - C16930) * C89093) * C13258 +
            ((C16933 - C16932) * C13261 + (C16935 - C16934) * C89093) * C13259 +
            ((C21290 - C21291) * C13261 + (C21292 - C21293) * C89093) *
                C13260) *
               C89338 +
           (((C19013 - C19012) * C13261 + (C19015 - C19014) * C89093) * C13258 +
            ((C19017 - C19016) * C13261 + (C19019 - C19018) * C89093) * C13259 +
            ((C263 * C18839 - C89247 * C19009) * C13261 +
             (C263 * C18841 - C89247 * C19010) * C89093) *
                C13260) *
               C11948) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C100 +
            (C89247 * C270 - C263 * C113) * C89 + (C277 - C278) * C102 +
            (C279 - C280) * C90 + C293 * C104 + C294 * C91) *
               C89236 * C89337 +
           ((C263 * C1724 - C89247 * C1934) * C100 +
            (C263 * C1735 - C89247 * C1942) * C89 + (C1951 - C1952) * C102 +
            (C1953 - C1954) * C90 + C3515 * C104 + C3516 * C91) *
               C89236 * C89338 +
           ((C89247 * C1937 - C263 * C1725) * C100 +
            (C89247 * C1945 - C263 * C1737) * C89 + (C1959 - C1960) * C102 +
            (C1961 - C1962) * C90 + (C1963 - C1964) * C104 +
            (C1965 - C1966) * C91) *
               C89236 * C11948) *
              C89307 +
          (((C263 * C819 - C89247 * C1029) * C100 +
            (C263 * C830 - C89247 * C1037) * C89 + (C1046 - C1047) * C102 +
            (C1048 - C1049) * C90 + C2792 * C104 + C2793 * C91) *
               C89236 * C89337 +
           ((C89247 * C4325 - C263 * C4097) * C100 +
            (C89247 * C4329 - C263 * C4102) * C89 + (C4334 - C4335) * C102 +
            (C4336 - C4337) * C90 + (C4338 - C4339) * C104 +
            (C4340 - C4341) * C91) *
               C89236 * C89338 +
           ((C263 * C6249 - C89247 * C6413) * C100 +
            (C263 * C6255 - C89247 * C6416) * C89 +
            (C263 * C6248 - C89247 * C6414) * C102 +
            (C263 * C6253 - C89247 * C6417) * C90 +
            (C263 * C6247 - C89247 * C6415) * C104 +
            (C263 * C6251 - C89247 * C6418) * C91) *
               C89236 * C11948) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C25848 * C264 - C25951 * C106 + C25849 * C1934 - C25952 * C1724 +
             C25850 * C1937 - C25953 * C1725) *
                C13261 +
            (C25848 * C270 - C25951 * C113 + C25849 * C1942 - C25952 * C1735 +
             C25850 * C1945 - C25953 * C1737) *
                C89093) *
               C89236 * C89337 +
           ((C25951 * C1724 - C25848 * C1934 + C25952 * C1725 - C25849 * C1937 +
             C25953 * C10544 - C25850 * C10660) *
                C13261 +
            (C25951 * C1735 - C25848 * C1942 + C25952 * C1737 - C25849 * C1945 +
             C25953 * C10550 - C25850 * C10663) *
                C89093) *
               C89236 * C89338 +
           ((C25848 * C1937 - C25951 * C1725 + C25849 * C10660 -
             C25952 * C10544 + C25850 * C27225 - C25953 * C26997) *
                C13261 +
            (C25848 * C1945 - C25951 * C1737 + C25849 * C10663 -
             C25952 * C10550 + C25850 * C27227 - C25953 * C27000) *
                C89093) *
               C89236 * C11948) *
              C89307 +
          (((C25951 * C819 - C25848 * C1029 + C25952 * C4097 - C25849 * C4325 +
             C25953 * C6249 - C25850 * C6413) *
                C13261 +
            (C25951 * C830 - C25848 * C1037 + C25952 * C4102 - C25849 * C4329 +
             C25953 * C6255 - C25850 * C6416) *
                C89093) *
               C89236 * C89337 +
           ((C25848 * C4325 - C25951 * C4097 + C25849 * C6413 - C25952 * C6249 +
             C25850 * C23264 - C25953 * C23153) *
                C13261 +
            (C25848 * C4329 - C25951 * C4102 + C25849 * C6416 - C25952 * C6255 +
             C25850 * C23266 - C25953 * C23157) *
                C89093) *
               C89236 * C89338 +
           ((C25951 * C6249 - C25848 * C6413 + C25952 * C23153 -
             C25849 * C23264 + C25953 * C31285 - C25850 * C31455) *
                C13261 +
            (C25951 * C6255 - C25848 * C6416 + C25952 * C23157 -
             C25849 * C23266 + C25953 * C31287 - C25850 * C31456) *
                C89093) *
               C89236 * C11948) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eeyx[41] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89093 * C112 - C13261 * C106) * C13313 +
            (C89093 * C352 - C13261 * C346) * C13258 +
            (C14060 - C14061) * C13314 + (C14062 - C14063) * C13259 +
            C14084 * C13315 + C14085 * C13260) *
               C89247 * C89337 +
           ((C13261 * C1724 - C89093 * C1734) * C13313 +
            (C13261 * C2040 - C89093 * C2048) * C13258 +
            (C17042 - C17043) * C13314 + (C17044 - C17045) * C13259 +
            C21373 * C13315 + C21374 * C13260) *
               C89247 * C89338 +
           ((C89093 * C1736 - C13261 * C1725) * C13313 +
            (C89093 * C2051 - C13261 * C2043) * C13258 +
            (C19096 - C19097) * C13314 + (C19098 - C19099) * C13259 +
            (C19100 - C19101) * C13315 + (C19102 - C19103) * C13260) *
               C89247 * C11948) *
              C89307 +
          (((C14061 - C14060) * C13313 + (C14063 - C14062) * C13258 +
            (C14065 - C14064) * C13314 + (C14067 - C14066) * C13259 +
            C18488 * C13315 + C18489 * C13260) *
               C89247 * C89337 +
           ((C17043 - C17042) * C13313 + (C17045 - C17044) * C13258 +
            (C17047 - C17046) * C13314 + (C17049 - C17048) * C13259 +
            (C21375 - C21376) * C13315 + (C21377 - C21378) * C13260) *
               C89247 * C89338 +
           ((C19097 - C19096) * C13313 + (C19099 - C19098) * C13258 +
            (C19101 - C19100) * C13314 + (C19103 - C19102) * C13259 +
            (C13261 * C18839 - C89093 * C18840) * C13315 +
            (C13261 * C19093 - C89093 * C19094) * C13260) *
               C89247 * C11948) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 + C91 * C116 -
             C104 * C108) *
                C180 +
            (C89 * C352 - C100 * C346 + C90 * C353 - C102 * C347 + C91 * C354 -
             C104 * C348) *
                C89236) *
               C89247 * C89337 +
           ((C100 * C1724 - C89 * C1734 + C102 * C1723 - C90 * C1732 +
             C104 * C1722 - C91 * C1730) *
                C180 +
            (C100 * C2040 - C89 * C2048 + C102 * C2041 - C90 * C2049 +
             C104 * C2042 - C91 * C2050) *
                C89236) *
               C89247 * C89338 +
           ((C89 * C1736 - C100 * C1725 + C90 * C1738 - C102 * C1726 +
             C91 * C1740 - C104 * C1727) *
                C180 +
            (C89 * C2051 - C100 * C2043 + C90 * C2052 - C102 * C2044 +
             C91 * C2053 - C104 * C2045) *
                C89236) *
               C89247 * C11948) *
              C89307 +
          (((C100 * C819 - C89 * C829 + C102 * C818 - C90 * C827 + C104 * C817 -
             C91 * C825) *
                C180 +
            (C100 * C1135 - C89 * C1143 + C102 * C1136 - C90 * C1144 +
             C104 * C1137 - C91 * C1145) *
                C89236) *
               C89247 * C89337 +
           ((C89 * C4101 - C100 * C4097 + C90 * C4103 - C102 * C4098 +
             C91 * C4105 - C104 * C4099) *
                C180 +
            (C89 * C4443 - C100 * C4439 + C90 * C4444 - C102 * C4440 +
             C91 * C4445 - C104 * C4441) *
                C89236) *
               C89247 * C89338 +
           ((C100 * C6249 - C89 * C6254 + C102 * C6248 - C90 * C6252 +
             C104 * C6247 - C91 * C6250) *
                C180 +
            (C100 * C6493 - C89 * C6496 + C102 * C6494 - C90 * C6497 +
             C104 * C6495 - C91 * C6498) *
                C89236) *
               C89247 * C11948) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C180 +
             (C89093 * C352 - C13261 * C346) * C89236) *
                C25848 +
            ((C27308 - C27309) * C180 + (C27310 - C27311) * C89236) * C25849 +
            C27340 * C25850) *
               C89337 +
           (((C27309 - C27308) * C180 + (C27311 - C27310) * C89236) * C25848 +
            ((C27313 - C27312) * C180 + (C27315 - C27314) * C89236) * C25849 +
            C35741 * C25850) *
               C89338 +
           (C27340 * C25848 +
            ((C27317 - C27316) * C180 + (C27319 - C27318) * C89236) * C25849 +
            ((C35735 - C35736) * C180 + (C35737 - C35738) * C89236) * C25850) *
               C11948) *
              C89307 +
          ((((C14061 - C14060) * C180 + (C14063 - C14062) * C89236) * C25848 +
            ((C17042 - C17043) * C180 + (C17044 - C17045) * C89236) * C25849 +
            C31542 * C25850) *
               C89337 +
           (((C17043 - C17042) * C180 + (C17045 - C17044) * C89236) * C25848 +
            ((C19096 - C19097) * C180 + (C19098 - C19099) * C89236) * C25849 +
            ((C31536 - C31537) * C180 + (C31538 - C31539) * C89236) * C25850) *
               C89338 +
           (C31542 * C25848 +
            ((C31537 - C31536) * C180 + (C31539 - C31538) * C89236) * C25849 +
            ((C13261 * C31285 - C89093 * C31286) * C180 +
             (C13261 * C31531 - C89093 * C31532) * C89236) *
                C25850) *
               C11948) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eeyy[41] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13313 * C181 - C13466 * C106 - C13313 * C346 + C13258 * C409 +
            C13314 * C923 - C13467 * C819 - C13314 * C1135 + C13259 * C1227 +
            C13315 * C926 - C13468 * C820 - C13315 * C1138 + C13260 * C1228) *
               C89093 * C89247 * C89337 -
           (C13315 * C8600 - C13468 * C8516 - C13315 * C8760 + C13260 * C8842 +
            C13314 * C4211 - C13467 * C4097 - C13314 * C4439 + C13259 * C4545 +
            C13313 * C1828 - C13466 * C1724 - C13313 * C2040 + C13258 * C2132) *
               C89093 * C89247 * C89338 +
           (C13313 * C1831 - C13466 * C1725 - C13313 * C2043 + C13258 * C2133 +
            C13314 * C6333 - C13467 * C6249 - C13314 * C6493 + C13259 * C6575 +
            C13315 * C14683 - C13468 * C14601 - C13315 * C14839 +
            C13260 * C14917) *
               C89093 * C89247 * C11948) *
              C89307 +
          ((C13313 * C4211 - C13466 * C4097 - C13313 * C4439 + C13258 * C4545 +
            C13314 * C8600 - C13467 * C8516 - C13314 * C8760 + C13259 * C8842 +
            C13315 * C16821 - C13468 * C16683 - C13315 * C17037 +
            C13260 * C17155) *
               C89093 * C89247 * C89338 -
           (C13315 * C5787 - C13468 * C5727 - C13315 * C5899 + C13260 * C5957 +
            C13314 * C926 - C13467 * C820 - C13314 * C1138 + C13259 * C1228 +
            C13313 * C923 - C13466 * C819 - C13313 * C1135 + C13258 * C1227) *
               C89093 * C89247 * C89337 -
           (C13315 * C18933 - C13468 * C18839 - C13315 * C19093 +
            C13260 * C19177 + C13314 * C14683 - C13467 * C14601 -
            C13314 * C14839 + C13259 * C14917 + C13313 * C6333 -
            C13466 * C6249 - C13313 * C6493 + C13258 * C6575) *
               C89093 * C89247 * C11948) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C89 +
            C440 * C90 + C441 * C91) *
               C89247 * C89337 -
           (C2163 * C91 + C2164 * C90 +
            (C180 * C1828 - C408 * C1724 - C180 * C2040 + C89236 * C2132) *
                C89) *
               C89247 * C89338 +
           ((C180 * C1831 - C408 * C1725 - C180 * C2043 + C89236 * C2133) *
                C89 +
            C2165 * C90 + C2166 * C91) *
               C89247 * C11948) *
              C89307 +
          (((C180 * C4211 - C408 * C4097 - C180 * C4439 + C89236 * C4545) *
                C89 +
            C4562 * C90 + C4563 * C91) *
               C89247 * C89338 -
           (C1258 * C91 + C1259 * C90 +
            (C180 * C923 - C408 * C819 - C180 * C1135 + C89236 * C1227) * C89) *
               C89247 * C89337 -
           ((C180 * C6335 - C408 * C6247 - C180 * C6495 + C89236 * C6573) *
                C91 +
            (C180 * C6334 - C408 * C6248 - C180 * C6494 + C89236 * C6574) *
                C90 +
            (C180 * C6333 - C408 * C6249 - C180 * C6493 + C89236 * C6575) *
                C89) *
               C89247 * C11948) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C89093 *
                C25848 +
            C27448 * C25849 + C27449 * C25850) *
               C89337 -
           (C27450 * C25850 + C27449 * C25849 + C27448 * C25848) * C89338 +
           (C27449 * C25848 + C27450 * C25849 + C35800 * C25850) * C11948) *
              C89307 +
          ((C29688 * C25848 + C29689 * C25849 + C31625 * C25850) * C89338 -
           (C29689 * C25850 + C29688 * C25849 +
            (C180 * C923 - C408 * C819 - C180 * C1135 + C89236 * C1227) *
                C89093 * C25848) *
               C89337 -
           ((C180 * C31370 - C408 * C31285 - C180 * C31531 + C89236 * C31616) *
                C89093 * C25850 +
            C31625 * C25849 + C29689 * C25848) *
               C11948) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eeyz[41] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C13313 +
            (C89247 * C493 - C263 * C346) * C13258 +
            (C13956 - C13957) * C13314 + (C14240 - C14241) * C13259 +
            C13974 * C13315 + C14249 * C13260) *
               C89093 * C89337 +
           ((C263 * C1724 - C89247 * C1934) * C13313 +
            (C263 * C2040 - C89247 * C2240) * C13258 +
            (C16928 - C16929) * C13314 + (C17258 - C17259) * C13259 +
            C21288 * C13315 + C21529 * C13260) *
               C89093 * C89338 +
           ((C89247 * C1937 - C263 * C1725) * C13313 +
            (C89247 * C2243 - C263 * C2043) * C13258 +
            (C19012 - C19013) * C13314 + (C19254 - C19255) * C13259 +
            (C19016 - C19017) * C13315 + (C19256 - C19257) * C13260) *
               C89093 * C11948) *
              C89307 +
          (((C13957 - C13956) * C13313 + (C14241 - C14240) * C13258 +
            (C13961 - C13960) * C13314 + (C14243 - C14242) * C13259 +
            C18427 * C13315 + C18596 * C13260) *
               C89093 * C89337 +
           ((C16929 - C16928) * C13313 + (C17259 - C17258) * C13258 +
            (C16933 - C16932) * C13314 + (C17261 - C17260) * C13259 +
            (C21290 - C21291) * C13315 + (C21530 - C21531) * C13260) *
               C89093 * C89338 +
           ((C19013 - C19012) * C13313 + (C19255 - C19254) * C13258 +
            (C19017 - C19016) * C13314 + (C19257 - C19256) * C13259 +
            (C263 * C18839 - C89247 * C19009) * C13315 +
            (C263 * C19093 - C89247 * C19252) * C13260) *
               C89093 * C11948) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C180 +
             (C89247 * C493 - C263 * C346) * C89236) *
                C89 +
            ((C277 - C278) * C180 + (C500 - C501) * C89236) * C90 +
            C514 * C91) *
               C89337 +
           (((C263 * C1724 - C89247 * C1934) * C180 +
             (C263 * C2040 - C89247 * C2240) * C89236) *
                C89 +
            ((C1951 - C1952) * C180 + (C2249 - C2250) * C89236) * C90 +
            C3759 * C91) *
               C89338 +
           (((C89247 * C1937 - C263 * C1725) * C180 +
             (C89247 * C2243 - C263 * C2043) * C89236) *
                C89 +
            ((C1959 - C1960) * C180 + (C2253 - C2254) * C89236) * C90 +
            ((C1963 - C1964) * C180 + (C2255 - C2256) * C89236) * C91) *
               C11948) *
              C89307 +
          ((((C263 * C819 - C89247 * C1029) * C180 +
             (C263 * C1135 - C89247 * C1335) * C89236) *
                C89 +
            ((C1046 - C1047) * C180 + (C1344 - C1345) * C89236) * C90 +
            C3036 * C91) *
               C89337 +
           (((C89247 * C4325 - C263 * C4097) * C180 +
             (C89247 * C4661 - C263 * C4439) * C89236) *
                C89 +
            ((C4334 - C4335) * C180 + (C4666 - C4667) * C89236) * C90 +
            ((C4338 - C4339) * C180 + (C4668 - C4669) * C89236) * C91) *
               C89338 +
           (((C263 * C6249 - C89247 * C6413) * C180 +
             (C263 * C6493 - C89247 * C6650) * C89236) *
                C89 +
            ((C263 * C6248 - C89247 * C6414) * C180 +
             (C263 * C6494 - C89247 * C6651) * C89236) *
                C90 +
            ((C263 * C6247 - C89247 * C6415) * C180 +
             (C263 * C6495 - C89247 * C6652) * C89236) *
                C91) *
               C11948) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C25848 * C264 - C25951 * C106 + C25849 * C1934 - C25952 * C1724 +
             C25850 * C1937 - C25953 * C1725) *
                C180 +
            (C25848 * C493 - C25951 * C346 + C25849 * C2240 - C25952 * C2040 +
             C25850 * C2243 - C25953 * C2043) *
                C89236) *
               C89093 * C89337 +
           ((C25951 * C1724 - C25848 * C1934 + C25952 * C1725 - C25849 * C1937 +
             C25953 * C10544 - C25850 * C10660) *
                C180 +
            (C25951 * C2040 - C25848 * C2240 + C25952 * C2043 - C25849 * C2243 +
             C25953 * C10716 - C25850 * C10825) *
                C89236) *
               C89093 * C89338 +
           ((C25848 * C1937 - C25951 * C1725 + C25849 * C10660 -
             C25952 * C10544 + C25850 * C27225 - C25953 * C26997) *
                C180 +
            (C25848 * C2243 - C25951 * C2043 + C25849 * C10825 -
             C25952 * C10716 + C25850 * C27525 - C25953 * C27303) *
                C89236) *
               C89093 * C11948) *
              C89307 +
          (((C25951 * C819 - C25848 * C1029 + C25952 * C4097 - C25849 * C4325 +
             C25953 * C6249 - C25850 * C6413) *
                C180 +
            (C25951 * C1135 - C25848 * C1335 + C25952 * C4439 - C25849 * C4661 +
             C25953 * C6493 - C25850 * C6650) *
                C89236) *
               C89093 * C89337 +
           ((C25848 * C4325 - C25951 * C4097 + C25849 * C6413 - C25952 * C6249 +
             C25850 * C23264 - C25953 * C23153) *
                C180 +
            (C25848 * C4661 - C25951 * C4439 + C25849 * C6650 - C25952 * C6493 +
             C25850 * C23424 - C25953 * C23318) *
                C89236) *
               C89093 * C89338 +
           ((C25951 * C6249 - C25848 * C6413 + C25952 * C23153 -
             C25849 * C23264 + C25953 * C31285 - C25850 * C31455) *
                C180 +
            (C25951 * C6493 - C25848 * C6650 + C25952 * C23318 -
             C25849 * C23424 + C25953 * C31531 - C25850 * C31699) *
                C89236) *
               C89093 * C11948) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eezx[41] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C263 +
             (C89093 * C571 - C13261 * C565) * C89247) *
                C13258 +
            ((C14060 - C14061) * C263 + (C14328 - C14329) * C89247) * C13259 +
            C14346 * C13260) *
               C89337 +
           (((C13261 * C1724 - C89093 * C1734) * C263 +
             (C13261 * C2330 - C89093 * C2338) * C89247) *
                C13258 +
            ((C17042 - C17043) * C263 + (C17366 - C17367) * C89247) * C13259 +
            C21613 * C13260) *
               C89338 +
           (((C89093 * C1736 - C13261 * C1725) * C263 +
             (C89093 * C2341 - C13261 * C2333) * C89247) *
                C13258 +
            ((C19096 - C19097) * C263 + (C19334 - C19335) * C89247) * C13259 +
            ((C19100 - C19101) * C263 + (C19336 - C19337) * C89247) * C13260) *
               C11948) *
              C89307 +
          ((((C14061 - C14060) * C263 + (C14329 - C14328) * C89247) * C13258 +
            ((C14065 - C14064) * C263 + (C14332 - C14331) * C89247) * C13259 +
            C18656 * C13260) *
               C89337 +
           (((C17043 - C17042) * C263 + (C17367 - C17366) * C89247) * C13258 +
            ((C17047 - C17046) * C263 + (C17369 - C17368) * C89247) * C13259 +
            ((C21375 - C21376) * C263 + (C21610 - C21611) * C89247) * C13260) *
               C89338 +
           (((C19097 - C19096) * C263 + (C19335 - C19334) * C89247) * C13258 +
            ((C19101 - C19100) * C263 + (C19337 - C19336) * C89247) * C13259 +
            ((C13261 * C18839 - C89093 * C18840) * C263 +
             (C13261 * C19331 - C89093 * C19332) * C89247) *
                C13260) *
               C11948) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 + C91 * C116 -
             C104 * C108) *
                C263 +
            (C89 * C571 - C100 * C565 + C90 * C572 - C102 * C566 + C91 * C573 -
             C104 * C567) *
                C89247) *
               C89236 * C89337 +
           ((C100 * C1724 - C89 * C1734 + C102 * C1723 - C90 * C1732 +
             C104 * C1722 - C91 * C1730) *
                C263 +
            (C100 * C2330 - C89 * C2338 + C102 * C2331 - C90 * C2339 +
             C104 * C2332 - C91 * C2340) *
                C89247) *
               C89236 * C89338 +
           ((C89 * C1736 - C100 * C1725 + C90 * C1738 - C102 * C1726 +
             C91 * C1740 - C104 * C1727) *
                C263 +
            (C89 * C2341 - C100 * C2333 + C90 * C2342 - C102 * C2334 +
             C91 * C2343 - C104 * C2335) *
                C89247) *
               C89236 * C11948) *
              C89307 +
          (((C100 * C819 - C89 * C829 + C102 * C818 - C90 * C827 + C104 * C817 -
             C91 * C825) *
                C263 +
            (C100 * C1425 - C89 * C1433 + C102 * C1426 - C90 * C1434 +
             C104 * C1427 - C91 * C1435) *
                C89247) *
               C89236 * C89337 +
           ((C89 * C4101 - C100 * C4097 + C90 * C4103 - C102 * C4098 +
             C91 * C4105 - C104 * C4099) *
                C263 +
            (C89 * C4771 - C100 * C4767 + C90 * C4772 - C102 * C4768 +
             C91 * C4773 - C104 * C4769) *
                C89247) *
               C89236 * C89338 +
           ((C100 * C6249 - C89 * C6254 + C102 * C6248 - C90 * C6252 +
             C104 * C6247 - C91 * C6250) *
                C263 +
            (C100 * C6727 - C89 * C6730 + C102 * C6728 - C90 * C6731 +
             C104 * C6729 - C91 * C6732) *
                C89247) *
               C89236 * C11948) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C89093 * C112 - C13261 * C106) * C25951 +
            (C89093 * C571 - C13261 * C565) * C25848 +
            (C27308 - C27309) * C25952 + (C27606 - C27607) * C25849 +
            C27332 * C25953 + C27618 * C25850) *
               C89236 * C89337 +
           ((C27309 - C27308) * C25951 + (C27607 - C27606) * C25848 +
            (C27313 - C27312) * C25952 + (C27609 - C27608) * C25849 +
            C35733 * C25953 + C35904 * C25850) *
               C89236 * C89338 +
           (C27332 * C25951 + C27618 * C25848 + (C27317 - C27316) * C25952 +
            (C27611 - C27610) * C25849 + (C35735 - C35736) * C25953 +
            (C35905 - C35906) * C25850) *
               C89236 * C11948) *
              C89307 +
          (((C14061 - C14060) * C25951 + (C14329 - C14328) * C25848 +
            (C17042 - C17043) * C25952 + (C17366 - C17367) * C25849 +
            C31534 * C25953 + C31777 * C25850) *
               C89236 * C89337 +
           ((C17043 - C17042) * C25951 + (C17367 - C17366) * C25848 +
            (C19096 - C19097) * C25952 + (C19334 - C19335) * C25849 +
            (C31536 - C31537) * C25953 + (C31778 - C31779) * C25850) *
               C89236 * C89338 +
           (C31534 * C25951 + C31777 * C25848 + (C31537 - C31536) * C25952 +
            (C31779 - C31778) * C25849 +
            (C13261 * C31285 - C89093 * C31286) * C25953 +
            (C13261 * C31774 - C89093 * C31775) * C25850) *
               C89236 * C11948) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eezy[41] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
             C13260 * C926 - C13315 * C820) *
                C263 +
            (C13258 * C627 - C13313 * C565 + C13259 * C1515 - C13314 * C1425 +
             C13260 * C1518 - C13315 * C1428) *
                C89247) *
               C89093 * C89337 +
           ((C13313 * C1724 - C13258 * C1828 + C13314 * C4097 - C13259 * C4211 +
             C13315 * C8516 - C13260 * C8600) *
                C263 +
            (C13313 * C2330 - C13258 * C2420 + C13314 * C4767 - C13259 * C4873 +
             C13315 * C8994 - C13260 * C9074) *
                C89247) *
               C89093 * C89338 +
           ((C13258 * C1831 - C13313 * C1725 + C13259 * C6333 - C13314 * C6249 +
             C13260 * C14683 - C13315 * C14601) *
                C263 +
            (C13258 * C2423 - C13313 * C2333 + C13259 * C6807 - C13314 * C6727 +
             C13260 * C15147 - C13315 * C15069) *
                C89247) *
               C89093 * C11948) *
              C89307 +
          (((C13313 * C819 - C13258 * C923 + C13314 * C820 - C13259 * C926 +
             C13315 * C5727 - C13260 * C5787) *
                C263 +
            (C13313 * C1425 - C13258 * C1515 + C13314 * C1428 - C13259 * C1518 +
             C13315 * C6061 - C13260 * C6117) *
                C89247) *
               C89093 * C89337 +
           ((C13258 * C4211 - C13313 * C4097 + C13259 * C8600 - C13314 * C8516 +
             C13260 * C16821 - C13315 * C16683) *
                C263 +
            (C13258 * C4873 - C13313 * C4767 + C13259 * C9074 - C13314 * C8994 +
             C13260 * C17471 - C13315 * C17361) *
                C89247) *
               C89093 * C89338 +
           ((C13313 * C6249 - C13258 * C6333 + C13314 * C14601 -
             C13259 * C14683 + C13315 * C18839 - C13260 * C18933) *
                C263 +
            (C13313 * C6727 - C13258 * C6807 + C13314 * C15069 -
             C13259 * C15147 + C13315 * C19331 - C13260 * C19411) *
                C89247) *
               C89093 * C11948) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C263 +
             (C89236 * C627 - C180 * C565) * C89247) *
                C89 +
            ((C194 - C195) * C263 + (C634 - C635) * C89247) * C90 +
            C648 * C91) *
               C89337 +
           (((C180 * C1724 - C89236 * C1828) * C263 +
             (C180 * C2330 - C89236 * C2420) * C89247) *
                C89 +
            ((C1845 - C1846) * C263 + (C2429 - C2430) * C89247) * C90 +
            C3916 * C91) *
               C89338 +
           (((C89236 * C1831 - C180 * C1725) * C263 +
             (C89236 * C2423 - C180 * C2333) * C89247) *
                C89 +
            ((C1853 - C1854) * C263 + (C2433 - C2434) * C89247) * C90 +
            ((C1857 - C1858) * C263 + (C2435 - C2436) * C89247) * C91) *
               C11948) *
              C89307 +
          ((((C180 * C819 - C89236 * C923) * C263 +
             (C180 * C1425 - C89236 * C1515) * C89247) *
                C89 +
            ((C940 - C941) * C263 + (C1524 - C1525) * C89247) * C90 +
            C3193 * C91) *
               C89337 +
           (((C89236 * C4211 - C180 * C4097) * C263 +
             (C89236 * C4873 - C180 * C4767) * C89247) *
                C89 +
            ((C4220 - C4221) * C263 + (C4878 - C4879) * C89247) * C90 +
            ((C4224 - C4225) * C263 + (C4880 - C4881) * C89247) * C91) *
               C89338 +
           (((C180 * C6249 - C89236 * C6333) * C263 +
             (C180 * C6727 - C89236 * C6807) * C89247) *
                C89 +
            ((C180 * C6248 - C89236 * C6334) * C263 +
             (C180 * C6728 - C89236 * C6808) * C89247) *
                C90 +
            ((C180 * C6247 - C89236 * C6335) * C263 +
             (C180 * C6729 - C89236 * C6809) * C89247) *
                C91) *
               C11948) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C89236 * C181 - C180 * C106) * C25951 +
            (C89236 * C627 - C180 * C565) * C25848 +
            (C27126 - C27127) * C25952 + (C27696 - C27697) * C25849 +
            C27144 * C25953 + C27705 * C25850) *
               C89093 * C89337 +
           ((C27127 - C27126) * C25951 + (C27697 - C27696) * C25848 +
            (C27131 - C27130) * C25952 + (C27699 - C27698) * C25849 +
            C35620 * C25953 + C35958 * C25850) *
               C89093 * C89338 +
           (C27144 * C25951 + C27705 * C25848 + (C27135 - C27134) * C25952 +
            (C27701 - C27700) * C25849 + (C35622 - C35623) * C25953 +
            (C35959 - C35960) * C25850) *
               C89093 * C11948) *
              C89307 +
          (((C180 * C819 - C89236 * C923) * C25951 +
            (C180 * C1425 - C89236 * C1515) * C25848 +
            (C29351 - C29352) * C25952 + (C29991 - C29992) * C25849 +
            C31373 * C25953 + C31855 * C25850) *
               C89093 * C89337 +
           ((C29352 - C29351) * C25951 + (C29992 - C29991) * C25848 +
            (C29356 - C29355) * C25952 + (C29994 - C29993) * C25849 +
            (C31375 - C31376) * C25953 + (C31856 - C31857) * C25850) *
               C89093 * C89338 +
           (C31373 * C25951 + C31855 * C25848 + (C31376 - C31375) * C25952 +
            (C31857 - C31856) * C25849 +
            (C180 * C31285 - C89236 * C31370) * C25953 +
            (C180 * C31774 - C89236 * C31853) * C25850) *
               C89093 * C11948) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eezz[41] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C13258 +
            C14524 * C13259 + C14525 * C13260) *
               C89093 * C89337 -
           (C17592 * C13260 + C17593 * C13259 +
            (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
                C13258) *
               C89093 * C89338 +
           ((C263 * C1937 - C699 * C1725 - C263 * C2333 + C89247 * C2513) *
                C13258 +
            C19500 * C13259 + C19501 * C13260) *
               C89093 * C11948) *
              C89307 +
          ((C17593 * C13258 + C17592 * C13259 + C21770 * C13260) * C89093 *
               C89338 -
           (C14526 * C13260 + C14525 * C13259 + C14524 * C13258) * C89093 *
               C89337 -
           ((C263 * C19009 - C699 * C18839 - C263 * C19331 + C89247 * C19486) *
                C13260 +
            C19501 * C13259 + C19500 * C13258) *
               C89093 * C11948) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C89236 *
                C89 +
            C735 * C90 + C736 * C91) *
               C89337 -
           (C2547 * C91 + C2548 * C90 +
            (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
                C89236 * C89) *
               C89338 +
           ((C263 * C1937 - C699 * C1725 - C263 * C2333 + C89247 * C2513) *
                C89236 * C89 +
            C2549 * C90 + C2550 * C91) *
               C11948) *
              C89307 +
          (((C263 * C4325 - C699 * C4097 - C263 * C4767 + C89247 * C4979) *
                C89236 * C89 +
            C4998 * C90 + C4999 * C91) *
               C89338 -
           (C1642 * C91 + C1643 * C90 +
            (C263 * C1029 - C699 * C819 - C263 * C1425 + C89247 * C1607) *
                C89236 * C89) *
               C89337 -
           ((C263 * C6415 - C699 * C6247 - C263 * C6729 + C89247 * C6884) *
                C89236 * C91 +
            (C263 * C6414 - C699 * C6248 - C263 * C6728 + C89247 * C6885) *
                C89236 * C90 +
            (C263 * C6413 - C699 * C6249 - C263 * C6727 + C89247 * C6886) *
                C89236 * C89) *
               C11948) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C25951 * C264 - C26254 * C106 - C25951 * C565 + C25848 * C700 +
            C25952 * C1934 - C26255 * C1724 - C25952 * C2330 + C25849 * C2512 +
            C25953 * C1937 - C26256 * C1725 - C25953 * C2333 + C25850 * C2513) *
               C89236 * C89093 * C89337 -
           (C25953 * C10660 - C26256 * C10544 - C25953 * C10878 +
            C25850 * C10989 + C25952 * C1937 - C26255 * C1725 - C25952 * C2333 +
            C25849 * C2513 + C25951 * C1934 - C26254 * C1724 - C25951 * C2330 +
            C25848 * C2512) *
               C89236 * C89093 * C89338 +
           (C25951 * C1937 - C26254 * C1725 - C25951 * C2333 + C25848 * C2513 +
            C25952 * C10660 - C26255 * C10544 - C25952 * C10878 +
            C25849 * C10989 + C25953 * C27225 - C26256 * C26997 -
            C25953 * C27601 + C25850 * C27779) *
               C89236 * C89093 * C11948) *
              C89307 +
          ((C25951 * C4325 - C26254 * C4097 - C25951 * C4767 + C25848 * C4979 +
            C25952 * C6413 - C26255 * C6249 - C25952 * C6727 + C25849 * C6886 +
            C25953 * C23264 - C26256 * C23153 - C25953 * C23476 +
            C25850 * C23583) *
               C89236 * C89093 * C89338 -
           (C25953 * C6413 - C26256 * C6249 - C25953 * C6727 + C25850 * C6886 +
            C25952 * C4325 - C26255 * C4097 - C25952 * C4767 + C25849 * C4979 +
            C25951 * C1029 - C26254 * C819 - C25951 * C1425 + C25848 * C1607) *
               C89236 * C89093 * C89337 -
           (C25953 * C31455 - C26256 * C31285 - C25953 * C31774 +
            C25850 * C31931 + C25952 * C23264 - C26255 * C23153 -
            C25952 * C23476 + C25849 * C23583 + C25951 * C6413 -
            C26254 * C6249 - C25951 * C6727 + C25848 * C6886) *
               C89236 * C89093 * C11948) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eexx[42] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C100 * C112 - C101 * C106 - C100 * C113 + C89 * C124 +
                C102 * C114 - C103 * C107 - C102 * C115 + C90 * C125 +
                C104 * C116 - C105 * C108 - C104 * C117 + C91 * C126) *
                   C89247 * C89236 * C9228 -
               (C104 * C1730 - C105 * C1722 - C104 * C1731 + C91 * C1746 +
                C102 * C1732 - C103 * C1723 - C102 * C1733 + C90 * C1747 +
                C100 * C1734 - C101 * C1724 - C100 * C1735 + C89 * C1748) *
                   C89247 * C89236 * C89217) *
                  C89137 * C5075 +
              ((C100 * C1732 - C101 * C1723 - C100 * C1733 + C89 * C1747 +
                C102 * C1730 - C103 * C1722 - C102 * C1731 + C90 * C1746 +
                C104 * C1742 - C105 * C1728 - C104 * C1743 + C91 * C1752) *
                   C89247 * C89236 * C89217 -
               (C104 * C118 - C105 * C109 - C104 * C119 + C91 * C127 +
                C102 * C116 - C103 * C108 - C102 * C117 + C90 * C126 +
                C100 * C114 - C101 * C107 - C100 * C115 + C89 * C125) *
                   C89247 * C89236 * C9228) *
                  C89137 * C5076 +
              ((C100 * C116 - C101 * C108 - C100 * C117 + C89 * C126 +
                C102 * C118 - C103 * C109 - C102 * C119 + C90 * C127 +
                C104 * C120 - C105 * C110 - C104 * C121 + C91 * C128) *
                   C89247 * C89236 * C9228 -
               (C104 * C3353 - C105 * C3352 - C104 * C3354 + C91 * C3355 +
                C102 * C1742 - C103 * C1728 - C102 * C1743 + C90 * C1752 +
                C100 * C1730 - C101 * C1722 - C100 * C1731 + C89 * C1746) *
                   C89247 * C89236 * C89217) *
                  C89137 * C5077) +
         0.5 * std::pow(Pi, 2.5) *
             (((C100 * C112 - C101 * C106 - C100 * C113 + C89 * C124 +
                C102 * C114 - C103 * C107 - C102 * C115 + C90 * C125 +
                C104 * C116 - C105 * C108 - C104 * C117 + C91 * C126) *
                   C89247 * C89236 * C9228 -
               (C104 * C1730 - C105 * C1722 - C104 * C1731 + C91 * C1746 +
                C102 * C1732 - C103 * C1723 - C102 * C1733 + C90 * C1747 +
                C100 * C1734 - C101 * C1724 - C100 * C1735 + C89 * C1748) *
                   C89247 * C89236 * C89217) *
                  C812 +
              ((C100 * C4101 - C101 * C4097 - C100 * C4102 + C89 * C4109 +
                C102 * C4103 - C103 * C4098 - C102 * C4104 + C90 * C4110 +
                C104 * C4105 - C105 * C4099 - C104 * C4106 + C91 * C4111) *
                   C89247 * C89236 * C89217 -
               (C104 * C825 - C105 * C817 - C104 * C826 + C91 * C841 +
                C102 * C827 - C103 * C818 - C102 * C828 + C90 * C842 +
                C100 * C829 - C101 * C819 - C100 * C830 + C89 * C843) *
                   C89247 * C89236 * C9228) *
                  C813 +
              ((C100 * C831 - C101 * C820 - C100 * C832 + C89 * C844 +
                C102 * C833 - C103 * C821 - C102 * C834 + C90 * C845 +
                C104 * C835 - C105 * C822 - C104 * C836 + C91 * C846) *
                   C89247 * C89236 * C9228 -
               (C104 * C8517 - C105 * C8514 - C104 * C8518 + C91 * C8523 +
                C102 * C8519 - C103 * C8515 - C102 * C8520 + C90 * C8524 +
                C100 * C8521 - C101 * C8516 - C100 * C8522 + C89 * C8525) *
                   C89247 * C89236 * C89217) *
                  C814) *
             C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((C100 * C112 - C101 * C106 - C100 * C113 + C89 * C124 + C102 * C114 -
           C103 * C107 - C102 * C115 + C90 * C125 + C104 * C116 - C105 * C108 -
           C104 * C117 + C91 * C126) *
              C89247 * C89236 * C10538 -
          (C104 * C1730 - C105 * C1722 - C104 * C1731 + C91 * C1746 +
           C102 * C1732 - C103 * C1723 - C102 * C1733 + C90 * C1747 +
           C100 * C1734 - C101 * C1724 - C100 * C1735 + C89 * C1748) *
              C89247 * C89236 * C10539 +
          (C100 * C1736 - C101 * C1725 - C100 * C1737 + C89 * C1749 +
           C102 * C1738 - C103 * C1726 - C102 * C1739 + C90 * C1750 +
           C104 * C1740 - C105 * C1727 - C104 * C1741 + C91 * C1751) *
              C89247 * C89236 * C10540 -
          (C104 * C10545 - C105 * C10542 - C104 * C10546 + C91 * C10551 +
           C102 * C10547 - C103 * C10543 - C102 * C10548 + C90 * C10552 +
           C100 * C10549 - C101 * C10544 - C100 * C10550 + C89 * C10553) *
              C89247 * C89236 * C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                C89247 * C13258 +
            C13794 * C13259 + C13795 * C13260) *
               C9228 -
           (C16720 * C13260 + C16721 * C13259 +
            (C13261 * C1734 - C13262 * C1724 - C13261 * C1735 +
             C89093 * C1748) *
                C89247 * C13258) *
               C89217) *
              C89137 * C5075 +
          (((C13261 * C1732 - C13262 * C1723 - C13261 * C1733 +
             C89093 * C1747) *
                C89247 * C13258 +
            C16722 * C13259 + C16723 * C13260) *
               C89217 -
           (C13798 * C13260 + C13797 * C13259 +
            (C13261 * C114 - C13262 * C107 - C13261 * C115 + C89093 * C125) *
                C89247 * C13258) *
               C9228) *
              C89137 * C5076 +
          (((C13261 * C116 - C13262 * C108 - C13261 * C117 + C89093 * C126) *
                C89247 * C13258 +
            C15314 * C13259 + C15315 * C13260) *
               C9228 -
           ((C13261 * C8517 - C13262 * C8514 - C13261 * C8518 +
             C89093 * C8523) *
                C89247 * C13260 +
            (C13261 * C4105 - C13262 * C4099 - C13261 * C4106 +
             C89093 * C4111) *
                C89247 * C13259 +
            (C13261 * C1730 - C13262 * C1722 - C13261 * C1731 +
             C89093 * C1746) *
                C89247 * C13258) *
               C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                C89247 * C13258 +
            C13794 * C13259 + C13795 * C13260) *
               C9228 -
           (C16720 * C13260 + C16721 * C13259 +
            (C13261 * C1734 - C13262 * C1724 - C13261 * C1735 +
             C89093 * C1748) *
                C89247 * C13258) *
               C89217) *
              C812 +
          ((C16721 * C13258 + C16720 * C13259 + C21135 * C13260) * C89217 -
           (C13796 * C13260 + C13795 * C13259 + C13794 * C13258) * C9228) *
              C813 +
          ((C13795 * C13258 + C13796 * C13259 + C18322 * C13260) * C9228 -
           ((C13261 * C21124 - C13262 * C21123 - C13261 * C21125 +
             C89093 * C21126) *
                C89247 * C13260 +
            C21135 * C13259 + C16720 * C13258) *
               C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
               C89247 * C13258 +
           C13794 * C13259 + C13795 * C13260) *
              C10538 -
          (C16720 * C13260 + C16721 * C13259 +
           (C13261 * C1734 - C13262 * C1724 - C13261 * C1735 + C89093 * C1748) *
               C89247 * C13258) *
              C10539 +
          ((C13261 * C1736 - C13262 * C1725 - C13261 * C1737 + C89093 * C1749) *
               C89247 * C13258 +
           C18858 * C13259 + C18859 * C13260) *
              C10540 -
          ((C13261 * C23154 - C13262 * C23152 - C13261 * C23155 +
            C89093 * C23158) *
               C89247 * C13260 +
           (C13261 * C23156 - C13262 * C23153 - C13261 * C23157 +
            C89093 * C23159) *
               C89247 * C13259 +
           (C13261 * C10549 - C13262 * C10544 - C13261 * C10550 +
            C89093 * C10553) *
               C89247 * C13258) *
              C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                C25848 +
            C27042 * C25849 + C27043 * C25850) *
               C89236 * C9228 -
           (C27044 * C25850 + C27043 * C25849 + C27042 * C25848) * C89236 *
               C89217) *
              C89137 * C5075 +
          ((C27045 * C25848 + C27046 * C25849 + C27047 * C25850) * C89236 *
               C89217 -
           (C27046 * C25850 + C27045 * C25849 +
            (C13261 * C114 - C13262 * C107 - C13261 * C115 + C89093 * C125) *
                C25848) *
               C89236 * C9228) *
              C89137 * C5076 +
          (((C13261 * C116 - C13262 * C108 - C13261 * C117 + C89093 * C126) *
                C25848 +
            C28534 * C25849 + C28535 * C25850) *
               C89236 * C9228 -
           ((C13261 * C10545 - C13262 * C10542 - C13261 * C10546 +
             C89093 * C10551) *
                C25850 +
            C28535 * C25849 + C28534 * C25848) *
               C89236 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                C25848 +
            C27042 * C25849 + C27043 * C25850) *
               C89236 * C9228 -
           (C27044 * C25850 + C27043 * C25849 + C27042 * C25848) * C89236 *
               C89217) *
              C812 +
          ((C16717 * C25848 + C18856 * C25849 + C31296 * C25850) * C89236 *
               C89217 -
           (C18856 * C25850 + C16717 * C25849 + C13788 * C25848) * C89236 *
               C9228) *
              C813 +
          ((C13789 * C25848 + C16716 * C25849 + C18857 * C25850) * C89236 *
               C9228 -
           ((C13261 * C23154 - C13262 * C23152 - C13261 * C23155 +
             C89093 * C23158) *
                C25850 +
            C18857 * C25849 + C16716 * C25848) *
               C89236 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
               C25848 +
           C27042 * C25849 + C27043 * C25850) *
              C89236 * C10538 -
          (C27044 * C25850 + C27043 * C25849 + C27042 * C25848) * C89236 *
              C10539 +
          (C27043 * C25848 + C27044 * C25849 + C35567 * C25850) * C89236 *
              C10540 -
          ((C13261 * C35557 - C13262 * C35556 - C13261 * C35558 +
            C89093 * C35559) *
               C25850 +
           C35567 * C25849 + C27044 * C25848) *
              C89236 * C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q));
    d2eexy[42] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C89236 * C181 - C180 * C106) * C100 +
                (C89236 * C187 - C180 * C113) * C89 + (C194 - C195) * C102 +
                (C196 - C197) * C90 + C210 * C104 + C211 * C91) *
                   C89247 * C9228 +
               ((C180 * C1724 - C89236 * C1828) * C100 +
                (C180 * C1735 - C89236 * C1836) * C89 + (C1845 - C1846) * C102 +
                (C1847 - C1848) * C90 + C3433 * C104 + C3434 * C91) *
                   C89247 * C89217) *
                  C89137 * C5075 +
              (((C195 - C194) * C100 + (C197 - C196) * C89 +
                (C199 - C198) * C102 + (C201 - C200) * C90 + C212 * C104 +
                C213 * C91) *
                   C89247 * C9228 +
               ((C1846 - C1845) * C100 + (C1848 - C1847) * C89 +
                (C1850 - C1849) * C102 + (C1852 - C1851) * C90 +
                (C3435 - C3436) * C104 + (C3437 - C3438) * C91) *
                   C89247 * C89217) *
                  C89137 * C5076 +
              ((C210 * C100 + C211 * C89 + (C203 - C202) * C102 +
                (C205 - C204) * C90 + (C206 - C207) * C104 +
                (C208 - C209) * C91) *
                   C89247 * C9228 +
               (C3433 * C100 + C3434 * C89 + (C3436 - C3435) * C102 +
                (C3438 - C3437) * C90 + (C180 * C3352 - C89236 * C3430) * C104 +
                (C180 * C3354 - C89236 * C3431) * C91) *
                   C89247 * C89217) *
                  C89137 * C5077) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C89236 * C181 - C180 * C106) * C100 +
                (C89236 * C187 - C180 * C113) * C89 + (C194 - C195) * C102 +
                (C196 - C197) * C90 + C210 * C104 + C211 * C91) *
                   C89247 * C9228 +
               ((C180 * C1724 - C89236 * C1828) * C100 +
                (C180 * C1735 - C89236 * C1836) * C89 + (C1845 - C1846) * C102 +
                (C1847 - C1848) * C90 + C3433 * C104 + C3434 * C91) *
                   C89247 * C89217) *
                  C812 +
              (((C180 * C819 - C89236 * C923) * C100 +
                (C180 * C830 - C89236 * C931) * C89 + (C940 - C941) * C102 +
                (C942 - C943) * C90 + C2710 * C104 + C2711 * C91) *
                   C89247 * C9228 +
               ((C89236 * C4211 - C180 * C4097) * C100 +
                (C89236 * C4215 - C180 * C4102) * C89 + (C4220 - C4221) * C102 +
                (C4222 - C4223) * C90 + (C4224 - C4225) * C104 +
                (C4226 - C4227) * C91) *
                   C89247 * C89217) *
                  C813 +
              (((C89236 * C926 - C180 * C820) * C100 +
                (C89236 * C934 - C180 * C832) * C89 + (C948 - C949) * C102 +
                (C950 - C951) * C90 + (C952 - C953) * C104 +
                (C954 - C955) * C91) *
                   C89247 * C9228 +
               ((C180 * C8516 - C89236 * C8600) * C100 +
                (C180 * C8522 - C89236 * C8603) * C89 +
                (C180 * C8515 - C89236 * C8601) * C102 +
                (C180 * C8520 - C89236 * C8604) * C90 +
                (C180 * C8514 - C89236 * C8602) * C104 +
                (C180 * C8518 - C89236 * C8605) * C91) *
                   C89247 * C89217) *
                  C814) *
             C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C89236 * C181 - C180 * C106) * C100 +
           (C89236 * C187 - C180 * C113) * C89 + (C194 - C195) * C102 +
           (C196 - C197) * C90 + C210 * C104 + C211 * C91) *
              C89247 * C10538 +
          ((C180 * C1724 - C89236 * C1828) * C100 +
           (C180 * C1735 - C89236 * C1836) * C89 + (C1845 - C1846) * C102 +
           (C1847 - C1848) * C90 + C3433 * C104 + C3434 * C91) *
              C89247 * C10539 +
          ((C89236 * C1831 - C180 * C1725) * C100 +
           (C89236 * C1839 - C180 * C1737) * C89 + (C1853 - C1854) * C102 +
           (C1855 - C1856) * C90 + (C1857 - C1858) * C104 +
           (C1859 - C1860) * C91) *
              C89247 * C10540 +
          ((C180 * C10544 - C89236 * C10604) * C100 +
           (C180 * C10550 - C89236 * C10607) * C89 +
           (C180 * C10543 - C89236 * C10605) * C102 +
           (C180 * C10548 - C89236 * C10608) * C90 +
           (C180 * C10542 - C89236 * C10606) * C104 +
           (C180 * C10546 - C89236 * C10609) * C91) *
              C89247 * C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
             C13260 * C926 - C13315 * C820) *
                C13261 +
            (C13258 * C187 - C13313 * C113 + C13259 * C931 - C13314 * C830 +
             C13260 * C934 - C13315 * C832) *
                C89093) *
               C89247 * C9228 +
           ((C13313 * C1724 - C13258 * C1828 + C13314 * C4097 - C13259 * C4211 +
             C13315 * C8516 - C13260 * C8600) *
                C13261 +
            (C13313 * C1735 - C13258 * C1836 + C13314 * C4102 - C13259 * C4215 +
             C13315 * C8522 - C13260 * C8603) *
                C89093) *
               C89247 * C89217) *
              C89137 * C5075 +
          (((C13313 * C107 - C13258 * C182 + C13314 * C818 - C13259 * C924 +
             C13315 * C821 - C13260 * C927) *
                C13261 +
            (C13313 * C115 - C13258 * C188 + C13314 * C828 - C13259 * C932 +
             C13315 * C834 - C13260 * C935) *
                C89093) *
               C89247 * C9228 +
           ((C13258 * C1829 - C13313 * C1723 + C13259 * C4212 - C13314 * C4098 +
             C13260 * C8601 - C13315 * C8515) *
                C13261 +
            (C13258 * C1837 - C13313 * C1733 + C13259 * C4216 - C13314 * C4104 +
             C13260 * C8604 - C13315 * C8520) *
                C89093) *
               C89247 * C89217) *
              C89137 * C5076 +
          (((C13258 * C183 - C13313 * C108 + C13259 * C925 - C13314 * C817 +
             C13260 * C928 - C13315 * C822) *
                C13261 +
            (C13258 * C189 - C13313 * C117 + C13259 * C933 - C13314 * C826 +
             C13260 * C936 - C13315 * C836) *
                C89093) *
               C89247 * C9228 +
           ((C13313 * C1722 - C13258 * C1830 + C13314 * C4099 - C13259 * C4213 +
             C13315 * C8514 - C13260 * C8602) *
                C13261 +
            (C13313 * C1731 - C13258 * C1838 + C13314 * C4106 - C13259 * C4217 +
             C13315 * C8518 - C13260 * C8605) *
                C89093) *
               C89247 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
             C13260 * C926 - C13315 * C820) *
                C13261 +
            (C13258 * C187 - C13313 * C113 + C13259 * C931 - C13314 * C830 +
             C13260 * C934 - C13315 * C832) *
                C89093) *
               C89247 * C9228 +
           ((C13313 * C1724 - C13258 * C1828 + C13314 * C4097 - C13259 * C4211 +
             C13315 * C8516 - C13260 * C8600) *
                C13261 +
            (C13313 * C1735 - C13258 * C1836 + C13314 * C4102 - C13259 * C4215 +
             C13315 * C8522 - C13260 * C8603) *
                C89093) *
               C89247 * C89217) *
              C812 +
          (((C13313 * C819 - C13258 * C923 + C13314 * C820 - C13259 * C926 +
             C13315 * C5727 - C13260 * C5787) *
                C13261 +
            (C13313 * C830 - C13258 * C931 + C13314 * C832 - C13259 * C934 +
             C13315 * C5733 - C13260 * C5790) *
                C89093) *
               C89247 * C9228 +
           ((C13258 * C4211 - C13313 * C4097 + C13259 * C8600 - C13314 * C8516 +
             C13260 * C16821 - C13315 * C16683) *
                C13261 +
            (C13258 * C4215 - C13313 * C4102 + C13259 * C8603 - C13314 * C8522 +
             C13260 * C16823 - C13315 * C16686) *
                C89093) *
               C89247 * C89217) *
              C813 +
          (((C13258 * C926 - C13313 * C820 + C13259 * C5787 - C13314 * C5727 +
             C13260 * C13873 - C13315 * C13743) *
                C13261 +
            (C13258 * C934 - C13313 * C832 + C13259 * C5790 - C13314 * C5733 +
             C13260 * C13875 - C13315 * C13746) *
                C89093) *
               C89247 * C9228 +
           ((C13313 * C8516 - C13258 * C8600 + C13314 * C16683 -
             C13259 * C16821 + C13315 * C21123 - C13260 * C21209) *
                C13261 +
            (C13313 * C8522 - C13258 * C8603 + C13314 * C16686 -
             C13259 * C16823 + C13315 * C21125 - C13260 * C21210) *
                C89093) *
               C89247 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
            C13260 * C926 - C13315 * C820) *
               C13261 +
           (C13258 * C187 - C13313 * C113 + C13259 * C931 - C13314 * C830 +
            C13260 * C934 - C13315 * C832) *
               C89093) *
              C89247 * C10538 +
          ((C13313 * C1724 - C13258 * C1828 + C13314 * C4097 - C13259 * C4211 +
            C13315 * C8516 - C13260 * C8600) *
               C13261 +
           (C13313 * C1735 - C13258 * C1836 + C13314 * C4102 - C13259 * C4215 +
            C13315 * C8522 - C13260 * C8603) *
               C89093) *
              C89247 * C10539 +
          ((C13258 * C1831 - C13313 * C1725 + C13259 * C6333 - C13314 * C6249 +
            C13260 * C14683 - C13315 * C14601) *
               C13261 +
           (C13258 * C1839 - C13313 * C1737 + C13259 * C6336 - C13314 * C6255 +
            C13260 * C14685 - C13315 * C14604) *
               C89093) *
              C89247 * C10540 +
          ((C13313 * C10544 - C13258 * C10604 + C13314 * C23153 -
            C13259 * C23210 + C13315 * C23152 - C13260 * C23211) *
               C13261 +
           (C13313 * C10550 - C13258 * C10607 + C13314 * C23157 -
            C13259 * C23212 + C13315 * C23155 - C13260 * C23213) *
               C89093) *
              C89247 * C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C13261 +
             (C89236 * C187 - C180 * C113) * C89093) *
                C25848 +
            ((C27126 - C27127) * C13261 + (C27128 - C27129) * C89093) * C25849 +
            C27151 * C25850) *
               C9228 +
           (((C27127 - C27126) * C13261 + (C27129 - C27128) * C89093) * C25848 +
            ((C27131 - C27130) * C13261 + (C27133 - C27132) * C89093) * C25849 +
            ((C27134 - C27135) * C13261 + (C27136 - C27137) * C89093) *
                C25850) *
               C89217) *
              C89137 * C5075 +
          ((((C195 - C194) * C13261 + (C197 - C196) * C89093) * C25848 +
            ((C1845 - C1846) * C13261 + (C1847 - C1848) * C89093) * C25849 +
            C27150 * C25850) *
               C9228 +
           (((C1846 - C1845) * C13261 + (C1848 - C1847) * C89093) * C25848 +
            ((C1853 - C1854) * C13261 + (C1855 - C1856) * C89093) * C25849 +
            ((C27140 - C27141) * C13261 + (C27142 - C27143) * C89093) *
                C25850) *
               C89217) *
              C89137 * C5076 +
          (((C210 * C13261 + C211 * C89093) * C25848 +
            ((C1850 - C1849) * C13261 + (C1852 - C1851) * C89093) * C25849 +
            ((C1857 - C1858) * C13261 + (C1859 - C1860) * C89093) * C25850) *
               C9228 +
           ((C3433 * C13261 + C3434 * C89093) * C25848 +
            ((C1858 - C1857) * C13261 + (C1860 - C1859) * C89093) * C25849 +
            ((C180 * C10542 - C89236 * C10606) * C13261 +
             (C180 * C10546 - C89236 * C10609) * C89093) *
                C25850) *
               C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C13261 +
             (C89236 * C187 - C180 * C113) * C89093) *
                C25848 +
            ((C27126 - C27127) * C13261 + (C27128 - C27129) * C89093) * C25849 +
            C27151 * C25850) *
               C9228 +
           (((C27127 - C27126) * C13261 + (C27129 - C27128) * C89093) * C25848 +
            ((C27131 - C27130) * C13261 + (C27133 - C27132) * C89093) * C25849 +
            ((C27134 - C27135) * C13261 + (C27136 - C27137) * C89093) *
                C25850) *
               C89217) *
              C812 +
          ((((C180 * C819 - C89236 * C923) * C13261 +
             (C180 * C830 - C89236 * C931) * C89093) *
                C25848 +
            ((C29351 - C29352) * C13261 + (C29353 - C29354) * C89093) * C25849 +
            C31381 * C25850) *
               C9228 +
           (((C29352 - C29351) * C13261 + (C29354 - C29353) * C89093) * C25848 +
            ((C29356 - C29355) * C13261 + (C29358 - C29357) * C89093) * C25849 +
            ((C31375 - C31376) * C13261 + (C31377 - C31378) * C89093) *
                C25850) *
               C89217) *
              C813 +
          ((((C89236 * C926 - C180 * C820) * C13261 +
             (C89236 * C934 - C180 * C832) * C89093) *
                C25848 +
            ((C33629 - C33630) * C13261 + (C33631 - C33632) * C89093) * C25849 +
            ((C33633 - C33634) * C13261 + (C33635 - C33636) * C89093) *
                C25850) *
               C9228 +
           (((C33630 - C33629) * C13261 + (C33632 - C33631) * C89093) * C25848 +
            ((C33634 - C33633) * C13261 + (C33636 - C33635) * C89093) * C25849 +
            ((C180 * C23152 - C89236 * C23211) * C13261 +
             (C180 * C23155 - C89236 * C23213) * C89093) *
                C25850) *
               C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C89236 * C181 - C180 * C106) * C13261 +
            (C89236 * C187 - C180 * C113) * C89093) *
               C25848 +
           ((C27126 - C27127) * C13261 + (C27128 - C27129) * C89093) * C25849 +
           C27151 * C25850) *
              C10538 +
          (((C27127 - C27126) * C13261 + (C27129 - C27128) * C89093) * C25848 +
           ((C27131 - C27130) * C13261 + (C27133 - C27132) * C89093) * C25849 +
           C35628 * C25850) *
              C10539 +
          (C27151 * C25848 +
           ((C27135 - C27134) * C13261 + (C27137 - C27136) * C89093) * C25849 +
           ((C35622 - C35623) * C13261 + (C35624 - C35625) * C89093) * C25850) *
              C10540 +
          (C35628 * C25848 +
           ((C35623 - C35622) * C13261 + (C35625 - C35624) * C89093) * C25849 +
           ((C180 * C35556 - C89236 * C35617) * C13261 +
            (C180 * C35558 - C89236 * C35618) * C89093) *
               C25850) *
              C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q));
    d2eexz[42] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C89247 * C264 - C263 * C106) * C100 +
                (C89247 * C270 - C263 * C113) * C89 + (C277 - C278) * C102 +
                (C279 - C280) * C90 + C293 * C104 + C294 * C91) *
                   C89236 * C9228 +
               ((C263 * C1724 - C89247 * C1934) * C100 +
                (C263 * C1735 - C89247 * C1942) * C89 + (C1951 - C1952) * C102 +
                (C1953 - C1954) * C90 + C3515 * C104 + C3516 * C91) *
                   C89236 * C89217) *
                  C89137 * C5075 +
              (((C278 - C277) * C100 + (C280 - C279) * C89 +
                (C282 - C281) * C102 + (C284 - C283) * C90 + C295 * C104 +
                C296 * C91) *
                   C89236 * C9228 +
               ((C1952 - C1951) * C100 + (C1954 - C1953) * C89 +
                (C1956 - C1955) * C102 + (C1958 - C1957) * C90 +
                (C3517 - C3518) * C104 + (C3519 - C3520) * C91) *
                   C89236 * C89217) *
                  C89137 * C5076 +
              ((C293 * C100 + C294 * C89 + (C286 - C285) * C102 +
                (C288 - C287) * C90 + (C289 - C290) * C104 +
                (C291 - C292) * C91) *
                   C89236 * C9228 +
               (C3515 * C100 + C3516 * C89 + (C3518 - C3517) * C102 +
                (C3520 - C3519) * C90 + (C263 * C3352 - C89247 * C3512) * C104 +
                (C263 * C3354 - C89247 * C3513) * C91) *
                   C89236 * C89217) *
                  C89137 * C5077) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C89247 * C264 - C263 * C106) * C100 +
                (C89247 * C270 - C263 * C113) * C89 + (C277 - C278) * C102 +
                (C279 - C280) * C90 + C293 * C104 + C294 * C91) *
                   C89236 * C9228 +
               ((C263 * C1724 - C89247 * C1934) * C100 +
                (C263 * C1735 - C89247 * C1942) * C89 + (C1951 - C1952) * C102 +
                (C1953 - C1954) * C90 + C3515 * C104 + C3516 * C91) *
                   C89236 * C89217) *
                  C812 +
              (((C263 * C819 - C89247 * C1029) * C100 +
                (C263 * C830 - C89247 * C1037) * C89 + (C1046 - C1047) * C102 +
                (C1048 - C1049) * C90 + C2792 * C104 + C2793 * C91) *
                   C89236 * C9228 +
               ((C89247 * C4325 - C263 * C4097) * C100 +
                (C89247 * C4329 - C263 * C4102) * C89 + (C4334 - C4335) * C102 +
                (C4336 - C4337) * C90 + (C4338 - C4339) * C104 +
                (C4340 - C4341) * C91) *
                   C89236 * C89217) *
                  C813 +
              (((C89247 * C1032 - C263 * C820) * C100 +
                (C89247 * C1040 - C263 * C832) * C89 + (C1054 - C1055) * C102 +
                (C1056 - C1057) * C90 + (C1058 - C1059) * C104 +
                (C1060 - C1061) * C91) *
                   C89236 * C9228 +
               ((C263 * C8516 - C89247 * C8680) * C100 +
                (C263 * C8522 - C89247 * C8683) * C89 +
                (C263 * C8515 - C89247 * C8681) * C102 +
                (C263 * C8520 - C89247 * C8684) * C90 +
                (C263 * C8514 - C89247 * C8682) * C104 +
                (C263 * C8518 - C89247 * C8685) * C91) *
                   C89236 * C89217) *
                  C814) *
             C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C89247 * C264 - C263 * C106) * C100 +
           (C89247 * C270 - C263 * C113) * C89 + (C277 - C278) * C102 +
           (C279 - C280) * C90 + C293 * C104 + C294 * C91) *
              C89236 * C10538 +
          ((C263 * C1724 - C89247 * C1934) * C100 +
           (C263 * C1735 - C89247 * C1942) * C89 + (C1951 - C1952) * C102 +
           (C1953 - C1954) * C90 + C3515 * C104 + C3516 * C91) *
              C89236 * C10539 +
          ((C89247 * C1937 - C263 * C1725) * C100 +
           (C89247 * C1945 - C263 * C1737) * C89 + (C1959 - C1960) * C102 +
           (C1961 - C1962) * C90 + (C1963 - C1964) * C104 +
           (C1965 - C1966) * C91) *
              C89236 * C10540 +
          ((C263 * C10544 - C89247 * C10660) * C100 +
           (C263 * C10550 - C89247 * C10663) * C89 +
           (C263 * C10543 - C89247 * C10661) * C102 +
           (C263 * C10548 - C89247 * C10664) * C90 +
           (C263 * C10542 - C89247 * C10662) * C104 +
           (C263 * C10546 - C89247 * C10665) * C91) *
              C89236 * C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C13261 +
             (C89247 * C270 - C263 * C113) * C89093) *
                C13258 +
            ((C13956 - C13957) * C13261 + (C13958 - C13959) * C89093) * C13259 +
            C13981 * C13260) *
               C9228 +
           (((C263 * C1724 - C89247 * C1934) * C13261 +
             (C263 * C1735 - C89247 * C1942) * C89093) *
                C13258 +
            ((C16928 - C16929) * C13261 + (C16930 - C16931) * C89093) * C13259 +
            C21296 * C13260) *
               C89217) *
              C89137 * C5075 +
          ((((C278 - C277) * C13261 + (C280 - C279) * C89093) * C13258 +
            ((C1046 - C1047) * C13261 + (C1048 - C1049) * C89093) * C13259 +
            C13980 * C13260) *
               C9228 +
           (((C1952 - C1951) * C13261 + (C1954 - C1953) * C89093) * C13258 +
            ((C4334 - C4335) * C13261 + (C4336 - C4337) * C89093) * C13259 +
            ((C16936 - C16937) * C13261 + (C16938 - C16939) * C89093) *
                C13260) *
               C89217) *
              C89137 * C5076 +
          (((C293 * C13261 + C294 * C89093) * C13258 +
            ((C1051 - C1050) * C13261 + (C1053 - C1052) * C89093) * C13259 +
            ((C1058 - C1059) * C13261 + (C1060 - C1061) * C89093) * C13260) *
               C9228 +
           ((C3515 * C13261 + C3516 * C89093) * C13258 +
            ((C4339 - C4338) * C13261 + (C4341 - C4340) * C89093) * C13259 +
            ((C263 * C8514 - C89247 * C8682) * C13261 +
             (C263 * C8518 - C89247 * C8685) * C89093) *
                C13260) *
               C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C13261 +
             (C89247 * C270 - C263 * C113) * C89093) *
                C13258 +
            ((C13956 - C13957) * C13261 + (C13958 - C13959) * C89093) * C13259 +
            C13981 * C13260) *
               C9228 +
           (((C263 * C1724 - C89247 * C1934) * C13261 +
             (C263 * C1735 - C89247 * C1942) * C89093) *
                C13258 +
            ((C16928 - C16929) * C13261 + (C16930 - C16931) * C89093) * C13259 +
            C21296 * C13260) *
               C89217) *
              C812 +
          ((((C13957 - C13956) * C13261 + (C13959 - C13958) * C89093) * C13258 +
            ((C13961 - C13960) * C13261 + (C13963 - C13962) * C89093) * C13259 +
            C18435 * C13260) *
               C9228 +
           (((C16929 - C16928) * C13261 + (C16931 - C16930) * C89093) * C13258 +
            ((C16933 - C16932) * C13261 + (C16935 - C16934) * C89093) * C13259 +
            ((C21290 - C21291) * C13261 + (C21292 - C21293) * C89093) *
                C13260) *
               C89217) *
              C813 +
          ((C13981 * C13258 +
            ((C13965 - C13964) * C13261 + (C13967 - C13966) * C89093) * C13259 +
            ((C18429 - C18430) * C13261 + (C18431 - C18432) * C89093) *
                C13260) *
               C9228 +
           (C21296 * C13258 +
            ((C21291 - C21290) * C13261 + (C21293 - C21292) * C89093) * C13259 +
            ((C263 * C21123 - C89247 * C21285) * C13261 +
             (C263 * C21125 - C89247 * C21286) * C89093) *
                C13260) *
               C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C13261 +
            (C89247 * C270 - C263 * C113) * C89093) *
               C13258 +
           ((C13956 - C13957) * C13261 + (C13958 - C13959) * C89093) * C13259 +
           C13981 * C13260) *
              C10538 +
          (((C263 * C1724 - C89247 * C1934) * C13261 +
            (C263 * C1735 - C89247 * C1942) * C89093) *
               C13258 +
           ((C16928 - C16929) * C13261 + (C16930 - C16931) * C89093) * C13259 +
           C21296 * C13260) *
              C10539 +
          (((C89247 * C1937 - C263 * C1725) * C13261 +
            (C89247 * C1945 - C263 * C1737) * C89093) *
               C13258 +
           ((C19012 - C19013) * C13261 + (C19014 - C19015) * C89093) * C13259 +
           ((C19016 - C19017) * C13261 + (C19018 - C19019) * C89093) * C13260) *
              C10540 +
          (((C263 * C10544 - C89247 * C10660) * C13261 +
            (C263 * C10550 - C89247 * C10663) * C89093) *
               C13258 +
           ((C263 * C23153 - C89247 * C23264) * C13261 +
            (C263 * C23157 - C89247 * C23266) * C89093) *
               C13259 +
           ((C263 * C23152 - C89247 * C23265) * C13261 +
            (C263 * C23155 - C89247 * C23267) * C89093) *
               C13260) *
              C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C25848 * C264 - C25951 * C106 + C25849 * C1934 - C25952 * C1724 +
             C25850 * C1937 - C25953 * C1725) *
                C13261 +
            (C25848 * C270 - C25951 * C113 + C25849 * C1942 - C25952 * C1735 +
             C25850 * C1945 - C25953 * C1737) *
                C89093) *
               C89236 * C9228 +
           ((C25951 * C1724 - C25848 * C1934 + C25952 * C1725 - C25849 * C1937 +
             C25953 * C10544 - C25850 * C10660) *
                C13261 +
            (C25951 * C1735 - C25848 * C1942 + C25952 * C1737 - C25849 * C1945 +
             C25953 * C10550 - C25850 * C10663) *
                C89093) *
               C89236 * C89217) *
              C89137 * C5075 +
          (((C25951 * C107 - C25848 * C265 + C25952 * C1723 - C25849 * C1935 +
             C25953 * C1726 - C25850 * C1938) *
                C13261 +
            (C25951 * C115 - C25848 * C271 + C25952 * C1733 - C25849 * C1943 +
             C25953 * C1739 - C25850 * C1946) *
                C89093) *
               C89236 * C9228 +
           ((C25848 * C1935 - C25951 * C1723 + C25849 * C1938 - C25952 * C1726 +
             C25850 * C10661 - C25953 * C10543) *
                C13261 +
            (C25848 * C1943 - C25951 * C1733 + C25849 * C1946 - C25952 * C1739 +
             C25850 * C10664 - C25953 * C10548) *
                C89093) *
               C89236 * C89217) *
              C89137 * C5076 +
          (((C25848 * C266 - C25951 * C108 + C25849 * C1936 - C25952 * C1722 +
             C25850 * C1939 - C25953 * C1727) *
                C13261 +
            (C25848 * C272 - C25951 * C117 + C25849 * C1944 - C25952 * C1731 +
             C25850 * C1947 - C25953 * C1741) *
                C89093) *
               C89236 * C9228 +
           ((C25951 * C1722 - C25848 * C1936 + C25952 * C1727 - C25849 * C1939 +
             C25953 * C10542 - C25850 * C10662) *
                C13261 +
            (C25951 * C1731 - C25848 * C1944 + C25952 * C1741 - C25849 * C1947 +
             C25953 * C10546 - C25850 * C10665) *
                C89093) *
               C89236 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C25848 * C264 - C25951 * C106 + C25849 * C1934 - C25952 * C1724 +
             C25850 * C1937 - C25953 * C1725) *
                C13261 +
            (C25848 * C270 - C25951 * C113 + C25849 * C1942 - C25952 * C1735 +
             C25850 * C1945 - C25953 * C1737) *
                C89093) *
               C89236 * C9228 +
           ((C25951 * C1724 - C25848 * C1934 + C25952 * C1725 - C25849 * C1937 +
             C25953 * C10544 - C25850 * C10660) *
                C13261 +
            (C25951 * C1735 - C25848 * C1942 + C25952 * C1737 - C25849 * C1945 +
             C25953 * C10550 - C25850 * C10663) *
                C89093) *
               C89236 * C89217) *
              C812 +
          (((C25951 * C819 - C25848 * C1029 + C25952 * C4097 - C25849 * C4325 +
             C25953 * C6249 - C25850 * C6413) *
                C13261 +
            (C25951 * C830 - C25848 * C1037 + C25952 * C4102 - C25849 * C4329 +
             C25953 * C6255 - C25850 * C6416) *
                C89093) *
               C89236 * C9228 +
           ((C25848 * C4325 - C25951 * C4097 + C25849 * C6413 - C25952 * C6249 +
             C25850 * C23264 - C25953 * C23153) *
                C13261 +
            (C25848 * C4329 - C25951 * C4102 + C25849 * C6416 - C25952 * C6255 +
             C25850 * C23266 - C25953 * C23157) *
                C89093) *
               C89236 * C89217) *
              C813 +
          (((C25848 * C1032 - C25951 * C820 + C25849 * C8680 - C25952 * C8516 +
             C25850 * C14761 - C25953 * C14601) *
                C13261 +
            (C25848 * C1040 - C25951 * C832 + C25849 * C8683 - C25952 * C8522 +
             C25850 * C14763 - C25953 * C14604) *
                C89093) *
               C89236 * C9228 +
           ((C25951 * C8516 - C25848 * C8680 + C25952 * C14601 -
             C25849 * C14761 + C25953 * C23152 - C25850 * C23265) *
                C13261 +
            (C25951 * C8522 - C25848 * C8683 + C25952 * C14604 -
             C25849 * C14763 + C25953 * C23155 - C25850 * C23267) *
                C89093) *
               C89236 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C25848 * C264 - C25951 * C106 + C25849 * C1934 - C25952 * C1724 +
            C25850 * C1937 - C25953 * C1725) *
               C13261 +
           (C25848 * C270 - C25951 * C113 + C25849 * C1942 - C25952 * C1735 +
            C25850 * C1945 - C25953 * C1737) *
               C89093) *
              C89236 * C10538 +
          ((C25951 * C1724 - C25848 * C1934 + C25952 * C1725 - C25849 * C1937 +
            C25953 * C10544 - C25850 * C10660) *
               C13261 +
           (C25951 * C1735 - C25848 * C1942 + C25952 * C1737 - C25849 * C1945 +
            C25953 * C10550 - C25850 * C10663) *
               C89093) *
              C89236 * C10539 +
          ((C25848 * C1937 - C25951 * C1725 + C25849 * C10660 -
            C25952 * C10544 + C25850 * C27225 - C25953 * C26997) *
               C13261 +
           (C25848 * C1945 - C25951 * C1737 + C25849 * C10663 -
            C25952 * C10550 + C25850 * C27227 - C25953 * C27000) *
               C89093) *
              C89236 * C10540 +
          ((C25951 * C10544 - C25848 * C10660 + C25952 * C26997 -
            C25849 * C27225 + C25953 * C35556 - C25850 * C35678) *
               C13261 +
           (C25951 * C10550 - C25848 * C10663 + C25952 * C27000 -
            C25849 * C27227 + C25953 * C35558 - C25850 * C35679) *
               C89093) *
              C89236 * C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q));
    d2eeyx[42] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 +
                 C91 * C116 - C104 * C108) *
                    C180 +
                (C89 * C352 - C100 * C346 + C90 * C353 - C102 * C347 +
                 C91 * C354 - C104 * C348) *
                    C89236) *
                   C89247 * C9228 +
               ((C100 * C1724 - C89 * C1734 + C102 * C1723 - C90 * C1732 +
                 C104 * C1722 - C91 * C1730) *
                    C180 +
                (C100 * C2040 - C89 * C2048 + C102 * C2041 - C90 * C2049 +
                 C104 * C2042 - C91 * C2050) *
                    C89236) *
                   C89247 * C89217) *
                  C89137 * C5075 +
              (((C100 * C107 - C89 * C114 + C102 * C108 - C90 * C116 +
                 C104 * C109 - C91 * C118) *
                    C180 +
                (C100 * C347 - C89 * C353 + C102 * C348 - C90 * C354 +
                 C104 * C349 - C91 * C355) *
                    C89236) *
                   C89247 * C9228 +
               ((C89 * C1732 - C100 * C1723 + C90 * C1730 - C102 * C1722 +
                 C91 * C1742 - C104 * C1728) *
                    C180 +
                (C89 * C2049 - C100 * C2041 + C90 * C2050 - C102 * C2042 +
                 C91 * C2054 - C104 * C2046) *
                    C89236) *
                   C89247 * C89217) *
                  C89137 * C5076 +
              (((C89 * C116 - C100 * C108 + C90 * C118 - C102 * C109 +
                 C91 * C120 - C104 * C110) *
                    C180 +
                (C89 * C354 - C100 * C348 + C90 * C355 - C102 * C349 +
                 C91 * C356 - C104 * C350) *
                    C89236) *
                   C89247 * C9228 +
               ((C100 * C1722 - C89 * C1730 + C102 * C1728 - C90 * C1742 +
                 C104 * C3352 - C91 * C3353) *
                    C180 +
                (C100 * C2042 - C89 * C2050 + C102 * C2046 - C90 * C2054 +
                 C104 * C3594 - C91 * C3595) *
                    C89236) *
                   C89247 * C89217) *
                  C89137 * C5077) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 +
                 C91 * C116 - C104 * C108) *
                    C180 +
                (C89 * C352 - C100 * C346 + C90 * C353 - C102 * C347 +
                 C91 * C354 - C104 * C348) *
                    C89236) *
                   C89247 * C9228 +
               ((C100 * C1724 - C89 * C1734 + C102 * C1723 - C90 * C1732 +
                 C104 * C1722 - C91 * C1730) *
                    C180 +
                (C100 * C2040 - C89 * C2048 + C102 * C2041 - C90 * C2049 +
                 C104 * C2042 - C91 * C2050) *
                    C89236) *
                   C89247 * C89217) *
                  C812 +
              (((C100 * C819 - C89 * C829 + C102 * C818 - C90 * C827 +
                 C104 * C817 - C91 * C825) *
                    C180 +
                (C100 * C1135 - C89 * C1143 + C102 * C1136 - C90 * C1144 +
                 C104 * C1137 - C91 * C1145) *
                    C89236) *
                   C89247 * C9228 +
               ((C89 * C4101 - C100 * C4097 + C90 * C4103 - C102 * C4098 +
                 C91 * C4105 - C104 * C4099) *
                    C180 +
                (C89 * C4443 - C100 * C4439 + C90 * C4444 - C102 * C4440 +
                 C91 * C4445 - C104 * C4441) *
                    C89236) *
                   C89247 * C89217) *
                  C813 +
              (((C89 * C831 - C100 * C820 + C90 * C833 - C102 * C821 +
                 C91 * C835 - C104 * C822) *
                    C180 +
                (C89 * C1146 - C100 * C1138 + C90 * C1147 - C102 * C1139 +
                 C91 * C1148 - C104 * C1140) *
                    C89236) *
                   C89247 * C9228 +
               ((C100 * C8516 - C89 * C8521 + C102 * C8515 - C90 * C8519 +
                 C104 * C8514 - C91 * C8517) *
                    C180 +
                (C100 * C8760 - C89 * C8763 + C102 * C8761 - C90 * C8764 +
                 C104 * C8762 - C91 * C8765) *
                    C89236) *
                   C89247 * C89217) *
                  C814) *
             C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 + C91 * C116 -
            C104 * C108) *
               C180 +
           (C89 * C352 - C100 * C346 + C90 * C353 - C102 * C347 + C91 * C354 -
            C104 * C348) *
               C89236) *
              C89247 * C10538 +
          ((C100 * C1724 - C89 * C1734 + C102 * C1723 - C90 * C1732 +
            C104 * C1722 - C91 * C1730) *
               C180 +
           (C100 * C2040 - C89 * C2048 + C102 * C2041 - C90 * C2049 +
            C104 * C2042 - C91 * C2050) *
               C89236) *
              C89247 * C10539 +
          ((C89 * C1736 - C100 * C1725 + C90 * C1738 - C102 * C1726 +
            C91 * C1740 - C104 * C1727) *
               C180 +
           (C89 * C2051 - C100 * C2043 + C90 * C2052 - C102 * C2044 +
            C91 * C2053 - C104 * C2045) *
               C89236) *
              C89247 * C10540 +
          ((C100 * C10544 - C89 * C10549 + C102 * C10543 - C90 * C10547 +
            C104 * C10542 - C91 * C10545) *
               C180 +
           (C100 * C10716 - C89 * C10719 + C102 * C10717 - C90 * C10720 +
            C104 * C10718 - C91 * C10721) *
               C89236) *
              C89247 * C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C89093 * C112 - C13261 * C106) * C13313 +
            (C89093 * C352 - C13261 * C346) * C13258 +
            (C14060 - C14061) * C13314 + (C14062 - C14063) * C13259 +
            C14084 * C13315 + C14085 * C13260) *
               C89247 * C9228 +
           ((C13261 * C1724 - C89093 * C1734) * C13313 +
            (C13261 * C2040 - C89093 * C2048) * C13258 +
            (C17042 - C17043) * C13314 + (C17044 - C17045) * C13259 +
            C21373 * C13315 + C21374 * C13260) *
               C89247 * C89217) *
              C89137 * C5075 +
          (((C13261 * C107 - C89093 * C114) * C13313 +
            (C13261 * C347 - C89093 * C353) * C13258 +
            (C14072 - C14073) * C13314 + (C14074 - C14075) * C13259 +
            C14086 * C13315 + C14087 * C13260) *
               C89247 * C9228 +
           ((C89093 * C1732 - C13261 * C1723) * C13313 +
            (C89093 * C2049 - C13261 * C2041) * C13258 +
            (C17050 - C17051) * C13314 + (C17052 - C17053) * C13259 +
            (C17054 - C17055) * C13315 + (C17056 - C17057) * C13260) *
               C89247 * C89217) *
              C89137 * C5076 +
          (((C89093 * C116 - C13261 * C108) * C13313 +
            (C89093 * C354 - C13261 * C348) * C13258 +
            (C15538 - C15539) * C13314 + (C15540 - C15541) * C13259 +
            (C15542 - C15543) * C13315 + (C15544 - C15545) * C13260) *
               C89247 * C9228 +
           ((C13261 * C1722 - C89093 * C1730) * C13313 +
            (C13261 * C2042 - C89093 * C2050) * C13258 +
            (C13261 * C4099 - C89093 * C4105) * C13314 +
            (C13261 * C4441 - C89093 * C4445) * C13259 +
            (C13261 * C8514 - C89093 * C8517) * C13315 +
            (C13261 * C8762 - C89093 * C8765) * C13260) *
               C89247 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C89093 * C112 - C13261 * C106) * C13313 +
            (C89093 * C352 - C13261 * C346) * C13258 +
            (C14060 - C14061) * C13314 + (C14062 - C14063) * C13259 +
            C14084 * C13315 + C14085 * C13260) *
               C89247 * C9228 +
           ((C13261 * C1724 - C89093 * C1734) * C13313 +
            (C13261 * C2040 - C89093 * C2048) * C13258 +
            (C17042 - C17043) * C13314 + (C17044 - C17045) * C13259 +
            C21373 * C13315 + C21374 * C13260) *
               C89247 * C89217) *
              C812 +
          (((C14061 - C14060) * C13313 + (C14063 - C14062) * C13258 +
            (C14065 - C14064) * C13314 + (C14067 - C14066) * C13259 +
            C18488 * C13315 + C18489 * C13260) *
               C89247 * C9228 +
           ((C17043 - C17042) * C13313 + (C17045 - C17044) * C13258 +
            (C17047 - C17046) * C13314 + (C17049 - C17048) * C13259 +
            (C21375 - C21376) * C13315 + (C21377 - C21378) * C13260) *
               C89247 * C89217) *
              C813 +
          ((C14084 * C13313 + C14085 * C13258 + (C14069 - C14068) * C13314 +
            (C14071 - C14070) * C13259 + (C18490 - C18491) * C13315 +
            (C18492 - C18493) * C13260) *
               C89247 * C9228 +
           (C21373 * C13313 + C21374 * C13258 + (C21376 - C21375) * C13314 +
            (C21378 - C21377) * C13259 +
            (C13261 * C21123 - C89093 * C21124) * C13315 +
            (C13261 * C21370 - C89093 * C21371) * C13260) *
               C89247 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C89093 * C112 - C13261 * C106) * C13313 +
           (C89093 * C352 - C13261 * C346) * C13258 +
           (C14060 - C14061) * C13314 + (C14062 - C14063) * C13259 +
           C14084 * C13315 + C14085 * C13260) *
              C89247 * C10538 +
          ((C13261 * C1724 - C89093 * C1734) * C13313 +
           (C13261 * C2040 - C89093 * C2048) * C13258 +
           (C17042 - C17043) * C13314 + (C17044 - C17045) * C13259 +
           C21373 * C13315 + C21374 * C13260) *
              C89247 * C10539 +
          ((C89093 * C1736 - C13261 * C1725) * C13313 +
           (C89093 * C2051 - C13261 * C2043) * C13258 +
           (C19096 - C19097) * C13314 + (C19098 - C19099) * C13259 +
           (C19100 - C19101) * C13315 + (C19102 - C19103) * C13260) *
              C89247 * C10540 +
          ((C13261 * C10544 - C89093 * C10549) * C13313 +
           (C13261 * C10716 - C89093 * C10719) * C13258 +
           (C13261 * C23153 - C89093 * C23156) * C13314 +
           (C13261 * C23318 - C89093 * C23320) * C13259 +
           (C13261 * C23152 - C89093 * C23154) * C13315 +
           (C13261 * C23319 - C89093 * C23321) * C13260) *
              C89247 * C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C180 +
             (C89093 * C352 - C13261 * C346) * C89236) *
                C25848 +
            ((C27308 - C27309) * C180 + (C27310 - C27311) * C89236) * C25849 +
            C27340 * C25850) *
               C9228 +
           (((C27309 - C27308) * C180 + (C27311 - C27310) * C89236) * C25848 +
            ((C27313 - C27312) * C180 + (C27315 - C27314) * C89236) * C25849 +
            ((C27316 - C27317) * C180 + (C27318 - C27319) * C89236) * C25850) *
               C89217) *
              C89137 * C5075 +
          ((((C13261 * C107 - C89093 * C114) * C180 +
             (C13261 * C347 - C89093 * C353) * C89236) *
                C25848 +
            ((C27320 - C27321) * C180 + (C27322 - C27323) * C89236) * C25849 +
            C27341 * C25850) *
               C9228 +
           (((C27321 - C27320) * C180 + (C27323 - C27322) * C89236) * C25848 +
            ((C27325 - C27324) * C180 + (C27327 - C27326) * C89236) * C25849 +
            ((C27328 - C27329) * C180 + (C27330 - C27331) * C89236) * C25850) *
               C89217) *
              C89137 * C5076 +
          ((((C89093 * C116 - C13261 * C108) * C180 +
             (C89093 * C354 - C13261 * C348) * C89236) *
                C25848 +
            ((C28758 - C28759) * C180 + (C28760 - C28761) * C89236) * C25849 +
            ((C28762 - C28763) * C180 + (C28764 - C28765) * C89236) * C25850) *
               C9228 +
           (((C28759 - C28758) * C180 + (C28761 - C28760) * C89236) * C25848 +
            ((C28763 - C28762) * C180 + (C28765 - C28764) * C89236) * C25849 +
            ((C13261 * C10542 - C89093 * C10545) * C180 +
             (C13261 * C10718 - C89093 * C10721) * C89236) *
                C25850) *
               C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C180 +
             (C89093 * C352 - C13261 * C346) * C89236) *
                C25848 +
            ((C27308 - C27309) * C180 + (C27310 - C27311) * C89236) * C25849 +
            C27340 * C25850) *
               C9228 +
           (((C27309 - C27308) * C180 + (C27311 - C27310) * C89236) * C25848 +
            ((C27313 - C27312) * C180 + (C27315 - C27314) * C89236) * C25849 +
            ((C27316 - C27317) * C180 + (C27318 - C27319) * C89236) * C25850) *
               C89217) *
              C812 +
          ((((C14061 - C14060) * C180 + (C14063 - C14062) * C89236) * C25848 +
            ((C17042 - C17043) * C180 + (C17044 - C17045) * C89236) * C25849 +
            C31542 * C25850) *
               C9228 +
           (((C17043 - C17042) * C180 + (C17045 - C17044) * C89236) * C25848 +
            ((C19096 - C19097) * C180 + (C19098 - C19099) * C89236) * C25849 +
            ((C31536 - C31537) * C180 + (C31538 - C31539) * C89236) * C25850) *
               C89217) *
              C813 +
          (((C14084 * C180 + C14085 * C89236) * C25848 +
            ((C17047 - C17046) * C180 + (C17049 - C17048) * C89236) * C25849 +
            ((C19100 - C19101) * C180 + (C19102 - C19103) * C89236) * C25850) *
               C9228 +
           ((C21373 * C180 + C21374 * C89236) * C25848 +
            ((C19101 - C19100) * C180 + (C19103 - C19102) * C89236) * C25849 +
            ((C13261 * C23152 - C89093 * C23154) * C180 +
             (C13261 * C23319 - C89093 * C23321) * C89236) *
                C25850) *
               C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C89093 * C112 - C13261 * C106) * C180 +
            (C89093 * C352 - C13261 * C346) * C89236) *
               C25848 +
           ((C27308 - C27309) * C180 + (C27310 - C27311) * C89236) * C25849 +
           C27340 * C25850) *
              C10538 +
          (((C27309 - C27308) * C180 + (C27311 - C27310) * C89236) * C25848 +
           ((C27313 - C27312) * C180 + (C27315 - C27314) * C89236) * C25849 +
           C35741 * C25850) *
              C10539 +
          (C27340 * C25848 +
           ((C27317 - C27316) * C180 + (C27319 - C27318) * C89236) * C25849 +
           ((C35735 - C35736) * C180 + (C35737 - C35738) * C89236) * C25850) *
              C10540 +
          (C35741 * C25848 +
           ((C35736 - C35735) * C180 + (C35738 - C35737) * C89236) * C25849 +
           ((C13261 * C35556 - C89093 * C35557) * C180 +
            (C13261 * C35730 - C89093 * C35731) * C89236) *
               C25850) *
              C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q));
    d2eeyy[42] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) *
                    C89 +
                C440 * C90 + C441 * C91) *
                   C89247 * C9228 -
               (C2163 * C91 + C2164 * C90 +
                (C180 * C1828 - C408 * C1724 - C180 * C2040 + C89236 * C2132) *
                    C89) *
                   C89247 * C89217) *
                  C89137 * C5075 +
              ((C2164 * C89 + C2163 * C90 + C3678 * C91) * C89247 * C89217 -
               (C442 * C91 + C441 * C90 + C440 * C89) * C89247 * C9228) *
                  C89137 * C5076 +
              ((C441 * C89 + C442 * C90 + C443 * C91) * C89247 * C9228 -
               ((C180 * C3430 - C408 * C3352 - C180 * C3594 + C89236 * C3670) *
                    C91 +
                C3678 * C90 + C2163 * C89) *
                   C89247 * C89217) *
                  C89137 * C5077) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) *
                    C89 +
                C440 * C90 + C441 * C91) *
                   C89247 * C9228 -
               (C2163 * C91 + C2164 * C90 +
                (C180 * C1828 - C408 * C1724 - C180 * C2040 + C89236 * C2132) *
                    C89) *
                   C89247 * C89217) *
                  C812 +
              (((C180 * C4211 - C408 * C4097 - C180 * C4439 + C89236 * C4545) *
                    C89 +
                C4562 * C90 + C4563 * C91) *
                   C89247 * C89217 -
               (C1258 * C91 + C1259 * C90 +
                (C180 * C923 - C408 * C819 - C180 * C1135 + C89236 * C1227) *
                    C89) *
                   C89247 * C9228) *
                  C813 +
              (((C180 * C926 - C408 * C820 - C180 * C1138 + C89236 * C1228) *
                    C89 +
                C1260 * C90 + C1261 * C91) *
                   C89247 * C9228 -
               ((C180 * C8602 - C408 * C8514 - C180 * C8762 + C89236 * C8840) *
                    C91 +
                (C180 * C8601 - C408 * C8515 - C180 * C8761 + C89236 * C8841) *
                    C90 +
                (C180 * C8600 - C408 * C8516 - C180 * C8760 + C89236 * C8842) *
                    C89) *
                   C89247 * C89217) *
                  C814) *
             C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C89 +
           C440 * C90 + C441 * C91) *
              C89247 * C10538 -
          (C2163 * C91 + C2164 * C90 +
           (C180 * C1828 - C408 * C1724 - C180 * C2040 + C89236 * C2132) *
               C89) *
              C89247 * C10539 +
          ((C180 * C1831 - C408 * C1725 - C180 * C2043 + C89236 * C2133) * C89 +
           C2165 * C90 + C2166 * C91) *
              C89247 * C10540 -
          ((C180 * C10606 - C408 * C10542 - C180 * C10718 + C89236 * C10772) *
               C91 +
           (C180 * C10605 - C408 * C10543 - C180 * C10717 + C89236 * C10773) *
               C90 +
           (C180 * C10604 - C408 * C10544 - C180 * C10716 + C89236 * C10774) *
               C89) *
              C89247 * C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C13313 * C181 - C13466 * C106 - C13313 * C346 + C13258 * C409 +
            C13314 * C923 - C13467 * C819 - C13314 * C1135 + C13259 * C1227 +
            C13315 * C926 - C13468 * C820 - C13315 * C1138 + C13260 * C1228) *
               C89093 * C89247 * C9228 -
           (C13315 * C8600 - C13468 * C8516 - C13315 * C8760 + C13260 * C8842 +
            C13314 * C4211 - C13467 * C4097 - C13314 * C4439 + C13259 * C4545 +
            C13313 * C1828 - C13466 * C1724 - C13313 * C2040 + C13258 * C2132) *
               C89093 * C89247 * C89217) *
              C89137 * C5075 +
          ((C13313 * C1829 - C13466 * C1723 - C13313 * C2041 + C13258 * C2131 +
            C13314 * C4212 - C13467 * C4098 - C13314 * C4440 + C13259 * C4546 +
            C13315 * C8601 - C13468 * C8515 - C13315 * C8761 + C13260 * C8841) *
               C89093 * C89247 * C89217 -
           (C13315 * C927 - C13468 * C821 - C13315 * C1139 + C13260 * C1229 +
            C13314 * C924 - C13467 * C818 - C13314 * C1136 + C13259 * C1226 +
            C13313 * C182 - C13466 * C107 - C13313 * C347 + C13258 * C410) *
               C89093 * C89247 * C9228) *
              C89137 * C5076 +
          ((C13313 * C183 - C13466 * C108 - C13313 * C348 + C13258 * C411 +
            C13314 * C925 - C13467 * C817 - C13314 * C1137 + C13259 * C1225 +
            C13315 * C928 - C13468 * C822 - C13315 * C1140 + C13260 * C1230) *
               C89093 * C89247 * C9228 -
           (C13315 * C8602 - C13468 * C8514 - C13315 * C8762 + C13260 * C8840 +
            C13314 * C4213 - C13467 * C4099 - C13314 * C4441 + C13259 * C4547 +
            C13313 * C1830 - C13466 * C1722 - C13313 * C2042 + C13258 * C2130) *
               C89093 * C89247 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C13313 * C181 - C13466 * C106 - C13313 * C346 + C13258 * C409 +
            C13314 * C923 - C13467 * C819 - C13314 * C1135 + C13259 * C1227 +
            C13315 * C926 - C13468 * C820 - C13315 * C1138 + C13260 * C1228) *
               C89093 * C89247 * C9228 -
           (C13315 * C8600 - C13468 * C8516 - C13315 * C8760 + C13260 * C8842 +
            C13314 * C4211 - C13467 * C4097 - C13314 * C4439 + C13259 * C4545 +
            C13313 * C1828 - C13466 * C1724 - C13313 * C2040 + C13258 * C2132) *
               C89093 * C89247 * C89217) *
              C812 +
          ((C13313 * C4211 - C13466 * C4097 - C13313 * C4439 + C13258 * C4545 +
            C13314 * C8600 - C13467 * C8516 - C13314 * C8760 + C13259 * C8842 +
            C13315 * C16821 - C13468 * C16683 - C13315 * C17037 +
            C13260 * C17155) *
               C89093 * C89247 * C89217 -
           (C13315 * C5787 - C13468 * C5727 - C13315 * C5899 + C13260 * C5957 +
            C13314 * C926 - C13467 * C820 - C13314 * C1138 + C13259 * C1228 +
            C13313 * C923 - C13466 * C819 - C13313 * C1135 + C13258 * C1227) *
               C89093 * C89247 * C9228) *
              C813 +
          ((C13313 * C926 - C13466 * C820 - C13313 * C1138 + C13258 * C1228 +
            C13314 * C5787 - C13467 * C5727 - C13314 * C5899 + C13259 * C5957 +
            C13315 * C13873 - C13468 * C13743 - C13315 * C14055 +
            C13260 * C14161) *
               C89093 * C89247 * C9228 -
           (C13315 * C21209 - C13468 * C21123 - C13315 * C21370 +
            C13260 * C21452 + C13314 * C16821 - C13467 * C16683 -
            C13314 * C17037 + C13259 * C17155 + C13313 * C8600 -
            C13466 * C8516 - C13313 * C8760 + C13258 * C8842) *
               C89093 * C89247 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((C13313 * C181 - C13466 * C106 - C13313 * C346 + C13258 * C409 +
           C13314 * C923 - C13467 * C819 - C13314 * C1135 + C13259 * C1227 +
           C13315 * C926 - C13468 * C820 - C13315 * C1138 + C13260 * C1228) *
              C89093 * C89247 * C10538 -
          (C13315 * C8600 - C13468 * C8516 - C13315 * C8760 + C13260 * C8842 +
           C13314 * C4211 - C13467 * C4097 - C13314 * C4439 + C13259 * C4545 +
           C13313 * C1828 - C13466 * C1724 - C13313 * C2040 + C13258 * C2132) *
              C89093 * C89247 * C10539 +
          (C13313 * C1831 - C13466 * C1725 - C13313 * C2043 + C13258 * C2133 +
           C13314 * C6333 - C13467 * C6249 - C13314 * C6493 + C13259 * C6575 +
           C13315 * C14683 - C13468 * C14601 - C13315 * C14839 +
           C13260 * C14917) *
              C89093 * C89247 * C10540 -
          (C13315 * C23211 - C13468 * C23152 - C13315 * C23319 +
           C13260 * C23372 + C13314 * C23210 - C13467 * C23153 -
           C13314 * C23318 + C13259 * C23373 + C13313 * C10604 -
           C13466 * C10544 - C13313 * C10716 + C13258 * C10774) *
              C89093 * C89247 * C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C89093 *
                C25848 +
            C27448 * C25849 + C27449 * C25850) *
               C9228 -
           (C27450 * C25850 + C27449 * C25849 + C27448 * C25848) * C89217) *
              C89137 * C5075 +
          ((C27430 * C25848 + C27431 * C25849 + C27451 * C25850) * C89217 -
           (C27431 * C25850 + C27430 * C25849 + C440 * C89093 * C25848) *
               C9228) *
              C89137 * C5076 +
          ((C441 * C89093 * C25848 + C28840 * C25849 + C28841 * C25850) *
               C9228 -
           ((C180 * C10606 - C408 * C10542 - C180 * C10718 + C89236 * C10772) *
                C89093 * C25850 +
            C28841 * C25849 + C28840 * C25848) *
               C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C89093 *
                C25848 +
            C27448 * C25849 + C27449 * C25850) *
               C9228 -
           (C27450 * C25850 + C27449 * C25849 + C27448 * C25848) * C89217) *
              C812 +
          ((C29688 * C25848 + C29689 * C25849 + C31625 * C25850) * C89217 -
           (C29689 * C25850 + C29688 * C25849 +
            (C180 * C923 - C408 * C819 - C180 * C1135 + C89236 * C1227) *
                C89093 * C25848) *
               C9228) *
              C813 +
          (((C180 * C926 - C408 * C820 - C180 * C1138 + C89236 * C1228) *
                C89093 * C25848 +
            C33873 * C25849 + C33874 * C25850) *
               C9228 -
           ((C180 * C23211 - C408 * C23152 - C180 * C23319 + C89236 * C23372) *
                C89093 * C25850 +
            C33874 * C25849 + C33873 * C25848) *
               C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C89093 *
               C25848 +
           C27448 * C25849 + C27449 * C25850) *
              C10538 -
          (C27450 * C25850 + C27449 * C25849 + C27448 * C25848) * C10539 +
          (C27449 * C25848 + C27450 * C25849 + C35800 * C25850) * C10540 -
          ((C180 * C35617 - C408 * C35556 - C180 * C35730 + C89236 * C35791) *
               C89093 * C25850 +
           C35800 * C25849 + C27450 * C25848) *
              C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q));
    d2eeyz[42] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C89247 * C264 - C263 * C106) * C180 +
                 (C89247 * C493 - C263 * C346) * C89236) *
                    C89 +
                ((C277 - C278) * C180 + (C500 - C501) * C89236) * C90 +
                C514 * C91) *
                   C9228 +
               (((C263 * C1724 - C89247 * C1934) * C180 +
                 (C263 * C2040 - C89247 * C2240) * C89236) *
                    C89 +
                ((C1951 - C1952) * C180 + (C2249 - C2250) * C89236) * C90 +
                C3759 * C91) *
                   C89217) *
                  C89137 * C5075 +
              ((((C278 - C277) * C180 + (C501 - C500) * C89236) * C89 +
                ((C282 - C281) * C180 + (C504 - C503) * C89236) * C90 +
                C515 * C91) *
                   C9228 +
               (((C1952 - C1951) * C180 + (C2250 - C2249) * C89236) * C89 +
                ((C1956 - C1955) * C180 + (C2252 - C2251) * C89236) * C90 +
                ((C3517 - C3518) * C180 + (C3756 - C3757) * C89236) * C91) *
                   C89217) *
                  C89137 * C5076 +
              ((C514 * C89 +
                ((C286 - C285) * C180 + (C507 - C506) * C89236) * C90 +
                ((C289 - C290) * C180 + (C508 - C509) * C89236) * C91) *
                   C9228 +
               (C3759 * C89 +
                ((C3518 - C3517) * C180 + (C3757 - C3756) * C89236) * C90 +
                ((C263 * C3352 - C89247 * C3512) * C180 +
                 (C263 * C3594 - C89247 * C3752) * C89236) *
                    C91) *
                   C89217) *
                  C89137 * C5077) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C89247 * C264 - C263 * C106) * C180 +
                 (C89247 * C493 - C263 * C346) * C89236) *
                    C89 +
                ((C277 - C278) * C180 + (C500 - C501) * C89236) * C90 +
                C514 * C91) *
                   C9228 +
               (((C263 * C1724 - C89247 * C1934) * C180 +
                 (C263 * C2040 - C89247 * C2240) * C89236) *
                    C89 +
                ((C1951 - C1952) * C180 + (C2249 - C2250) * C89236) * C90 +
                C3759 * C91) *
                   C89217) *
                  C812 +
              ((((C263 * C819 - C89247 * C1029) * C180 +
                 (C263 * C1135 - C89247 * C1335) * C89236) *
                    C89 +
                ((C1046 - C1047) * C180 + (C1344 - C1345) * C89236) * C90 +
                C3036 * C91) *
                   C9228 +
               (((C89247 * C4325 - C263 * C4097) * C180 +
                 (C89247 * C4661 - C263 * C4439) * C89236) *
                    C89 +
                ((C4334 - C4335) * C180 + (C4666 - C4667) * C89236) * C90 +
                ((C4338 - C4339) * C180 + (C4668 - C4669) * C89236) * C91) *
                   C89217) *
                  C813 +
              ((((C89247 * C1032 - C263 * C820) * C180 +
                 (C89247 * C1338 - C263 * C1138) * C89236) *
                    C89 +
                ((C1054 - C1055) * C180 + (C1348 - C1349) * C89236) * C90 +
                ((C1058 - C1059) * C180 + (C1350 - C1351) * C89236) * C91) *
                   C9228 +
               (((C263 * C8516 - C89247 * C8680) * C180 +
                 (C263 * C8760 - C89247 * C8917) * C89236) *
                    C89 +
                ((C263 * C8515 - C89247 * C8681) * C180 +
                 (C263 * C8761 - C89247 * C8918) * C89236) *
                    C90 +
                ((C263 * C8514 - C89247 * C8682) * C180 +
                 (C263 * C8762 - C89247 * C8919) * C89236) *
                    C91) *
                   C89217) *
                  C814) *
             C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C180 +
            (C89247 * C493 - C263 * C346) * C89236) *
               C89 +
           ((C277 - C278) * C180 + (C500 - C501) * C89236) * C90 + C514 * C91) *
              C10538 +
          (((C263 * C1724 - C89247 * C1934) * C180 +
            (C263 * C2040 - C89247 * C2240) * C89236) *
               C89 +
           ((C1951 - C1952) * C180 + (C2249 - C2250) * C89236) * C90 +
           C3759 * C91) *
              C10539 +
          (((C89247 * C1937 - C263 * C1725) * C180 +
            (C89247 * C2243 - C263 * C2043) * C89236) *
               C89 +
           ((C1959 - C1960) * C180 + (C2253 - C2254) * C89236) * C90 +
           ((C1963 - C1964) * C180 + (C2255 - C2256) * C89236) * C91) *
              C10540 +
          (((C263 * C10544 - C89247 * C10660) * C180 +
            (C263 * C10716 - C89247 * C10825) * C89236) *
               C89 +
           ((C263 * C10543 - C89247 * C10661) * C180 +
            (C263 * C10717 - C89247 * C10826) * C89236) *
               C90 +
           ((C263 * C10542 - C89247 * C10662) * C180 +
            (C263 * C10718 - C89247 * C10827) * C89236) *
               C91) *
              C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C13313 +
            (C89247 * C493 - C263 * C346) * C13258 +
            (C13956 - C13957) * C13314 + (C14240 - C14241) * C13259 +
            C13974 * C13315 + C14249 * C13260) *
               C89093 * C9228 +
           ((C263 * C1724 - C89247 * C1934) * C13313 +
            (C263 * C2040 - C89247 * C2240) * C13258 +
            (C16928 - C16929) * C13314 + (C17258 - C17259) * C13259 +
            C21288 * C13315 + C21529 * C13260) *
               C89093 * C89217) *
              C89137 * C5075 +
          (((C278 - C277) * C13313 + (C501 - C500) * C13258 +
            (C1046 - C1047) * C13314 + (C1344 - C1345) * C13259 +
            C13968 * C13315 + C14246 * C13260) *
               C89093 * C9228 +
           ((C1952 - C1951) * C13313 + (C2250 - C2249) * C13258 +
            (C4334 - C4335) * C13314 + (C4666 - C4667) * C13259 +
            (C16936 - C16937) * C13315 + (C17262 - C17263) * C13260) *
               C89093 * C89217) *
              C89137 * C5076 +
          ((C293 * C13313 + C510 * C13258 + (C1051 - C1050) * C13314 +
            (C1347 - C1346) * C13259 + (C1058 - C1059) * C13315 +
            (C1350 - C1351) * C13260) *
               C89093 * C9228 +
           (C3515 * C13313 + C3755 * C13258 + (C4339 - C4338) * C13314 +
            (C4669 - C4668) * C13259 +
            (C263 * C8514 - C89247 * C8682) * C13315 +
            (C263 * C8762 - C89247 * C8919) * C13260) *
               C89093 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C13313 +
            (C89247 * C493 - C263 * C346) * C13258 +
            (C13956 - C13957) * C13314 + (C14240 - C14241) * C13259 +
            C13974 * C13315 + C14249 * C13260) *
               C89093 * C9228 +
           ((C263 * C1724 - C89247 * C1934) * C13313 +
            (C263 * C2040 - C89247 * C2240) * C13258 +
            (C16928 - C16929) * C13314 + (C17258 - C17259) * C13259 +
            C21288 * C13315 + C21529 * C13260) *
               C89093 * C89217) *
              C812 +
          (((C13957 - C13956) * C13313 + (C14241 - C14240) * C13258 +
            (C13961 - C13960) * C13314 + (C14243 - C14242) * C13259 +
            C18427 * C13315 + C18596 * C13260) *
               C89093 * C9228 +
           ((C16929 - C16928) * C13313 + (C17259 - C17258) * C13258 +
            (C16933 - C16932) * C13314 + (C17261 - C17260) * C13259 +
            (C21290 - C21291) * C13315 + (C21530 - C21531) * C13260) *
               C89093 * C89217) *
              C813 +
          ((C13974 * C13313 + C14249 * C13258 + (C13965 - C13964) * C13314 +
            (C14245 - C14244) * C13259 + (C18429 - C18430) * C13315 +
            (C18597 - C18598) * C13260) *
               C89093 * C9228 +
           (C21288 * C13313 + C21529 * C13258 + (C21291 - C21290) * C13314 +
            (C21531 - C21530) * C13259 +
            (C263 * C21123 - C89247 * C21285) * C13315 +
            (C263 * C21370 - C89247 * C21527) * C13260) *
               C89093 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C89247 * C264 - C263 * C106) * C13313 +
           (C89247 * C493 - C263 * C346) * C13258 + (C13956 - C13957) * C13314 +
           (C14240 - C14241) * C13259 + C13974 * C13315 + C14249 * C13260) *
              C89093 * C10538 +
          ((C263 * C1724 - C89247 * C1934) * C13313 +
           (C263 * C2040 - C89247 * C2240) * C13258 +
           (C16928 - C16929) * C13314 + (C17258 - C17259) * C13259 +
           C21288 * C13315 + C21529 * C13260) *
              C89093 * C10539 +
          ((C89247 * C1937 - C263 * C1725) * C13313 +
           (C89247 * C2243 - C263 * C2043) * C13258 +
           (C19012 - C19013) * C13314 + (C19254 - C19255) * C13259 +
           (C19016 - C19017) * C13315 + (C19256 - C19257) * C13260) *
              C89093 * C10540 +
          ((C263 * C10544 - C89247 * C10660) * C13313 +
           (C263 * C10716 - C89247 * C10825) * C13258 +
           (C263 * C23153 - C89247 * C23264) * C13314 +
           (C263 * C23318 - C89247 * C23424) * C13259 +
           (C263 * C23152 - C89247 * C23265) * C13315 +
           (C263 * C23319 - C89247 * C23425) * C13260) *
              C89093 * C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C25848 * C264 - C25951 * C106 + C25849 * C1934 - C25952 * C1724 +
             C25850 * C1937 - C25953 * C1725) *
                C180 +
            (C25848 * C493 - C25951 * C346 + C25849 * C2240 - C25952 * C2040 +
             C25850 * C2243 - C25953 * C2043) *
                C89236) *
               C89093 * C9228 +
           ((C25951 * C1724 - C25848 * C1934 + C25952 * C1725 - C25849 * C1937 +
             C25953 * C10544 - C25850 * C10660) *
                C180 +
            (C25951 * C2040 - C25848 * C2240 + C25952 * C2043 - C25849 * C2243 +
             C25953 * C10716 - C25850 * C10825) *
                C89236) *
               C89093 * C89217) *
              C89137 * C5075 +
          (((C25951 * C107 - C25848 * C265 + C25952 * C1723 - C25849 * C1935 +
             C25953 * C1726 - C25850 * C1938) *
                C180 +
            (C25951 * C347 - C25848 * C494 + C25952 * C2041 - C25849 * C2241 +
             C25953 * C2044 - C25850 * C2244) *
                C89236) *
               C89093 * C9228 +
           ((C25848 * C1935 - C25951 * C1723 + C25849 * C1938 - C25952 * C1726 +
             C25850 * C10661 - C25953 * C10543) *
                C180 +
            (C25848 * C2241 - C25951 * C2041 + C25849 * C2244 - C25952 * C2044 +
             C25850 * C10826 - C25953 * C10717) *
                C89236) *
               C89093 * C89217) *
              C89137 * C5076 +
          (((C25848 * C266 - C25951 * C108 + C25849 * C1936 - C25952 * C1722 +
             C25850 * C1939 - C25953 * C1727) *
                C180 +
            (C25848 * C495 - C25951 * C348 + C25849 * C2242 - C25952 * C2042 +
             C25850 * C2245 - C25953 * C2045) *
                C89236) *
               C89093 * C9228 +
           ((C25951 * C1722 - C25848 * C1936 + C25952 * C1727 - C25849 * C1939 +
             C25953 * C10542 - C25850 * C10662) *
                C180 +
            (C25951 * C2042 - C25848 * C2242 + C25952 * C2045 - C25849 * C2245 +
             C25953 * C10718 - C25850 * C10827) *
                C89236) *
               C89093 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C25848 * C264 - C25951 * C106 + C25849 * C1934 - C25952 * C1724 +
             C25850 * C1937 - C25953 * C1725) *
                C180 +
            (C25848 * C493 - C25951 * C346 + C25849 * C2240 - C25952 * C2040 +
             C25850 * C2243 - C25953 * C2043) *
                C89236) *
               C89093 * C9228 +
           ((C25951 * C1724 - C25848 * C1934 + C25952 * C1725 - C25849 * C1937 +
             C25953 * C10544 - C25850 * C10660) *
                C180 +
            (C25951 * C2040 - C25848 * C2240 + C25952 * C2043 - C25849 * C2243 +
             C25953 * C10716 - C25850 * C10825) *
                C89236) *
               C89093 * C89217) *
              C812 +
          (((C25951 * C819 - C25848 * C1029 + C25952 * C4097 - C25849 * C4325 +
             C25953 * C6249 - C25850 * C6413) *
                C180 +
            (C25951 * C1135 - C25848 * C1335 + C25952 * C4439 - C25849 * C4661 +
             C25953 * C6493 - C25850 * C6650) *
                C89236) *
               C89093 * C9228 +
           ((C25848 * C4325 - C25951 * C4097 + C25849 * C6413 - C25952 * C6249 +
             C25850 * C23264 - C25953 * C23153) *
                C180 +
            (C25848 * C4661 - C25951 * C4439 + C25849 * C6650 - C25952 * C6493 +
             C25850 * C23424 - C25953 * C23318) *
                C89236) *
               C89093 * C89217) *
              C813 +
          (((C25848 * C1032 - C25951 * C820 + C25849 * C8680 - C25952 * C8516 +
             C25850 * C14761 - C25953 * C14601) *
                C180 +
            (C25848 * C1338 - C25951 * C1138 + C25849 * C8917 - C25952 * C8760 +
             C25850 * C14993 - C25953 * C14839) *
                C89236) *
               C89093 * C9228 +
           ((C25951 * C8516 - C25848 * C8680 + C25952 * C14601 -
             C25849 * C14761 + C25953 * C23152 - C25850 * C23265) *
                C180 +
            (C25951 * C8760 - C25848 * C8917 + C25952 * C14839 -
             C25849 * C14993 + C25953 * C23319 - C25850 * C23425) *
                C89236) *
               C89093 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C25848 * C264 - C25951 * C106 + C25849 * C1934 - C25952 * C1724 +
            C25850 * C1937 - C25953 * C1725) *
               C180 +
           (C25848 * C493 - C25951 * C346 + C25849 * C2240 - C25952 * C2040 +
            C25850 * C2243 - C25953 * C2043) *
               C89236) *
              C89093 * C10538 +
          ((C25951 * C1724 - C25848 * C1934 + C25952 * C1725 - C25849 * C1937 +
            C25953 * C10544 - C25850 * C10660) *
               C180 +
           (C25951 * C2040 - C25848 * C2240 + C25952 * C2043 - C25849 * C2243 +
            C25953 * C10716 - C25850 * C10825) *
               C89236) *
              C89093 * C10539 +
          ((C25848 * C1937 - C25951 * C1725 + C25849 * C10660 -
            C25952 * C10544 + C25850 * C27225 - C25953 * C26997) *
               C180 +
           (C25848 * C2243 - C25951 * C2043 + C25849 * C10825 -
            C25952 * C10716 + C25850 * C27525 - C25953 * C27303) *
               C89236) *
              C89093 * C10540 +
          ((C25951 * C10544 - C25848 * C10660 + C25952 * C26997 -
            C25849 * C27225 + C25953 * C35556 - C25850 * C35678) *
               C180 +
           (C25951 * C10716 - C25848 * C10825 + C25952 * C27303 -
            C25849 * C27525 + C25953 * C35730 - C25850 * C35850) *
               C89236) *
              C89093 * C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q));
    d2eezx[42] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 +
                 C91 * C116 - C104 * C108) *
                    C263 +
                (C89 * C571 - C100 * C565 + C90 * C572 - C102 * C566 +
                 C91 * C573 - C104 * C567) *
                    C89247) *
                   C89236 * C9228 +
               ((C100 * C1724 - C89 * C1734 + C102 * C1723 - C90 * C1732 +
                 C104 * C1722 - C91 * C1730) *
                    C263 +
                (C100 * C2330 - C89 * C2338 + C102 * C2331 - C90 * C2339 +
                 C104 * C2332 - C91 * C2340) *
                    C89247) *
                   C89236 * C89217) *
                  C89137 * C5075 +
              (((C100 * C107 - C89 * C114 + C102 * C108 - C90 * C116 +
                 C104 * C109 - C91 * C118) *
                    C263 +
                (C100 * C566 - C89 * C572 + C102 * C567 - C90 * C573 +
                 C104 * C568 - C91 * C574) *
                    C89247) *
                   C89236 * C9228 +
               ((C89 * C1732 - C100 * C1723 + C90 * C1730 - C102 * C1722 +
                 C91 * C1742 - C104 * C1728) *
                    C263 +
                (C89 * C2339 - C100 * C2331 + C90 * C2340 - C102 * C2332 +
                 C91 * C2344 - C104 * C2336) *
                    C89247) *
                   C89236 * C89217) *
                  C89137 * C5076 +
              (((C89 * C116 - C100 * C108 + C90 * C118 - C102 * C109 +
                 C91 * C120 - C104 * C110) *
                    C263 +
                (C89 * C573 - C100 * C567 + C90 * C574 - C102 * C568 +
                 C91 * C575 - C104 * C569) *
                    C89247) *
                   C89236 * C9228 +
               ((C100 * C1722 - C89 * C1730 + C102 * C1728 - C90 * C1742 +
                 C104 * C3352 - C91 * C3353) *
                    C263 +
                (C100 * C2332 - C89 * C2340 + C102 * C2336 - C90 * C2344 +
                 C104 * C3833 - C91 * C3834) *
                    C89247) *
                   C89236 * C89217) *
                  C89137 * C5077) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 +
                 C91 * C116 - C104 * C108) *
                    C263 +
                (C89 * C571 - C100 * C565 + C90 * C572 - C102 * C566 +
                 C91 * C573 - C104 * C567) *
                    C89247) *
                   C89236 * C9228 +
               ((C100 * C1724 - C89 * C1734 + C102 * C1723 - C90 * C1732 +
                 C104 * C1722 - C91 * C1730) *
                    C263 +
                (C100 * C2330 - C89 * C2338 + C102 * C2331 - C90 * C2339 +
                 C104 * C2332 - C91 * C2340) *
                    C89247) *
                   C89236 * C89217) *
                  C812 +
              (((C100 * C819 - C89 * C829 + C102 * C818 - C90 * C827 +
                 C104 * C817 - C91 * C825) *
                    C263 +
                (C100 * C1425 - C89 * C1433 + C102 * C1426 - C90 * C1434 +
                 C104 * C1427 - C91 * C1435) *
                    C89247) *
                   C89236 * C9228 +
               ((C89 * C4101 - C100 * C4097 + C90 * C4103 - C102 * C4098 +
                 C91 * C4105 - C104 * C4099) *
                    C263 +
                (C89 * C4771 - C100 * C4767 + C90 * C4772 - C102 * C4768 +
                 C91 * C4773 - C104 * C4769) *
                    C89247) *
                   C89236 * C89217) *
                  C813 +
              (((C89 * C831 - C100 * C820 + C90 * C833 - C102 * C821 +
                 C91 * C835 - C104 * C822) *
                    C263 +
                (C89 * C1436 - C100 * C1428 + C90 * C1437 - C102 * C1429 +
                 C91 * C1438 - C104 * C1430) *
                    C89247) *
                   C89236 * C9228 +
               ((C100 * C8516 - C89 * C8521 + C102 * C8515 - C90 * C8519 +
                 C104 * C8514 - C91 * C8517) *
                    C263 +
                (C100 * C8994 - C89 * C8997 + C102 * C8995 - C90 * C8998 +
                 C104 * C8996 - C91 * C8999) *
                    C89247) *
                   C89236 * C89217) *
                  C814) *
             C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 + C91 * C116 -
            C104 * C108) *
               C263 +
           (C89 * C571 - C100 * C565 + C90 * C572 - C102 * C566 + C91 * C573 -
            C104 * C567) *
               C89247) *
              C89236 * C10538 +
          ((C100 * C1724 - C89 * C1734 + C102 * C1723 - C90 * C1732 +
            C104 * C1722 - C91 * C1730) *
               C263 +
           (C100 * C2330 - C89 * C2338 + C102 * C2331 - C90 * C2339 +
            C104 * C2332 - C91 * C2340) *
               C89247) *
              C89236 * C10539 +
          ((C89 * C1736 - C100 * C1725 + C90 * C1738 - C102 * C1726 +
            C91 * C1740 - C104 * C1727) *
               C263 +
           (C89 * C2341 - C100 * C2333 + C90 * C2342 - C102 * C2334 +
            C91 * C2343 - C104 * C2335) *
               C89247) *
              C89236 * C10540 +
          ((C100 * C10544 - C89 * C10549 + C102 * C10543 - C90 * C10547 +
            C104 * C10542 - C91 * C10545) *
               C263 +
           (C100 * C10878 - C89 * C10881 + C102 * C10879 - C90 * C10882 +
            C104 * C10880 - C91 * C10883) *
               C89247) *
              C89236 * C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C263 +
             (C89093 * C571 - C13261 * C565) * C89247) *
                C13258 +
            ((C14060 - C14061) * C263 + (C14328 - C14329) * C89247) * C13259 +
            C14346 * C13260) *
               C9228 +
           (((C13261 * C1724 - C89093 * C1734) * C263 +
             (C13261 * C2330 - C89093 * C2338) * C89247) *
                C13258 +
            ((C17042 - C17043) * C263 + (C17366 - C17367) * C89247) * C13259 +
            C21613 * C13260) *
               C89217) *
              C89137 * C5075 +
          ((((C13261 * C107 - C89093 * C114) * C263 +
             (C13261 * C566 - C89093 * C572) * C89247) *
                C13258 +
            ((C14072 - C14073) * C263 + (C14335 - C14336) * C89247) * C13259 +
            C14347 * C13260) *
               C9228 +
           (((C89093 * C1732 - C13261 * C1723) * C263 +
             (C89093 * C2339 - C13261 * C2331) * C89247) *
                C13258 +
            ((C17050 - C17051) * C263 + (C17370 - C17371) * C89247) * C13259 +
            ((C17054 - C17055) * C263 + (C17372 - C17373) * C89247) * C13260) *
               C89217) *
              C89137 * C5076 +
          ((((C89093 * C116 - C13261 * C108) * C263 +
             (C89093 * C573 - C13261 * C567) * C89247) *
                C13258 +
            ((C15538 - C15539) * C263 + (C15768 - C15769) * C89247) * C13259 +
            ((C15542 - C15543) * C263 + (C15770 - C15771) * C89247) * C13260) *
               C9228 +
           (((C13261 * C1722 - C89093 * C1730) * C263 +
             (C13261 * C2332 - C89093 * C2340) * C89247) *
                C13258 +
            ((C13261 * C4099 - C89093 * C4105) * C263 +
             (C13261 * C4769 - C89093 * C4773) * C89247) *
                C13259 +
            ((C13261 * C8514 - C89093 * C8517) * C263 +
             (C13261 * C8996 - C89093 * C8999) * C89247) *
                C13260) *
               C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C263 +
             (C89093 * C571 - C13261 * C565) * C89247) *
                C13258 +
            ((C14060 - C14061) * C263 + (C14328 - C14329) * C89247) * C13259 +
            C14346 * C13260) *
               C9228 +
           (((C13261 * C1724 - C89093 * C1734) * C263 +
             (C13261 * C2330 - C89093 * C2338) * C89247) *
                C13258 +
            ((C17042 - C17043) * C263 + (C17366 - C17367) * C89247) * C13259 +
            C21613 * C13260) *
               C89217) *
              C812 +
          ((((C14061 - C14060) * C263 + (C14329 - C14328) * C89247) * C13258 +
            ((C14065 - C14064) * C263 + (C14332 - C14331) * C89247) * C13259 +
            C18656 * C13260) *
               C9228 +
           (((C17043 - C17042) * C263 + (C17367 - C17366) * C89247) * C13258 +
            ((C17047 - C17046) * C263 + (C17369 - C17368) * C89247) * C13259 +
            ((C21375 - C21376) * C263 + (C21610 - C21611) * C89247) * C13260) *
               C89217) *
              C813 +
          ((C14346 * C13258 +
            ((C14069 - C14068) * C263 + (C14334 - C14333) * C89247) * C13259 +
            ((C18490 - C18491) * C263 + (C18653 - C18654) * C89247) * C13260) *
               C9228 +
           (C21613 * C13258 +
            ((C21376 - C21375) * C263 + (C21611 - C21610) * C89247) * C13259 +
            ((C13261 * C21123 - C89093 * C21124) * C263 +
             (C13261 * C21605 - C89093 * C21606) * C89247) *
                C13260) *
               C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C89093 * C112 - C13261 * C106) * C263 +
            (C89093 * C571 - C13261 * C565) * C89247) *
               C13258 +
           ((C14060 - C14061) * C263 + (C14328 - C14329) * C89247) * C13259 +
           C14346 * C13260) *
              C10538 +
          (((C13261 * C1724 - C89093 * C1734) * C263 +
            (C13261 * C2330 - C89093 * C2338) * C89247) *
               C13258 +
           ((C17042 - C17043) * C263 + (C17366 - C17367) * C89247) * C13259 +
           C21613 * C13260) *
              C10539 +
          (((C89093 * C1736 - C13261 * C1725) * C263 +
            (C89093 * C2341 - C13261 * C2333) * C89247) *
               C13258 +
           ((C19096 - C19097) * C263 + (C19334 - C19335) * C89247) * C13259 +
           ((C19100 - C19101) * C263 + (C19336 - C19337) * C89247) * C13260) *
              C10540 +
          (((C13261 * C10544 - C89093 * C10549) * C263 +
            (C13261 * C10878 - C89093 * C10881) * C89247) *
               C13258 +
           ((C13261 * C23153 - C89093 * C23156) * C263 +
            (C13261 * C23476 - C89093 * C23478) * C89247) *
               C13259 +
           ((C13261 * C23152 - C89093 * C23154) * C263 +
            (C13261 * C23477 - C89093 * C23479) * C89247) *
               C13260) *
              C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C89093 * C112 - C13261 * C106) * C25951 +
            (C89093 * C571 - C13261 * C565) * C25848 +
            (C27308 - C27309) * C25952 + (C27606 - C27607) * C25849 +
            C27332 * C25953 + C27618 * C25850) *
               C89236 * C9228 +
           ((C27309 - C27308) * C25951 + (C27607 - C27606) * C25848 +
            (C27313 - C27312) * C25952 + (C27609 - C27608) * C25849 +
            (C27316 - C27317) * C25953 + (C27610 - C27611) * C25850) *
               C89236 * C89217) *
              C89137 * C5075 +
          (((C13261 * C107 - C89093 * C114) * C25951 +
            (C13261 * C566 - C89093 * C572) * C25848 +
            (C27320 - C27321) * C25952 + (C27612 - C27613) * C25849 +
            C27334 * C25953 + C27619 * C25850) *
               C89236 * C9228 +
           ((C27321 - C27320) * C25951 + (C27613 - C27612) * C25848 +
            (C27325 - C27324) * C25952 + (C27615 - C27614) * C25849 +
            (C27328 - C27329) * C25953 + (C27616 - C27617) * C25850) *
               C89236 * C89217) *
              C89137 * C5076 +
          (((C89093 * C116 - C13261 * C108) * C25951 +
            (C89093 * C573 - C13261 * C567) * C25848 +
            (C28758 - C28759) * C25952 + (C28990 - C28991) * C25849 +
            (C28762 - C28763) * C25953 + (C28992 - C28993) * C25850) *
               C89236 * C9228 +
           ((C28759 - C28758) * C25951 + (C28991 - C28990) * C25848 +
            (C28763 - C28762) * C25952 + (C28993 - C28992) * C25849 +
            (C13261 * C10542 - C89093 * C10545) * C25953 +
            (C13261 * C10880 - C89093 * C10883) * C25850) *
               C89236 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C89093 * C112 - C13261 * C106) * C25951 +
            (C89093 * C571 - C13261 * C565) * C25848 +
            (C27308 - C27309) * C25952 + (C27606 - C27607) * C25849 +
            C27332 * C25953 + C27618 * C25850) *
               C89236 * C9228 +
           ((C27309 - C27308) * C25951 + (C27607 - C27606) * C25848 +
            (C27313 - C27312) * C25952 + (C27609 - C27608) * C25849 +
            (C27316 - C27317) * C25953 + (C27610 - C27611) * C25850) *
               C89236 * C89217) *
              C812 +
          (((C14061 - C14060) * C25951 + (C14329 - C14328) * C25848 +
            (C17042 - C17043) * C25952 + (C17366 - C17367) * C25849 +
            C31534 * C25953 + C31777 * C25850) *
               C89236 * C9228 +
           ((C17043 - C17042) * C25951 + (C17367 - C17366) * C25848 +
            (C19096 - C19097) * C25952 + (C19334 - C19335) * C25849 +
            (C31536 - C31537) * C25953 + (C31778 - C31779) * C25850) *
               C89236 * C89217) *
              C813 +
          ((C14084 * C25951 + C14342 * C25848 + (C17047 - C17046) * C25952 +
            (C17369 - C17368) * C25849 + (C19100 - C19101) * C25953 +
            (C19336 - C19337) * C25850) *
               C89236 * C9228 +
           (C21373 * C25951 + C21609 * C25848 + (C19101 - C19100) * C25952 +
            (C19337 - C19336) * C25849 +
            (C13261 * C23152 - C89093 * C23154) * C25953 +
            (C13261 * C23477 - C89093 * C23479) * C25850) *
               C89236 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C89093 * C112 - C13261 * C106) * C25951 +
           (C89093 * C571 - C13261 * C565) * C25848 +
           (C27308 - C27309) * C25952 + (C27606 - C27607) * C25849 +
           C27332 * C25953 + C27618 * C25850) *
              C89236 * C10538 +
          ((C27309 - C27308) * C25951 + (C27607 - C27606) * C25848 +
           (C27313 - C27312) * C25952 + (C27609 - C27608) * C25849 +
           C35733 * C25953 + C35904 * C25850) *
              C89236 * C10539 +
          (C27332 * C25951 + C27618 * C25848 + (C27317 - C27316) * C25952 +
           (C27611 - C27610) * C25849 + (C35735 - C35736) * C25953 +
           (C35905 - C35906) * C25850) *
              C89236 * C10540 +
          (C35733 * C25951 + C35904 * C25848 + (C35736 - C35735) * C25952 +
           (C35906 - C35905) * C25849 +
           (C13261 * C35556 - C89093 * C35557) * C25953 +
           (C13261 * C35901 - C89093 * C35902) * C25850) *
              C89236 * C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q));
    d2eezy[42] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C89236 * C181 - C180 * C106) * C263 +
                 (C89236 * C627 - C180 * C565) * C89247) *
                    C89 +
                ((C194 - C195) * C263 + (C634 - C635) * C89247) * C90 +
                C648 * C91) *
                   C9228 +
               (((C180 * C1724 - C89236 * C1828) * C263 +
                 (C180 * C2330 - C89236 * C2420) * C89247) *
                    C89 +
                ((C1845 - C1846) * C263 + (C2429 - C2430) * C89247) * C90 +
                C3916 * C91) *
                   C89217) *
                  C89137 * C5075 +
              ((((C195 - C194) * C263 + (C635 - C634) * C89247) * C89 +
                ((C199 - C198) * C263 + (C638 - C637) * C89247) * C90 +
                C649 * C91) *
                   C9228 +
               (((C1846 - C1845) * C263 + (C2430 - C2429) * C89247) * C89 +
                ((C1850 - C1849) * C263 + (C2432 - C2431) * C89247) * C90 +
                ((C3435 - C3436) * C263 + (C3913 - C3914) * C89247) * C91) *
                   C89217) *
                  C89137 * C5076 +
              ((C648 * C89 +
                ((C203 - C202) * C263 + (C641 - C640) * C89247) * C90 +
                ((C206 - C207) * C263 + (C642 - C643) * C89247) * C91) *
                   C9228 +
               (C3916 * C89 +
                ((C3436 - C3435) * C263 + (C3914 - C3913) * C89247) * C90 +
                ((C180 * C3352 - C89236 * C3430) * C263 +
                 (C180 * C3833 - C89236 * C3909) * C89247) *
                    C91) *
                   C89217) *
                  C89137 * C5077) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C89236 * C181 - C180 * C106) * C263 +
                 (C89236 * C627 - C180 * C565) * C89247) *
                    C89 +
                ((C194 - C195) * C263 + (C634 - C635) * C89247) * C90 +
                C648 * C91) *
                   C9228 +
               (((C180 * C1724 - C89236 * C1828) * C263 +
                 (C180 * C2330 - C89236 * C2420) * C89247) *
                    C89 +
                ((C1845 - C1846) * C263 + (C2429 - C2430) * C89247) * C90 +
                C3916 * C91) *
                   C89217) *
                  C812 +
              ((((C180 * C819 - C89236 * C923) * C263 +
                 (C180 * C1425 - C89236 * C1515) * C89247) *
                    C89 +
                ((C940 - C941) * C263 + (C1524 - C1525) * C89247) * C90 +
                C3193 * C91) *
                   C9228 +
               (((C89236 * C4211 - C180 * C4097) * C263 +
                 (C89236 * C4873 - C180 * C4767) * C89247) *
                    C89 +
                ((C4220 - C4221) * C263 + (C4878 - C4879) * C89247) * C90 +
                ((C4224 - C4225) * C263 + (C4880 - C4881) * C89247) * C91) *
                   C89217) *
                  C813 +
              ((((C89236 * C926 - C180 * C820) * C263 +
                 (C89236 * C1518 - C180 * C1428) * C89247) *
                    C89 +
                ((C948 - C949) * C263 + (C1528 - C1529) * C89247) * C90 +
                ((C952 - C953) * C263 + (C1530 - C1531) * C89247) * C91) *
                   C9228 +
               (((C180 * C8516 - C89236 * C8600) * C263 +
                 (C180 * C8994 - C89236 * C9074) * C89247) *
                    C89 +
                ((C180 * C8515 - C89236 * C8601) * C263 +
                 (C180 * C8995 - C89236 * C9075) * C89247) *
                    C90 +
                ((C180 * C8514 - C89236 * C8602) * C263 +
                 (C180 * C8996 - C89236 * C9076) * C89247) *
                    C91) *
                   C89217) *
                  C814) *
             C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C89236 * C181 - C180 * C106) * C263 +
            (C89236 * C627 - C180 * C565) * C89247) *
               C89 +
           ((C194 - C195) * C263 + (C634 - C635) * C89247) * C90 + C648 * C91) *
              C10538 +
          (((C180 * C1724 - C89236 * C1828) * C263 +
            (C180 * C2330 - C89236 * C2420) * C89247) *
               C89 +
           ((C1845 - C1846) * C263 + (C2429 - C2430) * C89247) * C90 +
           C3916 * C91) *
              C10539 +
          (((C89236 * C1831 - C180 * C1725) * C263 +
            (C89236 * C2423 - C180 * C2333) * C89247) *
               C89 +
           ((C1853 - C1854) * C263 + (C2433 - C2434) * C89247) * C90 +
           ((C1857 - C1858) * C263 + (C2435 - C2436) * C89247) * C91) *
              C10540 +
          (((C180 * C10544 - C89236 * C10604) * C263 +
            (C180 * C10878 - C89236 * C10934) * C89247) *
               C89 +
           ((C180 * C10543 - C89236 * C10605) * C263 +
            (C180 * C10879 - C89236 * C10935) * C89247) *
               C90 +
           ((C180 * C10542 - C89236 * C10606) * C263 +
            (C180 * C10880 - C89236 * C10936) * C89247) *
               C91) *
              C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
             C13260 * C926 - C13315 * C820) *
                C263 +
            (C13258 * C627 - C13313 * C565 + C13259 * C1515 - C13314 * C1425 +
             C13260 * C1518 - C13315 * C1428) *
                C89247) *
               C89093 * C9228 +
           ((C13313 * C1724 - C13258 * C1828 + C13314 * C4097 - C13259 * C4211 +
             C13315 * C8516 - C13260 * C8600) *
                C263 +
            (C13313 * C2330 - C13258 * C2420 + C13314 * C4767 - C13259 * C4873 +
             C13315 * C8994 - C13260 * C9074) *
                C89247) *
               C89093 * C89217) *
              C89137 * C5075 +
          (((C13313 * C107 - C13258 * C182 + C13314 * C818 - C13259 * C924 +
             C13315 * C821 - C13260 * C927) *
                C263 +
            (C13313 * C566 - C13258 * C628 + C13314 * C1426 - C13259 * C1516 +
             C13315 * C1429 - C13260 * C1519) *
                C89247) *
               C89093 * C9228 +
           ((C13258 * C1829 - C13313 * C1723 + C13259 * C4212 - C13314 * C4098 +
             C13260 * C8601 - C13315 * C8515) *
                C263 +
            (C13258 * C2421 - C13313 * C2331 + C13259 * C4874 - C13314 * C4768 +
             C13260 * C9075 - C13315 * C8995) *
                C89247) *
               C89093 * C89217) *
              C89137 * C5076 +
          (((C13258 * C183 - C13313 * C108 + C13259 * C925 - C13314 * C817 +
             C13260 * C928 - C13315 * C822) *
                C263 +
            (C13258 * C629 - C13313 * C567 + C13259 * C1517 - C13314 * C1427 +
             C13260 * C1520 - C13315 * C1430) *
                C89247) *
               C89093 * C9228 +
           ((C13313 * C1722 - C13258 * C1830 + C13314 * C4099 - C13259 * C4213 +
             C13315 * C8514 - C13260 * C8602) *
                C263 +
            (C13313 * C2332 - C13258 * C2422 + C13314 * C4769 - C13259 * C4875 +
             C13315 * C8996 - C13260 * C9076) *
                C89247) *
               C89093 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
             C13260 * C926 - C13315 * C820) *
                C263 +
            (C13258 * C627 - C13313 * C565 + C13259 * C1515 - C13314 * C1425 +
             C13260 * C1518 - C13315 * C1428) *
                C89247) *
               C89093 * C9228 +
           ((C13313 * C1724 - C13258 * C1828 + C13314 * C4097 - C13259 * C4211 +
             C13315 * C8516 - C13260 * C8600) *
                C263 +
            (C13313 * C2330 - C13258 * C2420 + C13314 * C4767 - C13259 * C4873 +
             C13315 * C8994 - C13260 * C9074) *
                C89247) *
               C89093 * C89217) *
              C812 +
          (((C13313 * C819 - C13258 * C923 + C13314 * C820 - C13259 * C926 +
             C13315 * C5727 - C13260 * C5787) *
                C263 +
            (C13313 * C1425 - C13258 * C1515 + C13314 * C1428 - C13259 * C1518 +
             C13315 * C6061 - C13260 * C6117) *
                C89247) *
               C89093 * C9228 +
           ((C13258 * C4211 - C13313 * C4097 + C13259 * C8600 - C13314 * C8516 +
             C13260 * C16821 - C13315 * C16683) *
                C263 +
            (C13258 * C4873 - C13313 * C4767 + C13259 * C9074 - C13314 * C8994 +
             C13260 * C17471 - C13315 * C17361) *
                C89247) *
               C89093 * C89217) *
              C813 +
          (((C13258 * C926 - C13313 * C820 + C13259 * C5787 - C13314 * C5727 +
             C13260 * C13873 - C13315 * C13743) *
                C263 +
            (C13258 * C1518 - C13313 * C1428 + C13259 * C6117 - C13314 * C6061 +
             C13260 * C14421 - C13315 * C14323) *
                C89247) *
               C89093 * C9228 +
           ((C13313 * C8516 - C13258 * C8600 + C13314 * C16683 -
             C13259 * C16821 + C13315 * C21123 - C13260 * C21209) *
                C263 +
            (C13313 * C8994 - C13258 * C9074 + C13314 * C17361 -
             C13259 * C17471 + C13315 * C21605 - C13260 * C21687) *
                C89247) *
               C89093 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
            C13260 * C926 - C13315 * C820) *
               C263 +
           (C13258 * C627 - C13313 * C565 + C13259 * C1515 - C13314 * C1425 +
            C13260 * C1518 - C13315 * C1428) *
               C89247) *
              C89093 * C10538 +
          ((C13313 * C1724 - C13258 * C1828 + C13314 * C4097 - C13259 * C4211 +
            C13315 * C8516 - C13260 * C8600) *
               C263 +
           (C13313 * C2330 - C13258 * C2420 + C13314 * C4767 - C13259 * C4873 +
            C13315 * C8994 - C13260 * C9074) *
               C89247) *
              C89093 * C10539 +
          ((C13258 * C1831 - C13313 * C1725 + C13259 * C6333 - C13314 * C6249 +
            C13260 * C14683 - C13315 * C14601) *
               C263 +
           (C13258 * C2423 - C13313 * C2333 + C13259 * C6807 - C13314 * C6727 +
            C13260 * C15147 - C13315 * C15069) *
               C89247) *
              C89093 * C10540 +
          ((C13313 * C10544 - C13258 * C10604 + C13314 * C23153 -
            C13259 * C23210 + C13315 * C23152 - C13260 * C23211) *
               C263 +
           (C13313 * C10878 - C13258 * C10934 + C13314 * C23476 -
            C13259 * C23530 + C13315 * C23477 - C13260 * C23531) *
               C89247) *
              C89093 * C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C89236 * C181 - C180 * C106) * C25951 +
            (C89236 * C627 - C180 * C565) * C25848 +
            (C27126 - C27127) * C25952 + (C27696 - C27697) * C25849 +
            C27144 * C25953 + C27705 * C25850) *
               C89093 * C9228 +
           ((C27127 - C27126) * C25951 + (C27697 - C27696) * C25848 +
            (C27131 - C27130) * C25952 + (C27699 - C27698) * C25849 +
            (C27134 - C27135) * C25953 + (C27700 - C27701) * C25850) *
               C89093 * C89217) *
              C89137 * C5075 +
          (((C195 - C194) * C25951 + (C635 - C634) * C25848 +
            (C1845 - C1846) * C25952 + (C2429 - C2430) * C25849 +
            C27138 * C25953 + C27702 * C25850) *
               C89093 * C9228 +
           ((C1846 - C1845) * C25951 + (C2430 - C2429) * C25848 +
            (C1853 - C1854) * C25952 + (C2433 - C2434) * C25849 +
            (C27140 - C27141) * C25953 + (C27703 - C27704) * C25850) *
               C89093 * C89217) *
              C89137 * C5076 +
          ((C210 * C25951 + C644 * C25848 + (C1850 - C1849) * C25952 +
            (C2432 - C2431) * C25849 + (C1857 - C1858) * C25953 +
            (C2435 - C2436) * C25850) *
               C89093 * C9228 +
           (C3433 * C25951 + C3912 * C25848 + (C1858 - C1857) * C25952 +
            (C2436 - C2435) * C25849 +
            (C180 * C10542 - C89236 * C10606) * C25953 +
            (C180 * C10880 - C89236 * C10936) * C25850) *
               C89093 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C89236 * C181 - C180 * C106) * C25951 +
            (C89236 * C627 - C180 * C565) * C25848 +
            (C27126 - C27127) * C25952 + (C27696 - C27697) * C25849 +
            C27144 * C25953 + C27705 * C25850) *
               C89093 * C9228 +
           ((C27127 - C27126) * C25951 + (C27697 - C27696) * C25848 +
            (C27131 - C27130) * C25952 + (C27699 - C27698) * C25849 +
            (C27134 - C27135) * C25953 + (C27700 - C27701) * C25850) *
               C89093 * C89217) *
              C812 +
          (((C180 * C819 - C89236 * C923) * C25951 +
            (C180 * C1425 - C89236 * C1515) * C25848 +
            (C29351 - C29352) * C25952 + (C29991 - C29992) * C25849 +
            C31373 * C25953 + C31855 * C25850) *
               C89093 * C9228 +
           ((C29352 - C29351) * C25951 + (C29992 - C29991) * C25848 +
            (C29356 - C29355) * C25952 + (C29994 - C29993) * C25849 +
            (C31375 - C31376) * C25953 + (C31856 - C31857) * C25850) *
               C89093 * C89217) *
              C813 +
          (((C89236 * C926 - C180 * C820) * C25951 +
            (C89236 * C1518 - C180 * C1428) * C25848 +
            (C33629 - C33630) * C25952 + (C34097 - C34098) * C25849 +
            (C33633 - C33634) * C25953 + (C34099 - C34100) * C25850) *
               C89093 * C9228 +
           ((C33630 - C33629) * C25951 + (C34098 - C34097) * C25848 +
            (C33634 - C33633) * C25952 + (C34100 - C34099) * C25849 +
            (C180 * C23152 - C89236 * C23211) * C25953 +
            (C180 * C23477 - C89236 * C23531) * C25850) *
               C89093 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C89236 * C181 - C180 * C106) * C25951 +
           (C89236 * C627 - C180 * C565) * C25848 + (C27126 - C27127) * C25952 +
           (C27696 - C27697) * C25849 + C27144 * C25953 + C27705 * C25850) *
              C89093 * C10538 +
          ((C27127 - C27126) * C25951 + (C27697 - C27696) * C25848 +
           (C27131 - C27130) * C25952 + (C27699 - C27698) * C25849 +
           C35620 * C25953 + C35958 * C25850) *
              C89093 * C10539 +
          (C27144 * C25951 + C27705 * C25848 + (C27135 - C27134) * C25952 +
           (C27701 - C27700) * C25849 + (C35622 - C35623) * C25953 +
           (C35959 - C35960) * C25850) *
              C89093 * C10540 +
          (C35620 * C25951 + C35958 * C25848 + (C35623 - C35622) * C25952 +
           (C35960 - C35959) * C25849 +
           (C180 * C35556 - C89236 * C35617) * C25953 +
           (C180 * C35901 - C89236 * C35956) * C25850) *
              C89093 * C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q));
    d2eezz[42] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) *
                    C89236 * C89 +
                C735 * C90 + C736 * C91) *
                   C9228 -
               (C2547 * C91 + C2548 * C90 +
                (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
                    C89236 * C89) *
                   C89217) *
                  C89137 * C5075 +
              ((C2548 * C89 + C2547 * C90 + C3999 * C91) * C89217 -
               (C737 * C91 + C736 * C90 + C735 * C89) * C9228) *
                  C89137 * C5076 +
              ((C736 * C89 + C737 * C90 + C738 * C91) * C9228 -
               ((C263 * C3512 - C699 * C3352 - C263 * C3833 + C89247 * C3990) *
                    C89236 * C91 +
                C3999 * C90 + C2547 * C89) *
                   C89217) *
                  C89137 * C5077) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) *
                    C89236 * C89 +
                C735 * C90 + C736 * C91) *
                   C9228 -
               (C2547 * C91 + C2548 * C90 +
                (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
                    C89236 * C89) *
                   C89217) *
                  C812 +
              (((C263 * C4325 - C699 * C4097 - C263 * C4767 + C89247 * C4979) *
                    C89236 * C89 +
                C4998 * C90 + C4999 * C91) *
                   C89217 -
               (C1642 * C91 + C1643 * C90 +
                (C263 * C1029 - C699 * C819 - C263 * C1425 + C89247 * C1607) *
                    C89236 * C89) *
                   C9228) *
                  C813 +
              (((C263 * C1032 - C699 * C820 - C263 * C1428 + C89247 * C1608) *
                    C89236 * C89 +
                C1644 * C90 + C1645 * C91) *
                   C9228 -
               ((C263 * C8682 - C699 * C8514 - C263 * C8996 + C89247 * C9151) *
                    C89236 * C91 +
                (C263 * C8681 - C699 * C8515 - C263 * C8995 + C89247 * C9152) *
                    C89236 * C90 +
                (C263 * C8680 - C699 * C8516 - C263 * C8994 + C89247 * C9153) *
                    C89236 * C89) *
                   C89217) *
                  C814) *
             C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C89236 *
               C89 +
           C735 * C90 + C736 * C91) *
              C10538 -
          (C2547 * C91 + C2548 * C90 +
           (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
               C89236 * C89) *
              C10539 +
          ((C263 * C1937 - C699 * C1725 - C263 * C2333 + C89247 * C2513) *
               C89236 * C89 +
           C2549 * C90 + C2550 * C91) *
              C10540 -
          ((C263 * C10662 - C699 * C10542 - C263 * C10880 + C89247 * C10987) *
               C89236 * C91 +
           (C263 * C10661 - C699 * C10543 - C263 * C10879 + C89247 * C10988) *
               C89236 * C90 +
           (C263 * C10660 - C699 * C10544 - C263 * C10878 + C89247 * C10989) *
               C89236 * C89) *
              C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C13258 +
            C14524 * C13259 + C14525 * C13260) *
               C89093 * C9228 -
           (C17592 * C13260 + C17593 * C13259 +
            (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
                C13258) *
               C89093 * C89217) *
              C89137 * C5075 +
          ((C2544 * C13258 + C4996 * C13259 + C17594 * C13260) * C89093 *
               C89217 -
           (C1640 * C13260 + C1639 * C13259 + C731 * C13258) * C89093 * C9228) *
              C89137 * C5076 +
          ((C732 * C13258 + C1638 * C13259 + C1641 * C13260) * C89093 * C9228 -
           ((C263 * C8682 - C699 * C8514 - C263 * C8996 + C89247 * C9151) *
                C13260 +
            C4997 * C13259 + C2543 * C13258) *
               C89093 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C13258 +
            C14524 * C13259 + C14525 * C13260) *
               C89093 * C9228 -
           (C17592 * C13260 + C17593 * C13259 +
            (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
                C13258) *
               C89093 * C89217) *
              C812 +
          ((C17593 * C13258 + C17592 * C13259 + C21770 * C13260) * C89093 *
               C89217 -
           (C14526 * C13260 + C14525 * C13259 + C14524 * C13258) * C89093 *
               C9228) *
              C813 +
          ((C14525 * C13258 + C14526 * C13259 + C18765 * C13260) * C89093 *
               C9228 -
           ((C263 * C21285 - C699 * C21123 - C263 * C21605 + C89247 * C21762) *
                C13260 +
            C21770 * C13259 + C17592 * C13258) *
               C89093 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C13258 +
           C14524 * C13259 + C14525 * C13260) *
              C89093 * C10538 -
          (C17592 * C13260 + C17593 * C13259 +
           (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
               C13258) *
              C89093 * C10539 +
          ((C263 * C1937 - C699 * C1725 - C263 * C2333 + C89247 * C2513) *
               C13258 +
           C19500 * C13259 + C19501 * C13260) *
              C89093 * C10540 -
          ((C263 * C23265 - C699 * C23152 - C263 * C23477 + C89247 * C23582) *
               C13260 +
           (C263 * C23264 - C699 * C23153 - C263 * C23476 + C89247 * C23583) *
               C13259 +
           (C263 * C10660 - C699 * C10544 - C263 * C10878 + C89247 * C10989) *
               C13258) *
              C89093 * C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C25951 * C264 - C26254 * C106 - C25951 * C565 + C25848 * C700 +
            C25952 * C1934 - C26255 * C1724 - C25952 * C2330 + C25849 * C2512 +
            C25953 * C1937 - C26256 * C1725 - C25953 * C2333 + C25850 * C2513) *
               C89236 * C89093 * C9228 -
           (C25953 * C10660 - C26256 * C10544 - C25953 * C10878 +
            C25850 * C10989 + C25952 * C1937 - C26255 * C1725 - C25952 * C2333 +
            C25849 * C2513 + C25951 * C1934 - C26254 * C1724 - C25951 * C2330 +
            C25848 * C2512) *
               C89236 * C89093 * C89217) *
              C89137 * C5075 +
          ((C25951 * C1935 - C26254 * C1723 - C25951 * C2331 + C25848 * C2511 +
            C25952 * C1938 - C26255 * C1726 - C25952 * C2334 + C25849 * C2514 +
            C25953 * C10661 - C26256 * C10543 - C25953 * C10879 +
            C25850 * C10988) *
               C89236 * C89093 * C89217 -
           (C25953 * C1938 - C26256 * C1726 - C25953 * C2334 + C25850 * C2514 +
            C25952 * C1935 - C26255 * C1723 - C25952 * C2331 + C25849 * C2511 +
            C25951 * C265 - C26254 * C107 - C25951 * C566 + C25848 * C701) *
               C89236 * C89093 * C9228) *
              C89137 * C5076 +
          ((C25951 * C266 - C26254 * C108 - C25951 * C567 + C25848 * C702 +
            C25952 * C1936 - C26255 * C1722 - C25952 * C2332 + C25849 * C2510 +
            C25953 * C1939 - C26256 * C1727 - C25953 * C2335 + C25850 * C2515) *
               C89236 * C89093 * C9228 -
           (C25953 * C10662 - C26256 * C10542 - C25953 * C10880 +
            C25850 * C10987 + C25952 * C1939 - C26255 * C1727 - C25952 * C2335 +
            C25849 * C2515 + C25951 * C1936 - C26254 * C1722 - C25951 * C2332 +
            C25848 * C2510) *
               C89236 * C89093 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C25951 * C264 - C26254 * C106 - C25951 * C565 + C25848 * C700 +
            C25952 * C1934 - C26255 * C1724 - C25952 * C2330 + C25849 * C2512 +
            C25953 * C1937 - C26256 * C1725 - C25953 * C2333 + C25850 * C2513) *
               C89236 * C89093 * C9228 -
           (C25953 * C10660 - C26256 * C10544 - C25953 * C10878 +
            C25850 * C10989 + C25952 * C1937 - C26255 * C1725 - C25952 * C2333 +
            C25849 * C2513 + C25951 * C1934 - C26254 * C1724 - C25951 * C2330 +
            C25848 * C2512) *
               C89236 * C89093 * C89217) *
              C812 +
          ((C25951 * C4325 - C26254 * C4097 - C25951 * C4767 + C25848 * C4979 +
            C25952 * C6413 - C26255 * C6249 - C25952 * C6727 + C25849 * C6886 +
            C25953 * C23264 - C26256 * C23153 - C25953 * C23476 +
            C25850 * C23583) *
               C89236 * C89093 * C89217 -
           (C25953 * C6413 - C26256 * C6249 - C25953 * C6727 + C25850 * C6886 +
            C25952 * C4325 - C26255 * C4097 - C25952 * C4767 + C25849 * C4979 +
            C25951 * C1029 - C26254 * C819 - C25951 * C1425 + C25848 * C1607) *
               C89236 * C89093 * C9228) *
              C813 +
          ((C25951 * C1032 - C26254 * C820 - C25951 * C1428 + C25848 * C1608 +
            C25952 * C8680 - C26255 * C8516 - C25952 * C8994 + C25849 * C9153 +
            C25953 * C14761 - C26256 * C14601 - C25953 * C15069 +
            C25850 * C15223) *
               C89236 * C89093 * C9228 -
           (C25953 * C23265 - C26256 * C23152 - C25953 * C23477 +
            C25850 * C23582 + C25952 * C14761 - C26255 * C14601 -
            C25952 * C15069 + C25849 * C15223 + C25951 * C8680 -
            C26254 * C8516 - C25951 * C8994 + C25848 * C9153) *
               C89236 * C89093 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((C25951 * C264 - C26254 * C106 - C25951 * C565 + C25848 * C700 +
           C25952 * C1934 - C26255 * C1724 - C25952 * C2330 + C25849 * C2512 +
           C25953 * C1937 - C26256 * C1725 - C25953 * C2333 + C25850 * C2513) *
              C89236 * C89093 * C10538 -
          (C25953 * C10660 - C26256 * C10544 - C25953 * C10878 +
           C25850 * C10989 + C25952 * C1937 - C26255 * C1725 - C25952 * C2333 +
           C25849 * C2513 + C25951 * C1934 - C26254 * C1724 - C25951 * C2330 +
           C25848 * C2512) *
              C89236 * C89093 * C10539 +
          (C25951 * C1937 - C26254 * C1725 - C25951 * C2333 + C25848 * C2513 +
           C25952 * C10660 - C26255 * C10544 - C25952 * C10878 +
           C25849 * C10989 + C25953 * C27225 - C26256 * C26997 -
           C25953 * C27601 + C25850 * C27779) *
              C89236 * C89093 * C10540 -
          (C25953 * C35678 - C26256 * C35556 - C25953 * C35901 +
           C25850 * C36010 + C25952 * C27225 - C26255 * C26997 -
           C25952 * C27601 + C25849 * C27779 + C25951 * C10660 -
           C26254 * C10544 - C25951 * C10878 + C25848 * C10989) *
              C89236 * C89093 * C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q));
    d2eexx[43] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                C89247 * C13258 +
            C13794 * C13259 + C13795 * C13260) *
               C89337 -
           (C16720 * C13260 + C16721 * C13259 +
            (C13261 * C1734 - C13262 * C1724 - C13261 * C1735 +
             C89093 * C1748) *
                C89247 * C13258) *
               C89338 +
           ((C13261 * C1736 - C13262 * C1725 - C13261 * C1737 +
             C89093 * C1749) *
                C89247 * C13258 +
            C18858 * C13259 + C18859 * C13260) *
               C11948) *
              C89137 * C89299 +
          (((C13261 * C1732 - C13262 * C1723 - C13261 * C1733 +
             C89093 * C1747) *
                C89247 * C13258 +
            C16722 * C13259 + C16723 * C13260) *
               C89338 -
           (C13798 * C13260 + C13797 * C13259 +
            (C13261 * C114 - C13262 * C107 - C13261 * C115 + C89093 * C125) *
                C89247 * C13258) *
               C89337 -
           ((C13261 * C14605 - C13262 * C14602 - C13261 * C14606 +
             C89093 * C14608) *
                C89247 * C13260 +
            (C13261 * C6252 - C13262 * C6248 - C13261 * C6253 +
             C89093 * C6257) *
                C89247 * C13259 +
            (C13261 * C1738 - C13262 * C1726 - C13261 * C1739 +
             C89093 * C1750) *
                C89247 * C13258) *
               C11948) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C112 - C101 * C106 - C100 * C113 + C89 * C124 + C102 * C114 -
            C103 * C107 - C102 * C115 + C90 * C125 + C104 * C116 - C105 * C108 -
            C104 * C117 + C91 * C126) *
               C89247 * C89236 * C89337 -
           (C104 * C1730 - C105 * C1722 - C104 * C1731 + C91 * C1746 +
            C102 * C1732 - C103 * C1723 - C102 * C1733 + C90 * C1747 +
            C100 * C1734 - C101 * C1724 - C100 * C1735 + C89 * C1748) *
               C89247 * C89236 * C89338 +
           (C100 * C1736 - C101 * C1725 - C100 * C1737 + C89 * C1749 +
            C102 * C1738 - C103 * C1726 - C102 * C1739 + C90 * C1750 +
            C104 * C1740 - C105 * C1727 - C104 * C1741 + C91 * C1751) *
               C89247 * C89236 * C11948) *
              C89137 * C89299 +
          ((C100 * C1732 - C101 * C1723 - C100 * C1733 + C89 * C1747 +
            C102 * C1730 - C103 * C1722 - C102 * C1731 + C90 * C1746 +
            C104 * C1742 - C105 * C1728 - C104 * C1743 + C91 * C1752) *
               C89247 * C89236 * C89338 -
           (C104 * C118 - C105 * C109 - C104 * C119 + C91 * C127 + C102 * C116 -
            C103 * C108 - C102 * C117 + C90 * C126 + C100 * C114 - C101 * C107 -
            C100 * C115 + C89 * C125) *
               C89247 * C89236 * C89337 -
           (C104 * C1744 - C105 * C1729 - C104 * C1745 + C91 * C1753 +
            C102 * C1740 - C103 * C1727 - C102 * C1741 + C90 * C1751 +
            C100 * C1738 - C101 * C1726 - C100 * C1739 + C89 * C1750) *
               C89247 * C89236 * C11948) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                C25848 +
            C27042 * C25849 + C27043 * C25850) *
               C89236 * C89337 -
           (C27044 * C25850 + C27043 * C25849 + C27042 * C25848) * C89236 *
               C89338 +
           (C27043 * C25848 + C27044 * C25849 + C35567 * C25850) * C89236 *
               C11948) *
              C89137 * C89299 +
          ((C27045 * C25848 + C27046 * C25849 + C27047 * C25850) * C89236 *
               C89338 -
           (C27046 * C25850 + C27045 * C25849 +
            (C13261 * C114 - C13262 * C107 - C13261 * C115 + C89093 * C125) *
                C25848) *
               C89236 * C89337 -
           ((C13261 * C27001 - C13262 * C26998 - C13261 * C27002 +
             C89093 * C27004) *
                C25850 +
            C27047 * C25849 + C27046 * C25848) *
               C89236 * C11948) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q));
    d2eexy[43] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
             C13260 * C926 - C13315 * C820) *
                C13261 +
            (C13258 * C187 - C13313 * C113 + C13259 * C931 - C13314 * C830 +
             C13260 * C934 - C13315 * C832) *
                C89093) *
               C89247 * C89337 +
           ((C13313 * C1724 - C13258 * C1828 + C13314 * C4097 - C13259 * C4211 +
             C13315 * C8516 - C13260 * C8600) *
                C13261 +
            (C13313 * C1735 - C13258 * C1836 + C13314 * C4102 - C13259 * C4215 +
             C13315 * C8522 - C13260 * C8603) *
                C89093) *
               C89247 * C89338 +
           ((C13258 * C1831 - C13313 * C1725 + C13259 * C6333 - C13314 * C6249 +
             C13260 * C14683 - C13315 * C14601) *
                C13261 +
            (C13258 * C1839 - C13313 * C1737 + C13259 * C6336 - C13314 * C6255 +
             C13260 * C14685 - C13315 * C14604) *
                C89093) *
               C89247 * C11948) *
              C89137 * C89299 +
          (((C13313 * C107 - C13258 * C182 + C13314 * C818 - C13259 * C924 +
             C13315 * C821 - C13260 * C927) *
                C13261 +
            (C13313 * C115 - C13258 * C188 + C13314 * C828 - C13259 * C932 +
             C13315 * C834 - C13260 * C935) *
                C89093) *
               C89247 * C89337 +
           ((C13258 * C1829 - C13313 * C1723 + C13259 * C4212 - C13314 * C4098 +
             C13260 * C8601 - C13315 * C8515) *
                C13261 +
            (C13258 * C1837 - C13313 * C1733 + C13259 * C4216 - C13314 * C4104 +
             C13260 * C8604 - C13315 * C8520) *
                C89093) *
               C89247 * C89338 +
           ((C13313 * C1726 - C13258 * C1832 + C13314 * C6248 - C13259 * C6334 +
             C13315 * C14602 - C13260 * C14684) *
                C13261 +
            (C13313 * C1739 - C13258 * C1840 + C13314 * C6253 - C13259 * C6337 +
             C13315 * C14606 - C13260 * C14686) *
                C89093) *
               C89247 * C11948) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89236 * C181 - C180 * C106) * C100 +
            (C89236 * C187 - C180 * C113) * C89 + (C194 - C195) * C102 +
            (C196 - C197) * C90 + C210 * C104 + C211 * C91) *
               C89247 * C89337 +
           ((C180 * C1724 - C89236 * C1828) * C100 +
            (C180 * C1735 - C89236 * C1836) * C89 + (C1845 - C1846) * C102 +
            (C1847 - C1848) * C90 + C3433 * C104 + C3434 * C91) *
               C89247 * C89338 +
           ((C89236 * C1831 - C180 * C1725) * C100 +
            (C89236 * C1839 - C180 * C1737) * C89 + (C1853 - C1854) * C102 +
            (C1855 - C1856) * C90 + (C1857 - C1858) * C104 +
            (C1859 - C1860) * C91) *
               C89247 * C11948) *
              C89137 * C89299 +
          (((C195 - C194) * C100 + (C197 - C196) * C89 + (C199 - C198) * C102 +
            (C201 - C200) * C90 + C212 * C104 + C213 * C91) *
               C89247 * C89337 +
           ((C1846 - C1845) * C100 + (C1848 - C1847) * C89 +
            (C1850 - C1849) * C102 + (C1852 - C1851) * C90 +
            (C3435 - C3436) * C104 + (C3437 - C3438) * C91) *
               C89247 * C89338 +
           ((C1854 - C1853) * C100 + (C1856 - C1855) * C89 +
            (C1858 - C1857) * C102 + (C1860 - C1859) * C90 +
            (C180 * C1729 - C89236 * C1835) * C104 +
            (C180 * C1745 - C89236 * C1843) * C91) *
               C89247 * C11948) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C13261 +
             (C89236 * C187 - C180 * C113) * C89093) *
                C25848 +
            ((C27126 - C27127) * C13261 + (C27128 - C27129) * C89093) * C25849 +
            C27151 * C25850) *
               C89337 +
           (((C27127 - C27126) * C13261 + (C27129 - C27128) * C89093) * C25848 +
            ((C27131 - C27130) * C13261 + (C27133 - C27132) * C89093) * C25849 +
            C35628 * C25850) *
               C89338 +
           (C27151 * C25848 +
            ((C27135 - C27134) * C13261 + (C27137 - C27136) * C89093) * C25849 +
            ((C35622 - C35623) * C13261 + (C35624 - C35625) * C89093) *
                C25850) *
               C11948) *
              C89137 * C89299 +
          ((((C195 - C194) * C13261 + (C197 - C196) * C89093) * C25848 +
            ((C1845 - C1846) * C13261 + (C1847 - C1848) * C89093) * C25849 +
            C27150 * C25850) *
               C89337 +
           (((C1846 - C1845) * C13261 + (C1848 - C1847) * C89093) * C25848 +
            ((C1853 - C1854) * C13261 + (C1855 - C1856) * C89093) * C25849 +
            ((C27140 - C27141) * C13261 + (C27142 - C27143) * C89093) *
                C25850) *
               C89338 +
           (C27150 * C25848 +
            ((C27141 - C27140) * C13261 + (C27143 - C27142) * C89093) * C25849 +
            ((C180 * C26998 - C89236 * C27122) * C13261 +
             (C180 * C27002 - C89236 * C27124) * C89093) *
                C25850) *
               C11948) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q));
    d2eexz[43] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C13261 +
             (C89247 * C270 - C263 * C113) * C89093) *
                C13258 +
            ((C13956 - C13957) * C13261 + (C13958 - C13959) * C89093) * C13259 +
            C13981 * C13260) *
               C89337 +
           (((C263 * C1724 - C89247 * C1934) * C13261 +
             (C263 * C1735 - C89247 * C1942) * C89093) *
                C13258 +
            ((C16928 - C16929) * C13261 + (C16930 - C16931) * C89093) * C13259 +
            C21296 * C13260) *
               C89338 +
           (((C89247 * C1937 - C263 * C1725) * C13261 +
             (C89247 * C1945 - C263 * C1737) * C89093) *
                C13258 +
            ((C19012 - C19013) * C13261 + (C19014 - C19015) * C89093) * C13259 +
            ((C19016 - C19017) * C13261 + (C19018 - C19019) * C89093) *
                C13260) *
               C11948) *
              C89137 * C89299 +
          ((((C278 - C277) * C13261 + (C280 - C279) * C89093) * C13258 +
            ((C1046 - C1047) * C13261 + (C1048 - C1049) * C89093) * C13259 +
            C13980 * C13260) *
               C89337 +
           (((C1952 - C1951) * C13261 + (C1954 - C1953) * C89093) * C13258 +
            ((C4334 - C4335) * C13261 + (C4336 - C4337) * C89093) * C13259 +
            ((C16936 - C16937) * C13261 + (C16938 - C16939) * C89093) *
                C13260) *
               C89338 +
           (((C1960 - C1959) * C13261 + (C1962 - C1961) * C89093) * C13258 +
            ((C263 * C6248 - C89247 * C6414) * C13261 +
             (C263 * C6253 - C89247 * C6417) * C89093) *
                C13259 +
            ((C263 * C14602 - C89247 * C14762) * C13261 +
             (C263 * C14606 - C89247 * C14764) * C89093) *
                C13260) *
               C11948) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C100 +
            (C89247 * C270 - C263 * C113) * C89 + (C277 - C278) * C102 +
            (C279 - C280) * C90 + C293 * C104 + C294 * C91) *
               C89236 * C89337 +
           ((C263 * C1724 - C89247 * C1934) * C100 +
            (C263 * C1735 - C89247 * C1942) * C89 + (C1951 - C1952) * C102 +
            (C1953 - C1954) * C90 + C3515 * C104 + C3516 * C91) *
               C89236 * C89338 +
           ((C89247 * C1937 - C263 * C1725) * C100 +
            (C89247 * C1945 - C263 * C1737) * C89 + (C1959 - C1960) * C102 +
            (C1961 - C1962) * C90 + (C1963 - C1964) * C104 +
            (C1965 - C1966) * C91) *
               C89236 * C11948) *
              C89137 * C89299 +
          (((C278 - C277) * C100 + (C280 - C279) * C89 + (C282 - C281) * C102 +
            (C284 - C283) * C90 + C295 * C104 + C296 * C91) *
               C89236 * C89337 +
           ((C1952 - C1951) * C100 + (C1954 - C1953) * C89 +
            (C1956 - C1955) * C102 + (C1958 - C1957) * C90 +
            (C3517 - C3518) * C104 + (C3519 - C3520) * C91) *
               C89236 * C89338 +
           ((C1960 - C1959) * C100 + (C1962 - C1961) * C89 +
            (C1964 - C1963) * C102 + (C1966 - C1965) * C90 +
            (C263 * C1729 - C89247 * C1941) * C104 +
            (C263 * C1745 - C89247 * C1949) * C91) *
               C89236 * C11948) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C25848 * C264 - C25951 * C106 + C25849 * C1934 - C25952 * C1724 +
             C25850 * C1937 - C25953 * C1725) *
                C13261 +
            (C25848 * C270 - C25951 * C113 + C25849 * C1942 - C25952 * C1735 +
             C25850 * C1945 - C25953 * C1737) *
                C89093) *
               C89236 * C89337 +
           ((C25951 * C1724 - C25848 * C1934 + C25952 * C1725 - C25849 * C1937 +
             C25953 * C10544 - C25850 * C10660) *
                C13261 +
            (C25951 * C1735 - C25848 * C1942 + C25952 * C1737 - C25849 * C1945 +
             C25953 * C10550 - C25850 * C10663) *
                C89093) *
               C89236 * C89338 +
           ((C25848 * C1937 - C25951 * C1725 + C25849 * C10660 -
             C25952 * C10544 + C25850 * C27225 - C25953 * C26997) *
                C13261 +
            (C25848 * C1945 - C25951 * C1737 + C25849 * C10663 -
             C25952 * C10550 + C25850 * C27227 - C25953 * C27000) *
                C89093) *
               C89236 * C11948) *
              C89137 * C89299 +
          (((C25951 * C107 - C25848 * C265 + C25952 * C1723 - C25849 * C1935 +
             C25953 * C1726 - C25850 * C1938) *
                C13261 +
            (C25951 * C115 - C25848 * C271 + C25952 * C1733 - C25849 * C1943 +
             C25953 * C1739 - C25850 * C1946) *
                C89093) *
               C89236 * C89337 +
           ((C25848 * C1935 - C25951 * C1723 + C25849 * C1938 - C25952 * C1726 +
             C25850 * C10661 - C25953 * C10543) *
                C13261 +
            (C25848 * C1943 - C25951 * C1733 + C25849 * C1946 - C25952 * C1739 +
             C25850 * C10664 - C25953 * C10548) *
                C89093) *
               C89236 * C89338 +
           ((C25951 * C1726 - C25848 * C1938 + C25952 * C10543 -
             C25849 * C10661 + C25953 * C26998 - C25850 * C27226) *
                C13261 +
            (C25951 * C1739 - C25848 * C1946 + C25952 * C10548 -
             C25849 * C10664 + C25953 * C27002 - C25850 * C27228) *
                C89093) *
               C89236 * C11948) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[43] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89093 * C112 - C13261 * C106) * C13313 +
            (C89093 * C352 - C13261 * C346) * C13258 +
            (C14060 - C14061) * C13314 + (C14062 - C14063) * C13259 +
            C14084 * C13315 + C14085 * C13260) *
               C89247 * C89337 +
           ((C13261 * C1724 - C89093 * C1734) * C13313 +
            (C13261 * C2040 - C89093 * C2048) * C13258 +
            (C17042 - C17043) * C13314 + (C17044 - C17045) * C13259 +
            C21373 * C13315 + C21374 * C13260) *
               C89247 * C89338 +
           ((C89093 * C1736 - C13261 * C1725) * C13313 +
            (C89093 * C2051 - C13261 * C2043) * C13258 +
            (C19096 - C19097) * C13314 + (C19098 - C19099) * C13259 +
            (C19100 - C19101) * C13315 + (C19102 - C19103) * C13260) *
               C89247 * C11948) *
              C89137 * C89299 +
          (((C13261 * C107 - C89093 * C114) * C13313 +
            (C13261 * C347 - C89093 * C353) * C13258 +
            (C14072 - C14073) * C13314 + (C14074 - C14075) * C13259 +
            C14086 * C13315 + C14087 * C13260) *
               C89247 * C89337 +
           ((C89093 * C1732 - C13261 * C1723) * C13313 +
            (C89093 * C2049 - C13261 * C2041) * C13258 +
            (C17050 - C17051) * C13314 + (C17052 - C17053) * C13259 +
            (C17054 - C17055) * C13315 + (C17056 - C17057) * C13260) *
               C89247 * C89338 +
           ((C13261 * C1726 - C89093 * C1738) * C13313 +
            (C13261 * C2044 - C89093 * C2052) * C13258 +
            (C13261 * C6248 - C89093 * C6252) * C13314 +
            (C13261 * C6494 - C89093 * C6497) * C13259 +
            (C13261 * C14602 - C89093 * C14605) * C13315 +
            (C13261 * C14840 - C89093 * C14842) * C13260) *
               C89247 * C11948) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 + C91 * C116 -
             C104 * C108) *
                C180 +
            (C89 * C352 - C100 * C346 + C90 * C353 - C102 * C347 + C91 * C354 -
             C104 * C348) *
                C89236) *
               C89247 * C89337 +
           ((C100 * C1724 - C89 * C1734 + C102 * C1723 - C90 * C1732 +
             C104 * C1722 - C91 * C1730) *
                C180 +
            (C100 * C2040 - C89 * C2048 + C102 * C2041 - C90 * C2049 +
             C104 * C2042 - C91 * C2050) *
                C89236) *
               C89247 * C89338 +
           ((C89 * C1736 - C100 * C1725 + C90 * C1738 - C102 * C1726 +
             C91 * C1740 - C104 * C1727) *
                C180 +
            (C89 * C2051 - C100 * C2043 + C90 * C2052 - C102 * C2044 +
             C91 * C2053 - C104 * C2045) *
                C89236) *
               C89247 * C11948) *
              C89137 * C89299 +
          (((C100 * C107 - C89 * C114 + C102 * C108 - C90 * C116 + C104 * C109 -
             C91 * C118) *
                C180 +
            (C100 * C347 - C89 * C353 + C102 * C348 - C90 * C354 + C104 * C349 -
             C91 * C355) *
                C89236) *
               C89247 * C89337 +
           ((C89 * C1732 - C100 * C1723 + C90 * C1730 - C102 * C1722 +
             C91 * C1742 - C104 * C1728) *
                C180 +
            (C89 * C2049 - C100 * C2041 + C90 * C2050 - C102 * C2042 +
             C91 * C2054 - C104 * C2046) *
                C89236) *
               C89247 * C89338 +
           ((C100 * C1726 - C89 * C1738 + C102 * C1727 - C90 * C1740 +
             C104 * C1729 - C91 * C1744) *
                C180 +
            (C100 * C2044 - C89 * C2052 + C102 * C2045 - C90 * C2053 +
             C104 * C2047 - C91 * C2055) *
                C89236) *
               C89247 * C11948) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C180 +
             (C89093 * C352 - C13261 * C346) * C89236) *
                C25848 +
            ((C27308 - C27309) * C180 + (C27310 - C27311) * C89236) * C25849 +
            C27340 * C25850) *
               C89337 +
           (((C27309 - C27308) * C180 + (C27311 - C27310) * C89236) * C25848 +
            ((C27313 - C27312) * C180 + (C27315 - C27314) * C89236) * C25849 +
            C35741 * C25850) *
               C89338 +
           (C27340 * C25848 +
            ((C27317 - C27316) * C180 + (C27319 - C27318) * C89236) * C25849 +
            ((C35735 - C35736) * C180 + (C35737 - C35738) * C89236) * C25850) *
               C11948) *
              C89137 * C89299 +
          ((((C13261 * C107 - C89093 * C114) * C180 +
             (C13261 * C347 - C89093 * C353) * C89236) *
                C25848 +
            ((C27320 - C27321) * C180 + (C27322 - C27323) * C89236) * C25849 +
            C27341 * C25850) *
               C89337 +
           (((C27321 - C27320) * C180 + (C27323 - C27322) * C89236) * C25848 +
            ((C27325 - C27324) * C180 + (C27327 - C27326) * C89236) * C25849 +
            ((C27328 - C27329) * C180 + (C27330 - C27331) * C89236) * C25850) *
               C89338 +
           (C27341 * C25848 +
            ((C27329 - C27328) * C180 + (C27331 - C27330) * C89236) * C25849 +
            ((C13261 * C26998 - C89093 * C27001) * C180 +
             (C13261 * C27304 - C89093 * C27306) * C89236) *
                C25850) *
               C11948) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[43] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13313 * C181 - C13466 * C106 - C13313 * C346 + C13258 * C409 +
            C13314 * C923 - C13467 * C819 - C13314 * C1135 + C13259 * C1227 +
            C13315 * C926 - C13468 * C820 - C13315 * C1138 + C13260 * C1228) *
               C89093 * C89247 * C89337 -
           (C13315 * C8600 - C13468 * C8516 - C13315 * C8760 + C13260 * C8842 +
            C13314 * C4211 - C13467 * C4097 - C13314 * C4439 + C13259 * C4545 +
            C13313 * C1828 - C13466 * C1724 - C13313 * C2040 + C13258 * C2132) *
               C89093 * C89247 * C89338 +
           (C13313 * C1831 - C13466 * C1725 - C13313 * C2043 + C13258 * C2133 +
            C13314 * C6333 - C13467 * C6249 - C13314 * C6493 + C13259 * C6575 +
            C13315 * C14683 - C13468 * C14601 - C13315 * C14839 +
            C13260 * C14917) *
               C89093 * C89247 * C11948) *
              C89137 * C89299 +
          ((C13313 * C1829 - C13466 * C1723 - C13313 * C2041 + C13258 * C2131 +
            C13314 * C4212 - C13467 * C4098 - C13314 * C4440 + C13259 * C4546 +
            C13315 * C8601 - C13468 * C8515 - C13315 * C8761 + C13260 * C8841) *
               C89093 * C89247 * C89338 -
           (C13315 * C927 - C13468 * C821 - C13315 * C1139 + C13260 * C1229 +
            C13314 * C924 - C13467 * C818 - C13314 * C1136 + C13259 * C1226 +
            C13313 * C182 - C13466 * C107 - C13313 * C347 + C13258 * C410) *
               C89093 * C89247 * C89337 -
           (C13315 * C14684 - C13468 * C14602 - C13315 * C14840 +
            C13260 * C14918 + C13314 * C6334 - C13467 * C6248 - C13314 * C6494 +
            C13259 * C6574 + C13313 * C1832 - C13466 * C1726 - C13313 * C2044 +
            C13258 * C2134) *
               C89093 * C89247 * C11948) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C89 +
            C440 * C90 + C441 * C91) *
               C89247 * C89337 -
           (C2163 * C91 + C2164 * C90 +
            (C180 * C1828 - C408 * C1724 - C180 * C2040 + C89236 * C2132) *
                C89) *
               C89247 * C89338 +
           ((C180 * C1831 - C408 * C1725 - C180 * C2043 + C89236 * C2133) *
                C89 +
            C2165 * C90 + C2166 * C91) *
               C89247 * C11948) *
              C89137 * C89299 +
          ((C2164 * C89 + C2163 * C90 + C3678 * C91) * C89247 * C89338 -
           (C442 * C91 + C441 * C90 + C440 * C89) * C89247 * C89337 -
           ((C180 * C1835 - C408 * C1729 - C180 * C2047 + C89236 * C2137) *
                C91 +
            C2166 * C90 + C2165 * C89) *
               C89247 * C11948) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C89093 *
                C25848 +
            C27448 * C25849 + C27449 * C25850) *
               C89337 -
           (C27450 * C25850 + C27449 * C25849 + C27448 * C25848) * C89338 +
           (C27449 * C25848 + C27450 * C25849 + C35800 * C25850) * C11948) *
              C89137 * C89299 +
          ((C27430 * C25848 + C27431 * C25849 + C27451 * C25850) * C89338 -
           (C27431 * C25850 + C27430 * C25849 + C440 * C89093 * C25848) *
               C89337 -
           ((C180 * C27122 - C408 * C26998 - C180 * C27304 + C89236 * C27416) *
                C89093 * C25850 +
            C27451 * C25849 + C27431 * C25848) *
               C11948) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[43] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C13313 +
            (C89247 * C493 - C263 * C346) * C13258 +
            (C13956 - C13957) * C13314 + (C14240 - C14241) * C13259 +
            C13974 * C13315 + C14249 * C13260) *
               C89093 * C89337 +
           ((C263 * C1724 - C89247 * C1934) * C13313 +
            (C263 * C2040 - C89247 * C2240) * C13258 +
            (C16928 - C16929) * C13314 + (C17258 - C17259) * C13259 +
            C21288 * C13315 + C21529 * C13260) *
               C89093 * C89338 +
           ((C89247 * C1937 - C263 * C1725) * C13313 +
            (C89247 * C2243 - C263 * C2043) * C13258 +
            (C19012 - C19013) * C13314 + (C19254 - C19255) * C13259 +
            (C19016 - C19017) * C13315 + (C19256 - C19257) * C13260) *
               C89093 * C11948) *
              C89137 * C89299 +
          (((C278 - C277) * C13313 + (C501 - C500) * C13258 +
            (C1046 - C1047) * C13314 + (C1344 - C1345) * C13259 +
            C13968 * C13315 + C14246 * C13260) *
               C89093 * C89337 +
           ((C1952 - C1951) * C13313 + (C2250 - C2249) * C13258 +
            (C4334 - C4335) * C13314 + (C4666 - C4667) * C13259 +
            (C16936 - C16937) * C13315 + (C17262 - C17263) * C13260) *
               C89093 * C89338 +
           ((C1960 - C1959) * C13313 + (C2254 - C2253) * C13258 +
            (C263 * C6248 - C89247 * C6414) * C13314 +
            (C263 * C6494 - C89247 * C6651) * C13259 +
            (C263 * C14602 - C89247 * C14762) * C13315 +
            (C263 * C14840 - C89247 * C14994) * C13260) *
               C89093 * C11948) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C180 +
             (C89247 * C493 - C263 * C346) * C89236) *
                C89 +
            ((C277 - C278) * C180 + (C500 - C501) * C89236) * C90 +
            C514 * C91) *
               C89337 +
           (((C263 * C1724 - C89247 * C1934) * C180 +
             (C263 * C2040 - C89247 * C2240) * C89236) *
                C89 +
            ((C1951 - C1952) * C180 + (C2249 - C2250) * C89236) * C90 +
            C3759 * C91) *
               C89338 +
           (((C89247 * C1937 - C263 * C1725) * C180 +
             (C89247 * C2243 - C263 * C2043) * C89236) *
                C89 +
            ((C1959 - C1960) * C180 + (C2253 - C2254) * C89236) * C90 +
            ((C1963 - C1964) * C180 + (C2255 - C2256) * C89236) * C91) *
               C11948) *
              C89137 * C89299 +
          ((((C278 - C277) * C180 + (C501 - C500) * C89236) * C89 +
            ((C282 - C281) * C180 + (C504 - C503) * C89236) * C90 +
            C515 * C91) *
               C89337 +
           (((C1952 - C1951) * C180 + (C2250 - C2249) * C89236) * C89 +
            ((C1956 - C1955) * C180 + (C2252 - C2251) * C89236) * C90 +
            ((C3517 - C3518) * C180 + (C3756 - C3757) * C89236) * C91) *
               C89338 +
           (((C1960 - C1959) * C180 + (C2254 - C2253) * C89236) * C89 +
            ((C1964 - C1963) * C180 + (C2256 - C2255) * C89236) * C90 +
            ((C263 * C1729 - C89247 * C1941) * C180 +
             (C263 * C2047 - C89247 * C2247) * C89236) *
                C91) *
               C11948) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C25848 * C264 - C25951 * C106 + C25849 * C1934 - C25952 * C1724 +
             C25850 * C1937 - C25953 * C1725) *
                C180 +
            (C25848 * C493 - C25951 * C346 + C25849 * C2240 - C25952 * C2040 +
             C25850 * C2243 - C25953 * C2043) *
                C89236) *
               C89093 * C89337 +
           ((C25951 * C1724 - C25848 * C1934 + C25952 * C1725 - C25849 * C1937 +
             C25953 * C10544 - C25850 * C10660) *
                C180 +
            (C25951 * C2040 - C25848 * C2240 + C25952 * C2043 - C25849 * C2243 +
             C25953 * C10716 - C25850 * C10825) *
                C89236) *
               C89093 * C89338 +
           ((C25848 * C1937 - C25951 * C1725 + C25849 * C10660 -
             C25952 * C10544 + C25850 * C27225 - C25953 * C26997) *
                C180 +
            (C25848 * C2243 - C25951 * C2043 + C25849 * C10825 -
             C25952 * C10716 + C25850 * C27525 - C25953 * C27303) *
                C89236) *
               C89093 * C11948) *
              C89137 * C89299 +
          (((C25951 * C107 - C25848 * C265 + C25952 * C1723 - C25849 * C1935 +
             C25953 * C1726 - C25850 * C1938) *
                C180 +
            (C25951 * C347 - C25848 * C494 + C25952 * C2041 - C25849 * C2241 +
             C25953 * C2044 - C25850 * C2244) *
                C89236) *
               C89093 * C89337 +
           ((C25848 * C1935 - C25951 * C1723 + C25849 * C1938 - C25952 * C1726 +
             C25850 * C10661 - C25953 * C10543) *
                C180 +
            (C25848 * C2241 - C25951 * C2041 + C25849 * C2244 - C25952 * C2044 +
             C25850 * C10826 - C25953 * C10717) *
                C89236) *
               C89093 * C89338 +
           ((C25951 * C1726 - C25848 * C1938 + C25952 * C10543 -
             C25849 * C10661 + C25953 * C26998 - C25850 * C27226) *
                C180 +
            (C25951 * C2044 - C25848 * C2244 + C25952 * C10717 -
             C25849 * C10826 + C25953 * C27304 - C25850 * C27526) *
                C89236) *
               C89093 * C11948) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q));
    d2eezx[43] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C263 +
             (C89093 * C571 - C13261 * C565) * C89247) *
                C13258 +
            ((C14060 - C14061) * C263 + (C14328 - C14329) * C89247) * C13259 +
            C14346 * C13260) *
               C89337 +
           (((C13261 * C1724 - C89093 * C1734) * C263 +
             (C13261 * C2330 - C89093 * C2338) * C89247) *
                C13258 +
            ((C17042 - C17043) * C263 + (C17366 - C17367) * C89247) * C13259 +
            C21613 * C13260) *
               C89338 +
           (((C89093 * C1736 - C13261 * C1725) * C263 +
             (C89093 * C2341 - C13261 * C2333) * C89247) *
                C13258 +
            ((C19096 - C19097) * C263 + (C19334 - C19335) * C89247) * C13259 +
            ((C19100 - C19101) * C263 + (C19336 - C19337) * C89247) * C13260) *
               C11948) *
              C89137 * C89299 +
          ((((C13261 * C107 - C89093 * C114) * C263 +
             (C13261 * C566 - C89093 * C572) * C89247) *
                C13258 +
            ((C14072 - C14073) * C263 + (C14335 - C14336) * C89247) * C13259 +
            C14347 * C13260) *
               C89337 +
           (((C89093 * C1732 - C13261 * C1723) * C263 +
             (C89093 * C2339 - C13261 * C2331) * C89247) *
                C13258 +
            ((C17050 - C17051) * C263 + (C17370 - C17371) * C89247) * C13259 +
            ((C17054 - C17055) * C263 + (C17372 - C17373) * C89247) * C13260) *
               C89338 +
           (((C13261 * C1726 - C89093 * C1738) * C263 +
             (C13261 * C2334 - C89093 * C2342) * C89247) *
                C13258 +
            ((C13261 * C6248 - C89093 * C6252) * C263 +
             (C13261 * C6728 - C89093 * C6731) * C89247) *
                C13259 +
            ((C13261 * C14602 - C89093 * C14605) * C263 +
             (C13261 * C15070 - C89093 * C15072) * C89247) *
                C13260) *
               C11948) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 + C91 * C116 -
             C104 * C108) *
                C263 +
            (C89 * C571 - C100 * C565 + C90 * C572 - C102 * C566 + C91 * C573 -
             C104 * C567) *
                C89247) *
               C89236 * C89337 +
           ((C100 * C1724 - C89 * C1734 + C102 * C1723 - C90 * C1732 +
             C104 * C1722 - C91 * C1730) *
                C263 +
            (C100 * C2330 - C89 * C2338 + C102 * C2331 - C90 * C2339 +
             C104 * C2332 - C91 * C2340) *
                C89247) *
               C89236 * C89338 +
           ((C89 * C1736 - C100 * C1725 + C90 * C1738 - C102 * C1726 +
             C91 * C1740 - C104 * C1727) *
                C263 +
            (C89 * C2341 - C100 * C2333 + C90 * C2342 - C102 * C2334 +
             C91 * C2343 - C104 * C2335) *
                C89247) *
               C89236 * C11948) *
              C89137 * C89299 +
          (((C100 * C107 - C89 * C114 + C102 * C108 - C90 * C116 + C104 * C109 -
             C91 * C118) *
                C263 +
            (C100 * C566 - C89 * C572 + C102 * C567 - C90 * C573 + C104 * C568 -
             C91 * C574) *
                C89247) *
               C89236 * C89337 +
           ((C89 * C1732 - C100 * C1723 + C90 * C1730 - C102 * C1722 +
             C91 * C1742 - C104 * C1728) *
                C263 +
            (C89 * C2339 - C100 * C2331 + C90 * C2340 - C102 * C2332 +
             C91 * C2344 - C104 * C2336) *
                C89247) *
               C89236 * C89338 +
           ((C100 * C1726 - C89 * C1738 + C102 * C1727 - C90 * C1740 +
             C104 * C1729 - C91 * C1744) *
                C263 +
            (C100 * C2334 - C89 * C2342 + C102 * C2335 - C90 * C2343 +
             C104 * C2337 - C91 * C2345) *
                C89247) *
               C89236 * C11948) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C89093 * C112 - C13261 * C106) * C25951 +
            (C89093 * C571 - C13261 * C565) * C25848 +
            (C27308 - C27309) * C25952 + (C27606 - C27607) * C25849 +
            C27332 * C25953 + C27618 * C25850) *
               C89236 * C89337 +
           ((C27309 - C27308) * C25951 + (C27607 - C27606) * C25848 +
            (C27313 - C27312) * C25952 + (C27609 - C27608) * C25849 +
            C35733 * C25953 + C35904 * C25850) *
               C89236 * C89338 +
           (C27332 * C25951 + C27618 * C25848 + (C27317 - C27316) * C25952 +
            (C27611 - C27610) * C25849 + (C35735 - C35736) * C25953 +
            (C35905 - C35906) * C25850) *
               C89236 * C11948) *
              C89137 * C89299 +
          (((C13261 * C107 - C89093 * C114) * C25951 +
            (C13261 * C566 - C89093 * C572) * C25848 +
            (C27320 - C27321) * C25952 + (C27612 - C27613) * C25849 +
            C27334 * C25953 + C27619 * C25850) *
               C89236 * C89337 +
           ((C27321 - C27320) * C25951 + (C27613 - C27612) * C25848 +
            (C27325 - C27324) * C25952 + (C27615 - C27614) * C25849 +
            (C27328 - C27329) * C25953 + (C27616 - C27617) * C25850) *
               C89236 * C89338 +
           (C27334 * C25951 + C27619 * C25848 + (C27329 - C27328) * C25952 +
            (C27617 - C27616) * C25849 +
            (C13261 * C26998 - C89093 * C27001) * C25953 +
            (C13261 * C27602 - C89093 * C27604) * C25850) *
               C89236 * C11948) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q));
    d2eezy[43] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
             C13260 * C926 - C13315 * C820) *
                C263 +
            (C13258 * C627 - C13313 * C565 + C13259 * C1515 - C13314 * C1425 +
             C13260 * C1518 - C13315 * C1428) *
                C89247) *
               C89093 * C89337 +
           ((C13313 * C1724 - C13258 * C1828 + C13314 * C4097 - C13259 * C4211 +
             C13315 * C8516 - C13260 * C8600) *
                C263 +
            (C13313 * C2330 - C13258 * C2420 + C13314 * C4767 - C13259 * C4873 +
             C13315 * C8994 - C13260 * C9074) *
                C89247) *
               C89093 * C89338 +
           ((C13258 * C1831 - C13313 * C1725 + C13259 * C6333 - C13314 * C6249 +
             C13260 * C14683 - C13315 * C14601) *
                C263 +
            (C13258 * C2423 - C13313 * C2333 + C13259 * C6807 - C13314 * C6727 +
             C13260 * C15147 - C13315 * C15069) *
                C89247) *
               C89093 * C11948) *
              C89137 * C89299 +
          (((C13313 * C107 - C13258 * C182 + C13314 * C818 - C13259 * C924 +
             C13315 * C821 - C13260 * C927) *
                C263 +
            (C13313 * C566 - C13258 * C628 + C13314 * C1426 - C13259 * C1516 +
             C13315 * C1429 - C13260 * C1519) *
                C89247) *
               C89093 * C89337 +
           ((C13258 * C1829 - C13313 * C1723 + C13259 * C4212 - C13314 * C4098 +
             C13260 * C8601 - C13315 * C8515) *
                C263 +
            (C13258 * C2421 - C13313 * C2331 + C13259 * C4874 - C13314 * C4768 +
             C13260 * C9075 - C13315 * C8995) *
                C89247) *
               C89093 * C89338 +
           ((C13313 * C1726 - C13258 * C1832 + C13314 * C6248 - C13259 * C6334 +
             C13315 * C14602 - C13260 * C14684) *
                C263 +
            (C13313 * C2334 - C13258 * C2424 + C13314 * C6728 - C13259 * C6808 +
             C13315 * C15070 - C13260 * C15148) *
                C89247) *
               C89093 * C11948) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C263 +
             (C89236 * C627 - C180 * C565) * C89247) *
                C89 +
            ((C194 - C195) * C263 + (C634 - C635) * C89247) * C90 +
            C648 * C91) *
               C89337 +
           (((C180 * C1724 - C89236 * C1828) * C263 +
             (C180 * C2330 - C89236 * C2420) * C89247) *
                C89 +
            ((C1845 - C1846) * C263 + (C2429 - C2430) * C89247) * C90 +
            C3916 * C91) *
               C89338 +
           (((C89236 * C1831 - C180 * C1725) * C263 +
             (C89236 * C2423 - C180 * C2333) * C89247) *
                C89 +
            ((C1853 - C1854) * C263 + (C2433 - C2434) * C89247) * C90 +
            ((C1857 - C1858) * C263 + (C2435 - C2436) * C89247) * C91) *
               C11948) *
              C89137 * C89299 +
          ((((C195 - C194) * C263 + (C635 - C634) * C89247) * C89 +
            ((C199 - C198) * C263 + (C638 - C637) * C89247) * C90 +
            C649 * C91) *
               C89337 +
           (((C1846 - C1845) * C263 + (C2430 - C2429) * C89247) * C89 +
            ((C1850 - C1849) * C263 + (C2432 - C2431) * C89247) * C90 +
            ((C3435 - C3436) * C263 + (C3913 - C3914) * C89247) * C91) *
               C89338 +
           (((C1854 - C1853) * C263 + (C2434 - C2433) * C89247) * C89 +
            ((C1858 - C1857) * C263 + (C2436 - C2435) * C89247) * C90 +
            ((C180 * C1729 - C89236 * C1835) * C263 +
             (C180 * C2337 - C89236 * C2427) * C89247) *
                C91) *
               C11948) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C89236 * C181 - C180 * C106) * C25951 +
            (C89236 * C627 - C180 * C565) * C25848 +
            (C27126 - C27127) * C25952 + (C27696 - C27697) * C25849 +
            C27144 * C25953 + C27705 * C25850) *
               C89093 * C89337 +
           ((C27127 - C27126) * C25951 + (C27697 - C27696) * C25848 +
            (C27131 - C27130) * C25952 + (C27699 - C27698) * C25849 +
            C35620 * C25953 + C35958 * C25850) *
               C89093 * C89338 +
           (C27144 * C25951 + C27705 * C25848 + (C27135 - C27134) * C25952 +
            (C27701 - C27700) * C25849 + (C35622 - C35623) * C25953 +
            (C35959 - C35960) * C25850) *
               C89093 * C11948) *
              C89137 * C89299 +
          (((C195 - C194) * C25951 + (C635 - C634) * C25848 +
            (C1845 - C1846) * C25952 + (C2429 - C2430) * C25849 +
            C27138 * C25953 + C27702 * C25850) *
               C89093 * C89337 +
           ((C1846 - C1845) * C25951 + (C2430 - C2429) * C25848 +
            (C1853 - C1854) * C25952 + (C2433 - C2434) * C25849 +
            (C27140 - C27141) * C25953 + (C27703 - C27704) * C25850) *
               C89093 * C89338 +
           (C27138 * C25951 + C27702 * C25848 + (C27141 - C27140) * C25952 +
            (C27704 - C27703) * C25849 +
            (C180 * C26998 - C89236 * C27122) * C25953 +
            (C180 * C27602 - C89236 * C27694) * C25850) *
               C89093 * C11948) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q));
    d2eezz[43] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C13258 +
            C14524 * C13259 + C14525 * C13260) *
               C89093 * C89337 -
           (C17592 * C13260 + C17593 * C13259 +
            (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
                C13258) *
               C89093 * C89338 +
           ((C263 * C1937 - C699 * C1725 - C263 * C2333 + C89247 * C2513) *
                C13258 +
            C19500 * C13259 + C19501 * C13260) *
               C89093 * C11948) *
              C89137 * C89299 +
          ((C2544 * C13258 + C4996 * C13259 + C17594 * C13260) * C89093 *
               C89338 -
           (C1640 * C13260 + C1639 * C13259 + C731 * C13258) * C89093 * C89337 -
           ((C263 * C14762 - C699 * C14602 - C263 * C15070 + C89247 * C15224) *
                C13260 +
            (C263 * C6414 - C699 * C6248 - C263 * C6728 + C89247 * C6885) *
                C13259 +
            C2545 * C13258) *
               C89093 * C11948) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C89236 *
                C89 +
            C735 * C90 + C736 * C91) *
               C89337 -
           (C2547 * C91 + C2548 * C90 +
            (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
                C89236 * C89) *
               C89338 +
           ((C263 * C1937 - C699 * C1725 - C263 * C2333 + C89247 * C2513) *
                C89236 * C89 +
            C2549 * C90 + C2550 * C91) *
               C11948) *
              C89137 * C89299 +
          ((C2548 * C89 + C2547 * C90 + C3999 * C91) * C89338 -
           (C737 * C91 + C736 * C90 + C735 * C89) * C89337 -
           ((C263 * C1941 - C699 * C1729 - C263 * C2337 + C89247 * C2517) *
                C89236 * C91 +
            C2550 * C90 + C2549 * C89) *
               C11948) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C25951 * C264 - C26254 * C106 - C25951 * C565 + C25848 * C700 +
            C25952 * C1934 - C26255 * C1724 - C25952 * C2330 + C25849 * C2512 +
            C25953 * C1937 - C26256 * C1725 - C25953 * C2333 + C25850 * C2513) *
               C89236 * C89093 * C89337 -
           (C25953 * C10660 - C26256 * C10544 - C25953 * C10878 +
            C25850 * C10989 + C25952 * C1937 - C26255 * C1725 - C25952 * C2333 +
            C25849 * C2513 + C25951 * C1934 - C26254 * C1724 - C25951 * C2330 +
            C25848 * C2512) *
               C89236 * C89093 * C89338 +
           (C25951 * C1937 - C26254 * C1725 - C25951 * C2333 + C25848 * C2513 +
            C25952 * C10660 - C26255 * C10544 - C25952 * C10878 +
            C25849 * C10989 + C25953 * C27225 - C26256 * C26997 -
            C25953 * C27601 + C25850 * C27779) *
               C89236 * C89093 * C11948) *
              C89137 * C89299 +
          ((C25951 * C1935 - C26254 * C1723 - C25951 * C2331 + C25848 * C2511 +
            C25952 * C1938 - C26255 * C1726 - C25952 * C2334 + C25849 * C2514 +
            C25953 * C10661 - C26256 * C10543 - C25953 * C10879 +
            C25850 * C10988) *
               C89236 * C89093 * C89338 -
           (C25953 * C1938 - C26256 * C1726 - C25953 * C2334 + C25850 * C2514 +
            C25952 * C1935 - C26255 * C1723 - C25952 * C2331 + C25849 * C2511 +
            C25951 * C265 - C26254 * C107 - C25951 * C566 + C25848 * C701) *
               C89236 * C89093 * C89337 -
           (C25953 * C27226 - C26256 * C26998 - C25953 * C27602 +
            C25850 * C27780 + C25952 * C10661 - C26255 * C10543 -
            C25952 * C10879 + C25849 * C10988 + C25951 * C1938 -
            C26254 * C1726 - C25951 * C2334 + C25848 * C2514) *
               C89236 * C89093 * C11948) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q));
    d2eexx[44] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C112 - C101 * C106 - C100 * C113 + C89 * C124 + C102 * C114 -
            C103 * C107 - C102 * C115 + C90 * C125 + C104 * C116 - C105 * C108 -
            C104 * C117 + C91 * C126) *
               C89247 * C89236 * C9228 -
           (C104 * C1730 - C105 * C1722 - C104 * C1731 + C91 * C1746 +
            C102 * C1732 - C103 * C1723 - C102 * C1733 + C90 * C1747 +
            C100 * C1734 - C101 * C1724 - C100 * C1735 + C89 * C1748) *
               C89247 * C89236 * C89217) *
              C812 +
          ((C100 * C4101 - C101 * C4097 - C100 * C4102 + C89 * C4109 +
            C102 * C4103 - C103 * C4098 - C102 * C4104 + C90 * C4110 +
            C104 * C4105 - C105 * C4099 - C104 * C4106 + C91 * C4111) *
               C89247 * C89236 * C89217 -
           (C104 * C825 - C105 * C817 - C104 * C826 + C91 * C841 + C102 * C827 -
            C103 * C818 - C102 * C828 + C90 * C842 + C100 * C829 - C101 * C819 -
            C100 * C830 + C89 * C843) *
               C89247 * C89236 * C9228) *
              C813 +
          ((C100 * C831 - C101 * C820 - C100 * C832 + C89 * C844 + C102 * C833 -
            C103 * C821 - C102 * C834 + C90 * C845 + C104 * C835 - C105 * C822 -
            C104 * C836 + C91 * C846) *
               C89247 * C89236 * C9228 -
           (C104 * C8517 - C105 * C8514 - C104 * C8518 + C91 * C8523 +
            C102 * C8519 - C103 * C8515 - C102 * C8520 + C90 * C8524 +
            C100 * C8521 - C101 * C8516 - C100 * C8522 + C89 * C8525) *
               C89247 * C89236 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C112 - C101 * C106 - C100 * C113 + C89 * C124 + C102 * C114 -
            C103 * C107 - C102 * C115 + C90 * C125 + C104 * C116 - C105 * C108 -
            C104 * C117 + C91 * C126) *
               C89247 * C89236 * C9228 -
           (C104 * C1730 - C105 * C1722 - C104 * C1731 + C91 * C1746 +
            C102 * C1732 - C103 * C1723 - C102 * C1733 + C90 * C1747 +
            C100 * C1734 - C101 * C1724 - C100 * C1735 + C89 * C1748) *
               C89247 * C89236 * C89217) *
              C89137 * C5075 +
          ((C100 * C1732 - C101 * C1723 - C100 * C1733 + C89 * C1747 +
            C102 * C1730 - C103 * C1722 - C102 * C1731 + C90 * C1746 +
            C104 * C1742 - C105 * C1728 - C104 * C1743 + C91 * C1752) *
               C89247 * C89236 * C89217 -
           (C104 * C118 - C105 * C109 - C104 * C119 + C91 * C127 + C102 * C116 -
            C103 * C108 - C102 * C117 + C90 * C126 + C100 * C114 - C101 * C107 -
            C100 * C115 + C89 * C125) *
               C89247 * C89236 * C9228) *
              C89137 * C5076 +
          ((C100 * C116 - C101 * C108 - C100 * C117 + C89 * C126 + C102 * C118 -
            C103 * C109 - C102 * C119 + C90 * C127 + C104 * C120 - C105 * C110 -
            C104 * C121 + C91 * C128) *
               C89247 * C89236 * C9228 -
           (C104 * C3353 - C105 * C3352 - C104 * C3354 + C91 * C3355 +
            C102 * C1742 - C103 * C1728 - C102 * C1743 + C90 * C1752 +
            C100 * C1730 - C101 * C1722 - C100 * C1731 + C89 * C1746) *
               C89247 * C89236 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                C89247 * C13258 +
            C13794 * C13259 + C13795 * C13260) *
               C9228 -
           (C16720 * C13260 + C16721 * C13259 +
            (C13261 * C1734 - C13262 * C1724 - C13261 * C1735 +
             C89093 * C1748) *
                C89247 * C13258) *
               C89217) *
              C89137 * C5075 +
          (((C13261 * C1732 - C13262 * C1723 - C13261 * C1733 +
             C89093 * C1747) *
                C89247 * C13258 +
            C16722 * C13259 + C16723 * C13260) *
               C89217 -
           (C13798 * C13260 + C13797 * C13259 +
            (C13261 * C114 - C13262 * C107 - C13261 * C115 + C89093 * C125) *
                C89247 * C13258) *
               C9228) *
              C89137 * C5076 +
          (((C13261 * C116 - C13262 * C108 - C13261 * C117 + C89093 * C126) *
                C89247 * C13258 +
            C15314 * C13259 + C15315 * C13260) *
               C9228 -
           ((C13261 * C8517 - C13262 * C8514 - C13261 * C8518 +
             C89093 * C8523) *
                C89247 * C13260 +
            (C13261 * C4105 - C13262 * C4099 - C13261 * C4106 +
             C89093 * C4111) *
                C89247 * C13259 +
            (C13261 * C1730 - C13262 * C1722 - C13261 * C1731 +
             C89093 * C1746) *
                C89247 * C13258) *
               C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                C89247 * C13258 +
            C13794 * C13259 + C13795 * C13260) *
               C9228 -
           (C16720 * C13260 + C16721 * C13259 +
            (C13261 * C1734 - C13262 * C1724 - C13261 * C1735 +
             C89093 * C1748) *
                C89247 * C13258) *
               C89217) *
              C812 +
          ((C16721 * C13258 + C16720 * C13259 + C21135 * C13260) * C89217 -
           (C13796 * C13260 + C13795 * C13259 + C13794 * C13258) * C9228) *
              C813 +
          ((C13795 * C13258 + C13796 * C13259 + C18322 * C13260) * C9228 -
           ((C13261 * C21124 - C13262 * C21123 - C13261 * C21125 +
             C89093 * C21126) *
                C89247 * C13260 +
            C21135 * C13259 + C16720 * C13258) *
               C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                C25848 +
            C27042 * C25849 + C27043 * C25850) *
               C89236 * C9228 -
           (C27044 * C25850 + C27043 * C25849 + C27042 * C25848) * C89236 *
               C89217) *
              C89137 * C5075 +
          ((C27045 * C25848 + C27046 * C25849 + C27047 * C25850) * C89236 *
               C89217 -
           (C27046 * C25850 + C27045 * C25849 +
            (C13261 * C114 - C13262 * C107 - C13261 * C115 + C89093 * C125) *
                C25848) *
               C89236 * C9228) *
              C89137 * C5076 +
          (((C13261 * C116 - C13262 * C108 - C13261 * C117 + C89093 * C126) *
                C25848 +
            C28534 * C25849 + C28535 * C25850) *
               C89236 * C9228 -
           ((C13261 * C10545 - C13262 * C10542 - C13261 * C10546 +
             C89093 * C10551) *
                C25850 +
            C28535 * C25849 + C28534 * C25848) *
               C89236 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                C25848 +
            C27042 * C25849 + C27043 * C25850) *
               C89236 * C9228 -
           (C27044 * C25850 + C27043 * C25849 + C27042 * C25848) * C89236 *
               C89217) *
              C812 +
          ((C16717 * C25848 + C18856 * C25849 + C31296 * C25850) * C89236 *
               C89217 -
           (C18856 * C25850 + C16717 * C25849 + C13788 * C25848) * C89236 *
               C9228) *
              C813 +
          ((C13789 * C25848 + C16716 * C25849 + C18857 * C25850) * C89236 *
               C9228 -
           ((C13261 * C23154 - C13262 * C23152 - C13261 * C23155 +
             C89093 * C23158) *
                C25850 +
            C18857 * C25849 + C16716 * C25848) *
               C89236 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eexy[44] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C89236 * C181 - C180 * C106) * C100 +
            (C89236 * C187 - C180 * C113) * C89 + (C194 - C195) * C102 +
            (C196 - C197) * C90 + C210 * C104 + C211 * C91) *
               C89247 * C9228 +
           ((C180 * C1724 - C89236 * C1828) * C100 +
            (C180 * C1735 - C89236 * C1836) * C89 + (C1845 - C1846) * C102 +
            (C1847 - C1848) * C90 + C3433 * C104 + C3434 * C91) *
               C89247 * C89217) *
              C812 +
          (((C180 * C819 - C89236 * C923) * C100 +
            (C180 * C830 - C89236 * C931) * C89 + (C940 - C941) * C102 +
            (C942 - C943) * C90 + C2710 * C104 + C2711 * C91) *
               C89247 * C9228 +
           ((C89236 * C4211 - C180 * C4097) * C100 +
            (C89236 * C4215 - C180 * C4102) * C89 + (C4220 - C4221) * C102 +
            (C4222 - C4223) * C90 + (C4224 - C4225) * C104 +
            (C4226 - C4227) * C91) *
               C89247 * C89217) *
              C813 +
          (((C89236 * C926 - C180 * C820) * C100 +
            (C89236 * C934 - C180 * C832) * C89 + (C948 - C949) * C102 +
            (C950 - C951) * C90 + (C952 - C953) * C104 + (C954 - C955) * C91) *
               C89247 * C9228 +
           ((C180 * C8516 - C89236 * C8600) * C100 +
            (C180 * C8522 - C89236 * C8603) * C89 +
            (C180 * C8515 - C89236 * C8601) * C102 +
            (C180 * C8520 - C89236 * C8604) * C90 +
            (C180 * C8514 - C89236 * C8602) * C104 +
            (C180 * C8518 - C89236 * C8605) * C91) *
               C89247 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C89236 * C181 - C180 * C106) * C100 +
            (C89236 * C187 - C180 * C113) * C89 + (C194 - C195) * C102 +
            (C196 - C197) * C90 + C210 * C104 + C211 * C91) *
               C89247 * C9228 +
           ((C180 * C1724 - C89236 * C1828) * C100 +
            (C180 * C1735 - C89236 * C1836) * C89 + (C1845 - C1846) * C102 +
            (C1847 - C1848) * C90 + C3433 * C104 + C3434 * C91) *
               C89247 * C89217) *
              C89137 * C5075 +
          (((C195 - C194) * C100 + (C197 - C196) * C89 + (C199 - C198) * C102 +
            (C201 - C200) * C90 + C212 * C104 + C213 * C91) *
               C89247 * C9228 +
           ((C1846 - C1845) * C100 + (C1848 - C1847) * C89 +
            (C1850 - C1849) * C102 + (C1852 - C1851) * C90 +
            (C3435 - C3436) * C104 + (C3437 - C3438) * C91) *
               C89247 * C89217) *
              C89137 * C5076 +
          ((C210 * C100 + C211 * C89 + (C203 - C202) * C102 +
            (C205 - C204) * C90 + (C206 - C207) * C104 + (C208 - C209) * C91) *
               C89247 * C9228 +
           (C3433 * C100 + C3434 * C89 + (C3436 - C3435) * C102 +
            (C3438 - C3437) * C90 + (C180 * C3352 - C89236 * C3430) * C104 +
            (C180 * C3354 - C89236 * C3431) * C91) *
               C89247 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
             C13260 * C926 - C13315 * C820) *
                C13261 +
            (C13258 * C187 - C13313 * C113 + C13259 * C931 - C13314 * C830 +
             C13260 * C934 - C13315 * C832) *
                C89093) *
               C89247 * C9228 +
           ((C13313 * C1724 - C13258 * C1828 + C13314 * C4097 - C13259 * C4211 +
             C13315 * C8516 - C13260 * C8600) *
                C13261 +
            (C13313 * C1735 - C13258 * C1836 + C13314 * C4102 - C13259 * C4215 +
             C13315 * C8522 - C13260 * C8603) *
                C89093) *
               C89247 * C89217) *
              C89137 * C5075 +
          (((C13313 * C107 - C13258 * C182 + C13314 * C818 - C13259 * C924 +
             C13315 * C821 - C13260 * C927) *
                C13261 +
            (C13313 * C115 - C13258 * C188 + C13314 * C828 - C13259 * C932 +
             C13315 * C834 - C13260 * C935) *
                C89093) *
               C89247 * C9228 +
           ((C13258 * C1829 - C13313 * C1723 + C13259 * C4212 - C13314 * C4098 +
             C13260 * C8601 - C13315 * C8515) *
                C13261 +
            (C13258 * C1837 - C13313 * C1733 + C13259 * C4216 - C13314 * C4104 +
             C13260 * C8604 - C13315 * C8520) *
                C89093) *
               C89247 * C89217) *
              C89137 * C5076 +
          (((C13258 * C183 - C13313 * C108 + C13259 * C925 - C13314 * C817 +
             C13260 * C928 - C13315 * C822) *
                C13261 +
            (C13258 * C189 - C13313 * C117 + C13259 * C933 - C13314 * C826 +
             C13260 * C936 - C13315 * C836) *
                C89093) *
               C89247 * C9228 +
           ((C13313 * C1722 - C13258 * C1830 + C13314 * C4099 - C13259 * C4213 +
             C13315 * C8514 - C13260 * C8602) *
                C13261 +
            (C13313 * C1731 - C13258 * C1838 + C13314 * C4106 - C13259 * C4217 +
             C13315 * C8518 - C13260 * C8605) *
                C89093) *
               C89247 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
             C13260 * C926 - C13315 * C820) *
                C13261 +
            (C13258 * C187 - C13313 * C113 + C13259 * C931 - C13314 * C830 +
             C13260 * C934 - C13315 * C832) *
                C89093) *
               C89247 * C9228 +
           ((C13313 * C1724 - C13258 * C1828 + C13314 * C4097 - C13259 * C4211 +
             C13315 * C8516 - C13260 * C8600) *
                C13261 +
            (C13313 * C1735 - C13258 * C1836 + C13314 * C4102 - C13259 * C4215 +
             C13315 * C8522 - C13260 * C8603) *
                C89093) *
               C89247 * C89217) *
              C812 +
          (((C13313 * C819 - C13258 * C923 + C13314 * C820 - C13259 * C926 +
             C13315 * C5727 - C13260 * C5787) *
                C13261 +
            (C13313 * C830 - C13258 * C931 + C13314 * C832 - C13259 * C934 +
             C13315 * C5733 - C13260 * C5790) *
                C89093) *
               C89247 * C9228 +
           ((C13258 * C4211 - C13313 * C4097 + C13259 * C8600 - C13314 * C8516 +
             C13260 * C16821 - C13315 * C16683) *
                C13261 +
            (C13258 * C4215 - C13313 * C4102 + C13259 * C8603 - C13314 * C8522 +
             C13260 * C16823 - C13315 * C16686) *
                C89093) *
               C89247 * C89217) *
              C813 +
          (((C13258 * C926 - C13313 * C820 + C13259 * C5787 - C13314 * C5727 +
             C13260 * C13873 - C13315 * C13743) *
                C13261 +
            (C13258 * C934 - C13313 * C832 + C13259 * C5790 - C13314 * C5733 +
             C13260 * C13875 - C13315 * C13746) *
                C89093) *
               C89247 * C9228 +
           ((C13313 * C8516 - C13258 * C8600 + C13314 * C16683 -
             C13259 * C16821 + C13315 * C21123 - C13260 * C21209) *
                C13261 +
            (C13313 * C8522 - C13258 * C8603 + C13314 * C16686 -
             C13259 * C16823 + C13315 * C21125 - C13260 * C21210) *
                C89093) *
               C89247 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C13261 +
             (C89236 * C187 - C180 * C113) * C89093) *
                C25848 +
            ((C27126 - C27127) * C13261 + (C27128 - C27129) * C89093) * C25849 +
            C27151 * C25850) *
               C9228 +
           (((C27127 - C27126) * C13261 + (C27129 - C27128) * C89093) * C25848 +
            ((C27131 - C27130) * C13261 + (C27133 - C27132) * C89093) * C25849 +
            ((C27134 - C27135) * C13261 + (C27136 - C27137) * C89093) *
                C25850) *
               C89217) *
              C89137 * C5075 +
          ((((C195 - C194) * C13261 + (C197 - C196) * C89093) * C25848 +
            ((C1845 - C1846) * C13261 + (C1847 - C1848) * C89093) * C25849 +
            C27150 * C25850) *
               C9228 +
           (((C1846 - C1845) * C13261 + (C1848 - C1847) * C89093) * C25848 +
            ((C1853 - C1854) * C13261 + (C1855 - C1856) * C89093) * C25849 +
            ((C27140 - C27141) * C13261 + (C27142 - C27143) * C89093) *
                C25850) *
               C89217) *
              C89137 * C5076 +
          (((C210 * C13261 + C211 * C89093) * C25848 +
            ((C1850 - C1849) * C13261 + (C1852 - C1851) * C89093) * C25849 +
            ((C1857 - C1858) * C13261 + (C1859 - C1860) * C89093) * C25850) *
               C9228 +
           ((C3433 * C13261 + C3434 * C89093) * C25848 +
            ((C1858 - C1857) * C13261 + (C1860 - C1859) * C89093) * C25849 +
            ((C180 * C10542 - C89236 * C10606) * C13261 +
             (C180 * C10546 - C89236 * C10609) * C89093) *
                C25850) *
               C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C13261 +
             (C89236 * C187 - C180 * C113) * C89093) *
                C25848 +
            ((C27126 - C27127) * C13261 + (C27128 - C27129) * C89093) * C25849 +
            C27151 * C25850) *
               C9228 +
           (((C27127 - C27126) * C13261 + (C27129 - C27128) * C89093) * C25848 +
            ((C27131 - C27130) * C13261 + (C27133 - C27132) * C89093) * C25849 +
            ((C27134 - C27135) * C13261 + (C27136 - C27137) * C89093) *
                C25850) *
               C89217) *
              C812 +
          ((((C180 * C819 - C89236 * C923) * C13261 +
             (C180 * C830 - C89236 * C931) * C89093) *
                C25848 +
            ((C29351 - C29352) * C13261 + (C29353 - C29354) * C89093) * C25849 +
            C31381 * C25850) *
               C9228 +
           (((C29352 - C29351) * C13261 + (C29354 - C29353) * C89093) * C25848 +
            ((C29356 - C29355) * C13261 + (C29358 - C29357) * C89093) * C25849 +
            ((C31375 - C31376) * C13261 + (C31377 - C31378) * C89093) *
                C25850) *
               C89217) *
              C813 +
          ((((C89236 * C926 - C180 * C820) * C13261 +
             (C89236 * C934 - C180 * C832) * C89093) *
                C25848 +
            ((C33629 - C33630) * C13261 + (C33631 - C33632) * C89093) * C25849 +
            ((C33633 - C33634) * C13261 + (C33635 - C33636) * C89093) *
                C25850) *
               C9228 +
           (((C33630 - C33629) * C13261 + (C33632 - C33631) * C89093) * C25848 +
            ((C33634 - C33633) * C13261 + (C33636 - C33635) * C89093) * C25849 +
            ((C180 * C23152 - C89236 * C23211) * C13261 +
             (C180 * C23155 - C89236 * C23213) * C89093) *
                C25850) *
               C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eexz[44] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C100 +
            (C89247 * C270 - C263 * C113) * C89 + (C277 - C278) * C102 +
            (C279 - C280) * C90 + C293 * C104 + C294 * C91) *
               C89236 * C9228 +
           ((C263 * C1724 - C89247 * C1934) * C100 +
            (C263 * C1735 - C89247 * C1942) * C89 + (C1951 - C1952) * C102 +
            (C1953 - C1954) * C90 + C3515 * C104 + C3516 * C91) *
               C89236 * C89217) *
              C812 +
          (((C263 * C819 - C89247 * C1029) * C100 +
            (C263 * C830 - C89247 * C1037) * C89 + (C1046 - C1047) * C102 +
            (C1048 - C1049) * C90 + C2792 * C104 + C2793 * C91) *
               C89236 * C9228 +
           ((C89247 * C4325 - C263 * C4097) * C100 +
            (C89247 * C4329 - C263 * C4102) * C89 + (C4334 - C4335) * C102 +
            (C4336 - C4337) * C90 + (C4338 - C4339) * C104 +
            (C4340 - C4341) * C91) *
               C89236 * C89217) *
              C813 +
          (((C89247 * C1032 - C263 * C820) * C100 +
            (C89247 * C1040 - C263 * C832) * C89 + (C1054 - C1055) * C102 +
            (C1056 - C1057) * C90 + (C1058 - C1059) * C104 +
            (C1060 - C1061) * C91) *
               C89236 * C9228 +
           ((C263 * C8516 - C89247 * C8680) * C100 +
            (C263 * C8522 - C89247 * C8683) * C89 +
            (C263 * C8515 - C89247 * C8681) * C102 +
            (C263 * C8520 - C89247 * C8684) * C90 +
            (C263 * C8514 - C89247 * C8682) * C104 +
            (C263 * C8518 - C89247 * C8685) * C91) *
               C89236 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C100 +
            (C89247 * C270 - C263 * C113) * C89 + (C277 - C278) * C102 +
            (C279 - C280) * C90 + C293 * C104 + C294 * C91) *
               C89236 * C9228 +
           ((C263 * C1724 - C89247 * C1934) * C100 +
            (C263 * C1735 - C89247 * C1942) * C89 + (C1951 - C1952) * C102 +
            (C1953 - C1954) * C90 + C3515 * C104 + C3516 * C91) *
               C89236 * C89217) *
              C89137 * C5075 +
          (((C278 - C277) * C100 + (C280 - C279) * C89 + (C282 - C281) * C102 +
            (C284 - C283) * C90 + C295 * C104 + C296 * C91) *
               C89236 * C9228 +
           ((C1952 - C1951) * C100 + (C1954 - C1953) * C89 +
            (C1956 - C1955) * C102 + (C1958 - C1957) * C90 +
            (C3517 - C3518) * C104 + (C3519 - C3520) * C91) *
               C89236 * C89217) *
              C89137 * C5076 +
          ((C293 * C100 + C294 * C89 + (C286 - C285) * C102 +
            (C288 - C287) * C90 + (C289 - C290) * C104 + (C291 - C292) * C91) *
               C89236 * C9228 +
           (C3515 * C100 + C3516 * C89 + (C3518 - C3517) * C102 +
            (C3520 - C3519) * C90 + (C263 * C3352 - C89247 * C3512) * C104 +
            (C263 * C3354 - C89247 * C3513) * C91) *
               C89236 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C13261 +
             (C89247 * C270 - C263 * C113) * C89093) *
                C13258 +
            ((C13956 - C13957) * C13261 + (C13958 - C13959) * C89093) * C13259 +
            C13981 * C13260) *
               C9228 +
           (((C263 * C1724 - C89247 * C1934) * C13261 +
             (C263 * C1735 - C89247 * C1942) * C89093) *
                C13258 +
            ((C16928 - C16929) * C13261 + (C16930 - C16931) * C89093) * C13259 +
            C21296 * C13260) *
               C89217) *
              C89137 * C5075 +
          ((((C278 - C277) * C13261 + (C280 - C279) * C89093) * C13258 +
            ((C1046 - C1047) * C13261 + (C1048 - C1049) * C89093) * C13259 +
            C13980 * C13260) *
               C9228 +
           (((C1952 - C1951) * C13261 + (C1954 - C1953) * C89093) * C13258 +
            ((C4334 - C4335) * C13261 + (C4336 - C4337) * C89093) * C13259 +
            ((C16936 - C16937) * C13261 + (C16938 - C16939) * C89093) *
                C13260) *
               C89217) *
              C89137 * C5076 +
          (((C293 * C13261 + C294 * C89093) * C13258 +
            ((C1051 - C1050) * C13261 + (C1053 - C1052) * C89093) * C13259 +
            ((C1058 - C1059) * C13261 + (C1060 - C1061) * C89093) * C13260) *
               C9228 +
           ((C3515 * C13261 + C3516 * C89093) * C13258 +
            ((C4339 - C4338) * C13261 + (C4341 - C4340) * C89093) * C13259 +
            ((C263 * C8514 - C89247 * C8682) * C13261 +
             (C263 * C8518 - C89247 * C8685) * C89093) *
                C13260) *
               C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C13261 +
             (C89247 * C270 - C263 * C113) * C89093) *
                C13258 +
            ((C13956 - C13957) * C13261 + (C13958 - C13959) * C89093) * C13259 +
            C13981 * C13260) *
               C9228 +
           (((C263 * C1724 - C89247 * C1934) * C13261 +
             (C263 * C1735 - C89247 * C1942) * C89093) *
                C13258 +
            ((C16928 - C16929) * C13261 + (C16930 - C16931) * C89093) * C13259 +
            C21296 * C13260) *
               C89217) *
              C812 +
          ((((C13957 - C13956) * C13261 + (C13959 - C13958) * C89093) * C13258 +
            ((C13961 - C13960) * C13261 + (C13963 - C13962) * C89093) * C13259 +
            C18435 * C13260) *
               C9228 +
           (((C16929 - C16928) * C13261 + (C16931 - C16930) * C89093) * C13258 +
            ((C16933 - C16932) * C13261 + (C16935 - C16934) * C89093) * C13259 +
            ((C21290 - C21291) * C13261 + (C21292 - C21293) * C89093) *
                C13260) *
               C89217) *
              C813 +
          ((C13981 * C13258 +
            ((C13965 - C13964) * C13261 + (C13967 - C13966) * C89093) * C13259 +
            ((C18429 - C18430) * C13261 + (C18431 - C18432) * C89093) *
                C13260) *
               C9228 +
           (C21296 * C13258 +
            ((C21291 - C21290) * C13261 + (C21293 - C21292) * C89093) * C13259 +
            ((C263 * C21123 - C89247 * C21285) * C13261 +
             (C263 * C21125 - C89247 * C21286) * C89093) *
                C13260) *
               C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C25848 * C264 - C25951 * C106 + C25849 * C1934 - C25952 * C1724 +
             C25850 * C1937 - C25953 * C1725) *
                C13261 +
            (C25848 * C270 - C25951 * C113 + C25849 * C1942 - C25952 * C1735 +
             C25850 * C1945 - C25953 * C1737) *
                C89093) *
               C89236 * C9228 +
           ((C25951 * C1724 - C25848 * C1934 + C25952 * C1725 - C25849 * C1937 +
             C25953 * C10544 - C25850 * C10660) *
                C13261 +
            (C25951 * C1735 - C25848 * C1942 + C25952 * C1737 - C25849 * C1945 +
             C25953 * C10550 - C25850 * C10663) *
                C89093) *
               C89236 * C89217) *
              C89137 * C5075 +
          (((C25951 * C107 - C25848 * C265 + C25952 * C1723 - C25849 * C1935 +
             C25953 * C1726 - C25850 * C1938) *
                C13261 +
            (C25951 * C115 - C25848 * C271 + C25952 * C1733 - C25849 * C1943 +
             C25953 * C1739 - C25850 * C1946) *
                C89093) *
               C89236 * C9228 +
           ((C25848 * C1935 - C25951 * C1723 + C25849 * C1938 - C25952 * C1726 +
             C25850 * C10661 - C25953 * C10543) *
                C13261 +
            (C25848 * C1943 - C25951 * C1733 + C25849 * C1946 - C25952 * C1739 +
             C25850 * C10664 - C25953 * C10548) *
                C89093) *
               C89236 * C89217) *
              C89137 * C5076 +
          (((C25848 * C266 - C25951 * C108 + C25849 * C1936 - C25952 * C1722 +
             C25850 * C1939 - C25953 * C1727) *
                C13261 +
            (C25848 * C272 - C25951 * C117 + C25849 * C1944 - C25952 * C1731 +
             C25850 * C1947 - C25953 * C1741) *
                C89093) *
               C89236 * C9228 +
           ((C25951 * C1722 - C25848 * C1936 + C25952 * C1727 - C25849 * C1939 +
             C25953 * C10542 - C25850 * C10662) *
                C13261 +
            (C25951 * C1731 - C25848 * C1944 + C25952 * C1741 - C25849 * C1947 +
             C25953 * C10546 - C25850 * C10665) *
                C89093) *
               C89236 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C25848 * C264 - C25951 * C106 + C25849 * C1934 - C25952 * C1724 +
             C25850 * C1937 - C25953 * C1725) *
                C13261 +
            (C25848 * C270 - C25951 * C113 + C25849 * C1942 - C25952 * C1735 +
             C25850 * C1945 - C25953 * C1737) *
                C89093) *
               C89236 * C9228 +
           ((C25951 * C1724 - C25848 * C1934 + C25952 * C1725 - C25849 * C1937 +
             C25953 * C10544 - C25850 * C10660) *
                C13261 +
            (C25951 * C1735 - C25848 * C1942 + C25952 * C1737 - C25849 * C1945 +
             C25953 * C10550 - C25850 * C10663) *
                C89093) *
               C89236 * C89217) *
              C812 +
          (((C25951 * C819 - C25848 * C1029 + C25952 * C4097 - C25849 * C4325 +
             C25953 * C6249 - C25850 * C6413) *
                C13261 +
            (C25951 * C830 - C25848 * C1037 + C25952 * C4102 - C25849 * C4329 +
             C25953 * C6255 - C25850 * C6416) *
                C89093) *
               C89236 * C9228 +
           ((C25848 * C4325 - C25951 * C4097 + C25849 * C6413 - C25952 * C6249 +
             C25850 * C23264 - C25953 * C23153) *
                C13261 +
            (C25848 * C4329 - C25951 * C4102 + C25849 * C6416 - C25952 * C6255 +
             C25850 * C23266 - C25953 * C23157) *
                C89093) *
               C89236 * C89217) *
              C813 +
          (((C25848 * C1032 - C25951 * C820 + C25849 * C8680 - C25952 * C8516 +
             C25850 * C14761 - C25953 * C14601) *
                C13261 +
            (C25848 * C1040 - C25951 * C832 + C25849 * C8683 - C25952 * C8522 +
             C25850 * C14763 - C25953 * C14604) *
                C89093) *
               C89236 * C9228 +
           ((C25951 * C8516 - C25848 * C8680 + C25952 * C14601 -
             C25849 * C14761 + C25953 * C23152 - C25850 * C23265) *
                C13261 +
            (C25951 * C8522 - C25848 * C8683 + C25952 * C14604 -
             C25849 * C14763 + C25953 * C23155 - C25850 * C23267) *
                C89093) *
               C89236 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eeyx[44] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 + C91 * C116 -
             C104 * C108) *
                C180 +
            (C89 * C352 - C100 * C346 + C90 * C353 - C102 * C347 + C91 * C354 -
             C104 * C348) *
                C89236) *
               C89247 * C9228 +
           ((C100 * C1724 - C89 * C1734 + C102 * C1723 - C90 * C1732 +
             C104 * C1722 - C91 * C1730) *
                C180 +
            (C100 * C2040 - C89 * C2048 + C102 * C2041 - C90 * C2049 +
             C104 * C2042 - C91 * C2050) *
                C89236) *
               C89247 * C89217) *
              C812 +
          (((C100 * C819 - C89 * C829 + C102 * C818 - C90 * C827 + C104 * C817 -
             C91 * C825) *
                C180 +
            (C100 * C1135 - C89 * C1143 + C102 * C1136 - C90 * C1144 +
             C104 * C1137 - C91 * C1145) *
                C89236) *
               C89247 * C9228 +
           ((C89 * C4101 - C100 * C4097 + C90 * C4103 - C102 * C4098 +
             C91 * C4105 - C104 * C4099) *
                C180 +
            (C89 * C4443 - C100 * C4439 + C90 * C4444 - C102 * C4440 +
             C91 * C4445 - C104 * C4441) *
                C89236) *
               C89247 * C89217) *
              C813 +
          (((C89 * C831 - C100 * C820 + C90 * C833 - C102 * C821 + C91 * C835 -
             C104 * C822) *
                C180 +
            (C89 * C1146 - C100 * C1138 + C90 * C1147 - C102 * C1139 +
             C91 * C1148 - C104 * C1140) *
                C89236) *
               C89247 * C9228 +
           ((C100 * C8516 - C89 * C8521 + C102 * C8515 - C90 * C8519 +
             C104 * C8514 - C91 * C8517) *
                C180 +
            (C100 * C8760 - C89 * C8763 + C102 * C8761 - C90 * C8764 +
             C104 * C8762 - C91 * C8765) *
                C89236) *
               C89247 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 + C91 * C116 -
             C104 * C108) *
                C180 +
            (C89 * C352 - C100 * C346 + C90 * C353 - C102 * C347 + C91 * C354 -
             C104 * C348) *
                C89236) *
               C89247 * C9228 +
           ((C100 * C1724 - C89 * C1734 + C102 * C1723 - C90 * C1732 +
             C104 * C1722 - C91 * C1730) *
                C180 +
            (C100 * C2040 - C89 * C2048 + C102 * C2041 - C90 * C2049 +
             C104 * C2042 - C91 * C2050) *
                C89236) *
               C89247 * C89217) *
              C89137 * C5075 +
          (((C100 * C107 - C89 * C114 + C102 * C108 - C90 * C116 + C104 * C109 -
             C91 * C118) *
                C180 +
            (C100 * C347 - C89 * C353 + C102 * C348 - C90 * C354 + C104 * C349 -
             C91 * C355) *
                C89236) *
               C89247 * C9228 +
           ((C89 * C1732 - C100 * C1723 + C90 * C1730 - C102 * C1722 +
             C91 * C1742 - C104 * C1728) *
                C180 +
            (C89 * C2049 - C100 * C2041 + C90 * C2050 - C102 * C2042 +
             C91 * C2054 - C104 * C2046) *
                C89236) *
               C89247 * C89217) *
              C89137 * C5076 +
          (((C89 * C116 - C100 * C108 + C90 * C118 - C102 * C109 + C91 * C120 -
             C104 * C110) *
                C180 +
            (C89 * C354 - C100 * C348 + C90 * C355 - C102 * C349 + C91 * C356 -
             C104 * C350) *
                C89236) *
               C89247 * C9228 +
           ((C100 * C1722 - C89 * C1730 + C102 * C1728 - C90 * C1742 +
             C104 * C3352 - C91 * C3353) *
                C180 +
            (C100 * C2042 - C89 * C2050 + C102 * C2046 - C90 * C2054 +
             C104 * C3594 - C91 * C3595) *
                C89236) *
               C89247 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C89093 * C112 - C13261 * C106) * C13313 +
            (C89093 * C352 - C13261 * C346) * C13258 +
            (C14060 - C14061) * C13314 + (C14062 - C14063) * C13259 +
            C14084 * C13315 + C14085 * C13260) *
               C89247 * C9228 +
           ((C13261 * C1724 - C89093 * C1734) * C13313 +
            (C13261 * C2040 - C89093 * C2048) * C13258 +
            (C17042 - C17043) * C13314 + (C17044 - C17045) * C13259 +
            C21373 * C13315 + C21374 * C13260) *
               C89247 * C89217) *
              C89137 * C5075 +
          (((C13261 * C107 - C89093 * C114) * C13313 +
            (C13261 * C347 - C89093 * C353) * C13258 +
            (C14072 - C14073) * C13314 + (C14074 - C14075) * C13259 +
            C14086 * C13315 + C14087 * C13260) *
               C89247 * C9228 +
           ((C89093 * C1732 - C13261 * C1723) * C13313 +
            (C89093 * C2049 - C13261 * C2041) * C13258 +
            (C17050 - C17051) * C13314 + (C17052 - C17053) * C13259 +
            (C17054 - C17055) * C13315 + (C17056 - C17057) * C13260) *
               C89247 * C89217) *
              C89137 * C5076 +
          (((C89093 * C116 - C13261 * C108) * C13313 +
            (C89093 * C354 - C13261 * C348) * C13258 +
            (C15538 - C15539) * C13314 + (C15540 - C15541) * C13259 +
            (C15542 - C15543) * C13315 + (C15544 - C15545) * C13260) *
               C89247 * C9228 +
           ((C13261 * C1722 - C89093 * C1730) * C13313 +
            (C13261 * C2042 - C89093 * C2050) * C13258 +
            (C13261 * C4099 - C89093 * C4105) * C13314 +
            (C13261 * C4441 - C89093 * C4445) * C13259 +
            (C13261 * C8514 - C89093 * C8517) * C13315 +
            (C13261 * C8762 - C89093 * C8765) * C13260) *
               C89247 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C89093 * C112 - C13261 * C106) * C13313 +
            (C89093 * C352 - C13261 * C346) * C13258 +
            (C14060 - C14061) * C13314 + (C14062 - C14063) * C13259 +
            C14084 * C13315 + C14085 * C13260) *
               C89247 * C9228 +
           ((C13261 * C1724 - C89093 * C1734) * C13313 +
            (C13261 * C2040 - C89093 * C2048) * C13258 +
            (C17042 - C17043) * C13314 + (C17044 - C17045) * C13259 +
            C21373 * C13315 + C21374 * C13260) *
               C89247 * C89217) *
              C812 +
          (((C14061 - C14060) * C13313 + (C14063 - C14062) * C13258 +
            (C14065 - C14064) * C13314 + (C14067 - C14066) * C13259 +
            C18488 * C13315 + C18489 * C13260) *
               C89247 * C9228 +
           ((C17043 - C17042) * C13313 + (C17045 - C17044) * C13258 +
            (C17047 - C17046) * C13314 + (C17049 - C17048) * C13259 +
            (C21375 - C21376) * C13315 + (C21377 - C21378) * C13260) *
               C89247 * C89217) *
              C813 +
          ((C14084 * C13313 + C14085 * C13258 + (C14069 - C14068) * C13314 +
            (C14071 - C14070) * C13259 + (C18490 - C18491) * C13315 +
            (C18492 - C18493) * C13260) *
               C89247 * C9228 +
           (C21373 * C13313 + C21374 * C13258 + (C21376 - C21375) * C13314 +
            (C21378 - C21377) * C13259 +
            (C13261 * C21123 - C89093 * C21124) * C13315 +
            (C13261 * C21370 - C89093 * C21371) * C13260) *
               C89247 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C180 +
             (C89093 * C352 - C13261 * C346) * C89236) *
                C25848 +
            ((C27308 - C27309) * C180 + (C27310 - C27311) * C89236) * C25849 +
            C27340 * C25850) *
               C9228 +
           (((C27309 - C27308) * C180 + (C27311 - C27310) * C89236) * C25848 +
            ((C27313 - C27312) * C180 + (C27315 - C27314) * C89236) * C25849 +
            ((C27316 - C27317) * C180 + (C27318 - C27319) * C89236) * C25850) *
               C89217) *
              C89137 * C5075 +
          ((((C13261 * C107 - C89093 * C114) * C180 +
             (C13261 * C347 - C89093 * C353) * C89236) *
                C25848 +
            ((C27320 - C27321) * C180 + (C27322 - C27323) * C89236) * C25849 +
            C27341 * C25850) *
               C9228 +
           (((C27321 - C27320) * C180 + (C27323 - C27322) * C89236) * C25848 +
            ((C27325 - C27324) * C180 + (C27327 - C27326) * C89236) * C25849 +
            ((C27328 - C27329) * C180 + (C27330 - C27331) * C89236) * C25850) *
               C89217) *
              C89137 * C5076 +
          ((((C89093 * C116 - C13261 * C108) * C180 +
             (C89093 * C354 - C13261 * C348) * C89236) *
                C25848 +
            ((C28758 - C28759) * C180 + (C28760 - C28761) * C89236) * C25849 +
            ((C28762 - C28763) * C180 + (C28764 - C28765) * C89236) * C25850) *
               C9228 +
           (((C28759 - C28758) * C180 + (C28761 - C28760) * C89236) * C25848 +
            ((C28763 - C28762) * C180 + (C28765 - C28764) * C89236) * C25849 +
            ((C13261 * C10542 - C89093 * C10545) * C180 +
             (C13261 * C10718 - C89093 * C10721) * C89236) *
                C25850) *
               C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C180 +
             (C89093 * C352 - C13261 * C346) * C89236) *
                C25848 +
            ((C27308 - C27309) * C180 + (C27310 - C27311) * C89236) * C25849 +
            C27340 * C25850) *
               C9228 +
           (((C27309 - C27308) * C180 + (C27311 - C27310) * C89236) * C25848 +
            ((C27313 - C27312) * C180 + (C27315 - C27314) * C89236) * C25849 +
            ((C27316 - C27317) * C180 + (C27318 - C27319) * C89236) * C25850) *
               C89217) *
              C812 +
          ((((C14061 - C14060) * C180 + (C14063 - C14062) * C89236) * C25848 +
            ((C17042 - C17043) * C180 + (C17044 - C17045) * C89236) * C25849 +
            C31542 * C25850) *
               C9228 +
           (((C17043 - C17042) * C180 + (C17045 - C17044) * C89236) * C25848 +
            ((C19096 - C19097) * C180 + (C19098 - C19099) * C89236) * C25849 +
            ((C31536 - C31537) * C180 + (C31538 - C31539) * C89236) * C25850) *
               C89217) *
              C813 +
          (((C14084 * C180 + C14085 * C89236) * C25848 +
            ((C17047 - C17046) * C180 + (C17049 - C17048) * C89236) * C25849 +
            ((C19100 - C19101) * C180 + (C19102 - C19103) * C89236) * C25850) *
               C9228 +
           ((C21373 * C180 + C21374 * C89236) * C25848 +
            ((C19101 - C19100) * C180 + (C19103 - C19102) * C89236) * C25849 +
            ((C13261 * C23152 - C89093 * C23154) * C180 +
             (C13261 * C23319 - C89093 * C23321) * C89236) *
                C25850) *
               C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eeyy[44] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C89 +
            C440 * C90 + C441 * C91) *
               C89247 * C9228 -
           (C2163 * C91 + C2164 * C90 +
            (C180 * C1828 - C408 * C1724 - C180 * C2040 + C89236 * C2132) *
                C89) *
               C89247 * C89217) *
              C812 +
          (((C180 * C4211 - C408 * C4097 - C180 * C4439 + C89236 * C4545) *
                C89 +
            C4562 * C90 + C4563 * C91) *
               C89247 * C89217 -
           (C1258 * C91 + C1259 * C90 +
            (C180 * C923 - C408 * C819 - C180 * C1135 + C89236 * C1227) * C89) *
               C89247 * C9228) *
              C813 +
          (((C180 * C926 - C408 * C820 - C180 * C1138 + C89236 * C1228) * C89 +
            C1260 * C90 + C1261 * C91) *
               C89247 * C9228 -
           ((C180 * C8602 - C408 * C8514 - C180 * C8762 + C89236 * C8840) *
                C91 +
            (C180 * C8601 - C408 * C8515 - C180 * C8761 + C89236 * C8841) *
                C90 +
            (C180 * C8600 - C408 * C8516 - C180 * C8760 + C89236 * C8842) *
                C89) *
               C89247 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C89 +
            C440 * C90 + C441 * C91) *
               C89247 * C9228 -
           (C2163 * C91 + C2164 * C90 +
            (C180 * C1828 - C408 * C1724 - C180 * C2040 + C89236 * C2132) *
                C89) *
               C89247 * C89217) *
              C89137 * C5075 +
          ((C2164 * C89 + C2163 * C90 + C3678 * C91) * C89247 * C89217 -
           (C442 * C91 + C441 * C90 + C440 * C89) * C89247 * C9228) *
              C89137 * C5076 +
          ((C441 * C89 + C442 * C90 + C443 * C91) * C89247 * C9228 -
           ((C180 * C3430 - C408 * C3352 - C180 * C3594 + C89236 * C3670) *
                C91 +
            C3678 * C90 + C2163 * C89) *
               C89247 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13313 * C181 - C13466 * C106 - C13313 * C346 + C13258 * C409 +
            C13314 * C923 - C13467 * C819 - C13314 * C1135 + C13259 * C1227 +
            C13315 * C926 - C13468 * C820 - C13315 * C1138 + C13260 * C1228) *
               C89093 * C89247 * C9228 -
           (C13315 * C8600 - C13468 * C8516 - C13315 * C8760 + C13260 * C8842 +
            C13314 * C4211 - C13467 * C4097 - C13314 * C4439 + C13259 * C4545 +
            C13313 * C1828 - C13466 * C1724 - C13313 * C2040 + C13258 * C2132) *
               C89093 * C89247 * C89217) *
              C89137 * C5075 +
          ((C13313 * C1829 - C13466 * C1723 - C13313 * C2041 + C13258 * C2131 +
            C13314 * C4212 - C13467 * C4098 - C13314 * C4440 + C13259 * C4546 +
            C13315 * C8601 - C13468 * C8515 - C13315 * C8761 + C13260 * C8841) *
               C89093 * C89247 * C89217 -
           (C13315 * C927 - C13468 * C821 - C13315 * C1139 + C13260 * C1229 +
            C13314 * C924 - C13467 * C818 - C13314 * C1136 + C13259 * C1226 +
            C13313 * C182 - C13466 * C107 - C13313 * C347 + C13258 * C410) *
               C89093 * C89247 * C9228) *
              C89137 * C5076 +
          ((C13313 * C183 - C13466 * C108 - C13313 * C348 + C13258 * C411 +
            C13314 * C925 - C13467 * C817 - C13314 * C1137 + C13259 * C1225 +
            C13315 * C928 - C13468 * C822 - C13315 * C1140 + C13260 * C1230) *
               C89093 * C89247 * C9228 -
           (C13315 * C8602 - C13468 * C8514 - C13315 * C8762 + C13260 * C8840 +
            C13314 * C4213 - C13467 * C4099 - C13314 * C4441 + C13259 * C4547 +
            C13313 * C1830 - C13466 * C1722 - C13313 * C2042 + C13258 * C2130) *
               C89093 * C89247 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13313 * C181 - C13466 * C106 - C13313 * C346 + C13258 * C409 +
            C13314 * C923 - C13467 * C819 - C13314 * C1135 + C13259 * C1227 +
            C13315 * C926 - C13468 * C820 - C13315 * C1138 + C13260 * C1228) *
               C89093 * C89247 * C9228 -
           (C13315 * C8600 - C13468 * C8516 - C13315 * C8760 + C13260 * C8842 +
            C13314 * C4211 - C13467 * C4097 - C13314 * C4439 + C13259 * C4545 +
            C13313 * C1828 - C13466 * C1724 - C13313 * C2040 + C13258 * C2132) *
               C89093 * C89247 * C89217) *
              C812 +
          ((C13313 * C4211 - C13466 * C4097 - C13313 * C4439 + C13258 * C4545 +
            C13314 * C8600 - C13467 * C8516 - C13314 * C8760 + C13259 * C8842 +
            C13315 * C16821 - C13468 * C16683 - C13315 * C17037 +
            C13260 * C17155) *
               C89093 * C89247 * C89217 -
           (C13315 * C5787 - C13468 * C5727 - C13315 * C5899 + C13260 * C5957 +
            C13314 * C926 - C13467 * C820 - C13314 * C1138 + C13259 * C1228 +
            C13313 * C923 - C13466 * C819 - C13313 * C1135 + C13258 * C1227) *
               C89093 * C89247 * C9228) *
              C813 +
          ((C13313 * C926 - C13466 * C820 - C13313 * C1138 + C13258 * C1228 +
            C13314 * C5787 - C13467 * C5727 - C13314 * C5899 + C13259 * C5957 +
            C13315 * C13873 - C13468 * C13743 - C13315 * C14055 +
            C13260 * C14161) *
               C89093 * C89247 * C9228 -
           (C13315 * C21209 - C13468 * C21123 - C13315 * C21370 +
            C13260 * C21452 + C13314 * C16821 - C13467 * C16683 -
            C13314 * C17037 + C13259 * C17155 + C13313 * C8600 -
            C13466 * C8516 - C13313 * C8760 + C13258 * C8842) *
               C89093 * C89247 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C89093 *
                C25848 +
            C27448 * C25849 + C27449 * C25850) *
               C9228 -
           (C27450 * C25850 + C27449 * C25849 + C27448 * C25848) * C89217) *
              C89137 * C5075 +
          ((C27430 * C25848 + C27431 * C25849 + C27451 * C25850) * C89217 -
           (C27431 * C25850 + C27430 * C25849 + C440 * C89093 * C25848) *
               C9228) *
              C89137 * C5076 +
          ((C441 * C89093 * C25848 + C28840 * C25849 + C28841 * C25850) *
               C9228 -
           ((C180 * C10606 - C408 * C10542 - C180 * C10718 + C89236 * C10772) *
                C89093 * C25850 +
            C28841 * C25849 + C28840 * C25848) *
               C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C89093 *
                C25848 +
            C27448 * C25849 + C27449 * C25850) *
               C9228 -
           (C27450 * C25850 + C27449 * C25849 + C27448 * C25848) * C89217) *
              C812 +
          ((C29688 * C25848 + C29689 * C25849 + C31625 * C25850) * C89217 -
           (C29689 * C25850 + C29688 * C25849 +
            (C180 * C923 - C408 * C819 - C180 * C1135 + C89236 * C1227) *
                C89093 * C25848) *
               C9228) *
              C813 +
          (((C180 * C926 - C408 * C820 - C180 * C1138 + C89236 * C1228) *
                C89093 * C25848 +
            C33873 * C25849 + C33874 * C25850) *
               C9228 -
           ((C180 * C23211 - C408 * C23152 - C180 * C23319 + C89236 * C23372) *
                C89093 * C25850 +
            C33874 * C25849 + C33873 * C25848) *
               C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eeyz[44] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C180 +
             (C89247 * C493 - C263 * C346) * C89236) *
                C89 +
            ((C277 - C278) * C180 + (C500 - C501) * C89236) * C90 +
            C514 * C91) *
               C9228 +
           (((C263 * C1724 - C89247 * C1934) * C180 +
             (C263 * C2040 - C89247 * C2240) * C89236) *
                C89 +
            ((C1951 - C1952) * C180 + (C2249 - C2250) * C89236) * C90 +
            C3759 * C91) *
               C89217) *
              C812 +
          ((((C263 * C819 - C89247 * C1029) * C180 +
             (C263 * C1135 - C89247 * C1335) * C89236) *
                C89 +
            ((C1046 - C1047) * C180 + (C1344 - C1345) * C89236) * C90 +
            C3036 * C91) *
               C9228 +
           (((C89247 * C4325 - C263 * C4097) * C180 +
             (C89247 * C4661 - C263 * C4439) * C89236) *
                C89 +
            ((C4334 - C4335) * C180 + (C4666 - C4667) * C89236) * C90 +
            ((C4338 - C4339) * C180 + (C4668 - C4669) * C89236) * C91) *
               C89217) *
              C813 +
          ((((C89247 * C1032 - C263 * C820) * C180 +
             (C89247 * C1338 - C263 * C1138) * C89236) *
                C89 +
            ((C1054 - C1055) * C180 + (C1348 - C1349) * C89236) * C90 +
            ((C1058 - C1059) * C180 + (C1350 - C1351) * C89236) * C91) *
               C9228 +
           (((C263 * C8516 - C89247 * C8680) * C180 +
             (C263 * C8760 - C89247 * C8917) * C89236) *
                C89 +
            ((C263 * C8515 - C89247 * C8681) * C180 +
             (C263 * C8761 - C89247 * C8918) * C89236) *
                C90 +
            ((C263 * C8514 - C89247 * C8682) * C180 +
             (C263 * C8762 - C89247 * C8919) * C89236) *
                C91) *
               C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C180 +
             (C89247 * C493 - C263 * C346) * C89236) *
                C89 +
            ((C277 - C278) * C180 + (C500 - C501) * C89236) * C90 +
            C514 * C91) *
               C9228 +
           (((C263 * C1724 - C89247 * C1934) * C180 +
             (C263 * C2040 - C89247 * C2240) * C89236) *
                C89 +
            ((C1951 - C1952) * C180 + (C2249 - C2250) * C89236) * C90 +
            C3759 * C91) *
               C89217) *
              C89137 * C5075 +
          ((((C278 - C277) * C180 + (C501 - C500) * C89236) * C89 +
            ((C282 - C281) * C180 + (C504 - C503) * C89236) * C90 +
            C515 * C91) *
               C9228 +
           (((C1952 - C1951) * C180 + (C2250 - C2249) * C89236) * C89 +
            ((C1956 - C1955) * C180 + (C2252 - C2251) * C89236) * C90 +
            ((C3517 - C3518) * C180 + (C3756 - C3757) * C89236) * C91) *
               C89217) *
              C89137 * C5076 +
          ((C514 * C89 + ((C286 - C285) * C180 + (C507 - C506) * C89236) * C90 +
            ((C289 - C290) * C180 + (C508 - C509) * C89236) * C91) *
               C9228 +
           (C3759 * C89 +
            ((C3518 - C3517) * C180 + (C3757 - C3756) * C89236) * C90 +
            ((C263 * C3352 - C89247 * C3512) * C180 +
             (C263 * C3594 - C89247 * C3752) * C89236) *
                C91) *
               C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C13313 +
            (C89247 * C493 - C263 * C346) * C13258 +
            (C13956 - C13957) * C13314 + (C14240 - C14241) * C13259 +
            C13974 * C13315 + C14249 * C13260) *
               C89093 * C9228 +
           ((C263 * C1724 - C89247 * C1934) * C13313 +
            (C263 * C2040 - C89247 * C2240) * C13258 +
            (C16928 - C16929) * C13314 + (C17258 - C17259) * C13259 +
            C21288 * C13315 + C21529 * C13260) *
               C89093 * C89217) *
              C89137 * C5075 +
          (((C278 - C277) * C13313 + (C501 - C500) * C13258 +
            (C1046 - C1047) * C13314 + (C1344 - C1345) * C13259 +
            C13968 * C13315 + C14246 * C13260) *
               C89093 * C9228 +
           ((C1952 - C1951) * C13313 + (C2250 - C2249) * C13258 +
            (C4334 - C4335) * C13314 + (C4666 - C4667) * C13259 +
            (C16936 - C16937) * C13315 + (C17262 - C17263) * C13260) *
               C89093 * C89217) *
              C89137 * C5076 +
          ((C293 * C13313 + C510 * C13258 + (C1051 - C1050) * C13314 +
            (C1347 - C1346) * C13259 + (C1058 - C1059) * C13315 +
            (C1350 - C1351) * C13260) *
               C89093 * C9228 +
           (C3515 * C13313 + C3755 * C13258 + (C4339 - C4338) * C13314 +
            (C4669 - C4668) * C13259 +
            (C263 * C8514 - C89247 * C8682) * C13315 +
            (C263 * C8762 - C89247 * C8919) * C13260) *
               C89093 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C13313 +
            (C89247 * C493 - C263 * C346) * C13258 +
            (C13956 - C13957) * C13314 + (C14240 - C14241) * C13259 +
            C13974 * C13315 + C14249 * C13260) *
               C89093 * C9228 +
           ((C263 * C1724 - C89247 * C1934) * C13313 +
            (C263 * C2040 - C89247 * C2240) * C13258 +
            (C16928 - C16929) * C13314 + (C17258 - C17259) * C13259 +
            C21288 * C13315 + C21529 * C13260) *
               C89093 * C89217) *
              C812 +
          (((C13957 - C13956) * C13313 + (C14241 - C14240) * C13258 +
            (C13961 - C13960) * C13314 + (C14243 - C14242) * C13259 +
            C18427 * C13315 + C18596 * C13260) *
               C89093 * C9228 +
           ((C16929 - C16928) * C13313 + (C17259 - C17258) * C13258 +
            (C16933 - C16932) * C13314 + (C17261 - C17260) * C13259 +
            (C21290 - C21291) * C13315 + (C21530 - C21531) * C13260) *
               C89093 * C89217) *
              C813 +
          ((C13974 * C13313 + C14249 * C13258 + (C13965 - C13964) * C13314 +
            (C14245 - C14244) * C13259 + (C18429 - C18430) * C13315 +
            (C18597 - C18598) * C13260) *
               C89093 * C9228 +
           (C21288 * C13313 + C21529 * C13258 + (C21291 - C21290) * C13314 +
            (C21531 - C21530) * C13259 +
            (C263 * C21123 - C89247 * C21285) * C13315 +
            (C263 * C21370 - C89247 * C21527) * C13260) *
               C89093 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C25848 * C264 - C25951 * C106 + C25849 * C1934 - C25952 * C1724 +
             C25850 * C1937 - C25953 * C1725) *
                C180 +
            (C25848 * C493 - C25951 * C346 + C25849 * C2240 - C25952 * C2040 +
             C25850 * C2243 - C25953 * C2043) *
                C89236) *
               C89093 * C9228 +
           ((C25951 * C1724 - C25848 * C1934 + C25952 * C1725 - C25849 * C1937 +
             C25953 * C10544 - C25850 * C10660) *
                C180 +
            (C25951 * C2040 - C25848 * C2240 + C25952 * C2043 - C25849 * C2243 +
             C25953 * C10716 - C25850 * C10825) *
                C89236) *
               C89093 * C89217) *
              C89137 * C5075 +
          (((C25951 * C107 - C25848 * C265 + C25952 * C1723 - C25849 * C1935 +
             C25953 * C1726 - C25850 * C1938) *
                C180 +
            (C25951 * C347 - C25848 * C494 + C25952 * C2041 - C25849 * C2241 +
             C25953 * C2044 - C25850 * C2244) *
                C89236) *
               C89093 * C9228 +
           ((C25848 * C1935 - C25951 * C1723 + C25849 * C1938 - C25952 * C1726 +
             C25850 * C10661 - C25953 * C10543) *
                C180 +
            (C25848 * C2241 - C25951 * C2041 + C25849 * C2244 - C25952 * C2044 +
             C25850 * C10826 - C25953 * C10717) *
                C89236) *
               C89093 * C89217) *
              C89137 * C5076 +
          (((C25848 * C266 - C25951 * C108 + C25849 * C1936 - C25952 * C1722 +
             C25850 * C1939 - C25953 * C1727) *
                C180 +
            (C25848 * C495 - C25951 * C348 + C25849 * C2242 - C25952 * C2042 +
             C25850 * C2245 - C25953 * C2045) *
                C89236) *
               C89093 * C9228 +
           ((C25951 * C1722 - C25848 * C1936 + C25952 * C1727 - C25849 * C1939 +
             C25953 * C10542 - C25850 * C10662) *
                C180 +
            (C25951 * C2042 - C25848 * C2242 + C25952 * C2045 - C25849 * C2245 +
             C25953 * C10718 - C25850 * C10827) *
                C89236) *
               C89093 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C25848 * C264 - C25951 * C106 + C25849 * C1934 - C25952 * C1724 +
             C25850 * C1937 - C25953 * C1725) *
                C180 +
            (C25848 * C493 - C25951 * C346 + C25849 * C2240 - C25952 * C2040 +
             C25850 * C2243 - C25953 * C2043) *
                C89236) *
               C89093 * C9228 +
           ((C25951 * C1724 - C25848 * C1934 + C25952 * C1725 - C25849 * C1937 +
             C25953 * C10544 - C25850 * C10660) *
                C180 +
            (C25951 * C2040 - C25848 * C2240 + C25952 * C2043 - C25849 * C2243 +
             C25953 * C10716 - C25850 * C10825) *
                C89236) *
               C89093 * C89217) *
              C812 +
          (((C25951 * C819 - C25848 * C1029 + C25952 * C4097 - C25849 * C4325 +
             C25953 * C6249 - C25850 * C6413) *
                C180 +
            (C25951 * C1135 - C25848 * C1335 + C25952 * C4439 - C25849 * C4661 +
             C25953 * C6493 - C25850 * C6650) *
                C89236) *
               C89093 * C9228 +
           ((C25848 * C4325 - C25951 * C4097 + C25849 * C6413 - C25952 * C6249 +
             C25850 * C23264 - C25953 * C23153) *
                C180 +
            (C25848 * C4661 - C25951 * C4439 + C25849 * C6650 - C25952 * C6493 +
             C25850 * C23424 - C25953 * C23318) *
                C89236) *
               C89093 * C89217) *
              C813 +
          (((C25848 * C1032 - C25951 * C820 + C25849 * C8680 - C25952 * C8516 +
             C25850 * C14761 - C25953 * C14601) *
                C180 +
            (C25848 * C1338 - C25951 * C1138 + C25849 * C8917 - C25952 * C8760 +
             C25850 * C14993 - C25953 * C14839) *
                C89236) *
               C89093 * C9228 +
           ((C25951 * C8516 - C25848 * C8680 + C25952 * C14601 -
             C25849 * C14761 + C25953 * C23152 - C25850 * C23265) *
                C180 +
            (C25951 * C8760 - C25848 * C8917 + C25952 * C14839 -
             C25849 * C14993 + C25953 * C23319 - C25850 * C23425) *
                C89236) *
               C89093 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eezx[44] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 + C91 * C116 -
             C104 * C108) *
                C263 +
            (C89 * C571 - C100 * C565 + C90 * C572 - C102 * C566 + C91 * C573 -
             C104 * C567) *
                C89247) *
               C89236 * C9228 +
           ((C100 * C1724 - C89 * C1734 + C102 * C1723 - C90 * C1732 +
             C104 * C1722 - C91 * C1730) *
                C263 +
            (C100 * C2330 - C89 * C2338 + C102 * C2331 - C90 * C2339 +
             C104 * C2332 - C91 * C2340) *
                C89247) *
               C89236 * C89217) *
              C812 +
          (((C100 * C819 - C89 * C829 + C102 * C818 - C90 * C827 + C104 * C817 -
             C91 * C825) *
                C263 +
            (C100 * C1425 - C89 * C1433 + C102 * C1426 - C90 * C1434 +
             C104 * C1427 - C91 * C1435) *
                C89247) *
               C89236 * C9228 +
           ((C89 * C4101 - C100 * C4097 + C90 * C4103 - C102 * C4098 +
             C91 * C4105 - C104 * C4099) *
                C263 +
            (C89 * C4771 - C100 * C4767 + C90 * C4772 - C102 * C4768 +
             C91 * C4773 - C104 * C4769) *
                C89247) *
               C89236 * C89217) *
              C813 +
          (((C89 * C831 - C100 * C820 + C90 * C833 - C102 * C821 + C91 * C835 -
             C104 * C822) *
                C263 +
            (C89 * C1436 - C100 * C1428 + C90 * C1437 - C102 * C1429 +
             C91 * C1438 - C104 * C1430) *
                C89247) *
               C89236 * C9228 +
           ((C100 * C8516 - C89 * C8521 + C102 * C8515 - C90 * C8519 +
             C104 * C8514 - C91 * C8517) *
                C263 +
            (C100 * C8994 - C89 * C8997 + C102 * C8995 - C90 * C8998 +
             C104 * C8996 - C91 * C8999) *
                C89247) *
               C89236 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 + C91 * C116 -
             C104 * C108) *
                C263 +
            (C89 * C571 - C100 * C565 + C90 * C572 - C102 * C566 + C91 * C573 -
             C104 * C567) *
                C89247) *
               C89236 * C9228 +
           ((C100 * C1724 - C89 * C1734 + C102 * C1723 - C90 * C1732 +
             C104 * C1722 - C91 * C1730) *
                C263 +
            (C100 * C2330 - C89 * C2338 + C102 * C2331 - C90 * C2339 +
             C104 * C2332 - C91 * C2340) *
                C89247) *
               C89236 * C89217) *
              C89137 * C5075 +
          (((C100 * C107 - C89 * C114 + C102 * C108 - C90 * C116 + C104 * C109 -
             C91 * C118) *
                C263 +
            (C100 * C566 - C89 * C572 + C102 * C567 - C90 * C573 + C104 * C568 -
             C91 * C574) *
                C89247) *
               C89236 * C9228 +
           ((C89 * C1732 - C100 * C1723 + C90 * C1730 - C102 * C1722 +
             C91 * C1742 - C104 * C1728) *
                C263 +
            (C89 * C2339 - C100 * C2331 + C90 * C2340 - C102 * C2332 +
             C91 * C2344 - C104 * C2336) *
                C89247) *
               C89236 * C89217) *
              C89137 * C5076 +
          (((C89 * C116 - C100 * C108 + C90 * C118 - C102 * C109 + C91 * C120 -
             C104 * C110) *
                C263 +
            (C89 * C573 - C100 * C567 + C90 * C574 - C102 * C568 + C91 * C575 -
             C104 * C569) *
                C89247) *
               C89236 * C9228 +
           ((C100 * C1722 - C89 * C1730 + C102 * C1728 - C90 * C1742 +
             C104 * C3352 - C91 * C3353) *
                C263 +
            (C100 * C2332 - C89 * C2340 + C102 * C2336 - C90 * C2344 +
             C104 * C3833 - C91 * C3834) *
                C89247) *
               C89236 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C263 +
             (C89093 * C571 - C13261 * C565) * C89247) *
                C13258 +
            ((C14060 - C14061) * C263 + (C14328 - C14329) * C89247) * C13259 +
            C14346 * C13260) *
               C9228 +
           (((C13261 * C1724 - C89093 * C1734) * C263 +
             (C13261 * C2330 - C89093 * C2338) * C89247) *
                C13258 +
            ((C17042 - C17043) * C263 + (C17366 - C17367) * C89247) * C13259 +
            C21613 * C13260) *
               C89217) *
              C89137 * C5075 +
          ((((C13261 * C107 - C89093 * C114) * C263 +
             (C13261 * C566 - C89093 * C572) * C89247) *
                C13258 +
            ((C14072 - C14073) * C263 + (C14335 - C14336) * C89247) * C13259 +
            C14347 * C13260) *
               C9228 +
           (((C89093 * C1732 - C13261 * C1723) * C263 +
             (C89093 * C2339 - C13261 * C2331) * C89247) *
                C13258 +
            ((C17050 - C17051) * C263 + (C17370 - C17371) * C89247) * C13259 +
            ((C17054 - C17055) * C263 + (C17372 - C17373) * C89247) * C13260) *
               C89217) *
              C89137 * C5076 +
          ((((C89093 * C116 - C13261 * C108) * C263 +
             (C89093 * C573 - C13261 * C567) * C89247) *
                C13258 +
            ((C15538 - C15539) * C263 + (C15768 - C15769) * C89247) * C13259 +
            ((C15542 - C15543) * C263 + (C15770 - C15771) * C89247) * C13260) *
               C9228 +
           (((C13261 * C1722 - C89093 * C1730) * C263 +
             (C13261 * C2332 - C89093 * C2340) * C89247) *
                C13258 +
            ((C13261 * C4099 - C89093 * C4105) * C263 +
             (C13261 * C4769 - C89093 * C4773) * C89247) *
                C13259 +
            ((C13261 * C8514 - C89093 * C8517) * C263 +
             (C13261 * C8996 - C89093 * C8999) * C89247) *
                C13260) *
               C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C263 +
             (C89093 * C571 - C13261 * C565) * C89247) *
                C13258 +
            ((C14060 - C14061) * C263 + (C14328 - C14329) * C89247) * C13259 +
            C14346 * C13260) *
               C9228 +
           (((C13261 * C1724 - C89093 * C1734) * C263 +
             (C13261 * C2330 - C89093 * C2338) * C89247) *
                C13258 +
            ((C17042 - C17043) * C263 + (C17366 - C17367) * C89247) * C13259 +
            C21613 * C13260) *
               C89217) *
              C812 +
          ((((C14061 - C14060) * C263 + (C14329 - C14328) * C89247) * C13258 +
            ((C14065 - C14064) * C263 + (C14332 - C14331) * C89247) * C13259 +
            C18656 * C13260) *
               C9228 +
           (((C17043 - C17042) * C263 + (C17367 - C17366) * C89247) * C13258 +
            ((C17047 - C17046) * C263 + (C17369 - C17368) * C89247) * C13259 +
            ((C21375 - C21376) * C263 + (C21610 - C21611) * C89247) * C13260) *
               C89217) *
              C813 +
          ((C14346 * C13258 +
            ((C14069 - C14068) * C263 + (C14334 - C14333) * C89247) * C13259 +
            ((C18490 - C18491) * C263 + (C18653 - C18654) * C89247) * C13260) *
               C9228 +
           (C21613 * C13258 +
            ((C21376 - C21375) * C263 + (C21611 - C21610) * C89247) * C13259 +
            ((C13261 * C21123 - C89093 * C21124) * C263 +
             (C13261 * C21605 - C89093 * C21606) * C89247) *
                C13260) *
               C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89093 * C112 - C13261 * C106) * C25951 +
            (C89093 * C571 - C13261 * C565) * C25848 +
            (C27308 - C27309) * C25952 + (C27606 - C27607) * C25849 +
            C27332 * C25953 + C27618 * C25850) *
               C89236 * C9228 +
           ((C27309 - C27308) * C25951 + (C27607 - C27606) * C25848 +
            (C27313 - C27312) * C25952 + (C27609 - C27608) * C25849 +
            (C27316 - C27317) * C25953 + (C27610 - C27611) * C25850) *
               C89236 * C89217) *
              C89137 * C5075 +
          (((C13261 * C107 - C89093 * C114) * C25951 +
            (C13261 * C566 - C89093 * C572) * C25848 +
            (C27320 - C27321) * C25952 + (C27612 - C27613) * C25849 +
            C27334 * C25953 + C27619 * C25850) *
               C89236 * C9228 +
           ((C27321 - C27320) * C25951 + (C27613 - C27612) * C25848 +
            (C27325 - C27324) * C25952 + (C27615 - C27614) * C25849 +
            (C27328 - C27329) * C25953 + (C27616 - C27617) * C25850) *
               C89236 * C89217) *
              C89137 * C5076 +
          (((C89093 * C116 - C13261 * C108) * C25951 +
            (C89093 * C573 - C13261 * C567) * C25848 +
            (C28758 - C28759) * C25952 + (C28990 - C28991) * C25849 +
            (C28762 - C28763) * C25953 + (C28992 - C28993) * C25850) *
               C89236 * C9228 +
           ((C28759 - C28758) * C25951 + (C28991 - C28990) * C25848 +
            (C28763 - C28762) * C25952 + (C28993 - C28992) * C25849 +
            (C13261 * C10542 - C89093 * C10545) * C25953 +
            (C13261 * C10880 - C89093 * C10883) * C25850) *
               C89236 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89093 * C112 - C13261 * C106) * C25951 +
            (C89093 * C571 - C13261 * C565) * C25848 +
            (C27308 - C27309) * C25952 + (C27606 - C27607) * C25849 +
            C27332 * C25953 + C27618 * C25850) *
               C89236 * C9228 +
           ((C27309 - C27308) * C25951 + (C27607 - C27606) * C25848 +
            (C27313 - C27312) * C25952 + (C27609 - C27608) * C25849 +
            (C27316 - C27317) * C25953 + (C27610 - C27611) * C25850) *
               C89236 * C89217) *
              C812 +
          (((C14061 - C14060) * C25951 + (C14329 - C14328) * C25848 +
            (C17042 - C17043) * C25952 + (C17366 - C17367) * C25849 +
            C31534 * C25953 + C31777 * C25850) *
               C89236 * C9228 +
           ((C17043 - C17042) * C25951 + (C17367 - C17366) * C25848 +
            (C19096 - C19097) * C25952 + (C19334 - C19335) * C25849 +
            (C31536 - C31537) * C25953 + (C31778 - C31779) * C25850) *
               C89236 * C89217) *
              C813 +
          ((C14084 * C25951 + C14342 * C25848 + (C17047 - C17046) * C25952 +
            (C17369 - C17368) * C25849 + (C19100 - C19101) * C25953 +
            (C19336 - C19337) * C25850) *
               C89236 * C9228 +
           (C21373 * C25951 + C21609 * C25848 + (C19101 - C19100) * C25952 +
            (C19337 - C19336) * C25849 +
            (C13261 * C23152 - C89093 * C23154) * C25953 +
            (C13261 * C23477 - C89093 * C23479) * C25850) *
               C89236 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eezy[44] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C263 +
             (C89236 * C627 - C180 * C565) * C89247) *
                C89 +
            ((C194 - C195) * C263 + (C634 - C635) * C89247) * C90 +
            C648 * C91) *
               C9228 +
           (((C180 * C1724 - C89236 * C1828) * C263 +
             (C180 * C2330 - C89236 * C2420) * C89247) *
                C89 +
            ((C1845 - C1846) * C263 + (C2429 - C2430) * C89247) * C90 +
            C3916 * C91) *
               C89217) *
              C812 +
          ((((C180 * C819 - C89236 * C923) * C263 +
             (C180 * C1425 - C89236 * C1515) * C89247) *
                C89 +
            ((C940 - C941) * C263 + (C1524 - C1525) * C89247) * C90 +
            C3193 * C91) *
               C9228 +
           (((C89236 * C4211 - C180 * C4097) * C263 +
             (C89236 * C4873 - C180 * C4767) * C89247) *
                C89 +
            ((C4220 - C4221) * C263 + (C4878 - C4879) * C89247) * C90 +
            ((C4224 - C4225) * C263 + (C4880 - C4881) * C89247) * C91) *
               C89217) *
              C813 +
          ((((C89236 * C926 - C180 * C820) * C263 +
             (C89236 * C1518 - C180 * C1428) * C89247) *
                C89 +
            ((C948 - C949) * C263 + (C1528 - C1529) * C89247) * C90 +
            ((C952 - C953) * C263 + (C1530 - C1531) * C89247) * C91) *
               C9228 +
           (((C180 * C8516 - C89236 * C8600) * C263 +
             (C180 * C8994 - C89236 * C9074) * C89247) *
                C89 +
            ((C180 * C8515 - C89236 * C8601) * C263 +
             (C180 * C8995 - C89236 * C9075) * C89247) *
                C90 +
            ((C180 * C8514 - C89236 * C8602) * C263 +
             (C180 * C8996 - C89236 * C9076) * C89247) *
                C91) *
               C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C263 +
             (C89236 * C627 - C180 * C565) * C89247) *
                C89 +
            ((C194 - C195) * C263 + (C634 - C635) * C89247) * C90 +
            C648 * C91) *
               C9228 +
           (((C180 * C1724 - C89236 * C1828) * C263 +
             (C180 * C2330 - C89236 * C2420) * C89247) *
                C89 +
            ((C1845 - C1846) * C263 + (C2429 - C2430) * C89247) * C90 +
            C3916 * C91) *
               C89217) *
              C89137 * C5075 +
          ((((C195 - C194) * C263 + (C635 - C634) * C89247) * C89 +
            ((C199 - C198) * C263 + (C638 - C637) * C89247) * C90 +
            C649 * C91) *
               C9228 +
           (((C1846 - C1845) * C263 + (C2430 - C2429) * C89247) * C89 +
            ((C1850 - C1849) * C263 + (C2432 - C2431) * C89247) * C90 +
            ((C3435 - C3436) * C263 + (C3913 - C3914) * C89247) * C91) *
               C89217) *
              C89137 * C5076 +
          ((C648 * C89 + ((C203 - C202) * C263 + (C641 - C640) * C89247) * C90 +
            ((C206 - C207) * C263 + (C642 - C643) * C89247) * C91) *
               C9228 +
           (C3916 * C89 +
            ((C3436 - C3435) * C263 + (C3914 - C3913) * C89247) * C90 +
            ((C180 * C3352 - C89236 * C3430) * C263 +
             (C180 * C3833 - C89236 * C3909) * C89247) *
                C91) *
               C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
             C13260 * C926 - C13315 * C820) *
                C263 +
            (C13258 * C627 - C13313 * C565 + C13259 * C1515 - C13314 * C1425 +
             C13260 * C1518 - C13315 * C1428) *
                C89247) *
               C89093 * C9228 +
           ((C13313 * C1724 - C13258 * C1828 + C13314 * C4097 - C13259 * C4211 +
             C13315 * C8516 - C13260 * C8600) *
                C263 +
            (C13313 * C2330 - C13258 * C2420 + C13314 * C4767 - C13259 * C4873 +
             C13315 * C8994 - C13260 * C9074) *
                C89247) *
               C89093 * C89217) *
              C89137 * C5075 +
          (((C13313 * C107 - C13258 * C182 + C13314 * C818 - C13259 * C924 +
             C13315 * C821 - C13260 * C927) *
                C263 +
            (C13313 * C566 - C13258 * C628 + C13314 * C1426 - C13259 * C1516 +
             C13315 * C1429 - C13260 * C1519) *
                C89247) *
               C89093 * C9228 +
           ((C13258 * C1829 - C13313 * C1723 + C13259 * C4212 - C13314 * C4098 +
             C13260 * C8601 - C13315 * C8515) *
                C263 +
            (C13258 * C2421 - C13313 * C2331 + C13259 * C4874 - C13314 * C4768 +
             C13260 * C9075 - C13315 * C8995) *
                C89247) *
               C89093 * C89217) *
              C89137 * C5076 +
          (((C13258 * C183 - C13313 * C108 + C13259 * C925 - C13314 * C817 +
             C13260 * C928 - C13315 * C822) *
                C263 +
            (C13258 * C629 - C13313 * C567 + C13259 * C1517 - C13314 * C1427 +
             C13260 * C1520 - C13315 * C1430) *
                C89247) *
               C89093 * C9228 +
           ((C13313 * C1722 - C13258 * C1830 + C13314 * C4099 - C13259 * C4213 +
             C13315 * C8514 - C13260 * C8602) *
                C263 +
            (C13313 * C2332 - C13258 * C2422 + C13314 * C4769 - C13259 * C4875 +
             C13315 * C8996 - C13260 * C9076) *
                C89247) *
               C89093 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
             C13260 * C926 - C13315 * C820) *
                C263 +
            (C13258 * C627 - C13313 * C565 + C13259 * C1515 - C13314 * C1425 +
             C13260 * C1518 - C13315 * C1428) *
                C89247) *
               C89093 * C9228 +
           ((C13313 * C1724 - C13258 * C1828 + C13314 * C4097 - C13259 * C4211 +
             C13315 * C8516 - C13260 * C8600) *
                C263 +
            (C13313 * C2330 - C13258 * C2420 + C13314 * C4767 - C13259 * C4873 +
             C13315 * C8994 - C13260 * C9074) *
                C89247) *
               C89093 * C89217) *
              C812 +
          (((C13313 * C819 - C13258 * C923 + C13314 * C820 - C13259 * C926 +
             C13315 * C5727 - C13260 * C5787) *
                C263 +
            (C13313 * C1425 - C13258 * C1515 + C13314 * C1428 - C13259 * C1518 +
             C13315 * C6061 - C13260 * C6117) *
                C89247) *
               C89093 * C9228 +
           ((C13258 * C4211 - C13313 * C4097 + C13259 * C8600 - C13314 * C8516 +
             C13260 * C16821 - C13315 * C16683) *
                C263 +
            (C13258 * C4873 - C13313 * C4767 + C13259 * C9074 - C13314 * C8994 +
             C13260 * C17471 - C13315 * C17361) *
                C89247) *
               C89093 * C89217) *
              C813 +
          (((C13258 * C926 - C13313 * C820 + C13259 * C5787 - C13314 * C5727 +
             C13260 * C13873 - C13315 * C13743) *
                C263 +
            (C13258 * C1518 - C13313 * C1428 + C13259 * C6117 - C13314 * C6061 +
             C13260 * C14421 - C13315 * C14323) *
                C89247) *
               C89093 * C9228 +
           ((C13313 * C8516 - C13258 * C8600 + C13314 * C16683 -
             C13259 * C16821 + C13315 * C21123 - C13260 * C21209) *
                C263 +
            (C13313 * C8994 - C13258 * C9074 + C13314 * C17361 -
             C13259 * C17471 + C13315 * C21605 - C13260 * C21687) *
                C89247) *
               C89093 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89236 * C181 - C180 * C106) * C25951 +
            (C89236 * C627 - C180 * C565) * C25848 +
            (C27126 - C27127) * C25952 + (C27696 - C27697) * C25849 +
            C27144 * C25953 + C27705 * C25850) *
               C89093 * C9228 +
           ((C27127 - C27126) * C25951 + (C27697 - C27696) * C25848 +
            (C27131 - C27130) * C25952 + (C27699 - C27698) * C25849 +
            (C27134 - C27135) * C25953 + (C27700 - C27701) * C25850) *
               C89093 * C89217) *
              C89137 * C5075 +
          (((C195 - C194) * C25951 + (C635 - C634) * C25848 +
            (C1845 - C1846) * C25952 + (C2429 - C2430) * C25849 +
            C27138 * C25953 + C27702 * C25850) *
               C89093 * C9228 +
           ((C1846 - C1845) * C25951 + (C2430 - C2429) * C25848 +
            (C1853 - C1854) * C25952 + (C2433 - C2434) * C25849 +
            (C27140 - C27141) * C25953 + (C27703 - C27704) * C25850) *
               C89093 * C89217) *
              C89137 * C5076 +
          ((C210 * C25951 + C644 * C25848 + (C1850 - C1849) * C25952 +
            (C2432 - C2431) * C25849 + (C1857 - C1858) * C25953 +
            (C2435 - C2436) * C25850) *
               C89093 * C9228 +
           (C3433 * C25951 + C3912 * C25848 + (C1858 - C1857) * C25952 +
            (C2436 - C2435) * C25849 +
            (C180 * C10542 - C89236 * C10606) * C25953 +
            (C180 * C10880 - C89236 * C10936) * C25850) *
               C89093 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89236 * C181 - C180 * C106) * C25951 +
            (C89236 * C627 - C180 * C565) * C25848 +
            (C27126 - C27127) * C25952 + (C27696 - C27697) * C25849 +
            C27144 * C25953 + C27705 * C25850) *
               C89093 * C9228 +
           ((C27127 - C27126) * C25951 + (C27697 - C27696) * C25848 +
            (C27131 - C27130) * C25952 + (C27699 - C27698) * C25849 +
            (C27134 - C27135) * C25953 + (C27700 - C27701) * C25850) *
               C89093 * C89217) *
              C812 +
          (((C180 * C819 - C89236 * C923) * C25951 +
            (C180 * C1425 - C89236 * C1515) * C25848 +
            (C29351 - C29352) * C25952 + (C29991 - C29992) * C25849 +
            C31373 * C25953 + C31855 * C25850) *
               C89093 * C9228 +
           ((C29352 - C29351) * C25951 + (C29992 - C29991) * C25848 +
            (C29356 - C29355) * C25952 + (C29994 - C29993) * C25849 +
            (C31375 - C31376) * C25953 + (C31856 - C31857) * C25850) *
               C89093 * C89217) *
              C813 +
          (((C89236 * C926 - C180 * C820) * C25951 +
            (C89236 * C1518 - C180 * C1428) * C25848 +
            (C33629 - C33630) * C25952 + (C34097 - C34098) * C25849 +
            (C33633 - C33634) * C25953 + (C34099 - C34100) * C25850) *
               C89093 * C9228 +
           ((C33630 - C33629) * C25951 + (C34098 - C34097) * C25848 +
            (C33634 - C33633) * C25952 + (C34100 - C34099) * C25849 +
            (C180 * C23152 - C89236 * C23211) * C25953 +
            (C180 * C23477 - C89236 * C23531) * C25850) *
               C89093 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eezz[44] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C89236 *
                C89 +
            C735 * C90 + C736 * C91) *
               C9228 -
           (C2547 * C91 + C2548 * C90 +
            (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
                C89236 * C89) *
               C89217) *
              C812 +
          (((C263 * C4325 - C699 * C4097 - C263 * C4767 + C89247 * C4979) *
                C89236 * C89 +
            C4998 * C90 + C4999 * C91) *
               C89217 -
           (C1642 * C91 + C1643 * C90 +
            (C263 * C1029 - C699 * C819 - C263 * C1425 + C89247 * C1607) *
                C89236 * C89) *
               C9228) *
              C813 +
          (((C263 * C1032 - C699 * C820 - C263 * C1428 + C89247 * C1608) *
                C89236 * C89 +
            C1644 * C90 + C1645 * C91) *
               C9228 -
           ((C263 * C8682 - C699 * C8514 - C263 * C8996 + C89247 * C9151) *
                C89236 * C91 +
            (C263 * C8681 - C699 * C8515 - C263 * C8995 + C89247 * C9152) *
                C89236 * C90 +
            (C263 * C8680 - C699 * C8516 - C263 * C8994 + C89247 * C9153) *
                C89236 * C89) *
               C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C89236 *
                C89 +
            C735 * C90 + C736 * C91) *
               C9228 -
           (C2547 * C91 + C2548 * C90 +
            (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
                C89236 * C89) *
               C89217) *
              C89137 * C5075 +
          ((C2548 * C89 + C2547 * C90 + C3999 * C91) * C89217 -
           (C737 * C91 + C736 * C90 + C735 * C89) * C9228) *
              C89137 * C5076 +
          ((C736 * C89 + C737 * C90 + C738 * C91) * C9228 -
           ((C263 * C3512 - C699 * C3352 - C263 * C3833 + C89247 * C3990) *
                C89236 * C91 +
            C3999 * C90 + C2547 * C89) *
               C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C13258 +
            C14524 * C13259 + C14525 * C13260) *
               C89093 * C9228 -
           (C17592 * C13260 + C17593 * C13259 +
            (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
                C13258) *
               C89093 * C89217) *
              C89137 * C5075 +
          ((C2544 * C13258 + C4996 * C13259 + C17594 * C13260) * C89093 *
               C89217 -
           (C1640 * C13260 + C1639 * C13259 + C731 * C13258) * C89093 * C9228) *
              C89137 * C5076 +
          ((C732 * C13258 + C1638 * C13259 + C1641 * C13260) * C89093 * C9228 -
           ((C263 * C8682 - C699 * C8514 - C263 * C8996 + C89247 * C9151) *
                C13260 +
            C4997 * C13259 + C2543 * C13258) *
               C89093 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C13258 +
            C14524 * C13259 + C14525 * C13260) *
               C89093 * C9228 -
           (C17592 * C13260 + C17593 * C13259 +
            (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
                C13258) *
               C89093 * C89217) *
              C812 +
          ((C17593 * C13258 + C17592 * C13259 + C21770 * C13260) * C89093 *
               C89217 -
           (C14526 * C13260 + C14525 * C13259 + C14524 * C13258) * C89093 *
               C9228) *
              C813 +
          ((C14525 * C13258 + C14526 * C13259 + C18765 * C13260) * C89093 *
               C9228 -
           ((C263 * C21285 - C699 * C21123 - C263 * C21605 + C89247 * C21762) *
                C13260 +
            C21770 * C13259 + C17592 * C13258) *
               C89093 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C25951 * C264 - C26254 * C106 - C25951 * C565 + C25848 * C700 +
            C25952 * C1934 - C26255 * C1724 - C25952 * C2330 + C25849 * C2512 +
            C25953 * C1937 - C26256 * C1725 - C25953 * C2333 + C25850 * C2513) *
               C89236 * C89093 * C9228 -
           (C25953 * C10660 - C26256 * C10544 - C25953 * C10878 +
            C25850 * C10989 + C25952 * C1937 - C26255 * C1725 - C25952 * C2333 +
            C25849 * C2513 + C25951 * C1934 - C26254 * C1724 - C25951 * C2330 +
            C25848 * C2512) *
               C89236 * C89093 * C89217) *
              C89137 * C5075 +
          ((C25951 * C1935 - C26254 * C1723 - C25951 * C2331 + C25848 * C2511 +
            C25952 * C1938 - C26255 * C1726 - C25952 * C2334 + C25849 * C2514 +
            C25953 * C10661 - C26256 * C10543 - C25953 * C10879 +
            C25850 * C10988) *
               C89236 * C89093 * C89217 -
           (C25953 * C1938 - C26256 * C1726 - C25953 * C2334 + C25850 * C2514 +
            C25952 * C1935 - C26255 * C1723 - C25952 * C2331 + C25849 * C2511 +
            C25951 * C265 - C26254 * C107 - C25951 * C566 + C25848 * C701) *
               C89236 * C89093 * C9228) *
              C89137 * C5076 +
          ((C25951 * C266 - C26254 * C108 - C25951 * C567 + C25848 * C702 +
            C25952 * C1936 - C26255 * C1722 - C25952 * C2332 + C25849 * C2510 +
            C25953 * C1939 - C26256 * C1727 - C25953 * C2335 + C25850 * C2515) *
               C89236 * C89093 * C9228 -
           (C25953 * C10662 - C26256 * C10542 - C25953 * C10880 +
            C25850 * C10987 + C25952 * C1939 - C26255 * C1727 - C25952 * C2335 +
            C25849 * C2515 + C25951 * C1936 - C26254 * C1722 - C25951 * C2332 +
            C25848 * C2510) *
               C89236 * C89093 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C25951 * C264 - C26254 * C106 - C25951 * C565 + C25848 * C700 +
            C25952 * C1934 - C26255 * C1724 - C25952 * C2330 + C25849 * C2512 +
            C25953 * C1937 - C26256 * C1725 - C25953 * C2333 + C25850 * C2513) *
               C89236 * C89093 * C9228 -
           (C25953 * C10660 - C26256 * C10544 - C25953 * C10878 +
            C25850 * C10989 + C25952 * C1937 - C26255 * C1725 - C25952 * C2333 +
            C25849 * C2513 + C25951 * C1934 - C26254 * C1724 - C25951 * C2330 +
            C25848 * C2512) *
               C89236 * C89093 * C89217) *
              C812 +
          ((C25951 * C4325 - C26254 * C4097 - C25951 * C4767 + C25848 * C4979 +
            C25952 * C6413 - C26255 * C6249 - C25952 * C6727 + C25849 * C6886 +
            C25953 * C23264 - C26256 * C23153 - C25953 * C23476 +
            C25850 * C23583) *
               C89236 * C89093 * C89217 -
           (C25953 * C6413 - C26256 * C6249 - C25953 * C6727 + C25850 * C6886 +
            C25952 * C4325 - C26255 * C4097 - C25952 * C4767 + C25849 * C4979 +
            C25951 * C1029 - C26254 * C819 - C25951 * C1425 + C25848 * C1607) *
               C89236 * C89093 * C9228) *
              C813 +
          ((C25951 * C1032 - C26254 * C820 - C25951 * C1428 + C25848 * C1608 +
            C25952 * C8680 - C26255 * C8516 - C25952 * C8994 + C25849 * C9153 +
            C25953 * C14761 - C26256 * C14601 - C25953 * C15069 +
            C25850 * C15223) *
               C89236 * C89093 * C9228 -
           (C25953 * C23265 - C26256 * C23152 - C25953 * C23477 +
            C25850 * C23582 + C25952 * C14761 - C26255 * C14601 -
            C25952 * C15069 + C25849 * C15223 + C25951 * C8680 -
            C26254 * C8516 - C25951 * C8994 + C25848 * C9153) *
               C89236 * C89093 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eexx[45] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C38295 * C112 - C38296 * C106 - C38295 * C113 + C38291 * C124 +
             C38297 * C114 - C38298 * C107 - C38297 * C115 + C38292 * C125) *
                C54750 +
            (C56456 + C56457) * C54751) *
               C89236 * C89153 * C89307 -
           ((C42921 + C42922) * C54751 + (C39063 + C39062) * C54750) * C89236 *
               C89153 * C89189) *
              C89333 +
          (((C39066 + C39067) * C54750 + (C42923 + C42924) * C54751) * C89236 *
               C89153 * C89189 -
           ((C56461 + C56460) * C54751 +
            (C38297 * C116 - C38298 * C108 - C38297 * C117 + C38292 * C126 +
             C38295 * C114 - C38296 * C107 - C38295 * C115 + C38291 * C125) *
                C54750) *
               C89236 * C89153 * C89307) *
              C89334 +
          (((C38295 * C116 - C38296 * C108 - C38295 * C117 + C38291 * C126 +
             C38297 * C118 - C38298 * C109 - C38297 * C119 + C38292 * C127) *
                C54750 +
            (C38295 * C1730 - C38296 * C1722 - C38295 * C1731 + C38291 * C1746 +
             C38297 * C1742 - C38298 * C1728 - C38297 * C1743 +
             C38292 * C1752) *
                C54751) *
               C89236 * C89153 * C89307 -
           ((C38297 * C4107 - C38298 * C4100 - C38297 * C4108 + C38292 * C4112 +
             C38295 * C4105 - C38296 * C4099 - C38295 * C4106 +
             C38291 * C4111) *
                C54751 +
            (C41029 + C41028) * C54750) *
               C89236 * C89153 * C89189) *
              C2628)) /
        (p * q * std::sqrt(p + q));
    d2eexy[45] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C89236 * C181 - C180 * C106) * C38295 +
                       (C89236 * C187 - C180 * C113) * C38291 +
                       (C194 - C195) * C38297 + (C196 - C197) * C38292) *
                          C54750 +
                      ((C27126 - C27127) * C38295 + (C27128 - C27129) * C38291 +
                       C56562 * C38297 + C56563 * C38292) *
                          C54751) *
                         C89153 * C89307 +
                     (((C180 * C819 - C89236 * C923) * C38295 +
                       (C180 * C830 - C89236 * C931) * C38291 +
                       (C940 - C941) * C38297 + (C942 - C943) * C38292) *
                          C54750 +
                      ((C29351 - C29352) * C38295 + (C29353 - C29354) * C38291 +
                       (C4221 - C4220) * C38297 + (C4223 - C4222) * C38292) *
                          C54751) *
                         C89153 * C89189) *
                        C89333 +
                    ((((C195 - C194) * C38295 + (C197 - C196) * C38291 +
                       (C199 - C198) * C38297 + (C201 - C200) * C38292) *
                          C54750 +
                      (C56564 * C38295 + C56565 * C38291 + C3433 * C38297 +
                       C3434 * C38292) *
                          C54751) *
                         C89153 * C89307 +
                     (((C941 - C940) * C38295 + (C943 - C942) * C38291 +
                       (C945 - C944) * C38297 + (C947 - C946) * C38292) *
                          C54750 +
                      ((C4220 - C4221) * C38295 + (C4222 - C4223) * C38291 +
                       (C4224 - C4225) * C38297 + (C4226 - C4227) * C38292) *
                          C54751) *
                         C89153 * C89189) *
                        C89334 +
                    (((C210 * C38295 + C211 * C38291 + (C203 - C202) * C38297 +
                       (C205 - C204) * C38292) *
                          C54750 +
                      ((C1850 - C1849) * C38295 + (C1852 - C1851) * C38291 +
                       (C3435 - C3436) * C38297 + (C3437 - C3438) * C38292) *
                          C54751) *
                         C89153 * C89307 +
                     ((C2710 * C38295 + C2711 * C38291 +
                       (C2713 - C2712) * C38297 + (C2715 - C2714) * C38292) *
                          C54750 +
                      ((C4225 - C4224) * C38295 + (C4227 - C4226) * C38291 +
                       (C180 * C4100 - C89236 * C4214) * C38297 +
                       (C180 * C4108 - C89236 * C4218) * C38292) *
                          C54751) *
                         C89153 * C89189) *
                        C2628)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[45] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                C38295 +
            (C54750 * C270 - C54884 * C113 + C54751 * C1942 - C54885 * C1735) *
                C38291 +
            (C54887 - C54888 + C54889 - C54890) * C38297 +
            (C54891 - C54892 + C54893 - C54894) * C38292) *
               C89236 * C89153 * C89307 +
           ((C54884 * C819 - C54750 * C1029 + C54885 * C4097 - C54751 * C4325) *
                C38295 +
            (C54884 * C830 - C54750 * C1037 + C54885 * C4102 - C54751 * C4329) *
                C38291 +
            (C55661 - C55662 + C55663 - C55664) * C38297 +
            (C55665 - C55666 + C55667 - C55668) * C38292) *
               C89236 * C89153 * C89189) *
              C89333 +
          (((C54888 - C54887 + C54890 - C54889) * C38295 +
            (C54892 - C54891 + C54894 - C54893) * C38291 +
            (C54895 - C54896 + C54897 - C54898) * C38297 +
            (C54899 - C54900 + C54901 - C54902) * C38292) *
               C89236 * C89153 * C89307 +
           ((C55662 - C55661 + C55664 - C55663) * C38295 +
            (C55666 - C55665 + C55668 - C55667) * C38291 +
            (C57659 - C57660 + C57661 - C57662) * C38297 +
            (C57663 - C57664 + C57665 - C57666) * C38292) *
               C89236 * C89153 * C89189) *
              C89334 +
          (((C54896 - C54895 + C54898 - C54897) * C38295 +
            (C54900 - C54899 + C54902 - C54901) * C38291 +
            (C54903 - C54904 + C54905 - C54906) * C38297 +
            (C54907 - C54908 + C54909 - C54910) * C38292) *
               C89236 * C89153 * C89307 +
           ((C57660 - C57659 + C57662 - C57661) * C38295 +
            (C57664 - C57663 + C57666 - C57665) * C38291 +
            (C54884 * C823 - C54750 * C1035 + C54885 * C4100 - C54751 * C4328) *
                C38297 +
            (C54884 * C838 - C54750 * C1043 + C54885 * C4108 - C54751 * C4332) *
                C38292) *
               C89236 * C89153 * C89189) *
              C2628)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[45] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                 C180 +
             (C38291 * C352 - C38295 * C346 + C38292 * C353 - C38297 * C347) *
                 C89236) *
                C54750 +
            ((C56780 - C56781 + C56782 - C56783) * C180 +
             (C56784 - C56785 + C56786 - C56787) * C89236) *
                C54751) *
               C89153 * C89307 +
           (((C39387 - C39386 + C39389 - C39388) * C180 +
             (C39391 - C39390 + C39393 - C39392) * C89236) *
                C54750 +
            ((C43327 - C43328 + C43329 - C43330) * C180 +
             (C43331 - C43332 + C43333 - C43334) * C89236) *
                C54751) *
               C89153 * C89189) *
              C89333 +
          ((((C38295 * C107 - C38291 * C114 + C38297 * C108 - C38292 * C116) *
                 C180 +
             (C38295 * C347 - C38291 * C353 + C38297 * C348 - C38292 * C354) *
                 C89236) *
                C54750 +
            ((C56796 - C56797 + C56798 - C56799) * C180 +
             (C56800 - C56801 + C56802 - C56803) * C89236) *
                C54751) *
               C89153 * C89307 +
           (((C39403 - C39402 + C39405 - C39404) * C180 +
             (C39407 - C39406 + C39409 - C39408) * C89236) *
                C54750 +
            ((C43335 - C43336 + C43337 - C43338) * C180 +
             (C43339 - C43340 + C43341 - C43342) * C89236) *
                C54751) *
               C89153 * C89189) *
              C89334 +
          ((((C38291 * C116 - C38295 * C108 + C38292 * C118 - C38297 * C109) *
                 C180 +
             (C38291 * C354 - C38295 * C348 + C38292 * C355 - C38297 * C349) *
                 C89236) *
                C54750 +
            ((C38291 * C1730 - C38295 * C1722 + C38292 * C1742 -
              C38297 * C1728) *
                 C180 +
             (C38291 * C2050 - C38295 * C2042 + C38292 * C2054 -
              C38297 * C2046) *
                 C89236) *
                C54751) *
               C89153 * C89307 +
           (((C41335 - C41334 + C41337 - C41336) * C180 +
             (C41339 - C41338 + C41341 - C41340) * C89236) *
                C54750 +
            ((C38295 * C4099 - C38291 * C4105 + C38297 * C4100 -
              C38292 * C4107) *
                 C180 +
             (C38295 * C4441 - C38291 * C4445 + C38297 * C4442 -
              C38292 * C4446) *
                 C89236) *
                C54751) *
               C89153 * C89189) *
              C2628)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[45] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) *
                 C38291 +
             C440 * C38292) *
                C54750 +
            (C56910 + C56911) * C54751) *
               C89153 * C89307 -
           ((C4562 * C38292 + C29685 * C38291) * C54751 +
            (C1259 * C38292 +
             (C180 * C923 - C408 * C819 - C180 * C1135 + C89236 * C1227) *
                 C38291) *
                C54750) *
               C89153 * C89189) *
              C89333 +
          (((C1259 * C38291 + C1258 * C38292) * C54750 +
            (C4562 * C38291 + C4563 * C38292) * C54751) *
               C89153 * C89189 -
           ((C56915 + C56914) * C54751 +
            (C441 * C38292 + C440 * C38291) * C54750) *
               C89153 * C89307) *
              C89334 +
          (((C441 * C38291 + C442 * C38292) * C54750 +
            (C2163 * C38291 + C3678 * C38292) * C54751) *
               C89153 * C89307 -
           (((C180 * C4214 - C408 * C4100 - C180 * C4442 + C89236 * C4548) *
                 C38292 +
             C4563 * C38291) *
                C54751 +
            (C2955 * C38292 + C1258 * C38291) * C54750) *
               C89153 * C89189) *
              C2628)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[45] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                 C180 +
             (C54750 * C493 - C54884 * C346 + C54751 * C2240 - C54885 * C2040) *
                 C89236) *
                C38291 +
            ((C54887 - C54888 + C54889 - C54890) * C180 +
             (C55109 - C55110 + C55111 - C55112) * C89236) *
                C38292) *
               C89153 * C89307 +
           (((C54884 * C819 - C54750 * C1029 + C54885 * C4097 -
              C54751 * C4325) *
                 C180 +
             (C54884 * C1135 - C54750 * C1335 + C54885 * C4439 -
              C54751 * C4661) *
                 C89236) *
                C38291 +
            ((C55661 - C55662 + C55663 - C55664) * C180 +
             (C55978 - C55979 + C55980 - C55981) * C89236) *
                C38292) *
               C89153 * C89189) *
              C89333 +
          ((((C54888 - C54887 + C54890 - C54889) * C180 +
             (C55110 - C55109 + C55112 - C55111) * C89236) *
                C38291 +
            ((C54895 - C54896 + C54897 - C54898) * C180 +
             (C55113 - C55114 + C55115 - C55116) * C89236) *
                C38292) *
               C89153 * C89307 +
           (((C55662 - C55661 + C55664 - C55663) * C180 +
             (C55979 - C55978 + C55981 - C55980) * C89236) *
                C38291 +
            ((C57659 - C57660 + C57661 - C57662) * C180 +
             (C57961 - C57962 + C57963 - C57964) * C89236) *
                C38292) *
               C89153 * C89189) *
              C89334 +
          ((((C54896 - C54895 + C54898 - C54897) * C180 +
             (C55114 - C55113 + C55116 - C55115) * C89236) *
                C38291 +
            ((C54903 - C54904 + C54905 - C54906) * C180 +
             (C55117 - C55118 + C55119 - C55120) * C89236) *
                C38292) *
               C89153 * C89307 +
           (((C57660 - C57659 + C57662 - C57661) * C180 +
             (C57962 - C57961 + C57964 - C57963) * C89236) *
                C38291 +
            ((C54884 * C823 - C54750 * C1035 + C54885 * C4100 -
              C54751 * C4328) *
                 C180 +
             (C54884 * C1141 - C54750 * C1341 + C54885 * C4442 -
              C54751 * C4664) *
                 C89236) *
                C38292) *
               C89153 * C89189) *
              C2628)) /
        (p * q * std::sqrt(p + q));
    d2eezx[45] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                C54884 +
            (C38291 * C571 - C38295 * C565 + C38292 * C572 - C38297 * C566) *
                C54750 +
            (C56780 - C56781 + C56782 - C56783) * C54885 +
            (C57122 - C57123 + C57124 - C57125) * C54751) *
               C89236 * C89153 * C89307 +
           ((C39387 - C39386 + C39389 - C39388) * C54884 +
            (C39744 - C39743 + C39746 - C39745) * C54750 +
            (C43327 - C43328 + C43329 - C43330) * C54885 +
            (C43749 - C43750 + C43751 - C43752) * C54751) *
               C89236 * C89153 * C89189) *
              C89333 +
          (((C38295 * C107 - C38291 * C114 + C38297 * C108 - C38292 * C116) *
                C54884 +
            (C38295 * C566 - C38291 * C572 + C38297 * C567 - C38292 * C573) *
                C54750 +
            (C56796 - C56797 + C56798 - C56799) * C54885 +
            (C57130 - C57131 + C57132 - C57133) * C54751) *
               C89236 * C89153 * C89307 +
           ((C39403 - C39402 + C39405 - C39404) * C54884 +
            (C39752 - C39751 + C39754 - C39753) * C54750 +
            (C43335 - C43336 + C43337 - C43338) * C54885 +
            (C43753 - C43754 + C43755 - C43756) * C54751) *
               C89236 * C89153 * C89189) *
              C89334 +
          (((C38291 * C116 - C38295 * C108 + C38292 * C118 - C38297 * C109) *
                C54884 +
            (C38291 * C573 - C38295 * C567 + C38292 * C574 - C38297 * C568) *
                C54750 +
            (C38291 * C1730 - C38295 * C1722 + C38292 * C1742 -
             C38297 * C1728) *
                C54885 +
            (C38291 * C2340 - C38295 * C2332 + C38292 * C2344 -
             C38297 * C2336) *
                C54751) *
               C89236 * C89153 * C89307 +
           ((C41335 - C41334 + C41337 - C41336) * C54884 +
            (C41652 - C41651 + C41654 - C41653) * C54750 +
            (C38295 * C4099 - C38291 * C4105 + C38297 * C4100 -
             C38292 * C4107) *
                C54885 +
            (C38295 * C4769 - C38291 * C4773 + C38297 * C4770 -
             C38292 * C4774) *
                C54751) *
               C89236 * C89153 * C89189) *
              C2628)) /
        (p * q * std::sqrt(p + q));
    d2eezy[45] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C54884 +
             (C89236 * C627 - C180 * C565) * C54750 +
             (C27126 - C27127) * C54885 + (C27696 - C27697) * C54751) *
                C38291 +
            ((C194 - C195) * C54884 + (C634 - C635) * C54750 + C56562 * C54885 +
             C57236 * C54751) *
                C38292) *
               C89153 * C89307 +
           (((C180 * C819 - C89236 * C923) * C54884 +
             (C180 * C1425 - C89236 * C1515) * C54750 +
             (C29351 - C29352) * C54885 + (C29991 - C29992) * C54751) *
                C38291 +
            ((C940 - C941) * C54884 + (C1524 - C1525) * C54750 +
             (C4221 - C4220) * C54885 + (C4879 - C4878) * C54751) *
                C38292) *
               C89153 * C89189) *
              C89333 +
          ((((C195 - C194) * C54884 + (C635 - C634) * C54750 + C56564 * C54885 +
             C57237 * C54751) *
                C38291 +
            ((C199 - C198) * C54884 + (C638 - C637) * C54750 + C3433 * C54885 +
             C3912 * C54751) *
                C38292) *
               C89153 * C89307 +
           (((C941 - C940) * C54884 + (C1525 - C1524) * C54750 +
             (C4220 - C4221) * C54885 + (C4878 - C4879) * C54751) *
                C38291 +
            ((C945 - C944) * C54884 + (C1527 - C1526) * C54750 +
             (C4224 - C4225) * C54885 + (C4880 - C4881) * C54751) *
                C38292) *
               C89153 * C89189) *
              C89334 +
          (((C210 * C54884 + C644 * C54750 + (C1850 - C1849) * C54885 +
             (C2432 - C2431) * C54751) *
                C38291 +
            ((C203 - C202) * C54884 + (C641 - C640) * C54750 +
             (C3435 - C3436) * C54885 + (C3913 - C3914) * C54751) *
                C38292) *
               C89153 * C89307 +
           ((C2710 * C54884 + C3189 * C54750 + (C4225 - C4224) * C54885 +
             (C4881 - C4880) * C54751) *
                C38291 +
            ((C2713 - C2712) * C54884 + (C3191 - C3190) * C54750 +
             (C180 * C4100 - C89236 * C4214) * C54885 +
             (C180 * C4770 - C89236 * C4876) * C54751) *
                C38292) *
               C89153 * C89189) *
              C2628)) /
        (p * q * std::sqrt(p + q));
    d2eezz[45] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C54884 * C264 - C55318 * C106 - C54884 * C565 + C54750 * C700 +
             C54885 * C1934 - C55319 * C1724 - C54885 * C2330 +
             C54751 * C2512) *
                C89236 * C38291 +
            (C55357 + C55358) * C89236 * C38292) *
               C89153 * C89307 -
           ((C56306 + C56307) * C89236 * C38292 +
            (C54885 * C4325 - C55319 * C4097 - C54885 * C4767 + C54751 * C4979 +
             C54884 * C1029 - C55318 * C819 - C54884 * C1425 + C54750 * C1607) *
                C89236 * C38291) *
               C89153 * C89189) *
              C89333 +
          (((C56307 + C56306) * C89236 * C38291 +
            (C58271 + C58272) * C89236 * C38292) *
               C89153 * C89189 -
           ((C55359 + C55360) * C89236 * C38292 +
            (C55358 + C55357) * C89236 * C38291) *
               C89153 * C89307) *
              C89334 +
          (((C55360 + C55359) * C89236 * C38291 +
            (C55361 + C55362) * C89236 * C38292) *
               C89153 * C89307 -
           ((C54885 * C4328 - C55319 * C4100 - C54885 * C4770 + C54751 * C4982 +
             C54884 * C1035 - C55318 * C823 - C54884 * C1431 + C54750 * C1611) *
                C89236 * C38292 +
            (C58272 + C58271) * C89236 * C38291) *
               C89153 * C89189) *
              C2628)) /
        (p * q * std::sqrt(p + q));
    d2eexx[46] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C38295 * C112 - C38296 * C106 - C38295 * C113 + C38291 * C124 +
              C38297 * C114 - C38298 * C107 - C38297 * C115 + C38292 * C125) *
                 C54750 +
             (C56456 + C56457) * C54751) *
                C89236 * C89308 -
            ((C56458 + C56459) * C54751 + (C56457 + C56456) * C54750) * C89236 *
                C89217) *
               C89307 +
           (((C42922 + C42921) * C54750 + (C45635 + C45636) * C54751) * C89236 *
                C89217 -
            ((C42921 + C42922) * C54751 + (C39063 + C39062) * C54750) * C89236 *
                C89308) *
               C89189) *
              C815 +
          ((((C56460 + C56461) * C54750 + (C56462 + C56463) * C54751) * C89236 *
                C89217 -
            ((C56461 + C56460) * C54751 +
             (C38297 * C116 - C38298 * C108 - C38297 * C117 + C38292 * C126 +
              C38295 * C114 - C38296 * C107 - C38295 * C115 + C38291 * C125) *
                 C54750) *
                C89236 * C89308) *
               C89307 +
           (((C39066 + C39067) * C54750 + (C42923 + C42924) * C54751) * C89236 *
                C89308 -
            ((C38297 * C6250 - C38298 * C6247 - C38297 * C6251 +
              C38292 * C6256 + C38295 * C6252 - C38296 * C6248 -
              C38295 * C6253 + C38291 * C6257) *
                 C54751 +
             (C42924 + C42923) * C54750) *
                C89236 * C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eexy[46] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C89236 * C181 - C180 * C106) * C38295 +
              (C89236 * C187 - C180 * C113) * C38291 + (C194 - C195) * C38297 +
              (C196 - C197) * C38292) *
                 C54750 +
             ((C27126 - C27127) * C38295 + (C27128 - C27129) * C38291 +
              C56562 * C38297 + C56563 * C38292) *
                 C54751) *
                C89308 +
            (((C27127 - C27126) * C38295 + (C27129 - C27128) * C38291 +
              C56564 * C38297 + C56565 * C38292) *
                 C54750 +
             ((C27131 - C27130) * C38295 + (C27133 - C27132) * C38291 +
              C27138 * C38297 + C27139 * C38292) *
                 C54751) *
                C89217) *
               C89307 +
           ((((C180 * C819 - C89236 * C923) * C38295 +
              (C180 * C830 - C89236 * C931) * C38291 + (C940 - C941) * C38297 +
              (C942 - C943) * C38292) *
                 C54750 +
             ((C29351 - C29352) * C38295 + (C29353 - C29354) * C38291 +
              C59472 * C38297 + C59473 * C38292) *
                 C54751) *
                C89308 +
            (((C29352 - C29351) * C38295 + (C29354 - C29353) * C38291 +
              C59474 * C38297 + C59475 * C38292) *
                 C54750 +
             ((C29356 - C29355) * C38295 + (C29358 - C29357) * C38291 +
              (C29359 - C29360) * C38297 + (C29361 - C29362) * C38292) *
                 C54751) *
                C89217) *
               C89189) *
              C815 +
          (((((C195 - C194) * C38295 + (C197 - C196) * C38291 +
              (C199 - C198) * C38297 + (C201 - C200) * C38292) *
                 C54750 +
             (C56564 * C38295 + C56565 * C38291 + C3433 * C38297 +
              C3434 * C38292) *
                 C54751) *
                C89308 +
            ((C56562 * C38295 + C56563 * C38291 + C58483 * C38297 +
              C58484 * C38292) *
                 C54750 +
             (C56566 * C38295 + C56567 * C38291 + (C1857 - C1858) * C38297 +
              (C1859 - C1860) * C38292) *
                 C54751) *
                C89217) *
               C89307 +
           ((((C941 - C940) * C38295 + (C943 - C942) * C38291 +
              (C945 - C944) * C38297 + (C947 - C946) * C38292) *
                 C54750 +
             (C59474 * C38295 + C59475 * C38291 + (C4224 - C4225) * C38297 +
              (C4226 - C4227) * C38292) *
                 C54751) *
                C89308 +
            ((C59472 * C38295 + C59473 * C38291 + (C4225 - C4224) * C38297 +
              (C4227 - C4226) * C38292) *
                 C54750 +
             ((C29360 - C29359) * C38295 + (C29362 - C29361) * C38291 +
              (C180 * C6247 - C89236 * C6335) * C38297 +
              (C180 * C6251 - C89236 * C6338) * C38292) *
                 C54751) *
                C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eexz[46] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                 C38295 +
             (C54750 * C270 - C54884 * C113 + C54751 * C1942 - C54885 * C1735) *
                 C38291 +
             (C54887 - C54888 + C54889 - C54890) * C38297 +
             (C54891 - C54892 + C54893 - C54894) * C38292) *
                C89236 * C89308 +
            ((C54884 * C1724 - C54750 * C1934 + C54885 * C1725 -
              C54751 * C1937) *
                 C38295 +
             (C54884 * C1735 - C54750 * C1942 + C54885 * C1737 -
              C54751 * C1945) *
                 C38291 +
             (C56666 - C56667 + C56668 - C56669) * C38297 +
             (C56670 - C56671 + C56672 - C56673) * C38292) *
                C89236 * C89217) *
               C89307 +
           (((C54884 * C819 - C54750 * C1029 + C54885 * C4097 -
              C54751 * C4325) *
                 C38295 +
             (C54884 * C830 - C54750 * C1037 + C54885 * C4102 -
              C54751 * C4329) *
                 C38291 +
             (C55661 - C55662 + C55663 - C55664) * C38297 +
             (C55665 - C55666 + C55667 - C55668) * C38292) *
                C89236 * C89308 +
            ((C54750 * C4325 - C54884 * C4097 + C54751 * C6413 -
              C54885 * C6249) *
                 C38295 +
             (C54750 * C4329 - C54884 * C4102 + C54751 * C6416 -
              C54885 * C6255) *
                 C38291 +
             (C59606 - C59607 + C59608 - C59609) * C38297 +
             (C59610 - C59611 + C59612 - C59613) * C38292) *
                C89236 * C89217) *
               C89189) *
              C815 +
          ((((C54888 - C54887 + C54890 - C54889) * C38295 +
             (C54892 - C54891 + C54894 - C54893) * C38291 +
             (C54895 - C54896 + C54897 - C54898) * C38297 +
             (C54899 - C54900 + C54901 - C54902) * C38292) *
                C89236 * C89308 +
            ((C56667 - C56666 + C56669 - C56668) * C38295 +
             (C56671 - C56670 + C56673 - C56672) * C38291 +
             (C58583 - C58584 + C58585 - C58586) * C38297 +
             (C58587 - C58588 + C58589 - C58590) * C38292) *
                C89236 * C89217) *
               C89307 +
           (((C55662 - C55661 + C55664 - C55663) * C38295 +
             (C55666 - C55665 + C55668 - C55667) * C38291 +
             (C57659 - C57660 + C57661 - C57662) * C38297 +
             (C57663 - C57664 + C57665 - C57666) * C38292) *
                C89236 * C89308 +
            ((C59607 - C59606 + C59609 - C59608) * C38295 +
             (C59611 - C59610 + C59613 - C59612) * C38291 +
             (C54884 * C4099 - C54750 * C4327 + C54885 * C6247 -
              C54751 * C6415) *
                 C38297 +
             (C54884 * C4106 - C54750 * C4331 + C54885 * C6251 -
              C54751 * C6418) *
                 C38292) *
                C89236 * C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[46] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                  C180 +
              (C38291 * C352 - C38295 * C346 + C38292 * C353 - C38297 * C347) *
                  C89236) *
                 C54750 +
             ((C56780 - C56781 + C56782 - C56783) * C180 +
              (C56784 - C56785 + C56786 - C56787) * C89236) *
                 C54751) *
                C89308 +
            (((C56781 - C56780 + C56783 - C56782) * C180 +
              (C56785 - C56784 + C56787 - C56786) * C89236) *
                 C54750 +
             ((C56788 - C56789 + C56790 - C56791) * C180 +
              (C56792 - C56793 + C56794 - C56795) * C89236) *
                 C54751) *
                C89217) *
               C89307 +
           ((((C39387 - C39386 + C39389 - C39388) * C180 +
              (C39391 - C39390 + C39393 - C39392) * C89236) *
                 C54750 +
             ((C43327 - C43328 + C43329 - C43330) * C180 +
              (C43331 - C43332 + C43333 - C43334) * C89236) *
                 C54751) *
                C89308 +
            (((C43328 - C43327 + C43330 - C43329) * C180 +
              (C43332 - C43331 + C43334 - C43333) * C89236) *
                 C54750 +
             ((C45931 - C45932 + C45933 - C45934) * C180 +
              (C45935 - C45936 + C45937 - C45938) * C89236) *
                 C54751) *
                C89217) *
               C89189) *
              C815 +
          (((((C38295 * C107 - C38291 * C114 + C38297 * C108 - C38292 * C116) *
                  C180 +
              (C38295 * C347 - C38291 * C353 + C38297 * C348 - C38292 * C354) *
                  C89236) *
                 C54750 +
             ((C56796 - C56797 + C56798 - C56799) * C180 +
              (C56800 - C56801 + C56802 - C56803) * C89236) *
                 C54751) *
                C89308 +
            (((C56797 - C56796 + C56799 - C56798) * C180 +
              (C56801 - C56800 + C56803 - C56802) * C89236) *
                 C54750 +
             ((C56804 - C56805 + C56806 - C56807) * C180 +
              (C56808 - C56809 + C56810 - C56811) * C89236) *
                 C54751) *
                C89217) *
               C89307 +
           ((((C39403 - C39402 + C39405 - C39404) * C180 +
              (C39407 - C39406 + C39409 - C39408) * C89236) *
                 C54750 +
             ((C43335 - C43336 + C43337 - C43338) * C180 +
              (C43339 - C43340 + C43341 - C43342) * C89236) *
                 C54751) *
                C89308 +
            (((C43336 - C43335 + C43338 - C43337) * C180 +
              (C43340 - C43339 + C43342 - C43341) * C89236) *
                 C54750 +
             ((C38295 * C6248 - C38291 * C6252 + C38297 * C6247 -
               C38292 * C6250) *
                  C180 +
              (C38295 * C6494 - C38291 * C6497 + C38297 * C6495 -
               C38292 * C6498) *
                  C89236) *
                 C54751) *
                C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[46] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) *
                  C38291 +
              C440 * C38292) *
                 C54750 +
             (C56910 + C56911) * C54751) *
                C89308 -
            ((C56912 + C56913) * C54751 + (C56911 + C56910) * C54750) *
                C89217) *
               C89307 +
           (((C59874 + C59875) * C54750 +
             (C29686 * C38291 + C29687 * C38292) * C54751) *
                C89217 -
            ((C59875 + C59874) * C54751 +
             (C1259 * C38292 +
              (C180 * C923 - C408 * C819 - C180 * C1135 + C89236 * C1227) *
                  C38291) *
                 C54750) *
                C89308) *
               C89189) *
              C815 +
          ((((C56914 + C56915) * C54750 + (C56916 + C56917) * C54751) * C89217 -
            ((C56915 + C56914) * C54751 +
             (C441 * C38292 + C440 * C38291) * C54750) *
                C89308) *
               C89307 +
           (((C1259 * C38291 + C1258 * C38292) * C54750 +
             (C59876 + C59877) * C54751) *
                C89308 -
            (((C180 * C6335 - C408 * C6247 - C180 * C6495 + C89236 * C6573) *
                  C38292 +
              C29687 * C38291) *
                 C54751 +
             (C59877 + C59876) * C54750) *
                C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[46] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((((C54750 * C264 - C54884 * C106 + C54751 * C1934 -
                         C54885 * C1724) *
                            C180 +
                        (C54750 * C493 - C54884 * C346 + C54751 * C2240 -
                         C54885 * C2040) *
                            C89236) *
                           C38291 +
                       ((C54887 - C54888 + C54889 - C54890) * C180 +
                        (C55109 - C55110 + C55111 - C55112) * C89236) *
                           C38292) *
                          C89308 +
                      (((C54884 * C1724 - C54750 * C1934 + C54885 * C1725 -
                         C54751 * C1937) *
                            C180 +
                        (C54884 * C2040 - C54750 * C2240 + C54885 * C2043 -
                         C54751 * C2243) *
                            C89236) *
                           C38291 +
                       ((C56666 - C56667 + C56668 - C56669) * C180 +
                        (C57016 - C57017 + C57018 - C57019) * C89236) *
                           C38292) *
                          C89217) *
                         C89307 +
                     ((((C54884 * C819 - C54750 * C1029 + C54885 * C4097 -
                         C54751 * C4325) *
                            C180 +
                        (C54884 * C1135 - C54750 * C1335 + C54885 * C4439 -
                         C54751 * C4661) *
                            C89236) *
                           C38291 +
                       ((C55661 - C55662 + C55663 - C55664) * C180 +
                        (C55978 - C55979 + C55980 - C55981) * C89236) *
                           C38292) *
                          C89308 +
                      (((C54750 * C4325 - C54884 * C4097 + C54751 * C6413 -
                         C54885 * C6249) *
                            C180 +
                        (C54750 * C4661 - C54884 * C4439 + C54751 * C6650 -
                         C54885 * C6493) *
                            C89236) *
                           C38291 +
                       ((C59606 - C59607 + C59608 - C59609) * C180 +
                        (C60008 - C60009 + C60010 - C60011) * C89236) *
                           C38292) *
                          C89217) *
                         C89189) *
                        C815 +
                    (((((C54888 - C54887 + C54890 - C54889) * C180 +
                        (C55110 - C55109 + C55112 - C55111) * C89236) *
                           C38291 +
                       ((C54895 - C54896 + C54897 - C54898) * C180 +
                        (C55113 - C55114 + C55115 - C55116) * C89236) *
                           C38292) *
                          C89308 +
                      (((C56667 - C56666 + C56669 - C56668) * C180 +
                        (C57017 - C57016 + C57019 - C57018) * C89236) *
                           C38291 +
                       ((C58583 - C58584 + C58585 - C58586) * C180 +
                        (C58895 - C58896 + C58897 - C58898) * C89236) *
                           C38292) *
                          C89217) *
                         C89307 +
                     ((((C55662 - C55661 + C55664 - C55663) * C180 +
                        (C55979 - C55978 + C55981 - C55980) * C89236) *
                           C38291 +
                       ((C57659 - C57660 + C57661 - C57662) * C180 +
                        (C57961 - C57962 + C57963 - C57964) * C89236) *
                           C38292) *
                          C89308 +
                      (((C59607 - C59606 + C59609 - C59608) * C180 +
                        (C60009 - C60008 + C60011 - C60010) * C89236) *
                           C38291 +
                       ((C54884 * C4099 - C54750 * C4327 + C54885 * C6247 -
                         C54751 * C6415) *
                            C180 +
                        (C54884 * C4441 - C54750 * C4663 + C54885 * C6495 -
                         C54751 * C6652) *
                            C89236) *
                           C38292) *
                          C89217) *
                         C89189) *
                        C89124)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[46] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                 C54884 +
             (C38291 * C571 - C38295 * C565 + C38292 * C572 - C38297 * C566) *
                 C54750 +
             (C56780 - C56781 + C56782 - C56783) * C54885 +
             (C57122 - C57123 + C57124 - C57125) * C54751) *
                C89236 * C89308 +
            ((C56781 - C56780 + C56783 - C56782) * C54884 +
             (C57123 - C57122 + C57125 - C57124) * C54750 +
             (C56788 - C56789 + C56790 - C56791) * C54885 +
             (C57126 - C57127 + C57128 - C57129) * C54751) *
                C89236 * C89217) *
               C89307 +
           (((C39387 - C39386 + C39389 - C39388) * C54884 +
             (C39744 - C39743 + C39746 - C39745) * C54750 +
             (C43327 - C43328 + C43329 - C43330) * C54885 +
             (C43749 - C43750 + C43751 - C43752) * C54751) *
                C89236 * C89308 +
            ((C43328 - C43327 + C43330 - C43329) * C54884 +
             (C43750 - C43749 + C43752 - C43751) * C54750 +
             (C45931 - C45932 + C45933 - C45934) * C54885 +
             (C46233 - C46234 + C46235 - C46236) * C54751) *
                C89236 * C89217) *
               C89189) *
              C815 +
          ((((C38295 * C107 - C38291 * C114 + C38297 * C108 - C38292 * C116) *
                 C54884 +
             (C38295 * C566 - C38291 * C572 + C38297 * C567 - C38292 * C573) *
                 C54750 +
             (C56796 - C56797 + C56798 - C56799) * C54885 +
             (C57130 - C57131 + C57132 - C57133) * C54751) *
                C89236 * C89308 +
            ((C56797 - C56796 + C56799 - C56798) * C54884 +
             (C57131 - C57130 + C57133 - C57132) * C54750 +
             (C56804 - C56805 + C56806 - C56807) * C54885 +
             (C57134 - C57135 + C57136 - C57137) * C54751) *
                C89236 * C89217) *
               C89307 +
           (((C39403 - C39402 + C39405 - C39404) * C54884 +
             (C39752 - C39751 + C39754 - C39753) * C54750 +
             (C43335 - C43336 + C43337 - C43338) * C54885 +
             (C43753 - C43754 + C43755 - C43756) * C54751) *
                C89236 * C89308 +
            ((C43336 - C43335 + C43338 - C43337) * C54884 +
             (C43754 - C43753 + C43756 - C43755) * C54750 +
             (C38295 * C6248 - C38291 * C6252 + C38297 * C6247 -
              C38292 * C6250) *
                 C54885 +
             (C38295 * C6728 - C38291 * C6731 + C38297 * C6729 -
              C38292 * C6732) *
                 C54751) *
                C89236 * C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eezy[46] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C89236 * C181 - C180 * C106) * C54884 +
              (C89236 * C627 - C180 * C565) * C54750 +
              (C27126 - C27127) * C54885 + (C27696 - C27697) * C54751) *
                 C38291 +
             ((C194 - C195) * C54884 + (C634 - C635) * C54750 +
              C56562 * C54885 + C57236 * C54751) *
                 C38292) *
                C89308 +
            (((C27127 - C27126) * C54884 + (C27697 - C27696) * C54750 +
              (C27131 - C27130) * C54885 + (C27699 - C27698) * C54751) *
                 C38291 +
             (C56564 * C54884 + C57237 * C54750 + C27138 * C54885 +
              C27702 * C54751) *
                 C38292) *
                C89217) *
               C89307 +
           ((((C180 * C819 - C89236 * C923) * C54884 +
              (C180 * C1425 - C89236 * C1515) * C54750 +
              (C29351 - C29352) * C54885 + (C29991 - C29992) * C54751) *
                 C38291 +
             ((C940 - C941) * C54884 + (C1524 - C1525) * C54750 +
              C59472 * C54885 + C60272 * C54751) *
                 C38292) *
                C89308 +
            (((C29352 - C29351) * C54884 + (C29992 - C29991) * C54750 +
              (C29356 - C29355) * C54885 + (C29994 - C29993) * C54751) *
                 C38291 +
             (C59474 * C54884 + C60273 * C54750 + (C29359 - C29360) * C54885 +
              (C29995 - C29996) * C54751) *
                 C38292) *
                C89217) *
               C89189) *
              C815 +
          (((((C195 - C194) * C54884 + (C635 - C634) * C54750 +
              C56564 * C54885 + C57237 * C54751) *
                 C38291 +
             ((C199 - C198) * C54884 + (C638 - C637) * C54750 + C3433 * C54885 +
              C3912 * C54751) *
                 C38292) *
                C89308 +
            ((C56562 * C54884 + C57236 * C54750 + C56566 * C54885 +
              C57238 * C54751) *
                 C38291 +
             (C58483 * C54884 + C59099 * C54750 + (C1857 - C1858) * C54885 +
              (C2435 - C2436) * C54751) *
                 C38292) *
                C89217) *
               C89307 +
           ((((C941 - C940) * C54884 + (C1525 - C1524) * C54750 +
              C59474 * C54885 + C60273 * C54751) *
                 C38291 +
             ((C945 - C944) * C54884 + (C1527 - C1526) * C54750 +
              (C4224 - C4225) * C54885 + (C4880 - C4881) * C54751) *
                 C38292) *
                C89308 +
            ((C59472 * C54884 + C60272 * C54750 + (C29360 - C29359) * C54885 +
              (C29996 - C29995) * C54751) *
                 C38291 +
             ((C4225 - C4224) * C54884 + (C4881 - C4880) * C54750 +
              (C180 * C6247 - C89236 * C6335) * C54885 +
              (C180 * C6729 - C89236 * C6809) * C54751) *
                 C38292) *
                C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eezz[46] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C54884 * C264 - C55318 * C106 - C54884 * C565 +
                        C54750 * C700 + C54885 * C1934 - C55319 * C1724 -
                        C54885 * C2330 + C54751 * C2512) *
                           C89236 * C38291 +
                       (C55357 + C55358) * C89236 * C38292) *
                          C89308 -
                      ((C57361 + C57362) * C89236 * C38292 +
                       (C54885 * C1937 - C55319 * C1725 - C54885 * C2333 +
                        C54751 * C2513 + C54884 * C1934 - C55318 * C1724 -
                        C54884 * C2330 + C54750 * C2512) *
                           C89236 * C38291) *
                          C89217) *
                         C89307 +
                     (((C54884 * C4325 - C55318 * C4097 - C54884 * C4767 +
                        C54750 * C4979 + C54885 * C6413 - C55319 * C6249 -
                        C54885 * C6727 + C54751 * C6886) *
                           C89236 * C38291 +
                       (C60416 + C60417) * C89236 * C38292) *
                          C89217 -
                      ((C56306 + C56307) * C89236 * C38292 +
                       (C54885 * C4325 - C55319 * C4097 - C54885 * C4767 +
                        C54751 * C4979 + C54884 * C1029 - C55318 * C819 -
                        C54884 * C1425 + C54750 * C1607) *
                           C89236 * C38291) *
                          C89308) *
                         C89189) *
                        C815 +
                    ((((C57362 + C57361) * C89236 * C38291 +
                       (C59210 + C59211) * C89236 * C38292) *
                          C89217 -
                      ((C55359 + C55360) * C89236 * C38292 +
                       (C55358 + C55357) * C89236 * C38291) *
                          C89308) *
                         C89307 +
                     (((C56307 + C56306) * C89236 * C38291 +
                       (C58271 + C58272) * C89236 * C38292) *
                          C89308 -
                      ((C54885 * C6415 - C55319 * C6247 - C54885 * C6729 +
                        C54751 * C6884 + C54884 * C4327 - C55318 * C4099 -
                        C54884 * C4769 + C54750 * C4981) *
                           C89236 * C38292 +
                       (C60417 + C60416) * C89236 * C38291) *
                          C89217) *
                         C89189) *
                        C89124)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[47] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C38295 * C112 - C38296 * C106 - C38295 * C113 + C38291 * C124 +
             C38297 * C114 - C38298 * C107 - C38297 * C115 + C38292 * C125) *
                C54750 +
            (C38295 * C1734 - C38296 * C1724 - C38295 * C1735 + C38291 * C1748 +
             C38297 * C1732 - C38298 * C1723 - C38297 * C1733 +
             C38292 * C1747) *
                C54751) *
               C89236 * C89153 * C812 -
           ((C42921 + C42922) * C54751 + (C39063 + C39062) * C54750) * C89236 *
               C89153 * C813 +
           ((C39065 + C39064) * C54750 + (C48595 + C48596) * C54751) * C89236 *
               C89153 * C814) *
              C815 +
          (((C39066 + C39067) * C54750 + (C42923 + C42924) * C54751) * C89236 *
               C89153 * C813 -
           ((C38297 * C1730 - C38298 * C1722 - C38297 * C1731 + C38292 * C1746 +
             C38295 * C1732 - C38296 * C1723 - C38295 * C1733 +
             C38291 * C1747) *
                C54751 +
            (C38297 * C116 - C38298 * C108 - C38297 * C117 + C38292 * C126 +
             C38295 * C114 - C38296 * C107 - C38295 * C115 + C38291 * C125) *
                C54750) *
               C89236 * C89153 * C812 -
           ((C38297 * C8517 - C38298 * C8514 - C38297 * C8518 + C38292 * C8523 +
             C38295 * C8519 - C38296 * C8515 - C38295 * C8520 +
             C38291 * C8524) *
                C54751 +
            (C39069 + C39068) * C54750) *
               C89236 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C38295 * C112 - C38296 * C106 - C38295 * C113 + C38291 * C124 +
            C38297 * C114 - C38298 * C107 - C38297 * C115 + C38292 * C125) *
               C54750 +
           (C38295 * C1734 - C38296 * C1724 - C38295 * C1735 + C38291 * C1748 +
            C38297 * C1732 - C38298 * C1723 - C38297 * C1733 + C38292 * C1747) *
               C54751) *
              C89236 * C89153 * C89137 * C96 -
          ((C38297 * C1730 - C38298 * C1722 - C38297 * C1731 + C38292 * C1746 +
            C38295 * C1732 - C38296 * C1723 - C38295 * C1733 + C38291 * C1747) *
               C54751 +
           (C38297 * C116 - C38298 * C108 - C38297 * C117 + C38292 * C126 +
            C38295 * C114 - C38296 * C107 - C38295 * C115 + C38291 * C125) *
               C54750) *
              C89236 * C89153 * C89137 * C97 +
          ((C38295 * C116 - C38296 * C108 - C38295 * C117 + C38291 * C126 +
            C38297 * C118 - C38298 * C109 - C38297 * C119 + C38292 * C127) *
               C54750 +
           (C38295 * C1730 - C38296 * C1722 - C38295 * C1731 + C38291 * C1746 +
            C38297 * C1742 - C38298 * C1728 - C38297 * C1743 + C38292 * C1752) *
               C54751) *
              C89236 * C89153 * C89137 * C98 -
          ((C38297 * C3353 - C38298 * C3352 - C38297 * C3354 + C38292 * C3355 +
            C38295 * C1742 - C38296 * C1728 - C38295 * C1743 + C38291 * C1752) *
               C54751 +
           (C38297 * C120 - C38298 * C110 - C38297 * C121 + C38292 * C128 +
            C38295 * C118 - C38296 * C109 - C38295 * C119 + C38291 * C127) *
               C54750) *
              C89236 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C38295 * C112 - C38296 * C106 - C38295 * C113 + C38291 * C124 +
             C38297 * C114 - C38298 * C107 - C38297 * C115 + C38292 * C125) *
                C54750 +
            (C56456 + C56457) * C54751) *
               C89236 * C1719 -
           ((C56458 + C56459) * C54751 + (C56457 + C56456) * C54750) * C89236 *
               C1720 +
           ((C56459 + C56458) * C54750 +
            (C38295 * C10549 - C38296 * C10544 - C38295 * C10550 +
             C38291 * C10553 + C38297 * C10547 - C38298 * C10543 -
             C38297 * C10548 + C38292 * C10552) *
                C54751) *
               C89236 * C1721) *
              C89137 * C815 +
          (((C56460 + C56461) * C54750 + (C56462 + C56463) * C54751) * C89236 *
               C1720 -
           ((C56461 + C56460) * C54751 +
            (C38297 * C116 - C38298 * C108 - C38297 * C117 + C38292 * C126 +
             C38295 * C114 - C38296 * C107 - C38295 * C115 + C38291 * C125) *
                C54750) *
               C89236 * C1719 -
           ((C38297 * C10545 - C38298 * C10542 - C38297 * C10546 +
             C38292 * C10551 + C38295 * C10547 - C38296 * C10543 -
             C38295 * C10548 + C38291 * C10552) *
                C54751 +
            (C56463 + C56462) * C54750) *
               C89236 * C1721) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q));
    d2eexy[47] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C38295 +
             (C89236 * C187 - C180 * C113) * C38291 + (C194 - C195) * C38297 +
             (C196 - C197) * C38292) *
                C54750 +
            ((C27126 - C27127) * C38295 + (C27128 - C27129) * C38291 +
             (C1846 - C1845) * C38297 + (C1848 - C1847) * C38292) *
                C54751) *
               C89153 * C812 +
           (((C180 * C819 - C89236 * C923) * C38295 +
             (C180 * C830 - C89236 * C931) * C38291 + (C940 - C941) * C38297 +
             (C942 - C943) * C38292) *
                C54750 +
            ((C29351 - C29352) * C38295 + (C29353 - C29354) * C38291 +
             (C4221 - C4220) * C38297 + (C4223 - C4222) * C38292) *
                C54751) *
               C89153 * C813 +
           (((C89236 * C926 - C180 * C820) * C38295 +
             (C89236 * C934 - C180 * C832) * C38291 + (C948 - C949) * C38297 +
             (C950 - C951) * C38292) *
                C54750 +
            ((C33629 - C33630) * C38295 + (C33631 - C33632) * C38291 +
             (C55559 - C55560) * C38297 + (C55561 - C55562) * C38292) *
                C54751) *
               C89153 * C814) *
              C815 +
          ((((C195 - C194) * C38295 + (C197 - C196) * C38291 +
             (C199 - C198) * C38297 + (C201 - C200) * C38292) *
                C54750 +
            ((C1845 - C1846) * C38295 + (C1847 - C1848) * C38291 +
             C3433 * C38297 + C3434 * C38292) *
                C54751) *
               C89153 * C812 +
           (((C941 - C940) * C38295 + (C943 - C942) * C38291 +
             (C945 - C944) * C38297 + (C947 - C946) * C38292) *
                C54750 +
            ((C4220 - C4221) * C38295 + (C4222 - C4223) * C38291 +
             (C4224 - C4225) * C38297 + (C4226 - C4227) * C38292) *
                C54751) *
               C89153 * C813 +
           (((C949 - C948) * C38295 + (C951 - C950) * C38291 +
             (C953 - C952) * C38297 + (C955 - C954) * C38292) *
                C54750 +
            ((C55560 - C55559) * C38295 + (C55562 - C55561) * C38291 +
             (C180 * C8514 - C89236 * C8602) * C38297 +
             (C180 * C8518 - C89236 * C8605) * C38292) *
                C54751) *
               C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89236 * C181 - C180 * C106) * C38295 +
            (C89236 * C187 - C180 * C113) * C38291 + (C194 - C195) * C38297 +
            (C196 - C197) * C38292) *
               C54750 +
           ((C27126 - C27127) * C38295 + (C27128 - C27129) * C38291 +
            (C1846 - C1845) * C38297 + (C1848 - C1847) * C38292) *
               C54751) *
              C89153 * C89137 * C96 +
          (((C195 - C194) * C38295 + (C197 - C196) * C38291 +
            (C199 - C198) * C38297 + (C201 - C200) * C38292) *
               C54750 +
           ((C1845 - C1846) * C38295 + (C1847 - C1848) * C38291 +
            C3433 * C38297 + C3434 * C38292) *
               C54751) *
              C89153 * C89137 * C97 +
          ((C210 * C38295 + C211 * C38291 + (C203 - C202) * C38297 +
            (C205 - C204) * C38292) *
               C54750 +
           ((C1850 - C1849) * C38295 + (C1852 - C1851) * C38291 +
            (C3435 - C3436) * C38297 + (C3437 - C3438) * C38292) *
               C54751) *
              C89153 * C89137 * C98 +
          ((C212 * C38295 + C213 * C38291 + (C207 - C206) * C38297 +
            (C209 - C208) * C38292) *
               C54750 +
           ((C3436 - C3435) * C38295 + (C3438 - C3437) * C38291 +
            (C180 * C3352 - C89236 * C3430) * C38297 +
            (C180 * C3354 - C89236 * C3431) * C38292) *
               C54751) *
              C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C38295 +
             (C89236 * C187 - C180 * C113) * C38291 + (C194 - C195) * C38297 +
             (C196 - C197) * C38292) *
                C54750 +
            ((C27126 - C27127) * C38295 + (C27128 - C27129) * C38291 +
             C56562 * C38297 + C56563 * C38292) *
                C54751) *
               C1719 +
           (((C27127 - C27126) * C38295 + (C27129 - C27128) * C38291 +
             C56564 * C38297 + C56565 * C38292) *
                C54750 +
            ((C27131 - C27130) * C38295 + (C27133 - C27132) * C38291 +
             C27138 * C38297 + C27139 * C38292) *
                C54751) *
               C1720 +
           ((C27144 * C38295 + C27145 * C38291 + C56566 * C38297 +
             C56567 * C38292) *
                C54750 +
            ((C27135 - C27134) * C38295 + (C27137 - C27136) * C38291 +
             (C27140 - C27141) * C38297 + (C27142 - C27143) * C38292) *
                C54751) *
               C1721) *
              C89137 * C815 +
          ((((C195 - C194) * C38295 + (C197 - C196) * C38291 +
             (C199 - C198) * C38297 + (C201 - C200) * C38292) *
                C54750 +
            (C56564 * C38295 + C56565 * C38291 + C3433 * C38297 +
             C3434 * C38292) *
                C54751) *
               C1719 +
           ((C56562 * C38295 + C56563 * C38291 + (C1850 - C1849) * C38297 +
             (C1852 - C1851) * C38292) *
                C54750 +
            (C56566 * C38295 + C56567 * C38291 + (C1857 - C1858) * C38297 +
             (C1859 - C1860) * C38292) *
                C54751) *
               C1720 +
           ((C27138 * C38295 + C27139 * C38291 + (C1858 - C1857) * C38297 +
             (C1860 - C1859) * C38292) *
                C54750 +
            ((C27141 - C27140) * C38295 + (C27143 - C27142) * C38291 +
             (C180 * C10542 - C89236 * C10606) * C38297 +
             (C180 * C10546 - C89236 * C10609) * C38292) *
                C54751) *
               C1721) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q));
    d2eexz[47] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                C38295 +
            (C54750 * C270 - C54884 * C113 + C54751 * C1942 - C54885 * C1735) *
                C38291 +
            (C54887 - C54888 + C54889 - C54890) * C38297 +
            (C54891 - C54892 + C54893 - C54894) * C38292) *
               C89236 * C89153 * C812 +
           ((C54884 * C819 - C54750 * C1029 + C54885 * C4097 - C54751 * C4325) *
                C38295 +
            (C54884 * C830 - C54750 * C1037 + C54885 * C4102 - C54751 * C4329) *
                C38291 +
            (C55661 - C55662 + C55663 - C55664) * C38297 +
            (C55665 - C55666 + C55667 - C55668) * C38292) *
               C89236 * C89153 * C813 +
           ((C54750 * C1032 - C54884 * C820 + C54751 * C8680 - C54885 * C8516) *
                C38295 +
            (C54750 * C1040 - C54884 * C832 + C54751 * C8683 - C54885 * C8522) *
                C38291 +
            (C55669 - C55670 + C55671 - C55672) * C38297 +
            (C55673 - C55674 + C55675 - C55676) * C38292) *
               C89236 * C89153 * C814) *
              C815 +
          (((C54888 - C54887 + C54890 - C54889) * C38295 +
            (C54892 - C54891 + C54894 - C54893) * C38291 +
            (C54895 - C54896 + C54897 - C54898) * C38297 +
            (C54899 - C54900 + C54901 - C54902) * C38292) *
               C89236 * C89153 * C812 +
           ((C55662 - C55661 + C55664 - C55663) * C38295 +
            (C55666 - C55665 + C55668 - C55667) * C38291 +
            (C54750 * C1031 - C54884 * C817 + C54751 * C4327 - C54885 * C4099) *
                C38297 +
            (C54750 * C1039 - C54884 * C826 + C54751 * C4331 - C54885 * C4106) *
                C38292) *
               C89236 * C89153 * C813 +
           ((C55670 - C55669 + C55672 - C55671) * C38295 +
            (C55674 - C55673 + C55676 - C55675) * C38291 +
            (C54884 * C822 - C54750 * C1034 + C54885 * C8514 - C54751 * C8682) *
                C38297 +
            (C54884 * C836 - C54750 * C1042 + C54885 * C8518 - C54751 * C8685) *
                C38292) *
               C89236 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
               C38295 +
           (C54750 * C270 - C54884 * C113 + C54751 * C1942 - C54885 * C1735) *
               C38291 +
           (C54887 - C54888 + C54889 - C54890) * C38297 +
           (C54891 - C54892 + C54893 - C54894) * C38292) *
              C89236 * C89153 * C89137 * C96 +
          ((C54888 - C54887 + C54890 - C54889) * C38295 +
           (C54892 - C54891 + C54894 - C54893) * C38291 +
           (C54895 - C54896 + C54897 - C54898) * C38297 +
           (C54899 - C54900 + C54901 - C54902) * C38292) *
              C89236 * C89153 * C89137 * C97 +
          ((C54896 - C54895 + C54898 - C54897) * C38295 +
           (C54900 - C54899 + C54902 - C54901) * C38291 +
           (C54903 - C54904 + C54905 - C54906) * C38297 +
           (C54907 - C54908 + C54909 - C54910) * C38292) *
              C89236 * C89153 * C89137 * C98 +
          ((C54904 - C54903 + C54906 - C54905) * C38295 +
           (C54908 - C54907 + C54910 - C54909) * C38291 +
           (C54884 * C110 - C54750 * C268 + C54885 * C3352 - C54751 * C3512) *
               C38297 +
           (C54884 * C121 - C54750 * C274 + C54885 * C3354 - C54751 * C3513) *
               C38292) *
              C89236 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                C38295 +
            (C54750 * C270 - C54884 * C113 + C54751 * C1942 - C54885 * C1735) *
                C38291 +
            (C54887 - C54888 + C54889 - C54890) * C38297 +
            (C54891 - C54892 + C54893 - C54894) * C38292) *
               C89236 * C1719 +
           ((C54884 * C1724 - C54750 * C1934 + C54885 * C1725 -
             C54751 * C1937) *
                C38295 +
            (C54884 * C1735 - C54750 * C1942 + C54885 * C1737 -
             C54751 * C1945) *
                C38291 +
            (C56666 - C56667 + C56668 - C56669) * C38297 +
            (C56670 - C56671 + C56672 - C56673) * C38292) *
               C89236 * C1720 +
           ((C54750 * C1937 - C54884 * C1725 + C54751 * C10660 -
             C54885 * C10544) *
                C38295 +
            (C54750 * C1945 - C54884 * C1737 + C54751 * C10663 -
             C54885 * C10550) *
                C38291 +
            (C56674 - C56675 + C56676 - C56677) * C38297 +
            (C56678 - C56679 + C56680 - C56681) * C38292) *
               C89236 * C1721) *
              C89137 * C815 +
          (((C54888 - C54887 + C54890 - C54889) * C38295 +
            (C54892 - C54891 + C54894 - C54893) * C38291 +
            (C54895 - C54896 + C54897 - C54898) * C38297 +
            (C54899 - C54900 + C54901 - C54902) * C38292) *
               C89236 * C1719 +
           ((C56667 - C56666 + C56669 - C56668) * C38295 +
            (C56671 - C56670 + C56673 - C56672) * C38291 +
            (C54750 * C1936 - C54884 * C1722 + C54751 * C1939 -
             C54885 * C1727) *
                C38297 +
            (C54750 * C1944 - C54884 * C1731 + C54751 * C1947 -
             C54885 * C1741) *
                C38292) *
               C89236 * C1720 +
           ((C56675 - C56674 + C56677 - C56676) * C38295 +
            (C56679 - C56678 + C56681 - C56680) * C38291 +
            (C54884 * C1727 - C54750 * C1939 + C54885 * C10542 -
             C54751 * C10662) *
                C38297 +
            (C54884 * C1741 - C54750 * C1947 + C54885 * C10546 -
             C54751 * C10665) *
                C38292) *
               C89236 * C1721) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[47] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                 C180 +
             (C38291 * C352 - C38295 * C346 + C38292 * C353 - C38297 * C347) *
                 C89236) *
                C54750 +
            ((C38291 * C1734 - C38295 * C1724 + C38292 * C1732 -
              C38297 * C1723) *
                 C180 +
             (C38291 * C2048 - C38295 * C2040 + C38292 * C2049 -
              C38297 * C2041) *
                 C89236) *
                C54751) *
               C89153 * C812 +
           (((C39387 - C39386 + C39389 - C39388) * C180 +
             (C39391 - C39390 + C39393 - C39392) * C89236) *
                C54750 +
            ((C43327 - C43328 + C43329 - C43330) * C180 +
             (C43331 - C43332 + C43333 - C43334) * C89236) *
                C54751) *
               C89153 * C813 +
           (((C39395 - C39394 + C39397 - C39396) * C180 +
             (C39399 - C39398 + C39401 - C39400) * C89236) *
                C54750 +
            ((C48891 - C48892 + C48893 - C48894) * C180 +
             (C48895 - C48896 + C48897 - C48898) * C89236) *
                C54751) *
               C89153 * C814) *
              C815 +
          ((((C38295 * C107 - C38291 * C114 + C38297 * C108 - C38292 * C116) *
                 C180 +
             (C38295 * C347 - C38291 * C353 + C38297 * C348 - C38292 * C354) *
                 C89236) *
                C54750 +
            ((C38295 * C1723 - C38291 * C1732 + C38297 * C1722 -
              C38292 * C1730) *
                 C180 +
             (C38295 * C2041 - C38291 * C2049 + C38297 * C2042 -
              C38292 * C2050) *
                 C89236) *
                C54751) *
               C89153 * C812 +
           (((C39403 - C39402 + C39405 - C39404) * C180 +
             (C39407 - C39406 + C39409 - C39408) * C89236) *
                C54750 +
            ((C43335 - C43336 + C43337 - C43338) * C180 +
             (C43339 - C43340 + C43341 - C43342) * C89236) *
                C54751) *
               C89153 * C813 +
           (((C39411 - C39410 + C39413 - C39412) * C180 +
             (C39415 - C39414 + C39417 - C39416) * C89236) *
                C54750 +
            ((C38295 * C8515 - C38291 * C8519 + C38297 * C8514 -
              C38292 * C8517) *
                 C180 +
             (C38295 * C8761 - C38291 * C8764 + C38297 * C8762 -
              C38292 * C8765) *
                 C89236) *
                C54751) *
               C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                C180 +
            (C38291 * C352 - C38295 * C346 + C38292 * C353 - C38297 * C347) *
                C89236) *
               C54750 +
           ((C38291 * C1734 - C38295 * C1724 + C38292 * C1732 -
             C38297 * C1723) *
                C180 +
            (C38291 * C2048 - C38295 * C2040 + C38292 * C2049 -
             C38297 * C2041) *
                C89236) *
               C54751) *
              C89153 * C89137 * C96 +
          (((C38295 * C107 - C38291 * C114 + C38297 * C108 - C38292 * C116) *
                C180 +
            (C38295 * C347 - C38291 * C353 + C38297 * C348 - C38292 * C354) *
                C89236) *
               C54750 +
           ((C38295 * C1723 - C38291 * C1732 + C38297 * C1722 -
             C38292 * C1730) *
                C180 +
            (C38295 * C2041 - C38291 * C2049 + C38297 * C2042 -
             C38292 * C2050) *
                C89236) *
               C54751) *
              C89153 * C89137 * C97 +
          (((C38291 * C116 - C38295 * C108 + C38292 * C118 - C38297 * C109) *
                C180 +
            (C38291 * C354 - C38295 * C348 + C38292 * C355 - C38297 * C349) *
                C89236) *
               C54750 +
           ((C38291 * C1730 - C38295 * C1722 + C38292 * C1742 -
             C38297 * C1728) *
                C180 +
            (C38291 * C2050 - C38295 * C2042 + C38292 * C2054 -
             C38297 * C2046) *
                C89236) *
               C54751) *
              C89153 * C89137 * C98 +
          (((C38295 * C109 - C38291 * C118 + C38297 * C110 - C38292 * C120) *
                C180 +
            (C38295 * C349 - C38291 * C355 + C38297 * C350 - C38292 * C356) *
                C89236) *
               C54750 +
           ((C38295 * C1728 - C38291 * C1742 + C38297 * C3352 -
             C38292 * C3353) *
                C180 +
            (C38295 * C2046 - C38291 * C2054 + C38297 * C3594 -
             C38292 * C3595) *
                C89236) *
               C54751) *
              C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                 C180 +
             (C38291 * C352 - C38295 * C346 + C38292 * C353 - C38297 * C347) *
                 C89236) *
                C54750 +
            ((C56780 - C56781 + C56782 - C56783) * C180 +
             (C56784 - C56785 + C56786 - C56787) * C89236) *
                C54751) *
               C1719 +
           (((C56781 - C56780 + C56783 - C56782) * C180 +
             (C56785 - C56784 + C56787 - C56786) * C89236) *
                C54750 +
            ((C56788 - C56789 + C56790 - C56791) * C180 +
             (C56792 - C56793 + C56794 - C56795) * C89236) *
                C54751) *
               C1720 +
           (((C56789 - C56788 + C56791 - C56790) * C180 +
             (C56793 - C56792 + C56795 - C56794) * C89236) *
                C54750 +
            ((C38291 * C10549 - C38295 * C10544 + C38292 * C10547 -
              C38297 * C10543) *
                 C180 +
             (C38291 * C10719 - C38295 * C10716 + C38292 * C10720 -
              C38297 * C10717) *
                 C89236) *
                C54751) *
               C1721) *
              C89137 * C815 +
          ((((C38295 * C107 - C38291 * C114 + C38297 * C108 - C38292 * C116) *
                 C180 +
             (C38295 * C347 - C38291 * C353 + C38297 * C348 - C38292 * C354) *
                 C89236) *
                C54750 +
            ((C56796 - C56797 + C56798 - C56799) * C180 +
             (C56800 - C56801 + C56802 - C56803) * C89236) *
                C54751) *
               C1719 +
           (((C56797 - C56796 + C56799 - C56798) * C180 +
             (C56801 - C56800 + C56803 - C56802) * C89236) *
                C54750 +
            ((C56804 - C56805 + C56806 - C56807) * C180 +
             (C56808 - C56809 + C56810 - C56811) * C89236) *
                C54751) *
               C1720 +
           (((C56805 - C56804 + C56807 - C56806) * C180 +
             (C56809 - C56808 + C56811 - C56810) * C89236) *
                C54750 +
            ((C38295 * C10543 - C38291 * C10547 + C38297 * C10542 -
              C38292 * C10545) *
                 C180 +
             (C38295 * C10717 - C38291 * C10720 + C38297 * C10718 -
              C38292 * C10721) *
                 C89236) *
                C54751) *
               C1721) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[47] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) *
                 C38291 +
             C440 * C38292) *
                C54750 +
            (C27444 * C38291 + C2164 * C38292) * C54751) *
               C89153 * C812 -
           ((C4562 * C38292 + C29685 * C38291) * C54751 +
            (C1259 * C38292 +
             (C180 * C923 - C408 * C819 - C180 * C1135 + C89236 * C1227) *
                 C38291) *
                C54750) *
               C89153 * C813 +
           (((C180 * C926 - C408 * C820 - C180 * C1138 + C89236 * C1228) *
                 C38291 +
             C1260 * C38292) *
                C54750 +
            (C33871 * C38291 + C55879 * C38292) * C54751) *
               C89153 * C814) *
              C815 +
          (((C1259 * C38291 + C1258 * C38292) * C54750 +
            (C4562 * C38291 + C4563 * C38292) * C54751) *
               C89153 * C813 -
           ((C2163 * C38292 + C2164 * C38291) * C54751 +
            (C441 * C38292 + C440 * C38291) * C54750) *
               C89153 * C812 -
           (((C180 * C8602 - C408 * C8514 - C180 * C8762 + C89236 * C8840) *
                 C38292 +
             C55879 * C38291) *
                C54751 +
            (C1261 * C38292 + C1260 * C38291) * C54750) *
               C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C38291 +
            C440 * C38292) *
               C54750 +
           (C27444 * C38291 + C2164 * C38292) * C54751) *
              C89153 * C89137 * C96 -
          ((C2163 * C38292 + C2164 * C38291) * C54751 +
           (C441 * C38292 + C440 * C38291) * C54750) *
              C89153 * C89137 * C97 +
          ((C441 * C38291 + C442 * C38292) * C54750 +
           (C2163 * C38291 + C3678 * C38292) * C54751) *
              C89153 * C89137 * C98 -
          (((C180 * C3430 - C408 * C3352 - C180 * C3594 + C89236 * C3670) *
                C38292 +
            C3678 * C38291) *
               C54751 +
           (C443 * C38292 + C442 * C38291) * C54750) *
              C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) *
                 C38291 +
             C440 * C38292) *
                C54750 +
            (C56910 + C56911) * C54751) *
               C1719 -
           ((C56912 + C56913) * C54751 + (C56911 + C56910) * C54750) * C1720 +
           ((C56913 + C56912) * C54750 +
            (C27446 * C38291 + C27447 * C38292) * C54751) *
               C1721) *
              C89137 * C815 +
          (((C56914 + C56915) * C54750 + (C56916 + C56917) * C54751) * C1720 -
           ((C56915 + C56914) * C54751 +
            (C441 * C38292 + C440 * C38291) * C54750) *
               C1719 -
           (((C180 * C10606 - C408 * C10542 - C180 * C10718 + C89236 * C10772) *
                 C38292 +
             C27447 * C38291) *
                C54751 +
            (C56917 + C56916) * C54750) *
               C1721) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[47] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                 C180 +
             (C54750 * C493 - C54884 * C346 + C54751 * C2240 - C54885 * C2040) *
                 C89236) *
                C38291 +
            ((C54887 - C54888 + C54889 - C54890) * C180 +
             (C55109 - C55110 + C55111 - C55112) * C89236) *
                C38292) *
               C89153 * C812 +
           (((C54884 * C819 - C54750 * C1029 + C54885 * C4097 -
              C54751 * C4325) *
                 C180 +
             (C54884 * C1135 - C54750 * C1335 + C54885 * C4439 -
              C54751 * C4661) *
                 C89236) *
                C38291 +
            ((C55661 - C55662 + C55663 - C55664) * C180 +
             (C55978 - C55979 + C55980 - C55981) * C89236) *
                C38292) *
               C89153 * C813 +
           (((C54750 * C1032 - C54884 * C820 + C54751 * C8680 -
              C54885 * C8516) *
                 C180 +
             (C54750 * C1338 - C54884 * C1138 + C54751 * C8917 -
              C54885 * C8760) *
                 C89236) *
                C38291 +
            ((C55669 - C55670 + C55671 - C55672) * C180 +
             (C55982 - C55983 + C55984 - C55985) * C89236) *
                C38292) *
               C89153 * C814) *
              C815 +
          ((((C54888 - C54887 + C54890 - C54889) * C180 +
             (C55110 - C55109 + C55112 - C55111) * C89236) *
                C38291 +
            ((C54895 - C54896 + C54897 - C54898) * C180 +
             (C55113 - C55114 + C55115 - C55116) * C89236) *
                C38292) *
               C89153 * C812 +
           (((C55662 - C55661 + C55664 - C55663) * C180 +
             (C55979 - C55978 + C55981 - C55980) * C89236) *
                C38291 +
            ((C54750 * C1031 - C54884 * C817 + C54751 * C4327 -
              C54885 * C4099) *
                 C180 +
             (C54750 * C1337 - C54884 * C1137 + C54751 * C4663 -
              C54885 * C4441) *
                 C89236) *
                C38292) *
               C89153 * C813 +
           (((C55670 - C55669 + C55672 - C55671) * C180 +
             (C55983 - C55982 + C55985 - C55984) * C89236) *
                C38291 +
            ((C54884 * C822 - C54750 * C1034 + C54885 * C8514 -
              C54751 * C8682) *
                 C180 +
             (C54884 * C1140 - C54750 * C1340 + C54885 * C8762 -
              C54751 * C8919) *
                 C89236) *
                C38292) *
               C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                C180 +
            (C54750 * C493 - C54884 * C346 + C54751 * C2240 - C54885 * C2040) *
                C89236) *
               C38291 +
           ((C54887 - C54888 + C54889 - C54890) * C180 +
            (C55109 - C55110 + C55111 - C55112) * C89236) *
               C38292) *
              C89153 * C89137 * C96 +
          (((C54888 - C54887 + C54890 - C54889) * C180 +
            (C55110 - C55109 + C55112 - C55111) * C89236) *
               C38291 +
           ((C54895 - C54896 + C54897 - C54898) * C180 +
            (C55113 - C55114 + C55115 - C55116) * C89236) *
               C38292) *
              C89153 * C89137 * C97 +
          (((C54896 - C54895 + C54898 - C54897) * C180 +
            (C55114 - C55113 + C55116 - C55115) * C89236) *
               C38291 +
           ((C54903 - C54904 + C54905 - C54906) * C180 +
            (C55117 - C55118 + C55119 - C55120) * C89236) *
               C38292) *
              C89153 * C89137 * C98 +
          (((C54904 - C54903 + C54906 - C54905) * C180 +
            (C55118 - C55117 + C55120 - C55119) * C89236) *
               C38291 +
           ((C54884 * C110 - C54750 * C268 + C54885 * C3352 - C54751 * C3512) *
                C180 +
            (C54884 * C350 - C54750 * C497 + C54885 * C3594 - C54751 * C3752) *
                C89236) *
               C38292) *
              C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                 C180 +
             (C54750 * C493 - C54884 * C346 + C54751 * C2240 - C54885 * C2040) *
                 C89236) *
                C38291 +
            ((C54887 - C54888 + C54889 - C54890) * C180 +
             (C55109 - C55110 + C55111 - C55112) * C89236) *
                C38292) *
               C1719 +
           (((C54884 * C1724 - C54750 * C1934 + C54885 * C1725 -
              C54751 * C1937) *
                 C180 +
             (C54884 * C2040 - C54750 * C2240 + C54885 * C2043 -
              C54751 * C2243) *
                 C89236) *
                C38291 +
            ((C56666 - C56667 + C56668 - C56669) * C180 +
             (C57016 - C57017 + C57018 - C57019) * C89236) *
                C38292) *
               C1720 +
           (((C54750 * C1937 - C54884 * C1725 + C54751 * C10660 -
              C54885 * C10544) *
                 C180 +
             (C54750 * C2243 - C54884 * C2043 + C54751 * C10825 -
              C54885 * C10716) *
                 C89236) *
                C38291 +
            ((C56674 - C56675 + C56676 - C56677) * C180 +
             (C57020 - C57021 + C57022 - C57023) * C89236) *
                C38292) *
               C1721) *
              C89137 * C815 +
          ((((C54888 - C54887 + C54890 - C54889) * C180 +
             (C55110 - C55109 + C55112 - C55111) * C89236) *
                C38291 +
            ((C54895 - C54896 + C54897 - C54898) * C180 +
             (C55113 - C55114 + C55115 - C55116) * C89236) *
                C38292) *
               C1719 +
           (((C56667 - C56666 + C56669 - C56668) * C180 +
             (C57017 - C57016 + C57019 - C57018) * C89236) *
                C38291 +
            ((C54750 * C1936 - C54884 * C1722 + C54751 * C1939 -
              C54885 * C1727) *
                 C180 +
             (C54750 * C2242 - C54884 * C2042 + C54751 * C2245 -
              C54885 * C2045) *
                 C89236) *
                C38292) *
               C1720 +
           (((C56675 - C56674 + C56677 - C56676) * C180 +
             (C57021 - C57020 + C57023 - C57022) * C89236) *
                C38291 +
            ((C54884 * C1727 - C54750 * C1939 + C54885 * C10542 -
              C54751 * C10662) *
                 C180 +
             (C54884 * C2045 - C54750 * C2245 + C54885 * C10718 -
              C54751 * C10827) *
                 C89236) *
                C38292) *
               C1721) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q));
    d2eezx[47] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                C54884 +
            (C38291 * C571 - C38295 * C565 + C38292 * C572 - C38297 * C566) *
                C54750 +
            (C38291 * C1734 - C38295 * C1724 + C38292 * C1732 -
             C38297 * C1723) *
                C54885 +
            (C38291 * C2338 - C38295 * C2330 + C38292 * C2339 -
             C38297 * C2331) *
                C54751) *
               C89236 * C89153 * C812 +
           ((C39387 - C39386 + C39389 - C39388) * C54884 +
            (C39744 - C39743 + C39746 - C39745) * C54750 +
            (C43327 - C43328 + C43329 - C43330) * C54885 +
            (C43749 - C43750 + C43751 - C43752) * C54751) *
               C89236 * C89153 * C813 +
           ((C39395 - C39394 + C39397 - C39396) * C54884 +
            (C39748 - C39747 + C39750 - C39749) * C54750 +
            (C48891 - C48892 + C48893 - C48894) * C54885 +
            (C49193 - C49194 + C49195 - C49196) * C54751) *
               C89236 * C89153 * C814) *
              C815 +
          (((C38295 * C107 - C38291 * C114 + C38297 * C108 - C38292 * C116) *
                C54884 +
            (C38295 * C566 - C38291 * C572 + C38297 * C567 - C38292 * C573) *
                C54750 +
            (C38295 * C1723 - C38291 * C1732 + C38297 * C1722 -
             C38292 * C1730) *
                C54885 +
            (C38295 * C2331 - C38291 * C2339 + C38297 * C2332 -
             C38292 * C2340) *
                C54751) *
               C89236 * C89153 * C812 +
           ((C39403 - C39402 + C39405 - C39404) * C54884 +
            (C39752 - C39751 + C39754 - C39753) * C54750 +
            (C43335 - C43336 + C43337 - C43338) * C54885 +
            (C43753 - C43754 + C43755 - C43756) * C54751) *
               C89236 * C89153 * C813 +
           ((C39411 - C39410 + C39413 - C39412) * C54884 +
            (C39756 - C39755 + C39758 - C39757) * C54750 +
            (C38295 * C8515 - C38291 * C8519 + C38297 * C8514 -
             C38292 * C8517) *
                C54885 +
            (C38295 * C8995 - C38291 * C8998 + C38297 * C8996 -
             C38292 * C8999) *
                C54751) *
               C89236 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
               C54884 +
           (C38291 * C571 - C38295 * C565 + C38292 * C572 - C38297 * C566) *
               C54750 +
           (C38291 * C1734 - C38295 * C1724 + C38292 * C1732 - C38297 * C1723) *
               C54885 +
           (C38291 * C2338 - C38295 * C2330 + C38292 * C2339 - C38297 * C2331) *
               C54751) *
              C89236 * C89153 * C89137 * C96 +
          ((C38295 * C107 - C38291 * C114 + C38297 * C108 - C38292 * C116) *
               C54884 +
           (C38295 * C566 - C38291 * C572 + C38297 * C567 - C38292 * C573) *
               C54750 +
           (C38295 * C1723 - C38291 * C1732 + C38297 * C1722 - C38292 * C1730) *
               C54885 +
           (C38295 * C2331 - C38291 * C2339 + C38297 * C2332 - C38292 * C2340) *
               C54751) *
              C89236 * C89153 * C89137 * C97 +
          ((C38291 * C116 - C38295 * C108 + C38292 * C118 - C38297 * C109) *
               C54884 +
           (C38291 * C573 - C38295 * C567 + C38292 * C574 - C38297 * C568) *
               C54750 +
           (C38291 * C1730 - C38295 * C1722 + C38292 * C1742 - C38297 * C1728) *
               C54885 +
           (C38291 * C2340 - C38295 * C2332 + C38292 * C2344 - C38297 * C2336) *
               C54751) *
              C89236 * C89153 * C89137 * C98 +
          ((C38295 * C109 - C38291 * C118 + C38297 * C110 - C38292 * C120) *
               C54884 +
           (C38295 * C568 - C38291 * C574 + C38297 * C569 - C38292 * C575) *
               C54750 +
           (C38295 * C1728 - C38291 * C1742 + C38297 * C3352 - C38292 * C3353) *
               C54885 +
           (C38295 * C2336 - C38291 * C2344 + C38297 * C3833 - C38292 * C3834) *
               C54751) *
              C89236 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                C54884 +
            (C38291 * C571 - C38295 * C565 + C38292 * C572 - C38297 * C566) *
                C54750 +
            (C56780 - C56781 + C56782 - C56783) * C54885 +
            (C57122 - C57123 + C57124 - C57125) * C54751) *
               C89236 * C1719 +
           ((C56781 - C56780 + C56783 - C56782) * C54884 +
            (C57123 - C57122 + C57125 - C57124) * C54750 +
            (C56788 - C56789 + C56790 - C56791) * C54885 +
            (C57126 - C57127 + C57128 - C57129) * C54751) *
               C89236 * C1720 +
           ((C56789 - C56788 + C56791 - C56790) * C54884 +
            (C57127 - C57126 + C57129 - C57128) * C54750 +
            (C38291 * C10549 - C38295 * C10544 + C38292 * C10547 -
             C38297 * C10543) *
                C54885 +
            (C38291 * C10881 - C38295 * C10878 + C38292 * C10882 -
             C38297 * C10879) *
                C54751) *
               C89236 * C1721) *
              C89137 * C815 +
          (((C38295 * C107 - C38291 * C114 + C38297 * C108 - C38292 * C116) *
                C54884 +
            (C38295 * C566 - C38291 * C572 + C38297 * C567 - C38292 * C573) *
                C54750 +
            (C56796 - C56797 + C56798 - C56799) * C54885 +
            (C57130 - C57131 + C57132 - C57133) * C54751) *
               C89236 * C1719 +
           ((C56797 - C56796 + C56799 - C56798) * C54884 +
            (C57131 - C57130 + C57133 - C57132) * C54750 +
            (C56804 - C56805 + C56806 - C56807) * C54885 +
            (C57134 - C57135 + C57136 - C57137) * C54751) *
               C89236 * C1720 +
           ((C56805 - C56804 + C56807 - C56806) * C54884 +
            (C57135 - C57134 + C57137 - C57136) * C54750 +
            (C38295 * C10543 - C38291 * C10547 + C38297 * C10542 -
             C38292 * C10545) *
                C54885 +
            (C38295 * C10879 - C38291 * C10882 + C38297 * C10880 -
             C38292 * C10883) *
                C54751) *
               C89236 * C1721) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q));
    d2eezy[47] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C54884 +
             (C89236 * C627 - C180 * C565) * C54750 +
             (C27126 - C27127) * C54885 + (C27696 - C27697) * C54751) *
                C38291 +
            ((C194 - C195) * C54884 + (C634 - C635) * C54750 +
             (C1846 - C1845) * C54885 + (C2430 - C2429) * C54751) *
                C38292) *
               C89153 * C812 +
           (((C180 * C819 - C89236 * C923) * C54884 +
             (C180 * C1425 - C89236 * C1515) * C54750 +
             (C29351 - C29352) * C54885 + (C29991 - C29992) * C54751) *
                C38291 +
            ((C940 - C941) * C54884 + (C1524 - C1525) * C54750 +
             (C4221 - C4220) * C54885 + (C4879 - C4878) * C54751) *
                C38292) *
               C89153 * C813 +
           (((C89236 * C926 - C180 * C820) * C54884 +
             (C89236 * C1518 - C180 * C1428) * C54750 +
             (C33629 - C33630) * C54885 + (C34097 - C34098) * C54751) *
                C38291 +
            ((C948 - C949) * C54884 + (C1528 - C1529) * C54750 +
             (C55559 - C55560) * C54885 + (C56182 - C56183) * C54751) *
                C38292) *
               C89153 * C814) *
              C815 +
          ((((C195 - C194) * C54884 + (C635 - C634) * C54750 +
             (C1845 - C1846) * C54885 + (C2429 - C2430) * C54751) *
                C38291 +
            ((C199 - C198) * C54884 + (C638 - C637) * C54750 + C3433 * C54885 +
             C3912 * C54751) *
                C38292) *
               C89153 * C812 +
           (((C941 - C940) * C54884 + (C1525 - C1524) * C54750 +
             (C4220 - C4221) * C54885 + (C4878 - C4879) * C54751) *
                C38291 +
            ((C945 - C944) * C54884 + (C1527 - C1526) * C54750 +
             (C4224 - C4225) * C54885 + (C4880 - C4881) * C54751) *
                C38292) *
               C89153 * C813 +
           (((C949 - C948) * C54884 + (C1529 - C1528) * C54750 +
             (C55560 - C55559) * C54885 + (C56183 - C56182) * C54751) *
                C38291 +
            ((C953 - C952) * C54884 + (C1531 - C1530) * C54750 +
             (C180 * C8514 - C89236 * C8602) * C54885 +
             (C180 * C8996 - C89236 * C9076) * C54751) *
                C38292) *
               C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89236 * C181 - C180 * C106) * C54884 +
            (C89236 * C627 - C180 * C565) * C54750 +
            (C27126 - C27127) * C54885 + (C27696 - C27697) * C54751) *
               C38291 +
           ((C194 - C195) * C54884 + (C634 - C635) * C54750 +
            (C1846 - C1845) * C54885 + (C2430 - C2429) * C54751) *
               C38292) *
              C89153 * C89137 * C96 +
          (((C195 - C194) * C54884 + (C635 - C634) * C54750 +
            (C1845 - C1846) * C54885 + (C2429 - C2430) * C54751) *
               C38291 +
           ((C199 - C198) * C54884 + (C638 - C637) * C54750 + C3433 * C54885 +
            C3912 * C54751) *
               C38292) *
              C89153 * C89137 * C97 +
          ((C210 * C54884 + C644 * C54750 + (C1850 - C1849) * C54885 +
            (C2432 - C2431) * C54751) *
               C38291 +
           ((C203 - C202) * C54884 + (C641 - C640) * C54750 +
            (C3435 - C3436) * C54885 + (C3913 - C3914) * C54751) *
               C38292) *
              C89153 * C89137 * C98 +
          ((C212 * C54884 + C645 * C54750 + (C3436 - C3435) * C54885 +
            (C3914 - C3913) * C54751) *
               C38291 +
           ((C207 - C206) * C54884 + (C643 - C642) * C54750 +
            (C180 * C3352 - C89236 * C3430) * C54885 +
            (C180 * C3833 - C89236 * C3909) * C54751) *
               C38292) *
              C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C54884 +
             (C89236 * C627 - C180 * C565) * C54750 +
             (C27126 - C27127) * C54885 + (C27696 - C27697) * C54751) *
                C38291 +
            ((C194 - C195) * C54884 + (C634 - C635) * C54750 + C56562 * C54885 +
             C57236 * C54751) *
                C38292) *
               C1719 +
           (((C27127 - C27126) * C54884 + (C27697 - C27696) * C54750 +
             (C27131 - C27130) * C54885 + (C27699 - C27698) * C54751) *
                C38291 +
            (C56564 * C54884 + C57237 * C54750 + C27138 * C54885 +
             C27702 * C54751) *
                C38292) *
               C1720 +
           ((C27144 * C54884 + C27705 * C54750 + (C27135 - C27134) * C54885 +
             (C27701 - C27700) * C54751) *
                C38291 +
            (C56566 * C54884 + C57238 * C54750 + (C27140 - C27141) * C54885 +
             (C27703 - C27704) * C54751) *
                C38292) *
               C1721) *
              C89137 * C815 +
          ((((C195 - C194) * C54884 + (C635 - C634) * C54750 + C56564 * C54885 +
             C57237 * C54751) *
                C38291 +
            ((C199 - C198) * C54884 + (C638 - C637) * C54750 + C3433 * C54885 +
             C3912 * C54751) *
                C38292) *
               C1719 +
           ((C56562 * C54884 + C57236 * C54750 + C56566 * C54885 +
             C57238 * C54751) *
                C38291 +
            ((C1850 - C1849) * C54884 + (C2432 - C2431) * C54750 +
             (C1857 - C1858) * C54885 + (C2435 - C2436) * C54751) *
                C38292) *
               C1720 +
           ((C27138 * C54884 + C27702 * C54750 + (C27141 - C27140) * C54885 +
             (C27704 - C27703) * C54751) *
                C38291 +
            ((C1858 - C1857) * C54884 + (C2436 - C2435) * C54750 +
             (C180 * C10542 - C89236 * C10606) * C54885 +
             (C180 * C10880 - C89236 * C10936) * C54751) *
                C38292) *
               C1721) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q));
    d2eezz[47] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C54884 * C264 - C55318 * C106 - C54884 * C565 + C54750 * C700 +
             C54885 * C1934 - C55319 * C1724 - C54885 * C2330 +
             C54751 * C2512) *
                C89236 * C38291 +
            (C55357 + C55358) * C89236 * C38292) *
               C89153 * C812 -
           ((C56306 + C56307) * C89236 * C38292 +
            (C54885 * C4325 - C55319 * C4097 - C54885 * C4767 + C54751 * C4979 +
             C54884 * C1029 - C55318 * C819 - C54884 * C1425 + C54750 * C1607) *
                C89236 * C38291) *
               C89153 * C813 +
           ((C54884 * C1032 - C55318 * C820 - C54884 * C1428 + C54750 * C1608 +
             C54885 * C8680 - C55319 * C8516 - C54885 * C8994 +
             C54751 * C9153) *
                C89236 * C38291 +
            (C56308 + C56309) * C89236 * C38292) *
               C89153 * C814) *
              C815 +
          (((C56307 + C56306) * C89236 * C38291 +
            (C54884 * C1031 - C55318 * C817 - C54884 * C1427 + C54750 * C1605 +
             C54885 * C4327 - C55319 * C4099 - C54885 * C4769 +
             C54751 * C4981) *
                C89236 * C38292) *
               C89153 * C813 -
           ((C55359 + C55360) * C89236 * C38292 +
            (C55358 + C55357) * C89236 * C38291) *
               C89153 * C812 -
           ((C54885 * C8682 - C55319 * C8514 - C54885 * C8996 + C54751 * C9151 +
             C54884 * C1034 - C55318 * C822 - C54884 * C1430 + C54750 * C1610) *
                C89236 * C38292 +
            (C56309 + C56308) * C89236 * C38291) *
               C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C54884 * C264 - C55318 * C106 - C54884 * C565 + C54750 * C700 +
            C54885 * C1934 - C55319 * C1724 - C54885 * C2330 + C54751 * C2512) *
               C89236 * C38291 +
           (C55357 + C55358) * C89236 * C38292) *
              C89153 * C89137 * C96 -
          ((C55359 + C55360) * C89236 * C38292 +
           (C55358 + C55357) * C89236 * C38291) *
              C89153 * C89137 * C97 +
          ((C55360 + C55359) * C89236 * C38291 +
           (C55361 + C55362) * C89236 * C38292) *
              C89153 * C89137 * C98 -
          ((C54885 * C3512 - C55319 * C3352 - C54885 * C3833 + C54751 * C3990 +
            C54884 * C268 - C55318 * C110 - C54884 * C569 + C54750 * C704) *
               C89236 * C38292 +
           (C55362 + C55361) * C89236 * C38291) *
              C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C54884 * C264 - C55318 * C106 - C54884 * C565 + C54750 * C700 +
             C54885 * C1934 - C55319 * C1724 - C54885 * C2330 +
             C54751 * C2512) *
                C89236 * C38291 +
            (C55357 + C55358) * C89236 * C38292) *
               C1719 -
           ((C57361 + C57362) * C89236 * C38292 +
            (C54885 * C1937 - C55319 * C1725 - C54885 * C2333 + C54751 * C2513 +
             C54884 * C1934 - C55318 * C1724 - C54884 * C2330 +
             C54750 * C2512) *
                C89236 * C38291) *
               C1720 +
           ((C54884 * C1937 - C55318 * C1725 - C54884 * C2333 + C54750 * C2513 +
             C54885 * C10660 - C55319 * C10544 - C54885 * C10878 +
             C54751 * C10989) *
                C89236 * C38291 +
            (C57363 + C57364) * C89236 * C38292) *
               C1721) *
              C89137 * C815 +
          (((C57362 + C57361) * C89236 * C38291 +
            (C54884 * C1936 - C55318 * C1722 - C54884 * C2332 + C54750 * C2510 +
             C54885 * C1939 - C55319 * C1727 - C54885 * C2335 +
             C54751 * C2515) *
                C89236 * C38292) *
               C1720 -
           ((C55359 + C55360) * C89236 * C38292 +
            (C55358 + C55357) * C89236 * C38291) *
               C1719 -
           ((C54885 * C10662 - C55319 * C10542 - C54885 * C10880 +
             C54751 * C10987 + C54884 * C1939 - C55318 * C1727 -
             C54884 * C2335 + C54750 * C2515) *
                C89236 * C38292 +
            (C57364 + C57363) * C89236 * C38291) *
               C1721) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q));
    d2eexx[48] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C38295 * C112 - C38296 * C106 - C38295 * C113 + C38291 * C124 +
             C38297 * C114 - C38298 * C107 - C38297 * C115 + C38292 * C125) *
                C54750 +
            (C56456 + C56457) * C54751) *
               C89236 * C89308 -
           ((C56458 + C56459) * C54751 + (C56457 + C56456) * C54750) * C89236 *
               C89217) *
              C89137 * C89333 +
          (((C56460 + C56461) * C54750 + (C56462 + C56463) * C54751) * C89236 *
               C89217 -
           ((C56461 + C56460) * C54751 +
            (C38297 * C116 - C38298 * C108 - C38297 * C117 + C38292 * C126 +
             C38295 * C114 - C38296 * C107 - C38295 * C115 + C38291 * C125) *
                C54750) *
               C89236 * C89308) *
              C89137 * C89334 +
          (((C38295 * C116 - C38296 * C108 - C38295 * C117 + C38291 * C126 +
             C38297 * C118 - C38298 * C109 - C38297 * C119 + C38292 * C127) *
                C54750 +
            (C58383 + C58384) * C54751) *
               C89236 * C89308 -
           ((C38297 * C1744 - C38298 * C1729 - C38297 * C1745 + C38292 * C1753 +
             C38295 * C1740 - C38296 * C1727 - C38295 * C1741 +
             C38291 * C1751) *
                C54751 +
            (C58384 + C58383) * C54750) *
               C89236 * C89217) *
              C89137 * C2628)) /
        (p * q * std::sqrt(p + q));
    d2eexy[48] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C89236 * C181 - C180 * C106) * C38295 +
                       (C89236 * C187 - C180 * C113) * C38291 +
                       (C194 - C195) * C38297 + (C196 - C197) * C38292) *
                          C54750 +
                      ((C27126 - C27127) * C38295 + (C27128 - C27129) * C38291 +
                       C56562 * C38297 + C56563 * C38292) *
                          C54751) *
                         C89308 +
                     (((C27127 - C27126) * C38295 + (C27129 - C27128) * C38291 +
                       C56564 * C38297 + C56565 * C38292) *
                          C54750 +
                      ((C27131 - C27130) * C38295 + (C27133 - C27132) * C38291 +
                       C27138 * C38297 + C27139 * C38292) *
                          C54751) *
                         C89217) *
                        C89137 * C89333 +
                    ((((C195 - C194) * C38295 + (C197 - C196) * C38291 +
                       (C199 - C198) * C38297 + (C201 - C200) * C38292) *
                          C54750 +
                      (C56564 * C38295 + C56565 * C38291 + C3433 * C38297 +
                       C3434 * C38292) *
                          C54751) *
                         C89308 +
                     ((C56562 * C38295 + C56563 * C38291 + C58483 * C38297 +
                       C58484 * C38292) *
                          C54750 +
                      (C56566 * C38295 + C56567 * C38291 +
                       (C1857 - C1858) * C38297 + (C1859 - C1860) * C38292) *
                          C54751) *
                         C89217) *
                        C89137 * C89334 +
                    (((C210 * C38295 + C211 * C38291 + (C203 - C202) * C38297 +
                       (C205 - C204) * C38292) *
                          C54750 +
                      (C58483 * C38295 + C58484 * C38291 +
                       (C3435 - C3436) * C38297 + (C3437 - C3438) * C38292) *
                          C54751) *
                         C89308 +
                     ((C3433 * C38295 + C3434 * C38291 +
                       (C3436 - C3435) * C38297 + (C3438 - C3437) * C38292) *
                          C54750 +
                      ((C1858 - C1857) * C38295 + (C1860 - C1859) * C38291 +
                       (C180 * C1729 - C89236 * C1835) * C38297 +
                       (C180 * C1745 - C89236 * C1843) * C38292) *
                          C54751) *
                         C89217) *
                        C89137 * C2628)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[48] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                C38295 +
            (C54750 * C270 - C54884 * C113 + C54751 * C1942 - C54885 * C1735) *
                C38291 +
            (C54887 - C54888 + C54889 - C54890) * C38297 +
            (C54891 - C54892 + C54893 - C54894) * C38292) *
               C89236 * C89308 +
           ((C54884 * C1724 - C54750 * C1934 + C54885 * C1725 -
             C54751 * C1937) *
                C38295 +
            (C54884 * C1735 - C54750 * C1942 + C54885 * C1737 -
             C54751 * C1945) *
                C38291 +
            (C56666 - C56667 + C56668 - C56669) * C38297 +
            (C56670 - C56671 + C56672 - C56673) * C38292) *
               C89236 * C89217) *
              C89137 * C89333 +
          (((C54888 - C54887 + C54890 - C54889) * C38295 +
            (C54892 - C54891 + C54894 - C54893) * C38291 +
            (C54895 - C54896 + C54897 - C54898) * C38297 +
            (C54899 - C54900 + C54901 - C54902) * C38292) *
               C89236 * C89308 +
           ((C56667 - C56666 + C56669 - C56668) * C38295 +
            (C56671 - C56670 + C56673 - C56672) * C38291 +
            (C58583 - C58584 + C58585 - C58586) * C38297 +
            (C58587 - C58588 + C58589 - C58590) * C38292) *
               C89236 * C89217) *
              C89137 * C89334 +
          (((C54896 - C54895 + C54898 - C54897) * C38295 +
            (C54900 - C54899 + C54902 - C54901) * C38291 +
            (C54903 - C54904 + C54905 - C54906) * C38297 +
            (C54907 - C54908 + C54909 - C54910) * C38292) *
               C89236 * C89308 +
           ((C58584 - C58583 + C58586 - C58585) * C38295 +
            (C58588 - C58587 + C58590 - C58589) * C38291 +
            (C54884 * C1728 - C54750 * C1940 + C54885 * C1729 -
             C54751 * C1941) *
                C38297 +
            (C54884 * C1743 - C54750 * C1948 + C54885 * C1745 -
             C54751 * C1949) *
                C38292) *
               C89236 * C89217) *
              C89137 * C2628)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[48] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                 C180 +
             (C38291 * C352 - C38295 * C346 + C38292 * C353 - C38297 * C347) *
                 C89236) *
                C54750 +
            ((C56780 - C56781 + C56782 - C56783) * C180 +
             (C56784 - C56785 + C56786 - C56787) * C89236) *
                C54751) *
               C89308 +
           (((C56781 - C56780 + C56783 - C56782) * C180 +
             (C56785 - C56784 + C56787 - C56786) * C89236) *
                C54750 +
            ((C56788 - C56789 + C56790 - C56791) * C180 +
             (C56792 - C56793 + C56794 - C56795) * C89236) *
                C54751) *
               C89217) *
              C89137 * C89333 +
          ((((C38295 * C107 - C38291 * C114 + C38297 * C108 - C38292 * C116) *
                 C180 +
             (C38295 * C347 - C38291 * C353 + C38297 * C348 - C38292 * C354) *
                 C89236) *
                C54750 +
            ((C56796 - C56797 + C56798 - C56799) * C180 +
             (C56800 - C56801 + C56802 - C56803) * C89236) *
                C54751) *
               C89308 +
           (((C56797 - C56796 + C56799 - C56798) * C180 +
             (C56801 - C56800 + C56803 - C56802) * C89236) *
                C54750 +
            ((C56804 - C56805 + C56806 - C56807) * C180 +
             (C56808 - C56809 + C56810 - C56811) * C89236) *
                C54751) *
               C89217) *
              C89137 * C89334 +
          ((((C38291 * C116 - C38295 * C108 + C38292 * C118 - C38297 * C109) *
                 C180 +
             (C38291 * C354 - C38295 * C348 + C38292 * C355 - C38297 * C349) *
                 C89236) *
                C54750 +
            ((C58689 - C58690 + C58691 - C58692) * C180 +
             (C58693 - C58694 + C58695 - C58696) * C89236) *
                C54751) *
               C89308 +
           (((C58690 - C58689 + C58692 - C58691) * C180 +
             (C58694 - C58693 + C58696 - C58695) * C89236) *
                C54750 +
            ((C38295 * C1727 - C38291 * C1740 + C38297 * C1729 -
              C38292 * C1744) *
                 C180 +
             (C38295 * C2045 - C38291 * C2053 + C38297 * C2047 -
              C38292 * C2055) *
                 C89236) *
                C54751) *
               C89217) *
              C89137 * C2628)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[48] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) *
                 C38291 +
             C440 * C38292) *
                C54750 +
            (C56910 + C56911) * C54751) *
               C89308 -
           ((C56912 + C56913) * C54751 + (C56911 + C56910) * C54750) * C89217) *
              C89137 * C89333 +
          (((C56914 + C56915) * C54750 + (C56916 + C56917) * C54751) * C89217 -
           ((C56915 + C56914) * C54751 +
            (C441 * C38292 + C440 * C38291) * C54750) *
               C89308) *
              C89137 * C89334 +
          (((C441 * C38291 + C442 * C38292) * C54750 +
            (C58795 + C58796) * C54751) *
               C89308 -
           (((C180 * C1835 - C408 * C1729 - C180 * C2047 + C89236 * C2137) *
                 C38292 +
             C2166 * C38291) *
                C54751 +
            (C58796 + C58795) * C54750) *
               C89217) *
              C89137 * C2628)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[48] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                 C180 +
             (C54750 * C493 - C54884 * C346 + C54751 * C2240 - C54885 * C2040) *
                 C89236) *
                C38291 +
            ((C54887 - C54888 + C54889 - C54890) * C180 +
             (C55109 - C55110 + C55111 - C55112) * C89236) *
                C38292) *
               C89308 +
           (((C54884 * C1724 - C54750 * C1934 + C54885 * C1725 -
              C54751 * C1937) *
                 C180 +
             (C54884 * C2040 - C54750 * C2240 + C54885 * C2043 -
              C54751 * C2243) *
                 C89236) *
                C38291 +
            ((C56666 - C56667 + C56668 - C56669) * C180 +
             (C57016 - C57017 + C57018 - C57019) * C89236) *
                C38292) *
               C89217) *
              C89137 * C89333 +
          ((((C54888 - C54887 + C54890 - C54889) * C180 +
             (C55110 - C55109 + C55112 - C55111) * C89236) *
                C38291 +
            ((C54895 - C54896 + C54897 - C54898) * C180 +
             (C55113 - C55114 + C55115 - C55116) * C89236) *
                C38292) *
               C89308 +
           (((C56667 - C56666 + C56669 - C56668) * C180 +
             (C57017 - C57016 + C57019 - C57018) * C89236) *
                C38291 +
            ((C58583 - C58584 + C58585 - C58586) * C180 +
             (C58895 - C58896 + C58897 - C58898) * C89236) *
                C38292) *
               C89217) *
              C89137 * C89334 +
          ((((C54896 - C54895 + C54898 - C54897) * C180 +
             (C55114 - C55113 + C55116 - C55115) * C89236) *
                C38291 +
            ((C54903 - C54904 + C54905 - C54906) * C180 +
             (C55117 - C55118 + C55119 - C55120) * C89236) *
                C38292) *
               C89308 +
           (((C58584 - C58583 + C58586 - C58585) * C180 +
             (C58896 - C58895 + C58898 - C58897) * C89236) *
                C38291 +
            ((C54884 * C1728 - C54750 * C1940 + C54885 * C1729 -
              C54751 * C1941) *
                 C180 +
             (C54884 * C2046 - C54750 * C2246 + C54885 * C2047 -
              C54751 * C2247) *
                 C89236) *
                C38292) *
               C89217) *
              C89137 * C2628)) /
        (p * q * std::sqrt(p + q));
    d2eezx[48] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                C54884 +
            (C38291 * C571 - C38295 * C565 + C38292 * C572 - C38297 * C566) *
                C54750 +
            (C56780 - C56781 + C56782 - C56783) * C54885 +
            (C57122 - C57123 + C57124 - C57125) * C54751) *
               C89236 * C89308 +
           ((C56781 - C56780 + C56783 - C56782) * C54884 +
            (C57123 - C57122 + C57125 - C57124) * C54750 +
            (C56788 - C56789 + C56790 - C56791) * C54885 +
            (C57126 - C57127 + C57128 - C57129) * C54751) *
               C89236 * C89217) *
              C89137 * C89333 +
          (((C38295 * C107 - C38291 * C114 + C38297 * C108 - C38292 * C116) *
                C54884 +
            (C38295 * C566 - C38291 * C572 + C38297 * C567 - C38292 * C573) *
                C54750 +
            (C56796 - C56797 + C56798 - C56799) * C54885 +
            (C57130 - C57131 + C57132 - C57133) * C54751) *
               C89236 * C89308 +
           ((C56797 - C56796 + C56799 - C56798) * C54884 +
            (C57131 - C57130 + C57133 - C57132) * C54750 +
            (C56804 - C56805 + C56806 - C56807) * C54885 +
            (C57134 - C57135 + C57136 - C57137) * C54751) *
               C89236 * C89217) *
              C89137 * C89334 +
          (((C38291 * C116 - C38295 * C108 + C38292 * C118 - C38297 * C109) *
                C54884 +
            (C38291 * C573 - C38295 * C567 + C38292 * C574 - C38297 * C568) *
                C54750 +
            (C58689 - C58690 + C58691 - C58692) * C54885 +
            (C58997 - C58998 + C58999 - C59000) * C54751) *
               C89236 * C89308 +
           ((C58690 - C58689 + C58692 - C58691) * C54884 +
            (C58998 - C58997 + C59000 - C58999) * C54750 +
            (C38295 * C1727 - C38291 * C1740 + C38297 * C1729 -
             C38292 * C1744) *
                C54885 +
            (C38295 * C2335 - C38291 * C2343 + C38297 * C2337 -
             C38292 * C2345) *
                C54751) *
               C89236 * C89217) *
              C89137 * C2628)) /
        (p * q * std::sqrt(p + q));
    d2eezy[48] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C54884 +
             (C89236 * C627 - C180 * C565) * C54750 +
             (C27126 - C27127) * C54885 + (C27696 - C27697) * C54751) *
                C38291 +
            ((C194 - C195) * C54884 + (C634 - C635) * C54750 + C56562 * C54885 +
             C57236 * C54751) *
                C38292) *
               C89308 +
           (((C27127 - C27126) * C54884 + (C27697 - C27696) * C54750 +
             (C27131 - C27130) * C54885 + (C27699 - C27698) * C54751) *
                C38291 +
            (C56564 * C54884 + C57237 * C54750 + C27138 * C54885 +
             C27702 * C54751) *
                C38292) *
               C89217) *
              C89137 * C89333 +
          ((((C195 - C194) * C54884 + (C635 - C634) * C54750 + C56564 * C54885 +
             C57237 * C54751) *
                C38291 +
            ((C199 - C198) * C54884 + (C638 - C637) * C54750 + C3433 * C54885 +
             C3912 * C54751) *
                C38292) *
               C89308 +
           ((C56562 * C54884 + C57236 * C54750 + C56566 * C54885 +
             C57238 * C54751) *
                C38291 +
            (C58483 * C54884 + C59099 * C54750 + (C1857 - C1858) * C54885 +
             (C2435 - C2436) * C54751) *
                C38292) *
               C89217) *
              C89137 * C89334 +
          (((C210 * C54884 + C644 * C54750 + C58483 * C54885 +
             C59099 * C54751) *
                C38291 +
            ((C203 - C202) * C54884 + (C641 - C640) * C54750 +
             (C3435 - C3436) * C54885 + (C3913 - C3914) * C54751) *
                C38292) *
               C89308 +
           ((C3433 * C54884 + C3912 * C54750 + (C1858 - C1857) * C54885 +
             (C2436 - C2435) * C54751) *
                C38291 +
            ((C3436 - C3435) * C54884 + (C3914 - C3913) * C54750 +
             (C180 * C1729 - C89236 * C1835) * C54885 +
             (C180 * C2337 - C89236 * C2427) * C54751) *
                C38292) *
               C89217) *
              C89137 * C2628)) /
        (p * q * std::sqrt(p + q));
    d2eezz[48] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C54884 * C264 - C55318 * C106 - C54884 * C565 +
                       C54750 * C700 + C54885 * C1934 - C55319 * C1724 -
                       C54885 * C2330 + C54751 * C2512) *
                          C89236 * C38291 +
                      (C55357 + C55358) * C89236 * C38292) *
                         C89308 -
                     ((C57361 + C57362) * C89236 * C38292 +
                      (C54885 * C1937 - C55319 * C1725 - C54885 * C2333 +
                       C54751 * C2513 + C54884 * C1934 - C55318 * C1724 -
                       C54884 * C2330 + C54750 * C2512) *
                          C89236 * C38291) *
                         C89217) *
                        C89137 * C89333 +
                    (((C57362 + C57361) * C89236 * C38291 +
                      (C59210 + C59211) * C89236 * C38292) *
                         C89217 -
                     ((C55359 + C55360) * C89236 * C38292 +
                      (C55358 + C55357) * C89236 * C38291) *
                         C89308) *
                        C89137 * C89334 +
                    (((C55360 + C55359) * C89236 * C38291 +
                      (C55361 + C55362) * C89236 * C38292) *
                         C89308 -
                     ((C54885 * C1941 - C55319 * C1729 - C54885 * C2337 +
                       C54751 * C2517 + C54884 * C1940 - C55318 * C1728 -
                       C54884 * C2336 + C54750 * C2516) *
                          C89236 * C38292 +
                      (C59211 + C59210) * C89236 * C38291) *
                         C89217) *
                        C89137 * C2628)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[49] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C38295 * C112 - C38296 * C106 - C38295 * C113 + C38291 * C124 +
            C38297 * C114 - C38298 * C107 - C38297 * C115 + C38292 * C125) *
               C54750 +
           (C38295 * C1734 - C38296 * C1724 - C38295 * C1735 + C38291 * C1748 +
            C38297 * C1732 - C38298 * C1723 - C38297 * C1733 + C38292 * C1747) *
               C54751) *
              C89236 * C89153 * C89137 * C96 -
          ((C38297 * C1730 - C38298 * C1722 - C38297 * C1731 + C38292 * C1746 +
            C38295 * C1732 - C38296 * C1723 - C38295 * C1733 + C38291 * C1747) *
               C54751 +
           (C38297 * C116 - C38298 * C108 - C38297 * C117 + C38292 * C126 +
            C38295 * C114 - C38296 * C107 - C38295 * C115 + C38291 * C125) *
               C54750) *
              C89236 * C89153 * C89137 * C97 +
          ((C38295 * C116 - C38296 * C108 - C38295 * C117 + C38291 * C126 +
            C38297 * C118 - C38298 * C109 - C38297 * C119 + C38292 * C127) *
               C54750 +
           (C38295 * C1730 - C38296 * C1722 - C38295 * C1731 + C38291 * C1746 +
            C38297 * C1742 - C38298 * C1728 - C38297 * C1743 + C38292 * C1752) *
               C54751) *
              C89236 * C89153 * C89137 * C98 -
          ((C38297 * C3353 - C38298 * C3352 - C38297 * C3354 + C38292 * C3355 +
            C38295 * C1742 - C38296 * C1728 - C38295 * C1743 + C38291 * C1752) *
               C54751 +
           (C38297 * C120 - C38298 * C110 - C38297 * C121 + C38292 * C128 +
            C38295 * C118 - C38296 * C109 - C38295 * C119 + C38291 * C127) *
               C54750) *
              C89236 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C38295 * C112 - C38296 * C106 - C38295 * C113 + C38291 * C124 +
             C38297 * C114 - C38298 * C107 - C38297 * C115 + C38292 * C125) *
                C54750 +
            (C38295 * C1734 - C38296 * C1724 - C38295 * C1735 + C38291 * C1748 +
             C38297 * C1732 - C38298 * C1723 - C38297 * C1733 +
             C38292 * C1747) *
                C54751) *
               C89236 * C89153 * C812 -
           ((C42921 + C42922) * C54751 + (C39063 + C39062) * C54750) * C89236 *
               C89153 * C813 +
           ((C39065 + C39064) * C54750 + (C48595 + C48596) * C54751) * C89236 *
               C89153 * C814) *
              C815 +
          (((C39066 + C39067) * C54750 + (C42923 + C42924) * C54751) * C89236 *
               C89153 * C813 -
           ((C38297 * C1730 - C38298 * C1722 - C38297 * C1731 + C38292 * C1746 +
             C38295 * C1732 - C38296 * C1723 - C38295 * C1733 +
             C38291 * C1747) *
                C54751 +
            (C38297 * C116 - C38298 * C108 - C38297 * C117 + C38292 * C126 +
             C38295 * C114 - C38296 * C107 - C38295 * C115 + C38291 * C125) *
                C54750) *
               C89236 * C89153 * C812 -
           ((C38297 * C8517 - C38298 * C8514 - C38297 * C8518 + C38292 * C8523 +
             C38295 * C8519 - C38296 * C8515 - C38295 * C8520 +
             C38291 * C8524) *
                C54751 +
            (C39069 + C39068) * C54750) *
               C89236 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eexy[49] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C89236 * C181 - C180 * C106) * C38295 +
            (C89236 * C187 - C180 * C113) * C38291 + (C194 - C195) * C38297 +
            (C196 - C197) * C38292) *
               C54750 +
           ((C27126 - C27127) * C38295 + (C27128 - C27129) * C38291 +
            (C1846 - C1845) * C38297 + (C1848 - C1847) * C38292) *
               C54751) *
              C89153 * C89137 * C96 +
          (((C195 - C194) * C38295 + (C197 - C196) * C38291 +
            (C199 - C198) * C38297 + (C201 - C200) * C38292) *
               C54750 +
           ((C1845 - C1846) * C38295 + (C1847 - C1848) * C38291 +
            C3433 * C38297 + C3434 * C38292) *
               C54751) *
              C89153 * C89137 * C97 +
          ((C210 * C38295 + C211 * C38291 + (C203 - C202) * C38297 +
            (C205 - C204) * C38292) *
               C54750 +
           ((C1850 - C1849) * C38295 + (C1852 - C1851) * C38291 +
            (C3435 - C3436) * C38297 + (C3437 - C3438) * C38292) *
               C54751) *
              C89153 * C89137 * C98 +
          ((C212 * C38295 + C213 * C38291 + (C207 - C206) * C38297 +
            (C209 - C208) * C38292) *
               C54750 +
           ((C3436 - C3435) * C38295 + (C3438 - C3437) * C38291 +
            (C180 * C3352 - C89236 * C3430) * C38297 +
            (C180 * C3354 - C89236 * C3431) * C38292) *
               C54751) *
              C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C38295 +
             (C89236 * C187 - C180 * C113) * C38291 + (C194 - C195) * C38297 +
             (C196 - C197) * C38292) *
                C54750 +
            ((C27126 - C27127) * C38295 + (C27128 - C27129) * C38291 +
             (C1846 - C1845) * C38297 + (C1848 - C1847) * C38292) *
                C54751) *
               C89153 * C812 +
           (((C180 * C819 - C89236 * C923) * C38295 +
             (C180 * C830 - C89236 * C931) * C38291 + (C940 - C941) * C38297 +
             (C942 - C943) * C38292) *
                C54750 +
            ((C29351 - C29352) * C38295 + (C29353 - C29354) * C38291 +
             (C4221 - C4220) * C38297 + (C4223 - C4222) * C38292) *
                C54751) *
               C89153 * C813 +
           (((C89236 * C926 - C180 * C820) * C38295 +
             (C89236 * C934 - C180 * C832) * C38291 + (C948 - C949) * C38297 +
             (C950 - C951) * C38292) *
                C54750 +
            ((C33629 - C33630) * C38295 + (C33631 - C33632) * C38291 +
             (C55559 - C55560) * C38297 + (C55561 - C55562) * C38292) *
                C54751) *
               C89153 * C814) *
              C815 +
          ((((C195 - C194) * C38295 + (C197 - C196) * C38291 +
             (C199 - C198) * C38297 + (C201 - C200) * C38292) *
                C54750 +
            ((C1845 - C1846) * C38295 + (C1847 - C1848) * C38291 +
             C3433 * C38297 + C3434 * C38292) *
                C54751) *
               C89153 * C812 +
           (((C941 - C940) * C38295 + (C943 - C942) * C38291 +
             (C945 - C944) * C38297 + (C947 - C946) * C38292) *
                C54750 +
            ((C4220 - C4221) * C38295 + (C4222 - C4223) * C38291 +
             (C4224 - C4225) * C38297 + (C4226 - C4227) * C38292) *
                C54751) *
               C89153 * C813 +
           (((C949 - C948) * C38295 + (C951 - C950) * C38291 +
             (C953 - C952) * C38297 + (C955 - C954) * C38292) *
                C54750 +
            ((C55560 - C55559) * C38295 + (C55562 - C55561) * C38291 +
             (C180 * C8514 - C89236 * C8602) * C38297 +
             (C180 * C8518 - C89236 * C8605) * C38292) *
                C54751) *
               C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eexz[49] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
               C38295 +
           (C54750 * C270 - C54884 * C113 + C54751 * C1942 - C54885 * C1735) *
               C38291 +
           (C54887 - C54888 + C54889 - C54890) * C38297 +
           (C54891 - C54892 + C54893 - C54894) * C38292) *
              C89236 * C89153 * C89137 * C96 +
          ((C54888 - C54887 + C54890 - C54889) * C38295 +
           (C54892 - C54891 + C54894 - C54893) * C38291 +
           (C54895 - C54896 + C54897 - C54898) * C38297 +
           (C54899 - C54900 + C54901 - C54902) * C38292) *
              C89236 * C89153 * C89137 * C97 +
          ((C54896 - C54895 + C54898 - C54897) * C38295 +
           (C54900 - C54899 + C54902 - C54901) * C38291 +
           (C54903 - C54904 + C54905 - C54906) * C38297 +
           (C54907 - C54908 + C54909 - C54910) * C38292) *
              C89236 * C89153 * C89137 * C98 +
          ((C54904 - C54903 + C54906 - C54905) * C38295 +
           (C54908 - C54907 + C54910 - C54909) * C38291 +
           (C54884 * C110 - C54750 * C268 + C54885 * C3352 - C54751 * C3512) *
               C38297 +
           (C54884 * C121 - C54750 * C274 + C54885 * C3354 - C54751 * C3513) *
               C38292) *
              C89236 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                C38295 +
            (C54750 * C270 - C54884 * C113 + C54751 * C1942 - C54885 * C1735) *
                C38291 +
            (C54887 - C54888 + C54889 - C54890) * C38297 +
            (C54891 - C54892 + C54893 - C54894) * C38292) *
               C89236 * C89153 * C812 +
           ((C54884 * C819 - C54750 * C1029 + C54885 * C4097 - C54751 * C4325) *
                C38295 +
            (C54884 * C830 - C54750 * C1037 + C54885 * C4102 - C54751 * C4329) *
                C38291 +
            (C55661 - C55662 + C55663 - C55664) * C38297 +
            (C55665 - C55666 + C55667 - C55668) * C38292) *
               C89236 * C89153 * C813 +
           ((C54750 * C1032 - C54884 * C820 + C54751 * C8680 - C54885 * C8516) *
                C38295 +
            (C54750 * C1040 - C54884 * C832 + C54751 * C8683 - C54885 * C8522) *
                C38291 +
            (C55669 - C55670 + C55671 - C55672) * C38297 +
            (C55673 - C55674 + C55675 - C55676) * C38292) *
               C89236 * C89153 * C814) *
              C815 +
          (((C54888 - C54887 + C54890 - C54889) * C38295 +
            (C54892 - C54891 + C54894 - C54893) * C38291 +
            (C54895 - C54896 + C54897 - C54898) * C38297 +
            (C54899 - C54900 + C54901 - C54902) * C38292) *
               C89236 * C89153 * C812 +
           ((C55662 - C55661 + C55664 - C55663) * C38295 +
            (C55666 - C55665 + C55668 - C55667) * C38291 +
            (C54750 * C1031 - C54884 * C817 + C54751 * C4327 - C54885 * C4099) *
                C38297 +
            (C54750 * C1039 - C54884 * C826 + C54751 * C4331 - C54885 * C4106) *
                C38292) *
               C89236 * C89153 * C813 +
           ((C55670 - C55669 + C55672 - C55671) * C38295 +
            (C55674 - C55673 + C55676 - C55675) * C38291 +
            (C54884 * C822 - C54750 * C1034 + C54885 * C8514 - C54751 * C8682) *
                C38297 +
            (C54884 * C836 - C54750 * C1042 + C54885 * C8518 - C54751 * C8685) *
                C38292) *
               C89236 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[49] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                C180 +
            (C38291 * C352 - C38295 * C346 + C38292 * C353 - C38297 * C347) *
                C89236) *
               C54750 +
           ((C38291 * C1734 - C38295 * C1724 + C38292 * C1732 -
             C38297 * C1723) *
                C180 +
            (C38291 * C2048 - C38295 * C2040 + C38292 * C2049 -
             C38297 * C2041) *
                C89236) *
               C54751) *
              C89153 * C89137 * C96 +
          (((C38295 * C107 - C38291 * C114 + C38297 * C108 - C38292 * C116) *
                C180 +
            (C38295 * C347 - C38291 * C353 + C38297 * C348 - C38292 * C354) *
                C89236) *
               C54750 +
           ((C38295 * C1723 - C38291 * C1732 + C38297 * C1722 -
             C38292 * C1730) *
                C180 +
            (C38295 * C2041 - C38291 * C2049 + C38297 * C2042 -
             C38292 * C2050) *
                C89236) *
               C54751) *
              C89153 * C89137 * C97 +
          (((C38291 * C116 - C38295 * C108 + C38292 * C118 - C38297 * C109) *
                C180 +
            (C38291 * C354 - C38295 * C348 + C38292 * C355 - C38297 * C349) *
                C89236) *
               C54750 +
           ((C38291 * C1730 - C38295 * C1722 + C38292 * C1742 -
             C38297 * C1728) *
                C180 +
            (C38291 * C2050 - C38295 * C2042 + C38292 * C2054 -
             C38297 * C2046) *
                C89236) *
               C54751) *
              C89153 * C89137 * C98 +
          (((C38295 * C109 - C38291 * C118 + C38297 * C110 - C38292 * C120) *
                C180 +
            (C38295 * C349 - C38291 * C355 + C38297 * C350 - C38292 * C356) *
                C89236) *
               C54750 +
           ((C38295 * C1728 - C38291 * C1742 + C38297 * C3352 -
             C38292 * C3353) *
                C180 +
            (C38295 * C2046 - C38291 * C2054 + C38297 * C3594 -
             C38292 * C3595) *
                C89236) *
               C54751) *
              C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                 C180 +
             (C38291 * C352 - C38295 * C346 + C38292 * C353 - C38297 * C347) *
                 C89236) *
                C54750 +
            ((C38291 * C1734 - C38295 * C1724 + C38292 * C1732 -
              C38297 * C1723) *
                 C180 +
             (C38291 * C2048 - C38295 * C2040 + C38292 * C2049 -
              C38297 * C2041) *
                 C89236) *
                C54751) *
               C89153 * C812 +
           (((C39387 - C39386 + C39389 - C39388) * C180 +
             (C39391 - C39390 + C39393 - C39392) * C89236) *
                C54750 +
            ((C43327 - C43328 + C43329 - C43330) * C180 +
             (C43331 - C43332 + C43333 - C43334) * C89236) *
                C54751) *
               C89153 * C813 +
           (((C39395 - C39394 + C39397 - C39396) * C180 +
             (C39399 - C39398 + C39401 - C39400) * C89236) *
                C54750 +
            ((C48891 - C48892 + C48893 - C48894) * C180 +
             (C48895 - C48896 + C48897 - C48898) * C89236) *
                C54751) *
               C89153 * C814) *
              C815 +
          ((((C38295 * C107 - C38291 * C114 + C38297 * C108 - C38292 * C116) *
                 C180 +
             (C38295 * C347 - C38291 * C353 + C38297 * C348 - C38292 * C354) *
                 C89236) *
                C54750 +
            ((C38295 * C1723 - C38291 * C1732 + C38297 * C1722 -
              C38292 * C1730) *
                 C180 +
             (C38295 * C2041 - C38291 * C2049 + C38297 * C2042 -
              C38292 * C2050) *
                 C89236) *
                C54751) *
               C89153 * C812 +
           (((C39403 - C39402 + C39405 - C39404) * C180 +
             (C39407 - C39406 + C39409 - C39408) * C89236) *
                C54750 +
            ((C43335 - C43336 + C43337 - C43338) * C180 +
             (C43339 - C43340 + C43341 - C43342) * C89236) *
                C54751) *
               C89153 * C813 +
           (((C39411 - C39410 + C39413 - C39412) * C180 +
             (C39415 - C39414 + C39417 - C39416) * C89236) *
                C54750 +
            ((C38295 * C8515 - C38291 * C8519 + C38297 * C8514 -
              C38292 * C8517) *
                 C180 +
             (C38295 * C8761 - C38291 * C8764 + C38297 * C8762 -
              C38292 * C8765) *
                 C89236) *
                C54751) *
               C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[49] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C38291 +
            C440 * C38292) *
               C54750 +
           (C27444 * C38291 + C2164 * C38292) * C54751) *
              C89153 * C89137 * C96 -
          ((C2163 * C38292 + C2164 * C38291) * C54751 +
           (C441 * C38292 + C440 * C38291) * C54750) *
              C89153 * C89137 * C97 +
          ((C441 * C38291 + C442 * C38292) * C54750 +
           (C2163 * C38291 + C3678 * C38292) * C54751) *
              C89153 * C89137 * C98 -
          (((C180 * C3430 - C408 * C3352 - C180 * C3594 + C89236 * C3670) *
                C38292 +
            C3678 * C38291) *
               C54751 +
           (C443 * C38292 + C442 * C38291) * C54750) *
              C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) *
                 C38291 +
             C440 * C38292) *
                C54750 +
            (C27444 * C38291 + C2164 * C38292) * C54751) *
               C89153 * C812 -
           ((C4562 * C38292 + C29685 * C38291) * C54751 +
            (C1259 * C38292 +
             (C180 * C923 - C408 * C819 - C180 * C1135 + C89236 * C1227) *
                 C38291) *
                C54750) *
               C89153 * C813 +
           (((C180 * C926 - C408 * C820 - C180 * C1138 + C89236 * C1228) *
                 C38291 +
             C1260 * C38292) *
                C54750 +
            (C33871 * C38291 + C55879 * C38292) * C54751) *
               C89153 * C814) *
              C815 +
          (((C1259 * C38291 + C1258 * C38292) * C54750 +
            (C4562 * C38291 + C4563 * C38292) * C54751) *
               C89153 * C813 -
           ((C2163 * C38292 + C2164 * C38291) * C54751 +
            (C441 * C38292 + C440 * C38291) * C54750) *
               C89153 * C812 -
           (((C180 * C8602 - C408 * C8514 - C180 * C8762 + C89236 * C8840) *
                 C38292 +
             C55879 * C38291) *
                C54751 +
            (C1261 * C38292 + C1260 * C38291) * C54750) *
               C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[49] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                C180 +
            (C54750 * C493 - C54884 * C346 + C54751 * C2240 - C54885 * C2040) *
                C89236) *
               C38291 +
           ((C54887 - C54888 + C54889 - C54890) * C180 +
            (C55109 - C55110 + C55111 - C55112) * C89236) *
               C38292) *
              C89153 * C89137 * C96 +
          (((C54888 - C54887 + C54890 - C54889) * C180 +
            (C55110 - C55109 + C55112 - C55111) * C89236) *
               C38291 +
           ((C54895 - C54896 + C54897 - C54898) * C180 +
            (C55113 - C55114 + C55115 - C55116) * C89236) *
               C38292) *
              C89153 * C89137 * C97 +
          (((C54896 - C54895 + C54898 - C54897) * C180 +
            (C55114 - C55113 + C55116 - C55115) * C89236) *
               C38291 +
           ((C54903 - C54904 + C54905 - C54906) * C180 +
            (C55117 - C55118 + C55119 - C55120) * C89236) *
               C38292) *
              C89153 * C89137 * C98 +
          (((C54904 - C54903 + C54906 - C54905) * C180 +
            (C55118 - C55117 + C55120 - C55119) * C89236) *
               C38291 +
           ((C54884 * C110 - C54750 * C268 + C54885 * C3352 - C54751 * C3512) *
                C180 +
            (C54884 * C350 - C54750 * C497 + C54885 * C3594 - C54751 * C3752) *
                C89236) *
               C38292) *
              C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                 C180 +
             (C54750 * C493 - C54884 * C346 + C54751 * C2240 - C54885 * C2040) *
                 C89236) *
                C38291 +
            ((C54887 - C54888 + C54889 - C54890) * C180 +
             (C55109 - C55110 + C55111 - C55112) * C89236) *
                C38292) *
               C89153 * C812 +
           (((C54884 * C819 - C54750 * C1029 + C54885 * C4097 -
              C54751 * C4325) *
                 C180 +
             (C54884 * C1135 - C54750 * C1335 + C54885 * C4439 -
              C54751 * C4661) *
                 C89236) *
                C38291 +
            ((C55661 - C55662 + C55663 - C55664) * C180 +
             (C55978 - C55979 + C55980 - C55981) * C89236) *
                C38292) *
               C89153 * C813 +
           (((C54750 * C1032 - C54884 * C820 + C54751 * C8680 -
              C54885 * C8516) *
                 C180 +
             (C54750 * C1338 - C54884 * C1138 + C54751 * C8917 -
              C54885 * C8760) *
                 C89236) *
                C38291 +
            ((C55669 - C55670 + C55671 - C55672) * C180 +
             (C55982 - C55983 + C55984 - C55985) * C89236) *
                C38292) *
               C89153 * C814) *
              C815 +
          ((((C54888 - C54887 + C54890 - C54889) * C180 +
             (C55110 - C55109 + C55112 - C55111) * C89236) *
                C38291 +
            ((C54895 - C54896 + C54897 - C54898) * C180 +
             (C55113 - C55114 + C55115 - C55116) * C89236) *
                C38292) *
               C89153 * C812 +
           (((C55662 - C55661 + C55664 - C55663) * C180 +
             (C55979 - C55978 + C55981 - C55980) * C89236) *
                C38291 +
            ((C54750 * C1031 - C54884 * C817 + C54751 * C4327 -
              C54885 * C4099) *
                 C180 +
             (C54750 * C1337 - C54884 * C1137 + C54751 * C4663 -
              C54885 * C4441) *
                 C89236) *
                C38292) *
               C89153 * C813 +
           (((C55670 - C55669 + C55672 - C55671) * C180 +
             (C55983 - C55982 + C55985 - C55984) * C89236) *
                C38291 +
            ((C54884 * C822 - C54750 * C1034 + C54885 * C8514 -
              C54751 * C8682) *
                 C180 +
             (C54884 * C1140 - C54750 * C1340 + C54885 * C8762 -
              C54751 * C8919) *
                 C89236) *
                C38292) *
               C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eezx[49] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
               C54884 +
           (C38291 * C571 - C38295 * C565 + C38292 * C572 - C38297 * C566) *
               C54750 +
           (C38291 * C1734 - C38295 * C1724 + C38292 * C1732 - C38297 * C1723) *
               C54885 +
           (C38291 * C2338 - C38295 * C2330 + C38292 * C2339 - C38297 * C2331) *
               C54751) *
              C89236 * C89153 * C89137 * C96 +
          ((C38295 * C107 - C38291 * C114 + C38297 * C108 - C38292 * C116) *
               C54884 +
           (C38295 * C566 - C38291 * C572 + C38297 * C567 - C38292 * C573) *
               C54750 +
           (C38295 * C1723 - C38291 * C1732 + C38297 * C1722 - C38292 * C1730) *
               C54885 +
           (C38295 * C2331 - C38291 * C2339 + C38297 * C2332 - C38292 * C2340) *
               C54751) *
              C89236 * C89153 * C89137 * C97 +
          ((C38291 * C116 - C38295 * C108 + C38292 * C118 - C38297 * C109) *
               C54884 +
           (C38291 * C573 - C38295 * C567 + C38292 * C574 - C38297 * C568) *
               C54750 +
           (C38291 * C1730 - C38295 * C1722 + C38292 * C1742 - C38297 * C1728) *
               C54885 +
           (C38291 * C2340 - C38295 * C2332 + C38292 * C2344 - C38297 * C2336) *
               C54751) *
              C89236 * C89153 * C89137 * C98 +
          ((C38295 * C109 - C38291 * C118 + C38297 * C110 - C38292 * C120) *
               C54884 +
           (C38295 * C568 - C38291 * C574 + C38297 * C569 - C38292 * C575) *
               C54750 +
           (C38295 * C1728 - C38291 * C1742 + C38297 * C3352 - C38292 * C3353) *
               C54885 +
           (C38295 * C2336 - C38291 * C2344 + C38297 * C3833 - C38292 * C3834) *
               C54751) *
              C89236 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                C54884 +
            (C38291 * C571 - C38295 * C565 + C38292 * C572 - C38297 * C566) *
                C54750 +
            (C38291 * C1734 - C38295 * C1724 + C38292 * C1732 -
             C38297 * C1723) *
                C54885 +
            (C38291 * C2338 - C38295 * C2330 + C38292 * C2339 -
             C38297 * C2331) *
                C54751) *
               C89236 * C89153 * C812 +
           ((C39387 - C39386 + C39389 - C39388) * C54884 +
            (C39744 - C39743 + C39746 - C39745) * C54750 +
            (C43327 - C43328 + C43329 - C43330) * C54885 +
            (C43749 - C43750 + C43751 - C43752) * C54751) *
               C89236 * C89153 * C813 +
           ((C39395 - C39394 + C39397 - C39396) * C54884 +
            (C39748 - C39747 + C39750 - C39749) * C54750 +
            (C48891 - C48892 + C48893 - C48894) * C54885 +
            (C49193 - C49194 + C49195 - C49196) * C54751) *
               C89236 * C89153 * C814) *
              C815 +
          (((C38295 * C107 - C38291 * C114 + C38297 * C108 - C38292 * C116) *
                C54884 +
            (C38295 * C566 - C38291 * C572 + C38297 * C567 - C38292 * C573) *
                C54750 +
            (C38295 * C1723 - C38291 * C1732 + C38297 * C1722 -
             C38292 * C1730) *
                C54885 +
            (C38295 * C2331 - C38291 * C2339 + C38297 * C2332 -
             C38292 * C2340) *
                C54751) *
               C89236 * C89153 * C812 +
           ((C39403 - C39402 + C39405 - C39404) * C54884 +
            (C39752 - C39751 + C39754 - C39753) * C54750 +
            (C43335 - C43336 + C43337 - C43338) * C54885 +
            (C43753 - C43754 + C43755 - C43756) * C54751) *
               C89236 * C89153 * C813 +
           ((C39411 - C39410 + C39413 - C39412) * C54884 +
            (C39756 - C39755 + C39758 - C39757) * C54750 +
            (C38295 * C8515 - C38291 * C8519 + C38297 * C8514 -
             C38292 * C8517) *
                C54885 +
            (C38295 * C8995 - C38291 * C8998 + C38297 * C8996 -
             C38292 * C8999) *
                C54751) *
               C89236 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eezy[49] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C89236 * C181 - C180 * C106) * C54884 +
            (C89236 * C627 - C180 * C565) * C54750 +
            (C27126 - C27127) * C54885 + (C27696 - C27697) * C54751) *
               C38291 +
           ((C194 - C195) * C54884 + (C634 - C635) * C54750 +
            (C1846 - C1845) * C54885 + (C2430 - C2429) * C54751) *
               C38292) *
              C89153 * C89137 * C96 +
          (((C195 - C194) * C54884 + (C635 - C634) * C54750 +
            (C1845 - C1846) * C54885 + (C2429 - C2430) * C54751) *
               C38291 +
           ((C199 - C198) * C54884 + (C638 - C637) * C54750 + C3433 * C54885 +
            C3912 * C54751) *
               C38292) *
              C89153 * C89137 * C97 +
          ((C210 * C54884 + C644 * C54750 + (C1850 - C1849) * C54885 +
            (C2432 - C2431) * C54751) *
               C38291 +
           ((C203 - C202) * C54884 + (C641 - C640) * C54750 +
            (C3435 - C3436) * C54885 + (C3913 - C3914) * C54751) *
               C38292) *
              C89153 * C89137 * C98 +
          ((C212 * C54884 + C645 * C54750 + (C3436 - C3435) * C54885 +
            (C3914 - C3913) * C54751) *
               C38291 +
           ((C207 - C206) * C54884 + (C643 - C642) * C54750 +
            (C180 * C3352 - C89236 * C3430) * C54885 +
            (C180 * C3833 - C89236 * C3909) * C54751) *
               C38292) *
              C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C54884 +
             (C89236 * C627 - C180 * C565) * C54750 +
             (C27126 - C27127) * C54885 + (C27696 - C27697) * C54751) *
                C38291 +
            ((C194 - C195) * C54884 + (C634 - C635) * C54750 +
             (C1846 - C1845) * C54885 + (C2430 - C2429) * C54751) *
                C38292) *
               C89153 * C812 +
           (((C180 * C819 - C89236 * C923) * C54884 +
             (C180 * C1425 - C89236 * C1515) * C54750 +
             (C29351 - C29352) * C54885 + (C29991 - C29992) * C54751) *
                C38291 +
            ((C940 - C941) * C54884 + (C1524 - C1525) * C54750 +
             (C4221 - C4220) * C54885 + (C4879 - C4878) * C54751) *
                C38292) *
               C89153 * C813 +
           (((C89236 * C926 - C180 * C820) * C54884 +
             (C89236 * C1518 - C180 * C1428) * C54750 +
             (C33629 - C33630) * C54885 + (C34097 - C34098) * C54751) *
                C38291 +
            ((C948 - C949) * C54884 + (C1528 - C1529) * C54750 +
             (C55559 - C55560) * C54885 + (C56182 - C56183) * C54751) *
                C38292) *
               C89153 * C814) *
              C815 +
          ((((C195 - C194) * C54884 + (C635 - C634) * C54750 +
             (C1845 - C1846) * C54885 + (C2429 - C2430) * C54751) *
                C38291 +
            ((C199 - C198) * C54884 + (C638 - C637) * C54750 + C3433 * C54885 +
             C3912 * C54751) *
                C38292) *
               C89153 * C812 +
           (((C941 - C940) * C54884 + (C1525 - C1524) * C54750 +
             (C4220 - C4221) * C54885 + (C4878 - C4879) * C54751) *
                C38291 +
            ((C945 - C944) * C54884 + (C1527 - C1526) * C54750 +
             (C4224 - C4225) * C54885 + (C4880 - C4881) * C54751) *
                C38292) *
               C89153 * C813 +
           (((C949 - C948) * C54884 + (C1529 - C1528) * C54750 +
             (C55560 - C55559) * C54885 + (C56183 - C56182) * C54751) *
                C38291 +
            ((C953 - C952) * C54884 + (C1531 - C1530) * C54750 +
             (C180 * C8514 - C89236 * C8602) * C54885 +
             (C180 * C8996 - C89236 * C9076) * C54751) *
                C38292) *
               C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eezz[49] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C54884 * C264 - C55318 * C106 - C54884 * C565 + C54750 * C700 +
            C54885 * C1934 - C55319 * C1724 - C54885 * C2330 + C54751 * C2512) *
               C89236 * C38291 +
           (C55357 + C55358) * C89236 * C38292) *
              C89153 * C89137 * C96 -
          ((C55359 + C55360) * C89236 * C38292 +
           (C55358 + C55357) * C89236 * C38291) *
              C89153 * C89137 * C97 +
          ((C55360 + C55359) * C89236 * C38291 +
           (C55361 + C55362) * C89236 * C38292) *
              C89153 * C89137 * C98 -
          ((C54885 * C3512 - C55319 * C3352 - C54885 * C3833 + C54751 * C3990 +
            C54884 * C268 - C55318 * C110 - C54884 * C569 + C54750 * C704) *
               C89236 * C38292 +
           (C55362 + C55361) * C89236 * C38291) *
              C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C54884 * C264 - C55318 * C106 - C54884 * C565 + C54750 * C700 +
             C54885 * C1934 - C55319 * C1724 - C54885 * C2330 +
             C54751 * C2512) *
                C89236 * C38291 +
            (C55357 + C55358) * C89236 * C38292) *
               C89153 * C812 -
           ((C56306 + C56307) * C89236 * C38292 +
            (C54885 * C4325 - C55319 * C4097 - C54885 * C4767 + C54751 * C4979 +
             C54884 * C1029 - C55318 * C819 - C54884 * C1425 + C54750 * C1607) *
                C89236 * C38291) *
               C89153 * C813 +
           ((C54884 * C1032 - C55318 * C820 - C54884 * C1428 + C54750 * C1608 +
             C54885 * C8680 - C55319 * C8516 - C54885 * C8994 +
             C54751 * C9153) *
                C89236 * C38291 +
            (C56308 + C56309) * C89236 * C38292) *
               C89153 * C814) *
              C815 +
          (((C56307 + C56306) * C89236 * C38291 +
            (C54884 * C1031 - C55318 * C817 - C54884 * C1427 + C54750 * C1605 +
             C54885 * C4327 - C55319 * C4099 - C54885 * C4769 +
             C54751 * C4981) *
                C89236 * C38292) *
               C89153 * C813 -
           ((C55359 + C55360) * C89236 * C38292 +
            (C55358 + C55357) * C89236 * C38291) *
               C89153 * C812 -
           ((C54885 * C8682 - C55319 * C8514 - C54885 * C8996 + C54751 * C9151 +
             C54884 * C1034 - C55318 * C822 - C54884 * C1430 + C54750 * C1610) *
                C89236 * C38292 +
            (C56309 + C56308) * C89236 * C38291) *
               C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eexx[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C38295 * C112 - C38296 * C106 - C38295 * C113 + C38291 * C124 +
             C38297 * C114 - C38298 * C107 - C38297 * C115 + C38292 * C125) *
                C54750 +
            (C56456 + C56457) * C54751) *
               C89236 * C89153 * C89335 -
           ((C42921 + C42922) * C54751 + (C39063 + C39062) * C54750) * C89236 *
               C89153 * C89336 +
           ((C39065 + C39064) * C54750 + (C48595 + C48596) * C54751) * C89236 *
               C89153 * C6963) *
              C89299 +
          (((C39066 + C39067) * C54750 + (C42923 + C42924) * C54751) * C89236 *
               C89153 * C89336 -
           ((C56461 + C56460) * C54751 +
            (C38297 * C116 - C38298 * C108 - C38297 * C117 + C38292 * C126 +
             C38295 * C114 - C38296 * C107 - C38295 * C115 + C38291 * C125) *
                C54750) *
               C89236 * C89153 * C89335 -
           ((C38297 * C8517 - C38298 * C8514 - C38297 * C8518 + C38292 * C8523 +
             C38295 * C8519 - C38296 * C8515 - C38295 * C8520 +
             C38291 * C8524) *
                C54751 +
            (C39069 + C39068) * C54750) *
               C89236 * C89153 * C6963) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eexy[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C38295 +
             (C89236 * C187 - C180 * C113) * C38291 + (C194 - C195) * C38297 +
             (C196 - C197) * C38292) *
                C54750 +
            ((C27126 - C27127) * C38295 + (C27128 - C27129) * C38291 +
             C56562 * C38297 + C56563 * C38292) *
                C54751) *
               C89153 * C89335 +
           (((C180 * C819 - C89236 * C923) * C38295 +
             (C180 * C830 - C89236 * C931) * C38291 + (C940 - C941) * C38297 +
             (C942 - C943) * C38292) *
                C54750 +
            ((C29351 - C29352) * C38295 + (C29353 - C29354) * C38291 +
             C59472 * C38297 + C59473 * C38292) *
                C54751) *
               C89153 * C89336 +
           (((C89236 * C926 - C180 * C820) * C38295 +
             (C89236 * C934 - C180 * C832) * C38291 + (C948 - C949) * C38297 +
             (C950 - C951) * C38292) *
                C54750 +
            ((C33629 - C33630) * C38295 + (C33631 - C33632) * C38291 +
             (C55559 - C55560) * C38297 + (C55561 - C55562) * C38292) *
                C54751) *
               C89153 * C6963) *
              C89299 +
          ((((C195 - C194) * C38295 + (C197 - C196) * C38291 +
             (C199 - C198) * C38297 + (C201 - C200) * C38292) *
                C54750 +
            (C56564 * C38295 + C56565 * C38291 + C3433 * C38297 +
             C3434 * C38292) *
                C54751) *
               C89153 * C89335 +
           (((C941 - C940) * C38295 + (C943 - C942) * C38291 +
             (C945 - C944) * C38297 + (C947 - C946) * C38292) *
                C54750 +
            (C59474 * C38295 + C59475 * C38291 + (C4224 - C4225) * C38297 +
             (C4226 - C4227) * C38292) *
                C54751) *
               C89153 * C89336 +
           (((C949 - C948) * C38295 + (C951 - C950) * C38291 +
             (C953 - C952) * C38297 + (C955 - C954) * C38292) *
                C54750 +
            ((C55560 - C55559) * C38295 + (C55562 - C55561) * C38291 +
             (C180 * C8514 - C89236 * C8602) * C38297 +
             (C180 * C8518 - C89236 * C8605) * C38292) *
                C54751) *
               C89153 * C6963) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eexz[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                C38295 +
            (C54750 * C270 - C54884 * C113 + C54751 * C1942 - C54885 * C1735) *
                C38291 +
            (C54887 - C54888 + C54889 - C54890) * C38297 +
            (C54891 - C54892 + C54893 - C54894) * C38292) *
               C89236 * C89153 * C89335 +
           ((C54884 * C819 - C54750 * C1029 + C54885 * C4097 - C54751 * C4325) *
                C38295 +
            (C54884 * C830 - C54750 * C1037 + C54885 * C4102 - C54751 * C4329) *
                C38291 +
            (C55661 - C55662 + C55663 - C55664) * C38297 +
            (C55665 - C55666 + C55667 - C55668) * C38292) *
               C89236 * C89153 * C89336 +
           ((C54750 * C1032 - C54884 * C820 + C54751 * C8680 - C54885 * C8516) *
                C38295 +
            (C54750 * C1040 - C54884 * C832 + C54751 * C8683 - C54885 * C8522) *
                C38291 +
            (C55669 - C55670 + C55671 - C55672) * C38297 +
            (C55673 - C55674 + C55675 - C55676) * C38292) *
               C89236 * C89153 * C6963) *
              C89299 +
          (((C54888 - C54887 + C54890 - C54889) * C38295 +
            (C54892 - C54891 + C54894 - C54893) * C38291 +
            (C54895 - C54896 + C54897 - C54898) * C38297 +
            (C54899 - C54900 + C54901 - C54902) * C38292) *
               C89236 * C89153 * C89335 +
           ((C55662 - C55661 + C55664 - C55663) * C38295 +
            (C55666 - C55665 + C55668 - C55667) * C38291 +
            (C57659 - C57660 + C57661 - C57662) * C38297 +
            (C57663 - C57664 + C57665 - C57666) * C38292) *
               C89236 * C89153 * C89336 +
           ((C55670 - C55669 + C55672 - C55671) * C38295 +
            (C55674 - C55673 + C55676 - C55675) * C38291 +
            (C54884 * C822 - C54750 * C1034 + C54885 * C8514 - C54751 * C8682) *
                C38297 +
            (C54884 * C836 - C54750 * C1042 + C54885 * C8518 - C54751 * C8685) *
                C38292) *
               C89236 * C89153 * C6963) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                 C180 +
             (C38291 * C352 - C38295 * C346 + C38292 * C353 - C38297 * C347) *
                 C89236) *
                C54750 +
            ((C56780 - C56781 + C56782 - C56783) * C180 +
             (C56784 - C56785 + C56786 - C56787) * C89236) *
                C54751) *
               C89153 * C89335 +
           (((C39387 - C39386 + C39389 - C39388) * C180 +
             (C39391 - C39390 + C39393 - C39392) * C89236) *
                C54750 +
            ((C43327 - C43328 + C43329 - C43330) * C180 +
             (C43331 - C43332 + C43333 - C43334) * C89236) *
                C54751) *
               C89153 * C89336 +
           (((C39395 - C39394 + C39397 - C39396) * C180 +
             (C39399 - C39398 + C39401 - C39400) * C89236) *
                C54750 +
            ((C48891 - C48892 + C48893 - C48894) * C180 +
             (C48895 - C48896 + C48897 - C48898) * C89236) *
                C54751) *
               C89153 * C6963) *
              C89299 +
          ((((C38295 * C107 - C38291 * C114 + C38297 * C108 - C38292 * C116) *
                 C180 +
             (C38295 * C347 - C38291 * C353 + C38297 * C348 - C38292 * C354) *
                 C89236) *
                C54750 +
            ((C56796 - C56797 + C56798 - C56799) * C180 +
             (C56800 - C56801 + C56802 - C56803) * C89236) *
                C54751) *
               C89153 * C89335 +
           (((C39403 - C39402 + C39405 - C39404) * C180 +
             (C39407 - C39406 + C39409 - C39408) * C89236) *
                C54750 +
            ((C43335 - C43336 + C43337 - C43338) * C180 +
             (C43339 - C43340 + C43341 - C43342) * C89236) *
                C54751) *
               C89153 * C89336 +
           (((C39411 - C39410 + C39413 - C39412) * C180 +
             (C39415 - C39414 + C39417 - C39416) * C89236) *
                C54750 +
            ((C38295 * C8515 - C38291 * C8519 + C38297 * C8514 -
              C38292 * C8517) *
                 C180 +
             (C38295 * C8761 - C38291 * C8764 + C38297 * C8762 -
              C38292 * C8765) *
                 C89236) *
                C54751) *
               C89153 * C6963) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) *
                 C38291 +
             C440 * C38292) *
                C54750 +
            (C56910 + C56911) * C54751) *
               C89153 * C89335 -
           ((C59875 + C59874) * C54751 +
            (C1259 * C38292 +
             (C180 * C923 - C408 * C819 - C180 * C1135 + C89236 * C1227) *
                 C38291) *
                C54750) *
               C89153 * C89336 +
           (((C180 * C926 - C408 * C820 - C180 * C1138 + C89236 * C1228) *
                 C38291 +
             C1260 * C38292) *
                C54750 +
            (C33871 * C38291 + C55879 * C38292) * C54751) *
               C89153 * C6963) *
              C89299 +
          (((C1259 * C38291 + C1258 * C38292) * C54750 +
            (C59876 + C59877) * C54751) *
               C89153 * C89336 -
           ((C56915 + C56914) * C54751 +
            (C441 * C38292 + C440 * C38291) * C54750) *
               C89153 * C89335 -
           (((C180 * C8602 - C408 * C8514 - C180 * C8762 + C89236 * C8840) *
                 C38292 +
             C55879 * C38291) *
                C54751 +
            (C1261 * C38292 + C1260 * C38291) * C54750) *
               C89153 * C6963) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                 C180 +
             (C54750 * C493 - C54884 * C346 + C54751 * C2240 - C54885 * C2040) *
                 C89236) *
                C38291 +
            ((C54887 - C54888 + C54889 - C54890) * C180 +
             (C55109 - C55110 + C55111 - C55112) * C89236) *
                C38292) *
               C89153 * C89335 +
           (((C54884 * C819 - C54750 * C1029 + C54885 * C4097 -
              C54751 * C4325) *
                 C180 +
             (C54884 * C1135 - C54750 * C1335 + C54885 * C4439 -
              C54751 * C4661) *
                 C89236) *
                C38291 +
            ((C55661 - C55662 + C55663 - C55664) * C180 +
             (C55978 - C55979 + C55980 - C55981) * C89236) *
                C38292) *
               C89153 * C89336 +
           (((C54750 * C1032 - C54884 * C820 + C54751 * C8680 -
              C54885 * C8516) *
                 C180 +
             (C54750 * C1338 - C54884 * C1138 + C54751 * C8917 -
              C54885 * C8760) *
                 C89236) *
                C38291 +
            ((C55669 - C55670 + C55671 - C55672) * C180 +
             (C55982 - C55983 + C55984 - C55985) * C89236) *
                C38292) *
               C89153 * C6963) *
              C89299 +
          ((((C54888 - C54887 + C54890 - C54889) * C180 +
             (C55110 - C55109 + C55112 - C55111) * C89236) *
                C38291 +
            ((C54895 - C54896 + C54897 - C54898) * C180 +
             (C55113 - C55114 + C55115 - C55116) * C89236) *
                C38292) *
               C89153 * C89335 +
           (((C55662 - C55661 + C55664 - C55663) * C180 +
             (C55979 - C55978 + C55981 - C55980) * C89236) *
                C38291 +
            ((C57659 - C57660 + C57661 - C57662) * C180 +
             (C57961 - C57962 + C57963 - C57964) * C89236) *
                C38292) *
               C89153 * C89336 +
           (((C55670 - C55669 + C55672 - C55671) * C180 +
             (C55983 - C55982 + C55985 - C55984) * C89236) *
                C38291 +
            ((C54884 * C822 - C54750 * C1034 + C54885 * C8514 -
              C54751 * C8682) *
                 C180 +
             (C54884 * C1140 - C54750 * C1340 + C54885 * C8762 -
              C54751 * C8919) *
                 C89236) *
                C38292) *
               C89153 * C6963) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eezx[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                C54884 +
            (C38291 * C571 - C38295 * C565 + C38292 * C572 - C38297 * C566) *
                C54750 +
            (C56780 - C56781 + C56782 - C56783) * C54885 +
            (C57122 - C57123 + C57124 - C57125) * C54751) *
               C89236 * C89153 * C89335 +
           ((C39387 - C39386 + C39389 - C39388) * C54884 +
            (C39744 - C39743 + C39746 - C39745) * C54750 +
            (C43327 - C43328 + C43329 - C43330) * C54885 +
            (C43749 - C43750 + C43751 - C43752) * C54751) *
               C89236 * C89153 * C89336 +
           ((C39395 - C39394 + C39397 - C39396) * C54884 +
            (C39748 - C39747 + C39750 - C39749) * C54750 +
            (C48891 - C48892 + C48893 - C48894) * C54885 +
            (C49193 - C49194 + C49195 - C49196) * C54751) *
               C89236 * C89153 * C6963) *
              C89299 +
          (((C38295 * C107 - C38291 * C114 + C38297 * C108 - C38292 * C116) *
                C54884 +
            (C38295 * C566 - C38291 * C572 + C38297 * C567 - C38292 * C573) *
                C54750 +
            (C56796 - C56797 + C56798 - C56799) * C54885 +
            (C57130 - C57131 + C57132 - C57133) * C54751) *
               C89236 * C89153 * C89335 +
           ((C39403 - C39402 + C39405 - C39404) * C54884 +
            (C39752 - C39751 + C39754 - C39753) * C54750 +
            (C43335 - C43336 + C43337 - C43338) * C54885 +
            (C43753 - C43754 + C43755 - C43756) * C54751) *
               C89236 * C89153 * C89336 +
           ((C39411 - C39410 + C39413 - C39412) * C54884 +
            (C39756 - C39755 + C39758 - C39757) * C54750 +
            (C38295 * C8515 - C38291 * C8519 + C38297 * C8514 -
             C38292 * C8517) *
                C54885 +
            (C38295 * C8995 - C38291 * C8998 + C38297 * C8996 -
             C38292 * C8999) *
                C54751) *
               C89236 * C89153 * C6963) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eezy[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C54884 +
             (C89236 * C627 - C180 * C565) * C54750 +
             (C27126 - C27127) * C54885 + (C27696 - C27697) * C54751) *
                C38291 +
            ((C194 - C195) * C54884 + (C634 - C635) * C54750 + C56562 * C54885 +
             C57236 * C54751) *
                C38292) *
               C89153 * C89335 +
           (((C180 * C819 - C89236 * C923) * C54884 +
             (C180 * C1425 - C89236 * C1515) * C54750 +
             (C29351 - C29352) * C54885 + (C29991 - C29992) * C54751) *
                C38291 +
            ((C940 - C941) * C54884 + (C1524 - C1525) * C54750 +
             C59472 * C54885 + C60272 * C54751) *
                C38292) *
               C89153 * C89336 +
           (((C89236 * C926 - C180 * C820) * C54884 +
             (C89236 * C1518 - C180 * C1428) * C54750 +
             (C33629 - C33630) * C54885 + (C34097 - C34098) * C54751) *
                C38291 +
            ((C948 - C949) * C54884 + (C1528 - C1529) * C54750 +
             (C55559 - C55560) * C54885 + (C56182 - C56183) * C54751) *
                C38292) *
               C89153 * C6963) *
              C89299 +
          ((((C195 - C194) * C54884 + (C635 - C634) * C54750 + C56564 * C54885 +
             C57237 * C54751) *
                C38291 +
            ((C199 - C198) * C54884 + (C638 - C637) * C54750 + C3433 * C54885 +
             C3912 * C54751) *
                C38292) *
               C89153 * C89335 +
           (((C941 - C940) * C54884 + (C1525 - C1524) * C54750 +
             C59474 * C54885 + C60273 * C54751) *
                C38291 +
            ((C945 - C944) * C54884 + (C1527 - C1526) * C54750 +
             (C4224 - C4225) * C54885 + (C4880 - C4881) * C54751) *
                C38292) *
               C89153 * C89336 +
           (((C949 - C948) * C54884 + (C1529 - C1528) * C54750 +
             (C55560 - C55559) * C54885 + (C56183 - C56182) * C54751) *
                C38291 +
            ((C953 - C952) * C54884 + (C1531 - C1530) * C54750 +
             (C180 * C8514 - C89236 * C8602) * C54885 +
             (C180 * C8996 - C89236 * C9076) * C54751) *
                C38292) *
               C89153 * C6963) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eezz[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C54884 * C264 - C55318 * C106 - C54884 * C565 + C54750 * C700 +
             C54885 * C1934 - C55319 * C1724 - C54885 * C2330 +
             C54751 * C2512) *
                C89236 * C38291 +
            (C55357 + C55358) * C89236 * C38292) *
               C89153 * C89335 -
           ((C56306 + C56307) * C89236 * C38292 +
            (C54885 * C4325 - C55319 * C4097 - C54885 * C4767 + C54751 * C4979 +
             C54884 * C1029 - C55318 * C819 - C54884 * C1425 + C54750 * C1607) *
                C89236 * C38291) *
               C89153 * C89336 +
           ((C54884 * C1032 - C55318 * C820 - C54884 * C1428 + C54750 * C1608 +
             C54885 * C8680 - C55319 * C8516 - C54885 * C8994 +
             C54751 * C9153) *
                C89236 * C38291 +
            (C56308 + C56309) * C89236 * C38292) *
               C89153 * C6963) *
              C89299 +
          (((C56307 + C56306) * C89236 * C38291 +
            (C58271 + C58272) * C89236 * C38292) *
               C89153 * C89336 -
           ((C55359 + C55360) * C89236 * C38292 +
            (C55358 + C55357) * C89236 * C38291) *
               C89153 * C89335 -
           ((C54885 * C8682 - C55319 * C8514 - C54885 * C8996 + C54751 * C9151 +
             C54884 * C1034 - C55318 * C822 - C54884 * C1430 + C54750 * C1610) *
                C89236 * C38292 +
            (C56309 + C56308) * C89236 * C38291) *
               C89153 * C6963) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eexx[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C38295 * C112 - C38296 * C106 - C38295 * C113 + C38291 * C124 +
             C38297 * C114 - C38298 * C107 - C38297 * C115 + C38292 * C125) *
                C54750 +
            (C56456 + C56457) * C54751) *
               C89236 * C89308 -
           ((C56458 + C56459) * C54751 + (C56457 + C56456) * C54750) * C89236 *
               C89217) *
              C89335 +
          (((C42922 + C42921) * C54750 + (C45635 + C45636) * C54751) * C89236 *
               C89217 -
           ((C42921 + C42922) * C54751 + (C39063 + C39062) * C54750) * C89236 *
               C89308) *
              C89336 +
          (((C39065 + C39064) * C54750 + (C48595 + C48596) * C54751) * C89236 *
               C89308 -
           ((C38297 * C14605 - C38298 * C14602 - C38297 * C14606 +
             C38292 * C14608 + C38295 * C14603 - C38296 * C14601 -
             C38295 * C14604 + C38291 * C14607) *
                C54751 +
            (C48596 + C48595) * C54750) *
               C89236 * C89217) *
              C6963) *
         C89118) /
        (p * q * std::sqrt(p + q));
    d2eexy[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C38295 +
             (C89236 * C187 - C180 * C113) * C38291 + (C194 - C195) * C38297 +
             (C196 - C197) * C38292) *
                C54750 +
            ((C27126 - C27127) * C38295 + (C27128 - C27129) * C38291 +
             C56562 * C38297 + C56563 * C38292) *
                C54751) *
               C89308 +
           (((C27127 - C27126) * C38295 + (C27129 - C27128) * C38291 +
             C56564 * C38297 + C56565 * C38292) *
                C54750 +
            ((C27131 - C27130) * C38295 + (C27133 - C27132) * C38291 +
             C27138 * C38297 + C27139 * C38292) *
                C54751) *
               C89217) *
              C89335 +
          ((((C180 * C819 - C89236 * C923) * C38295 +
             (C180 * C830 - C89236 * C931) * C38291 + (C940 - C941) * C38297 +
             (C942 - C943) * C38292) *
                C54750 +
            ((C29351 - C29352) * C38295 + (C29353 - C29354) * C38291 +
             C59472 * C38297 + C59473 * C38292) *
                C54751) *
               C89308 +
           (((C29352 - C29351) * C38295 + (C29354 - C29353) * C38291 +
             C59474 * C38297 + C59475 * C38292) *
                C54750 +
            ((C29356 - C29355) * C38295 + (C29358 - C29357) * C38291 +
             (C29359 - C29360) * C38297 + (C29361 - C29362) * C38292) *
                C54751) *
               C89217) *
              C89336 +
          ((((C89236 * C926 - C180 * C820) * C38295 +
             (C89236 * C934 - C180 * C832) * C38291 + (C948 - C949) * C38297 +
             (C950 - C951) * C38292) *
                C54750 +
            ((C33629 - C33630) * C38295 + (C33631 - C33632) * C38291 +
             (C55559 - C55560) * C38297 + (C55561 - C55562) * C38292) *
                C54751) *
               C89308 +
           (((C33630 - C33629) * C38295 + (C33632 - C33631) * C38291 +
             (C55560 - C55559) * C38297 + (C55562 - C55561) * C38292) *
                C54750 +
            ((C33634 - C33633) * C38295 + (C33636 - C33635) * C38291 +
             (C180 * C14602 - C89236 * C14684) * C38297 +
             (C180 * C14606 - C89236 * C14686) * C38292) *
                C54751) *
               C89217) *
              C6963) *
         C89118) /
        (p * q * std::sqrt(p + q));
    d2eexz[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                C38295 +
            (C54750 * C270 - C54884 * C113 + C54751 * C1942 - C54885 * C1735) *
                C38291 +
            (C54887 - C54888 + C54889 - C54890) * C38297 +
            (C54891 - C54892 + C54893 - C54894) * C38292) *
               C89236 * C89308 +
           ((C54884 * C1724 - C54750 * C1934 + C54885 * C1725 -
             C54751 * C1937) *
                C38295 +
            (C54884 * C1735 - C54750 * C1942 + C54885 * C1737 -
             C54751 * C1945) *
                C38291 +
            (C56666 - C56667 + C56668 - C56669) * C38297 +
            (C56670 - C56671 + C56672 - C56673) * C38292) *
               C89236 * C89217) *
              C89335 +
          (((C54884 * C819 - C54750 * C1029 + C54885 * C4097 - C54751 * C4325) *
                C38295 +
            (C54884 * C830 - C54750 * C1037 + C54885 * C4102 - C54751 * C4329) *
                C38291 +
            (C55661 - C55662 + C55663 - C55664) * C38297 +
            (C55665 - C55666 + C55667 - C55668) * C38292) *
               C89236 * C89308 +
           ((C54750 * C4325 - C54884 * C4097 + C54751 * C6413 -
             C54885 * C6249) *
                C38295 +
            (C54750 * C4329 - C54884 * C4102 + C54751 * C6416 -
             C54885 * C6255) *
                C38291 +
            (C59606 - C59607 + C59608 - C59609) * C38297 +
            (C59610 - C59611 + C59612 - C59613) * C38292) *
               C89236 * C89217) *
              C89336 +
          (((C54750 * C1032 - C54884 * C820 + C54751 * C8680 - C54885 * C8516) *
                C38295 +
            (C54750 * C1040 - C54884 * C832 + C54751 * C8683 - C54885 * C8522) *
                C38291 +
            (C55669 - C55670 + C55671 - C55672) * C38297 +
            (C55673 - C55674 + C55675 - C55676) * C38292) *
               C89236 * C89308 +
           ((C54884 * C8516 - C54750 * C8680 + C54885 * C14601 -
             C54751 * C14761) *
                C38295 +
            (C54884 * C8522 - C54750 * C8683 + C54885 * C14604 -
             C54751 * C14763) *
                C38291 +
            (C54884 * C8515 - C54750 * C8681 + C54885 * C14602 -
             C54751 * C14762) *
                C38297 +
            (C54884 * C8520 - C54750 * C8684 + C54885 * C14606 -
             C54751 * C14764) *
                C38292) *
               C89236 * C89217) *
              C6963) *
         C89118) /
        (p * q * std::sqrt(p + q));
    d2eeyx[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                 C180 +
             (C38291 * C352 - C38295 * C346 + C38292 * C353 - C38297 * C347) *
                 C89236) *
                C54750 +
            ((C56780 - C56781 + C56782 - C56783) * C180 +
             (C56784 - C56785 + C56786 - C56787) * C89236) *
                C54751) *
               C89308 +
           (((C56781 - C56780 + C56783 - C56782) * C180 +
             (C56785 - C56784 + C56787 - C56786) * C89236) *
                C54750 +
            ((C56788 - C56789 + C56790 - C56791) * C180 +
             (C56792 - C56793 + C56794 - C56795) * C89236) *
                C54751) *
               C89217) *
              C89335 +
          ((((C39387 - C39386 + C39389 - C39388) * C180 +
             (C39391 - C39390 + C39393 - C39392) * C89236) *
                C54750 +
            ((C43327 - C43328 + C43329 - C43330) * C180 +
             (C43331 - C43332 + C43333 - C43334) * C89236) *
                C54751) *
               C89308 +
           (((C43328 - C43327 + C43330 - C43329) * C180 +
             (C43332 - C43331 + C43334 - C43333) * C89236) *
                C54750 +
            ((C45931 - C45932 + C45933 - C45934) * C180 +
             (C45935 - C45936 + C45937 - C45938) * C89236) *
                C54751) *
               C89217) *
              C89336 +
          ((((C39395 - C39394 + C39397 - C39396) * C180 +
             (C39399 - C39398 + C39401 - C39400) * C89236) *
                C54750 +
            ((C48891 - C48892 + C48893 - C48894) * C180 +
             (C48895 - C48896 + C48897 - C48898) * C89236) *
                C54751) *
               C89308 +
           (((C48892 - C48891 + C48894 - C48893) * C180 +
             (C48896 - C48895 + C48898 - C48897) * C89236) *
                C54750 +
            ((C38295 * C14601 - C38291 * C14603 + C38297 * C14602 -
              C38292 * C14605) *
                 C180 +
             (C38295 * C14839 - C38291 * C14841 + C38297 * C14840 -
              C38292 * C14842) *
                 C89236) *
                C54751) *
               C89217) *
              C6963) *
         C89118) /
        (p * q * std::sqrt(p + q));
    d2eeyy[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) *
                 C38291 +
             C440 * C38292) *
                C54750 +
            (C56910 + C56911) * C54751) *
               C89308 -
           ((C56912 + C56913) * C54751 + (C56911 + C56910) * C54750) * C89217) *
              C89335 +
          (((C59874 + C59875) * C54750 + (C62384 + C62385) * C54751) * C89217 -
           ((C59875 + C59874) * C54751 +
            (C1259 * C38292 +
             (C180 * C923 - C408 * C819 - C180 * C1135 + C89236 * C1227) *
                 C38291) *
                C54750) *
               C89308) *
              C89336 +
          ((((C180 * C926 - C408 * C820 - C180 * C1138 + C89236 * C1228) *
                 C38291 +
             C1260 * C38292) *
                C54750 +
            (C65320 + C65321) * C54751) *
               C89308 -
           (((C180 * C14684 - C408 * C14602 - C180 * C14840 + C89236 * C14918) *
                 C38292 +
             C33872 * C38291) *
                C54751 +
            (C65321 + C65320) * C54750) *
               C89217) *
              C6963) *
         C89118) /
        (p * q * std::sqrt(p + q));
    d2eeyz[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                 C180 +
             (C54750 * C493 - C54884 * C346 + C54751 * C2240 - C54885 * C2040) *
                 C89236) *
                C38291 +
            ((C54887 - C54888 + C54889 - C54890) * C180 +
             (C55109 - C55110 + C55111 - C55112) * C89236) *
                C38292) *
               C89308 +
           (((C54884 * C1724 - C54750 * C1934 + C54885 * C1725 -
              C54751 * C1937) *
                 C180 +
             (C54884 * C2040 - C54750 * C2240 + C54885 * C2043 -
              C54751 * C2243) *
                 C89236) *
                C38291 +
            ((C56666 - C56667 + C56668 - C56669) * C180 +
             (C57016 - C57017 + C57018 - C57019) * C89236) *
                C38292) *
               C89217) *
              C89335 +
          ((((C54884 * C819 - C54750 * C1029 + C54885 * C4097 -
              C54751 * C4325) *
                 C180 +
             (C54884 * C1135 - C54750 * C1335 + C54885 * C4439 -
              C54751 * C4661) *
                 C89236) *
                C38291 +
            ((C55661 - C55662 + C55663 - C55664) * C180 +
             (C55978 - C55979 + C55980 - C55981) * C89236) *
                C38292) *
               C89308 +
           (((C54750 * C4325 - C54884 * C4097 + C54751 * C6413 -
              C54885 * C6249) *
                 C180 +
             (C54750 * C4661 - C54884 * C4439 + C54751 * C6650 -
              C54885 * C6493) *
                 C89236) *
                C38291 +
            ((C59606 - C59607 + C59608 - C59609) * C180 +
             (C60008 - C60009 + C60010 - C60011) * C89236) *
                C38292) *
               C89217) *
              C89336 +
          ((((C54750 * C1032 - C54884 * C820 + C54751 * C8680 -
              C54885 * C8516) *
                 C180 +
             (C54750 * C1338 - C54884 * C1138 + C54751 * C8917 -
              C54885 * C8760) *
                 C89236) *
                C38291 +
            ((C55669 - C55670 + C55671 - C55672) * C180 +
             (C55982 - C55983 + C55984 - C55985) * C89236) *
                C38292) *
               C89308 +
           (((C54884 * C8516 - C54750 * C8680 + C54885 * C14601 -
              C54751 * C14761) *
                 C180 +
             (C54884 * C8760 - C54750 * C8917 + C54885 * C14839 -
              C54751 * C14993) *
                 C89236) *
                C38291 +
            ((C54884 * C8515 - C54750 * C8681 + C54885 * C14602 -
              C54751 * C14762) *
                 C180 +
             (C54884 * C8761 - C54750 * C8918 + C54885 * C14840 -
              C54751 * C14994) *
                 C89236) *
                C38292) *
               C89217) *
              C6963) *
         C89118) /
        (p * q * std::sqrt(p + q));
    d2eezx[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                C54884 +
            (C38291 * C571 - C38295 * C565 + C38292 * C572 - C38297 * C566) *
                C54750 +
            (C56780 - C56781 + C56782 - C56783) * C54885 +
            (C57122 - C57123 + C57124 - C57125) * C54751) *
               C89236 * C89308 +
           ((C56781 - C56780 + C56783 - C56782) * C54884 +
            (C57123 - C57122 + C57125 - C57124) * C54750 +
            (C56788 - C56789 + C56790 - C56791) * C54885 +
            (C57126 - C57127 + C57128 - C57129) * C54751) *
               C89236 * C89217) *
              C89335 +
          (((C39387 - C39386 + C39389 - C39388) * C54884 +
            (C39744 - C39743 + C39746 - C39745) * C54750 +
            (C43327 - C43328 + C43329 - C43330) * C54885 +
            (C43749 - C43750 + C43751 - C43752) * C54751) *
               C89236 * C89308 +
           ((C43328 - C43327 + C43330 - C43329) * C54884 +
            (C43750 - C43749 + C43752 - C43751) * C54750 +
            (C45931 - C45932 + C45933 - C45934) * C54885 +
            (C46233 - C46234 + C46235 - C46236) * C54751) *
               C89236 * C89217) *
              C89336 +
          (((C39395 - C39394 + C39397 - C39396) * C54884 +
            (C39748 - C39747 + C39750 - C39749) * C54750 +
            (C48891 - C48892 + C48893 - C48894) * C54885 +
            (C49193 - C49194 + C49195 - C49196) * C54751) *
               C89236 * C89308 +
           ((C48892 - C48891 + C48894 - C48893) * C54884 +
            (C49194 - C49193 + C49196 - C49195) * C54750 +
            (C38295 * C14601 - C38291 * C14603 + C38297 * C14602 -
             C38292 * C14605) *
                C54885 +
            (C38295 * C15069 - C38291 * C15071 + C38297 * C15070 -
             C38292 * C15072) *
                C54751) *
               C89236 * C89217) *
              C6963) *
         C89118) /
        (p * q * std::sqrt(p + q));
    d2eezy[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C54884 +
             (C89236 * C627 - C180 * C565) * C54750 +
             (C27126 - C27127) * C54885 + (C27696 - C27697) * C54751) *
                C38291 +
            ((C194 - C195) * C54884 + (C634 - C635) * C54750 + C56562 * C54885 +
             C57236 * C54751) *
                C38292) *
               C89308 +
           (((C27127 - C27126) * C54884 + (C27697 - C27696) * C54750 +
             (C27131 - C27130) * C54885 + (C27699 - C27698) * C54751) *
                C38291 +
            (C56564 * C54884 + C57237 * C54750 + C27138 * C54885 +
             C27702 * C54751) *
                C38292) *
               C89217) *
              C89335 +
          ((((C180 * C819 - C89236 * C923) * C54884 +
             (C180 * C1425 - C89236 * C1515) * C54750 +
             (C29351 - C29352) * C54885 + (C29991 - C29992) * C54751) *
                C38291 +
            ((C940 - C941) * C54884 + (C1524 - C1525) * C54750 +
             C59472 * C54885 + C60272 * C54751) *
                C38292) *
               C89308 +
           (((C29352 - C29351) * C54884 + (C29992 - C29991) * C54750 +
             (C29356 - C29355) * C54885 + (C29994 - C29993) * C54751) *
                C38291 +
            (C59474 * C54884 + C60273 * C54750 + (C29359 - C29360) * C54885 +
             (C29995 - C29996) * C54751) *
                C38292) *
               C89217) *
              C89336 +
          ((((C89236 * C926 - C180 * C820) * C54884 +
             (C89236 * C1518 - C180 * C1428) * C54750 +
             (C33629 - C33630) * C54885 + (C34097 - C34098) * C54751) *
                C38291 +
            ((C948 - C949) * C54884 + (C1528 - C1529) * C54750 +
             (C55559 - C55560) * C54885 + (C56182 - C56183) * C54751) *
                C38292) *
               C89308 +
           (((C33630 - C33629) * C54884 + (C34098 - C34097) * C54750 +
             (C33634 - C33633) * C54885 + (C34100 - C34099) * C54751) *
                C38291 +
            ((C55560 - C55559) * C54884 + (C56183 - C56182) * C54750 +
             (C180 * C14602 - C89236 * C14684) * C54885 +
             (C180 * C15070 - C89236 * C15148) * C54751) *
                C38292) *
               C89217) *
              C6963) *
         C89118) /
        (p * q * std::sqrt(p + q));
    d2eezz[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C54884 * C264 - C55318 * C106 - C54884 * C565 + C54750 * C700 +
             C54885 * C1934 - C55319 * C1724 - C54885 * C2330 +
             C54751 * C2512) *
                C89236 * C38291 +
            (C55357 + C55358) * C89236 * C38292) *
               C89308 -
           ((C57361 + C57362) * C89236 * C38292 +
            (C54885 * C1937 - C55319 * C1725 - C54885 * C2333 + C54751 * C2513 +
             C54884 * C1934 - C55318 * C1724 - C54884 * C2330 +
             C54750 * C2512) *
                C89236 * C38291) *
               C89217) *
              C89335 +
          (((C54884 * C4325 - C55318 * C4097 - C54884 * C4767 + C54750 * C4979 +
             C54885 * C6413 - C55319 * C6249 - C54885 * C6727 +
             C54751 * C6886) *
                C89236 * C38291 +
            (C60416 + C60417) * C89236 * C38292) *
               C89217 -
           ((C56306 + C56307) * C89236 * C38292 +
            (C54885 * C4325 - C55319 * C4097 - C54885 * C4767 + C54751 * C4979 +
             C54884 * C1029 - C55318 * C819 - C54884 * C1425 + C54750 * C1607) *
                C89236 * C38291) *
               C89308) *
              C89336 +
          (((C54884 * C1032 - C55318 * C820 - C54884 * C1428 + C54750 * C1608 +
             C54885 * C8680 - C55319 * C8516 - C54885 * C8994 +
             C54751 * C9153) *
                C89236 * C38291 +
            (C56308 + C56309) * C89236 * C38292) *
               C89308 -
           ((C54885 * C14762 - C55319 * C14602 - C54885 * C15070 +
             C54751 * C15224 + C54884 * C8681 - C55318 * C8515 -
             C54884 * C8995 + C54750 * C9152) *
                C89236 * C38292 +
            (C54885 * C14761 - C55319 * C14601 - C54885 * C15069 +
             C54751 * C15223 + C54884 * C8680 - C55318 * C8516 -
             C54884 * C8994 + C54750 * C9153) *
                C89236 * C38291) *
               C89217) *
              C6963) *
         C89118) /
        (p * q * std::sqrt(p + q));
    d2eexx[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C38295 * C112 - C38296 * C106 - C38295 * C113 + C38291 * C124 +
            C38297 * C114 - C38298 * C107 - C38297 * C115 + C38292 * C125) *
               C54750 +
           (C56456 + C56457) * C54751) *
              C89236 * C89153 * C5720 -
          ((C42921 + C42922) * C54751 + (C39063 + C39062) * C54750) * C89236 *
              C89153 * C5721 +
          ((C39065 + C39064) * C54750 + (C48595 + C48596) * C54751) * C89236 *
              C89153 * C5722 -
          ((C38297 * C16687 - C38298 * C16684 - C38297 * C16688 +
            C38292 * C16690 + C38295 * C16685 - C38296 * C16683 -
            C38295 * C16686 + C38291 * C16689) *
               C54751 +
           (C44984 + C44983) * C54750) *
              C89236 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C38295 * C112 - C38296 * C106 - C38295 * C113 + C38291 * C124 +
             C38297 * C114 - C38298 * C107 - C38297 * C115 + C38292 * C125) *
                C54750 +
            (C56456 + C56457) * C54751) *
               C89236 * C89153 * C5073 -
           ((C42921 + C42922) * C54751 + (C39063 + C39062) * C54750) * C89236 *
               C89153 * C89189) *
              C5075 +
          (((C39066 + C39067) * C54750 + (C42923 + C42924) * C54751) * C89236 *
               C89153 * C89189 -
           ((C56461 + C56460) * C54751 +
            (C38297 * C116 - C38298 * C108 - C38297 * C117 + C38292 * C126 +
             C38295 * C114 - C38296 * C107 - C38295 * C115 + C38291 * C125) *
                C54750) *
               C89236 * C89153 * C5073) *
              C5076 +
          (((C38295 * C116 - C38296 * C108 - C38295 * C117 + C38291 * C126 +
             C38297 * C118 - C38298 * C109 - C38297 * C119 + C38292 * C127) *
                C54750 +
            (C58383 + C58384) * C54751) *
               C89236 * C89153 * C5073 -
           ((C38297 * C4107 - C38298 * C4100 - C38297 * C4108 + C38292 * C4112 +
             C38295 * C4105 - C38296 * C4099 - C38295 * C4106 +
             C38291 * C4111) *
                C54751 +
            (C41029 + C41028) * C54750) *
               C89236 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C38295 * C112 - C38296 * C106 - C38295 * C113 + C38291 * C124 +
             C38297 * C114 - C38298 * C107 - C38297 * C115 + C38292 * C125) *
                C54750 +
            (C56456 + C56457) * C54751) *
               C89236 * C1719 -
           ((C56458 + C56459) * C54751 + (C56457 + C56456) * C54750) * C89236 *
               C1720 +
           ((C56459 + C56458) * C54750 +
            (C38295 * C10549 - C38296 * C10544 - C38295 * C10550 +
             C38291 * C10553 + C38297 * C10547 - C38298 * C10543 -
             C38297 * C10548 + C38292 * C10552) *
                C54751) *
               C89236 * C1721) *
              C5073 +
          (((C42922 + C42921) * C54750 + (C45635 + C45636) * C54751) * C89236 *
               C1720 -
           ((C42921 + C42922) * C54751 + (C39063 + C39062) * C54750) * C89236 *
               C1719 -
           ((C38297 * C29240 - C38298 * C29239 - C38297 * C29241 +
             C38292 * C29242 + C38295 * C23156 - C38296 * C23153 -
             C38295 * C23157 + C38291 * C23159) *
                C54751 +
            (C45636 + C45635) * C54750) *
               C89236 * C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eexy[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89236 * C181 - C180 * C106) * C38295 +
            (C89236 * C187 - C180 * C113) * C38291 + (C194 - C195) * C38297 +
            (C196 - C197) * C38292) *
               C54750 +
           ((C27126 - C27127) * C38295 + (C27128 - C27129) * C38291 +
            C56562 * C38297 + C56563 * C38292) *
               C54751) *
              C89153 * C5720 +
          (((C180 * C819 - C89236 * C923) * C38295 +
            (C180 * C830 - C89236 * C931) * C38291 + (C940 - C941) * C38297 +
            (C942 - C943) * C38292) *
               C54750 +
           ((C29351 - C29352) * C38295 + (C29353 - C29354) * C38291 +
            C59472 * C38297 + C59473 * C38292) *
               C54751) *
              C89153 * C5721 +
          (((C89236 * C926 - C180 * C820) * C38295 +
            (C89236 * C934 - C180 * C832) * C38291 + (C948 - C949) * C38297 +
            (C950 - C951) * C38292) *
               C54750 +
           ((C33629 - C33630) * C38295 + (C33631 - C33632) * C38291 +
            (C55559 - C55560) * C38297 + (C55561 - C55562) * C38292) *
               C54751) *
              C89153 * C5722 +
          (((C180 * C5727 - C89236 * C5787) * C38295 +
            (C180 * C5733 - C89236 * C5790) * C38291 +
            (C180 * C5726 - C89236 * C5788) * C38297 +
            (C180 * C5731 - C89236 * C5791) * C38292) *
               C54750 +
           ((C180 * C16683 - C89236 * C16821) * C38295 +
            (C180 * C16686 - C89236 * C16823) * C38291 +
            (C180 * C16684 - C89236 * C16822) * C38297 +
            (C180 * C16688 - C89236 * C16824) * C38292) *
               C54751) *
              C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C38295 +
             (C89236 * C187 - C180 * C113) * C38291 + (C194 - C195) * C38297 +
             (C196 - C197) * C38292) *
                C54750 +
            ((C27126 - C27127) * C38295 + (C27128 - C27129) * C38291 +
             C56562 * C38297 + C56563 * C38292) *
                C54751) *
               C89153 * C5073 +
           (((C180 * C819 - C89236 * C923) * C38295 +
             (C180 * C830 - C89236 * C931) * C38291 + (C940 - C941) * C38297 +
             (C942 - C943) * C38292) *
                C54750 +
            ((C29351 - C29352) * C38295 + (C29353 - C29354) * C38291 +
             C59472 * C38297 + C59473 * C38292) *
                C54751) *
               C89153 * C89189) *
              C5075 +
          ((((C195 - C194) * C38295 + (C197 - C196) * C38291 +
             (C199 - C198) * C38297 + (C201 - C200) * C38292) *
                C54750 +
            (C56564 * C38295 + C56565 * C38291 + C3433 * C38297 +
             C3434 * C38292) *
                C54751) *
               C89153 * C5073 +
           (((C941 - C940) * C38295 + (C943 - C942) * C38291 +
             (C945 - C944) * C38297 + (C947 - C946) * C38292) *
                C54750 +
            (C59474 * C38295 + C59475 * C38291 + (C4224 - C4225) * C38297 +
             (C4226 - C4227) * C38292) *
                C54751) *
               C89153 * C89189) *
              C5076 +
          (((C210 * C38295 + C211 * C38291 + (C203 - C202) * C38297 +
             (C205 - C204) * C38292) *
                C54750 +
            (C58483 * C38295 + C58484 * C38291 + (C3435 - C3436) * C38297 +
             (C3437 - C3438) * C38292) *
                C54751) *
               C89153 * C5073 +
           ((C2710 * C38295 + C2711 * C38291 + (C2713 - C2712) * C38297 +
             (C2715 - C2714) * C38292) *
                C54750 +
            ((C4225 - C4224) * C38295 + (C4227 - C4226) * C38291 +
             (C180 * C4100 - C89236 * C4214) * C38297 +
             (C180 * C4108 - C89236 * C4218) * C38292) *
                C54751) *
               C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C38295 +
             (C89236 * C187 - C180 * C113) * C38291 + (C194 - C195) * C38297 +
             (C196 - C197) * C38292) *
                C54750 +
            ((C27126 - C27127) * C38295 + (C27128 - C27129) * C38291 +
             C56562 * C38297 + C56563 * C38292) *
                C54751) *
               C1719 +
           (((C27127 - C27126) * C38295 + (C27129 - C27128) * C38291 +
             C56564 * C38297 + C56565 * C38292) *
                C54750 +
            ((C27131 - C27130) * C38295 + (C27133 - C27132) * C38291 +
             C27138 * C38297 + C27139 * C38292) *
                C54751) *
               C1720 +
           ((C27144 * C38295 + C27145 * C38291 + C56566 * C38297 +
             C56567 * C38292) *
                C54750 +
            ((C27135 - C27134) * C38295 + (C27137 - C27136) * C38291 +
             (C27140 - C27141) * C38297 + (C27142 - C27143) * C38292) *
                C54751) *
               C1721) *
              C5073 +
          ((((C180 * C819 - C89236 * C923) * C38295 +
             (C180 * C830 - C89236 * C931) * C38291 + (C940 - C941) * C38297 +
             (C942 - C943) * C38292) *
                C54750 +
            ((C29351 - C29352) * C38295 + (C29353 - C29354) * C38291 +
             C59472 * C38297 + C59473 * C38292) *
                C54751) *
               C1719 +
           (((C29352 - C29351) * C38295 + (C29354 - C29353) * C38291 +
             C59474 * C38297 + C59475 * C38292) *
                C54750 +
            ((C29356 - C29355) * C38295 + (C29358 - C29357) * C38291 +
             (C29359 - C29360) * C38297 + (C29361 - C29362) * C38292) *
                C54751) *
               C1720 +
           ((C31373 * C38295 + C31374 * C38291 + (C29360 - C29359) * C38297 +
             (C29362 - C29361) * C38292) *
                C54750 +
            ((C31376 - C31375) * C38295 + (C31378 - C31377) * C38291 +
             (C180 * C29239 - C89236 * C29348) * C38297 +
             (C180 * C29241 - C89236 * C29349) * C38292) *
                C54751) *
               C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eexz[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
               C38295 +
           (C54750 * C270 - C54884 * C113 + C54751 * C1942 - C54885 * C1735) *
               C38291 +
           (C54887 - C54888 + C54889 - C54890) * C38297 +
           (C54891 - C54892 + C54893 - C54894) * C38292) *
              C89236 * C89153 * C5720 +
          ((C54884 * C819 - C54750 * C1029 + C54885 * C4097 - C54751 * C4325) *
               C38295 +
           (C54884 * C830 - C54750 * C1037 + C54885 * C4102 - C54751 * C4329) *
               C38291 +
           (C55661 - C55662 + C55663 - C55664) * C38297 +
           (C55665 - C55666 + C55667 - C55668) * C38292) *
              C89236 * C89153 * C5721 +
          ((C54750 * C1032 - C54884 * C820 + C54751 * C8680 - C54885 * C8516) *
               C38295 +
           (C54750 * C1040 - C54884 * C832 + C54751 * C8683 - C54885 * C8522) *
               C38291 +
           (C55669 - C55670 + C55671 - C55672) * C38297 +
           (C55673 - C55674 + C55675 - C55676) * C38292) *
              C89236 * C89153 * C5722 +
          ((C54884 * C5727 - C54750 * C5843 + C54885 * C16683 -
            C54751 * C16923) *
               C38295 +
           (C54884 * C5733 - C54750 * C5846 + C54885 * C16686 -
            C54751 * C16925) *
               C38291 +
           (C54884 * C5726 - C54750 * C5844 + C54885 * C16684 -
            C54751 * C16924) *
               C38297 +
           (C54884 * C5731 - C54750 * C5847 + C54885 * C16688 -
            C54751 * C16926) *
               C38292) *
              C89236 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                C38295 +
            (C54750 * C270 - C54884 * C113 + C54751 * C1942 - C54885 * C1735) *
                C38291 +
            (C54887 - C54888 + C54889 - C54890) * C38297 +
            (C54891 - C54892 + C54893 - C54894) * C38292) *
               C89236 * C89153 * C5073 +
           ((C54884 * C819 - C54750 * C1029 + C54885 * C4097 - C54751 * C4325) *
                C38295 +
            (C54884 * C830 - C54750 * C1037 + C54885 * C4102 - C54751 * C4329) *
                C38291 +
            (C55661 - C55662 + C55663 - C55664) * C38297 +
            (C55665 - C55666 + C55667 - C55668) * C38292) *
               C89236 * C89153 * C89189) *
              C5075 +
          (((C54888 - C54887 + C54890 - C54889) * C38295 +
            (C54892 - C54891 + C54894 - C54893) * C38291 +
            (C54895 - C54896 + C54897 - C54898) * C38297 +
            (C54899 - C54900 + C54901 - C54902) * C38292) *
               C89236 * C89153 * C5073 +
           ((C55662 - C55661 + C55664 - C55663) * C38295 +
            (C55666 - C55665 + C55668 - C55667) * C38291 +
            (C57659 - C57660 + C57661 - C57662) * C38297 +
            (C57663 - C57664 + C57665 - C57666) * C38292) *
               C89236 * C89153 * C89189) *
              C5076 +
          (((C54896 - C54895 + C54898 - C54897) * C38295 +
            (C54900 - C54899 + C54902 - C54901) * C38291 +
            (C54903 - C54904 + C54905 - C54906) * C38297 +
            (C54907 - C54908 + C54909 - C54910) * C38292) *
               C89236 * C89153 * C5073 +
           ((C57660 - C57659 + C57662 - C57661) * C38295 +
            (C57664 - C57663 + C57666 - C57665) * C38291 +
            (C54884 * C823 - C54750 * C1035 + C54885 * C4100 - C54751 * C4328) *
                C38297 +
            (C54884 * C838 - C54750 * C1043 + C54885 * C4108 - C54751 * C4332) *
                C38292) *
               C89236 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                C38295 +
            (C54750 * C270 - C54884 * C113 + C54751 * C1942 - C54885 * C1735) *
                C38291 +
            (C54887 - C54888 + C54889 - C54890) * C38297 +
            (C54891 - C54892 + C54893 - C54894) * C38292) *
               C89236 * C1719 +
           ((C54884 * C1724 - C54750 * C1934 + C54885 * C1725 -
             C54751 * C1937) *
                C38295 +
            (C54884 * C1735 - C54750 * C1942 + C54885 * C1737 -
             C54751 * C1945) *
                C38291 +
            (C56666 - C56667 + C56668 - C56669) * C38297 +
            (C56670 - C56671 + C56672 - C56673) * C38292) *
               C89236 * C1720 +
           ((C54750 * C1937 - C54884 * C1725 + C54751 * C10660 -
             C54885 * C10544) *
                C38295 +
            (C54750 * C1945 - C54884 * C1737 + C54751 * C10663 -
             C54885 * C10550) *
                C38291 +
            (C56674 - C56675 + C56676 - C56677) * C38297 +
            (C56678 - C56679 + C56680 - C56681) * C38292) *
               C89236 * C1721) *
              C5073 +
          (((C54884 * C819 - C54750 * C1029 + C54885 * C4097 - C54751 * C4325) *
                C38295 +
            (C54884 * C830 - C54750 * C1037 + C54885 * C4102 - C54751 * C4329) *
                C38291 +
            (C55661 - C55662 + C55663 - C55664) * C38297 +
            (C55665 - C55666 + C55667 - C55668) * C38292) *
               C89236 * C1719 +
           ((C54750 * C4325 - C54884 * C4097 + C54751 * C6413 -
             C54885 * C6249) *
                C38295 +
            (C54750 * C4329 - C54884 * C4102 + C54751 * C6416 -
             C54885 * C6255) *
                C38291 +
            (C59606 - C59607 + C59608 - C59609) * C38297 +
            (C59610 - C59611 + C59612 - C59613) * C38292) *
               C89236 * C1720 +
           ((C54884 * C6249 - C54750 * C6413 + C54885 * C23153 -
             C54751 * C23264) *
                C38295 +
            (C54884 * C6255 - C54750 * C6416 + C54885 * C23157 -
             C54751 * C23266) *
                C38291 +
            (C54884 * C6248 - C54750 * C6414 + C54885 * C29239 -
             C54751 * C29460) *
                C38297 +
            (C54884 * C6253 - C54750 * C6417 + C54885 * C29241 -
             C54751 * C29461) *
                C38292) *
               C89236 * C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eeyx[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                C180 +
            (C38291 * C352 - C38295 * C346 + C38292 * C353 - C38297 * C347) *
                C89236) *
               C54750 +
           ((C56780 - C56781 + C56782 - C56783) * C180 +
            (C56784 - C56785 + C56786 - C56787) * C89236) *
               C54751) *
              C89153 * C5720 +
          (((C39387 - C39386 + C39389 - C39388) * C180 +
            (C39391 - C39390 + C39393 - C39392) * C89236) *
               C54750 +
           ((C43327 - C43328 + C43329 - C43330) * C180 +
            (C43331 - C43332 + C43333 - C43334) * C89236) *
               C54751) *
              C89153 * C5721 +
          (((C39395 - C39394 + C39397 - C39396) * C180 +
            (C39399 - C39398 + C39401 - C39400) * C89236) *
               C54750 +
           ((C48891 - C48892 + C48893 - C48894) * C180 +
            (C48895 - C48896 + C48897 - C48898) * C89236) *
               C54751) *
              C89153 * C5722 +
          (((C45184 - C45183 + C45186 - C45185) * C180 +
            (C45188 - C45187 + C45190 - C45189) * C89236) *
               C54750 +
           ((C38295 * C16683 - C38291 * C16685 + C38297 * C16684 -
             C38292 * C16687) *
                C180 +
            (C38295 * C17037 - C38291 * C17039 + C38297 * C17038 -
             C38292 * C17040) *
                C89236) *
               C54751) *
              C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                 C180 +
             (C38291 * C352 - C38295 * C346 + C38292 * C353 - C38297 * C347) *
                 C89236) *
                C54750 +
            ((C56780 - C56781 + C56782 - C56783) * C180 +
             (C56784 - C56785 + C56786 - C56787) * C89236) *
                C54751) *
               C89153 * C5073 +
           (((C39387 - C39386 + C39389 - C39388) * C180 +
             (C39391 - C39390 + C39393 - C39392) * C89236) *
                C54750 +
            ((C43327 - C43328 + C43329 - C43330) * C180 +
             (C43331 - C43332 + C43333 - C43334) * C89236) *
                C54751) *
               C89153 * C89189) *
              C5075 +
          ((((C38295 * C107 - C38291 * C114 + C38297 * C108 - C38292 * C116) *
                 C180 +
             (C38295 * C347 - C38291 * C353 + C38297 * C348 - C38292 * C354) *
                 C89236) *
                C54750 +
            ((C56796 - C56797 + C56798 - C56799) * C180 +
             (C56800 - C56801 + C56802 - C56803) * C89236) *
                C54751) *
               C89153 * C5073 +
           (((C39403 - C39402 + C39405 - C39404) * C180 +
             (C39407 - C39406 + C39409 - C39408) * C89236) *
                C54750 +
            ((C43335 - C43336 + C43337 - C43338) * C180 +
             (C43339 - C43340 + C43341 - C43342) * C89236) *
                C54751) *
               C89153 * C89189) *
              C5076 +
          ((((C38291 * C116 - C38295 * C108 + C38292 * C118 - C38297 * C109) *
                 C180 +
             (C38291 * C354 - C38295 * C348 + C38292 * C355 - C38297 * C349) *
                 C89236) *
                C54750 +
            ((C58689 - C58690 + C58691 - C58692) * C180 +
             (C58693 - C58694 + C58695 - C58696) * C89236) *
                C54751) *
               C89153 * C5073 +
           (((C41335 - C41334 + C41337 - C41336) * C180 +
             (C41339 - C41338 + C41341 - C41340) * C89236) *
                C54750 +
            ((C38295 * C4099 - C38291 * C4105 + C38297 * C4100 -
              C38292 * C4107) *
                 C180 +
             (C38295 * C4441 - C38291 * C4445 + C38297 * C4442 -
              C38292 * C4446) *
                 C89236) *
                C54751) *
               C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                 C180 +
             (C38291 * C352 - C38295 * C346 + C38292 * C353 - C38297 * C347) *
                 C89236) *
                C54750 +
            ((C56780 - C56781 + C56782 - C56783) * C180 +
             (C56784 - C56785 + C56786 - C56787) * C89236) *
                C54751) *
               C1719 +
           (((C56781 - C56780 + C56783 - C56782) * C180 +
             (C56785 - C56784 + C56787 - C56786) * C89236) *
                C54750 +
            ((C56788 - C56789 + C56790 - C56791) * C180 +
             (C56792 - C56793 + C56794 - C56795) * C89236) *
                C54751) *
               C1720 +
           (((C56789 - C56788 + C56791 - C56790) * C180 +
             (C56793 - C56792 + C56795 - C56794) * C89236) *
                C54750 +
            ((C38291 * C10549 - C38295 * C10544 + C38292 * C10547 -
              C38297 * C10543) *
                 C180 +
             (C38291 * C10719 - C38295 * C10716 + C38292 * C10720 -
              C38297 * C10717) *
                 C89236) *
                C54751) *
               C1721) *
              C5073 +
          ((((C39387 - C39386 + C39389 - C39388) * C180 +
             (C39391 - C39390 + C39393 - C39392) * C89236) *
                C54750 +
            ((C43327 - C43328 + C43329 - C43330) * C180 +
             (C43331 - C43332 + C43333 - C43334) * C89236) *
                C54751) *
               C1719 +
           (((C43328 - C43327 + C43330 - C43329) * C180 +
             (C43332 - C43331 + C43334 - C43333) * C89236) *
                C54750 +
            ((C45931 - C45932 + C45933 - C45934) * C180 +
             (C45935 - C45936 + C45937 - C45938) * C89236) *
                C54751) *
               C1720 +
           (((C45932 - C45931 + C45934 - C45933) * C180 +
             (C45936 - C45935 + C45938 - C45937) * C89236) *
                C54750 +
            ((C38295 * C23153 - C38291 * C23156 + C38297 * C29239 -
              C38292 * C29240) *
                 C180 +
             (C38295 * C23318 - C38291 * C23320 + C38297 * C29560 -
              C38292 * C29561) *
                 C89236) *
                C54751) *
               C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eeyy[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C38291 +
            C440 * C38292) *
               C54750 +
           (C56910 + C56911) * C54751) *
              C89153 * C5720 -
          ((C59875 + C59874) * C54751 +
           (C1259 * C38292 +
            (C180 * C923 - C408 * C819 - C180 * C1135 + C89236 * C1227) *
                C38291) *
               C54750) *
              C89153 * C5721 +
          (((C180 * C926 - C408 * C820 - C180 * C1138 + C89236 * C1228) *
                C38291 +
            C1260 * C38292) *
               C54750 +
           (C33871 * C38291 + C55879 * C38292) * C54751) *
              C89153 * C5722 -
          (((C180 * C16822 - C408 * C16684 - C180 * C17038 + C89236 * C17156) *
                C38292 +
            (C180 * C16821 - C408 * C16683 - C180 * C17037 + C89236 * C17155) *
                C38291) *
               C54751 +
           ((C180 * C5788 - C408 * C5726 - C180 * C5900 + C89236 * C5956) *
                C38292 +
            (C180 * C5787 - C408 * C5727 - C180 * C5899 + C89236 * C5957) *
                C38291) *
               C54750) *
              C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) *
                 C38291 +
             C440 * C38292) *
                C54750 +
            (C56910 + C56911) * C54751) *
               C89153 * C5073 -
           ((C59875 + C59874) * C54751 +
            (C1259 * C38292 +
             (C180 * C923 - C408 * C819 - C180 * C1135 + C89236 * C1227) *
                 C38291) *
                C54750) *
               C89153 * C89189) *
              C5075 +
          (((C1259 * C38291 + C1258 * C38292) * C54750 +
            (C59876 + C59877) * C54751) *
               C89153 * C89189 -
           ((C56915 + C56914) * C54751 +
            (C441 * C38292 + C440 * C38291) * C54750) *
               C89153 * C5073) *
              C5076 +
          (((C441 * C38291 + C442 * C38292) * C54750 +
            (C58795 + C58796) * C54751) *
               C89153 * C5073 -
           (((C180 * C4214 - C408 * C4100 - C180 * C4442 + C89236 * C4548) *
                 C38292 +
             C4563 * C38291) *
                C54751 +
            (C2955 * C38292 + C1258 * C38291) * C54750) *
               C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) *
                 C38291 +
             C440 * C38292) *
                C54750 +
            (C56910 + C56911) * C54751) *
               C1719 -
           ((C56912 + C56913) * C54751 + (C56911 + C56910) * C54750) * C1720 +
           ((C56913 + C56912) * C54750 +
            (C27446 * C38291 + C27447 * C38292) * C54751) *
               C1721) *
              C5073 +
          (((C59874 + C59875) * C54750 + (C62384 + C62385) * C54751) * C1720 -
           ((C59875 + C59874) * C54751 +
            (C1259 * C38292 +
             (C180 * C923 - C408 * C819 - C180 * C1135 + C89236 * C1227) *
                 C38291) *
                C54750) *
               C1719 -
           (((C180 * C29348 - C408 * C29239 - C180 * C29560 + C89236 * C29664) *
                 C38292 +
             C31624 * C38291) *
                C54751 +
            (C62385 + C62384) * C54750) *
               C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eeyz[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                C180 +
            (C54750 * C493 - C54884 * C346 + C54751 * C2240 - C54885 * C2040) *
                C89236) *
               C38291 +
           ((C54887 - C54888 + C54889 - C54890) * C180 +
            (C55109 - C55110 + C55111 - C55112) * C89236) *
               C38292) *
              C89153 * C5720 +
          (((C54884 * C819 - C54750 * C1029 + C54885 * C4097 - C54751 * C4325) *
                C180 +
            (C54884 * C1135 - C54750 * C1335 + C54885 * C4439 -
             C54751 * C4661) *
                C89236) *
               C38291 +
           ((C55661 - C55662 + C55663 - C55664) * C180 +
            (C55978 - C55979 + C55980 - C55981) * C89236) *
               C38292) *
              C89153 * C5721 +
          (((C54750 * C1032 - C54884 * C820 + C54751 * C8680 - C54885 * C8516) *
                C180 +
            (C54750 * C1338 - C54884 * C1138 + C54751 * C8917 -
             C54885 * C8760) *
                C89236) *
               C38291 +
           ((C55669 - C55670 + C55671 - C55672) * C180 +
            (C55982 - C55983 + C55984 - C55985) * C89236) *
               C38292) *
              C89153 * C5722 +
          (((C54884 * C5727 - C54750 * C5843 + C54885 * C16683 -
             C54751 * C16923) *
                C180 +
            (C54884 * C5899 - C54750 * C6008 + C54885 * C17037 -
             C54751 * C17255) *
                C89236) *
               C38291 +
           ((C54884 * C5726 - C54750 * C5844 + C54885 * C16684 -
             C54751 * C16924) *
                C180 +
            (C54884 * C5900 - C54750 * C6009 + C54885 * C17038 -
             C54751 * C17256) *
                C89236) *
               C38292) *
              C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                 C180 +
             (C54750 * C493 - C54884 * C346 + C54751 * C2240 - C54885 * C2040) *
                 C89236) *
                C38291 +
            ((C54887 - C54888 + C54889 - C54890) * C180 +
             (C55109 - C55110 + C55111 - C55112) * C89236) *
                C38292) *
               C89153 * C5073 +
           (((C54884 * C819 - C54750 * C1029 + C54885 * C4097 -
              C54751 * C4325) *
                 C180 +
             (C54884 * C1135 - C54750 * C1335 + C54885 * C4439 -
              C54751 * C4661) *
                 C89236) *
                C38291 +
            ((C55661 - C55662 + C55663 - C55664) * C180 +
             (C55978 - C55979 + C55980 - C55981) * C89236) *
                C38292) *
               C89153 * C89189) *
              C5075 +
          ((((C54888 - C54887 + C54890 - C54889) * C180 +
             (C55110 - C55109 + C55112 - C55111) * C89236) *
                C38291 +
            ((C54895 - C54896 + C54897 - C54898) * C180 +
             (C55113 - C55114 + C55115 - C55116) * C89236) *
                C38292) *
               C89153 * C5073 +
           (((C55662 - C55661 + C55664 - C55663) * C180 +
             (C55979 - C55978 + C55981 - C55980) * C89236) *
                C38291 +
            ((C57659 - C57660 + C57661 - C57662) * C180 +
             (C57961 - C57962 + C57963 - C57964) * C89236) *
                C38292) *
               C89153 * C89189) *
              C5076 +
          ((((C54896 - C54895 + C54898 - C54897) * C180 +
             (C55114 - C55113 + C55116 - C55115) * C89236) *
                C38291 +
            ((C54903 - C54904 + C54905 - C54906) * C180 +
             (C55117 - C55118 + C55119 - C55120) * C89236) *
                C38292) *
               C89153 * C5073 +
           (((C57660 - C57659 + C57662 - C57661) * C180 +
             (C57962 - C57961 + C57964 - C57963) * C89236) *
                C38291 +
            ((C54884 * C823 - C54750 * C1035 + C54885 * C4100 -
              C54751 * C4328) *
                 C180 +
             (C54884 * C1141 - C54750 * C1341 + C54885 * C4442 -
              C54751 * C4664) *
                 C89236) *
                C38292) *
               C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                 C180 +
             (C54750 * C493 - C54884 * C346 + C54751 * C2240 - C54885 * C2040) *
                 C89236) *
                C38291 +
            ((C54887 - C54888 + C54889 - C54890) * C180 +
             (C55109 - C55110 + C55111 - C55112) * C89236) *
                C38292) *
               C1719 +
           (((C54884 * C1724 - C54750 * C1934 + C54885 * C1725 -
              C54751 * C1937) *
                 C180 +
             (C54884 * C2040 - C54750 * C2240 + C54885 * C2043 -
              C54751 * C2243) *
                 C89236) *
                C38291 +
            ((C56666 - C56667 + C56668 - C56669) * C180 +
             (C57016 - C57017 + C57018 - C57019) * C89236) *
                C38292) *
               C1720 +
           (((C54750 * C1937 - C54884 * C1725 + C54751 * C10660 -
              C54885 * C10544) *
                 C180 +
             (C54750 * C2243 - C54884 * C2043 + C54751 * C10825 -
              C54885 * C10716) *
                 C89236) *
                C38291 +
            ((C56674 - C56675 + C56676 - C56677) * C180 +
             (C57020 - C57021 + C57022 - C57023) * C89236) *
                C38292) *
               C1721) *
              C5073 +
          ((((C54884 * C819 - C54750 * C1029 + C54885 * C4097 -
              C54751 * C4325) *
                 C180 +
             (C54884 * C1135 - C54750 * C1335 + C54885 * C4439 -
              C54751 * C4661) *
                 C89236) *
                C38291 +
            ((C55661 - C55662 + C55663 - C55664) * C180 +
             (C55978 - C55979 + C55980 - C55981) * C89236) *
                C38292) *
               C1719 +
           (((C54750 * C4325 - C54884 * C4097 + C54751 * C6413 -
              C54885 * C6249) *
                 C180 +
             (C54750 * C4661 - C54884 * C4439 + C54751 * C6650 -
              C54885 * C6493) *
                 C89236) *
                C38291 +
            ((C59606 - C59607 + C59608 - C59609) * C180 +
             (C60008 - C60009 + C60010 - C60011) * C89236) *
                C38292) *
               C1720 +
           (((C54884 * C6249 - C54750 * C6413 + C54885 * C23153 -
              C54751 * C23264) *
                 C180 +
             (C54884 * C6493 - C54750 * C6650 + C54885 * C23318 -
              C54751 * C23424) *
                 C89236) *
                C38291 +
            ((C54884 * C6248 - C54750 * C6414 + C54885 * C29239 -
              C54751 * C29460) *
                 C180 +
             (C54884 * C6494 - C54750 * C6651 + C54885 * C29560 -
              C54751 * C29788) *
                 C89236) *
                C38292) *
               C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eezx[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
               C54884 +
           (C38291 * C571 - C38295 * C565 + C38292 * C572 - C38297 * C566) *
               C54750 +
           (C56780 - C56781 + C56782 - C56783) * C54885 +
           (C57122 - C57123 + C57124 - C57125) * C54751) *
              C89236 * C89153 * C5720 +
          ((C39387 - C39386 + C39389 - C39388) * C54884 +
           (C39744 - C39743 + C39746 - C39745) * C54750 +
           (C43327 - C43328 + C43329 - C43330) * C54885 +
           (C43749 - C43750 + C43751 - C43752) * C54751) *
              C89236 * C89153 * C5721 +
          ((C39395 - C39394 + C39397 - C39396) * C54884 +
           (C39748 - C39747 + C39750 - C39749) * C54750 +
           (C48891 - C48892 + C48893 - C48894) * C54885 +
           (C49193 - C49194 + C49195 - C49196) * C54751) *
              C89236 * C89153 * C5722 +
          ((C45184 - C45183 + C45186 - C45185) * C54884 +
           (C45390 - C45389 + C45392 - C45391) * C54750 +
           (C38295 * C16683 - C38291 * C16685 + C38297 * C16684 -
            C38292 * C16687) *
               C54885 +
           (C38295 * C17361 - C38291 * C17363 + C38297 * C17362 -
            C38292 * C17364) *
               C54751) *
              C89236 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                C54884 +
            (C38291 * C571 - C38295 * C565 + C38292 * C572 - C38297 * C566) *
                C54750 +
            (C56780 - C56781 + C56782 - C56783) * C54885 +
            (C57122 - C57123 + C57124 - C57125) * C54751) *
               C89236 * C89153 * C5073 +
           ((C39387 - C39386 + C39389 - C39388) * C54884 +
            (C39744 - C39743 + C39746 - C39745) * C54750 +
            (C43327 - C43328 + C43329 - C43330) * C54885 +
            (C43749 - C43750 + C43751 - C43752) * C54751) *
               C89236 * C89153 * C89189) *
              C5075 +
          (((C38295 * C107 - C38291 * C114 + C38297 * C108 - C38292 * C116) *
                C54884 +
            (C38295 * C566 - C38291 * C572 + C38297 * C567 - C38292 * C573) *
                C54750 +
            (C56796 - C56797 + C56798 - C56799) * C54885 +
            (C57130 - C57131 + C57132 - C57133) * C54751) *
               C89236 * C89153 * C5073 +
           ((C39403 - C39402 + C39405 - C39404) * C54884 +
            (C39752 - C39751 + C39754 - C39753) * C54750 +
            (C43335 - C43336 + C43337 - C43338) * C54885 +
            (C43753 - C43754 + C43755 - C43756) * C54751) *
               C89236 * C89153 * C89189) *
              C5076 +
          (((C38291 * C116 - C38295 * C108 + C38292 * C118 - C38297 * C109) *
                C54884 +
            (C38291 * C573 - C38295 * C567 + C38292 * C574 - C38297 * C568) *
                C54750 +
            (C58689 - C58690 + C58691 - C58692) * C54885 +
            (C58997 - C58998 + C58999 - C59000) * C54751) *
               C89236 * C89153 * C5073 +
           ((C41335 - C41334 + C41337 - C41336) * C54884 +
            (C41652 - C41651 + C41654 - C41653) * C54750 +
            (C38295 * C4099 - C38291 * C4105 + C38297 * C4100 -
             C38292 * C4107) *
                C54885 +
            (C38295 * C4769 - C38291 * C4773 + C38297 * C4770 -
             C38292 * C4774) *
                C54751) *
               C89236 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                C54884 +
            (C38291 * C571 - C38295 * C565 + C38292 * C572 - C38297 * C566) *
                C54750 +
            (C56780 - C56781 + C56782 - C56783) * C54885 +
            (C57122 - C57123 + C57124 - C57125) * C54751) *
               C89236 * C1719 +
           ((C56781 - C56780 + C56783 - C56782) * C54884 +
            (C57123 - C57122 + C57125 - C57124) * C54750 +
            (C56788 - C56789 + C56790 - C56791) * C54885 +
            (C57126 - C57127 + C57128 - C57129) * C54751) *
               C89236 * C1720 +
           ((C56789 - C56788 + C56791 - C56790) * C54884 +
            (C57127 - C57126 + C57129 - C57128) * C54750 +
            (C38291 * C10549 - C38295 * C10544 + C38292 * C10547 -
             C38297 * C10543) *
                C54885 +
            (C38291 * C10881 - C38295 * C10878 + C38292 * C10882 -
             C38297 * C10879) *
                C54751) *
               C89236 * C1721) *
              C5073 +
          (((C39387 - C39386 + C39389 - C39388) * C54884 +
            (C39744 - C39743 + C39746 - C39745) * C54750 +
            (C43327 - C43328 + C43329 - C43330) * C54885 +
            (C43749 - C43750 + C43751 - C43752) * C54751) *
               C89236 * C1719 +
           ((C43328 - C43327 + C43330 - C43329) * C54884 +
            (C43750 - C43749 + C43752 - C43751) * C54750 +
            (C45931 - C45932 + C45933 - C45934) * C54885 +
            (C46233 - C46234 + C46235 - C46236) * C54751) *
               C89236 * C1720 +
           ((C45932 - C45931 + C45934 - C45933) * C54884 +
            (C46234 - C46233 + C46236 - C46235) * C54750 +
            (C38295 * C23153 - C38291 * C23156 + C38297 * C29239 -
             C38292 * C29240) *
                C54885 +
            (C38295 * C23476 - C38291 * C23478 + C38297 * C29887 -
             C38292 * C29888) *
                C54751) *
               C89236 * C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eezy[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89236 * C181 - C180 * C106) * C54884 +
            (C89236 * C627 - C180 * C565) * C54750 +
            (C27126 - C27127) * C54885 + (C27696 - C27697) * C54751) *
               C38291 +
           ((C194 - C195) * C54884 + (C634 - C635) * C54750 + C56562 * C54885 +
            C57236 * C54751) *
               C38292) *
              C89153 * C5720 +
          (((C180 * C819 - C89236 * C923) * C54884 +
            (C180 * C1425 - C89236 * C1515) * C54750 +
            (C29351 - C29352) * C54885 + (C29991 - C29992) * C54751) *
               C38291 +
           ((C940 - C941) * C54884 + (C1524 - C1525) * C54750 +
            C59472 * C54885 + C60272 * C54751) *
               C38292) *
              C89153 * C5721 +
          (((C89236 * C926 - C180 * C820) * C54884 +
            (C89236 * C1518 - C180 * C1428) * C54750 +
            (C33629 - C33630) * C54885 + (C34097 - C34098) * C54751) *
               C38291 +
           ((C948 - C949) * C54884 + (C1528 - C1529) * C54750 +
            (C55559 - C55560) * C54885 + (C56182 - C56183) * C54751) *
               C38292) *
              C89153 * C5722 +
          (((C180 * C5727 - C89236 * C5787) * C54884 +
            (C180 * C6061 - C89236 * C6117) * C54750 +
            (C180 * C16683 - C89236 * C16821) * C54885 +
            (C180 * C17361 - C89236 * C17471) * C54751) *
               C38291 +
           ((C180 * C5726 - C89236 * C5788) * C54884 +
            (C180 * C6062 - C89236 * C6118) * C54750 +
            (C180 * C16684 - C89236 * C16822) * C54885 +
            (C180 * C17362 - C89236 * C17472) * C54751) *
               C38292) *
              C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C54884 +
             (C89236 * C627 - C180 * C565) * C54750 +
             (C27126 - C27127) * C54885 + (C27696 - C27697) * C54751) *
                C38291 +
            ((C194 - C195) * C54884 + (C634 - C635) * C54750 + C56562 * C54885 +
             C57236 * C54751) *
                C38292) *
               C89153 * C5073 +
           (((C180 * C819 - C89236 * C923) * C54884 +
             (C180 * C1425 - C89236 * C1515) * C54750 +
             (C29351 - C29352) * C54885 + (C29991 - C29992) * C54751) *
                C38291 +
            ((C940 - C941) * C54884 + (C1524 - C1525) * C54750 +
             C59472 * C54885 + C60272 * C54751) *
                C38292) *
               C89153 * C89189) *
              C5075 +
          ((((C195 - C194) * C54884 + (C635 - C634) * C54750 + C56564 * C54885 +
             C57237 * C54751) *
                C38291 +
            ((C199 - C198) * C54884 + (C638 - C637) * C54750 + C3433 * C54885 +
             C3912 * C54751) *
                C38292) *
               C89153 * C5073 +
           (((C941 - C940) * C54884 + (C1525 - C1524) * C54750 +
             C59474 * C54885 + C60273 * C54751) *
                C38291 +
            ((C945 - C944) * C54884 + (C1527 - C1526) * C54750 +
             (C4224 - C4225) * C54885 + (C4880 - C4881) * C54751) *
                C38292) *
               C89153 * C89189) *
              C5076 +
          (((C210 * C54884 + C644 * C54750 + C58483 * C54885 +
             C59099 * C54751) *
                C38291 +
            ((C203 - C202) * C54884 + (C641 - C640) * C54750 +
             (C3435 - C3436) * C54885 + (C3913 - C3914) * C54751) *
                C38292) *
               C89153 * C5073 +
           ((C2710 * C54884 + C3189 * C54750 + (C4225 - C4224) * C54885 +
             (C4881 - C4880) * C54751) *
                C38291 +
            ((C2713 - C2712) * C54884 + (C3191 - C3190) * C54750 +
             (C180 * C4100 - C89236 * C4214) * C54885 +
             (C180 * C4770 - C89236 * C4876) * C54751) *
                C38292) *
               C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C54884 +
             (C89236 * C627 - C180 * C565) * C54750 +
             (C27126 - C27127) * C54885 + (C27696 - C27697) * C54751) *
                C38291 +
            ((C194 - C195) * C54884 + (C634 - C635) * C54750 + C56562 * C54885 +
             C57236 * C54751) *
                C38292) *
               C1719 +
           (((C27127 - C27126) * C54884 + (C27697 - C27696) * C54750 +
             (C27131 - C27130) * C54885 + (C27699 - C27698) * C54751) *
                C38291 +
            (C56564 * C54884 + C57237 * C54750 + C27138 * C54885 +
             C27702 * C54751) *
                C38292) *
               C1720 +
           ((C27144 * C54884 + C27705 * C54750 + (C27135 - C27134) * C54885 +
             (C27701 - C27700) * C54751) *
                C38291 +
            (C56566 * C54884 + C57238 * C54750 + (C27140 - C27141) * C54885 +
             (C27703 - C27704) * C54751) *
                C38292) *
               C1721) *
              C5073 +
          ((((C180 * C819 - C89236 * C923) * C54884 +
             (C180 * C1425 - C89236 * C1515) * C54750 +
             (C29351 - C29352) * C54885 + (C29991 - C29992) * C54751) *
                C38291 +
            ((C940 - C941) * C54884 + (C1524 - C1525) * C54750 +
             C59472 * C54885 + C60272 * C54751) *
                C38292) *
               C1719 +
           (((C29352 - C29351) * C54884 + (C29992 - C29991) * C54750 +
             (C29356 - C29355) * C54885 + (C29994 - C29993) * C54751) *
                C38291 +
            (C59474 * C54884 + C60273 * C54750 + (C29359 - C29360) * C54885 +
             (C29995 - C29996) * C54751) *
                C38292) *
               C1720 +
           ((C31373 * C54884 + C31855 * C54750 + (C31376 - C31375) * C54885 +
             (C31857 - C31856) * C54751) *
                C38291 +
            ((C29360 - C29359) * C54884 + (C29996 - C29995) * C54750 +
             (C180 * C29239 - C89236 * C29348) * C54885 +
             (C180 * C29887 - C89236 * C29989) * C54751) *
                C38292) *
               C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eezz[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C54884 * C264 - C55318 * C106 - C54884 * C565 + C54750 * C700 +
            C54885 * C1934 - C55319 * C1724 - C54885 * C2330 + C54751 * C2512) *
               C89236 * C38291 +
           (C55357 + C55358) * C89236 * C38292) *
              C89153 * C5720 -
          ((C56306 + C56307) * C89236 * C38292 +
           (C54885 * C4325 - C55319 * C4097 - C54885 * C4767 + C54751 * C4979 +
            C54884 * C1029 - C55318 * C819 - C54884 * C1425 + C54750 * C1607) *
               C89236 * C38291) *
              C89153 * C5721 +
          ((C54884 * C1032 - C55318 * C820 - C54884 * C1428 + C54750 * C1608 +
            C54885 * C8680 - C55319 * C8516 - C54885 * C8994 + C54751 * C9153) *
               C89236 * C38291 +
           (C56308 + C56309) * C89236 * C38292) *
              C89153 * C5722 -
          ((C54885 * C16924 - C55319 * C16684 - C54885 * C17362 +
            C54751 * C17572 + C54884 * C5844 - C55318 * C5726 - C54884 * C6062 +
            C54750 * C6171) *
               C89236 * C38292 +
           (C54885 * C16923 - C55319 * C16683 - C54885 * C17361 +
            C54751 * C17571 + C54884 * C5843 - C55318 * C5727 - C54884 * C6061 +
            C54750 * C6172) *
               C89236 * C38291) *
              C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C54884 * C264 - C55318 * C106 - C54884 * C565 + C54750 * C700 +
             C54885 * C1934 - C55319 * C1724 - C54885 * C2330 +
             C54751 * C2512) *
                C89236 * C38291 +
            (C55357 + C55358) * C89236 * C38292) *
               C89153 * C5073 -
           ((C56306 + C56307) * C89236 * C38292 +
            (C54885 * C4325 - C55319 * C4097 - C54885 * C4767 + C54751 * C4979 +
             C54884 * C1029 - C55318 * C819 - C54884 * C1425 + C54750 * C1607) *
                C89236 * C38291) *
               C89153 * C89189) *
              C5075 +
          (((C56307 + C56306) * C89236 * C38291 +
            (C58271 + C58272) * C89236 * C38292) *
               C89153 * C89189 -
           ((C55359 + C55360) * C89236 * C38292 +
            (C55358 + C55357) * C89236 * C38291) *
               C89153 * C5073) *
              C5076 +
          (((C55360 + C55359) * C89236 * C38291 +
            (C55361 + C55362) * C89236 * C38292) *
               C89153 * C5073 -
           ((C54885 * C4328 - C55319 * C4100 - C54885 * C4770 + C54751 * C4982 +
             C54884 * C1035 - C55318 * C823 - C54884 * C1431 + C54750 * C1611) *
                C89236 * C38292 +
            (C58272 + C58271) * C89236 * C38291) *
               C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C54884 * C264 - C55318 * C106 - C54884 * C565 + C54750 * C700 +
             C54885 * C1934 - C55319 * C1724 - C54885 * C2330 +
             C54751 * C2512) *
                C89236 * C38291 +
            (C55357 + C55358) * C89236 * C38292) *
               C1719 -
           ((C57361 + C57362) * C89236 * C38292 +
            (C54885 * C1937 - C55319 * C1725 - C54885 * C2333 + C54751 * C2513 +
             C54884 * C1934 - C55318 * C1724 - C54884 * C2330 +
             C54750 * C2512) *
                C89236 * C38291) *
               C1720 +
           ((C54884 * C1937 - C55318 * C1725 - C54884 * C2333 + C54750 * C2513 +
             C54885 * C10660 - C55319 * C10544 - C54885 * C10878 +
             C54751 * C10989) *
                C89236 * C38291 +
            (C57363 + C57364) * C89236 * C38292) *
               C1721) *
              C5073 +
          (((C54884 * C4325 - C55318 * C4097 - C54884 * C4767 + C54750 * C4979 +
             C54885 * C6413 - C55319 * C6249 - C54885 * C6727 +
             C54751 * C6886) *
                C89236 * C38291 +
            (C60416 + C60417) * C89236 * C38292) *
               C1720 -
           ((C56306 + C56307) * C89236 * C38292 +
            (C54885 * C4325 - C55319 * C4097 - C54885 * C4767 + C54751 * C4979 +
             C54884 * C1029 - C55318 * C819 - C54884 * C1425 + C54750 * C1607) *
                C89236 * C38291) *
               C1719 -
           ((C54885 * C29460 - C55319 * C29239 - C54885 * C29887 +
             C54751 * C30094 + C54884 * C6414 - C55318 * C6248 -
             C54884 * C6728 + C54750 * C6885) *
                C89236 * C38292 +
            (C54885 * C23264 - C55319 * C23153 - C54885 * C23476 +
             C54751 * C23583 + C54884 * C6413 - C55318 * C6249 -
             C54884 * C6727 + C54750 * C6886) *
                C89236 * C38291) *
               C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eexx[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C38295 * C112 - C38296 * C106 - C38295 * C113 + C38291 * C124 +
              C38297 * C114 - C38298 * C107 - C38297 * C115 + C38292 * C125) *
                 C54750 +
             (C56456 + C56457) * C54751) *
                C89236 * C89308 -
            ((C56458 + C56459) * C54751 + (C56457 + C56456) * C54750) * C89236 *
                C89217) *
               C5073 +
           (((C42922 + C42921) * C54750 + (C45635 + C45636) * C54751) * C89236 *
                C89217 -
            ((C42921 + C42922) * C54751 + (C39063 + C39062) * C54750) * C89236 *
                C89308) *
               C89189) *
              C89299 +
          ((((C56460 + C56461) * C54750 + (C56462 + C56463) * C54751) * C89236 *
                C89217 -
            ((C56461 + C56460) * C54751 +
             (C38297 * C116 - C38298 * C108 - C38297 * C117 + C38292 * C126 +
              C38295 * C114 - C38296 * C107 - C38295 * C115 + C38291 * C125) *
                 C54750) *
                C89236 * C89308) *
               C5073 +
           (((C39066 + C39067) * C54750 + (C42923 + C42924) * C54751) * C89236 *
                C89308 -
            ((C38297 * C6250 - C38298 * C6247 - C38297 * C6251 +
              C38292 * C6256 + C38295 * C6252 - C38296 * C6248 -
              C38295 * C6253 + C38291 * C6257) *
                 C54751 +
             (C42924 + C42923) * C54750) *
                C89236 * C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eexy[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C89236 * C181 - C180 * C106) * C38295 +
              (C89236 * C187 - C180 * C113) * C38291 + (C194 - C195) * C38297 +
              (C196 - C197) * C38292) *
                 C54750 +
             ((C27126 - C27127) * C38295 + (C27128 - C27129) * C38291 +
              C56562 * C38297 + C56563 * C38292) *
                 C54751) *
                C89308 +
            (((C27127 - C27126) * C38295 + (C27129 - C27128) * C38291 +
              C56564 * C38297 + C56565 * C38292) *
                 C54750 +
             ((C27131 - C27130) * C38295 + (C27133 - C27132) * C38291 +
              C27138 * C38297 + C27139 * C38292) *
                 C54751) *
                C89217) *
               C5073 +
           ((((C180 * C819 - C89236 * C923) * C38295 +
              (C180 * C830 - C89236 * C931) * C38291 + (C940 - C941) * C38297 +
              (C942 - C943) * C38292) *
                 C54750 +
             ((C29351 - C29352) * C38295 + (C29353 - C29354) * C38291 +
              C59472 * C38297 + C59473 * C38292) *
                 C54751) *
                C89308 +
            (((C29352 - C29351) * C38295 + (C29354 - C29353) * C38291 +
              C59474 * C38297 + C59475 * C38292) *
                 C54750 +
             ((C29356 - C29355) * C38295 + (C29358 - C29357) * C38291 +
              (C29359 - C29360) * C38297 + (C29361 - C29362) * C38292) *
                 C54751) *
                C89217) *
               C89189) *
              C89299 +
          (((((C195 - C194) * C38295 + (C197 - C196) * C38291 +
              (C199 - C198) * C38297 + (C201 - C200) * C38292) *
                 C54750 +
             (C56564 * C38295 + C56565 * C38291 + C3433 * C38297 +
              C3434 * C38292) *
                 C54751) *
                C89308 +
            ((C56562 * C38295 + C56563 * C38291 + C58483 * C38297 +
              C58484 * C38292) *
                 C54750 +
             (C56566 * C38295 + C56567 * C38291 + (C1857 - C1858) * C38297 +
              (C1859 - C1860) * C38292) *
                 C54751) *
                C89217) *
               C5073 +
           ((((C941 - C940) * C38295 + (C943 - C942) * C38291 +
              (C945 - C944) * C38297 + (C947 - C946) * C38292) *
                 C54750 +
             (C59474 * C38295 + C59475 * C38291 + (C4224 - C4225) * C38297 +
              (C4226 - C4227) * C38292) *
                 C54751) *
                C89308 +
            ((C59472 * C38295 + C59473 * C38291 + (C4225 - C4224) * C38297 +
              (C4227 - C4226) * C38292) *
                 C54750 +
             ((C29360 - C29359) * C38295 + (C29362 - C29361) * C38291 +
              (C180 * C6247 - C89236 * C6335) * C38297 +
              (C180 * C6251 - C89236 * C6338) * C38292) *
                 C54751) *
                C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eexz[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                 C38295 +
             (C54750 * C270 - C54884 * C113 + C54751 * C1942 - C54885 * C1735) *
                 C38291 +
             (C54887 - C54888 + C54889 - C54890) * C38297 +
             (C54891 - C54892 + C54893 - C54894) * C38292) *
                C89236 * C89308 +
            ((C54884 * C1724 - C54750 * C1934 + C54885 * C1725 -
              C54751 * C1937) *
                 C38295 +
             (C54884 * C1735 - C54750 * C1942 + C54885 * C1737 -
              C54751 * C1945) *
                 C38291 +
             (C56666 - C56667 + C56668 - C56669) * C38297 +
             (C56670 - C56671 + C56672 - C56673) * C38292) *
                C89236 * C89217) *
               C5073 +
           (((C54884 * C819 - C54750 * C1029 + C54885 * C4097 -
              C54751 * C4325) *
                 C38295 +
             (C54884 * C830 - C54750 * C1037 + C54885 * C4102 -
              C54751 * C4329) *
                 C38291 +
             (C55661 - C55662 + C55663 - C55664) * C38297 +
             (C55665 - C55666 + C55667 - C55668) * C38292) *
                C89236 * C89308 +
            ((C54750 * C4325 - C54884 * C4097 + C54751 * C6413 -
              C54885 * C6249) *
                 C38295 +
             (C54750 * C4329 - C54884 * C4102 + C54751 * C6416 -
              C54885 * C6255) *
                 C38291 +
             (C59606 - C59607 + C59608 - C59609) * C38297 +
             (C59610 - C59611 + C59612 - C59613) * C38292) *
                C89236 * C89217) *
               C89189) *
              C89299 +
          ((((C54888 - C54887 + C54890 - C54889) * C38295 +
             (C54892 - C54891 + C54894 - C54893) * C38291 +
             (C54895 - C54896 + C54897 - C54898) * C38297 +
             (C54899 - C54900 + C54901 - C54902) * C38292) *
                C89236 * C89308 +
            ((C56667 - C56666 + C56669 - C56668) * C38295 +
             (C56671 - C56670 + C56673 - C56672) * C38291 +
             (C58583 - C58584 + C58585 - C58586) * C38297 +
             (C58587 - C58588 + C58589 - C58590) * C38292) *
                C89236 * C89217) *
               C5073 +
           (((C55662 - C55661 + C55664 - C55663) * C38295 +
             (C55666 - C55665 + C55668 - C55667) * C38291 +
             (C57659 - C57660 + C57661 - C57662) * C38297 +
             (C57663 - C57664 + C57665 - C57666) * C38292) *
                C89236 * C89308 +
            ((C59607 - C59606 + C59609 - C59608) * C38295 +
             (C59611 - C59610 + C59613 - C59612) * C38291 +
             (C54884 * C4099 - C54750 * C4327 + C54885 * C6247 -
              C54751 * C6415) *
                 C38297 +
             (C54884 * C4106 - C54750 * C4331 + C54885 * C6251 -
              C54751 * C6418) *
                 C38292) *
                C89236 * C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                  C180 +
              (C38291 * C352 - C38295 * C346 + C38292 * C353 - C38297 * C347) *
                  C89236) *
                 C54750 +
             ((C56780 - C56781 + C56782 - C56783) * C180 +
              (C56784 - C56785 + C56786 - C56787) * C89236) *
                 C54751) *
                C89308 +
            (((C56781 - C56780 + C56783 - C56782) * C180 +
              (C56785 - C56784 + C56787 - C56786) * C89236) *
                 C54750 +
             ((C56788 - C56789 + C56790 - C56791) * C180 +
              (C56792 - C56793 + C56794 - C56795) * C89236) *
                 C54751) *
                C89217) *
               C5073 +
           ((((C39387 - C39386 + C39389 - C39388) * C180 +
              (C39391 - C39390 + C39393 - C39392) * C89236) *
                 C54750 +
             ((C43327 - C43328 + C43329 - C43330) * C180 +
              (C43331 - C43332 + C43333 - C43334) * C89236) *
                 C54751) *
                C89308 +
            (((C43328 - C43327 + C43330 - C43329) * C180 +
              (C43332 - C43331 + C43334 - C43333) * C89236) *
                 C54750 +
             ((C45931 - C45932 + C45933 - C45934) * C180 +
              (C45935 - C45936 + C45937 - C45938) * C89236) *
                 C54751) *
                C89217) *
               C89189) *
              C89299 +
          (((((C38295 * C107 - C38291 * C114 + C38297 * C108 - C38292 * C116) *
                  C180 +
              (C38295 * C347 - C38291 * C353 + C38297 * C348 - C38292 * C354) *
                  C89236) *
                 C54750 +
             ((C56796 - C56797 + C56798 - C56799) * C180 +
              (C56800 - C56801 + C56802 - C56803) * C89236) *
                 C54751) *
                C89308 +
            (((C56797 - C56796 + C56799 - C56798) * C180 +
              (C56801 - C56800 + C56803 - C56802) * C89236) *
                 C54750 +
             ((C56804 - C56805 + C56806 - C56807) * C180 +
              (C56808 - C56809 + C56810 - C56811) * C89236) *
                 C54751) *
                C89217) *
               C5073 +
           ((((C39403 - C39402 + C39405 - C39404) * C180 +
              (C39407 - C39406 + C39409 - C39408) * C89236) *
                 C54750 +
             ((C43335 - C43336 + C43337 - C43338) * C180 +
              (C43339 - C43340 + C43341 - C43342) * C89236) *
                 C54751) *
                C89308 +
            (((C43336 - C43335 + C43338 - C43337) * C180 +
              (C43340 - C43339 + C43342 - C43341) * C89236) *
                 C54750 +
             ((C38295 * C6248 - C38291 * C6252 + C38297 * C6247 -
               C38292 * C6250) *
                  C180 +
              (C38295 * C6494 - C38291 * C6497 + C38297 * C6495 -
               C38292 * C6498) *
                  C89236) *
                 C54751) *
                C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) *
                  C38291 +
              C440 * C38292) *
                 C54750 +
             (C56910 + C56911) * C54751) *
                C89308 -
            ((C56912 + C56913) * C54751 + (C56911 + C56910) * C54750) *
                C89217) *
               C5073 +
           (((C59874 + C59875) * C54750 + (C62384 + C62385) * C54751) * C89217 -
            ((C59875 + C59874) * C54751 +
             (C1259 * C38292 +
              (C180 * C923 - C408 * C819 - C180 * C1135 + C89236 * C1227) *
                  C38291) *
                 C54750) *
                C89308) *
               C89189) *
              C89299 +
          ((((C56914 + C56915) * C54750 + (C56916 + C56917) * C54751) * C89217 -
            ((C56915 + C56914) * C54751 +
             (C441 * C38292 + C440 * C38291) * C54750) *
                C89308) *
               C5073 +
           (((C1259 * C38291 + C1258 * C38292) * C54750 +
             (C59876 + C59877) * C54751) *
                C89308 -
            (((C180 * C6335 - C408 * C6247 - C180 * C6495 + C89236 * C6573) *
                  C38292 +
              C29687 * C38291) *
                 C54751 +
             (C59877 + C59876) * C54750) *
                C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[53] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((((C54750 * C264 - C54884 * C106 + C54751 * C1934 -
                         C54885 * C1724) *
                            C180 +
                        (C54750 * C493 - C54884 * C346 + C54751 * C2240 -
                         C54885 * C2040) *
                            C89236) *
                           C38291 +
                       ((C54887 - C54888 + C54889 - C54890) * C180 +
                        (C55109 - C55110 + C55111 - C55112) * C89236) *
                           C38292) *
                          C89308 +
                      (((C54884 * C1724 - C54750 * C1934 + C54885 * C1725 -
                         C54751 * C1937) *
                            C180 +
                        (C54884 * C2040 - C54750 * C2240 + C54885 * C2043 -
                         C54751 * C2243) *
                            C89236) *
                           C38291 +
                       ((C56666 - C56667 + C56668 - C56669) * C180 +
                        (C57016 - C57017 + C57018 - C57019) * C89236) *
                           C38292) *
                          C89217) *
                         C5073 +
                     ((((C54884 * C819 - C54750 * C1029 + C54885 * C4097 -
                         C54751 * C4325) *
                            C180 +
                        (C54884 * C1135 - C54750 * C1335 + C54885 * C4439 -
                         C54751 * C4661) *
                            C89236) *
                           C38291 +
                       ((C55661 - C55662 + C55663 - C55664) * C180 +
                        (C55978 - C55979 + C55980 - C55981) * C89236) *
                           C38292) *
                          C89308 +
                      (((C54750 * C4325 - C54884 * C4097 + C54751 * C6413 -
                         C54885 * C6249) *
                            C180 +
                        (C54750 * C4661 - C54884 * C4439 + C54751 * C6650 -
                         C54885 * C6493) *
                            C89236) *
                           C38291 +
                       ((C59606 - C59607 + C59608 - C59609) * C180 +
                        (C60008 - C60009 + C60010 - C60011) * C89236) *
                           C38292) *
                          C89217) *
                         C89189) *
                        C89299 +
                    (((((C54888 - C54887 + C54890 - C54889) * C180 +
                        (C55110 - C55109 + C55112 - C55111) * C89236) *
                           C38291 +
                       ((C54895 - C54896 + C54897 - C54898) * C180 +
                        (C55113 - C55114 + C55115 - C55116) * C89236) *
                           C38292) *
                          C89308 +
                      (((C56667 - C56666 + C56669 - C56668) * C180 +
                        (C57017 - C57016 + C57019 - C57018) * C89236) *
                           C38291 +
                       ((C58583 - C58584 + C58585 - C58586) * C180 +
                        (C58895 - C58896 + C58897 - C58898) * C89236) *
                           C38292) *
                          C89217) *
                         C5073 +
                     ((((C55662 - C55661 + C55664 - C55663) * C180 +
                        (C55979 - C55978 + C55981 - C55980) * C89236) *
                           C38291 +
                       ((C57659 - C57660 + C57661 - C57662) * C180 +
                        (C57961 - C57962 + C57963 - C57964) * C89236) *
                           C38292) *
                          C89308 +
                      (((C59607 - C59606 + C59609 - C59608) * C180 +
                        (C60009 - C60008 + C60011 - C60010) * C89236) *
                           C38291 +
                       ((C54884 * C4099 - C54750 * C4327 + C54885 * C6247 -
                         C54751 * C6415) *
                            C180 +
                        (C54884 * C4441 - C54750 * C4663 + C54885 * C6495 -
                         C54751 * C6652) *
                            C89236) *
                           C38292) *
                          C89217) *
                         C89189) *
                        C89124)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                 C54884 +
             (C38291 * C571 - C38295 * C565 + C38292 * C572 - C38297 * C566) *
                 C54750 +
             (C56780 - C56781 + C56782 - C56783) * C54885 +
             (C57122 - C57123 + C57124 - C57125) * C54751) *
                C89236 * C89308 +
            ((C56781 - C56780 + C56783 - C56782) * C54884 +
             (C57123 - C57122 + C57125 - C57124) * C54750 +
             (C56788 - C56789 + C56790 - C56791) * C54885 +
             (C57126 - C57127 + C57128 - C57129) * C54751) *
                C89236 * C89217) *
               C5073 +
           (((C39387 - C39386 + C39389 - C39388) * C54884 +
             (C39744 - C39743 + C39746 - C39745) * C54750 +
             (C43327 - C43328 + C43329 - C43330) * C54885 +
             (C43749 - C43750 + C43751 - C43752) * C54751) *
                C89236 * C89308 +
            ((C43328 - C43327 + C43330 - C43329) * C54884 +
             (C43750 - C43749 + C43752 - C43751) * C54750 +
             (C45931 - C45932 + C45933 - C45934) * C54885 +
             (C46233 - C46234 + C46235 - C46236) * C54751) *
                C89236 * C89217) *
               C89189) *
              C89299 +
          ((((C38295 * C107 - C38291 * C114 + C38297 * C108 - C38292 * C116) *
                 C54884 +
             (C38295 * C566 - C38291 * C572 + C38297 * C567 - C38292 * C573) *
                 C54750 +
             (C56796 - C56797 + C56798 - C56799) * C54885 +
             (C57130 - C57131 + C57132 - C57133) * C54751) *
                C89236 * C89308 +
            ((C56797 - C56796 + C56799 - C56798) * C54884 +
             (C57131 - C57130 + C57133 - C57132) * C54750 +
             (C56804 - C56805 + C56806 - C56807) * C54885 +
             (C57134 - C57135 + C57136 - C57137) * C54751) *
                C89236 * C89217) *
               C5073 +
           (((C39403 - C39402 + C39405 - C39404) * C54884 +
             (C39752 - C39751 + C39754 - C39753) * C54750 +
             (C43335 - C43336 + C43337 - C43338) * C54885 +
             (C43753 - C43754 + C43755 - C43756) * C54751) *
                C89236 * C89308 +
            ((C43336 - C43335 + C43338 - C43337) * C54884 +
             (C43754 - C43753 + C43756 - C43755) * C54750 +
             (C38295 * C6248 - C38291 * C6252 + C38297 * C6247 -
              C38292 * C6250) *
                 C54885 +
             (C38295 * C6728 - C38291 * C6731 + C38297 * C6729 -
              C38292 * C6732) *
                 C54751) *
                C89236 * C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eezy[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C89236 * C181 - C180 * C106) * C54884 +
              (C89236 * C627 - C180 * C565) * C54750 +
              (C27126 - C27127) * C54885 + (C27696 - C27697) * C54751) *
                 C38291 +
             ((C194 - C195) * C54884 + (C634 - C635) * C54750 +
              C56562 * C54885 + C57236 * C54751) *
                 C38292) *
                C89308 +
            (((C27127 - C27126) * C54884 + (C27697 - C27696) * C54750 +
              (C27131 - C27130) * C54885 + (C27699 - C27698) * C54751) *
                 C38291 +
             (C56564 * C54884 + C57237 * C54750 + C27138 * C54885 +
              C27702 * C54751) *
                 C38292) *
                C89217) *
               C5073 +
           ((((C180 * C819 - C89236 * C923) * C54884 +
              (C180 * C1425 - C89236 * C1515) * C54750 +
              (C29351 - C29352) * C54885 + (C29991 - C29992) * C54751) *
                 C38291 +
             ((C940 - C941) * C54884 + (C1524 - C1525) * C54750 +
              C59472 * C54885 + C60272 * C54751) *
                 C38292) *
                C89308 +
            (((C29352 - C29351) * C54884 + (C29992 - C29991) * C54750 +
              (C29356 - C29355) * C54885 + (C29994 - C29993) * C54751) *
                 C38291 +
             (C59474 * C54884 + C60273 * C54750 + (C29359 - C29360) * C54885 +
              (C29995 - C29996) * C54751) *
                 C38292) *
                C89217) *
               C89189) *
              C89299 +
          (((((C195 - C194) * C54884 + (C635 - C634) * C54750 +
              C56564 * C54885 + C57237 * C54751) *
                 C38291 +
             ((C199 - C198) * C54884 + (C638 - C637) * C54750 + C3433 * C54885 +
              C3912 * C54751) *
                 C38292) *
                C89308 +
            ((C56562 * C54884 + C57236 * C54750 + C56566 * C54885 +
              C57238 * C54751) *
                 C38291 +
             (C58483 * C54884 + C59099 * C54750 + (C1857 - C1858) * C54885 +
              (C2435 - C2436) * C54751) *
                 C38292) *
                C89217) *
               C5073 +
           ((((C941 - C940) * C54884 + (C1525 - C1524) * C54750 +
              C59474 * C54885 + C60273 * C54751) *
                 C38291 +
             ((C945 - C944) * C54884 + (C1527 - C1526) * C54750 +
              (C4224 - C4225) * C54885 + (C4880 - C4881) * C54751) *
                 C38292) *
                C89308 +
            ((C59472 * C54884 + C60272 * C54750 + (C29360 - C29359) * C54885 +
              (C29996 - C29995) * C54751) *
                 C38291 +
             ((C4225 - C4224) * C54884 + (C4881 - C4880) * C54750 +
              (C180 * C6247 - C89236 * C6335) * C54885 +
              (C180 * C6729 - C89236 * C6809) * C54751) *
                 C38292) *
                C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eezz[53] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C54884 * C264 - C55318 * C106 - C54884 * C565 +
                        C54750 * C700 + C54885 * C1934 - C55319 * C1724 -
                        C54885 * C2330 + C54751 * C2512) *
                           C89236 * C38291 +
                       (C55357 + C55358) * C89236 * C38292) *
                          C89308 -
                      ((C57361 + C57362) * C89236 * C38292 +
                       (C54885 * C1937 - C55319 * C1725 - C54885 * C2333 +
                        C54751 * C2513 + C54884 * C1934 - C55318 * C1724 -
                        C54884 * C2330 + C54750 * C2512) *
                           C89236 * C38291) *
                          C89217) *
                         C5073 +
                     (((C54884 * C4325 - C55318 * C4097 - C54884 * C4767 +
                        C54750 * C4979 + C54885 * C6413 - C55319 * C6249 -
                        C54885 * C6727 + C54751 * C6886) *
                           C89236 * C38291 +
                       (C60416 + C60417) * C89236 * C38292) *
                          C89217 -
                      ((C56306 + C56307) * C89236 * C38292 +
                       (C54885 * C4325 - C55319 * C4097 - C54885 * C4767 +
                        C54751 * C4979 + C54884 * C1029 - C55318 * C819 -
                        C54884 * C1425 + C54750 * C1607) *
                           C89236 * C38291) *
                          C89308) *
                         C89189) *
                        C89299 +
                    ((((C57362 + C57361) * C89236 * C38291 +
                       (C59210 + C59211) * C89236 * C38292) *
                          C89217 -
                      ((C55359 + C55360) * C89236 * C38292 +
                       (C55358 + C55357) * C89236 * C38291) *
                          C89308) *
                         C5073 +
                     (((C56307 + C56306) * C89236 * C38291 +
                       (C58271 + C58272) * C89236 * C38292) *
                          C89308 -
                      ((C54885 * C6415 - C55319 * C6247 - C54885 * C6729 +
                        C54751 * C6884 + C54884 * C4327 - C55318 * C4099 -
                        C54884 * C4769 + C54750 * C4981) *
                           C89236 * C38292 +
                       (C60417 + C60416) * C89236 * C38291) *
                          C89217) *
                         C89189) *
                        C89124)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C38295 * C112 - C38296 * C106 - C38295 * C113 + C38291 * C124 +
             C38297 * C114 - C38298 * C107 - C38297 * C115 + C38292 * C125) *
                C54750 +
            (C56456 + C56457) * C54751) *
               C89236 * C89153 * C5073 -
           ((C42921 + C42922) * C54751 + (C39063 + C39062) * C54750) * C89236 *
               C89153 * C89189) *
              C5075 +
          (((C39066 + C39067) * C54750 + (C42923 + C42924) * C54751) * C89236 *
               C89153 * C89189 -
           ((C56461 + C56460) * C54751 +
            (C38297 * C116 - C38298 * C108 - C38297 * C117 + C38292 * C126 +
             C38295 * C114 - C38296 * C107 - C38295 * C115 + C38291 * C125) *
                C54750) *
               C89236 * C89153 * C5073) *
              C5076 +
          (((C38295 * C116 - C38296 * C108 - C38295 * C117 + C38291 * C126 +
             C38297 * C118 - C38298 * C109 - C38297 * C119 + C38292 * C127) *
                C54750 +
            (C58383 + C58384) * C54751) *
               C89236 * C89153 * C5073 -
           ((C38297 * C4107 - C38298 * C4100 - C38297 * C4108 + C38292 * C4112 +
             C38295 * C4105 - C38296 * C4099 - C38295 * C4106 +
             C38291 * C4111) *
                C54751 +
            (C41029 + C41028) * C54750) *
               C89236 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C38295 * C112 - C38296 * C106 - C38295 * C113 + C38291 * C124 +
            C38297 * C114 - C38298 * C107 - C38297 * C115 + C38292 * C125) *
               C54750 +
           (C56456 + C56457) * C54751) *
              C89236 * C89153 * C5720 -
          ((C42921 + C42922) * C54751 + (C39063 + C39062) * C54750) * C89236 *
              C89153 * C5721 +
          ((C39065 + C39064) * C54750 + (C48595 + C48596) * C54751) * C89236 *
              C89153 * C5722 -
          ((C38297 * C16687 - C38298 * C16684 - C38297 * C16688 +
            C38292 * C16690 + C38295 * C16685 - C38296 * C16683 -
            C38295 * C16686 + C38291 * C16689) *
               C54751 +
           (C44984 + C44983) * C54750) *
              C89236 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eexy[54] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C89236 * C181 - C180 * C106) * C38295 +
                       (C89236 * C187 - C180 * C113) * C38291 +
                       (C194 - C195) * C38297 + (C196 - C197) * C38292) *
                          C54750 +
                      ((C27126 - C27127) * C38295 + (C27128 - C27129) * C38291 +
                       C56562 * C38297 + C56563 * C38292) *
                          C54751) *
                         C89153 * C5073 +
                     (((C180 * C819 - C89236 * C923) * C38295 +
                       (C180 * C830 - C89236 * C931) * C38291 +
                       (C940 - C941) * C38297 + (C942 - C943) * C38292) *
                          C54750 +
                      ((C29351 - C29352) * C38295 + (C29353 - C29354) * C38291 +
                       C59472 * C38297 + C59473 * C38292) *
                          C54751) *
                         C89153 * C89189) *
                        C5075 +
                    ((((C195 - C194) * C38295 + (C197 - C196) * C38291 +
                       (C199 - C198) * C38297 + (C201 - C200) * C38292) *
                          C54750 +
                      (C56564 * C38295 + C56565 * C38291 + C3433 * C38297 +
                       C3434 * C38292) *
                          C54751) *
                         C89153 * C5073 +
                     (((C941 - C940) * C38295 + (C943 - C942) * C38291 +
                       (C945 - C944) * C38297 + (C947 - C946) * C38292) *
                          C54750 +
                      (C59474 * C38295 + C59475 * C38291 +
                       (C4224 - C4225) * C38297 + (C4226 - C4227) * C38292) *
                          C54751) *
                         C89153 * C89189) *
                        C5076 +
                    (((C210 * C38295 + C211 * C38291 + (C203 - C202) * C38297 +
                       (C205 - C204) * C38292) *
                          C54750 +
                      (C58483 * C38295 + C58484 * C38291 +
                       (C3435 - C3436) * C38297 + (C3437 - C3438) * C38292) *
                          C54751) *
                         C89153 * C5073 +
                     ((C2710 * C38295 + C2711 * C38291 +
                       (C2713 - C2712) * C38297 + (C2715 - C2714) * C38292) *
                          C54750 +
                      ((C4225 - C4224) * C38295 + (C4227 - C4226) * C38291 +
                       (C180 * C4100 - C89236 * C4214) * C38297 +
                       (C180 * C4108 - C89236 * C4218) * C38292) *
                          C54751) *
                         C89153 * C89189) *
                        C5077)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C89236 * C181 - C180 * C106) * C38295 +
                      (C89236 * C187 - C180 * C113) * C38291 +
                      (C194 - C195) * C38297 + (C196 - C197) * C38292) *
                         C54750 +
                     ((C27126 - C27127) * C38295 + (C27128 - C27129) * C38291 +
                      C56562 * C38297 + C56563 * C38292) *
                         C54751) *
                        C89153 * C5720 +
                    (((C180 * C819 - C89236 * C923) * C38295 +
                      (C180 * C830 - C89236 * C931) * C38291 +
                      (C940 - C941) * C38297 + (C942 - C943) * C38292) *
                         C54750 +
                     ((C29351 - C29352) * C38295 + (C29353 - C29354) * C38291 +
                      C59472 * C38297 + C59473 * C38292) *
                         C54751) *
                        C89153 * C5721 +
                    (((C89236 * C926 - C180 * C820) * C38295 +
                      (C89236 * C934 - C180 * C832) * C38291 +
                      (C948 - C949) * C38297 + (C950 - C951) * C38292) *
                         C54750 +
                     ((C33629 - C33630) * C38295 + (C33631 - C33632) * C38291 +
                      (C55559 - C55560) * C38297 + (C55561 - C55562) * C38292) *
                         C54751) *
                        C89153 * C5722 +
                    (((C180 * C5727 - C89236 * C5787) * C38295 +
                      (C180 * C5733 - C89236 * C5790) * C38291 +
                      (C180 * C5726 - C89236 * C5788) * C38297 +
                      (C180 * C5731 - C89236 * C5791) * C38292) *
                         C54750 +
                     ((C180 * C16683 - C89236 * C16821) * C38295 +
                      (C180 * C16686 - C89236 * C16823) * C38291 +
                      (C180 * C16684 - C89236 * C16822) * C38297 +
                      (C180 * C16688 - C89236 * C16824) * C38292) *
                         C54751) *
                        C89153 * C5723) *
                   C89118) /
                      (p * q * std::sqrt(p + q));
    d2eexz[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                C38295 +
            (C54750 * C270 - C54884 * C113 + C54751 * C1942 - C54885 * C1735) *
                C38291 +
            (C54887 - C54888 + C54889 - C54890) * C38297 +
            (C54891 - C54892 + C54893 - C54894) * C38292) *
               C89236 * C89153 * C5073 +
           ((C54884 * C819 - C54750 * C1029 + C54885 * C4097 - C54751 * C4325) *
                C38295 +
            (C54884 * C830 - C54750 * C1037 + C54885 * C4102 - C54751 * C4329) *
                C38291 +
            (C55661 - C55662 + C55663 - C55664) * C38297 +
            (C55665 - C55666 + C55667 - C55668) * C38292) *
               C89236 * C89153 * C89189) *
              C5075 +
          (((C54888 - C54887 + C54890 - C54889) * C38295 +
            (C54892 - C54891 + C54894 - C54893) * C38291 +
            (C54895 - C54896 + C54897 - C54898) * C38297 +
            (C54899 - C54900 + C54901 - C54902) * C38292) *
               C89236 * C89153 * C5073 +
           ((C55662 - C55661 + C55664 - C55663) * C38295 +
            (C55666 - C55665 + C55668 - C55667) * C38291 +
            (C57659 - C57660 + C57661 - C57662) * C38297 +
            (C57663 - C57664 + C57665 - C57666) * C38292) *
               C89236 * C89153 * C89189) *
              C5076 +
          (((C54896 - C54895 + C54898 - C54897) * C38295 +
            (C54900 - C54899 + C54902 - C54901) * C38291 +
            (C54903 - C54904 + C54905 - C54906) * C38297 +
            (C54907 - C54908 + C54909 - C54910) * C38292) *
               C89236 * C89153 * C5073 +
           ((C57660 - C57659 + C57662 - C57661) * C38295 +
            (C57664 - C57663 + C57666 - C57665) * C38291 +
            (C54884 * C823 - C54750 * C1035 + C54885 * C4100 - C54751 * C4328) *
                C38297 +
            (C54884 * C838 - C54750 * C1043 + C54885 * C4108 - C54751 * C4332) *
                C38292) *
               C89236 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
               C38295 +
           (C54750 * C270 - C54884 * C113 + C54751 * C1942 - C54885 * C1735) *
               C38291 +
           (C54887 - C54888 + C54889 - C54890) * C38297 +
           (C54891 - C54892 + C54893 - C54894) * C38292) *
              C89236 * C89153 * C5720 +
          ((C54884 * C819 - C54750 * C1029 + C54885 * C4097 - C54751 * C4325) *
               C38295 +
           (C54884 * C830 - C54750 * C1037 + C54885 * C4102 - C54751 * C4329) *
               C38291 +
           (C55661 - C55662 + C55663 - C55664) * C38297 +
           (C55665 - C55666 + C55667 - C55668) * C38292) *
              C89236 * C89153 * C5721 +
          ((C54750 * C1032 - C54884 * C820 + C54751 * C8680 - C54885 * C8516) *
               C38295 +
           (C54750 * C1040 - C54884 * C832 + C54751 * C8683 - C54885 * C8522) *
               C38291 +
           (C55669 - C55670 + C55671 - C55672) * C38297 +
           (C55673 - C55674 + C55675 - C55676) * C38292) *
              C89236 * C89153 * C5722 +
          ((C54884 * C5727 - C54750 * C5843 + C54885 * C16683 -
            C54751 * C16923) *
               C38295 +
           (C54884 * C5733 - C54750 * C5846 + C54885 * C16686 -
            C54751 * C16925) *
               C38291 +
           (C54884 * C5726 - C54750 * C5844 + C54885 * C16684 -
            C54751 * C16924) *
               C38297 +
           (C54884 * C5731 - C54750 * C5847 + C54885 * C16688 -
            C54751 * C16926) *
               C38292) *
              C89236 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eeyx[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                 C180 +
             (C38291 * C352 - C38295 * C346 + C38292 * C353 - C38297 * C347) *
                 C89236) *
                C54750 +
            ((C56780 - C56781 + C56782 - C56783) * C180 +
             (C56784 - C56785 + C56786 - C56787) * C89236) *
                C54751) *
               C89153 * C5073 +
           (((C39387 - C39386 + C39389 - C39388) * C180 +
             (C39391 - C39390 + C39393 - C39392) * C89236) *
                C54750 +
            ((C43327 - C43328 + C43329 - C43330) * C180 +
             (C43331 - C43332 + C43333 - C43334) * C89236) *
                C54751) *
               C89153 * C89189) *
              C5075 +
          ((((C38295 * C107 - C38291 * C114 + C38297 * C108 - C38292 * C116) *
                 C180 +
             (C38295 * C347 - C38291 * C353 + C38297 * C348 - C38292 * C354) *
                 C89236) *
                C54750 +
            ((C56796 - C56797 + C56798 - C56799) * C180 +
             (C56800 - C56801 + C56802 - C56803) * C89236) *
                C54751) *
               C89153 * C5073 +
           (((C39403 - C39402 + C39405 - C39404) * C180 +
             (C39407 - C39406 + C39409 - C39408) * C89236) *
                C54750 +
            ((C43335 - C43336 + C43337 - C43338) * C180 +
             (C43339 - C43340 + C43341 - C43342) * C89236) *
                C54751) *
               C89153 * C89189) *
              C5076 +
          ((((C38291 * C116 - C38295 * C108 + C38292 * C118 - C38297 * C109) *
                 C180 +
             (C38291 * C354 - C38295 * C348 + C38292 * C355 - C38297 * C349) *
                 C89236) *
                C54750 +
            ((C58689 - C58690 + C58691 - C58692) * C180 +
             (C58693 - C58694 + C58695 - C58696) * C89236) *
                C54751) *
               C89153 * C5073 +
           (((C41335 - C41334 + C41337 - C41336) * C180 +
             (C41339 - C41338 + C41341 - C41340) * C89236) *
                C54750 +
            ((C38295 * C4099 - C38291 * C4105 + C38297 * C4100 -
              C38292 * C4107) *
                 C180 +
             (C38295 * C4441 - C38291 * C4445 + C38297 * C4442 -
              C38292 * C4446) *
                 C89236) *
                C54751) *
               C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                C180 +
            (C38291 * C352 - C38295 * C346 + C38292 * C353 - C38297 * C347) *
                C89236) *
               C54750 +
           ((C56780 - C56781 + C56782 - C56783) * C180 +
            (C56784 - C56785 + C56786 - C56787) * C89236) *
               C54751) *
              C89153 * C5720 +
          (((C39387 - C39386 + C39389 - C39388) * C180 +
            (C39391 - C39390 + C39393 - C39392) * C89236) *
               C54750 +
           ((C43327 - C43328 + C43329 - C43330) * C180 +
            (C43331 - C43332 + C43333 - C43334) * C89236) *
               C54751) *
              C89153 * C5721 +
          (((C39395 - C39394 + C39397 - C39396) * C180 +
            (C39399 - C39398 + C39401 - C39400) * C89236) *
               C54750 +
           ((C48891 - C48892 + C48893 - C48894) * C180 +
            (C48895 - C48896 + C48897 - C48898) * C89236) *
               C54751) *
              C89153 * C5722 +
          (((C45184 - C45183 + C45186 - C45185) * C180 +
            (C45188 - C45187 + C45190 - C45189) * C89236) *
               C54750 +
           ((C38295 * C16683 - C38291 * C16685 + C38297 * C16684 -
             C38292 * C16687) *
                C180 +
            (C38295 * C17037 - C38291 * C17039 + C38297 * C17038 -
             C38292 * C17040) *
                C89236) *
               C54751) *
              C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eeyy[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) *
                 C38291 +
             C440 * C38292) *
                C54750 +
            (C56910 + C56911) * C54751) *
               C89153 * C5073 -
           ((C59875 + C59874) * C54751 +
            (C1259 * C38292 +
             (C180 * C923 - C408 * C819 - C180 * C1135 + C89236 * C1227) *
                 C38291) *
                C54750) *
               C89153 * C89189) *
              C5075 +
          (((C1259 * C38291 + C1258 * C38292) * C54750 +
            (C59876 + C59877) * C54751) *
               C89153 * C89189 -
           ((C56915 + C56914) * C54751 +
            (C441 * C38292 + C440 * C38291) * C54750) *
               C89153 * C5073) *
              C5076 +
          (((C441 * C38291 + C442 * C38292) * C54750 +
            (C58795 + C58796) * C54751) *
               C89153 * C5073 -
           (((C180 * C4214 - C408 * C4100 - C180 * C4442 + C89236 * C4548) *
                 C38292 +
             C4563 * C38291) *
                C54751 +
            (C2955 * C38292 + C1258 * C38291) * C54750) *
               C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C38291 +
            C440 * C38292) *
               C54750 +
           (C56910 + C56911) * C54751) *
              C89153 * C5720 -
          ((C59875 + C59874) * C54751 +
           (C1259 * C38292 +
            (C180 * C923 - C408 * C819 - C180 * C1135 + C89236 * C1227) *
                C38291) *
               C54750) *
              C89153 * C5721 +
          (((C180 * C926 - C408 * C820 - C180 * C1138 + C89236 * C1228) *
                C38291 +
            C1260 * C38292) *
               C54750 +
           (C33871 * C38291 + C55879 * C38292) * C54751) *
              C89153 * C5722 -
          (((C180 * C16822 - C408 * C16684 - C180 * C17038 + C89236 * C17156) *
                C38292 +
            (C180 * C16821 - C408 * C16683 - C180 * C17037 + C89236 * C17155) *
                C38291) *
               C54751 +
           ((C180 * C5788 - C408 * C5726 - C180 * C5900 + C89236 * C5956) *
                C38292 +
            (C180 * C5787 - C408 * C5727 - C180 * C5899 + C89236 * C5957) *
                C38291) *
               C54750) *
              C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eeyz[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                 C180 +
             (C54750 * C493 - C54884 * C346 + C54751 * C2240 - C54885 * C2040) *
                 C89236) *
                C38291 +
            ((C54887 - C54888 + C54889 - C54890) * C180 +
             (C55109 - C55110 + C55111 - C55112) * C89236) *
                C38292) *
               C89153 * C5073 +
           (((C54884 * C819 - C54750 * C1029 + C54885 * C4097 -
              C54751 * C4325) *
                 C180 +
             (C54884 * C1135 - C54750 * C1335 + C54885 * C4439 -
              C54751 * C4661) *
                 C89236) *
                C38291 +
            ((C55661 - C55662 + C55663 - C55664) * C180 +
             (C55978 - C55979 + C55980 - C55981) * C89236) *
                C38292) *
               C89153 * C89189) *
              C5075 +
          ((((C54888 - C54887 + C54890 - C54889) * C180 +
             (C55110 - C55109 + C55112 - C55111) * C89236) *
                C38291 +
            ((C54895 - C54896 + C54897 - C54898) * C180 +
             (C55113 - C55114 + C55115 - C55116) * C89236) *
                C38292) *
               C89153 * C5073 +
           (((C55662 - C55661 + C55664 - C55663) * C180 +
             (C55979 - C55978 + C55981 - C55980) * C89236) *
                C38291 +
            ((C57659 - C57660 + C57661 - C57662) * C180 +
             (C57961 - C57962 + C57963 - C57964) * C89236) *
                C38292) *
               C89153 * C89189) *
              C5076 +
          ((((C54896 - C54895 + C54898 - C54897) * C180 +
             (C55114 - C55113 + C55116 - C55115) * C89236) *
                C38291 +
            ((C54903 - C54904 + C54905 - C54906) * C180 +
             (C55117 - C55118 + C55119 - C55120) * C89236) *
                C38292) *
               C89153 * C5073 +
           (((C57660 - C57659 + C57662 - C57661) * C180 +
             (C57962 - C57961 + C57964 - C57963) * C89236) *
                C38291 +
            ((C54884 * C823 - C54750 * C1035 + C54885 * C4100 -
              C54751 * C4328) *
                 C180 +
             (C54884 * C1141 - C54750 * C1341 + C54885 * C4442 -
              C54751 * C4664) *
                 C89236) *
                C38292) *
               C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                C180 +
            (C54750 * C493 - C54884 * C346 + C54751 * C2240 - C54885 * C2040) *
                C89236) *
               C38291 +
           ((C54887 - C54888 + C54889 - C54890) * C180 +
            (C55109 - C55110 + C55111 - C55112) * C89236) *
               C38292) *
              C89153 * C5720 +
          (((C54884 * C819 - C54750 * C1029 + C54885 * C4097 - C54751 * C4325) *
                C180 +
            (C54884 * C1135 - C54750 * C1335 + C54885 * C4439 -
             C54751 * C4661) *
                C89236) *
               C38291 +
           ((C55661 - C55662 + C55663 - C55664) * C180 +
            (C55978 - C55979 + C55980 - C55981) * C89236) *
               C38292) *
              C89153 * C5721 +
          (((C54750 * C1032 - C54884 * C820 + C54751 * C8680 - C54885 * C8516) *
                C180 +
            (C54750 * C1338 - C54884 * C1138 + C54751 * C8917 -
             C54885 * C8760) *
                C89236) *
               C38291 +
           ((C55669 - C55670 + C55671 - C55672) * C180 +
            (C55982 - C55983 + C55984 - C55985) * C89236) *
               C38292) *
              C89153 * C5722 +
          (((C54884 * C5727 - C54750 * C5843 + C54885 * C16683 -
             C54751 * C16923) *
                C180 +
            (C54884 * C5899 - C54750 * C6008 + C54885 * C17037 -
             C54751 * C17255) *
                C89236) *
               C38291 +
           ((C54884 * C5726 - C54750 * C5844 + C54885 * C16684 -
             C54751 * C16924) *
                C180 +
            (C54884 * C5900 - C54750 * C6009 + C54885 * C17038 -
             C54751 * C17256) *
                C89236) *
               C38292) *
              C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eezx[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                C54884 +
            (C38291 * C571 - C38295 * C565 + C38292 * C572 - C38297 * C566) *
                C54750 +
            (C56780 - C56781 + C56782 - C56783) * C54885 +
            (C57122 - C57123 + C57124 - C57125) * C54751) *
               C89236 * C89153 * C5073 +
           ((C39387 - C39386 + C39389 - C39388) * C54884 +
            (C39744 - C39743 + C39746 - C39745) * C54750 +
            (C43327 - C43328 + C43329 - C43330) * C54885 +
            (C43749 - C43750 + C43751 - C43752) * C54751) *
               C89236 * C89153 * C89189) *
              C5075 +
          (((C38295 * C107 - C38291 * C114 + C38297 * C108 - C38292 * C116) *
                C54884 +
            (C38295 * C566 - C38291 * C572 + C38297 * C567 - C38292 * C573) *
                C54750 +
            (C56796 - C56797 + C56798 - C56799) * C54885 +
            (C57130 - C57131 + C57132 - C57133) * C54751) *
               C89236 * C89153 * C5073 +
           ((C39403 - C39402 + C39405 - C39404) * C54884 +
            (C39752 - C39751 + C39754 - C39753) * C54750 +
            (C43335 - C43336 + C43337 - C43338) * C54885 +
            (C43753 - C43754 + C43755 - C43756) * C54751) *
               C89236 * C89153 * C89189) *
              C5076 +
          (((C38291 * C116 - C38295 * C108 + C38292 * C118 - C38297 * C109) *
                C54884 +
            (C38291 * C573 - C38295 * C567 + C38292 * C574 - C38297 * C568) *
                C54750 +
            (C58689 - C58690 + C58691 - C58692) * C54885 +
            (C58997 - C58998 + C58999 - C59000) * C54751) *
               C89236 * C89153 * C5073 +
           ((C41335 - C41334 + C41337 - C41336) * C54884 +
            (C41652 - C41651 + C41654 - C41653) * C54750 +
            (C38295 * C4099 - C38291 * C4105 + C38297 * C4100 -
             C38292 * C4107) *
                C54885 +
            (C38295 * C4769 - C38291 * C4773 + C38297 * C4770 -
             C38292 * C4774) *
                C54751) *
               C89236 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
               C54884 +
           (C38291 * C571 - C38295 * C565 + C38292 * C572 - C38297 * C566) *
               C54750 +
           (C56780 - C56781 + C56782 - C56783) * C54885 +
           (C57122 - C57123 + C57124 - C57125) * C54751) *
              C89236 * C89153 * C5720 +
          ((C39387 - C39386 + C39389 - C39388) * C54884 +
           (C39744 - C39743 + C39746 - C39745) * C54750 +
           (C43327 - C43328 + C43329 - C43330) * C54885 +
           (C43749 - C43750 + C43751 - C43752) * C54751) *
              C89236 * C89153 * C5721 +
          ((C39395 - C39394 + C39397 - C39396) * C54884 +
           (C39748 - C39747 + C39750 - C39749) * C54750 +
           (C48891 - C48892 + C48893 - C48894) * C54885 +
           (C49193 - C49194 + C49195 - C49196) * C54751) *
              C89236 * C89153 * C5722 +
          ((C45184 - C45183 + C45186 - C45185) * C54884 +
           (C45390 - C45389 + C45392 - C45391) * C54750 +
           (C38295 * C16683 - C38291 * C16685 + C38297 * C16684 -
            C38292 * C16687) *
               C54885 +
           (C38295 * C17361 - C38291 * C17363 + C38297 * C17362 -
            C38292 * C17364) *
               C54751) *
              C89236 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eezy[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C54884 +
             (C89236 * C627 - C180 * C565) * C54750 +
             (C27126 - C27127) * C54885 + (C27696 - C27697) * C54751) *
                C38291 +
            ((C194 - C195) * C54884 + (C634 - C635) * C54750 + C56562 * C54885 +
             C57236 * C54751) *
                C38292) *
               C89153 * C5073 +
           (((C180 * C819 - C89236 * C923) * C54884 +
             (C180 * C1425 - C89236 * C1515) * C54750 +
             (C29351 - C29352) * C54885 + (C29991 - C29992) * C54751) *
                C38291 +
            ((C940 - C941) * C54884 + (C1524 - C1525) * C54750 +
             C59472 * C54885 + C60272 * C54751) *
                C38292) *
               C89153 * C89189) *
              C5075 +
          ((((C195 - C194) * C54884 + (C635 - C634) * C54750 + C56564 * C54885 +
             C57237 * C54751) *
                C38291 +
            ((C199 - C198) * C54884 + (C638 - C637) * C54750 + C3433 * C54885 +
             C3912 * C54751) *
                C38292) *
               C89153 * C5073 +
           (((C941 - C940) * C54884 + (C1525 - C1524) * C54750 +
             C59474 * C54885 + C60273 * C54751) *
                C38291 +
            ((C945 - C944) * C54884 + (C1527 - C1526) * C54750 +
             (C4224 - C4225) * C54885 + (C4880 - C4881) * C54751) *
                C38292) *
               C89153 * C89189) *
              C5076 +
          (((C210 * C54884 + C644 * C54750 + C58483 * C54885 +
             C59099 * C54751) *
                C38291 +
            ((C203 - C202) * C54884 + (C641 - C640) * C54750 +
             (C3435 - C3436) * C54885 + (C3913 - C3914) * C54751) *
                C38292) *
               C89153 * C5073 +
           ((C2710 * C54884 + C3189 * C54750 + (C4225 - C4224) * C54885 +
             (C4881 - C4880) * C54751) *
                C38291 +
            ((C2713 - C2712) * C54884 + (C3191 - C3190) * C54750 +
             (C180 * C4100 - C89236 * C4214) * C54885 +
             (C180 * C4770 - C89236 * C4876) * C54751) *
                C38292) *
               C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C89236 * C181 - C180 * C106) * C54884 +
            (C89236 * C627 - C180 * C565) * C54750 +
            (C27126 - C27127) * C54885 + (C27696 - C27697) * C54751) *
               C38291 +
           ((C194 - C195) * C54884 + (C634 - C635) * C54750 + C56562 * C54885 +
            C57236 * C54751) *
               C38292) *
              C89153 * C5720 +
          (((C180 * C819 - C89236 * C923) * C54884 +
            (C180 * C1425 - C89236 * C1515) * C54750 +
            (C29351 - C29352) * C54885 + (C29991 - C29992) * C54751) *
               C38291 +
           ((C940 - C941) * C54884 + (C1524 - C1525) * C54750 +
            C59472 * C54885 + C60272 * C54751) *
               C38292) *
              C89153 * C5721 +
          (((C89236 * C926 - C180 * C820) * C54884 +
            (C89236 * C1518 - C180 * C1428) * C54750 +
            (C33629 - C33630) * C54885 + (C34097 - C34098) * C54751) *
               C38291 +
           ((C948 - C949) * C54884 + (C1528 - C1529) * C54750 +
            (C55559 - C55560) * C54885 + (C56182 - C56183) * C54751) *
               C38292) *
              C89153 * C5722 +
          (((C180 * C5727 - C89236 * C5787) * C54884 +
            (C180 * C6061 - C89236 * C6117) * C54750 +
            (C180 * C16683 - C89236 * C16821) * C54885 +
            (C180 * C17361 - C89236 * C17471) * C54751) *
               C38291 +
           ((C180 * C5726 - C89236 * C5788) * C54884 +
            (C180 * C6062 - C89236 * C6118) * C54750 +
            (C180 * C16684 - C89236 * C16822) * C54885 +
            (C180 * C17362 - C89236 * C17472) * C54751) *
               C38292) *
              C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eezz[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C54884 * C264 - C55318 * C106 - C54884 * C565 + C54750 * C700 +
             C54885 * C1934 - C55319 * C1724 - C54885 * C2330 +
             C54751 * C2512) *
                C89236 * C38291 +
            (C55357 + C55358) * C89236 * C38292) *
               C89153 * C5073 -
           ((C56306 + C56307) * C89236 * C38292 +
            (C54885 * C4325 - C55319 * C4097 - C54885 * C4767 + C54751 * C4979 +
             C54884 * C1029 - C55318 * C819 - C54884 * C1425 + C54750 * C1607) *
                C89236 * C38291) *
               C89153 * C89189) *
              C5075 +
          (((C56307 + C56306) * C89236 * C38291 +
            (C58271 + C58272) * C89236 * C38292) *
               C89153 * C89189 -
           ((C55359 + C55360) * C89236 * C38292 +
            (C55358 + C55357) * C89236 * C38291) *
               C89153 * C5073) *
              C5076 +
          (((C55360 + C55359) * C89236 * C38291 +
            (C55361 + C55362) * C89236 * C38292) *
               C89153 * C5073 -
           ((C54885 * C4328 - C55319 * C4100 - C54885 * C4770 + C54751 * C4982 +
             C54884 * C1035 - C55318 * C823 - C54884 * C1431 + C54750 * C1611) *
                C89236 * C38292 +
            (C58272 + C58271) * C89236 * C38291) *
               C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C54884 * C264 - C55318 * C106 - C54884 * C565 + C54750 * C700 +
            C54885 * C1934 - C55319 * C1724 - C54885 * C2330 + C54751 * C2512) *
               C89236 * C38291 +
           (C55357 + C55358) * C89236 * C38292) *
              C89153 * C5720 -
          ((C56306 + C56307) * C89236 * C38292 +
           (C54885 * C4325 - C55319 * C4097 - C54885 * C4767 + C54751 * C4979 +
            C54884 * C1029 - C55318 * C819 - C54884 * C1425 + C54750 * C1607) *
               C89236 * C38291) *
              C89153 * C5721 +
          ((C54884 * C1032 - C55318 * C820 - C54884 * C1428 + C54750 * C1608 +
            C54885 * C8680 - C55319 * C8516 - C54885 * C8994 + C54751 * C9153) *
               C89236 * C38291 +
           (C56308 + C56309) * C89236 * C38292) *
              C89153 * C5722 -
          ((C54885 * C16924 - C55319 * C16684 - C54885 * C17362 +
            C54751 * C17572 + C54884 * C5844 - C55318 * C5726 - C54884 * C6062 +
            C54750 * C6171) *
               C89236 * C38292 +
           (C54885 * C16923 - C55319 * C16683 - C54885 * C17361 +
            C54751 * C17571 + C54884 * C5843 - C55318 * C5727 - C54884 * C6061 +
            C54750 * C6172) *
               C89236 * C38291) *
              C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eexx[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C38295 * C112 - C38296 * C106 - C38295 * C113 + C38291 * C124 +
              C38297 * C114 - C38298 * C107 - C38297 * C115 + C38292 * C125) *
                 C54750 +
             (C56456 + C56457) * C54751) *
                C89236 * C9228 -
            ((C56458 + C56459) * C54751 + (C56457 + C56456) * C54750) * C89236 *
                C89217) *
               C89307 +
           (((C42922 + C42921) * C54750 + (C45635 + C45636) * C54751) * C89236 *
                C89217 -
            ((C42921 + C42922) * C54751 + (C39063 + C39062) * C54750) * C89236 *
                C9228) *
               C89189) *
              C89299 +
          ((((C56460 + C56461) * C54750 + (C56462 + C56463) * C54751) * C89236 *
                C89217 -
            ((C56461 + C56460) * C54751 +
             (C38297 * C116 - C38298 * C108 - C38297 * C117 + C38292 * C126 +
              C38295 * C114 - C38296 * C107 - C38295 * C115 + C38291 * C125) *
                 C54750) *
                C89236 * C9228) *
               C89307 +
           (((C39066 + C39067) * C54750 + (C42923 + C42924) * C54751) * C89236 *
                C9228 -
            ((C38297 * C6250 - C38298 * C6247 - C38297 * C6251 +
              C38292 * C6256 + C38295 * C6252 - C38296 * C6248 -
              C38295 * C6253 + C38291 * C6257) *
                 C54751 +
             (C42924 + C42923) * C54750) *
                C89236 * C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eexy[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C89236 * C181 - C180 * C106) * C38295 +
              (C89236 * C187 - C180 * C113) * C38291 + (C194 - C195) * C38297 +
              (C196 - C197) * C38292) *
                 C54750 +
             ((C27126 - C27127) * C38295 + (C27128 - C27129) * C38291 +
              C56562 * C38297 + C56563 * C38292) *
                 C54751) *
                C9228 +
            (((C27127 - C27126) * C38295 + (C27129 - C27128) * C38291 +
              C56564 * C38297 + C56565 * C38292) *
                 C54750 +
             ((C27131 - C27130) * C38295 + (C27133 - C27132) * C38291 +
              C27138 * C38297 + C27139 * C38292) *
                 C54751) *
                C89217) *
               C89307 +
           ((((C180 * C819 - C89236 * C923) * C38295 +
              (C180 * C830 - C89236 * C931) * C38291 + (C940 - C941) * C38297 +
              (C942 - C943) * C38292) *
                 C54750 +
             ((C29351 - C29352) * C38295 + (C29353 - C29354) * C38291 +
              C59472 * C38297 + C59473 * C38292) *
                 C54751) *
                C9228 +
            (((C29352 - C29351) * C38295 + (C29354 - C29353) * C38291 +
              C59474 * C38297 + C59475 * C38292) *
                 C54750 +
             ((C29356 - C29355) * C38295 + (C29358 - C29357) * C38291 +
              (C29359 - C29360) * C38297 + (C29361 - C29362) * C38292) *
                 C54751) *
                C89217) *
               C89189) *
              C89299 +
          (((((C195 - C194) * C38295 + (C197 - C196) * C38291 +
              (C199 - C198) * C38297 + (C201 - C200) * C38292) *
                 C54750 +
             (C56564 * C38295 + C56565 * C38291 + C3433 * C38297 +
              C3434 * C38292) *
                 C54751) *
                C9228 +
            ((C56562 * C38295 + C56563 * C38291 + C58483 * C38297 +
              C58484 * C38292) *
                 C54750 +
             (C56566 * C38295 + C56567 * C38291 + (C1857 - C1858) * C38297 +
              (C1859 - C1860) * C38292) *
                 C54751) *
                C89217) *
               C89307 +
           ((((C941 - C940) * C38295 + (C943 - C942) * C38291 +
              (C945 - C944) * C38297 + (C947 - C946) * C38292) *
                 C54750 +
             (C59474 * C38295 + C59475 * C38291 + (C4224 - C4225) * C38297 +
              (C4226 - C4227) * C38292) *
                 C54751) *
                C9228 +
            ((C59472 * C38295 + C59473 * C38291 + (C4225 - C4224) * C38297 +
              (C4227 - C4226) * C38292) *
                 C54750 +
             ((C29360 - C29359) * C38295 + (C29362 - C29361) * C38291 +
              (C180 * C6247 - C89236 * C6335) * C38297 +
              (C180 * C6251 - C89236 * C6338) * C38292) *
                 C54751) *
                C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eexz[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                 C38295 +
             (C54750 * C270 - C54884 * C113 + C54751 * C1942 - C54885 * C1735) *
                 C38291 +
             (C54887 - C54888 + C54889 - C54890) * C38297 +
             (C54891 - C54892 + C54893 - C54894) * C38292) *
                C89236 * C9228 +
            ((C54884 * C1724 - C54750 * C1934 + C54885 * C1725 -
              C54751 * C1937) *
                 C38295 +
             (C54884 * C1735 - C54750 * C1942 + C54885 * C1737 -
              C54751 * C1945) *
                 C38291 +
             (C56666 - C56667 + C56668 - C56669) * C38297 +
             (C56670 - C56671 + C56672 - C56673) * C38292) *
                C89236 * C89217) *
               C89307 +
           (((C54884 * C819 - C54750 * C1029 + C54885 * C4097 -
              C54751 * C4325) *
                 C38295 +
             (C54884 * C830 - C54750 * C1037 + C54885 * C4102 -
              C54751 * C4329) *
                 C38291 +
             (C55661 - C55662 + C55663 - C55664) * C38297 +
             (C55665 - C55666 + C55667 - C55668) * C38292) *
                C89236 * C9228 +
            ((C54750 * C4325 - C54884 * C4097 + C54751 * C6413 -
              C54885 * C6249) *
                 C38295 +
             (C54750 * C4329 - C54884 * C4102 + C54751 * C6416 -
              C54885 * C6255) *
                 C38291 +
             (C59606 - C59607 + C59608 - C59609) * C38297 +
             (C59610 - C59611 + C59612 - C59613) * C38292) *
                C89236 * C89217) *
               C89189) *
              C89299 +
          ((((C54888 - C54887 + C54890 - C54889) * C38295 +
             (C54892 - C54891 + C54894 - C54893) * C38291 +
             (C54895 - C54896 + C54897 - C54898) * C38297 +
             (C54899 - C54900 + C54901 - C54902) * C38292) *
                C89236 * C9228 +
            ((C56667 - C56666 + C56669 - C56668) * C38295 +
             (C56671 - C56670 + C56673 - C56672) * C38291 +
             (C58583 - C58584 + C58585 - C58586) * C38297 +
             (C58587 - C58588 + C58589 - C58590) * C38292) *
                C89236 * C89217) *
               C89307 +
           (((C55662 - C55661 + C55664 - C55663) * C38295 +
             (C55666 - C55665 + C55668 - C55667) * C38291 +
             (C57659 - C57660 + C57661 - C57662) * C38297 +
             (C57663 - C57664 + C57665 - C57666) * C38292) *
                C89236 * C9228 +
            ((C59607 - C59606 + C59609 - C59608) * C38295 +
             (C59611 - C59610 + C59613 - C59612) * C38291 +
             (C54884 * C4099 - C54750 * C4327 + C54885 * C6247 -
              C54751 * C6415) *
                 C38297 +
             (C54884 * C4106 - C54750 * C4331 + C54885 * C6251 -
              C54751 * C6418) *
                 C38292) *
                C89236 * C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                  C180 +
              (C38291 * C352 - C38295 * C346 + C38292 * C353 - C38297 * C347) *
                  C89236) *
                 C54750 +
             ((C56780 - C56781 + C56782 - C56783) * C180 +
              (C56784 - C56785 + C56786 - C56787) * C89236) *
                 C54751) *
                C9228 +
            (((C56781 - C56780 + C56783 - C56782) * C180 +
              (C56785 - C56784 + C56787 - C56786) * C89236) *
                 C54750 +
             ((C56788 - C56789 + C56790 - C56791) * C180 +
              (C56792 - C56793 + C56794 - C56795) * C89236) *
                 C54751) *
                C89217) *
               C89307 +
           ((((C39387 - C39386 + C39389 - C39388) * C180 +
              (C39391 - C39390 + C39393 - C39392) * C89236) *
                 C54750 +
             ((C43327 - C43328 + C43329 - C43330) * C180 +
              (C43331 - C43332 + C43333 - C43334) * C89236) *
                 C54751) *
                C9228 +
            (((C43328 - C43327 + C43330 - C43329) * C180 +
              (C43332 - C43331 + C43334 - C43333) * C89236) *
                 C54750 +
             ((C45931 - C45932 + C45933 - C45934) * C180 +
              (C45935 - C45936 + C45937 - C45938) * C89236) *
                 C54751) *
                C89217) *
               C89189) *
              C89299 +
          (((((C38295 * C107 - C38291 * C114 + C38297 * C108 - C38292 * C116) *
                  C180 +
              (C38295 * C347 - C38291 * C353 + C38297 * C348 - C38292 * C354) *
                  C89236) *
                 C54750 +
             ((C56796 - C56797 + C56798 - C56799) * C180 +
              (C56800 - C56801 + C56802 - C56803) * C89236) *
                 C54751) *
                C9228 +
            (((C56797 - C56796 + C56799 - C56798) * C180 +
              (C56801 - C56800 + C56803 - C56802) * C89236) *
                 C54750 +
             ((C56804 - C56805 + C56806 - C56807) * C180 +
              (C56808 - C56809 + C56810 - C56811) * C89236) *
                 C54751) *
                C89217) *
               C89307 +
           ((((C39403 - C39402 + C39405 - C39404) * C180 +
              (C39407 - C39406 + C39409 - C39408) * C89236) *
                 C54750 +
             ((C43335 - C43336 + C43337 - C43338) * C180 +
              (C43339 - C43340 + C43341 - C43342) * C89236) *
                 C54751) *
                C9228 +
            (((C43336 - C43335 + C43338 - C43337) * C180 +
              (C43340 - C43339 + C43342 - C43341) * C89236) *
                 C54750 +
             ((C38295 * C6248 - C38291 * C6252 + C38297 * C6247 -
               C38292 * C6250) *
                  C180 +
              (C38295 * C6494 - C38291 * C6497 + C38297 * C6495 -
               C38292 * C6498) *
                  C89236) *
                 C54751) *
                C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) *
                  C38291 +
              C440 * C38292) *
                 C54750 +
             (C56910 + C56911) * C54751) *
                C9228 -
            ((C56912 + C56913) * C54751 + (C56911 + C56910) * C54750) *
                C89217) *
               C89307 +
           (((C59874 + C59875) * C54750 + (C62384 + C62385) * C54751) * C89217 -
            ((C59875 + C59874) * C54751 +
             (C1259 * C38292 +
              (C180 * C923 - C408 * C819 - C180 * C1135 + C89236 * C1227) *
                  C38291) *
                 C54750) *
                C9228) *
               C89189) *
              C89299 +
          ((((C56914 + C56915) * C54750 + (C56916 + C56917) * C54751) * C89217 -
            ((C56915 + C56914) * C54751 +
             (C441 * C38292 + C440 * C38291) * C54750) *
                C9228) *
               C89307 +
           (((C1259 * C38291 + C1258 * C38292) * C54750 +
             (C59876 + C59877) * C54751) *
                C9228 -
            (((C180 * C6335 - C408 * C6247 - C180 * C6495 + C89236 * C6573) *
                  C38292 +
              C29687 * C38291) *
                 C54751 +
             (C59877 + C59876) * C54750) *
                C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[55] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((((C54750 * C264 - C54884 * C106 + C54751 * C1934 -
                         C54885 * C1724) *
                            C180 +
                        (C54750 * C493 - C54884 * C346 + C54751 * C2240 -
                         C54885 * C2040) *
                            C89236) *
                           C38291 +
                       ((C54887 - C54888 + C54889 - C54890) * C180 +
                        (C55109 - C55110 + C55111 - C55112) * C89236) *
                           C38292) *
                          C9228 +
                      (((C54884 * C1724 - C54750 * C1934 + C54885 * C1725 -
                         C54751 * C1937) *
                            C180 +
                        (C54884 * C2040 - C54750 * C2240 + C54885 * C2043 -
                         C54751 * C2243) *
                            C89236) *
                           C38291 +
                       ((C56666 - C56667 + C56668 - C56669) * C180 +
                        (C57016 - C57017 + C57018 - C57019) * C89236) *
                           C38292) *
                          C89217) *
                         C89307 +
                     ((((C54884 * C819 - C54750 * C1029 + C54885 * C4097 -
                         C54751 * C4325) *
                            C180 +
                        (C54884 * C1135 - C54750 * C1335 + C54885 * C4439 -
                         C54751 * C4661) *
                            C89236) *
                           C38291 +
                       ((C55661 - C55662 + C55663 - C55664) * C180 +
                        (C55978 - C55979 + C55980 - C55981) * C89236) *
                           C38292) *
                          C9228 +
                      (((C54750 * C4325 - C54884 * C4097 + C54751 * C6413 -
                         C54885 * C6249) *
                            C180 +
                        (C54750 * C4661 - C54884 * C4439 + C54751 * C6650 -
                         C54885 * C6493) *
                            C89236) *
                           C38291 +
                       ((C59606 - C59607 + C59608 - C59609) * C180 +
                        (C60008 - C60009 + C60010 - C60011) * C89236) *
                           C38292) *
                          C89217) *
                         C89189) *
                        C89299 +
                    (((((C54888 - C54887 + C54890 - C54889) * C180 +
                        (C55110 - C55109 + C55112 - C55111) * C89236) *
                           C38291 +
                       ((C54895 - C54896 + C54897 - C54898) * C180 +
                        (C55113 - C55114 + C55115 - C55116) * C89236) *
                           C38292) *
                          C9228 +
                      (((C56667 - C56666 + C56669 - C56668) * C180 +
                        (C57017 - C57016 + C57019 - C57018) * C89236) *
                           C38291 +
                       ((C58583 - C58584 + C58585 - C58586) * C180 +
                        (C58895 - C58896 + C58897 - C58898) * C89236) *
                           C38292) *
                          C89217) *
                         C89307 +
                     ((((C55662 - C55661 + C55664 - C55663) * C180 +
                        (C55979 - C55978 + C55981 - C55980) * C89236) *
                           C38291 +
                       ((C57659 - C57660 + C57661 - C57662) * C180 +
                        (C57961 - C57962 + C57963 - C57964) * C89236) *
                           C38292) *
                          C9228 +
                      (((C59607 - C59606 + C59609 - C59608) * C180 +
                        (C60009 - C60008 + C60011 - C60010) * C89236) *
                           C38291 +
                       ((C54884 * C4099 - C54750 * C4327 + C54885 * C6247 -
                         C54751 * C6415) *
                            C180 +
                        (C54884 * C4441 - C54750 * C4663 + C54885 * C6495 -
                         C54751 * C6652) *
                            C89236) *
                           C38292) *
                          C89217) *
                         C89189) *
                        C89124)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                 C54884 +
             (C38291 * C571 - C38295 * C565 + C38292 * C572 - C38297 * C566) *
                 C54750 +
             (C56780 - C56781 + C56782 - C56783) * C54885 +
             (C57122 - C57123 + C57124 - C57125) * C54751) *
                C89236 * C9228 +
            ((C56781 - C56780 + C56783 - C56782) * C54884 +
             (C57123 - C57122 + C57125 - C57124) * C54750 +
             (C56788 - C56789 + C56790 - C56791) * C54885 +
             (C57126 - C57127 + C57128 - C57129) * C54751) *
                C89236 * C89217) *
               C89307 +
           (((C39387 - C39386 + C39389 - C39388) * C54884 +
             (C39744 - C39743 + C39746 - C39745) * C54750 +
             (C43327 - C43328 + C43329 - C43330) * C54885 +
             (C43749 - C43750 + C43751 - C43752) * C54751) *
                C89236 * C9228 +
            ((C43328 - C43327 + C43330 - C43329) * C54884 +
             (C43750 - C43749 + C43752 - C43751) * C54750 +
             (C45931 - C45932 + C45933 - C45934) * C54885 +
             (C46233 - C46234 + C46235 - C46236) * C54751) *
                C89236 * C89217) *
               C89189) *
              C89299 +
          ((((C38295 * C107 - C38291 * C114 + C38297 * C108 - C38292 * C116) *
                 C54884 +
             (C38295 * C566 - C38291 * C572 + C38297 * C567 - C38292 * C573) *
                 C54750 +
             (C56796 - C56797 + C56798 - C56799) * C54885 +
             (C57130 - C57131 + C57132 - C57133) * C54751) *
                C89236 * C9228 +
            ((C56797 - C56796 + C56799 - C56798) * C54884 +
             (C57131 - C57130 + C57133 - C57132) * C54750 +
             (C56804 - C56805 + C56806 - C56807) * C54885 +
             (C57134 - C57135 + C57136 - C57137) * C54751) *
                C89236 * C89217) *
               C89307 +
           (((C39403 - C39402 + C39405 - C39404) * C54884 +
             (C39752 - C39751 + C39754 - C39753) * C54750 +
             (C43335 - C43336 + C43337 - C43338) * C54885 +
             (C43753 - C43754 + C43755 - C43756) * C54751) *
                C89236 * C9228 +
            ((C43336 - C43335 + C43338 - C43337) * C54884 +
             (C43754 - C43753 + C43756 - C43755) * C54750 +
             (C38295 * C6248 - C38291 * C6252 + C38297 * C6247 -
              C38292 * C6250) *
                 C54885 +
             (C38295 * C6728 - C38291 * C6731 + C38297 * C6729 -
              C38292 * C6732) *
                 C54751) *
                C89236 * C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eezy[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C89236 * C181 - C180 * C106) * C54884 +
              (C89236 * C627 - C180 * C565) * C54750 +
              (C27126 - C27127) * C54885 + (C27696 - C27697) * C54751) *
                 C38291 +
             ((C194 - C195) * C54884 + (C634 - C635) * C54750 +
              C56562 * C54885 + C57236 * C54751) *
                 C38292) *
                C9228 +
            (((C27127 - C27126) * C54884 + (C27697 - C27696) * C54750 +
              (C27131 - C27130) * C54885 + (C27699 - C27698) * C54751) *
                 C38291 +
             (C56564 * C54884 + C57237 * C54750 + C27138 * C54885 +
              C27702 * C54751) *
                 C38292) *
                C89217) *
               C89307 +
           ((((C180 * C819 - C89236 * C923) * C54884 +
              (C180 * C1425 - C89236 * C1515) * C54750 +
              (C29351 - C29352) * C54885 + (C29991 - C29992) * C54751) *
                 C38291 +
             ((C940 - C941) * C54884 + (C1524 - C1525) * C54750 +
              C59472 * C54885 + C60272 * C54751) *
                 C38292) *
                C9228 +
            (((C29352 - C29351) * C54884 + (C29992 - C29991) * C54750 +
              (C29356 - C29355) * C54885 + (C29994 - C29993) * C54751) *
                 C38291 +
             (C59474 * C54884 + C60273 * C54750 + (C29359 - C29360) * C54885 +
              (C29995 - C29996) * C54751) *
                 C38292) *
                C89217) *
               C89189) *
              C89299 +
          (((((C195 - C194) * C54884 + (C635 - C634) * C54750 +
              C56564 * C54885 + C57237 * C54751) *
                 C38291 +
             ((C199 - C198) * C54884 + (C638 - C637) * C54750 + C3433 * C54885 +
              C3912 * C54751) *
                 C38292) *
                C9228 +
            ((C56562 * C54884 + C57236 * C54750 + C56566 * C54885 +
              C57238 * C54751) *
                 C38291 +
             (C58483 * C54884 + C59099 * C54750 + (C1857 - C1858) * C54885 +
              (C2435 - C2436) * C54751) *
                 C38292) *
                C89217) *
               C89307 +
           ((((C941 - C940) * C54884 + (C1525 - C1524) * C54750 +
              C59474 * C54885 + C60273 * C54751) *
                 C38291 +
             ((C945 - C944) * C54884 + (C1527 - C1526) * C54750 +
              (C4224 - C4225) * C54885 + (C4880 - C4881) * C54751) *
                 C38292) *
                C9228 +
            ((C59472 * C54884 + C60272 * C54750 + (C29360 - C29359) * C54885 +
              (C29996 - C29995) * C54751) *
                 C38291 +
             ((C4225 - C4224) * C54884 + (C4881 - C4880) * C54750 +
              (C180 * C6247 - C89236 * C6335) * C54885 +
              (C180 * C6729 - C89236 * C6809) * C54751) *
                 C38292) *
                C89217) *
               C89189) *
              C89124)) /
        (p * q * std::sqrt(p + q));
    d2eezz[55] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C54884 * C264 - C55318 * C106 - C54884 * C565 +
                        C54750 * C700 + C54885 * C1934 - C55319 * C1724 -
                        C54885 * C2330 + C54751 * C2512) *
                           C89236 * C38291 +
                       (C55357 + C55358) * C89236 * C38292) *
                          C9228 -
                      ((C57361 + C57362) * C89236 * C38292 +
                       (C54885 * C1937 - C55319 * C1725 - C54885 * C2333 +
                        C54751 * C2513 + C54884 * C1934 - C55318 * C1724 -
                        C54884 * C2330 + C54750 * C2512) *
                           C89236 * C38291) *
                          C89217) *
                         C89307 +
                     (((C54884 * C4325 - C55318 * C4097 - C54884 * C4767 +
                        C54750 * C4979 + C54885 * C6413 - C55319 * C6249 -
                        C54885 * C6727 + C54751 * C6886) *
                           C89236 * C38291 +
                       (C60416 + C60417) * C89236 * C38292) *
                          C89217 -
                      ((C56306 + C56307) * C89236 * C38292 +
                       (C54885 * C4325 - C55319 * C4097 - C54885 * C4767 +
                        C54751 * C4979 + C54884 * C1029 - C55318 * C819 -
                        C54884 * C1425 + C54750 * C1607) *
                           C89236 * C38291) *
                          C9228) *
                         C89189) *
                        C89299 +
                    ((((C57362 + C57361) * C89236 * C38291 +
                       (C59210 + C59211) * C89236 * C38292) *
                          C89217 -
                      ((C55359 + C55360) * C89236 * C38292 +
                       (C55358 + C55357) * C89236 * C38291) *
                          C9228) *
                         C89307 +
                     (((C56307 + C56306) * C89236 * C38291 +
                       (C58271 + C58272) * C89236 * C38292) *
                          C9228 -
                      ((C54885 * C6415 - C55319 * C6247 - C54885 * C6729 +
                        C54751 * C6884 + C54884 * C4327 - C55318 * C4099 -
                        C54884 * C4769 + C54750 * C4981) *
                           C89236 * C38292 +
                       (C60417 + C60416) * C89236 * C38291) *
                          C89217) *
                         C89189) *
                        C89124)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C38295 * C112 - C38296 * C106 - C38295 * C113 + C38291 * C124 +
             C38297 * C114 - C38298 * C107 - C38297 * C115 + C38292 * C125) *
                C54750 +
            (C56456 + C56457) * C54751) *
               C89236 * C89337 -
           ((C56458 + C56459) * C54751 + (C56457 + C56456) * C54750) * C89236 *
               C89338 +
           ((C56459 + C56458) * C54750 + (C67556 + C67557) * C54751) * C89236 *
               C11948) *
              C89307 +
          (((C42922 + C42921) * C54750 + (C45635 + C45636) * C54751) * C89236 *
               C89338 -
           ((C42921 + C42922) * C54751 + (C39063 + C39062) * C54750) * C89236 *
               C89337 -
           ((C38297 * C29240 - C38298 * C29239 - C38297 * C29241 +
             C38292 * C29242 + C38295 * C23156 - C38296 * C23153 -
             C38295 * C23157 + C38291 * C23159) *
                C54751 +
            (C45636 + C45635) * C54750) *
               C89236 * C11948) *
              C89189) *
         C89118) /
        (p * q * std::sqrt(p + q));
    d2eexy[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C38295 +
             (C89236 * C187 - C180 * C113) * C38291 + (C194 - C195) * C38297 +
             (C196 - C197) * C38292) *
                C54750 +
            ((C27126 - C27127) * C38295 + (C27128 - C27129) * C38291 +
             C56562 * C38297 + C56563 * C38292) *
                C54751) *
               C89337 +
           (((C27127 - C27126) * C38295 + (C27129 - C27128) * C38291 +
             C56564 * C38297 + C56565 * C38292) *
                C54750 +
            ((C27131 - C27130) * C38295 + (C27133 - C27132) * C38291 +
             C27138 * C38297 + C27139 * C38292) *
                C54751) *
               C89338 +
           ((C27144 * C38295 + C27145 * C38291 + C56566 * C38297 +
             C56567 * C38292) *
                C54750 +
            ((C27135 - C27134) * C38295 + (C27137 - C27136) * C38291 +
             (C27140 - C27141) * C38297 + (C27142 - C27143) * C38292) *
                C54751) *
               C11948) *
              C89307 +
          ((((C180 * C819 - C89236 * C923) * C38295 +
             (C180 * C830 - C89236 * C931) * C38291 + (C940 - C941) * C38297 +
             (C942 - C943) * C38292) *
                C54750 +
            ((C29351 - C29352) * C38295 + (C29353 - C29354) * C38291 +
             C59472 * C38297 + C59473 * C38292) *
                C54751) *
               C89337 +
           (((C29352 - C29351) * C38295 + (C29354 - C29353) * C38291 +
             C59474 * C38297 + C59475 * C38292) *
                C54750 +
            ((C29356 - C29355) * C38295 + (C29358 - C29357) * C38291 +
             (C29359 - C29360) * C38297 + (C29361 - C29362) * C38292) *
                C54751) *
               C89338 +
           ((C31373 * C38295 + C31374 * C38291 + (C29360 - C29359) * C38297 +
             (C29362 - C29361) * C38292) *
                C54750 +
            ((C31376 - C31375) * C38295 + (C31378 - C31377) * C38291 +
             (C180 * C29239 - C89236 * C29348) * C38297 +
             (C180 * C29241 - C89236 * C29349) * C38292) *
                C54751) *
               C11948) *
              C89189) *
         C89118) /
        (p * q * std::sqrt(p + q));
    d2eexz[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                C38295 +
            (C54750 * C270 - C54884 * C113 + C54751 * C1942 - C54885 * C1735) *
                C38291 +
            (C54887 - C54888 + C54889 - C54890) * C38297 +
            (C54891 - C54892 + C54893 - C54894) * C38292) *
               C89236 * C89337 +
           ((C54884 * C1724 - C54750 * C1934 + C54885 * C1725 -
             C54751 * C1937) *
                C38295 +
            (C54884 * C1735 - C54750 * C1942 + C54885 * C1737 -
             C54751 * C1945) *
                C38291 +
            (C56666 - C56667 + C56668 - C56669) * C38297 +
            (C56670 - C56671 + C56672 - C56673) * C38292) *
               C89236 * C89338 +
           ((C54750 * C1937 - C54884 * C1725 + C54751 * C10660 -
             C54885 * C10544) *
                C38295 +
            (C54750 * C1945 - C54884 * C1737 + C54751 * C10663 -
             C54885 * C10550) *
                C38291 +
            (C56674 - C56675 + C56676 - C56677) * C38297 +
            (C56678 - C56679 + C56680 - C56681) * C38292) *
               C89236 * C11948) *
              C89307 +
          (((C54884 * C819 - C54750 * C1029 + C54885 * C4097 - C54751 * C4325) *
                C38295 +
            (C54884 * C830 - C54750 * C1037 + C54885 * C4102 - C54751 * C4329) *
                C38291 +
            (C55661 - C55662 + C55663 - C55664) * C38297 +
            (C55665 - C55666 + C55667 - C55668) * C38292) *
               C89236 * C89337 +
           ((C54750 * C4325 - C54884 * C4097 + C54751 * C6413 -
             C54885 * C6249) *
                C38295 +
            (C54750 * C4329 - C54884 * C4102 + C54751 * C6416 -
             C54885 * C6255) *
                C38291 +
            (C59606 - C59607 + C59608 - C59609) * C38297 +
            (C59610 - C59611 + C59612 - C59613) * C38292) *
               C89236 * C89338 +
           ((C54884 * C6249 - C54750 * C6413 + C54885 * C23153 -
             C54751 * C23264) *
                C38295 +
            (C54884 * C6255 - C54750 * C6416 + C54885 * C23157 -
             C54751 * C23266) *
                C38291 +
            (C54884 * C6248 - C54750 * C6414 + C54885 * C29239 -
             C54751 * C29460) *
                C38297 +
            (C54884 * C6253 - C54750 * C6417 + C54885 * C29241 -
             C54751 * C29461) *
                C38292) *
               C89236 * C11948) *
              C89189) *
         C89118) /
        (p * q * std::sqrt(p + q));
    d2eeyx[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                 C180 +
             (C38291 * C352 - C38295 * C346 + C38292 * C353 - C38297 * C347) *
                 C89236) *
                C54750 +
            ((C56780 - C56781 + C56782 - C56783) * C180 +
             (C56784 - C56785 + C56786 - C56787) * C89236) *
                C54751) *
               C89337 +
           (((C56781 - C56780 + C56783 - C56782) * C180 +
             (C56785 - C56784 + C56787 - C56786) * C89236) *
                C54750 +
            ((C56788 - C56789 + C56790 - C56791) * C180 +
             (C56792 - C56793 + C56794 - C56795) * C89236) *
                C54751) *
               C89338 +
           (((C56789 - C56788 + C56791 - C56790) * C180 +
             (C56793 - C56792 + C56795 - C56794) * C89236) *
                C54750 +
            ((C67756 - C67757 + C67758 - C67759) * C180 +
             (C67760 - C67761 + C67762 - C67763) * C89236) *
                C54751) *
               C11948) *
              C89307 +
          ((((C39387 - C39386 + C39389 - C39388) * C180 +
             (C39391 - C39390 + C39393 - C39392) * C89236) *
                C54750 +
            ((C43327 - C43328 + C43329 - C43330) * C180 +
             (C43331 - C43332 + C43333 - C43334) * C89236) *
                C54751) *
               C89337 +
           (((C43328 - C43327 + C43330 - C43329) * C180 +
             (C43332 - C43331 + C43334 - C43333) * C89236) *
                C54750 +
            ((C45931 - C45932 + C45933 - C45934) * C180 +
             (C45935 - C45936 + C45937 - C45938) * C89236) *
                C54751) *
               C89338 +
           (((C45932 - C45931 + C45934 - C45933) * C180 +
             (C45936 - C45935 + C45938 - C45937) * C89236) *
                C54750 +
            ((C38295 * C23153 - C38291 * C23156 + C38297 * C29239 -
              C38292 * C29240) *
                 C180 +
             (C38295 * C23318 - C38291 * C23320 + C38297 * C29560 -
              C38292 * C29561) *
                 C89236) *
                C54751) *
               C11948) *
              C89189) *
         C89118) /
        (p * q * std::sqrt(p + q));
    d2eeyy[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) *
                 C38291 +
             C440 * C38292) *
                C54750 +
            (C56910 + C56911) * C54751) *
               C89337 -
           ((C56912 + C56913) * C54751 + (C56911 + C56910) * C54750) * C89338 +
           ((C56913 + C56912) * C54750 + (C67830 + C67831) * C54751) * C11948) *
              C89307 +
          (((C59874 + C59875) * C54750 + (C62384 + C62385) * C54751) * C89338 -
           ((C59875 + C59874) * C54751 +
            (C1259 * C38292 +
             (C180 * C923 - C408 * C819 - C180 * C1135 + C89236 * C1227) *
                 C38291) *
                C54750) *
               C89337 -
           (((C180 * C29348 - C408 * C29239 - C180 * C29560 + C89236 * C29664) *
                 C38292 +
             C31624 * C38291) *
                C54751 +
            (C62385 + C62384) * C54750) *
               C11948) *
              C89189) *
         C89118) /
        (p * q * std::sqrt(p + q));
    d2eeyz[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                 C180 +
             (C54750 * C493 - C54884 * C346 + C54751 * C2240 - C54885 * C2040) *
                 C89236) *
                C38291 +
            ((C54887 - C54888 + C54889 - C54890) * C180 +
             (C55109 - C55110 + C55111 - C55112) * C89236) *
                C38292) *
               C89337 +
           (((C54884 * C1724 - C54750 * C1934 + C54885 * C1725 -
              C54751 * C1937) *
                 C180 +
             (C54884 * C2040 - C54750 * C2240 + C54885 * C2043 -
              C54751 * C2243) *
                 C89236) *
                C38291 +
            ((C56666 - C56667 + C56668 - C56669) * C180 +
             (C57016 - C57017 + C57018 - C57019) * C89236) *
                C38292) *
               C89338 +
           (((C54750 * C1937 - C54884 * C1725 + C54751 * C10660 -
              C54885 * C10544) *
                 C180 +
             (C54750 * C2243 - C54884 * C2043 + C54751 * C10825 -
              C54885 * C10716) *
                 C89236) *
                C38291 +
            ((C56674 - C56675 + C56676 - C56677) * C180 +
             (C57020 - C57021 + C57022 - C57023) * C89236) *
                C38292) *
               C11948) *
              C89307 +
          ((((C54884 * C819 - C54750 * C1029 + C54885 * C4097 -
              C54751 * C4325) *
                 C180 +
             (C54884 * C1135 - C54750 * C1335 + C54885 * C4439 -
              C54751 * C4661) *
                 C89236) *
                C38291 +
            ((C55661 - C55662 + C55663 - C55664) * C180 +
             (C55978 - C55979 + C55980 - C55981) * C89236) *
                C38292) *
               C89337 +
           (((C54750 * C4325 - C54884 * C4097 + C54751 * C6413 -
              C54885 * C6249) *
                 C180 +
             (C54750 * C4661 - C54884 * C4439 + C54751 * C6650 -
              C54885 * C6493) *
                 C89236) *
                C38291 +
            ((C59606 - C59607 + C59608 - C59609) * C180 +
             (C60008 - C60009 + C60010 - C60011) * C89236) *
                C38292) *
               C89338 +
           (((C54884 * C6249 - C54750 * C6413 + C54885 * C23153 -
              C54751 * C23264) *
                 C180 +
             (C54884 * C6493 - C54750 * C6650 + C54885 * C23318 -
              C54751 * C23424) *
                 C89236) *
                C38291 +
            ((C54884 * C6248 - C54750 * C6414 + C54885 * C29239 -
              C54751 * C29460) *
                 C180 +
             (C54884 * C6494 - C54750 * C6651 + C54885 * C29560 -
              C54751 * C29788) *
                 C89236) *
                C38292) *
               C11948) *
              C89189) *
         C89118) /
        (p * q * std::sqrt(p + q));
    d2eezx[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                C54884 +
            (C38291 * C571 - C38295 * C565 + C38292 * C572 - C38297 * C566) *
                C54750 +
            (C56780 - C56781 + C56782 - C56783) * C54885 +
            (C57122 - C57123 + C57124 - C57125) * C54751) *
               C89236 * C89337 +
           ((C56781 - C56780 + C56783 - C56782) * C54884 +
            (C57123 - C57122 + C57125 - C57124) * C54750 +
            (C56788 - C56789 + C56790 - C56791) * C54885 +
            (C57126 - C57127 + C57128 - C57129) * C54751) *
               C89236 * C89338 +
           ((C56789 - C56788 + C56791 - C56790) * C54884 +
            (C57127 - C57126 + C57129 - C57128) * C54750 +
            (C67756 - C67757 + C67758 - C67759) * C54885 +
            (C67964 - C67965 + C67966 - C67967) * C54751) *
               C89236 * C11948) *
              C89307 +
          (((C39387 - C39386 + C39389 - C39388) * C54884 +
            (C39744 - C39743 + C39746 - C39745) * C54750 +
            (C43327 - C43328 + C43329 - C43330) * C54885 +
            (C43749 - C43750 + C43751 - C43752) * C54751) *
               C89236 * C89337 +
           ((C43328 - C43327 + C43330 - C43329) * C54884 +
            (C43750 - C43749 + C43752 - C43751) * C54750 +
            (C45931 - C45932 + C45933 - C45934) * C54885 +
            (C46233 - C46234 + C46235 - C46236) * C54751) *
               C89236 * C89338 +
           ((C45932 - C45931 + C45934 - C45933) * C54884 +
            (C46234 - C46233 + C46236 - C46235) * C54750 +
            (C38295 * C23153 - C38291 * C23156 + C38297 * C29239 -
             C38292 * C29240) *
                C54885 +
            (C38295 * C23476 - C38291 * C23478 + C38297 * C29887 -
             C38292 * C29888) *
                C54751) *
               C89236 * C11948) *
              C89189) *
         C89118) /
        (p * q * std::sqrt(p + q));
    d2eezy[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C54884 +
             (C89236 * C627 - C180 * C565) * C54750 +
             (C27126 - C27127) * C54885 + (C27696 - C27697) * C54751) *
                C38291 +
            ((C194 - C195) * C54884 + (C634 - C635) * C54750 + C56562 * C54885 +
             C57236 * C54751) *
                C38292) *
               C89337 +
           (((C27127 - C27126) * C54884 + (C27697 - C27696) * C54750 +
             (C27131 - C27130) * C54885 + (C27699 - C27698) * C54751) *
                C38291 +
            (C56564 * C54884 + C57237 * C54750 + C27138 * C54885 +
             C27702 * C54751) *
                C38292) *
               C89338 +
           ((C27144 * C54884 + C27705 * C54750 + (C27135 - C27134) * C54885 +
             (C27701 - C27700) * C54751) *
                C38291 +
            (C56566 * C54884 + C57238 * C54750 + (C27140 - C27141) * C54885 +
             (C27703 - C27704) * C54751) *
                C38292) *
               C11948) *
              C89307 +
          ((((C180 * C819 - C89236 * C923) * C54884 +
             (C180 * C1425 - C89236 * C1515) * C54750 +
             (C29351 - C29352) * C54885 + (C29991 - C29992) * C54751) *
                C38291 +
            ((C940 - C941) * C54884 + (C1524 - C1525) * C54750 +
             C59472 * C54885 + C60272 * C54751) *
                C38292) *
               C89337 +
           (((C29352 - C29351) * C54884 + (C29992 - C29991) * C54750 +
             (C29356 - C29355) * C54885 + (C29994 - C29993) * C54751) *
                C38291 +
            (C59474 * C54884 + C60273 * C54750 + (C29359 - C29360) * C54885 +
             (C29995 - C29996) * C54751) *
                C38292) *
               C89338 +
           ((C31373 * C54884 + C31855 * C54750 + (C31376 - C31375) * C54885 +
             (C31857 - C31856) * C54751) *
                C38291 +
            ((C29360 - C29359) * C54884 + (C29996 - C29995) * C54750 +
             (C180 * C29239 - C89236 * C29348) * C54885 +
             (C180 * C29887 - C89236 * C29989) * C54751) *
                C38292) *
               C11948) *
              C89189) *
         C89118) /
        (p * q * std::sqrt(p + q));
    d2eezz[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C54884 * C264 - C55318 * C106 - C54884 * C565 + C54750 * C700 +
             C54885 * C1934 - C55319 * C1724 - C54885 * C2330 +
             C54751 * C2512) *
                C89236 * C38291 +
            (C55357 + C55358) * C89236 * C38292) *
               C89337 -
           ((C57361 + C57362) * C89236 * C38292 +
            (C54885 * C1937 - C55319 * C1725 - C54885 * C2333 + C54751 * C2513 +
             C54884 * C1934 - C55318 * C1724 - C54884 * C2330 +
             C54750 * C2512) *
                C89236 * C38291) *
               C89338 +
           ((C54884 * C1937 - C55318 * C1725 - C54884 * C2333 + C54750 * C2513 +
             C54885 * C10660 - C55319 * C10544 - C54885 * C10878 +
             C54751 * C10989) *
                C89236 * C38291 +
            (C57363 + C57364) * C89236 * C38292) *
               C11948) *
              C89307 +
          (((C54884 * C4325 - C55318 * C4097 - C54884 * C4767 + C54750 * C4979 +
             C54885 * C6413 - C55319 * C6249 - C54885 * C6727 +
             C54751 * C6886) *
                C89236 * C38291 +
            (C60416 + C60417) * C89236 * C38292) *
               C89338 -
           ((C56306 + C56307) * C89236 * C38292 +
            (C54885 * C4325 - C55319 * C4097 - C54885 * C4767 + C54751 * C4979 +
             C54884 * C1029 - C55318 * C819 - C54884 * C1425 + C54750 * C1607) *
                C89236 * C38291) *
               C89337 -
           ((C54885 * C29460 - C55319 * C29239 - C54885 * C29887 +
             C54751 * C30094 + C54884 * C6414 - C55318 * C6248 -
             C54884 * C6728 + C54750 * C6885) *
                C89236 * C38292 +
            (C54885 * C23264 - C55319 * C23153 - C54885 * C23476 +
             C54751 * C23583 + C54884 * C6413 - C55318 * C6249 -
             C54884 * C6727 + C54750 * C6886) *
                C89236 * C38291) *
               C11948) *
              C89189) *
         C89118) /
        (p * q * std::sqrt(p + q));
    d2eexx[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C38295 * C112 - C38296 * C106 - C38295 * C113 + C38291 * C124 +
             C38297 * C114 - C38298 * C107 - C38297 * C115 + C38292 * C125) *
                C54750 +
            (C56456 + C56457) * C54751) *
               C89236 * C9228 -
           ((C56458 + C56459) * C54751 + (C56457 + C56456) * C54750) * C89236 *
               C89217) *
              C812 +
          (((C42922 + C42921) * C54750 + (C45635 + C45636) * C54751) * C89236 *
               C89217 -
           ((C42921 + C42922) * C54751 + (C39063 + C39062) * C54750) * C89236 *
               C9228) *
              C813 +
          (((C39065 + C39064) * C54750 + (C48595 + C48596) * C54751) * C89236 *
               C9228 -
           ((C38297 * C14605 - C38298 * C14602 - C38297 * C14606 +
             C38292 * C14608 + C38295 * C14603 - C38296 * C14601 -
             C38295 * C14604 + C38291 * C14607) *
                C54751 +
            (C48596 + C48595) * C54750) *
               C89236 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C38295 * C112 - C38296 * C106 - C38295 * C113 + C38291 * C124 +
             C38297 * C114 - C38298 * C107 - C38297 * C115 + C38292 * C125) *
                C54750 +
            (C56456 + C56457) * C54751) *
               C89236 * C9228 -
           ((C56458 + C56459) * C54751 + (C56457 + C56456) * C54750) * C89236 *
               C89217) *
              C89137 * C5075 +
          (((C56460 + C56461) * C54750 + (C56462 + C56463) * C54751) * C89236 *
               C89217 -
           ((C56461 + C56460) * C54751 +
            (C38297 * C116 - C38298 * C108 - C38297 * C117 + C38292 * C126 +
             C38295 * C114 - C38296 * C107 - C38295 * C115 + C38291 * C125) *
                C54750) *
               C89236 * C9228) *
              C89137 * C5076 +
          (((C38295 * C116 - C38296 * C108 - C38295 * C117 + C38291 * C126 +
             C38297 * C118 - C38298 * C109 - C38297 * C119 + C38292 * C127) *
                C54750 +
            (C58383 + C58384) * C54751) *
               C89236 * C9228 -
           ((C38297 * C1744 - C38298 * C1729 - C38297 * C1745 + C38292 * C1753 +
             C38295 * C1740 - C38296 * C1727 - C38295 * C1741 +
             C38291 * C1751) *
                C54751 +
            (C58384 + C58383) * C54750) *
               C89236 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C38295 * C112 - C38296 * C106 - C38295 * C113 + C38291 * C124 +
            C38297 * C114 - C38298 * C107 - C38297 * C115 + C38292 * C125) *
               C54750 +
           (C56456 + C56457) * C54751) *
              C89236 * C10538 -
          ((C56458 + C56459) * C54751 + (C56457 + C56456) * C54750) * C89236 *
              C10539 +
          ((C56459 + C56458) * C54750 + (C67556 + C67557) * C54751) * C89236 *
              C10540 -
          ((C38297 * C27001 - C38298 * C26998 - C38297 * C27002 +
            C38292 * C27004 + C38295 * C26999 - C38296 * C26997 -
            C38295 * C27000 + C38291 * C27003) *
               C54751 +
           (C67557 + C67556) * C54750) *
              C89236 * C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q));
    d2eexy[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C38295 +
             (C89236 * C187 - C180 * C113) * C38291 + (C194 - C195) * C38297 +
             (C196 - C197) * C38292) *
                C54750 +
            ((C27126 - C27127) * C38295 + (C27128 - C27129) * C38291 +
             C56562 * C38297 + C56563 * C38292) *
                C54751) *
               C9228 +
           (((C27127 - C27126) * C38295 + (C27129 - C27128) * C38291 +
             C56564 * C38297 + C56565 * C38292) *
                C54750 +
            ((C27131 - C27130) * C38295 + (C27133 - C27132) * C38291 +
             C27138 * C38297 + C27139 * C38292) *
                C54751) *
               C89217) *
              C812 +
          ((((C180 * C819 - C89236 * C923) * C38295 +
             (C180 * C830 - C89236 * C931) * C38291 + (C940 - C941) * C38297 +
             (C942 - C943) * C38292) *
                C54750 +
            ((C29351 - C29352) * C38295 + (C29353 - C29354) * C38291 +
             C59472 * C38297 + C59473 * C38292) *
                C54751) *
               C9228 +
           (((C29352 - C29351) * C38295 + (C29354 - C29353) * C38291 +
             C59474 * C38297 + C59475 * C38292) *
                C54750 +
            ((C29356 - C29355) * C38295 + (C29358 - C29357) * C38291 +
             (C29359 - C29360) * C38297 + (C29361 - C29362) * C38292) *
                C54751) *
               C89217) *
              C813 +
          ((((C89236 * C926 - C180 * C820) * C38295 +
             (C89236 * C934 - C180 * C832) * C38291 + (C948 - C949) * C38297 +
             (C950 - C951) * C38292) *
                C54750 +
            ((C33629 - C33630) * C38295 + (C33631 - C33632) * C38291 +
             (C55559 - C55560) * C38297 + (C55561 - C55562) * C38292) *
                C54751) *
               C9228 +
           (((C33630 - C33629) * C38295 + (C33632 - C33631) * C38291 +
             (C55560 - C55559) * C38297 + (C55562 - C55561) * C38292) *
                C54750 +
            ((C33634 - C33633) * C38295 + (C33636 - C33635) * C38291 +
             (C180 * C14602 - C89236 * C14684) * C38297 +
             (C180 * C14606 - C89236 * C14686) * C38292) *
                C54751) *
               C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C38295 +
             (C89236 * C187 - C180 * C113) * C38291 + (C194 - C195) * C38297 +
             (C196 - C197) * C38292) *
                C54750 +
            ((C27126 - C27127) * C38295 + (C27128 - C27129) * C38291 +
             C56562 * C38297 + C56563 * C38292) *
                C54751) *
               C9228 +
           (((C27127 - C27126) * C38295 + (C27129 - C27128) * C38291 +
             C56564 * C38297 + C56565 * C38292) *
                C54750 +
            ((C27131 - C27130) * C38295 + (C27133 - C27132) * C38291 +
             C27138 * C38297 + C27139 * C38292) *
                C54751) *
               C89217) *
              C89137 * C5075 +
          ((((C195 - C194) * C38295 + (C197 - C196) * C38291 +
             (C199 - C198) * C38297 + (C201 - C200) * C38292) *
                C54750 +
            (C56564 * C38295 + C56565 * C38291 + C3433 * C38297 +
             C3434 * C38292) *
                C54751) *
               C9228 +
           ((C56562 * C38295 + C56563 * C38291 + C58483 * C38297 +
             C58484 * C38292) *
                C54750 +
            (C56566 * C38295 + C56567 * C38291 + (C1857 - C1858) * C38297 +
             (C1859 - C1860) * C38292) *
                C54751) *
               C89217) *
              C89137 * C5076 +
          (((C210 * C38295 + C211 * C38291 + (C203 - C202) * C38297 +
             (C205 - C204) * C38292) *
                C54750 +
            (C58483 * C38295 + C58484 * C38291 + (C3435 - C3436) * C38297 +
             (C3437 - C3438) * C38292) *
                C54751) *
               C9228 +
           ((C3433 * C38295 + C3434 * C38291 + (C3436 - C3435) * C38297 +
             (C3438 - C3437) * C38292) *
                C54750 +
            ((C1858 - C1857) * C38295 + (C1860 - C1859) * C38291 +
             (C180 * C1729 - C89236 * C1835) * C38297 +
             (C180 * C1745 - C89236 * C1843) * C38292) *
                C54751) *
               C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C89236 * C181 - C180 * C106) * C38295 +
            (C89236 * C187 - C180 * C113) * C38291 + (C194 - C195) * C38297 +
            (C196 - C197) * C38292) *
               C54750 +
           ((C27126 - C27127) * C38295 + (C27128 - C27129) * C38291 +
            C56562 * C38297 + C56563 * C38292) *
               C54751) *
              C10538 +
          (((C27127 - C27126) * C38295 + (C27129 - C27128) * C38291 +
            C56564 * C38297 + C56565 * C38292) *
               C54750 +
           ((C27131 - C27130) * C38295 + (C27133 - C27132) * C38291 +
            C27138 * C38297 + C27139 * C38292) *
               C54751) *
              C10539 +
          ((C27144 * C38295 + C27145 * C38291 + C56566 * C38297 +
            C56567 * C38292) *
               C54750 +
           ((C27135 - C27134) * C38295 + (C27137 - C27136) * C38291 +
            (C27140 - C27141) * C38297 + (C27142 - C27143) * C38292) *
               C54751) *
              C10540 +
          ((C35620 * C38295 + C35621 * C38291 + (C27141 - C27140) * C38297 +
            (C27143 - C27142) * C38292) *
               C54750 +
           ((C35623 - C35622) * C38295 + (C35625 - C35624) * C38291 +
            (C180 * C26998 - C89236 * C27122) * C38297 +
            (C180 * C27002 - C89236 * C27124) * C38292) *
               C54751) *
              C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q));
    d2eexz[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                C38295 +
            (C54750 * C270 - C54884 * C113 + C54751 * C1942 - C54885 * C1735) *
                C38291 +
            (C54887 - C54888 + C54889 - C54890) * C38297 +
            (C54891 - C54892 + C54893 - C54894) * C38292) *
               C89236 * C9228 +
           ((C54884 * C1724 - C54750 * C1934 + C54885 * C1725 -
             C54751 * C1937) *
                C38295 +
            (C54884 * C1735 - C54750 * C1942 + C54885 * C1737 -
             C54751 * C1945) *
                C38291 +
            (C56666 - C56667 + C56668 - C56669) * C38297 +
            (C56670 - C56671 + C56672 - C56673) * C38292) *
               C89236 * C89217) *
              C812 +
          (((C54884 * C819 - C54750 * C1029 + C54885 * C4097 - C54751 * C4325) *
                C38295 +
            (C54884 * C830 - C54750 * C1037 + C54885 * C4102 - C54751 * C4329) *
                C38291 +
            (C55661 - C55662 + C55663 - C55664) * C38297 +
            (C55665 - C55666 + C55667 - C55668) * C38292) *
               C89236 * C9228 +
           ((C54750 * C4325 - C54884 * C4097 + C54751 * C6413 -
             C54885 * C6249) *
                C38295 +
            (C54750 * C4329 - C54884 * C4102 + C54751 * C6416 -
             C54885 * C6255) *
                C38291 +
            (C59606 - C59607 + C59608 - C59609) * C38297 +
            (C59610 - C59611 + C59612 - C59613) * C38292) *
               C89236 * C89217) *
              C813 +
          (((C54750 * C1032 - C54884 * C820 + C54751 * C8680 - C54885 * C8516) *
                C38295 +
            (C54750 * C1040 - C54884 * C832 + C54751 * C8683 - C54885 * C8522) *
                C38291 +
            (C55669 - C55670 + C55671 - C55672) * C38297 +
            (C55673 - C55674 + C55675 - C55676) * C38292) *
               C89236 * C9228 +
           ((C54884 * C8516 - C54750 * C8680 + C54885 * C14601 -
             C54751 * C14761) *
                C38295 +
            (C54884 * C8522 - C54750 * C8683 + C54885 * C14604 -
             C54751 * C14763) *
                C38291 +
            (C54884 * C8515 - C54750 * C8681 + C54885 * C14602 -
             C54751 * C14762) *
                C38297 +
            (C54884 * C8520 - C54750 * C8684 + C54885 * C14606 -
             C54751 * C14764) *
                C38292) *
               C89236 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                C38295 +
            (C54750 * C270 - C54884 * C113 + C54751 * C1942 - C54885 * C1735) *
                C38291 +
            (C54887 - C54888 + C54889 - C54890) * C38297 +
            (C54891 - C54892 + C54893 - C54894) * C38292) *
               C89236 * C9228 +
           ((C54884 * C1724 - C54750 * C1934 + C54885 * C1725 -
             C54751 * C1937) *
                C38295 +
            (C54884 * C1735 - C54750 * C1942 + C54885 * C1737 -
             C54751 * C1945) *
                C38291 +
            (C56666 - C56667 + C56668 - C56669) * C38297 +
            (C56670 - C56671 + C56672 - C56673) * C38292) *
               C89236 * C89217) *
              C89137 * C5075 +
          (((C54888 - C54887 + C54890 - C54889) * C38295 +
            (C54892 - C54891 + C54894 - C54893) * C38291 +
            (C54895 - C54896 + C54897 - C54898) * C38297 +
            (C54899 - C54900 + C54901 - C54902) * C38292) *
               C89236 * C9228 +
           ((C56667 - C56666 + C56669 - C56668) * C38295 +
            (C56671 - C56670 + C56673 - C56672) * C38291 +
            (C58583 - C58584 + C58585 - C58586) * C38297 +
            (C58587 - C58588 + C58589 - C58590) * C38292) *
               C89236 * C89217) *
              C89137 * C5076 +
          (((C54896 - C54895 + C54898 - C54897) * C38295 +
            (C54900 - C54899 + C54902 - C54901) * C38291 +
            (C54903 - C54904 + C54905 - C54906) * C38297 +
            (C54907 - C54908 + C54909 - C54910) * C38292) *
               C89236 * C9228 +
           ((C58584 - C58583 + C58586 - C58585) * C38295 +
            (C58588 - C58587 + C58590 - C58589) * C38291 +
            (C54884 * C1728 - C54750 * C1940 + C54885 * C1729 -
             C54751 * C1941) *
                C38297 +
            (C54884 * C1743 - C54750 * C1948 + C54885 * C1745 -
             C54751 * C1949) *
                C38292) *
               C89236 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
               C38295 +
           (C54750 * C270 - C54884 * C113 + C54751 * C1942 - C54885 * C1735) *
               C38291 +
           (C54887 - C54888 + C54889 - C54890) * C38297 +
           (C54891 - C54892 + C54893 - C54894) * C38292) *
              C89236 * C10538 +
          ((C54884 * C1724 - C54750 * C1934 + C54885 * C1725 - C54751 * C1937) *
               C38295 +
           (C54884 * C1735 - C54750 * C1942 + C54885 * C1737 - C54751 * C1945) *
               C38291 +
           (C56666 - C56667 + C56668 - C56669) * C38297 +
           (C56670 - C56671 + C56672 - C56673) * C38292) *
              C89236 * C10539 +
          ((C54750 * C1937 - C54884 * C1725 + C54751 * C10660 -
            C54885 * C10544) *
               C38295 +
           (C54750 * C1945 - C54884 * C1737 + C54751 * C10663 -
            C54885 * C10550) *
               C38291 +
           (C56674 - C56675 + C56676 - C56677) * C38297 +
           (C56678 - C56679 + C56680 - C56681) * C38292) *
              C89236 * C10540 +
          ((C54884 * C10544 - C54750 * C10660 + C54885 * C26997 -
            C54751 * C27225) *
               C38295 +
           (C54884 * C10550 - C54750 * C10663 + C54885 * C27000 -
            C54751 * C27227) *
               C38291 +
           (C54884 * C10543 - C54750 * C10661 + C54885 * C26998 -
            C54751 * C27226) *
               C38297 +
           (C54884 * C10548 - C54750 * C10664 + C54885 * C27002 -
            C54751 * C27228) *
               C38292) *
              C89236 * C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q));
    d2eeyx[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                 C180 +
             (C38291 * C352 - C38295 * C346 + C38292 * C353 - C38297 * C347) *
                 C89236) *
                C54750 +
            ((C56780 - C56781 + C56782 - C56783) * C180 +
             (C56784 - C56785 + C56786 - C56787) * C89236) *
                C54751) *
               C9228 +
           (((C56781 - C56780 + C56783 - C56782) * C180 +
             (C56785 - C56784 + C56787 - C56786) * C89236) *
                C54750 +
            ((C56788 - C56789 + C56790 - C56791) * C180 +
             (C56792 - C56793 + C56794 - C56795) * C89236) *
                C54751) *
               C89217) *
              C812 +
          ((((C39387 - C39386 + C39389 - C39388) * C180 +
             (C39391 - C39390 + C39393 - C39392) * C89236) *
                C54750 +
            ((C43327 - C43328 + C43329 - C43330) * C180 +
             (C43331 - C43332 + C43333 - C43334) * C89236) *
                C54751) *
               C9228 +
           (((C43328 - C43327 + C43330 - C43329) * C180 +
             (C43332 - C43331 + C43334 - C43333) * C89236) *
                C54750 +
            ((C45931 - C45932 + C45933 - C45934) * C180 +
             (C45935 - C45936 + C45937 - C45938) * C89236) *
                C54751) *
               C89217) *
              C813 +
          ((((C39395 - C39394 + C39397 - C39396) * C180 +
             (C39399 - C39398 + C39401 - C39400) * C89236) *
                C54750 +
            ((C48891 - C48892 + C48893 - C48894) * C180 +
             (C48895 - C48896 + C48897 - C48898) * C89236) *
                C54751) *
               C9228 +
           (((C48892 - C48891 + C48894 - C48893) * C180 +
             (C48896 - C48895 + C48898 - C48897) * C89236) *
                C54750 +
            ((C38295 * C14601 - C38291 * C14603 + C38297 * C14602 -
              C38292 * C14605) *
                 C180 +
             (C38295 * C14839 - C38291 * C14841 + C38297 * C14840 -
              C38292 * C14842) *
                 C89236) *
                C54751) *
               C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                 C180 +
             (C38291 * C352 - C38295 * C346 + C38292 * C353 - C38297 * C347) *
                 C89236) *
                C54750 +
            ((C56780 - C56781 + C56782 - C56783) * C180 +
             (C56784 - C56785 + C56786 - C56787) * C89236) *
                C54751) *
               C9228 +
           (((C56781 - C56780 + C56783 - C56782) * C180 +
             (C56785 - C56784 + C56787 - C56786) * C89236) *
                C54750 +
            ((C56788 - C56789 + C56790 - C56791) * C180 +
             (C56792 - C56793 + C56794 - C56795) * C89236) *
                C54751) *
               C89217) *
              C89137 * C5075 +
          ((((C38295 * C107 - C38291 * C114 + C38297 * C108 - C38292 * C116) *
                 C180 +
             (C38295 * C347 - C38291 * C353 + C38297 * C348 - C38292 * C354) *
                 C89236) *
                C54750 +
            ((C56796 - C56797 + C56798 - C56799) * C180 +
             (C56800 - C56801 + C56802 - C56803) * C89236) *
                C54751) *
               C9228 +
           (((C56797 - C56796 + C56799 - C56798) * C180 +
             (C56801 - C56800 + C56803 - C56802) * C89236) *
                C54750 +
            ((C56804 - C56805 + C56806 - C56807) * C180 +
             (C56808 - C56809 + C56810 - C56811) * C89236) *
                C54751) *
               C89217) *
              C89137 * C5076 +
          ((((C38291 * C116 - C38295 * C108 + C38292 * C118 - C38297 * C109) *
                 C180 +
             (C38291 * C354 - C38295 * C348 + C38292 * C355 - C38297 * C349) *
                 C89236) *
                C54750 +
            ((C58689 - C58690 + C58691 - C58692) * C180 +
             (C58693 - C58694 + C58695 - C58696) * C89236) *
                C54751) *
               C9228 +
           (((C58690 - C58689 + C58692 - C58691) * C180 +
             (C58694 - C58693 + C58696 - C58695) * C89236) *
                C54750 +
            ((C38295 * C1727 - C38291 * C1740 + C38297 * C1729 -
              C38292 * C1744) *
                 C180 +
             (C38295 * C2045 - C38291 * C2053 + C38297 * C2047 -
              C38292 * C2055) *
                 C89236) *
                C54751) *
               C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                C180 +
            (C38291 * C352 - C38295 * C346 + C38292 * C353 - C38297 * C347) *
                C89236) *
               C54750 +
           ((C56780 - C56781 + C56782 - C56783) * C180 +
            (C56784 - C56785 + C56786 - C56787) * C89236) *
               C54751) *
              C10538 +
          (((C56781 - C56780 + C56783 - C56782) * C180 +
            (C56785 - C56784 + C56787 - C56786) * C89236) *
               C54750 +
           ((C56788 - C56789 + C56790 - C56791) * C180 +
            (C56792 - C56793 + C56794 - C56795) * C89236) *
               C54751) *
              C10539 +
          (((C56789 - C56788 + C56791 - C56790) * C180 +
            (C56793 - C56792 + C56795 - C56794) * C89236) *
               C54750 +
           ((C67756 - C67757 + C67758 - C67759) * C180 +
            (C67760 - C67761 + C67762 - C67763) * C89236) *
               C54751) *
              C10540 +
          (((C67757 - C67756 + C67759 - C67758) * C180 +
            (C67761 - C67760 + C67763 - C67762) * C89236) *
               C54750 +
           ((C38295 * C26997 - C38291 * C26999 + C38297 * C26998 -
             C38292 * C27001) *
                C180 +
            (C38295 * C27303 - C38291 * C27305 + C38297 * C27304 -
             C38292 * C27306) *
                C89236) *
               C54751) *
              C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q));
    d2eeyy[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) *
                 C38291 +
             C440 * C38292) *
                C54750 +
            (C56910 + C56911) * C54751) *
               C9228 -
           ((C56912 + C56913) * C54751 + (C56911 + C56910) * C54750) * C89217) *
              C812 +
          (((C59874 + C59875) * C54750 + (C62384 + C62385) * C54751) * C89217 -
           ((C59875 + C59874) * C54751 +
            (C1259 * C38292 +
             (C180 * C923 - C408 * C819 - C180 * C1135 + C89236 * C1227) *
                 C38291) *
                C54750) *
               C9228) *
              C813 +
          ((((C180 * C926 - C408 * C820 - C180 * C1138 + C89236 * C1228) *
                 C38291 +
             C1260 * C38292) *
                C54750 +
            (C65320 + C65321) * C54751) *
               C9228 -
           (((C180 * C14684 - C408 * C14602 - C180 * C14840 + C89236 * C14918) *
                 C38292 +
             C33872 * C38291) *
                C54751 +
            (C65321 + C65320) * C54750) *
               C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) *
                 C38291 +
             C440 * C38292) *
                C54750 +
            (C56910 + C56911) * C54751) *
               C9228 -
           ((C56912 + C56913) * C54751 + (C56911 + C56910) * C54750) * C89217) *
              C89137 * C5075 +
          (((C56914 + C56915) * C54750 + (C56916 + C56917) * C54751) * C89217 -
           ((C56915 + C56914) * C54751 +
            (C441 * C38292 + C440 * C38291) * C54750) *
               C9228) *
              C89137 * C5076 +
          (((C441 * C38291 + C442 * C38292) * C54750 +
            (C58795 + C58796) * C54751) *
               C9228 -
           (((C180 * C1835 - C408 * C1729 - C180 * C2047 + C89236 * C2137) *
                 C38292 +
             C2166 * C38291) *
                C54751 +
            (C58796 + C58795) * C54750) *
               C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C38291 +
            C440 * C38292) *
               C54750 +
           (C56910 + C56911) * C54751) *
              C10538 -
          ((C56912 + C56913) * C54751 + (C56911 + C56910) * C54750) * C10539 +
          ((C56913 + C56912) * C54750 + (C67830 + C67831) * C54751) * C10540 -
          (((C180 * C27122 - C408 * C26998 - C180 * C27304 + C89236 * C27416) *
                C38292 +
            C35799 * C38291) *
               C54751 +
           (C67831 + C67830) * C54750) *
              C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q));
    d2eeyz[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                 C180 +
             (C54750 * C493 - C54884 * C346 + C54751 * C2240 - C54885 * C2040) *
                 C89236) *
                C38291 +
            ((C54887 - C54888 + C54889 - C54890) * C180 +
             (C55109 - C55110 + C55111 - C55112) * C89236) *
                C38292) *
               C9228 +
           (((C54884 * C1724 - C54750 * C1934 + C54885 * C1725 -
              C54751 * C1937) *
                 C180 +
             (C54884 * C2040 - C54750 * C2240 + C54885 * C2043 -
              C54751 * C2243) *
                 C89236) *
                C38291 +
            ((C56666 - C56667 + C56668 - C56669) * C180 +
             (C57016 - C57017 + C57018 - C57019) * C89236) *
                C38292) *
               C89217) *
              C812 +
          ((((C54884 * C819 - C54750 * C1029 + C54885 * C4097 -
              C54751 * C4325) *
                 C180 +
             (C54884 * C1135 - C54750 * C1335 + C54885 * C4439 -
              C54751 * C4661) *
                 C89236) *
                C38291 +
            ((C55661 - C55662 + C55663 - C55664) * C180 +
             (C55978 - C55979 + C55980 - C55981) * C89236) *
                C38292) *
               C9228 +
           (((C54750 * C4325 - C54884 * C4097 + C54751 * C6413 -
              C54885 * C6249) *
                 C180 +
             (C54750 * C4661 - C54884 * C4439 + C54751 * C6650 -
              C54885 * C6493) *
                 C89236) *
                C38291 +
            ((C59606 - C59607 + C59608 - C59609) * C180 +
             (C60008 - C60009 + C60010 - C60011) * C89236) *
                C38292) *
               C89217) *
              C813 +
          ((((C54750 * C1032 - C54884 * C820 + C54751 * C8680 -
              C54885 * C8516) *
                 C180 +
             (C54750 * C1338 - C54884 * C1138 + C54751 * C8917 -
              C54885 * C8760) *
                 C89236) *
                C38291 +
            ((C55669 - C55670 + C55671 - C55672) * C180 +
             (C55982 - C55983 + C55984 - C55985) * C89236) *
                C38292) *
               C9228 +
           (((C54884 * C8516 - C54750 * C8680 + C54885 * C14601 -
              C54751 * C14761) *
                 C180 +
             (C54884 * C8760 - C54750 * C8917 + C54885 * C14839 -
              C54751 * C14993) *
                 C89236) *
                C38291 +
            ((C54884 * C8515 - C54750 * C8681 + C54885 * C14602 -
              C54751 * C14762) *
                 C180 +
             (C54884 * C8761 - C54750 * C8918 + C54885 * C14840 -
              C54751 * C14994) *
                 C89236) *
                C38292) *
               C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                 C180 +
             (C54750 * C493 - C54884 * C346 + C54751 * C2240 - C54885 * C2040) *
                 C89236) *
                C38291 +
            ((C54887 - C54888 + C54889 - C54890) * C180 +
             (C55109 - C55110 + C55111 - C55112) * C89236) *
                C38292) *
               C9228 +
           (((C54884 * C1724 - C54750 * C1934 + C54885 * C1725 -
              C54751 * C1937) *
                 C180 +
             (C54884 * C2040 - C54750 * C2240 + C54885 * C2043 -
              C54751 * C2243) *
                 C89236) *
                C38291 +
            ((C56666 - C56667 + C56668 - C56669) * C180 +
             (C57016 - C57017 + C57018 - C57019) * C89236) *
                C38292) *
               C89217) *
              C89137 * C5075 +
          ((((C54888 - C54887 + C54890 - C54889) * C180 +
             (C55110 - C55109 + C55112 - C55111) * C89236) *
                C38291 +
            ((C54895 - C54896 + C54897 - C54898) * C180 +
             (C55113 - C55114 + C55115 - C55116) * C89236) *
                C38292) *
               C9228 +
           (((C56667 - C56666 + C56669 - C56668) * C180 +
             (C57017 - C57016 + C57019 - C57018) * C89236) *
                C38291 +
            ((C58583 - C58584 + C58585 - C58586) * C180 +
             (C58895 - C58896 + C58897 - C58898) * C89236) *
                C38292) *
               C89217) *
              C89137 * C5076 +
          ((((C54896 - C54895 + C54898 - C54897) * C180 +
             (C55114 - C55113 + C55116 - C55115) * C89236) *
                C38291 +
            ((C54903 - C54904 + C54905 - C54906) * C180 +
             (C55117 - C55118 + C55119 - C55120) * C89236) *
                C38292) *
               C9228 +
           (((C58584 - C58583 + C58586 - C58585) * C180 +
             (C58896 - C58895 + C58898 - C58897) * C89236) *
                C38291 +
            ((C54884 * C1728 - C54750 * C1940 + C54885 * C1729 -
              C54751 * C1941) *
                 C180 +
             (C54884 * C2046 - C54750 * C2246 + C54885 * C2047 -
              C54751 * C2247) *
                 C89236) *
                C38292) *
               C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                C180 +
            (C54750 * C493 - C54884 * C346 + C54751 * C2240 - C54885 * C2040) *
                C89236) *
               C38291 +
           ((C54887 - C54888 + C54889 - C54890) * C180 +
            (C55109 - C55110 + C55111 - C55112) * C89236) *
               C38292) *
              C10538 +
          (((C54884 * C1724 - C54750 * C1934 + C54885 * C1725 -
             C54751 * C1937) *
                C180 +
            (C54884 * C2040 - C54750 * C2240 + C54885 * C2043 -
             C54751 * C2243) *
                C89236) *
               C38291 +
           ((C56666 - C56667 + C56668 - C56669) * C180 +
            (C57016 - C57017 + C57018 - C57019) * C89236) *
               C38292) *
              C10539 +
          (((C54750 * C1937 - C54884 * C1725 + C54751 * C10660 -
             C54885 * C10544) *
                C180 +
            (C54750 * C2243 - C54884 * C2043 + C54751 * C10825 -
             C54885 * C10716) *
                C89236) *
               C38291 +
           ((C56674 - C56675 + C56676 - C56677) * C180 +
            (C57020 - C57021 + C57022 - C57023) * C89236) *
               C38292) *
              C10540 +
          (((C54884 * C10544 - C54750 * C10660 + C54885 * C26997 -
             C54751 * C27225) *
                C180 +
            (C54884 * C10716 - C54750 * C10825 + C54885 * C27303 -
             C54751 * C27525) *
                C89236) *
               C38291 +
           ((C54884 * C10543 - C54750 * C10661 + C54885 * C26998 -
             C54751 * C27226) *
                C180 +
            (C54884 * C10717 - C54750 * C10826 + C54885 * C27304 -
             C54751 * C27526) *
                C89236) *
               C38292) *
              C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q));
    d2eezx[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                C54884 +
            (C38291 * C571 - C38295 * C565 + C38292 * C572 - C38297 * C566) *
                C54750 +
            (C56780 - C56781 + C56782 - C56783) * C54885 +
            (C57122 - C57123 + C57124 - C57125) * C54751) *
               C89236 * C9228 +
           ((C56781 - C56780 + C56783 - C56782) * C54884 +
            (C57123 - C57122 + C57125 - C57124) * C54750 +
            (C56788 - C56789 + C56790 - C56791) * C54885 +
            (C57126 - C57127 + C57128 - C57129) * C54751) *
               C89236 * C89217) *
              C812 +
          (((C39387 - C39386 + C39389 - C39388) * C54884 +
            (C39744 - C39743 + C39746 - C39745) * C54750 +
            (C43327 - C43328 + C43329 - C43330) * C54885 +
            (C43749 - C43750 + C43751 - C43752) * C54751) *
               C89236 * C9228 +
           ((C43328 - C43327 + C43330 - C43329) * C54884 +
            (C43750 - C43749 + C43752 - C43751) * C54750 +
            (C45931 - C45932 + C45933 - C45934) * C54885 +
            (C46233 - C46234 + C46235 - C46236) * C54751) *
               C89236 * C89217) *
              C813 +
          (((C39395 - C39394 + C39397 - C39396) * C54884 +
            (C39748 - C39747 + C39750 - C39749) * C54750 +
            (C48891 - C48892 + C48893 - C48894) * C54885 +
            (C49193 - C49194 + C49195 - C49196) * C54751) *
               C89236 * C9228 +
           ((C48892 - C48891 + C48894 - C48893) * C54884 +
            (C49194 - C49193 + C49196 - C49195) * C54750 +
            (C38295 * C14601 - C38291 * C14603 + C38297 * C14602 -
             C38292 * C14605) *
                C54885 +
            (C38295 * C15069 - C38291 * C15071 + C38297 * C15070 -
             C38292 * C15072) *
                C54751) *
               C89236 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                C54884 +
            (C38291 * C571 - C38295 * C565 + C38292 * C572 - C38297 * C566) *
                C54750 +
            (C56780 - C56781 + C56782 - C56783) * C54885 +
            (C57122 - C57123 + C57124 - C57125) * C54751) *
               C89236 * C9228 +
           ((C56781 - C56780 + C56783 - C56782) * C54884 +
            (C57123 - C57122 + C57125 - C57124) * C54750 +
            (C56788 - C56789 + C56790 - C56791) * C54885 +
            (C57126 - C57127 + C57128 - C57129) * C54751) *
               C89236 * C89217) *
              C89137 * C5075 +
          (((C38295 * C107 - C38291 * C114 + C38297 * C108 - C38292 * C116) *
                C54884 +
            (C38295 * C566 - C38291 * C572 + C38297 * C567 - C38292 * C573) *
                C54750 +
            (C56796 - C56797 + C56798 - C56799) * C54885 +
            (C57130 - C57131 + C57132 - C57133) * C54751) *
               C89236 * C9228 +
           ((C56797 - C56796 + C56799 - C56798) * C54884 +
            (C57131 - C57130 + C57133 - C57132) * C54750 +
            (C56804 - C56805 + C56806 - C56807) * C54885 +
            (C57134 - C57135 + C57136 - C57137) * C54751) *
               C89236 * C89217) *
              C89137 * C5076 +
          (((C38291 * C116 - C38295 * C108 + C38292 * C118 - C38297 * C109) *
                C54884 +
            (C38291 * C573 - C38295 * C567 + C38292 * C574 - C38297 * C568) *
                C54750 +
            (C58689 - C58690 + C58691 - C58692) * C54885 +
            (C58997 - C58998 + C58999 - C59000) * C54751) *
               C89236 * C9228 +
           ((C58690 - C58689 + C58692 - C58691) * C54884 +
            (C58998 - C58997 + C59000 - C58999) * C54750 +
            (C38295 * C1727 - C38291 * C1740 + C38297 * C1729 -
             C38292 * C1744) *
                C54885 +
            (C38295 * C2335 - C38291 * C2343 + C38297 * C2337 -
             C38292 * C2345) *
                C54751) *
               C89236 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
               C54884 +
           (C38291 * C571 - C38295 * C565 + C38292 * C572 - C38297 * C566) *
               C54750 +
           (C56780 - C56781 + C56782 - C56783) * C54885 +
           (C57122 - C57123 + C57124 - C57125) * C54751) *
              C89236 * C10538 +
          ((C56781 - C56780 + C56783 - C56782) * C54884 +
           (C57123 - C57122 + C57125 - C57124) * C54750 +
           (C56788 - C56789 + C56790 - C56791) * C54885 +
           (C57126 - C57127 + C57128 - C57129) * C54751) *
              C89236 * C10539 +
          ((C56789 - C56788 + C56791 - C56790) * C54884 +
           (C57127 - C57126 + C57129 - C57128) * C54750 +
           (C67756 - C67757 + C67758 - C67759) * C54885 +
           (C67964 - C67965 + C67966 - C67967) * C54751) *
              C89236 * C10540 +
          ((C67757 - C67756 + C67759 - C67758) * C54884 +
           (C67965 - C67964 + C67967 - C67966) * C54750 +
           (C38295 * C26997 - C38291 * C26999 + C38297 * C26998 -
            C38292 * C27001) *
               C54885 +
           (C38295 * C27601 - C38291 * C27603 + C38297 * C27602 -
            C38292 * C27604) *
               C54751) *
              C89236 * C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q));
    d2eezy[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C54884 +
             (C89236 * C627 - C180 * C565) * C54750 +
             (C27126 - C27127) * C54885 + (C27696 - C27697) * C54751) *
                C38291 +
            ((C194 - C195) * C54884 + (C634 - C635) * C54750 + C56562 * C54885 +
             C57236 * C54751) *
                C38292) *
               C9228 +
           (((C27127 - C27126) * C54884 + (C27697 - C27696) * C54750 +
             (C27131 - C27130) * C54885 + (C27699 - C27698) * C54751) *
                C38291 +
            (C56564 * C54884 + C57237 * C54750 + C27138 * C54885 +
             C27702 * C54751) *
                C38292) *
               C89217) *
              C812 +
          ((((C180 * C819 - C89236 * C923) * C54884 +
             (C180 * C1425 - C89236 * C1515) * C54750 +
             (C29351 - C29352) * C54885 + (C29991 - C29992) * C54751) *
                C38291 +
            ((C940 - C941) * C54884 + (C1524 - C1525) * C54750 +
             C59472 * C54885 + C60272 * C54751) *
                C38292) *
               C9228 +
           (((C29352 - C29351) * C54884 + (C29992 - C29991) * C54750 +
             (C29356 - C29355) * C54885 + (C29994 - C29993) * C54751) *
                C38291 +
            (C59474 * C54884 + C60273 * C54750 + (C29359 - C29360) * C54885 +
             (C29995 - C29996) * C54751) *
                C38292) *
               C89217) *
              C813 +
          ((((C89236 * C926 - C180 * C820) * C54884 +
             (C89236 * C1518 - C180 * C1428) * C54750 +
             (C33629 - C33630) * C54885 + (C34097 - C34098) * C54751) *
                C38291 +
            ((C948 - C949) * C54884 + (C1528 - C1529) * C54750 +
             (C55559 - C55560) * C54885 + (C56182 - C56183) * C54751) *
                C38292) *
               C9228 +
           (((C33630 - C33629) * C54884 + (C34098 - C34097) * C54750 +
             (C33634 - C33633) * C54885 + (C34100 - C34099) * C54751) *
                C38291 +
            ((C55560 - C55559) * C54884 + (C56183 - C56182) * C54750 +
             (C180 * C14602 - C89236 * C14684) * C54885 +
             (C180 * C15070 - C89236 * C15148) * C54751) *
                C38292) *
               C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C54884 +
             (C89236 * C627 - C180 * C565) * C54750 +
             (C27126 - C27127) * C54885 + (C27696 - C27697) * C54751) *
                C38291 +
            ((C194 - C195) * C54884 + (C634 - C635) * C54750 + C56562 * C54885 +
             C57236 * C54751) *
                C38292) *
               C9228 +
           (((C27127 - C27126) * C54884 + (C27697 - C27696) * C54750 +
             (C27131 - C27130) * C54885 + (C27699 - C27698) * C54751) *
                C38291 +
            (C56564 * C54884 + C57237 * C54750 + C27138 * C54885 +
             C27702 * C54751) *
                C38292) *
               C89217) *
              C89137 * C5075 +
          ((((C195 - C194) * C54884 + (C635 - C634) * C54750 + C56564 * C54885 +
             C57237 * C54751) *
                C38291 +
            ((C199 - C198) * C54884 + (C638 - C637) * C54750 + C3433 * C54885 +
             C3912 * C54751) *
                C38292) *
               C9228 +
           ((C56562 * C54884 + C57236 * C54750 + C56566 * C54885 +
             C57238 * C54751) *
                C38291 +
            (C58483 * C54884 + C59099 * C54750 + (C1857 - C1858) * C54885 +
             (C2435 - C2436) * C54751) *
                C38292) *
               C89217) *
              C89137 * C5076 +
          (((C210 * C54884 + C644 * C54750 + C58483 * C54885 +
             C59099 * C54751) *
                C38291 +
            ((C203 - C202) * C54884 + (C641 - C640) * C54750 +
             (C3435 - C3436) * C54885 + (C3913 - C3914) * C54751) *
                C38292) *
               C9228 +
           ((C3433 * C54884 + C3912 * C54750 + (C1858 - C1857) * C54885 +
             (C2436 - C2435) * C54751) *
                C38291 +
            ((C3436 - C3435) * C54884 + (C3914 - C3913) * C54750 +
             (C180 * C1729 - C89236 * C1835) * C54885 +
             (C180 * C2337 - C89236 * C2427) * C54751) *
                C38292) *
               C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C89236 * C181 - C180 * C106) * C54884 +
            (C89236 * C627 - C180 * C565) * C54750 +
            (C27126 - C27127) * C54885 + (C27696 - C27697) * C54751) *
               C38291 +
           ((C194 - C195) * C54884 + (C634 - C635) * C54750 + C56562 * C54885 +
            C57236 * C54751) *
               C38292) *
              C10538 +
          (((C27127 - C27126) * C54884 + (C27697 - C27696) * C54750 +
            (C27131 - C27130) * C54885 + (C27699 - C27698) * C54751) *
               C38291 +
           (C56564 * C54884 + C57237 * C54750 + C27138 * C54885 +
            C27702 * C54751) *
               C38292) *
              C10539 +
          ((C27144 * C54884 + C27705 * C54750 + (C27135 - C27134) * C54885 +
            (C27701 - C27700) * C54751) *
               C38291 +
           (C56566 * C54884 + C57238 * C54750 + (C27140 - C27141) * C54885 +
            (C27703 - C27704) * C54751) *
               C38292) *
              C10540 +
          ((C35620 * C54884 + C35958 * C54750 + (C35623 - C35622) * C54885 +
            (C35960 - C35959) * C54751) *
               C38291 +
           ((C27141 - C27140) * C54884 + (C27704 - C27703) * C54750 +
            (C180 * C26998 - C89236 * C27122) * C54885 +
            (C180 * C27602 - C89236 * C27694) * C54751) *
               C38292) *
              C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q));
    d2eezz[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C54884 * C264 - C55318 * C106 - C54884 * C565 + C54750 * C700 +
             C54885 * C1934 - C55319 * C1724 - C54885 * C2330 +
             C54751 * C2512) *
                C89236 * C38291 +
            (C55357 + C55358) * C89236 * C38292) *
               C9228 -
           ((C57361 + C57362) * C89236 * C38292 +
            (C54885 * C1937 - C55319 * C1725 - C54885 * C2333 + C54751 * C2513 +
             C54884 * C1934 - C55318 * C1724 - C54884 * C2330 +
             C54750 * C2512) *
                C89236 * C38291) *
               C89217) *
              C812 +
          (((C54884 * C4325 - C55318 * C4097 - C54884 * C4767 + C54750 * C4979 +
             C54885 * C6413 - C55319 * C6249 - C54885 * C6727 +
             C54751 * C6886) *
                C89236 * C38291 +
            (C60416 + C60417) * C89236 * C38292) *
               C89217 -
           ((C56306 + C56307) * C89236 * C38292 +
            (C54885 * C4325 - C55319 * C4097 - C54885 * C4767 + C54751 * C4979 +
             C54884 * C1029 - C55318 * C819 - C54884 * C1425 + C54750 * C1607) *
                C89236 * C38291) *
               C9228) *
              C813 +
          (((C54884 * C1032 - C55318 * C820 - C54884 * C1428 + C54750 * C1608 +
             C54885 * C8680 - C55319 * C8516 - C54885 * C8994 +
             C54751 * C9153) *
                C89236 * C38291 +
            (C56308 + C56309) * C89236 * C38292) *
               C9228 -
           ((C54885 * C14762 - C55319 * C14602 - C54885 * C15070 +
             C54751 * C15224 + C54884 * C8681 - C55318 * C8515 -
             C54884 * C8995 + C54750 * C9152) *
                C89236 * C38292 +
            (C54885 * C14761 - C55319 * C14601 - C54885 * C15069 +
             C54751 * C15223 + C54884 * C8680 - C55318 * C8516 -
             C54884 * C8994 + C54750 * C9153) *
                C89236 * C38291) *
               C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C54884 * C264 - C55318 * C106 - C54884 * C565 + C54750 * C700 +
             C54885 * C1934 - C55319 * C1724 - C54885 * C2330 +
             C54751 * C2512) *
                C89236 * C38291 +
            (C55357 + C55358) * C89236 * C38292) *
               C9228 -
           ((C57361 + C57362) * C89236 * C38292 +
            (C54885 * C1937 - C55319 * C1725 - C54885 * C2333 + C54751 * C2513 +
             C54884 * C1934 - C55318 * C1724 - C54884 * C2330 +
             C54750 * C2512) *
                C89236 * C38291) *
               C89217) *
              C89137 * C5075 +
          (((C57362 + C57361) * C89236 * C38291 +
            (C59210 + C59211) * C89236 * C38292) *
               C89217 -
           ((C55359 + C55360) * C89236 * C38292 +
            (C55358 + C55357) * C89236 * C38291) *
               C9228) *
              C89137 * C5076 +
          (((C55360 + C55359) * C89236 * C38291 +
            (C55361 + C55362) * C89236 * C38292) *
               C9228 -
           ((C54885 * C1941 - C55319 * C1729 - C54885 * C2337 + C54751 * C2517 +
             C54884 * C1940 - C55318 * C1728 - C54884 * C2336 +
             C54750 * C2516) *
                C89236 * C38292 +
            (C59211 + C59210) * C89236 * C38291) *
               C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C54884 * C264 - C55318 * C106 - C54884 * C565 + C54750 * C700 +
            C54885 * C1934 - C55319 * C1724 - C54885 * C2330 + C54751 * C2512) *
               C89236 * C38291 +
           (C55357 + C55358) * C89236 * C38292) *
              C10538 -
          ((C57361 + C57362) * C89236 * C38292 +
           (C54885 * C1937 - C55319 * C1725 - C54885 * C2333 + C54751 * C2513 +
            C54884 * C1934 - C55318 * C1724 - C54884 * C2330 + C54750 * C2512) *
               C89236 * C38291) *
              C10539 +
          ((C54884 * C1937 - C55318 * C1725 - C54884 * C2333 + C54750 * C2513 +
            C54885 * C10660 - C55319 * C10544 - C54885 * C10878 +
            C54751 * C10989) *
               C89236 * C38291 +
           (C57363 + C57364) * C89236 * C38292) *
              C10540 -
          ((C54885 * C27226 - C55319 * C26998 - C54885 * C27602 +
            C54751 * C27780 + C54884 * C10661 - C55318 * C10543 -
            C54884 * C10879 + C54750 * C10988) *
               C89236 * C38292 +
           (C54885 * C27225 - C55319 * C26997 - C54885 * C27601 +
            C54751 * C27779 + C54884 * C10660 - C55318 * C10544 -
            C54884 * C10878 + C54750 * C10989) *
               C89236 * C38291) *
              C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q));
    d2eexx[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C38295 * C112 - C38296 * C106 - C38295 * C113 + C38291 * C124 +
             C38297 * C114 - C38298 * C107 - C38297 * C115 + C38292 * C125) *
                C54750 +
            (C56456 + C56457) * C54751) *
               C89236 * C89337 -
           ((C56458 + C56459) * C54751 + (C56457 + C56456) * C54750) * C89236 *
               C89338 +
           ((C56459 + C56458) * C54750 + (C67556 + C67557) * C54751) * C89236 *
               C11948) *
              C89137 * C89299 +
          (((C56460 + C56461) * C54750 + (C56462 + C56463) * C54751) * C89236 *
               C89338 -
           ((C56461 + C56460) * C54751 +
            (C38297 * C116 - C38298 * C108 - C38297 * C117 + C38292 * C126 +
             C38295 * C114 - C38296 * C107 - C38295 * C115 + C38291 * C125) *
                C54750) *
               C89236 * C89337 -
           ((C38297 * C10545 - C38298 * C10542 - C38297 * C10546 +
             C38292 * C10551 + C38295 * C10547 - C38296 * C10543 -
             C38295 * C10548 + C38291 * C10552) *
                C54751 +
            (C56463 + C56462) * C54750) *
               C89236 * C11948) *
              C89137 * C89124)) /
        (p * q * std::sqrt(p + q));
    d2eexy[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C38295 +
             (C89236 * C187 - C180 * C113) * C38291 + (C194 - C195) * C38297 +
             (C196 - C197) * C38292) *
                C54750 +
            ((C27126 - C27127) * C38295 + (C27128 - C27129) * C38291 +
             C56562 * C38297 + C56563 * C38292) *
                C54751) *
               C89337 +
           (((C27127 - C27126) * C38295 + (C27129 - C27128) * C38291 +
             C56564 * C38297 + C56565 * C38292) *
                C54750 +
            ((C27131 - C27130) * C38295 + (C27133 - C27132) * C38291 +
             C27138 * C38297 + C27139 * C38292) *
                C54751) *
               C89338 +
           ((C27144 * C38295 + C27145 * C38291 + C56566 * C38297 +
             C56567 * C38292) *
                C54750 +
            ((C27135 - C27134) * C38295 + (C27137 - C27136) * C38291 +
             (C27140 - C27141) * C38297 + (C27142 - C27143) * C38292) *
                C54751) *
               C11948) *
              C89137 * C89299 +
          ((((C195 - C194) * C38295 + (C197 - C196) * C38291 +
             (C199 - C198) * C38297 + (C201 - C200) * C38292) *
                C54750 +
            (C56564 * C38295 + C56565 * C38291 + C3433 * C38297 +
             C3434 * C38292) *
                C54751) *
               C89337 +
           ((C56562 * C38295 + C56563 * C38291 + C58483 * C38297 +
             C58484 * C38292) *
                C54750 +
            (C56566 * C38295 + C56567 * C38291 + (C1857 - C1858) * C38297 +
             (C1859 - C1860) * C38292) *
                C54751) *
               C89338 +
           ((C27138 * C38295 + C27139 * C38291 + (C1858 - C1857) * C38297 +
             (C1860 - C1859) * C38292) *
                C54750 +
            ((C27141 - C27140) * C38295 + (C27143 - C27142) * C38291 +
             (C180 * C10542 - C89236 * C10606) * C38297 +
             (C180 * C10546 - C89236 * C10609) * C38292) *
                C54751) *
               C11948) *
              C89137 * C89124)) /
        (p * q * std::sqrt(p + q));
    d2eexz[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                C38295 +
            (C54750 * C270 - C54884 * C113 + C54751 * C1942 - C54885 * C1735) *
                C38291 +
            (C54887 - C54888 + C54889 - C54890) * C38297 +
            (C54891 - C54892 + C54893 - C54894) * C38292) *
               C89236 * C89337 +
           ((C54884 * C1724 - C54750 * C1934 + C54885 * C1725 -
             C54751 * C1937) *
                C38295 +
            (C54884 * C1735 - C54750 * C1942 + C54885 * C1737 -
             C54751 * C1945) *
                C38291 +
            (C56666 - C56667 + C56668 - C56669) * C38297 +
            (C56670 - C56671 + C56672 - C56673) * C38292) *
               C89236 * C89338 +
           ((C54750 * C1937 - C54884 * C1725 + C54751 * C10660 -
             C54885 * C10544) *
                C38295 +
            (C54750 * C1945 - C54884 * C1737 + C54751 * C10663 -
             C54885 * C10550) *
                C38291 +
            (C56674 - C56675 + C56676 - C56677) * C38297 +
            (C56678 - C56679 + C56680 - C56681) * C38292) *
               C89236 * C11948) *
              C89137 * C89299 +
          (((C54888 - C54887 + C54890 - C54889) * C38295 +
            (C54892 - C54891 + C54894 - C54893) * C38291 +
            (C54895 - C54896 + C54897 - C54898) * C38297 +
            (C54899 - C54900 + C54901 - C54902) * C38292) *
               C89236 * C89337 +
           ((C56667 - C56666 + C56669 - C56668) * C38295 +
            (C56671 - C56670 + C56673 - C56672) * C38291 +
            (C58583 - C58584 + C58585 - C58586) * C38297 +
            (C58587 - C58588 + C58589 - C58590) * C38292) *
               C89236 * C89338 +
           ((C56675 - C56674 + C56677 - C56676) * C38295 +
            (C56679 - C56678 + C56681 - C56680) * C38291 +
            (C54884 * C1727 - C54750 * C1939 + C54885 * C10542 -
             C54751 * C10662) *
                C38297 +
            (C54884 * C1741 - C54750 * C1947 + C54885 * C10546 -
             C54751 * C10665) *
                C38292) *
               C89236 * C11948) *
              C89137 * C89124)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                 C180 +
             (C38291 * C352 - C38295 * C346 + C38292 * C353 - C38297 * C347) *
                 C89236) *
                C54750 +
            ((C56780 - C56781 + C56782 - C56783) * C180 +
             (C56784 - C56785 + C56786 - C56787) * C89236) *
                C54751) *
               C89337 +
           (((C56781 - C56780 + C56783 - C56782) * C180 +
             (C56785 - C56784 + C56787 - C56786) * C89236) *
                C54750 +
            ((C56788 - C56789 + C56790 - C56791) * C180 +
             (C56792 - C56793 + C56794 - C56795) * C89236) *
                C54751) *
               C89338 +
           (((C56789 - C56788 + C56791 - C56790) * C180 +
             (C56793 - C56792 + C56795 - C56794) * C89236) *
                C54750 +
            ((C67756 - C67757 + C67758 - C67759) * C180 +
             (C67760 - C67761 + C67762 - C67763) * C89236) *
                C54751) *
               C11948) *
              C89137 * C89299 +
          ((((C38295 * C107 - C38291 * C114 + C38297 * C108 - C38292 * C116) *
                 C180 +
             (C38295 * C347 - C38291 * C353 + C38297 * C348 - C38292 * C354) *
                 C89236) *
                C54750 +
            ((C56796 - C56797 + C56798 - C56799) * C180 +
             (C56800 - C56801 + C56802 - C56803) * C89236) *
                C54751) *
               C89337 +
           (((C56797 - C56796 + C56799 - C56798) * C180 +
             (C56801 - C56800 + C56803 - C56802) * C89236) *
                C54750 +
            ((C56804 - C56805 + C56806 - C56807) * C180 +
             (C56808 - C56809 + C56810 - C56811) * C89236) *
                C54751) *
               C89338 +
           (((C56805 - C56804 + C56807 - C56806) * C180 +
             (C56809 - C56808 + C56811 - C56810) * C89236) *
                C54750 +
            ((C38295 * C10543 - C38291 * C10547 + C38297 * C10542 -
              C38292 * C10545) *
                 C180 +
             (C38295 * C10717 - C38291 * C10720 + C38297 * C10718 -
              C38292 * C10721) *
                 C89236) *
                C54751) *
               C11948) *
              C89137 * C89124)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) *
                 C38291 +
             C440 * C38292) *
                C54750 +
            (C56910 + C56911) * C54751) *
               C89337 -
           ((C56912 + C56913) * C54751 + (C56911 + C56910) * C54750) * C89338 +
           ((C56913 + C56912) * C54750 + (C67830 + C67831) * C54751) * C11948) *
              C89137 * C89299 +
          (((C56914 + C56915) * C54750 + (C56916 + C56917) * C54751) * C89338 -
           ((C56915 + C56914) * C54751 +
            (C441 * C38292 + C440 * C38291) * C54750) *
               C89337 -
           (((C180 * C10606 - C408 * C10542 - C180 * C10718 + C89236 * C10772) *
                 C38292 +
             C27447 * C38291) *
                C54751 +
            (C56917 + C56916) * C54750) *
               C11948) *
              C89137 * C89124)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                 C180 +
             (C54750 * C493 - C54884 * C346 + C54751 * C2240 - C54885 * C2040) *
                 C89236) *
                C38291 +
            ((C54887 - C54888 + C54889 - C54890) * C180 +
             (C55109 - C55110 + C55111 - C55112) * C89236) *
                C38292) *
               C89337 +
           (((C54884 * C1724 - C54750 * C1934 + C54885 * C1725 -
              C54751 * C1937) *
                 C180 +
             (C54884 * C2040 - C54750 * C2240 + C54885 * C2043 -
              C54751 * C2243) *
                 C89236) *
                C38291 +
            ((C56666 - C56667 + C56668 - C56669) * C180 +
             (C57016 - C57017 + C57018 - C57019) * C89236) *
                C38292) *
               C89338 +
           (((C54750 * C1937 - C54884 * C1725 + C54751 * C10660 -
              C54885 * C10544) *
                 C180 +
             (C54750 * C2243 - C54884 * C2043 + C54751 * C10825 -
              C54885 * C10716) *
                 C89236) *
                C38291 +
            ((C56674 - C56675 + C56676 - C56677) * C180 +
             (C57020 - C57021 + C57022 - C57023) * C89236) *
                C38292) *
               C11948) *
              C89137 * C89299 +
          ((((C54888 - C54887 + C54890 - C54889) * C180 +
             (C55110 - C55109 + C55112 - C55111) * C89236) *
                C38291 +
            ((C54895 - C54896 + C54897 - C54898) * C180 +
             (C55113 - C55114 + C55115 - C55116) * C89236) *
                C38292) *
               C89337 +
           (((C56667 - C56666 + C56669 - C56668) * C180 +
             (C57017 - C57016 + C57019 - C57018) * C89236) *
                C38291 +
            ((C58583 - C58584 + C58585 - C58586) * C180 +
             (C58895 - C58896 + C58897 - C58898) * C89236) *
                C38292) *
               C89338 +
           (((C56675 - C56674 + C56677 - C56676) * C180 +
             (C57021 - C57020 + C57023 - C57022) * C89236) *
                C38291 +
            ((C54884 * C1727 - C54750 * C1939 + C54885 * C10542 -
              C54751 * C10662) *
                 C180 +
             (C54884 * C2045 - C54750 * C2245 + C54885 * C10718 -
              C54751 * C10827) *
                 C89236) *
                C38292) *
               C11948) *
              C89137 * C89124)) /
        (p * q * std::sqrt(p + q));
    d2eezx[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                C54884 +
            (C38291 * C571 - C38295 * C565 + C38292 * C572 - C38297 * C566) *
                C54750 +
            (C56780 - C56781 + C56782 - C56783) * C54885 +
            (C57122 - C57123 + C57124 - C57125) * C54751) *
               C89236 * C89337 +
           ((C56781 - C56780 + C56783 - C56782) * C54884 +
            (C57123 - C57122 + C57125 - C57124) * C54750 +
            (C56788 - C56789 + C56790 - C56791) * C54885 +
            (C57126 - C57127 + C57128 - C57129) * C54751) *
               C89236 * C89338 +
           ((C56789 - C56788 + C56791 - C56790) * C54884 +
            (C57127 - C57126 + C57129 - C57128) * C54750 +
            (C67756 - C67757 + C67758 - C67759) * C54885 +
            (C67964 - C67965 + C67966 - C67967) * C54751) *
               C89236 * C11948) *
              C89137 * C89299 +
          (((C38295 * C107 - C38291 * C114 + C38297 * C108 - C38292 * C116) *
                C54884 +
            (C38295 * C566 - C38291 * C572 + C38297 * C567 - C38292 * C573) *
                C54750 +
            (C56796 - C56797 + C56798 - C56799) * C54885 +
            (C57130 - C57131 + C57132 - C57133) * C54751) *
               C89236 * C89337 +
           ((C56797 - C56796 + C56799 - C56798) * C54884 +
            (C57131 - C57130 + C57133 - C57132) * C54750 +
            (C56804 - C56805 + C56806 - C56807) * C54885 +
            (C57134 - C57135 + C57136 - C57137) * C54751) *
               C89236 * C89338 +
           ((C56805 - C56804 + C56807 - C56806) * C54884 +
            (C57135 - C57134 + C57137 - C57136) * C54750 +
            (C38295 * C10543 - C38291 * C10547 + C38297 * C10542 -
             C38292 * C10545) *
                C54885 +
            (C38295 * C10879 - C38291 * C10882 + C38297 * C10880 -
             C38292 * C10883) *
                C54751) *
               C89236 * C11948) *
              C89137 * C89124)) /
        (p * q * std::sqrt(p + q));
    d2eezy[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C54884 +
             (C89236 * C627 - C180 * C565) * C54750 +
             (C27126 - C27127) * C54885 + (C27696 - C27697) * C54751) *
                C38291 +
            ((C194 - C195) * C54884 + (C634 - C635) * C54750 + C56562 * C54885 +
             C57236 * C54751) *
                C38292) *
               C89337 +
           (((C27127 - C27126) * C54884 + (C27697 - C27696) * C54750 +
             (C27131 - C27130) * C54885 + (C27699 - C27698) * C54751) *
                C38291 +
            (C56564 * C54884 + C57237 * C54750 + C27138 * C54885 +
             C27702 * C54751) *
                C38292) *
               C89338 +
           ((C27144 * C54884 + C27705 * C54750 + (C27135 - C27134) * C54885 +
             (C27701 - C27700) * C54751) *
                C38291 +
            (C56566 * C54884 + C57238 * C54750 + (C27140 - C27141) * C54885 +
             (C27703 - C27704) * C54751) *
                C38292) *
               C11948) *
              C89137 * C89299 +
          ((((C195 - C194) * C54884 + (C635 - C634) * C54750 + C56564 * C54885 +
             C57237 * C54751) *
                C38291 +
            ((C199 - C198) * C54884 + (C638 - C637) * C54750 + C3433 * C54885 +
             C3912 * C54751) *
                C38292) *
               C89337 +
           ((C56562 * C54884 + C57236 * C54750 + C56566 * C54885 +
             C57238 * C54751) *
                C38291 +
            (C58483 * C54884 + C59099 * C54750 + (C1857 - C1858) * C54885 +
             (C2435 - C2436) * C54751) *
                C38292) *
               C89338 +
           ((C27138 * C54884 + C27702 * C54750 + (C27141 - C27140) * C54885 +
             (C27704 - C27703) * C54751) *
                C38291 +
            ((C1858 - C1857) * C54884 + (C2436 - C2435) * C54750 +
             (C180 * C10542 - C89236 * C10606) * C54885 +
             (C180 * C10880 - C89236 * C10936) * C54751) *
                C38292) *
               C11948) *
              C89137 * C89124)) /
        (p * q * std::sqrt(p + q));
    d2eezz[58] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C54884 * C264 - C55318 * C106 - C54884 * C565 +
                       C54750 * C700 + C54885 * C1934 - C55319 * C1724 -
                       C54885 * C2330 + C54751 * C2512) *
                          C89236 * C38291 +
                      (C55357 + C55358) * C89236 * C38292) *
                         C89337 -
                     ((C57361 + C57362) * C89236 * C38292 +
                      (C54885 * C1937 - C55319 * C1725 - C54885 * C2333 +
                       C54751 * C2513 + C54884 * C1934 - C55318 * C1724 -
                       C54884 * C2330 + C54750 * C2512) *
                          C89236 * C38291) *
                         C89338 +
                     ((C54884 * C1937 - C55318 * C1725 - C54884 * C2333 +
                       C54750 * C2513 + C54885 * C10660 - C55319 * C10544 -
                       C54885 * C10878 + C54751 * C10989) *
                          C89236 * C38291 +
                      (C57363 + C57364) * C89236 * C38292) *
                         C11948) *
                        C89137 * C89299 +
                    (((C57362 + C57361) * C89236 * C38291 +
                      (C59210 + C59211) * C89236 * C38292) *
                         C89338 -
                     ((C55359 + C55360) * C89236 * C38292 +
                      (C55358 + C55357) * C89236 * C38291) *
                         C89337 -
                     ((C54885 * C10662 - C55319 * C10542 - C54885 * C10880 +
                       C54751 * C10987 + C54884 * C1939 - C55318 * C1727 -
                       C54884 * C2335 + C54750 * C2515) *
                          C89236 * C38292 +
                      (C57364 + C57363) * C89236 * C38291) *
                         C11948) *
                        C89137 * C89124)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C38295 * C112 - C38296 * C106 - C38295 * C113 + C38291 * C124 +
             C38297 * C114 - C38298 * C107 - C38297 * C115 + C38292 * C125) *
                C54750 +
            (C56456 + C56457) * C54751) *
               C89236 * C9228 -
           ((C56458 + C56459) * C54751 + (C56457 + C56456) * C54750) * C89236 *
               C89217) *
              C89137 * C5075 +
          (((C56460 + C56461) * C54750 + (C56462 + C56463) * C54751) * C89236 *
               C89217 -
           ((C56461 + C56460) * C54751 +
            (C38297 * C116 - C38298 * C108 - C38297 * C117 + C38292 * C126 +
             C38295 * C114 - C38296 * C107 - C38295 * C115 + C38291 * C125) *
                C54750) *
               C89236 * C9228) *
              C89137 * C5076 +
          (((C38295 * C116 - C38296 * C108 - C38295 * C117 + C38291 * C126 +
             C38297 * C118 - C38298 * C109 - C38297 * C119 + C38292 * C127) *
                C54750 +
            (C58383 + C58384) * C54751) *
               C89236 * C9228 -
           ((C38297 * C1744 - C38298 * C1729 - C38297 * C1745 + C38292 * C1753 +
             C38295 * C1740 - C38296 * C1727 - C38295 * C1741 +
             C38291 * C1751) *
                C54751 +
            (C58384 + C58383) * C54750) *
               C89236 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C38295 * C112 - C38296 * C106 - C38295 * C113 + C38291 * C124 +
             C38297 * C114 - C38298 * C107 - C38297 * C115 + C38292 * C125) *
                C54750 +
            (C56456 + C56457) * C54751) *
               C89236 * C9228 -
           ((C56458 + C56459) * C54751 + (C56457 + C56456) * C54750) * C89236 *
               C89217) *
              C812 +
          (((C42922 + C42921) * C54750 + (C45635 + C45636) * C54751) * C89236 *
               C89217 -
           ((C42921 + C42922) * C54751 + (C39063 + C39062) * C54750) * C89236 *
               C9228) *
              C813 +
          (((C39065 + C39064) * C54750 + (C48595 + C48596) * C54751) * C89236 *
               C9228 -
           ((C38297 * C14605 - C38298 * C14602 - C38297 * C14606 +
             C38292 * C14608 + C38295 * C14603 - C38296 * C14601 -
             C38295 * C14604 + C38291 * C14607) *
                C54751 +
            (C48596 + C48595) * C54750) *
               C89236 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eexy[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C38295 +
             (C89236 * C187 - C180 * C113) * C38291 + (C194 - C195) * C38297 +
             (C196 - C197) * C38292) *
                C54750 +
            ((C27126 - C27127) * C38295 + (C27128 - C27129) * C38291 +
             C56562 * C38297 + C56563 * C38292) *
                C54751) *
               C9228 +
           (((C27127 - C27126) * C38295 + (C27129 - C27128) * C38291 +
             C56564 * C38297 + C56565 * C38292) *
                C54750 +
            ((C27131 - C27130) * C38295 + (C27133 - C27132) * C38291 +
             C27138 * C38297 + C27139 * C38292) *
                C54751) *
               C89217) *
              C89137 * C5075 +
          ((((C195 - C194) * C38295 + (C197 - C196) * C38291 +
             (C199 - C198) * C38297 + (C201 - C200) * C38292) *
                C54750 +
            (C56564 * C38295 + C56565 * C38291 + C3433 * C38297 +
             C3434 * C38292) *
                C54751) *
               C9228 +
           ((C56562 * C38295 + C56563 * C38291 + C58483 * C38297 +
             C58484 * C38292) *
                C54750 +
            (C56566 * C38295 + C56567 * C38291 + (C1857 - C1858) * C38297 +
             (C1859 - C1860) * C38292) *
                C54751) *
               C89217) *
              C89137 * C5076 +
          (((C210 * C38295 + C211 * C38291 + (C203 - C202) * C38297 +
             (C205 - C204) * C38292) *
                C54750 +
            (C58483 * C38295 + C58484 * C38291 + (C3435 - C3436) * C38297 +
             (C3437 - C3438) * C38292) *
                C54751) *
               C9228 +
           ((C3433 * C38295 + C3434 * C38291 + (C3436 - C3435) * C38297 +
             (C3438 - C3437) * C38292) *
                C54750 +
            ((C1858 - C1857) * C38295 + (C1860 - C1859) * C38291 +
             (C180 * C1729 - C89236 * C1835) * C38297 +
             (C180 * C1745 - C89236 * C1843) * C38292) *
                C54751) *
               C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C38295 +
             (C89236 * C187 - C180 * C113) * C38291 + (C194 - C195) * C38297 +
             (C196 - C197) * C38292) *
                C54750 +
            ((C27126 - C27127) * C38295 + (C27128 - C27129) * C38291 +
             C56562 * C38297 + C56563 * C38292) *
                C54751) *
               C9228 +
           (((C27127 - C27126) * C38295 + (C27129 - C27128) * C38291 +
             C56564 * C38297 + C56565 * C38292) *
                C54750 +
            ((C27131 - C27130) * C38295 + (C27133 - C27132) * C38291 +
             C27138 * C38297 + C27139 * C38292) *
                C54751) *
               C89217) *
              C812 +
          ((((C180 * C819 - C89236 * C923) * C38295 +
             (C180 * C830 - C89236 * C931) * C38291 + (C940 - C941) * C38297 +
             (C942 - C943) * C38292) *
                C54750 +
            ((C29351 - C29352) * C38295 + (C29353 - C29354) * C38291 +
             C59472 * C38297 + C59473 * C38292) *
                C54751) *
               C9228 +
           (((C29352 - C29351) * C38295 + (C29354 - C29353) * C38291 +
             C59474 * C38297 + C59475 * C38292) *
                C54750 +
            ((C29356 - C29355) * C38295 + (C29358 - C29357) * C38291 +
             (C29359 - C29360) * C38297 + (C29361 - C29362) * C38292) *
                C54751) *
               C89217) *
              C813 +
          ((((C89236 * C926 - C180 * C820) * C38295 +
             (C89236 * C934 - C180 * C832) * C38291 + (C948 - C949) * C38297 +
             (C950 - C951) * C38292) *
                C54750 +
            ((C33629 - C33630) * C38295 + (C33631 - C33632) * C38291 +
             (C55559 - C55560) * C38297 + (C55561 - C55562) * C38292) *
                C54751) *
               C9228 +
           (((C33630 - C33629) * C38295 + (C33632 - C33631) * C38291 +
             (C55560 - C55559) * C38297 + (C55562 - C55561) * C38292) *
                C54750 +
            ((C33634 - C33633) * C38295 + (C33636 - C33635) * C38291 +
             (C180 * C14602 - C89236 * C14684) * C38297 +
             (C180 * C14606 - C89236 * C14686) * C38292) *
                C54751) *
               C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eexz[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                C38295 +
            (C54750 * C270 - C54884 * C113 + C54751 * C1942 - C54885 * C1735) *
                C38291 +
            (C54887 - C54888 + C54889 - C54890) * C38297 +
            (C54891 - C54892 + C54893 - C54894) * C38292) *
               C89236 * C9228 +
           ((C54884 * C1724 - C54750 * C1934 + C54885 * C1725 -
             C54751 * C1937) *
                C38295 +
            (C54884 * C1735 - C54750 * C1942 + C54885 * C1737 -
             C54751 * C1945) *
                C38291 +
            (C56666 - C56667 + C56668 - C56669) * C38297 +
            (C56670 - C56671 + C56672 - C56673) * C38292) *
               C89236 * C89217) *
              C89137 * C5075 +
          (((C54888 - C54887 + C54890 - C54889) * C38295 +
            (C54892 - C54891 + C54894 - C54893) * C38291 +
            (C54895 - C54896 + C54897 - C54898) * C38297 +
            (C54899 - C54900 + C54901 - C54902) * C38292) *
               C89236 * C9228 +
           ((C56667 - C56666 + C56669 - C56668) * C38295 +
            (C56671 - C56670 + C56673 - C56672) * C38291 +
            (C58583 - C58584 + C58585 - C58586) * C38297 +
            (C58587 - C58588 + C58589 - C58590) * C38292) *
               C89236 * C89217) *
              C89137 * C5076 +
          (((C54896 - C54895 + C54898 - C54897) * C38295 +
            (C54900 - C54899 + C54902 - C54901) * C38291 +
            (C54903 - C54904 + C54905 - C54906) * C38297 +
            (C54907 - C54908 + C54909 - C54910) * C38292) *
               C89236 * C9228 +
           ((C58584 - C58583 + C58586 - C58585) * C38295 +
            (C58588 - C58587 + C58590 - C58589) * C38291 +
            (C54884 * C1728 - C54750 * C1940 + C54885 * C1729 -
             C54751 * C1941) *
                C38297 +
            (C54884 * C1743 - C54750 * C1948 + C54885 * C1745 -
             C54751 * C1949) *
                C38292) *
               C89236 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                C38295 +
            (C54750 * C270 - C54884 * C113 + C54751 * C1942 - C54885 * C1735) *
                C38291 +
            (C54887 - C54888 + C54889 - C54890) * C38297 +
            (C54891 - C54892 + C54893 - C54894) * C38292) *
               C89236 * C9228 +
           ((C54884 * C1724 - C54750 * C1934 + C54885 * C1725 -
             C54751 * C1937) *
                C38295 +
            (C54884 * C1735 - C54750 * C1942 + C54885 * C1737 -
             C54751 * C1945) *
                C38291 +
            (C56666 - C56667 + C56668 - C56669) * C38297 +
            (C56670 - C56671 + C56672 - C56673) * C38292) *
               C89236 * C89217) *
              C812 +
          (((C54884 * C819 - C54750 * C1029 + C54885 * C4097 - C54751 * C4325) *
                C38295 +
            (C54884 * C830 - C54750 * C1037 + C54885 * C4102 - C54751 * C4329) *
                C38291 +
            (C55661 - C55662 + C55663 - C55664) * C38297 +
            (C55665 - C55666 + C55667 - C55668) * C38292) *
               C89236 * C9228 +
           ((C54750 * C4325 - C54884 * C4097 + C54751 * C6413 -
             C54885 * C6249) *
                C38295 +
            (C54750 * C4329 - C54884 * C4102 + C54751 * C6416 -
             C54885 * C6255) *
                C38291 +
            (C59606 - C59607 + C59608 - C59609) * C38297 +
            (C59610 - C59611 + C59612 - C59613) * C38292) *
               C89236 * C89217) *
              C813 +
          (((C54750 * C1032 - C54884 * C820 + C54751 * C8680 - C54885 * C8516) *
                C38295 +
            (C54750 * C1040 - C54884 * C832 + C54751 * C8683 - C54885 * C8522) *
                C38291 +
            (C55669 - C55670 + C55671 - C55672) * C38297 +
            (C55673 - C55674 + C55675 - C55676) * C38292) *
               C89236 * C9228 +
           ((C54884 * C8516 - C54750 * C8680 + C54885 * C14601 -
             C54751 * C14761) *
                C38295 +
            (C54884 * C8522 - C54750 * C8683 + C54885 * C14604 -
             C54751 * C14763) *
                C38291 +
            (C54884 * C8515 - C54750 * C8681 + C54885 * C14602 -
             C54751 * C14762) *
                C38297 +
            (C54884 * C8520 - C54750 * C8684 + C54885 * C14606 -
             C54751 * C14764) *
                C38292) *
               C89236 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eeyx[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                 C180 +
             (C38291 * C352 - C38295 * C346 + C38292 * C353 - C38297 * C347) *
                 C89236) *
                C54750 +
            ((C56780 - C56781 + C56782 - C56783) * C180 +
             (C56784 - C56785 + C56786 - C56787) * C89236) *
                C54751) *
               C9228 +
           (((C56781 - C56780 + C56783 - C56782) * C180 +
             (C56785 - C56784 + C56787 - C56786) * C89236) *
                C54750 +
            ((C56788 - C56789 + C56790 - C56791) * C180 +
             (C56792 - C56793 + C56794 - C56795) * C89236) *
                C54751) *
               C89217) *
              C89137 * C5075 +
          ((((C38295 * C107 - C38291 * C114 + C38297 * C108 - C38292 * C116) *
                 C180 +
             (C38295 * C347 - C38291 * C353 + C38297 * C348 - C38292 * C354) *
                 C89236) *
                C54750 +
            ((C56796 - C56797 + C56798 - C56799) * C180 +
             (C56800 - C56801 + C56802 - C56803) * C89236) *
                C54751) *
               C9228 +
           (((C56797 - C56796 + C56799 - C56798) * C180 +
             (C56801 - C56800 + C56803 - C56802) * C89236) *
                C54750 +
            ((C56804 - C56805 + C56806 - C56807) * C180 +
             (C56808 - C56809 + C56810 - C56811) * C89236) *
                C54751) *
               C89217) *
              C89137 * C5076 +
          ((((C38291 * C116 - C38295 * C108 + C38292 * C118 - C38297 * C109) *
                 C180 +
             (C38291 * C354 - C38295 * C348 + C38292 * C355 - C38297 * C349) *
                 C89236) *
                C54750 +
            ((C58689 - C58690 + C58691 - C58692) * C180 +
             (C58693 - C58694 + C58695 - C58696) * C89236) *
                C54751) *
               C9228 +
           (((C58690 - C58689 + C58692 - C58691) * C180 +
             (C58694 - C58693 + C58696 - C58695) * C89236) *
                C54750 +
            ((C38295 * C1727 - C38291 * C1740 + C38297 * C1729 -
              C38292 * C1744) *
                 C180 +
             (C38295 * C2045 - C38291 * C2053 + C38297 * C2047 -
              C38292 * C2055) *
                 C89236) *
                C54751) *
               C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                 C180 +
             (C38291 * C352 - C38295 * C346 + C38292 * C353 - C38297 * C347) *
                 C89236) *
                C54750 +
            ((C56780 - C56781 + C56782 - C56783) * C180 +
             (C56784 - C56785 + C56786 - C56787) * C89236) *
                C54751) *
               C9228 +
           (((C56781 - C56780 + C56783 - C56782) * C180 +
             (C56785 - C56784 + C56787 - C56786) * C89236) *
                C54750 +
            ((C56788 - C56789 + C56790 - C56791) * C180 +
             (C56792 - C56793 + C56794 - C56795) * C89236) *
                C54751) *
               C89217) *
              C812 +
          ((((C39387 - C39386 + C39389 - C39388) * C180 +
             (C39391 - C39390 + C39393 - C39392) * C89236) *
                C54750 +
            ((C43327 - C43328 + C43329 - C43330) * C180 +
             (C43331 - C43332 + C43333 - C43334) * C89236) *
                C54751) *
               C9228 +
           (((C43328 - C43327 + C43330 - C43329) * C180 +
             (C43332 - C43331 + C43334 - C43333) * C89236) *
                C54750 +
            ((C45931 - C45932 + C45933 - C45934) * C180 +
             (C45935 - C45936 + C45937 - C45938) * C89236) *
                C54751) *
               C89217) *
              C813 +
          ((((C39395 - C39394 + C39397 - C39396) * C180 +
             (C39399 - C39398 + C39401 - C39400) * C89236) *
                C54750 +
            ((C48891 - C48892 + C48893 - C48894) * C180 +
             (C48895 - C48896 + C48897 - C48898) * C89236) *
                C54751) *
               C9228 +
           (((C48892 - C48891 + C48894 - C48893) * C180 +
             (C48896 - C48895 + C48898 - C48897) * C89236) *
                C54750 +
            ((C38295 * C14601 - C38291 * C14603 + C38297 * C14602 -
              C38292 * C14605) *
                 C180 +
             (C38295 * C14839 - C38291 * C14841 + C38297 * C14840 -
              C38292 * C14842) *
                 C89236) *
                C54751) *
               C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eeyy[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) *
                 C38291 +
             C440 * C38292) *
                C54750 +
            (C56910 + C56911) * C54751) *
               C9228 -
           ((C56912 + C56913) * C54751 + (C56911 + C56910) * C54750) * C89217) *
              C89137 * C5075 +
          (((C56914 + C56915) * C54750 + (C56916 + C56917) * C54751) * C89217 -
           ((C56915 + C56914) * C54751 +
            (C441 * C38292 + C440 * C38291) * C54750) *
               C9228) *
              C89137 * C5076 +
          (((C441 * C38291 + C442 * C38292) * C54750 +
            (C58795 + C58796) * C54751) *
               C9228 -
           (((C180 * C1835 - C408 * C1729 - C180 * C2047 + C89236 * C2137) *
                 C38292 +
             C2166 * C38291) *
                C54751 +
            (C58796 + C58795) * C54750) *
               C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) *
                 C38291 +
             C440 * C38292) *
                C54750 +
            (C56910 + C56911) * C54751) *
               C9228 -
           ((C56912 + C56913) * C54751 + (C56911 + C56910) * C54750) * C89217) *
              C812 +
          (((C59874 + C59875) * C54750 + (C62384 + C62385) * C54751) * C89217 -
           ((C59875 + C59874) * C54751 +
            (C1259 * C38292 +
             (C180 * C923 - C408 * C819 - C180 * C1135 + C89236 * C1227) *
                 C38291) *
                C54750) *
               C9228) *
              C813 +
          ((((C180 * C926 - C408 * C820 - C180 * C1138 + C89236 * C1228) *
                 C38291 +
             C1260 * C38292) *
                C54750 +
            (C65320 + C65321) * C54751) *
               C9228 -
           (((C180 * C14684 - C408 * C14602 - C180 * C14840 + C89236 * C14918) *
                 C38292 +
             C33872 * C38291) *
                C54751 +
            (C65321 + C65320) * C54750) *
               C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eeyz[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                 C180 +
             (C54750 * C493 - C54884 * C346 + C54751 * C2240 - C54885 * C2040) *
                 C89236) *
                C38291 +
            ((C54887 - C54888 + C54889 - C54890) * C180 +
             (C55109 - C55110 + C55111 - C55112) * C89236) *
                C38292) *
               C9228 +
           (((C54884 * C1724 - C54750 * C1934 + C54885 * C1725 -
              C54751 * C1937) *
                 C180 +
             (C54884 * C2040 - C54750 * C2240 + C54885 * C2043 -
              C54751 * C2243) *
                 C89236) *
                C38291 +
            ((C56666 - C56667 + C56668 - C56669) * C180 +
             (C57016 - C57017 + C57018 - C57019) * C89236) *
                C38292) *
               C89217) *
              C89137 * C5075 +
          ((((C54888 - C54887 + C54890 - C54889) * C180 +
             (C55110 - C55109 + C55112 - C55111) * C89236) *
                C38291 +
            ((C54895 - C54896 + C54897 - C54898) * C180 +
             (C55113 - C55114 + C55115 - C55116) * C89236) *
                C38292) *
               C9228 +
           (((C56667 - C56666 + C56669 - C56668) * C180 +
             (C57017 - C57016 + C57019 - C57018) * C89236) *
                C38291 +
            ((C58583 - C58584 + C58585 - C58586) * C180 +
             (C58895 - C58896 + C58897 - C58898) * C89236) *
                C38292) *
               C89217) *
              C89137 * C5076 +
          ((((C54896 - C54895 + C54898 - C54897) * C180 +
             (C55114 - C55113 + C55116 - C55115) * C89236) *
                C38291 +
            ((C54903 - C54904 + C54905 - C54906) * C180 +
             (C55117 - C55118 + C55119 - C55120) * C89236) *
                C38292) *
               C9228 +
           (((C58584 - C58583 + C58586 - C58585) * C180 +
             (C58896 - C58895 + C58898 - C58897) * C89236) *
                C38291 +
            ((C54884 * C1728 - C54750 * C1940 + C54885 * C1729 -
              C54751 * C1941) *
                 C180 +
             (C54884 * C2046 - C54750 * C2246 + C54885 * C2047 -
              C54751 * C2247) *
                 C89236) *
                C38292) *
               C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C54750 * C264 - C54884 * C106 + C54751 * C1934 - C54885 * C1724) *
                 C180 +
             (C54750 * C493 - C54884 * C346 + C54751 * C2240 - C54885 * C2040) *
                 C89236) *
                C38291 +
            ((C54887 - C54888 + C54889 - C54890) * C180 +
             (C55109 - C55110 + C55111 - C55112) * C89236) *
                C38292) *
               C9228 +
           (((C54884 * C1724 - C54750 * C1934 + C54885 * C1725 -
              C54751 * C1937) *
                 C180 +
             (C54884 * C2040 - C54750 * C2240 + C54885 * C2043 -
              C54751 * C2243) *
                 C89236) *
                C38291 +
            ((C56666 - C56667 + C56668 - C56669) * C180 +
             (C57016 - C57017 + C57018 - C57019) * C89236) *
                C38292) *
               C89217) *
              C812 +
          ((((C54884 * C819 - C54750 * C1029 + C54885 * C4097 -
              C54751 * C4325) *
                 C180 +
             (C54884 * C1135 - C54750 * C1335 + C54885 * C4439 -
              C54751 * C4661) *
                 C89236) *
                C38291 +
            ((C55661 - C55662 + C55663 - C55664) * C180 +
             (C55978 - C55979 + C55980 - C55981) * C89236) *
                C38292) *
               C9228 +
           (((C54750 * C4325 - C54884 * C4097 + C54751 * C6413 -
              C54885 * C6249) *
                 C180 +
             (C54750 * C4661 - C54884 * C4439 + C54751 * C6650 -
              C54885 * C6493) *
                 C89236) *
                C38291 +
            ((C59606 - C59607 + C59608 - C59609) * C180 +
             (C60008 - C60009 + C60010 - C60011) * C89236) *
                C38292) *
               C89217) *
              C813 +
          ((((C54750 * C1032 - C54884 * C820 + C54751 * C8680 -
              C54885 * C8516) *
                 C180 +
             (C54750 * C1338 - C54884 * C1138 + C54751 * C8917 -
              C54885 * C8760) *
                 C89236) *
                C38291 +
            ((C55669 - C55670 + C55671 - C55672) * C180 +
             (C55982 - C55983 + C55984 - C55985) * C89236) *
                C38292) *
               C9228 +
           (((C54884 * C8516 - C54750 * C8680 + C54885 * C14601 -
              C54751 * C14761) *
                 C180 +
             (C54884 * C8760 - C54750 * C8917 + C54885 * C14839 -
              C54751 * C14993) *
                 C89236) *
                C38291 +
            ((C54884 * C8515 - C54750 * C8681 + C54885 * C14602 -
              C54751 * C14762) *
                 C180 +
             (C54884 * C8761 - C54750 * C8918 + C54885 * C14840 -
              C54751 * C14994) *
                 C89236) *
                C38292) *
               C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eezx[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                C54884 +
            (C38291 * C571 - C38295 * C565 + C38292 * C572 - C38297 * C566) *
                C54750 +
            (C56780 - C56781 + C56782 - C56783) * C54885 +
            (C57122 - C57123 + C57124 - C57125) * C54751) *
               C89236 * C9228 +
           ((C56781 - C56780 + C56783 - C56782) * C54884 +
            (C57123 - C57122 + C57125 - C57124) * C54750 +
            (C56788 - C56789 + C56790 - C56791) * C54885 +
            (C57126 - C57127 + C57128 - C57129) * C54751) *
               C89236 * C89217) *
              C89137 * C5075 +
          (((C38295 * C107 - C38291 * C114 + C38297 * C108 - C38292 * C116) *
                C54884 +
            (C38295 * C566 - C38291 * C572 + C38297 * C567 - C38292 * C573) *
                C54750 +
            (C56796 - C56797 + C56798 - C56799) * C54885 +
            (C57130 - C57131 + C57132 - C57133) * C54751) *
               C89236 * C9228 +
           ((C56797 - C56796 + C56799 - C56798) * C54884 +
            (C57131 - C57130 + C57133 - C57132) * C54750 +
            (C56804 - C56805 + C56806 - C56807) * C54885 +
            (C57134 - C57135 + C57136 - C57137) * C54751) *
               C89236 * C89217) *
              C89137 * C5076 +
          (((C38291 * C116 - C38295 * C108 + C38292 * C118 - C38297 * C109) *
                C54884 +
            (C38291 * C573 - C38295 * C567 + C38292 * C574 - C38297 * C568) *
                C54750 +
            (C58689 - C58690 + C58691 - C58692) * C54885 +
            (C58997 - C58998 + C58999 - C59000) * C54751) *
               C89236 * C9228 +
           ((C58690 - C58689 + C58692 - C58691) * C54884 +
            (C58998 - C58997 + C59000 - C58999) * C54750 +
            (C38295 * C1727 - C38291 * C1740 + C38297 * C1729 -
             C38292 * C1744) *
                C54885 +
            (C38295 * C2335 - C38291 * C2343 + C38297 * C2337 -
             C38292 * C2345) *
                C54751) *
               C89236 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C38291 * C112 - C38295 * C106 + C38292 * C114 - C38297 * C107) *
                C54884 +
            (C38291 * C571 - C38295 * C565 + C38292 * C572 - C38297 * C566) *
                C54750 +
            (C56780 - C56781 + C56782 - C56783) * C54885 +
            (C57122 - C57123 + C57124 - C57125) * C54751) *
               C89236 * C9228 +
           ((C56781 - C56780 + C56783 - C56782) * C54884 +
            (C57123 - C57122 + C57125 - C57124) * C54750 +
            (C56788 - C56789 + C56790 - C56791) * C54885 +
            (C57126 - C57127 + C57128 - C57129) * C54751) *
               C89236 * C89217) *
              C812 +
          (((C39387 - C39386 + C39389 - C39388) * C54884 +
            (C39744 - C39743 + C39746 - C39745) * C54750 +
            (C43327 - C43328 + C43329 - C43330) * C54885 +
            (C43749 - C43750 + C43751 - C43752) * C54751) *
               C89236 * C9228 +
           ((C43328 - C43327 + C43330 - C43329) * C54884 +
            (C43750 - C43749 + C43752 - C43751) * C54750 +
            (C45931 - C45932 + C45933 - C45934) * C54885 +
            (C46233 - C46234 + C46235 - C46236) * C54751) *
               C89236 * C89217) *
              C813 +
          (((C39395 - C39394 + C39397 - C39396) * C54884 +
            (C39748 - C39747 + C39750 - C39749) * C54750 +
            (C48891 - C48892 + C48893 - C48894) * C54885 +
            (C49193 - C49194 + C49195 - C49196) * C54751) *
               C89236 * C9228 +
           ((C48892 - C48891 + C48894 - C48893) * C54884 +
            (C49194 - C49193 + C49196 - C49195) * C54750 +
            (C38295 * C14601 - C38291 * C14603 + C38297 * C14602 -
             C38292 * C14605) *
                C54885 +
            (C38295 * C15069 - C38291 * C15071 + C38297 * C15070 -
             C38292 * C15072) *
                C54751) *
               C89236 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eezy[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C54884 +
             (C89236 * C627 - C180 * C565) * C54750 +
             (C27126 - C27127) * C54885 + (C27696 - C27697) * C54751) *
                C38291 +
            ((C194 - C195) * C54884 + (C634 - C635) * C54750 + C56562 * C54885 +
             C57236 * C54751) *
                C38292) *
               C9228 +
           (((C27127 - C27126) * C54884 + (C27697 - C27696) * C54750 +
             (C27131 - C27130) * C54885 + (C27699 - C27698) * C54751) *
                C38291 +
            (C56564 * C54884 + C57237 * C54750 + C27138 * C54885 +
             C27702 * C54751) *
                C38292) *
               C89217) *
              C89137 * C5075 +
          ((((C195 - C194) * C54884 + (C635 - C634) * C54750 + C56564 * C54885 +
             C57237 * C54751) *
                C38291 +
            ((C199 - C198) * C54884 + (C638 - C637) * C54750 + C3433 * C54885 +
             C3912 * C54751) *
                C38292) *
               C9228 +
           ((C56562 * C54884 + C57236 * C54750 + C56566 * C54885 +
             C57238 * C54751) *
                C38291 +
            (C58483 * C54884 + C59099 * C54750 + (C1857 - C1858) * C54885 +
             (C2435 - C2436) * C54751) *
                C38292) *
               C89217) *
              C89137 * C5076 +
          (((C210 * C54884 + C644 * C54750 + C58483 * C54885 +
             C59099 * C54751) *
                C38291 +
            ((C203 - C202) * C54884 + (C641 - C640) * C54750 +
             (C3435 - C3436) * C54885 + (C3913 - C3914) * C54751) *
                C38292) *
               C9228 +
           ((C3433 * C54884 + C3912 * C54750 + (C1858 - C1857) * C54885 +
             (C2436 - C2435) * C54751) *
                C38291 +
            ((C3436 - C3435) * C54884 + (C3914 - C3913) * C54750 +
             (C180 * C1729 - C89236 * C1835) * C54885 +
             (C180 * C2337 - C89236 * C2427) * C54751) *
                C38292) *
               C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C54884 +
             (C89236 * C627 - C180 * C565) * C54750 +
             (C27126 - C27127) * C54885 + (C27696 - C27697) * C54751) *
                C38291 +
            ((C194 - C195) * C54884 + (C634 - C635) * C54750 + C56562 * C54885 +
             C57236 * C54751) *
                C38292) *
               C9228 +
           (((C27127 - C27126) * C54884 + (C27697 - C27696) * C54750 +
             (C27131 - C27130) * C54885 + (C27699 - C27698) * C54751) *
                C38291 +
            (C56564 * C54884 + C57237 * C54750 + C27138 * C54885 +
             C27702 * C54751) *
                C38292) *
               C89217) *
              C812 +
          ((((C180 * C819 - C89236 * C923) * C54884 +
             (C180 * C1425 - C89236 * C1515) * C54750 +
             (C29351 - C29352) * C54885 + (C29991 - C29992) * C54751) *
                C38291 +
            ((C940 - C941) * C54884 + (C1524 - C1525) * C54750 +
             C59472 * C54885 + C60272 * C54751) *
                C38292) *
               C9228 +
           (((C29352 - C29351) * C54884 + (C29992 - C29991) * C54750 +
             (C29356 - C29355) * C54885 + (C29994 - C29993) * C54751) *
                C38291 +
            (C59474 * C54884 + C60273 * C54750 + (C29359 - C29360) * C54885 +
             (C29995 - C29996) * C54751) *
                C38292) *
               C89217) *
              C813 +
          ((((C89236 * C926 - C180 * C820) * C54884 +
             (C89236 * C1518 - C180 * C1428) * C54750 +
             (C33629 - C33630) * C54885 + (C34097 - C34098) * C54751) *
                C38291 +
            ((C948 - C949) * C54884 + (C1528 - C1529) * C54750 +
             (C55559 - C55560) * C54885 + (C56182 - C56183) * C54751) *
                C38292) *
               C9228 +
           (((C33630 - C33629) * C54884 + (C34098 - C34097) * C54750 +
             (C33634 - C33633) * C54885 + (C34100 - C34099) * C54751) *
                C38291 +
            ((C55560 - C55559) * C54884 + (C56183 - C56182) * C54750 +
             (C180 * C14602 - C89236 * C14684) * C54885 +
             (C180 * C15070 - C89236 * C15148) * C54751) *
                C38292) *
               C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eezz[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C54884 * C264 - C55318 * C106 - C54884 * C565 + C54750 * C700 +
             C54885 * C1934 - C55319 * C1724 - C54885 * C2330 +
             C54751 * C2512) *
                C89236 * C38291 +
            (C55357 + C55358) * C89236 * C38292) *
               C9228 -
           ((C57361 + C57362) * C89236 * C38292 +
            (C54885 * C1937 - C55319 * C1725 - C54885 * C2333 + C54751 * C2513 +
             C54884 * C1934 - C55318 * C1724 - C54884 * C2330 +
             C54750 * C2512) *
                C89236 * C38291) *
               C89217) *
              C89137 * C5075 +
          (((C57362 + C57361) * C89236 * C38291 +
            (C59210 + C59211) * C89236 * C38292) *
               C89217 -
           ((C55359 + C55360) * C89236 * C38292 +
            (C55358 + C55357) * C89236 * C38291) *
               C9228) *
              C89137 * C5076 +
          (((C55360 + C55359) * C89236 * C38291 +
            (C55361 + C55362) * C89236 * C38292) *
               C9228 -
           ((C54885 * C1941 - C55319 * C1729 - C54885 * C2337 + C54751 * C2517 +
             C54884 * C1940 - C55318 * C1728 - C54884 * C2336 +
             C54750 * C2516) *
                C89236 * C38292 +
            (C59211 + C59210) * C89236 * C38291) *
               C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C54884 * C264 - C55318 * C106 - C54884 * C565 + C54750 * C700 +
             C54885 * C1934 - C55319 * C1724 - C54885 * C2330 +
             C54751 * C2512) *
                C89236 * C38291 +
            (C55357 + C55358) * C89236 * C38292) *
               C9228 -
           ((C57361 + C57362) * C89236 * C38292 +
            (C54885 * C1937 - C55319 * C1725 - C54885 * C2333 + C54751 * C2513 +
             C54884 * C1934 - C55318 * C1724 - C54884 * C2330 +
             C54750 * C2512) *
                C89236 * C38291) *
               C89217) *
              C812 +
          (((C54884 * C4325 - C55318 * C4097 - C54884 * C4767 + C54750 * C4979 +
             C54885 * C6413 - C55319 * C6249 - C54885 * C6727 +
             C54751 * C6886) *
                C89236 * C38291 +
            (C60416 + C60417) * C89236 * C38292) *
               C89217 -
           ((C56306 + C56307) * C89236 * C38292 +
            (C54885 * C4325 - C55319 * C4097 - C54885 * C4767 + C54751 * C4979 +
             C54884 * C1029 - C55318 * C819 - C54884 * C1425 + C54750 * C1607) *
                C89236 * C38291) *
               C9228) *
              C813 +
          (((C54884 * C1032 - C55318 * C820 - C54884 * C1428 + C54750 * C1608 +
             C54885 * C8680 - C55319 * C8516 - C54885 * C8994 +
             C54751 * C9153) *
                C89236 * C38291 +
            (C56308 + C56309) * C89236 * C38292) *
               C9228 -
           ((C54885 * C14762 - C55319 * C14602 - C54885 * C15070 +
             C54751 * C15224 + C54884 * C8681 - C55318 * C8515 -
             C54884 * C8995 + C54750 * C9152) *
                C89236 * C38292 +
            (C54885 * C14761 - C55319 * C14601 - C54885 * C15069 +
             C54751 * C15223 + C54884 * C8680 - C55318 * C8516 -
             C54884 * C8994 + C54750 * C9153) *
                C89236 * C38291) *
               C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eexx[60] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C112 - C101 * C106 - C100 * C113 + C89 * C124 + C102 * C114 -
            C103 * C107 - C102 * C115 + C90 * C125 + C104 * C116 - C105 * C108 -
            C104 * C117 + C91 * C126) *
               C89247 * C89236 * C89153 * C89307 -
           (C104 * C825 - C105 * C817 - C104 * C826 + C91 * C841 + C102 * C827 -
            C103 * C818 - C102 * C828 + C90 * C842 + C100 * C829 - C101 * C819 -
            C100 * C830 + C89 * C843) *
               C89247 * C89236 * C89153 * C89189) *
              C89333 +
          ((C100 * C827 - C101 * C818 - C100 * C828 + C89 * C842 + C102 * C825 -
            C103 * C817 - C102 * C826 + C90 * C841 + C104 * C837 - C105 * C823 -
            C104 * C838 + C91 * C847) *
               C89247 * C89236 * C89153 * C89189 -
           (C104 * C118 - C105 * C109 - C104 * C119 + C91 * C127 + C102 * C116 -
            C103 * C108 - C102 * C117 + C90 * C126 + C100 * C114 - C101 * C107 -
            C100 * C115 + C89 * C125) *
               C89247 * C89236 * C89153 * C89307) *
              C89334 +
          ((C100 * C116 - C101 * C108 - C100 * C117 + C89 * C126 + C102 * C118 -
            C103 * C109 - C102 * C119 + C90 * C127 + C104 * C120 - C105 * C110 -
            C104 * C121 + C91 * C128) *
               C89247 * C89236 * C89153 * C89307 -
           (C104 * C2630 - C105 * C2629 - C104 * C2631 + C91 * C2632 +
            C102 * C837 - C103 * C823 - C102 * C838 + C90 * C847 + C100 * C825 -
            C101 * C817 - C100 * C826 + C89 * C841) *
               C89247 * C89236 * C89153 * C89189) *
              C2628)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                C89247 * C13258 +
            C13794 * C13259 + C13795 * C13260) *
               C89153 * C89307 -
           (C13796 * C13260 + C13795 * C13259 + C13794 * C13258) * C89153 *
               C89189) *
              C89333 +
          ((C13797 * C13258 + C13798 * C13259 + C13799 * C13260) * C89153 *
               C89189 -
           (C13798 * C13260 + C13797 * C13259 +
            (C13261 * C114 - C13262 * C107 - C13261 * C115 + C89093 * C125) *
                C89247 * C13258) *
               C89153 * C89307) *
              C89334 +
          (((C13261 * C116 - C13262 * C108 - C13261 * C117 + C89093 * C126) *
                C89247 * C13258 +
            C15314 * C13259 + C15315 * C13260) *
               C89153 * C89307 -
           ((C13261 * C5728 - C13262 * C5725 - C13261 * C5729 +
             C89093 * C5734) *
                C89247 * C13260 +
            C15315 * C13259 + C15314 * C13258) *
               C89153 * C89189) *
              C2628)) /
            (p * q * std::sqrt(p + q));
    d2eexy[60] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C89236 * C181 - C180 * C106) * C100 +
            (C89236 * C187 - C180 * C113) * C89 + (C194 - C195) * C102 +
            (C196 - C197) * C90 + C210 * C104 + C211 * C91) *
               C89247 * C89153 * C89307 +
           ((C180 * C819 - C89236 * C923) * C100 +
            (C180 * C830 - C89236 * C931) * C89 + (C940 - C941) * C102 +
            (C942 - C943) * C90 + C2710 * C104 + C2711 * C91) *
               C89247 * C89153 * C89189) *
              C89333 +
          (((C195 - C194) * C100 + (C197 - C196) * C89 + (C199 - C198) * C102 +
            (C201 - C200) * C90 + C212 * C104 + C213 * C91) *
               C89247 * C89153 * C89307 +
           ((C941 - C940) * C100 + (C943 - C942) * C89 + (C945 - C944) * C102 +
            (C947 - C946) * C90 + (C2712 - C2713) * C104 +
            (C2714 - C2715) * C91) *
               C89247 * C89153 * C89189) *
              C89334 +
          ((C210 * C100 + C211 * C89 + (C203 - C202) * C102 +
            (C205 - C204) * C90 + (C206 - C207) * C104 + (C208 - C209) * C91) *
               C89247 * C89153 * C89307 +
           (C2710 * C100 + C2711 * C89 + (C2713 - C2712) * C102 +
            (C2715 - C2714) * C90 + (C180 * C2629 - C89236 * C2707) * C104 +
            (C180 * C2631 - C89236 * C2708) * C91) *
               C89247 * C89153 * C89189) *
              C2628)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
             C13260 * C926 - C13315 * C820) *
                C13261 +
            (C13258 * C187 - C13313 * C113 + C13259 * C931 - C13314 * C830 +
             C13260 * C934 - C13315 * C832) *
                C89093) *
               C89247 * C89153 * C89307 +
           ((C13313 * C819 - C13258 * C923 + C13314 * C820 - C13259 * C926 +
             C13315 * C5727 - C13260 * C5787) *
                C13261 +
            (C13313 * C830 - C13258 * C931 + C13314 * C832 - C13259 * C934 +
             C13315 * C5733 - C13260 * C5790) *
                C89093) *
               C89247 * C89153 * C89189) *
              C89333 +
          (((C13313 * C107 - C13258 * C182 + C13314 * C818 - C13259 * C924 +
             C13315 * C821 - C13260 * C927) *
                C13261 +
            (C13313 * C115 - C13258 * C188 + C13314 * C828 - C13259 * C932 +
             C13315 * C834 - C13260 * C935) *
                C89093) *
               C89247 * C89153 * C89307 +
           ((C13258 * C924 - C13313 * C818 + C13259 * C927 - C13314 * C821 +
             C13260 * C5788 - C13315 * C5726) *
                C13261 +
            (C13258 * C932 - C13313 * C828 + C13259 * C935 - C13314 * C834 +
             C13260 * C5791 - C13315 * C5731) *
                C89093) *
               C89247 * C89153 * C89189) *
              C89334 +
          (((C13258 * C183 - C13313 * C108 + C13259 * C925 - C13314 * C817 +
             C13260 * C928 - C13315 * C822) *
                C13261 +
            (C13258 * C189 - C13313 * C117 + C13259 * C933 - C13314 * C826 +
             C13260 * C936 - C13315 * C836) *
                C89093) *
               C89247 * C89153 * C89307 +
           ((C13313 * C817 - C13258 * C925 + C13314 * C822 - C13259 * C928 +
             C13315 * C5725 - C13260 * C5789) *
                C13261 +
            (C13313 * C826 - C13258 * C933 + C13314 * C836 - C13259 * C936 +
             C13315 * C5729 - C13260 * C5792) *
                C89093) *
               C89247 * C89153 * C89189) *
              C2628)) /
            (p * q * std::sqrt(p + q));
    d2eexz[60] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C100 +
            (C89247 * C270 - C263 * C113) * C89 + (C277 - C278) * C102 +
            (C279 - C280) * C90 + C293 * C104 + C294 * C91) *
               C89236 * C89153 * C89307 +
           ((C263 * C819 - C89247 * C1029) * C100 +
            (C263 * C830 - C89247 * C1037) * C89 + (C1046 - C1047) * C102 +
            (C1048 - C1049) * C90 + C2792 * C104 + C2793 * C91) *
               C89236 * C89153 * C89189) *
              C89333 +
          (((C278 - C277) * C100 + (C280 - C279) * C89 + (C282 - C281) * C102 +
            (C284 - C283) * C90 + C295 * C104 + C296 * C91) *
               C89236 * C89153 * C89307 +
           ((C1047 - C1046) * C100 + (C1049 - C1048) * C89 +
            (C1051 - C1050) * C102 + (C1053 - C1052) * C90 +
            (C2794 - C2795) * C104 + (C2796 - C2797) * C91) *
               C89236 * C89153 * C89189) *
              C89334 +
          ((C293 * C100 + C294 * C89 + (C286 - C285) * C102 +
            (C288 - C287) * C90 + (C289 - C290) * C104 + (C291 - C292) * C91) *
               C89236 * C89153 * C89307 +
           (C2792 * C100 + C2793 * C89 + (C2795 - C2794) * C102 +
            (C2797 - C2796) * C90 + (C263 * C2629 - C89247 * C2789) * C104 +
            (C263 * C2631 - C89247 * C2790) * C91) *
               C89236 * C89153 * C89189) *
              C2628)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C13261 +
             (C89247 * C270 - C263 * C113) * C89093) *
                C13258 +
            ((C13956 - C13957) * C13261 + (C13958 - C13959) * C89093) * C13259 +
            C13981 * C13260) *
               C89153 * C89307 +
           (((C13957 - C13956) * C13261 + (C13959 - C13958) * C89093) * C13258 +
            ((C13961 - C13960) * C13261 + (C13963 - C13962) * C89093) * C13259 +
            ((C13964 - C13965) * C13261 + (C13966 - C13967) * C89093) *
                C13260) *
               C89153 * C89189) *
              C89333 +
          ((((C278 - C277) * C13261 + (C280 - C279) * C89093) * C13258 +
            ((C1046 - C1047) * C13261 + (C1048 - C1049) * C89093) * C13259 +
            C13980 * C13260) *
               C89153 * C89307 +
           (((C1047 - C1046) * C13261 + (C1049 - C1048) * C89093) * C13258 +
            ((C1054 - C1055) * C13261 + (C1056 - C1057) * C89093) * C13259 +
            ((C13970 - C13971) * C13261 + (C13972 - C13973) * C89093) *
                C13260) *
               C89153 * C89189) *
              C89334 +
          (((C293 * C13261 + C294 * C89093) * C13258 +
            ((C1051 - C1050) * C13261 + (C1053 - C1052) * C89093) * C13259 +
            ((C1058 - C1059) * C13261 + (C1060 - C1061) * C89093) * C13260) *
               C89153 * C89307 +
           ((C2792 * C13261 + C2793 * C89093) * C13258 +
            ((C1059 - C1058) * C13261 + (C1061 - C1060) * C89093) * C13259 +
            ((C263 * C5725 - C89247 * C5845) * C13261 +
             (C263 * C5729 - C89247 * C5848) * C89093) *
                C13260) *
               C89153 * C89189) *
              C2628)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[60] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 +
                       C91 * C116 - C104 * C108) *
                          C180 +
                      (C89 * C352 - C100 * C346 + C90 * C353 - C102 * C347 +
                       C91 * C354 - C104 * C348) *
                          C89236) *
                         C89247 * C89153 * C89307 +
                     ((C100 * C819 - C89 * C829 + C102 * C818 - C90 * C827 +
                       C104 * C817 - C91 * C825) *
                          C180 +
                      (C100 * C1135 - C89 * C1143 + C102 * C1136 - C90 * C1144 +
                       C104 * C1137 - C91 * C1145) *
                          C89236) *
                         C89247 * C89153 * C89189) *
                        C89333 +
                    (((C100 * C107 - C89 * C114 + C102 * C108 - C90 * C116 +
                       C104 * C109 - C91 * C118) *
                          C180 +
                      (C100 * C347 - C89 * C353 + C102 * C348 - C90 * C354 +
                       C104 * C349 - C91 * C355) *
                          C89236) *
                         C89247 * C89153 * C89307 +
                     ((C89 * C827 - C100 * C818 + C90 * C825 - C102 * C817 +
                       C91 * C837 - C104 * C823) *
                          C180 +
                      (C89 * C1144 - C100 * C1136 + C90 * C1145 - C102 * C1137 +
                       C91 * C1149 - C104 * C1141) *
                          C89236) *
                         C89247 * C89153 * C89189) *
                        C89334 +
                    (((C89 * C116 - C100 * C108 + C90 * C118 - C102 * C109 +
                       C91 * C120 - C104 * C110) *
                          C180 +
                      (C89 * C354 - C100 * C348 + C90 * C355 - C102 * C349 +
                       C91 * C356 - C104 * C350) *
                          C89236) *
                         C89247 * C89153 * C89307 +
                     ((C100 * C817 - C89 * C825 + C102 * C823 - C90 * C837 +
                       C104 * C2629 - C91 * C2630) *
                          C180 +
                      (C100 * C1137 - C89 * C1145 + C102 * C1141 - C90 * C1149 +
                       C104 * C2871 - C91 * C2872) *
                          C89236) *
                         C89247 * C89153 * C89189) *
                        C2628)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C89093 * C112 - C13261 * C106) * C13313 +
                      (C89093 * C352 - C13261 * C346) * C13258 +
                      (C14060 - C14061) * C13314 + (C14062 - C14063) * C13259 +
                      C14084 * C13315 + C14085 * C13260) *
                         C89247 * C89153 * C89307 +
                     ((C14061 - C14060) * C13313 + (C14063 - C14062) * C13258 +
                      (C14065 - C14064) * C13314 + (C14067 - C14066) * C13259 +
                      (C14068 - C14069) * C13315 + (C14070 - C14071) * C13260) *
                         C89247 * C89153 * C89189) *
                        C89333 +
                    (((C13261 * C107 - C89093 * C114) * C13313 +
                      (C13261 * C347 - C89093 * C353) * C13258 +
                      (C14072 - C14073) * C13314 + (C14074 - C14075) * C13259 +
                      C14086 * C13315 + C14087 * C13260) *
                         C89247 * C89153 * C89307 +
                     ((C14073 - C14072) * C13313 + (C14075 - C14074) * C13258 +
                      (C14077 - C14076) * C13314 + (C14079 - C14078) * C13259 +
                      (C14080 - C14081) * C13315 + (C14082 - C14083) * C13260) *
                         C89247 * C89153 * C89189) *
                        C89334 +
                    (((C89093 * C116 - C13261 * C108) * C13313 +
                      (C89093 * C354 - C13261 * C348) * C13258 +
                      (C15538 - C15539) * C13314 + (C15540 - C15541) * C13259 +
                      (C15542 - C15543) * C13315 + (C15544 - C15545) * C13260) *
                         C89247 * C89153 * C89307 +
                     ((C15539 - C15538) * C13313 + (C15541 - C15540) * C13258 +
                      (C15543 - C15542) * C13314 + (C15545 - C15544) * C13259 +
                      (C13261 * C5725 - C89093 * C5728) * C13315 +
                      (C13261 * C5901 - C89093 * C5904) * C13260) *
                         C89247 * C89153 * C89189) *
                        C2628)) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[60] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C89 +
            C440 * C90 + C441 * C91) *
               C89247 * C89153 * C89307 -
           (C1258 * C91 + C1259 * C90 +
            (C180 * C923 - C408 * C819 - C180 * C1135 + C89236 * C1227) * C89) *
               C89247 * C89153 * C89189) *
              C89333 +
          ((C1259 * C89 + C1258 * C90 + C2955 * C91) * C89247 * C89153 *
               C89189 -
           (C442 * C91 + C441 * C90 + C440 * C89) * C89247 * C89153 * C89307) *
              C89334 +
          ((C441 * C89 + C442 * C90 + C443 * C91) * C89247 * C89153 * C89307 -
           ((C180 * C2707 - C408 * C2629 - C180 * C2871 + C89236 * C2947) *
                C91 +
            C2955 * C90 + C1258 * C89) *
               C89247 * C89153 * C89189) *
              C2628)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C13313 * C181 - C13466 * C106 - C13313 * C346 + C13258 * C409 +
            C13314 * C923 - C13467 * C819 - C13314 * C1135 + C13259 * C1227 +
            C13315 * C926 - C13468 * C820 - C13315 * C1138 + C13260 * C1228) *
               C89093 * C89247 * C89153 * C89307 -
           (C13315 * C5787 - C13468 * C5727 - C13315 * C5899 + C13260 * C5957 +
            C13314 * C926 - C13467 * C820 - C13314 * C1138 + C13259 * C1228 +
            C13313 * C923 - C13466 * C819 - C13313 * C1135 + C13258 * C1227) *
               C89093 * C89247 * C89153 * C89189) *
              C89333 +
          ((C13313 * C924 - C13466 * C818 - C13313 * C1136 + C13258 * C1226 +
            C13314 * C927 - C13467 * C821 - C13314 * C1139 + C13259 * C1229 +
            C13315 * C5788 - C13468 * C5726 - C13315 * C5900 + C13260 * C5956) *
               C89093 * C89247 * C89153 * C89189 -
           (C13315 * C927 - C13468 * C821 - C13315 * C1139 + C13260 * C1229 +
            C13314 * C924 - C13467 * C818 - C13314 * C1136 + C13259 * C1226 +
            C13313 * C182 - C13466 * C107 - C13313 * C347 + C13258 * C410) *
               C89093 * C89247 * C89153 * C89307) *
              C89334 +
          ((C13313 * C183 - C13466 * C108 - C13313 * C348 + C13258 * C411 +
            C13314 * C925 - C13467 * C817 - C13314 * C1137 + C13259 * C1225 +
            C13315 * C928 - C13468 * C822 - C13315 * C1140 + C13260 * C1230) *
               C89093 * C89247 * C89153 * C89307 -
           (C13315 * C5789 - C13468 * C5725 - C13315 * C5901 + C13260 * C5955 +
            C13314 * C928 - C13467 * C822 - C13314 * C1140 + C13259 * C1230 +
            C13313 * C925 - C13466 * C817 - C13313 * C1137 + C13258 * C1225) *
               C89093 * C89247 * C89153 * C89189) *
              C2628)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[60] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C180 +
             (C89247 * C493 - C263 * C346) * C89236) *
                C89 +
            ((C277 - C278) * C180 + (C500 - C501) * C89236) * C90 +
            C514 * C91) *
               C89153 * C89307 +
           (((C263 * C819 - C89247 * C1029) * C180 +
             (C263 * C1135 - C89247 * C1335) * C89236) *
                C89 +
            ((C1046 - C1047) * C180 + (C1344 - C1345) * C89236) * C90 +
            C3036 * C91) *
               C89153 * C89189) *
              C89333 +
          ((((C278 - C277) * C180 + (C501 - C500) * C89236) * C89 +
            ((C282 - C281) * C180 + (C504 - C503) * C89236) * C90 +
            C515 * C91) *
               C89153 * C89307 +
           (((C1047 - C1046) * C180 + (C1345 - C1344) * C89236) * C89 +
            ((C1051 - C1050) * C180 + (C1347 - C1346) * C89236) * C90 +
            ((C2794 - C2795) * C180 + (C3033 - C3034) * C89236) * C91) *
               C89153 * C89189) *
              C89334 +
          ((C514 * C89 + ((C286 - C285) * C180 + (C507 - C506) * C89236) * C90 +
            ((C289 - C290) * C180 + (C508 - C509) * C89236) * C91) *
               C89153 * C89307 +
           (C3036 * C89 +
            ((C2795 - C2794) * C180 + (C3034 - C3033) * C89236) * C90 +
            ((C263 * C2629 - C89247 * C2789) * C180 +
             (C263 * C2871 - C89247 * C3029) * C89236) *
                C91) *
               C89153 * C89189) *
              C2628)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C13313 +
            (C89247 * C493 - C263 * C346) * C13258 +
            (C13956 - C13957) * C13314 + (C14240 - C14241) * C13259 +
            C13974 * C13315 + C14249 * C13260) *
               C89093 * C89153 * C89307 +
           ((C13957 - C13956) * C13313 + (C14241 - C14240) * C13258 +
            (C13961 - C13960) * C13314 + (C14243 - C14242) * C13259 +
            (C13964 - C13965) * C13315 + (C14244 - C14245) * C13260) *
               C89093 * C89153 * C89189) *
              C89333 +
          (((C278 - C277) * C13313 + (C501 - C500) * C13258 +
            (C1046 - C1047) * C13314 + (C1344 - C1345) * C13259 +
            C13968 * C13315 + C14246 * C13260) *
               C89093 * C89153 * C89307 +
           ((C1047 - C1046) * C13313 + (C1345 - C1344) * C13258 +
            (C1054 - C1055) * C13314 + (C1348 - C1349) * C13259 +
            (C13970 - C13971) * C13315 + (C14247 - C14248) * C13260) *
               C89093 * C89153 * C89189) *
              C89334 +
          ((C293 * C13313 + C510 * C13258 + (C1051 - C1050) * C13314 +
            (C1347 - C1346) * C13259 + (C1058 - C1059) * C13315 +
            (C1350 - C1351) * C13260) *
               C89093 * C89153 * C89307 +
           (C2792 * C13313 + C3032 * C13258 + (C1059 - C1058) * C13314 +
            (C1351 - C1350) * C13259 +
            (C263 * C5725 - C89247 * C5845) * C13315 +
            (C263 * C5901 - C89247 * C6010) * C13260) *
               C89093 * C89153 * C89189) *
              C2628)) /
            (p * q * std::sqrt(p + q));
    d2eezx[60] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 + C91 * C116 -
             C104 * C108) *
                C263 +
            (C89 * C571 - C100 * C565 + C90 * C572 - C102 * C566 + C91 * C573 -
             C104 * C567) *
                C89247) *
               C89236 * C89153 * C89307 +
           ((C100 * C819 - C89 * C829 + C102 * C818 - C90 * C827 + C104 * C817 -
             C91 * C825) *
                C263 +
            (C100 * C1425 - C89 * C1433 + C102 * C1426 - C90 * C1434 +
             C104 * C1427 - C91 * C1435) *
                C89247) *
               C89236 * C89153 * C89189) *
              C89333 +
          (((C100 * C107 - C89 * C114 + C102 * C108 - C90 * C116 + C104 * C109 -
             C91 * C118) *
                C263 +
            (C100 * C566 - C89 * C572 + C102 * C567 - C90 * C573 + C104 * C568 -
             C91 * C574) *
                C89247) *
               C89236 * C89153 * C89307 +
           ((C89 * C827 - C100 * C818 + C90 * C825 - C102 * C817 + C91 * C837 -
             C104 * C823) *
                C263 +
            (C89 * C1434 - C100 * C1426 + C90 * C1435 - C102 * C1427 +
             C91 * C1439 - C104 * C1431) *
                C89247) *
               C89236 * C89153 * C89189) *
              C89334 +
          (((C89 * C116 - C100 * C108 + C90 * C118 - C102 * C109 + C91 * C120 -
             C104 * C110) *
                C263 +
            (C89 * C573 - C100 * C567 + C90 * C574 - C102 * C568 + C91 * C575 -
             C104 * C569) *
                C89247) *
               C89236 * C89153 * C89307 +
           ((C100 * C817 - C89 * C825 + C102 * C823 - C90 * C837 +
             C104 * C2629 - C91 * C2630) *
                C263 +
            (C100 * C1427 - C89 * C1435 + C102 * C1431 - C90 * C1439 +
             C104 * C3110 - C91 * C3111) *
                C89247) *
               C89236 * C89153 * C89189) *
              C2628)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C263 +
             (C89093 * C571 - C13261 * C565) * C89247) *
                C13258 +
            ((C14060 - C14061) * C263 + (C14328 - C14329) * C89247) * C13259 +
            C14346 * C13260) *
               C89153 * C89307 +
           (((C14061 - C14060) * C263 + (C14329 - C14328) * C89247) * C13258 +
            ((C14065 - C14064) * C263 + (C14332 - C14331) * C89247) * C13259 +
            ((C14068 - C14069) * C263 + (C14333 - C14334) * C89247) * C13260) *
               C89153 * C89189) *
              C89333 +
          ((((C13261 * C107 - C89093 * C114) * C263 +
             (C13261 * C566 - C89093 * C572) * C89247) *
                C13258 +
            ((C14072 - C14073) * C263 + (C14335 - C14336) * C89247) * C13259 +
            C14347 * C13260) *
               C89153 * C89307 +
           (((C14073 - C14072) * C263 + (C14336 - C14335) * C89247) * C13258 +
            ((C14077 - C14076) * C263 + (C14339 - C14338) * C89247) * C13259 +
            ((C14080 - C14081) * C263 + (C14340 - C14341) * C89247) * C13260) *
               C89153 * C89189) *
              C89334 +
          ((((C89093 * C116 - C13261 * C108) * C263 +
             (C89093 * C573 - C13261 * C567) * C89247) *
                C13258 +
            ((C15538 - C15539) * C263 + (C15768 - C15769) * C89247) * C13259 +
            ((C15542 - C15543) * C263 + (C15770 - C15771) * C89247) * C13260) *
               C89153 * C89307 +
           (((C15539 - C15538) * C263 + (C15769 - C15768) * C89247) * C13258 +
            ((C15543 - C15542) * C263 + (C15771 - C15770) * C89247) * C13259 +
            ((C13261 * C5725 - C89093 * C5728) * C263 +
             (C13261 * C6063 - C89093 * C6066) * C89247) *
                C13260) *
               C89153 * C89189) *
              C2628)) /
            (p * q * std::sqrt(p + q));
    d2eezy[60] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C263 +
             (C89236 * C627 - C180 * C565) * C89247) *
                C89 +
            ((C194 - C195) * C263 + (C634 - C635) * C89247) * C90 +
            C648 * C91) *
               C89153 * C89307 +
           (((C180 * C819 - C89236 * C923) * C263 +
             (C180 * C1425 - C89236 * C1515) * C89247) *
                C89 +
            ((C940 - C941) * C263 + (C1524 - C1525) * C89247) * C90 +
            C3193 * C91) *
               C89153 * C89189) *
              C89333 +
          ((((C195 - C194) * C263 + (C635 - C634) * C89247) * C89 +
            ((C199 - C198) * C263 + (C638 - C637) * C89247) * C90 +
            C649 * C91) *
               C89153 * C89307 +
           (((C941 - C940) * C263 + (C1525 - C1524) * C89247) * C89 +
            ((C945 - C944) * C263 + (C1527 - C1526) * C89247) * C90 +
            ((C2712 - C2713) * C263 + (C3190 - C3191) * C89247) * C91) *
               C89153 * C89189) *
              C89334 +
          ((C648 * C89 + ((C203 - C202) * C263 + (C641 - C640) * C89247) * C90 +
            ((C206 - C207) * C263 + (C642 - C643) * C89247) * C91) *
               C89153 * C89307 +
           (C3193 * C89 +
            ((C2713 - C2712) * C263 + (C3191 - C3190) * C89247) * C90 +
            ((C180 * C2629 - C89236 * C2707) * C263 +
             (C180 * C3110 - C89236 * C3186) * C89247) *
                C91) *
               C89153 * C89189) *
              C2628)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
             C13260 * C926 - C13315 * C820) *
                C263 +
            (C13258 * C627 - C13313 * C565 + C13259 * C1515 - C13314 * C1425 +
             C13260 * C1518 - C13315 * C1428) *
                C89247) *
               C89093 * C89153 * C89307 +
           ((C13313 * C819 - C13258 * C923 + C13314 * C820 - C13259 * C926 +
             C13315 * C5727 - C13260 * C5787) *
                C263 +
            (C13313 * C1425 - C13258 * C1515 + C13314 * C1428 - C13259 * C1518 +
             C13315 * C6061 - C13260 * C6117) *
                C89247) *
               C89093 * C89153 * C89189) *
              C89333 +
          (((C13313 * C107 - C13258 * C182 + C13314 * C818 - C13259 * C924 +
             C13315 * C821 - C13260 * C927) *
                C263 +
            (C13313 * C566 - C13258 * C628 + C13314 * C1426 - C13259 * C1516 +
             C13315 * C1429 - C13260 * C1519) *
                C89247) *
               C89093 * C89153 * C89307 +
           ((C13258 * C924 - C13313 * C818 + C13259 * C927 - C13314 * C821 +
             C13260 * C5788 - C13315 * C5726) *
                C263 +
            (C13258 * C1516 - C13313 * C1426 + C13259 * C1519 - C13314 * C1429 +
             C13260 * C6118 - C13315 * C6062) *
                C89247) *
               C89093 * C89153 * C89189) *
              C89334 +
          (((C13258 * C183 - C13313 * C108 + C13259 * C925 - C13314 * C817 +
             C13260 * C928 - C13315 * C822) *
                C263 +
            (C13258 * C629 - C13313 * C567 + C13259 * C1517 - C13314 * C1427 +
             C13260 * C1520 - C13315 * C1430) *
                C89247) *
               C89093 * C89153 * C89307 +
           ((C13313 * C817 - C13258 * C925 + C13314 * C822 - C13259 * C928 +
             C13315 * C5725 - C13260 * C5789) *
                C263 +
            (C13313 * C1427 - C13258 * C1517 + C13314 * C1430 - C13259 * C1520 +
             C13315 * C6063 - C13260 * C6119) *
                C89247) *
               C89093 * C89153 * C89189) *
              C2628)) /
            (p * q * std::sqrt(p + q));
    d2eezz[60] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C89236 *
                C89 +
            C735 * C90 + C736 * C91) *
               C89153 * C89307 -
           (C1642 * C91 + C1643 * C90 +
            (C263 * C1029 - C699 * C819 - C263 * C1425 + C89247 * C1607) *
                C89236 * C89) *
               C89153 * C89189) *
              C89333 +
          ((C1643 * C89 + C1642 * C90 + C3276 * C91) * C89153 * C89189 -
           (C737 * C91 + C736 * C90 + C735 * C89) * C89153 * C89307) *
              C89334 +
          ((C736 * C89 + C737 * C90 + C738 * C91) * C89153 * C89307 -
           ((C263 * C2789 - C699 * C2629 - C263 * C3110 + C89247 * C3267) *
                C89236 * C91 +
            C3276 * C90 + C1642 * C89) *
               C89153 * C89189) *
              C2628)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C13258 +
            C14524 * C13259 + C14525 * C13260) *
               C89093 * C89153 * C89307 -
           (C14526 * C13260 + C14525 * C13259 + C14524 * C13258) * C89093 *
               C89153 * C89189) *
              C89333 +
          ((C1639 * C13258 + C1640 * C13259 + C14527 * C13260) * C89093 *
               C89153 * C89189 -
           (C1640 * C13260 + C1639 * C13259 + C731 * C13258) * C89093 * C89153 *
               C89307) *
              C89334 +
          ((C732 * C13258 + C1638 * C13259 + C1641 * C13260) * C89093 * C89153 *
               C89307 -
           ((C263 * C5845 - C699 * C5725 - C263 * C6063 + C89247 * C6170) *
                C13260 +
            C1641 * C13259 + C1638 * C13258) *
               C89093 * C89153 * C89189) *
              C2628)) /
            (p * q * std::sqrt(p + q));
    d2eexx[61] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C100 * C112 - C101 * C106 - C100 * C113 + C89 * C124 +
             C102 * C114 - C103 * C107 - C102 * C115 + C90 * C125 +
             C104 * C116 - C105 * C108 - C104 * C117 + C91 * C126) *
                C89247 * C89236 * C89308 -
            (C104 * C1730 - C105 * C1722 - C104 * C1731 + C91 * C1746 +
             C102 * C1732 - C103 * C1723 - C102 * C1733 + C90 * C1747 +
             C100 * C1734 - C101 * C1724 - C100 * C1735 + C89 * C1748) *
                C89247 * C89236 * C89217) *
               C89307 +
           ((C100 * C4101 - C101 * C4097 - C100 * C4102 + C89 * C4109 +
             C102 * C4103 - C103 * C4098 - C102 * C4104 + C90 * C4110 +
             C104 * C4105 - C105 * C4099 - C104 * C4106 + C91 * C4111) *
                C89247 * C89236 * C89217 -
            (C104 * C825 - C105 * C817 - C104 * C826 + C91 * C841 +
             C102 * C827 - C103 * C818 - C102 * C828 + C90 * C842 +
             C100 * C829 - C101 * C819 - C100 * C830 + C89 * C843) *
                C89247 * C89236 * C89308) *
               C89189) *
              C815 +
          (((C100 * C1732 - C101 * C1723 - C100 * C1733 + C89 * C1747 +
             C102 * C1730 - C103 * C1722 - C102 * C1731 + C90 * C1746 +
             C104 * C1742 - C105 * C1728 - C104 * C1743 + C91 * C1752) *
                C89247 * C89236 * C89217 -
            (C104 * C118 - C105 * C109 - C104 * C119 + C91 * C127 +
             C102 * C116 - C103 * C108 - C102 * C117 + C90 * C126 +
             C100 * C114 - C101 * C107 - C100 * C115 + C89 * C125) *
                C89247 * C89236 * C89308) *
               C89307 +
           ((C100 * C827 - C101 * C818 - C100 * C828 + C89 * C842 +
             C102 * C825 - C103 * C817 - C102 * C826 + C90 * C841 +
             C104 * C837 - C105 * C823 - C104 * C838 + C91 * C847) *
                C89247 * C89236 * C89308 -
            (C104 * C4107 - C105 * C4100 - C104 * C4108 + C91 * C4112 +
             C102 * C4105 - C103 * C4099 - C102 * C4106 + C90 * C4111 +
             C100 * C4103 - C101 * C4098 - C100 * C4104 + C89 * C4110) *
                C89247 * C89236 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                 C89247 * C13258 +
             C13794 * C13259 + C13795 * C13260) *
                C89308 -
            (C16720 * C13260 + C16721 * C13259 +
             (C13261 * C1734 - C13262 * C1724 - C13261 * C1735 +
              C89093 * C1748) *
                 C89247 * C13258) *
                C89217) *
               C89307 +
           ((C16721 * C13258 + C16720 * C13259 +
             (C13261 * C16685 - C13262 * C16683 - C13261 * C16686 +
              C89093 * C16689) *
                 C89247 * C13260) *
                C89217 -
            (C13796 * C13260 + C13795 * C13259 + C13794 * C13258) * C89308) *
               C89189) *
              C815 +
          ((((C13261 * C1732 - C13262 * C1723 - C13261 * C1733 +
              C89093 * C1747) *
                 C89247 * C13258 +
             C16722 * C13259 + C16723 * C13260) *
                C89217 -
            (C13798 * C13260 + C13797 * C13259 +
             (C13261 * C114 - C13262 * C107 - C13261 * C115 + C89093 * C125) *
                 C89247 * C13258) *
                C89308) *
               C89307 +
           ((C13797 * C13258 + C13798 * C13259 + C13799 * C13260) * C89308 -
            ((C13261 * C16687 - C13262 * C16684 - C13261 * C16688 +
              C89093 * C16690) *
                 C89247 * C13260 +
             C16723 * C13259 + C16722 * C13258) *
                C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eexy[61] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C100 +
             (C89236 * C187 - C180 * C113) * C89 + (C194 - C195) * C102 +
             (C196 - C197) * C90 + C210 * C104 + C211 * C91) *
                C89247 * C89308 +
            ((C180 * C1724 - C89236 * C1828) * C100 +
             (C180 * C1735 - C89236 * C1836) * C89 + (C1845 - C1846) * C102 +
             (C1847 - C1848) * C90 + C3433 * C104 + C3434 * C91) *
                C89247 * C89217) *
               C89307 +
           (((C180 * C819 - C89236 * C923) * C100 +
             (C180 * C830 - C89236 * C931) * C89 + (C940 - C941) * C102 +
             (C942 - C943) * C90 + C2710 * C104 + C2711 * C91) *
                C89247 * C89308 +
            ((C89236 * C4211 - C180 * C4097) * C100 +
             (C89236 * C4215 - C180 * C4102) * C89 + (C4220 - C4221) * C102 +
             (C4222 - C4223) * C90 + (C4224 - C4225) * C104 +
             (C4226 - C4227) * C91) *
                C89247 * C89217) *
               C89189) *
              C815 +
          ((((C195 - C194) * C100 + (C197 - C196) * C89 + (C199 - C198) * C102 +
             (C201 - C200) * C90 + C212 * C104 + C213 * C91) *
                C89247 * C89308 +
            ((C1846 - C1845) * C100 + (C1848 - C1847) * C89 +
             (C1850 - C1849) * C102 + (C1852 - C1851) * C90 +
             (C3435 - C3436) * C104 + (C3437 - C3438) * C91) *
                C89247 * C89217) *
               C89307 +
           (((C941 - C940) * C100 + (C943 - C942) * C89 + (C945 - C944) * C102 +
             (C947 - C946) * C90 + (C2712 - C2713) * C104 +
             (C2714 - C2715) * C91) *
                C89247 * C89308 +
            ((C4221 - C4220) * C100 + (C4223 - C4222) * C89 +
             (C4225 - C4224) * C102 + (C4227 - C4226) * C90 +
             (C180 * C4100 - C89236 * C4214) * C104 +
             (C180 * C4108 - C89236 * C4218) * C91) *
                C89247 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
              C13260 * C926 - C13315 * C820) *
                 C13261 +
             (C13258 * C187 - C13313 * C113 + C13259 * C931 - C13314 * C830 +
              C13260 * C934 - C13315 * C832) *
                 C89093) *
                C89247 * C89308 +
            ((C13313 * C1724 - C13258 * C1828 + C13314 * C4097 -
              C13259 * C4211 + C13315 * C8516 - C13260 * C8600) *
                 C13261 +
             (C13313 * C1735 - C13258 * C1836 + C13314 * C4102 -
              C13259 * C4215 + C13315 * C8522 - C13260 * C8603) *
                 C89093) *
                C89247 * C89217) *
               C89307 +
           (((C13313 * C819 - C13258 * C923 + C13314 * C820 - C13259 * C926 +
              C13315 * C5727 - C13260 * C5787) *
                 C13261 +
             (C13313 * C830 - C13258 * C931 + C13314 * C832 - C13259 * C934 +
              C13315 * C5733 - C13260 * C5790) *
                 C89093) *
                C89247 * C89308 +
            ((C13258 * C4211 - C13313 * C4097 + C13259 * C8600 -
              C13314 * C8516 + C13260 * C16821 - C13315 * C16683) *
                 C13261 +
             (C13258 * C4215 - C13313 * C4102 + C13259 * C8603 -
              C13314 * C8522 + C13260 * C16823 - C13315 * C16686) *
                 C89093) *
                C89247 * C89217) *
               C89189) *
              C815 +
          ((((C13313 * C107 - C13258 * C182 + C13314 * C818 - C13259 * C924 +
              C13315 * C821 - C13260 * C927) *
                 C13261 +
             (C13313 * C115 - C13258 * C188 + C13314 * C828 - C13259 * C932 +
              C13315 * C834 - C13260 * C935) *
                 C89093) *
                C89247 * C89308 +
            ((C13258 * C1829 - C13313 * C1723 + C13259 * C4212 -
              C13314 * C4098 + C13260 * C8601 - C13315 * C8515) *
                 C13261 +
             (C13258 * C1837 - C13313 * C1733 + C13259 * C4216 -
              C13314 * C4104 + C13260 * C8604 - C13315 * C8520) *
                 C89093) *
                C89247 * C89217) *
               C89307 +
           (((C13258 * C924 - C13313 * C818 + C13259 * C927 - C13314 * C821 +
              C13260 * C5788 - C13315 * C5726) *
                 C13261 +
             (C13258 * C932 - C13313 * C828 + C13259 * C935 - C13314 * C834 +
              C13260 * C5791 - C13315 * C5731) *
                 C89093) *
                C89247 * C89308 +
            ((C13313 * C4098 - C13258 * C4212 + C13314 * C8515 -
              C13259 * C8601 + C13315 * C16684 - C13260 * C16822) *
                 C13261 +
             (C13313 * C4104 - C13258 * C4216 + C13314 * C8520 -
              C13259 * C8604 + C13315 * C16688 - C13260 * C16824) *
                 C89093) *
                C89247 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eexz[61] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C100 +
             (C89247 * C270 - C263 * C113) * C89 + (C277 - C278) * C102 +
             (C279 - C280) * C90 + C293 * C104 + C294 * C91) *
                C89236 * C89308 +
            ((C263 * C1724 - C89247 * C1934) * C100 +
             (C263 * C1735 - C89247 * C1942) * C89 + (C1951 - C1952) * C102 +
             (C1953 - C1954) * C90 + C3515 * C104 + C3516 * C91) *
                C89236 * C89217) *
               C89307 +
           (((C263 * C819 - C89247 * C1029) * C100 +
             (C263 * C830 - C89247 * C1037) * C89 + (C1046 - C1047) * C102 +
             (C1048 - C1049) * C90 + C2792 * C104 + C2793 * C91) *
                C89236 * C89308 +
            ((C89247 * C4325 - C263 * C4097) * C100 +
             (C89247 * C4329 - C263 * C4102) * C89 + (C4334 - C4335) * C102 +
             (C4336 - C4337) * C90 + (C4338 - C4339) * C104 +
             (C4340 - C4341) * C91) *
                C89236 * C89217) *
               C89189) *
              C815 +
          ((((C278 - C277) * C100 + (C280 - C279) * C89 + (C282 - C281) * C102 +
             (C284 - C283) * C90 + C295 * C104 + C296 * C91) *
                C89236 * C89308 +
            ((C1952 - C1951) * C100 + (C1954 - C1953) * C89 +
             (C1956 - C1955) * C102 + (C1958 - C1957) * C90 +
             (C3517 - C3518) * C104 + (C3519 - C3520) * C91) *
                C89236 * C89217) *
               C89307 +
           (((C1047 - C1046) * C100 + (C1049 - C1048) * C89 +
             (C1051 - C1050) * C102 + (C1053 - C1052) * C90 +
             (C2794 - C2795) * C104 + (C2796 - C2797) * C91) *
                C89236 * C89308 +
            ((C4335 - C4334) * C100 + (C4337 - C4336) * C89 +
             (C4339 - C4338) * C102 + (C4341 - C4340) * C90 +
             (C263 * C4100 - C89247 * C4328) * C104 +
             (C263 * C4108 - C89247 * C4332) * C91) *
                C89236 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C89247 * C264 - C263 * C106) * C13261 +
              (C89247 * C270 - C263 * C113) * C89093) *
                 C13258 +
             ((C13956 - C13957) * C13261 + (C13958 - C13959) * C89093) *
                 C13259 +
             C13981 * C13260) *
                C89308 +
            (((C263 * C1724 - C89247 * C1934) * C13261 +
              (C263 * C1735 - C89247 * C1942) * C89093) *
                 C13258 +
             ((C16928 - C16929) * C13261 + (C16930 - C16931) * C89093) *
                 C13259 +
             ((C16932 - C16933) * C13261 + (C16934 - C16935) * C89093) *
                 C13260) *
                C89217) *
               C89307 +
           ((((C13957 - C13956) * C13261 + (C13959 - C13958) * C89093) *
                 C13258 +
             ((C13961 - C13960) * C13261 + (C13963 - C13962) * C89093) *
                 C13259 +
             ((C13964 - C13965) * C13261 + (C13966 - C13967) * C89093) *
                 C13260) *
                C89308 +
            (((C16929 - C16928) * C13261 + (C16931 - C16930) * C89093) *
                 C13258 +
             ((C16933 - C16932) * C13261 + (C16935 - C16934) * C89093) *
                 C13259 +
             ((C89247 * C16923 - C263 * C16683) * C13261 +
              (C89247 * C16925 - C263 * C16686) * C89093) *
                 C13260) *
                C89217) *
               C89189) *
              C815 +
          (((((C278 - C277) * C13261 + (C280 - C279) * C89093) * C13258 +
             ((C1046 - C1047) * C13261 + (C1048 - C1049) * C89093) * C13259 +
             C13980 * C13260) *
                C89308 +
            (((C1952 - C1951) * C13261 + (C1954 - C1953) * C89093) * C13258 +
             ((C4334 - C4335) * C13261 + (C4336 - C4337) * C89093) * C13259 +
             ((C16936 - C16937) * C13261 + (C16938 - C16939) * C89093) *
                 C13260) *
                C89217) *
               C89307 +
           ((((C1047 - C1046) * C13261 + (C1049 - C1048) * C89093) * C13258 +
             ((C1054 - C1055) * C13261 + (C1056 - C1057) * C89093) * C13259 +
             ((C13970 - C13971) * C13261 + (C13972 - C13973) * C89093) *
                 C13260) *
                C89308 +
            (((C4335 - C4334) * C13261 + (C4337 - C4336) * C89093) * C13258 +
             ((C16937 - C16936) * C13261 + (C16939 - C16938) * C89093) *
                 C13259 +
             ((C263 * C16684 - C89247 * C16924) * C13261 +
              (C263 * C16688 - C89247 * C16926) * C89093) *
                 C13260) *
                C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[61] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 + C91 * C116 -
              C104 * C108) *
                 C180 +
             (C89 * C352 - C100 * C346 + C90 * C353 - C102 * C347 + C91 * C354 -
              C104 * C348) *
                 C89236) *
                C89247 * C89308 +
            ((C100 * C1724 - C89 * C1734 + C102 * C1723 - C90 * C1732 +
              C104 * C1722 - C91 * C1730) *
                 C180 +
             (C100 * C2040 - C89 * C2048 + C102 * C2041 - C90 * C2049 +
              C104 * C2042 - C91 * C2050) *
                 C89236) *
                C89247 * C89217) *
               C89307 +
           (((C100 * C819 - C89 * C829 + C102 * C818 - C90 * C827 +
              C104 * C817 - C91 * C825) *
                 C180 +
             (C100 * C1135 - C89 * C1143 + C102 * C1136 - C90 * C1144 +
              C104 * C1137 - C91 * C1145) *
                 C89236) *
                C89247 * C89308 +
            ((C89 * C4101 - C100 * C4097 + C90 * C4103 - C102 * C4098 +
              C91 * C4105 - C104 * C4099) *
                 C180 +
             (C89 * C4443 - C100 * C4439 + C90 * C4444 - C102 * C4440 +
              C91 * C4445 - C104 * C4441) *
                 C89236) *
                C89247 * C89217) *
               C89189) *
              C815 +
          ((((C100 * C107 - C89 * C114 + C102 * C108 - C90 * C116 +
              C104 * C109 - C91 * C118) *
                 C180 +
             (C100 * C347 - C89 * C353 + C102 * C348 - C90 * C354 +
              C104 * C349 - C91 * C355) *
                 C89236) *
                C89247 * C89308 +
            ((C89 * C1732 - C100 * C1723 + C90 * C1730 - C102 * C1722 +
              C91 * C1742 - C104 * C1728) *
                 C180 +
             (C89 * C2049 - C100 * C2041 + C90 * C2050 - C102 * C2042 +
              C91 * C2054 - C104 * C2046) *
                 C89236) *
                C89247 * C89217) *
               C89307 +
           (((C89 * C827 - C100 * C818 + C90 * C825 - C102 * C817 + C91 * C837 -
              C104 * C823) *
                 C180 +
             (C89 * C1144 - C100 * C1136 + C90 * C1145 - C102 * C1137 +
              C91 * C1149 - C104 * C1141) *
                 C89236) *
                C89247 * C89308 +
            ((C100 * C4098 - C89 * C4103 + C102 * C4099 - C90 * C4105 +
              C104 * C4100 - C91 * C4107) *
                 C180 +
             (C100 * C4440 - C89 * C4444 + C102 * C4441 - C90 * C4445 +
              C104 * C4442 - C91 * C4446) *
                 C89236) *
                C89247 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C13313 +
             (C89093 * C352 - C13261 * C346) * C13258 +
             (C14060 - C14061) * C13314 + (C14062 - C14063) * C13259 +
             C14084 * C13315 + C14085 * C13260) *
                C89247 * C89308 +
            ((C13261 * C1724 - C89093 * C1734) * C13313 +
             (C13261 * C2040 - C89093 * C2048) * C13258 +
             (C17042 - C17043) * C13314 + (C17044 - C17045) * C13259 +
             (C17046 - C17047) * C13315 + (C17048 - C17049) * C13260) *
                C89247 * C89217) *
               C89307 +
           (((C14061 - C14060) * C13313 + (C14063 - C14062) * C13258 +
             (C14065 - C14064) * C13314 + (C14067 - C14066) * C13259 +
             (C14068 - C14069) * C13315 + (C14070 - C14071) * C13260) *
                C89247 * C89308 +
            ((C17043 - C17042) * C13313 + (C17045 - C17044) * C13258 +
             (C17047 - C17046) * C13314 + (C17049 - C17048) * C13259 +
             (C89093 * C16685 - C13261 * C16683) * C13315 +
             (C89093 * C17039 - C13261 * C17037) * C13260) *
                C89247 * C89217) *
               C89189) *
              C815 +
          ((((C13261 * C107 - C89093 * C114) * C13313 +
             (C13261 * C347 - C89093 * C353) * C13258 +
             (C14072 - C14073) * C13314 + (C14074 - C14075) * C13259 +
             C14086 * C13315 + C14087 * C13260) *
                C89247 * C89308 +
            ((C89093 * C1732 - C13261 * C1723) * C13313 +
             (C89093 * C2049 - C13261 * C2041) * C13258 +
             (C17050 - C17051) * C13314 + (C17052 - C17053) * C13259 +
             (C17054 - C17055) * C13315 + (C17056 - C17057) * C13260) *
                C89247 * C89217) *
               C89307 +
           (((C14073 - C14072) * C13313 + (C14075 - C14074) * C13258 +
             (C14077 - C14076) * C13314 + (C14079 - C14078) * C13259 +
             (C14080 - C14081) * C13315 + (C14082 - C14083) * C13260) *
                C89247 * C89308 +
            ((C17051 - C17050) * C13313 + (C17053 - C17052) * C13258 +
             (C17055 - C17054) * C13314 + (C17057 - C17056) * C13259 +
             (C13261 * C16684 - C89093 * C16687) * C13315 +
             (C13261 * C17038 - C89093 * C17040) * C13260) *
                C89247 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[61] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C89 +
             C440 * C90 + C441 * C91) *
                C89247 * C89308 -
            (C2163 * C91 + C2164 * C90 +
             (C180 * C1828 - C408 * C1724 - C180 * C2040 + C89236 * C2132) *
                 C89) *
                C89247 * C89217) *
               C89307 +
           (((C180 * C4211 - C408 * C4097 - C180 * C4439 + C89236 * C4545) *
                 C89 +
             C4562 * C90 + C4563 * C91) *
                C89247 * C89217 -
            (C1258 * C91 + C1259 * C90 +
             (C180 * C923 - C408 * C819 - C180 * C1135 + C89236 * C1227) *
                 C89) *
                C89247 * C89308) *
               C89189) *
              C815 +
          (((C2164 * C89 + C2163 * C90 + C3678 * C91) * C89247 * C89217 -
            (C442 * C91 + C441 * C90 + C440 * C89) * C89247 * C89308) *
               C89307 +
           ((C1259 * C89 + C1258 * C90 + C2955 * C91) * C89247 * C89308 -
            ((C180 * C4214 - C408 * C4100 - C180 * C4442 + C89236 * C4548) *
                 C91 +
             C4563 * C90 + C4562 * C89) *
                C89247 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13313 * C181 - C13466 * C106 - C13313 * C346 + C13258 * C409 +
             C13314 * C923 - C13467 * C819 - C13314 * C1135 + C13259 * C1227 +
             C13315 * C926 - C13468 * C820 - C13315 * C1138 + C13260 * C1228) *
                C89093 * C89247 * C89308 -
            (C13315 * C8600 - C13468 * C8516 - C13315 * C8760 + C13260 * C8842 +
             C13314 * C4211 - C13467 * C4097 - C13314 * C4439 + C13259 * C4545 +
             C13313 * C1828 - C13466 * C1724 - C13313 * C2040 +
             C13258 * C2132) *
                C89093 * C89247 * C89217) *
               C89307 +
           ((C13313 * C4211 - C13466 * C4097 - C13313 * C4439 + C13258 * C4545 +
             C13314 * C8600 - C13467 * C8516 - C13314 * C8760 + C13259 * C8842 +
             C13315 * C16821 - C13468 * C16683 - C13315 * C17037 +
             C13260 * C17155) *
                C89093 * C89247 * C89217 -
            (C13315 * C5787 - C13468 * C5727 - C13315 * C5899 + C13260 * C5957 +
             C13314 * C926 - C13467 * C820 - C13314 * C1138 + C13259 * C1228 +
             C13313 * C923 - C13466 * C819 - C13313 * C1135 + C13258 * C1227) *
                C89093 * C89247 * C89308) *
               C89189) *
              C815 +
          (((C13313 * C1829 - C13466 * C1723 - C13313 * C2041 + C13258 * C2131 +
             C13314 * C4212 - C13467 * C4098 - C13314 * C4440 + C13259 * C4546 +
             C13315 * C8601 - C13468 * C8515 - C13315 * C8761 +
             C13260 * C8841) *
                C89093 * C89247 * C89217 -
            (C13315 * C927 - C13468 * C821 - C13315 * C1139 + C13260 * C1229 +
             C13314 * C924 - C13467 * C818 - C13314 * C1136 + C13259 * C1226 +
             C13313 * C182 - C13466 * C107 - C13313 * C347 + C13258 * C410) *
                C89093 * C89247 * C89308) *
               C89307 +
           ((C13313 * C924 - C13466 * C818 - C13313 * C1136 + C13258 * C1226 +
             C13314 * C927 - C13467 * C821 - C13314 * C1139 + C13259 * C1229 +
             C13315 * C5788 - C13468 * C5726 - C13315 * C5900 +
             C13260 * C5956) *
                C89093 * C89247 * C89308 -
            (C13315 * C16822 - C13468 * C16684 - C13315 * C17038 +
             C13260 * C17156 + C13314 * C8601 - C13467 * C8515 -
             C13314 * C8761 + C13259 * C8841 + C13313 * C4212 - C13466 * C4098 -
             C13313 * C4440 + C13258 * C4546) *
                C89093 * C89247 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[61] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C89247 * C264 - C263 * C106) * C180 +
              (C89247 * C493 - C263 * C346) * C89236) *
                 C89 +
             ((C277 - C278) * C180 + (C500 - C501) * C89236) * C90 +
             C514 * C91) *
                C89308 +
            (((C263 * C1724 - C89247 * C1934) * C180 +
              (C263 * C2040 - C89247 * C2240) * C89236) *
                 C89 +
             ((C1951 - C1952) * C180 + (C2249 - C2250) * C89236) * C90 +
             C3759 * C91) *
                C89217) *
               C89307 +
           ((((C263 * C819 - C89247 * C1029) * C180 +
              (C263 * C1135 - C89247 * C1335) * C89236) *
                 C89 +
             ((C1046 - C1047) * C180 + (C1344 - C1345) * C89236) * C90 +
             C3036 * C91) *
                C89308 +
            (((C89247 * C4325 - C263 * C4097) * C180 +
              (C89247 * C4661 - C263 * C4439) * C89236) *
                 C89 +
             ((C4334 - C4335) * C180 + (C4666 - C4667) * C89236) * C90 +
             ((C4338 - C4339) * C180 + (C4668 - C4669) * C89236) * C91) *
                C89217) *
               C89189) *
              C815 +
          (((((C278 - C277) * C180 + (C501 - C500) * C89236) * C89 +
             ((C282 - C281) * C180 + (C504 - C503) * C89236) * C90 +
             C515 * C91) *
                C89308 +
            (((C1952 - C1951) * C180 + (C2250 - C2249) * C89236) * C89 +
             ((C1956 - C1955) * C180 + (C2252 - C2251) * C89236) * C90 +
             ((C3517 - C3518) * C180 + (C3756 - C3757) * C89236) * C91) *
                C89217) *
               C89307 +
           ((((C1047 - C1046) * C180 + (C1345 - C1344) * C89236) * C89 +
             ((C1051 - C1050) * C180 + (C1347 - C1346) * C89236) * C90 +
             ((C2794 - C2795) * C180 + (C3033 - C3034) * C89236) * C91) *
                C89308 +
            (((C4335 - C4334) * C180 + (C4667 - C4666) * C89236) * C89 +
             ((C4339 - C4338) * C180 + (C4669 - C4668) * C89236) * C90 +
             ((C263 * C4100 - C89247 * C4328) * C180 +
              (C263 * C4442 - C89247 * C4664) * C89236) *
                 C91) *
                C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C13313 +
             (C89247 * C493 - C263 * C346) * C13258 +
             (C13956 - C13957) * C13314 + (C14240 - C14241) * C13259 +
             C13974 * C13315 + C14249 * C13260) *
                C89093 * C89308 +
            ((C263 * C1724 - C89247 * C1934) * C13313 +
             (C263 * C2040 - C89247 * C2240) * C13258 +
             (C16928 - C16929) * C13314 + (C17258 - C17259) * C13259 +
             (C16932 - C16933) * C13315 + (C17260 - C17261) * C13260) *
                C89093 * C89217) *
               C89307 +
           (((C13957 - C13956) * C13313 + (C14241 - C14240) * C13258 +
             (C13961 - C13960) * C13314 + (C14243 - C14242) * C13259 +
             (C13964 - C13965) * C13315 + (C14244 - C14245) * C13260) *
                C89093 * C89308 +
            ((C16929 - C16928) * C13313 + (C17259 - C17258) * C13258 +
             (C16933 - C16932) * C13314 + (C17261 - C17260) * C13259 +
             (C89247 * C16923 - C263 * C16683) * C13315 +
             (C89247 * C17255 - C263 * C17037) * C13260) *
                C89093 * C89217) *
               C89189) *
              C815 +
          ((((C278 - C277) * C13313 + (C501 - C500) * C13258 +
             (C1046 - C1047) * C13314 + (C1344 - C1345) * C13259 +
             C13968 * C13315 + C14246 * C13260) *
                C89093 * C89308 +
            ((C1952 - C1951) * C13313 + (C2250 - C2249) * C13258 +
             (C4334 - C4335) * C13314 + (C4666 - C4667) * C13259 +
             (C16936 - C16937) * C13315 + (C17262 - C17263) * C13260) *
                C89093 * C89217) *
               C89307 +
           (((C1047 - C1046) * C13313 + (C1345 - C1344) * C13258 +
             (C1054 - C1055) * C13314 + (C1348 - C1349) * C13259 +
             (C13970 - C13971) * C13315 + (C14247 - C14248) * C13260) *
                C89093 * C89308 +
            ((C4335 - C4334) * C13313 + (C4667 - C4666) * C13258 +
             (C16937 - C16936) * C13314 + (C17263 - C17262) * C13259 +
             (C263 * C16684 - C89247 * C16924) * C13315 +
             (C263 * C17038 - C89247 * C17256) * C13260) *
                C89093 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eezx[61] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 + C91 * C116 -
              C104 * C108) *
                 C263 +
             (C89 * C571 - C100 * C565 + C90 * C572 - C102 * C566 + C91 * C573 -
              C104 * C567) *
                 C89247) *
                C89236 * C89308 +
            ((C100 * C1724 - C89 * C1734 + C102 * C1723 - C90 * C1732 +
              C104 * C1722 - C91 * C1730) *
                 C263 +
             (C100 * C2330 - C89 * C2338 + C102 * C2331 - C90 * C2339 +
              C104 * C2332 - C91 * C2340) *
                 C89247) *
                C89236 * C89217) *
               C89307 +
           (((C100 * C819 - C89 * C829 + C102 * C818 - C90 * C827 +
              C104 * C817 - C91 * C825) *
                 C263 +
             (C100 * C1425 - C89 * C1433 + C102 * C1426 - C90 * C1434 +
              C104 * C1427 - C91 * C1435) *
                 C89247) *
                C89236 * C89308 +
            ((C89 * C4101 - C100 * C4097 + C90 * C4103 - C102 * C4098 +
              C91 * C4105 - C104 * C4099) *
                 C263 +
             (C89 * C4771 - C100 * C4767 + C90 * C4772 - C102 * C4768 +
              C91 * C4773 - C104 * C4769) *
                 C89247) *
                C89236 * C89217) *
               C89189) *
              C815 +
          ((((C100 * C107 - C89 * C114 + C102 * C108 - C90 * C116 +
              C104 * C109 - C91 * C118) *
                 C263 +
             (C100 * C566 - C89 * C572 + C102 * C567 - C90 * C573 +
              C104 * C568 - C91 * C574) *
                 C89247) *
                C89236 * C89308 +
            ((C89 * C1732 - C100 * C1723 + C90 * C1730 - C102 * C1722 +
              C91 * C1742 - C104 * C1728) *
                 C263 +
             (C89 * C2339 - C100 * C2331 + C90 * C2340 - C102 * C2332 +
              C91 * C2344 - C104 * C2336) *
                 C89247) *
                C89236 * C89217) *
               C89307 +
           (((C89 * C827 - C100 * C818 + C90 * C825 - C102 * C817 + C91 * C837 -
              C104 * C823) *
                 C263 +
             (C89 * C1434 - C100 * C1426 + C90 * C1435 - C102 * C1427 +
              C91 * C1439 - C104 * C1431) *
                 C89247) *
                C89236 * C89308 +
            ((C100 * C4098 - C89 * C4103 + C102 * C4099 - C90 * C4105 +
              C104 * C4100 - C91 * C4107) *
                 C263 +
             (C100 * C4768 - C89 * C4772 + C102 * C4769 - C90 * C4773 +
              C104 * C4770 - C91 * C4774) *
                 C89247) *
                C89236 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C89093 * C112 - C13261 * C106) * C263 +
              (C89093 * C571 - C13261 * C565) * C89247) *
                 C13258 +
             ((C14060 - C14061) * C263 + (C14328 - C14329) * C89247) * C13259 +
             C14346 * C13260) *
                C89308 +
            (((C13261 * C1724 - C89093 * C1734) * C263 +
              (C13261 * C2330 - C89093 * C2338) * C89247) *
                 C13258 +
             ((C17042 - C17043) * C263 + (C17366 - C17367) * C89247) * C13259 +
             ((C17046 - C17047) * C263 + (C17368 - C17369) * C89247) * C13260) *
                C89217) *
               C89307 +
           ((((C14061 - C14060) * C263 + (C14329 - C14328) * C89247) * C13258 +
             ((C14065 - C14064) * C263 + (C14332 - C14331) * C89247) * C13259 +
             ((C14068 - C14069) * C263 + (C14333 - C14334) * C89247) * C13260) *
                C89308 +
            (((C17043 - C17042) * C263 + (C17367 - C17366) * C89247) * C13258 +
             ((C17047 - C17046) * C263 + (C17369 - C17368) * C89247) * C13259 +
             ((C89093 * C16685 - C13261 * C16683) * C263 +
              (C89093 * C17363 - C13261 * C17361) * C89247) *
                 C13260) *
                C89217) *
               C89189) *
              C815 +
          (((((C13261 * C107 - C89093 * C114) * C263 +
              (C13261 * C566 - C89093 * C572) * C89247) *
                 C13258 +
             ((C14072 - C14073) * C263 + (C14335 - C14336) * C89247) * C13259 +
             C14347 * C13260) *
                C89308 +
            (((C89093 * C1732 - C13261 * C1723) * C263 +
              (C89093 * C2339 - C13261 * C2331) * C89247) *
                 C13258 +
             ((C17050 - C17051) * C263 + (C17370 - C17371) * C89247) * C13259 +
             ((C17054 - C17055) * C263 + (C17372 - C17373) * C89247) * C13260) *
                C89217) *
               C89307 +
           ((((C14073 - C14072) * C263 + (C14336 - C14335) * C89247) * C13258 +
             ((C14077 - C14076) * C263 + (C14339 - C14338) * C89247) * C13259 +
             ((C14080 - C14081) * C263 + (C14340 - C14341) * C89247) * C13260) *
                C89308 +
            (((C17051 - C17050) * C263 + (C17371 - C17370) * C89247) * C13258 +
             ((C17055 - C17054) * C263 + (C17373 - C17372) * C89247) * C13259 +
             ((C13261 * C16684 - C89093 * C16687) * C263 +
              (C13261 * C17362 - C89093 * C17364) * C89247) *
                 C13260) *
                C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eezy[61] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C89236 * C181 - C180 * C106) * C263 +
              (C89236 * C627 - C180 * C565) * C89247) *
                 C89 +
             ((C194 - C195) * C263 + (C634 - C635) * C89247) * C90 +
             C648 * C91) *
                C89308 +
            (((C180 * C1724 - C89236 * C1828) * C263 +
              (C180 * C2330 - C89236 * C2420) * C89247) *
                 C89 +
             ((C1845 - C1846) * C263 + (C2429 - C2430) * C89247) * C90 +
             C3916 * C91) *
                C89217) *
               C89307 +
           ((((C180 * C819 - C89236 * C923) * C263 +
              (C180 * C1425 - C89236 * C1515) * C89247) *
                 C89 +
             ((C940 - C941) * C263 + (C1524 - C1525) * C89247) * C90 +
             C3193 * C91) *
                C89308 +
            (((C89236 * C4211 - C180 * C4097) * C263 +
              (C89236 * C4873 - C180 * C4767) * C89247) *
                 C89 +
             ((C4220 - C4221) * C263 + (C4878 - C4879) * C89247) * C90 +
             ((C4224 - C4225) * C263 + (C4880 - C4881) * C89247) * C91) *
                C89217) *
               C89189) *
              C815 +
          (((((C195 - C194) * C263 + (C635 - C634) * C89247) * C89 +
             ((C199 - C198) * C263 + (C638 - C637) * C89247) * C90 +
             C649 * C91) *
                C89308 +
            (((C1846 - C1845) * C263 + (C2430 - C2429) * C89247) * C89 +
             ((C1850 - C1849) * C263 + (C2432 - C2431) * C89247) * C90 +
             ((C3435 - C3436) * C263 + (C3913 - C3914) * C89247) * C91) *
                C89217) *
               C89307 +
           ((((C941 - C940) * C263 + (C1525 - C1524) * C89247) * C89 +
             ((C945 - C944) * C263 + (C1527 - C1526) * C89247) * C90 +
             ((C2712 - C2713) * C263 + (C3190 - C3191) * C89247) * C91) *
                C89308 +
            (((C4221 - C4220) * C263 + (C4879 - C4878) * C89247) * C89 +
             ((C4225 - C4224) * C263 + (C4881 - C4880) * C89247) * C90 +
             ((C180 * C4100 - C89236 * C4214) * C263 +
              (C180 * C4770 - C89236 * C4876) * C89247) *
                 C91) *
                C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
              C13260 * C926 - C13315 * C820) *
                 C263 +
             (C13258 * C627 - C13313 * C565 + C13259 * C1515 - C13314 * C1425 +
              C13260 * C1518 - C13315 * C1428) *
                 C89247) *
                C89093 * C89308 +
            ((C13313 * C1724 - C13258 * C1828 + C13314 * C4097 -
              C13259 * C4211 + C13315 * C8516 - C13260 * C8600) *
                 C263 +
             (C13313 * C2330 - C13258 * C2420 + C13314 * C4767 -
              C13259 * C4873 + C13315 * C8994 - C13260 * C9074) *
                 C89247) *
                C89093 * C89217) *
               C89307 +
           (((C13313 * C819 - C13258 * C923 + C13314 * C820 - C13259 * C926 +
              C13315 * C5727 - C13260 * C5787) *
                 C263 +
             (C13313 * C1425 - C13258 * C1515 + C13314 * C1428 -
              C13259 * C1518 + C13315 * C6061 - C13260 * C6117) *
                 C89247) *
                C89093 * C89308 +
            ((C13258 * C4211 - C13313 * C4097 + C13259 * C8600 -
              C13314 * C8516 + C13260 * C16821 - C13315 * C16683) *
                 C263 +
             (C13258 * C4873 - C13313 * C4767 + C13259 * C9074 -
              C13314 * C8994 + C13260 * C17471 - C13315 * C17361) *
                 C89247) *
                C89093 * C89217) *
               C89189) *
              C815 +
          ((((C13313 * C107 - C13258 * C182 + C13314 * C818 - C13259 * C924 +
              C13315 * C821 - C13260 * C927) *
                 C263 +
             (C13313 * C566 - C13258 * C628 + C13314 * C1426 - C13259 * C1516 +
              C13315 * C1429 - C13260 * C1519) *
                 C89247) *
                C89093 * C89308 +
            ((C13258 * C1829 - C13313 * C1723 + C13259 * C4212 -
              C13314 * C4098 + C13260 * C8601 - C13315 * C8515) *
                 C263 +
             (C13258 * C2421 - C13313 * C2331 + C13259 * C4874 -
              C13314 * C4768 + C13260 * C9075 - C13315 * C8995) *
                 C89247) *
                C89093 * C89217) *
               C89307 +
           (((C13258 * C924 - C13313 * C818 + C13259 * C927 - C13314 * C821 +
              C13260 * C5788 - C13315 * C5726) *
                 C263 +
             (C13258 * C1516 - C13313 * C1426 + C13259 * C1519 -
              C13314 * C1429 + C13260 * C6118 - C13315 * C6062) *
                 C89247) *
                C89093 * C89308 +
            ((C13313 * C4098 - C13258 * C4212 + C13314 * C8515 -
              C13259 * C8601 + C13315 * C16684 - C13260 * C16822) *
                 C263 +
             (C13313 * C4768 - C13258 * C4874 + C13314 * C8995 -
              C13259 * C9075 + C13315 * C17362 - C13260 * C17472) *
                 C89247) *
                C89093 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eezz[61] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) *
                 C89236 * C89 +
             C735 * C90 + C736 * C91) *
                C89308 -
            (C2547 * C91 + C2548 * C90 +
             (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
                 C89236 * C89) *
                C89217) *
               C89307 +
           (((C263 * C4325 - C699 * C4097 - C263 * C4767 + C89247 * C4979) *
                 C89236 * C89 +
             C4998 * C90 + C4999 * C91) *
                C89217 -
            (C1642 * C91 + C1643 * C90 +
             (C263 * C1029 - C699 * C819 - C263 * C1425 + C89247 * C1607) *
                 C89236 * C89) *
                C89308) *
               C89189) *
              C815 +
          (((C2548 * C89 + C2547 * C90 + C3999 * C91) * C89217 -
            (C737 * C91 + C736 * C90 + C735 * C89) * C89308) *
               C89307 +
           ((C1643 * C89 + C1642 * C90 + C3276 * C91) * C89308 -
            ((C263 * C4328 - C699 * C4100 - C263 * C4770 + C89247 * C4982) *
                 C89236 * C91 +
             C4999 * C90 + C4998 * C89) *
                C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) *
                 C13258 +
             C14524 * C13259 + C14525 * C13260) *
                C89093 * C89308 -
            (C17592 * C13260 + C17593 * C13259 +
             (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
                 C13258) *
                C89093 * C89217) *
               C89307 +
           ((C17593 * C13258 + C17592 * C13259 +
             (C263 * C16923 - C699 * C16683 - C263 * C17361 + C89247 * C17571) *
                 C13260) *
                C89093 * C89217 -
            (C14526 * C13260 + C14525 * C13259 + C14524 * C13258) * C89093 *
                C89308) *
               C89189) *
              C815 +
          (((C2544 * C13258 + C4996 * C13259 + C17594 * C13260) * C89093 *
                C89217 -
            (C1640 * C13260 + C1639 * C13259 + C731 * C13258) * C89093 *
                C89308) *
               C89307 +
           ((C1639 * C13258 + C1640 * C13259 + C14527 * C13260) * C89093 *
                C89308 -
            ((C263 * C16924 - C699 * C16684 - C263 * C17362 + C89247 * C17572) *
                 C13260 +
             C17594 * C13259 + C4996 * C13258) *
                C89093 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eexx[62] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C112 - C101 * C106 - C100 * C113 + C89 * C124 + C102 * C114 -
            C103 * C107 - C102 * C115 + C90 * C125 + C104 * C116 - C105 * C108 -
            C104 * C117 + C91 * C126) *
               C89247 * C89236 * C89153 * C812 -
           (C104 * C825 - C105 * C817 - C104 * C826 + C91 * C841 + C102 * C827 -
            C103 * C818 - C102 * C828 + C90 * C842 + C100 * C829 - C101 * C819 -
            C100 * C830 + C89 * C843) *
               C89247 * C89236 * C89153 * C813 +
           (C100 * C831 - C101 * C820 - C100 * C832 + C89 * C844 + C102 * C833 -
            C103 * C821 - C102 * C834 + C90 * C845 + C104 * C835 - C105 * C822 -
            C104 * C836 + C91 * C846) *
               C89247 * C89236 * C89153 * C814) *
              C815 +
          ((C100 * C827 - C101 * C818 - C100 * C828 + C89 * C842 + C102 * C825 -
            C103 * C817 - C102 * C826 + C90 * C841 + C104 * C837 - C105 * C823 -
            C104 * C838 + C91 * C847) *
               C89247 * C89236 * C89153 * C813 -
           (C104 * C118 - C105 * C109 - C104 * C119 + C91 * C127 + C102 * C116 -
            C103 * C108 - C102 * C117 + C90 * C126 + C100 * C114 - C101 * C107 -
            C100 * C115 + C89 * C125) *
               C89247 * C89236 * C89153 * C812 -
           (C104 * C839 - C105 * C824 - C104 * C840 + C91 * C848 + C102 * C835 -
            C103 * C822 - C102 * C836 + C90 * C846 + C100 * C833 - C101 * C821 -
            C100 * C834 + C89 * C845) *
               C89247 * C89236 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C100 * C112 - C101 * C106 - C100 * C113 + C89 * C124 + C102 * C114 -
           C103 * C107 - C102 * C115 + C90 * C125 + C104 * C116 - C105 * C108 -
           C104 * C117 + C91 * C126) *
              C89247 * C89236 * C89153 * C89137 * C96 -
          (C104 * C118 - C105 * C109 - C104 * C119 + C91 * C127 + C102 * C116 -
           C103 * C108 - C102 * C117 + C90 * C126 + C100 * C114 - C101 * C107 -
           C100 * C115 + C89 * C125) *
              C89247 * C89236 * C89153 * C89137 * C97 +
          (C100 * C116 - C101 * C108 - C100 * C117 + C89 * C126 + C102 * C118 -
           C103 * C109 - C102 * C119 + C90 * C127 + C104 * C120 - C105 * C110 -
           C104 * C121 + C91 * C128) *
              C89247 * C89236 * C89153 * C89137 * C98 -
          (C104 * C122 - C105 * C111 - C104 * C123 + C91 * C129 + C102 * C120 -
           C103 * C110 - C102 * C121 + C90 * C128 + C100 * C118 - C101 * C109 -
           C100 * C119 + C89 * C127) *
              C89247 * C89236 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C112 - C101 * C106 - C100 * C113 + C89 * C124 + C102 * C114 -
            C103 * C107 - C102 * C115 + C90 * C125 + C104 * C116 - C105 * C108 -
            C104 * C117 + C91 * C126) *
               C89247 * C89236 * C1719 -
           (C104 * C1730 - C105 * C1722 - C104 * C1731 + C91 * C1746 +
            C102 * C1732 - C103 * C1723 - C102 * C1733 + C90 * C1747 +
            C100 * C1734 - C101 * C1724 - C100 * C1735 + C89 * C1748) *
               C89247 * C89236 * C1720 +
           (C100 * C1736 - C101 * C1725 - C100 * C1737 + C89 * C1749 +
            C102 * C1738 - C103 * C1726 - C102 * C1739 + C90 * C1750 +
            C104 * C1740 - C105 * C1727 - C104 * C1741 + C91 * C1751) *
               C89247 * C89236 * C1721) *
              C89137 * C815 +
          ((C100 * C1732 - C101 * C1723 - C100 * C1733 + C89 * C1747 +
            C102 * C1730 - C103 * C1722 - C102 * C1731 + C90 * C1746 +
            C104 * C1742 - C105 * C1728 - C104 * C1743 + C91 * C1752) *
               C89247 * C89236 * C1720 -
           (C104 * C118 - C105 * C109 - C104 * C119 + C91 * C127 + C102 * C116 -
            C103 * C108 - C102 * C117 + C90 * C126 + C100 * C114 - C101 * C107 -
            C100 * C115 + C89 * C125) *
               C89247 * C89236 * C1719 -
           (C104 * C1744 - C105 * C1729 - C104 * C1745 + C91 * C1753 +
            C102 * C1740 - C103 * C1727 - C102 * C1741 + C90 * C1751 +
            C100 * C1738 - C101 * C1726 - C100 * C1739 + C89 * C1750) *
               C89247 * C89236 * C1721) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
               C89247 * C13258 +
           (C13261 * C829 - C13262 * C819 - C13261 * C830 + C89093 * C843) *
               C89247 * C13259 +
           (C13261 * C831 - C13262 * C820 - C13261 * C832 + C89093 * C844) *
               C89247 * C13260) *
              C89153 * C89137 * C96 -
          ((C13261 * C833 - C13262 * C821 - C13261 * C834 + C89093 * C845) *
               C89247 * C13260 +
           (C13261 * C827 - C13262 * C818 - C13261 * C828 + C89093 * C842) *
               C89247 * C13259 +
           (C13261 * C114 - C13262 * C107 - C13261 * C115 + C89093 * C125) *
               C89247 * C13258) *
              C89153 * C89137 * C97 +
          ((C13261 * C116 - C13262 * C108 - C13261 * C117 + C89093 * C126) *
               C89247 * C13258 +
           (C13261 * C825 - C13262 * C817 - C13261 * C826 + C89093 * C841) *
               C89247 * C13259 +
           (C13261 * C835 - C13262 * C822 - C13261 * C836 + C89093 * C846) *
               C89247 * C13260) *
              C89153 * C89137 * C98 -
          ((C13261 * C839 - C13262 * C824 - C13261 * C840 + C89093 * C848) *
               C89247 * C13260 +
           (C13261 * C837 - C13262 * C823 - C13261 * C838 + C89093 * C847) *
               C89247 * C13259 +
           (C13261 * C118 - C13262 * C109 - C13261 * C119 + C89093 * C127) *
               C89247 * C13258) *
              C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                C89247 * C13258 +
            C13794 * C13259 + C13795 * C13260) *
               C89153 * C812 -
           (C13796 * C13260 + C13795 * C13259 + C13794 * C13258) * C89153 *
               C813 +
           (C13795 * C13258 + C13796 * C13259 +
            (C13261 * C13745 - C13262 * C13743 - C13261 * C13746 +
             C89093 * C13749) *
                C89247 * C13260) *
               C89153 * C814) *
              C815 +
          ((C13797 * C13258 + C13798 * C13259 + C13799 * C13260) * C89153 *
               C813 -
           (C13798 * C13260 + C13797 * C13259 +
            (C13261 * C114 - C13262 * C107 - C13261 * C115 + C89093 * C125) *
                C89247 * C13258) *
               C89153 * C812 -
           ((C13261 * C13747 - C13262 * C13744 - C13261 * C13748 +
             C89093 * C13750) *
                C89247 * C13260 +
            C13799 * C13259 + C13798 * C13258) *
               C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                C89247 * C13258 +
            C13794 * C13259 + C13795 * C13260) *
               C1719 -
           ((C13261 * C8521 - C13262 * C8516 - C13261 * C8522 +
             C89093 * C8525) *
                C89247 * C13260 +
            (C13261 * C4101 - C13262 * C4097 - C13261 * C4102 +
             C89093 * C4109) *
                C89247 * C13259 +
            (C13261 * C1734 - C13262 * C1724 - C13261 * C1735 +
             C89093 * C1748) *
                C89247 * C13258) *
               C1720 +
           ((C13261 * C1736 - C13262 * C1725 - C13261 * C1737 +
             C89093 * C1749) *
                C89247 * C13258 +
            (C13261 * C6254 - C13262 * C6249 - C13261 * C6255 +
             C89093 * C6258) *
                C89247 * C13259 +
            (C13261 * C14603 - C13262 * C14601 - C13261 * C14604 +
             C89093 * C14607) *
                C89247 * C13260) *
               C1721) *
              C89137 * C815 +
          (((C13261 * C1732 - C13262 * C1723 - C13261 * C1733 +
             C89093 * C1747) *
                C89247 * C13258 +
            (C13261 * C4103 - C13262 * C4098 - C13261 * C4104 +
             C89093 * C4110) *
                C89247 * C13259 +
            (C13261 * C8519 - C13262 * C8515 - C13261 * C8520 +
             C89093 * C8524) *
                C89247 * C13260) *
               C1720 -
           (C13798 * C13260 + C13797 * C13259 +
            (C13261 * C114 - C13262 * C107 - C13261 * C115 + C89093 * C125) *
                C89247 * C13258) *
               C1719 -
           ((C13261 * C14605 - C13262 * C14602 - C13261 * C14606 +
             C89093 * C14608) *
                C89247 * C13260 +
            (C13261 * C6252 - C13262 * C6248 - C13261 * C6253 +
             C89093 * C6257) *
                C89247 * C13259 +
            (C13261 * C1738 - C13262 * C1726 - C13261 * C1739 +
             C89093 * C1750) *
                C89247 * C13258) *
               C1721) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q));
    d2eexy[62] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C89236 * C181 - C180 * C106) * C100 +
            (C89236 * C187 - C180 * C113) * C89 + (C194 - C195) * C102 +
            (C196 - C197) * C90 + C210 * C104 + C211 * C91) *
               C89247 * C89153 * C812 +
           ((C180 * C819 - C89236 * C923) * C100 +
            (C180 * C830 - C89236 * C931) * C89 + (C940 - C941) * C102 +
            (C942 - C943) * C90 + (C944 - C945) * C104 + (C946 - C947) * C91) *
               C89247 * C89153 * C813 +
           ((C89236 * C926 - C180 * C820) * C100 +
            (C89236 * C934 - C180 * C832) * C89 + (C948 - C949) * C102 +
            (C950 - C951) * C90 + (C952 - C953) * C104 + (C954 - C955) * C91) *
               C89247 * C89153 * C814) *
              C815 +
          (((C195 - C194) * C100 + (C197 - C196) * C89 + (C199 - C198) * C102 +
            (C201 - C200) * C90 + C212 * C104 + C213 * C91) *
               C89247 * C89153 * C812 +
           ((C941 - C940) * C100 + (C943 - C942) * C89 + (C945 - C944) * C102 +
            (C947 - C946) * C90 + (C89236 * C929 - C180 * C823) * C104 +
            (C89236 * C937 - C180 * C838) * C91) *
               C89247 * C89153 * C813 +
           ((C949 - C948) * C100 + (C951 - C950) * C89 + (C953 - C952) * C102 +
            (C955 - C954) * C90 + (C180 * C824 - C89236 * C930) * C104 +
            (C180 * C840 - C89236 * C938) * C91) *
               C89247 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C89236 * C181 - C180 * C106) * C100 +
           (C89236 * C187 - C180 * C113) * C89 + (C194 - C195) * C102 +
           (C196 - C197) * C90 + C210 * C104 + C211 * C91) *
              C89247 * C89153 * C89137 * C96 +
          ((C195 - C194) * C100 + (C197 - C196) * C89 + (C199 - C198) * C102 +
           (C201 - C200) * C90 + C212 * C104 + C213 * C91) *
              C89247 * C89153 * C89137 * C97 +
          (C210 * C100 + C211 * C89 + (C203 - C202) * C102 +
           (C205 - C204) * C90 + (C206 - C207) * C104 + (C208 - C209) * C91) *
              C89247 * C89153 * C89137 * C98 +
          (C212 * C100 + C213 * C89 + (C207 - C206) * C102 +
           (C209 - C208) * C90 + (C180 * C111 - C89236 * C186) * C104 +
           (C180 * C123 - C89236 * C192) * C91) *
              C89247 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89236 * C181 - C180 * C106) * C100 +
            (C89236 * C187 - C180 * C113) * C89 + (C194 - C195) * C102 +
            (C196 - C197) * C90 + C210 * C104 + C211 * C91) *
               C89247 * C1719 +
           ((C180 * C1724 - C89236 * C1828) * C100 +
            (C180 * C1735 - C89236 * C1836) * C89 + (C1845 - C1846) * C102 +
            (C1847 - C1848) * C90 + (C1849 - C1850) * C104 +
            (C1851 - C1852) * C91) *
               C89247 * C1720 +
           ((C89236 * C1831 - C180 * C1725) * C100 +
            (C89236 * C1839 - C180 * C1737) * C89 + (C1853 - C1854) * C102 +
            (C1855 - C1856) * C90 + (C1857 - C1858) * C104 +
            (C1859 - C1860) * C91) *
               C89247 * C1721) *
              C89137 * C815 +
          (((C195 - C194) * C100 + (C197 - C196) * C89 + (C199 - C198) * C102 +
            (C201 - C200) * C90 + C212 * C104 + C213 * C91) *
               C89247 * C1719 +
           ((C1846 - C1845) * C100 + (C1848 - C1847) * C89 +
            (C1850 - C1849) * C102 + (C1852 - C1851) * C90 +
            (C89236 * C1834 - C180 * C1728) * C104 +
            (C89236 * C1842 - C180 * C1743) * C91) *
               C89247 * C1720 +
           ((C1854 - C1853) * C100 + (C1856 - C1855) * C89 +
            (C1858 - C1857) * C102 + (C1860 - C1859) * C90 +
            (C180 * C1729 - C89236 * C1835) * C104 +
            (C180 * C1745 - C89236 * C1843) * C91) *
               C89247 * C1721) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
            C13260 * C926 - C13315 * C820) *
               C13261 +
           (C13258 * C187 - C13313 * C113 + C13259 * C931 - C13314 * C830 +
            C13260 * C934 - C13315 * C832) *
               C89093) *
              C89247 * C89153 * C89137 * C96 +
          ((C13313 * C107 - C13258 * C182 + C13314 * C818 - C13259 * C924 +
            C13315 * C821 - C13260 * C927) *
               C13261 +
           (C13313 * C115 - C13258 * C188 + C13314 * C828 - C13259 * C932 +
            C13315 * C834 - C13260 * C935) *
               C89093) *
              C89247 * C89153 * C89137 * C97 +
          ((C13258 * C183 - C13313 * C108 + C13259 * C925 - C13314 * C817 +
            C13260 * C928 - C13315 * C822) *
               C13261 +
           (C13258 * C189 - C13313 * C117 + C13259 * C933 - C13314 * C826 +
            C13260 * C936 - C13315 * C836) *
               C89093) *
              C89247 * C89153 * C89137 * C98 +
          ((C13313 * C109 - C13258 * C184 + C13314 * C823 - C13259 * C929 +
            C13315 * C824 - C13260 * C930) *
               C13261 +
           (C13313 * C119 - C13258 * C190 + C13314 * C838 - C13259 * C937 +
            C13315 * C840 - C13260 * C938) *
               C89093) *
              C89247 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
             C13260 * C926 - C13315 * C820) *
                C13261 +
            (C13258 * C187 - C13313 * C113 + C13259 * C931 - C13314 * C830 +
             C13260 * C934 - C13315 * C832) *
                C89093) *
               C89247 * C89153 * C812 +
           ((C13313 * C819 - C13258 * C923 + C13314 * C820 - C13259 * C926 +
             C13315 * C5727 - C13260 * C5787) *
                C13261 +
            (C13313 * C830 - C13258 * C931 + C13314 * C832 - C13259 * C934 +
             C13315 * C5733 - C13260 * C5790) *
                C89093) *
               C89247 * C89153 * C813 +
           ((C13258 * C926 - C13313 * C820 + C13259 * C5787 - C13314 * C5727 +
             C13260 * C13873 - C13315 * C13743) *
                C13261 +
            (C13258 * C934 - C13313 * C832 + C13259 * C5790 - C13314 * C5733 +
             C13260 * C13875 - C13315 * C13746) *
                C89093) *
               C89247 * C89153 * C814) *
              C815 +
          (((C13313 * C107 - C13258 * C182 + C13314 * C818 - C13259 * C924 +
             C13315 * C821 - C13260 * C927) *
                C13261 +
            (C13313 * C115 - C13258 * C188 + C13314 * C828 - C13259 * C932 +
             C13315 * C834 - C13260 * C935) *
                C89093) *
               C89247 * C89153 * C812 +
           ((C13258 * C924 - C13313 * C818 + C13259 * C927 - C13314 * C821 +
             C13260 * C5788 - C13315 * C5726) *
                C13261 +
            (C13258 * C932 - C13313 * C828 + C13259 * C935 - C13314 * C834 +
             C13260 * C5791 - C13315 * C5731) *
                C89093) *
               C89247 * C89153 * C813 +
           ((C13313 * C821 - C13258 * C927 + C13314 * C5726 - C13259 * C5788 +
             C13315 * C13744 - C13260 * C13874) *
                C13261 +
            (C13313 * C834 - C13258 * C935 + C13314 * C5731 - C13259 * C5791 +
             C13315 * C13748 - C13260 * C13876) *
                C89093) *
               C89247 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
             C13260 * C926 - C13315 * C820) *
                C13261 +
            (C13258 * C187 - C13313 * C113 + C13259 * C931 - C13314 * C830 +
             C13260 * C934 - C13315 * C832) *
                C89093) *
               C89247 * C1719 +
           ((C13313 * C1724 - C13258 * C1828 + C13314 * C4097 - C13259 * C4211 +
             C13315 * C8516 - C13260 * C8600) *
                C13261 +
            (C13313 * C1735 - C13258 * C1836 + C13314 * C4102 - C13259 * C4215 +
             C13315 * C8522 - C13260 * C8603) *
                C89093) *
               C89247 * C1720 +
           ((C13258 * C1831 - C13313 * C1725 + C13259 * C6333 - C13314 * C6249 +
             C13260 * C14683 - C13315 * C14601) *
                C13261 +
            (C13258 * C1839 - C13313 * C1737 + C13259 * C6336 - C13314 * C6255 +
             C13260 * C14685 - C13315 * C14604) *
                C89093) *
               C89247 * C1721) *
              C89137 * C815 +
          (((C13313 * C107 - C13258 * C182 + C13314 * C818 - C13259 * C924 +
             C13315 * C821 - C13260 * C927) *
                C13261 +
            (C13313 * C115 - C13258 * C188 + C13314 * C828 - C13259 * C932 +
             C13315 * C834 - C13260 * C935) *
                C89093) *
               C89247 * C1719 +
           ((C13258 * C1829 - C13313 * C1723 + C13259 * C4212 - C13314 * C4098 +
             C13260 * C8601 - C13315 * C8515) *
                C13261 +
            (C13258 * C1837 - C13313 * C1733 + C13259 * C4216 - C13314 * C4104 +
             C13260 * C8604 - C13315 * C8520) *
                C89093) *
               C89247 * C1720 +
           ((C13313 * C1726 - C13258 * C1832 + C13314 * C6248 - C13259 * C6334 +
             C13315 * C14602 - C13260 * C14684) *
                C13261 +
            (C13313 * C1739 - C13258 * C1840 + C13314 * C6253 - C13259 * C6337 +
             C13315 * C14606 - C13260 * C14686) *
                C89093) *
               C89247 * C1721) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q));
    d2eexz[62] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C100 +
            (C89247 * C270 - C263 * C113) * C89 + (C277 - C278) * C102 +
            (C279 - C280) * C90 + C293 * C104 + C294 * C91) *
               C89236 * C89153 * C812 +
           ((C263 * C819 - C89247 * C1029) * C100 +
            (C263 * C830 - C89247 * C1037) * C89 + (C1046 - C1047) * C102 +
            (C1048 - C1049) * C90 + (C1050 - C1051) * C104 +
            (C1052 - C1053) * C91) *
               C89236 * C89153 * C813 +
           ((C89247 * C1032 - C263 * C820) * C100 +
            (C89247 * C1040 - C263 * C832) * C89 + (C1054 - C1055) * C102 +
            (C1056 - C1057) * C90 + (C1058 - C1059) * C104 +
            (C1060 - C1061) * C91) *
               C89236 * C89153 * C814) *
              C815 +
          (((C278 - C277) * C100 + (C280 - C279) * C89 + (C282 - C281) * C102 +
            (C284 - C283) * C90 + C295 * C104 + C296 * C91) *
               C89236 * C89153 * C812 +
           ((C1047 - C1046) * C100 + (C1049 - C1048) * C89 +
            (C1051 - C1050) * C102 + (C1053 - C1052) * C90 +
            (C89247 * C1035 - C263 * C823) * C104 +
            (C89247 * C1043 - C263 * C838) * C91) *
               C89236 * C89153 * C813 +
           ((C1055 - C1054) * C100 + (C1057 - C1056) * C89 +
            (C1059 - C1058) * C102 + (C1061 - C1060) * C90 +
            (C263 * C824 - C89247 * C1036) * C104 +
            (C263 * C840 - C89247 * C1044) * C91) *
               C89236 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C89247 * C264 - C263 * C106) * C100 +
           (C89247 * C270 - C263 * C113) * C89 + (C277 - C278) * C102 +
           (C279 - C280) * C90 + C293 * C104 + C294 * C91) *
              C89236 * C89153 * C89137 * C96 +
          ((C278 - C277) * C100 + (C280 - C279) * C89 + (C282 - C281) * C102 +
           (C284 - C283) * C90 + C295 * C104 + C296 * C91) *
              C89236 * C89153 * C89137 * C97 +
          (C293 * C100 + C294 * C89 + (C286 - C285) * C102 +
           (C288 - C287) * C90 + (C289 - C290) * C104 + (C291 - C292) * C91) *
              C89236 * C89153 * C89137 * C98 +
          (C295 * C100 + C296 * C89 + (C290 - C289) * C102 +
           (C292 - C291) * C90 + (C263 * C111 - C89247 * C269) * C104 +
           (C263 * C123 - C89247 * C275) * C91) *
              C89236 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C100 +
            (C89247 * C270 - C263 * C113) * C89 + (C277 - C278) * C102 +
            (C279 - C280) * C90 + C293 * C104 + C294 * C91) *
               C89236 * C1719 +
           ((C263 * C1724 - C89247 * C1934) * C100 +
            (C263 * C1735 - C89247 * C1942) * C89 + (C1951 - C1952) * C102 +
            (C1953 - C1954) * C90 + (C1955 - C1956) * C104 +
            (C1957 - C1958) * C91) *
               C89236 * C1720 +
           ((C89247 * C1937 - C263 * C1725) * C100 +
            (C89247 * C1945 - C263 * C1737) * C89 + (C1959 - C1960) * C102 +
            (C1961 - C1962) * C90 + (C1963 - C1964) * C104 +
            (C1965 - C1966) * C91) *
               C89236 * C1721) *
              C89137 * C815 +
          (((C278 - C277) * C100 + (C280 - C279) * C89 + (C282 - C281) * C102 +
            (C284 - C283) * C90 + C295 * C104 + C296 * C91) *
               C89236 * C1719 +
           ((C1952 - C1951) * C100 + (C1954 - C1953) * C89 +
            (C1956 - C1955) * C102 + (C1958 - C1957) * C90 +
            (C89247 * C1940 - C263 * C1728) * C104 +
            (C89247 * C1948 - C263 * C1743) * C91) *
               C89236 * C1720 +
           ((C1960 - C1959) * C100 + (C1962 - C1961) * C89 +
            (C1964 - C1963) * C102 + (C1966 - C1965) * C90 +
            (C263 * C1729 - C89247 * C1941) * C104 +
            (C263 * C1745 - C89247 * C1949) * C91) *
               C89236 * C1721) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C13261 +
            (C89247 * C270 - C263 * C113) * C89093) *
               C13258 +
           ((C89247 * C1029 - C263 * C819) * C13261 +
            (C89247 * C1037 - C263 * C830) * C89093) *
               C13259 +
           ((C89247 * C1032 - C263 * C820) * C13261 +
            (C89247 * C1040 - C263 * C832) * C89093) *
               C13260) *
              C89153 * C89137 * C96 +
          (((C278 - C277) * C13261 + (C280 - C279) * C89093) * C13258 +
           ((C1046 - C1047) * C13261 + (C1048 - C1049) * C89093) * C13259 +
           ((C1055 - C1054) * C13261 + (C1057 - C1056) * C89093) * C13260) *
              C89153 * C89137 * C97 +
          ((C293 * C13261 + C294 * C89093) * C13258 +
           ((C1051 - C1050) * C13261 + (C1053 - C1052) * C89093) * C13259 +
           ((C1058 - C1059) * C13261 + (C1060 - C1061) * C89093) * C13260) *
              C89153 * C89137 * C98 +
          ((C295 * C13261 + C296 * C89093) * C13258 +
           ((C2795 - C2794) * C13261 + (C2797 - C2796) * C89093) * C13259 +
           ((C263 * C824 - C89247 * C1036) * C13261 +
            (C263 * C840 - C89247 * C1044) * C89093) *
               C13260) *
              C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C13261 +
             (C89247 * C270 - C263 * C113) * C89093) *
                C13258 +
            ((C13956 - C13957) * C13261 + (C13958 - C13959) * C89093) * C13259 +
            C13981 * C13260) *
               C89153 * C812 +
           (((C13957 - C13956) * C13261 + (C13959 - C13958) * C89093) * C13258 +
            ((C13961 - C13960) * C13261 + (C13963 - C13962) * C89093) * C13259 +
            ((C13964 - C13965) * C13261 + (C13966 - C13967) * C89093) *
                C13260) *
               C89153 * C813 +
           (C13981 * C13258 +
            ((C13965 - C13964) * C13261 + (C13967 - C13966) * C89093) * C13259 +
            ((C89247 * C13951 - C263 * C13743) * C13261 +
             (C89247 * C13953 - C263 * C13746) * C89093) *
                C13260) *
               C89153 * C814) *
              C815 +
          ((((C278 - C277) * C13261 + (C280 - C279) * C89093) * C13258 +
            ((C1046 - C1047) * C13261 + (C1048 - C1049) * C89093) * C13259 +
            C13980 * C13260) *
               C89153 * C812 +
           (((C1047 - C1046) * C13261 + (C1049 - C1048) * C89093) * C13258 +
            ((C1054 - C1055) * C13261 + (C1056 - C1057) * C89093) * C13259 +
            ((C13970 - C13971) * C13261 + (C13972 - C13973) * C89093) *
                C13260) *
               C89153 * C813 +
           (C13980 * C13258 +
            ((C13971 - C13970) * C13261 + (C13973 - C13972) * C89093) * C13259 +
            ((C263 * C13744 - C89247 * C13952) * C13261 +
             (C263 * C13748 - C89247 * C13954) * C89093) *
                C13260) *
               C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C13261 +
             (C89247 * C270 - C263 * C113) * C89093) *
                C13258 +
            ((C13956 - C13957) * C13261 + (C13958 - C13959) * C89093) * C13259 +
            C13981 * C13260) *
               C1719 +
           (((C263 * C1724 - C89247 * C1934) * C13261 +
             (C263 * C1735 - C89247 * C1942) * C89093) *
                C13258 +
            ((C263 * C4097 - C89247 * C4325) * C13261 +
             (C263 * C4102 - C89247 * C4329) * C89093) *
                C13259 +
            ((C263 * C8516 - C89247 * C8680) * C13261 +
             (C263 * C8522 - C89247 * C8683) * C89093) *
                C13260) *
               C1720 +
           (((C89247 * C1937 - C263 * C1725) * C13261 +
             (C89247 * C1945 - C263 * C1737) * C89093) *
                C13258 +
            ((C89247 * C6413 - C263 * C6249) * C13261 +
             (C89247 * C6416 - C263 * C6255) * C89093) *
                C13259 +
            ((C89247 * C14761 - C263 * C14601) * C13261 +
             (C89247 * C14763 - C263 * C14604) * C89093) *
                C13260) *
               C1721) *
              C89137 * C815 +
          ((((C278 - C277) * C13261 + (C280 - C279) * C89093) * C13258 +
            ((C1046 - C1047) * C13261 + (C1048 - C1049) * C89093) * C13259 +
            C13980 * C13260) *
               C1719 +
           (((C1952 - C1951) * C13261 + (C1954 - C1953) * C89093) * C13258 +
            ((C4334 - C4335) * C13261 + (C4336 - C4337) * C89093) * C13259 +
            ((C89247 * C8681 - C263 * C8515) * C13261 +
             (C89247 * C8684 - C263 * C8520) * C89093) *
                C13260) *
               C1720 +
           (((C1960 - C1959) * C13261 + (C1962 - C1961) * C89093) * C13258 +
            ((C263 * C6248 - C89247 * C6414) * C13261 +
             (C263 * C6253 - C89247 * C6417) * C89093) *
                C13259 +
            ((C263 * C14602 - C89247 * C14762) * C13261 +
             (C263 * C14606 - C89247 * C14764) * C89093) *
                C13260) *
               C1721) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[62] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 +
                       C91 * C116 - C104 * C108) *
                          C180 +
                      (C89 * C352 - C100 * C346 + C90 * C353 - C102 * C347 +
                       C91 * C354 - C104 * C348) *
                          C89236) *
                         C89247 * C89153 * C812 +
                     ((C100 * C819 - C89 * C829 + C102 * C818 - C90 * C827 +
                       C104 * C817 - C91 * C825) *
                          C180 +
                      (C100 * C1135 - C89 * C1143 + C102 * C1136 - C90 * C1144 +
                       C104 * C1137 - C91 * C1145) *
                          C89236) *
                         C89247 * C89153 * C813 +
                     ((C89 * C831 - C100 * C820 + C90 * C833 - C102 * C821 +
                       C91 * C835 - C104 * C822) *
                          C180 +
                      (C89 * C1146 - C100 * C1138 + C90 * C1147 - C102 * C1139 +
                       C91 * C1148 - C104 * C1140) *
                          C89236) *
                         C89247 * C89153 * C814) *
                        C815 +
                    (((C100 * C107 - C89 * C114 + C102 * C108 - C90 * C116 +
                       C104 * C109 - C91 * C118) *
                          C180 +
                      (C100 * C347 - C89 * C353 + C102 * C348 - C90 * C354 +
                       C104 * C349 - C91 * C355) *
                          C89236) *
                         C89247 * C89153 * C812 +
                     ((C89 * C827 - C100 * C818 + C90 * C825 - C102 * C817 +
                       C91 * C837 - C104 * C823) *
                          C180 +
                      (C89 * C1144 - C100 * C1136 + C90 * C1145 - C102 * C1137 +
                       C91 * C1149 - C104 * C1141) *
                          C89236) *
                         C89247 * C89153 * C813 +
                     ((C100 * C821 - C89 * C833 + C102 * C822 - C90 * C835 +
                       C104 * C824 - C91 * C839) *
                          C180 +
                      (C100 * C1139 - C89 * C1147 + C102 * C1140 - C90 * C1148 +
                       C104 * C1142 - C91 * C1150) *
                          C89236) *
                         C89247 * C89153 * C814) *
                        C89124)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   (((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 +
                      C91 * C116 - C104 * C108) *
                         C180 +
                     (C89 * C352 - C100 * C346 + C90 * C353 - C102 * C347 +
                      C91 * C354 - C104 * C348) *
                         C89236) *
                        C89247 * C89153 * C89137 * C96 +
                    ((C100 * C107 - C89 * C114 + C102 * C108 - C90 * C116 +
                      C104 * C109 - C91 * C118) *
                         C180 +
                     (C100 * C347 - C89 * C353 + C102 * C348 - C90 * C354 +
                      C104 * C349 - C91 * C355) *
                         C89236) *
                        C89247 * C89153 * C89137 * C97 +
                    ((C89 * C116 - C100 * C108 + C90 * C118 - C102 * C109 +
                      C91 * C120 - C104 * C110) *
                         C180 +
                     (C89 * C354 - C100 * C348 + C90 * C355 - C102 * C349 +
                      C91 * C356 - C104 * C350) *
                         C89236) *
                        C89247 * C89153 * C89137 * C98 +
                    ((C100 * C109 - C89 * C118 + C102 * C110 - C90 * C120 +
                      C104 * C111 - C91 * C122) *
                         C180 +
                     (C100 * C349 - C89 * C355 + C102 * C350 - C90 * C356 +
                      C104 * C351 - C91 * C357) *
                         C89236) *
                        C89247 * C89153 * C89137 * C99)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 +
                       C91 * C116 - C104 * C108) *
                          C180 +
                      (C89 * C352 - C100 * C346 + C90 * C353 - C102 * C347 +
                       C91 * C354 - C104 * C348) *
                          C89236) *
                         C89247 * C1719 +
                     ((C100 * C1724 - C89 * C1734 + C102 * C1723 - C90 * C1732 +
                       C104 * C1722 - C91 * C1730) *
                          C180 +
                      (C100 * C2040 - C89 * C2048 + C102 * C2041 - C90 * C2049 +
                       C104 * C2042 - C91 * C2050) *
                          C89236) *
                         C89247 * C1720 +
                     ((C89 * C1736 - C100 * C1725 + C90 * C1738 - C102 * C1726 +
                       C91 * C1740 - C104 * C1727) *
                          C180 +
                      (C89 * C2051 - C100 * C2043 + C90 * C2052 - C102 * C2044 +
                       C91 * C2053 - C104 * C2045) *
                          C89236) *
                         C89247 * C1721) *
                        C89137 * C815 +
                    (((C100 * C107 - C89 * C114 + C102 * C108 - C90 * C116 +
                       C104 * C109 - C91 * C118) *
                          C180 +
                      (C100 * C347 - C89 * C353 + C102 * C348 - C90 * C354 +
                       C104 * C349 - C91 * C355) *
                          C89236) *
                         C89247 * C1719 +
                     ((C89 * C1732 - C100 * C1723 + C90 * C1730 - C102 * C1722 +
                       C91 * C1742 - C104 * C1728) *
                          C180 +
                      (C89 * C2049 - C100 * C2041 + C90 * C2050 - C102 * C2042 +
                       C91 * C2054 - C104 * C2046) *
                          C89236) *
                         C89247 * C1720 +
                     ((C100 * C1726 - C89 * C1738 + C102 * C1727 - C90 * C1740 +
                       C104 * C1729 - C91 * C1744) *
                          C180 +
                      (C100 * C2044 - C89 * C2052 + C102 * C2045 - C90 * C2053 +
                       C104 * C2047 - C91 * C2055) *
                          C89236) *
                         C89247 * C1721) *
                        C89137 * C89124)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   (((C89093 * C112 - C13261 * C106) * C13313 +
                     (C89093 * C352 - C13261 * C346) * C13258 +
                     (C89093 * C829 - C13261 * C819) * C13314 +
                     (C89093 * C1143 - C13261 * C1135) * C13259 +
                     (C89093 * C831 - C13261 * C820) * C13315 +
                     (C89093 * C1146 - C13261 * C1138) * C13260) *
                        C89247 * C89153 * C89137 * C96 +
                    ((C13261 * C107 - C89093 * C114) * C13313 +
                     (C13261 * C347 - C89093 * C353) * C13258 +
                     (C13261 * C818 - C89093 * C827) * C13314 +
                     (C13261 * C1136 - C89093 * C1144) * C13259 +
                     (C13261 * C821 - C89093 * C833) * C13315 +
                     (C13261 * C1139 - C89093 * C1147) * C13260) *
                        C89247 * C89153 * C89137 * C97 +
                    ((C89093 * C116 - C13261 * C108) * C13313 +
                     (C89093 * C354 - C13261 * C348) * C13258 +
                     (C89093 * C825 - C13261 * C817) * C13314 +
                     (C89093 * C1145 - C13261 * C1137) * C13259 +
                     (C89093 * C835 - C13261 * C822) * C13315 +
                     (C89093 * C1148 - C13261 * C1140) * C13260) *
                        C89247 * C89153 * C89137 * C98 +
                    ((C13261 * C109 - C89093 * C118) * C13313 +
                     (C13261 * C349 - C89093 * C355) * C13258 +
                     (C13261 * C823 - C89093 * C837) * C13314 +
                     (C13261 * C1141 - C89093 * C1149) * C13259 +
                     (C13261 * C824 - C89093 * C839) * C13315 +
                     (C13261 * C1142 - C89093 * C1150) * C13260) *
                        C89247 * C89153 * C89137 * C99)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C89093 * C112 - C13261 * C106) * C13313 +
                      (C89093 * C352 - C13261 * C346) * C13258 +
                      (C14060 - C14061) * C13314 + (C14062 - C14063) * C13259 +
                      C14084 * C13315 + C14085 * C13260) *
                         C89247 * C89153 * C812 +
                     ((C14061 - C14060) * C13313 + (C14063 - C14062) * C13258 +
                      (C14065 - C14064) * C13314 + (C14067 - C14066) * C13259 +
                      (C14068 - C14069) * C13315 + (C14070 - C14071) * C13260) *
                         C89247 * C89153 * C813 +
                     (C14084 * C13313 + C14085 * C13258 +
                      (C14069 - C14068) * C13314 + (C14071 - C14070) * C13259 +
                      (C89093 * C13745 - C13261 * C13743) * C13315 +
                      (C89093 * C14057 - C13261 * C14055) * C13260) *
                         C89247 * C89153 * C814) *
                        C815 +
                    (((C13261 * C107 - C89093 * C114) * C13313 +
                      (C13261 * C347 - C89093 * C353) * C13258 +
                      (C14072 - C14073) * C13314 + (C14074 - C14075) * C13259 +
                      C14086 * C13315 + C14087 * C13260) *
                         C89247 * C89153 * C812 +
                     ((C14073 - C14072) * C13313 + (C14075 - C14074) * C13258 +
                      (C14077 - C14076) * C13314 + (C14079 - C14078) * C13259 +
                      (C14080 - C14081) * C13315 + (C14082 - C14083) * C13260) *
                         C89247 * C89153 * C813 +
                     (C14086 * C13313 + C14087 * C13258 +
                      (C14081 - C14080) * C13314 + (C14083 - C14082) * C13259 +
                      (C13261 * C13744 - C89093 * C13747) * C13315 +
                      (C13261 * C14056 - C89093 * C14058) * C13260) *
                         C89247 * C89153 * C814) *
                        C89124)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C89093 * C112 - C13261 * C106) * C13313 +
                      (C89093 * C352 - C13261 * C346) * C13258 +
                      (C14060 - C14061) * C13314 + (C14062 - C14063) * C13259 +
                      C14084 * C13315 + C14085 * C13260) *
                         C89247 * C1719 +
                     ((C13261 * C1724 - C89093 * C1734) * C13313 +
                      (C13261 * C2040 - C89093 * C2048) * C13258 +
                      (C13261 * C4097 - C89093 * C4101) * C13314 +
                      (C13261 * C4439 - C89093 * C4443) * C13259 +
                      (C13261 * C8516 - C89093 * C8521) * C13315 +
                      (C13261 * C8760 - C89093 * C8763) * C13260) *
                         C89247 * C1720 +
                     ((C89093 * C1736 - C13261 * C1725) * C13313 +
                      (C89093 * C2051 - C13261 * C2043) * C13258 +
                      (C89093 * C6254 - C13261 * C6249) * C13314 +
                      (C89093 * C6496 - C13261 * C6493) * C13259 +
                      (C89093 * C14603 - C13261 * C14601) * C13315 +
                      (C89093 * C14841 - C13261 * C14839) * C13260) *
                         C89247 * C1721) *
                        C89137 * C815 +
                    (((C13261 * C107 - C89093 * C114) * C13313 +
                      (C13261 * C347 - C89093 * C353) * C13258 +
                      (C14072 - C14073) * C13314 + (C14074 - C14075) * C13259 +
                      C14086 * C13315 + C14087 * C13260) *
                         C89247 * C1719 +
                     ((C89093 * C1732 - C13261 * C1723) * C13313 +
                      (C89093 * C2049 - C13261 * C2041) * C13258 +
                      (C89093 * C4103 - C13261 * C4098) * C13314 +
                      (C89093 * C4444 - C13261 * C4440) * C13259 +
                      (C89093 * C8519 - C13261 * C8515) * C13315 +
                      (C89093 * C8764 - C13261 * C8761) * C13260) *
                         C89247 * C1720 +
                     ((C13261 * C1726 - C89093 * C1738) * C13313 +
                      (C13261 * C2044 - C89093 * C2052) * C13258 +
                      (C13261 * C6248 - C89093 * C6252) * C13314 +
                      (C13261 * C6494 - C89093 * C6497) * C13259 +
                      (C13261 * C14602 - C89093 * C14605) * C13315 +
                      (C13261 * C14840 - C89093 * C14842) * C13260) *
                         C89247 * C1721) *
                        C89137 * C89124)) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[62] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C89 +
            C440 * C90 + C441 * C91) *
               C89247 * C89153 * C812 -
           (C1258 * C91 + C1259 * C90 +
            (C180 * C923 - C408 * C819 - C180 * C1135 + C89236 * C1227) * C89) *
               C89247 * C89153 * C813 +
           ((C180 * C926 - C408 * C820 - C180 * C1138 + C89236 * C1228) * C89 +
            C1260 * C90 + C1261 * C91) *
               C89247 * C89153 * C814) *
              C815 +
          ((C1259 * C89 + C1258 * C90 +
            (C180 * C929 - C408 * C823 - C180 * C1141 + C89236 * C1231) * C91) *
               C89247 * C89153 * C813 -
           (C442 * C91 + C441 * C90 + C440 * C89) * C89247 * C89153 * C812 -
           ((C180 * C930 - C408 * C824 - C180 * C1142 + C89236 * C1232) * C91 +
            C1261 * C90 + C1260 * C89) *
               C89247 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C89 +
           C440 * C90 + C441 * C91) *
              C89247 * C89153 * C89137 * C96 -
          (C442 * C91 + C441 * C90 + C440 * C89) * C89247 * C89153 * C89137 *
              C97 +
          (C441 * C89 + C442 * C90 + C443 * C91) * C89247 * C89153 * C89137 *
              C98 -
          ((C180 * C186 - C408 * C111 - C180 * C351 + C89236 * C414) * C91 +
           C443 * C90 + C442 * C89) *
              C89247 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C89 +
            C440 * C90 + C441 * C91) *
               C89247 * C1719 -
           (C2163 * C91 + C2164 * C90 +
            (C180 * C1828 - C408 * C1724 - C180 * C2040 + C89236 * C2132) *
                C89) *
               C89247 * C1720 +
           ((C180 * C1831 - C408 * C1725 - C180 * C2043 + C89236 * C2133) *
                C89 +
            C2165 * C90 + C2166 * C91) *
               C89247 * C1721) *
              C89137 * C815 +
          ((C2164 * C89 + C2163 * C90 +
            (C180 * C1834 - C408 * C1728 - C180 * C2046 + C89236 * C2136) *
                C91) *
               C89247 * C1720 -
           (C442 * C91 + C441 * C90 + C440 * C89) * C89247 * C1719 -
           ((C180 * C1835 - C408 * C1729 - C180 * C2047 + C89236 * C2137) *
                C91 +
            C2166 * C90 + C2165 * C89) *
               C89247 * C1721) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C13313 * C181 - C13466 * C106 - C13313 * C346 + C13258 * C409 +
           C13314 * C923 - C13467 * C819 - C13314 * C1135 + C13259 * C1227 +
           C13315 * C926 - C13468 * C820 - C13315 * C1138 + C13260 * C1228) *
              C89093 * C89247 * C89153 * C89137 * C96 -
          (C13315 * C927 - C13468 * C821 - C13315 * C1139 + C13260 * C1229 +
           C13314 * C924 - C13467 * C818 - C13314 * C1136 + C13259 * C1226 +
           C13313 * C182 - C13466 * C107 - C13313 * C347 + C13258 * C410) *
              C89093 * C89247 * C89153 * C89137 * C97 +
          (C13313 * C183 - C13466 * C108 - C13313 * C348 + C13258 * C411 +
           C13314 * C925 - C13467 * C817 - C13314 * C1137 + C13259 * C1225 +
           C13315 * C928 - C13468 * C822 - C13315 * C1140 + C13260 * C1230) *
              C89093 * C89247 * C89153 * C89137 * C98 -
          (C13315 * C930 - C13468 * C824 - C13315 * C1142 + C13260 * C1232 +
           C13314 * C929 - C13467 * C823 - C13314 * C1141 + C13259 * C1231 +
           C13313 * C184 - C13466 * C109 - C13313 * C349 + C13258 * C412) *
              C89093 * C89247 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13313 * C181 - C13466 * C106 - C13313 * C346 + C13258 * C409 +
            C13314 * C923 - C13467 * C819 - C13314 * C1135 + C13259 * C1227 +
            C13315 * C926 - C13468 * C820 - C13315 * C1138 + C13260 * C1228) *
               C89093 * C89247 * C89153 * C812 -
           (C13315 * C5787 - C13468 * C5727 - C13315 * C5899 + C13260 * C5957 +
            C13314 * C926 - C13467 * C820 - C13314 * C1138 + C13259 * C1228 +
            C13313 * C923 - C13466 * C819 - C13313 * C1135 + C13258 * C1227) *
               C89093 * C89247 * C89153 * C813 +
           (C13313 * C926 - C13466 * C820 - C13313 * C1138 + C13258 * C1228 +
            C13314 * C5787 - C13467 * C5727 - C13314 * C5899 + C13259 * C5957 +
            C13315 * C13873 - C13468 * C13743 - C13315 * C14055 +
            C13260 * C14161) *
               C89093 * C89247 * C89153 * C814) *
              C815 +
          ((C13313 * C924 - C13466 * C818 - C13313 * C1136 + C13258 * C1226 +
            C13314 * C927 - C13467 * C821 - C13314 * C1139 + C13259 * C1229 +
            C13315 * C5788 - C13468 * C5726 - C13315 * C5900 + C13260 * C5956) *
               C89093 * C89247 * C89153 * C813 -
           (C13315 * C927 - C13468 * C821 - C13315 * C1139 + C13260 * C1229 +
            C13314 * C924 - C13467 * C818 - C13314 * C1136 + C13259 * C1226 +
            C13313 * C182 - C13466 * C107 - C13313 * C347 + C13258 * C410) *
               C89093 * C89247 * C89153 * C812 -
           (C13315 * C13874 - C13468 * C13744 - C13315 * C14056 +
            C13260 * C14162 + C13314 * C5788 - C13467 * C5726 - C13314 * C5900 +
            C13259 * C5956 + C13313 * C927 - C13466 * C821 - C13313 * C1139 +
            C13258 * C1229) *
               C89093 * C89247 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13313 * C181 - C13466 * C106 - C13313 * C346 + C13258 * C409 +
            C13314 * C923 - C13467 * C819 - C13314 * C1135 + C13259 * C1227 +
            C13315 * C926 - C13468 * C820 - C13315 * C1138 + C13260 * C1228) *
               C89093 * C89247 * C1719 -
           (C13315 * C8600 - C13468 * C8516 - C13315 * C8760 + C13260 * C8842 +
            C13314 * C4211 - C13467 * C4097 - C13314 * C4439 + C13259 * C4545 +
            C13313 * C1828 - C13466 * C1724 - C13313 * C2040 + C13258 * C2132) *
               C89093 * C89247 * C1720 +
           (C13313 * C1831 - C13466 * C1725 - C13313 * C2043 + C13258 * C2133 +
            C13314 * C6333 - C13467 * C6249 - C13314 * C6493 + C13259 * C6575 +
            C13315 * C14683 - C13468 * C14601 - C13315 * C14839 +
            C13260 * C14917) *
               C89093 * C89247 * C1721) *
              C89137 * C815 +
          ((C13313 * C1829 - C13466 * C1723 - C13313 * C2041 + C13258 * C2131 +
            C13314 * C4212 - C13467 * C4098 - C13314 * C4440 + C13259 * C4546 +
            C13315 * C8601 - C13468 * C8515 - C13315 * C8761 + C13260 * C8841) *
               C89093 * C89247 * C1720 -
           (C13315 * C927 - C13468 * C821 - C13315 * C1139 + C13260 * C1229 +
            C13314 * C924 - C13467 * C818 - C13314 * C1136 + C13259 * C1226 +
            C13313 * C182 - C13466 * C107 - C13313 * C347 + C13258 * C410) *
               C89093 * C89247 * C1719 -
           (C13315 * C14684 - C13468 * C14602 - C13315 * C14840 +
            C13260 * C14918 + C13314 * C6334 - C13467 * C6248 - C13314 * C6494 +
            C13259 * C6574 + C13313 * C1832 - C13466 * C1726 - C13313 * C2044 +
            C13258 * C2134) *
               C89093 * C89247 * C1721) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[62] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C180 +
             (C89247 * C493 - C263 * C346) * C89236) *
                C89 +
            ((C277 - C278) * C180 + (C500 - C501) * C89236) * C90 +
            C514 * C91) *
               C89153 * C812 +
           (((C263 * C819 - C89247 * C1029) * C180 +
             (C263 * C1135 - C89247 * C1335) * C89236) *
                C89 +
            ((C1046 - C1047) * C180 + (C1344 - C1345) * C89236) * C90 +
            ((C1050 - C1051) * C180 + (C1346 - C1347) * C89236) * C91) *
               C89153 * C813 +
           (((C89247 * C1032 - C263 * C820) * C180 +
             (C89247 * C1338 - C263 * C1138) * C89236) *
                C89 +
            ((C1054 - C1055) * C180 + (C1348 - C1349) * C89236) * C90 +
            ((C1058 - C1059) * C180 + (C1350 - C1351) * C89236) * C91) *
               C89153 * C814) *
              C815 +
          ((((C278 - C277) * C180 + (C501 - C500) * C89236) * C89 +
            ((C282 - C281) * C180 + (C504 - C503) * C89236) * C90 +
            C515 * C91) *
               C89153 * C812 +
           (((C1047 - C1046) * C180 + (C1345 - C1344) * C89236) * C89 +
            ((C1051 - C1050) * C180 + (C1347 - C1346) * C89236) * C90 +
            ((C89247 * C1035 - C263 * C823) * C180 +
             (C89247 * C1341 - C263 * C1141) * C89236) *
                C91) *
               C89153 * C813 +
           (((C1055 - C1054) * C180 + (C1349 - C1348) * C89236) * C89 +
            ((C1059 - C1058) * C180 + (C1351 - C1350) * C89236) * C90 +
            ((C263 * C824 - C89247 * C1036) * C180 +
             (C263 * C1142 - C89247 * C1342) * C89236) *
                C91) *
               C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C180 +
            (C89247 * C493 - C263 * C346) * C89236) *
               C89 +
           ((C277 - C278) * C180 + (C500 - C501) * C89236) * C90 + C514 * C91) *
              C89153 * C89137 * C96 +
          (((C278 - C277) * C180 + (C501 - C500) * C89236) * C89 +
           ((C282 - C281) * C180 + (C504 - C503) * C89236) * C90 + C515 * C91) *
              C89153 * C89137 * C97 +
          (C514 * C89 + ((C286 - C285) * C180 + (C507 - C506) * C89236) * C90 +
           ((C289 - C290) * C180 + (C508 - C509) * C89236) * C91) *
              C89153 * C89137 * C98 +
          (C515 * C89 + ((C290 - C289) * C180 + (C509 - C508) * C89236) * C90 +
           ((C263 * C111 - C89247 * C269) * C180 +
            (C263 * C351 - C89247 * C498) * C89236) *
               C91) *
              C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C180 +
             (C89247 * C493 - C263 * C346) * C89236) *
                C89 +
            ((C277 - C278) * C180 + (C500 - C501) * C89236) * C90 +
            C514 * C91) *
               C1719 +
           (((C263 * C1724 - C89247 * C1934) * C180 +
             (C263 * C2040 - C89247 * C2240) * C89236) *
                C89 +
            ((C1951 - C1952) * C180 + (C2249 - C2250) * C89236) * C90 +
            ((C1955 - C1956) * C180 + (C2251 - C2252) * C89236) * C91) *
               C1720 +
           (((C89247 * C1937 - C263 * C1725) * C180 +
             (C89247 * C2243 - C263 * C2043) * C89236) *
                C89 +
            ((C1959 - C1960) * C180 + (C2253 - C2254) * C89236) * C90 +
            ((C1963 - C1964) * C180 + (C2255 - C2256) * C89236) * C91) *
               C1721) *
              C89137 * C815 +
          ((((C278 - C277) * C180 + (C501 - C500) * C89236) * C89 +
            ((C282 - C281) * C180 + (C504 - C503) * C89236) * C90 +
            C515 * C91) *
               C1719 +
           (((C1952 - C1951) * C180 + (C2250 - C2249) * C89236) * C89 +
            ((C1956 - C1955) * C180 + (C2252 - C2251) * C89236) * C90 +
            ((C89247 * C1940 - C263 * C1728) * C180 +
             (C89247 * C2246 - C263 * C2046) * C89236) *
                C91) *
               C1720 +
           (((C1960 - C1959) * C180 + (C2254 - C2253) * C89236) * C89 +
            ((C1964 - C1963) * C180 + (C2256 - C2255) * C89236) * C90 +
            ((C263 * C1729 - C89247 * C1941) * C180 +
             (C263 * C2047 - C89247 * C2247) * C89236) *
                C91) *
               C1721) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C89247 * C264 - C263 * C106) * C13313 +
           (C89247 * C493 - C263 * C346) * C13258 +
           (C89247 * C1029 - C263 * C819) * C13314 +
           (C89247 * C1335 - C263 * C1135) * C13259 +
           (C89247 * C1032 - C263 * C820) * C13315 +
           (C89247 * C1338 - C263 * C1138) * C13260) *
              C89093 * C89153 * C89137 * C96 +
          ((C278 - C277) * C13313 + (C501 - C500) * C13258 +
           (C1046 - C1047) * C13314 + (C1344 - C1345) * C13259 +
           (C1055 - C1054) * C13315 + (C1349 - C1348) * C13260) *
              C89093 * C89153 * C89137 * C97 +
          (C293 * C13313 + C510 * C13258 + (C1051 - C1050) * C13314 +
           (C1347 - C1346) * C13259 + (C1058 - C1059) * C13315 +
           (C1350 - C1351) * C13260) *
              C89093 * C89153 * C89137 * C98 +
          (C295 * C13313 + C511 * C13258 + (C2795 - C2794) * C13314 +
           (C3034 - C3033) * C13259 + (C263 * C824 - C89247 * C1036) * C13315 +
           (C263 * C1142 - C89247 * C1342) * C13260) *
              C89093 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C13313 +
            (C89247 * C493 - C263 * C346) * C13258 +
            (C13956 - C13957) * C13314 + (C14240 - C14241) * C13259 +
            C13974 * C13315 + C14249 * C13260) *
               C89093 * C89153 * C812 +
           ((C13957 - C13956) * C13313 + (C14241 - C14240) * C13258 +
            (C13961 - C13960) * C13314 + (C14243 - C14242) * C13259 +
            (C13964 - C13965) * C13315 + (C14244 - C14245) * C13260) *
               C89093 * C89153 * C813 +
           (C13974 * C13313 + C14249 * C13258 + (C13965 - C13964) * C13314 +
            (C14245 - C14244) * C13259 +
            (C89247 * C13951 - C263 * C13743) * C13315 +
            (C89247 * C14237 - C263 * C14055) * C13260) *
               C89093 * C89153 * C814) *
              C815 +
          (((C278 - C277) * C13313 + (C501 - C500) * C13258 +
            (C1046 - C1047) * C13314 + (C1344 - C1345) * C13259 +
            C13968 * C13315 + C14246 * C13260) *
               C89093 * C89153 * C812 +
           ((C1047 - C1046) * C13313 + (C1345 - C1344) * C13258 +
            (C1054 - C1055) * C13314 + (C1348 - C1349) * C13259 +
            (C13970 - C13971) * C13315 + (C14247 - C14248) * C13260) *
               C89093 * C89153 * C813 +
           (C13968 * C13313 + C14246 * C13258 + (C13971 - C13970) * C13314 +
            (C14248 - C14247) * C13259 +
            (C263 * C13744 - C89247 * C13952) * C13315 +
            (C263 * C14056 - C89247 * C14238) * C13260) *
               C89093 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C13313 +
            (C89247 * C493 - C263 * C346) * C13258 +
            (C13956 - C13957) * C13314 + (C14240 - C14241) * C13259 +
            C13974 * C13315 + C14249 * C13260) *
               C89093 * C1719 +
           ((C263 * C1724 - C89247 * C1934) * C13313 +
            (C263 * C2040 - C89247 * C2240) * C13258 +
            (C263 * C4097 - C89247 * C4325) * C13314 +
            (C263 * C4439 - C89247 * C4661) * C13259 +
            (C263 * C8516 - C89247 * C8680) * C13315 +
            (C263 * C8760 - C89247 * C8917) * C13260) *
               C89093 * C1720 +
           ((C89247 * C1937 - C263 * C1725) * C13313 +
            (C89247 * C2243 - C263 * C2043) * C13258 +
            (C89247 * C6413 - C263 * C6249) * C13314 +
            (C89247 * C6650 - C263 * C6493) * C13259 +
            (C89247 * C14761 - C263 * C14601) * C13315 +
            (C89247 * C14993 - C263 * C14839) * C13260) *
               C89093 * C1721) *
              C89137 * C815 +
          (((C278 - C277) * C13313 + (C501 - C500) * C13258 +
            (C1046 - C1047) * C13314 + (C1344 - C1345) * C13259 +
            C13968 * C13315 + C14246 * C13260) *
               C89093 * C1719 +
           ((C1952 - C1951) * C13313 + (C2250 - C2249) * C13258 +
            (C4334 - C4335) * C13314 + (C4666 - C4667) * C13259 +
            (C89247 * C8681 - C263 * C8515) * C13315 +
            (C89247 * C8918 - C263 * C8761) * C13260) *
               C89093 * C1720 +
           ((C1960 - C1959) * C13313 + (C2254 - C2253) * C13258 +
            (C263 * C6248 - C89247 * C6414) * C13314 +
            (C263 * C6494 - C89247 * C6651) * C13259 +
            (C263 * C14602 - C89247 * C14762) * C13315 +
            (C263 * C14840 - C89247 * C14994) * C13260) *
               C89093 * C1721) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q));
    d2eezx[62] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 + C91 * C116 -
             C104 * C108) *
                C263 +
            (C89 * C571 - C100 * C565 + C90 * C572 - C102 * C566 + C91 * C573 -
             C104 * C567) *
                C89247) *
               C89236 * C89153 * C812 +
           ((C100 * C819 - C89 * C829 + C102 * C818 - C90 * C827 + C104 * C817 -
             C91 * C825) *
                C263 +
            (C100 * C1425 - C89 * C1433 + C102 * C1426 - C90 * C1434 +
             C104 * C1427 - C91 * C1435) *
                C89247) *
               C89236 * C89153 * C813 +
           ((C89 * C831 - C100 * C820 + C90 * C833 - C102 * C821 + C91 * C835 -
             C104 * C822) *
                C263 +
            (C89 * C1436 - C100 * C1428 + C90 * C1437 - C102 * C1429 +
             C91 * C1438 - C104 * C1430) *
                C89247) *
               C89236 * C89153 * C814) *
              C815 +
          (((C100 * C107 - C89 * C114 + C102 * C108 - C90 * C116 + C104 * C109 -
             C91 * C118) *
                C263 +
            (C100 * C566 - C89 * C572 + C102 * C567 - C90 * C573 + C104 * C568 -
             C91 * C574) *
                C89247) *
               C89236 * C89153 * C812 +
           ((C89 * C827 - C100 * C818 + C90 * C825 - C102 * C817 + C91 * C837 -
             C104 * C823) *
                C263 +
            (C89 * C1434 - C100 * C1426 + C90 * C1435 - C102 * C1427 +
             C91 * C1439 - C104 * C1431) *
                C89247) *
               C89236 * C89153 * C813 +
           ((C100 * C821 - C89 * C833 + C102 * C822 - C90 * C835 + C104 * C824 -
             C91 * C839) *
                C263 +
            (C100 * C1429 - C89 * C1437 + C102 * C1430 - C90 * C1438 +
             C104 * C1432 - C91 * C1440) *
                C89247) *
               C89236 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 + C91 * C116 -
            C104 * C108) *
               C263 +
           (C89 * C571 - C100 * C565 + C90 * C572 - C102 * C566 + C91 * C573 -
            C104 * C567) *
               C89247) *
              C89236 * C89153 * C89137 * C96 +
          ((C100 * C107 - C89 * C114 + C102 * C108 - C90 * C116 + C104 * C109 -
            C91 * C118) *
               C263 +
           (C100 * C566 - C89 * C572 + C102 * C567 - C90 * C573 + C104 * C568 -
            C91 * C574) *
               C89247) *
              C89236 * C89153 * C89137 * C97 +
          ((C89 * C116 - C100 * C108 + C90 * C118 - C102 * C109 + C91 * C120 -
            C104 * C110) *
               C263 +
           (C89 * C573 - C100 * C567 + C90 * C574 - C102 * C568 + C91 * C575 -
            C104 * C569) *
               C89247) *
              C89236 * C89153 * C89137 * C98 +
          ((C100 * C109 - C89 * C118 + C102 * C110 - C90 * C120 + C104 * C111 -
            C91 * C122) *
               C263 +
           (C100 * C568 - C89 * C574 + C102 * C569 - C90 * C575 + C104 * C570 -
            C91 * C576) *
               C89247) *
              C89236 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 + C91 * C116 -
             C104 * C108) *
                C263 +
            (C89 * C571 - C100 * C565 + C90 * C572 - C102 * C566 + C91 * C573 -
             C104 * C567) *
                C89247) *
               C89236 * C1719 +
           ((C100 * C1724 - C89 * C1734 + C102 * C1723 - C90 * C1732 +
             C104 * C1722 - C91 * C1730) *
                C263 +
            (C100 * C2330 - C89 * C2338 + C102 * C2331 - C90 * C2339 +
             C104 * C2332 - C91 * C2340) *
                C89247) *
               C89236 * C1720 +
           ((C89 * C1736 - C100 * C1725 + C90 * C1738 - C102 * C1726 +
             C91 * C1740 - C104 * C1727) *
                C263 +
            (C89 * C2341 - C100 * C2333 + C90 * C2342 - C102 * C2334 +
             C91 * C2343 - C104 * C2335) *
                C89247) *
               C89236 * C1721) *
              C89137 * C815 +
          (((C100 * C107 - C89 * C114 + C102 * C108 - C90 * C116 + C104 * C109 -
             C91 * C118) *
                C263 +
            (C100 * C566 - C89 * C572 + C102 * C567 - C90 * C573 + C104 * C568 -
             C91 * C574) *
                C89247) *
               C89236 * C1719 +
           ((C89 * C1732 - C100 * C1723 + C90 * C1730 - C102 * C1722 +
             C91 * C1742 - C104 * C1728) *
                C263 +
            (C89 * C2339 - C100 * C2331 + C90 * C2340 - C102 * C2332 +
             C91 * C2344 - C104 * C2336) *
                C89247) *
               C89236 * C1720 +
           ((C100 * C1726 - C89 * C1738 + C102 * C1727 - C90 * C1740 +
             C104 * C1729 - C91 * C1744) *
                C263 +
            (C100 * C2334 - C89 * C2342 + C102 * C2335 - C90 * C2343 +
             C104 * C2337 - C91 * C2345) *
                C89247) *
               C89236 * C1721) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C89093 * C112 - C13261 * C106) * C263 +
            (C89093 * C571 - C13261 * C565) * C89247) *
               C13258 +
           ((C89093 * C829 - C13261 * C819) * C263 +
            (C89093 * C1433 - C13261 * C1425) * C89247) *
               C13259 +
           ((C89093 * C831 - C13261 * C820) * C263 +
            (C89093 * C1436 - C13261 * C1428) * C89247) *
               C13260) *
              C89153 * C89137 * C96 +
          (((C13261 * C107 - C89093 * C114) * C263 +
            (C13261 * C566 - C89093 * C572) * C89247) *
               C13258 +
           ((C13261 * C818 - C89093 * C827) * C263 +
            (C13261 * C1426 - C89093 * C1434) * C89247) *
               C13259 +
           ((C13261 * C821 - C89093 * C833) * C263 +
            (C13261 * C1429 - C89093 * C1437) * C89247) *
               C13260) *
              C89153 * C89137 * C97 +
          (((C89093 * C116 - C13261 * C108) * C263 +
            (C89093 * C573 - C13261 * C567) * C89247) *
               C13258 +
           ((C89093 * C825 - C13261 * C817) * C263 +
            (C89093 * C1435 - C13261 * C1427) * C89247) *
               C13259 +
           ((C89093 * C835 - C13261 * C822) * C263 +
            (C89093 * C1438 - C13261 * C1430) * C89247) *
               C13260) *
              C89153 * C89137 * C98 +
          (((C13261 * C109 - C89093 * C118) * C263 +
            (C13261 * C568 - C89093 * C574) * C89247) *
               C13258 +
           ((C13261 * C823 - C89093 * C837) * C263 +
            (C13261 * C1431 - C89093 * C1439) * C89247) *
               C13259 +
           ((C13261 * C824 - C89093 * C839) * C263 +
            (C13261 * C1432 - C89093 * C1440) * C89247) *
               C13260) *
              C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C263 +
             (C89093 * C571 - C13261 * C565) * C89247) *
                C13258 +
            ((C14060 - C14061) * C263 + (C14328 - C14329) * C89247) * C13259 +
            C14346 * C13260) *
               C89153 * C812 +
           (((C14061 - C14060) * C263 + (C14329 - C14328) * C89247) * C13258 +
            ((C14065 - C14064) * C263 + (C14332 - C14331) * C89247) * C13259 +
            ((C14068 - C14069) * C263 + (C14333 - C14334) * C89247) * C13260) *
               C89153 * C813 +
           (C14346 * C13258 +
            ((C14069 - C14068) * C263 + (C14334 - C14333) * C89247) * C13259 +
            ((C89093 * C13745 - C13261 * C13743) * C263 +
             (C89093 * C14325 - C13261 * C14323) * C89247) *
                C13260) *
               C89153 * C814) *
              C815 +
          ((((C13261 * C107 - C89093 * C114) * C263 +
             (C13261 * C566 - C89093 * C572) * C89247) *
                C13258 +
            ((C14072 - C14073) * C263 + (C14335 - C14336) * C89247) * C13259 +
            C14347 * C13260) *
               C89153 * C812 +
           (((C14073 - C14072) * C263 + (C14336 - C14335) * C89247) * C13258 +
            ((C14077 - C14076) * C263 + (C14339 - C14338) * C89247) * C13259 +
            ((C14080 - C14081) * C263 + (C14340 - C14341) * C89247) * C13260) *
               C89153 * C813 +
           (C14347 * C13258 +
            ((C14081 - C14080) * C263 + (C14341 - C14340) * C89247) * C13259 +
            ((C13261 * C13744 - C89093 * C13747) * C263 +
             (C13261 * C14324 - C89093 * C14326) * C89247) *
                C13260) *
               C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C263 +
             (C89093 * C571 - C13261 * C565) * C89247) *
                C13258 +
            ((C14060 - C14061) * C263 + (C14328 - C14329) * C89247) * C13259 +
            C14346 * C13260) *
               C1719 +
           (((C13261 * C1724 - C89093 * C1734) * C263 +
             (C13261 * C2330 - C89093 * C2338) * C89247) *
                C13258 +
            ((C13261 * C4097 - C89093 * C4101) * C263 +
             (C13261 * C4767 - C89093 * C4771) * C89247) *
                C13259 +
            ((C13261 * C8516 - C89093 * C8521) * C263 +
             (C13261 * C8994 - C89093 * C8997) * C89247) *
                C13260) *
               C1720 +
           (((C89093 * C1736 - C13261 * C1725) * C263 +
             (C89093 * C2341 - C13261 * C2333) * C89247) *
                C13258 +
            ((C89093 * C6254 - C13261 * C6249) * C263 +
             (C89093 * C6730 - C13261 * C6727) * C89247) *
                C13259 +
            ((C89093 * C14603 - C13261 * C14601) * C263 +
             (C89093 * C15071 - C13261 * C15069) * C89247) *
                C13260) *
               C1721) *
              C89137 * C815 +
          ((((C13261 * C107 - C89093 * C114) * C263 +
             (C13261 * C566 - C89093 * C572) * C89247) *
                C13258 +
            ((C14072 - C14073) * C263 + (C14335 - C14336) * C89247) * C13259 +
            C14347 * C13260) *
               C1719 +
           (((C89093 * C1732 - C13261 * C1723) * C263 +
             (C89093 * C2339 - C13261 * C2331) * C89247) *
                C13258 +
            ((C89093 * C4103 - C13261 * C4098) * C263 +
             (C89093 * C4772 - C13261 * C4768) * C89247) *
                C13259 +
            ((C89093 * C8519 - C13261 * C8515) * C263 +
             (C89093 * C8998 - C13261 * C8995) * C89247) *
                C13260) *
               C1720 +
           (((C13261 * C1726 - C89093 * C1738) * C263 +
             (C13261 * C2334 - C89093 * C2342) * C89247) *
                C13258 +
            ((C13261 * C6248 - C89093 * C6252) * C263 +
             (C13261 * C6728 - C89093 * C6731) * C89247) *
                C13259 +
            ((C13261 * C14602 - C89093 * C14605) * C263 +
             (C13261 * C15070 - C89093 * C15072) * C89247) *
                C13260) *
               C1721) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q));
    d2eezy[62] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C263 +
             (C89236 * C627 - C180 * C565) * C89247) *
                C89 +
            ((C194 - C195) * C263 + (C634 - C635) * C89247) * C90 +
            C648 * C91) *
               C89153 * C812 +
           (((C180 * C819 - C89236 * C923) * C263 +
             (C180 * C1425 - C89236 * C1515) * C89247) *
                C89 +
            ((C940 - C941) * C263 + (C1524 - C1525) * C89247) * C90 +
            ((C944 - C945) * C263 + (C1526 - C1527) * C89247) * C91) *
               C89153 * C813 +
           (((C89236 * C926 - C180 * C820) * C263 +
             (C89236 * C1518 - C180 * C1428) * C89247) *
                C89 +
            ((C948 - C949) * C263 + (C1528 - C1529) * C89247) * C90 +
            ((C952 - C953) * C263 + (C1530 - C1531) * C89247) * C91) *
               C89153 * C814) *
              C815 +
          ((((C195 - C194) * C263 + (C635 - C634) * C89247) * C89 +
            ((C199 - C198) * C263 + (C638 - C637) * C89247) * C90 +
            C649 * C91) *
               C89153 * C812 +
           (((C941 - C940) * C263 + (C1525 - C1524) * C89247) * C89 +
            ((C945 - C944) * C263 + (C1527 - C1526) * C89247) * C90 +
            ((C89236 * C929 - C180 * C823) * C263 +
             (C89236 * C1521 - C180 * C1431) * C89247) *
                C91) *
               C89153 * C813 +
           (((C949 - C948) * C263 + (C1529 - C1528) * C89247) * C89 +
            ((C953 - C952) * C263 + (C1531 - C1530) * C89247) * C90 +
            ((C180 * C824 - C89236 * C930) * C263 +
             (C180 * C1432 - C89236 * C1522) * C89247) *
                C91) *
               C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C89236 * C181 - C180 * C106) * C263 +
            (C89236 * C627 - C180 * C565) * C89247) *
               C89 +
           ((C194 - C195) * C263 + (C634 - C635) * C89247) * C90 + C648 * C91) *
              C89153 * C89137 * C96 +
          (((C195 - C194) * C263 + (C635 - C634) * C89247) * C89 +
           ((C199 - C198) * C263 + (C638 - C637) * C89247) * C90 + C649 * C91) *
              C89153 * C89137 * C97 +
          (C648 * C89 + ((C203 - C202) * C263 + (C641 - C640) * C89247) * C90 +
           ((C206 - C207) * C263 + (C642 - C643) * C89247) * C91) *
              C89153 * C89137 * C98 +
          (C649 * C89 + ((C207 - C206) * C263 + (C643 - C642) * C89247) * C90 +
           ((C180 * C111 - C89236 * C186) * C263 +
            (C180 * C570 - C89236 * C632) * C89247) *
               C91) *
              C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C263 +
             (C89236 * C627 - C180 * C565) * C89247) *
                C89 +
            ((C194 - C195) * C263 + (C634 - C635) * C89247) * C90 +
            C648 * C91) *
               C1719 +
           (((C180 * C1724 - C89236 * C1828) * C263 +
             (C180 * C2330 - C89236 * C2420) * C89247) *
                C89 +
            ((C1845 - C1846) * C263 + (C2429 - C2430) * C89247) * C90 +
            ((C1849 - C1850) * C263 + (C2431 - C2432) * C89247) * C91) *
               C1720 +
           (((C89236 * C1831 - C180 * C1725) * C263 +
             (C89236 * C2423 - C180 * C2333) * C89247) *
                C89 +
            ((C1853 - C1854) * C263 + (C2433 - C2434) * C89247) * C90 +
            ((C1857 - C1858) * C263 + (C2435 - C2436) * C89247) * C91) *
               C1721) *
              C89137 * C815 +
          ((((C195 - C194) * C263 + (C635 - C634) * C89247) * C89 +
            ((C199 - C198) * C263 + (C638 - C637) * C89247) * C90 +
            C649 * C91) *
               C1719 +
           (((C1846 - C1845) * C263 + (C2430 - C2429) * C89247) * C89 +
            ((C1850 - C1849) * C263 + (C2432 - C2431) * C89247) * C90 +
            ((C89236 * C1834 - C180 * C1728) * C263 +
             (C89236 * C2426 - C180 * C2336) * C89247) *
                C91) *
               C1720 +
           (((C1854 - C1853) * C263 + (C2434 - C2433) * C89247) * C89 +
            ((C1858 - C1857) * C263 + (C2436 - C2435) * C89247) * C90 +
            ((C180 * C1729 - C89236 * C1835) * C263 +
             (C180 * C2337 - C89236 * C2427) * C89247) *
                C91) *
               C1721) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
            C13260 * C926 - C13315 * C820) *
               C263 +
           (C13258 * C627 - C13313 * C565 + C13259 * C1515 - C13314 * C1425 +
            C13260 * C1518 - C13315 * C1428) *
               C89247) *
              C89093 * C89153 * C89137 * C96 +
          ((C13313 * C107 - C13258 * C182 + C13314 * C818 - C13259 * C924 +
            C13315 * C821 - C13260 * C927) *
               C263 +
           (C13313 * C566 - C13258 * C628 + C13314 * C1426 - C13259 * C1516 +
            C13315 * C1429 - C13260 * C1519) *
               C89247) *
              C89093 * C89153 * C89137 * C97 +
          ((C13258 * C183 - C13313 * C108 + C13259 * C925 - C13314 * C817 +
            C13260 * C928 - C13315 * C822) *
               C263 +
           (C13258 * C629 - C13313 * C567 + C13259 * C1517 - C13314 * C1427 +
            C13260 * C1520 - C13315 * C1430) *
               C89247) *
              C89093 * C89153 * C89137 * C98 +
          ((C13313 * C109 - C13258 * C184 + C13314 * C823 - C13259 * C929 +
            C13315 * C824 - C13260 * C930) *
               C263 +
           (C13313 * C568 - C13258 * C630 + C13314 * C1431 - C13259 * C1521 +
            C13315 * C1432 - C13260 * C1522) *
               C89247) *
              C89093 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
             C13260 * C926 - C13315 * C820) *
                C263 +
            (C13258 * C627 - C13313 * C565 + C13259 * C1515 - C13314 * C1425 +
             C13260 * C1518 - C13315 * C1428) *
                C89247) *
               C89093 * C89153 * C812 +
           ((C13313 * C819 - C13258 * C923 + C13314 * C820 - C13259 * C926 +
             C13315 * C5727 - C13260 * C5787) *
                C263 +
            (C13313 * C1425 - C13258 * C1515 + C13314 * C1428 - C13259 * C1518 +
             C13315 * C6061 - C13260 * C6117) *
                C89247) *
               C89093 * C89153 * C813 +
           ((C13258 * C926 - C13313 * C820 + C13259 * C5787 - C13314 * C5727 +
             C13260 * C13873 - C13315 * C13743) *
                C263 +
            (C13258 * C1518 - C13313 * C1428 + C13259 * C6117 - C13314 * C6061 +
             C13260 * C14421 - C13315 * C14323) *
                C89247) *
               C89093 * C89153 * C814) *
              C815 +
          (((C13313 * C107 - C13258 * C182 + C13314 * C818 - C13259 * C924 +
             C13315 * C821 - C13260 * C927) *
                C263 +
            (C13313 * C566 - C13258 * C628 + C13314 * C1426 - C13259 * C1516 +
             C13315 * C1429 - C13260 * C1519) *
                C89247) *
               C89093 * C89153 * C812 +
           ((C13258 * C924 - C13313 * C818 + C13259 * C927 - C13314 * C821 +
             C13260 * C5788 - C13315 * C5726) *
                C263 +
            (C13258 * C1516 - C13313 * C1426 + C13259 * C1519 - C13314 * C1429 +
             C13260 * C6118 - C13315 * C6062) *
                C89247) *
               C89093 * C89153 * C813 +
           ((C13313 * C821 - C13258 * C927 + C13314 * C5726 - C13259 * C5788 +
             C13315 * C13744 - C13260 * C13874) *
                C263 +
            (C13313 * C1429 - C13258 * C1519 + C13314 * C6062 - C13259 * C6118 +
             C13315 * C14324 - C13260 * C14422) *
                C89247) *
               C89093 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
             C13260 * C926 - C13315 * C820) *
                C263 +
            (C13258 * C627 - C13313 * C565 + C13259 * C1515 - C13314 * C1425 +
             C13260 * C1518 - C13315 * C1428) *
                C89247) *
               C89093 * C1719 +
           ((C13313 * C1724 - C13258 * C1828 + C13314 * C4097 - C13259 * C4211 +
             C13315 * C8516 - C13260 * C8600) *
                C263 +
            (C13313 * C2330 - C13258 * C2420 + C13314 * C4767 - C13259 * C4873 +
             C13315 * C8994 - C13260 * C9074) *
                C89247) *
               C89093 * C1720 +
           ((C13258 * C1831 - C13313 * C1725 + C13259 * C6333 - C13314 * C6249 +
             C13260 * C14683 - C13315 * C14601) *
                C263 +
            (C13258 * C2423 - C13313 * C2333 + C13259 * C6807 - C13314 * C6727 +
             C13260 * C15147 - C13315 * C15069) *
                C89247) *
               C89093 * C1721) *
              C89137 * C815 +
          (((C13313 * C107 - C13258 * C182 + C13314 * C818 - C13259 * C924 +
             C13315 * C821 - C13260 * C927) *
                C263 +
            (C13313 * C566 - C13258 * C628 + C13314 * C1426 - C13259 * C1516 +
             C13315 * C1429 - C13260 * C1519) *
                C89247) *
               C89093 * C1719 +
           ((C13258 * C1829 - C13313 * C1723 + C13259 * C4212 - C13314 * C4098 +
             C13260 * C8601 - C13315 * C8515) *
                C263 +
            (C13258 * C2421 - C13313 * C2331 + C13259 * C4874 - C13314 * C4768 +
             C13260 * C9075 - C13315 * C8995) *
                C89247) *
               C89093 * C1720 +
           ((C13313 * C1726 - C13258 * C1832 + C13314 * C6248 - C13259 * C6334 +
             C13315 * C14602 - C13260 * C14684) *
                C263 +
            (C13313 * C2334 - C13258 * C2424 + C13314 * C6728 - C13259 * C6808 +
             C13315 * C15070 - C13260 * C15148) *
                C89247) *
               C89093 * C1721) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q));
    d2eezz[62] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C89236 *
                C89 +
            C735 * C90 + C736 * C91) *
               C89153 * C812 -
           (C1642 * C91 + C1643 * C90 +
            (C263 * C1029 - C699 * C819 - C263 * C1425 + C89247 * C1607) *
                C89236 * C89) *
               C89153 * C813 +
           ((C263 * C1032 - C699 * C820 - C263 * C1428 + C89247 * C1608) *
                C89236 * C89 +
            C1644 * C90 + C1645 * C91) *
               C89153 * C814) *
              C815 +
          ((C1643 * C89 + C1642 * C90 +
            (C263 * C1035 - C699 * C823 - C263 * C1431 + C89247 * C1611) *
                C89236 * C91) *
               C89153 * C813 -
           (C737 * C91 + C736 * C90 + C735 * C89) * C89153 * C812 -
           ((C263 * C1036 - C699 * C824 - C263 * C1432 + C89247 * C1612) *
                C89236 * C91 +
            C1645 * C90 + C1644 * C89) *
               C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C89236 *
               C89 +
           C735 * C90 + C736 * C91) *
              C89153 * C89137 * C96 -
          (C737 * C91 + C736 * C90 + C735 * C89) * C89153 * C89137 * C97 +
          (C736 * C89 + C737 * C90 + C738 * C91) * C89153 * C89137 * C98 -
          ((C263 * C269 - C699 * C111 - C263 * C570 + C89247 * C705) * C89236 *
               C91 +
           C738 * C90 + C737 * C89) *
              C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C89236 *
                C89 +
            C735 * C90 + C736 * C91) *
               C1719 -
           (C2547 * C91 + C2548 * C90 +
            (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
                C89236 * C89) *
               C1720 +
           ((C263 * C1937 - C699 * C1725 - C263 * C2333 + C89247 * C2513) *
                C89236 * C89 +
            C2549 * C90 + C2550 * C91) *
               C1721) *
              C89137 * C815 +
          ((C2548 * C89 + C2547 * C90 +
            (C263 * C1940 - C699 * C1728 - C263 * C2336 + C89247 * C2516) *
                C89236 * C91) *
               C1720 -
           (C737 * C91 + C736 * C90 + C735 * C89) * C1719 -
           ((C263 * C1941 - C699 * C1729 - C263 * C2337 + C89247 * C2517) *
                C89236 * C91 +
            C2550 * C90 + C2549 * C89) *
               C1721) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C13258 +
           (C263 * C1029 - C699 * C819 - C263 * C1425 + C89247 * C1607) *
               C13259 +
           (C263 * C1032 - C699 * C820 - C263 * C1428 + C89247 * C1608) *
               C13260) *
              C89093 * C89153 * C89137 * C96 -
          (C1640 * C13260 + C1639 * C13259 + C731 * C13258) * C89093 * C89153 *
              C89137 * C97 +
          (C732 * C13258 + C1638 * C13259 + C1641 * C13260) * C89093 * C89153 *
              C89137 * C98 -
          ((C263 * C1036 - C699 * C824 - C263 * C1432 + C89247 * C1612) *
               C13260 +
           C3275 * C13259 + C733 * C13258) *
              C89093 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C13258 +
            C14524 * C13259 + C14525 * C13260) *
               C89093 * C89153 * C812 -
           (C14526 * C13260 + C14525 * C13259 + C14524 * C13258) * C89093 *
               C89153 * C813 +
           (C14525 * C13258 + C14526 * C13259 +
            (C263 * C13951 - C699 * C13743 - C263 * C14323 + C89247 * C14497) *
                C13260) *
               C89093 * C89153 * C814) *
              C815 +
          ((C1639 * C13258 + C1640 * C13259 + C14527 * C13260) * C89093 *
               C89153 * C813 -
           (C1640 * C13260 + C1639 * C13259 + C731 * C13258) * C89093 * C89153 *
               C812 -
           ((C263 * C13952 - C699 * C13744 - C263 * C14324 + C89247 * C14498) *
                C13260 +
            C14527 * C13259 + C1640 * C13258) *
               C89093 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C13258 +
            C14524 * C13259 + C14525 * C13260) *
               C89093 * C1719 -
           ((C263 * C8680 - C699 * C8516 - C263 * C8994 + C89247 * C9153) *
                C13260 +
            (C263 * C4325 - C699 * C4097 - C263 * C4767 + C89247 * C4979) *
                C13259 +
            (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
                C13258) *
               C89093 * C1720 +
           ((C263 * C1937 - C699 * C1725 - C263 * C2333 + C89247 * C2513) *
                C13258 +
            (C263 * C6413 - C699 * C6249 - C263 * C6727 + C89247 * C6886) *
                C13259 +
            (C263 * C14761 - C699 * C14601 - C263 * C15069 + C89247 * C15223) *
                C13260) *
               C89093 * C1721) *
              C89137 * C815 +
          ((C2544 * C13258 + C4996 * C13259 +
            (C263 * C8681 - C699 * C8515 - C263 * C8995 + C89247 * C9152) *
                C13260) *
               C89093 * C1720 -
           (C1640 * C13260 + C1639 * C13259 + C731 * C13258) * C89093 * C1719 -
           ((C263 * C14762 - C699 * C14602 - C263 * C15070 + C89247 * C15224) *
                C13260 +
            (C263 * C6414 - C699 * C6248 - C263 * C6728 + C89247 * C6885) *
                C13259 +
            C2545 * C13258) *
               C89093 * C1721) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q));
    d2eexx[63] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C112 - C101 * C106 - C100 * C113 + C89 * C124 + C102 * C114 -
            C103 * C107 - C102 * C115 + C90 * C125 + C104 * C116 - C105 * C108 -
            C104 * C117 + C91 * C126) *
               C89247 * C89236 * C89308 -
           (C104 * C1730 - C105 * C1722 - C104 * C1731 + C91 * C1746 +
            C102 * C1732 - C103 * C1723 - C102 * C1733 + C90 * C1747 +
            C100 * C1734 - C101 * C1724 - C100 * C1735 + C89 * C1748) *
               C89247 * C89236 * C89217) *
              C89137 * C89333 +
          ((C100 * C1732 - C101 * C1723 - C100 * C1733 + C89 * C1747 +
            C102 * C1730 - C103 * C1722 - C102 * C1731 + C90 * C1746 +
            C104 * C1742 - C105 * C1728 - C104 * C1743 + C91 * C1752) *
               C89247 * C89236 * C89217 -
           (C104 * C118 - C105 * C109 - C104 * C119 + C91 * C127 + C102 * C116 -
            C103 * C108 - C102 * C117 + C90 * C126 + C100 * C114 - C101 * C107 -
            C100 * C115 + C89 * C125) *
               C89247 * C89236 * C89308) *
              C89137 * C89334 +
          ((C100 * C116 - C101 * C108 - C100 * C117 + C89 * C126 + C102 * C118 -
            C103 * C109 - C102 * C119 + C90 * C127 + C104 * C120 - C105 * C110 -
            C104 * C121 + C91 * C128) *
               C89247 * C89236 * C89308 -
           (C104 * C3353 - C105 * C3352 - C104 * C3354 + C91 * C3355 +
            C102 * C1742 - C103 * C1728 - C102 * C1743 + C90 * C1752 +
            C100 * C1730 - C101 * C1722 - C100 * C1731 + C89 * C1746) *
               C89247 * C89236 * C89217) *
              C89137 * C2628)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                C89247 * C13258 +
            C13794 * C13259 + C13795 * C13260) *
               C89308 -
           ((C13261 * C8521 - C13262 * C8516 - C13261 * C8522 +
             C89093 * C8525) *
                C89247 * C13260 +
            (C13261 * C4101 - C13262 * C4097 - C13261 * C4102 +
             C89093 * C4109) *
                C89247 * C13259 +
            (C13261 * C1734 - C13262 * C1724 - C13261 * C1735 +
             C89093 * C1748) *
                C89247 * C13258) *
               C89217) *
              C89137 * C89333 +
          (((C13261 * C1732 - C13262 * C1723 - C13261 * C1733 +
             C89093 * C1747) *
                C89247 * C13258 +
            (C13261 * C4103 - C13262 * C4098 - C13261 * C4104 +
             C89093 * C4110) *
                C89247 * C13259 +
            (C13261 * C8519 - C13262 * C8515 - C13261 * C8520 +
             C89093 * C8524) *
                C89247 * C13260) *
               C89217 -
           (C13798 * C13260 + C13797 * C13259 +
            (C13261 * C114 - C13262 * C107 - C13261 * C115 + C89093 * C125) *
                C89247 * C13258) *
               C89308) *
              C89137 * C89334 +
          (((C13261 * C116 - C13262 * C108 - C13261 * C117 + C89093 * C126) *
                C89247 * C13258 +
            C15314 * C13259 + C15315 * C13260) *
               C89308 -
           ((C13261 * C8517 - C13262 * C8514 - C13261 * C8518 +
             C89093 * C8523) *
                C89247 * C13260 +
            (C13261 * C4105 - C13262 * C4099 - C13261 * C4106 +
             C89093 * C4111) *
                C89247 * C13259 +
            (C13261 * C1730 - C13262 * C1722 - C13261 * C1731 +
             C89093 * C1746) *
                C89247 * C13258) *
               C89217) *
              C89137 * C2628)) /
            (p * q * std::sqrt(p + q));
    d2eexy[63] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C89236 * C181 - C180 * C106) * C100 +
            (C89236 * C187 - C180 * C113) * C89 + (C194 - C195) * C102 +
            (C196 - C197) * C90 + C210 * C104 + C211 * C91) *
               C89247 * C89308 +
           ((C180 * C1724 - C89236 * C1828) * C100 +
            (C180 * C1735 - C89236 * C1836) * C89 + (C1845 - C1846) * C102 +
            (C1847 - C1848) * C90 + C3433 * C104 + C3434 * C91) *
               C89247 * C89217) *
              C89137 * C89333 +
          (((C195 - C194) * C100 + (C197 - C196) * C89 + (C199 - C198) * C102 +
            (C201 - C200) * C90 + C212 * C104 + C213 * C91) *
               C89247 * C89308 +
           ((C1846 - C1845) * C100 + (C1848 - C1847) * C89 +
            (C1850 - C1849) * C102 + (C1852 - C1851) * C90 +
            (C3435 - C3436) * C104 + (C3437 - C3438) * C91) *
               C89247 * C89217) *
              C89137 * C89334 +
          ((C210 * C100 + C211 * C89 + (C203 - C202) * C102 +
            (C205 - C204) * C90 + (C206 - C207) * C104 + (C208 - C209) * C91) *
               C89247 * C89308 +
           (C3433 * C100 + C3434 * C89 + (C3436 - C3435) * C102 +
            (C3438 - C3437) * C90 + (C180 * C3352 - C89236 * C3430) * C104 +
            (C180 * C3354 - C89236 * C3431) * C91) *
               C89247 * C89217) *
              C89137 * C2628)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
             C13260 * C926 - C13315 * C820) *
                C13261 +
            (C13258 * C187 - C13313 * C113 + C13259 * C931 - C13314 * C830 +
             C13260 * C934 - C13315 * C832) *
                C89093) *
               C89247 * C89308 +
           ((C13313 * C1724 - C13258 * C1828 + C13314 * C4097 - C13259 * C4211 +
             C13315 * C8516 - C13260 * C8600) *
                C13261 +
            (C13313 * C1735 - C13258 * C1836 + C13314 * C4102 - C13259 * C4215 +
             C13315 * C8522 - C13260 * C8603) *
                C89093) *
               C89247 * C89217) *
              C89137 * C89333 +
          (((C13313 * C107 - C13258 * C182 + C13314 * C818 - C13259 * C924 +
             C13315 * C821 - C13260 * C927) *
                C13261 +
            (C13313 * C115 - C13258 * C188 + C13314 * C828 - C13259 * C932 +
             C13315 * C834 - C13260 * C935) *
                C89093) *
               C89247 * C89308 +
           ((C13258 * C1829 - C13313 * C1723 + C13259 * C4212 - C13314 * C4098 +
             C13260 * C8601 - C13315 * C8515) *
                C13261 +
            (C13258 * C1837 - C13313 * C1733 + C13259 * C4216 - C13314 * C4104 +
             C13260 * C8604 - C13315 * C8520) *
                C89093) *
               C89247 * C89217) *
              C89137 * C89334 +
          (((C13258 * C183 - C13313 * C108 + C13259 * C925 - C13314 * C817 +
             C13260 * C928 - C13315 * C822) *
                C13261 +
            (C13258 * C189 - C13313 * C117 + C13259 * C933 - C13314 * C826 +
             C13260 * C936 - C13315 * C836) *
                C89093) *
               C89247 * C89308 +
           ((C13313 * C1722 - C13258 * C1830 + C13314 * C4099 - C13259 * C4213 +
             C13315 * C8514 - C13260 * C8602) *
                C13261 +
            (C13313 * C1731 - C13258 * C1838 + C13314 * C4106 - C13259 * C4217 +
             C13315 * C8518 - C13260 * C8605) *
                C89093) *
               C89247 * C89217) *
              C89137 * C2628)) /
            (p * q * std::sqrt(p + q));
    d2eexz[63] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C100 +
            (C89247 * C270 - C263 * C113) * C89 + (C277 - C278) * C102 +
            (C279 - C280) * C90 + C293 * C104 + C294 * C91) *
               C89236 * C89308 +
           ((C263 * C1724 - C89247 * C1934) * C100 +
            (C263 * C1735 - C89247 * C1942) * C89 + (C1951 - C1952) * C102 +
            (C1953 - C1954) * C90 + C3515 * C104 + C3516 * C91) *
               C89236 * C89217) *
              C89137 * C89333 +
          (((C278 - C277) * C100 + (C280 - C279) * C89 + (C282 - C281) * C102 +
            (C284 - C283) * C90 + C295 * C104 + C296 * C91) *
               C89236 * C89308 +
           ((C1952 - C1951) * C100 + (C1954 - C1953) * C89 +
            (C1956 - C1955) * C102 + (C1958 - C1957) * C90 +
            (C3517 - C3518) * C104 + (C3519 - C3520) * C91) *
               C89236 * C89217) *
              C89137 * C89334 +
          ((C293 * C100 + C294 * C89 + (C286 - C285) * C102 +
            (C288 - C287) * C90 + (C289 - C290) * C104 + (C291 - C292) * C91) *
               C89236 * C89308 +
           (C3515 * C100 + C3516 * C89 + (C3518 - C3517) * C102 +
            (C3520 - C3519) * C90 + (C263 * C3352 - C89247 * C3512) * C104 +
            (C263 * C3354 - C89247 * C3513) * C91) *
               C89236 * C89217) *
              C89137 * C2628)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C13261 +
             (C89247 * C270 - C263 * C113) * C89093) *
                C13258 +
            ((C13956 - C13957) * C13261 + (C13958 - C13959) * C89093) * C13259 +
            C13981 * C13260) *
               C89308 +
           (((C263 * C1724 - C89247 * C1934) * C13261 +
             (C263 * C1735 - C89247 * C1942) * C89093) *
                C13258 +
            ((C263 * C4097 - C89247 * C4325) * C13261 +
             (C263 * C4102 - C89247 * C4329) * C89093) *
                C13259 +
            ((C263 * C8516 - C89247 * C8680) * C13261 +
             (C263 * C8522 - C89247 * C8683) * C89093) *
                C13260) *
               C89217) *
              C89137 * C89333 +
          ((((C278 - C277) * C13261 + (C280 - C279) * C89093) * C13258 +
            ((C1046 - C1047) * C13261 + (C1048 - C1049) * C89093) * C13259 +
            C13980 * C13260) *
               C89308 +
           (((C1952 - C1951) * C13261 + (C1954 - C1953) * C89093) * C13258 +
            ((C4334 - C4335) * C13261 + (C4336 - C4337) * C89093) * C13259 +
            ((C89247 * C8681 - C263 * C8515) * C13261 +
             (C89247 * C8684 - C263 * C8520) * C89093) *
                C13260) *
               C89217) *
              C89137 * C89334 +
          (((C293 * C13261 + C294 * C89093) * C13258 +
            ((C1051 - C1050) * C13261 + (C1053 - C1052) * C89093) * C13259 +
            ((C1058 - C1059) * C13261 + (C1060 - C1061) * C89093) * C13260) *
               C89308 +
           ((C3515 * C13261 + C3516 * C89093) * C13258 +
            ((C4339 - C4338) * C13261 + (C4341 - C4340) * C89093) * C13259 +
            ((C263 * C8514 - C89247 * C8682) * C13261 +
             (C263 * C8518 - C89247 * C8685) * C89093) *
                C13260) *
               C89217) *
              C89137 * C2628)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[63] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 +
                       C91 * C116 - C104 * C108) *
                          C180 +
                      (C89 * C352 - C100 * C346 + C90 * C353 - C102 * C347 +
                       C91 * C354 - C104 * C348) *
                          C89236) *
                         C89247 * C89308 +
                     ((C100 * C1724 - C89 * C1734 + C102 * C1723 - C90 * C1732 +
                       C104 * C1722 - C91 * C1730) *
                          C180 +
                      (C100 * C2040 - C89 * C2048 + C102 * C2041 - C90 * C2049 +
                       C104 * C2042 - C91 * C2050) *
                          C89236) *
                         C89247 * C89217) *
                        C89137 * C89333 +
                    (((C100 * C107 - C89 * C114 + C102 * C108 - C90 * C116 +
                       C104 * C109 - C91 * C118) *
                          C180 +
                      (C100 * C347 - C89 * C353 + C102 * C348 - C90 * C354 +
                       C104 * C349 - C91 * C355) *
                          C89236) *
                         C89247 * C89308 +
                     ((C89 * C1732 - C100 * C1723 + C90 * C1730 - C102 * C1722 +
                       C91 * C1742 - C104 * C1728) *
                          C180 +
                      (C89 * C2049 - C100 * C2041 + C90 * C2050 - C102 * C2042 +
                       C91 * C2054 - C104 * C2046) *
                          C89236) *
                         C89247 * C89217) *
                        C89137 * C89334 +
                    (((C89 * C116 - C100 * C108 + C90 * C118 - C102 * C109 +
                       C91 * C120 - C104 * C110) *
                          C180 +
                      (C89 * C354 - C100 * C348 + C90 * C355 - C102 * C349 +
                       C91 * C356 - C104 * C350) *
                          C89236) *
                         C89247 * C89308 +
                     ((C100 * C1722 - C89 * C1730 + C102 * C1728 - C90 * C1742 +
                       C104 * C3352 - C91 * C3353) *
                          C180 +
                      (C100 * C2042 - C89 * C2050 + C102 * C2046 - C90 * C2054 +
                       C104 * C3594 - C91 * C3595) *
                          C89236) *
                         C89247 * C89217) *
                        C89137 * C2628)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C89093 * C112 - C13261 * C106) * C13313 +
                      (C89093 * C352 - C13261 * C346) * C13258 +
                      (C14060 - C14061) * C13314 + (C14062 - C14063) * C13259 +
                      C14084 * C13315 + C14085 * C13260) *
                         C89247 * C89308 +
                     ((C13261 * C1724 - C89093 * C1734) * C13313 +
                      (C13261 * C2040 - C89093 * C2048) * C13258 +
                      (C13261 * C4097 - C89093 * C4101) * C13314 +
                      (C13261 * C4439 - C89093 * C4443) * C13259 +
                      (C13261 * C8516 - C89093 * C8521) * C13315 +
                      (C13261 * C8760 - C89093 * C8763) * C13260) *
                         C89247 * C89217) *
                        C89137 * C89333 +
                    (((C13261 * C107 - C89093 * C114) * C13313 +
                      (C13261 * C347 - C89093 * C353) * C13258 +
                      (C14072 - C14073) * C13314 + (C14074 - C14075) * C13259 +
                      C14086 * C13315 + C14087 * C13260) *
                         C89247 * C89308 +
                     ((C89093 * C1732 - C13261 * C1723) * C13313 +
                      (C89093 * C2049 - C13261 * C2041) * C13258 +
                      (C89093 * C4103 - C13261 * C4098) * C13314 +
                      (C89093 * C4444 - C13261 * C4440) * C13259 +
                      (C89093 * C8519 - C13261 * C8515) * C13315 +
                      (C89093 * C8764 - C13261 * C8761) * C13260) *
                         C89247 * C89217) *
                        C89137 * C89334 +
                    (((C89093 * C116 - C13261 * C108) * C13313 +
                      (C89093 * C354 - C13261 * C348) * C13258 +
                      (C15538 - C15539) * C13314 + (C15540 - C15541) * C13259 +
                      (C15542 - C15543) * C13315 + (C15544 - C15545) * C13260) *
                         C89247 * C89308 +
                     ((C13261 * C1722 - C89093 * C1730) * C13313 +
                      (C13261 * C2042 - C89093 * C2050) * C13258 +
                      (C13261 * C4099 - C89093 * C4105) * C13314 +
                      (C13261 * C4441 - C89093 * C4445) * C13259 +
                      (C13261 * C8514 - C89093 * C8517) * C13315 +
                      (C13261 * C8762 - C89093 * C8765) * C13260) *
                         C89247 * C89217) *
                        C89137 * C2628)) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[63] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C89 +
            C440 * C90 + C441 * C91) *
               C89247 * C89308 -
           (C2163 * C91 + C2164 * C90 +
            (C180 * C1828 - C408 * C1724 - C180 * C2040 + C89236 * C2132) *
                C89) *
               C89247 * C89217) *
              C89137 * C89333 +
          ((C2164 * C89 + C2163 * C90 + C3678 * C91) * C89247 * C89217 -
           (C442 * C91 + C441 * C90 + C440 * C89) * C89247 * C89308) *
              C89137 * C89334 +
          ((C441 * C89 + C442 * C90 + C443 * C91) * C89247 * C89308 -
           ((C180 * C3430 - C408 * C3352 - C180 * C3594 + C89236 * C3670) *
                C91 +
            C3678 * C90 + C2163 * C89) *
               C89247 * C89217) *
              C89137 * C2628)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C13313 * C181 - C13466 * C106 - C13313 * C346 + C13258 * C409 +
            C13314 * C923 - C13467 * C819 - C13314 * C1135 + C13259 * C1227 +
            C13315 * C926 - C13468 * C820 - C13315 * C1138 + C13260 * C1228) *
               C89093 * C89247 * C89308 -
           (C13315 * C8600 - C13468 * C8516 - C13315 * C8760 + C13260 * C8842 +
            C13314 * C4211 - C13467 * C4097 - C13314 * C4439 + C13259 * C4545 +
            C13313 * C1828 - C13466 * C1724 - C13313 * C2040 + C13258 * C2132) *
               C89093 * C89247 * C89217) *
              C89137 * C89333 +
          ((C13313 * C1829 - C13466 * C1723 - C13313 * C2041 + C13258 * C2131 +
            C13314 * C4212 - C13467 * C4098 - C13314 * C4440 + C13259 * C4546 +
            C13315 * C8601 - C13468 * C8515 - C13315 * C8761 + C13260 * C8841) *
               C89093 * C89247 * C89217 -
           (C13315 * C927 - C13468 * C821 - C13315 * C1139 + C13260 * C1229 +
            C13314 * C924 - C13467 * C818 - C13314 * C1136 + C13259 * C1226 +
            C13313 * C182 - C13466 * C107 - C13313 * C347 + C13258 * C410) *
               C89093 * C89247 * C89308) *
              C89137 * C89334 +
          ((C13313 * C183 - C13466 * C108 - C13313 * C348 + C13258 * C411 +
            C13314 * C925 - C13467 * C817 - C13314 * C1137 + C13259 * C1225 +
            C13315 * C928 - C13468 * C822 - C13315 * C1140 + C13260 * C1230) *
               C89093 * C89247 * C89308 -
           (C13315 * C8602 - C13468 * C8514 - C13315 * C8762 + C13260 * C8840 +
            C13314 * C4213 - C13467 * C4099 - C13314 * C4441 + C13259 * C4547 +
            C13313 * C1830 - C13466 * C1722 - C13313 * C2042 + C13258 * C2130) *
               C89093 * C89247 * C89217) *
              C89137 * C2628)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[63] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C180 +
             (C89247 * C493 - C263 * C346) * C89236) *
                C89 +
            ((C277 - C278) * C180 + (C500 - C501) * C89236) * C90 +
            C514 * C91) *
               C89308 +
           (((C263 * C1724 - C89247 * C1934) * C180 +
             (C263 * C2040 - C89247 * C2240) * C89236) *
                C89 +
            ((C1951 - C1952) * C180 + (C2249 - C2250) * C89236) * C90 +
            C3759 * C91) *
               C89217) *
              C89137 * C89333 +
          ((((C278 - C277) * C180 + (C501 - C500) * C89236) * C89 +
            ((C282 - C281) * C180 + (C504 - C503) * C89236) * C90 +
            C515 * C91) *
               C89308 +
           (((C1952 - C1951) * C180 + (C2250 - C2249) * C89236) * C89 +
            ((C1956 - C1955) * C180 + (C2252 - C2251) * C89236) * C90 +
            ((C3517 - C3518) * C180 + (C3756 - C3757) * C89236) * C91) *
               C89217) *
              C89137 * C89334 +
          ((C514 * C89 + ((C286 - C285) * C180 + (C507 - C506) * C89236) * C90 +
            ((C289 - C290) * C180 + (C508 - C509) * C89236) * C91) *
               C89308 +
           (C3759 * C89 +
            ((C3518 - C3517) * C180 + (C3757 - C3756) * C89236) * C90 +
            ((C263 * C3352 - C89247 * C3512) * C180 +
             (C263 * C3594 - C89247 * C3752) * C89236) *
                C91) *
               C89217) *
              C89137 * C2628)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C13313 +
            (C89247 * C493 - C263 * C346) * C13258 +
            (C13956 - C13957) * C13314 + (C14240 - C14241) * C13259 +
            C13974 * C13315 + C14249 * C13260) *
               C89093 * C89308 +
           ((C263 * C1724 - C89247 * C1934) * C13313 +
            (C263 * C2040 - C89247 * C2240) * C13258 +
            (C263 * C4097 - C89247 * C4325) * C13314 +
            (C263 * C4439 - C89247 * C4661) * C13259 +
            (C263 * C8516 - C89247 * C8680) * C13315 +
            (C263 * C8760 - C89247 * C8917) * C13260) *
               C89093 * C89217) *
              C89137 * C89333 +
          (((C278 - C277) * C13313 + (C501 - C500) * C13258 +
            (C1046 - C1047) * C13314 + (C1344 - C1345) * C13259 +
            C13968 * C13315 + C14246 * C13260) *
               C89093 * C89308 +
           ((C1952 - C1951) * C13313 + (C2250 - C2249) * C13258 +
            (C4334 - C4335) * C13314 + (C4666 - C4667) * C13259 +
            (C89247 * C8681 - C263 * C8515) * C13315 +
            (C89247 * C8918 - C263 * C8761) * C13260) *
               C89093 * C89217) *
              C89137 * C89334 +
          ((C293 * C13313 + C510 * C13258 + (C1051 - C1050) * C13314 +
            (C1347 - C1346) * C13259 + (C1058 - C1059) * C13315 +
            (C1350 - C1351) * C13260) *
               C89093 * C89308 +
           (C3515 * C13313 + C3755 * C13258 + (C4339 - C4338) * C13314 +
            (C4669 - C4668) * C13259 +
            (C263 * C8514 - C89247 * C8682) * C13315 +
            (C263 * C8762 - C89247 * C8919) * C13260) *
               C89093 * C89217) *
              C89137 * C2628)) /
            (p * q * std::sqrt(p + q));
    d2eezx[63] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 + C91 * C116 -
             C104 * C108) *
                C263 +
            (C89 * C571 - C100 * C565 + C90 * C572 - C102 * C566 + C91 * C573 -
             C104 * C567) *
                C89247) *
               C89236 * C89308 +
           ((C100 * C1724 - C89 * C1734 + C102 * C1723 - C90 * C1732 +
             C104 * C1722 - C91 * C1730) *
                C263 +
            (C100 * C2330 - C89 * C2338 + C102 * C2331 - C90 * C2339 +
             C104 * C2332 - C91 * C2340) *
                C89247) *
               C89236 * C89217) *
              C89137 * C89333 +
          (((C100 * C107 - C89 * C114 + C102 * C108 - C90 * C116 + C104 * C109 -
             C91 * C118) *
                C263 +
            (C100 * C566 - C89 * C572 + C102 * C567 - C90 * C573 + C104 * C568 -
             C91 * C574) *
                C89247) *
               C89236 * C89308 +
           ((C89 * C1732 - C100 * C1723 + C90 * C1730 - C102 * C1722 +
             C91 * C1742 - C104 * C1728) *
                C263 +
            (C89 * C2339 - C100 * C2331 + C90 * C2340 - C102 * C2332 +
             C91 * C2344 - C104 * C2336) *
                C89247) *
               C89236 * C89217) *
              C89137 * C89334 +
          (((C89 * C116 - C100 * C108 + C90 * C118 - C102 * C109 + C91 * C120 -
             C104 * C110) *
                C263 +
            (C89 * C573 - C100 * C567 + C90 * C574 - C102 * C568 + C91 * C575 -
             C104 * C569) *
                C89247) *
               C89236 * C89308 +
           ((C100 * C1722 - C89 * C1730 + C102 * C1728 - C90 * C1742 +
             C104 * C3352 - C91 * C3353) *
                C263 +
            (C100 * C2332 - C89 * C2340 + C102 * C2336 - C90 * C2344 +
             C104 * C3833 - C91 * C3834) *
                C89247) *
               C89236 * C89217) *
              C89137 * C2628)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C263 +
             (C89093 * C571 - C13261 * C565) * C89247) *
                C13258 +
            ((C14060 - C14061) * C263 + (C14328 - C14329) * C89247) * C13259 +
            C14346 * C13260) *
               C89308 +
           (((C13261 * C1724 - C89093 * C1734) * C263 +
             (C13261 * C2330 - C89093 * C2338) * C89247) *
                C13258 +
            ((C13261 * C4097 - C89093 * C4101) * C263 +
             (C13261 * C4767 - C89093 * C4771) * C89247) *
                C13259 +
            ((C13261 * C8516 - C89093 * C8521) * C263 +
             (C13261 * C8994 - C89093 * C8997) * C89247) *
                C13260) *
               C89217) *
              C89137 * C89333 +
          ((((C13261 * C107 - C89093 * C114) * C263 +
             (C13261 * C566 - C89093 * C572) * C89247) *
                C13258 +
            ((C14072 - C14073) * C263 + (C14335 - C14336) * C89247) * C13259 +
            C14347 * C13260) *
               C89308 +
           (((C89093 * C1732 - C13261 * C1723) * C263 +
             (C89093 * C2339 - C13261 * C2331) * C89247) *
                C13258 +
            ((C89093 * C4103 - C13261 * C4098) * C263 +
             (C89093 * C4772 - C13261 * C4768) * C89247) *
                C13259 +
            ((C89093 * C8519 - C13261 * C8515) * C263 +
             (C89093 * C8998 - C13261 * C8995) * C89247) *
                C13260) *
               C89217) *
              C89137 * C89334 +
          ((((C89093 * C116 - C13261 * C108) * C263 +
             (C89093 * C573 - C13261 * C567) * C89247) *
                C13258 +
            ((C15538 - C15539) * C263 + (C15768 - C15769) * C89247) * C13259 +
            ((C15542 - C15543) * C263 + (C15770 - C15771) * C89247) * C13260) *
               C89308 +
           (((C13261 * C1722 - C89093 * C1730) * C263 +
             (C13261 * C2332 - C89093 * C2340) * C89247) *
                C13258 +
            ((C13261 * C4099 - C89093 * C4105) * C263 +
             (C13261 * C4769 - C89093 * C4773) * C89247) *
                C13259 +
            ((C13261 * C8514 - C89093 * C8517) * C263 +
             (C13261 * C8996 - C89093 * C8999) * C89247) *
                C13260) *
               C89217) *
              C89137 * C2628)) /
            (p * q * std::sqrt(p + q));
    d2eezy[63] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C263 +
             (C89236 * C627 - C180 * C565) * C89247) *
                C89 +
            ((C194 - C195) * C263 + (C634 - C635) * C89247) * C90 +
            C648 * C91) *
               C89308 +
           (((C180 * C1724 - C89236 * C1828) * C263 +
             (C180 * C2330 - C89236 * C2420) * C89247) *
                C89 +
            ((C1845 - C1846) * C263 + (C2429 - C2430) * C89247) * C90 +
            C3916 * C91) *
               C89217) *
              C89137 * C89333 +
          ((((C195 - C194) * C263 + (C635 - C634) * C89247) * C89 +
            ((C199 - C198) * C263 + (C638 - C637) * C89247) * C90 +
            C649 * C91) *
               C89308 +
           (((C1846 - C1845) * C263 + (C2430 - C2429) * C89247) * C89 +
            ((C1850 - C1849) * C263 + (C2432 - C2431) * C89247) * C90 +
            ((C3435 - C3436) * C263 + (C3913 - C3914) * C89247) * C91) *
               C89217) *
              C89137 * C89334 +
          ((C648 * C89 + ((C203 - C202) * C263 + (C641 - C640) * C89247) * C90 +
            ((C206 - C207) * C263 + (C642 - C643) * C89247) * C91) *
               C89308 +
           (C3916 * C89 +
            ((C3436 - C3435) * C263 + (C3914 - C3913) * C89247) * C90 +
            ((C180 * C3352 - C89236 * C3430) * C263 +
             (C180 * C3833 - C89236 * C3909) * C89247) *
                C91) *
               C89217) *
              C89137 * C2628)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
             C13260 * C926 - C13315 * C820) *
                C263 +
            (C13258 * C627 - C13313 * C565 + C13259 * C1515 - C13314 * C1425 +
             C13260 * C1518 - C13315 * C1428) *
                C89247) *
               C89093 * C89308 +
           ((C13313 * C1724 - C13258 * C1828 + C13314 * C4097 - C13259 * C4211 +
             C13315 * C8516 - C13260 * C8600) *
                C263 +
            (C13313 * C2330 - C13258 * C2420 + C13314 * C4767 - C13259 * C4873 +
             C13315 * C8994 - C13260 * C9074) *
                C89247) *
               C89093 * C89217) *
              C89137 * C89333 +
          (((C13313 * C107 - C13258 * C182 + C13314 * C818 - C13259 * C924 +
             C13315 * C821 - C13260 * C927) *
                C263 +
            (C13313 * C566 - C13258 * C628 + C13314 * C1426 - C13259 * C1516 +
             C13315 * C1429 - C13260 * C1519) *
                C89247) *
               C89093 * C89308 +
           ((C13258 * C1829 - C13313 * C1723 + C13259 * C4212 - C13314 * C4098 +
             C13260 * C8601 - C13315 * C8515) *
                C263 +
            (C13258 * C2421 - C13313 * C2331 + C13259 * C4874 - C13314 * C4768 +
             C13260 * C9075 - C13315 * C8995) *
                C89247) *
               C89093 * C89217) *
              C89137 * C89334 +
          (((C13258 * C183 - C13313 * C108 + C13259 * C925 - C13314 * C817 +
             C13260 * C928 - C13315 * C822) *
                C263 +
            (C13258 * C629 - C13313 * C567 + C13259 * C1517 - C13314 * C1427 +
             C13260 * C1520 - C13315 * C1430) *
                C89247) *
               C89093 * C89308 +
           ((C13313 * C1722 - C13258 * C1830 + C13314 * C4099 - C13259 * C4213 +
             C13315 * C8514 - C13260 * C8602) *
                C263 +
            (C13313 * C2332 - C13258 * C2422 + C13314 * C4769 - C13259 * C4875 +
             C13315 * C8996 - C13260 * C9076) *
                C89247) *
               C89093 * C89217) *
              C89137 * C2628)) /
            (p * q * std::sqrt(p + q));
    d2eezz[63] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C89236 *
                C89 +
            C735 * C90 + C736 * C91) *
               C89308 -
           (C2547 * C91 + C2548 * C90 +
            (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
                C89236 * C89) *
               C89217) *
              C89137 * C89333 +
          ((C2548 * C89 + C2547 * C90 + C3999 * C91) * C89217 -
           (C737 * C91 + C736 * C90 + C735 * C89) * C89308) *
              C89137 * C89334 +
          ((C736 * C89 + C737 * C90 + C738 * C91) * C89308 -
           ((C263 * C3512 - C699 * C3352 - C263 * C3833 + C89247 * C3990) *
                C89236 * C91 +
            C3999 * C90 + C2547 * C89) *
               C89217) *
              C89137 * C2628)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C13258 +
            C14524 * C13259 + C14525 * C13260) *
               C89093 * C89308 -
           ((C263 * C8680 - C699 * C8516 - C263 * C8994 + C89247 * C9153) *
                C13260 +
            (C263 * C4325 - C699 * C4097 - C263 * C4767 + C89247 * C4979) *
                C13259 +
            (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
                C13258) *
               C89093 * C89217) *
              C89137 * C89333 +
          ((C2544 * C13258 + C4996 * C13259 +
            (C263 * C8681 - C699 * C8515 - C263 * C8995 + C89247 * C9152) *
                C13260) *
               C89093 * C89217 -
           (C1640 * C13260 + C1639 * C13259 + C731 * C13258) * C89093 *
               C89308) *
              C89137 * C89334 +
          ((C732 * C13258 + C1638 * C13259 + C1641 * C13260) * C89093 * C89308 -
           ((C263 * C8682 - C699 * C8514 - C263 * C8996 + C89247 * C9151) *
                C13260 +
            C4997 * C13259 + C2543 * C13258) *
               C89093 * C89217) *
              C89137 * C2628)) /
            (p * q * std::sqrt(p + q));
    d2eexx[64] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((C100 * C112 - C101 * C106 - C100 * C113 + C89 * C124 + C102 * C114 -
           C103 * C107 - C102 * C115 + C90 * C125 + C104 * C116 - C105 * C108 -
           C104 * C117 + C91 * C126) *
              C89247 * C89236 * C89153 * C89137 * C96 -
          (C104 * C118 - C105 * C109 - C104 * C119 + C91 * C127 + C102 * C116 -
           C103 * C108 - C102 * C117 + C90 * C126 + C100 * C114 - C101 * C107 -
           C100 * C115 + C89 * C125) *
              C89247 * C89236 * C89153 * C89137 * C97 +
          (C100 * C116 - C101 * C108 - C100 * C117 + C89 * C126 + C102 * C118 -
           C103 * C109 - C102 * C119 + C90 * C127 + C104 * C120 - C105 * C110 -
           C104 * C121 + C91 * C128) *
              C89247 * C89236 * C89153 * C89137 * C98 -
          (C104 * C122 - C105 * C111 - C104 * C123 + C91 * C129 + C102 * C120 -
           C103 * C110 - C102 * C121 + C90 * C128 + C100 * C118 - C101 * C109 -
           C100 * C119 + C89 * C127) *
              C89247 * C89236 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C112 - C101 * C106 - C100 * C113 + C89 * C124 + C102 * C114 -
            C103 * C107 - C102 * C115 + C90 * C125 + C104 * C116 - C105 * C108 -
            C104 * C117 + C91 * C126) *
               C89247 * C89236 * C89153 * C812 -
           (C104 * C825 - C105 * C817 - C104 * C826 + C91 * C841 + C102 * C827 -
            C103 * C818 - C102 * C828 + C90 * C842 + C100 * C829 - C101 * C819 -
            C100 * C830 + C89 * C843) *
               C89247 * C89236 * C89153 * C813 +
           (C100 * C831 - C101 * C820 - C100 * C832 + C89 * C844 + C102 * C833 -
            C103 * C821 - C102 * C834 + C90 * C845 + C104 * C835 - C105 * C822 -
            C104 * C836 + C91 * C846) *
               C89247 * C89236 * C89153 * C814) *
              C815 +
          ((C100 * C827 - C101 * C818 - C100 * C828 + C89 * C842 + C102 * C825 -
            C103 * C817 - C102 * C826 + C90 * C841 + C104 * C837 - C105 * C823 -
            C104 * C838 + C91 * C847) *
               C89247 * C89236 * C89153 * C813 -
           (C104 * C118 - C105 * C109 - C104 * C119 + C91 * C127 + C102 * C116 -
            C103 * C108 - C102 * C117 + C90 * C126 + C100 * C114 - C101 * C107 -
            C100 * C115 + C89 * C125) *
               C89247 * C89236 * C89153 * C812 -
           (C104 * C839 - C105 * C824 - C104 * C840 + C91 * C848 + C102 * C835 -
            C103 * C822 - C102 * C836 + C90 * C846 + C100 * C833 - C101 * C821 -
            C100 * C834 + C89 * C845) *
               C89247 * C89236 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
               C89247 * C13258 +
           (C13261 * C829 - C13262 * C819 - C13261 * C830 + C89093 * C843) *
               C89247 * C13259 +
           (C13261 * C831 - C13262 * C820 - C13261 * C832 + C89093 * C844) *
               C89247 * C13260) *
              C89153 * C89137 * C96 -
          ((C13261 * C833 - C13262 * C821 - C13261 * C834 + C89093 * C845) *
               C89247 * C13260 +
           (C13261 * C827 - C13262 * C818 - C13261 * C828 + C89093 * C842) *
               C89247 * C13259 +
           (C13261 * C114 - C13262 * C107 - C13261 * C115 + C89093 * C125) *
               C89247 * C13258) *
              C89153 * C89137 * C97 +
          ((C13261 * C116 - C13262 * C108 - C13261 * C117 + C89093 * C126) *
               C89247 * C13258 +
           (C13261 * C825 - C13262 * C817 - C13261 * C826 + C89093 * C841) *
               C89247 * C13259 +
           (C13261 * C835 - C13262 * C822 - C13261 * C836 + C89093 * C846) *
               C89247 * C13260) *
              C89153 * C89137 * C98 -
          ((C13261 * C839 - C13262 * C824 - C13261 * C840 + C89093 * C848) *
               C89247 * C13260 +
           (C13261 * C837 - C13262 * C823 - C13261 * C838 + C89093 * C847) *
               C89247 * C13259 +
           (C13261 * C118 - C13262 * C109 - C13261 * C119 + C89093 * C127) *
               C89247 * C13258) *
              C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                C89247 * C13258 +
            C13794 * C13259 + C13795 * C13260) *
               C89153 * C812 -
           (C13796 * C13260 + C13795 * C13259 + C13794 * C13258) * C89153 *
               C813 +
           (C13795 * C13258 + C13796 * C13259 +
            (C13261 * C13745 - C13262 * C13743 - C13261 * C13746 +
             C89093 * C13749) *
                C89247 * C13260) *
               C89153 * C814) *
              C815 +
          ((C13797 * C13258 + C13798 * C13259 + C13799 * C13260) * C89153 *
               C813 -
           (C13798 * C13260 + C13797 * C13259 +
            (C13261 * C114 - C13262 * C107 - C13261 * C115 + C89093 * C125) *
                C89247 * C13258) *
               C89153 * C812 -
           ((C13261 * C13747 - C13262 * C13744 - C13261 * C13748 +
             C89093 * C13750) *
                C89247 * C13260 +
            C13799 * C13259 + C13798 * C13258) *
               C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eexy[64] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C89236 * C181 - C180 * C106) * C100 +
           (C89236 * C187 - C180 * C113) * C89 + (C194 - C195) * C102 +
           (C196 - C197) * C90 + C210 * C104 + C211 * C91) *
              C89247 * C89153 * C89137 * C96 +
          ((C195 - C194) * C100 + (C197 - C196) * C89 + (C199 - C198) * C102 +
           (C201 - C200) * C90 + C212 * C104 + C213 * C91) *
              C89247 * C89153 * C89137 * C97 +
          (C210 * C100 + C211 * C89 + (C203 - C202) * C102 +
           (C205 - C204) * C90 + (C206 - C207) * C104 + (C208 - C209) * C91) *
              C89247 * C89153 * C89137 * C98 +
          (C212 * C100 + C213 * C89 + (C207 - C206) * C102 +
           (C209 - C208) * C90 + (C180 * C111 - C89236 * C186) * C104 +
           (C180 * C123 - C89236 * C192) * C91) *
              C89247 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C89236 * C181 - C180 * C106) * C100 +
            (C89236 * C187 - C180 * C113) * C89 + (C194 - C195) * C102 +
            (C196 - C197) * C90 + C210 * C104 + C211 * C91) *
               C89247 * C89153 * C812 +
           ((C180 * C819 - C89236 * C923) * C100 +
            (C180 * C830 - C89236 * C931) * C89 + (C940 - C941) * C102 +
            (C942 - C943) * C90 + (C944 - C945) * C104 + (C946 - C947) * C91) *
               C89247 * C89153 * C813 +
           ((C89236 * C926 - C180 * C820) * C100 +
            (C89236 * C934 - C180 * C832) * C89 + (C948 - C949) * C102 +
            (C950 - C951) * C90 + (C952 - C953) * C104 + (C954 - C955) * C91) *
               C89247 * C89153 * C814) *
              C815 +
          (((C195 - C194) * C100 + (C197 - C196) * C89 + (C199 - C198) * C102 +
            (C201 - C200) * C90 + C212 * C104 + C213 * C91) *
               C89247 * C89153 * C812 +
           ((C941 - C940) * C100 + (C943 - C942) * C89 + (C945 - C944) * C102 +
            (C947 - C946) * C90 + (C89236 * C929 - C180 * C823) * C104 +
            (C89236 * C937 - C180 * C838) * C91) *
               C89247 * C89153 * C813 +
           ((C949 - C948) * C100 + (C951 - C950) * C89 + (C953 - C952) * C102 +
            (C955 - C954) * C90 + (C180 * C824 - C89236 * C930) * C104 +
            (C180 * C840 - C89236 * C938) * C91) *
               C89247 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
            C13260 * C926 - C13315 * C820) *
               C13261 +
           (C13258 * C187 - C13313 * C113 + C13259 * C931 - C13314 * C830 +
            C13260 * C934 - C13315 * C832) *
               C89093) *
              C89247 * C89153 * C89137 * C96 +
          ((C13313 * C107 - C13258 * C182 + C13314 * C818 - C13259 * C924 +
            C13315 * C821 - C13260 * C927) *
               C13261 +
           (C13313 * C115 - C13258 * C188 + C13314 * C828 - C13259 * C932 +
            C13315 * C834 - C13260 * C935) *
               C89093) *
              C89247 * C89153 * C89137 * C97 +
          ((C13258 * C183 - C13313 * C108 + C13259 * C925 - C13314 * C817 +
            C13260 * C928 - C13315 * C822) *
               C13261 +
           (C13258 * C189 - C13313 * C117 + C13259 * C933 - C13314 * C826 +
            C13260 * C936 - C13315 * C836) *
               C89093) *
              C89247 * C89153 * C89137 * C98 +
          ((C13313 * C109 - C13258 * C184 + C13314 * C823 - C13259 * C929 +
            C13315 * C824 - C13260 * C930) *
               C13261 +
           (C13313 * C119 - C13258 * C190 + C13314 * C838 - C13259 * C937 +
            C13315 * C840 - C13260 * C938) *
               C89093) *
              C89247 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
             C13260 * C926 - C13315 * C820) *
                C13261 +
            (C13258 * C187 - C13313 * C113 + C13259 * C931 - C13314 * C830 +
             C13260 * C934 - C13315 * C832) *
                C89093) *
               C89247 * C89153 * C812 +
           ((C13313 * C819 - C13258 * C923 + C13314 * C820 - C13259 * C926 +
             C13315 * C5727 - C13260 * C5787) *
                C13261 +
            (C13313 * C830 - C13258 * C931 + C13314 * C832 - C13259 * C934 +
             C13315 * C5733 - C13260 * C5790) *
                C89093) *
               C89247 * C89153 * C813 +
           ((C13258 * C926 - C13313 * C820 + C13259 * C5787 - C13314 * C5727 +
             C13260 * C13873 - C13315 * C13743) *
                C13261 +
            (C13258 * C934 - C13313 * C832 + C13259 * C5790 - C13314 * C5733 +
             C13260 * C13875 - C13315 * C13746) *
                C89093) *
               C89247 * C89153 * C814) *
              C815 +
          (((C13313 * C107 - C13258 * C182 + C13314 * C818 - C13259 * C924 +
             C13315 * C821 - C13260 * C927) *
                C13261 +
            (C13313 * C115 - C13258 * C188 + C13314 * C828 - C13259 * C932 +
             C13315 * C834 - C13260 * C935) *
                C89093) *
               C89247 * C89153 * C812 +
           ((C13258 * C924 - C13313 * C818 + C13259 * C927 - C13314 * C821 +
             C13260 * C5788 - C13315 * C5726) *
                C13261 +
            (C13258 * C932 - C13313 * C828 + C13259 * C935 - C13314 * C834 +
             C13260 * C5791 - C13315 * C5731) *
                C89093) *
               C89247 * C89153 * C813 +
           ((C13313 * C821 - C13258 * C927 + C13314 * C5726 - C13259 * C5788 +
             C13315 * C13744 - C13260 * C13874) *
                C13261 +
            (C13313 * C834 - C13258 * C935 + C13314 * C5731 - C13259 * C5791 +
             C13315 * C13748 - C13260 * C13876) *
                C89093) *
               C89247 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eexz[64] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C89247 * C264 - C263 * C106) * C100 +
           (C89247 * C270 - C263 * C113) * C89 + (C277 - C278) * C102 +
           (C279 - C280) * C90 + C293 * C104 + C294 * C91) *
              C89236 * C89153 * C89137 * C96 +
          ((C278 - C277) * C100 + (C280 - C279) * C89 + (C282 - C281) * C102 +
           (C284 - C283) * C90 + C295 * C104 + C296 * C91) *
              C89236 * C89153 * C89137 * C97 +
          (C293 * C100 + C294 * C89 + (C286 - C285) * C102 +
           (C288 - C287) * C90 + (C289 - C290) * C104 + (C291 - C292) * C91) *
              C89236 * C89153 * C89137 * C98 +
          (C295 * C100 + C296 * C89 + (C290 - C289) * C102 +
           (C292 - C291) * C90 + (C263 * C111 - C89247 * C269) * C104 +
           (C263 * C123 - C89247 * C275) * C91) *
              C89236 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C100 +
            (C89247 * C270 - C263 * C113) * C89 + (C277 - C278) * C102 +
            (C279 - C280) * C90 + C293 * C104 + C294 * C91) *
               C89236 * C89153 * C812 +
           ((C263 * C819 - C89247 * C1029) * C100 +
            (C263 * C830 - C89247 * C1037) * C89 + (C1046 - C1047) * C102 +
            (C1048 - C1049) * C90 + (C1050 - C1051) * C104 +
            (C1052 - C1053) * C91) *
               C89236 * C89153 * C813 +
           ((C89247 * C1032 - C263 * C820) * C100 +
            (C89247 * C1040 - C263 * C832) * C89 + (C1054 - C1055) * C102 +
            (C1056 - C1057) * C90 + (C1058 - C1059) * C104 +
            (C1060 - C1061) * C91) *
               C89236 * C89153 * C814) *
              C815 +
          (((C278 - C277) * C100 + (C280 - C279) * C89 + (C282 - C281) * C102 +
            (C284 - C283) * C90 + C295 * C104 + C296 * C91) *
               C89236 * C89153 * C812 +
           ((C1047 - C1046) * C100 + (C1049 - C1048) * C89 +
            (C1051 - C1050) * C102 + (C1053 - C1052) * C90 +
            (C89247 * C1035 - C263 * C823) * C104 +
            (C89247 * C1043 - C263 * C838) * C91) *
               C89236 * C89153 * C813 +
           ((C1055 - C1054) * C100 + (C1057 - C1056) * C89 +
            (C1059 - C1058) * C102 + (C1061 - C1060) * C90 +
            (C263 * C824 - C89247 * C1036) * C104 +
            (C263 * C840 - C89247 * C1044) * C91) *
               C89236 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C13261 +
            (C89247 * C270 - C263 * C113) * C89093) *
               C13258 +
           ((C89247 * C1029 - C263 * C819) * C13261 +
            (C89247 * C1037 - C263 * C830) * C89093) *
               C13259 +
           ((C89247 * C1032 - C263 * C820) * C13261 +
            (C89247 * C1040 - C263 * C832) * C89093) *
               C13260) *
              C89153 * C89137 * C96 +
          (((C278 - C277) * C13261 + (C280 - C279) * C89093) * C13258 +
           ((C1046 - C1047) * C13261 + (C1048 - C1049) * C89093) * C13259 +
           ((C1055 - C1054) * C13261 + (C1057 - C1056) * C89093) * C13260) *
              C89153 * C89137 * C97 +
          ((C293 * C13261 + C294 * C89093) * C13258 +
           ((C1051 - C1050) * C13261 + (C1053 - C1052) * C89093) * C13259 +
           ((C1058 - C1059) * C13261 + (C1060 - C1061) * C89093) * C13260) *
              C89153 * C89137 * C98 +
          ((C295 * C13261 + C296 * C89093) * C13258 +
           ((C2795 - C2794) * C13261 + (C2797 - C2796) * C89093) * C13259 +
           ((C263 * C824 - C89247 * C1036) * C13261 +
            (C263 * C840 - C89247 * C1044) * C89093) *
               C13260) *
              C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C13261 +
             (C89247 * C270 - C263 * C113) * C89093) *
                C13258 +
            ((C13956 - C13957) * C13261 + (C13958 - C13959) * C89093) * C13259 +
            C13981 * C13260) *
               C89153 * C812 +
           (((C13957 - C13956) * C13261 + (C13959 - C13958) * C89093) * C13258 +
            ((C13961 - C13960) * C13261 + (C13963 - C13962) * C89093) * C13259 +
            ((C13964 - C13965) * C13261 + (C13966 - C13967) * C89093) *
                C13260) *
               C89153 * C813 +
           (C13981 * C13258 +
            ((C13965 - C13964) * C13261 + (C13967 - C13966) * C89093) * C13259 +
            ((C89247 * C13951 - C263 * C13743) * C13261 +
             (C89247 * C13953 - C263 * C13746) * C89093) *
                C13260) *
               C89153 * C814) *
              C815 +
          ((((C278 - C277) * C13261 + (C280 - C279) * C89093) * C13258 +
            ((C1046 - C1047) * C13261 + (C1048 - C1049) * C89093) * C13259 +
            C13980 * C13260) *
               C89153 * C812 +
           (((C1047 - C1046) * C13261 + (C1049 - C1048) * C89093) * C13258 +
            ((C1054 - C1055) * C13261 + (C1056 - C1057) * C89093) * C13259 +
            ((C13970 - C13971) * C13261 + (C13972 - C13973) * C89093) *
                C13260) *
               C89153 * C813 +
           (C13980 * C13258 +
            ((C13971 - C13970) * C13261 + (C13973 - C13972) * C89093) * C13259 +
            ((C263 * C13744 - C89247 * C13952) * C13261 +
             (C263 * C13748 - C89247 * C13954) * C89093) *
                C13260) *
               C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[64] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   (((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 +
                      C91 * C116 - C104 * C108) *
                         C180 +
                     (C89 * C352 - C100 * C346 + C90 * C353 - C102 * C347 +
                      C91 * C354 - C104 * C348) *
                         C89236) *
                        C89247 * C89153 * C89137 * C96 +
                    ((C100 * C107 - C89 * C114 + C102 * C108 - C90 * C116 +
                      C104 * C109 - C91 * C118) *
                         C180 +
                     (C100 * C347 - C89 * C353 + C102 * C348 - C90 * C354 +
                      C104 * C349 - C91 * C355) *
                         C89236) *
                        C89247 * C89153 * C89137 * C97 +
                    ((C89 * C116 - C100 * C108 + C90 * C118 - C102 * C109 +
                      C91 * C120 - C104 * C110) *
                         C180 +
                     (C89 * C354 - C100 * C348 + C90 * C355 - C102 * C349 +
                      C91 * C356 - C104 * C350) *
                         C89236) *
                        C89247 * C89153 * C89137 * C98 +
                    ((C100 * C109 - C89 * C118 + C102 * C110 - C90 * C120 +
                      C104 * C111 - C91 * C122) *
                         C180 +
                     (C100 * C349 - C89 * C355 + C102 * C350 - C90 * C356 +
                      C104 * C351 - C91 * C357) *
                         C89236) *
                        C89247 * C89153 * C89137 * C99)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 +
                       C91 * C116 - C104 * C108) *
                          C180 +
                      (C89 * C352 - C100 * C346 + C90 * C353 - C102 * C347 +
                       C91 * C354 - C104 * C348) *
                          C89236) *
                         C89247 * C89153 * C812 +
                     ((C100 * C819 - C89 * C829 + C102 * C818 - C90 * C827 +
                       C104 * C817 - C91 * C825) *
                          C180 +
                      (C100 * C1135 - C89 * C1143 + C102 * C1136 - C90 * C1144 +
                       C104 * C1137 - C91 * C1145) *
                          C89236) *
                         C89247 * C89153 * C813 +
                     ((C89 * C831 - C100 * C820 + C90 * C833 - C102 * C821 +
                       C91 * C835 - C104 * C822) *
                          C180 +
                      (C89 * C1146 - C100 * C1138 + C90 * C1147 - C102 * C1139 +
                       C91 * C1148 - C104 * C1140) *
                          C89236) *
                         C89247 * C89153 * C814) *
                        C815 +
                    (((C100 * C107 - C89 * C114 + C102 * C108 - C90 * C116 +
                       C104 * C109 - C91 * C118) *
                          C180 +
                      (C100 * C347 - C89 * C353 + C102 * C348 - C90 * C354 +
                       C104 * C349 - C91 * C355) *
                          C89236) *
                         C89247 * C89153 * C812 +
                     ((C89 * C827 - C100 * C818 + C90 * C825 - C102 * C817 +
                       C91 * C837 - C104 * C823) *
                          C180 +
                      (C89 * C1144 - C100 * C1136 + C90 * C1145 - C102 * C1137 +
                       C91 * C1149 - C104 * C1141) *
                          C89236) *
                         C89247 * C89153 * C813 +
                     ((C100 * C821 - C89 * C833 + C102 * C822 - C90 * C835 +
                       C104 * C824 - C91 * C839) *
                          C180 +
                      (C100 * C1139 - C89 * C1147 + C102 * C1140 - C90 * C1148 +
                       C104 * C1142 - C91 * C1150) *
                          C89236) *
                         C89247 * C89153 * C814) *
                        C89124)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   (((C89093 * C112 - C13261 * C106) * C13313 +
                     (C89093 * C352 - C13261 * C346) * C13258 +
                     (C89093 * C829 - C13261 * C819) * C13314 +
                     (C89093 * C1143 - C13261 * C1135) * C13259 +
                     (C89093 * C831 - C13261 * C820) * C13315 +
                     (C89093 * C1146 - C13261 * C1138) * C13260) *
                        C89247 * C89153 * C89137 * C96 +
                    ((C13261 * C107 - C89093 * C114) * C13313 +
                     (C13261 * C347 - C89093 * C353) * C13258 +
                     (C13261 * C818 - C89093 * C827) * C13314 +
                     (C13261 * C1136 - C89093 * C1144) * C13259 +
                     (C13261 * C821 - C89093 * C833) * C13315 +
                     (C13261 * C1139 - C89093 * C1147) * C13260) *
                        C89247 * C89153 * C89137 * C97 +
                    ((C89093 * C116 - C13261 * C108) * C13313 +
                     (C89093 * C354 - C13261 * C348) * C13258 +
                     (C89093 * C825 - C13261 * C817) * C13314 +
                     (C89093 * C1145 - C13261 * C1137) * C13259 +
                     (C89093 * C835 - C13261 * C822) * C13315 +
                     (C89093 * C1148 - C13261 * C1140) * C13260) *
                        C89247 * C89153 * C89137 * C98 +
                    ((C13261 * C109 - C89093 * C118) * C13313 +
                     (C13261 * C349 - C89093 * C355) * C13258 +
                     (C13261 * C823 - C89093 * C837) * C13314 +
                     (C13261 * C1141 - C89093 * C1149) * C13259 +
                     (C13261 * C824 - C89093 * C839) * C13315 +
                     (C13261 * C1142 - C89093 * C1150) * C13260) *
                        C89247 * C89153 * C89137 * C99)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C89093 * C112 - C13261 * C106) * C13313 +
                      (C89093 * C352 - C13261 * C346) * C13258 +
                      (C14060 - C14061) * C13314 + (C14062 - C14063) * C13259 +
                      C14084 * C13315 + C14085 * C13260) *
                         C89247 * C89153 * C812 +
                     ((C14061 - C14060) * C13313 + (C14063 - C14062) * C13258 +
                      (C14065 - C14064) * C13314 + (C14067 - C14066) * C13259 +
                      (C14068 - C14069) * C13315 + (C14070 - C14071) * C13260) *
                         C89247 * C89153 * C813 +
                     (C14084 * C13313 + C14085 * C13258 +
                      (C14069 - C14068) * C13314 + (C14071 - C14070) * C13259 +
                      (C89093 * C13745 - C13261 * C13743) * C13315 +
                      (C89093 * C14057 - C13261 * C14055) * C13260) *
                         C89247 * C89153 * C814) *
                        C815 +
                    (((C13261 * C107 - C89093 * C114) * C13313 +
                      (C13261 * C347 - C89093 * C353) * C13258 +
                      (C14072 - C14073) * C13314 + (C14074 - C14075) * C13259 +
                      C14086 * C13315 + C14087 * C13260) *
                         C89247 * C89153 * C812 +
                     ((C14073 - C14072) * C13313 + (C14075 - C14074) * C13258 +
                      (C14077 - C14076) * C13314 + (C14079 - C14078) * C13259 +
                      (C14080 - C14081) * C13315 + (C14082 - C14083) * C13260) *
                         C89247 * C89153 * C813 +
                     (C14086 * C13313 + C14087 * C13258 +
                      (C14081 - C14080) * C13314 + (C14083 - C14082) * C13259 +
                      (C13261 * C13744 - C89093 * C13747) * C13315 +
                      (C13261 * C14056 - C89093 * C14058) * C13260) *
                         C89247 * C89153 * C814) *
                        C89124)) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[64] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C89 +
           C440 * C90 + C441 * C91) *
              C89247 * C89153 * C89137 * C96 -
          (C442 * C91 + C441 * C90 + C440 * C89) * C89247 * C89153 * C89137 *
              C97 +
          (C441 * C89 + C442 * C90 + C443 * C91) * C89247 * C89153 * C89137 *
              C98 -
          ((C180 * C186 - C408 * C111 - C180 * C351 + C89236 * C414) * C91 +
           C443 * C90 + C442 * C89) *
              C89247 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C89 +
            C440 * C90 + C441 * C91) *
               C89247 * C89153 * C812 -
           (C1258 * C91 + C1259 * C90 +
            (C180 * C923 - C408 * C819 - C180 * C1135 + C89236 * C1227) * C89) *
               C89247 * C89153 * C813 +
           ((C180 * C926 - C408 * C820 - C180 * C1138 + C89236 * C1228) * C89 +
            C1260 * C90 + C1261 * C91) *
               C89247 * C89153 * C814) *
              C815 +
          ((C1259 * C89 + C1258 * C90 +
            (C180 * C929 - C408 * C823 - C180 * C1141 + C89236 * C1231) * C91) *
               C89247 * C89153 * C813 -
           (C442 * C91 + C441 * C90 + C440 * C89) * C89247 * C89153 * C812 -
           ((C180 * C930 - C408 * C824 - C180 * C1142 + C89236 * C1232) * C91 +
            C1261 * C90 + C1260 * C89) *
               C89247 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((C13313 * C181 - C13466 * C106 - C13313 * C346 + C13258 * C409 +
           C13314 * C923 - C13467 * C819 - C13314 * C1135 + C13259 * C1227 +
           C13315 * C926 - C13468 * C820 - C13315 * C1138 + C13260 * C1228) *
              C89093 * C89247 * C89153 * C89137 * C96 -
          (C13315 * C927 - C13468 * C821 - C13315 * C1139 + C13260 * C1229 +
           C13314 * C924 - C13467 * C818 - C13314 * C1136 + C13259 * C1226 +
           C13313 * C182 - C13466 * C107 - C13313 * C347 + C13258 * C410) *
              C89093 * C89247 * C89153 * C89137 * C97 +
          (C13313 * C183 - C13466 * C108 - C13313 * C348 + C13258 * C411 +
           C13314 * C925 - C13467 * C817 - C13314 * C1137 + C13259 * C1225 +
           C13315 * C928 - C13468 * C822 - C13315 * C1140 + C13260 * C1230) *
              C89093 * C89247 * C89153 * C89137 * C98 -
          (C13315 * C930 - C13468 * C824 - C13315 * C1142 + C13260 * C1232 +
           C13314 * C929 - C13467 * C823 - C13314 * C1141 + C13259 * C1231 +
           C13313 * C184 - C13466 * C109 - C13313 * C349 + C13258 * C412) *
              C89093 * C89247 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13313 * C181 - C13466 * C106 - C13313 * C346 + C13258 * C409 +
            C13314 * C923 - C13467 * C819 - C13314 * C1135 + C13259 * C1227 +
            C13315 * C926 - C13468 * C820 - C13315 * C1138 + C13260 * C1228) *
               C89093 * C89247 * C89153 * C812 -
           (C13315 * C5787 - C13468 * C5727 - C13315 * C5899 + C13260 * C5957 +
            C13314 * C926 - C13467 * C820 - C13314 * C1138 + C13259 * C1228 +
            C13313 * C923 - C13466 * C819 - C13313 * C1135 + C13258 * C1227) *
               C89093 * C89247 * C89153 * C813 +
           (C13313 * C926 - C13466 * C820 - C13313 * C1138 + C13258 * C1228 +
            C13314 * C5787 - C13467 * C5727 - C13314 * C5899 + C13259 * C5957 +
            C13315 * C13873 - C13468 * C13743 - C13315 * C14055 +
            C13260 * C14161) *
               C89093 * C89247 * C89153 * C814) *
              C815 +
          ((C13313 * C924 - C13466 * C818 - C13313 * C1136 + C13258 * C1226 +
            C13314 * C927 - C13467 * C821 - C13314 * C1139 + C13259 * C1229 +
            C13315 * C5788 - C13468 * C5726 - C13315 * C5900 + C13260 * C5956) *
               C89093 * C89247 * C89153 * C813 -
           (C13315 * C927 - C13468 * C821 - C13315 * C1139 + C13260 * C1229 +
            C13314 * C924 - C13467 * C818 - C13314 * C1136 + C13259 * C1226 +
            C13313 * C182 - C13466 * C107 - C13313 * C347 + C13258 * C410) *
               C89093 * C89247 * C89153 * C812 -
           (C13315 * C13874 - C13468 * C13744 - C13315 * C14056 +
            C13260 * C14162 + C13314 * C5788 - C13467 * C5726 - C13314 * C5900 +
            C13259 * C5956 + C13313 * C927 - C13466 * C821 - C13313 * C1139 +
            C13258 * C1229) *
               C89093 * C89247 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[64] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C180 +
            (C89247 * C493 - C263 * C346) * C89236) *
               C89 +
           ((C277 - C278) * C180 + (C500 - C501) * C89236) * C90 + C514 * C91) *
              C89153 * C89137 * C96 +
          (((C278 - C277) * C180 + (C501 - C500) * C89236) * C89 +
           ((C282 - C281) * C180 + (C504 - C503) * C89236) * C90 + C515 * C91) *
              C89153 * C89137 * C97 +
          (C514 * C89 + ((C286 - C285) * C180 + (C507 - C506) * C89236) * C90 +
           ((C289 - C290) * C180 + (C508 - C509) * C89236) * C91) *
              C89153 * C89137 * C98 +
          (C515 * C89 + ((C290 - C289) * C180 + (C509 - C508) * C89236) * C90 +
           ((C263 * C111 - C89247 * C269) * C180 +
            (C263 * C351 - C89247 * C498) * C89236) *
               C91) *
              C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C180 +
             (C89247 * C493 - C263 * C346) * C89236) *
                C89 +
            ((C277 - C278) * C180 + (C500 - C501) * C89236) * C90 +
            C514 * C91) *
               C89153 * C812 +
           (((C263 * C819 - C89247 * C1029) * C180 +
             (C263 * C1135 - C89247 * C1335) * C89236) *
                C89 +
            ((C1046 - C1047) * C180 + (C1344 - C1345) * C89236) * C90 +
            ((C1050 - C1051) * C180 + (C1346 - C1347) * C89236) * C91) *
               C89153 * C813 +
           (((C89247 * C1032 - C263 * C820) * C180 +
             (C89247 * C1338 - C263 * C1138) * C89236) *
                C89 +
            ((C1054 - C1055) * C180 + (C1348 - C1349) * C89236) * C90 +
            ((C1058 - C1059) * C180 + (C1350 - C1351) * C89236) * C91) *
               C89153 * C814) *
              C815 +
          ((((C278 - C277) * C180 + (C501 - C500) * C89236) * C89 +
            ((C282 - C281) * C180 + (C504 - C503) * C89236) * C90 +
            C515 * C91) *
               C89153 * C812 +
           (((C1047 - C1046) * C180 + (C1345 - C1344) * C89236) * C89 +
            ((C1051 - C1050) * C180 + (C1347 - C1346) * C89236) * C90 +
            ((C89247 * C1035 - C263 * C823) * C180 +
             (C89247 * C1341 - C263 * C1141) * C89236) *
                C91) *
               C89153 * C813 +
           (((C1055 - C1054) * C180 + (C1349 - C1348) * C89236) * C89 +
            ((C1059 - C1058) * C180 + (C1351 - C1350) * C89236) * C90 +
            ((C263 * C824 - C89247 * C1036) * C180 +
             (C263 * C1142 - C89247 * C1342) * C89236) *
                C91) *
               C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C89247 * C264 - C263 * C106) * C13313 +
           (C89247 * C493 - C263 * C346) * C13258 +
           (C89247 * C1029 - C263 * C819) * C13314 +
           (C89247 * C1335 - C263 * C1135) * C13259 +
           (C89247 * C1032 - C263 * C820) * C13315 +
           (C89247 * C1338 - C263 * C1138) * C13260) *
              C89093 * C89153 * C89137 * C96 +
          ((C278 - C277) * C13313 + (C501 - C500) * C13258 +
           (C1046 - C1047) * C13314 + (C1344 - C1345) * C13259 +
           (C1055 - C1054) * C13315 + (C1349 - C1348) * C13260) *
              C89093 * C89153 * C89137 * C97 +
          (C293 * C13313 + C510 * C13258 + (C1051 - C1050) * C13314 +
           (C1347 - C1346) * C13259 + (C1058 - C1059) * C13315 +
           (C1350 - C1351) * C13260) *
              C89093 * C89153 * C89137 * C98 +
          (C295 * C13313 + C511 * C13258 + (C2795 - C2794) * C13314 +
           (C3034 - C3033) * C13259 + (C263 * C824 - C89247 * C1036) * C13315 +
           (C263 * C1142 - C89247 * C1342) * C13260) *
              C89093 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C13313 +
            (C89247 * C493 - C263 * C346) * C13258 +
            (C13956 - C13957) * C13314 + (C14240 - C14241) * C13259 +
            C13974 * C13315 + C14249 * C13260) *
               C89093 * C89153 * C812 +
           ((C13957 - C13956) * C13313 + (C14241 - C14240) * C13258 +
            (C13961 - C13960) * C13314 + (C14243 - C14242) * C13259 +
            (C13964 - C13965) * C13315 + (C14244 - C14245) * C13260) *
               C89093 * C89153 * C813 +
           (C13974 * C13313 + C14249 * C13258 + (C13965 - C13964) * C13314 +
            (C14245 - C14244) * C13259 +
            (C89247 * C13951 - C263 * C13743) * C13315 +
            (C89247 * C14237 - C263 * C14055) * C13260) *
               C89093 * C89153 * C814) *
              C815 +
          (((C278 - C277) * C13313 + (C501 - C500) * C13258 +
            (C1046 - C1047) * C13314 + (C1344 - C1345) * C13259 +
            C13968 * C13315 + C14246 * C13260) *
               C89093 * C89153 * C812 +
           ((C1047 - C1046) * C13313 + (C1345 - C1344) * C13258 +
            (C1054 - C1055) * C13314 + (C1348 - C1349) * C13259 +
            (C13970 - C13971) * C13315 + (C14247 - C14248) * C13260) *
               C89093 * C89153 * C813 +
           (C13968 * C13313 + C14246 * C13258 + (C13971 - C13970) * C13314 +
            (C14248 - C14247) * C13259 +
            (C263 * C13744 - C89247 * C13952) * C13315 +
            (C263 * C14056 - C89247 * C14238) * C13260) *
               C89093 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eezx[64] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 + C91 * C116 -
            C104 * C108) *
               C263 +
           (C89 * C571 - C100 * C565 + C90 * C572 - C102 * C566 + C91 * C573 -
            C104 * C567) *
               C89247) *
              C89236 * C89153 * C89137 * C96 +
          ((C100 * C107 - C89 * C114 + C102 * C108 - C90 * C116 + C104 * C109 -
            C91 * C118) *
               C263 +
           (C100 * C566 - C89 * C572 + C102 * C567 - C90 * C573 + C104 * C568 -
            C91 * C574) *
               C89247) *
              C89236 * C89153 * C89137 * C97 +
          ((C89 * C116 - C100 * C108 + C90 * C118 - C102 * C109 + C91 * C120 -
            C104 * C110) *
               C263 +
           (C89 * C573 - C100 * C567 + C90 * C574 - C102 * C568 + C91 * C575 -
            C104 * C569) *
               C89247) *
              C89236 * C89153 * C89137 * C98 +
          ((C100 * C109 - C89 * C118 + C102 * C110 - C90 * C120 + C104 * C111 -
            C91 * C122) *
               C263 +
           (C100 * C568 - C89 * C574 + C102 * C569 - C90 * C575 + C104 * C570 -
            C91 * C576) *
               C89247) *
              C89236 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 + C91 * C116 -
             C104 * C108) *
                C263 +
            (C89 * C571 - C100 * C565 + C90 * C572 - C102 * C566 + C91 * C573 -
             C104 * C567) *
                C89247) *
               C89236 * C89153 * C812 +
           ((C100 * C819 - C89 * C829 + C102 * C818 - C90 * C827 + C104 * C817 -
             C91 * C825) *
                C263 +
            (C100 * C1425 - C89 * C1433 + C102 * C1426 - C90 * C1434 +
             C104 * C1427 - C91 * C1435) *
                C89247) *
               C89236 * C89153 * C813 +
           ((C89 * C831 - C100 * C820 + C90 * C833 - C102 * C821 + C91 * C835 -
             C104 * C822) *
                C263 +
            (C89 * C1436 - C100 * C1428 + C90 * C1437 - C102 * C1429 +
             C91 * C1438 - C104 * C1430) *
                C89247) *
               C89236 * C89153 * C814) *
              C815 +
          (((C100 * C107 - C89 * C114 + C102 * C108 - C90 * C116 + C104 * C109 -
             C91 * C118) *
                C263 +
            (C100 * C566 - C89 * C572 + C102 * C567 - C90 * C573 + C104 * C568 -
             C91 * C574) *
                C89247) *
               C89236 * C89153 * C812 +
           ((C89 * C827 - C100 * C818 + C90 * C825 - C102 * C817 + C91 * C837 -
             C104 * C823) *
                C263 +
            (C89 * C1434 - C100 * C1426 + C90 * C1435 - C102 * C1427 +
             C91 * C1439 - C104 * C1431) *
                C89247) *
               C89236 * C89153 * C813 +
           ((C100 * C821 - C89 * C833 + C102 * C822 - C90 * C835 + C104 * C824 -
             C91 * C839) *
                C263 +
            (C100 * C1429 - C89 * C1437 + C102 * C1430 - C90 * C1438 +
             C104 * C1432 - C91 * C1440) *
                C89247) *
               C89236 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C89093 * C112 - C13261 * C106) * C263 +
            (C89093 * C571 - C13261 * C565) * C89247) *
               C13258 +
           ((C89093 * C829 - C13261 * C819) * C263 +
            (C89093 * C1433 - C13261 * C1425) * C89247) *
               C13259 +
           ((C89093 * C831 - C13261 * C820) * C263 +
            (C89093 * C1436 - C13261 * C1428) * C89247) *
               C13260) *
              C89153 * C89137 * C96 +
          (((C13261 * C107 - C89093 * C114) * C263 +
            (C13261 * C566 - C89093 * C572) * C89247) *
               C13258 +
           ((C13261 * C818 - C89093 * C827) * C263 +
            (C13261 * C1426 - C89093 * C1434) * C89247) *
               C13259 +
           ((C13261 * C821 - C89093 * C833) * C263 +
            (C13261 * C1429 - C89093 * C1437) * C89247) *
               C13260) *
              C89153 * C89137 * C97 +
          (((C89093 * C116 - C13261 * C108) * C263 +
            (C89093 * C573 - C13261 * C567) * C89247) *
               C13258 +
           ((C89093 * C825 - C13261 * C817) * C263 +
            (C89093 * C1435 - C13261 * C1427) * C89247) *
               C13259 +
           ((C89093 * C835 - C13261 * C822) * C263 +
            (C89093 * C1438 - C13261 * C1430) * C89247) *
               C13260) *
              C89153 * C89137 * C98 +
          (((C13261 * C109 - C89093 * C118) * C263 +
            (C13261 * C568 - C89093 * C574) * C89247) *
               C13258 +
           ((C13261 * C823 - C89093 * C837) * C263 +
            (C13261 * C1431 - C89093 * C1439) * C89247) *
               C13259 +
           ((C13261 * C824 - C89093 * C839) * C263 +
            (C13261 * C1432 - C89093 * C1440) * C89247) *
               C13260) *
              C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C263 +
             (C89093 * C571 - C13261 * C565) * C89247) *
                C13258 +
            ((C14060 - C14061) * C263 + (C14328 - C14329) * C89247) * C13259 +
            C14346 * C13260) *
               C89153 * C812 +
           (((C14061 - C14060) * C263 + (C14329 - C14328) * C89247) * C13258 +
            ((C14065 - C14064) * C263 + (C14332 - C14331) * C89247) * C13259 +
            ((C14068 - C14069) * C263 + (C14333 - C14334) * C89247) * C13260) *
               C89153 * C813 +
           (C14346 * C13258 +
            ((C14069 - C14068) * C263 + (C14334 - C14333) * C89247) * C13259 +
            ((C89093 * C13745 - C13261 * C13743) * C263 +
             (C89093 * C14325 - C13261 * C14323) * C89247) *
                C13260) *
               C89153 * C814) *
              C815 +
          ((((C13261 * C107 - C89093 * C114) * C263 +
             (C13261 * C566 - C89093 * C572) * C89247) *
                C13258 +
            ((C14072 - C14073) * C263 + (C14335 - C14336) * C89247) * C13259 +
            C14347 * C13260) *
               C89153 * C812 +
           (((C14073 - C14072) * C263 + (C14336 - C14335) * C89247) * C13258 +
            ((C14077 - C14076) * C263 + (C14339 - C14338) * C89247) * C13259 +
            ((C14080 - C14081) * C263 + (C14340 - C14341) * C89247) * C13260) *
               C89153 * C813 +
           (C14347 * C13258 +
            ((C14081 - C14080) * C263 + (C14341 - C14340) * C89247) * C13259 +
            ((C13261 * C13744 - C89093 * C13747) * C263 +
             (C13261 * C14324 - C89093 * C14326) * C89247) *
                C13260) *
               C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eezy[64] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C89236 * C181 - C180 * C106) * C263 +
            (C89236 * C627 - C180 * C565) * C89247) *
               C89 +
           ((C194 - C195) * C263 + (C634 - C635) * C89247) * C90 + C648 * C91) *
              C89153 * C89137 * C96 +
          (((C195 - C194) * C263 + (C635 - C634) * C89247) * C89 +
           ((C199 - C198) * C263 + (C638 - C637) * C89247) * C90 + C649 * C91) *
              C89153 * C89137 * C97 +
          (C648 * C89 + ((C203 - C202) * C263 + (C641 - C640) * C89247) * C90 +
           ((C206 - C207) * C263 + (C642 - C643) * C89247) * C91) *
              C89153 * C89137 * C98 +
          (C649 * C89 + ((C207 - C206) * C263 + (C643 - C642) * C89247) * C90 +
           ((C180 * C111 - C89236 * C186) * C263 +
            (C180 * C570 - C89236 * C632) * C89247) *
               C91) *
              C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C263 +
             (C89236 * C627 - C180 * C565) * C89247) *
                C89 +
            ((C194 - C195) * C263 + (C634 - C635) * C89247) * C90 +
            C648 * C91) *
               C89153 * C812 +
           (((C180 * C819 - C89236 * C923) * C263 +
             (C180 * C1425 - C89236 * C1515) * C89247) *
                C89 +
            ((C940 - C941) * C263 + (C1524 - C1525) * C89247) * C90 +
            ((C944 - C945) * C263 + (C1526 - C1527) * C89247) * C91) *
               C89153 * C813 +
           (((C89236 * C926 - C180 * C820) * C263 +
             (C89236 * C1518 - C180 * C1428) * C89247) *
                C89 +
            ((C948 - C949) * C263 + (C1528 - C1529) * C89247) * C90 +
            ((C952 - C953) * C263 + (C1530 - C1531) * C89247) * C91) *
               C89153 * C814) *
              C815 +
          ((((C195 - C194) * C263 + (C635 - C634) * C89247) * C89 +
            ((C199 - C198) * C263 + (C638 - C637) * C89247) * C90 +
            C649 * C91) *
               C89153 * C812 +
           (((C941 - C940) * C263 + (C1525 - C1524) * C89247) * C89 +
            ((C945 - C944) * C263 + (C1527 - C1526) * C89247) * C90 +
            ((C89236 * C929 - C180 * C823) * C263 +
             (C89236 * C1521 - C180 * C1431) * C89247) *
                C91) *
               C89153 * C813 +
           (((C949 - C948) * C263 + (C1529 - C1528) * C89247) * C89 +
            ((C953 - C952) * C263 + (C1531 - C1530) * C89247) * C90 +
            ((C180 * C824 - C89236 * C930) * C263 +
             (C180 * C1432 - C89236 * C1522) * C89247) *
                C91) *
               C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
            C13260 * C926 - C13315 * C820) *
               C263 +
           (C13258 * C627 - C13313 * C565 + C13259 * C1515 - C13314 * C1425 +
            C13260 * C1518 - C13315 * C1428) *
               C89247) *
              C89093 * C89153 * C89137 * C96 +
          ((C13313 * C107 - C13258 * C182 + C13314 * C818 - C13259 * C924 +
            C13315 * C821 - C13260 * C927) *
               C263 +
           (C13313 * C566 - C13258 * C628 + C13314 * C1426 - C13259 * C1516 +
            C13315 * C1429 - C13260 * C1519) *
               C89247) *
              C89093 * C89153 * C89137 * C97 +
          ((C13258 * C183 - C13313 * C108 + C13259 * C925 - C13314 * C817 +
            C13260 * C928 - C13315 * C822) *
               C263 +
           (C13258 * C629 - C13313 * C567 + C13259 * C1517 - C13314 * C1427 +
            C13260 * C1520 - C13315 * C1430) *
               C89247) *
              C89093 * C89153 * C89137 * C98 +
          ((C13313 * C109 - C13258 * C184 + C13314 * C823 - C13259 * C929 +
            C13315 * C824 - C13260 * C930) *
               C263 +
           (C13313 * C568 - C13258 * C630 + C13314 * C1431 - C13259 * C1521 +
            C13315 * C1432 - C13260 * C1522) *
               C89247) *
              C89093 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
             C13260 * C926 - C13315 * C820) *
                C263 +
            (C13258 * C627 - C13313 * C565 + C13259 * C1515 - C13314 * C1425 +
             C13260 * C1518 - C13315 * C1428) *
                C89247) *
               C89093 * C89153 * C812 +
           ((C13313 * C819 - C13258 * C923 + C13314 * C820 - C13259 * C926 +
             C13315 * C5727 - C13260 * C5787) *
                C263 +
            (C13313 * C1425 - C13258 * C1515 + C13314 * C1428 - C13259 * C1518 +
             C13315 * C6061 - C13260 * C6117) *
                C89247) *
               C89093 * C89153 * C813 +
           ((C13258 * C926 - C13313 * C820 + C13259 * C5787 - C13314 * C5727 +
             C13260 * C13873 - C13315 * C13743) *
                C263 +
            (C13258 * C1518 - C13313 * C1428 + C13259 * C6117 - C13314 * C6061 +
             C13260 * C14421 - C13315 * C14323) *
                C89247) *
               C89093 * C89153 * C814) *
              C815 +
          (((C13313 * C107 - C13258 * C182 + C13314 * C818 - C13259 * C924 +
             C13315 * C821 - C13260 * C927) *
                C263 +
            (C13313 * C566 - C13258 * C628 + C13314 * C1426 - C13259 * C1516 +
             C13315 * C1429 - C13260 * C1519) *
                C89247) *
               C89093 * C89153 * C812 +
           ((C13258 * C924 - C13313 * C818 + C13259 * C927 - C13314 * C821 +
             C13260 * C5788 - C13315 * C5726) *
                C263 +
            (C13258 * C1516 - C13313 * C1426 + C13259 * C1519 - C13314 * C1429 +
             C13260 * C6118 - C13315 * C6062) *
                C89247) *
               C89093 * C89153 * C813 +
           ((C13313 * C821 - C13258 * C927 + C13314 * C5726 - C13259 * C5788 +
             C13315 * C13744 - C13260 * C13874) *
                C263 +
            (C13313 * C1429 - C13258 * C1519 + C13314 * C6062 - C13259 * C6118 +
             C13315 * C14324 - C13260 * C14422) *
                C89247) *
               C89093 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eezz[64] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C89236 *
               C89 +
           C735 * C90 + C736 * C91) *
              C89153 * C89137 * C96 -
          (C737 * C91 + C736 * C90 + C735 * C89) * C89153 * C89137 * C97 +
          (C736 * C89 + C737 * C90 + C738 * C91) * C89153 * C89137 * C98 -
          ((C263 * C269 - C699 * C111 - C263 * C570 + C89247 * C705) * C89236 *
               C91 +
           C738 * C90 + C737 * C89) *
              C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C89236 *
                C89 +
            C735 * C90 + C736 * C91) *
               C89153 * C812 -
           (C1642 * C91 + C1643 * C90 +
            (C263 * C1029 - C699 * C819 - C263 * C1425 + C89247 * C1607) *
                C89236 * C89) *
               C89153 * C813 +
           ((C263 * C1032 - C699 * C820 - C263 * C1428 + C89247 * C1608) *
                C89236 * C89 +
            C1644 * C90 + C1645 * C91) *
               C89153 * C814) *
              C815 +
          ((C1643 * C89 + C1642 * C90 +
            (C263 * C1035 - C699 * C823 - C263 * C1431 + C89247 * C1611) *
                C89236 * C91) *
               C89153 * C813 -
           (C737 * C91 + C736 * C90 + C735 * C89) * C89153 * C812 -
           ((C263 * C1036 - C699 * C824 - C263 * C1432 + C89247 * C1612) *
                C89236 * C91 +
            C1645 * C90 + C1644 * C89) *
               C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C13258 +
           (C263 * C1029 - C699 * C819 - C263 * C1425 + C89247 * C1607) *
               C13259 +
           (C263 * C1032 - C699 * C820 - C263 * C1428 + C89247 * C1608) *
               C13260) *
              C89093 * C89153 * C89137 * C96 -
          (C1640 * C13260 + C1639 * C13259 + C731 * C13258) * C89093 * C89153 *
              C89137 * C97 +
          (C732 * C13258 + C1638 * C13259 + C1641 * C13260) * C89093 * C89153 *
              C89137 * C98 -
          ((C263 * C1036 - C699 * C824 - C263 * C1432 + C89247 * C1612) *
               C13260 +
           C3275 * C13259 + C733 * C13258) *
              C89093 * C89153 * C89137 * C99)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C13258 +
            C14524 * C13259 + C14525 * C13260) *
               C89093 * C89153 * C812 -
           (C14526 * C13260 + C14525 * C13259 + C14524 * C13258) * C89093 *
               C89153 * C813 +
           (C14525 * C13258 + C14526 * C13259 +
            (C263 * C13951 - C699 * C13743 - C263 * C14323 + C89247 * C14497) *
                C13260) *
               C89093 * C89153 * C814) *
              C815 +
          ((C1639 * C13258 + C1640 * C13259 + C14527 * C13260) * C89093 *
               C89153 * C813 -
           (C1640 * C13260 + C1639 * C13259 + C731 * C13258) * C89093 * C89153 *
               C812 -
           ((C263 * C13952 - C699 * C13744 - C263 * C14324 + C89247 * C14498) *
                C13260 +
            C14527 * C13259 + C1640 * C13258) *
               C89093 * C89153 * C814) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eexx[65] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C112 - C101 * C106 - C100 * C113 + C89 * C124 + C102 * C114 -
            C103 * C107 - C102 * C115 + C90 * C125 + C104 * C116 - C105 * C108 -
            C104 * C117 + C91 * C126) *
               C89247 * C89236 * C89153 * C89335 -
           (C104 * C825 - C105 * C817 - C104 * C826 + C91 * C841 + C102 * C827 -
            C103 * C818 - C102 * C828 + C90 * C842 + C100 * C829 - C101 * C819 -
            C100 * C830 + C89 * C843) *
               C89247 * C89236 * C89153 * C89336 +
           (C100 * C831 - C101 * C820 - C100 * C832 + C89 * C844 + C102 * C833 -
            C103 * C821 - C102 * C834 + C90 * C845 + C104 * C835 - C105 * C822 -
            C104 * C836 + C91 * C846) *
               C89247 * C89236 * C89153 * C6963) *
              C89299 +
          ((C100 * C827 - C101 * C818 - C100 * C828 + C89 * C842 + C102 * C825 -
            C103 * C817 - C102 * C826 + C90 * C841 + C104 * C837 - C105 * C823 -
            C104 * C838 + C91 * C847) *
               C89247 * C89236 * C89153 * C89336 -
           (C104 * C118 - C105 * C109 - C104 * C119 + C91 * C127 + C102 * C116 -
            C103 * C108 - C102 * C117 + C90 * C126 + C100 * C114 - C101 * C107 -
            C100 * C115 + C89 * C125) *
               C89247 * C89236 * C89153 * C89335 -
           (C104 * C839 - C105 * C824 - C104 * C840 + C91 * C848 + C102 * C835 -
            C103 * C822 - C102 * C836 + C90 * C846 + C100 * C833 - C101 * C821 -
            C100 * C834 + C89 * C845) *
               C89247 * C89236 * C89153 * C6963) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                C89247 * C13258 +
            C13794 * C13259 + C13795 * C13260) *
               C89153 * C89335 -
           (C13796 * C13260 + C13795 * C13259 + C13794 * C13258) * C89153 *
               C89336 +
           (C13795 * C13258 + C13796 * C13259 + C18322 * C13260) * C89153 *
               C6963) *
              C89299 +
          ((C13797 * C13258 + C13798 * C13259 + C13799 * C13260) * C89153 *
               C89336 -
           (C13798 * C13260 + C13797 * C13259 +
            (C13261 * C114 - C13262 * C107 - C13261 * C115 + C89093 * C125) *
                C89247 * C13258) *
               C89153 * C89335 -
           ((C13261 * C13747 - C13262 * C13744 - C13261 * C13748 +
             C89093 * C13750) *
                C89247 * C13260 +
            C13799 * C13259 + C13798 * C13258) *
               C89153 * C6963) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eexy[65] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C89236 * C181 - C180 * C106) * C100 +
            (C89236 * C187 - C180 * C113) * C89 + (C194 - C195) * C102 +
            (C196 - C197) * C90 + C210 * C104 + C211 * C91) *
               C89247 * C89153 * C89335 +
           ((C180 * C819 - C89236 * C923) * C100 +
            (C180 * C830 - C89236 * C931) * C89 + (C940 - C941) * C102 +
            (C942 - C943) * C90 + C2710 * C104 + C2711 * C91) *
               C89247 * C89153 * C89336 +
           ((C89236 * C926 - C180 * C820) * C100 +
            (C89236 * C934 - C180 * C832) * C89 + (C948 - C949) * C102 +
            (C950 - C951) * C90 + (C952 - C953) * C104 + (C954 - C955) * C91) *
               C89247 * C89153 * C6963) *
              C89299 +
          (((C195 - C194) * C100 + (C197 - C196) * C89 + (C199 - C198) * C102 +
            (C201 - C200) * C90 + C212 * C104 + C213 * C91) *
               C89247 * C89153 * C89335 +
           ((C941 - C940) * C100 + (C943 - C942) * C89 + (C945 - C944) * C102 +
            (C947 - C946) * C90 + (C2712 - C2713) * C104 +
            (C2714 - C2715) * C91) *
               C89247 * C89153 * C89336 +
           ((C949 - C948) * C100 + (C951 - C950) * C89 + (C953 - C952) * C102 +
            (C955 - C954) * C90 + (C180 * C824 - C89236 * C930) * C104 +
            (C180 * C840 - C89236 * C938) * C91) *
               C89247 * C89153 * C6963) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
             C13260 * C926 - C13315 * C820) *
                C13261 +
            (C13258 * C187 - C13313 * C113 + C13259 * C931 - C13314 * C830 +
             C13260 * C934 - C13315 * C832) *
                C89093) *
               C89247 * C89153 * C89335 +
           ((C13313 * C819 - C13258 * C923 + C13314 * C820 - C13259 * C926 +
             C13315 * C5727 - C13260 * C5787) *
                C13261 +
            (C13313 * C830 - C13258 * C931 + C13314 * C832 - C13259 * C934 +
             C13315 * C5733 - C13260 * C5790) *
                C89093) *
               C89247 * C89153 * C89336 +
           ((C13258 * C926 - C13313 * C820 + C13259 * C5787 - C13314 * C5727 +
             C13260 * C13873 - C13315 * C13743) *
                C13261 +
            (C13258 * C934 - C13313 * C832 + C13259 * C5790 - C13314 * C5733 +
             C13260 * C13875 - C13315 * C13746) *
                C89093) *
               C89247 * C89153 * C6963) *
              C89299 +
          (((C13313 * C107 - C13258 * C182 + C13314 * C818 - C13259 * C924 +
             C13315 * C821 - C13260 * C927) *
                C13261 +
            (C13313 * C115 - C13258 * C188 + C13314 * C828 - C13259 * C932 +
             C13315 * C834 - C13260 * C935) *
                C89093) *
               C89247 * C89153 * C89335 +
           ((C13258 * C924 - C13313 * C818 + C13259 * C927 - C13314 * C821 +
             C13260 * C5788 - C13315 * C5726) *
                C13261 +
            (C13258 * C932 - C13313 * C828 + C13259 * C935 - C13314 * C834 +
             C13260 * C5791 - C13315 * C5731) *
                C89093) *
               C89247 * C89153 * C89336 +
           ((C13313 * C821 - C13258 * C927 + C13314 * C5726 - C13259 * C5788 +
             C13315 * C13744 - C13260 * C13874) *
                C13261 +
            (C13313 * C834 - C13258 * C935 + C13314 * C5731 - C13259 * C5791 +
             C13315 * C13748 - C13260 * C13876) *
                C89093) *
               C89247 * C89153 * C6963) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eexz[65] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C100 +
            (C89247 * C270 - C263 * C113) * C89 + (C277 - C278) * C102 +
            (C279 - C280) * C90 + C293 * C104 + C294 * C91) *
               C89236 * C89153 * C89335 +
           ((C263 * C819 - C89247 * C1029) * C100 +
            (C263 * C830 - C89247 * C1037) * C89 + (C1046 - C1047) * C102 +
            (C1048 - C1049) * C90 + C2792 * C104 + C2793 * C91) *
               C89236 * C89153 * C89336 +
           ((C89247 * C1032 - C263 * C820) * C100 +
            (C89247 * C1040 - C263 * C832) * C89 + (C1054 - C1055) * C102 +
            (C1056 - C1057) * C90 + (C1058 - C1059) * C104 +
            (C1060 - C1061) * C91) *
               C89236 * C89153 * C6963) *
              C89299 +
          (((C278 - C277) * C100 + (C280 - C279) * C89 + (C282 - C281) * C102 +
            (C284 - C283) * C90 + C295 * C104 + C296 * C91) *
               C89236 * C89153 * C89335 +
           ((C1047 - C1046) * C100 + (C1049 - C1048) * C89 +
            (C1051 - C1050) * C102 + (C1053 - C1052) * C90 +
            (C2794 - C2795) * C104 + (C2796 - C2797) * C91) *
               C89236 * C89153 * C89336 +
           ((C1055 - C1054) * C100 + (C1057 - C1056) * C89 +
            (C1059 - C1058) * C102 + (C1061 - C1060) * C90 +
            (C263 * C824 - C89247 * C1036) * C104 +
            (C263 * C840 - C89247 * C1044) * C91) *
               C89236 * C89153 * C6963) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C13261 +
             (C89247 * C270 - C263 * C113) * C89093) *
                C13258 +
            ((C13956 - C13957) * C13261 + (C13958 - C13959) * C89093) * C13259 +
            C13981 * C13260) *
               C89153 * C89335 +
           (((C13957 - C13956) * C13261 + (C13959 - C13958) * C89093) * C13258 +
            ((C13961 - C13960) * C13261 + (C13963 - C13962) * C89093) * C13259 +
            C18435 * C13260) *
               C89153 * C89336 +
           (C13981 * C13258 +
            ((C13965 - C13964) * C13261 + (C13967 - C13966) * C89093) * C13259 +
            ((C18429 - C18430) * C13261 + (C18431 - C18432) * C89093) *
                C13260) *
               C89153 * C6963) *
              C89299 +
          ((((C278 - C277) * C13261 + (C280 - C279) * C89093) * C13258 +
            ((C1046 - C1047) * C13261 + (C1048 - C1049) * C89093) * C13259 +
            C13980 * C13260) *
               C89153 * C89335 +
           (((C1047 - C1046) * C13261 + (C1049 - C1048) * C89093) * C13258 +
            ((C1054 - C1055) * C13261 + (C1056 - C1057) * C89093) * C13259 +
            ((C13970 - C13971) * C13261 + (C13972 - C13973) * C89093) *
                C13260) *
               C89153 * C89336 +
           (C13980 * C13258 +
            ((C13971 - C13970) * C13261 + (C13973 - C13972) * C89093) * C13259 +
            ((C263 * C13744 - C89247 * C13952) * C13261 +
             (C263 * C13748 - C89247 * C13954) * C89093) *
                C13260) *
               C89153 * C6963) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[65] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 +
                       C91 * C116 - C104 * C108) *
                          C180 +
                      (C89 * C352 - C100 * C346 + C90 * C353 - C102 * C347 +
                       C91 * C354 - C104 * C348) *
                          C89236) *
                         C89247 * C89153 * C89335 +
                     ((C100 * C819 - C89 * C829 + C102 * C818 - C90 * C827 +
                       C104 * C817 - C91 * C825) *
                          C180 +
                      (C100 * C1135 - C89 * C1143 + C102 * C1136 - C90 * C1144 +
                       C104 * C1137 - C91 * C1145) *
                          C89236) *
                         C89247 * C89153 * C89336 +
                     ((C89 * C831 - C100 * C820 + C90 * C833 - C102 * C821 +
                       C91 * C835 - C104 * C822) *
                          C180 +
                      (C89 * C1146 - C100 * C1138 + C90 * C1147 - C102 * C1139 +
                       C91 * C1148 - C104 * C1140) *
                          C89236) *
                         C89247 * C89153 * C6963) *
                        C89299 +
                    (((C100 * C107 - C89 * C114 + C102 * C108 - C90 * C116 +
                       C104 * C109 - C91 * C118) *
                          C180 +
                      (C100 * C347 - C89 * C353 + C102 * C348 - C90 * C354 +
                       C104 * C349 - C91 * C355) *
                          C89236) *
                         C89247 * C89153 * C89335 +
                     ((C89 * C827 - C100 * C818 + C90 * C825 - C102 * C817 +
                       C91 * C837 - C104 * C823) *
                          C180 +
                      (C89 * C1144 - C100 * C1136 + C90 * C1145 - C102 * C1137 +
                       C91 * C1149 - C104 * C1141) *
                          C89236) *
                         C89247 * C89153 * C89336 +
                     ((C100 * C821 - C89 * C833 + C102 * C822 - C90 * C835 +
                       C104 * C824 - C91 * C839) *
                          C180 +
                      (C100 * C1139 - C89 * C1147 + C102 * C1140 - C90 * C1148 +
                       C104 * C1142 - C91 * C1150) *
                          C89236) *
                         C89247 * C89153 * C6963) *
                        C89124)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C89093 * C112 - C13261 * C106) * C13313 +
                      (C89093 * C352 - C13261 * C346) * C13258 +
                      (C14060 - C14061) * C13314 + (C14062 - C14063) * C13259 +
                      C14084 * C13315 + C14085 * C13260) *
                         C89247 * C89153 * C89335 +
                     ((C14061 - C14060) * C13313 + (C14063 - C14062) * C13258 +
                      (C14065 - C14064) * C13314 + (C14067 - C14066) * C13259 +
                      C18488 * C13315 + C18489 * C13260) *
                         C89247 * C89153 * C89336 +
                     (C14084 * C13313 + C14085 * C13258 +
                      (C14069 - C14068) * C13314 + (C14071 - C14070) * C13259 +
                      (C18490 - C18491) * C13315 + (C18492 - C18493) * C13260) *
                         C89247 * C89153 * C6963) *
                        C89299 +
                    (((C13261 * C107 - C89093 * C114) * C13313 +
                      (C13261 * C347 - C89093 * C353) * C13258 +
                      (C14072 - C14073) * C13314 + (C14074 - C14075) * C13259 +
                      C14086 * C13315 + C14087 * C13260) *
                         C89247 * C89153 * C89335 +
                     ((C14073 - C14072) * C13313 + (C14075 - C14074) * C13258 +
                      (C14077 - C14076) * C13314 + (C14079 - C14078) * C13259 +
                      (C14080 - C14081) * C13315 + (C14082 - C14083) * C13260) *
                         C89247 * C89153 * C89336 +
                     (C14086 * C13313 + C14087 * C13258 +
                      (C14081 - C14080) * C13314 + (C14083 - C14082) * C13259 +
                      (C13261 * C13744 - C89093 * C13747) * C13315 +
                      (C13261 * C14056 - C89093 * C14058) * C13260) *
                         C89247 * C89153 * C6963) *
                        C89124)) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[65] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C89 +
            C440 * C90 + C441 * C91) *
               C89247 * C89153 * C89335 -
           (C1258 * C91 + C1259 * C90 +
            (C180 * C923 - C408 * C819 - C180 * C1135 + C89236 * C1227) * C89) *
               C89247 * C89153 * C89336 +
           ((C180 * C926 - C408 * C820 - C180 * C1138 + C89236 * C1228) * C89 +
            C1260 * C90 + C1261 * C91) *
               C89247 * C89153 * C6963) *
              C89299 +
          ((C1259 * C89 + C1258 * C90 + C2955 * C91) * C89247 * C89153 *
               C89336 -
           (C442 * C91 + C441 * C90 + C440 * C89) * C89247 * C89153 * C89335 -
           ((C180 * C930 - C408 * C824 - C180 * C1142 + C89236 * C1232) * C91 +
            C1261 * C90 + C1260 * C89) *
               C89247 * C89153 * C6963) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C13313 * C181 - C13466 * C106 - C13313 * C346 + C13258 * C409 +
            C13314 * C923 - C13467 * C819 - C13314 * C1135 + C13259 * C1227 +
            C13315 * C926 - C13468 * C820 - C13315 * C1138 + C13260 * C1228) *
               C89093 * C89247 * C89153 * C89335 -
           (C13315 * C5787 - C13468 * C5727 - C13315 * C5899 + C13260 * C5957 +
            C13314 * C926 - C13467 * C820 - C13314 * C1138 + C13259 * C1228 +
            C13313 * C923 - C13466 * C819 - C13313 * C1135 + C13258 * C1227) *
               C89093 * C89247 * C89153 * C89336 +
           (C13313 * C926 - C13466 * C820 - C13313 * C1138 + C13258 * C1228 +
            C13314 * C5787 - C13467 * C5727 - C13314 * C5899 + C13259 * C5957 +
            C13315 * C13873 - C13468 * C13743 - C13315 * C14055 +
            C13260 * C14161) *
               C89093 * C89247 * C89153 * C6963) *
              C89299 +
          ((C13313 * C924 - C13466 * C818 - C13313 * C1136 + C13258 * C1226 +
            C13314 * C927 - C13467 * C821 - C13314 * C1139 + C13259 * C1229 +
            C13315 * C5788 - C13468 * C5726 - C13315 * C5900 + C13260 * C5956) *
               C89093 * C89247 * C89153 * C89336 -
           (C13315 * C927 - C13468 * C821 - C13315 * C1139 + C13260 * C1229 +
            C13314 * C924 - C13467 * C818 - C13314 * C1136 + C13259 * C1226 +
            C13313 * C182 - C13466 * C107 - C13313 * C347 + C13258 * C410) *
               C89093 * C89247 * C89153 * C89335 -
           (C13315 * C13874 - C13468 * C13744 - C13315 * C14056 +
            C13260 * C14162 + C13314 * C5788 - C13467 * C5726 - C13314 * C5900 +
            C13259 * C5956 + C13313 * C927 - C13466 * C821 - C13313 * C1139 +
            C13258 * C1229) *
               C89093 * C89247 * C89153 * C6963) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[65] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C180 +
             (C89247 * C493 - C263 * C346) * C89236) *
                C89 +
            ((C277 - C278) * C180 + (C500 - C501) * C89236) * C90 +
            C514 * C91) *
               C89153 * C89335 +
           (((C263 * C819 - C89247 * C1029) * C180 +
             (C263 * C1135 - C89247 * C1335) * C89236) *
                C89 +
            ((C1046 - C1047) * C180 + (C1344 - C1345) * C89236) * C90 +
            C3036 * C91) *
               C89153 * C89336 +
           (((C89247 * C1032 - C263 * C820) * C180 +
             (C89247 * C1338 - C263 * C1138) * C89236) *
                C89 +
            ((C1054 - C1055) * C180 + (C1348 - C1349) * C89236) * C90 +
            ((C1058 - C1059) * C180 + (C1350 - C1351) * C89236) * C91) *
               C89153 * C6963) *
              C89299 +
          ((((C278 - C277) * C180 + (C501 - C500) * C89236) * C89 +
            ((C282 - C281) * C180 + (C504 - C503) * C89236) * C90 +
            C515 * C91) *
               C89153 * C89335 +
           (((C1047 - C1046) * C180 + (C1345 - C1344) * C89236) * C89 +
            ((C1051 - C1050) * C180 + (C1347 - C1346) * C89236) * C90 +
            ((C2794 - C2795) * C180 + (C3033 - C3034) * C89236) * C91) *
               C89153 * C89336 +
           (((C1055 - C1054) * C180 + (C1349 - C1348) * C89236) * C89 +
            ((C1059 - C1058) * C180 + (C1351 - C1350) * C89236) * C90 +
            ((C263 * C824 - C89247 * C1036) * C180 +
             (C263 * C1142 - C89247 * C1342) * C89236) *
                C91) *
               C89153 * C6963) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C13313 +
            (C89247 * C493 - C263 * C346) * C13258 +
            (C13956 - C13957) * C13314 + (C14240 - C14241) * C13259 +
            C13974 * C13315 + C14249 * C13260) *
               C89093 * C89153 * C89335 +
           ((C13957 - C13956) * C13313 + (C14241 - C14240) * C13258 +
            (C13961 - C13960) * C13314 + (C14243 - C14242) * C13259 +
            C18427 * C13315 + C18596 * C13260) *
               C89093 * C89153 * C89336 +
           (C13974 * C13313 + C14249 * C13258 + (C13965 - C13964) * C13314 +
            (C14245 - C14244) * C13259 + (C18429 - C18430) * C13315 +
            (C18597 - C18598) * C13260) *
               C89093 * C89153 * C6963) *
              C89299 +
          (((C278 - C277) * C13313 + (C501 - C500) * C13258 +
            (C1046 - C1047) * C13314 + (C1344 - C1345) * C13259 +
            C13968 * C13315 + C14246 * C13260) *
               C89093 * C89153 * C89335 +
           ((C1047 - C1046) * C13313 + (C1345 - C1344) * C13258 +
            (C1054 - C1055) * C13314 + (C1348 - C1349) * C13259 +
            (C13970 - C13971) * C13315 + (C14247 - C14248) * C13260) *
               C89093 * C89153 * C89336 +
           (C13968 * C13313 + C14246 * C13258 + (C13971 - C13970) * C13314 +
            (C14248 - C14247) * C13259 +
            (C263 * C13744 - C89247 * C13952) * C13315 +
            (C263 * C14056 - C89247 * C14238) * C13260) *
               C89093 * C89153 * C6963) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eezx[65] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 + C91 * C116 -
             C104 * C108) *
                C263 +
            (C89 * C571 - C100 * C565 + C90 * C572 - C102 * C566 + C91 * C573 -
             C104 * C567) *
                C89247) *
               C89236 * C89153 * C89335 +
           ((C100 * C819 - C89 * C829 + C102 * C818 - C90 * C827 + C104 * C817 -
             C91 * C825) *
                C263 +
            (C100 * C1425 - C89 * C1433 + C102 * C1426 - C90 * C1434 +
             C104 * C1427 - C91 * C1435) *
                C89247) *
               C89236 * C89153 * C89336 +
           ((C89 * C831 - C100 * C820 + C90 * C833 - C102 * C821 + C91 * C835 -
             C104 * C822) *
                C263 +
            (C89 * C1436 - C100 * C1428 + C90 * C1437 - C102 * C1429 +
             C91 * C1438 - C104 * C1430) *
                C89247) *
               C89236 * C89153 * C6963) *
              C89299 +
          (((C100 * C107 - C89 * C114 + C102 * C108 - C90 * C116 + C104 * C109 -
             C91 * C118) *
                C263 +
            (C100 * C566 - C89 * C572 + C102 * C567 - C90 * C573 + C104 * C568 -
             C91 * C574) *
                C89247) *
               C89236 * C89153 * C89335 +
           ((C89 * C827 - C100 * C818 + C90 * C825 - C102 * C817 + C91 * C837 -
             C104 * C823) *
                C263 +
            (C89 * C1434 - C100 * C1426 + C90 * C1435 - C102 * C1427 +
             C91 * C1439 - C104 * C1431) *
                C89247) *
               C89236 * C89153 * C89336 +
           ((C100 * C821 - C89 * C833 + C102 * C822 - C90 * C835 + C104 * C824 -
             C91 * C839) *
                C263 +
            (C100 * C1429 - C89 * C1437 + C102 * C1430 - C90 * C1438 +
             C104 * C1432 - C91 * C1440) *
                C89247) *
               C89236 * C89153 * C6963) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C263 +
             (C89093 * C571 - C13261 * C565) * C89247) *
                C13258 +
            ((C14060 - C14061) * C263 + (C14328 - C14329) * C89247) * C13259 +
            C14346 * C13260) *
               C89153 * C89335 +
           (((C14061 - C14060) * C263 + (C14329 - C14328) * C89247) * C13258 +
            ((C14065 - C14064) * C263 + (C14332 - C14331) * C89247) * C13259 +
            C18656 * C13260) *
               C89153 * C89336 +
           (C14346 * C13258 +
            ((C14069 - C14068) * C263 + (C14334 - C14333) * C89247) * C13259 +
            ((C18490 - C18491) * C263 + (C18653 - C18654) * C89247) * C13260) *
               C89153 * C6963) *
              C89299 +
          ((((C13261 * C107 - C89093 * C114) * C263 +
             (C13261 * C566 - C89093 * C572) * C89247) *
                C13258 +
            ((C14072 - C14073) * C263 + (C14335 - C14336) * C89247) * C13259 +
            C14347 * C13260) *
               C89153 * C89335 +
           (((C14073 - C14072) * C263 + (C14336 - C14335) * C89247) * C13258 +
            ((C14077 - C14076) * C263 + (C14339 - C14338) * C89247) * C13259 +
            ((C14080 - C14081) * C263 + (C14340 - C14341) * C89247) * C13260) *
               C89153 * C89336 +
           (C14347 * C13258 +
            ((C14081 - C14080) * C263 + (C14341 - C14340) * C89247) * C13259 +
            ((C13261 * C13744 - C89093 * C13747) * C263 +
             (C13261 * C14324 - C89093 * C14326) * C89247) *
                C13260) *
               C89153 * C6963) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eezy[65] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C263 +
             (C89236 * C627 - C180 * C565) * C89247) *
                C89 +
            ((C194 - C195) * C263 + (C634 - C635) * C89247) * C90 +
            C648 * C91) *
               C89153 * C89335 +
           (((C180 * C819 - C89236 * C923) * C263 +
             (C180 * C1425 - C89236 * C1515) * C89247) *
                C89 +
            ((C940 - C941) * C263 + (C1524 - C1525) * C89247) * C90 +
            C3193 * C91) *
               C89153 * C89336 +
           (((C89236 * C926 - C180 * C820) * C263 +
             (C89236 * C1518 - C180 * C1428) * C89247) *
                C89 +
            ((C948 - C949) * C263 + (C1528 - C1529) * C89247) * C90 +
            ((C952 - C953) * C263 + (C1530 - C1531) * C89247) * C91) *
               C89153 * C6963) *
              C89299 +
          ((((C195 - C194) * C263 + (C635 - C634) * C89247) * C89 +
            ((C199 - C198) * C263 + (C638 - C637) * C89247) * C90 +
            C649 * C91) *
               C89153 * C89335 +
           (((C941 - C940) * C263 + (C1525 - C1524) * C89247) * C89 +
            ((C945 - C944) * C263 + (C1527 - C1526) * C89247) * C90 +
            ((C2712 - C2713) * C263 + (C3190 - C3191) * C89247) * C91) *
               C89153 * C89336 +
           (((C949 - C948) * C263 + (C1529 - C1528) * C89247) * C89 +
            ((C953 - C952) * C263 + (C1531 - C1530) * C89247) * C90 +
            ((C180 * C824 - C89236 * C930) * C263 +
             (C180 * C1432 - C89236 * C1522) * C89247) *
                C91) *
               C89153 * C6963) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
             C13260 * C926 - C13315 * C820) *
                C263 +
            (C13258 * C627 - C13313 * C565 + C13259 * C1515 - C13314 * C1425 +
             C13260 * C1518 - C13315 * C1428) *
                C89247) *
               C89093 * C89153 * C89335 +
           ((C13313 * C819 - C13258 * C923 + C13314 * C820 - C13259 * C926 +
             C13315 * C5727 - C13260 * C5787) *
                C263 +
            (C13313 * C1425 - C13258 * C1515 + C13314 * C1428 - C13259 * C1518 +
             C13315 * C6061 - C13260 * C6117) *
                C89247) *
               C89093 * C89153 * C89336 +
           ((C13258 * C926 - C13313 * C820 + C13259 * C5787 - C13314 * C5727 +
             C13260 * C13873 - C13315 * C13743) *
                C263 +
            (C13258 * C1518 - C13313 * C1428 + C13259 * C6117 - C13314 * C6061 +
             C13260 * C14421 - C13315 * C14323) *
                C89247) *
               C89093 * C89153 * C6963) *
              C89299 +
          (((C13313 * C107 - C13258 * C182 + C13314 * C818 - C13259 * C924 +
             C13315 * C821 - C13260 * C927) *
                C263 +
            (C13313 * C566 - C13258 * C628 + C13314 * C1426 - C13259 * C1516 +
             C13315 * C1429 - C13260 * C1519) *
                C89247) *
               C89093 * C89153 * C89335 +
           ((C13258 * C924 - C13313 * C818 + C13259 * C927 - C13314 * C821 +
             C13260 * C5788 - C13315 * C5726) *
                C263 +
            (C13258 * C1516 - C13313 * C1426 + C13259 * C1519 - C13314 * C1429 +
             C13260 * C6118 - C13315 * C6062) *
                C89247) *
               C89093 * C89153 * C89336 +
           ((C13313 * C821 - C13258 * C927 + C13314 * C5726 - C13259 * C5788 +
             C13315 * C13744 - C13260 * C13874) *
                C263 +
            (C13313 * C1429 - C13258 * C1519 + C13314 * C6062 - C13259 * C6118 +
             C13315 * C14324 - C13260 * C14422) *
                C89247) *
               C89093 * C89153 * C6963) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eezz[65] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C89236 *
                C89 +
            C735 * C90 + C736 * C91) *
               C89153 * C89335 -
           (C1642 * C91 + C1643 * C90 +
            (C263 * C1029 - C699 * C819 - C263 * C1425 + C89247 * C1607) *
                C89236 * C89) *
               C89153 * C89336 +
           ((C263 * C1032 - C699 * C820 - C263 * C1428 + C89247 * C1608) *
                C89236 * C89 +
            C1644 * C90 + C1645 * C91) *
               C89153 * C6963) *
              C89299 +
          ((C1643 * C89 + C1642 * C90 + C3276 * C91) * C89153 * C89336 -
           (C737 * C91 + C736 * C90 + C735 * C89) * C89153 * C89335 -
           ((C263 * C1036 - C699 * C824 - C263 * C1432 + C89247 * C1612) *
                C89236 * C91 +
            C1645 * C90 + C1644 * C89) *
               C89153 * C6963) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C13258 +
            C14524 * C13259 + C14525 * C13260) *
               C89093 * C89153 * C89335 -
           (C14526 * C13260 + C14525 * C13259 + C14524 * C13258) * C89093 *
               C89153 * C89336 +
           (C14525 * C13258 + C14526 * C13259 + C18765 * C13260) * C89093 *
               C89153 * C6963) *
              C89299 +
          ((C1639 * C13258 + C1640 * C13259 + C14527 * C13260) * C89093 *
               C89153 * C89336 -
           (C1640 * C13260 + C1639 * C13259 + C731 * C13258) * C89093 * C89153 *
               C89335 -
           ((C263 * C13952 - C699 * C13744 - C263 * C14324 + C89247 * C14498) *
                C13260 +
            C14527 * C13259 + C1640 * C13258) *
               C89093 * C89153 * C6963) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eexx[66] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C112 - C101 * C106 - C100 * C113 + C89 * C124 + C102 * C114 -
            C103 * C107 - C102 * C115 + C90 * C125 + C104 * C116 - C105 * C108 -
            C104 * C117 + C91 * C126) *
               C89247 * C89236 * C89308 -
           (C104 * C1730 - C105 * C1722 - C104 * C1731 + C91 * C1746 +
            C102 * C1732 - C103 * C1723 - C102 * C1733 + C90 * C1747 +
            C100 * C1734 - C101 * C1724 - C100 * C1735 + C89 * C1748) *
               C89247 * C89236 * C89217) *
              C89335 +
          ((C100 * C4101 - C101 * C4097 - C100 * C4102 + C89 * C4109 +
            C102 * C4103 - C103 * C4098 - C102 * C4104 + C90 * C4110 +
            C104 * C4105 - C105 * C4099 - C104 * C4106 + C91 * C4111) *
               C89247 * C89236 * C89217 -
           (C104 * C825 - C105 * C817 - C104 * C826 + C91 * C841 + C102 * C827 -
            C103 * C818 - C102 * C828 + C90 * C842 + C100 * C829 - C101 * C819 -
            C100 * C830 + C89 * C843) *
               C89247 * C89236 * C89308) *
              C89336 +
          ((C100 * C831 - C101 * C820 - C100 * C832 + C89 * C844 + C102 * C833 -
            C103 * C821 - C102 * C834 + C90 * C845 + C104 * C835 - C105 * C822 -
            C104 * C836 + C91 * C846) *
               C89247 * C89236 * C89308 -
           (C104 * C8517 - C105 * C8514 - C104 * C8518 + C91 * C8523 +
            C102 * C8519 - C103 * C8515 - C102 * C8520 + C90 * C8524 +
            C100 * C8521 - C101 * C8516 - C100 * C8522 + C89 * C8525) *
               C89247 * C89236 * C89217) *
              C6963) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                C89247 * C13258 +
            C13794 * C13259 + C13795 * C13260) *
               C89308 -
           (C16720 * C13260 + C16721 * C13259 +
            (C13261 * C1734 - C13262 * C1724 - C13261 * C1735 +
             C89093 * C1748) *
                C89247 * C13258) *
               C89217) *
              C89335 +
          ((C16721 * C13258 + C16720 * C13259 + C21135 * C13260) * C89217 -
           (C13796 * C13260 + C13795 * C13259 + C13794 * C13258) * C89308) *
              C89336 +
          ((C13795 * C13258 + C13796 * C13259 + C18322 * C13260) * C89308 -
           ((C13261 * C21124 - C13262 * C21123 - C13261 * C21125 +
             C89093 * C21126) *
                C89247 * C13260 +
            C21135 * C13259 + C16720 * C13258) *
               C89217) *
              C6963) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eexy[66] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C89236 * C181 - C180 * C106) * C100 +
            (C89236 * C187 - C180 * C113) * C89 + (C194 - C195) * C102 +
            (C196 - C197) * C90 + C210 * C104 + C211 * C91) *
               C89247 * C89308 +
           ((C180 * C1724 - C89236 * C1828) * C100 +
            (C180 * C1735 - C89236 * C1836) * C89 + (C1845 - C1846) * C102 +
            (C1847 - C1848) * C90 + C3433 * C104 + C3434 * C91) *
               C89247 * C89217) *
              C89335 +
          (((C180 * C819 - C89236 * C923) * C100 +
            (C180 * C830 - C89236 * C931) * C89 + (C940 - C941) * C102 +
            (C942 - C943) * C90 + C2710 * C104 + C2711 * C91) *
               C89247 * C89308 +
           ((C89236 * C4211 - C180 * C4097) * C100 +
            (C89236 * C4215 - C180 * C4102) * C89 + (C4220 - C4221) * C102 +
            (C4222 - C4223) * C90 + (C4224 - C4225) * C104 +
            (C4226 - C4227) * C91) *
               C89247 * C89217) *
              C89336 +
          (((C89236 * C926 - C180 * C820) * C100 +
            (C89236 * C934 - C180 * C832) * C89 + (C948 - C949) * C102 +
            (C950 - C951) * C90 + (C952 - C953) * C104 + (C954 - C955) * C91) *
               C89247 * C89308 +
           ((C180 * C8516 - C89236 * C8600) * C100 +
            (C180 * C8522 - C89236 * C8603) * C89 +
            (C180 * C8515 - C89236 * C8601) * C102 +
            (C180 * C8520 - C89236 * C8604) * C90 +
            (C180 * C8514 - C89236 * C8602) * C104 +
            (C180 * C8518 - C89236 * C8605) * C91) *
               C89247 * C89217) *
              C6963) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
             C13260 * C926 - C13315 * C820) *
                C13261 +
            (C13258 * C187 - C13313 * C113 + C13259 * C931 - C13314 * C830 +
             C13260 * C934 - C13315 * C832) *
                C89093) *
               C89247 * C89308 +
           ((C13313 * C1724 - C13258 * C1828 + C13314 * C4097 - C13259 * C4211 +
             C13315 * C8516 - C13260 * C8600) *
                C13261 +
            (C13313 * C1735 - C13258 * C1836 + C13314 * C4102 - C13259 * C4215 +
             C13315 * C8522 - C13260 * C8603) *
                C89093) *
               C89247 * C89217) *
              C89335 +
          (((C13313 * C819 - C13258 * C923 + C13314 * C820 - C13259 * C926 +
             C13315 * C5727 - C13260 * C5787) *
                C13261 +
            (C13313 * C830 - C13258 * C931 + C13314 * C832 - C13259 * C934 +
             C13315 * C5733 - C13260 * C5790) *
                C89093) *
               C89247 * C89308 +
           ((C13258 * C4211 - C13313 * C4097 + C13259 * C8600 - C13314 * C8516 +
             C13260 * C16821 - C13315 * C16683) *
                C13261 +
            (C13258 * C4215 - C13313 * C4102 + C13259 * C8603 - C13314 * C8522 +
             C13260 * C16823 - C13315 * C16686) *
                C89093) *
               C89247 * C89217) *
              C89336 +
          (((C13258 * C926 - C13313 * C820 + C13259 * C5787 - C13314 * C5727 +
             C13260 * C13873 - C13315 * C13743) *
                C13261 +
            (C13258 * C934 - C13313 * C832 + C13259 * C5790 - C13314 * C5733 +
             C13260 * C13875 - C13315 * C13746) *
                C89093) *
               C89247 * C89308 +
           ((C13313 * C8516 - C13258 * C8600 + C13314 * C16683 -
             C13259 * C16821 + C13315 * C21123 - C13260 * C21209) *
                C13261 +
            (C13313 * C8522 - C13258 * C8603 + C13314 * C16686 -
             C13259 * C16823 + C13315 * C21125 - C13260 * C21210) *
                C89093) *
               C89247 * C89217) *
              C6963) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eexz[66] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C100 +
            (C89247 * C270 - C263 * C113) * C89 + (C277 - C278) * C102 +
            (C279 - C280) * C90 + C293 * C104 + C294 * C91) *
               C89236 * C89308 +
           ((C263 * C1724 - C89247 * C1934) * C100 +
            (C263 * C1735 - C89247 * C1942) * C89 + (C1951 - C1952) * C102 +
            (C1953 - C1954) * C90 + C3515 * C104 + C3516 * C91) *
               C89236 * C89217) *
              C89335 +
          (((C263 * C819 - C89247 * C1029) * C100 +
            (C263 * C830 - C89247 * C1037) * C89 + (C1046 - C1047) * C102 +
            (C1048 - C1049) * C90 + C2792 * C104 + C2793 * C91) *
               C89236 * C89308 +
           ((C89247 * C4325 - C263 * C4097) * C100 +
            (C89247 * C4329 - C263 * C4102) * C89 + (C4334 - C4335) * C102 +
            (C4336 - C4337) * C90 + (C4338 - C4339) * C104 +
            (C4340 - C4341) * C91) *
               C89236 * C89217) *
              C89336 +
          (((C89247 * C1032 - C263 * C820) * C100 +
            (C89247 * C1040 - C263 * C832) * C89 + (C1054 - C1055) * C102 +
            (C1056 - C1057) * C90 + (C1058 - C1059) * C104 +
            (C1060 - C1061) * C91) *
               C89236 * C89308 +
           ((C263 * C8516 - C89247 * C8680) * C100 +
            (C263 * C8522 - C89247 * C8683) * C89 +
            (C263 * C8515 - C89247 * C8681) * C102 +
            (C263 * C8520 - C89247 * C8684) * C90 +
            (C263 * C8514 - C89247 * C8682) * C104 +
            (C263 * C8518 - C89247 * C8685) * C91) *
               C89236 * C89217) *
              C6963) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C13261 +
             (C89247 * C270 - C263 * C113) * C89093) *
                C13258 +
            ((C13956 - C13957) * C13261 + (C13958 - C13959) * C89093) * C13259 +
            C13981 * C13260) *
               C89308 +
           (((C263 * C1724 - C89247 * C1934) * C13261 +
             (C263 * C1735 - C89247 * C1942) * C89093) *
                C13258 +
            ((C16928 - C16929) * C13261 + (C16930 - C16931) * C89093) * C13259 +
            C21296 * C13260) *
               C89217) *
              C89335 +
          ((((C13957 - C13956) * C13261 + (C13959 - C13958) * C89093) * C13258 +
            ((C13961 - C13960) * C13261 + (C13963 - C13962) * C89093) * C13259 +
            C18435 * C13260) *
               C89308 +
           (((C16929 - C16928) * C13261 + (C16931 - C16930) * C89093) * C13258 +
            ((C16933 - C16932) * C13261 + (C16935 - C16934) * C89093) * C13259 +
            ((C21290 - C21291) * C13261 + (C21292 - C21293) * C89093) *
                C13260) *
               C89217) *
              C89336 +
          ((C13981 * C13258 +
            ((C13965 - C13964) * C13261 + (C13967 - C13966) * C89093) * C13259 +
            ((C18429 - C18430) * C13261 + (C18431 - C18432) * C89093) *
                C13260) *
               C89308 +
           (C21296 * C13258 +
            ((C21291 - C21290) * C13261 + (C21293 - C21292) * C89093) * C13259 +
            ((C263 * C21123 - C89247 * C21285) * C13261 +
             (C263 * C21125 - C89247 * C21286) * C89093) *
                C13260) *
               C89217) *
              C6963) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eeyx[66] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 +
                       C91 * C116 - C104 * C108) *
                          C180 +
                      (C89 * C352 - C100 * C346 + C90 * C353 - C102 * C347 +
                       C91 * C354 - C104 * C348) *
                          C89236) *
                         C89247 * C89308 +
                     ((C100 * C1724 - C89 * C1734 + C102 * C1723 - C90 * C1732 +
                       C104 * C1722 - C91 * C1730) *
                          C180 +
                      (C100 * C2040 - C89 * C2048 + C102 * C2041 - C90 * C2049 +
                       C104 * C2042 - C91 * C2050) *
                          C89236) *
                         C89247 * C89217) *
                        C89335 +
                    (((C100 * C819 - C89 * C829 + C102 * C818 - C90 * C827 +
                       C104 * C817 - C91 * C825) *
                          C180 +
                      (C100 * C1135 - C89 * C1143 + C102 * C1136 - C90 * C1144 +
                       C104 * C1137 - C91 * C1145) *
                          C89236) *
                         C89247 * C89308 +
                     ((C89 * C4101 - C100 * C4097 + C90 * C4103 - C102 * C4098 +
                       C91 * C4105 - C104 * C4099) *
                          C180 +
                      (C89 * C4443 - C100 * C4439 + C90 * C4444 - C102 * C4440 +
                       C91 * C4445 - C104 * C4441) *
                          C89236) *
                         C89247 * C89217) *
                        C89336 +
                    (((C89 * C831 - C100 * C820 + C90 * C833 - C102 * C821 +
                       C91 * C835 - C104 * C822) *
                          C180 +
                      (C89 * C1146 - C100 * C1138 + C90 * C1147 - C102 * C1139 +
                       C91 * C1148 - C104 * C1140) *
                          C89236) *
                         C89247 * C89308 +
                     ((C100 * C8516 - C89 * C8521 + C102 * C8515 - C90 * C8519 +
                       C104 * C8514 - C91 * C8517) *
                          C180 +
                      (C100 * C8760 - C89 * C8763 + C102 * C8761 - C90 * C8764 +
                       C104 * C8762 - C91 * C8765) *
                          C89236) *
                         C89247 * C89217) *
                        C6963) *
                   C89118) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C89093 * C112 - C13261 * C106) * C13313 +
                      (C89093 * C352 - C13261 * C346) * C13258 +
                      (C14060 - C14061) * C13314 + (C14062 - C14063) * C13259 +
                      C14084 * C13315 + C14085 * C13260) *
                         C89247 * C89308 +
                     ((C13261 * C1724 - C89093 * C1734) * C13313 +
                      (C13261 * C2040 - C89093 * C2048) * C13258 +
                      (C17042 - C17043) * C13314 + (C17044 - C17045) * C13259 +
                      C21373 * C13315 + C21374 * C13260) *
                         C89247 * C89217) *
                        C89335 +
                    (((C14061 - C14060) * C13313 + (C14063 - C14062) * C13258 +
                      (C14065 - C14064) * C13314 + (C14067 - C14066) * C13259 +
                      C18488 * C13315 + C18489 * C13260) *
                         C89247 * C89308 +
                     ((C17043 - C17042) * C13313 + (C17045 - C17044) * C13258 +
                      (C17047 - C17046) * C13314 + (C17049 - C17048) * C13259 +
                      (C21375 - C21376) * C13315 + (C21377 - C21378) * C13260) *
                         C89247 * C89217) *
                        C89336 +
                    ((C14084 * C13313 + C14085 * C13258 +
                      (C14069 - C14068) * C13314 + (C14071 - C14070) * C13259 +
                      (C18490 - C18491) * C13315 + (C18492 - C18493) * C13260) *
                         C89247 * C89308 +
                     (C21373 * C13313 + C21374 * C13258 +
                      (C21376 - C21375) * C13314 + (C21378 - C21377) * C13259 +
                      (C13261 * C21123 - C89093 * C21124) * C13315 +
                      (C13261 * C21370 - C89093 * C21371) * C13260) *
                         C89247 * C89217) *
                        C6963) *
                   C89118) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[66] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C89 +
            C440 * C90 + C441 * C91) *
               C89247 * C89308 -
           (C2163 * C91 + C2164 * C90 +
            (C180 * C1828 - C408 * C1724 - C180 * C2040 + C89236 * C2132) *
                C89) *
               C89247 * C89217) *
              C89335 +
          (((C180 * C4211 - C408 * C4097 - C180 * C4439 + C89236 * C4545) *
                C89 +
            C4562 * C90 + C4563 * C91) *
               C89247 * C89217 -
           (C1258 * C91 + C1259 * C90 +
            (C180 * C923 - C408 * C819 - C180 * C1135 + C89236 * C1227) * C89) *
               C89247 * C89308) *
              C89336 +
          (((C180 * C926 - C408 * C820 - C180 * C1138 + C89236 * C1228) * C89 +
            C1260 * C90 + C1261 * C91) *
               C89247 * C89308 -
           ((C180 * C8602 - C408 * C8514 - C180 * C8762 + C89236 * C8840) *
                C91 +
            (C180 * C8601 - C408 * C8515 - C180 * C8761 + C89236 * C8841) *
                C90 +
            (C180 * C8600 - C408 * C8516 - C180 * C8760 + C89236 * C8842) *
                C89) *
               C89247 * C89217) *
              C6963) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C13313 * C181 - C13466 * C106 - C13313 * C346 + C13258 * C409 +
            C13314 * C923 - C13467 * C819 - C13314 * C1135 + C13259 * C1227 +
            C13315 * C926 - C13468 * C820 - C13315 * C1138 + C13260 * C1228) *
               C89093 * C89247 * C89308 -
           (C13315 * C8600 - C13468 * C8516 - C13315 * C8760 + C13260 * C8842 +
            C13314 * C4211 - C13467 * C4097 - C13314 * C4439 + C13259 * C4545 +
            C13313 * C1828 - C13466 * C1724 - C13313 * C2040 + C13258 * C2132) *
               C89093 * C89247 * C89217) *
              C89335 +
          ((C13313 * C4211 - C13466 * C4097 - C13313 * C4439 + C13258 * C4545 +
            C13314 * C8600 - C13467 * C8516 - C13314 * C8760 + C13259 * C8842 +
            C13315 * C16821 - C13468 * C16683 - C13315 * C17037 +
            C13260 * C17155) *
               C89093 * C89247 * C89217 -
           (C13315 * C5787 - C13468 * C5727 - C13315 * C5899 + C13260 * C5957 +
            C13314 * C926 - C13467 * C820 - C13314 * C1138 + C13259 * C1228 +
            C13313 * C923 - C13466 * C819 - C13313 * C1135 + C13258 * C1227) *
               C89093 * C89247 * C89308) *
              C89336 +
          ((C13313 * C926 - C13466 * C820 - C13313 * C1138 + C13258 * C1228 +
            C13314 * C5787 - C13467 * C5727 - C13314 * C5899 + C13259 * C5957 +
            C13315 * C13873 - C13468 * C13743 - C13315 * C14055 +
            C13260 * C14161) *
               C89093 * C89247 * C89308 -
           (C13315 * C21209 - C13468 * C21123 - C13315 * C21370 +
            C13260 * C21452 + C13314 * C16821 - C13467 * C16683 -
            C13314 * C17037 + C13259 * C17155 + C13313 * C8600 -
            C13466 * C8516 - C13313 * C8760 + C13258 * C8842) *
               C89093 * C89247 * C89217) *
              C6963) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eeyz[66] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C180 +
             (C89247 * C493 - C263 * C346) * C89236) *
                C89 +
            ((C277 - C278) * C180 + (C500 - C501) * C89236) * C90 +
            C514 * C91) *
               C89308 +
           (((C263 * C1724 - C89247 * C1934) * C180 +
             (C263 * C2040 - C89247 * C2240) * C89236) *
                C89 +
            ((C1951 - C1952) * C180 + (C2249 - C2250) * C89236) * C90 +
            C3759 * C91) *
               C89217) *
              C89335 +
          ((((C263 * C819 - C89247 * C1029) * C180 +
             (C263 * C1135 - C89247 * C1335) * C89236) *
                C89 +
            ((C1046 - C1047) * C180 + (C1344 - C1345) * C89236) * C90 +
            C3036 * C91) *
               C89308 +
           (((C89247 * C4325 - C263 * C4097) * C180 +
             (C89247 * C4661 - C263 * C4439) * C89236) *
                C89 +
            ((C4334 - C4335) * C180 + (C4666 - C4667) * C89236) * C90 +
            ((C4338 - C4339) * C180 + (C4668 - C4669) * C89236) * C91) *
               C89217) *
              C89336 +
          ((((C89247 * C1032 - C263 * C820) * C180 +
             (C89247 * C1338 - C263 * C1138) * C89236) *
                C89 +
            ((C1054 - C1055) * C180 + (C1348 - C1349) * C89236) * C90 +
            ((C1058 - C1059) * C180 + (C1350 - C1351) * C89236) * C91) *
               C89308 +
           (((C263 * C8516 - C89247 * C8680) * C180 +
             (C263 * C8760 - C89247 * C8917) * C89236) *
                C89 +
            ((C263 * C8515 - C89247 * C8681) * C180 +
             (C263 * C8761 - C89247 * C8918) * C89236) *
                C90 +
            ((C263 * C8514 - C89247 * C8682) * C180 +
             (C263 * C8762 - C89247 * C8919) * C89236) *
                C91) *
               C89217) *
              C6963) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C13313 +
            (C89247 * C493 - C263 * C346) * C13258 +
            (C13956 - C13957) * C13314 + (C14240 - C14241) * C13259 +
            C13974 * C13315 + C14249 * C13260) *
               C89093 * C89308 +
           ((C263 * C1724 - C89247 * C1934) * C13313 +
            (C263 * C2040 - C89247 * C2240) * C13258 +
            (C16928 - C16929) * C13314 + (C17258 - C17259) * C13259 +
            C21288 * C13315 + C21529 * C13260) *
               C89093 * C89217) *
              C89335 +
          (((C13957 - C13956) * C13313 + (C14241 - C14240) * C13258 +
            (C13961 - C13960) * C13314 + (C14243 - C14242) * C13259 +
            C18427 * C13315 + C18596 * C13260) *
               C89093 * C89308 +
           ((C16929 - C16928) * C13313 + (C17259 - C17258) * C13258 +
            (C16933 - C16932) * C13314 + (C17261 - C17260) * C13259 +
            (C21290 - C21291) * C13315 + (C21530 - C21531) * C13260) *
               C89093 * C89217) *
              C89336 +
          ((C13974 * C13313 + C14249 * C13258 + (C13965 - C13964) * C13314 +
            (C14245 - C14244) * C13259 + (C18429 - C18430) * C13315 +
            (C18597 - C18598) * C13260) *
               C89093 * C89308 +
           (C21288 * C13313 + C21529 * C13258 + (C21291 - C21290) * C13314 +
            (C21531 - C21530) * C13259 +
            (C263 * C21123 - C89247 * C21285) * C13315 +
            (C263 * C21370 - C89247 * C21527) * C13260) *
               C89093 * C89217) *
              C6963) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eezx[66] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 + C91 * C116 -
             C104 * C108) *
                C263 +
            (C89 * C571 - C100 * C565 + C90 * C572 - C102 * C566 + C91 * C573 -
             C104 * C567) *
                C89247) *
               C89236 * C89308 +
           ((C100 * C1724 - C89 * C1734 + C102 * C1723 - C90 * C1732 +
             C104 * C1722 - C91 * C1730) *
                C263 +
            (C100 * C2330 - C89 * C2338 + C102 * C2331 - C90 * C2339 +
             C104 * C2332 - C91 * C2340) *
                C89247) *
               C89236 * C89217) *
              C89335 +
          (((C100 * C819 - C89 * C829 + C102 * C818 - C90 * C827 + C104 * C817 -
             C91 * C825) *
                C263 +
            (C100 * C1425 - C89 * C1433 + C102 * C1426 - C90 * C1434 +
             C104 * C1427 - C91 * C1435) *
                C89247) *
               C89236 * C89308 +
           ((C89 * C4101 - C100 * C4097 + C90 * C4103 - C102 * C4098 +
             C91 * C4105 - C104 * C4099) *
                C263 +
            (C89 * C4771 - C100 * C4767 + C90 * C4772 - C102 * C4768 +
             C91 * C4773 - C104 * C4769) *
                C89247) *
               C89236 * C89217) *
              C89336 +
          (((C89 * C831 - C100 * C820 + C90 * C833 - C102 * C821 + C91 * C835 -
             C104 * C822) *
                C263 +
            (C89 * C1436 - C100 * C1428 + C90 * C1437 - C102 * C1429 +
             C91 * C1438 - C104 * C1430) *
                C89247) *
               C89236 * C89308 +
           ((C100 * C8516 - C89 * C8521 + C102 * C8515 - C90 * C8519 +
             C104 * C8514 - C91 * C8517) *
                C263 +
            (C100 * C8994 - C89 * C8997 + C102 * C8995 - C90 * C8998 +
             C104 * C8996 - C91 * C8999) *
                C89247) *
               C89236 * C89217) *
              C6963) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C263 +
             (C89093 * C571 - C13261 * C565) * C89247) *
                C13258 +
            ((C14060 - C14061) * C263 + (C14328 - C14329) * C89247) * C13259 +
            C14346 * C13260) *
               C89308 +
           (((C13261 * C1724 - C89093 * C1734) * C263 +
             (C13261 * C2330 - C89093 * C2338) * C89247) *
                C13258 +
            ((C17042 - C17043) * C263 + (C17366 - C17367) * C89247) * C13259 +
            C21613 * C13260) *
               C89217) *
              C89335 +
          ((((C14061 - C14060) * C263 + (C14329 - C14328) * C89247) * C13258 +
            ((C14065 - C14064) * C263 + (C14332 - C14331) * C89247) * C13259 +
            C18656 * C13260) *
               C89308 +
           (((C17043 - C17042) * C263 + (C17367 - C17366) * C89247) * C13258 +
            ((C17047 - C17046) * C263 + (C17369 - C17368) * C89247) * C13259 +
            ((C21375 - C21376) * C263 + (C21610 - C21611) * C89247) * C13260) *
               C89217) *
              C89336 +
          ((C14346 * C13258 +
            ((C14069 - C14068) * C263 + (C14334 - C14333) * C89247) * C13259 +
            ((C18490 - C18491) * C263 + (C18653 - C18654) * C89247) * C13260) *
               C89308 +
           (C21613 * C13258 +
            ((C21376 - C21375) * C263 + (C21611 - C21610) * C89247) * C13259 +
            ((C13261 * C21123 - C89093 * C21124) * C263 +
             (C13261 * C21605 - C89093 * C21606) * C89247) *
                C13260) *
               C89217) *
              C6963) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eezy[66] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C263 +
             (C89236 * C627 - C180 * C565) * C89247) *
                C89 +
            ((C194 - C195) * C263 + (C634 - C635) * C89247) * C90 +
            C648 * C91) *
               C89308 +
           (((C180 * C1724 - C89236 * C1828) * C263 +
             (C180 * C2330 - C89236 * C2420) * C89247) *
                C89 +
            ((C1845 - C1846) * C263 + (C2429 - C2430) * C89247) * C90 +
            C3916 * C91) *
               C89217) *
              C89335 +
          ((((C180 * C819 - C89236 * C923) * C263 +
             (C180 * C1425 - C89236 * C1515) * C89247) *
                C89 +
            ((C940 - C941) * C263 + (C1524 - C1525) * C89247) * C90 +
            C3193 * C91) *
               C89308 +
           (((C89236 * C4211 - C180 * C4097) * C263 +
             (C89236 * C4873 - C180 * C4767) * C89247) *
                C89 +
            ((C4220 - C4221) * C263 + (C4878 - C4879) * C89247) * C90 +
            ((C4224 - C4225) * C263 + (C4880 - C4881) * C89247) * C91) *
               C89217) *
              C89336 +
          ((((C89236 * C926 - C180 * C820) * C263 +
             (C89236 * C1518 - C180 * C1428) * C89247) *
                C89 +
            ((C948 - C949) * C263 + (C1528 - C1529) * C89247) * C90 +
            ((C952 - C953) * C263 + (C1530 - C1531) * C89247) * C91) *
               C89308 +
           (((C180 * C8516 - C89236 * C8600) * C263 +
             (C180 * C8994 - C89236 * C9074) * C89247) *
                C89 +
            ((C180 * C8515 - C89236 * C8601) * C263 +
             (C180 * C8995 - C89236 * C9075) * C89247) *
                C90 +
            ((C180 * C8514 - C89236 * C8602) * C263 +
             (C180 * C8996 - C89236 * C9076) * C89247) *
                C91) *
               C89217) *
              C6963) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
             C13260 * C926 - C13315 * C820) *
                C263 +
            (C13258 * C627 - C13313 * C565 + C13259 * C1515 - C13314 * C1425 +
             C13260 * C1518 - C13315 * C1428) *
                C89247) *
               C89093 * C89308 +
           ((C13313 * C1724 - C13258 * C1828 + C13314 * C4097 - C13259 * C4211 +
             C13315 * C8516 - C13260 * C8600) *
                C263 +
            (C13313 * C2330 - C13258 * C2420 + C13314 * C4767 - C13259 * C4873 +
             C13315 * C8994 - C13260 * C9074) *
                C89247) *
               C89093 * C89217) *
              C89335 +
          (((C13313 * C819 - C13258 * C923 + C13314 * C820 - C13259 * C926 +
             C13315 * C5727 - C13260 * C5787) *
                C263 +
            (C13313 * C1425 - C13258 * C1515 + C13314 * C1428 - C13259 * C1518 +
             C13315 * C6061 - C13260 * C6117) *
                C89247) *
               C89093 * C89308 +
           ((C13258 * C4211 - C13313 * C4097 + C13259 * C8600 - C13314 * C8516 +
             C13260 * C16821 - C13315 * C16683) *
                C263 +
            (C13258 * C4873 - C13313 * C4767 + C13259 * C9074 - C13314 * C8994 +
             C13260 * C17471 - C13315 * C17361) *
                C89247) *
               C89093 * C89217) *
              C89336 +
          (((C13258 * C926 - C13313 * C820 + C13259 * C5787 - C13314 * C5727 +
             C13260 * C13873 - C13315 * C13743) *
                C263 +
            (C13258 * C1518 - C13313 * C1428 + C13259 * C6117 - C13314 * C6061 +
             C13260 * C14421 - C13315 * C14323) *
                C89247) *
               C89093 * C89308 +
           ((C13313 * C8516 - C13258 * C8600 + C13314 * C16683 -
             C13259 * C16821 + C13315 * C21123 - C13260 * C21209) *
                C263 +
            (C13313 * C8994 - C13258 * C9074 + C13314 * C17361 -
             C13259 * C17471 + C13315 * C21605 - C13260 * C21687) *
                C89247) *
               C89093 * C89217) *
              C6963) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eezz[66] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C89236 *
                C89 +
            C735 * C90 + C736 * C91) *
               C89308 -
           (C2547 * C91 + C2548 * C90 +
            (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
                C89236 * C89) *
               C89217) *
              C89335 +
          (((C263 * C4325 - C699 * C4097 - C263 * C4767 + C89247 * C4979) *
                C89236 * C89 +
            C4998 * C90 + C4999 * C91) *
               C89217 -
           (C1642 * C91 + C1643 * C90 +
            (C263 * C1029 - C699 * C819 - C263 * C1425 + C89247 * C1607) *
                C89236 * C89) *
               C89308) *
              C89336 +
          (((C263 * C1032 - C699 * C820 - C263 * C1428 + C89247 * C1608) *
                C89236 * C89 +
            C1644 * C90 + C1645 * C91) *
               C89308 -
           ((C263 * C8682 - C699 * C8514 - C263 * C8996 + C89247 * C9151) *
                C89236 * C91 +
            (C263 * C8681 - C699 * C8515 - C263 * C8995 + C89247 * C9152) *
                C89236 * C90 +
            (C263 * C8680 - C699 * C8516 - C263 * C8994 + C89247 * C9153) *
                C89236 * C89) *
               C89217) *
              C6963) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C13258 +
            C14524 * C13259 + C14525 * C13260) *
               C89093 * C89308 -
           (C17592 * C13260 + C17593 * C13259 +
            (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
                C13258) *
               C89093 * C89217) *
              C89335 +
          ((C17593 * C13258 + C17592 * C13259 + C21770 * C13260) * C89093 *
               C89217 -
           (C14526 * C13260 + C14525 * C13259 + C14524 * C13258) * C89093 *
               C89308) *
              C89336 +
          ((C14525 * C13258 + C14526 * C13259 + C18765 * C13260) * C89093 *
               C89308 -
           ((C263 * C21285 - C699 * C21123 - C263 * C21605 + C89247 * C21762) *
                C13260 +
            C21770 * C13259 + C17592 * C13258) *
               C89093 * C89217) *
              C6963) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eexx[67] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C100 * C112 - C101 * C106 - C100 * C113 + C89 * C124 + C102 * C114 -
           C103 * C107 - C102 * C115 + C90 * C125 + C104 * C116 - C105 * C108 -
           C104 * C117 + C91 * C126) *
              C89247 * C89236 * C89153 * C5720 -
          (C104 * C825 - C105 * C817 - C104 * C826 + C91 * C841 + C102 * C827 -
           C103 * C818 - C102 * C828 + C90 * C842 + C100 * C829 - C101 * C819 -
           C100 * C830 + C89 * C843) *
              C89247 * C89236 * C89153 * C5721 +
          (C100 * C831 - C101 * C820 - C100 * C832 + C89 * C844 + C102 * C833 -
           C103 * C821 - C102 * C834 + C90 * C845 + C104 * C835 - C105 * C822 -
           C104 * C836 + C91 * C846) *
              C89247 * C89236 * C89153 * C5722 -
          (C104 * C5728 - C105 * C5725 - C104 * C5729 + C91 * C5734 +
           C102 * C5730 - C103 * C5726 - C102 * C5731 + C90 * C5735 +
           C100 * C5732 - C101 * C5727 - C100 * C5733 + C89 * C5736) *
              C89247 * C89236 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C112 - C101 * C106 - C100 * C113 + C89 * C124 + C102 * C114 -
            C103 * C107 - C102 * C115 + C90 * C125 + C104 * C116 - C105 * C108 -
            C104 * C117 + C91 * C126) *
               C89247 * C89236 * C89153 * C5073 -
           (C104 * C825 - C105 * C817 - C104 * C826 + C91 * C841 + C102 * C827 -
            C103 * C818 - C102 * C828 + C90 * C842 + C100 * C829 - C101 * C819 -
            C100 * C830 + C89 * C843) *
               C89247 * C89236 * C89153 * C89189) *
              C5075 +
          ((C100 * C827 - C101 * C818 - C100 * C828 + C89 * C842 + C102 * C825 -
            C103 * C817 - C102 * C826 + C90 * C841 + C104 * C837 - C105 * C823 -
            C104 * C838 + C91 * C847) *
               C89247 * C89236 * C89153 * C89189 -
           (C104 * C118 - C105 * C109 - C104 * C119 + C91 * C127 + C102 * C116 -
            C103 * C108 - C102 * C117 + C90 * C126 + C100 * C114 - C101 * C107 -
            C100 * C115 + C89 * C125) *
               C89247 * C89236 * C89153 * C5073) *
              C5076 +
          ((C100 * C116 - C101 * C108 - C100 * C117 + C89 * C126 + C102 * C118 -
            C103 * C109 - C102 * C119 + C90 * C127 + C104 * C120 - C105 * C110 -
            C104 * C121 + C91 * C128) *
               C89247 * C89236 * C89153 * C5073 -
           (C104 * C2630 - C105 * C2629 - C104 * C2631 + C91 * C2632 +
            C102 * C837 - C103 * C823 - C102 * C838 + C90 * C847 + C100 * C825 -
            C101 * C817 - C100 * C826 + C89 * C841) *
               C89247 * C89236 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C112 - C101 * C106 - C100 * C113 + C89 * C124 + C102 * C114 -
            C103 * C107 - C102 * C115 + C90 * C125 + C104 * C116 - C105 * C108 -
            C104 * C117 + C91 * C126) *
               C89247 * C89236 * C1719 -
           (C104 * C1730 - C105 * C1722 - C104 * C1731 + C91 * C1746 +
            C102 * C1732 - C103 * C1723 - C102 * C1733 + C90 * C1747 +
            C100 * C1734 - C101 * C1724 - C100 * C1735 + C89 * C1748) *
               C89247 * C89236 * C1720 +
           (C100 * C1736 - C101 * C1725 - C100 * C1737 + C89 * C1749 +
            C102 * C1738 - C103 * C1726 - C102 * C1739 + C90 * C1750 +
            C104 * C1740 - C105 * C1727 - C104 * C1741 + C91 * C1751) *
               C89247 * C89236 * C1721) *
              C5073 +
          ((C100 * C4101 - C101 * C4097 - C100 * C4102 + C89 * C4109 +
            C102 * C4103 - C103 * C4098 - C102 * C4104 + C90 * C4110 +
            C104 * C4105 - C105 * C4099 - C104 * C4106 + C91 * C4111) *
               C89247 * C89236 * C1720 -
           (C104 * C825 - C105 * C817 - C104 * C826 + C91 * C841 + C102 * C827 -
            C103 * C818 - C102 * C828 + C90 * C842 + C100 * C829 - C101 * C819 -
            C100 * C830 + C89 * C843) *
               C89247 * C89236 * C1719 -
           (C104 * C6250 - C105 * C6247 - C104 * C6251 + C91 * C6256 +
            C102 * C6252 - C103 * C6248 - C102 * C6253 + C90 * C6257 +
            C100 * C6254 - C101 * C6249 - C100 * C6255 + C89 * C6258) *
               C89247 * C89236 * C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                C89247 * C13258 +
            C13794 * C13259 + C13795 * C13260) *
               C89153 * C5073 -
           (C13796 * C13260 + C13795 * C13259 + C13794 * C13258) * C89153 *
               C89189) *
              C5075 +
          ((C13797 * C13258 + C13798 * C13259 + C13799 * C13260) * C89153 *
               C89189 -
           (C13798 * C13260 + C13797 * C13259 +
            (C13261 * C114 - C13262 * C107 - C13261 * C115 + C89093 * C125) *
                C89247 * C13258) *
               C89153 * C5073) *
              C5076 +
          (((C13261 * C116 - C13262 * C108 - C13261 * C117 + C89093 * C126) *
                C89247 * C13258 +
            C15314 * C13259 + C15315 * C13260) *
               C89153 * C5073 -
           ((C13261 * C5728 - C13262 * C5725 - C13261 * C5729 +
             C89093 * C5734) *
                C89247 * C13260 +
            C15315 * C13259 + C15314 * C13258) *
               C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
               C89247 * C13258 +
           C13794 * C13259 + C13795 * C13260) *
              C89153 * C5720 -
          (C13796 * C13260 + C13795 * C13259 + C13794 * C13258) * C89153 *
              C5721 +
          (C13795 * C13258 + C13796 * C13259 + C18322 * C13260) * C89153 *
              C5722 -
          ((C13261 * C18311 - C13262 * C18310 - C13261 * C18312 +
            C89093 * C18313) *
               C89247 * C13260 +
           C18322 * C13259 + C13796 * C13258) *
              C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                C89247 * C13258 +
            C13794 * C13259 + C13795 * C13260) *
               C1719 -
           (C16720 * C13260 + C16721 * C13259 +
            (C13261 * C1734 - C13262 * C1724 - C13261 * C1735 +
             C89093 * C1748) *
                C89247 * C13258) *
               C1720 +
           ((C13261 * C1736 - C13262 * C1725 - C13261 * C1737 +
             C89093 * C1749) *
                C89247 * C13258 +
            C18858 * C13259 + C18859 * C13260) *
               C1721) *
              C5073 +
          ((C16721 * C13258 + C16720 * C13259 +
            (C13261 * C16685 - C13262 * C16683 - C13261 * C16686 +
             C89093 * C16689) *
                C89247 * C13260) *
               C1720 -
           (C13796 * C13260 + C13795 * C13259 + C13794 * C13258) * C1719 -
           ((C13261 * C18840 - C13262 * C18839 - C13261 * C18841 +
             C89093 * C18842) *
                C89247 * C13260 +
            C18859 * C13259 + C18858 * C13258) *
               C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eexy[67] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C89236 * C181 - C180 * C106) * C100 +
           (C89236 * C187 - C180 * C113) * C89 + (C194 - C195) * C102 +
           (C196 - C197) * C90 + C210 * C104 + C211 * C91) *
              C89247 * C89153 * C5720 +
          ((C180 * C819 - C89236 * C923) * C100 +
           (C180 * C830 - C89236 * C931) * C89 + (C940 - C941) * C102 +
           (C942 - C943) * C90 + C2710 * C104 + C2711 * C91) *
              C89247 * C89153 * C5721 +
          ((C89236 * C926 - C180 * C820) * C100 +
           (C89236 * C934 - C180 * C832) * C89 + (C948 - C949) * C102 +
           (C950 - C951) * C90 + (C952 - C953) * C104 + (C954 - C955) * C91) *
              C89247 * C89153 * C5722 +
          ((C180 * C5727 - C89236 * C5787) * C100 +
           (C180 * C5733 - C89236 * C5790) * C89 +
           (C180 * C5726 - C89236 * C5788) * C102 +
           (C180 * C5731 - C89236 * C5791) * C90 +
           (C180 * C5725 - C89236 * C5789) * C104 +
           (C180 * C5729 - C89236 * C5792) * C91) *
              C89247 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C89236 * C181 - C180 * C106) * C100 +
            (C89236 * C187 - C180 * C113) * C89 + (C194 - C195) * C102 +
            (C196 - C197) * C90 + C210 * C104 + C211 * C91) *
               C89247 * C89153 * C5073 +
           ((C180 * C819 - C89236 * C923) * C100 +
            (C180 * C830 - C89236 * C931) * C89 + (C940 - C941) * C102 +
            (C942 - C943) * C90 + C2710 * C104 + C2711 * C91) *
               C89247 * C89153 * C89189) *
              C5075 +
          (((C195 - C194) * C100 + (C197 - C196) * C89 + (C199 - C198) * C102 +
            (C201 - C200) * C90 + C212 * C104 + C213 * C91) *
               C89247 * C89153 * C5073 +
           ((C941 - C940) * C100 + (C943 - C942) * C89 + (C945 - C944) * C102 +
            (C947 - C946) * C90 + (C2712 - C2713) * C104 +
            (C2714 - C2715) * C91) *
               C89247 * C89153 * C89189) *
              C5076 +
          ((C210 * C100 + C211 * C89 + (C203 - C202) * C102 +
            (C205 - C204) * C90 + (C206 - C207) * C104 + (C208 - C209) * C91) *
               C89247 * C89153 * C5073 +
           (C2710 * C100 + C2711 * C89 + (C2713 - C2712) * C102 +
            (C2715 - C2714) * C90 + (C180 * C2629 - C89236 * C2707) * C104 +
            (C180 * C2631 - C89236 * C2708) * C91) *
               C89247 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89236 * C181 - C180 * C106) * C100 +
            (C89236 * C187 - C180 * C113) * C89 + (C194 - C195) * C102 +
            (C196 - C197) * C90 + C210 * C104 + C211 * C91) *
               C89247 * C1719 +
           ((C180 * C1724 - C89236 * C1828) * C100 +
            (C180 * C1735 - C89236 * C1836) * C89 + (C1845 - C1846) * C102 +
            (C1847 - C1848) * C90 + C3433 * C104 + C3434 * C91) *
               C89247 * C1720 +
           ((C89236 * C1831 - C180 * C1725) * C100 +
            (C89236 * C1839 - C180 * C1737) * C89 + (C1853 - C1854) * C102 +
            (C1855 - C1856) * C90 + (C1857 - C1858) * C104 +
            (C1859 - C1860) * C91) *
               C89247 * C1721) *
              C5073 +
          (((C180 * C819 - C89236 * C923) * C100 +
            (C180 * C830 - C89236 * C931) * C89 + (C940 - C941) * C102 +
            (C942 - C943) * C90 + C2710 * C104 + C2711 * C91) *
               C89247 * C1719 +
           ((C89236 * C4211 - C180 * C4097) * C100 +
            (C89236 * C4215 - C180 * C4102) * C89 + (C4220 - C4221) * C102 +
            (C4222 - C4223) * C90 + (C4224 - C4225) * C104 +
            (C4226 - C4227) * C91) *
               C89247 * C1720 +
           ((C180 * C6249 - C89236 * C6333) * C100 +
            (C180 * C6255 - C89236 * C6336) * C89 +
            (C180 * C6248 - C89236 * C6334) * C102 +
            (C180 * C6253 - C89236 * C6337) * C90 +
            (C180 * C6247 - C89236 * C6335) * C104 +
            (C180 * C6251 - C89236 * C6338) * C91) *
               C89247 * C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
             C13260 * C926 - C13315 * C820) *
                C13261 +
            (C13258 * C187 - C13313 * C113 + C13259 * C931 - C13314 * C830 +
             C13260 * C934 - C13315 * C832) *
                C89093) *
               C89247 * C89153 * C5073 +
           ((C13313 * C819 - C13258 * C923 + C13314 * C820 - C13259 * C926 +
             C13315 * C5727 - C13260 * C5787) *
                C13261 +
            (C13313 * C830 - C13258 * C931 + C13314 * C832 - C13259 * C934 +
             C13315 * C5733 - C13260 * C5790) *
                C89093) *
               C89247 * C89153 * C89189) *
              C5075 +
          (((C13313 * C107 - C13258 * C182 + C13314 * C818 - C13259 * C924 +
             C13315 * C821 - C13260 * C927) *
                C13261 +
            (C13313 * C115 - C13258 * C188 + C13314 * C828 - C13259 * C932 +
             C13315 * C834 - C13260 * C935) *
                C89093) *
               C89247 * C89153 * C5073 +
           ((C13258 * C924 - C13313 * C818 + C13259 * C927 - C13314 * C821 +
             C13260 * C5788 - C13315 * C5726) *
                C13261 +
            (C13258 * C932 - C13313 * C828 + C13259 * C935 - C13314 * C834 +
             C13260 * C5791 - C13315 * C5731) *
                C89093) *
               C89247 * C89153 * C89189) *
              C5076 +
          (((C13258 * C183 - C13313 * C108 + C13259 * C925 - C13314 * C817 +
             C13260 * C928 - C13315 * C822) *
                C13261 +
            (C13258 * C189 - C13313 * C117 + C13259 * C933 - C13314 * C826 +
             C13260 * C936 - C13315 * C836) *
                C89093) *
               C89247 * C89153 * C5073 +
           ((C13313 * C817 - C13258 * C925 + C13314 * C822 - C13259 * C928 +
             C13315 * C5725 - C13260 * C5789) *
                C13261 +
            (C13313 * C826 - C13258 * C933 + C13314 * C836 - C13259 * C936 +
             C13315 * C5729 - C13260 * C5792) *
                C89093) *
               C89247 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
            C13260 * C926 - C13315 * C820) *
               C13261 +
           (C13258 * C187 - C13313 * C113 + C13259 * C931 - C13314 * C830 +
            C13260 * C934 - C13315 * C832) *
               C89093) *
              C89247 * C89153 * C5720 +
          ((C13313 * C819 - C13258 * C923 + C13314 * C820 - C13259 * C926 +
            C13315 * C5727 - C13260 * C5787) *
               C13261 +
           (C13313 * C830 - C13258 * C931 + C13314 * C832 - C13259 * C934 +
            C13315 * C5733 - C13260 * C5790) *
               C89093) *
              C89247 * C89153 * C5721 +
          ((C13258 * C926 - C13313 * C820 + C13259 * C5787 - C13314 * C5727 +
            C13260 * C13873 - C13315 * C13743) *
               C13261 +
           (C13258 * C934 - C13313 * C832 + C13259 * C5790 - C13314 * C5733 +
            C13260 * C13875 - C13315 * C13746) *
               C89093) *
              C89247 * C89153 * C5722 +
          ((C13313 * C5727 - C13258 * C5787 + C13314 * C13743 -
            C13259 * C13873 + C13315 * C18310 - C13260 * C18372) *
               C13261 +
           (C13313 * C5733 - C13258 * C5790 + C13314 * C13746 -
            C13259 * C13875 + C13315 * C18312 - C13260 * C18373) *
               C89093) *
              C89247 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
             C13260 * C926 - C13315 * C820) *
                C13261 +
            (C13258 * C187 - C13313 * C113 + C13259 * C931 - C13314 * C830 +
             C13260 * C934 - C13315 * C832) *
                C89093) *
               C89247 * C1719 +
           ((C13313 * C1724 - C13258 * C1828 + C13314 * C4097 - C13259 * C4211 +
             C13315 * C8516 - C13260 * C8600) *
                C13261 +
            (C13313 * C1735 - C13258 * C1836 + C13314 * C4102 - C13259 * C4215 +
             C13315 * C8522 - C13260 * C8603) *
                C89093) *
               C89247 * C1720 +
           ((C13258 * C1831 - C13313 * C1725 + C13259 * C6333 - C13314 * C6249 +
             C13260 * C14683 - C13315 * C14601) *
                C13261 +
            (C13258 * C1839 - C13313 * C1737 + C13259 * C6336 - C13314 * C6255 +
             C13260 * C14685 - C13315 * C14604) *
                C89093) *
               C89247 * C1721) *
              C5073 +
          (((C13313 * C819 - C13258 * C923 + C13314 * C820 - C13259 * C926 +
             C13315 * C5727 - C13260 * C5787) *
                C13261 +
            (C13313 * C830 - C13258 * C931 + C13314 * C832 - C13259 * C934 +
             C13315 * C5733 - C13260 * C5790) *
                C89093) *
               C89247 * C1719 +
           ((C13258 * C4211 - C13313 * C4097 + C13259 * C8600 - C13314 * C8516 +
             C13260 * C16821 - C13315 * C16683) *
                C13261 +
            (C13258 * C4215 - C13313 * C4102 + C13259 * C8603 - C13314 * C8522 +
             C13260 * C16823 - C13315 * C16686) *
                C89093) *
               C89247 * C1720 +
           ((C13313 * C6249 - C13258 * C6333 + C13314 * C14601 -
             C13259 * C14683 + C13315 * C18839 - C13260 * C18933) *
                C13261 +
            (C13313 * C6255 - C13258 * C6336 + C13314 * C14604 -
             C13259 * C14685 + C13315 * C18841 - C13260 * C18934) *
                C89093) *
               C89247 * C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eexz[67] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C89247 * C264 - C263 * C106) * C100 +
           (C89247 * C270 - C263 * C113) * C89 + (C277 - C278) * C102 +
           (C279 - C280) * C90 + C293 * C104 + C294 * C91) *
              C89236 * C89153 * C5720 +
          ((C263 * C819 - C89247 * C1029) * C100 +
           (C263 * C830 - C89247 * C1037) * C89 + (C1046 - C1047) * C102 +
           (C1048 - C1049) * C90 + C2792 * C104 + C2793 * C91) *
              C89236 * C89153 * C5721 +
          ((C89247 * C1032 - C263 * C820) * C100 +
           (C89247 * C1040 - C263 * C832) * C89 + (C1054 - C1055) * C102 +
           (C1056 - C1057) * C90 + (C1058 - C1059) * C104 +
           (C1060 - C1061) * C91) *
              C89236 * C89153 * C5722 +
          ((C263 * C5727 - C89247 * C5843) * C100 +
           (C263 * C5733 - C89247 * C5846) * C89 +
           (C263 * C5726 - C89247 * C5844) * C102 +
           (C263 * C5731 - C89247 * C5847) * C90 +
           (C263 * C5725 - C89247 * C5845) * C104 +
           (C263 * C5729 - C89247 * C5848) * C91) *
              C89236 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C100 +
            (C89247 * C270 - C263 * C113) * C89 + (C277 - C278) * C102 +
            (C279 - C280) * C90 + C293 * C104 + C294 * C91) *
               C89236 * C89153 * C5073 +
           ((C263 * C819 - C89247 * C1029) * C100 +
            (C263 * C830 - C89247 * C1037) * C89 + (C1046 - C1047) * C102 +
            (C1048 - C1049) * C90 + C2792 * C104 + C2793 * C91) *
               C89236 * C89153 * C89189) *
              C5075 +
          (((C278 - C277) * C100 + (C280 - C279) * C89 + (C282 - C281) * C102 +
            (C284 - C283) * C90 + C295 * C104 + C296 * C91) *
               C89236 * C89153 * C5073 +
           ((C1047 - C1046) * C100 + (C1049 - C1048) * C89 +
            (C1051 - C1050) * C102 + (C1053 - C1052) * C90 +
            (C2794 - C2795) * C104 + (C2796 - C2797) * C91) *
               C89236 * C89153 * C89189) *
              C5076 +
          ((C293 * C100 + C294 * C89 + (C286 - C285) * C102 +
            (C288 - C287) * C90 + (C289 - C290) * C104 + (C291 - C292) * C91) *
               C89236 * C89153 * C5073 +
           (C2792 * C100 + C2793 * C89 + (C2795 - C2794) * C102 +
            (C2797 - C2796) * C90 + (C263 * C2629 - C89247 * C2789) * C104 +
            (C263 * C2631 - C89247 * C2790) * C91) *
               C89236 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C100 +
            (C89247 * C270 - C263 * C113) * C89 + (C277 - C278) * C102 +
            (C279 - C280) * C90 + C293 * C104 + C294 * C91) *
               C89236 * C1719 +
           ((C263 * C1724 - C89247 * C1934) * C100 +
            (C263 * C1735 - C89247 * C1942) * C89 + (C1951 - C1952) * C102 +
            (C1953 - C1954) * C90 + C3515 * C104 + C3516 * C91) *
               C89236 * C1720 +
           ((C89247 * C1937 - C263 * C1725) * C100 +
            (C89247 * C1945 - C263 * C1737) * C89 + (C1959 - C1960) * C102 +
            (C1961 - C1962) * C90 + (C1963 - C1964) * C104 +
            (C1965 - C1966) * C91) *
               C89236 * C1721) *
              C5073 +
          (((C263 * C819 - C89247 * C1029) * C100 +
            (C263 * C830 - C89247 * C1037) * C89 + (C1046 - C1047) * C102 +
            (C1048 - C1049) * C90 + C2792 * C104 + C2793 * C91) *
               C89236 * C1719 +
           ((C89247 * C4325 - C263 * C4097) * C100 +
            (C89247 * C4329 - C263 * C4102) * C89 + (C4334 - C4335) * C102 +
            (C4336 - C4337) * C90 + (C4338 - C4339) * C104 +
            (C4340 - C4341) * C91) *
               C89236 * C1720 +
           ((C263 * C6249 - C89247 * C6413) * C100 +
            (C263 * C6255 - C89247 * C6416) * C89 +
            (C263 * C6248 - C89247 * C6414) * C102 +
            (C263 * C6253 - C89247 * C6417) * C90 +
            (C263 * C6247 - C89247 * C6415) * C104 +
            (C263 * C6251 - C89247 * C6418) * C91) *
               C89236 * C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C13261 +
             (C89247 * C270 - C263 * C113) * C89093) *
                C13258 +
            ((C13956 - C13957) * C13261 + (C13958 - C13959) * C89093) * C13259 +
            C13981 * C13260) *
               C89153 * C5073 +
           (((C13957 - C13956) * C13261 + (C13959 - C13958) * C89093) * C13258 +
            ((C13961 - C13960) * C13261 + (C13963 - C13962) * C89093) * C13259 +
            ((C13964 - C13965) * C13261 + (C13966 - C13967) * C89093) *
                C13260) *
               C89153 * C89189) *
              C5075 +
          ((((C278 - C277) * C13261 + (C280 - C279) * C89093) * C13258 +
            ((C1046 - C1047) * C13261 + (C1048 - C1049) * C89093) * C13259 +
            C13980 * C13260) *
               C89153 * C5073 +
           (((C1047 - C1046) * C13261 + (C1049 - C1048) * C89093) * C13258 +
            ((C1054 - C1055) * C13261 + (C1056 - C1057) * C89093) * C13259 +
            ((C13970 - C13971) * C13261 + (C13972 - C13973) * C89093) *
                C13260) *
               C89153 * C89189) *
              C5076 +
          (((C293 * C13261 + C294 * C89093) * C13258 +
            ((C1051 - C1050) * C13261 + (C1053 - C1052) * C89093) * C13259 +
            ((C1058 - C1059) * C13261 + (C1060 - C1061) * C89093) * C13260) *
               C89153 * C5073 +
           ((C2792 * C13261 + C2793 * C89093) * C13258 +
            ((C1059 - C1058) * C13261 + (C1061 - C1060) * C89093) * C13259 +
            ((C263 * C5725 - C89247 * C5845) * C13261 +
             (C263 * C5729 - C89247 * C5848) * C89093) *
                C13260) *
               C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C13261 +
            (C89247 * C270 - C263 * C113) * C89093) *
               C13258 +
           ((C13956 - C13957) * C13261 + (C13958 - C13959) * C89093) * C13259 +
           C13981 * C13260) *
              C89153 * C5720 +
          (((C13957 - C13956) * C13261 + (C13959 - C13958) * C89093) * C13258 +
           ((C13961 - C13960) * C13261 + (C13963 - C13962) * C89093) * C13259 +
           C18435 * C13260) *
              C89153 * C5721 +
          (C13981 * C13258 +
           ((C13965 - C13964) * C13261 + (C13967 - C13966) * C89093) * C13259 +
           ((C18429 - C18430) * C13261 + (C18431 - C18432) * C89093) * C13260) *
              C89153 * C5722 +
          (C18435 * C13258 +
           ((C18430 - C18429) * C13261 + (C18432 - C18431) * C89093) * C13259 +
           ((C263 * C18310 - C89247 * C18424) * C13261 +
            (C263 * C18312 - C89247 * C18425) * C89093) *
               C13260) *
              C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C13261 +
             (C89247 * C270 - C263 * C113) * C89093) *
                C13258 +
            ((C13956 - C13957) * C13261 + (C13958 - C13959) * C89093) * C13259 +
            C13981 * C13260) *
               C1719 +
           (((C263 * C1724 - C89247 * C1934) * C13261 +
             (C263 * C1735 - C89247 * C1942) * C89093) *
                C13258 +
            ((C16928 - C16929) * C13261 + (C16930 - C16931) * C89093) * C13259 +
            ((C16932 - C16933) * C13261 + (C16934 - C16935) * C89093) *
                C13260) *
               C1720 +
           (((C89247 * C1937 - C263 * C1725) * C13261 +
             (C89247 * C1945 - C263 * C1737) * C89093) *
                C13258 +
            ((C19012 - C19013) * C13261 + (C19014 - C19015) * C89093) * C13259 +
            ((C19016 - C19017) * C13261 + (C19018 - C19019) * C89093) *
                C13260) *
               C1721) *
              C5073 +
          ((((C13957 - C13956) * C13261 + (C13959 - C13958) * C89093) * C13258 +
            ((C13961 - C13960) * C13261 + (C13963 - C13962) * C89093) * C13259 +
            C18435 * C13260) *
               C1719 +
           (((C16929 - C16928) * C13261 + (C16931 - C16930) * C89093) * C13258 +
            ((C16933 - C16932) * C13261 + (C16935 - C16934) * C89093) * C13259 +
            ((C89247 * C16923 - C263 * C16683) * C13261 +
             (C89247 * C16925 - C263 * C16686) * C89093) *
                C13260) *
               C1720 +
           (((C19013 - C19012) * C13261 + (C19015 - C19014) * C89093) * C13258 +
            ((C19017 - C19016) * C13261 + (C19019 - C19018) * C89093) * C13259 +
            ((C263 * C18839 - C89247 * C19009) * C13261 +
             (C263 * C18841 - C89247 * C19010) * C89093) *
                C13260) *
               C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eeyx[67] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   (((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 +
                      C91 * C116 - C104 * C108) *
                         C180 +
                     (C89 * C352 - C100 * C346 + C90 * C353 - C102 * C347 +
                      C91 * C354 - C104 * C348) *
                         C89236) *
                        C89247 * C89153 * C5720 +
                    ((C100 * C819 - C89 * C829 + C102 * C818 - C90 * C827 +
                      C104 * C817 - C91 * C825) *
                         C180 +
                     (C100 * C1135 - C89 * C1143 + C102 * C1136 - C90 * C1144 +
                      C104 * C1137 - C91 * C1145) *
                         C89236) *
                        C89247 * C89153 * C5721 +
                    ((C89 * C831 - C100 * C820 + C90 * C833 - C102 * C821 +
                      C91 * C835 - C104 * C822) *
                         C180 +
                     (C89 * C1146 - C100 * C1138 + C90 * C1147 - C102 * C1139 +
                      C91 * C1148 - C104 * C1140) *
                         C89236) *
                        C89247 * C89153 * C5722 +
                    ((C100 * C5727 - C89 * C5732 + C102 * C5726 - C90 * C5730 +
                      C104 * C5725 - C91 * C5728) *
                         C180 +
                     (C100 * C5899 - C89 * C5902 + C102 * C5900 - C90 * C5903 +
                      C104 * C5901 - C91 * C5904) *
                         C89236) *
                        C89247 * C89153 * C5723) *
                   C89118) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 +
                       C91 * C116 - C104 * C108) *
                          C180 +
                      (C89 * C352 - C100 * C346 + C90 * C353 - C102 * C347 +
                       C91 * C354 - C104 * C348) *
                          C89236) *
                         C89247 * C89153 * C5073 +
                     ((C100 * C819 - C89 * C829 + C102 * C818 - C90 * C827 +
                       C104 * C817 - C91 * C825) *
                          C180 +
                      (C100 * C1135 - C89 * C1143 + C102 * C1136 - C90 * C1144 +
                       C104 * C1137 - C91 * C1145) *
                          C89236) *
                         C89247 * C89153 * C89189) *
                        C5075 +
                    (((C100 * C107 - C89 * C114 + C102 * C108 - C90 * C116 +
                       C104 * C109 - C91 * C118) *
                          C180 +
                      (C100 * C347 - C89 * C353 + C102 * C348 - C90 * C354 +
                       C104 * C349 - C91 * C355) *
                          C89236) *
                         C89247 * C89153 * C5073 +
                     ((C89 * C827 - C100 * C818 + C90 * C825 - C102 * C817 +
                       C91 * C837 - C104 * C823) *
                          C180 +
                      (C89 * C1144 - C100 * C1136 + C90 * C1145 - C102 * C1137 +
                       C91 * C1149 - C104 * C1141) *
                          C89236) *
                         C89247 * C89153 * C89189) *
                        C5076 +
                    (((C89 * C116 - C100 * C108 + C90 * C118 - C102 * C109 +
                       C91 * C120 - C104 * C110) *
                          C180 +
                      (C89 * C354 - C100 * C348 + C90 * C355 - C102 * C349 +
                       C91 * C356 - C104 * C350) *
                          C89236) *
                         C89247 * C89153 * C5073 +
                     ((C100 * C817 - C89 * C825 + C102 * C823 - C90 * C837 +
                       C104 * C2629 - C91 * C2630) *
                          C180 +
                      (C100 * C1137 - C89 * C1145 + C102 * C1141 - C90 * C1149 +
                       C104 * C2871 - C91 * C2872) *
                          C89236) *
                         C89247 * C89153 * C89189) *
                        C5077)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 +
                       C91 * C116 - C104 * C108) *
                          C180 +
                      (C89 * C352 - C100 * C346 + C90 * C353 - C102 * C347 +
                       C91 * C354 - C104 * C348) *
                          C89236) *
                         C89247 * C1719 +
                     ((C100 * C1724 - C89 * C1734 + C102 * C1723 - C90 * C1732 +
                       C104 * C1722 - C91 * C1730) *
                          C180 +
                      (C100 * C2040 - C89 * C2048 + C102 * C2041 - C90 * C2049 +
                       C104 * C2042 - C91 * C2050) *
                          C89236) *
                         C89247 * C1720 +
                     ((C89 * C1736 - C100 * C1725 + C90 * C1738 - C102 * C1726 +
                       C91 * C1740 - C104 * C1727) *
                          C180 +
                      (C89 * C2051 - C100 * C2043 + C90 * C2052 - C102 * C2044 +
                       C91 * C2053 - C104 * C2045) *
                          C89236) *
                         C89247 * C1721) *
                        C5073 +
                    (((C100 * C819 - C89 * C829 + C102 * C818 - C90 * C827 +
                       C104 * C817 - C91 * C825) *
                          C180 +
                      (C100 * C1135 - C89 * C1143 + C102 * C1136 - C90 * C1144 +
                       C104 * C1137 - C91 * C1145) *
                          C89236) *
                         C89247 * C1719 +
                     ((C89 * C4101 - C100 * C4097 + C90 * C4103 - C102 * C4098 +
                       C91 * C4105 - C104 * C4099) *
                          C180 +
                      (C89 * C4443 - C100 * C4439 + C90 * C4444 - C102 * C4440 +
                       C91 * C4445 - C104 * C4441) *
                          C89236) *
                         C89247 * C1720 +
                     ((C100 * C6249 - C89 * C6254 + C102 * C6248 - C90 * C6252 +
                       C104 * C6247 - C91 * C6250) *
                          C180 +
                      (C100 * C6493 - C89 * C6496 + C102 * C6494 - C90 * C6497 +
                       C104 * C6495 - C91 * C6498) *
                          C89236) *
                         C89247 * C1721) *
                        C89189) *
                   C89118) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C89093 * C112 - C13261 * C106) * C13313 +
                      (C89093 * C352 - C13261 * C346) * C13258 +
                      (C14060 - C14061) * C13314 + (C14062 - C14063) * C13259 +
                      C14084 * C13315 + C14085 * C13260) *
                         C89247 * C89153 * C5073 +
                     ((C14061 - C14060) * C13313 + (C14063 - C14062) * C13258 +
                      (C14065 - C14064) * C13314 + (C14067 - C14066) * C13259 +
                      (C14068 - C14069) * C13315 + (C14070 - C14071) * C13260) *
                         C89247 * C89153 * C89189) *
                        C5075 +
                    (((C13261 * C107 - C89093 * C114) * C13313 +
                      (C13261 * C347 - C89093 * C353) * C13258 +
                      (C14072 - C14073) * C13314 + (C14074 - C14075) * C13259 +
                      C14086 * C13315 + C14087 * C13260) *
                         C89247 * C89153 * C5073 +
                     ((C14073 - C14072) * C13313 + (C14075 - C14074) * C13258 +
                      (C14077 - C14076) * C13314 + (C14079 - C14078) * C13259 +
                      (C14080 - C14081) * C13315 + (C14082 - C14083) * C13260) *
                         C89247 * C89153 * C89189) *
                        C5076 +
                    (((C89093 * C116 - C13261 * C108) * C13313 +
                      (C89093 * C354 - C13261 * C348) * C13258 +
                      (C15538 - C15539) * C13314 + (C15540 - C15541) * C13259 +
                      (C15542 - C15543) * C13315 + (C15544 - C15545) * C13260) *
                         C89247 * C89153 * C5073 +
                     ((C15539 - C15538) * C13313 + (C15541 - C15540) * C13258 +
                      (C15543 - C15542) * C13314 + (C15545 - C15544) * C13259 +
                      (C13261 * C5725 - C89093 * C5728) * C13315 +
                      (C13261 * C5901 - C89093 * C5904) * C13260) *
                         C89247 * C89153 * C89189) *
                        C5077)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   (((C89093 * C112 - C13261 * C106) * C13313 +
                     (C89093 * C352 - C13261 * C346) * C13258 +
                     (C14060 - C14061) * C13314 + (C14062 - C14063) * C13259 +
                     C14084 * C13315 + C14085 * C13260) *
                        C89247 * C89153 * C5720 +
                    ((C14061 - C14060) * C13313 + (C14063 - C14062) * C13258 +
                     (C14065 - C14064) * C13314 + (C14067 - C14066) * C13259 +
                     C18488 * C13315 + C18489 * C13260) *
                        C89247 * C89153 * C5721 +
                    (C14084 * C13313 + C14085 * C13258 +
                     (C14069 - C14068) * C13314 + (C14071 - C14070) * C13259 +
                     (C18490 - C18491) * C13315 + (C18492 - C18493) * C13260) *
                        C89247 * C89153 * C5722 +
                    (C18488 * C13313 + C18489 * C13258 +
                     (C18491 - C18490) * C13314 + (C18493 - C18492) * C13259 +
                     (C13261 * C18310 - C89093 * C18311) * C13315 +
                     (C13261 * C18485 - C89093 * C18486) * C13260) *
                        C89247 * C89153 * C5723) *
                   C89118) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C89093 * C112 - C13261 * C106) * C13313 +
                      (C89093 * C352 - C13261 * C346) * C13258 +
                      (C14060 - C14061) * C13314 + (C14062 - C14063) * C13259 +
                      C14084 * C13315 + C14085 * C13260) *
                         C89247 * C1719 +
                     ((C13261 * C1724 - C89093 * C1734) * C13313 +
                      (C13261 * C2040 - C89093 * C2048) * C13258 +
                      (C17042 - C17043) * C13314 + (C17044 - C17045) * C13259 +
                      (C17046 - C17047) * C13315 + (C17048 - C17049) * C13260) *
                         C89247 * C1720 +
                     ((C89093 * C1736 - C13261 * C1725) * C13313 +
                      (C89093 * C2051 - C13261 * C2043) * C13258 +
                      (C19096 - C19097) * C13314 + (C19098 - C19099) * C13259 +
                      (C19100 - C19101) * C13315 + (C19102 - C19103) * C13260) *
                         C89247 * C1721) *
                        C5073 +
                    (((C14061 - C14060) * C13313 + (C14063 - C14062) * C13258 +
                      (C14065 - C14064) * C13314 + (C14067 - C14066) * C13259 +
                      C18488 * C13315 + C18489 * C13260) *
                         C89247 * C1719 +
                     ((C17043 - C17042) * C13313 + (C17045 - C17044) * C13258 +
                      (C17047 - C17046) * C13314 + (C17049 - C17048) * C13259 +
                      (C89093 * C16685 - C13261 * C16683) * C13315 +
                      (C89093 * C17039 - C13261 * C17037) * C13260) *
                         C89247 * C1720 +
                     ((C19097 - C19096) * C13313 + (C19099 - C19098) * C13258 +
                      (C19101 - C19100) * C13314 + (C19103 - C19102) * C13259 +
                      (C13261 * C18839 - C89093 * C18840) * C13315 +
                      (C13261 * C19093 - C89093 * C19094) * C13260) *
                         C89247 * C1721) *
                        C89189) *
                   C89118) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[67] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C89 +
           C440 * C90 + C441 * C91) *
              C89247 * C89153 * C5720 -
          (C1258 * C91 + C1259 * C90 +
           (C180 * C923 - C408 * C819 - C180 * C1135 + C89236 * C1227) * C89) *
              C89247 * C89153 * C5721 +
          ((C180 * C926 - C408 * C820 - C180 * C1138 + C89236 * C1228) * C89 +
           C1260 * C90 + C1261 * C91) *
              C89247 * C89153 * C5722 -
          ((C180 * C5789 - C408 * C5725 - C180 * C5901 + C89236 * C5955) * C91 +
           (C180 * C5788 - C408 * C5726 - C180 * C5900 + C89236 * C5956) * C90 +
           (C180 * C5787 - C408 * C5727 - C180 * C5899 + C89236 * C5957) *
               C89) *
              C89247 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C89 +
            C440 * C90 + C441 * C91) *
               C89247 * C89153 * C5073 -
           (C1258 * C91 + C1259 * C90 +
            (C180 * C923 - C408 * C819 - C180 * C1135 + C89236 * C1227) * C89) *
               C89247 * C89153 * C89189) *
              C5075 +
          ((C1259 * C89 + C1258 * C90 + C2955 * C91) * C89247 * C89153 *
               C89189 -
           (C442 * C91 + C441 * C90 + C440 * C89) * C89247 * C89153 * C5073) *
              C5076 +
          ((C441 * C89 + C442 * C90 + C443 * C91) * C89247 * C89153 * C5073 -
           ((C180 * C2707 - C408 * C2629 - C180 * C2871 + C89236 * C2947) *
                C91 +
            C2955 * C90 + C1258 * C89) *
               C89247 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C89 +
            C440 * C90 + C441 * C91) *
               C89247 * C1719 -
           (C2163 * C91 + C2164 * C90 +
            (C180 * C1828 - C408 * C1724 - C180 * C2040 + C89236 * C2132) *
                C89) *
               C89247 * C1720 +
           ((C180 * C1831 - C408 * C1725 - C180 * C2043 + C89236 * C2133) *
                C89 +
            C2165 * C90 + C2166 * C91) *
               C89247 * C1721) *
              C5073 +
          (((C180 * C4211 - C408 * C4097 - C180 * C4439 + C89236 * C4545) *
                C89 +
            C4562 * C90 + C4563 * C91) *
               C89247 * C1720 -
           (C1258 * C91 + C1259 * C90 +
            (C180 * C923 - C408 * C819 - C180 * C1135 + C89236 * C1227) * C89) *
               C89247 * C1719 -
           ((C180 * C6335 - C408 * C6247 - C180 * C6495 + C89236 * C6573) *
                C91 +
            (C180 * C6334 - C408 * C6248 - C180 * C6494 + C89236 * C6574) *
                C90 +
            (C180 * C6333 - C408 * C6249 - C180 * C6493 + C89236 * C6575) *
                C89) *
               C89247 * C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13313 * C181 - C13466 * C106 - C13313 * C346 + C13258 * C409 +
            C13314 * C923 - C13467 * C819 - C13314 * C1135 + C13259 * C1227 +
            C13315 * C926 - C13468 * C820 - C13315 * C1138 + C13260 * C1228) *
               C89093 * C89247 * C89153 * C5073 -
           (C13315 * C5787 - C13468 * C5727 - C13315 * C5899 + C13260 * C5957 +
            C13314 * C926 - C13467 * C820 - C13314 * C1138 + C13259 * C1228 +
            C13313 * C923 - C13466 * C819 - C13313 * C1135 + C13258 * C1227) *
               C89093 * C89247 * C89153 * C89189) *
              C5075 +
          ((C13313 * C924 - C13466 * C818 - C13313 * C1136 + C13258 * C1226 +
            C13314 * C927 - C13467 * C821 - C13314 * C1139 + C13259 * C1229 +
            C13315 * C5788 - C13468 * C5726 - C13315 * C5900 + C13260 * C5956) *
               C89093 * C89247 * C89153 * C89189 -
           (C13315 * C927 - C13468 * C821 - C13315 * C1139 + C13260 * C1229 +
            C13314 * C924 - C13467 * C818 - C13314 * C1136 + C13259 * C1226 +
            C13313 * C182 - C13466 * C107 - C13313 * C347 + C13258 * C410) *
               C89093 * C89247 * C89153 * C5073) *
              C5076 +
          ((C13313 * C183 - C13466 * C108 - C13313 * C348 + C13258 * C411 +
            C13314 * C925 - C13467 * C817 - C13314 * C1137 + C13259 * C1225 +
            C13315 * C928 - C13468 * C822 - C13315 * C1140 + C13260 * C1230) *
               C89093 * C89247 * C89153 * C5073 -
           (C13315 * C5789 - C13468 * C5725 - C13315 * C5901 + C13260 * C5955 +
            C13314 * C928 - C13467 * C822 - C13314 * C1140 + C13259 * C1230 +
            C13313 * C925 - C13466 * C817 - C13313 * C1137 + C13258 * C1225) *
               C89093 * C89247 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C13313 * C181 - C13466 * C106 - C13313 * C346 + C13258 * C409 +
           C13314 * C923 - C13467 * C819 - C13314 * C1135 + C13259 * C1227 +
           C13315 * C926 - C13468 * C820 - C13315 * C1138 + C13260 * C1228) *
              C89093 * C89247 * C89153 * C5720 -
          (C13315 * C5787 - C13468 * C5727 - C13315 * C5899 + C13260 * C5957 +
           C13314 * C926 - C13467 * C820 - C13314 * C1138 + C13259 * C1228 +
           C13313 * C923 - C13466 * C819 - C13313 * C1135 + C13258 * C1227) *
              C89093 * C89247 * C89153 * C5721 +
          (C13313 * C926 - C13466 * C820 - C13313 * C1138 + C13258 * C1228 +
           C13314 * C5787 - C13467 * C5727 - C13314 * C5899 + C13259 * C5957 +
           C13315 * C13873 - C13468 * C13743 - C13315 * C14055 +
           C13260 * C14161) *
              C89093 * C89247 * C89153 * C5722 -
          (C13315 * C18372 - C13468 * C18310 - C13315 * C18485 +
           C13260 * C18543 + C13314 * C13873 - C13467 * C13743 -
           C13314 * C14055 + C13259 * C14161 + C13313 * C5787 - C13466 * C5727 -
           C13313 * C5899 + C13258 * C5957) *
              C89093 * C89247 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13313 * C181 - C13466 * C106 - C13313 * C346 + C13258 * C409 +
            C13314 * C923 - C13467 * C819 - C13314 * C1135 + C13259 * C1227 +
            C13315 * C926 - C13468 * C820 - C13315 * C1138 + C13260 * C1228) *
               C89093 * C89247 * C1719 -
           (C13315 * C8600 - C13468 * C8516 - C13315 * C8760 + C13260 * C8842 +
            C13314 * C4211 - C13467 * C4097 - C13314 * C4439 + C13259 * C4545 +
            C13313 * C1828 - C13466 * C1724 - C13313 * C2040 + C13258 * C2132) *
               C89093 * C89247 * C1720 +
           (C13313 * C1831 - C13466 * C1725 - C13313 * C2043 + C13258 * C2133 +
            C13314 * C6333 - C13467 * C6249 - C13314 * C6493 + C13259 * C6575 +
            C13315 * C14683 - C13468 * C14601 - C13315 * C14839 +
            C13260 * C14917) *
               C89093 * C89247 * C1721) *
              C5073 +
          ((C13313 * C4211 - C13466 * C4097 - C13313 * C4439 + C13258 * C4545 +
            C13314 * C8600 - C13467 * C8516 - C13314 * C8760 + C13259 * C8842 +
            C13315 * C16821 - C13468 * C16683 - C13315 * C17037 +
            C13260 * C17155) *
               C89093 * C89247 * C1720 -
           (C13315 * C5787 - C13468 * C5727 - C13315 * C5899 + C13260 * C5957 +
            C13314 * C926 - C13467 * C820 - C13314 * C1138 + C13259 * C1228 +
            C13313 * C923 - C13466 * C819 - C13313 * C1135 + C13258 * C1227) *
               C89093 * C89247 * C1719 -
           (C13315 * C18933 - C13468 * C18839 - C13315 * C19093 +
            C13260 * C19177 + C13314 * C14683 - C13467 * C14601 -
            C13314 * C14839 + C13259 * C14917 + C13313 * C6333 -
            C13466 * C6249 - C13313 * C6493 + C13258 * C6575) *
               C89093 * C89247 * C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eeyz[67] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C180 +
            (C89247 * C493 - C263 * C346) * C89236) *
               C89 +
           ((C277 - C278) * C180 + (C500 - C501) * C89236) * C90 + C514 * C91) *
              C89153 * C5720 +
          (((C263 * C819 - C89247 * C1029) * C180 +
            (C263 * C1135 - C89247 * C1335) * C89236) *
               C89 +
           ((C1046 - C1047) * C180 + (C1344 - C1345) * C89236) * C90 +
           C3036 * C91) *
              C89153 * C5721 +
          (((C89247 * C1032 - C263 * C820) * C180 +
            (C89247 * C1338 - C263 * C1138) * C89236) *
               C89 +
           ((C1054 - C1055) * C180 + (C1348 - C1349) * C89236) * C90 +
           ((C1058 - C1059) * C180 + (C1350 - C1351) * C89236) * C91) *
              C89153 * C5722 +
          (((C263 * C5727 - C89247 * C5843) * C180 +
            (C263 * C5899 - C89247 * C6008) * C89236) *
               C89 +
           ((C263 * C5726 - C89247 * C5844) * C180 +
            (C263 * C5900 - C89247 * C6009) * C89236) *
               C90 +
           ((C263 * C5725 - C89247 * C5845) * C180 +
            (C263 * C5901 - C89247 * C6010) * C89236) *
               C91) *
              C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C180 +
             (C89247 * C493 - C263 * C346) * C89236) *
                C89 +
            ((C277 - C278) * C180 + (C500 - C501) * C89236) * C90 +
            C514 * C91) *
               C89153 * C5073 +
           (((C263 * C819 - C89247 * C1029) * C180 +
             (C263 * C1135 - C89247 * C1335) * C89236) *
                C89 +
            ((C1046 - C1047) * C180 + (C1344 - C1345) * C89236) * C90 +
            C3036 * C91) *
               C89153 * C89189) *
              C5075 +
          ((((C278 - C277) * C180 + (C501 - C500) * C89236) * C89 +
            ((C282 - C281) * C180 + (C504 - C503) * C89236) * C90 +
            C515 * C91) *
               C89153 * C5073 +
           (((C1047 - C1046) * C180 + (C1345 - C1344) * C89236) * C89 +
            ((C1051 - C1050) * C180 + (C1347 - C1346) * C89236) * C90 +
            ((C2794 - C2795) * C180 + (C3033 - C3034) * C89236) * C91) *
               C89153 * C89189) *
              C5076 +
          ((C514 * C89 + ((C286 - C285) * C180 + (C507 - C506) * C89236) * C90 +
            ((C289 - C290) * C180 + (C508 - C509) * C89236) * C91) *
               C89153 * C5073 +
           (C3036 * C89 +
            ((C2795 - C2794) * C180 + (C3034 - C3033) * C89236) * C90 +
            ((C263 * C2629 - C89247 * C2789) * C180 +
             (C263 * C2871 - C89247 * C3029) * C89236) *
                C91) *
               C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C180 +
             (C89247 * C493 - C263 * C346) * C89236) *
                C89 +
            ((C277 - C278) * C180 + (C500 - C501) * C89236) * C90 +
            C514 * C91) *
               C1719 +
           (((C263 * C1724 - C89247 * C1934) * C180 +
             (C263 * C2040 - C89247 * C2240) * C89236) *
                C89 +
            ((C1951 - C1952) * C180 + (C2249 - C2250) * C89236) * C90 +
            C3759 * C91) *
               C1720 +
           (((C89247 * C1937 - C263 * C1725) * C180 +
             (C89247 * C2243 - C263 * C2043) * C89236) *
                C89 +
            ((C1959 - C1960) * C180 + (C2253 - C2254) * C89236) * C90 +
            ((C1963 - C1964) * C180 + (C2255 - C2256) * C89236) * C91) *
               C1721) *
              C5073 +
          ((((C263 * C819 - C89247 * C1029) * C180 +
             (C263 * C1135 - C89247 * C1335) * C89236) *
                C89 +
            ((C1046 - C1047) * C180 + (C1344 - C1345) * C89236) * C90 +
            C3036 * C91) *
               C1719 +
           (((C89247 * C4325 - C263 * C4097) * C180 +
             (C89247 * C4661 - C263 * C4439) * C89236) *
                C89 +
            ((C4334 - C4335) * C180 + (C4666 - C4667) * C89236) * C90 +
            ((C4338 - C4339) * C180 + (C4668 - C4669) * C89236) * C91) *
               C1720 +
           (((C263 * C6249 - C89247 * C6413) * C180 +
             (C263 * C6493 - C89247 * C6650) * C89236) *
                C89 +
            ((C263 * C6248 - C89247 * C6414) * C180 +
             (C263 * C6494 - C89247 * C6651) * C89236) *
                C90 +
            ((C263 * C6247 - C89247 * C6415) * C180 +
             (C263 * C6495 - C89247 * C6652) * C89236) *
                C91) *
               C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C13313 +
            (C89247 * C493 - C263 * C346) * C13258 +
            (C13956 - C13957) * C13314 + (C14240 - C14241) * C13259 +
            C13974 * C13315 + C14249 * C13260) *
               C89093 * C89153 * C5073 +
           ((C13957 - C13956) * C13313 + (C14241 - C14240) * C13258 +
            (C13961 - C13960) * C13314 + (C14243 - C14242) * C13259 +
            (C13964 - C13965) * C13315 + (C14244 - C14245) * C13260) *
               C89093 * C89153 * C89189) *
              C5075 +
          (((C278 - C277) * C13313 + (C501 - C500) * C13258 +
            (C1046 - C1047) * C13314 + (C1344 - C1345) * C13259 +
            C13968 * C13315 + C14246 * C13260) *
               C89093 * C89153 * C5073 +
           ((C1047 - C1046) * C13313 + (C1345 - C1344) * C13258 +
            (C1054 - C1055) * C13314 + (C1348 - C1349) * C13259 +
            (C13970 - C13971) * C13315 + (C14247 - C14248) * C13260) *
               C89093 * C89153 * C89189) *
              C5076 +
          ((C293 * C13313 + C510 * C13258 + (C1051 - C1050) * C13314 +
            (C1347 - C1346) * C13259 + (C1058 - C1059) * C13315 +
            (C1350 - C1351) * C13260) *
               C89093 * C89153 * C5073 +
           (C2792 * C13313 + C3032 * C13258 + (C1059 - C1058) * C13314 +
            (C1351 - C1350) * C13259 +
            (C263 * C5725 - C89247 * C5845) * C13315 +
            (C263 * C5901 - C89247 * C6010) * C13260) *
               C89093 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C89247 * C264 - C263 * C106) * C13313 +
           (C89247 * C493 - C263 * C346) * C13258 + (C13956 - C13957) * C13314 +
           (C14240 - C14241) * C13259 + C13974 * C13315 + C14249 * C13260) *
              C89093 * C89153 * C5720 +
          ((C13957 - C13956) * C13313 + (C14241 - C14240) * C13258 +
           (C13961 - C13960) * C13314 + (C14243 - C14242) * C13259 +
           C18427 * C13315 + C18596 * C13260) *
              C89093 * C89153 * C5721 +
          (C13974 * C13313 + C14249 * C13258 + (C13965 - C13964) * C13314 +
           (C14245 - C14244) * C13259 + (C18429 - C18430) * C13315 +
           (C18597 - C18598) * C13260) *
              C89093 * C89153 * C5722 +
          (C18427 * C13313 + C18596 * C13258 + (C18430 - C18429) * C13314 +
           (C18598 - C18597) * C13259 +
           (C263 * C18310 - C89247 * C18424) * C13315 +
           (C263 * C18485 - C89247 * C18594) * C13260) *
              C89093 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C13313 +
            (C89247 * C493 - C263 * C346) * C13258 +
            (C13956 - C13957) * C13314 + (C14240 - C14241) * C13259 +
            C13974 * C13315 + C14249 * C13260) *
               C89093 * C1719 +
           ((C263 * C1724 - C89247 * C1934) * C13313 +
            (C263 * C2040 - C89247 * C2240) * C13258 +
            (C16928 - C16929) * C13314 + (C17258 - C17259) * C13259 +
            (C16932 - C16933) * C13315 + (C17260 - C17261) * C13260) *
               C89093 * C1720 +
           ((C89247 * C1937 - C263 * C1725) * C13313 +
            (C89247 * C2243 - C263 * C2043) * C13258 +
            (C19012 - C19013) * C13314 + (C19254 - C19255) * C13259 +
            (C19016 - C19017) * C13315 + (C19256 - C19257) * C13260) *
               C89093 * C1721) *
              C5073 +
          (((C13957 - C13956) * C13313 + (C14241 - C14240) * C13258 +
            (C13961 - C13960) * C13314 + (C14243 - C14242) * C13259 +
            C18427 * C13315 + C18596 * C13260) *
               C89093 * C1719 +
           ((C16929 - C16928) * C13313 + (C17259 - C17258) * C13258 +
            (C16933 - C16932) * C13314 + (C17261 - C17260) * C13259 +
            (C89247 * C16923 - C263 * C16683) * C13315 +
            (C89247 * C17255 - C263 * C17037) * C13260) *
               C89093 * C1720 +
           ((C19013 - C19012) * C13313 + (C19255 - C19254) * C13258 +
            (C19017 - C19016) * C13314 + (C19257 - C19256) * C13259 +
            (C263 * C18839 - C89247 * C19009) * C13315 +
            (C263 * C19093 - C89247 * C19252) * C13260) *
               C89093 * C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eezx[67] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 + C91 * C116 -
            C104 * C108) *
               C263 +
           (C89 * C571 - C100 * C565 + C90 * C572 - C102 * C566 + C91 * C573 -
            C104 * C567) *
               C89247) *
              C89236 * C89153 * C5720 +
          ((C100 * C819 - C89 * C829 + C102 * C818 - C90 * C827 + C104 * C817 -
            C91 * C825) *
               C263 +
           (C100 * C1425 - C89 * C1433 + C102 * C1426 - C90 * C1434 +
            C104 * C1427 - C91 * C1435) *
               C89247) *
              C89236 * C89153 * C5721 +
          ((C89 * C831 - C100 * C820 + C90 * C833 - C102 * C821 + C91 * C835 -
            C104 * C822) *
               C263 +
           (C89 * C1436 - C100 * C1428 + C90 * C1437 - C102 * C1429 +
            C91 * C1438 - C104 * C1430) *
               C89247) *
              C89236 * C89153 * C5722 +
          ((C100 * C5727 - C89 * C5732 + C102 * C5726 - C90 * C5730 +
            C104 * C5725 - C91 * C5728) *
               C263 +
           (C100 * C6061 - C89 * C6064 + C102 * C6062 - C90 * C6065 +
            C104 * C6063 - C91 * C6066) *
               C89247) *
              C89236 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 + C91 * C116 -
             C104 * C108) *
                C263 +
            (C89 * C571 - C100 * C565 + C90 * C572 - C102 * C566 + C91 * C573 -
             C104 * C567) *
                C89247) *
               C89236 * C89153 * C5073 +
           ((C100 * C819 - C89 * C829 + C102 * C818 - C90 * C827 + C104 * C817 -
             C91 * C825) *
                C263 +
            (C100 * C1425 - C89 * C1433 + C102 * C1426 - C90 * C1434 +
             C104 * C1427 - C91 * C1435) *
                C89247) *
               C89236 * C89153 * C89189) *
              C5075 +
          (((C100 * C107 - C89 * C114 + C102 * C108 - C90 * C116 + C104 * C109 -
             C91 * C118) *
                C263 +
            (C100 * C566 - C89 * C572 + C102 * C567 - C90 * C573 + C104 * C568 -
             C91 * C574) *
                C89247) *
               C89236 * C89153 * C5073 +
           ((C89 * C827 - C100 * C818 + C90 * C825 - C102 * C817 + C91 * C837 -
             C104 * C823) *
                C263 +
            (C89 * C1434 - C100 * C1426 + C90 * C1435 - C102 * C1427 +
             C91 * C1439 - C104 * C1431) *
                C89247) *
               C89236 * C89153 * C89189) *
              C5076 +
          (((C89 * C116 - C100 * C108 + C90 * C118 - C102 * C109 + C91 * C120 -
             C104 * C110) *
                C263 +
            (C89 * C573 - C100 * C567 + C90 * C574 - C102 * C568 + C91 * C575 -
             C104 * C569) *
                C89247) *
               C89236 * C89153 * C5073 +
           ((C100 * C817 - C89 * C825 + C102 * C823 - C90 * C837 +
             C104 * C2629 - C91 * C2630) *
                C263 +
            (C100 * C1427 - C89 * C1435 + C102 * C1431 - C90 * C1439 +
             C104 * C3110 - C91 * C3111) *
                C89247) *
               C89236 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 + C91 * C116 -
             C104 * C108) *
                C263 +
            (C89 * C571 - C100 * C565 + C90 * C572 - C102 * C566 + C91 * C573 -
             C104 * C567) *
                C89247) *
               C89236 * C1719 +
           ((C100 * C1724 - C89 * C1734 + C102 * C1723 - C90 * C1732 +
             C104 * C1722 - C91 * C1730) *
                C263 +
            (C100 * C2330 - C89 * C2338 + C102 * C2331 - C90 * C2339 +
             C104 * C2332 - C91 * C2340) *
                C89247) *
               C89236 * C1720 +
           ((C89 * C1736 - C100 * C1725 + C90 * C1738 - C102 * C1726 +
             C91 * C1740 - C104 * C1727) *
                C263 +
            (C89 * C2341 - C100 * C2333 + C90 * C2342 - C102 * C2334 +
             C91 * C2343 - C104 * C2335) *
                C89247) *
               C89236 * C1721) *
              C5073 +
          (((C100 * C819 - C89 * C829 + C102 * C818 - C90 * C827 + C104 * C817 -
             C91 * C825) *
                C263 +
            (C100 * C1425 - C89 * C1433 + C102 * C1426 - C90 * C1434 +
             C104 * C1427 - C91 * C1435) *
                C89247) *
               C89236 * C1719 +
           ((C89 * C4101 - C100 * C4097 + C90 * C4103 - C102 * C4098 +
             C91 * C4105 - C104 * C4099) *
                C263 +
            (C89 * C4771 - C100 * C4767 + C90 * C4772 - C102 * C4768 +
             C91 * C4773 - C104 * C4769) *
                C89247) *
               C89236 * C1720 +
           ((C100 * C6249 - C89 * C6254 + C102 * C6248 - C90 * C6252 +
             C104 * C6247 - C91 * C6250) *
                C263 +
            (C100 * C6727 - C89 * C6730 + C102 * C6728 - C90 * C6731 +
             C104 * C6729 - C91 * C6732) *
                C89247) *
               C89236 * C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C263 +
             (C89093 * C571 - C13261 * C565) * C89247) *
                C13258 +
            ((C14060 - C14061) * C263 + (C14328 - C14329) * C89247) * C13259 +
            C14346 * C13260) *
               C89153 * C5073 +
           (((C14061 - C14060) * C263 + (C14329 - C14328) * C89247) * C13258 +
            ((C14065 - C14064) * C263 + (C14332 - C14331) * C89247) * C13259 +
            ((C14068 - C14069) * C263 + (C14333 - C14334) * C89247) * C13260) *
               C89153 * C89189) *
              C5075 +
          ((((C13261 * C107 - C89093 * C114) * C263 +
             (C13261 * C566 - C89093 * C572) * C89247) *
                C13258 +
            ((C14072 - C14073) * C263 + (C14335 - C14336) * C89247) * C13259 +
            C14347 * C13260) *
               C89153 * C5073 +
           (((C14073 - C14072) * C263 + (C14336 - C14335) * C89247) * C13258 +
            ((C14077 - C14076) * C263 + (C14339 - C14338) * C89247) * C13259 +
            ((C14080 - C14081) * C263 + (C14340 - C14341) * C89247) * C13260) *
               C89153 * C89189) *
              C5076 +
          ((((C89093 * C116 - C13261 * C108) * C263 +
             (C89093 * C573 - C13261 * C567) * C89247) *
                C13258 +
            ((C15538 - C15539) * C263 + (C15768 - C15769) * C89247) * C13259 +
            ((C15542 - C15543) * C263 + (C15770 - C15771) * C89247) * C13260) *
               C89153 * C5073 +
           (((C15539 - C15538) * C263 + (C15769 - C15768) * C89247) * C13258 +
            ((C15543 - C15542) * C263 + (C15771 - C15770) * C89247) * C13259 +
            ((C13261 * C5725 - C89093 * C5728) * C263 +
             (C13261 * C6063 - C89093 * C6066) * C89247) *
                C13260) *
               C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C89093 * C112 - C13261 * C106) * C263 +
            (C89093 * C571 - C13261 * C565) * C89247) *
               C13258 +
           ((C14060 - C14061) * C263 + (C14328 - C14329) * C89247) * C13259 +
           C14346 * C13260) *
              C89153 * C5720 +
          (((C14061 - C14060) * C263 + (C14329 - C14328) * C89247) * C13258 +
           ((C14065 - C14064) * C263 + (C14332 - C14331) * C89247) * C13259 +
           C18656 * C13260) *
              C89153 * C5721 +
          (C14346 * C13258 +
           ((C14069 - C14068) * C263 + (C14334 - C14333) * C89247) * C13259 +
           ((C18490 - C18491) * C263 + (C18653 - C18654) * C89247) * C13260) *
              C89153 * C5722 +
          (C18656 * C13258 +
           ((C18491 - C18490) * C263 + (C18654 - C18653) * C89247) * C13259 +
           ((C13261 * C18310 - C89093 * C18311) * C263 +
            (C13261 * C18648 - C89093 * C18649) * C89247) *
               C13260) *
              C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C263 +
             (C89093 * C571 - C13261 * C565) * C89247) *
                C13258 +
            ((C14060 - C14061) * C263 + (C14328 - C14329) * C89247) * C13259 +
            C14346 * C13260) *
               C1719 +
           (((C13261 * C1724 - C89093 * C1734) * C263 +
             (C13261 * C2330 - C89093 * C2338) * C89247) *
                C13258 +
            ((C17042 - C17043) * C263 + (C17366 - C17367) * C89247) * C13259 +
            ((C17046 - C17047) * C263 + (C17368 - C17369) * C89247) * C13260) *
               C1720 +
           (((C89093 * C1736 - C13261 * C1725) * C263 +
             (C89093 * C2341 - C13261 * C2333) * C89247) *
                C13258 +
            ((C19096 - C19097) * C263 + (C19334 - C19335) * C89247) * C13259 +
            ((C19100 - C19101) * C263 + (C19336 - C19337) * C89247) * C13260) *
               C1721) *
              C5073 +
          ((((C14061 - C14060) * C263 + (C14329 - C14328) * C89247) * C13258 +
            ((C14065 - C14064) * C263 + (C14332 - C14331) * C89247) * C13259 +
            C18656 * C13260) *
               C1719 +
           (((C17043 - C17042) * C263 + (C17367 - C17366) * C89247) * C13258 +
            ((C17047 - C17046) * C263 + (C17369 - C17368) * C89247) * C13259 +
            ((C89093 * C16685 - C13261 * C16683) * C263 +
             (C89093 * C17363 - C13261 * C17361) * C89247) *
                C13260) *
               C1720 +
           (((C19097 - C19096) * C263 + (C19335 - C19334) * C89247) * C13258 +
            ((C19101 - C19100) * C263 + (C19337 - C19336) * C89247) * C13259 +
            ((C13261 * C18839 - C89093 * C18840) * C263 +
             (C13261 * C19331 - C89093 * C19332) * C89247) *
                C13260) *
               C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eezy[67] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C89236 * C181 - C180 * C106) * C263 +
            (C89236 * C627 - C180 * C565) * C89247) *
               C89 +
           ((C194 - C195) * C263 + (C634 - C635) * C89247) * C90 + C648 * C91) *
              C89153 * C5720 +
          (((C180 * C819 - C89236 * C923) * C263 +
            (C180 * C1425 - C89236 * C1515) * C89247) *
               C89 +
           ((C940 - C941) * C263 + (C1524 - C1525) * C89247) * C90 +
           C3193 * C91) *
              C89153 * C5721 +
          (((C89236 * C926 - C180 * C820) * C263 +
            (C89236 * C1518 - C180 * C1428) * C89247) *
               C89 +
           ((C948 - C949) * C263 + (C1528 - C1529) * C89247) * C90 +
           ((C952 - C953) * C263 + (C1530 - C1531) * C89247) * C91) *
              C89153 * C5722 +
          (((C180 * C5727 - C89236 * C5787) * C263 +
            (C180 * C6061 - C89236 * C6117) * C89247) *
               C89 +
           ((C180 * C5726 - C89236 * C5788) * C263 +
            (C180 * C6062 - C89236 * C6118) * C89247) *
               C90 +
           ((C180 * C5725 - C89236 * C5789) * C263 +
            (C180 * C6063 - C89236 * C6119) * C89247) *
               C91) *
              C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C263 +
             (C89236 * C627 - C180 * C565) * C89247) *
                C89 +
            ((C194 - C195) * C263 + (C634 - C635) * C89247) * C90 +
            C648 * C91) *
               C89153 * C5073 +
           (((C180 * C819 - C89236 * C923) * C263 +
             (C180 * C1425 - C89236 * C1515) * C89247) *
                C89 +
            ((C940 - C941) * C263 + (C1524 - C1525) * C89247) * C90 +
            C3193 * C91) *
               C89153 * C89189) *
              C5075 +
          ((((C195 - C194) * C263 + (C635 - C634) * C89247) * C89 +
            ((C199 - C198) * C263 + (C638 - C637) * C89247) * C90 +
            C649 * C91) *
               C89153 * C5073 +
           (((C941 - C940) * C263 + (C1525 - C1524) * C89247) * C89 +
            ((C945 - C944) * C263 + (C1527 - C1526) * C89247) * C90 +
            ((C2712 - C2713) * C263 + (C3190 - C3191) * C89247) * C91) *
               C89153 * C89189) *
              C5076 +
          ((C648 * C89 + ((C203 - C202) * C263 + (C641 - C640) * C89247) * C90 +
            ((C206 - C207) * C263 + (C642 - C643) * C89247) * C91) *
               C89153 * C5073 +
           (C3193 * C89 +
            ((C2713 - C2712) * C263 + (C3191 - C3190) * C89247) * C90 +
            ((C180 * C2629 - C89236 * C2707) * C263 +
             (C180 * C3110 - C89236 * C3186) * C89247) *
                C91) *
               C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C263 +
             (C89236 * C627 - C180 * C565) * C89247) *
                C89 +
            ((C194 - C195) * C263 + (C634 - C635) * C89247) * C90 +
            C648 * C91) *
               C1719 +
           (((C180 * C1724 - C89236 * C1828) * C263 +
             (C180 * C2330 - C89236 * C2420) * C89247) *
                C89 +
            ((C1845 - C1846) * C263 + (C2429 - C2430) * C89247) * C90 +
            C3916 * C91) *
               C1720 +
           (((C89236 * C1831 - C180 * C1725) * C263 +
             (C89236 * C2423 - C180 * C2333) * C89247) *
                C89 +
            ((C1853 - C1854) * C263 + (C2433 - C2434) * C89247) * C90 +
            ((C1857 - C1858) * C263 + (C2435 - C2436) * C89247) * C91) *
               C1721) *
              C5073 +
          ((((C180 * C819 - C89236 * C923) * C263 +
             (C180 * C1425 - C89236 * C1515) * C89247) *
                C89 +
            ((C940 - C941) * C263 + (C1524 - C1525) * C89247) * C90 +
            C3193 * C91) *
               C1719 +
           (((C89236 * C4211 - C180 * C4097) * C263 +
             (C89236 * C4873 - C180 * C4767) * C89247) *
                C89 +
            ((C4220 - C4221) * C263 + (C4878 - C4879) * C89247) * C90 +
            ((C4224 - C4225) * C263 + (C4880 - C4881) * C89247) * C91) *
               C1720 +
           (((C180 * C6249 - C89236 * C6333) * C263 +
             (C180 * C6727 - C89236 * C6807) * C89247) *
                C89 +
            ((C180 * C6248 - C89236 * C6334) * C263 +
             (C180 * C6728 - C89236 * C6808) * C89247) *
                C90 +
            ((C180 * C6247 - C89236 * C6335) * C263 +
             (C180 * C6729 - C89236 * C6809) * C89247) *
                C91) *
               C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
             C13260 * C926 - C13315 * C820) *
                C263 +
            (C13258 * C627 - C13313 * C565 + C13259 * C1515 - C13314 * C1425 +
             C13260 * C1518 - C13315 * C1428) *
                C89247) *
               C89093 * C89153 * C5073 +
           ((C13313 * C819 - C13258 * C923 + C13314 * C820 - C13259 * C926 +
             C13315 * C5727 - C13260 * C5787) *
                C263 +
            (C13313 * C1425 - C13258 * C1515 + C13314 * C1428 - C13259 * C1518 +
             C13315 * C6061 - C13260 * C6117) *
                C89247) *
               C89093 * C89153 * C89189) *
              C5075 +
          (((C13313 * C107 - C13258 * C182 + C13314 * C818 - C13259 * C924 +
             C13315 * C821 - C13260 * C927) *
                C263 +
            (C13313 * C566 - C13258 * C628 + C13314 * C1426 - C13259 * C1516 +
             C13315 * C1429 - C13260 * C1519) *
                C89247) *
               C89093 * C89153 * C5073 +
           ((C13258 * C924 - C13313 * C818 + C13259 * C927 - C13314 * C821 +
             C13260 * C5788 - C13315 * C5726) *
                C263 +
            (C13258 * C1516 - C13313 * C1426 + C13259 * C1519 - C13314 * C1429 +
             C13260 * C6118 - C13315 * C6062) *
                C89247) *
               C89093 * C89153 * C89189) *
              C5076 +
          (((C13258 * C183 - C13313 * C108 + C13259 * C925 - C13314 * C817 +
             C13260 * C928 - C13315 * C822) *
                C263 +
            (C13258 * C629 - C13313 * C567 + C13259 * C1517 - C13314 * C1427 +
             C13260 * C1520 - C13315 * C1430) *
                C89247) *
               C89093 * C89153 * C5073 +
           ((C13313 * C817 - C13258 * C925 + C13314 * C822 - C13259 * C928 +
             C13315 * C5725 - C13260 * C5789) *
                C263 +
            (C13313 * C1427 - C13258 * C1517 + C13314 * C1430 - C13259 * C1520 +
             C13315 * C6063 - C13260 * C6119) *
                C89247) *
               C89093 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
            C13260 * C926 - C13315 * C820) *
               C263 +
           (C13258 * C627 - C13313 * C565 + C13259 * C1515 - C13314 * C1425 +
            C13260 * C1518 - C13315 * C1428) *
               C89247) *
              C89093 * C89153 * C5720 +
          ((C13313 * C819 - C13258 * C923 + C13314 * C820 - C13259 * C926 +
            C13315 * C5727 - C13260 * C5787) *
               C263 +
           (C13313 * C1425 - C13258 * C1515 + C13314 * C1428 - C13259 * C1518 +
            C13315 * C6061 - C13260 * C6117) *
               C89247) *
              C89093 * C89153 * C5721 +
          ((C13258 * C926 - C13313 * C820 + C13259 * C5787 - C13314 * C5727 +
            C13260 * C13873 - C13315 * C13743) *
               C263 +
           (C13258 * C1518 - C13313 * C1428 + C13259 * C6117 - C13314 * C6061 +
            C13260 * C14421 - C13315 * C14323) *
               C89247) *
              C89093 * C89153 * C5722 +
          ((C13313 * C5727 - C13258 * C5787 + C13314 * C13743 -
            C13259 * C13873 + C13315 * C18310 - C13260 * C18372) *
               C263 +
           (C13313 * C6061 - C13258 * C6117 + C13314 * C14323 -
            C13259 * C14421 + C13315 * C18648 - C13260 * C18706) *
               C89247) *
              C89093 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
             C13260 * C926 - C13315 * C820) *
                C263 +
            (C13258 * C627 - C13313 * C565 + C13259 * C1515 - C13314 * C1425 +
             C13260 * C1518 - C13315 * C1428) *
                C89247) *
               C89093 * C1719 +
           ((C13313 * C1724 - C13258 * C1828 + C13314 * C4097 - C13259 * C4211 +
             C13315 * C8516 - C13260 * C8600) *
                C263 +
            (C13313 * C2330 - C13258 * C2420 + C13314 * C4767 - C13259 * C4873 +
             C13315 * C8994 - C13260 * C9074) *
                C89247) *
               C89093 * C1720 +
           ((C13258 * C1831 - C13313 * C1725 + C13259 * C6333 - C13314 * C6249 +
             C13260 * C14683 - C13315 * C14601) *
                C263 +
            (C13258 * C2423 - C13313 * C2333 + C13259 * C6807 - C13314 * C6727 +
             C13260 * C15147 - C13315 * C15069) *
                C89247) *
               C89093 * C1721) *
              C5073 +
          (((C13313 * C819 - C13258 * C923 + C13314 * C820 - C13259 * C926 +
             C13315 * C5727 - C13260 * C5787) *
                C263 +
            (C13313 * C1425 - C13258 * C1515 + C13314 * C1428 - C13259 * C1518 +
             C13315 * C6061 - C13260 * C6117) *
                C89247) *
               C89093 * C1719 +
           ((C13258 * C4211 - C13313 * C4097 + C13259 * C8600 - C13314 * C8516 +
             C13260 * C16821 - C13315 * C16683) *
                C263 +
            (C13258 * C4873 - C13313 * C4767 + C13259 * C9074 - C13314 * C8994 +
             C13260 * C17471 - C13315 * C17361) *
                C89247) *
               C89093 * C1720 +
           ((C13313 * C6249 - C13258 * C6333 + C13314 * C14601 -
             C13259 * C14683 + C13315 * C18839 - C13260 * C18933) *
                C263 +
            (C13313 * C6727 - C13258 * C6807 + C13314 * C15069 -
             C13259 * C15147 + C13315 * C19331 - C13260 * C19411) *
                C89247) *
               C89093 * C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eezz[67] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C89236 *
               C89 +
           C735 * C90 + C736 * C91) *
              C89153 * C5720 -
          (C1642 * C91 + C1643 * C90 +
           (C263 * C1029 - C699 * C819 - C263 * C1425 + C89247 * C1607) *
               C89236 * C89) *
              C89153 * C5721 +
          ((C263 * C1032 - C699 * C820 - C263 * C1428 + C89247 * C1608) *
               C89236 * C89 +
           C1644 * C90 + C1645 * C91) *
              C89153 * C5722 -
          ((C263 * C5845 - C699 * C5725 - C263 * C6063 + C89247 * C6170) *
               C89236 * C91 +
           (C263 * C5844 - C699 * C5726 - C263 * C6062 + C89247 * C6171) *
               C89236 * C90 +
           (C263 * C5843 - C699 * C5727 - C263 * C6061 + C89247 * C6172) *
               C89236 * C89) *
              C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C89236 *
                C89 +
            C735 * C90 + C736 * C91) *
               C89153 * C5073 -
           (C1642 * C91 + C1643 * C90 +
            (C263 * C1029 - C699 * C819 - C263 * C1425 + C89247 * C1607) *
                C89236 * C89) *
               C89153 * C89189) *
              C5075 +
          ((C1643 * C89 + C1642 * C90 + C3276 * C91) * C89153 * C89189 -
           (C737 * C91 + C736 * C90 + C735 * C89) * C89153 * C5073) *
              C5076 +
          ((C736 * C89 + C737 * C90 + C738 * C91) * C89153 * C5073 -
           ((C263 * C2789 - C699 * C2629 - C263 * C3110 + C89247 * C3267) *
                C89236 * C91 +
            C3276 * C90 + C1642 * C89) *
               C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C89236 *
                C89 +
            C735 * C90 + C736 * C91) *
               C1719 -
           (C2547 * C91 + C2548 * C90 +
            (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
                C89236 * C89) *
               C1720 +
           ((C263 * C1937 - C699 * C1725 - C263 * C2333 + C89247 * C2513) *
                C89236 * C89 +
            C2549 * C90 + C2550 * C91) *
               C1721) *
              C5073 +
          (((C263 * C4325 - C699 * C4097 - C263 * C4767 + C89247 * C4979) *
                C89236 * C89 +
            C4998 * C90 + C4999 * C91) *
               C1720 -
           (C1642 * C91 + C1643 * C90 +
            (C263 * C1029 - C699 * C819 - C263 * C1425 + C89247 * C1607) *
                C89236 * C89) *
               C1719 -
           ((C263 * C6415 - C699 * C6247 - C263 * C6729 + C89247 * C6884) *
                C89236 * C91 +
            (C263 * C6414 - C699 * C6248 - C263 * C6728 + C89247 * C6885) *
                C89236 * C90 +
            (C263 * C6413 - C699 * C6249 - C263 * C6727 + C89247 * C6886) *
                C89236 * C89) *
               C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C13258 +
            C14524 * C13259 + C14525 * C13260) *
               C89093 * C89153 * C5073 -
           (C14526 * C13260 + C14525 * C13259 + C14524 * C13258) * C89093 *
               C89153 * C89189) *
              C5075 +
          ((C1639 * C13258 + C1640 * C13259 + C14527 * C13260) * C89093 *
               C89153 * C89189 -
           (C1640 * C13260 + C1639 * C13259 + C731 * C13258) * C89093 * C89153 *
               C5073) *
              C5076 +
          ((C732 * C13258 + C1638 * C13259 + C1641 * C13260) * C89093 * C89153 *
               C5073 -
           ((C263 * C5845 - C699 * C5725 - C263 * C6063 + C89247 * C6170) *
                C13260 +
            C1641 * C13259 + C1638 * C13258) *
               C89093 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C13258 +
           C14524 * C13259 + C14525 * C13260) *
              C89093 * C89153 * C5720 -
          (C14526 * C13260 + C14525 * C13259 + C14524 * C13258) * C89093 *
              C89153 * C5721 +
          (C14525 * C13258 + C14526 * C13259 + C18765 * C13260) * C89093 *
              C89153 * C5722 -
          ((C263 * C18424 - C699 * C18310 - C263 * C18648 + C89247 * C18757) *
               C13260 +
           C18765 * C13259 + C14526 * C13258) *
              C89093 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C13258 +
            C14524 * C13259 + C14525 * C13260) *
               C89093 * C1719 -
           (C17592 * C13260 + C17593 * C13259 +
            (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
                C13258) *
               C89093 * C1720 +
           ((C263 * C1937 - C699 * C1725 - C263 * C2333 + C89247 * C2513) *
                C13258 +
            C19500 * C13259 + C19501 * C13260) *
               C89093 * C1721) *
              C5073 +
          ((C17593 * C13258 + C17592 * C13259 +
            (C263 * C16923 - C699 * C16683 - C263 * C17361 + C89247 * C17571) *
                C13260) *
               C89093 * C1720 -
           (C14526 * C13260 + C14525 * C13259 + C14524 * C13258) * C89093 *
               C1719 -
           ((C263 * C19009 - C699 * C18839 - C263 * C19331 + C89247 * C19486) *
                C13260 +
            C19501 * C13259 + C19500 * C13258) *
               C89093 * C1721) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eexx[68] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C100 * C112 - C101 * C106 - C100 * C113 + C89 * C124 +
             C102 * C114 - C103 * C107 - C102 * C115 + C90 * C125 +
             C104 * C116 - C105 * C108 - C104 * C117 + C91 * C126) *
                C89247 * C89236 * C89308 -
            (C104 * C1730 - C105 * C1722 - C104 * C1731 + C91 * C1746 +
             C102 * C1732 - C103 * C1723 - C102 * C1733 + C90 * C1747 +
             C100 * C1734 - C101 * C1724 - C100 * C1735 + C89 * C1748) *
                C89247 * C89236 * C89217) *
               C5073 +
           ((C100 * C4101 - C101 * C4097 - C100 * C4102 + C89 * C4109 +
             C102 * C4103 - C103 * C4098 - C102 * C4104 + C90 * C4110 +
             C104 * C4105 - C105 * C4099 - C104 * C4106 + C91 * C4111) *
                C89247 * C89236 * C89217 -
            (C104 * C825 - C105 * C817 - C104 * C826 + C91 * C841 +
             C102 * C827 - C103 * C818 - C102 * C828 + C90 * C842 +
             C100 * C829 - C101 * C819 - C100 * C830 + C89 * C843) *
                C89247 * C89236 * C89308) *
               C89189) *
              C89299 +
          (((C100 * C1732 - C101 * C1723 - C100 * C1733 + C89 * C1747 +
             C102 * C1730 - C103 * C1722 - C102 * C1731 + C90 * C1746 +
             C104 * C1742 - C105 * C1728 - C104 * C1743 + C91 * C1752) *
                C89247 * C89236 * C89217 -
            (C104 * C118 - C105 * C109 - C104 * C119 + C91 * C127 +
             C102 * C116 - C103 * C108 - C102 * C117 + C90 * C126 +
             C100 * C114 - C101 * C107 - C100 * C115 + C89 * C125) *
                C89247 * C89236 * C89308) *
               C5073 +
           ((C100 * C827 - C101 * C818 - C100 * C828 + C89 * C842 +
             C102 * C825 - C103 * C817 - C102 * C826 + C90 * C841 +
             C104 * C837 - C105 * C823 - C104 * C838 + C91 * C847) *
                C89247 * C89236 * C89308 -
            (C104 * C4107 - C105 * C4100 - C104 * C4108 + C91 * C4112 +
             C102 * C4105 - C103 * C4099 - C102 * C4106 + C90 * C4111 +
             C100 * C4103 - C101 * C4098 - C100 * C4104 + C89 * C4110) *
                C89247 * C89236 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                 C89247 * C13258 +
             C13794 * C13259 + C13795 * C13260) *
                C89308 -
            (C16720 * C13260 + C16721 * C13259 +
             (C13261 * C1734 - C13262 * C1724 - C13261 * C1735 +
              C89093 * C1748) *
                 C89247 * C13258) *
                C89217) *
               C5073 +
           ((C16721 * C13258 + C16720 * C13259 +
             (C13261 * C16685 - C13262 * C16683 - C13261 * C16686 +
              C89093 * C16689) *
                 C89247 * C13260) *
                C89217 -
            (C13796 * C13260 + C13795 * C13259 + C13794 * C13258) * C89308) *
               C89189) *
              C89299 +
          ((((C13261 * C1732 - C13262 * C1723 - C13261 * C1733 +
              C89093 * C1747) *
                 C89247 * C13258 +
             C16722 * C13259 + C16723 * C13260) *
                C89217 -
            (C13798 * C13260 + C13797 * C13259 +
             (C13261 * C114 - C13262 * C107 - C13261 * C115 + C89093 * C125) *
                 C89247 * C13258) *
                C89308) *
               C5073 +
           ((C13797 * C13258 + C13798 * C13259 + C13799 * C13260) * C89308 -
            ((C13261 * C16687 - C13262 * C16684 - C13261 * C16688 +
              C89093 * C16690) *
                 C89247 * C13260 +
             C16723 * C13259 + C16722 * C13258) *
                C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eexy[68] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C100 +
             (C89236 * C187 - C180 * C113) * C89 + (C194 - C195) * C102 +
             (C196 - C197) * C90 + C210 * C104 + C211 * C91) *
                C89247 * C89308 +
            ((C180 * C1724 - C89236 * C1828) * C100 +
             (C180 * C1735 - C89236 * C1836) * C89 + (C1845 - C1846) * C102 +
             (C1847 - C1848) * C90 + C3433 * C104 + C3434 * C91) *
                C89247 * C89217) *
               C5073 +
           (((C180 * C819 - C89236 * C923) * C100 +
             (C180 * C830 - C89236 * C931) * C89 + (C940 - C941) * C102 +
             (C942 - C943) * C90 + C2710 * C104 + C2711 * C91) *
                C89247 * C89308 +
            ((C89236 * C4211 - C180 * C4097) * C100 +
             (C89236 * C4215 - C180 * C4102) * C89 + (C4220 - C4221) * C102 +
             (C4222 - C4223) * C90 + (C4224 - C4225) * C104 +
             (C4226 - C4227) * C91) *
                C89247 * C89217) *
               C89189) *
              C89299 +
          ((((C195 - C194) * C100 + (C197 - C196) * C89 + (C199 - C198) * C102 +
             (C201 - C200) * C90 + C212 * C104 + C213 * C91) *
                C89247 * C89308 +
            ((C1846 - C1845) * C100 + (C1848 - C1847) * C89 +
             (C1850 - C1849) * C102 + (C1852 - C1851) * C90 +
             (C3435 - C3436) * C104 + (C3437 - C3438) * C91) *
                C89247 * C89217) *
               C5073 +
           (((C941 - C940) * C100 + (C943 - C942) * C89 + (C945 - C944) * C102 +
             (C947 - C946) * C90 + (C2712 - C2713) * C104 +
             (C2714 - C2715) * C91) *
                C89247 * C89308 +
            ((C4221 - C4220) * C100 + (C4223 - C4222) * C89 +
             (C4225 - C4224) * C102 + (C4227 - C4226) * C90 +
             (C180 * C4100 - C89236 * C4214) * C104 +
             (C180 * C4108 - C89236 * C4218) * C91) *
                C89247 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
              C13260 * C926 - C13315 * C820) *
                 C13261 +
             (C13258 * C187 - C13313 * C113 + C13259 * C931 - C13314 * C830 +
              C13260 * C934 - C13315 * C832) *
                 C89093) *
                C89247 * C89308 +
            ((C13313 * C1724 - C13258 * C1828 + C13314 * C4097 -
              C13259 * C4211 + C13315 * C8516 - C13260 * C8600) *
                 C13261 +
             (C13313 * C1735 - C13258 * C1836 + C13314 * C4102 -
              C13259 * C4215 + C13315 * C8522 - C13260 * C8603) *
                 C89093) *
                C89247 * C89217) *
               C5073 +
           (((C13313 * C819 - C13258 * C923 + C13314 * C820 - C13259 * C926 +
              C13315 * C5727 - C13260 * C5787) *
                 C13261 +
             (C13313 * C830 - C13258 * C931 + C13314 * C832 - C13259 * C934 +
              C13315 * C5733 - C13260 * C5790) *
                 C89093) *
                C89247 * C89308 +
            ((C13258 * C4211 - C13313 * C4097 + C13259 * C8600 -
              C13314 * C8516 + C13260 * C16821 - C13315 * C16683) *
                 C13261 +
             (C13258 * C4215 - C13313 * C4102 + C13259 * C8603 -
              C13314 * C8522 + C13260 * C16823 - C13315 * C16686) *
                 C89093) *
                C89247 * C89217) *
               C89189) *
              C89299 +
          ((((C13313 * C107 - C13258 * C182 + C13314 * C818 - C13259 * C924 +
              C13315 * C821 - C13260 * C927) *
                 C13261 +
             (C13313 * C115 - C13258 * C188 + C13314 * C828 - C13259 * C932 +
              C13315 * C834 - C13260 * C935) *
                 C89093) *
                C89247 * C89308 +
            ((C13258 * C1829 - C13313 * C1723 + C13259 * C4212 -
              C13314 * C4098 + C13260 * C8601 - C13315 * C8515) *
                 C13261 +
             (C13258 * C1837 - C13313 * C1733 + C13259 * C4216 -
              C13314 * C4104 + C13260 * C8604 - C13315 * C8520) *
                 C89093) *
                C89247 * C89217) *
               C5073 +
           (((C13258 * C924 - C13313 * C818 + C13259 * C927 - C13314 * C821 +
              C13260 * C5788 - C13315 * C5726) *
                 C13261 +
             (C13258 * C932 - C13313 * C828 + C13259 * C935 - C13314 * C834 +
              C13260 * C5791 - C13315 * C5731) *
                 C89093) *
                C89247 * C89308 +
            ((C13313 * C4098 - C13258 * C4212 + C13314 * C8515 -
              C13259 * C8601 + C13315 * C16684 - C13260 * C16822) *
                 C13261 +
             (C13313 * C4104 - C13258 * C4216 + C13314 * C8520 -
              C13259 * C8604 + C13315 * C16688 - C13260 * C16824) *
                 C89093) *
                C89247 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eexz[68] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C100 +
             (C89247 * C270 - C263 * C113) * C89 + (C277 - C278) * C102 +
             (C279 - C280) * C90 + C293 * C104 + C294 * C91) *
                C89236 * C89308 +
            ((C263 * C1724 - C89247 * C1934) * C100 +
             (C263 * C1735 - C89247 * C1942) * C89 + (C1951 - C1952) * C102 +
             (C1953 - C1954) * C90 + C3515 * C104 + C3516 * C91) *
                C89236 * C89217) *
               C5073 +
           (((C263 * C819 - C89247 * C1029) * C100 +
             (C263 * C830 - C89247 * C1037) * C89 + (C1046 - C1047) * C102 +
             (C1048 - C1049) * C90 + C2792 * C104 + C2793 * C91) *
                C89236 * C89308 +
            ((C89247 * C4325 - C263 * C4097) * C100 +
             (C89247 * C4329 - C263 * C4102) * C89 + (C4334 - C4335) * C102 +
             (C4336 - C4337) * C90 + (C4338 - C4339) * C104 +
             (C4340 - C4341) * C91) *
                C89236 * C89217) *
               C89189) *
              C89299 +
          ((((C278 - C277) * C100 + (C280 - C279) * C89 + (C282 - C281) * C102 +
             (C284 - C283) * C90 + C295 * C104 + C296 * C91) *
                C89236 * C89308 +
            ((C1952 - C1951) * C100 + (C1954 - C1953) * C89 +
             (C1956 - C1955) * C102 + (C1958 - C1957) * C90 +
             (C3517 - C3518) * C104 + (C3519 - C3520) * C91) *
                C89236 * C89217) *
               C5073 +
           (((C1047 - C1046) * C100 + (C1049 - C1048) * C89 +
             (C1051 - C1050) * C102 + (C1053 - C1052) * C90 +
             (C2794 - C2795) * C104 + (C2796 - C2797) * C91) *
                C89236 * C89308 +
            ((C4335 - C4334) * C100 + (C4337 - C4336) * C89 +
             (C4339 - C4338) * C102 + (C4341 - C4340) * C90 +
             (C263 * C4100 - C89247 * C4328) * C104 +
             (C263 * C4108 - C89247 * C4332) * C91) *
                C89236 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C89247 * C264 - C263 * C106) * C13261 +
              (C89247 * C270 - C263 * C113) * C89093) *
                 C13258 +
             ((C13956 - C13957) * C13261 + (C13958 - C13959) * C89093) *
                 C13259 +
             C13981 * C13260) *
                C89308 +
            (((C263 * C1724 - C89247 * C1934) * C13261 +
              (C263 * C1735 - C89247 * C1942) * C89093) *
                 C13258 +
             ((C16928 - C16929) * C13261 + (C16930 - C16931) * C89093) *
                 C13259 +
             ((C16932 - C16933) * C13261 + (C16934 - C16935) * C89093) *
                 C13260) *
                C89217) *
               C5073 +
           ((((C13957 - C13956) * C13261 + (C13959 - C13958) * C89093) *
                 C13258 +
             ((C13961 - C13960) * C13261 + (C13963 - C13962) * C89093) *
                 C13259 +
             C18435 * C13260) *
                C89308 +
            (((C16929 - C16928) * C13261 + (C16931 - C16930) * C89093) *
                 C13258 +
             ((C16933 - C16932) * C13261 + (C16935 - C16934) * C89093) *
                 C13259 +
             ((C89247 * C16923 - C263 * C16683) * C13261 +
              (C89247 * C16925 - C263 * C16686) * C89093) *
                 C13260) *
                C89217) *
               C89189) *
              C89299 +
          (((((C278 - C277) * C13261 + (C280 - C279) * C89093) * C13258 +
             ((C1046 - C1047) * C13261 + (C1048 - C1049) * C89093) * C13259 +
             C13980 * C13260) *
                C89308 +
            (((C1952 - C1951) * C13261 + (C1954 - C1953) * C89093) * C13258 +
             ((C4334 - C4335) * C13261 + (C4336 - C4337) * C89093) * C13259 +
             ((C16936 - C16937) * C13261 + (C16938 - C16939) * C89093) *
                 C13260) *
                C89217) *
               C5073 +
           ((((C1047 - C1046) * C13261 + (C1049 - C1048) * C89093) * C13258 +
             ((C1054 - C1055) * C13261 + (C1056 - C1057) * C89093) * C13259 +
             ((C13970 - C13971) * C13261 + (C13972 - C13973) * C89093) *
                 C13260) *
                C89308 +
            (((C4335 - C4334) * C13261 + (C4337 - C4336) * C89093) * C13258 +
             ((C16937 - C16936) * C13261 + (C16939 - C16938) * C89093) *
                 C13259 +
             ((C263 * C16684 - C89247 * C16924) * C13261 +
              (C263 * C16688 - C89247 * C16926) * C89093) *
                 C13260) *
                C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[68] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 + C91 * C116 -
              C104 * C108) *
                 C180 +
             (C89 * C352 - C100 * C346 + C90 * C353 - C102 * C347 + C91 * C354 -
              C104 * C348) *
                 C89236) *
                C89247 * C89308 +
            ((C100 * C1724 - C89 * C1734 + C102 * C1723 - C90 * C1732 +
              C104 * C1722 - C91 * C1730) *
                 C180 +
             (C100 * C2040 - C89 * C2048 + C102 * C2041 - C90 * C2049 +
              C104 * C2042 - C91 * C2050) *
                 C89236) *
                C89247 * C89217) *
               C5073 +
           (((C100 * C819 - C89 * C829 + C102 * C818 - C90 * C827 +
              C104 * C817 - C91 * C825) *
                 C180 +
             (C100 * C1135 - C89 * C1143 + C102 * C1136 - C90 * C1144 +
              C104 * C1137 - C91 * C1145) *
                 C89236) *
                C89247 * C89308 +
            ((C89 * C4101 - C100 * C4097 + C90 * C4103 - C102 * C4098 +
              C91 * C4105 - C104 * C4099) *
                 C180 +
             (C89 * C4443 - C100 * C4439 + C90 * C4444 - C102 * C4440 +
              C91 * C4445 - C104 * C4441) *
                 C89236) *
                C89247 * C89217) *
               C89189) *
              C89299 +
          ((((C100 * C107 - C89 * C114 + C102 * C108 - C90 * C116 +
              C104 * C109 - C91 * C118) *
                 C180 +
             (C100 * C347 - C89 * C353 + C102 * C348 - C90 * C354 +
              C104 * C349 - C91 * C355) *
                 C89236) *
                C89247 * C89308 +
            ((C89 * C1732 - C100 * C1723 + C90 * C1730 - C102 * C1722 +
              C91 * C1742 - C104 * C1728) *
                 C180 +
             (C89 * C2049 - C100 * C2041 + C90 * C2050 - C102 * C2042 +
              C91 * C2054 - C104 * C2046) *
                 C89236) *
                C89247 * C89217) *
               C5073 +
           (((C89 * C827 - C100 * C818 + C90 * C825 - C102 * C817 + C91 * C837 -
              C104 * C823) *
                 C180 +
             (C89 * C1144 - C100 * C1136 + C90 * C1145 - C102 * C1137 +
              C91 * C1149 - C104 * C1141) *
                 C89236) *
                C89247 * C89308 +
            ((C100 * C4098 - C89 * C4103 + C102 * C4099 - C90 * C4105 +
              C104 * C4100 - C91 * C4107) *
                 C180 +
             (C100 * C4440 - C89 * C4444 + C102 * C4441 - C90 * C4445 +
              C104 * C4442 - C91 * C4446) *
                 C89236) *
                C89247 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C13313 +
             (C89093 * C352 - C13261 * C346) * C13258 +
             (C14060 - C14061) * C13314 + (C14062 - C14063) * C13259 +
             C14084 * C13315 + C14085 * C13260) *
                C89247 * C89308 +
            ((C13261 * C1724 - C89093 * C1734) * C13313 +
             (C13261 * C2040 - C89093 * C2048) * C13258 +
             (C17042 - C17043) * C13314 + (C17044 - C17045) * C13259 +
             (C17046 - C17047) * C13315 + (C17048 - C17049) * C13260) *
                C89247 * C89217) *
               C5073 +
           (((C14061 - C14060) * C13313 + (C14063 - C14062) * C13258 +
             (C14065 - C14064) * C13314 + (C14067 - C14066) * C13259 +
             C18488 * C13315 + C18489 * C13260) *
                C89247 * C89308 +
            ((C17043 - C17042) * C13313 + (C17045 - C17044) * C13258 +
             (C17047 - C17046) * C13314 + (C17049 - C17048) * C13259 +
             (C89093 * C16685 - C13261 * C16683) * C13315 +
             (C89093 * C17039 - C13261 * C17037) * C13260) *
                C89247 * C89217) *
               C89189) *
              C89299 +
          ((((C13261 * C107 - C89093 * C114) * C13313 +
             (C13261 * C347 - C89093 * C353) * C13258 +
             (C14072 - C14073) * C13314 + (C14074 - C14075) * C13259 +
             C14086 * C13315 + C14087 * C13260) *
                C89247 * C89308 +
            ((C89093 * C1732 - C13261 * C1723) * C13313 +
             (C89093 * C2049 - C13261 * C2041) * C13258 +
             (C17050 - C17051) * C13314 + (C17052 - C17053) * C13259 +
             (C17054 - C17055) * C13315 + (C17056 - C17057) * C13260) *
                C89247 * C89217) *
               C5073 +
           (((C14073 - C14072) * C13313 + (C14075 - C14074) * C13258 +
             (C14077 - C14076) * C13314 + (C14079 - C14078) * C13259 +
             (C14080 - C14081) * C13315 + (C14082 - C14083) * C13260) *
                C89247 * C89308 +
            ((C17051 - C17050) * C13313 + (C17053 - C17052) * C13258 +
             (C17055 - C17054) * C13314 + (C17057 - C17056) * C13259 +
             (C13261 * C16684 - C89093 * C16687) * C13315 +
             (C13261 * C17038 - C89093 * C17040) * C13260) *
                C89247 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[68] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C89 +
             C440 * C90 + C441 * C91) *
                C89247 * C89308 -
            (C2163 * C91 + C2164 * C90 +
             (C180 * C1828 - C408 * C1724 - C180 * C2040 + C89236 * C2132) *
                 C89) *
                C89247 * C89217) *
               C5073 +
           (((C180 * C4211 - C408 * C4097 - C180 * C4439 + C89236 * C4545) *
                 C89 +
             C4562 * C90 + C4563 * C91) *
                C89247 * C89217 -
            (C1258 * C91 + C1259 * C90 +
             (C180 * C923 - C408 * C819 - C180 * C1135 + C89236 * C1227) *
                 C89) *
                C89247 * C89308) *
               C89189) *
              C89299 +
          (((C2164 * C89 + C2163 * C90 + C3678 * C91) * C89247 * C89217 -
            (C442 * C91 + C441 * C90 + C440 * C89) * C89247 * C89308) *
               C5073 +
           ((C1259 * C89 + C1258 * C90 + C2955 * C91) * C89247 * C89308 -
            ((C180 * C4214 - C408 * C4100 - C180 * C4442 + C89236 * C4548) *
                 C91 +
             C4563 * C90 + C4562 * C89) *
                C89247 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13313 * C181 - C13466 * C106 - C13313 * C346 + C13258 * C409 +
             C13314 * C923 - C13467 * C819 - C13314 * C1135 + C13259 * C1227 +
             C13315 * C926 - C13468 * C820 - C13315 * C1138 + C13260 * C1228) *
                C89093 * C89247 * C89308 -
            (C13315 * C8600 - C13468 * C8516 - C13315 * C8760 + C13260 * C8842 +
             C13314 * C4211 - C13467 * C4097 - C13314 * C4439 + C13259 * C4545 +
             C13313 * C1828 - C13466 * C1724 - C13313 * C2040 +
             C13258 * C2132) *
                C89093 * C89247 * C89217) *
               C5073 +
           ((C13313 * C4211 - C13466 * C4097 - C13313 * C4439 + C13258 * C4545 +
             C13314 * C8600 - C13467 * C8516 - C13314 * C8760 + C13259 * C8842 +
             C13315 * C16821 - C13468 * C16683 - C13315 * C17037 +
             C13260 * C17155) *
                C89093 * C89247 * C89217 -
            (C13315 * C5787 - C13468 * C5727 - C13315 * C5899 + C13260 * C5957 +
             C13314 * C926 - C13467 * C820 - C13314 * C1138 + C13259 * C1228 +
             C13313 * C923 - C13466 * C819 - C13313 * C1135 + C13258 * C1227) *
                C89093 * C89247 * C89308) *
               C89189) *
              C89299 +
          (((C13313 * C1829 - C13466 * C1723 - C13313 * C2041 + C13258 * C2131 +
             C13314 * C4212 - C13467 * C4098 - C13314 * C4440 + C13259 * C4546 +
             C13315 * C8601 - C13468 * C8515 - C13315 * C8761 +
             C13260 * C8841) *
                C89093 * C89247 * C89217 -
            (C13315 * C927 - C13468 * C821 - C13315 * C1139 + C13260 * C1229 +
             C13314 * C924 - C13467 * C818 - C13314 * C1136 + C13259 * C1226 +
             C13313 * C182 - C13466 * C107 - C13313 * C347 + C13258 * C410) *
                C89093 * C89247 * C89308) *
               C5073 +
           ((C13313 * C924 - C13466 * C818 - C13313 * C1136 + C13258 * C1226 +
             C13314 * C927 - C13467 * C821 - C13314 * C1139 + C13259 * C1229 +
             C13315 * C5788 - C13468 * C5726 - C13315 * C5900 +
             C13260 * C5956) *
                C89093 * C89247 * C89308 -
            (C13315 * C16822 - C13468 * C16684 - C13315 * C17038 +
             C13260 * C17156 + C13314 * C8601 - C13467 * C8515 -
             C13314 * C8761 + C13259 * C8841 + C13313 * C4212 - C13466 * C4098 -
             C13313 * C4440 + C13258 * C4546) *
                C89093 * C89247 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[68] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C89247 * C264 - C263 * C106) * C180 +
              (C89247 * C493 - C263 * C346) * C89236) *
                 C89 +
             ((C277 - C278) * C180 + (C500 - C501) * C89236) * C90 +
             C514 * C91) *
                C89308 +
            (((C263 * C1724 - C89247 * C1934) * C180 +
              (C263 * C2040 - C89247 * C2240) * C89236) *
                 C89 +
             ((C1951 - C1952) * C180 + (C2249 - C2250) * C89236) * C90 +
             C3759 * C91) *
                C89217) *
               C5073 +
           ((((C263 * C819 - C89247 * C1029) * C180 +
              (C263 * C1135 - C89247 * C1335) * C89236) *
                 C89 +
             ((C1046 - C1047) * C180 + (C1344 - C1345) * C89236) * C90 +
             C3036 * C91) *
                C89308 +
            (((C89247 * C4325 - C263 * C4097) * C180 +
              (C89247 * C4661 - C263 * C4439) * C89236) *
                 C89 +
             ((C4334 - C4335) * C180 + (C4666 - C4667) * C89236) * C90 +
             ((C4338 - C4339) * C180 + (C4668 - C4669) * C89236) * C91) *
                C89217) *
               C89189) *
              C89299 +
          (((((C278 - C277) * C180 + (C501 - C500) * C89236) * C89 +
             ((C282 - C281) * C180 + (C504 - C503) * C89236) * C90 +
             C515 * C91) *
                C89308 +
            (((C1952 - C1951) * C180 + (C2250 - C2249) * C89236) * C89 +
             ((C1956 - C1955) * C180 + (C2252 - C2251) * C89236) * C90 +
             ((C3517 - C3518) * C180 + (C3756 - C3757) * C89236) * C91) *
                C89217) *
               C5073 +
           ((((C1047 - C1046) * C180 + (C1345 - C1344) * C89236) * C89 +
             ((C1051 - C1050) * C180 + (C1347 - C1346) * C89236) * C90 +
             ((C2794 - C2795) * C180 + (C3033 - C3034) * C89236) * C91) *
                C89308 +
            (((C4335 - C4334) * C180 + (C4667 - C4666) * C89236) * C89 +
             ((C4339 - C4338) * C180 + (C4669 - C4668) * C89236) * C90 +
             ((C263 * C4100 - C89247 * C4328) * C180 +
              (C263 * C4442 - C89247 * C4664) * C89236) *
                 C91) *
                C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C13313 +
             (C89247 * C493 - C263 * C346) * C13258 +
             (C13956 - C13957) * C13314 + (C14240 - C14241) * C13259 +
             C13974 * C13315 + C14249 * C13260) *
                C89093 * C89308 +
            ((C263 * C1724 - C89247 * C1934) * C13313 +
             (C263 * C2040 - C89247 * C2240) * C13258 +
             (C16928 - C16929) * C13314 + (C17258 - C17259) * C13259 +
             (C16932 - C16933) * C13315 + (C17260 - C17261) * C13260) *
                C89093 * C89217) *
               C5073 +
           (((C13957 - C13956) * C13313 + (C14241 - C14240) * C13258 +
             (C13961 - C13960) * C13314 + (C14243 - C14242) * C13259 +
             C18427 * C13315 + C18596 * C13260) *
                C89093 * C89308 +
            ((C16929 - C16928) * C13313 + (C17259 - C17258) * C13258 +
             (C16933 - C16932) * C13314 + (C17261 - C17260) * C13259 +
             (C89247 * C16923 - C263 * C16683) * C13315 +
             (C89247 * C17255 - C263 * C17037) * C13260) *
                C89093 * C89217) *
               C89189) *
              C89299 +
          ((((C278 - C277) * C13313 + (C501 - C500) * C13258 +
             (C1046 - C1047) * C13314 + (C1344 - C1345) * C13259 +
             C13968 * C13315 + C14246 * C13260) *
                C89093 * C89308 +
            ((C1952 - C1951) * C13313 + (C2250 - C2249) * C13258 +
             (C4334 - C4335) * C13314 + (C4666 - C4667) * C13259 +
             (C16936 - C16937) * C13315 + (C17262 - C17263) * C13260) *
                C89093 * C89217) *
               C5073 +
           (((C1047 - C1046) * C13313 + (C1345 - C1344) * C13258 +
             (C1054 - C1055) * C13314 + (C1348 - C1349) * C13259 +
             (C13970 - C13971) * C13315 + (C14247 - C14248) * C13260) *
                C89093 * C89308 +
            ((C4335 - C4334) * C13313 + (C4667 - C4666) * C13258 +
             (C16937 - C16936) * C13314 + (C17263 - C17262) * C13259 +
             (C263 * C16684 - C89247 * C16924) * C13315 +
             (C263 * C17038 - C89247 * C17256) * C13260) *
                C89093 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eezx[68] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 + C91 * C116 -
              C104 * C108) *
                 C263 +
             (C89 * C571 - C100 * C565 + C90 * C572 - C102 * C566 + C91 * C573 -
              C104 * C567) *
                 C89247) *
                C89236 * C89308 +
            ((C100 * C1724 - C89 * C1734 + C102 * C1723 - C90 * C1732 +
              C104 * C1722 - C91 * C1730) *
                 C263 +
             (C100 * C2330 - C89 * C2338 + C102 * C2331 - C90 * C2339 +
              C104 * C2332 - C91 * C2340) *
                 C89247) *
                C89236 * C89217) *
               C5073 +
           (((C100 * C819 - C89 * C829 + C102 * C818 - C90 * C827 +
              C104 * C817 - C91 * C825) *
                 C263 +
             (C100 * C1425 - C89 * C1433 + C102 * C1426 - C90 * C1434 +
              C104 * C1427 - C91 * C1435) *
                 C89247) *
                C89236 * C89308 +
            ((C89 * C4101 - C100 * C4097 + C90 * C4103 - C102 * C4098 +
              C91 * C4105 - C104 * C4099) *
                 C263 +
             (C89 * C4771 - C100 * C4767 + C90 * C4772 - C102 * C4768 +
              C91 * C4773 - C104 * C4769) *
                 C89247) *
                C89236 * C89217) *
               C89189) *
              C89299 +
          ((((C100 * C107 - C89 * C114 + C102 * C108 - C90 * C116 +
              C104 * C109 - C91 * C118) *
                 C263 +
             (C100 * C566 - C89 * C572 + C102 * C567 - C90 * C573 +
              C104 * C568 - C91 * C574) *
                 C89247) *
                C89236 * C89308 +
            ((C89 * C1732 - C100 * C1723 + C90 * C1730 - C102 * C1722 +
              C91 * C1742 - C104 * C1728) *
                 C263 +
             (C89 * C2339 - C100 * C2331 + C90 * C2340 - C102 * C2332 +
              C91 * C2344 - C104 * C2336) *
                 C89247) *
                C89236 * C89217) *
               C5073 +
           (((C89 * C827 - C100 * C818 + C90 * C825 - C102 * C817 + C91 * C837 -
              C104 * C823) *
                 C263 +
             (C89 * C1434 - C100 * C1426 + C90 * C1435 - C102 * C1427 +
              C91 * C1439 - C104 * C1431) *
                 C89247) *
                C89236 * C89308 +
            ((C100 * C4098 - C89 * C4103 + C102 * C4099 - C90 * C4105 +
              C104 * C4100 - C91 * C4107) *
                 C263 +
             (C100 * C4768 - C89 * C4772 + C102 * C4769 - C90 * C4773 +
              C104 * C4770 - C91 * C4774) *
                 C89247) *
                C89236 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C89093 * C112 - C13261 * C106) * C263 +
              (C89093 * C571 - C13261 * C565) * C89247) *
                 C13258 +
             ((C14060 - C14061) * C263 + (C14328 - C14329) * C89247) * C13259 +
             C14346 * C13260) *
                C89308 +
            (((C13261 * C1724 - C89093 * C1734) * C263 +
              (C13261 * C2330 - C89093 * C2338) * C89247) *
                 C13258 +
             ((C17042 - C17043) * C263 + (C17366 - C17367) * C89247) * C13259 +
             ((C17046 - C17047) * C263 + (C17368 - C17369) * C89247) * C13260) *
                C89217) *
               C5073 +
           ((((C14061 - C14060) * C263 + (C14329 - C14328) * C89247) * C13258 +
             ((C14065 - C14064) * C263 + (C14332 - C14331) * C89247) * C13259 +
             C18656 * C13260) *
                C89308 +
            (((C17043 - C17042) * C263 + (C17367 - C17366) * C89247) * C13258 +
             ((C17047 - C17046) * C263 + (C17369 - C17368) * C89247) * C13259 +
             ((C89093 * C16685 - C13261 * C16683) * C263 +
              (C89093 * C17363 - C13261 * C17361) * C89247) *
                 C13260) *
                C89217) *
               C89189) *
              C89299 +
          (((((C13261 * C107 - C89093 * C114) * C263 +
              (C13261 * C566 - C89093 * C572) * C89247) *
                 C13258 +
             ((C14072 - C14073) * C263 + (C14335 - C14336) * C89247) * C13259 +
             C14347 * C13260) *
                C89308 +
            (((C89093 * C1732 - C13261 * C1723) * C263 +
              (C89093 * C2339 - C13261 * C2331) * C89247) *
                 C13258 +
             ((C17050 - C17051) * C263 + (C17370 - C17371) * C89247) * C13259 +
             ((C17054 - C17055) * C263 + (C17372 - C17373) * C89247) * C13260) *
                C89217) *
               C5073 +
           ((((C14073 - C14072) * C263 + (C14336 - C14335) * C89247) * C13258 +
             ((C14077 - C14076) * C263 + (C14339 - C14338) * C89247) * C13259 +
             ((C14080 - C14081) * C263 + (C14340 - C14341) * C89247) * C13260) *
                C89308 +
            (((C17051 - C17050) * C263 + (C17371 - C17370) * C89247) * C13258 +
             ((C17055 - C17054) * C263 + (C17373 - C17372) * C89247) * C13259 +
             ((C13261 * C16684 - C89093 * C16687) * C263 +
              (C13261 * C17362 - C89093 * C17364) * C89247) *
                 C13260) *
                C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eezy[68] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C89236 * C181 - C180 * C106) * C263 +
              (C89236 * C627 - C180 * C565) * C89247) *
                 C89 +
             ((C194 - C195) * C263 + (C634 - C635) * C89247) * C90 +
             C648 * C91) *
                C89308 +
            (((C180 * C1724 - C89236 * C1828) * C263 +
              (C180 * C2330 - C89236 * C2420) * C89247) *
                 C89 +
             ((C1845 - C1846) * C263 + (C2429 - C2430) * C89247) * C90 +
             C3916 * C91) *
                C89217) *
               C5073 +
           ((((C180 * C819 - C89236 * C923) * C263 +
              (C180 * C1425 - C89236 * C1515) * C89247) *
                 C89 +
             ((C940 - C941) * C263 + (C1524 - C1525) * C89247) * C90 +
             C3193 * C91) *
                C89308 +
            (((C89236 * C4211 - C180 * C4097) * C263 +
              (C89236 * C4873 - C180 * C4767) * C89247) *
                 C89 +
             ((C4220 - C4221) * C263 + (C4878 - C4879) * C89247) * C90 +
             ((C4224 - C4225) * C263 + (C4880 - C4881) * C89247) * C91) *
                C89217) *
               C89189) *
              C89299 +
          (((((C195 - C194) * C263 + (C635 - C634) * C89247) * C89 +
             ((C199 - C198) * C263 + (C638 - C637) * C89247) * C90 +
             C649 * C91) *
                C89308 +
            (((C1846 - C1845) * C263 + (C2430 - C2429) * C89247) * C89 +
             ((C1850 - C1849) * C263 + (C2432 - C2431) * C89247) * C90 +
             ((C3435 - C3436) * C263 + (C3913 - C3914) * C89247) * C91) *
                C89217) *
               C5073 +
           ((((C941 - C940) * C263 + (C1525 - C1524) * C89247) * C89 +
             ((C945 - C944) * C263 + (C1527 - C1526) * C89247) * C90 +
             ((C2712 - C2713) * C263 + (C3190 - C3191) * C89247) * C91) *
                C89308 +
            (((C4221 - C4220) * C263 + (C4879 - C4878) * C89247) * C89 +
             ((C4225 - C4224) * C263 + (C4881 - C4880) * C89247) * C90 +
             ((C180 * C4100 - C89236 * C4214) * C263 +
              (C180 * C4770 - C89236 * C4876) * C89247) *
                 C91) *
                C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
              C13260 * C926 - C13315 * C820) *
                 C263 +
             (C13258 * C627 - C13313 * C565 + C13259 * C1515 - C13314 * C1425 +
              C13260 * C1518 - C13315 * C1428) *
                 C89247) *
                C89093 * C89308 +
            ((C13313 * C1724 - C13258 * C1828 + C13314 * C4097 -
              C13259 * C4211 + C13315 * C8516 - C13260 * C8600) *
                 C263 +
             (C13313 * C2330 - C13258 * C2420 + C13314 * C4767 -
              C13259 * C4873 + C13315 * C8994 - C13260 * C9074) *
                 C89247) *
                C89093 * C89217) *
               C5073 +
           (((C13313 * C819 - C13258 * C923 + C13314 * C820 - C13259 * C926 +
              C13315 * C5727 - C13260 * C5787) *
                 C263 +
             (C13313 * C1425 - C13258 * C1515 + C13314 * C1428 -
              C13259 * C1518 + C13315 * C6061 - C13260 * C6117) *
                 C89247) *
                C89093 * C89308 +
            ((C13258 * C4211 - C13313 * C4097 + C13259 * C8600 -
              C13314 * C8516 + C13260 * C16821 - C13315 * C16683) *
                 C263 +
             (C13258 * C4873 - C13313 * C4767 + C13259 * C9074 -
              C13314 * C8994 + C13260 * C17471 - C13315 * C17361) *
                 C89247) *
                C89093 * C89217) *
               C89189) *
              C89299 +
          ((((C13313 * C107 - C13258 * C182 + C13314 * C818 - C13259 * C924 +
              C13315 * C821 - C13260 * C927) *
                 C263 +
             (C13313 * C566 - C13258 * C628 + C13314 * C1426 - C13259 * C1516 +
              C13315 * C1429 - C13260 * C1519) *
                 C89247) *
                C89093 * C89308 +
            ((C13258 * C1829 - C13313 * C1723 + C13259 * C4212 -
              C13314 * C4098 + C13260 * C8601 - C13315 * C8515) *
                 C263 +
             (C13258 * C2421 - C13313 * C2331 + C13259 * C4874 -
              C13314 * C4768 + C13260 * C9075 - C13315 * C8995) *
                 C89247) *
                C89093 * C89217) *
               C5073 +
           (((C13258 * C924 - C13313 * C818 + C13259 * C927 - C13314 * C821 +
              C13260 * C5788 - C13315 * C5726) *
                 C263 +
             (C13258 * C1516 - C13313 * C1426 + C13259 * C1519 -
              C13314 * C1429 + C13260 * C6118 - C13315 * C6062) *
                 C89247) *
                C89093 * C89308 +
            ((C13313 * C4098 - C13258 * C4212 + C13314 * C8515 -
              C13259 * C8601 + C13315 * C16684 - C13260 * C16822) *
                 C263 +
             (C13313 * C4768 - C13258 * C4874 + C13314 * C8995 -
              C13259 * C9075 + C13315 * C17362 - C13260 * C17472) *
                 C89247) *
                C89093 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eezz[68] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) *
                 C89236 * C89 +
             C735 * C90 + C736 * C91) *
                C89308 -
            (C2547 * C91 + C2548 * C90 +
             (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
                 C89236 * C89) *
                C89217) *
               C5073 +
           (((C263 * C4325 - C699 * C4097 - C263 * C4767 + C89247 * C4979) *
                 C89236 * C89 +
             C4998 * C90 + C4999 * C91) *
                C89217 -
            (C1642 * C91 + C1643 * C90 +
             (C263 * C1029 - C699 * C819 - C263 * C1425 + C89247 * C1607) *
                 C89236 * C89) *
                C89308) *
               C89189) *
              C89299 +
          (((C2548 * C89 + C2547 * C90 + C3999 * C91) * C89217 -
            (C737 * C91 + C736 * C90 + C735 * C89) * C89308) *
               C5073 +
           ((C1643 * C89 + C1642 * C90 + C3276 * C91) * C89308 -
            ((C263 * C4328 - C699 * C4100 - C263 * C4770 + C89247 * C4982) *
                 C89236 * C91 +
             C4999 * C90 + C4998 * C89) *
                C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) *
                 C13258 +
             C14524 * C13259 + C14525 * C13260) *
                C89093 * C89308 -
            (C17592 * C13260 + C17593 * C13259 +
             (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
                 C13258) *
                C89093 * C89217) *
               C5073 +
           ((C17593 * C13258 + C17592 * C13259 +
             (C263 * C16923 - C699 * C16683 - C263 * C17361 + C89247 * C17571) *
                 C13260) *
                C89093 * C89217 -
            (C14526 * C13260 + C14525 * C13259 + C14524 * C13258) * C89093 *
                C89308) *
               C89189) *
              C89299 +
          (((C2544 * C13258 + C4996 * C13259 + C17594 * C13260) * C89093 *
                C89217 -
            (C1640 * C13260 + C1639 * C13259 + C731 * C13258) * C89093 *
                C89308) *
               C5073 +
           ((C1639 * C13258 + C1640 * C13259 + C14527 * C13260) * C89093 *
                C89308 -
            ((C263 * C16924 - C699 * C16684 - C263 * C17362 + C89247 * C17572) *
                 C13260 +
             C17594 * C13259 + C4996 * C13258) *
                C89093 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eexx[69] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C112 - C101 * C106 - C100 * C113 + C89 * C124 + C102 * C114 -
            C103 * C107 - C102 * C115 + C90 * C125 + C104 * C116 - C105 * C108 -
            C104 * C117 + C91 * C126) *
               C89247 * C89236 * C89153 * C5073 -
           (C104 * C825 - C105 * C817 - C104 * C826 + C91 * C841 + C102 * C827 -
            C103 * C818 - C102 * C828 + C90 * C842 + C100 * C829 - C101 * C819 -
            C100 * C830 + C89 * C843) *
               C89247 * C89236 * C89153 * C89189) *
              C5075 +
          ((C100 * C827 - C101 * C818 - C100 * C828 + C89 * C842 + C102 * C825 -
            C103 * C817 - C102 * C826 + C90 * C841 + C104 * C837 - C105 * C823 -
            C104 * C838 + C91 * C847) *
               C89247 * C89236 * C89153 * C89189 -
           (C104 * C118 - C105 * C109 - C104 * C119 + C91 * C127 + C102 * C116 -
            C103 * C108 - C102 * C117 + C90 * C126 + C100 * C114 - C101 * C107 -
            C100 * C115 + C89 * C125) *
               C89247 * C89236 * C89153 * C5073) *
              C5076 +
          ((C100 * C116 - C101 * C108 - C100 * C117 + C89 * C126 + C102 * C118 -
            C103 * C109 - C102 * C119 + C90 * C127 + C104 * C120 - C105 * C110 -
            C104 * C121 + C91 * C128) *
               C89247 * C89236 * C89153 * C5073 -
           (C104 * C2630 - C105 * C2629 - C104 * C2631 + C91 * C2632 +
            C102 * C837 - C103 * C823 - C102 * C838 + C90 * C847 + C100 * C825 -
            C101 * C817 - C100 * C826 + C89 * C841) *
               C89247 * C89236 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((C100 * C112 - C101 * C106 - C100 * C113 + C89 * C124 + C102 * C114 -
           C103 * C107 - C102 * C115 + C90 * C125 + C104 * C116 - C105 * C108 -
           C104 * C117 + C91 * C126) *
              C89247 * C89236 * C89153 * C5720 -
          (C104 * C825 - C105 * C817 - C104 * C826 + C91 * C841 + C102 * C827 -
           C103 * C818 - C102 * C828 + C90 * C842 + C100 * C829 - C101 * C819 -
           C100 * C830 + C89 * C843) *
              C89247 * C89236 * C89153 * C5721 +
          (C100 * C831 - C101 * C820 - C100 * C832 + C89 * C844 + C102 * C833 -
           C103 * C821 - C102 * C834 + C90 * C845 + C104 * C835 - C105 * C822 -
           C104 * C836 + C91 * C846) *
              C89247 * C89236 * C89153 * C5722 -
          (C104 * C5728 - C105 * C5725 - C104 * C5729 + C91 * C5734 +
           C102 * C5730 - C103 * C5726 - C102 * C5731 + C90 * C5735 +
           C100 * C5732 - C101 * C5727 - C100 * C5733 + C89 * C5736) *
              C89247 * C89236 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                C89247 * C13258 +
            C13794 * C13259 + C13795 * C13260) *
               C89153 * C5073 -
           (C13796 * C13260 + C13795 * C13259 + C13794 * C13258) * C89153 *
               C89189) *
              C5075 +
          ((C13797 * C13258 + C13798 * C13259 + C13799 * C13260) * C89153 *
               C89189 -
           (C13798 * C13260 + C13797 * C13259 +
            (C13261 * C114 - C13262 * C107 - C13261 * C115 + C89093 * C125) *
                C89247 * C13258) *
               C89153 * C5073) *
              C5076 +
          (((C13261 * C116 - C13262 * C108 - C13261 * C117 + C89093 * C126) *
                C89247 * C13258 +
            C15314 * C13259 + C15315 * C13260) *
               C89153 * C5073 -
           ((C13261 * C5728 - C13262 * C5725 - C13261 * C5729 +
             C89093 * C5734) *
                C89247 * C13260 +
            C15315 * C13259 + C15314 * C13258) *
               C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
               C89247 * C13258 +
           C13794 * C13259 + C13795 * C13260) *
              C89153 * C5720 -
          (C13796 * C13260 + C13795 * C13259 + C13794 * C13258) * C89153 *
              C5721 +
          (C13795 * C13258 + C13796 * C13259 + C18322 * C13260) * C89153 *
              C5722 -
          ((C13261 * C18311 - C13262 * C18310 - C13261 * C18312 +
            C89093 * C18313) *
               C89247 * C13260 +
           C18322 * C13259 + C13796 * C13258) *
              C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eexy[69] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C89236 * C181 - C180 * C106) * C100 +
            (C89236 * C187 - C180 * C113) * C89 + (C194 - C195) * C102 +
            (C196 - C197) * C90 + C210 * C104 + C211 * C91) *
               C89247 * C89153 * C5073 +
           ((C180 * C819 - C89236 * C923) * C100 +
            (C180 * C830 - C89236 * C931) * C89 + (C940 - C941) * C102 +
            (C942 - C943) * C90 + C2710 * C104 + C2711 * C91) *
               C89247 * C89153 * C89189) *
              C5075 +
          (((C195 - C194) * C100 + (C197 - C196) * C89 + (C199 - C198) * C102 +
            (C201 - C200) * C90 + C212 * C104 + C213 * C91) *
               C89247 * C89153 * C5073 +
           ((C941 - C940) * C100 + (C943 - C942) * C89 + (C945 - C944) * C102 +
            (C947 - C946) * C90 + (C2712 - C2713) * C104 +
            (C2714 - C2715) * C91) *
               C89247 * C89153 * C89189) *
              C5076 +
          ((C210 * C100 + C211 * C89 + (C203 - C202) * C102 +
            (C205 - C204) * C90 + (C206 - C207) * C104 + (C208 - C209) * C91) *
               C89247 * C89153 * C5073 +
           (C2710 * C100 + C2711 * C89 + (C2713 - C2712) * C102 +
            (C2715 - C2714) * C90 + (C180 * C2629 - C89236 * C2707) * C104 +
            (C180 * C2631 - C89236 * C2708) * C91) *
               C89247 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C89236 * C181 - C180 * C106) * C100 +
           (C89236 * C187 - C180 * C113) * C89 + (C194 - C195) * C102 +
           (C196 - C197) * C90 + C210 * C104 + C211 * C91) *
              C89247 * C89153 * C5720 +
          ((C180 * C819 - C89236 * C923) * C100 +
           (C180 * C830 - C89236 * C931) * C89 + (C940 - C941) * C102 +
           (C942 - C943) * C90 + C2710 * C104 + C2711 * C91) *
              C89247 * C89153 * C5721 +
          ((C89236 * C926 - C180 * C820) * C100 +
           (C89236 * C934 - C180 * C832) * C89 + (C948 - C949) * C102 +
           (C950 - C951) * C90 + (C952 - C953) * C104 + (C954 - C955) * C91) *
              C89247 * C89153 * C5722 +
          ((C180 * C5727 - C89236 * C5787) * C100 +
           (C180 * C5733 - C89236 * C5790) * C89 +
           (C180 * C5726 - C89236 * C5788) * C102 +
           (C180 * C5731 - C89236 * C5791) * C90 +
           (C180 * C5725 - C89236 * C5789) * C104 +
           (C180 * C5729 - C89236 * C5792) * C91) *
              C89247 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
             C13260 * C926 - C13315 * C820) *
                C13261 +
            (C13258 * C187 - C13313 * C113 + C13259 * C931 - C13314 * C830 +
             C13260 * C934 - C13315 * C832) *
                C89093) *
               C89247 * C89153 * C5073 +
           ((C13313 * C819 - C13258 * C923 + C13314 * C820 - C13259 * C926 +
             C13315 * C5727 - C13260 * C5787) *
                C13261 +
            (C13313 * C830 - C13258 * C931 + C13314 * C832 - C13259 * C934 +
             C13315 * C5733 - C13260 * C5790) *
                C89093) *
               C89247 * C89153 * C89189) *
              C5075 +
          (((C13313 * C107 - C13258 * C182 + C13314 * C818 - C13259 * C924 +
             C13315 * C821 - C13260 * C927) *
                C13261 +
            (C13313 * C115 - C13258 * C188 + C13314 * C828 - C13259 * C932 +
             C13315 * C834 - C13260 * C935) *
                C89093) *
               C89247 * C89153 * C5073 +
           ((C13258 * C924 - C13313 * C818 + C13259 * C927 - C13314 * C821 +
             C13260 * C5788 - C13315 * C5726) *
                C13261 +
            (C13258 * C932 - C13313 * C828 + C13259 * C935 - C13314 * C834 +
             C13260 * C5791 - C13315 * C5731) *
                C89093) *
               C89247 * C89153 * C89189) *
              C5076 +
          (((C13258 * C183 - C13313 * C108 + C13259 * C925 - C13314 * C817 +
             C13260 * C928 - C13315 * C822) *
                C13261 +
            (C13258 * C189 - C13313 * C117 + C13259 * C933 - C13314 * C826 +
             C13260 * C936 - C13315 * C836) *
                C89093) *
               C89247 * C89153 * C5073 +
           ((C13313 * C817 - C13258 * C925 + C13314 * C822 - C13259 * C928 +
             C13315 * C5725 - C13260 * C5789) *
                C13261 +
            (C13313 * C826 - C13258 * C933 + C13314 * C836 - C13259 * C936 +
             C13315 * C5729 - C13260 * C5792) *
                C89093) *
               C89247 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
            C13260 * C926 - C13315 * C820) *
               C13261 +
           (C13258 * C187 - C13313 * C113 + C13259 * C931 - C13314 * C830 +
            C13260 * C934 - C13315 * C832) *
               C89093) *
              C89247 * C89153 * C5720 +
          ((C13313 * C819 - C13258 * C923 + C13314 * C820 - C13259 * C926 +
            C13315 * C5727 - C13260 * C5787) *
               C13261 +
           (C13313 * C830 - C13258 * C931 + C13314 * C832 - C13259 * C934 +
            C13315 * C5733 - C13260 * C5790) *
               C89093) *
              C89247 * C89153 * C5721 +
          ((C13258 * C926 - C13313 * C820 + C13259 * C5787 - C13314 * C5727 +
            C13260 * C13873 - C13315 * C13743) *
               C13261 +
           (C13258 * C934 - C13313 * C832 + C13259 * C5790 - C13314 * C5733 +
            C13260 * C13875 - C13315 * C13746) *
               C89093) *
              C89247 * C89153 * C5722 +
          ((C13313 * C5727 - C13258 * C5787 + C13314 * C13743 -
            C13259 * C13873 + C13315 * C18310 - C13260 * C18372) *
               C13261 +
           (C13313 * C5733 - C13258 * C5790 + C13314 * C13746 -
            C13259 * C13875 + C13315 * C18312 - C13260 * C18373) *
               C89093) *
              C89247 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eexz[69] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C100 +
            (C89247 * C270 - C263 * C113) * C89 + (C277 - C278) * C102 +
            (C279 - C280) * C90 + C293 * C104 + C294 * C91) *
               C89236 * C89153 * C5073 +
           ((C263 * C819 - C89247 * C1029) * C100 +
            (C263 * C830 - C89247 * C1037) * C89 + (C1046 - C1047) * C102 +
            (C1048 - C1049) * C90 + C2792 * C104 + C2793 * C91) *
               C89236 * C89153 * C89189) *
              C5075 +
          (((C278 - C277) * C100 + (C280 - C279) * C89 + (C282 - C281) * C102 +
            (C284 - C283) * C90 + C295 * C104 + C296 * C91) *
               C89236 * C89153 * C5073 +
           ((C1047 - C1046) * C100 + (C1049 - C1048) * C89 +
            (C1051 - C1050) * C102 + (C1053 - C1052) * C90 +
            (C2794 - C2795) * C104 + (C2796 - C2797) * C91) *
               C89236 * C89153 * C89189) *
              C5076 +
          ((C293 * C100 + C294 * C89 + (C286 - C285) * C102 +
            (C288 - C287) * C90 + (C289 - C290) * C104 + (C291 - C292) * C91) *
               C89236 * C89153 * C5073 +
           (C2792 * C100 + C2793 * C89 + (C2795 - C2794) * C102 +
            (C2797 - C2796) * C90 + (C263 * C2629 - C89247 * C2789) * C104 +
            (C263 * C2631 - C89247 * C2790) * C91) *
               C89236 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C89247 * C264 - C263 * C106) * C100 +
           (C89247 * C270 - C263 * C113) * C89 + (C277 - C278) * C102 +
           (C279 - C280) * C90 + C293 * C104 + C294 * C91) *
              C89236 * C89153 * C5720 +
          ((C263 * C819 - C89247 * C1029) * C100 +
           (C263 * C830 - C89247 * C1037) * C89 + (C1046 - C1047) * C102 +
           (C1048 - C1049) * C90 + C2792 * C104 + C2793 * C91) *
              C89236 * C89153 * C5721 +
          ((C89247 * C1032 - C263 * C820) * C100 +
           (C89247 * C1040 - C263 * C832) * C89 + (C1054 - C1055) * C102 +
           (C1056 - C1057) * C90 + (C1058 - C1059) * C104 +
           (C1060 - C1061) * C91) *
              C89236 * C89153 * C5722 +
          ((C263 * C5727 - C89247 * C5843) * C100 +
           (C263 * C5733 - C89247 * C5846) * C89 +
           (C263 * C5726 - C89247 * C5844) * C102 +
           (C263 * C5731 - C89247 * C5847) * C90 +
           (C263 * C5725 - C89247 * C5845) * C104 +
           (C263 * C5729 - C89247 * C5848) * C91) *
              C89236 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C13261 +
             (C89247 * C270 - C263 * C113) * C89093) *
                C13258 +
            ((C13956 - C13957) * C13261 + (C13958 - C13959) * C89093) * C13259 +
            C13981 * C13260) *
               C89153 * C5073 +
           (((C13957 - C13956) * C13261 + (C13959 - C13958) * C89093) * C13258 +
            ((C13961 - C13960) * C13261 + (C13963 - C13962) * C89093) * C13259 +
            ((C13964 - C13965) * C13261 + (C13966 - C13967) * C89093) *
                C13260) *
               C89153 * C89189) *
              C5075 +
          ((((C278 - C277) * C13261 + (C280 - C279) * C89093) * C13258 +
            ((C1046 - C1047) * C13261 + (C1048 - C1049) * C89093) * C13259 +
            C13980 * C13260) *
               C89153 * C5073 +
           (((C1047 - C1046) * C13261 + (C1049 - C1048) * C89093) * C13258 +
            ((C1054 - C1055) * C13261 + (C1056 - C1057) * C89093) * C13259 +
            ((C13970 - C13971) * C13261 + (C13972 - C13973) * C89093) *
                C13260) *
               C89153 * C89189) *
              C5076 +
          (((C293 * C13261 + C294 * C89093) * C13258 +
            ((C1051 - C1050) * C13261 + (C1053 - C1052) * C89093) * C13259 +
            ((C1058 - C1059) * C13261 + (C1060 - C1061) * C89093) * C13260) *
               C89153 * C5073 +
           ((C2792 * C13261 + C2793 * C89093) * C13258 +
            ((C1059 - C1058) * C13261 + (C1061 - C1060) * C89093) * C13259 +
            ((C263 * C5725 - C89247 * C5845) * C13261 +
             (C263 * C5729 - C89247 * C5848) * C89093) *
                C13260) *
               C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C13261 +
            (C89247 * C270 - C263 * C113) * C89093) *
               C13258 +
           ((C13956 - C13957) * C13261 + (C13958 - C13959) * C89093) * C13259 +
           C13981 * C13260) *
              C89153 * C5720 +
          (((C13957 - C13956) * C13261 + (C13959 - C13958) * C89093) * C13258 +
           ((C13961 - C13960) * C13261 + (C13963 - C13962) * C89093) * C13259 +
           C18435 * C13260) *
              C89153 * C5721 +
          (C13981 * C13258 +
           ((C13965 - C13964) * C13261 + (C13967 - C13966) * C89093) * C13259 +
           ((C18429 - C18430) * C13261 + (C18431 - C18432) * C89093) * C13260) *
              C89153 * C5722 +
          (C18435 * C13258 +
           ((C18430 - C18429) * C13261 + (C18432 - C18431) * C89093) * C13259 +
           ((C263 * C18310 - C89247 * C18424) * C13261 +
            (C263 * C18312 - C89247 * C18425) * C89093) *
               C13260) *
              C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eeyx[69] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 +
                       C91 * C116 - C104 * C108) *
                          C180 +
                      (C89 * C352 - C100 * C346 + C90 * C353 - C102 * C347 +
                       C91 * C354 - C104 * C348) *
                          C89236) *
                         C89247 * C89153 * C5073 +
                     ((C100 * C819 - C89 * C829 + C102 * C818 - C90 * C827 +
                       C104 * C817 - C91 * C825) *
                          C180 +
                      (C100 * C1135 - C89 * C1143 + C102 * C1136 - C90 * C1144 +
                       C104 * C1137 - C91 * C1145) *
                          C89236) *
                         C89247 * C89153 * C89189) *
                        C5075 +
                    (((C100 * C107 - C89 * C114 + C102 * C108 - C90 * C116 +
                       C104 * C109 - C91 * C118) *
                          C180 +
                      (C100 * C347 - C89 * C353 + C102 * C348 - C90 * C354 +
                       C104 * C349 - C91 * C355) *
                          C89236) *
                         C89247 * C89153 * C5073 +
                     ((C89 * C827 - C100 * C818 + C90 * C825 - C102 * C817 +
                       C91 * C837 - C104 * C823) *
                          C180 +
                      (C89 * C1144 - C100 * C1136 + C90 * C1145 - C102 * C1137 +
                       C91 * C1149 - C104 * C1141) *
                          C89236) *
                         C89247 * C89153 * C89189) *
                        C5076 +
                    (((C89 * C116 - C100 * C108 + C90 * C118 - C102 * C109 +
                       C91 * C120 - C104 * C110) *
                          C180 +
                      (C89 * C354 - C100 * C348 + C90 * C355 - C102 * C349 +
                       C91 * C356 - C104 * C350) *
                          C89236) *
                         C89247 * C89153 * C5073 +
                     ((C100 * C817 - C89 * C825 + C102 * C823 - C90 * C837 +
                       C104 * C2629 - C91 * C2630) *
                          C180 +
                      (C100 * C1137 - C89 * C1145 + C102 * C1141 - C90 * C1149 +
                       C104 * C2871 - C91 * C2872) *
                          C89236) *
                         C89247 * C89153 * C89189) *
                        C5077)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   (((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 +
                      C91 * C116 - C104 * C108) *
                         C180 +
                     (C89 * C352 - C100 * C346 + C90 * C353 - C102 * C347 +
                      C91 * C354 - C104 * C348) *
                         C89236) *
                        C89247 * C89153 * C5720 +
                    ((C100 * C819 - C89 * C829 + C102 * C818 - C90 * C827 +
                      C104 * C817 - C91 * C825) *
                         C180 +
                     (C100 * C1135 - C89 * C1143 + C102 * C1136 - C90 * C1144 +
                      C104 * C1137 - C91 * C1145) *
                         C89236) *
                        C89247 * C89153 * C5721 +
                    ((C89 * C831 - C100 * C820 + C90 * C833 - C102 * C821 +
                      C91 * C835 - C104 * C822) *
                         C180 +
                     (C89 * C1146 - C100 * C1138 + C90 * C1147 - C102 * C1139 +
                      C91 * C1148 - C104 * C1140) *
                         C89236) *
                        C89247 * C89153 * C5722 +
                    ((C100 * C5727 - C89 * C5732 + C102 * C5726 - C90 * C5730 +
                      C104 * C5725 - C91 * C5728) *
                         C180 +
                     (C100 * C5899 - C89 * C5902 + C102 * C5900 - C90 * C5903 +
                      C104 * C5901 - C91 * C5904) *
                         C89236) *
                        C89247 * C89153 * C5723) *
                   C89118) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C89093 * C112 - C13261 * C106) * C13313 +
                      (C89093 * C352 - C13261 * C346) * C13258 +
                      (C14060 - C14061) * C13314 + (C14062 - C14063) * C13259 +
                      C14084 * C13315 + C14085 * C13260) *
                         C89247 * C89153 * C5073 +
                     ((C14061 - C14060) * C13313 + (C14063 - C14062) * C13258 +
                      (C14065 - C14064) * C13314 + (C14067 - C14066) * C13259 +
                      (C14068 - C14069) * C13315 + (C14070 - C14071) * C13260) *
                         C89247 * C89153 * C89189) *
                        C5075 +
                    (((C13261 * C107 - C89093 * C114) * C13313 +
                      (C13261 * C347 - C89093 * C353) * C13258 +
                      (C14072 - C14073) * C13314 + (C14074 - C14075) * C13259 +
                      C14086 * C13315 + C14087 * C13260) *
                         C89247 * C89153 * C5073 +
                     ((C14073 - C14072) * C13313 + (C14075 - C14074) * C13258 +
                      (C14077 - C14076) * C13314 + (C14079 - C14078) * C13259 +
                      (C14080 - C14081) * C13315 + (C14082 - C14083) * C13260) *
                         C89247 * C89153 * C89189) *
                        C5076 +
                    (((C89093 * C116 - C13261 * C108) * C13313 +
                      (C89093 * C354 - C13261 * C348) * C13258 +
                      (C15538 - C15539) * C13314 + (C15540 - C15541) * C13259 +
                      (C15542 - C15543) * C13315 + (C15544 - C15545) * C13260) *
                         C89247 * C89153 * C5073 +
                     ((C15539 - C15538) * C13313 + (C15541 - C15540) * C13258 +
                      (C15543 - C15542) * C13314 + (C15545 - C15544) * C13259 +
                      (C13261 * C5725 - C89093 * C5728) * C13315 +
                      (C13261 * C5901 - C89093 * C5904) * C13260) *
                         C89247 * C89153 * C89189) *
                        C5077)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   (((C89093 * C112 - C13261 * C106) * C13313 +
                     (C89093 * C352 - C13261 * C346) * C13258 +
                     (C14060 - C14061) * C13314 + (C14062 - C14063) * C13259 +
                     C14084 * C13315 + C14085 * C13260) *
                        C89247 * C89153 * C5720 +
                    ((C14061 - C14060) * C13313 + (C14063 - C14062) * C13258 +
                     (C14065 - C14064) * C13314 + (C14067 - C14066) * C13259 +
                     C18488 * C13315 + C18489 * C13260) *
                        C89247 * C89153 * C5721 +
                    (C14084 * C13313 + C14085 * C13258 +
                     (C14069 - C14068) * C13314 + (C14071 - C14070) * C13259 +
                     (C18490 - C18491) * C13315 + (C18492 - C18493) * C13260) *
                        C89247 * C89153 * C5722 +
                    (C18488 * C13313 + C18489 * C13258 +
                     (C18491 - C18490) * C13314 + (C18493 - C18492) * C13259 +
                     (C13261 * C18310 - C89093 * C18311) * C13315 +
                     (C13261 * C18485 - C89093 * C18486) * C13260) *
                        C89247 * C89153 * C5723) *
                   C89118) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[69] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C89 +
            C440 * C90 + C441 * C91) *
               C89247 * C89153 * C5073 -
           (C1258 * C91 + C1259 * C90 +
            (C180 * C923 - C408 * C819 - C180 * C1135 + C89236 * C1227) * C89) *
               C89247 * C89153 * C89189) *
              C5075 +
          ((C1259 * C89 + C1258 * C90 + C2955 * C91) * C89247 * C89153 *
               C89189 -
           (C442 * C91 + C441 * C90 + C440 * C89) * C89247 * C89153 * C5073) *
              C5076 +
          ((C441 * C89 + C442 * C90 + C443 * C91) * C89247 * C89153 * C5073 -
           ((C180 * C2707 - C408 * C2629 - C180 * C2871 + C89236 * C2947) *
                C91 +
            C2955 * C90 + C1258 * C89) *
               C89247 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C89 +
           C440 * C90 + C441 * C91) *
              C89247 * C89153 * C5720 -
          (C1258 * C91 + C1259 * C90 +
           (C180 * C923 - C408 * C819 - C180 * C1135 + C89236 * C1227) * C89) *
              C89247 * C89153 * C5721 +
          ((C180 * C926 - C408 * C820 - C180 * C1138 + C89236 * C1228) * C89 +
           C1260 * C90 + C1261 * C91) *
              C89247 * C89153 * C5722 -
          ((C180 * C5789 - C408 * C5725 - C180 * C5901 + C89236 * C5955) * C91 +
           (C180 * C5788 - C408 * C5726 - C180 * C5900 + C89236 * C5956) * C90 +
           (C180 * C5787 - C408 * C5727 - C180 * C5899 + C89236 * C5957) *
               C89) *
              C89247 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13313 * C181 - C13466 * C106 - C13313 * C346 + C13258 * C409 +
            C13314 * C923 - C13467 * C819 - C13314 * C1135 + C13259 * C1227 +
            C13315 * C926 - C13468 * C820 - C13315 * C1138 + C13260 * C1228) *
               C89093 * C89247 * C89153 * C5073 -
           (C13315 * C5787 - C13468 * C5727 - C13315 * C5899 + C13260 * C5957 +
            C13314 * C926 - C13467 * C820 - C13314 * C1138 + C13259 * C1228 +
            C13313 * C923 - C13466 * C819 - C13313 * C1135 + C13258 * C1227) *
               C89093 * C89247 * C89153 * C89189) *
              C5075 +
          ((C13313 * C924 - C13466 * C818 - C13313 * C1136 + C13258 * C1226 +
            C13314 * C927 - C13467 * C821 - C13314 * C1139 + C13259 * C1229 +
            C13315 * C5788 - C13468 * C5726 - C13315 * C5900 + C13260 * C5956) *
               C89093 * C89247 * C89153 * C89189 -
           (C13315 * C927 - C13468 * C821 - C13315 * C1139 + C13260 * C1229 +
            C13314 * C924 - C13467 * C818 - C13314 * C1136 + C13259 * C1226 +
            C13313 * C182 - C13466 * C107 - C13313 * C347 + C13258 * C410) *
               C89093 * C89247 * C89153 * C5073) *
              C5076 +
          ((C13313 * C183 - C13466 * C108 - C13313 * C348 + C13258 * C411 +
            C13314 * C925 - C13467 * C817 - C13314 * C1137 + C13259 * C1225 +
            C13315 * C928 - C13468 * C822 - C13315 * C1140 + C13260 * C1230) *
               C89093 * C89247 * C89153 * C5073 -
           (C13315 * C5789 - C13468 * C5725 - C13315 * C5901 + C13260 * C5955 +
            C13314 * C928 - C13467 * C822 - C13314 * C1140 + C13259 * C1230 +
            C13313 * C925 - C13466 * C817 - C13313 * C1137 + C13258 * C1225) *
               C89093 * C89247 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((C13313 * C181 - C13466 * C106 - C13313 * C346 + C13258 * C409 +
           C13314 * C923 - C13467 * C819 - C13314 * C1135 + C13259 * C1227 +
           C13315 * C926 - C13468 * C820 - C13315 * C1138 + C13260 * C1228) *
              C89093 * C89247 * C89153 * C5720 -
          (C13315 * C5787 - C13468 * C5727 - C13315 * C5899 + C13260 * C5957 +
           C13314 * C926 - C13467 * C820 - C13314 * C1138 + C13259 * C1228 +
           C13313 * C923 - C13466 * C819 - C13313 * C1135 + C13258 * C1227) *
              C89093 * C89247 * C89153 * C5721 +
          (C13313 * C926 - C13466 * C820 - C13313 * C1138 + C13258 * C1228 +
           C13314 * C5787 - C13467 * C5727 - C13314 * C5899 + C13259 * C5957 +
           C13315 * C13873 - C13468 * C13743 - C13315 * C14055 +
           C13260 * C14161) *
              C89093 * C89247 * C89153 * C5722 -
          (C13315 * C18372 - C13468 * C18310 - C13315 * C18485 +
           C13260 * C18543 + C13314 * C13873 - C13467 * C13743 -
           C13314 * C14055 + C13259 * C14161 + C13313 * C5787 - C13466 * C5727 -
           C13313 * C5899 + C13258 * C5957) *
              C89093 * C89247 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eeyz[69] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C180 +
             (C89247 * C493 - C263 * C346) * C89236) *
                C89 +
            ((C277 - C278) * C180 + (C500 - C501) * C89236) * C90 +
            C514 * C91) *
               C89153 * C5073 +
           (((C263 * C819 - C89247 * C1029) * C180 +
             (C263 * C1135 - C89247 * C1335) * C89236) *
                C89 +
            ((C1046 - C1047) * C180 + (C1344 - C1345) * C89236) * C90 +
            C3036 * C91) *
               C89153 * C89189) *
              C5075 +
          ((((C278 - C277) * C180 + (C501 - C500) * C89236) * C89 +
            ((C282 - C281) * C180 + (C504 - C503) * C89236) * C90 +
            C515 * C91) *
               C89153 * C5073 +
           (((C1047 - C1046) * C180 + (C1345 - C1344) * C89236) * C89 +
            ((C1051 - C1050) * C180 + (C1347 - C1346) * C89236) * C90 +
            ((C2794 - C2795) * C180 + (C3033 - C3034) * C89236) * C91) *
               C89153 * C89189) *
              C5076 +
          ((C514 * C89 + ((C286 - C285) * C180 + (C507 - C506) * C89236) * C90 +
            ((C289 - C290) * C180 + (C508 - C509) * C89236) * C91) *
               C89153 * C5073 +
           (C3036 * C89 +
            ((C2795 - C2794) * C180 + (C3034 - C3033) * C89236) * C90 +
            ((C263 * C2629 - C89247 * C2789) * C180 +
             (C263 * C2871 - C89247 * C3029) * C89236) *
                C91) *
               C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C180 +
            (C89247 * C493 - C263 * C346) * C89236) *
               C89 +
           ((C277 - C278) * C180 + (C500 - C501) * C89236) * C90 + C514 * C91) *
              C89153 * C5720 +
          (((C263 * C819 - C89247 * C1029) * C180 +
            (C263 * C1135 - C89247 * C1335) * C89236) *
               C89 +
           ((C1046 - C1047) * C180 + (C1344 - C1345) * C89236) * C90 +
           C3036 * C91) *
              C89153 * C5721 +
          (((C89247 * C1032 - C263 * C820) * C180 +
            (C89247 * C1338 - C263 * C1138) * C89236) *
               C89 +
           ((C1054 - C1055) * C180 + (C1348 - C1349) * C89236) * C90 +
           ((C1058 - C1059) * C180 + (C1350 - C1351) * C89236) * C91) *
              C89153 * C5722 +
          (((C263 * C5727 - C89247 * C5843) * C180 +
            (C263 * C5899 - C89247 * C6008) * C89236) *
               C89 +
           ((C263 * C5726 - C89247 * C5844) * C180 +
            (C263 * C5900 - C89247 * C6009) * C89236) *
               C90 +
           ((C263 * C5725 - C89247 * C5845) * C180 +
            (C263 * C5901 - C89247 * C6010) * C89236) *
               C91) *
              C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C13313 +
            (C89247 * C493 - C263 * C346) * C13258 +
            (C13956 - C13957) * C13314 + (C14240 - C14241) * C13259 +
            C13974 * C13315 + C14249 * C13260) *
               C89093 * C89153 * C5073 +
           ((C13957 - C13956) * C13313 + (C14241 - C14240) * C13258 +
            (C13961 - C13960) * C13314 + (C14243 - C14242) * C13259 +
            (C13964 - C13965) * C13315 + (C14244 - C14245) * C13260) *
               C89093 * C89153 * C89189) *
              C5075 +
          (((C278 - C277) * C13313 + (C501 - C500) * C13258 +
            (C1046 - C1047) * C13314 + (C1344 - C1345) * C13259 +
            C13968 * C13315 + C14246 * C13260) *
               C89093 * C89153 * C5073 +
           ((C1047 - C1046) * C13313 + (C1345 - C1344) * C13258 +
            (C1054 - C1055) * C13314 + (C1348 - C1349) * C13259 +
            (C13970 - C13971) * C13315 + (C14247 - C14248) * C13260) *
               C89093 * C89153 * C89189) *
              C5076 +
          ((C293 * C13313 + C510 * C13258 + (C1051 - C1050) * C13314 +
            (C1347 - C1346) * C13259 + (C1058 - C1059) * C13315 +
            (C1350 - C1351) * C13260) *
               C89093 * C89153 * C5073 +
           (C2792 * C13313 + C3032 * C13258 + (C1059 - C1058) * C13314 +
            (C1351 - C1350) * C13259 +
            (C263 * C5725 - C89247 * C5845) * C13315 +
            (C263 * C5901 - C89247 * C6010) * C13260) *
               C89093 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C89247 * C264 - C263 * C106) * C13313 +
           (C89247 * C493 - C263 * C346) * C13258 + (C13956 - C13957) * C13314 +
           (C14240 - C14241) * C13259 + C13974 * C13315 + C14249 * C13260) *
              C89093 * C89153 * C5720 +
          ((C13957 - C13956) * C13313 + (C14241 - C14240) * C13258 +
           (C13961 - C13960) * C13314 + (C14243 - C14242) * C13259 +
           C18427 * C13315 + C18596 * C13260) *
              C89093 * C89153 * C5721 +
          (C13974 * C13313 + C14249 * C13258 + (C13965 - C13964) * C13314 +
           (C14245 - C14244) * C13259 + (C18429 - C18430) * C13315 +
           (C18597 - C18598) * C13260) *
              C89093 * C89153 * C5722 +
          (C18427 * C13313 + C18596 * C13258 + (C18430 - C18429) * C13314 +
           (C18598 - C18597) * C13259 +
           (C263 * C18310 - C89247 * C18424) * C13315 +
           (C263 * C18485 - C89247 * C18594) * C13260) *
              C89093 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eezx[69] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 + C91 * C116 -
             C104 * C108) *
                C263 +
            (C89 * C571 - C100 * C565 + C90 * C572 - C102 * C566 + C91 * C573 -
             C104 * C567) *
                C89247) *
               C89236 * C89153 * C5073 +
           ((C100 * C819 - C89 * C829 + C102 * C818 - C90 * C827 + C104 * C817 -
             C91 * C825) *
                C263 +
            (C100 * C1425 - C89 * C1433 + C102 * C1426 - C90 * C1434 +
             C104 * C1427 - C91 * C1435) *
                C89247) *
               C89236 * C89153 * C89189) *
              C5075 +
          (((C100 * C107 - C89 * C114 + C102 * C108 - C90 * C116 + C104 * C109 -
             C91 * C118) *
                C263 +
            (C100 * C566 - C89 * C572 + C102 * C567 - C90 * C573 + C104 * C568 -
             C91 * C574) *
                C89247) *
               C89236 * C89153 * C5073 +
           ((C89 * C827 - C100 * C818 + C90 * C825 - C102 * C817 + C91 * C837 -
             C104 * C823) *
                C263 +
            (C89 * C1434 - C100 * C1426 + C90 * C1435 - C102 * C1427 +
             C91 * C1439 - C104 * C1431) *
                C89247) *
               C89236 * C89153 * C89189) *
              C5076 +
          (((C89 * C116 - C100 * C108 + C90 * C118 - C102 * C109 + C91 * C120 -
             C104 * C110) *
                C263 +
            (C89 * C573 - C100 * C567 + C90 * C574 - C102 * C568 + C91 * C575 -
             C104 * C569) *
                C89247) *
               C89236 * C89153 * C5073 +
           ((C100 * C817 - C89 * C825 + C102 * C823 - C90 * C837 +
             C104 * C2629 - C91 * C2630) *
                C263 +
            (C100 * C1427 - C89 * C1435 + C102 * C1431 - C90 * C1439 +
             C104 * C3110 - C91 * C3111) *
                C89247) *
               C89236 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 + C91 * C116 -
            C104 * C108) *
               C263 +
           (C89 * C571 - C100 * C565 + C90 * C572 - C102 * C566 + C91 * C573 -
            C104 * C567) *
               C89247) *
              C89236 * C89153 * C5720 +
          ((C100 * C819 - C89 * C829 + C102 * C818 - C90 * C827 + C104 * C817 -
            C91 * C825) *
               C263 +
           (C100 * C1425 - C89 * C1433 + C102 * C1426 - C90 * C1434 +
            C104 * C1427 - C91 * C1435) *
               C89247) *
              C89236 * C89153 * C5721 +
          ((C89 * C831 - C100 * C820 + C90 * C833 - C102 * C821 + C91 * C835 -
            C104 * C822) *
               C263 +
           (C89 * C1436 - C100 * C1428 + C90 * C1437 - C102 * C1429 +
            C91 * C1438 - C104 * C1430) *
               C89247) *
              C89236 * C89153 * C5722 +
          ((C100 * C5727 - C89 * C5732 + C102 * C5726 - C90 * C5730 +
            C104 * C5725 - C91 * C5728) *
               C263 +
           (C100 * C6061 - C89 * C6064 + C102 * C6062 - C90 * C6065 +
            C104 * C6063 - C91 * C6066) *
               C89247) *
              C89236 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C263 +
             (C89093 * C571 - C13261 * C565) * C89247) *
                C13258 +
            ((C14060 - C14061) * C263 + (C14328 - C14329) * C89247) * C13259 +
            C14346 * C13260) *
               C89153 * C5073 +
           (((C14061 - C14060) * C263 + (C14329 - C14328) * C89247) * C13258 +
            ((C14065 - C14064) * C263 + (C14332 - C14331) * C89247) * C13259 +
            ((C14068 - C14069) * C263 + (C14333 - C14334) * C89247) * C13260) *
               C89153 * C89189) *
              C5075 +
          ((((C13261 * C107 - C89093 * C114) * C263 +
             (C13261 * C566 - C89093 * C572) * C89247) *
                C13258 +
            ((C14072 - C14073) * C263 + (C14335 - C14336) * C89247) * C13259 +
            C14347 * C13260) *
               C89153 * C5073 +
           (((C14073 - C14072) * C263 + (C14336 - C14335) * C89247) * C13258 +
            ((C14077 - C14076) * C263 + (C14339 - C14338) * C89247) * C13259 +
            ((C14080 - C14081) * C263 + (C14340 - C14341) * C89247) * C13260) *
               C89153 * C89189) *
              C5076 +
          ((((C89093 * C116 - C13261 * C108) * C263 +
             (C89093 * C573 - C13261 * C567) * C89247) *
                C13258 +
            ((C15538 - C15539) * C263 + (C15768 - C15769) * C89247) * C13259 +
            ((C15542 - C15543) * C263 + (C15770 - C15771) * C89247) * C13260) *
               C89153 * C5073 +
           (((C15539 - C15538) * C263 + (C15769 - C15768) * C89247) * C13258 +
            ((C15543 - C15542) * C263 + (C15771 - C15770) * C89247) * C13259 +
            ((C13261 * C5725 - C89093 * C5728) * C263 +
             (C13261 * C6063 - C89093 * C6066) * C89247) *
                C13260) *
               C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C89093 * C112 - C13261 * C106) * C263 +
            (C89093 * C571 - C13261 * C565) * C89247) *
               C13258 +
           ((C14060 - C14061) * C263 + (C14328 - C14329) * C89247) * C13259 +
           C14346 * C13260) *
              C89153 * C5720 +
          (((C14061 - C14060) * C263 + (C14329 - C14328) * C89247) * C13258 +
           ((C14065 - C14064) * C263 + (C14332 - C14331) * C89247) * C13259 +
           C18656 * C13260) *
              C89153 * C5721 +
          (C14346 * C13258 +
           ((C14069 - C14068) * C263 + (C14334 - C14333) * C89247) * C13259 +
           ((C18490 - C18491) * C263 + (C18653 - C18654) * C89247) * C13260) *
              C89153 * C5722 +
          (C18656 * C13258 +
           ((C18491 - C18490) * C263 + (C18654 - C18653) * C89247) * C13259 +
           ((C13261 * C18310 - C89093 * C18311) * C263 +
            (C13261 * C18648 - C89093 * C18649) * C89247) *
               C13260) *
              C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eezy[69] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C263 +
             (C89236 * C627 - C180 * C565) * C89247) *
                C89 +
            ((C194 - C195) * C263 + (C634 - C635) * C89247) * C90 +
            C648 * C91) *
               C89153 * C5073 +
           (((C180 * C819 - C89236 * C923) * C263 +
             (C180 * C1425 - C89236 * C1515) * C89247) *
                C89 +
            ((C940 - C941) * C263 + (C1524 - C1525) * C89247) * C90 +
            C3193 * C91) *
               C89153 * C89189) *
              C5075 +
          ((((C195 - C194) * C263 + (C635 - C634) * C89247) * C89 +
            ((C199 - C198) * C263 + (C638 - C637) * C89247) * C90 +
            C649 * C91) *
               C89153 * C5073 +
           (((C941 - C940) * C263 + (C1525 - C1524) * C89247) * C89 +
            ((C945 - C944) * C263 + (C1527 - C1526) * C89247) * C90 +
            ((C2712 - C2713) * C263 + (C3190 - C3191) * C89247) * C91) *
               C89153 * C89189) *
              C5076 +
          ((C648 * C89 + ((C203 - C202) * C263 + (C641 - C640) * C89247) * C90 +
            ((C206 - C207) * C263 + (C642 - C643) * C89247) * C91) *
               C89153 * C5073 +
           (C3193 * C89 +
            ((C2713 - C2712) * C263 + (C3191 - C3190) * C89247) * C90 +
            ((C180 * C2629 - C89236 * C2707) * C263 +
             (C180 * C3110 - C89236 * C3186) * C89247) *
                C91) *
               C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C89236 * C181 - C180 * C106) * C263 +
            (C89236 * C627 - C180 * C565) * C89247) *
               C89 +
           ((C194 - C195) * C263 + (C634 - C635) * C89247) * C90 + C648 * C91) *
              C89153 * C5720 +
          (((C180 * C819 - C89236 * C923) * C263 +
            (C180 * C1425 - C89236 * C1515) * C89247) *
               C89 +
           ((C940 - C941) * C263 + (C1524 - C1525) * C89247) * C90 +
           C3193 * C91) *
              C89153 * C5721 +
          (((C89236 * C926 - C180 * C820) * C263 +
            (C89236 * C1518 - C180 * C1428) * C89247) *
               C89 +
           ((C948 - C949) * C263 + (C1528 - C1529) * C89247) * C90 +
           ((C952 - C953) * C263 + (C1530 - C1531) * C89247) * C91) *
              C89153 * C5722 +
          (((C180 * C5727 - C89236 * C5787) * C263 +
            (C180 * C6061 - C89236 * C6117) * C89247) *
               C89 +
           ((C180 * C5726 - C89236 * C5788) * C263 +
            (C180 * C6062 - C89236 * C6118) * C89247) *
               C90 +
           ((C180 * C5725 - C89236 * C5789) * C263 +
            (C180 * C6063 - C89236 * C6119) * C89247) *
               C91) *
              C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
             C13260 * C926 - C13315 * C820) *
                C263 +
            (C13258 * C627 - C13313 * C565 + C13259 * C1515 - C13314 * C1425 +
             C13260 * C1518 - C13315 * C1428) *
                C89247) *
               C89093 * C89153 * C5073 +
           ((C13313 * C819 - C13258 * C923 + C13314 * C820 - C13259 * C926 +
             C13315 * C5727 - C13260 * C5787) *
                C263 +
            (C13313 * C1425 - C13258 * C1515 + C13314 * C1428 - C13259 * C1518 +
             C13315 * C6061 - C13260 * C6117) *
                C89247) *
               C89093 * C89153 * C89189) *
              C5075 +
          (((C13313 * C107 - C13258 * C182 + C13314 * C818 - C13259 * C924 +
             C13315 * C821 - C13260 * C927) *
                C263 +
            (C13313 * C566 - C13258 * C628 + C13314 * C1426 - C13259 * C1516 +
             C13315 * C1429 - C13260 * C1519) *
                C89247) *
               C89093 * C89153 * C5073 +
           ((C13258 * C924 - C13313 * C818 + C13259 * C927 - C13314 * C821 +
             C13260 * C5788 - C13315 * C5726) *
                C263 +
            (C13258 * C1516 - C13313 * C1426 + C13259 * C1519 - C13314 * C1429 +
             C13260 * C6118 - C13315 * C6062) *
                C89247) *
               C89093 * C89153 * C89189) *
              C5076 +
          (((C13258 * C183 - C13313 * C108 + C13259 * C925 - C13314 * C817 +
             C13260 * C928 - C13315 * C822) *
                C263 +
            (C13258 * C629 - C13313 * C567 + C13259 * C1517 - C13314 * C1427 +
             C13260 * C1520 - C13315 * C1430) *
                C89247) *
               C89093 * C89153 * C5073 +
           ((C13313 * C817 - C13258 * C925 + C13314 * C822 - C13259 * C928 +
             C13315 * C5725 - C13260 * C5789) *
                C263 +
            (C13313 * C1427 - C13258 * C1517 + C13314 * C1430 - C13259 * C1520 +
             C13315 * C6063 - C13260 * C6119) *
                C89247) *
               C89093 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
            C13260 * C926 - C13315 * C820) *
               C263 +
           (C13258 * C627 - C13313 * C565 + C13259 * C1515 - C13314 * C1425 +
            C13260 * C1518 - C13315 * C1428) *
               C89247) *
              C89093 * C89153 * C5720 +
          ((C13313 * C819 - C13258 * C923 + C13314 * C820 - C13259 * C926 +
            C13315 * C5727 - C13260 * C5787) *
               C263 +
           (C13313 * C1425 - C13258 * C1515 + C13314 * C1428 - C13259 * C1518 +
            C13315 * C6061 - C13260 * C6117) *
               C89247) *
              C89093 * C89153 * C5721 +
          ((C13258 * C926 - C13313 * C820 + C13259 * C5787 - C13314 * C5727 +
            C13260 * C13873 - C13315 * C13743) *
               C263 +
           (C13258 * C1518 - C13313 * C1428 + C13259 * C6117 - C13314 * C6061 +
            C13260 * C14421 - C13315 * C14323) *
               C89247) *
              C89093 * C89153 * C5722 +
          ((C13313 * C5727 - C13258 * C5787 + C13314 * C13743 -
            C13259 * C13873 + C13315 * C18310 - C13260 * C18372) *
               C263 +
           (C13313 * C6061 - C13258 * C6117 + C13314 * C14323 -
            C13259 * C14421 + C13315 * C18648 - C13260 * C18706) *
               C89247) *
              C89093 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eezz[69] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C89236 *
                C89 +
            C735 * C90 + C736 * C91) *
               C89153 * C5073 -
           (C1642 * C91 + C1643 * C90 +
            (C263 * C1029 - C699 * C819 - C263 * C1425 + C89247 * C1607) *
                C89236 * C89) *
               C89153 * C89189) *
              C5075 +
          ((C1643 * C89 + C1642 * C90 + C3276 * C91) * C89153 * C89189 -
           (C737 * C91 + C736 * C90 + C735 * C89) * C89153 * C5073) *
              C5076 +
          ((C736 * C89 + C737 * C90 + C738 * C91) * C89153 * C5073 -
           ((C263 * C2789 - C699 * C2629 - C263 * C3110 + C89247 * C3267) *
                C89236 * C91 +
            C3276 * C90 + C1642 * C89) *
               C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C89236 *
               C89 +
           C735 * C90 + C736 * C91) *
              C89153 * C5720 -
          (C1642 * C91 + C1643 * C90 +
           (C263 * C1029 - C699 * C819 - C263 * C1425 + C89247 * C1607) *
               C89236 * C89) *
              C89153 * C5721 +
          ((C263 * C1032 - C699 * C820 - C263 * C1428 + C89247 * C1608) *
               C89236 * C89 +
           C1644 * C90 + C1645 * C91) *
              C89153 * C5722 -
          ((C263 * C5845 - C699 * C5725 - C263 * C6063 + C89247 * C6170) *
               C89236 * C91 +
           (C263 * C5844 - C699 * C5726 - C263 * C6062 + C89247 * C6171) *
               C89236 * C90 +
           (C263 * C5843 - C699 * C5727 - C263 * C6061 + C89247 * C6172) *
               C89236 * C89) *
              C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C13258 +
            C14524 * C13259 + C14525 * C13260) *
               C89093 * C89153 * C5073 -
           (C14526 * C13260 + C14525 * C13259 + C14524 * C13258) * C89093 *
               C89153 * C89189) *
              C5075 +
          ((C1639 * C13258 + C1640 * C13259 + C14527 * C13260) * C89093 *
               C89153 * C89189 -
           (C1640 * C13260 + C1639 * C13259 + C731 * C13258) * C89093 * C89153 *
               C5073) *
              C5076 +
          ((C732 * C13258 + C1638 * C13259 + C1641 * C13260) * C89093 * C89153 *
               C5073 -
           ((C263 * C5845 - C699 * C5725 - C263 * C6063 + C89247 * C6170) *
                C13260 +
            C1641 * C13259 + C1638 * C13258) *
               C89093 * C89153 * C89189) *
              C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C13258 +
           C14524 * C13259 + C14525 * C13260) *
              C89093 * C89153 * C5720 -
          (C14526 * C13260 + C14525 * C13259 + C14524 * C13258) * C89093 *
              C89153 * C5721 +
          (C14525 * C13258 + C14526 * C13259 + C18765 * C13260) * C89093 *
              C89153 * C5722 -
          ((C263 * C18424 - C699 * C18310 - C263 * C18648 + C89247 * C18757) *
               C13260 +
           C18765 * C13259 + C14526 * C13258) *
              C89093 * C89153 * C5723) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eexx[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C100 * C112 - C101 * C106 - C100 * C113 + C89 * C124 +
             C102 * C114 - C103 * C107 - C102 * C115 + C90 * C125 +
             C104 * C116 - C105 * C108 - C104 * C117 + C91 * C126) *
                C89247 * C89236 * C9228 -
            (C104 * C1730 - C105 * C1722 - C104 * C1731 + C91 * C1746 +
             C102 * C1732 - C103 * C1723 - C102 * C1733 + C90 * C1747 +
             C100 * C1734 - C101 * C1724 - C100 * C1735 + C89 * C1748) *
                C89247 * C89236 * C89217) *
               C89307 +
           ((C100 * C4101 - C101 * C4097 - C100 * C4102 + C89 * C4109 +
             C102 * C4103 - C103 * C4098 - C102 * C4104 + C90 * C4110 +
             C104 * C4105 - C105 * C4099 - C104 * C4106 + C91 * C4111) *
                C89247 * C89236 * C89217 -
            (C104 * C825 - C105 * C817 - C104 * C826 + C91 * C841 +
             C102 * C827 - C103 * C818 - C102 * C828 + C90 * C842 +
             C100 * C829 - C101 * C819 - C100 * C830 + C89 * C843) *
                C89247 * C89236 * C9228) *
               C89189) *
              C89299 +
          (((C100 * C1732 - C101 * C1723 - C100 * C1733 + C89 * C1747 +
             C102 * C1730 - C103 * C1722 - C102 * C1731 + C90 * C1746 +
             C104 * C1742 - C105 * C1728 - C104 * C1743 + C91 * C1752) *
                C89247 * C89236 * C89217 -
            (C104 * C118 - C105 * C109 - C104 * C119 + C91 * C127 +
             C102 * C116 - C103 * C108 - C102 * C117 + C90 * C126 +
             C100 * C114 - C101 * C107 - C100 * C115 + C89 * C125) *
                C89247 * C89236 * C9228) *
               C89307 +
           ((C100 * C827 - C101 * C818 - C100 * C828 + C89 * C842 +
             C102 * C825 - C103 * C817 - C102 * C826 + C90 * C841 +
             C104 * C837 - C105 * C823 - C104 * C838 + C91 * C847) *
                C89247 * C89236 * C9228 -
            (C104 * C4107 - C105 * C4100 - C104 * C4108 + C91 * C4112 +
             C102 * C4105 - C103 * C4099 - C102 * C4106 + C90 * C4111 +
             C100 * C4103 - C101 * C4098 - C100 * C4104 + C89 * C4110) *
                C89247 * C89236 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                 C89247 * C13258 +
             C13794 * C13259 + C13795 * C13260) *
                C9228 -
            (C16720 * C13260 + C16721 * C13259 +
             (C13261 * C1734 - C13262 * C1724 - C13261 * C1735 +
              C89093 * C1748) *
                 C89247 * C13258) *
                C89217) *
               C89307 +
           ((C16721 * C13258 + C16720 * C13259 + C21135 * C13260) * C89217 -
            (C13796 * C13260 + C13795 * C13259 + C13794 * C13258) * C9228) *
               C89189) *
              C89299 +
          ((((C13261 * C1732 - C13262 * C1723 - C13261 * C1733 +
              C89093 * C1747) *
                 C89247 * C13258 +
             C16722 * C13259 + C16723 * C13260) *
                C89217 -
            (C13798 * C13260 + C13797 * C13259 +
             (C13261 * C114 - C13262 * C107 - C13261 * C115 + C89093 * C125) *
                 C89247 * C13258) *
                C9228) *
               C89307 +
           ((C13797 * C13258 + C13798 * C13259 + C13799 * C13260) * C9228 -
            ((C13261 * C16687 - C13262 * C16684 - C13261 * C16688 +
              C89093 * C16690) *
                 C89247 * C13260 +
             C16723 * C13259 + C16722 * C13258) *
                C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eexy[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C100 +
             (C89236 * C187 - C180 * C113) * C89 + (C194 - C195) * C102 +
             (C196 - C197) * C90 + C210 * C104 + C211 * C91) *
                C89247 * C9228 +
            ((C180 * C1724 - C89236 * C1828) * C100 +
             (C180 * C1735 - C89236 * C1836) * C89 + (C1845 - C1846) * C102 +
             (C1847 - C1848) * C90 + C3433 * C104 + C3434 * C91) *
                C89247 * C89217) *
               C89307 +
           (((C180 * C819 - C89236 * C923) * C100 +
             (C180 * C830 - C89236 * C931) * C89 + (C940 - C941) * C102 +
             (C942 - C943) * C90 + C2710 * C104 + C2711 * C91) *
                C89247 * C9228 +
            ((C89236 * C4211 - C180 * C4097) * C100 +
             (C89236 * C4215 - C180 * C4102) * C89 + (C4220 - C4221) * C102 +
             (C4222 - C4223) * C90 + (C4224 - C4225) * C104 +
             (C4226 - C4227) * C91) *
                C89247 * C89217) *
               C89189) *
              C89299 +
          ((((C195 - C194) * C100 + (C197 - C196) * C89 + (C199 - C198) * C102 +
             (C201 - C200) * C90 + C212 * C104 + C213 * C91) *
                C89247 * C9228 +
            ((C1846 - C1845) * C100 + (C1848 - C1847) * C89 +
             (C1850 - C1849) * C102 + (C1852 - C1851) * C90 +
             (C3435 - C3436) * C104 + (C3437 - C3438) * C91) *
                C89247 * C89217) *
               C89307 +
           (((C941 - C940) * C100 + (C943 - C942) * C89 + (C945 - C944) * C102 +
             (C947 - C946) * C90 + (C2712 - C2713) * C104 +
             (C2714 - C2715) * C91) *
                C89247 * C9228 +
            ((C4221 - C4220) * C100 + (C4223 - C4222) * C89 +
             (C4225 - C4224) * C102 + (C4227 - C4226) * C90 +
             (C180 * C4100 - C89236 * C4214) * C104 +
             (C180 * C4108 - C89236 * C4218) * C91) *
                C89247 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
              C13260 * C926 - C13315 * C820) *
                 C13261 +
             (C13258 * C187 - C13313 * C113 + C13259 * C931 - C13314 * C830 +
              C13260 * C934 - C13315 * C832) *
                 C89093) *
                C89247 * C9228 +
            ((C13313 * C1724 - C13258 * C1828 + C13314 * C4097 -
              C13259 * C4211 + C13315 * C8516 - C13260 * C8600) *
                 C13261 +
             (C13313 * C1735 - C13258 * C1836 + C13314 * C4102 -
              C13259 * C4215 + C13315 * C8522 - C13260 * C8603) *
                 C89093) *
                C89247 * C89217) *
               C89307 +
           (((C13313 * C819 - C13258 * C923 + C13314 * C820 - C13259 * C926 +
              C13315 * C5727 - C13260 * C5787) *
                 C13261 +
             (C13313 * C830 - C13258 * C931 + C13314 * C832 - C13259 * C934 +
              C13315 * C5733 - C13260 * C5790) *
                 C89093) *
                C89247 * C9228 +
            ((C13258 * C4211 - C13313 * C4097 + C13259 * C8600 -
              C13314 * C8516 + C13260 * C16821 - C13315 * C16683) *
                 C13261 +
             (C13258 * C4215 - C13313 * C4102 + C13259 * C8603 -
              C13314 * C8522 + C13260 * C16823 - C13315 * C16686) *
                 C89093) *
                C89247 * C89217) *
               C89189) *
              C89299 +
          ((((C13313 * C107 - C13258 * C182 + C13314 * C818 - C13259 * C924 +
              C13315 * C821 - C13260 * C927) *
                 C13261 +
             (C13313 * C115 - C13258 * C188 + C13314 * C828 - C13259 * C932 +
              C13315 * C834 - C13260 * C935) *
                 C89093) *
                C89247 * C9228 +
            ((C13258 * C1829 - C13313 * C1723 + C13259 * C4212 -
              C13314 * C4098 + C13260 * C8601 - C13315 * C8515) *
                 C13261 +
             (C13258 * C1837 - C13313 * C1733 + C13259 * C4216 -
              C13314 * C4104 + C13260 * C8604 - C13315 * C8520) *
                 C89093) *
                C89247 * C89217) *
               C89307 +
           (((C13258 * C924 - C13313 * C818 + C13259 * C927 - C13314 * C821 +
              C13260 * C5788 - C13315 * C5726) *
                 C13261 +
             (C13258 * C932 - C13313 * C828 + C13259 * C935 - C13314 * C834 +
              C13260 * C5791 - C13315 * C5731) *
                 C89093) *
                C89247 * C9228 +
            ((C13313 * C4098 - C13258 * C4212 + C13314 * C8515 -
              C13259 * C8601 + C13315 * C16684 - C13260 * C16822) *
                 C13261 +
             (C13313 * C4104 - C13258 * C4216 + C13314 * C8520 -
              C13259 * C8604 + C13315 * C16688 - C13260 * C16824) *
                 C89093) *
                C89247 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eexz[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C100 +
             (C89247 * C270 - C263 * C113) * C89 + (C277 - C278) * C102 +
             (C279 - C280) * C90 + C293 * C104 + C294 * C91) *
                C89236 * C9228 +
            ((C263 * C1724 - C89247 * C1934) * C100 +
             (C263 * C1735 - C89247 * C1942) * C89 + (C1951 - C1952) * C102 +
             (C1953 - C1954) * C90 + C3515 * C104 + C3516 * C91) *
                C89236 * C89217) *
               C89307 +
           (((C263 * C819 - C89247 * C1029) * C100 +
             (C263 * C830 - C89247 * C1037) * C89 + (C1046 - C1047) * C102 +
             (C1048 - C1049) * C90 + C2792 * C104 + C2793 * C91) *
                C89236 * C9228 +
            ((C89247 * C4325 - C263 * C4097) * C100 +
             (C89247 * C4329 - C263 * C4102) * C89 + (C4334 - C4335) * C102 +
             (C4336 - C4337) * C90 + (C4338 - C4339) * C104 +
             (C4340 - C4341) * C91) *
                C89236 * C89217) *
               C89189) *
              C89299 +
          ((((C278 - C277) * C100 + (C280 - C279) * C89 + (C282 - C281) * C102 +
             (C284 - C283) * C90 + C295 * C104 + C296 * C91) *
                C89236 * C9228 +
            ((C1952 - C1951) * C100 + (C1954 - C1953) * C89 +
             (C1956 - C1955) * C102 + (C1958 - C1957) * C90 +
             (C3517 - C3518) * C104 + (C3519 - C3520) * C91) *
                C89236 * C89217) *
               C89307 +
           (((C1047 - C1046) * C100 + (C1049 - C1048) * C89 +
             (C1051 - C1050) * C102 + (C1053 - C1052) * C90 +
             (C2794 - C2795) * C104 + (C2796 - C2797) * C91) *
                C89236 * C9228 +
            ((C4335 - C4334) * C100 + (C4337 - C4336) * C89 +
             (C4339 - C4338) * C102 + (C4341 - C4340) * C90 +
             (C263 * C4100 - C89247 * C4328) * C104 +
             (C263 * C4108 - C89247 * C4332) * C91) *
                C89236 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C89247 * C264 - C263 * C106) * C13261 +
              (C89247 * C270 - C263 * C113) * C89093) *
                 C13258 +
             ((C13956 - C13957) * C13261 + (C13958 - C13959) * C89093) *
                 C13259 +
             C13981 * C13260) *
                C9228 +
            (((C263 * C1724 - C89247 * C1934) * C13261 +
              (C263 * C1735 - C89247 * C1942) * C89093) *
                 C13258 +
             ((C16928 - C16929) * C13261 + (C16930 - C16931) * C89093) *
                 C13259 +
             C21296 * C13260) *
                C89217) *
               C89307 +
           ((((C13957 - C13956) * C13261 + (C13959 - C13958) * C89093) *
                 C13258 +
             ((C13961 - C13960) * C13261 + (C13963 - C13962) * C89093) *
                 C13259 +
             C18435 * C13260) *
                C9228 +
            (((C16929 - C16928) * C13261 + (C16931 - C16930) * C89093) *
                 C13258 +
             ((C16933 - C16932) * C13261 + (C16935 - C16934) * C89093) *
                 C13259 +
             ((C21290 - C21291) * C13261 + (C21292 - C21293) * C89093) *
                 C13260) *
                C89217) *
               C89189) *
              C89299 +
          (((((C278 - C277) * C13261 + (C280 - C279) * C89093) * C13258 +
             ((C1046 - C1047) * C13261 + (C1048 - C1049) * C89093) * C13259 +
             C13980 * C13260) *
                C9228 +
            (((C1952 - C1951) * C13261 + (C1954 - C1953) * C89093) * C13258 +
             ((C4334 - C4335) * C13261 + (C4336 - C4337) * C89093) * C13259 +
             ((C16936 - C16937) * C13261 + (C16938 - C16939) * C89093) *
                 C13260) *
                C89217) *
               C89307 +
           ((((C1047 - C1046) * C13261 + (C1049 - C1048) * C89093) * C13258 +
             ((C1054 - C1055) * C13261 + (C1056 - C1057) * C89093) * C13259 +
             ((C13970 - C13971) * C13261 + (C13972 - C13973) * C89093) *
                 C13260) *
                C9228 +
            (((C4335 - C4334) * C13261 + (C4337 - C4336) * C89093) * C13258 +
             ((C16937 - C16936) * C13261 + (C16939 - C16938) * C89093) *
                 C13259 +
             ((C263 * C16684 - C89247 * C16924) * C13261 +
              (C263 * C16688 - C89247 * C16926) * C89093) *
                 C13260) *
                C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 + C91 * C116 -
              C104 * C108) *
                 C180 +
             (C89 * C352 - C100 * C346 + C90 * C353 - C102 * C347 + C91 * C354 -
              C104 * C348) *
                 C89236) *
                C89247 * C9228 +
            ((C100 * C1724 - C89 * C1734 + C102 * C1723 - C90 * C1732 +
              C104 * C1722 - C91 * C1730) *
                 C180 +
             (C100 * C2040 - C89 * C2048 + C102 * C2041 - C90 * C2049 +
              C104 * C2042 - C91 * C2050) *
                 C89236) *
                C89247 * C89217) *
               C89307 +
           (((C100 * C819 - C89 * C829 + C102 * C818 - C90 * C827 +
              C104 * C817 - C91 * C825) *
                 C180 +
             (C100 * C1135 - C89 * C1143 + C102 * C1136 - C90 * C1144 +
              C104 * C1137 - C91 * C1145) *
                 C89236) *
                C89247 * C9228 +
            ((C89 * C4101 - C100 * C4097 + C90 * C4103 - C102 * C4098 +
              C91 * C4105 - C104 * C4099) *
                 C180 +
             (C89 * C4443 - C100 * C4439 + C90 * C4444 - C102 * C4440 +
              C91 * C4445 - C104 * C4441) *
                 C89236) *
                C89247 * C89217) *
               C89189) *
              C89299 +
          ((((C100 * C107 - C89 * C114 + C102 * C108 - C90 * C116 +
              C104 * C109 - C91 * C118) *
                 C180 +
             (C100 * C347 - C89 * C353 + C102 * C348 - C90 * C354 +
              C104 * C349 - C91 * C355) *
                 C89236) *
                C89247 * C9228 +
            ((C89 * C1732 - C100 * C1723 + C90 * C1730 - C102 * C1722 +
              C91 * C1742 - C104 * C1728) *
                 C180 +
             (C89 * C2049 - C100 * C2041 + C90 * C2050 - C102 * C2042 +
              C91 * C2054 - C104 * C2046) *
                 C89236) *
                C89247 * C89217) *
               C89307 +
           (((C89 * C827 - C100 * C818 + C90 * C825 - C102 * C817 + C91 * C837 -
              C104 * C823) *
                 C180 +
             (C89 * C1144 - C100 * C1136 + C90 * C1145 - C102 * C1137 +
              C91 * C1149 - C104 * C1141) *
                 C89236) *
                C89247 * C9228 +
            ((C100 * C4098 - C89 * C4103 + C102 * C4099 - C90 * C4105 +
              C104 * C4100 - C91 * C4107) *
                 C180 +
             (C100 * C4440 - C89 * C4444 + C102 * C4441 - C90 * C4445 +
              C104 * C4442 - C91 * C4446) *
                 C89236) *
                C89247 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C13313 +
             (C89093 * C352 - C13261 * C346) * C13258 +
             (C14060 - C14061) * C13314 + (C14062 - C14063) * C13259 +
             C14084 * C13315 + C14085 * C13260) *
                C89247 * C9228 +
            ((C13261 * C1724 - C89093 * C1734) * C13313 +
             (C13261 * C2040 - C89093 * C2048) * C13258 +
             (C17042 - C17043) * C13314 + (C17044 - C17045) * C13259 +
             C21373 * C13315 + C21374 * C13260) *
                C89247 * C89217) *
               C89307 +
           (((C14061 - C14060) * C13313 + (C14063 - C14062) * C13258 +
             (C14065 - C14064) * C13314 + (C14067 - C14066) * C13259 +
             C18488 * C13315 + C18489 * C13260) *
                C89247 * C9228 +
            ((C17043 - C17042) * C13313 + (C17045 - C17044) * C13258 +
             (C17047 - C17046) * C13314 + (C17049 - C17048) * C13259 +
             (C21375 - C21376) * C13315 + (C21377 - C21378) * C13260) *
                C89247 * C89217) *
               C89189) *
              C89299 +
          ((((C13261 * C107 - C89093 * C114) * C13313 +
             (C13261 * C347 - C89093 * C353) * C13258 +
             (C14072 - C14073) * C13314 + (C14074 - C14075) * C13259 +
             C14086 * C13315 + C14087 * C13260) *
                C89247 * C9228 +
            ((C89093 * C1732 - C13261 * C1723) * C13313 +
             (C89093 * C2049 - C13261 * C2041) * C13258 +
             (C17050 - C17051) * C13314 + (C17052 - C17053) * C13259 +
             (C17054 - C17055) * C13315 + (C17056 - C17057) * C13260) *
                C89247 * C89217) *
               C89307 +
           (((C14073 - C14072) * C13313 + (C14075 - C14074) * C13258 +
             (C14077 - C14076) * C13314 + (C14079 - C14078) * C13259 +
             (C14080 - C14081) * C13315 + (C14082 - C14083) * C13260) *
                C89247 * C9228 +
            ((C17051 - C17050) * C13313 + (C17053 - C17052) * C13258 +
             (C17055 - C17054) * C13314 + (C17057 - C17056) * C13259 +
             (C13261 * C16684 - C89093 * C16687) * C13315 +
             (C13261 * C17038 - C89093 * C17040) * C13260) *
                C89247 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C89 +
             C440 * C90 + C441 * C91) *
                C89247 * C9228 -
            (C2163 * C91 + C2164 * C90 +
             (C180 * C1828 - C408 * C1724 - C180 * C2040 + C89236 * C2132) *
                 C89) *
                C89247 * C89217) *
               C89307 +
           (((C180 * C4211 - C408 * C4097 - C180 * C4439 + C89236 * C4545) *
                 C89 +
             C4562 * C90 + C4563 * C91) *
                C89247 * C89217 -
            (C1258 * C91 + C1259 * C90 +
             (C180 * C923 - C408 * C819 - C180 * C1135 + C89236 * C1227) *
                 C89) *
                C89247 * C9228) *
               C89189) *
              C89299 +
          (((C2164 * C89 + C2163 * C90 + C3678 * C91) * C89247 * C89217 -
            (C442 * C91 + C441 * C90 + C440 * C89) * C89247 * C9228) *
               C89307 +
           ((C1259 * C89 + C1258 * C90 + C2955 * C91) * C89247 * C9228 -
            ((C180 * C4214 - C408 * C4100 - C180 * C4442 + C89236 * C4548) *
                 C91 +
             C4563 * C90 + C4562 * C89) *
                C89247 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13313 * C181 - C13466 * C106 - C13313 * C346 + C13258 * C409 +
             C13314 * C923 - C13467 * C819 - C13314 * C1135 + C13259 * C1227 +
             C13315 * C926 - C13468 * C820 - C13315 * C1138 + C13260 * C1228) *
                C89093 * C89247 * C9228 -
            (C13315 * C8600 - C13468 * C8516 - C13315 * C8760 + C13260 * C8842 +
             C13314 * C4211 - C13467 * C4097 - C13314 * C4439 + C13259 * C4545 +
             C13313 * C1828 - C13466 * C1724 - C13313 * C2040 +
             C13258 * C2132) *
                C89093 * C89247 * C89217) *
               C89307 +
           ((C13313 * C4211 - C13466 * C4097 - C13313 * C4439 + C13258 * C4545 +
             C13314 * C8600 - C13467 * C8516 - C13314 * C8760 + C13259 * C8842 +
             C13315 * C16821 - C13468 * C16683 - C13315 * C17037 +
             C13260 * C17155) *
                C89093 * C89247 * C89217 -
            (C13315 * C5787 - C13468 * C5727 - C13315 * C5899 + C13260 * C5957 +
             C13314 * C926 - C13467 * C820 - C13314 * C1138 + C13259 * C1228 +
             C13313 * C923 - C13466 * C819 - C13313 * C1135 + C13258 * C1227) *
                C89093 * C89247 * C9228) *
               C89189) *
              C89299 +
          (((C13313 * C1829 - C13466 * C1723 - C13313 * C2041 + C13258 * C2131 +
             C13314 * C4212 - C13467 * C4098 - C13314 * C4440 + C13259 * C4546 +
             C13315 * C8601 - C13468 * C8515 - C13315 * C8761 +
             C13260 * C8841) *
                C89093 * C89247 * C89217 -
            (C13315 * C927 - C13468 * C821 - C13315 * C1139 + C13260 * C1229 +
             C13314 * C924 - C13467 * C818 - C13314 * C1136 + C13259 * C1226 +
             C13313 * C182 - C13466 * C107 - C13313 * C347 + C13258 * C410) *
                C89093 * C89247 * C9228) *
               C89307 +
           ((C13313 * C924 - C13466 * C818 - C13313 * C1136 + C13258 * C1226 +
             C13314 * C927 - C13467 * C821 - C13314 * C1139 + C13259 * C1229 +
             C13315 * C5788 - C13468 * C5726 - C13315 * C5900 +
             C13260 * C5956) *
                C89093 * C89247 * C9228 -
            (C13315 * C16822 - C13468 * C16684 - C13315 * C17038 +
             C13260 * C17156 + C13314 * C8601 - C13467 * C8515 -
             C13314 * C8761 + C13259 * C8841 + C13313 * C4212 - C13466 * C4098 -
             C13313 * C4440 + C13258 * C4546) *
                C89093 * C89247 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C89247 * C264 - C263 * C106) * C180 +
              (C89247 * C493 - C263 * C346) * C89236) *
                 C89 +
             ((C277 - C278) * C180 + (C500 - C501) * C89236) * C90 +
             C514 * C91) *
                C9228 +
            (((C263 * C1724 - C89247 * C1934) * C180 +
              (C263 * C2040 - C89247 * C2240) * C89236) *
                 C89 +
             ((C1951 - C1952) * C180 + (C2249 - C2250) * C89236) * C90 +
             C3759 * C91) *
                C89217) *
               C89307 +
           ((((C263 * C819 - C89247 * C1029) * C180 +
              (C263 * C1135 - C89247 * C1335) * C89236) *
                 C89 +
             ((C1046 - C1047) * C180 + (C1344 - C1345) * C89236) * C90 +
             C3036 * C91) *
                C9228 +
            (((C89247 * C4325 - C263 * C4097) * C180 +
              (C89247 * C4661 - C263 * C4439) * C89236) *
                 C89 +
             ((C4334 - C4335) * C180 + (C4666 - C4667) * C89236) * C90 +
             ((C4338 - C4339) * C180 + (C4668 - C4669) * C89236) * C91) *
                C89217) *
               C89189) *
              C89299 +
          (((((C278 - C277) * C180 + (C501 - C500) * C89236) * C89 +
             ((C282 - C281) * C180 + (C504 - C503) * C89236) * C90 +
             C515 * C91) *
                C9228 +
            (((C1952 - C1951) * C180 + (C2250 - C2249) * C89236) * C89 +
             ((C1956 - C1955) * C180 + (C2252 - C2251) * C89236) * C90 +
             ((C3517 - C3518) * C180 + (C3756 - C3757) * C89236) * C91) *
                C89217) *
               C89307 +
           ((((C1047 - C1046) * C180 + (C1345 - C1344) * C89236) * C89 +
             ((C1051 - C1050) * C180 + (C1347 - C1346) * C89236) * C90 +
             ((C2794 - C2795) * C180 + (C3033 - C3034) * C89236) * C91) *
                C9228 +
            (((C4335 - C4334) * C180 + (C4667 - C4666) * C89236) * C89 +
             ((C4339 - C4338) * C180 + (C4669 - C4668) * C89236) * C90 +
             ((C263 * C4100 - C89247 * C4328) * C180 +
              (C263 * C4442 - C89247 * C4664) * C89236) *
                 C91) *
                C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C13313 +
             (C89247 * C493 - C263 * C346) * C13258 +
             (C13956 - C13957) * C13314 + (C14240 - C14241) * C13259 +
             C13974 * C13315 + C14249 * C13260) *
                C89093 * C9228 +
            ((C263 * C1724 - C89247 * C1934) * C13313 +
             (C263 * C2040 - C89247 * C2240) * C13258 +
             (C16928 - C16929) * C13314 + (C17258 - C17259) * C13259 +
             C21288 * C13315 + C21529 * C13260) *
                C89093 * C89217) *
               C89307 +
           (((C13957 - C13956) * C13313 + (C14241 - C14240) * C13258 +
             (C13961 - C13960) * C13314 + (C14243 - C14242) * C13259 +
             C18427 * C13315 + C18596 * C13260) *
                C89093 * C9228 +
            ((C16929 - C16928) * C13313 + (C17259 - C17258) * C13258 +
             (C16933 - C16932) * C13314 + (C17261 - C17260) * C13259 +
             (C21290 - C21291) * C13315 + (C21530 - C21531) * C13260) *
                C89093 * C89217) *
               C89189) *
              C89299 +
          ((((C278 - C277) * C13313 + (C501 - C500) * C13258 +
             (C1046 - C1047) * C13314 + (C1344 - C1345) * C13259 +
             C13968 * C13315 + C14246 * C13260) *
                C89093 * C9228 +
            ((C1952 - C1951) * C13313 + (C2250 - C2249) * C13258 +
             (C4334 - C4335) * C13314 + (C4666 - C4667) * C13259 +
             (C16936 - C16937) * C13315 + (C17262 - C17263) * C13260) *
                C89093 * C89217) *
               C89307 +
           (((C1047 - C1046) * C13313 + (C1345 - C1344) * C13258 +
             (C1054 - C1055) * C13314 + (C1348 - C1349) * C13259 +
             (C13970 - C13971) * C13315 + (C14247 - C14248) * C13260) *
                C89093 * C9228 +
            ((C4335 - C4334) * C13313 + (C4667 - C4666) * C13258 +
             (C16937 - C16936) * C13314 + (C17263 - C17262) * C13259 +
             (C263 * C16684 - C89247 * C16924) * C13315 +
             (C263 * C17038 - C89247 * C17256) * C13260) *
                C89093 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eezx[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 + C91 * C116 -
              C104 * C108) *
                 C263 +
             (C89 * C571 - C100 * C565 + C90 * C572 - C102 * C566 + C91 * C573 -
              C104 * C567) *
                 C89247) *
                C89236 * C9228 +
            ((C100 * C1724 - C89 * C1734 + C102 * C1723 - C90 * C1732 +
              C104 * C1722 - C91 * C1730) *
                 C263 +
             (C100 * C2330 - C89 * C2338 + C102 * C2331 - C90 * C2339 +
              C104 * C2332 - C91 * C2340) *
                 C89247) *
                C89236 * C89217) *
               C89307 +
           (((C100 * C819 - C89 * C829 + C102 * C818 - C90 * C827 +
              C104 * C817 - C91 * C825) *
                 C263 +
             (C100 * C1425 - C89 * C1433 + C102 * C1426 - C90 * C1434 +
              C104 * C1427 - C91 * C1435) *
                 C89247) *
                C89236 * C9228 +
            ((C89 * C4101 - C100 * C4097 + C90 * C4103 - C102 * C4098 +
              C91 * C4105 - C104 * C4099) *
                 C263 +
             (C89 * C4771 - C100 * C4767 + C90 * C4772 - C102 * C4768 +
              C91 * C4773 - C104 * C4769) *
                 C89247) *
                C89236 * C89217) *
               C89189) *
              C89299 +
          ((((C100 * C107 - C89 * C114 + C102 * C108 - C90 * C116 +
              C104 * C109 - C91 * C118) *
                 C263 +
             (C100 * C566 - C89 * C572 + C102 * C567 - C90 * C573 +
              C104 * C568 - C91 * C574) *
                 C89247) *
                C89236 * C9228 +
            ((C89 * C1732 - C100 * C1723 + C90 * C1730 - C102 * C1722 +
              C91 * C1742 - C104 * C1728) *
                 C263 +
             (C89 * C2339 - C100 * C2331 + C90 * C2340 - C102 * C2332 +
              C91 * C2344 - C104 * C2336) *
                 C89247) *
                C89236 * C89217) *
               C89307 +
           (((C89 * C827 - C100 * C818 + C90 * C825 - C102 * C817 + C91 * C837 -
              C104 * C823) *
                 C263 +
             (C89 * C1434 - C100 * C1426 + C90 * C1435 - C102 * C1427 +
              C91 * C1439 - C104 * C1431) *
                 C89247) *
                C89236 * C9228 +
            ((C100 * C4098 - C89 * C4103 + C102 * C4099 - C90 * C4105 +
              C104 * C4100 - C91 * C4107) *
                 C263 +
             (C100 * C4768 - C89 * C4772 + C102 * C4769 - C90 * C4773 +
              C104 * C4770 - C91 * C4774) *
                 C89247) *
                C89236 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C89093 * C112 - C13261 * C106) * C263 +
              (C89093 * C571 - C13261 * C565) * C89247) *
                 C13258 +
             ((C14060 - C14061) * C263 + (C14328 - C14329) * C89247) * C13259 +
             C14346 * C13260) *
                C9228 +
            (((C13261 * C1724 - C89093 * C1734) * C263 +
              (C13261 * C2330 - C89093 * C2338) * C89247) *
                 C13258 +
             ((C17042 - C17043) * C263 + (C17366 - C17367) * C89247) * C13259 +
             C21613 * C13260) *
                C89217) *
               C89307 +
           ((((C14061 - C14060) * C263 + (C14329 - C14328) * C89247) * C13258 +
             ((C14065 - C14064) * C263 + (C14332 - C14331) * C89247) * C13259 +
             C18656 * C13260) *
                C9228 +
            (((C17043 - C17042) * C263 + (C17367 - C17366) * C89247) * C13258 +
             ((C17047 - C17046) * C263 + (C17369 - C17368) * C89247) * C13259 +
             ((C21375 - C21376) * C263 + (C21610 - C21611) * C89247) * C13260) *
                C89217) *
               C89189) *
              C89299 +
          (((((C13261 * C107 - C89093 * C114) * C263 +
              (C13261 * C566 - C89093 * C572) * C89247) *
                 C13258 +
             ((C14072 - C14073) * C263 + (C14335 - C14336) * C89247) * C13259 +
             C14347 * C13260) *
                C9228 +
            (((C89093 * C1732 - C13261 * C1723) * C263 +
              (C89093 * C2339 - C13261 * C2331) * C89247) *
                 C13258 +
             ((C17050 - C17051) * C263 + (C17370 - C17371) * C89247) * C13259 +
             ((C17054 - C17055) * C263 + (C17372 - C17373) * C89247) * C13260) *
                C89217) *
               C89307 +
           ((((C14073 - C14072) * C263 + (C14336 - C14335) * C89247) * C13258 +
             ((C14077 - C14076) * C263 + (C14339 - C14338) * C89247) * C13259 +
             ((C14080 - C14081) * C263 + (C14340 - C14341) * C89247) * C13260) *
                C9228 +
            (((C17051 - C17050) * C263 + (C17371 - C17370) * C89247) * C13258 +
             ((C17055 - C17054) * C263 + (C17373 - C17372) * C89247) * C13259 +
             ((C13261 * C16684 - C89093 * C16687) * C263 +
              (C13261 * C17362 - C89093 * C17364) * C89247) *
                 C13260) *
                C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eezy[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C89236 * C181 - C180 * C106) * C263 +
              (C89236 * C627 - C180 * C565) * C89247) *
                 C89 +
             ((C194 - C195) * C263 + (C634 - C635) * C89247) * C90 +
             C648 * C91) *
                C9228 +
            (((C180 * C1724 - C89236 * C1828) * C263 +
              (C180 * C2330 - C89236 * C2420) * C89247) *
                 C89 +
             ((C1845 - C1846) * C263 + (C2429 - C2430) * C89247) * C90 +
             C3916 * C91) *
                C89217) *
               C89307 +
           ((((C180 * C819 - C89236 * C923) * C263 +
              (C180 * C1425 - C89236 * C1515) * C89247) *
                 C89 +
             ((C940 - C941) * C263 + (C1524 - C1525) * C89247) * C90 +
             C3193 * C91) *
                C9228 +
            (((C89236 * C4211 - C180 * C4097) * C263 +
              (C89236 * C4873 - C180 * C4767) * C89247) *
                 C89 +
             ((C4220 - C4221) * C263 + (C4878 - C4879) * C89247) * C90 +
             ((C4224 - C4225) * C263 + (C4880 - C4881) * C89247) * C91) *
                C89217) *
               C89189) *
              C89299 +
          (((((C195 - C194) * C263 + (C635 - C634) * C89247) * C89 +
             ((C199 - C198) * C263 + (C638 - C637) * C89247) * C90 +
             C649 * C91) *
                C9228 +
            (((C1846 - C1845) * C263 + (C2430 - C2429) * C89247) * C89 +
             ((C1850 - C1849) * C263 + (C2432 - C2431) * C89247) * C90 +
             ((C3435 - C3436) * C263 + (C3913 - C3914) * C89247) * C91) *
                C89217) *
               C89307 +
           ((((C941 - C940) * C263 + (C1525 - C1524) * C89247) * C89 +
             ((C945 - C944) * C263 + (C1527 - C1526) * C89247) * C90 +
             ((C2712 - C2713) * C263 + (C3190 - C3191) * C89247) * C91) *
                C9228 +
            (((C4221 - C4220) * C263 + (C4879 - C4878) * C89247) * C89 +
             ((C4225 - C4224) * C263 + (C4881 - C4880) * C89247) * C90 +
             ((C180 * C4100 - C89236 * C4214) * C263 +
              (C180 * C4770 - C89236 * C4876) * C89247) *
                 C91) *
                C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
              C13260 * C926 - C13315 * C820) *
                 C263 +
             (C13258 * C627 - C13313 * C565 + C13259 * C1515 - C13314 * C1425 +
              C13260 * C1518 - C13315 * C1428) *
                 C89247) *
                C89093 * C9228 +
            ((C13313 * C1724 - C13258 * C1828 + C13314 * C4097 -
              C13259 * C4211 + C13315 * C8516 - C13260 * C8600) *
                 C263 +
             (C13313 * C2330 - C13258 * C2420 + C13314 * C4767 -
              C13259 * C4873 + C13315 * C8994 - C13260 * C9074) *
                 C89247) *
                C89093 * C89217) *
               C89307 +
           (((C13313 * C819 - C13258 * C923 + C13314 * C820 - C13259 * C926 +
              C13315 * C5727 - C13260 * C5787) *
                 C263 +
             (C13313 * C1425 - C13258 * C1515 + C13314 * C1428 -
              C13259 * C1518 + C13315 * C6061 - C13260 * C6117) *
                 C89247) *
                C89093 * C9228 +
            ((C13258 * C4211 - C13313 * C4097 + C13259 * C8600 -
              C13314 * C8516 + C13260 * C16821 - C13315 * C16683) *
                 C263 +
             (C13258 * C4873 - C13313 * C4767 + C13259 * C9074 -
              C13314 * C8994 + C13260 * C17471 - C13315 * C17361) *
                 C89247) *
                C89093 * C89217) *
               C89189) *
              C89299 +
          ((((C13313 * C107 - C13258 * C182 + C13314 * C818 - C13259 * C924 +
              C13315 * C821 - C13260 * C927) *
                 C263 +
             (C13313 * C566 - C13258 * C628 + C13314 * C1426 - C13259 * C1516 +
              C13315 * C1429 - C13260 * C1519) *
                 C89247) *
                C89093 * C9228 +
            ((C13258 * C1829 - C13313 * C1723 + C13259 * C4212 -
              C13314 * C4098 + C13260 * C8601 - C13315 * C8515) *
                 C263 +
             (C13258 * C2421 - C13313 * C2331 + C13259 * C4874 -
              C13314 * C4768 + C13260 * C9075 - C13315 * C8995) *
                 C89247) *
                C89093 * C89217) *
               C89307 +
           (((C13258 * C924 - C13313 * C818 + C13259 * C927 - C13314 * C821 +
              C13260 * C5788 - C13315 * C5726) *
                 C263 +
             (C13258 * C1516 - C13313 * C1426 + C13259 * C1519 -
              C13314 * C1429 + C13260 * C6118 - C13315 * C6062) *
                 C89247) *
                C89093 * C9228 +
            ((C13313 * C4098 - C13258 * C4212 + C13314 * C8515 -
              C13259 * C8601 + C13315 * C16684 - C13260 * C16822) *
                 C263 +
             (C13313 * C4768 - C13258 * C4874 + C13314 * C8995 -
              C13259 * C9075 + C13315 * C17362 - C13260 * C17472) *
                 C89247) *
                C89093 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eezz[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) *
                 C89236 * C89 +
             C735 * C90 + C736 * C91) *
                C9228 -
            (C2547 * C91 + C2548 * C90 +
             (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
                 C89236 * C89) *
                C89217) *
               C89307 +
           (((C263 * C4325 - C699 * C4097 - C263 * C4767 + C89247 * C4979) *
                 C89236 * C89 +
             C4998 * C90 + C4999 * C91) *
                C89217 -
            (C1642 * C91 + C1643 * C90 +
             (C263 * C1029 - C699 * C819 - C263 * C1425 + C89247 * C1607) *
                 C89236 * C89) *
                C9228) *
               C89189) *
              C89299 +
          (((C2548 * C89 + C2547 * C90 + C3999 * C91) * C89217 -
            (C737 * C91 + C736 * C90 + C735 * C89) * C9228) *
               C89307 +
           ((C1643 * C89 + C1642 * C90 + C3276 * C91) * C9228 -
            ((C263 * C4328 - C699 * C4100 - C263 * C4770 + C89247 * C4982) *
                 C89236 * C91 +
             C4999 * C90 + C4998 * C89) *
                C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) *
                 C13258 +
             C14524 * C13259 + C14525 * C13260) *
                C89093 * C9228 -
            (C17592 * C13260 + C17593 * C13259 +
             (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
                 C13258) *
                C89093 * C89217) *
               C89307 +
           ((C17593 * C13258 + C17592 * C13259 + C21770 * C13260) * C89093 *
                C89217 -
            (C14526 * C13260 + C14525 * C13259 + C14524 * C13258) * C89093 *
                C9228) *
               C89189) *
              C89299 +
          (((C2544 * C13258 + C4996 * C13259 + C17594 * C13260) * C89093 *
                C89217 -
            (C1640 * C13260 + C1639 * C13259 + C731 * C13258) * C89093 *
                C9228) *
               C89307 +
           ((C1639 * C13258 + C1640 * C13259 + C14527 * C13260) * C89093 *
                C9228 -
            ((C263 * C16924 - C699 * C16684 - C263 * C17362 + C89247 * C17572) *
                 C13260 +
             C17594 * C13259 + C4996 * C13258) *
                C89093 * C89217) *
               C89189) *
              C89124)) /
            (p * q * std::sqrt(p + q));
    d2eexx[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C112 - C101 * C106 - C100 * C113 + C89 * C124 + C102 * C114 -
            C103 * C107 - C102 * C115 + C90 * C125 + C104 * C116 - C105 * C108 -
            C104 * C117 + C91 * C126) *
               C89247 * C89236 * C89337 -
           (C104 * C1730 - C105 * C1722 - C104 * C1731 + C91 * C1746 +
            C102 * C1732 - C103 * C1723 - C102 * C1733 + C90 * C1747 +
            C100 * C1734 - C101 * C1724 - C100 * C1735 + C89 * C1748) *
               C89247 * C89236 * C89338 +
           (C100 * C1736 - C101 * C1725 - C100 * C1737 + C89 * C1749 +
            C102 * C1738 - C103 * C1726 - C102 * C1739 + C90 * C1750 +
            C104 * C1740 - C105 * C1727 - C104 * C1741 + C91 * C1751) *
               C89247 * C89236 * C11948) *
              C89307 +
          ((C100 * C4101 - C101 * C4097 - C100 * C4102 + C89 * C4109 +
            C102 * C4103 - C103 * C4098 - C102 * C4104 + C90 * C4110 +
            C104 * C4105 - C105 * C4099 - C104 * C4106 + C91 * C4111) *
               C89247 * C89236 * C89338 -
           (C104 * C825 - C105 * C817 - C104 * C826 + C91 * C841 + C102 * C827 -
            C103 * C818 - C102 * C828 + C90 * C842 + C100 * C829 - C101 * C819 -
            C100 * C830 + C89 * C843) *
               C89247 * C89236 * C89337 -
           (C104 * C6250 - C105 * C6247 - C104 * C6251 + C91 * C6256 +
            C102 * C6252 - C103 * C6248 - C102 * C6253 + C90 * C6257 +
            C100 * C6254 - C101 * C6249 - C100 * C6255 + C89 * C6258) *
               C89247 * C89236 * C11948) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                C89247 * C13258 +
            C13794 * C13259 + C13795 * C13260) *
               C89337 -
           (C16720 * C13260 + C16721 * C13259 +
            (C13261 * C1734 - C13262 * C1724 - C13261 * C1735 +
             C89093 * C1748) *
                C89247 * C13258) *
               C89338 +
           ((C13261 * C1736 - C13262 * C1725 - C13261 * C1737 +
             C89093 * C1749) *
                C89247 * C13258 +
            C18858 * C13259 + C18859 * C13260) *
               C11948) *
              C89307 +
          ((C16721 * C13258 + C16720 * C13259 + C21135 * C13260) * C89338 -
           (C13796 * C13260 + C13795 * C13259 + C13794 * C13258) * C89337 -
           ((C13261 * C18840 - C13262 * C18839 - C13261 * C18841 +
             C89093 * C18842) *
                C89247 * C13260 +
            C18859 * C13259 + C18858 * C13258) *
               C11948) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eexy[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C89236 * C181 - C180 * C106) * C100 +
            (C89236 * C187 - C180 * C113) * C89 + (C194 - C195) * C102 +
            (C196 - C197) * C90 + C210 * C104 + C211 * C91) *
               C89247 * C89337 +
           ((C180 * C1724 - C89236 * C1828) * C100 +
            (C180 * C1735 - C89236 * C1836) * C89 + (C1845 - C1846) * C102 +
            (C1847 - C1848) * C90 + C3433 * C104 + C3434 * C91) *
               C89247 * C89338 +
           ((C89236 * C1831 - C180 * C1725) * C100 +
            (C89236 * C1839 - C180 * C1737) * C89 + (C1853 - C1854) * C102 +
            (C1855 - C1856) * C90 + (C1857 - C1858) * C104 +
            (C1859 - C1860) * C91) *
               C89247 * C11948) *
              C89307 +
          (((C180 * C819 - C89236 * C923) * C100 +
            (C180 * C830 - C89236 * C931) * C89 + (C940 - C941) * C102 +
            (C942 - C943) * C90 + C2710 * C104 + C2711 * C91) *
               C89247 * C89337 +
           ((C89236 * C4211 - C180 * C4097) * C100 +
            (C89236 * C4215 - C180 * C4102) * C89 + (C4220 - C4221) * C102 +
            (C4222 - C4223) * C90 + (C4224 - C4225) * C104 +
            (C4226 - C4227) * C91) *
               C89247 * C89338 +
           ((C180 * C6249 - C89236 * C6333) * C100 +
            (C180 * C6255 - C89236 * C6336) * C89 +
            (C180 * C6248 - C89236 * C6334) * C102 +
            (C180 * C6253 - C89236 * C6337) * C90 +
            (C180 * C6247 - C89236 * C6335) * C104 +
            (C180 * C6251 - C89236 * C6338) * C91) *
               C89247 * C11948) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
             C13260 * C926 - C13315 * C820) *
                C13261 +
            (C13258 * C187 - C13313 * C113 + C13259 * C931 - C13314 * C830 +
             C13260 * C934 - C13315 * C832) *
                C89093) *
               C89247 * C89337 +
           ((C13313 * C1724 - C13258 * C1828 + C13314 * C4097 - C13259 * C4211 +
             C13315 * C8516 - C13260 * C8600) *
                C13261 +
            (C13313 * C1735 - C13258 * C1836 + C13314 * C4102 - C13259 * C4215 +
             C13315 * C8522 - C13260 * C8603) *
                C89093) *
               C89247 * C89338 +
           ((C13258 * C1831 - C13313 * C1725 + C13259 * C6333 - C13314 * C6249 +
             C13260 * C14683 - C13315 * C14601) *
                C13261 +
            (C13258 * C1839 - C13313 * C1737 + C13259 * C6336 - C13314 * C6255 +
             C13260 * C14685 - C13315 * C14604) *
                C89093) *
               C89247 * C11948) *
              C89307 +
          (((C13313 * C819 - C13258 * C923 + C13314 * C820 - C13259 * C926 +
             C13315 * C5727 - C13260 * C5787) *
                C13261 +
            (C13313 * C830 - C13258 * C931 + C13314 * C832 - C13259 * C934 +
             C13315 * C5733 - C13260 * C5790) *
                C89093) *
               C89247 * C89337 +
           ((C13258 * C4211 - C13313 * C4097 + C13259 * C8600 - C13314 * C8516 +
             C13260 * C16821 - C13315 * C16683) *
                C13261 +
            (C13258 * C4215 - C13313 * C4102 + C13259 * C8603 - C13314 * C8522 +
             C13260 * C16823 - C13315 * C16686) *
                C89093) *
               C89247 * C89338 +
           ((C13313 * C6249 - C13258 * C6333 + C13314 * C14601 -
             C13259 * C14683 + C13315 * C18839 - C13260 * C18933) *
                C13261 +
            (C13313 * C6255 - C13258 * C6336 + C13314 * C14604 -
             C13259 * C14685 + C13315 * C18841 - C13260 * C18934) *
                C89093) *
               C89247 * C11948) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eexz[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C100 +
            (C89247 * C270 - C263 * C113) * C89 + (C277 - C278) * C102 +
            (C279 - C280) * C90 + C293 * C104 + C294 * C91) *
               C89236 * C89337 +
           ((C263 * C1724 - C89247 * C1934) * C100 +
            (C263 * C1735 - C89247 * C1942) * C89 + (C1951 - C1952) * C102 +
            (C1953 - C1954) * C90 + C3515 * C104 + C3516 * C91) *
               C89236 * C89338 +
           ((C89247 * C1937 - C263 * C1725) * C100 +
            (C89247 * C1945 - C263 * C1737) * C89 + (C1959 - C1960) * C102 +
            (C1961 - C1962) * C90 + (C1963 - C1964) * C104 +
            (C1965 - C1966) * C91) *
               C89236 * C11948) *
              C89307 +
          (((C263 * C819 - C89247 * C1029) * C100 +
            (C263 * C830 - C89247 * C1037) * C89 + (C1046 - C1047) * C102 +
            (C1048 - C1049) * C90 + C2792 * C104 + C2793 * C91) *
               C89236 * C89337 +
           ((C89247 * C4325 - C263 * C4097) * C100 +
            (C89247 * C4329 - C263 * C4102) * C89 + (C4334 - C4335) * C102 +
            (C4336 - C4337) * C90 + (C4338 - C4339) * C104 +
            (C4340 - C4341) * C91) *
               C89236 * C89338 +
           ((C263 * C6249 - C89247 * C6413) * C100 +
            (C263 * C6255 - C89247 * C6416) * C89 +
            (C263 * C6248 - C89247 * C6414) * C102 +
            (C263 * C6253 - C89247 * C6417) * C90 +
            (C263 * C6247 - C89247 * C6415) * C104 +
            (C263 * C6251 - C89247 * C6418) * C91) *
               C89236 * C11948) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C13261 +
             (C89247 * C270 - C263 * C113) * C89093) *
                C13258 +
            ((C13956 - C13957) * C13261 + (C13958 - C13959) * C89093) * C13259 +
            C13981 * C13260) *
               C89337 +
           (((C263 * C1724 - C89247 * C1934) * C13261 +
             (C263 * C1735 - C89247 * C1942) * C89093) *
                C13258 +
            ((C16928 - C16929) * C13261 + (C16930 - C16931) * C89093) * C13259 +
            C21296 * C13260) *
               C89338 +
           (((C89247 * C1937 - C263 * C1725) * C13261 +
             (C89247 * C1945 - C263 * C1737) * C89093) *
                C13258 +
            ((C19012 - C19013) * C13261 + (C19014 - C19015) * C89093) * C13259 +
            ((C19016 - C19017) * C13261 + (C19018 - C19019) * C89093) *
                C13260) *
               C11948) *
              C89307 +
          ((((C13957 - C13956) * C13261 + (C13959 - C13958) * C89093) * C13258 +
            ((C13961 - C13960) * C13261 + (C13963 - C13962) * C89093) * C13259 +
            C18435 * C13260) *
               C89337 +
           (((C16929 - C16928) * C13261 + (C16931 - C16930) * C89093) * C13258 +
            ((C16933 - C16932) * C13261 + (C16935 - C16934) * C89093) * C13259 +
            ((C21290 - C21291) * C13261 + (C21292 - C21293) * C89093) *
                C13260) *
               C89338 +
           (((C19013 - C19012) * C13261 + (C19015 - C19014) * C89093) * C13258 +
            ((C19017 - C19016) * C13261 + (C19019 - C19018) * C89093) * C13259 +
            ((C263 * C18839 - C89247 * C19009) * C13261 +
             (C263 * C18841 - C89247 * C19010) * C89093) *
                C13260) *
               C11948) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eeyx[71] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 +
                       C91 * C116 - C104 * C108) *
                          C180 +
                      (C89 * C352 - C100 * C346 + C90 * C353 - C102 * C347 +
                       C91 * C354 - C104 * C348) *
                          C89236) *
                         C89247 * C89337 +
                     ((C100 * C1724 - C89 * C1734 + C102 * C1723 - C90 * C1732 +
                       C104 * C1722 - C91 * C1730) *
                          C180 +
                      (C100 * C2040 - C89 * C2048 + C102 * C2041 - C90 * C2049 +
                       C104 * C2042 - C91 * C2050) *
                          C89236) *
                         C89247 * C89338 +
                     ((C89 * C1736 - C100 * C1725 + C90 * C1738 - C102 * C1726 +
                       C91 * C1740 - C104 * C1727) *
                          C180 +
                      (C89 * C2051 - C100 * C2043 + C90 * C2052 - C102 * C2044 +
                       C91 * C2053 - C104 * C2045) *
                          C89236) *
                         C89247 * C11948) *
                        C89307 +
                    (((C100 * C819 - C89 * C829 + C102 * C818 - C90 * C827 +
                       C104 * C817 - C91 * C825) *
                          C180 +
                      (C100 * C1135 - C89 * C1143 + C102 * C1136 - C90 * C1144 +
                       C104 * C1137 - C91 * C1145) *
                          C89236) *
                         C89247 * C89337 +
                     ((C89 * C4101 - C100 * C4097 + C90 * C4103 - C102 * C4098 +
                       C91 * C4105 - C104 * C4099) *
                          C180 +
                      (C89 * C4443 - C100 * C4439 + C90 * C4444 - C102 * C4440 +
                       C91 * C4445 - C104 * C4441) *
                          C89236) *
                         C89247 * C89338 +
                     ((C100 * C6249 - C89 * C6254 + C102 * C6248 - C90 * C6252 +
                       C104 * C6247 - C91 * C6250) *
                          C180 +
                      (C100 * C6493 - C89 * C6496 + C102 * C6494 - C90 * C6497 +
                       C104 * C6495 - C91 * C6498) *
                          C89236) *
                         C89247 * C11948) *
                        C89189) *
                   C89118) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C89093 * C112 - C13261 * C106) * C13313 +
                      (C89093 * C352 - C13261 * C346) * C13258 +
                      (C14060 - C14061) * C13314 + (C14062 - C14063) * C13259 +
                      C14084 * C13315 + C14085 * C13260) *
                         C89247 * C89337 +
                     ((C13261 * C1724 - C89093 * C1734) * C13313 +
                      (C13261 * C2040 - C89093 * C2048) * C13258 +
                      (C17042 - C17043) * C13314 + (C17044 - C17045) * C13259 +
                      C21373 * C13315 + C21374 * C13260) *
                         C89247 * C89338 +
                     ((C89093 * C1736 - C13261 * C1725) * C13313 +
                      (C89093 * C2051 - C13261 * C2043) * C13258 +
                      (C19096 - C19097) * C13314 + (C19098 - C19099) * C13259 +
                      (C19100 - C19101) * C13315 + (C19102 - C19103) * C13260) *
                         C89247 * C11948) *
                        C89307 +
                    (((C14061 - C14060) * C13313 + (C14063 - C14062) * C13258 +
                      (C14065 - C14064) * C13314 + (C14067 - C14066) * C13259 +
                      C18488 * C13315 + C18489 * C13260) *
                         C89247 * C89337 +
                     ((C17043 - C17042) * C13313 + (C17045 - C17044) * C13258 +
                      (C17047 - C17046) * C13314 + (C17049 - C17048) * C13259 +
                      (C21375 - C21376) * C13315 + (C21377 - C21378) * C13260) *
                         C89247 * C89338 +
                     ((C19097 - C19096) * C13313 + (C19099 - C19098) * C13258 +
                      (C19101 - C19100) * C13314 + (C19103 - C19102) * C13259 +
                      (C13261 * C18839 - C89093 * C18840) * C13315 +
                      (C13261 * C19093 - C89093 * C19094) * C13260) *
                         C89247 * C11948) *
                        C89189) *
                   C89118) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C89 +
            C440 * C90 + C441 * C91) *
               C89247 * C89337 -
           (C2163 * C91 + C2164 * C90 +
            (C180 * C1828 - C408 * C1724 - C180 * C2040 + C89236 * C2132) *
                C89) *
               C89247 * C89338 +
           ((C180 * C1831 - C408 * C1725 - C180 * C2043 + C89236 * C2133) *
                C89 +
            C2165 * C90 + C2166 * C91) *
               C89247 * C11948) *
              C89307 +
          (((C180 * C4211 - C408 * C4097 - C180 * C4439 + C89236 * C4545) *
                C89 +
            C4562 * C90 + C4563 * C91) *
               C89247 * C89338 -
           (C1258 * C91 + C1259 * C90 +
            (C180 * C923 - C408 * C819 - C180 * C1135 + C89236 * C1227) * C89) *
               C89247 * C89337 -
           ((C180 * C6335 - C408 * C6247 - C180 * C6495 + C89236 * C6573) *
                C91 +
            (C180 * C6334 - C408 * C6248 - C180 * C6494 + C89236 * C6574) *
                C90 +
            (C180 * C6333 - C408 * C6249 - C180 * C6493 + C89236 * C6575) *
                C89) *
               C89247 * C11948) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C13313 * C181 - C13466 * C106 - C13313 * C346 + C13258 * C409 +
            C13314 * C923 - C13467 * C819 - C13314 * C1135 + C13259 * C1227 +
            C13315 * C926 - C13468 * C820 - C13315 * C1138 + C13260 * C1228) *
               C89093 * C89247 * C89337 -
           (C13315 * C8600 - C13468 * C8516 - C13315 * C8760 + C13260 * C8842 +
            C13314 * C4211 - C13467 * C4097 - C13314 * C4439 + C13259 * C4545 +
            C13313 * C1828 - C13466 * C1724 - C13313 * C2040 + C13258 * C2132) *
               C89093 * C89247 * C89338 +
           (C13313 * C1831 - C13466 * C1725 - C13313 * C2043 + C13258 * C2133 +
            C13314 * C6333 - C13467 * C6249 - C13314 * C6493 + C13259 * C6575 +
            C13315 * C14683 - C13468 * C14601 - C13315 * C14839 +
            C13260 * C14917) *
               C89093 * C89247 * C11948) *
              C89307 +
          ((C13313 * C4211 - C13466 * C4097 - C13313 * C4439 + C13258 * C4545 +
            C13314 * C8600 - C13467 * C8516 - C13314 * C8760 + C13259 * C8842 +
            C13315 * C16821 - C13468 * C16683 - C13315 * C17037 +
            C13260 * C17155) *
               C89093 * C89247 * C89338 -
           (C13315 * C5787 - C13468 * C5727 - C13315 * C5899 + C13260 * C5957 +
            C13314 * C926 - C13467 * C820 - C13314 * C1138 + C13259 * C1228 +
            C13313 * C923 - C13466 * C819 - C13313 * C1135 + C13258 * C1227) *
               C89093 * C89247 * C89337 -
           (C13315 * C18933 - C13468 * C18839 - C13315 * C19093 +
            C13260 * C19177 + C13314 * C14683 - C13467 * C14601 -
            C13314 * C14839 + C13259 * C14917 + C13313 * C6333 -
            C13466 * C6249 - C13313 * C6493 + C13258 * C6575) *
               C89093 * C89247 * C11948) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eeyz[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C180 +
             (C89247 * C493 - C263 * C346) * C89236) *
                C89 +
            ((C277 - C278) * C180 + (C500 - C501) * C89236) * C90 +
            C514 * C91) *
               C89337 +
           (((C263 * C1724 - C89247 * C1934) * C180 +
             (C263 * C2040 - C89247 * C2240) * C89236) *
                C89 +
            ((C1951 - C1952) * C180 + (C2249 - C2250) * C89236) * C90 +
            C3759 * C91) *
               C89338 +
           (((C89247 * C1937 - C263 * C1725) * C180 +
             (C89247 * C2243 - C263 * C2043) * C89236) *
                C89 +
            ((C1959 - C1960) * C180 + (C2253 - C2254) * C89236) * C90 +
            ((C1963 - C1964) * C180 + (C2255 - C2256) * C89236) * C91) *
               C11948) *
              C89307 +
          ((((C263 * C819 - C89247 * C1029) * C180 +
             (C263 * C1135 - C89247 * C1335) * C89236) *
                C89 +
            ((C1046 - C1047) * C180 + (C1344 - C1345) * C89236) * C90 +
            C3036 * C91) *
               C89337 +
           (((C89247 * C4325 - C263 * C4097) * C180 +
             (C89247 * C4661 - C263 * C4439) * C89236) *
                C89 +
            ((C4334 - C4335) * C180 + (C4666 - C4667) * C89236) * C90 +
            ((C4338 - C4339) * C180 + (C4668 - C4669) * C89236) * C91) *
               C89338 +
           (((C263 * C6249 - C89247 * C6413) * C180 +
             (C263 * C6493 - C89247 * C6650) * C89236) *
                C89 +
            ((C263 * C6248 - C89247 * C6414) * C180 +
             (C263 * C6494 - C89247 * C6651) * C89236) *
                C90 +
            ((C263 * C6247 - C89247 * C6415) * C180 +
             (C263 * C6495 - C89247 * C6652) * C89236) *
                C91) *
               C11948) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C13313 +
            (C89247 * C493 - C263 * C346) * C13258 +
            (C13956 - C13957) * C13314 + (C14240 - C14241) * C13259 +
            C13974 * C13315 + C14249 * C13260) *
               C89093 * C89337 +
           ((C263 * C1724 - C89247 * C1934) * C13313 +
            (C263 * C2040 - C89247 * C2240) * C13258 +
            (C16928 - C16929) * C13314 + (C17258 - C17259) * C13259 +
            C21288 * C13315 + C21529 * C13260) *
               C89093 * C89338 +
           ((C89247 * C1937 - C263 * C1725) * C13313 +
            (C89247 * C2243 - C263 * C2043) * C13258 +
            (C19012 - C19013) * C13314 + (C19254 - C19255) * C13259 +
            (C19016 - C19017) * C13315 + (C19256 - C19257) * C13260) *
               C89093 * C11948) *
              C89307 +
          (((C13957 - C13956) * C13313 + (C14241 - C14240) * C13258 +
            (C13961 - C13960) * C13314 + (C14243 - C14242) * C13259 +
            C18427 * C13315 + C18596 * C13260) *
               C89093 * C89337 +
           ((C16929 - C16928) * C13313 + (C17259 - C17258) * C13258 +
            (C16933 - C16932) * C13314 + (C17261 - C17260) * C13259 +
            (C21290 - C21291) * C13315 + (C21530 - C21531) * C13260) *
               C89093 * C89338 +
           ((C19013 - C19012) * C13313 + (C19255 - C19254) * C13258 +
            (C19017 - C19016) * C13314 + (C19257 - C19256) * C13259 +
            (C263 * C18839 - C89247 * C19009) * C13315 +
            (C263 * C19093 - C89247 * C19252) * C13260) *
               C89093 * C11948) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eezx[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 + C91 * C116 -
             C104 * C108) *
                C263 +
            (C89 * C571 - C100 * C565 + C90 * C572 - C102 * C566 + C91 * C573 -
             C104 * C567) *
                C89247) *
               C89236 * C89337 +
           ((C100 * C1724 - C89 * C1734 + C102 * C1723 - C90 * C1732 +
             C104 * C1722 - C91 * C1730) *
                C263 +
            (C100 * C2330 - C89 * C2338 + C102 * C2331 - C90 * C2339 +
             C104 * C2332 - C91 * C2340) *
                C89247) *
               C89236 * C89338 +
           ((C89 * C1736 - C100 * C1725 + C90 * C1738 - C102 * C1726 +
             C91 * C1740 - C104 * C1727) *
                C263 +
            (C89 * C2341 - C100 * C2333 + C90 * C2342 - C102 * C2334 +
             C91 * C2343 - C104 * C2335) *
                C89247) *
               C89236 * C11948) *
              C89307 +
          (((C100 * C819 - C89 * C829 + C102 * C818 - C90 * C827 + C104 * C817 -
             C91 * C825) *
                C263 +
            (C100 * C1425 - C89 * C1433 + C102 * C1426 - C90 * C1434 +
             C104 * C1427 - C91 * C1435) *
                C89247) *
               C89236 * C89337 +
           ((C89 * C4101 - C100 * C4097 + C90 * C4103 - C102 * C4098 +
             C91 * C4105 - C104 * C4099) *
                C263 +
            (C89 * C4771 - C100 * C4767 + C90 * C4772 - C102 * C4768 +
             C91 * C4773 - C104 * C4769) *
                C89247) *
               C89236 * C89338 +
           ((C100 * C6249 - C89 * C6254 + C102 * C6248 - C90 * C6252 +
             C104 * C6247 - C91 * C6250) *
                C263 +
            (C100 * C6727 - C89 * C6730 + C102 * C6728 - C90 * C6731 +
             C104 * C6729 - C91 * C6732) *
                C89247) *
               C89236 * C11948) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C263 +
             (C89093 * C571 - C13261 * C565) * C89247) *
                C13258 +
            ((C14060 - C14061) * C263 + (C14328 - C14329) * C89247) * C13259 +
            C14346 * C13260) *
               C89337 +
           (((C13261 * C1724 - C89093 * C1734) * C263 +
             (C13261 * C2330 - C89093 * C2338) * C89247) *
                C13258 +
            ((C17042 - C17043) * C263 + (C17366 - C17367) * C89247) * C13259 +
            C21613 * C13260) *
               C89338 +
           (((C89093 * C1736 - C13261 * C1725) * C263 +
             (C89093 * C2341 - C13261 * C2333) * C89247) *
                C13258 +
            ((C19096 - C19097) * C263 + (C19334 - C19335) * C89247) * C13259 +
            ((C19100 - C19101) * C263 + (C19336 - C19337) * C89247) * C13260) *
               C11948) *
              C89307 +
          ((((C14061 - C14060) * C263 + (C14329 - C14328) * C89247) * C13258 +
            ((C14065 - C14064) * C263 + (C14332 - C14331) * C89247) * C13259 +
            C18656 * C13260) *
               C89337 +
           (((C17043 - C17042) * C263 + (C17367 - C17366) * C89247) * C13258 +
            ((C17047 - C17046) * C263 + (C17369 - C17368) * C89247) * C13259 +
            ((C21375 - C21376) * C263 + (C21610 - C21611) * C89247) * C13260) *
               C89338 +
           (((C19097 - C19096) * C263 + (C19335 - C19334) * C89247) * C13258 +
            ((C19101 - C19100) * C263 + (C19337 - C19336) * C89247) * C13259 +
            ((C13261 * C18839 - C89093 * C18840) * C263 +
             (C13261 * C19331 - C89093 * C19332) * C89247) *
                C13260) *
               C11948) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eezy[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C263 +
             (C89236 * C627 - C180 * C565) * C89247) *
                C89 +
            ((C194 - C195) * C263 + (C634 - C635) * C89247) * C90 +
            C648 * C91) *
               C89337 +
           (((C180 * C1724 - C89236 * C1828) * C263 +
             (C180 * C2330 - C89236 * C2420) * C89247) *
                C89 +
            ((C1845 - C1846) * C263 + (C2429 - C2430) * C89247) * C90 +
            C3916 * C91) *
               C89338 +
           (((C89236 * C1831 - C180 * C1725) * C263 +
             (C89236 * C2423 - C180 * C2333) * C89247) *
                C89 +
            ((C1853 - C1854) * C263 + (C2433 - C2434) * C89247) * C90 +
            ((C1857 - C1858) * C263 + (C2435 - C2436) * C89247) * C91) *
               C11948) *
              C89307 +
          ((((C180 * C819 - C89236 * C923) * C263 +
             (C180 * C1425 - C89236 * C1515) * C89247) *
                C89 +
            ((C940 - C941) * C263 + (C1524 - C1525) * C89247) * C90 +
            C3193 * C91) *
               C89337 +
           (((C89236 * C4211 - C180 * C4097) * C263 +
             (C89236 * C4873 - C180 * C4767) * C89247) *
                C89 +
            ((C4220 - C4221) * C263 + (C4878 - C4879) * C89247) * C90 +
            ((C4224 - C4225) * C263 + (C4880 - C4881) * C89247) * C91) *
               C89338 +
           (((C180 * C6249 - C89236 * C6333) * C263 +
             (C180 * C6727 - C89236 * C6807) * C89247) *
                C89 +
            ((C180 * C6248 - C89236 * C6334) * C263 +
             (C180 * C6728 - C89236 * C6808) * C89247) *
                C90 +
            ((C180 * C6247 - C89236 * C6335) * C263 +
             (C180 * C6729 - C89236 * C6809) * C89247) *
                C91) *
               C11948) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
             C13260 * C926 - C13315 * C820) *
                C263 +
            (C13258 * C627 - C13313 * C565 + C13259 * C1515 - C13314 * C1425 +
             C13260 * C1518 - C13315 * C1428) *
                C89247) *
               C89093 * C89337 +
           ((C13313 * C1724 - C13258 * C1828 + C13314 * C4097 - C13259 * C4211 +
             C13315 * C8516 - C13260 * C8600) *
                C263 +
            (C13313 * C2330 - C13258 * C2420 + C13314 * C4767 - C13259 * C4873 +
             C13315 * C8994 - C13260 * C9074) *
                C89247) *
               C89093 * C89338 +
           ((C13258 * C1831 - C13313 * C1725 + C13259 * C6333 - C13314 * C6249 +
             C13260 * C14683 - C13315 * C14601) *
                C263 +
            (C13258 * C2423 - C13313 * C2333 + C13259 * C6807 - C13314 * C6727 +
             C13260 * C15147 - C13315 * C15069) *
                C89247) *
               C89093 * C11948) *
              C89307 +
          (((C13313 * C819 - C13258 * C923 + C13314 * C820 - C13259 * C926 +
             C13315 * C5727 - C13260 * C5787) *
                C263 +
            (C13313 * C1425 - C13258 * C1515 + C13314 * C1428 - C13259 * C1518 +
             C13315 * C6061 - C13260 * C6117) *
                C89247) *
               C89093 * C89337 +
           ((C13258 * C4211 - C13313 * C4097 + C13259 * C8600 - C13314 * C8516 +
             C13260 * C16821 - C13315 * C16683) *
                C263 +
            (C13258 * C4873 - C13313 * C4767 + C13259 * C9074 - C13314 * C8994 +
             C13260 * C17471 - C13315 * C17361) *
                C89247) *
               C89093 * C89338 +
           ((C13313 * C6249 - C13258 * C6333 + C13314 * C14601 -
             C13259 * C14683 + C13315 * C18839 - C13260 * C18933) *
                C263 +
            (C13313 * C6727 - C13258 * C6807 + C13314 * C15069 -
             C13259 * C15147 + C13315 * C19331 - C13260 * C19411) *
                C89247) *
               C89093 * C11948) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eezz[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C89236 *
                C89 +
            C735 * C90 + C736 * C91) *
               C89337 -
           (C2547 * C91 + C2548 * C90 +
            (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
                C89236 * C89) *
               C89338 +
           ((C263 * C1937 - C699 * C1725 - C263 * C2333 + C89247 * C2513) *
                C89236 * C89 +
            C2549 * C90 + C2550 * C91) *
               C11948) *
              C89307 +
          (((C263 * C4325 - C699 * C4097 - C263 * C4767 + C89247 * C4979) *
                C89236 * C89 +
            C4998 * C90 + C4999 * C91) *
               C89338 -
           (C1642 * C91 + C1643 * C90 +
            (C263 * C1029 - C699 * C819 - C263 * C1425 + C89247 * C1607) *
                C89236 * C89) *
               C89337 -
           ((C263 * C6415 - C699 * C6247 - C263 * C6729 + C89247 * C6884) *
                C89236 * C91 +
            (C263 * C6414 - C699 * C6248 - C263 * C6728 + C89247 * C6885) *
                C89236 * C90 +
            (C263 * C6413 - C699 * C6249 - C263 * C6727 + C89247 * C6886) *
                C89236 * C89) *
               C11948) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C13258 +
            C14524 * C13259 + C14525 * C13260) *
               C89093 * C89337 -
           (C17592 * C13260 + C17593 * C13259 +
            (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
                C13258) *
               C89093 * C89338 +
           ((C263 * C1937 - C699 * C1725 - C263 * C2333 + C89247 * C2513) *
                C13258 +
            C19500 * C13259 + C19501 * C13260) *
               C89093 * C11948) *
              C89307 +
          ((C17593 * C13258 + C17592 * C13259 + C21770 * C13260) * C89093 *
               C89338 -
           (C14526 * C13260 + C14525 * C13259 + C14524 * C13258) * C89093 *
               C89337 -
           ((C263 * C19009 - C699 * C18839 - C263 * C19331 + C89247 * C19486) *
                C13260 +
            C19501 * C13259 + C19500 * C13258) *
               C89093 * C11948) *
              C89189) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eexx[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C112 - C101 * C106 - C100 * C113 + C89 * C124 + C102 * C114 -
            C103 * C107 - C102 * C115 + C90 * C125 + C104 * C116 - C105 * C108 -
            C104 * C117 + C91 * C126) *
               C89247 * C89236 * C9228 -
           (C104 * C1730 - C105 * C1722 - C104 * C1731 + C91 * C1746 +
            C102 * C1732 - C103 * C1723 - C102 * C1733 + C90 * C1747 +
            C100 * C1734 - C101 * C1724 - C100 * C1735 + C89 * C1748) *
               C89247 * C89236 * C89217) *
              C812 +
          ((C100 * C4101 - C101 * C4097 - C100 * C4102 + C89 * C4109 +
            C102 * C4103 - C103 * C4098 - C102 * C4104 + C90 * C4110 +
            C104 * C4105 - C105 * C4099 - C104 * C4106 + C91 * C4111) *
               C89247 * C89236 * C89217 -
           (C104 * C825 - C105 * C817 - C104 * C826 + C91 * C841 + C102 * C827 -
            C103 * C818 - C102 * C828 + C90 * C842 + C100 * C829 - C101 * C819 -
            C100 * C830 + C89 * C843) *
               C89247 * C89236 * C9228) *
              C813 +
          ((C100 * C831 - C101 * C820 - C100 * C832 + C89 * C844 + C102 * C833 -
            C103 * C821 - C102 * C834 + C90 * C845 + C104 * C835 - C105 * C822 -
            C104 * C836 + C91 * C846) *
               C89247 * C89236 * C9228 -
           (C104 * C8517 - C105 * C8514 - C104 * C8518 + C91 * C8523 +
            C102 * C8519 - C103 * C8515 - C102 * C8520 + C90 * C8524 +
            C100 * C8521 - C101 * C8516 - C100 * C8522 + C89 * C8525) *
               C89247 * C89236 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C112 - C101 * C106 - C100 * C113 + C89 * C124 + C102 * C114 -
            C103 * C107 - C102 * C115 + C90 * C125 + C104 * C116 - C105 * C108 -
            C104 * C117 + C91 * C126) *
               C89247 * C89236 * C9228 -
           (C104 * C1730 - C105 * C1722 - C104 * C1731 + C91 * C1746 +
            C102 * C1732 - C103 * C1723 - C102 * C1733 + C90 * C1747 +
            C100 * C1734 - C101 * C1724 - C100 * C1735 + C89 * C1748) *
               C89247 * C89236 * C89217) *
              C89137 * C5075 +
          ((C100 * C1732 - C101 * C1723 - C100 * C1733 + C89 * C1747 +
            C102 * C1730 - C103 * C1722 - C102 * C1731 + C90 * C1746 +
            C104 * C1742 - C105 * C1728 - C104 * C1743 + C91 * C1752) *
               C89247 * C89236 * C89217 -
           (C104 * C118 - C105 * C109 - C104 * C119 + C91 * C127 + C102 * C116 -
            C103 * C108 - C102 * C117 + C90 * C126 + C100 * C114 - C101 * C107 -
            C100 * C115 + C89 * C125) *
               C89247 * C89236 * C9228) *
              C89137 * C5076 +
          ((C100 * C116 - C101 * C108 - C100 * C117 + C89 * C126 + C102 * C118 -
            C103 * C109 - C102 * C119 + C90 * C127 + C104 * C120 - C105 * C110 -
            C104 * C121 + C91 * C128) *
               C89247 * C89236 * C9228 -
           (C104 * C3353 - C105 * C3352 - C104 * C3354 + C91 * C3355 +
            C102 * C1742 - C103 * C1728 - C102 * C1743 + C90 * C1752 +
            C100 * C1730 - C101 * C1722 - C100 * C1731 + C89 * C1746) *
               C89247 * C89236 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((C100 * C112 - C101 * C106 - C100 * C113 + C89 * C124 + C102 * C114 -
           C103 * C107 - C102 * C115 + C90 * C125 + C104 * C116 - C105 * C108 -
           C104 * C117 + C91 * C126) *
              C89247 * C89236 * C10538 -
          (C104 * C1730 - C105 * C1722 - C104 * C1731 + C91 * C1746 +
           C102 * C1732 - C103 * C1723 - C102 * C1733 + C90 * C1747 +
           C100 * C1734 - C101 * C1724 - C100 * C1735 + C89 * C1748) *
              C89247 * C89236 * C10539 +
          (C100 * C1736 - C101 * C1725 - C100 * C1737 + C89 * C1749 +
           C102 * C1738 - C103 * C1726 - C102 * C1739 + C90 * C1750 +
           C104 * C1740 - C105 * C1727 - C104 * C1741 + C91 * C1751) *
              C89247 * C89236 * C10540 -
          (C104 * C10545 - C105 * C10542 - C104 * C10546 + C91 * C10551 +
           C102 * C10547 - C103 * C10543 - C102 * C10548 + C90 * C10552 +
           C100 * C10549 - C101 * C10544 - C100 * C10550 + C89 * C10553) *
              C89247 * C89236 * C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                C89247 * C13258 +
            C13794 * C13259 + C13795 * C13260) *
               C9228 -
           (C16720 * C13260 + C16721 * C13259 +
            (C13261 * C1734 - C13262 * C1724 - C13261 * C1735 +
             C89093 * C1748) *
                C89247 * C13258) *
               C89217) *
              C89137 * C5075 +
          (((C13261 * C1732 - C13262 * C1723 - C13261 * C1733 +
             C89093 * C1747) *
                C89247 * C13258 +
            C16722 * C13259 + C16723 * C13260) *
               C89217 -
           (C13798 * C13260 + C13797 * C13259 +
            (C13261 * C114 - C13262 * C107 - C13261 * C115 + C89093 * C125) *
                C89247 * C13258) *
               C9228) *
              C89137 * C5076 +
          (((C13261 * C116 - C13262 * C108 - C13261 * C117 + C89093 * C126) *
                C89247 * C13258 +
            C15314 * C13259 + C15315 * C13260) *
               C9228 -
           ((C13261 * C8517 - C13262 * C8514 - C13261 * C8518 +
             C89093 * C8523) *
                C89247 * C13260 +
            (C13261 * C4105 - C13262 * C4099 - C13261 * C4106 +
             C89093 * C4111) *
                C89247 * C13259 +
            (C13261 * C1730 - C13262 * C1722 - C13261 * C1731 +
             C89093 * C1746) *
                C89247 * C13258) *
               C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                C89247 * C13258 +
            C13794 * C13259 + C13795 * C13260) *
               C9228 -
           (C16720 * C13260 + C16721 * C13259 +
            (C13261 * C1734 - C13262 * C1724 - C13261 * C1735 +
             C89093 * C1748) *
                C89247 * C13258) *
               C89217) *
              C812 +
          ((C16721 * C13258 + C16720 * C13259 + C21135 * C13260) * C89217 -
           (C13796 * C13260 + C13795 * C13259 + C13794 * C13258) * C9228) *
              C813 +
          ((C13795 * C13258 + C13796 * C13259 + C18322 * C13260) * C9228 -
           ((C13261 * C21124 - C13262 * C21123 - C13261 * C21125 +
             C89093 * C21126) *
                C89247 * C13260 +
            C21135 * C13259 + C16720 * C13258) *
               C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
               C89247 * C13258 +
           C13794 * C13259 + C13795 * C13260) *
              C10538 -
          (C16720 * C13260 + C16721 * C13259 +
           (C13261 * C1734 - C13262 * C1724 - C13261 * C1735 + C89093 * C1748) *
               C89247 * C13258) *
              C10539 +
          ((C13261 * C1736 - C13262 * C1725 - C13261 * C1737 + C89093 * C1749) *
               C89247 * C13258 +
           C18858 * C13259 + C18859 * C13260) *
              C10540 -
          ((C13261 * C23154 - C13262 * C23152 - C13261 * C23155 +
            C89093 * C23158) *
               C89247 * C13260 +
           (C13261 * C23156 - C13262 * C23153 - C13261 * C23157 +
            C89093 * C23159) *
               C89247 * C13259 +
           (C13261 * C10549 - C13262 * C10544 - C13261 * C10550 +
            C89093 * C10553) *
               C89247 * C13258) *
              C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q));
    d2eexy[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C89236 * C181 - C180 * C106) * C100 +
            (C89236 * C187 - C180 * C113) * C89 + (C194 - C195) * C102 +
            (C196 - C197) * C90 + C210 * C104 + C211 * C91) *
               C89247 * C9228 +
           ((C180 * C1724 - C89236 * C1828) * C100 +
            (C180 * C1735 - C89236 * C1836) * C89 + (C1845 - C1846) * C102 +
            (C1847 - C1848) * C90 + C3433 * C104 + C3434 * C91) *
               C89247 * C89217) *
              C812 +
          (((C180 * C819 - C89236 * C923) * C100 +
            (C180 * C830 - C89236 * C931) * C89 + (C940 - C941) * C102 +
            (C942 - C943) * C90 + C2710 * C104 + C2711 * C91) *
               C89247 * C9228 +
           ((C89236 * C4211 - C180 * C4097) * C100 +
            (C89236 * C4215 - C180 * C4102) * C89 + (C4220 - C4221) * C102 +
            (C4222 - C4223) * C90 + (C4224 - C4225) * C104 +
            (C4226 - C4227) * C91) *
               C89247 * C89217) *
              C813 +
          (((C89236 * C926 - C180 * C820) * C100 +
            (C89236 * C934 - C180 * C832) * C89 + (C948 - C949) * C102 +
            (C950 - C951) * C90 + (C952 - C953) * C104 + (C954 - C955) * C91) *
               C89247 * C9228 +
           ((C180 * C8516 - C89236 * C8600) * C100 +
            (C180 * C8522 - C89236 * C8603) * C89 +
            (C180 * C8515 - C89236 * C8601) * C102 +
            (C180 * C8520 - C89236 * C8604) * C90 +
            (C180 * C8514 - C89236 * C8602) * C104 +
            (C180 * C8518 - C89236 * C8605) * C91) *
               C89247 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C89236 * C181 - C180 * C106) * C100 +
            (C89236 * C187 - C180 * C113) * C89 + (C194 - C195) * C102 +
            (C196 - C197) * C90 + C210 * C104 + C211 * C91) *
               C89247 * C9228 +
           ((C180 * C1724 - C89236 * C1828) * C100 +
            (C180 * C1735 - C89236 * C1836) * C89 + (C1845 - C1846) * C102 +
            (C1847 - C1848) * C90 + C3433 * C104 + C3434 * C91) *
               C89247 * C89217) *
              C89137 * C5075 +
          (((C195 - C194) * C100 + (C197 - C196) * C89 + (C199 - C198) * C102 +
            (C201 - C200) * C90 + C212 * C104 + C213 * C91) *
               C89247 * C9228 +
           ((C1846 - C1845) * C100 + (C1848 - C1847) * C89 +
            (C1850 - C1849) * C102 + (C1852 - C1851) * C90 +
            (C3435 - C3436) * C104 + (C3437 - C3438) * C91) *
               C89247 * C89217) *
              C89137 * C5076 +
          ((C210 * C100 + C211 * C89 + (C203 - C202) * C102 +
            (C205 - C204) * C90 + (C206 - C207) * C104 + (C208 - C209) * C91) *
               C89247 * C9228 +
           (C3433 * C100 + C3434 * C89 + (C3436 - C3435) * C102 +
            (C3438 - C3437) * C90 + (C180 * C3352 - C89236 * C3430) * C104 +
            (C180 * C3354 - C89236 * C3431) * C91) *
               C89247 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C89236 * C181 - C180 * C106) * C100 +
           (C89236 * C187 - C180 * C113) * C89 + (C194 - C195) * C102 +
           (C196 - C197) * C90 + C210 * C104 + C211 * C91) *
              C89247 * C10538 +
          ((C180 * C1724 - C89236 * C1828) * C100 +
           (C180 * C1735 - C89236 * C1836) * C89 + (C1845 - C1846) * C102 +
           (C1847 - C1848) * C90 + C3433 * C104 + C3434 * C91) *
              C89247 * C10539 +
          ((C89236 * C1831 - C180 * C1725) * C100 +
           (C89236 * C1839 - C180 * C1737) * C89 + (C1853 - C1854) * C102 +
           (C1855 - C1856) * C90 + (C1857 - C1858) * C104 +
           (C1859 - C1860) * C91) *
              C89247 * C10540 +
          ((C180 * C10544 - C89236 * C10604) * C100 +
           (C180 * C10550 - C89236 * C10607) * C89 +
           (C180 * C10543 - C89236 * C10605) * C102 +
           (C180 * C10548 - C89236 * C10608) * C90 +
           (C180 * C10542 - C89236 * C10606) * C104 +
           (C180 * C10546 - C89236 * C10609) * C91) *
              C89247 * C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
             C13260 * C926 - C13315 * C820) *
                C13261 +
            (C13258 * C187 - C13313 * C113 + C13259 * C931 - C13314 * C830 +
             C13260 * C934 - C13315 * C832) *
                C89093) *
               C89247 * C9228 +
           ((C13313 * C1724 - C13258 * C1828 + C13314 * C4097 - C13259 * C4211 +
             C13315 * C8516 - C13260 * C8600) *
                C13261 +
            (C13313 * C1735 - C13258 * C1836 + C13314 * C4102 - C13259 * C4215 +
             C13315 * C8522 - C13260 * C8603) *
                C89093) *
               C89247 * C89217) *
              C89137 * C5075 +
          (((C13313 * C107 - C13258 * C182 + C13314 * C818 - C13259 * C924 +
             C13315 * C821 - C13260 * C927) *
                C13261 +
            (C13313 * C115 - C13258 * C188 + C13314 * C828 - C13259 * C932 +
             C13315 * C834 - C13260 * C935) *
                C89093) *
               C89247 * C9228 +
           ((C13258 * C1829 - C13313 * C1723 + C13259 * C4212 - C13314 * C4098 +
             C13260 * C8601 - C13315 * C8515) *
                C13261 +
            (C13258 * C1837 - C13313 * C1733 + C13259 * C4216 - C13314 * C4104 +
             C13260 * C8604 - C13315 * C8520) *
                C89093) *
               C89247 * C89217) *
              C89137 * C5076 +
          (((C13258 * C183 - C13313 * C108 + C13259 * C925 - C13314 * C817 +
             C13260 * C928 - C13315 * C822) *
                C13261 +
            (C13258 * C189 - C13313 * C117 + C13259 * C933 - C13314 * C826 +
             C13260 * C936 - C13315 * C836) *
                C89093) *
               C89247 * C9228 +
           ((C13313 * C1722 - C13258 * C1830 + C13314 * C4099 - C13259 * C4213 +
             C13315 * C8514 - C13260 * C8602) *
                C13261 +
            (C13313 * C1731 - C13258 * C1838 + C13314 * C4106 - C13259 * C4217 +
             C13315 * C8518 - C13260 * C8605) *
                C89093) *
               C89247 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
             C13260 * C926 - C13315 * C820) *
                C13261 +
            (C13258 * C187 - C13313 * C113 + C13259 * C931 - C13314 * C830 +
             C13260 * C934 - C13315 * C832) *
                C89093) *
               C89247 * C9228 +
           ((C13313 * C1724 - C13258 * C1828 + C13314 * C4097 - C13259 * C4211 +
             C13315 * C8516 - C13260 * C8600) *
                C13261 +
            (C13313 * C1735 - C13258 * C1836 + C13314 * C4102 - C13259 * C4215 +
             C13315 * C8522 - C13260 * C8603) *
                C89093) *
               C89247 * C89217) *
              C812 +
          (((C13313 * C819 - C13258 * C923 + C13314 * C820 - C13259 * C926 +
             C13315 * C5727 - C13260 * C5787) *
                C13261 +
            (C13313 * C830 - C13258 * C931 + C13314 * C832 - C13259 * C934 +
             C13315 * C5733 - C13260 * C5790) *
                C89093) *
               C89247 * C9228 +
           ((C13258 * C4211 - C13313 * C4097 + C13259 * C8600 - C13314 * C8516 +
             C13260 * C16821 - C13315 * C16683) *
                C13261 +
            (C13258 * C4215 - C13313 * C4102 + C13259 * C8603 - C13314 * C8522 +
             C13260 * C16823 - C13315 * C16686) *
                C89093) *
               C89247 * C89217) *
              C813 +
          (((C13258 * C926 - C13313 * C820 + C13259 * C5787 - C13314 * C5727 +
             C13260 * C13873 - C13315 * C13743) *
                C13261 +
            (C13258 * C934 - C13313 * C832 + C13259 * C5790 - C13314 * C5733 +
             C13260 * C13875 - C13315 * C13746) *
                C89093) *
               C89247 * C9228 +
           ((C13313 * C8516 - C13258 * C8600 + C13314 * C16683 -
             C13259 * C16821 + C13315 * C21123 - C13260 * C21209) *
                C13261 +
            (C13313 * C8522 - C13258 * C8603 + C13314 * C16686 -
             C13259 * C16823 + C13315 * C21125 - C13260 * C21210) *
                C89093) *
               C89247 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
            C13260 * C926 - C13315 * C820) *
               C13261 +
           (C13258 * C187 - C13313 * C113 + C13259 * C931 - C13314 * C830 +
            C13260 * C934 - C13315 * C832) *
               C89093) *
              C89247 * C10538 +
          ((C13313 * C1724 - C13258 * C1828 + C13314 * C4097 - C13259 * C4211 +
            C13315 * C8516 - C13260 * C8600) *
               C13261 +
           (C13313 * C1735 - C13258 * C1836 + C13314 * C4102 - C13259 * C4215 +
            C13315 * C8522 - C13260 * C8603) *
               C89093) *
              C89247 * C10539 +
          ((C13258 * C1831 - C13313 * C1725 + C13259 * C6333 - C13314 * C6249 +
            C13260 * C14683 - C13315 * C14601) *
               C13261 +
           (C13258 * C1839 - C13313 * C1737 + C13259 * C6336 - C13314 * C6255 +
            C13260 * C14685 - C13315 * C14604) *
               C89093) *
              C89247 * C10540 +
          ((C13313 * C10544 - C13258 * C10604 + C13314 * C23153 -
            C13259 * C23210 + C13315 * C23152 - C13260 * C23211) *
               C13261 +
           (C13313 * C10550 - C13258 * C10607 + C13314 * C23157 -
            C13259 * C23212 + C13315 * C23155 - C13260 * C23213) *
               C89093) *
              C89247 * C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q));
    d2eexz[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C100 +
            (C89247 * C270 - C263 * C113) * C89 + (C277 - C278) * C102 +
            (C279 - C280) * C90 + C293 * C104 + C294 * C91) *
               C89236 * C9228 +
           ((C263 * C1724 - C89247 * C1934) * C100 +
            (C263 * C1735 - C89247 * C1942) * C89 + (C1951 - C1952) * C102 +
            (C1953 - C1954) * C90 + C3515 * C104 + C3516 * C91) *
               C89236 * C89217) *
              C812 +
          (((C263 * C819 - C89247 * C1029) * C100 +
            (C263 * C830 - C89247 * C1037) * C89 + (C1046 - C1047) * C102 +
            (C1048 - C1049) * C90 + C2792 * C104 + C2793 * C91) *
               C89236 * C9228 +
           ((C89247 * C4325 - C263 * C4097) * C100 +
            (C89247 * C4329 - C263 * C4102) * C89 + (C4334 - C4335) * C102 +
            (C4336 - C4337) * C90 + (C4338 - C4339) * C104 +
            (C4340 - C4341) * C91) *
               C89236 * C89217) *
              C813 +
          (((C89247 * C1032 - C263 * C820) * C100 +
            (C89247 * C1040 - C263 * C832) * C89 + (C1054 - C1055) * C102 +
            (C1056 - C1057) * C90 + (C1058 - C1059) * C104 +
            (C1060 - C1061) * C91) *
               C89236 * C9228 +
           ((C263 * C8516 - C89247 * C8680) * C100 +
            (C263 * C8522 - C89247 * C8683) * C89 +
            (C263 * C8515 - C89247 * C8681) * C102 +
            (C263 * C8520 - C89247 * C8684) * C90 +
            (C263 * C8514 - C89247 * C8682) * C104 +
            (C263 * C8518 - C89247 * C8685) * C91) *
               C89236 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C100 +
            (C89247 * C270 - C263 * C113) * C89 + (C277 - C278) * C102 +
            (C279 - C280) * C90 + C293 * C104 + C294 * C91) *
               C89236 * C9228 +
           ((C263 * C1724 - C89247 * C1934) * C100 +
            (C263 * C1735 - C89247 * C1942) * C89 + (C1951 - C1952) * C102 +
            (C1953 - C1954) * C90 + C3515 * C104 + C3516 * C91) *
               C89236 * C89217) *
              C89137 * C5075 +
          (((C278 - C277) * C100 + (C280 - C279) * C89 + (C282 - C281) * C102 +
            (C284 - C283) * C90 + C295 * C104 + C296 * C91) *
               C89236 * C9228 +
           ((C1952 - C1951) * C100 + (C1954 - C1953) * C89 +
            (C1956 - C1955) * C102 + (C1958 - C1957) * C90 +
            (C3517 - C3518) * C104 + (C3519 - C3520) * C91) *
               C89236 * C89217) *
              C89137 * C5076 +
          ((C293 * C100 + C294 * C89 + (C286 - C285) * C102 +
            (C288 - C287) * C90 + (C289 - C290) * C104 + (C291 - C292) * C91) *
               C89236 * C9228 +
           (C3515 * C100 + C3516 * C89 + (C3518 - C3517) * C102 +
            (C3520 - C3519) * C90 + (C263 * C3352 - C89247 * C3512) * C104 +
            (C263 * C3354 - C89247 * C3513) * C91) *
               C89236 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C89247 * C264 - C263 * C106) * C100 +
           (C89247 * C270 - C263 * C113) * C89 + (C277 - C278) * C102 +
           (C279 - C280) * C90 + C293 * C104 + C294 * C91) *
              C89236 * C10538 +
          ((C263 * C1724 - C89247 * C1934) * C100 +
           (C263 * C1735 - C89247 * C1942) * C89 + (C1951 - C1952) * C102 +
           (C1953 - C1954) * C90 + C3515 * C104 + C3516 * C91) *
              C89236 * C10539 +
          ((C89247 * C1937 - C263 * C1725) * C100 +
           (C89247 * C1945 - C263 * C1737) * C89 + (C1959 - C1960) * C102 +
           (C1961 - C1962) * C90 + (C1963 - C1964) * C104 +
           (C1965 - C1966) * C91) *
              C89236 * C10540 +
          ((C263 * C10544 - C89247 * C10660) * C100 +
           (C263 * C10550 - C89247 * C10663) * C89 +
           (C263 * C10543 - C89247 * C10661) * C102 +
           (C263 * C10548 - C89247 * C10664) * C90 +
           (C263 * C10542 - C89247 * C10662) * C104 +
           (C263 * C10546 - C89247 * C10665) * C91) *
              C89236 * C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C13261 +
             (C89247 * C270 - C263 * C113) * C89093) *
                C13258 +
            ((C13956 - C13957) * C13261 + (C13958 - C13959) * C89093) * C13259 +
            C13981 * C13260) *
               C9228 +
           (((C263 * C1724 - C89247 * C1934) * C13261 +
             (C263 * C1735 - C89247 * C1942) * C89093) *
                C13258 +
            ((C16928 - C16929) * C13261 + (C16930 - C16931) * C89093) * C13259 +
            C21296 * C13260) *
               C89217) *
              C89137 * C5075 +
          ((((C278 - C277) * C13261 + (C280 - C279) * C89093) * C13258 +
            ((C1046 - C1047) * C13261 + (C1048 - C1049) * C89093) * C13259 +
            C13980 * C13260) *
               C9228 +
           (((C1952 - C1951) * C13261 + (C1954 - C1953) * C89093) * C13258 +
            ((C4334 - C4335) * C13261 + (C4336 - C4337) * C89093) * C13259 +
            ((C16936 - C16937) * C13261 + (C16938 - C16939) * C89093) *
                C13260) *
               C89217) *
              C89137 * C5076 +
          (((C293 * C13261 + C294 * C89093) * C13258 +
            ((C1051 - C1050) * C13261 + (C1053 - C1052) * C89093) * C13259 +
            ((C1058 - C1059) * C13261 + (C1060 - C1061) * C89093) * C13260) *
               C9228 +
           ((C3515 * C13261 + C3516 * C89093) * C13258 +
            ((C4339 - C4338) * C13261 + (C4341 - C4340) * C89093) * C13259 +
            ((C263 * C8514 - C89247 * C8682) * C13261 +
             (C263 * C8518 - C89247 * C8685) * C89093) *
                C13260) *
               C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C13261 +
             (C89247 * C270 - C263 * C113) * C89093) *
                C13258 +
            ((C13956 - C13957) * C13261 + (C13958 - C13959) * C89093) * C13259 +
            C13981 * C13260) *
               C9228 +
           (((C263 * C1724 - C89247 * C1934) * C13261 +
             (C263 * C1735 - C89247 * C1942) * C89093) *
                C13258 +
            ((C16928 - C16929) * C13261 + (C16930 - C16931) * C89093) * C13259 +
            C21296 * C13260) *
               C89217) *
              C812 +
          ((((C13957 - C13956) * C13261 + (C13959 - C13958) * C89093) * C13258 +
            ((C13961 - C13960) * C13261 + (C13963 - C13962) * C89093) * C13259 +
            C18435 * C13260) *
               C9228 +
           (((C16929 - C16928) * C13261 + (C16931 - C16930) * C89093) * C13258 +
            ((C16933 - C16932) * C13261 + (C16935 - C16934) * C89093) * C13259 +
            ((C21290 - C21291) * C13261 + (C21292 - C21293) * C89093) *
                C13260) *
               C89217) *
              C813 +
          ((C13981 * C13258 +
            ((C13965 - C13964) * C13261 + (C13967 - C13966) * C89093) * C13259 +
            ((C18429 - C18430) * C13261 + (C18431 - C18432) * C89093) *
                C13260) *
               C9228 +
           (C21296 * C13258 +
            ((C21291 - C21290) * C13261 + (C21293 - C21292) * C89093) * C13259 +
            ((C263 * C21123 - C89247 * C21285) * C13261 +
             (C263 * C21125 - C89247 * C21286) * C89093) *
                C13260) *
               C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C13261 +
            (C89247 * C270 - C263 * C113) * C89093) *
               C13258 +
           ((C13956 - C13957) * C13261 + (C13958 - C13959) * C89093) * C13259 +
           C13981 * C13260) *
              C10538 +
          (((C263 * C1724 - C89247 * C1934) * C13261 +
            (C263 * C1735 - C89247 * C1942) * C89093) *
               C13258 +
           ((C16928 - C16929) * C13261 + (C16930 - C16931) * C89093) * C13259 +
           C21296 * C13260) *
              C10539 +
          (((C89247 * C1937 - C263 * C1725) * C13261 +
            (C89247 * C1945 - C263 * C1737) * C89093) *
               C13258 +
           ((C19012 - C19013) * C13261 + (C19014 - C19015) * C89093) * C13259 +
           ((C19016 - C19017) * C13261 + (C19018 - C19019) * C89093) * C13260) *
              C10540 +
          (((C263 * C10544 - C89247 * C10660) * C13261 +
            (C263 * C10550 - C89247 * C10663) * C89093) *
               C13258 +
           ((C263 * C23153 - C89247 * C23264) * C13261 +
            (C263 * C23157 - C89247 * C23266) * C89093) *
               C13259 +
           ((C263 * C23152 - C89247 * C23265) * C13261 +
            (C263 * C23155 - C89247 * C23267) * C89093) *
               C13260) *
              C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q));
    d2eeyx[72] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 +
                       C91 * C116 - C104 * C108) *
                          C180 +
                      (C89 * C352 - C100 * C346 + C90 * C353 - C102 * C347 +
                       C91 * C354 - C104 * C348) *
                          C89236) *
                         C89247 * C9228 +
                     ((C100 * C1724 - C89 * C1734 + C102 * C1723 - C90 * C1732 +
                       C104 * C1722 - C91 * C1730) *
                          C180 +
                      (C100 * C2040 - C89 * C2048 + C102 * C2041 - C90 * C2049 +
                       C104 * C2042 - C91 * C2050) *
                          C89236) *
                         C89247 * C89217) *
                        C812 +
                    (((C100 * C819 - C89 * C829 + C102 * C818 - C90 * C827 +
                       C104 * C817 - C91 * C825) *
                          C180 +
                      (C100 * C1135 - C89 * C1143 + C102 * C1136 - C90 * C1144 +
                       C104 * C1137 - C91 * C1145) *
                          C89236) *
                         C89247 * C9228 +
                     ((C89 * C4101 - C100 * C4097 + C90 * C4103 - C102 * C4098 +
                       C91 * C4105 - C104 * C4099) *
                          C180 +
                      (C89 * C4443 - C100 * C4439 + C90 * C4444 - C102 * C4440 +
                       C91 * C4445 - C104 * C4441) *
                          C89236) *
                         C89247 * C89217) *
                        C813 +
                    (((C89 * C831 - C100 * C820 + C90 * C833 - C102 * C821 +
                       C91 * C835 - C104 * C822) *
                          C180 +
                      (C89 * C1146 - C100 * C1138 + C90 * C1147 - C102 * C1139 +
                       C91 * C1148 - C104 * C1140) *
                          C89236) *
                         C89247 * C9228 +
                     ((C100 * C8516 - C89 * C8521 + C102 * C8515 - C90 * C8519 +
                       C104 * C8514 - C91 * C8517) *
                          C180 +
                      (C100 * C8760 - C89 * C8763 + C102 * C8761 - C90 * C8764 +
                       C104 * C8762 - C91 * C8765) *
                          C89236) *
                         C89247 * C89217) *
                        C814) *
                   C89118) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 +
                       C91 * C116 - C104 * C108) *
                          C180 +
                      (C89 * C352 - C100 * C346 + C90 * C353 - C102 * C347 +
                       C91 * C354 - C104 * C348) *
                          C89236) *
                         C89247 * C9228 +
                     ((C100 * C1724 - C89 * C1734 + C102 * C1723 - C90 * C1732 +
                       C104 * C1722 - C91 * C1730) *
                          C180 +
                      (C100 * C2040 - C89 * C2048 + C102 * C2041 - C90 * C2049 +
                       C104 * C2042 - C91 * C2050) *
                          C89236) *
                         C89247 * C89217) *
                        C89137 * C5075 +
                    (((C100 * C107 - C89 * C114 + C102 * C108 - C90 * C116 +
                       C104 * C109 - C91 * C118) *
                          C180 +
                      (C100 * C347 - C89 * C353 + C102 * C348 - C90 * C354 +
                       C104 * C349 - C91 * C355) *
                          C89236) *
                         C89247 * C9228 +
                     ((C89 * C1732 - C100 * C1723 + C90 * C1730 - C102 * C1722 +
                       C91 * C1742 - C104 * C1728) *
                          C180 +
                      (C89 * C2049 - C100 * C2041 + C90 * C2050 - C102 * C2042 +
                       C91 * C2054 - C104 * C2046) *
                          C89236) *
                         C89247 * C89217) *
                        C89137 * C5076 +
                    (((C89 * C116 - C100 * C108 + C90 * C118 - C102 * C109 +
                       C91 * C120 - C104 * C110) *
                          C180 +
                      (C89 * C354 - C100 * C348 + C90 * C355 - C102 * C349 +
                       C91 * C356 - C104 * C350) *
                          C89236) *
                         C89247 * C9228 +
                     ((C100 * C1722 - C89 * C1730 + C102 * C1728 - C90 * C1742 +
                       C104 * C3352 - C91 * C3353) *
                          C180 +
                      (C100 * C2042 - C89 * C2050 + C102 * C2046 - C90 * C2054 +
                       C104 * C3594 - C91 * C3595) *
                          C89236) *
                         C89247 * C89217) *
                        C89137 * C5077)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 +
                      C91 * C116 - C104 * C108) *
                         C180 +
                     (C89 * C352 - C100 * C346 + C90 * C353 - C102 * C347 +
                      C91 * C354 - C104 * C348) *
                         C89236) *
                        C89247 * C10538 +
                    ((C100 * C1724 - C89 * C1734 + C102 * C1723 - C90 * C1732 +
                      C104 * C1722 - C91 * C1730) *
                         C180 +
                     (C100 * C2040 - C89 * C2048 + C102 * C2041 - C90 * C2049 +
                      C104 * C2042 - C91 * C2050) *
                         C89236) *
                        C89247 * C10539 +
                    ((C89 * C1736 - C100 * C1725 + C90 * C1738 - C102 * C1726 +
                      C91 * C1740 - C104 * C1727) *
                         C180 +
                     (C89 * C2051 - C100 * C2043 + C90 * C2052 - C102 * C2044 +
                      C91 * C2053 - C104 * C2045) *
                         C89236) *
                        C89247 * C10540 +
                    ((C100 * C10544 - C89 * C10549 + C102 * C10543 -
                      C90 * C10547 + C104 * C10542 - C91 * C10545) *
                         C180 +
                     (C100 * C10716 - C89 * C10719 + C102 * C10717 -
                      C90 * C10720 + C104 * C10718 - C91 * C10721) *
                         C89236) *
                        C89247 * C10541) *
                   C89137 * C89118) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C89093 * C112 - C13261 * C106) * C13313 +
                      (C89093 * C352 - C13261 * C346) * C13258 +
                      (C14060 - C14061) * C13314 + (C14062 - C14063) * C13259 +
                      C14084 * C13315 + C14085 * C13260) *
                         C89247 * C9228 +
                     ((C13261 * C1724 - C89093 * C1734) * C13313 +
                      (C13261 * C2040 - C89093 * C2048) * C13258 +
                      (C17042 - C17043) * C13314 + (C17044 - C17045) * C13259 +
                      C21373 * C13315 + C21374 * C13260) *
                         C89247 * C89217) *
                        C89137 * C5075 +
                    (((C13261 * C107 - C89093 * C114) * C13313 +
                      (C13261 * C347 - C89093 * C353) * C13258 +
                      (C14072 - C14073) * C13314 + (C14074 - C14075) * C13259 +
                      C14086 * C13315 + C14087 * C13260) *
                         C89247 * C9228 +
                     ((C89093 * C1732 - C13261 * C1723) * C13313 +
                      (C89093 * C2049 - C13261 * C2041) * C13258 +
                      (C17050 - C17051) * C13314 + (C17052 - C17053) * C13259 +
                      (C17054 - C17055) * C13315 + (C17056 - C17057) * C13260) *
                         C89247 * C89217) *
                        C89137 * C5076 +
                    (((C89093 * C116 - C13261 * C108) * C13313 +
                      (C89093 * C354 - C13261 * C348) * C13258 +
                      (C15538 - C15539) * C13314 + (C15540 - C15541) * C13259 +
                      (C15542 - C15543) * C13315 + (C15544 - C15545) * C13260) *
                         C89247 * C9228 +
                     ((C13261 * C1722 - C89093 * C1730) * C13313 +
                      (C13261 * C2042 - C89093 * C2050) * C13258 +
                      (C13261 * C4099 - C89093 * C4105) * C13314 +
                      (C13261 * C4441 - C89093 * C4445) * C13259 +
                      (C13261 * C8514 - C89093 * C8517) * C13315 +
                      (C13261 * C8762 - C89093 * C8765) * C13260) *
                         C89247 * C89217) *
                        C89137 * C5077)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C89093 * C112 - C13261 * C106) * C13313 +
                      (C89093 * C352 - C13261 * C346) * C13258 +
                      (C14060 - C14061) * C13314 + (C14062 - C14063) * C13259 +
                      C14084 * C13315 + C14085 * C13260) *
                         C89247 * C9228 +
                     ((C13261 * C1724 - C89093 * C1734) * C13313 +
                      (C13261 * C2040 - C89093 * C2048) * C13258 +
                      (C17042 - C17043) * C13314 + (C17044 - C17045) * C13259 +
                      C21373 * C13315 + C21374 * C13260) *
                         C89247 * C89217) *
                        C812 +
                    (((C14061 - C14060) * C13313 + (C14063 - C14062) * C13258 +
                      (C14065 - C14064) * C13314 + (C14067 - C14066) * C13259 +
                      C18488 * C13315 + C18489 * C13260) *
                         C89247 * C9228 +
                     ((C17043 - C17042) * C13313 + (C17045 - C17044) * C13258 +
                      (C17047 - C17046) * C13314 + (C17049 - C17048) * C13259 +
                      (C21375 - C21376) * C13315 + (C21377 - C21378) * C13260) *
                         C89247 * C89217) *
                        C813 +
                    ((C14084 * C13313 + C14085 * C13258 +
                      (C14069 - C14068) * C13314 + (C14071 - C14070) * C13259 +
                      (C18490 - C18491) * C13315 + (C18492 - C18493) * C13260) *
                         C89247 * C9228 +
                     (C21373 * C13313 + C21374 * C13258 +
                      (C21376 - C21375) * C13314 + (C21378 - C21377) * C13259 +
                      (C13261 * C21123 - C89093 * C21124) * C13315 +
                      (C13261 * C21370 - C89093 * C21371) * C13260) *
                         C89247 * C89217) *
                        C814) *
                   C89118) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C89093 * C112 - C13261 * C106) * C13313 +
                     (C89093 * C352 - C13261 * C346) * C13258 +
                     (C14060 - C14061) * C13314 + (C14062 - C14063) * C13259 +
                     C14084 * C13315 + C14085 * C13260) *
                        C89247 * C10538 +
                    ((C13261 * C1724 - C89093 * C1734) * C13313 +
                     (C13261 * C2040 - C89093 * C2048) * C13258 +
                     (C17042 - C17043) * C13314 + (C17044 - C17045) * C13259 +
                     C21373 * C13315 + C21374 * C13260) *
                        C89247 * C10539 +
                    ((C89093 * C1736 - C13261 * C1725) * C13313 +
                     (C89093 * C2051 - C13261 * C2043) * C13258 +
                     (C19096 - C19097) * C13314 + (C19098 - C19099) * C13259 +
                     (C19100 - C19101) * C13315 + (C19102 - C19103) * C13260) *
                        C89247 * C10540 +
                    ((C13261 * C10544 - C89093 * C10549) * C13313 +
                     (C13261 * C10716 - C89093 * C10719) * C13258 +
                     (C13261 * C23153 - C89093 * C23156) * C13314 +
                     (C13261 * C23318 - C89093 * C23320) * C13259 +
                     (C13261 * C23152 - C89093 * C23154) * C13315 +
                     (C13261 * C23319 - C89093 * C23321) * C13260) *
                        C89247 * C10541) *
                   C89137 * C89118) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C89 +
            C440 * C90 + C441 * C91) *
               C89247 * C9228 -
           (C2163 * C91 + C2164 * C90 +
            (C180 * C1828 - C408 * C1724 - C180 * C2040 + C89236 * C2132) *
                C89) *
               C89247 * C89217) *
              C812 +
          (((C180 * C4211 - C408 * C4097 - C180 * C4439 + C89236 * C4545) *
                C89 +
            C4562 * C90 + C4563 * C91) *
               C89247 * C89217 -
           (C1258 * C91 + C1259 * C90 +
            (C180 * C923 - C408 * C819 - C180 * C1135 + C89236 * C1227) * C89) *
               C89247 * C9228) *
              C813 +
          (((C180 * C926 - C408 * C820 - C180 * C1138 + C89236 * C1228) * C89 +
            C1260 * C90 + C1261 * C91) *
               C89247 * C9228 -
           ((C180 * C8602 - C408 * C8514 - C180 * C8762 + C89236 * C8840) *
                C91 +
            (C180 * C8601 - C408 * C8515 - C180 * C8761 + C89236 * C8841) *
                C90 +
            (C180 * C8600 - C408 * C8516 - C180 * C8760 + C89236 * C8842) *
                C89) *
               C89247 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C89 +
            C440 * C90 + C441 * C91) *
               C89247 * C9228 -
           (C2163 * C91 + C2164 * C90 +
            (C180 * C1828 - C408 * C1724 - C180 * C2040 + C89236 * C2132) *
                C89) *
               C89247 * C89217) *
              C89137 * C5075 +
          ((C2164 * C89 + C2163 * C90 + C3678 * C91) * C89247 * C89217 -
           (C442 * C91 + C441 * C90 + C440 * C89) * C89247 * C9228) *
              C89137 * C5076 +
          ((C441 * C89 + C442 * C90 + C443 * C91) * C89247 * C9228 -
           ((C180 * C3430 - C408 * C3352 - C180 * C3594 + C89236 * C3670) *
                C91 +
            C3678 * C90 + C2163 * C89) *
               C89247 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C89 +
           C440 * C90 + C441 * C91) *
              C89247 * C10538 -
          (C2163 * C91 + C2164 * C90 +
           (C180 * C1828 - C408 * C1724 - C180 * C2040 + C89236 * C2132) *
               C89) *
              C89247 * C10539 +
          ((C180 * C1831 - C408 * C1725 - C180 * C2043 + C89236 * C2133) * C89 +
           C2165 * C90 + C2166 * C91) *
              C89247 * C10540 -
          ((C180 * C10606 - C408 * C10542 - C180 * C10718 + C89236 * C10772) *
               C91 +
           (C180 * C10605 - C408 * C10543 - C180 * C10717 + C89236 * C10773) *
               C90 +
           (C180 * C10604 - C408 * C10544 - C180 * C10716 + C89236 * C10774) *
               C89) *
              C89247 * C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13313 * C181 - C13466 * C106 - C13313 * C346 + C13258 * C409 +
            C13314 * C923 - C13467 * C819 - C13314 * C1135 + C13259 * C1227 +
            C13315 * C926 - C13468 * C820 - C13315 * C1138 + C13260 * C1228) *
               C89093 * C89247 * C9228 -
           (C13315 * C8600 - C13468 * C8516 - C13315 * C8760 + C13260 * C8842 +
            C13314 * C4211 - C13467 * C4097 - C13314 * C4439 + C13259 * C4545 +
            C13313 * C1828 - C13466 * C1724 - C13313 * C2040 + C13258 * C2132) *
               C89093 * C89247 * C89217) *
              C89137 * C5075 +
          ((C13313 * C1829 - C13466 * C1723 - C13313 * C2041 + C13258 * C2131 +
            C13314 * C4212 - C13467 * C4098 - C13314 * C4440 + C13259 * C4546 +
            C13315 * C8601 - C13468 * C8515 - C13315 * C8761 + C13260 * C8841) *
               C89093 * C89247 * C89217 -
           (C13315 * C927 - C13468 * C821 - C13315 * C1139 + C13260 * C1229 +
            C13314 * C924 - C13467 * C818 - C13314 * C1136 + C13259 * C1226 +
            C13313 * C182 - C13466 * C107 - C13313 * C347 + C13258 * C410) *
               C89093 * C89247 * C9228) *
              C89137 * C5076 +
          ((C13313 * C183 - C13466 * C108 - C13313 * C348 + C13258 * C411 +
            C13314 * C925 - C13467 * C817 - C13314 * C1137 + C13259 * C1225 +
            C13315 * C928 - C13468 * C822 - C13315 * C1140 + C13260 * C1230) *
               C89093 * C89247 * C9228 -
           (C13315 * C8602 - C13468 * C8514 - C13315 * C8762 + C13260 * C8840 +
            C13314 * C4213 - C13467 * C4099 - C13314 * C4441 + C13259 * C4547 +
            C13313 * C1830 - C13466 * C1722 - C13313 * C2042 + C13258 * C2130) *
               C89093 * C89247 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13313 * C181 - C13466 * C106 - C13313 * C346 + C13258 * C409 +
            C13314 * C923 - C13467 * C819 - C13314 * C1135 + C13259 * C1227 +
            C13315 * C926 - C13468 * C820 - C13315 * C1138 + C13260 * C1228) *
               C89093 * C89247 * C9228 -
           (C13315 * C8600 - C13468 * C8516 - C13315 * C8760 + C13260 * C8842 +
            C13314 * C4211 - C13467 * C4097 - C13314 * C4439 + C13259 * C4545 +
            C13313 * C1828 - C13466 * C1724 - C13313 * C2040 + C13258 * C2132) *
               C89093 * C89247 * C89217) *
              C812 +
          ((C13313 * C4211 - C13466 * C4097 - C13313 * C4439 + C13258 * C4545 +
            C13314 * C8600 - C13467 * C8516 - C13314 * C8760 + C13259 * C8842 +
            C13315 * C16821 - C13468 * C16683 - C13315 * C17037 +
            C13260 * C17155) *
               C89093 * C89247 * C89217 -
           (C13315 * C5787 - C13468 * C5727 - C13315 * C5899 + C13260 * C5957 +
            C13314 * C926 - C13467 * C820 - C13314 * C1138 + C13259 * C1228 +
            C13313 * C923 - C13466 * C819 - C13313 * C1135 + C13258 * C1227) *
               C89093 * C89247 * C9228) *
              C813 +
          ((C13313 * C926 - C13466 * C820 - C13313 * C1138 + C13258 * C1228 +
            C13314 * C5787 - C13467 * C5727 - C13314 * C5899 + C13259 * C5957 +
            C13315 * C13873 - C13468 * C13743 - C13315 * C14055 +
            C13260 * C14161) *
               C89093 * C89247 * C9228 -
           (C13315 * C21209 - C13468 * C21123 - C13315 * C21370 +
            C13260 * C21452 + C13314 * C16821 - C13467 * C16683 -
            C13314 * C17037 + C13259 * C17155 + C13313 * C8600 -
            C13466 * C8516 - C13313 * C8760 + C13258 * C8842) *
               C89093 * C89247 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((C13313 * C181 - C13466 * C106 - C13313 * C346 + C13258 * C409 +
           C13314 * C923 - C13467 * C819 - C13314 * C1135 + C13259 * C1227 +
           C13315 * C926 - C13468 * C820 - C13315 * C1138 + C13260 * C1228) *
              C89093 * C89247 * C10538 -
          (C13315 * C8600 - C13468 * C8516 - C13315 * C8760 + C13260 * C8842 +
           C13314 * C4211 - C13467 * C4097 - C13314 * C4439 + C13259 * C4545 +
           C13313 * C1828 - C13466 * C1724 - C13313 * C2040 + C13258 * C2132) *
              C89093 * C89247 * C10539 +
          (C13313 * C1831 - C13466 * C1725 - C13313 * C2043 + C13258 * C2133 +
           C13314 * C6333 - C13467 * C6249 - C13314 * C6493 + C13259 * C6575 +
           C13315 * C14683 - C13468 * C14601 - C13315 * C14839 +
           C13260 * C14917) *
              C89093 * C89247 * C10540 -
          (C13315 * C23211 - C13468 * C23152 - C13315 * C23319 +
           C13260 * C23372 + C13314 * C23210 - C13467 * C23153 -
           C13314 * C23318 + C13259 * C23373 + C13313 * C10604 -
           C13466 * C10544 - C13313 * C10716 + C13258 * C10774) *
              C89093 * C89247 * C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q));
    d2eeyz[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C180 +
             (C89247 * C493 - C263 * C346) * C89236) *
                C89 +
            ((C277 - C278) * C180 + (C500 - C501) * C89236) * C90 +
            C514 * C91) *
               C9228 +
           (((C263 * C1724 - C89247 * C1934) * C180 +
             (C263 * C2040 - C89247 * C2240) * C89236) *
                C89 +
            ((C1951 - C1952) * C180 + (C2249 - C2250) * C89236) * C90 +
            C3759 * C91) *
               C89217) *
              C812 +
          ((((C263 * C819 - C89247 * C1029) * C180 +
             (C263 * C1135 - C89247 * C1335) * C89236) *
                C89 +
            ((C1046 - C1047) * C180 + (C1344 - C1345) * C89236) * C90 +
            C3036 * C91) *
               C9228 +
           (((C89247 * C4325 - C263 * C4097) * C180 +
             (C89247 * C4661 - C263 * C4439) * C89236) *
                C89 +
            ((C4334 - C4335) * C180 + (C4666 - C4667) * C89236) * C90 +
            ((C4338 - C4339) * C180 + (C4668 - C4669) * C89236) * C91) *
               C89217) *
              C813 +
          ((((C89247 * C1032 - C263 * C820) * C180 +
             (C89247 * C1338 - C263 * C1138) * C89236) *
                C89 +
            ((C1054 - C1055) * C180 + (C1348 - C1349) * C89236) * C90 +
            ((C1058 - C1059) * C180 + (C1350 - C1351) * C89236) * C91) *
               C9228 +
           (((C263 * C8516 - C89247 * C8680) * C180 +
             (C263 * C8760 - C89247 * C8917) * C89236) *
                C89 +
            ((C263 * C8515 - C89247 * C8681) * C180 +
             (C263 * C8761 - C89247 * C8918) * C89236) *
                C90 +
            ((C263 * C8514 - C89247 * C8682) * C180 +
             (C263 * C8762 - C89247 * C8919) * C89236) *
                C91) *
               C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C180 +
             (C89247 * C493 - C263 * C346) * C89236) *
                C89 +
            ((C277 - C278) * C180 + (C500 - C501) * C89236) * C90 +
            C514 * C91) *
               C9228 +
           (((C263 * C1724 - C89247 * C1934) * C180 +
             (C263 * C2040 - C89247 * C2240) * C89236) *
                C89 +
            ((C1951 - C1952) * C180 + (C2249 - C2250) * C89236) * C90 +
            C3759 * C91) *
               C89217) *
              C89137 * C5075 +
          ((((C278 - C277) * C180 + (C501 - C500) * C89236) * C89 +
            ((C282 - C281) * C180 + (C504 - C503) * C89236) * C90 +
            C515 * C91) *
               C9228 +
           (((C1952 - C1951) * C180 + (C2250 - C2249) * C89236) * C89 +
            ((C1956 - C1955) * C180 + (C2252 - C2251) * C89236) * C90 +
            ((C3517 - C3518) * C180 + (C3756 - C3757) * C89236) * C91) *
               C89217) *
              C89137 * C5076 +
          ((C514 * C89 + ((C286 - C285) * C180 + (C507 - C506) * C89236) * C90 +
            ((C289 - C290) * C180 + (C508 - C509) * C89236) * C91) *
               C9228 +
           (C3759 * C89 +
            ((C3518 - C3517) * C180 + (C3757 - C3756) * C89236) * C90 +
            ((C263 * C3352 - C89247 * C3512) * C180 +
             (C263 * C3594 - C89247 * C3752) * C89236) *
                C91) *
               C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C180 +
            (C89247 * C493 - C263 * C346) * C89236) *
               C89 +
           ((C277 - C278) * C180 + (C500 - C501) * C89236) * C90 + C514 * C91) *
              C10538 +
          (((C263 * C1724 - C89247 * C1934) * C180 +
            (C263 * C2040 - C89247 * C2240) * C89236) *
               C89 +
           ((C1951 - C1952) * C180 + (C2249 - C2250) * C89236) * C90 +
           C3759 * C91) *
              C10539 +
          (((C89247 * C1937 - C263 * C1725) * C180 +
            (C89247 * C2243 - C263 * C2043) * C89236) *
               C89 +
           ((C1959 - C1960) * C180 + (C2253 - C2254) * C89236) * C90 +
           ((C1963 - C1964) * C180 + (C2255 - C2256) * C89236) * C91) *
              C10540 +
          (((C263 * C10544 - C89247 * C10660) * C180 +
            (C263 * C10716 - C89247 * C10825) * C89236) *
               C89 +
           ((C263 * C10543 - C89247 * C10661) * C180 +
            (C263 * C10717 - C89247 * C10826) * C89236) *
               C90 +
           ((C263 * C10542 - C89247 * C10662) * C180 +
            (C263 * C10718 - C89247 * C10827) * C89236) *
               C91) *
              C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C13313 +
            (C89247 * C493 - C263 * C346) * C13258 +
            (C13956 - C13957) * C13314 + (C14240 - C14241) * C13259 +
            C13974 * C13315 + C14249 * C13260) *
               C89093 * C9228 +
           ((C263 * C1724 - C89247 * C1934) * C13313 +
            (C263 * C2040 - C89247 * C2240) * C13258 +
            (C16928 - C16929) * C13314 + (C17258 - C17259) * C13259 +
            C21288 * C13315 + C21529 * C13260) *
               C89093 * C89217) *
              C89137 * C5075 +
          (((C278 - C277) * C13313 + (C501 - C500) * C13258 +
            (C1046 - C1047) * C13314 + (C1344 - C1345) * C13259 +
            C13968 * C13315 + C14246 * C13260) *
               C89093 * C9228 +
           ((C1952 - C1951) * C13313 + (C2250 - C2249) * C13258 +
            (C4334 - C4335) * C13314 + (C4666 - C4667) * C13259 +
            (C16936 - C16937) * C13315 + (C17262 - C17263) * C13260) *
               C89093 * C89217) *
              C89137 * C5076 +
          ((C293 * C13313 + C510 * C13258 + (C1051 - C1050) * C13314 +
            (C1347 - C1346) * C13259 + (C1058 - C1059) * C13315 +
            (C1350 - C1351) * C13260) *
               C89093 * C9228 +
           (C3515 * C13313 + C3755 * C13258 + (C4339 - C4338) * C13314 +
            (C4669 - C4668) * C13259 +
            (C263 * C8514 - C89247 * C8682) * C13315 +
            (C263 * C8762 - C89247 * C8919) * C13260) *
               C89093 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C13313 +
            (C89247 * C493 - C263 * C346) * C13258 +
            (C13956 - C13957) * C13314 + (C14240 - C14241) * C13259 +
            C13974 * C13315 + C14249 * C13260) *
               C89093 * C9228 +
           ((C263 * C1724 - C89247 * C1934) * C13313 +
            (C263 * C2040 - C89247 * C2240) * C13258 +
            (C16928 - C16929) * C13314 + (C17258 - C17259) * C13259 +
            C21288 * C13315 + C21529 * C13260) *
               C89093 * C89217) *
              C812 +
          (((C13957 - C13956) * C13313 + (C14241 - C14240) * C13258 +
            (C13961 - C13960) * C13314 + (C14243 - C14242) * C13259 +
            C18427 * C13315 + C18596 * C13260) *
               C89093 * C9228 +
           ((C16929 - C16928) * C13313 + (C17259 - C17258) * C13258 +
            (C16933 - C16932) * C13314 + (C17261 - C17260) * C13259 +
            (C21290 - C21291) * C13315 + (C21530 - C21531) * C13260) *
               C89093 * C89217) *
              C813 +
          ((C13974 * C13313 + C14249 * C13258 + (C13965 - C13964) * C13314 +
            (C14245 - C14244) * C13259 + (C18429 - C18430) * C13315 +
            (C18597 - C18598) * C13260) *
               C89093 * C9228 +
           (C21288 * C13313 + C21529 * C13258 + (C21291 - C21290) * C13314 +
            (C21531 - C21530) * C13259 +
            (C263 * C21123 - C89247 * C21285) * C13315 +
            (C263 * C21370 - C89247 * C21527) * C13260) *
               C89093 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C89247 * C264 - C263 * C106) * C13313 +
           (C89247 * C493 - C263 * C346) * C13258 + (C13956 - C13957) * C13314 +
           (C14240 - C14241) * C13259 + C13974 * C13315 + C14249 * C13260) *
              C89093 * C10538 +
          ((C263 * C1724 - C89247 * C1934) * C13313 +
           (C263 * C2040 - C89247 * C2240) * C13258 +
           (C16928 - C16929) * C13314 + (C17258 - C17259) * C13259 +
           C21288 * C13315 + C21529 * C13260) *
              C89093 * C10539 +
          ((C89247 * C1937 - C263 * C1725) * C13313 +
           (C89247 * C2243 - C263 * C2043) * C13258 +
           (C19012 - C19013) * C13314 + (C19254 - C19255) * C13259 +
           (C19016 - C19017) * C13315 + (C19256 - C19257) * C13260) *
              C89093 * C10540 +
          ((C263 * C10544 - C89247 * C10660) * C13313 +
           (C263 * C10716 - C89247 * C10825) * C13258 +
           (C263 * C23153 - C89247 * C23264) * C13314 +
           (C263 * C23318 - C89247 * C23424) * C13259 +
           (C263 * C23152 - C89247 * C23265) * C13315 +
           (C263 * C23319 - C89247 * C23425) * C13260) *
              C89093 * C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q));
    d2eezx[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 + C91 * C116 -
             C104 * C108) *
                C263 +
            (C89 * C571 - C100 * C565 + C90 * C572 - C102 * C566 + C91 * C573 -
             C104 * C567) *
                C89247) *
               C89236 * C9228 +
           ((C100 * C1724 - C89 * C1734 + C102 * C1723 - C90 * C1732 +
             C104 * C1722 - C91 * C1730) *
                C263 +
            (C100 * C2330 - C89 * C2338 + C102 * C2331 - C90 * C2339 +
             C104 * C2332 - C91 * C2340) *
                C89247) *
               C89236 * C89217) *
              C812 +
          (((C100 * C819 - C89 * C829 + C102 * C818 - C90 * C827 + C104 * C817 -
             C91 * C825) *
                C263 +
            (C100 * C1425 - C89 * C1433 + C102 * C1426 - C90 * C1434 +
             C104 * C1427 - C91 * C1435) *
                C89247) *
               C89236 * C9228 +
           ((C89 * C4101 - C100 * C4097 + C90 * C4103 - C102 * C4098 +
             C91 * C4105 - C104 * C4099) *
                C263 +
            (C89 * C4771 - C100 * C4767 + C90 * C4772 - C102 * C4768 +
             C91 * C4773 - C104 * C4769) *
                C89247) *
               C89236 * C89217) *
              C813 +
          (((C89 * C831 - C100 * C820 + C90 * C833 - C102 * C821 + C91 * C835 -
             C104 * C822) *
                C263 +
            (C89 * C1436 - C100 * C1428 + C90 * C1437 - C102 * C1429 +
             C91 * C1438 - C104 * C1430) *
                C89247) *
               C89236 * C9228 +
           ((C100 * C8516 - C89 * C8521 + C102 * C8515 - C90 * C8519 +
             C104 * C8514 - C91 * C8517) *
                C263 +
            (C100 * C8994 - C89 * C8997 + C102 * C8995 - C90 * C8998 +
             C104 * C8996 - C91 * C8999) *
                C89247) *
               C89236 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 + C91 * C116 -
             C104 * C108) *
                C263 +
            (C89 * C571 - C100 * C565 + C90 * C572 - C102 * C566 + C91 * C573 -
             C104 * C567) *
                C89247) *
               C89236 * C9228 +
           ((C100 * C1724 - C89 * C1734 + C102 * C1723 - C90 * C1732 +
             C104 * C1722 - C91 * C1730) *
                C263 +
            (C100 * C2330 - C89 * C2338 + C102 * C2331 - C90 * C2339 +
             C104 * C2332 - C91 * C2340) *
                C89247) *
               C89236 * C89217) *
              C89137 * C5075 +
          (((C100 * C107 - C89 * C114 + C102 * C108 - C90 * C116 + C104 * C109 -
             C91 * C118) *
                C263 +
            (C100 * C566 - C89 * C572 + C102 * C567 - C90 * C573 + C104 * C568 -
             C91 * C574) *
                C89247) *
               C89236 * C9228 +
           ((C89 * C1732 - C100 * C1723 + C90 * C1730 - C102 * C1722 +
             C91 * C1742 - C104 * C1728) *
                C263 +
            (C89 * C2339 - C100 * C2331 + C90 * C2340 - C102 * C2332 +
             C91 * C2344 - C104 * C2336) *
                C89247) *
               C89236 * C89217) *
              C89137 * C5076 +
          (((C89 * C116 - C100 * C108 + C90 * C118 - C102 * C109 + C91 * C120 -
             C104 * C110) *
                C263 +
            (C89 * C573 - C100 * C567 + C90 * C574 - C102 * C568 + C91 * C575 -
             C104 * C569) *
                C89247) *
               C89236 * C9228 +
           ((C100 * C1722 - C89 * C1730 + C102 * C1728 - C90 * C1742 +
             C104 * C3352 - C91 * C3353) *
                C263 +
            (C100 * C2332 - C89 * C2340 + C102 * C2336 - C90 * C2344 +
             C104 * C3833 - C91 * C3834) *
                C89247) *
               C89236 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 + C91 * C116 -
            C104 * C108) *
               C263 +
           (C89 * C571 - C100 * C565 + C90 * C572 - C102 * C566 + C91 * C573 -
            C104 * C567) *
               C89247) *
              C89236 * C10538 +
          ((C100 * C1724 - C89 * C1734 + C102 * C1723 - C90 * C1732 +
            C104 * C1722 - C91 * C1730) *
               C263 +
           (C100 * C2330 - C89 * C2338 + C102 * C2331 - C90 * C2339 +
            C104 * C2332 - C91 * C2340) *
               C89247) *
              C89236 * C10539 +
          ((C89 * C1736 - C100 * C1725 + C90 * C1738 - C102 * C1726 +
            C91 * C1740 - C104 * C1727) *
               C263 +
           (C89 * C2341 - C100 * C2333 + C90 * C2342 - C102 * C2334 +
            C91 * C2343 - C104 * C2335) *
               C89247) *
              C89236 * C10540 +
          ((C100 * C10544 - C89 * C10549 + C102 * C10543 - C90 * C10547 +
            C104 * C10542 - C91 * C10545) *
               C263 +
           (C100 * C10878 - C89 * C10881 + C102 * C10879 - C90 * C10882 +
            C104 * C10880 - C91 * C10883) *
               C89247) *
              C89236 * C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C263 +
             (C89093 * C571 - C13261 * C565) * C89247) *
                C13258 +
            ((C14060 - C14061) * C263 + (C14328 - C14329) * C89247) * C13259 +
            C14346 * C13260) *
               C9228 +
           (((C13261 * C1724 - C89093 * C1734) * C263 +
             (C13261 * C2330 - C89093 * C2338) * C89247) *
                C13258 +
            ((C17042 - C17043) * C263 + (C17366 - C17367) * C89247) * C13259 +
            C21613 * C13260) *
               C89217) *
              C89137 * C5075 +
          ((((C13261 * C107 - C89093 * C114) * C263 +
             (C13261 * C566 - C89093 * C572) * C89247) *
                C13258 +
            ((C14072 - C14073) * C263 + (C14335 - C14336) * C89247) * C13259 +
            C14347 * C13260) *
               C9228 +
           (((C89093 * C1732 - C13261 * C1723) * C263 +
             (C89093 * C2339 - C13261 * C2331) * C89247) *
                C13258 +
            ((C17050 - C17051) * C263 + (C17370 - C17371) * C89247) * C13259 +
            ((C17054 - C17055) * C263 + (C17372 - C17373) * C89247) * C13260) *
               C89217) *
              C89137 * C5076 +
          ((((C89093 * C116 - C13261 * C108) * C263 +
             (C89093 * C573 - C13261 * C567) * C89247) *
                C13258 +
            ((C15538 - C15539) * C263 + (C15768 - C15769) * C89247) * C13259 +
            ((C15542 - C15543) * C263 + (C15770 - C15771) * C89247) * C13260) *
               C9228 +
           (((C13261 * C1722 - C89093 * C1730) * C263 +
             (C13261 * C2332 - C89093 * C2340) * C89247) *
                C13258 +
            ((C13261 * C4099 - C89093 * C4105) * C263 +
             (C13261 * C4769 - C89093 * C4773) * C89247) *
                C13259 +
            ((C13261 * C8514 - C89093 * C8517) * C263 +
             (C13261 * C8996 - C89093 * C8999) * C89247) *
                C13260) *
               C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C263 +
             (C89093 * C571 - C13261 * C565) * C89247) *
                C13258 +
            ((C14060 - C14061) * C263 + (C14328 - C14329) * C89247) * C13259 +
            C14346 * C13260) *
               C9228 +
           (((C13261 * C1724 - C89093 * C1734) * C263 +
             (C13261 * C2330 - C89093 * C2338) * C89247) *
                C13258 +
            ((C17042 - C17043) * C263 + (C17366 - C17367) * C89247) * C13259 +
            C21613 * C13260) *
               C89217) *
              C812 +
          ((((C14061 - C14060) * C263 + (C14329 - C14328) * C89247) * C13258 +
            ((C14065 - C14064) * C263 + (C14332 - C14331) * C89247) * C13259 +
            C18656 * C13260) *
               C9228 +
           (((C17043 - C17042) * C263 + (C17367 - C17366) * C89247) * C13258 +
            ((C17047 - C17046) * C263 + (C17369 - C17368) * C89247) * C13259 +
            ((C21375 - C21376) * C263 + (C21610 - C21611) * C89247) * C13260) *
               C89217) *
              C813 +
          ((C14346 * C13258 +
            ((C14069 - C14068) * C263 + (C14334 - C14333) * C89247) * C13259 +
            ((C18490 - C18491) * C263 + (C18653 - C18654) * C89247) * C13260) *
               C9228 +
           (C21613 * C13258 +
            ((C21376 - C21375) * C263 + (C21611 - C21610) * C89247) * C13259 +
            ((C13261 * C21123 - C89093 * C21124) * C263 +
             (C13261 * C21605 - C89093 * C21606) * C89247) *
                C13260) *
               C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89093 * C112 - C13261 * C106) * C263 +
            (C89093 * C571 - C13261 * C565) * C89247) *
               C13258 +
           ((C14060 - C14061) * C263 + (C14328 - C14329) * C89247) * C13259 +
           C14346 * C13260) *
              C10538 +
          (((C13261 * C1724 - C89093 * C1734) * C263 +
            (C13261 * C2330 - C89093 * C2338) * C89247) *
               C13258 +
           ((C17042 - C17043) * C263 + (C17366 - C17367) * C89247) * C13259 +
           C21613 * C13260) *
              C10539 +
          (((C89093 * C1736 - C13261 * C1725) * C263 +
            (C89093 * C2341 - C13261 * C2333) * C89247) *
               C13258 +
           ((C19096 - C19097) * C263 + (C19334 - C19335) * C89247) * C13259 +
           ((C19100 - C19101) * C263 + (C19336 - C19337) * C89247) * C13260) *
              C10540 +
          (((C13261 * C10544 - C89093 * C10549) * C263 +
            (C13261 * C10878 - C89093 * C10881) * C89247) *
               C13258 +
           ((C13261 * C23153 - C89093 * C23156) * C263 +
            (C13261 * C23476 - C89093 * C23478) * C89247) *
               C13259 +
           ((C13261 * C23152 - C89093 * C23154) * C263 +
            (C13261 * C23477 - C89093 * C23479) * C89247) *
               C13260) *
              C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q));
    d2eezy[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C263 +
             (C89236 * C627 - C180 * C565) * C89247) *
                C89 +
            ((C194 - C195) * C263 + (C634 - C635) * C89247) * C90 +
            C648 * C91) *
               C9228 +
           (((C180 * C1724 - C89236 * C1828) * C263 +
             (C180 * C2330 - C89236 * C2420) * C89247) *
                C89 +
            ((C1845 - C1846) * C263 + (C2429 - C2430) * C89247) * C90 +
            C3916 * C91) *
               C89217) *
              C812 +
          ((((C180 * C819 - C89236 * C923) * C263 +
             (C180 * C1425 - C89236 * C1515) * C89247) *
                C89 +
            ((C940 - C941) * C263 + (C1524 - C1525) * C89247) * C90 +
            C3193 * C91) *
               C9228 +
           (((C89236 * C4211 - C180 * C4097) * C263 +
             (C89236 * C4873 - C180 * C4767) * C89247) *
                C89 +
            ((C4220 - C4221) * C263 + (C4878 - C4879) * C89247) * C90 +
            ((C4224 - C4225) * C263 + (C4880 - C4881) * C89247) * C91) *
               C89217) *
              C813 +
          ((((C89236 * C926 - C180 * C820) * C263 +
             (C89236 * C1518 - C180 * C1428) * C89247) *
                C89 +
            ((C948 - C949) * C263 + (C1528 - C1529) * C89247) * C90 +
            ((C952 - C953) * C263 + (C1530 - C1531) * C89247) * C91) *
               C9228 +
           (((C180 * C8516 - C89236 * C8600) * C263 +
             (C180 * C8994 - C89236 * C9074) * C89247) *
                C89 +
            ((C180 * C8515 - C89236 * C8601) * C263 +
             (C180 * C8995 - C89236 * C9075) * C89247) *
                C90 +
            ((C180 * C8514 - C89236 * C8602) * C263 +
             (C180 * C8996 - C89236 * C9076) * C89247) *
                C91) *
               C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C263 +
             (C89236 * C627 - C180 * C565) * C89247) *
                C89 +
            ((C194 - C195) * C263 + (C634 - C635) * C89247) * C90 +
            C648 * C91) *
               C9228 +
           (((C180 * C1724 - C89236 * C1828) * C263 +
             (C180 * C2330 - C89236 * C2420) * C89247) *
                C89 +
            ((C1845 - C1846) * C263 + (C2429 - C2430) * C89247) * C90 +
            C3916 * C91) *
               C89217) *
              C89137 * C5075 +
          ((((C195 - C194) * C263 + (C635 - C634) * C89247) * C89 +
            ((C199 - C198) * C263 + (C638 - C637) * C89247) * C90 +
            C649 * C91) *
               C9228 +
           (((C1846 - C1845) * C263 + (C2430 - C2429) * C89247) * C89 +
            ((C1850 - C1849) * C263 + (C2432 - C2431) * C89247) * C90 +
            ((C3435 - C3436) * C263 + (C3913 - C3914) * C89247) * C91) *
               C89217) *
              C89137 * C5076 +
          ((C648 * C89 + ((C203 - C202) * C263 + (C641 - C640) * C89247) * C90 +
            ((C206 - C207) * C263 + (C642 - C643) * C89247) * C91) *
               C9228 +
           (C3916 * C89 +
            ((C3436 - C3435) * C263 + (C3914 - C3913) * C89247) * C90 +
            ((C180 * C3352 - C89236 * C3430) * C263 +
             (C180 * C3833 - C89236 * C3909) * C89247) *
                C91) *
               C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C89236 * C181 - C180 * C106) * C263 +
            (C89236 * C627 - C180 * C565) * C89247) *
               C89 +
           ((C194 - C195) * C263 + (C634 - C635) * C89247) * C90 + C648 * C91) *
              C10538 +
          (((C180 * C1724 - C89236 * C1828) * C263 +
            (C180 * C2330 - C89236 * C2420) * C89247) *
               C89 +
           ((C1845 - C1846) * C263 + (C2429 - C2430) * C89247) * C90 +
           C3916 * C91) *
              C10539 +
          (((C89236 * C1831 - C180 * C1725) * C263 +
            (C89236 * C2423 - C180 * C2333) * C89247) *
               C89 +
           ((C1853 - C1854) * C263 + (C2433 - C2434) * C89247) * C90 +
           ((C1857 - C1858) * C263 + (C2435 - C2436) * C89247) * C91) *
              C10540 +
          (((C180 * C10544 - C89236 * C10604) * C263 +
            (C180 * C10878 - C89236 * C10934) * C89247) *
               C89 +
           ((C180 * C10543 - C89236 * C10605) * C263 +
            (C180 * C10879 - C89236 * C10935) * C89247) *
               C90 +
           ((C180 * C10542 - C89236 * C10606) * C263 +
            (C180 * C10880 - C89236 * C10936) * C89247) *
               C91) *
              C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
             C13260 * C926 - C13315 * C820) *
                C263 +
            (C13258 * C627 - C13313 * C565 + C13259 * C1515 - C13314 * C1425 +
             C13260 * C1518 - C13315 * C1428) *
                C89247) *
               C89093 * C9228 +
           ((C13313 * C1724 - C13258 * C1828 + C13314 * C4097 - C13259 * C4211 +
             C13315 * C8516 - C13260 * C8600) *
                C263 +
            (C13313 * C2330 - C13258 * C2420 + C13314 * C4767 - C13259 * C4873 +
             C13315 * C8994 - C13260 * C9074) *
                C89247) *
               C89093 * C89217) *
              C89137 * C5075 +
          (((C13313 * C107 - C13258 * C182 + C13314 * C818 - C13259 * C924 +
             C13315 * C821 - C13260 * C927) *
                C263 +
            (C13313 * C566 - C13258 * C628 + C13314 * C1426 - C13259 * C1516 +
             C13315 * C1429 - C13260 * C1519) *
                C89247) *
               C89093 * C9228 +
           ((C13258 * C1829 - C13313 * C1723 + C13259 * C4212 - C13314 * C4098 +
             C13260 * C8601 - C13315 * C8515) *
                C263 +
            (C13258 * C2421 - C13313 * C2331 + C13259 * C4874 - C13314 * C4768 +
             C13260 * C9075 - C13315 * C8995) *
                C89247) *
               C89093 * C89217) *
              C89137 * C5076 +
          (((C13258 * C183 - C13313 * C108 + C13259 * C925 - C13314 * C817 +
             C13260 * C928 - C13315 * C822) *
                C263 +
            (C13258 * C629 - C13313 * C567 + C13259 * C1517 - C13314 * C1427 +
             C13260 * C1520 - C13315 * C1430) *
                C89247) *
               C89093 * C9228 +
           ((C13313 * C1722 - C13258 * C1830 + C13314 * C4099 - C13259 * C4213 +
             C13315 * C8514 - C13260 * C8602) *
                C263 +
            (C13313 * C2332 - C13258 * C2422 + C13314 * C4769 - C13259 * C4875 +
             C13315 * C8996 - C13260 * C9076) *
                C89247) *
               C89093 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
             C13260 * C926 - C13315 * C820) *
                C263 +
            (C13258 * C627 - C13313 * C565 + C13259 * C1515 - C13314 * C1425 +
             C13260 * C1518 - C13315 * C1428) *
                C89247) *
               C89093 * C9228 +
           ((C13313 * C1724 - C13258 * C1828 + C13314 * C4097 - C13259 * C4211 +
             C13315 * C8516 - C13260 * C8600) *
                C263 +
            (C13313 * C2330 - C13258 * C2420 + C13314 * C4767 - C13259 * C4873 +
             C13315 * C8994 - C13260 * C9074) *
                C89247) *
               C89093 * C89217) *
              C812 +
          (((C13313 * C819 - C13258 * C923 + C13314 * C820 - C13259 * C926 +
             C13315 * C5727 - C13260 * C5787) *
                C263 +
            (C13313 * C1425 - C13258 * C1515 + C13314 * C1428 - C13259 * C1518 +
             C13315 * C6061 - C13260 * C6117) *
                C89247) *
               C89093 * C9228 +
           ((C13258 * C4211 - C13313 * C4097 + C13259 * C8600 - C13314 * C8516 +
             C13260 * C16821 - C13315 * C16683) *
                C263 +
            (C13258 * C4873 - C13313 * C4767 + C13259 * C9074 - C13314 * C8994 +
             C13260 * C17471 - C13315 * C17361) *
                C89247) *
               C89093 * C89217) *
              C813 +
          (((C13258 * C926 - C13313 * C820 + C13259 * C5787 - C13314 * C5727 +
             C13260 * C13873 - C13315 * C13743) *
                C263 +
            (C13258 * C1518 - C13313 * C1428 + C13259 * C6117 - C13314 * C6061 +
             C13260 * C14421 - C13315 * C14323) *
                C89247) *
               C89093 * C9228 +
           ((C13313 * C8516 - C13258 * C8600 + C13314 * C16683 -
             C13259 * C16821 + C13315 * C21123 - C13260 * C21209) *
                C263 +
            (C13313 * C8994 - C13258 * C9074 + C13314 * C17361 -
             C13259 * C17471 + C13315 * C21605 - C13260 * C21687) *
                C89247) *
               C89093 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
            C13260 * C926 - C13315 * C820) *
               C263 +
           (C13258 * C627 - C13313 * C565 + C13259 * C1515 - C13314 * C1425 +
            C13260 * C1518 - C13315 * C1428) *
               C89247) *
              C89093 * C10538 +
          ((C13313 * C1724 - C13258 * C1828 + C13314 * C4097 - C13259 * C4211 +
            C13315 * C8516 - C13260 * C8600) *
               C263 +
           (C13313 * C2330 - C13258 * C2420 + C13314 * C4767 - C13259 * C4873 +
            C13315 * C8994 - C13260 * C9074) *
               C89247) *
              C89093 * C10539 +
          ((C13258 * C1831 - C13313 * C1725 + C13259 * C6333 - C13314 * C6249 +
            C13260 * C14683 - C13315 * C14601) *
               C263 +
           (C13258 * C2423 - C13313 * C2333 + C13259 * C6807 - C13314 * C6727 +
            C13260 * C15147 - C13315 * C15069) *
               C89247) *
              C89093 * C10540 +
          ((C13313 * C10544 - C13258 * C10604 + C13314 * C23153 -
            C13259 * C23210 + C13315 * C23152 - C13260 * C23211) *
               C263 +
           (C13313 * C10878 - C13258 * C10934 + C13314 * C23476 -
            C13259 * C23530 + C13315 * C23477 - C13260 * C23531) *
               C89247) *
              C89093 * C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q));
    d2eezz[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C89236 *
                C89 +
            C735 * C90 + C736 * C91) *
               C9228 -
           (C2547 * C91 + C2548 * C90 +
            (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
                C89236 * C89) *
               C89217) *
              C812 +
          (((C263 * C4325 - C699 * C4097 - C263 * C4767 + C89247 * C4979) *
                C89236 * C89 +
            C4998 * C90 + C4999 * C91) *
               C89217 -
           (C1642 * C91 + C1643 * C90 +
            (C263 * C1029 - C699 * C819 - C263 * C1425 + C89247 * C1607) *
                C89236 * C89) *
               C9228) *
              C813 +
          (((C263 * C1032 - C699 * C820 - C263 * C1428 + C89247 * C1608) *
                C89236 * C89 +
            C1644 * C90 + C1645 * C91) *
               C9228 -
           ((C263 * C8682 - C699 * C8514 - C263 * C8996 + C89247 * C9151) *
                C89236 * C91 +
            (C263 * C8681 - C699 * C8515 - C263 * C8995 + C89247 * C9152) *
                C89236 * C90 +
            (C263 * C8680 - C699 * C8516 - C263 * C8994 + C89247 * C9153) *
                C89236 * C89) *
               C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C89236 *
                C89 +
            C735 * C90 + C736 * C91) *
               C9228 -
           (C2547 * C91 + C2548 * C90 +
            (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
                C89236 * C89) *
               C89217) *
              C89137 * C5075 +
          ((C2548 * C89 + C2547 * C90 + C3999 * C91) * C89217 -
           (C737 * C91 + C736 * C90 + C735 * C89) * C9228) *
              C89137 * C5076 +
          ((C736 * C89 + C737 * C90 + C738 * C91) * C9228 -
           ((C263 * C3512 - C699 * C3352 - C263 * C3833 + C89247 * C3990) *
                C89236 * C91 +
            C3999 * C90 + C2547 * C89) *
               C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C89236 *
               C89 +
           C735 * C90 + C736 * C91) *
              C10538 -
          (C2547 * C91 + C2548 * C90 +
           (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
               C89236 * C89) *
              C10539 +
          ((C263 * C1937 - C699 * C1725 - C263 * C2333 + C89247 * C2513) *
               C89236 * C89 +
           C2549 * C90 + C2550 * C91) *
              C10540 -
          ((C263 * C10662 - C699 * C10542 - C263 * C10880 + C89247 * C10987) *
               C89236 * C91 +
           (C263 * C10661 - C699 * C10543 - C263 * C10879 + C89247 * C10988) *
               C89236 * C90 +
           (C263 * C10660 - C699 * C10544 - C263 * C10878 + C89247 * C10989) *
               C89236 * C89) *
              C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C13258 +
            C14524 * C13259 + C14525 * C13260) *
               C89093 * C9228 -
           (C17592 * C13260 + C17593 * C13259 +
            (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
                C13258) *
               C89093 * C89217) *
              C89137 * C5075 +
          ((C2544 * C13258 + C4996 * C13259 + C17594 * C13260) * C89093 *
               C89217 -
           (C1640 * C13260 + C1639 * C13259 + C731 * C13258) * C89093 * C9228) *
              C89137 * C5076 +
          ((C732 * C13258 + C1638 * C13259 + C1641 * C13260) * C89093 * C9228 -
           ((C263 * C8682 - C699 * C8514 - C263 * C8996 + C89247 * C9151) *
                C13260 +
            C4997 * C13259 + C2543 * C13258) *
               C89093 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C13258 +
            C14524 * C13259 + C14525 * C13260) *
               C89093 * C9228 -
           (C17592 * C13260 + C17593 * C13259 +
            (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
                C13258) *
               C89093 * C89217) *
              C812 +
          ((C17593 * C13258 + C17592 * C13259 + C21770 * C13260) * C89093 *
               C89217 -
           (C14526 * C13260 + C14525 * C13259 + C14524 * C13258) * C89093 *
               C9228) *
              C813 +
          ((C14525 * C13258 + C14526 * C13259 + C18765 * C13260) * C89093 *
               C9228 -
           ((C263 * C21285 - C699 * C21123 - C263 * C21605 + C89247 * C21762) *
                C13260 +
            C21770 * C13259 + C17592 * C13258) *
               C89093 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C13258 +
           C14524 * C13259 + C14525 * C13260) *
              C89093 * C10538 -
          (C17592 * C13260 + C17593 * C13259 +
           (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
               C13258) *
              C89093 * C10539 +
          ((C263 * C1937 - C699 * C1725 - C263 * C2333 + C89247 * C2513) *
               C13258 +
           C19500 * C13259 + C19501 * C13260) *
              C89093 * C10540 -
          ((C263 * C23265 - C699 * C23152 - C263 * C23477 + C89247 * C23582) *
               C13260 +
           (C263 * C23264 - C699 * C23153 - C263 * C23476 + C89247 * C23583) *
               C13259 +
           (C263 * C10660 - C699 * C10544 - C263 * C10878 + C89247 * C10989) *
               C13258) *
              C89093 * C10541) *
         C89137 * C89118) /
            (p * q * std::sqrt(p + q));
    d2eexx[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C112 - C101 * C106 - C100 * C113 + C89 * C124 + C102 * C114 -
            C103 * C107 - C102 * C115 + C90 * C125 + C104 * C116 - C105 * C108 -
            C104 * C117 + C91 * C126) *
               C89247 * C89236 * C89337 -
           (C104 * C1730 - C105 * C1722 - C104 * C1731 + C91 * C1746 +
            C102 * C1732 - C103 * C1723 - C102 * C1733 + C90 * C1747 +
            C100 * C1734 - C101 * C1724 - C100 * C1735 + C89 * C1748) *
               C89247 * C89236 * C89338 +
           (C100 * C1736 - C101 * C1725 - C100 * C1737 + C89 * C1749 +
            C102 * C1738 - C103 * C1726 - C102 * C1739 + C90 * C1750 +
            C104 * C1740 - C105 * C1727 - C104 * C1741 + C91 * C1751) *
               C89247 * C89236 * C11948) *
              C89137 * C89299 +
          ((C100 * C1732 - C101 * C1723 - C100 * C1733 + C89 * C1747 +
            C102 * C1730 - C103 * C1722 - C102 * C1731 + C90 * C1746 +
            C104 * C1742 - C105 * C1728 - C104 * C1743 + C91 * C1752) *
               C89247 * C89236 * C89338 -
           (C104 * C118 - C105 * C109 - C104 * C119 + C91 * C127 + C102 * C116 -
            C103 * C108 - C102 * C117 + C90 * C126 + C100 * C114 - C101 * C107 -
            C100 * C115 + C89 * C125) *
               C89247 * C89236 * C89337 -
           (C104 * C1744 - C105 * C1729 - C104 * C1745 + C91 * C1753 +
            C102 * C1740 - C103 * C1727 - C102 * C1741 + C90 * C1751 +
            C100 * C1738 - C101 * C1726 - C100 * C1739 + C89 * C1750) *
               C89247 * C89236 * C11948) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                C89247 * C13258 +
            C13794 * C13259 + C13795 * C13260) *
               C89337 -
           (C16720 * C13260 + C16721 * C13259 +
            (C13261 * C1734 - C13262 * C1724 - C13261 * C1735 +
             C89093 * C1748) *
                C89247 * C13258) *
               C89338 +
           ((C13261 * C1736 - C13262 * C1725 - C13261 * C1737 +
             C89093 * C1749) *
                C89247 * C13258 +
            C18858 * C13259 + C18859 * C13260) *
               C11948) *
              C89137 * C89299 +
          (((C13261 * C1732 - C13262 * C1723 - C13261 * C1733 +
             C89093 * C1747) *
                C89247 * C13258 +
            C16722 * C13259 + C16723 * C13260) *
               C89338 -
           (C13798 * C13260 + C13797 * C13259 +
            (C13261 * C114 - C13262 * C107 - C13261 * C115 + C89093 * C125) *
                C89247 * C13258) *
               C89337 -
           ((C13261 * C14605 - C13262 * C14602 - C13261 * C14606 +
             C89093 * C14608) *
                C89247 * C13260 +
            (C13261 * C6252 - C13262 * C6248 - C13261 * C6253 +
             C89093 * C6257) *
                C89247 * C13259 +
            (C13261 * C1738 - C13262 * C1726 - C13261 * C1739 +
             C89093 * C1750) *
                C89247 * C13258) *
               C11948) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q));
    d2eexy[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C89236 * C181 - C180 * C106) * C100 +
            (C89236 * C187 - C180 * C113) * C89 + (C194 - C195) * C102 +
            (C196 - C197) * C90 + C210 * C104 + C211 * C91) *
               C89247 * C89337 +
           ((C180 * C1724 - C89236 * C1828) * C100 +
            (C180 * C1735 - C89236 * C1836) * C89 + (C1845 - C1846) * C102 +
            (C1847 - C1848) * C90 + C3433 * C104 + C3434 * C91) *
               C89247 * C89338 +
           ((C89236 * C1831 - C180 * C1725) * C100 +
            (C89236 * C1839 - C180 * C1737) * C89 + (C1853 - C1854) * C102 +
            (C1855 - C1856) * C90 + (C1857 - C1858) * C104 +
            (C1859 - C1860) * C91) *
               C89247 * C11948) *
              C89137 * C89299 +
          (((C195 - C194) * C100 + (C197 - C196) * C89 + (C199 - C198) * C102 +
            (C201 - C200) * C90 + C212 * C104 + C213 * C91) *
               C89247 * C89337 +
           ((C1846 - C1845) * C100 + (C1848 - C1847) * C89 +
            (C1850 - C1849) * C102 + (C1852 - C1851) * C90 +
            (C3435 - C3436) * C104 + (C3437 - C3438) * C91) *
               C89247 * C89338 +
           ((C1854 - C1853) * C100 + (C1856 - C1855) * C89 +
            (C1858 - C1857) * C102 + (C1860 - C1859) * C90 +
            (C180 * C1729 - C89236 * C1835) * C104 +
            (C180 * C1745 - C89236 * C1843) * C91) *
               C89247 * C11948) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
             C13260 * C926 - C13315 * C820) *
                C13261 +
            (C13258 * C187 - C13313 * C113 + C13259 * C931 - C13314 * C830 +
             C13260 * C934 - C13315 * C832) *
                C89093) *
               C89247 * C89337 +
           ((C13313 * C1724 - C13258 * C1828 + C13314 * C4097 - C13259 * C4211 +
             C13315 * C8516 - C13260 * C8600) *
                C13261 +
            (C13313 * C1735 - C13258 * C1836 + C13314 * C4102 - C13259 * C4215 +
             C13315 * C8522 - C13260 * C8603) *
                C89093) *
               C89247 * C89338 +
           ((C13258 * C1831 - C13313 * C1725 + C13259 * C6333 - C13314 * C6249 +
             C13260 * C14683 - C13315 * C14601) *
                C13261 +
            (C13258 * C1839 - C13313 * C1737 + C13259 * C6336 - C13314 * C6255 +
             C13260 * C14685 - C13315 * C14604) *
                C89093) *
               C89247 * C11948) *
              C89137 * C89299 +
          (((C13313 * C107 - C13258 * C182 + C13314 * C818 - C13259 * C924 +
             C13315 * C821 - C13260 * C927) *
                C13261 +
            (C13313 * C115 - C13258 * C188 + C13314 * C828 - C13259 * C932 +
             C13315 * C834 - C13260 * C935) *
                C89093) *
               C89247 * C89337 +
           ((C13258 * C1829 - C13313 * C1723 + C13259 * C4212 - C13314 * C4098 +
             C13260 * C8601 - C13315 * C8515) *
                C13261 +
            (C13258 * C1837 - C13313 * C1733 + C13259 * C4216 - C13314 * C4104 +
             C13260 * C8604 - C13315 * C8520) *
                C89093) *
               C89247 * C89338 +
           ((C13313 * C1726 - C13258 * C1832 + C13314 * C6248 - C13259 * C6334 +
             C13315 * C14602 - C13260 * C14684) *
                C13261 +
            (C13313 * C1739 - C13258 * C1840 + C13314 * C6253 - C13259 * C6337 +
             C13315 * C14606 - C13260 * C14686) *
                C89093) *
               C89247 * C11948) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q));
    d2eexz[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C100 +
            (C89247 * C270 - C263 * C113) * C89 + (C277 - C278) * C102 +
            (C279 - C280) * C90 + C293 * C104 + C294 * C91) *
               C89236 * C89337 +
           ((C263 * C1724 - C89247 * C1934) * C100 +
            (C263 * C1735 - C89247 * C1942) * C89 + (C1951 - C1952) * C102 +
            (C1953 - C1954) * C90 + C3515 * C104 + C3516 * C91) *
               C89236 * C89338 +
           ((C89247 * C1937 - C263 * C1725) * C100 +
            (C89247 * C1945 - C263 * C1737) * C89 + (C1959 - C1960) * C102 +
            (C1961 - C1962) * C90 + (C1963 - C1964) * C104 +
            (C1965 - C1966) * C91) *
               C89236 * C11948) *
              C89137 * C89299 +
          (((C278 - C277) * C100 + (C280 - C279) * C89 + (C282 - C281) * C102 +
            (C284 - C283) * C90 + C295 * C104 + C296 * C91) *
               C89236 * C89337 +
           ((C1952 - C1951) * C100 + (C1954 - C1953) * C89 +
            (C1956 - C1955) * C102 + (C1958 - C1957) * C90 +
            (C3517 - C3518) * C104 + (C3519 - C3520) * C91) *
               C89236 * C89338 +
           ((C1960 - C1959) * C100 + (C1962 - C1961) * C89 +
            (C1964 - C1963) * C102 + (C1966 - C1965) * C90 +
            (C263 * C1729 - C89247 * C1941) * C104 +
            (C263 * C1745 - C89247 * C1949) * C91) *
               C89236 * C11948) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C13261 +
             (C89247 * C270 - C263 * C113) * C89093) *
                C13258 +
            ((C13956 - C13957) * C13261 + (C13958 - C13959) * C89093) * C13259 +
            C13981 * C13260) *
               C89337 +
           (((C263 * C1724 - C89247 * C1934) * C13261 +
             (C263 * C1735 - C89247 * C1942) * C89093) *
                C13258 +
            ((C16928 - C16929) * C13261 + (C16930 - C16931) * C89093) * C13259 +
            C21296 * C13260) *
               C89338 +
           (((C89247 * C1937 - C263 * C1725) * C13261 +
             (C89247 * C1945 - C263 * C1737) * C89093) *
                C13258 +
            ((C19012 - C19013) * C13261 + (C19014 - C19015) * C89093) * C13259 +
            ((C19016 - C19017) * C13261 + (C19018 - C19019) * C89093) *
                C13260) *
               C11948) *
              C89137 * C89299 +
          ((((C278 - C277) * C13261 + (C280 - C279) * C89093) * C13258 +
            ((C1046 - C1047) * C13261 + (C1048 - C1049) * C89093) * C13259 +
            C13980 * C13260) *
               C89337 +
           (((C1952 - C1951) * C13261 + (C1954 - C1953) * C89093) * C13258 +
            ((C4334 - C4335) * C13261 + (C4336 - C4337) * C89093) * C13259 +
            ((C16936 - C16937) * C13261 + (C16938 - C16939) * C89093) *
                C13260) *
               C89338 +
           (((C1960 - C1959) * C13261 + (C1962 - C1961) * C89093) * C13258 +
            ((C263 * C6248 - C89247 * C6414) * C13261 +
             (C263 * C6253 - C89247 * C6417) * C89093) *
                C13259 +
            ((C263 * C14602 - C89247 * C14762) * C13261 +
             (C263 * C14606 - C89247 * C14764) * C89093) *
                C13260) *
               C11948) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[73] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 +
                       C91 * C116 - C104 * C108) *
                          C180 +
                      (C89 * C352 - C100 * C346 + C90 * C353 - C102 * C347 +
                       C91 * C354 - C104 * C348) *
                          C89236) *
                         C89247 * C89337 +
                     ((C100 * C1724 - C89 * C1734 + C102 * C1723 - C90 * C1732 +
                       C104 * C1722 - C91 * C1730) *
                          C180 +
                      (C100 * C2040 - C89 * C2048 + C102 * C2041 - C90 * C2049 +
                       C104 * C2042 - C91 * C2050) *
                          C89236) *
                         C89247 * C89338 +
                     ((C89 * C1736 - C100 * C1725 + C90 * C1738 - C102 * C1726 +
                       C91 * C1740 - C104 * C1727) *
                          C180 +
                      (C89 * C2051 - C100 * C2043 + C90 * C2052 - C102 * C2044 +
                       C91 * C2053 - C104 * C2045) *
                          C89236) *
                         C89247 * C11948) *
                        C89137 * C89299 +
                    (((C100 * C107 - C89 * C114 + C102 * C108 - C90 * C116 +
                       C104 * C109 - C91 * C118) *
                          C180 +
                      (C100 * C347 - C89 * C353 + C102 * C348 - C90 * C354 +
                       C104 * C349 - C91 * C355) *
                          C89236) *
                         C89247 * C89337 +
                     ((C89 * C1732 - C100 * C1723 + C90 * C1730 - C102 * C1722 +
                       C91 * C1742 - C104 * C1728) *
                          C180 +
                      (C89 * C2049 - C100 * C2041 + C90 * C2050 - C102 * C2042 +
                       C91 * C2054 - C104 * C2046) *
                          C89236) *
                         C89247 * C89338 +
                     ((C100 * C1726 - C89 * C1738 + C102 * C1727 - C90 * C1740 +
                       C104 * C1729 - C91 * C1744) *
                          C180 +
                      (C100 * C2044 - C89 * C2052 + C102 * C2045 - C90 * C2053 +
                       C104 * C2047 - C91 * C2055) *
                          C89236) *
                         C89247 * C11948) *
                        C89137 * C89124)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C89093 * C112 - C13261 * C106) * C13313 +
                      (C89093 * C352 - C13261 * C346) * C13258 +
                      (C14060 - C14061) * C13314 + (C14062 - C14063) * C13259 +
                      C14084 * C13315 + C14085 * C13260) *
                         C89247 * C89337 +
                     ((C13261 * C1724 - C89093 * C1734) * C13313 +
                      (C13261 * C2040 - C89093 * C2048) * C13258 +
                      (C17042 - C17043) * C13314 + (C17044 - C17045) * C13259 +
                      C21373 * C13315 + C21374 * C13260) *
                         C89247 * C89338 +
                     ((C89093 * C1736 - C13261 * C1725) * C13313 +
                      (C89093 * C2051 - C13261 * C2043) * C13258 +
                      (C19096 - C19097) * C13314 + (C19098 - C19099) * C13259 +
                      (C19100 - C19101) * C13315 + (C19102 - C19103) * C13260) *
                         C89247 * C11948) *
                        C89137 * C89299 +
                    (((C13261 * C107 - C89093 * C114) * C13313 +
                      (C13261 * C347 - C89093 * C353) * C13258 +
                      (C14072 - C14073) * C13314 + (C14074 - C14075) * C13259 +
                      C14086 * C13315 + C14087 * C13260) *
                         C89247 * C89337 +
                     ((C89093 * C1732 - C13261 * C1723) * C13313 +
                      (C89093 * C2049 - C13261 * C2041) * C13258 +
                      (C17050 - C17051) * C13314 + (C17052 - C17053) * C13259 +
                      (C17054 - C17055) * C13315 + (C17056 - C17057) * C13260) *
                         C89247 * C89338 +
                     ((C13261 * C1726 - C89093 * C1738) * C13313 +
                      (C13261 * C2044 - C89093 * C2052) * C13258 +
                      (C13261 * C6248 - C89093 * C6252) * C13314 +
                      (C13261 * C6494 - C89093 * C6497) * C13259 +
                      (C13261 * C14602 - C89093 * C14605) * C13315 +
                      (C13261 * C14840 - C89093 * C14842) * C13260) *
                         C89247 * C11948) *
                        C89137 * C89124)) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C89 +
            C440 * C90 + C441 * C91) *
               C89247 * C89337 -
           (C2163 * C91 + C2164 * C90 +
            (C180 * C1828 - C408 * C1724 - C180 * C2040 + C89236 * C2132) *
                C89) *
               C89247 * C89338 +
           ((C180 * C1831 - C408 * C1725 - C180 * C2043 + C89236 * C2133) *
                C89 +
            C2165 * C90 + C2166 * C91) *
               C89247 * C11948) *
              C89137 * C89299 +
          ((C2164 * C89 + C2163 * C90 + C3678 * C91) * C89247 * C89338 -
           (C442 * C91 + C441 * C90 + C440 * C89) * C89247 * C89337 -
           ((C180 * C1835 - C408 * C1729 - C180 * C2047 + C89236 * C2137) *
                C91 +
            C2166 * C90 + C2165 * C89) *
               C89247 * C11948) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C13313 * C181 - C13466 * C106 - C13313 * C346 + C13258 * C409 +
            C13314 * C923 - C13467 * C819 - C13314 * C1135 + C13259 * C1227 +
            C13315 * C926 - C13468 * C820 - C13315 * C1138 + C13260 * C1228) *
               C89093 * C89247 * C89337 -
           (C13315 * C8600 - C13468 * C8516 - C13315 * C8760 + C13260 * C8842 +
            C13314 * C4211 - C13467 * C4097 - C13314 * C4439 + C13259 * C4545 +
            C13313 * C1828 - C13466 * C1724 - C13313 * C2040 + C13258 * C2132) *
               C89093 * C89247 * C89338 +
           (C13313 * C1831 - C13466 * C1725 - C13313 * C2043 + C13258 * C2133 +
            C13314 * C6333 - C13467 * C6249 - C13314 * C6493 + C13259 * C6575 +
            C13315 * C14683 - C13468 * C14601 - C13315 * C14839 +
            C13260 * C14917) *
               C89093 * C89247 * C11948) *
              C89137 * C89299 +
          ((C13313 * C1829 - C13466 * C1723 - C13313 * C2041 + C13258 * C2131 +
            C13314 * C4212 - C13467 * C4098 - C13314 * C4440 + C13259 * C4546 +
            C13315 * C8601 - C13468 * C8515 - C13315 * C8761 + C13260 * C8841) *
               C89093 * C89247 * C89338 -
           (C13315 * C927 - C13468 * C821 - C13315 * C1139 + C13260 * C1229 +
            C13314 * C924 - C13467 * C818 - C13314 * C1136 + C13259 * C1226 +
            C13313 * C182 - C13466 * C107 - C13313 * C347 + C13258 * C410) *
               C89093 * C89247 * C89337 -
           (C13315 * C14684 - C13468 * C14602 - C13315 * C14840 +
            C13260 * C14918 + C13314 * C6334 - C13467 * C6248 - C13314 * C6494 +
            C13259 * C6574 + C13313 * C1832 - C13466 * C1726 - C13313 * C2044 +
            C13258 * C2134) *
               C89093 * C89247 * C11948) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C180 +
             (C89247 * C493 - C263 * C346) * C89236) *
                C89 +
            ((C277 - C278) * C180 + (C500 - C501) * C89236) * C90 +
            C514 * C91) *
               C89337 +
           (((C263 * C1724 - C89247 * C1934) * C180 +
             (C263 * C2040 - C89247 * C2240) * C89236) *
                C89 +
            ((C1951 - C1952) * C180 + (C2249 - C2250) * C89236) * C90 +
            C3759 * C91) *
               C89338 +
           (((C89247 * C1937 - C263 * C1725) * C180 +
             (C89247 * C2243 - C263 * C2043) * C89236) *
                C89 +
            ((C1959 - C1960) * C180 + (C2253 - C2254) * C89236) * C90 +
            ((C1963 - C1964) * C180 + (C2255 - C2256) * C89236) * C91) *
               C11948) *
              C89137 * C89299 +
          ((((C278 - C277) * C180 + (C501 - C500) * C89236) * C89 +
            ((C282 - C281) * C180 + (C504 - C503) * C89236) * C90 +
            C515 * C91) *
               C89337 +
           (((C1952 - C1951) * C180 + (C2250 - C2249) * C89236) * C89 +
            ((C1956 - C1955) * C180 + (C2252 - C2251) * C89236) * C90 +
            ((C3517 - C3518) * C180 + (C3756 - C3757) * C89236) * C91) *
               C89338 +
           (((C1960 - C1959) * C180 + (C2254 - C2253) * C89236) * C89 +
            ((C1964 - C1963) * C180 + (C2256 - C2255) * C89236) * C90 +
            ((C263 * C1729 - C89247 * C1941) * C180 +
             (C263 * C2047 - C89247 * C2247) * C89236) *
                C91) *
               C11948) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C13313 +
            (C89247 * C493 - C263 * C346) * C13258 +
            (C13956 - C13957) * C13314 + (C14240 - C14241) * C13259 +
            C13974 * C13315 + C14249 * C13260) *
               C89093 * C89337 +
           ((C263 * C1724 - C89247 * C1934) * C13313 +
            (C263 * C2040 - C89247 * C2240) * C13258 +
            (C16928 - C16929) * C13314 + (C17258 - C17259) * C13259 +
            C21288 * C13315 + C21529 * C13260) *
               C89093 * C89338 +
           ((C89247 * C1937 - C263 * C1725) * C13313 +
            (C89247 * C2243 - C263 * C2043) * C13258 +
            (C19012 - C19013) * C13314 + (C19254 - C19255) * C13259 +
            (C19016 - C19017) * C13315 + (C19256 - C19257) * C13260) *
               C89093 * C11948) *
              C89137 * C89299 +
          (((C278 - C277) * C13313 + (C501 - C500) * C13258 +
            (C1046 - C1047) * C13314 + (C1344 - C1345) * C13259 +
            C13968 * C13315 + C14246 * C13260) *
               C89093 * C89337 +
           ((C1952 - C1951) * C13313 + (C2250 - C2249) * C13258 +
            (C4334 - C4335) * C13314 + (C4666 - C4667) * C13259 +
            (C16936 - C16937) * C13315 + (C17262 - C17263) * C13260) *
               C89093 * C89338 +
           ((C1960 - C1959) * C13313 + (C2254 - C2253) * C13258 +
            (C263 * C6248 - C89247 * C6414) * C13314 +
            (C263 * C6494 - C89247 * C6651) * C13259 +
            (C263 * C14602 - C89247 * C14762) * C13315 +
            (C263 * C14840 - C89247 * C14994) * C13260) *
               C89093 * C11948) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q));
    d2eezx[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 + C91 * C116 -
             C104 * C108) *
                C263 +
            (C89 * C571 - C100 * C565 + C90 * C572 - C102 * C566 + C91 * C573 -
             C104 * C567) *
                C89247) *
               C89236 * C89337 +
           ((C100 * C1724 - C89 * C1734 + C102 * C1723 - C90 * C1732 +
             C104 * C1722 - C91 * C1730) *
                C263 +
            (C100 * C2330 - C89 * C2338 + C102 * C2331 - C90 * C2339 +
             C104 * C2332 - C91 * C2340) *
                C89247) *
               C89236 * C89338 +
           ((C89 * C1736 - C100 * C1725 + C90 * C1738 - C102 * C1726 +
             C91 * C1740 - C104 * C1727) *
                C263 +
            (C89 * C2341 - C100 * C2333 + C90 * C2342 - C102 * C2334 +
             C91 * C2343 - C104 * C2335) *
                C89247) *
               C89236 * C11948) *
              C89137 * C89299 +
          (((C100 * C107 - C89 * C114 + C102 * C108 - C90 * C116 + C104 * C109 -
             C91 * C118) *
                C263 +
            (C100 * C566 - C89 * C572 + C102 * C567 - C90 * C573 + C104 * C568 -
             C91 * C574) *
                C89247) *
               C89236 * C89337 +
           ((C89 * C1732 - C100 * C1723 + C90 * C1730 - C102 * C1722 +
             C91 * C1742 - C104 * C1728) *
                C263 +
            (C89 * C2339 - C100 * C2331 + C90 * C2340 - C102 * C2332 +
             C91 * C2344 - C104 * C2336) *
                C89247) *
               C89236 * C89338 +
           ((C100 * C1726 - C89 * C1738 + C102 * C1727 - C90 * C1740 +
             C104 * C1729 - C91 * C1744) *
                C263 +
            (C100 * C2334 - C89 * C2342 + C102 * C2335 - C90 * C2343 +
             C104 * C2337 - C91 * C2345) *
                C89247) *
               C89236 * C11948) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C263 +
             (C89093 * C571 - C13261 * C565) * C89247) *
                C13258 +
            ((C14060 - C14061) * C263 + (C14328 - C14329) * C89247) * C13259 +
            C14346 * C13260) *
               C89337 +
           (((C13261 * C1724 - C89093 * C1734) * C263 +
             (C13261 * C2330 - C89093 * C2338) * C89247) *
                C13258 +
            ((C17042 - C17043) * C263 + (C17366 - C17367) * C89247) * C13259 +
            C21613 * C13260) *
               C89338 +
           (((C89093 * C1736 - C13261 * C1725) * C263 +
             (C89093 * C2341 - C13261 * C2333) * C89247) *
                C13258 +
            ((C19096 - C19097) * C263 + (C19334 - C19335) * C89247) * C13259 +
            ((C19100 - C19101) * C263 + (C19336 - C19337) * C89247) * C13260) *
               C11948) *
              C89137 * C89299 +
          ((((C13261 * C107 - C89093 * C114) * C263 +
             (C13261 * C566 - C89093 * C572) * C89247) *
                C13258 +
            ((C14072 - C14073) * C263 + (C14335 - C14336) * C89247) * C13259 +
            C14347 * C13260) *
               C89337 +
           (((C89093 * C1732 - C13261 * C1723) * C263 +
             (C89093 * C2339 - C13261 * C2331) * C89247) *
                C13258 +
            ((C17050 - C17051) * C263 + (C17370 - C17371) * C89247) * C13259 +
            ((C17054 - C17055) * C263 + (C17372 - C17373) * C89247) * C13260) *
               C89338 +
           (((C13261 * C1726 - C89093 * C1738) * C263 +
             (C13261 * C2334 - C89093 * C2342) * C89247) *
                C13258 +
            ((C13261 * C6248 - C89093 * C6252) * C263 +
             (C13261 * C6728 - C89093 * C6731) * C89247) *
                C13259 +
            ((C13261 * C14602 - C89093 * C14605) * C263 +
             (C13261 * C15070 - C89093 * C15072) * C89247) *
                C13260) *
               C11948) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q));
    d2eezy[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C263 +
             (C89236 * C627 - C180 * C565) * C89247) *
                C89 +
            ((C194 - C195) * C263 + (C634 - C635) * C89247) * C90 +
            C648 * C91) *
               C89337 +
           (((C180 * C1724 - C89236 * C1828) * C263 +
             (C180 * C2330 - C89236 * C2420) * C89247) *
                C89 +
            ((C1845 - C1846) * C263 + (C2429 - C2430) * C89247) * C90 +
            C3916 * C91) *
               C89338 +
           (((C89236 * C1831 - C180 * C1725) * C263 +
             (C89236 * C2423 - C180 * C2333) * C89247) *
                C89 +
            ((C1853 - C1854) * C263 + (C2433 - C2434) * C89247) * C90 +
            ((C1857 - C1858) * C263 + (C2435 - C2436) * C89247) * C91) *
               C11948) *
              C89137 * C89299 +
          ((((C195 - C194) * C263 + (C635 - C634) * C89247) * C89 +
            ((C199 - C198) * C263 + (C638 - C637) * C89247) * C90 +
            C649 * C91) *
               C89337 +
           (((C1846 - C1845) * C263 + (C2430 - C2429) * C89247) * C89 +
            ((C1850 - C1849) * C263 + (C2432 - C2431) * C89247) * C90 +
            ((C3435 - C3436) * C263 + (C3913 - C3914) * C89247) * C91) *
               C89338 +
           (((C1854 - C1853) * C263 + (C2434 - C2433) * C89247) * C89 +
            ((C1858 - C1857) * C263 + (C2436 - C2435) * C89247) * C90 +
            ((C180 * C1729 - C89236 * C1835) * C263 +
             (C180 * C2337 - C89236 * C2427) * C89247) *
                C91) *
               C11948) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
             C13260 * C926 - C13315 * C820) *
                C263 +
            (C13258 * C627 - C13313 * C565 + C13259 * C1515 - C13314 * C1425 +
             C13260 * C1518 - C13315 * C1428) *
                C89247) *
               C89093 * C89337 +
           ((C13313 * C1724 - C13258 * C1828 + C13314 * C4097 - C13259 * C4211 +
             C13315 * C8516 - C13260 * C8600) *
                C263 +
            (C13313 * C2330 - C13258 * C2420 + C13314 * C4767 - C13259 * C4873 +
             C13315 * C8994 - C13260 * C9074) *
                C89247) *
               C89093 * C89338 +
           ((C13258 * C1831 - C13313 * C1725 + C13259 * C6333 - C13314 * C6249 +
             C13260 * C14683 - C13315 * C14601) *
                C263 +
            (C13258 * C2423 - C13313 * C2333 + C13259 * C6807 - C13314 * C6727 +
             C13260 * C15147 - C13315 * C15069) *
                C89247) *
               C89093 * C11948) *
              C89137 * C89299 +
          (((C13313 * C107 - C13258 * C182 + C13314 * C818 - C13259 * C924 +
             C13315 * C821 - C13260 * C927) *
                C263 +
            (C13313 * C566 - C13258 * C628 + C13314 * C1426 - C13259 * C1516 +
             C13315 * C1429 - C13260 * C1519) *
                C89247) *
               C89093 * C89337 +
           ((C13258 * C1829 - C13313 * C1723 + C13259 * C4212 - C13314 * C4098 +
             C13260 * C8601 - C13315 * C8515) *
                C263 +
            (C13258 * C2421 - C13313 * C2331 + C13259 * C4874 - C13314 * C4768 +
             C13260 * C9075 - C13315 * C8995) *
                C89247) *
               C89093 * C89338 +
           ((C13313 * C1726 - C13258 * C1832 + C13314 * C6248 - C13259 * C6334 +
             C13315 * C14602 - C13260 * C14684) *
                C263 +
            (C13313 * C2334 - C13258 * C2424 + C13314 * C6728 - C13259 * C6808 +
             C13315 * C15070 - C13260 * C15148) *
                C89247) *
               C89093 * C11948) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q));
    d2eezz[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C89236 *
                C89 +
            C735 * C90 + C736 * C91) *
               C89337 -
           (C2547 * C91 + C2548 * C90 +
            (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
                C89236 * C89) *
               C89338 +
           ((C263 * C1937 - C699 * C1725 - C263 * C2333 + C89247 * C2513) *
                C89236 * C89 +
            C2549 * C90 + C2550 * C91) *
               C11948) *
              C89137 * C89299 +
          ((C2548 * C89 + C2547 * C90 + C3999 * C91) * C89338 -
           (C737 * C91 + C736 * C90 + C735 * C89) * C89337 -
           ((C263 * C1941 - C699 * C1729 - C263 * C2337 + C89247 * C2517) *
                C89236 * C91 +
            C2550 * C90 + C2549 * C89) *
               C11948) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C13258 +
            C14524 * C13259 + C14525 * C13260) *
               C89093 * C89337 -
           (C17592 * C13260 + C17593 * C13259 +
            (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
                C13258) *
               C89093 * C89338 +
           ((C263 * C1937 - C699 * C1725 - C263 * C2333 + C89247 * C2513) *
                C13258 +
            C19500 * C13259 + C19501 * C13260) *
               C89093 * C11948) *
              C89137 * C89299 +
          ((C2544 * C13258 + C4996 * C13259 + C17594 * C13260) * C89093 *
               C89338 -
           (C1640 * C13260 + C1639 * C13259 + C731 * C13258) * C89093 * C89337 -
           ((C263 * C14762 - C699 * C14602 - C263 * C15070 + C89247 * C15224) *
                C13260 +
            (C263 * C6414 - C699 * C6248 - C263 * C6728 + C89247 * C6885) *
                C13259 +
            C2545 * C13258) *
               C89093 * C11948) *
              C89137 * C89124)) /
            (p * q * std::sqrt(p + q));
    d2eexx[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C112 - C101 * C106 - C100 * C113 + C89 * C124 + C102 * C114 -
            C103 * C107 - C102 * C115 + C90 * C125 + C104 * C116 - C105 * C108 -
            C104 * C117 + C91 * C126) *
               C89247 * C89236 * C9228 -
           (C104 * C1730 - C105 * C1722 - C104 * C1731 + C91 * C1746 +
            C102 * C1732 - C103 * C1723 - C102 * C1733 + C90 * C1747 +
            C100 * C1734 - C101 * C1724 - C100 * C1735 + C89 * C1748) *
               C89247 * C89236 * C89217) *
              C89137 * C5075 +
          ((C100 * C1732 - C101 * C1723 - C100 * C1733 + C89 * C1747 +
            C102 * C1730 - C103 * C1722 - C102 * C1731 + C90 * C1746 +
            C104 * C1742 - C105 * C1728 - C104 * C1743 + C91 * C1752) *
               C89247 * C89236 * C89217 -
           (C104 * C118 - C105 * C109 - C104 * C119 + C91 * C127 + C102 * C116 -
            C103 * C108 - C102 * C117 + C90 * C126 + C100 * C114 - C101 * C107 -
            C100 * C115 + C89 * C125) *
               C89247 * C89236 * C9228) *
              C89137 * C5076 +
          ((C100 * C116 - C101 * C108 - C100 * C117 + C89 * C126 + C102 * C118 -
            C103 * C109 - C102 * C119 + C90 * C127 + C104 * C120 - C105 * C110 -
            C104 * C121 + C91 * C128) *
               C89247 * C89236 * C9228 -
           (C104 * C3353 - C105 * C3352 - C104 * C3354 + C91 * C3355 +
            C102 * C1742 - C103 * C1728 - C102 * C1743 + C90 * C1752 +
            C100 * C1730 - C101 * C1722 - C100 * C1731 + C89 * C1746) *
               C89247 * C89236 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C100 * C112 - C101 * C106 - C100 * C113 + C89 * C124 + C102 * C114 -
            C103 * C107 - C102 * C115 + C90 * C125 + C104 * C116 - C105 * C108 -
            C104 * C117 + C91 * C126) *
               C89247 * C89236 * C9228 -
           (C104 * C1730 - C105 * C1722 - C104 * C1731 + C91 * C1746 +
            C102 * C1732 - C103 * C1723 - C102 * C1733 + C90 * C1747 +
            C100 * C1734 - C101 * C1724 - C100 * C1735 + C89 * C1748) *
               C89247 * C89236 * C89217) *
              C812 +
          ((C100 * C4101 - C101 * C4097 - C100 * C4102 + C89 * C4109 +
            C102 * C4103 - C103 * C4098 - C102 * C4104 + C90 * C4110 +
            C104 * C4105 - C105 * C4099 - C104 * C4106 + C91 * C4111) *
               C89247 * C89236 * C89217 -
           (C104 * C825 - C105 * C817 - C104 * C826 + C91 * C841 + C102 * C827 -
            C103 * C818 - C102 * C828 + C90 * C842 + C100 * C829 - C101 * C819 -
            C100 * C830 + C89 * C843) *
               C89247 * C89236 * C9228) *
              C813 +
          ((C100 * C831 - C101 * C820 - C100 * C832 + C89 * C844 + C102 * C833 -
            C103 * C821 - C102 * C834 + C90 * C845 + C104 * C835 - C105 * C822 -
            C104 * C836 + C91 * C846) *
               C89247 * C89236 * C9228 -
           (C104 * C8517 - C105 * C8514 - C104 * C8518 + C91 * C8523 +
            C102 * C8519 - C103 * C8515 - C102 * C8520 + C90 * C8524 +
            C100 * C8521 - C101 * C8516 - C100 * C8522 + C89 * C8525) *
               C89247 * C89236 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                C89247 * C13258 +
            C13794 * C13259 + C13795 * C13260) *
               C9228 -
           (C16720 * C13260 + C16721 * C13259 +
            (C13261 * C1734 - C13262 * C1724 - C13261 * C1735 +
             C89093 * C1748) *
                C89247 * C13258) *
               C89217) *
              C89137 * C5075 +
          (((C13261 * C1732 - C13262 * C1723 - C13261 * C1733 +
             C89093 * C1747) *
                C89247 * C13258 +
            C16722 * C13259 + C16723 * C13260) *
               C89217 -
           (C13798 * C13260 + C13797 * C13259 +
            (C13261 * C114 - C13262 * C107 - C13261 * C115 + C89093 * C125) *
                C89247 * C13258) *
               C9228) *
              C89137 * C5076 +
          (((C13261 * C116 - C13262 * C108 - C13261 * C117 + C89093 * C126) *
                C89247 * C13258 +
            C15314 * C13259 + C15315 * C13260) *
               C9228 -
           ((C13261 * C8517 - C13262 * C8514 - C13261 * C8518 +
             C89093 * C8523) *
                C89247 * C13260 +
            (C13261 * C4105 - C13262 * C4099 - C13261 * C4106 +
             C89093 * C4111) *
                C89247 * C13259 +
            (C13261 * C1730 - C13262 * C1722 - C13261 * C1731 +
             C89093 * C1746) *
                C89247 * C13258) *
               C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13261 * C112 - C13262 * C106 - C13261 * C113 + C89093 * C124) *
                C89247 * C13258 +
            C13794 * C13259 + C13795 * C13260) *
               C9228 -
           (C16720 * C13260 + C16721 * C13259 +
            (C13261 * C1734 - C13262 * C1724 - C13261 * C1735 +
             C89093 * C1748) *
                C89247 * C13258) *
               C89217) *
              C812 +
          ((C16721 * C13258 + C16720 * C13259 + C21135 * C13260) * C89217 -
           (C13796 * C13260 + C13795 * C13259 + C13794 * C13258) * C9228) *
              C813 +
          ((C13795 * C13258 + C13796 * C13259 + C18322 * C13260) * C9228 -
           ((C13261 * C21124 - C13262 * C21123 - C13261 * C21125 +
             C89093 * C21126) *
                C89247 * C13260 +
            C21135 * C13259 + C16720 * C13258) *
               C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eexy[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C89236 * C181 - C180 * C106) * C100 +
            (C89236 * C187 - C180 * C113) * C89 + (C194 - C195) * C102 +
            (C196 - C197) * C90 + C210 * C104 + C211 * C91) *
               C89247 * C9228 +
           ((C180 * C1724 - C89236 * C1828) * C100 +
            (C180 * C1735 - C89236 * C1836) * C89 + (C1845 - C1846) * C102 +
            (C1847 - C1848) * C90 + C3433 * C104 + C3434 * C91) *
               C89247 * C89217) *
              C89137 * C5075 +
          (((C195 - C194) * C100 + (C197 - C196) * C89 + (C199 - C198) * C102 +
            (C201 - C200) * C90 + C212 * C104 + C213 * C91) *
               C89247 * C9228 +
           ((C1846 - C1845) * C100 + (C1848 - C1847) * C89 +
            (C1850 - C1849) * C102 + (C1852 - C1851) * C90 +
            (C3435 - C3436) * C104 + (C3437 - C3438) * C91) *
               C89247 * C89217) *
              C89137 * C5076 +
          ((C210 * C100 + C211 * C89 + (C203 - C202) * C102 +
            (C205 - C204) * C90 + (C206 - C207) * C104 + (C208 - C209) * C91) *
               C89247 * C9228 +
           (C3433 * C100 + C3434 * C89 + (C3436 - C3435) * C102 +
            (C3438 - C3437) * C90 + (C180 * C3352 - C89236 * C3430) * C104 +
            (C180 * C3354 - C89236 * C3431) * C91) *
               C89247 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C89236 * C181 - C180 * C106) * C100 +
            (C89236 * C187 - C180 * C113) * C89 + (C194 - C195) * C102 +
            (C196 - C197) * C90 + C210 * C104 + C211 * C91) *
               C89247 * C9228 +
           ((C180 * C1724 - C89236 * C1828) * C100 +
            (C180 * C1735 - C89236 * C1836) * C89 + (C1845 - C1846) * C102 +
            (C1847 - C1848) * C90 + C3433 * C104 + C3434 * C91) *
               C89247 * C89217) *
              C812 +
          (((C180 * C819 - C89236 * C923) * C100 +
            (C180 * C830 - C89236 * C931) * C89 + (C940 - C941) * C102 +
            (C942 - C943) * C90 + C2710 * C104 + C2711 * C91) *
               C89247 * C9228 +
           ((C89236 * C4211 - C180 * C4097) * C100 +
            (C89236 * C4215 - C180 * C4102) * C89 + (C4220 - C4221) * C102 +
            (C4222 - C4223) * C90 + (C4224 - C4225) * C104 +
            (C4226 - C4227) * C91) *
               C89247 * C89217) *
              C813 +
          (((C89236 * C926 - C180 * C820) * C100 +
            (C89236 * C934 - C180 * C832) * C89 + (C948 - C949) * C102 +
            (C950 - C951) * C90 + (C952 - C953) * C104 + (C954 - C955) * C91) *
               C89247 * C9228 +
           ((C180 * C8516 - C89236 * C8600) * C100 +
            (C180 * C8522 - C89236 * C8603) * C89 +
            (C180 * C8515 - C89236 * C8601) * C102 +
            (C180 * C8520 - C89236 * C8604) * C90 +
            (C180 * C8514 - C89236 * C8602) * C104 +
            (C180 * C8518 - C89236 * C8605) * C91) *
               C89247 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
             C13260 * C926 - C13315 * C820) *
                C13261 +
            (C13258 * C187 - C13313 * C113 + C13259 * C931 - C13314 * C830 +
             C13260 * C934 - C13315 * C832) *
                C89093) *
               C89247 * C9228 +
           ((C13313 * C1724 - C13258 * C1828 + C13314 * C4097 - C13259 * C4211 +
             C13315 * C8516 - C13260 * C8600) *
                C13261 +
            (C13313 * C1735 - C13258 * C1836 + C13314 * C4102 - C13259 * C4215 +
             C13315 * C8522 - C13260 * C8603) *
                C89093) *
               C89247 * C89217) *
              C89137 * C5075 +
          (((C13313 * C107 - C13258 * C182 + C13314 * C818 - C13259 * C924 +
             C13315 * C821 - C13260 * C927) *
                C13261 +
            (C13313 * C115 - C13258 * C188 + C13314 * C828 - C13259 * C932 +
             C13315 * C834 - C13260 * C935) *
                C89093) *
               C89247 * C9228 +
           ((C13258 * C1829 - C13313 * C1723 + C13259 * C4212 - C13314 * C4098 +
             C13260 * C8601 - C13315 * C8515) *
                C13261 +
            (C13258 * C1837 - C13313 * C1733 + C13259 * C4216 - C13314 * C4104 +
             C13260 * C8604 - C13315 * C8520) *
                C89093) *
               C89247 * C89217) *
              C89137 * C5076 +
          (((C13258 * C183 - C13313 * C108 + C13259 * C925 - C13314 * C817 +
             C13260 * C928 - C13315 * C822) *
                C13261 +
            (C13258 * C189 - C13313 * C117 + C13259 * C933 - C13314 * C826 +
             C13260 * C936 - C13315 * C836) *
                C89093) *
               C89247 * C9228 +
           ((C13313 * C1722 - C13258 * C1830 + C13314 * C4099 - C13259 * C4213 +
             C13315 * C8514 - C13260 * C8602) *
                C13261 +
            (C13313 * C1731 - C13258 * C1838 + C13314 * C4106 - C13259 * C4217 +
             C13315 * C8518 - C13260 * C8605) *
                C89093) *
               C89247 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
             C13260 * C926 - C13315 * C820) *
                C13261 +
            (C13258 * C187 - C13313 * C113 + C13259 * C931 - C13314 * C830 +
             C13260 * C934 - C13315 * C832) *
                C89093) *
               C89247 * C9228 +
           ((C13313 * C1724 - C13258 * C1828 + C13314 * C4097 - C13259 * C4211 +
             C13315 * C8516 - C13260 * C8600) *
                C13261 +
            (C13313 * C1735 - C13258 * C1836 + C13314 * C4102 - C13259 * C4215 +
             C13315 * C8522 - C13260 * C8603) *
                C89093) *
               C89247 * C89217) *
              C812 +
          (((C13313 * C819 - C13258 * C923 + C13314 * C820 - C13259 * C926 +
             C13315 * C5727 - C13260 * C5787) *
                C13261 +
            (C13313 * C830 - C13258 * C931 + C13314 * C832 - C13259 * C934 +
             C13315 * C5733 - C13260 * C5790) *
                C89093) *
               C89247 * C9228 +
           ((C13258 * C4211 - C13313 * C4097 + C13259 * C8600 - C13314 * C8516 +
             C13260 * C16821 - C13315 * C16683) *
                C13261 +
            (C13258 * C4215 - C13313 * C4102 + C13259 * C8603 - C13314 * C8522 +
             C13260 * C16823 - C13315 * C16686) *
                C89093) *
               C89247 * C89217) *
              C813 +
          (((C13258 * C926 - C13313 * C820 + C13259 * C5787 - C13314 * C5727 +
             C13260 * C13873 - C13315 * C13743) *
                C13261 +
            (C13258 * C934 - C13313 * C832 + C13259 * C5790 - C13314 * C5733 +
             C13260 * C13875 - C13315 * C13746) *
                C89093) *
               C89247 * C9228 +
           ((C13313 * C8516 - C13258 * C8600 + C13314 * C16683 -
             C13259 * C16821 + C13315 * C21123 - C13260 * C21209) *
                C13261 +
            (C13313 * C8522 - C13258 * C8603 + C13314 * C16686 -
             C13259 * C16823 + C13315 * C21125 - C13260 * C21210) *
                C89093) *
               C89247 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eexz[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C100 +
            (C89247 * C270 - C263 * C113) * C89 + (C277 - C278) * C102 +
            (C279 - C280) * C90 + C293 * C104 + C294 * C91) *
               C89236 * C9228 +
           ((C263 * C1724 - C89247 * C1934) * C100 +
            (C263 * C1735 - C89247 * C1942) * C89 + (C1951 - C1952) * C102 +
            (C1953 - C1954) * C90 + C3515 * C104 + C3516 * C91) *
               C89236 * C89217) *
              C89137 * C5075 +
          (((C278 - C277) * C100 + (C280 - C279) * C89 + (C282 - C281) * C102 +
            (C284 - C283) * C90 + C295 * C104 + C296 * C91) *
               C89236 * C9228 +
           ((C1952 - C1951) * C100 + (C1954 - C1953) * C89 +
            (C1956 - C1955) * C102 + (C1958 - C1957) * C90 +
            (C3517 - C3518) * C104 + (C3519 - C3520) * C91) *
               C89236 * C89217) *
              C89137 * C5076 +
          ((C293 * C100 + C294 * C89 + (C286 - C285) * C102 +
            (C288 - C287) * C90 + (C289 - C290) * C104 + (C291 - C292) * C91) *
               C89236 * C9228 +
           (C3515 * C100 + C3516 * C89 + (C3518 - C3517) * C102 +
            (C3520 - C3519) * C90 + (C263 * C3352 - C89247 * C3512) * C104 +
            (C263 * C3354 - C89247 * C3513) * C91) *
               C89236 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C100 +
            (C89247 * C270 - C263 * C113) * C89 + (C277 - C278) * C102 +
            (C279 - C280) * C90 + C293 * C104 + C294 * C91) *
               C89236 * C9228 +
           ((C263 * C1724 - C89247 * C1934) * C100 +
            (C263 * C1735 - C89247 * C1942) * C89 + (C1951 - C1952) * C102 +
            (C1953 - C1954) * C90 + C3515 * C104 + C3516 * C91) *
               C89236 * C89217) *
              C812 +
          (((C263 * C819 - C89247 * C1029) * C100 +
            (C263 * C830 - C89247 * C1037) * C89 + (C1046 - C1047) * C102 +
            (C1048 - C1049) * C90 + C2792 * C104 + C2793 * C91) *
               C89236 * C9228 +
           ((C89247 * C4325 - C263 * C4097) * C100 +
            (C89247 * C4329 - C263 * C4102) * C89 + (C4334 - C4335) * C102 +
            (C4336 - C4337) * C90 + (C4338 - C4339) * C104 +
            (C4340 - C4341) * C91) *
               C89236 * C89217) *
              C813 +
          (((C89247 * C1032 - C263 * C820) * C100 +
            (C89247 * C1040 - C263 * C832) * C89 + (C1054 - C1055) * C102 +
            (C1056 - C1057) * C90 + (C1058 - C1059) * C104 +
            (C1060 - C1061) * C91) *
               C89236 * C9228 +
           ((C263 * C8516 - C89247 * C8680) * C100 +
            (C263 * C8522 - C89247 * C8683) * C89 +
            (C263 * C8515 - C89247 * C8681) * C102 +
            (C263 * C8520 - C89247 * C8684) * C90 +
            (C263 * C8514 - C89247 * C8682) * C104 +
            (C263 * C8518 - C89247 * C8685) * C91) *
               C89236 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C13261 +
             (C89247 * C270 - C263 * C113) * C89093) *
                C13258 +
            ((C13956 - C13957) * C13261 + (C13958 - C13959) * C89093) * C13259 +
            C13981 * C13260) *
               C9228 +
           (((C263 * C1724 - C89247 * C1934) * C13261 +
             (C263 * C1735 - C89247 * C1942) * C89093) *
                C13258 +
            ((C16928 - C16929) * C13261 + (C16930 - C16931) * C89093) * C13259 +
            C21296 * C13260) *
               C89217) *
              C89137 * C5075 +
          ((((C278 - C277) * C13261 + (C280 - C279) * C89093) * C13258 +
            ((C1046 - C1047) * C13261 + (C1048 - C1049) * C89093) * C13259 +
            C13980 * C13260) *
               C9228 +
           (((C1952 - C1951) * C13261 + (C1954 - C1953) * C89093) * C13258 +
            ((C4334 - C4335) * C13261 + (C4336 - C4337) * C89093) * C13259 +
            ((C16936 - C16937) * C13261 + (C16938 - C16939) * C89093) *
                C13260) *
               C89217) *
              C89137 * C5076 +
          (((C293 * C13261 + C294 * C89093) * C13258 +
            ((C1051 - C1050) * C13261 + (C1053 - C1052) * C89093) * C13259 +
            ((C1058 - C1059) * C13261 + (C1060 - C1061) * C89093) * C13260) *
               C9228 +
           ((C3515 * C13261 + C3516 * C89093) * C13258 +
            ((C4339 - C4338) * C13261 + (C4341 - C4340) * C89093) * C13259 +
            ((C263 * C8514 - C89247 * C8682) * C13261 +
             (C263 * C8518 - C89247 * C8685) * C89093) *
                C13260) *
               C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C13261 +
             (C89247 * C270 - C263 * C113) * C89093) *
                C13258 +
            ((C13956 - C13957) * C13261 + (C13958 - C13959) * C89093) * C13259 +
            C13981 * C13260) *
               C9228 +
           (((C263 * C1724 - C89247 * C1934) * C13261 +
             (C263 * C1735 - C89247 * C1942) * C89093) *
                C13258 +
            ((C16928 - C16929) * C13261 + (C16930 - C16931) * C89093) * C13259 +
            C21296 * C13260) *
               C89217) *
              C812 +
          ((((C13957 - C13956) * C13261 + (C13959 - C13958) * C89093) * C13258 +
            ((C13961 - C13960) * C13261 + (C13963 - C13962) * C89093) * C13259 +
            C18435 * C13260) *
               C9228 +
           (((C16929 - C16928) * C13261 + (C16931 - C16930) * C89093) * C13258 +
            ((C16933 - C16932) * C13261 + (C16935 - C16934) * C89093) * C13259 +
            ((C21290 - C21291) * C13261 + (C21292 - C21293) * C89093) *
                C13260) *
               C89217) *
              C813 +
          ((C13981 * C13258 +
            ((C13965 - C13964) * C13261 + (C13967 - C13966) * C89093) * C13259 +
            ((C18429 - C18430) * C13261 + (C18431 - C18432) * C89093) *
                C13260) *
               C9228 +
           (C21296 * C13258 +
            ((C21291 - C21290) * C13261 + (C21293 - C21292) * C89093) * C13259 +
            ((C263 * C21123 - C89247 * C21285) * C13261 +
             (C263 * C21125 - C89247 * C21286) * C89093) *
                C13260) *
               C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eeyx[74] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 +
                       C91 * C116 - C104 * C108) *
                          C180 +
                      (C89 * C352 - C100 * C346 + C90 * C353 - C102 * C347 +
                       C91 * C354 - C104 * C348) *
                          C89236) *
                         C89247 * C9228 +
                     ((C100 * C1724 - C89 * C1734 + C102 * C1723 - C90 * C1732 +
                       C104 * C1722 - C91 * C1730) *
                          C180 +
                      (C100 * C2040 - C89 * C2048 + C102 * C2041 - C90 * C2049 +
                       C104 * C2042 - C91 * C2050) *
                          C89236) *
                         C89247 * C89217) *
                        C89137 * C5075 +
                    (((C100 * C107 - C89 * C114 + C102 * C108 - C90 * C116 +
                       C104 * C109 - C91 * C118) *
                          C180 +
                      (C100 * C347 - C89 * C353 + C102 * C348 - C90 * C354 +
                       C104 * C349 - C91 * C355) *
                          C89236) *
                         C89247 * C9228 +
                     ((C89 * C1732 - C100 * C1723 + C90 * C1730 - C102 * C1722 +
                       C91 * C1742 - C104 * C1728) *
                          C180 +
                      (C89 * C2049 - C100 * C2041 + C90 * C2050 - C102 * C2042 +
                       C91 * C2054 - C104 * C2046) *
                          C89236) *
                         C89247 * C89217) *
                        C89137 * C5076 +
                    (((C89 * C116 - C100 * C108 + C90 * C118 - C102 * C109 +
                       C91 * C120 - C104 * C110) *
                          C180 +
                      (C89 * C354 - C100 * C348 + C90 * C355 - C102 * C349 +
                       C91 * C356 - C104 * C350) *
                          C89236) *
                         C89247 * C9228 +
                     ((C100 * C1722 - C89 * C1730 + C102 * C1728 - C90 * C1742 +
                       C104 * C3352 - C91 * C3353) *
                          C180 +
                      (C100 * C2042 - C89 * C2050 + C102 * C2046 - C90 * C2054 +
                       C104 * C3594 - C91 * C3595) *
                          C89236) *
                         C89247 * C89217) *
                        C89137 * C5077)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 +
                       C91 * C116 - C104 * C108) *
                          C180 +
                      (C89 * C352 - C100 * C346 + C90 * C353 - C102 * C347 +
                       C91 * C354 - C104 * C348) *
                          C89236) *
                         C89247 * C9228 +
                     ((C100 * C1724 - C89 * C1734 + C102 * C1723 - C90 * C1732 +
                       C104 * C1722 - C91 * C1730) *
                          C180 +
                      (C100 * C2040 - C89 * C2048 + C102 * C2041 - C90 * C2049 +
                       C104 * C2042 - C91 * C2050) *
                          C89236) *
                         C89247 * C89217) *
                        C812 +
                    (((C100 * C819 - C89 * C829 + C102 * C818 - C90 * C827 +
                       C104 * C817 - C91 * C825) *
                          C180 +
                      (C100 * C1135 - C89 * C1143 + C102 * C1136 - C90 * C1144 +
                       C104 * C1137 - C91 * C1145) *
                          C89236) *
                         C89247 * C9228 +
                     ((C89 * C4101 - C100 * C4097 + C90 * C4103 - C102 * C4098 +
                       C91 * C4105 - C104 * C4099) *
                          C180 +
                      (C89 * C4443 - C100 * C4439 + C90 * C4444 - C102 * C4440 +
                       C91 * C4445 - C104 * C4441) *
                          C89236) *
                         C89247 * C89217) *
                        C813 +
                    (((C89 * C831 - C100 * C820 + C90 * C833 - C102 * C821 +
                       C91 * C835 - C104 * C822) *
                          C180 +
                      (C89 * C1146 - C100 * C1138 + C90 * C1147 - C102 * C1139 +
                       C91 * C1148 - C104 * C1140) *
                          C89236) *
                         C89247 * C9228 +
                     ((C100 * C8516 - C89 * C8521 + C102 * C8515 - C90 * C8519 +
                       C104 * C8514 - C91 * C8517) *
                          C180 +
                      (C100 * C8760 - C89 * C8763 + C102 * C8761 - C90 * C8764 +
                       C104 * C8762 - C91 * C8765) *
                          C89236) *
                         C89247 * C89217) *
                        C814) *
                   C89118) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C89093 * C112 - C13261 * C106) * C13313 +
                      (C89093 * C352 - C13261 * C346) * C13258 +
                      (C14060 - C14061) * C13314 + (C14062 - C14063) * C13259 +
                      C14084 * C13315 + C14085 * C13260) *
                         C89247 * C9228 +
                     ((C13261 * C1724 - C89093 * C1734) * C13313 +
                      (C13261 * C2040 - C89093 * C2048) * C13258 +
                      (C17042 - C17043) * C13314 + (C17044 - C17045) * C13259 +
                      C21373 * C13315 + C21374 * C13260) *
                         C89247 * C89217) *
                        C89137 * C5075 +
                    (((C13261 * C107 - C89093 * C114) * C13313 +
                      (C13261 * C347 - C89093 * C353) * C13258 +
                      (C14072 - C14073) * C13314 + (C14074 - C14075) * C13259 +
                      C14086 * C13315 + C14087 * C13260) *
                         C89247 * C9228 +
                     ((C89093 * C1732 - C13261 * C1723) * C13313 +
                      (C89093 * C2049 - C13261 * C2041) * C13258 +
                      (C17050 - C17051) * C13314 + (C17052 - C17053) * C13259 +
                      (C17054 - C17055) * C13315 + (C17056 - C17057) * C13260) *
                         C89247 * C89217) *
                        C89137 * C5076 +
                    (((C89093 * C116 - C13261 * C108) * C13313 +
                      (C89093 * C354 - C13261 * C348) * C13258 +
                      (C15538 - C15539) * C13314 + (C15540 - C15541) * C13259 +
                      (C15542 - C15543) * C13315 + (C15544 - C15545) * C13260) *
                         C89247 * C9228 +
                     ((C13261 * C1722 - C89093 * C1730) * C13313 +
                      (C13261 * C2042 - C89093 * C2050) * C13258 +
                      (C13261 * C4099 - C89093 * C4105) * C13314 +
                      (C13261 * C4441 - C89093 * C4445) * C13259 +
                      (C13261 * C8514 - C89093 * C8517) * C13315 +
                      (C13261 * C8762 - C89093 * C8765) * C13260) *
                         C89247 * C89217) *
                        C89137 * C5077)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C89093 * C112 - C13261 * C106) * C13313 +
                      (C89093 * C352 - C13261 * C346) * C13258 +
                      (C14060 - C14061) * C13314 + (C14062 - C14063) * C13259 +
                      C14084 * C13315 + C14085 * C13260) *
                         C89247 * C9228 +
                     ((C13261 * C1724 - C89093 * C1734) * C13313 +
                      (C13261 * C2040 - C89093 * C2048) * C13258 +
                      (C17042 - C17043) * C13314 + (C17044 - C17045) * C13259 +
                      C21373 * C13315 + C21374 * C13260) *
                         C89247 * C89217) *
                        C812 +
                    (((C14061 - C14060) * C13313 + (C14063 - C14062) * C13258 +
                      (C14065 - C14064) * C13314 + (C14067 - C14066) * C13259 +
                      C18488 * C13315 + C18489 * C13260) *
                         C89247 * C9228 +
                     ((C17043 - C17042) * C13313 + (C17045 - C17044) * C13258 +
                      (C17047 - C17046) * C13314 + (C17049 - C17048) * C13259 +
                      (C21375 - C21376) * C13315 + (C21377 - C21378) * C13260) *
                         C89247 * C89217) *
                        C813 +
                    ((C14084 * C13313 + C14085 * C13258 +
                      (C14069 - C14068) * C13314 + (C14071 - C14070) * C13259 +
                      (C18490 - C18491) * C13315 + (C18492 - C18493) * C13260) *
                         C89247 * C9228 +
                     (C21373 * C13313 + C21374 * C13258 +
                      (C21376 - C21375) * C13314 + (C21378 - C21377) * C13259 +
                      (C13261 * C21123 - C89093 * C21124) * C13315 +
                      (C13261 * C21370 - C89093 * C21371) * C13260) *
                         C89247 * C89217) *
                        C814) *
                   C89118) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C89 +
            C440 * C90 + C441 * C91) *
               C89247 * C9228 -
           (C2163 * C91 + C2164 * C90 +
            (C180 * C1828 - C408 * C1724 - C180 * C2040 + C89236 * C2132) *
                C89) *
               C89247 * C89217) *
              C89137 * C5075 +
          ((C2164 * C89 + C2163 * C90 + C3678 * C91) * C89247 * C89217 -
           (C442 * C91 + C441 * C90 + C440 * C89) * C89247 * C9228) *
              C89137 * C5076 +
          ((C441 * C89 + C442 * C90 + C443 * C91) * C89247 * C9228 -
           ((C180 * C3430 - C408 * C3352 - C180 * C3594 + C89236 * C3670) *
                C91 +
            C3678 * C90 + C2163 * C89) *
               C89247 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C180 * C181 - C408 * C106 - C180 * C346 + C89236 * C409) * C89 +
            C440 * C90 + C441 * C91) *
               C89247 * C9228 -
           (C2163 * C91 + C2164 * C90 +
            (C180 * C1828 - C408 * C1724 - C180 * C2040 + C89236 * C2132) *
                C89) *
               C89247 * C89217) *
              C812 +
          (((C180 * C4211 - C408 * C4097 - C180 * C4439 + C89236 * C4545) *
                C89 +
            C4562 * C90 + C4563 * C91) *
               C89247 * C89217 -
           (C1258 * C91 + C1259 * C90 +
            (C180 * C923 - C408 * C819 - C180 * C1135 + C89236 * C1227) * C89) *
               C89247 * C9228) *
              C813 +
          (((C180 * C926 - C408 * C820 - C180 * C1138 + C89236 * C1228) * C89 +
            C1260 * C90 + C1261 * C91) *
               C89247 * C9228 -
           ((C180 * C8602 - C408 * C8514 - C180 * C8762 + C89236 * C8840) *
                C91 +
            (C180 * C8601 - C408 * C8515 - C180 * C8761 + C89236 * C8841) *
                C90 +
            (C180 * C8600 - C408 * C8516 - C180 * C8760 + C89236 * C8842) *
                C89) *
               C89247 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13313 * C181 - C13466 * C106 - C13313 * C346 + C13258 * C409 +
            C13314 * C923 - C13467 * C819 - C13314 * C1135 + C13259 * C1227 +
            C13315 * C926 - C13468 * C820 - C13315 * C1138 + C13260 * C1228) *
               C89093 * C89247 * C9228 -
           (C13315 * C8600 - C13468 * C8516 - C13315 * C8760 + C13260 * C8842 +
            C13314 * C4211 - C13467 * C4097 - C13314 * C4439 + C13259 * C4545 +
            C13313 * C1828 - C13466 * C1724 - C13313 * C2040 + C13258 * C2132) *
               C89093 * C89247 * C89217) *
              C89137 * C5075 +
          ((C13313 * C1829 - C13466 * C1723 - C13313 * C2041 + C13258 * C2131 +
            C13314 * C4212 - C13467 * C4098 - C13314 * C4440 + C13259 * C4546 +
            C13315 * C8601 - C13468 * C8515 - C13315 * C8761 + C13260 * C8841) *
               C89093 * C89247 * C89217 -
           (C13315 * C927 - C13468 * C821 - C13315 * C1139 + C13260 * C1229 +
            C13314 * C924 - C13467 * C818 - C13314 * C1136 + C13259 * C1226 +
            C13313 * C182 - C13466 * C107 - C13313 * C347 + C13258 * C410) *
               C89093 * C89247 * C9228) *
              C89137 * C5076 +
          ((C13313 * C183 - C13466 * C108 - C13313 * C348 + C13258 * C411 +
            C13314 * C925 - C13467 * C817 - C13314 * C1137 + C13259 * C1225 +
            C13315 * C928 - C13468 * C822 - C13315 * C1140 + C13260 * C1230) *
               C89093 * C89247 * C9228 -
           (C13315 * C8602 - C13468 * C8514 - C13315 * C8762 + C13260 * C8840 +
            C13314 * C4213 - C13467 * C4099 - C13314 * C4441 + C13259 * C4547 +
            C13313 * C1830 - C13466 * C1722 - C13313 * C2042 + C13258 * C2130) *
               C89093 * C89247 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13313 * C181 - C13466 * C106 - C13313 * C346 + C13258 * C409 +
            C13314 * C923 - C13467 * C819 - C13314 * C1135 + C13259 * C1227 +
            C13315 * C926 - C13468 * C820 - C13315 * C1138 + C13260 * C1228) *
               C89093 * C89247 * C9228 -
           (C13315 * C8600 - C13468 * C8516 - C13315 * C8760 + C13260 * C8842 +
            C13314 * C4211 - C13467 * C4097 - C13314 * C4439 + C13259 * C4545 +
            C13313 * C1828 - C13466 * C1724 - C13313 * C2040 + C13258 * C2132) *
               C89093 * C89247 * C89217) *
              C812 +
          ((C13313 * C4211 - C13466 * C4097 - C13313 * C4439 + C13258 * C4545 +
            C13314 * C8600 - C13467 * C8516 - C13314 * C8760 + C13259 * C8842 +
            C13315 * C16821 - C13468 * C16683 - C13315 * C17037 +
            C13260 * C17155) *
               C89093 * C89247 * C89217 -
           (C13315 * C5787 - C13468 * C5727 - C13315 * C5899 + C13260 * C5957 +
            C13314 * C926 - C13467 * C820 - C13314 * C1138 + C13259 * C1228 +
            C13313 * C923 - C13466 * C819 - C13313 * C1135 + C13258 * C1227) *
               C89093 * C89247 * C9228) *
              C813 +
          ((C13313 * C926 - C13466 * C820 - C13313 * C1138 + C13258 * C1228 +
            C13314 * C5787 - C13467 * C5727 - C13314 * C5899 + C13259 * C5957 +
            C13315 * C13873 - C13468 * C13743 - C13315 * C14055 +
            C13260 * C14161) *
               C89093 * C89247 * C9228 -
           (C13315 * C21209 - C13468 * C21123 - C13315 * C21370 +
            C13260 * C21452 + C13314 * C16821 - C13467 * C16683 -
            C13314 * C17037 + C13259 * C17155 + C13313 * C8600 -
            C13466 * C8516 - C13313 * C8760 + C13258 * C8842) *
               C89093 * C89247 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eeyz[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C180 +
             (C89247 * C493 - C263 * C346) * C89236) *
                C89 +
            ((C277 - C278) * C180 + (C500 - C501) * C89236) * C90 +
            C514 * C91) *
               C9228 +
           (((C263 * C1724 - C89247 * C1934) * C180 +
             (C263 * C2040 - C89247 * C2240) * C89236) *
                C89 +
            ((C1951 - C1952) * C180 + (C2249 - C2250) * C89236) * C90 +
            C3759 * C91) *
               C89217) *
              C89137 * C5075 +
          ((((C278 - C277) * C180 + (C501 - C500) * C89236) * C89 +
            ((C282 - C281) * C180 + (C504 - C503) * C89236) * C90 +
            C515 * C91) *
               C9228 +
           (((C1952 - C1951) * C180 + (C2250 - C2249) * C89236) * C89 +
            ((C1956 - C1955) * C180 + (C2252 - C2251) * C89236) * C90 +
            ((C3517 - C3518) * C180 + (C3756 - C3757) * C89236) * C91) *
               C89217) *
              C89137 * C5076 +
          ((C514 * C89 + ((C286 - C285) * C180 + (C507 - C506) * C89236) * C90 +
            ((C289 - C290) * C180 + (C508 - C509) * C89236) * C91) *
               C9228 +
           (C3759 * C89 +
            ((C3518 - C3517) * C180 + (C3757 - C3756) * C89236) * C90 +
            ((C263 * C3352 - C89247 * C3512) * C180 +
             (C263 * C3594 - C89247 * C3752) * C89236) *
                C91) *
               C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C89247 * C264 - C263 * C106) * C180 +
             (C89247 * C493 - C263 * C346) * C89236) *
                C89 +
            ((C277 - C278) * C180 + (C500 - C501) * C89236) * C90 +
            C514 * C91) *
               C9228 +
           (((C263 * C1724 - C89247 * C1934) * C180 +
             (C263 * C2040 - C89247 * C2240) * C89236) *
                C89 +
            ((C1951 - C1952) * C180 + (C2249 - C2250) * C89236) * C90 +
            C3759 * C91) *
               C89217) *
              C812 +
          ((((C263 * C819 - C89247 * C1029) * C180 +
             (C263 * C1135 - C89247 * C1335) * C89236) *
                C89 +
            ((C1046 - C1047) * C180 + (C1344 - C1345) * C89236) * C90 +
            C3036 * C91) *
               C9228 +
           (((C89247 * C4325 - C263 * C4097) * C180 +
             (C89247 * C4661 - C263 * C4439) * C89236) *
                C89 +
            ((C4334 - C4335) * C180 + (C4666 - C4667) * C89236) * C90 +
            ((C4338 - C4339) * C180 + (C4668 - C4669) * C89236) * C91) *
               C89217) *
              C813 +
          ((((C89247 * C1032 - C263 * C820) * C180 +
             (C89247 * C1338 - C263 * C1138) * C89236) *
                C89 +
            ((C1054 - C1055) * C180 + (C1348 - C1349) * C89236) * C90 +
            ((C1058 - C1059) * C180 + (C1350 - C1351) * C89236) * C91) *
               C9228 +
           (((C263 * C8516 - C89247 * C8680) * C180 +
             (C263 * C8760 - C89247 * C8917) * C89236) *
                C89 +
            ((C263 * C8515 - C89247 * C8681) * C180 +
             (C263 * C8761 - C89247 * C8918) * C89236) *
                C90 +
            ((C263 * C8514 - C89247 * C8682) * C180 +
             (C263 * C8762 - C89247 * C8919) * C89236) *
                C91) *
               C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C13313 +
            (C89247 * C493 - C263 * C346) * C13258 +
            (C13956 - C13957) * C13314 + (C14240 - C14241) * C13259 +
            C13974 * C13315 + C14249 * C13260) *
               C89093 * C9228 +
           ((C263 * C1724 - C89247 * C1934) * C13313 +
            (C263 * C2040 - C89247 * C2240) * C13258 +
            (C16928 - C16929) * C13314 + (C17258 - C17259) * C13259 +
            C21288 * C13315 + C21529 * C13260) *
               C89093 * C89217) *
              C89137 * C5075 +
          (((C278 - C277) * C13313 + (C501 - C500) * C13258 +
            (C1046 - C1047) * C13314 + (C1344 - C1345) * C13259 +
            C13968 * C13315 + C14246 * C13260) *
               C89093 * C9228 +
           ((C1952 - C1951) * C13313 + (C2250 - C2249) * C13258 +
            (C4334 - C4335) * C13314 + (C4666 - C4667) * C13259 +
            (C16936 - C16937) * C13315 + (C17262 - C17263) * C13260) *
               C89093 * C89217) *
              C89137 * C5076 +
          ((C293 * C13313 + C510 * C13258 + (C1051 - C1050) * C13314 +
            (C1347 - C1346) * C13259 + (C1058 - C1059) * C13315 +
            (C1350 - C1351) * C13260) *
               C89093 * C9228 +
           (C3515 * C13313 + C3755 * C13258 + (C4339 - C4338) * C13314 +
            (C4669 - C4668) * C13259 +
            (C263 * C8514 - C89247 * C8682) * C13315 +
            (C263 * C8762 - C89247 * C8919) * C13260) *
               C89093 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C89247 * C264 - C263 * C106) * C13313 +
            (C89247 * C493 - C263 * C346) * C13258 +
            (C13956 - C13957) * C13314 + (C14240 - C14241) * C13259 +
            C13974 * C13315 + C14249 * C13260) *
               C89093 * C9228 +
           ((C263 * C1724 - C89247 * C1934) * C13313 +
            (C263 * C2040 - C89247 * C2240) * C13258 +
            (C16928 - C16929) * C13314 + (C17258 - C17259) * C13259 +
            C21288 * C13315 + C21529 * C13260) *
               C89093 * C89217) *
              C812 +
          (((C13957 - C13956) * C13313 + (C14241 - C14240) * C13258 +
            (C13961 - C13960) * C13314 + (C14243 - C14242) * C13259 +
            C18427 * C13315 + C18596 * C13260) *
               C89093 * C9228 +
           ((C16929 - C16928) * C13313 + (C17259 - C17258) * C13258 +
            (C16933 - C16932) * C13314 + (C17261 - C17260) * C13259 +
            (C21290 - C21291) * C13315 + (C21530 - C21531) * C13260) *
               C89093 * C89217) *
              C813 +
          ((C13974 * C13313 + C14249 * C13258 + (C13965 - C13964) * C13314 +
            (C14245 - C14244) * C13259 + (C18429 - C18430) * C13315 +
            (C18597 - C18598) * C13260) *
               C89093 * C9228 +
           (C21288 * C13313 + C21529 * C13258 + (C21291 - C21290) * C13314 +
            (C21531 - C21530) * C13259 +
            (C263 * C21123 - C89247 * C21285) * C13315 +
            (C263 * C21370 - C89247 * C21527) * C13260) *
               C89093 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eezx[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 + C91 * C116 -
             C104 * C108) *
                C263 +
            (C89 * C571 - C100 * C565 + C90 * C572 - C102 * C566 + C91 * C573 -
             C104 * C567) *
                C89247) *
               C89236 * C9228 +
           ((C100 * C1724 - C89 * C1734 + C102 * C1723 - C90 * C1732 +
             C104 * C1722 - C91 * C1730) *
                C263 +
            (C100 * C2330 - C89 * C2338 + C102 * C2331 - C90 * C2339 +
             C104 * C2332 - C91 * C2340) *
                C89247) *
               C89236 * C89217) *
              C89137 * C5075 +
          (((C100 * C107 - C89 * C114 + C102 * C108 - C90 * C116 + C104 * C109 -
             C91 * C118) *
                C263 +
            (C100 * C566 - C89 * C572 + C102 * C567 - C90 * C573 + C104 * C568 -
             C91 * C574) *
                C89247) *
               C89236 * C9228 +
           ((C89 * C1732 - C100 * C1723 + C90 * C1730 - C102 * C1722 +
             C91 * C1742 - C104 * C1728) *
                C263 +
            (C89 * C2339 - C100 * C2331 + C90 * C2340 - C102 * C2332 +
             C91 * C2344 - C104 * C2336) *
                C89247) *
               C89236 * C89217) *
              C89137 * C5076 +
          (((C89 * C116 - C100 * C108 + C90 * C118 - C102 * C109 + C91 * C120 -
             C104 * C110) *
                C263 +
            (C89 * C573 - C100 * C567 + C90 * C574 - C102 * C568 + C91 * C575 -
             C104 * C569) *
                C89247) *
               C89236 * C9228 +
           ((C100 * C1722 - C89 * C1730 + C102 * C1728 - C90 * C1742 +
             C104 * C3352 - C91 * C3353) *
                C263 +
            (C100 * C2332 - C89 * C2340 + C102 * C2336 - C90 * C2344 +
             C104 * C3833 - C91 * C3834) *
                C89247) *
               C89236 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C89 * C112 - C100 * C106 + C90 * C114 - C102 * C107 + C91 * C116 -
             C104 * C108) *
                C263 +
            (C89 * C571 - C100 * C565 + C90 * C572 - C102 * C566 + C91 * C573 -
             C104 * C567) *
                C89247) *
               C89236 * C9228 +
           ((C100 * C1724 - C89 * C1734 + C102 * C1723 - C90 * C1732 +
             C104 * C1722 - C91 * C1730) *
                C263 +
            (C100 * C2330 - C89 * C2338 + C102 * C2331 - C90 * C2339 +
             C104 * C2332 - C91 * C2340) *
                C89247) *
               C89236 * C89217) *
              C812 +
          (((C100 * C819 - C89 * C829 + C102 * C818 - C90 * C827 + C104 * C817 -
             C91 * C825) *
                C263 +
            (C100 * C1425 - C89 * C1433 + C102 * C1426 - C90 * C1434 +
             C104 * C1427 - C91 * C1435) *
                C89247) *
               C89236 * C9228 +
           ((C89 * C4101 - C100 * C4097 + C90 * C4103 - C102 * C4098 +
             C91 * C4105 - C104 * C4099) *
                C263 +
            (C89 * C4771 - C100 * C4767 + C90 * C4772 - C102 * C4768 +
             C91 * C4773 - C104 * C4769) *
                C89247) *
               C89236 * C89217) *
              C813 +
          (((C89 * C831 - C100 * C820 + C90 * C833 - C102 * C821 + C91 * C835 -
             C104 * C822) *
                C263 +
            (C89 * C1436 - C100 * C1428 + C90 * C1437 - C102 * C1429 +
             C91 * C1438 - C104 * C1430) *
                C89247) *
               C89236 * C9228 +
           ((C100 * C8516 - C89 * C8521 + C102 * C8515 - C90 * C8519 +
             C104 * C8514 - C91 * C8517) *
                C263 +
            (C100 * C8994 - C89 * C8997 + C102 * C8995 - C90 * C8998 +
             C104 * C8996 - C91 * C8999) *
                C89247) *
               C89236 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C263 +
             (C89093 * C571 - C13261 * C565) * C89247) *
                C13258 +
            ((C14060 - C14061) * C263 + (C14328 - C14329) * C89247) * C13259 +
            C14346 * C13260) *
               C9228 +
           (((C13261 * C1724 - C89093 * C1734) * C263 +
             (C13261 * C2330 - C89093 * C2338) * C89247) *
                C13258 +
            ((C17042 - C17043) * C263 + (C17366 - C17367) * C89247) * C13259 +
            C21613 * C13260) *
               C89217) *
              C89137 * C5075 +
          ((((C13261 * C107 - C89093 * C114) * C263 +
             (C13261 * C566 - C89093 * C572) * C89247) *
                C13258 +
            ((C14072 - C14073) * C263 + (C14335 - C14336) * C89247) * C13259 +
            C14347 * C13260) *
               C9228 +
           (((C89093 * C1732 - C13261 * C1723) * C263 +
             (C89093 * C2339 - C13261 * C2331) * C89247) *
                C13258 +
            ((C17050 - C17051) * C263 + (C17370 - C17371) * C89247) * C13259 +
            ((C17054 - C17055) * C263 + (C17372 - C17373) * C89247) * C13260) *
               C89217) *
              C89137 * C5076 +
          ((((C89093 * C116 - C13261 * C108) * C263 +
             (C89093 * C573 - C13261 * C567) * C89247) *
                C13258 +
            ((C15538 - C15539) * C263 + (C15768 - C15769) * C89247) * C13259 +
            ((C15542 - C15543) * C263 + (C15770 - C15771) * C89247) * C13260) *
               C9228 +
           (((C13261 * C1722 - C89093 * C1730) * C263 +
             (C13261 * C2332 - C89093 * C2340) * C89247) *
                C13258 +
            ((C13261 * C4099 - C89093 * C4105) * C263 +
             (C13261 * C4769 - C89093 * C4773) * C89247) *
                C13259 +
            ((C13261 * C8514 - C89093 * C8517) * C263 +
             (C13261 * C8996 - C89093 * C8999) * C89247) *
                C13260) *
               C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C89093 * C112 - C13261 * C106) * C263 +
             (C89093 * C571 - C13261 * C565) * C89247) *
                C13258 +
            ((C14060 - C14061) * C263 + (C14328 - C14329) * C89247) * C13259 +
            C14346 * C13260) *
               C9228 +
           (((C13261 * C1724 - C89093 * C1734) * C263 +
             (C13261 * C2330 - C89093 * C2338) * C89247) *
                C13258 +
            ((C17042 - C17043) * C263 + (C17366 - C17367) * C89247) * C13259 +
            C21613 * C13260) *
               C89217) *
              C812 +
          ((((C14061 - C14060) * C263 + (C14329 - C14328) * C89247) * C13258 +
            ((C14065 - C14064) * C263 + (C14332 - C14331) * C89247) * C13259 +
            C18656 * C13260) *
               C9228 +
           (((C17043 - C17042) * C263 + (C17367 - C17366) * C89247) * C13258 +
            ((C17047 - C17046) * C263 + (C17369 - C17368) * C89247) * C13259 +
            ((C21375 - C21376) * C263 + (C21610 - C21611) * C89247) * C13260) *
               C89217) *
              C813 +
          ((C14346 * C13258 +
            ((C14069 - C14068) * C263 + (C14334 - C14333) * C89247) * C13259 +
            ((C18490 - C18491) * C263 + (C18653 - C18654) * C89247) * C13260) *
               C9228 +
           (C21613 * C13258 +
            ((C21376 - C21375) * C263 + (C21611 - C21610) * C89247) * C13259 +
            ((C13261 * C21123 - C89093 * C21124) * C263 +
             (C13261 * C21605 - C89093 * C21606) * C89247) *
                C13260) *
               C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eezy[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C263 +
             (C89236 * C627 - C180 * C565) * C89247) *
                C89 +
            ((C194 - C195) * C263 + (C634 - C635) * C89247) * C90 +
            C648 * C91) *
               C9228 +
           (((C180 * C1724 - C89236 * C1828) * C263 +
             (C180 * C2330 - C89236 * C2420) * C89247) *
                C89 +
            ((C1845 - C1846) * C263 + (C2429 - C2430) * C89247) * C90 +
            C3916 * C91) *
               C89217) *
              C89137 * C5075 +
          ((((C195 - C194) * C263 + (C635 - C634) * C89247) * C89 +
            ((C199 - C198) * C263 + (C638 - C637) * C89247) * C90 +
            C649 * C91) *
               C9228 +
           (((C1846 - C1845) * C263 + (C2430 - C2429) * C89247) * C89 +
            ((C1850 - C1849) * C263 + (C2432 - C2431) * C89247) * C90 +
            ((C3435 - C3436) * C263 + (C3913 - C3914) * C89247) * C91) *
               C89217) *
              C89137 * C5076 +
          ((C648 * C89 + ((C203 - C202) * C263 + (C641 - C640) * C89247) * C90 +
            ((C206 - C207) * C263 + (C642 - C643) * C89247) * C91) *
               C9228 +
           (C3916 * C89 +
            ((C3436 - C3435) * C263 + (C3914 - C3913) * C89247) * C90 +
            ((C180 * C3352 - C89236 * C3430) * C263 +
             (C180 * C3833 - C89236 * C3909) * C89247) *
                C91) *
               C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C89236 * C181 - C180 * C106) * C263 +
             (C89236 * C627 - C180 * C565) * C89247) *
                C89 +
            ((C194 - C195) * C263 + (C634 - C635) * C89247) * C90 +
            C648 * C91) *
               C9228 +
           (((C180 * C1724 - C89236 * C1828) * C263 +
             (C180 * C2330 - C89236 * C2420) * C89247) *
                C89 +
            ((C1845 - C1846) * C263 + (C2429 - C2430) * C89247) * C90 +
            C3916 * C91) *
               C89217) *
              C812 +
          ((((C180 * C819 - C89236 * C923) * C263 +
             (C180 * C1425 - C89236 * C1515) * C89247) *
                C89 +
            ((C940 - C941) * C263 + (C1524 - C1525) * C89247) * C90 +
            C3193 * C91) *
               C9228 +
           (((C89236 * C4211 - C180 * C4097) * C263 +
             (C89236 * C4873 - C180 * C4767) * C89247) *
                C89 +
            ((C4220 - C4221) * C263 + (C4878 - C4879) * C89247) * C90 +
            ((C4224 - C4225) * C263 + (C4880 - C4881) * C89247) * C91) *
               C89217) *
              C813 +
          ((((C89236 * C926 - C180 * C820) * C263 +
             (C89236 * C1518 - C180 * C1428) * C89247) *
                C89 +
            ((C948 - C949) * C263 + (C1528 - C1529) * C89247) * C90 +
            ((C952 - C953) * C263 + (C1530 - C1531) * C89247) * C91) *
               C9228 +
           (((C180 * C8516 - C89236 * C8600) * C263 +
             (C180 * C8994 - C89236 * C9074) * C89247) *
                C89 +
            ((C180 * C8515 - C89236 * C8601) * C263 +
             (C180 * C8995 - C89236 * C9075) * C89247) *
                C90 +
            ((C180 * C8514 - C89236 * C8602) * C263 +
             (C180 * C8996 - C89236 * C9076) * C89247) *
                C91) *
               C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
             C13260 * C926 - C13315 * C820) *
                C263 +
            (C13258 * C627 - C13313 * C565 + C13259 * C1515 - C13314 * C1425 +
             C13260 * C1518 - C13315 * C1428) *
                C89247) *
               C89093 * C9228 +
           ((C13313 * C1724 - C13258 * C1828 + C13314 * C4097 - C13259 * C4211 +
             C13315 * C8516 - C13260 * C8600) *
                C263 +
            (C13313 * C2330 - C13258 * C2420 + C13314 * C4767 - C13259 * C4873 +
             C13315 * C8994 - C13260 * C9074) *
                C89247) *
               C89093 * C89217) *
              C89137 * C5075 +
          (((C13313 * C107 - C13258 * C182 + C13314 * C818 - C13259 * C924 +
             C13315 * C821 - C13260 * C927) *
                C263 +
            (C13313 * C566 - C13258 * C628 + C13314 * C1426 - C13259 * C1516 +
             C13315 * C1429 - C13260 * C1519) *
                C89247) *
               C89093 * C9228 +
           ((C13258 * C1829 - C13313 * C1723 + C13259 * C4212 - C13314 * C4098 +
             C13260 * C8601 - C13315 * C8515) *
                C263 +
            (C13258 * C2421 - C13313 * C2331 + C13259 * C4874 - C13314 * C4768 +
             C13260 * C9075 - C13315 * C8995) *
                C89247) *
               C89093 * C89217) *
              C89137 * C5076 +
          (((C13258 * C183 - C13313 * C108 + C13259 * C925 - C13314 * C817 +
             C13260 * C928 - C13315 * C822) *
                C263 +
            (C13258 * C629 - C13313 * C567 + C13259 * C1517 - C13314 * C1427 +
             C13260 * C1520 - C13315 * C1430) *
                C89247) *
               C89093 * C9228 +
           ((C13313 * C1722 - C13258 * C1830 + C13314 * C4099 - C13259 * C4213 +
             C13315 * C8514 - C13260 * C8602) *
                C263 +
            (C13313 * C2332 - C13258 * C2422 + C13314 * C4769 - C13259 * C4875 +
             C13315 * C8996 - C13260 * C9076) *
                C89247) *
               C89093 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13258 * C181 - C13313 * C106 + C13259 * C923 - C13314 * C819 +
             C13260 * C926 - C13315 * C820) *
                C263 +
            (C13258 * C627 - C13313 * C565 + C13259 * C1515 - C13314 * C1425 +
             C13260 * C1518 - C13315 * C1428) *
                C89247) *
               C89093 * C9228 +
           ((C13313 * C1724 - C13258 * C1828 + C13314 * C4097 - C13259 * C4211 +
             C13315 * C8516 - C13260 * C8600) *
                C263 +
            (C13313 * C2330 - C13258 * C2420 + C13314 * C4767 - C13259 * C4873 +
             C13315 * C8994 - C13260 * C9074) *
                C89247) *
               C89093 * C89217) *
              C812 +
          (((C13313 * C819 - C13258 * C923 + C13314 * C820 - C13259 * C926 +
             C13315 * C5727 - C13260 * C5787) *
                C263 +
            (C13313 * C1425 - C13258 * C1515 + C13314 * C1428 - C13259 * C1518 +
             C13315 * C6061 - C13260 * C6117) *
                C89247) *
               C89093 * C9228 +
           ((C13258 * C4211 - C13313 * C4097 + C13259 * C8600 - C13314 * C8516 +
             C13260 * C16821 - C13315 * C16683) *
                C263 +
            (C13258 * C4873 - C13313 * C4767 + C13259 * C9074 - C13314 * C8994 +
             C13260 * C17471 - C13315 * C17361) *
                C89247) *
               C89093 * C89217) *
              C813 +
          (((C13258 * C926 - C13313 * C820 + C13259 * C5787 - C13314 * C5727 +
             C13260 * C13873 - C13315 * C13743) *
                C263 +
            (C13258 * C1518 - C13313 * C1428 + C13259 * C6117 - C13314 * C6061 +
             C13260 * C14421 - C13315 * C14323) *
                C89247) *
               C89093 * C9228 +
           ((C13313 * C8516 - C13258 * C8600 + C13314 * C16683 -
             C13259 * C16821 + C13315 * C21123 - C13260 * C21209) *
                C263 +
            (C13313 * C8994 - C13258 * C9074 + C13314 * C17361 -
             C13259 * C17471 + C13315 * C21605 - C13260 * C21687) *
                C89247) *
               C89093 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q));
    d2eezz[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C89236 *
                C89 +
            C735 * C90 + C736 * C91) *
               C9228 -
           (C2547 * C91 + C2548 * C90 +
            (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
                C89236 * C89) *
               C89217) *
              C89137 * C5075 +
          ((C2548 * C89 + C2547 * C90 + C3999 * C91) * C89217 -
           (C737 * C91 + C736 * C90 + C735 * C89) * C9228) *
              C89137 * C5076 +
          ((C736 * C89 + C737 * C90 + C738 * C91) * C9228 -
           ((C263 * C3512 - C699 * C3352 - C263 * C3833 + C89247 * C3990) *
                C89236 * C91 +
            C3999 * C90 + C2547 * C89) *
               C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C89236 *
                C89 +
            C735 * C90 + C736 * C91) *
               C9228 -
           (C2547 * C91 + C2548 * C90 +
            (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
                C89236 * C89) *
               C89217) *
              C812 +
          (((C263 * C4325 - C699 * C4097 - C263 * C4767 + C89247 * C4979) *
                C89236 * C89 +
            C4998 * C90 + C4999 * C91) *
               C89217 -
           (C1642 * C91 + C1643 * C90 +
            (C263 * C1029 - C699 * C819 - C263 * C1425 + C89247 * C1607) *
                C89236 * C89) *
               C9228) *
              C813 +
          (((C263 * C1032 - C699 * C820 - C263 * C1428 + C89247 * C1608) *
                C89236 * C89 +
            C1644 * C90 + C1645 * C91) *
               C9228 -
           ((C263 * C8682 - C699 * C8514 - C263 * C8996 + C89247 * C9151) *
                C89236 * C91 +
            (C263 * C8681 - C699 * C8515 - C263 * C8995 + C89247 * C9152) *
                C89236 * C90 +
            (C263 * C8680 - C699 * C8516 - C263 * C8994 + C89247 * C9153) *
                C89236 * C89) *
               C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C13258 +
            C14524 * C13259 + C14525 * C13260) *
               C89093 * C9228 -
           (C17592 * C13260 + C17593 * C13259 +
            (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
                C13258) *
               C89093 * C89217) *
              C89137 * C5075 +
          ((C2544 * C13258 + C4996 * C13259 + C17594 * C13260) * C89093 *
               C89217 -
           (C1640 * C13260 + C1639 * C13259 + C731 * C13258) * C89093 * C9228) *
              C89137 * C5076 +
          ((C732 * C13258 + C1638 * C13259 + C1641 * C13260) * C89093 * C9228 -
           ((C263 * C8682 - C699 * C8514 - C263 * C8996 + C89247 * C9151) *
                C13260 +
            C4997 * C13259 + C2543 * C13258) *
               C89093 * C89217) *
              C89137 * C5077)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C263 * C264 - C699 * C106 - C263 * C565 + C89247 * C700) * C13258 +
            C14524 * C13259 + C14525 * C13260) *
               C89093 * C9228 -
           (C17592 * C13260 + C17593 * C13259 +
            (C263 * C1934 - C699 * C1724 - C263 * C2330 + C89247 * C2512) *
                C13258) *
               C89093 * C89217) *
              C812 +
          ((C17593 * C13258 + C17592 * C13259 + C21770 * C13260) * C89093 *
               C89217 -
           (C14526 * C13260 + C14525 * C13259 + C14524 * C13258) * C89093 *
               C9228) *
              C813 +
          ((C14525 * C13258 + C14526 * C13259 + C18765 * C13260) * C89093 *
               C9228 -
           ((C263 * C21285 - C699 * C21123 - C263 * C21605 + C89247 * C21762) *
                C13260 +
            C21770 * C13259 + C17592 * C13258) *
               C89093 * C89217) *
              C814) *
         C89118) /
            (p * q * std::sqrt(p + q));
}
